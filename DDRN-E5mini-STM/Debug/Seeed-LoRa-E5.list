
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f3ec  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001054  0801f524  0801f524  0002f524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  08020578  08020578  00030578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08020650  08020650  00040148  2**0
                  CONTENTS
  5 .ARM          00000008  08020650  08020650  00030650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08020658  08020658  00040148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08020658  08020658  00030658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08020660  08020660  00030660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000148  20000000  08020664  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002290  20000148  080207ac  00040148  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200023d8  080207ac  000423d8  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00040148  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00040172  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004f03a  00000000  00000000  000401b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000bdb8  00000000  00000000  0008f1ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003b70  00000000  00000000  0009afa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002d4b  00000000  00000000  0009eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e7c1  00000000  00000000  000a1863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00048aa7  00000000  00000000  000d0024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6d77  00000000  00000000  00118acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000f6e0  00000000  00000000  001ef844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001fef24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000148 	.word	0x20000148
 8000154:	00000000 	.word	0x00000000
 8000158:	0801f50c 	.word	0x0801f50c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000014c 	.word	0x2000014c
 8000174:	0801f50c 	.word	0x0801f50c

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_fmul>:
 8000d40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d48:	bf1e      	ittt	ne
 8000d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4e:	ea92 0f0c 	teqne	r2, ip
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d06f      	beq.n	8000e38 <__aeabi_fmul+0xf8>
 8000d58:	441a      	add	r2, r3
 8000d5a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5e:	0240      	lsls	r0, r0, #9
 8000d60:	bf18      	it	ne
 8000d62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d66:	d01e      	beq.n	8000da6 <__aeabi_fmul+0x66>
 8000d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d74:	fba0 3101 	umull	r3, r1, r0, r1
 8000d78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d80:	bf3e      	ittt	cc
 8000d82:	0049      	lslcc	r1, r1, #1
 8000d84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d88:	005b      	lslcc	r3, r3, #1
 8000d8a:	ea40 0001 	orr.w	r0, r0, r1
 8000d8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d92:	2afd      	cmp	r2, #253	; 0xfd
 8000d94:	d81d      	bhi.n	8000dd2 <__aeabi_fmul+0x92>
 8000d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9e:	bf08      	it	eq
 8000da0:	f020 0001 	biceq.w	r0, r0, #1
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dae:	bf08      	it	eq
 8000db0:	0249      	lsleq	r1, r1, #9
 8000db2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dba:	3a7f      	subs	r2, #127	; 0x7f
 8000dbc:	bfc2      	ittt	gt
 8000dbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc6:	4770      	bxgt	lr
 8000dc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	dc5d      	bgt.n	8000e90 <__aeabi_fmul+0x150>
 8000dd4:	f112 0f19 	cmn.w	r2, #25
 8000dd8:	bfdc      	itt	le
 8000dda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dde:	4770      	bxle	lr
 8000de0:	f1c2 0200 	rsb	r2, r2, #0
 8000de4:	0041      	lsls	r1, r0, #1
 8000de6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dea:	f1c2 0220 	rsb	r2, r2, #32
 8000dee:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df6:	f140 0000 	adc.w	r0, r0, #0
 8000dfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfe:	bf08      	it	eq
 8000e00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e04:	4770      	bx	lr
 8000e06:	f092 0f00 	teq	r2, #0
 8000e0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0040      	lsleq	r0, r0, #1
 8000e12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e16:	3a01      	subeq	r2, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fmul+0xce>
 8000e1a:	ea40 000c 	orr.w	r0, r0, ip
 8000e1e:	f093 0f00 	teq	r3, #0
 8000e22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0049      	lsleq	r1, r1, #1
 8000e2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2e:	3b01      	subeq	r3, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xe6>
 8000e32:	ea41 010c 	orr.w	r1, r1, ip
 8000e36:	e78f      	b.n	8000d58 <__aeabi_fmul+0x18>
 8000e38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	bf18      	it	ne
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d00a      	beq.n	8000e5e <__aeabi_fmul+0x11e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1d8      	bne.n	8000e06 <__aeabi_fmul+0xc6>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	4770      	bx	lr
 8000e5e:	f090 0f00 	teq	r0, #0
 8000e62:	bf17      	itett	ne
 8000e64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e68:	4608      	moveq	r0, r1
 8000e6a:	f091 0f00 	teqne	r1, #0
 8000e6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e72:	d014      	beq.n	8000e9e <__aeabi_fmul+0x15e>
 8000e74:	ea92 0f0c 	teq	r2, ip
 8000e78:	d101      	bne.n	8000e7e <__aeabi_fmul+0x13e>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d10f      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e7e:	ea93 0f0c 	teq	r3, ip
 8000e82:	d103      	bne.n	8000e8c <__aeabi_fmul+0x14c>
 8000e84:	024b      	lsls	r3, r1, #9
 8000e86:	bf18      	it	ne
 8000e88:	4608      	movne	r0, r1
 8000e8a:	d108      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e8c:	ea80 0001 	eor.w	r0, r0, r1
 8000e90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	4770      	bx	lr
 8000e9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_fdiv>:
 8000ea8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb0:	bf1e      	ittt	ne
 8000eb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb6:	ea92 0f0c 	teqne	r2, ip
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d069      	beq.n	8000f94 <__aeabi_fdiv+0xec>
 8000ec0:	eba2 0203 	sub.w	r2, r2, r3
 8000ec4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec8:	0249      	lsls	r1, r1, #9
 8000eca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ece:	d037      	beq.n	8000f40 <__aeabi_fdiv+0x98>
 8000ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	bf38      	it	cc
 8000ee4:	005b      	lslcc	r3, r3, #1
 8000ee6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	bf24      	itt	cs
 8000ef2:	1a5b      	subcs	r3, r3, r1
 8000ef4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0a:	bf24      	itt	cs
 8000f0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f18:	bf24      	itt	cs
 8000f1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	bf18      	it	ne
 8000f26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2a:	d1e0      	bne.n	8000eee <__aeabi_fdiv+0x46>
 8000f2c:	2afd      	cmp	r2, #253	; 0xfd
 8000f2e:	f63f af50 	bhi.w	8000dd2 <__aeabi_fmul+0x92>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f38:	bf08      	it	eq
 8000f3a:	f020 0001 	biceq.w	r0, r0, #1
 8000f3e:	4770      	bx	lr
 8000f40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f48:	327f      	adds	r2, #127	; 0x7f
 8000f4a:	bfc2      	ittt	gt
 8000f4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f54:	4770      	bxgt	lr
 8000f56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	e737      	b.n	8000dd2 <__aeabi_fmul+0x92>
 8000f62:	f092 0f00 	teq	r2, #0
 8000f66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6a:	bf02      	ittt	eq
 8000f6c:	0040      	lsleq	r0, r0, #1
 8000f6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f72:	3a01      	subeq	r2, #1
 8000f74:	d0f9      	beq.n	8000f6a <__aeabi_fdiv+0xc2>
 8000f76:	ea40 000c 	orr.w	r0, r0, ip
 8000f7a:	f093 0f00 	teq	r3, #0
 8000f7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0049      	lsleq	r1, r1, #1
 8000f86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8a:	3b01      	subeq	r3, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xda>
 8000f8e:	ea41 010c 	orr.w	r1, r1, ip
 8000f92:	e795      	b.n	8000ec0 <__aeabi_fdiv+0x18>
 8000f94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d108      	bne.n	8000fb0 <__aeabi_fdiv+0x108>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	f47f af7d 	bne.w	8000e9e <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	f47f af70 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e776      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	d104      	bne.n	8000fc0 <__aeabi_fdiv+0x118>
 8000fb6:	024b      	lsls	r3, r1, #9
 8000fb8:	f43f af4c 	beq.w	8000e54 <__aeabi_fmul+0x114>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e76e      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc4:	bf18      	it	ne
 8000fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fca:	d1ca      	bne.n	8000f62 <__aeabi_fdiv+0xba>
 8000fcc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd0:	f47f af5c 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fd4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd8:	f47f af3c 	bne.w	8000e54 <__aeabi_fmul+0x114>
 8000fdc:	e75f      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_f2iz>:
 8000fe0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe8:	d30f      	bcc.n	800100a <__aeabi_f2iz+0x2a>
 8000fea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff2:	d90d      	bls.n	8001010 <__aeabi_f2iz+0x30>
 8000ff4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ffc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	bf18      	it	ne
 8001006:	4240      	negne	r0, r0
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr
 8001010:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001014:	d101      	bne.n	800101a <__aeabi_f2iz+0x3a>
 8001016:	0242      	lsls	r2, r0, #9
 8001018:	d105      	bne.n	8001026 <__aeabi_f2iz+0x46>
 800101a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800101e:	bf08      	it	eq
 8001020:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001024:	4770      	bx	lr
 8001026:	f04f 0000 	mov.w	r0, #0
 800102a:	4770      	bx	lr

0800102c <__aeabi_f2uiz>:
 800102c:	0042      	lsls	r2, r0, #1
 800102e:	d20e      	bcs.n	800104e <__aeabi_f2uiz+0x22>
 8001030:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001034:	d30b      	bcc.n	800104e <__aeabi_f2uiz+0x22>
 8001036:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800103e:	d409      	bmi.n	8001054 <__aeabi_f2uiz+0x28>
 8001040:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001048:	fa23 f002 	lsr.w	r0, r3, r2
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2uiz+0x32>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d102      	bne.n	8001064 <__aeabi_f2uiz+0x38>
 800105e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001062:	4770      	bx	lr
 8001064:	f04f 0000 	mov.w	r0, #0
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop

0800106c <__aeabi_uldivmod>:
 800106c:	b953      	cbnz	r3, 8001084 <__aeabi_uldivmod+0x18>
 800106e:	b94a      	cbnz	r2, 8001084 <__aeabi_uldivmod+0x18>
 8001070:	2900      	cmp	r1, #0
 8001072:	bf08      	it	eq
 8001074:	2800      	cmpeq	r0, #0
 8001076:	bf1c      	itt	ne
 8001078:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800107c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001080:	f000 b970 	b.w	8001364 <__aeabi_idiv0>
 8001084:	f1ad 0c08 	sub.w	ip, sp, #8
 8001088:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800108c:	f000 f806 	bl	800109c <__udivmoddi4>
 8001090:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001094:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001098:	b004      	add	sp, #16
 800109a:	4770      	bx	lr

0800109c <__udivmoddi4>:
 800109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010a0:	9e08      	ldr	r6, [sp, #32]
 80010a2:	460d      	mov	r5, r1
 80010a4:	4604      	mov	r4, r0
 80010a6:	460f      	mov	r7, r1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d14a      	bne.n	8001142 <__udivmoddi4+0xa6>
 80010ac:	428a      	cmp	r2, r1
 80010ae:	4694      	mov	ip, r2
 80010b0:	d965      	bls.n	800117e <__udivmoddi4+0xe2>
 80010b2:	fab2 f382 	clz	r3, r2
 80010b6:	b143      	cbz	r3, 80010ca <__udivmoddi4+0x2e>
 80010b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80010bc:	f1c3 0220 	rsb	r2, r3, #32
 80010c0:	409f      	lsls	r7, r3
 80010c2:	fa20 f202 	lsr.w	r2, r0, r2
 80010c6:	4317      	orrs	r7, r2
 80010c8:	409c      	lsls	r4, r3
 80010ca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80010ce:	fa1f f58c 	uxth.w	r5, ip
 80010d2:	fbb7 f1fe 	udiv	r1, r7, lr
 80010d6:	0c22      	lsrs	r2, r4, #16
 80010d8:	fb0e 7711 	mls	r7, lr, r1, r7
 80010dc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80010e0:	fb01 f005 	mul.w	r0, r1, r5
 80010e4:	4290      	cmp	r0, r2
 80010e6:	d90a      	bls.n	80010fe <__udivmoddi4+0x62>
 80010e8:	eb1c 0202 	adds.w	r2, ip, r2
 80010ec:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80010f0:	f080 811b 	bcs.w	800132a <__udivmoddi4+0x28e>
 80010f4:	4290      	cmp	r0, r2
 80010f6:	f240 8118 	bls.w	800132a <__udivmoddi4+0x28e>
 80010fa:	3902      	subs	r1, #2
 80010fc:	4462      	add	r2, ip
 80010fe:	1a12      	subs	r2, r2, r0
 8001100:	b2a4      	uxth	r4, r4
 8001102:	fbb2 f0fe 	udiv	r0, r2, lr
 8001106:	fb0e 2210 	mls	r2, lr, r0, r2
 800110a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800110e:	fb00 f505 	mul.w	r5, r0, r5
 8001112:	42a5      	cmp	r5, r4
 8001114:	d90a      	bls.n	800112c <__udivmoddi4+0x90>
 8001116:	eb1c 0404 	adds.w	r4, ip, r4
 800111a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800111e:	f080 8106 	bcs.w	800132e <__udivmoddi4+0x292>
 8001122:	42a5      	cmp	r5, r4
 8001124:	f240 8103 	bls.w	800132e <__udivmoddi4+0x292>
 8001128:	4464      	add	r4, ip
 800112a:	3802      	subs	r0, #2
 800112c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001130:	1b64      	subs	r4, r4, r5
 8001132:	2100      	movs	r1, #0
 8001134:	b11e      	cbz	r6, 800113e <__udivmoddi4+0xa2>
 8001136:	40dc      	lsrs	r4, r3
 8001138:	2300      	movs	r3, #0
 800113a:	e9c6 4300 	strd	r4, r3, [r6]
 800113e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001142:	428b      	cmp	r3, r1
 8001144:	d908      	bls.n	8001158 <__udivmoddi4+0xbc>
 8001146:	2e00      	cmp	r6, #0
 8001148:	f000 80ec 	beq.w	8001324 <__udivmoddi4+0x288>
 800114c:	2100      	movs	r1, #0
 800114e:	e9c6 0500 	strd	r0, r5, [r6]
 8001152:	4608      	mov	r0, r1
 8001154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001158:	fab3 f183 	clz	r1, r3
 800115c:	2900      	cmp	r1, #0
 800115e:	d149      	bne.n	80011f4 <__udivmoddi4+0x158>
 8001160:	42ab      	cmp	r3, r5
 8001162:	d302      	bcc.n	800116a <__udivmoddi4+0xce>
 8001164:	4282      	cmp	r2, r0
 8001166:	f200 80f7 	bhi.w	8001358 <__udivmoddi4+0x2bc>
 800116a:	1a84      	subs	r4, r0, r2
 800116c:	eb65 0203 	sbc.w	r2, r5, r3
 8001170:	2001      	movs	r0, #1
 8001172:	4617      	mov	r7, r2
 8001174:	2e00      	cmp	r6, #0
 8001176:	d0e2      	beq.n	800113e <__udivmoddi4+0xa2>
 8001178:	e9c6 4700 	strd	r4, r7, [r6]
 800117c:	e7df      	b.n	800113e <__udivmoddi4+0xa2>
 800117e:	b902      	cbnz	r2, 8001182 <__udivmoddi4+0xe6>
 8001180:	deff      	udf	#255	; 0xff
 8001182:	fab2 f382 	clz	r3, r2
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 808f 	bne.w	80012aa <__udivmoddi4+0x20e>
 800118c:	1a8a      	subs	r2, r1, r2
 800118e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001192:	fa1f fe8c 	uxth.w	lr, ip
 8001196:	2101      	movs	r1, #1
 8001198:	fbb2 f5f7 	udiv	r5, r2, r7
 800119c:	fb07 2015 	mls	r0, r7, r5, r2
 80011a0:	0c22      	lsrs	r2, r4, #16
 80011a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011a6:	fb0e f005 	mul.w	r0, lr, r5
 80011aa:	4290      	cmp	r0, r2
 80011ac:	d908      	bls.n	80011c0 <__udivmoddi4+0x124>
 80011ae:	eb1c 0202 	adds.w	r2, ip, r2
 80011b2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80011b6:	d202      	bcs.n	80011be <__udivmoddi4+0x122>
 80011b8:	4290      	cmp	r0, r2
 80011ba:	f200 80ca 	bhi.w	8001352 <__udivmoddi4+0x2b6>
 80011be:	4645      	mov	r5, r8
 80011c0:	1a12      	subs	r2, r2, r0
 80011c2:	b2a4      	uxth	r4, r4
 80011c4:	fbb2 f0f7 	udiv	r0, r2, r7
 80011c8:	fb07 2210 	mls	r2, r7, r0, r2
 80011cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011d0:	fb0e fe00 	mul.w	lr, lr, r0
 80011d4:	45a6      	cmp	lr, r4
 80011d6:	d908      	bls.n	80011ea <__udivmoddi4+0x14e>
 80011d8:	eb1c 0404 	adds.w	r4, ip, r4
 80011dc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80011e0:	d202      	bcs.n	80011e8 <__udivmoddi4+0x14c>
 80011e2:	45a6      	cmp	lr, r4
 80011e4:	f200 80ba 	bhi.w	800135c <__udivmoddi4+0x2c0>
 80011e8:	4610      	mov	r0, r2
 80011ea:	eba4 040e 	sub.w	r4, r4, lr
 80011ee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80011f2:	e79f      	b.n	8001134 <__udivmoddi4+0x98>
 80011f4:	f1c1 0720 	rsb	r7, r1, #32
 80011f8:	408b      	lsls	r3, r1
 80011fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80011fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8001202:	fa05 f401 	lsl.w	r4, r5, r1
 8001206:	fa20 f307 	lsr.w	r3, r0, r7
 800120a:	40fd      	lsrs	r5, r7
 800120c:	4323      	orrs	r3, r4
 800120e:	fa00 f901 	lsl.w	r9, r0, r1
 8001212:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8001216:	fa1f fe8c 	uxth.w	lr, ip
 800121a:	fbb5 f8f0 	udiv	r8, r5, r0
 800121e:	0c1c      	lsrs	r4, r3, #16
 8001220:	fb00 5518 	mls	r5, r0, r8, r5
 8001224:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001228:	fb08 f50e 	mul.w	r5, r8, lr
 800122c:	42a5      	cmp	r5, r4
 800122e:	fa02 f201 	lsl.w	r2, r2, r1
 8001232:	d90b      	bls.n	800124c <__udivmoddi4+0x1b0>
 8001234:	eb1c 0404 	adds.w	r4, ip, r4
 8001238:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800123c:	f080 8087 	bcs.w	800134e <__udivmoddi4+0x2b2>
 8001240:	42a5      	cmp	r5, r4
 8001242:	f240 8084 	bls.w	800134e <__udivmoddi4+0x2b2>
 8001246:	f1a8 0802 	sub.w	r8, r8, #2
 800124a:	4464      	add	r4, ip
 800124c:	1b64      	subs	r4, r4, r5
 800124e:	b29d      	uxth	r5, r3
 8001250:	fbb4 f3f0 	udiv	r3, r4, r0
 8001254:	fb00 4413 	mls	r4, r0, r3, r4
 8001258:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800125c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001260:	45a6      	cmp	lr, r4
 8001262:	d908      	bls.n	8001276 <__udivmoddi4+0x1da>
 8001264:	eb1c 0404 	adds.w	r4, ip, r4
 8001268:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800126c:	d26b      	bcs.n	8001346 <__udivmoddi4+0x2aa>
 800126e:	45a6      	cmp	lr, r4
 8001270:	d969      	bls.n	8001346 <__udivmoddi4+0x2aa>
 8001272:	3b02      	subs	r3, #2
 8001274:	4464      	add	r4, ip
 8001276:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800127a:	fba0 8302 	umull	r8, r3, r0, r2
 800127e:	eba4 040e 	sub.w	r4, r4, lr
 8001282:	429c      	cmp	r4, r3
 8001284:	46c6      	mov	lr, r8
 8001286:	461d      	mov	r5, r3
 8001288:	d355      	bcc.n	8001336 <__udivmoddi4+0x29a>
 800128a:	d052      	beq.n	8001332 <__udivmoddi4+0x296>
 800128c:	b156      	cbz	r6, 80012a4 <__udivmoddi4+0x208>
 800128e:	ebb9 030e 	subs.w	r3, r9, lr
 8001292:	eb64 0405 	sbc.w	r4, r4, r5
 8001296:	fa04 f707 	lsl.w	r7, r4, r7
 800129a:	40cb      	lsrs	r3, r1
 800129c:	40cc      	lsrs	r4, r1
 800129e:	431f      	orrs	r7, r3
 80012a0:	e9c6 7400 	strd	r7, r4, [r6]
 80012a4:	2100      	movs	r1, #0
 80012a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012aa:	f1c3 0120 	rsb	r1, r3, #32
 80012ae:	fa02 fc03 	lsl.w	ip, r2, r3
 80012b2:	fa20 f201 	lsr.w	r2, r0, r1
 80012b6:	fa25 f101 	lsr.w	r1, r5, r1
 80012ba:	409d      	lsls	r5, r3
 80012bc:	432a      	orrs	r2, r5
 80012be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012c2:	fa1f fe8c 	uxth.w	lr, ip
 80012c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80012ca:	fb07 1510 	mls	r5, r7, r0, r1
 80012ce:	0c11      	lsrs	r1, r2, #16
 80012d0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80012d4:	fb00 f50e 	mul.w	r5, r0, lr
 80012d8:	428d      	cmp	r5, r1
 80012da:	fa04 f403 	lsl.w	r4, r4, r3
 80012de:	d908      	bls.n	80012f2 <__udivmoddi4+0x256>
 80012e0:	eb1c 0101 	adds.w	r1, ip, r1
 80012e4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80012e8:	d22f      	bcs.n	800134a <__udivmoddi4+0x2ae>
 80012ea:	428d      	cmp	r5, r1
 80012ec:	d92d      	bls.n	800134a <__udivmoddi4+0x2ae>
 80012ee:	3802      	subs	r0, #2
 80012f0:	4461      	add	r1, ip
 80012f2:	1b49      	subs	r1, r1, r5
 80012f4:	b292      	uxth	r2, r2
 80012f6:	fbb1 f5f7 	udiv	r5, r1, r7
 80012fa:	fb07 1115 	mls	r1, r7, r5, r1
 80012fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001302:	fb05 f10e 	mul.w	r1, r5, lr
 8001306:	4291      	cmp	r1, r2
 8001308:	d908      	bls.n	800131c <__udivmoddi4+0x280>
 800130a:	eb1c 0202 	adds.w	r2, ip, r2
 800130e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001312:	d216      	bcs.n	8001342 <__udivmoddi4+0x2a6>
 8001314:	4291      	cmp	r1, r2
 8001316:	d914      	bls.n	8001342 <__udivmoddi4+0x2a6>
 8001318:	3d02      	subs	r5, #2
 800131a:	4462      	add	r2, ip
 800131c:	1a52      	subs	r2, r2, r1
 800131e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001322:	e739      	b.n	8001198 <__udivmoddi4+0xfc>
 8001324:	4631      	mov	r1, r6
 8001326:	4630      	mov	r0, r6
 8001328:	e709      	b.n	800113e <__udivmoddi4+0xa2>
 800132a:	4639      	mov	r1, r7
 800132c:	e6e7      	b.n	80010fe <__udivmoddi4+0x62>
 800132e:	4610      	mov	r0, r2
 8001330:	e6fc      	b.n	800112c <__udivmoddi4+0x90>
 8001332:	45c1      	cmp	r9, r8
 8001334:	d2aa      	bcs.n	800128c <__udivmoddi4+0x1f0>
 8001336:	ebb8 0e02 	subs.w	lr, r8, r2
 800133a:	eb63 050c 	sbc.w	r5, r3, ip
 800133e:	3801      	subs	r0, #1
 8001340:	e7a4      	b.n	800128c <__udivmoddi4+0x1f0>
 8001342:	4645      	mov	r5, r8
 8001344:	e7ea      	b.n	800131c <__udivmoddi4+0x280>
 8001346:	4603      	mov	r3, r0
 8001348:	e795      	b.n	8001276 <__udivmoddi4+0x1da>
 800134a:	4640      	mov	r0, r8
 800134c:	e7d1      	b.n	80012f2 <__udivmoddi4+0x256>
 800134e:	46d0      	mov	r8, sl
 8001350:	e77c      	b.n	800124c <__udivmoddi4+0x1b0>
 8001352:	3d02      	subs	r5, #2
 8001354:	4462      	add	r2, ip
 8001356:	e733      	b.n	80011c0 <__udivmoddi4+0x124>
 8001358:	4608      	mov	r0, r1
 800135a:	e70b      	b.n	8001174 <__udivmoddi4+0xd8>
 800135c:	4464      	add	r4, ip
 800135e:	3802      	subs	r0, #2
 8001360:	e743      	b.n	80011ea <__udivmoddi4+0x14e>
 8001362:	bf00      	nop

08001364 <__aeabi_idiv0>:
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop

08001368 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4313      	orrs	r3, r2
 800137e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001384:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800138c:	68fb      	ldr	r3, [r7, #12]
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013bc:	68fb      	ldr	r3, [r7, #12]
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80013d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	43db      	mvns	r3, r3
 80013da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013de:	4013      	ands	r3, r2
 80013e0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <MX_ADC_Init+0x94>)
 80013f2:	4a24      	ldr	r2, [pc, #144]	; (8001484 <MX_ADC_Init+0x98>)
 80013f4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <MX_ADC_Init+0x94>)
 80013f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013fc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_ADC_Init+0x94>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_ADC_Init+0x94>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_ADC_Init+0x94>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_ADC_Init+0x94>)
 8001412:	2204      	movs	r2, #4
 8001414:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_ADC_Init+0x94>)
 8001418:	2200      	movs	r2, #0
 800141a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_ADC_Init+0x94>)
 800141e:	2200      	movs	r2, #0
 8001420:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_ADC_Init+0x94>)
 8001424:	2200      	movs	r2, #0
 8001426:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <MX_ADC_Init+0x94>)
 800142a:	2201      	movs	r2, #1
 800142c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_ADC_Init+0x94>)
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_ADC_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_ADC_Init+0x94>)
 800143e:	2200      	movs	r2, #0
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_ADC_Init+0x94>)
 8001444:	2200      	movs	r2, #0
 8001446:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <MX_ADC_Init+0x94>)
 800144c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001450:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_ADC_Init+0x94>)
 8001454:	2207      	movs	r2, #7
 8001456:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_ADC_Init+0x94>)
 800145a:	2207      	movs	r2, #7
 800145c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_ADC_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_ADC_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <MX_ADC_Init+0x94>)
 800146e:	f004 f831 	bl	80054d4 <HAL_ADC_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001478:	f000 fd46 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000164 	.word	0x20000164
 8001484:	40012400 	.word	0x40012400

08001488 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <HAL_ADC_MspInit+0x54>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d113      	bne.n	80014d2 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014ae:	f7ff ff73 	bl	8001398 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2002      	movs	r0, #2
 80014b4:	f7ff ff58 	bl	8001368 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = SiPM_Temp_Pin|SiPM_Signal_Pin|Battery_Monitor_Pin;
 80014b8:	f242 0318 	movw	r3, #8216	; 0x2018
 80014bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014be:	2303      	movs	r3, #3
 80014c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	4619      	mov	r1, r3
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <HAL_ADC_MspInit+0x58>)
 80014ce:	f005 fe01 	bl	80070d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80014d2:	bf00      	nop
 80014d4:	3720      	adds	r7, #32
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40012400 	.word	0x40012400
 80014e0:	48000400 	.word	0x48000400

080014e4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a07      	ldr	r2, [pc, #28]	; (8001510 <HAL_ADC_MspDeInit+0x2c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d108      	bne.n	8001508 <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80014f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014fa:	f7ff ff65 	bl	80013c8 <LL_APB2_GRP1_DisableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, SiPM_Temp_Pin|SiPM_Signal_Pin|Battery_Monitor_Pin);
 80014fe:	f242 0118 	movw	r1, #8216	; 0x2018
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <HAL_ADC_MspDeInit+0x30>)
 8001504:	f005 ff46 	bl	8007394 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40012400 	.word	0x40012400
 8001514:	48000400 	.word	0x48000400

08001518 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <SYS_InitMeasurement+0x14>)
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <SYS_InitMeasurement+0x18>)
 8001520:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000164 	.word	0x20000164
 8001530:	40012400 	.word	0x40012400

08001534 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001542:	4813      	ldr	r0, [pc, #76]	; (8001590 <SYS_GetBatteryLevel+0x5c>)
 8001544:	f000 f82a 	bl	800159c <ADC_ReadChannels>
 8001548:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	80fb      	strh	r3, [r7, #6]
 8001554:	e016      	b.n	8001584 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <SYS_GetBatteryLevel+0x60>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155e:	4293      	cmp	r3, r2
 8001560:	d00b      	beq.n	800157a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <SYS_GetBatteryLevel+0x60>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	f640 43e4 	movw	r3, #3300	; 0xce4
 800156c:	fb03 f202 	mul.w	r2, r3, r2
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	80fb      	strh	r3, [r7, #6]
 8001578:	e004      	b.n	8001584 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800157a:	4a07      	ldr	r2, [pc, #28]	; (8001598 <SYS_GetBatteryLevel+0x64>)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001584:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	b4002000 	.word	0xb4002000
 8001594:	1fff75aa 	.word	0x1fff75aa
 8001598:	004c08d8 	.word	0x004c08d8

0800159c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80015b4:	f7ff ff1a 	bl	80013ec <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80015b8:	481a      	ldr	r0, [pc, #104]	; (8001624 <ADC_ReadChannels+0x88>)
 80015ba:	f004 fdaa 	bl	8006112 <HAL_ADCEx_Calibration_Start>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80015c4:	f000 fca0 	bl	8001f08 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	4619      	mov	r1, r3
 80015da:	4812      	ldr	r0, [pc, #72]	; (8001624 <ADC_ReadChannels+0x88>)
 80015dc:	f004 fab6 	bl	8005b4c <HAL_ADC_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80015e6:	f000 fc8f 	bl	8001f08 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80015ea:	480e      	ldr	r0, [pc, #56]	; (8001624 <ADC_ReadChannels+0x88>)
 80015ec:	f004 f992 	bl	8005914 <HAL_ADC_Start>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80015f6:	f000 fc87 	bl	8001f08 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80015fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015fe:	4809      	ldr	r0, [pc, #36]	; (8001624 <ADC_ReadChannels+0x88>)
 8001600:	f004 fa00 	bl	8005a04 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001604:	4807      	ldr	r0, [pc, #28]	; (8001624 <ADC_ReadChannels+0x88>)
 8001606:	f004 f9cb 	bl	80059a0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <ADC_ReadChannels+0x88>)
 800160c:	f004 fa91 	bl	8005b32 <HAL_ADC_GetValue>
 8001610:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001612:	4804      	ldr	r0, [pc, #16]	; (8001624 <ADC_ReadChannels+0x88>)
 8001614:	f004 f8f2 	bl	80057fc <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001618:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000164 	.word	0x20000164

08001628 <LL_AHB1_GRP1_EnableClock>:
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001634:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4313      	orrs	r3, r2
 800163e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001644:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800164c:	68fb      	ldr	r3, [r7, #12]
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800165c:	2004      	movs	r0, #4
 800165e:	f7ff ffe3 	bl	8001628 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001662:	2001      	movs	r0, #1
 8001664:	f7ff ffe0 	bl	8001628 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2102      	movs	r1, #2
 800166c:	200b      	movs	r0, #11
 800166e:	f004 fef6 	bl	800645e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001672:	200b      	movs	r0, #11
 8001674:	f004 ff0d 	bl	8006492 <HAL_NVIC_EnableIRQ>

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001688:	23ff      	movs	r3, #255	; 0xff
 800168a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001692:	d311      	bcc.n	80016b8 <FLASH_IF_Write+0x3c>
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <FLASH_IF_Write+0x48>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	029a      	lsls	r2, r3, #10
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <FLASH_IF_Write+0x4c>)
 800169c:	4013      	ands	r3, r2
 800169e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80016a2:	3b01      	subs	r3, #1
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d306      	bcc.n	80016b8 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 f85a 	bl	8001768 <FLASH_IF_INT_Write>
 80016b4:	4603      	mov	r3, r0
 80016b6:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 80016b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	1fff75e0 	.word	0x1fff75e0
 80016c8:	03fffc00 	.word	0x03fffc00

080016cc <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80016d8:	23ff      	movs	r3, #255	; 0xff
 80016da:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80016e2:	d311      	bcc.n	8001708 <FLASH_IF_Read+0x3c>
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <FLASH_IF_Read+0x48>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	029a      	lsls	r2, r3, #10
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <FLASH_IF_Read+0x4c>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80016f2:	3b01      	subs	r3, #1
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d306      	bcc.n	8001708 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f93a 	bl	8001978 <FLASH_IF_INT_Read>
 8001704:	4603      	mov	r3, r0
 8001706:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001708:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	1fff75e0 	.word	0x1fff75e0
 8001718:	03fffc00 	.word	0x03fffc00

0800171c <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001726:	23ff      	movs	r3, #255	; 0xff
 8001728:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001730:	d310      	bcc.n	8001754 <FLASH_IF_Erase+0x38>
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <FLASH_IF_Erase+0x44>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	029a      	lsls	r2, r3, #10
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <FLASH_IF_Erase+0x48>)
 800173a:	4013      	ands	r3, r2
 800173c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001740:	3b01      	subs	r3, #1
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	4293      	cmp	r3, r2
 8001746:	d305      	bcc.n	8001754 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001748:	6839      	ldr	r1, [r7, #0]
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f932 	bl	80019b4 <FLASH_IF_INT_Erase>
 8001750:	4603      	mov	r3, r0
 8001752:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001754:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	1fff75e0 	.word	0x1fff75e0
 8001764:	03fffc00 	.word	0x03fffc00

08001768 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b090      	sub	sp, #64	; 0x40
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00c      	beq.n	80017a6 <FLASH_IF_INT_Write+0x3e>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <FLASH_IF_INT_Write+0x3e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	2b00      	cmp	r3, #0
 800179a:	d104      	bne.n	80017a6 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80017a6:	f06f 0305 	mvn.w	r3, #5
 80017aa:	e0da      	b.n	8001962 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80017ac:	f000 f992 	bl	8001ad4 <FLASH_IF_INT_Clear_Error>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 80017b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f040 80cf 	bne.w	800195e <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80017c0:	f005 fab2 	bl	8006d28 <HAL_FLASH_Unlock>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f040 80c6 	bne.w	8001958 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 80017cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ce:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80017d2:	4b66      	ldr	r3, [pc, #408]	; (800196c <FLASH_IF_INT_Write+0x204>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0299      	lsls	r1, r3, #10
 80017d8:	4b65      	ldr	r3, [pc, #404]	; (8001970 <FLASH_IF_INT_Write+0x208>)
 80017da:	400b      	ands	r3, r1
 80017dc:	fbb2 f1f3 	udiv	r1, r2, r3
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	0adb      	lsrs	r3, r3, #11
 80017e8:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 80017ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80017f4:	3b01      	subs	r3, #1
 80017f6:	4a5d      	ldr	r2, [pc, #372]	; (800196c <FLASH_IF_INT_Write+0x204>)
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	0291      	lsls	r1, r2, #10
 80017fc:	4a5c      	ldr	r2, [pc, #368]	; (8001970 <FLASH_IF_INT_Write+0x208>)
 80017fe:	400a      	ands	r2, r1
 8001800:	fbb3 f1f2 	udiv	r1, r3, r2
 8001804:	fb01 f202 	mul.w	r2, r1, r2
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	0ada      	lsrs	r2, r3, #11
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d905      	bls.n	8001826 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800181a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800181c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001820:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800182a:	e089      	b.n	8001940 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 800182c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001832:	02db      	lsls	r3, r3, #11
 8001834:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001836:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 f925 	bl	8001a88 <FLASH_IF_INT_IsEmpty>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d031      	beq.n	80018a8 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001844:	4b4b      	ldr	r3, [pc, #300]	; (8001974 <FLASH_IF_INT_Write+0x20c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d103      	bne.n	8001854 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 800184c:	23fa      	movs	r3, #250	; 0xfa
 800184e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001852:	e07e      	b.n	8001952 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001854:	4b47      	ldr	r3, [pc, #284]	; (8001974 <FLASH_IF_INT_Write+0x20c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6939      	ldr	r1, [r7, #16]
 800185a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f88a 	bl	8001978 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001864:	4b43      	ldr	r3, [pc, #268]	; (8001974 <FLASH_IF_INT_Write+0x20c>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800186a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800186e:	4413      	add	r3, r2
 8001870:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001874:	b292      	uxth	r2, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f01c faca 	bl	801de10 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f896 	bl	80019b4 <FLASH_IF_INT_Erase>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800188e:	23fe      	movs	r3, #254	; 0xfe
 8001890:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001894:	e05d      	b.n	8001952 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 800189a:	4b36      	ldr	r3, [pc, #216]	; (8001974 <FLASH_IF_INT_Write+0x20c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80018a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	e005      	b.n	80018b4 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 80018a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 80018ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ae:	623b      	str	r3, [r7, #32]
          current_length = length;
 80018b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b2:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80018b4:	2300      	movs	r3, #0
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018b8:	e026      	b.n	8001908 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80018ba:	6a3a      	ldr	r2, [r7, #32]
 80018bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018be:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018c6:	2001      	movs	r0, #1
 80018c8:	f005 f9ea 	bl	8006ca0 <HAL_FLASH_Program>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d113      	bne.n	80018fa <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d8:	6a3a      	ldr	r2, [r7, #32]
 80018da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018dc:	4413      	add	r3, r2
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	4299      	cmp	r1, r3
 80018e4:	bf08      	it	eq
 80018e6:	4290      	cmpeq	r0, r2
 80018e8:	d003      	beq.n	80018f2 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 80018ea:	23fc      	movs	r3, #252	; 0xfc
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 80018f0:	e00e      	b.n	8001910 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	3308      	adds	r3, #8
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
 80018f8:	e003      	b.n	8001902 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80018fa:	23fc      	movs	r3, #252	; 0xfc
 80018fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 8001900:	e006      	b.n	8001910 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001904:	3308      	adds	r3, #8
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
 8001908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	429a      	cmp	r2, r3
 800190e:	d3d4      	bcc.n	80018ba <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001910:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001914:	2b00      	cmp	r3, #0
 8001916:	d11b      	bne.n	8001950 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800191a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800191c:	4413      	add	r3, r2
 800191e:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 8001920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001924:	4413      	add	r3, r2
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001932:	bf28      	it	cs
 8001934:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001938:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	3301      	adds	r3, #1
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	4413      	add	r3, r2
 8001946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001948:	429a      	cmp	r2, r3
 800194a:	f4ff af6f 	bcc.w	800182c <FLASH_IF_INT_Write+0xc4>
 800194e:	e000      	b.n	8001952 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001950:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001952:	f005 fa0b 	bl	8006d6c <HAL_FLASH_Lock>
 8001956:	e002      	b.n	800195e <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001958:	23fb      	movs	r3, #251	; 0xfb
 800195a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 800195e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001962:	4618      	mov	r0, r3
 8001964:	3740      	adds	r7, #64	; 0x40
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	1fff75e0 	.word	0x1fff75e0
 8001970:	03fffc00 	.word	0x03fffc00
 8001974:	200001c8 	.word	0x200001c8

08001978 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <FLASH_IF_INT_Read+0x1c>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001994:	f06f 0305 	mvn.w	r3, #5
 8001998:	e008      	b.n	80019ac <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	b29b      	uxth	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f01c fa34 	bl	801de10 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 80019a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 80019d4:	f06f 0305 	mvn.w	r3, #5
 80019d8:	e04e      	b.n	8001a78 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80019da:	f000 f87b 	bl	8001ad4 <FLASH_IF_INT_Clear_Error>
 80019de:	4603      	mov	r3, r0
 80019e0:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 80019e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d144      	bne.n	8001a74 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80019ea:	f005 f99d 	bl	8006d28 <HAL_FLASH_Unlock>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d13d      	bne.n	8001a70 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80019f4:	2302      	movs	r3, #2
 80019f6:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <FLASH_IF_INT_Erase+0xcc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	0299      	lsls	r1, r3, #10
 8001a04:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <FLASH_IF_INT_Erase+0xd0>)
 8001a06:	400b      	ands	r3, r1
 8001a08:	fbb2 f1f3 	udiv	r1, r2, r3
 8001a0c:	fb01 f303 	mul.w	r3, r1, r3
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	0adb      	lsrs	r3, r3, #11
 8001a14:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001a20:	3b01      	subs	r3, #1
 8001a22:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <FLASH_IF_INT_Erase+0xcc>)
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	0291      	lsls	r1, r2, #10
 8001a28:	4a16      	ldr	r2, [pc, #88]	; (8001a84 <FLASH_IF_INT_Erase+0xd0>)
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a30:	fb01 f202 	mul.w	r2, r1, r2
 8001a34:	1a9b      	subs	r3, r3, r2
 8001a36:	0ada      	lsrs	r2, r3, #11
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001a40:	f107 0214 	add.w	r2, r7, #20
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f005 fa6e 	bl	8006f2c <HAL_FLASHEx_Erase>
 8001a50:	4603      	mov	r3, r0
 8001a52:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001a54:	7fbb      	ldrb	r3, [r7, #30]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001a5a:	7fbb      	ldrb	r3, [r7, #30]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d101      	bne.n	8001a64 <FLASH_IF_INT_Erase+0xb0>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e001      	b.n	8001a68 <FLASH_IF_INT_Erase+0xb4>
 8001a64:	f06f 0301 	mvn.w	r3, #1
 8001a68:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001a6a:	f005 f97f 	bl	8006d6c <HAL_FLASH_Lock>
 8001a6e:	e001      	b.n	8001a74 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001a70:	23fb      	movs	r3, #251	; 0xfb
 8001a72:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001a74:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3720      	adds	r7, #32
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	1fff75e0 	.word	0x1fff75e0
 8001a84:	03fffc00 	.word	0x03fffc00

08001a88 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	e011      	b.n	8001ac0 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aa6:	bf08      	it	eq
 8001aa8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8001aac:	d002      	beq.n	8001ab4 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
      break;
 8001ab2:	e009      	b.n	8001ac8 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3308      	adds	r3, #8
 8001ab8:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	3308      	adds	r3, #8
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d3e9      	bcc.n	8001a9c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001ada:	23fb      	movs	r3, #251	; 0xfb
 8001adc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001ade:	f005 f923 	bl	8006d28 <HAL_FLASH_Unlock>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d110      	bne.n	8001b0a <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <FLASH_IF_INT_Clear_Error+0x44>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <FLASH_IF_INT_Clear_Error+0x44>)
 8001aee:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <FLASH_IF_INT_Clear_Error+0x44>)
 8001af6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001afa:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001afc:	f005 f936 	bl	8006d6c <HAL_FLASH_Lock>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	58004000 	.word	0x58004000

08001b1c <LL_AHB2_GRP1_EnableClock>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b40:	68fb      	ldr	r3, [r7, #12]
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	2001      	movs	r0, #1
 8001b62:	f7ff ffdb 	bl	8001b1c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	2002      	movs	r0, #2
 8001b68:	f7ff ffd8 	bl	8001b1c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6c:	2004      	movs	r0, #4
 8001b6e:	f7ff ffd5 	bl	8001b1c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Memory_CS_Pin|Env_Sens_Enable_Pin, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001b78:	482b      	ldr	r0, [pc, #172]	; (8001c28 <MX_GPIO_Init+0xdc>)
 8001b7a:	f005 fcd9 	bl	8007530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Bias_CS_Pin|Anneal_Enable_Pin|Bias_Enable_Pin|Stim_Enable_Pin
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f240 413d 	movw	r1, #1085	; 0x43d
 8001b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b88:	f005 fcd2 	bl	8007530 <HAL_GPIO_WritePin>
                          |RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2120      	movs	r1, #32
 8001b90:	4825      	ldr	r0, [pc, #148]	; (8001c28 <MX_GPIO_Init+0xdc>)
 8001b92:	f005 fccd 	bl	8007530 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Memory_CS_Pin|Env_Sens_Enable_Pin;
 8001b96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	481e      	ldr	r0, [pc, #120]	; (8001c28 <MX_GPIO_Init+0xdc>)
 8001bae:	f005 fa91 	bl	80070d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Bias_CS_Pin|Anneal_Enable_Pin|Bias_Enable_Pin|Stim_Enable_Pin;
 8001bb2:	f240 430d 	movw	r3, #1037	; 0x40d
 8001bb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bcc:	f005 fa82 	bl	80070d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001bd0:	2320      	movs	r3, #32
 8001bd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	4619      	mov	r1, r3
 8001be4:	4810      	ldr	r0, [pc, #64]	; (8001c28 <MX_GPIO_Init+0xdc>)
 8001be6:	f005 fa75 	bl	80070d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Accel_Int_Pin;
 8001bea:	2301      	movs	r3, #1
 8001bec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Accel_Int_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480b      	ldr	r0, [pc, #44]	; (8001c2c <MX_GPIO_Init+0xe0>)
 8001bfe:	f005 fa69 	bl	80070d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001c02:	2330      	movs	r3, #48	; 0x30
 8001c04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	4619      	mov	r1, r3
 8001c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1a:	f005 fa5b 	bl	80070d4 <HAL_GPIO_Init>

}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	48000400 	.word	0x48000400
 8001c2c:	48000800 	.word	0x48000800

08001c30 <LL_AHB2_GRP1_EnableClock>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4013      	ands	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c54:	68fb      	ldr	r3, [r7, #12]
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <LL_APB1_GRP1_EnableClock>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c84:	68fb      	ldr	r3, [r7, #12]
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <MX_I2C2_Init+0x74>)
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <MX_I2C2_Init+0x78>)
 8001c98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <MX_I2C2_Init+0x74>)
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <MX_I2C2_Init+0x7c>)
 8001c9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <MX_I2C2_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <MX_I2C2_Init+0x74>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <MX_I2C2_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <MX_I2C2_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <MX_I2C2_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_I2C2_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_I2C2_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cca:	480e      	ldr	r0, [pc, #56]	; (8001d04 <MX_I2C2_Init+0x74>)
 8001ccc:	f005 fc47 	bl	800755e <HAL_I2C_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001cd6:	f000 f917 	bl	8001f08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4809      	ldr	r0, [pc, #36]	; (8001d04 <MX_I2C2_Init+0x74>)
 8001cde:	f006 f993 	bl	8008008 <HAL_I2CEx_ConfigAnalogFilter>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ce8:	f000 f90e 	bl	8001f08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001cec:	2100      	movs	r1, #0
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_I2C2_Init+0x74>)
 8001cf0:	f006 f9d4 	bl	800809c <HAL_I2CEx_ConfigDigitalFilter>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001cfa:	f000 f905 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200001cc 	.word	0x200001cc
 8001d08:	40005800 	.word	0x40005800
 8001d0c:	20303e5d 	.word	0x20303e5d

08001d10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b096      	sub	sp, #88	; 0x58
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	2238      	movs	r2, #56	; 0x38
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f01d fbb1 	bl	801f498 <memset>
  if(i2cHandle->Instance==I2C2)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <HAL_I2C_MspInit+0xb0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d13b      	bne.n	8001db8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d44:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f007 fc60 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d5a:	f000 f8d5 	bl	8001f08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7ff ff66 	bl	8001c30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d64:	2002      	movs	r0, #2
 8001d66:	f7ff ff63 	bl	8001c30 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d6e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d70:	2312      	movs	r3, #18
 8001d72:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d84:	4619      	mov	r1, r3
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8a:	f005 f9a3 	bl	80070d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d92:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d94:	2312      	movs	r3, #18
 8001d96:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001da0:	2304      	movs	r3, #4
 8001da2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001da8:	4619      	mov	r1, r3
 8001daa:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <HAL_I2C_MspInit+0xb4>)
 8001dac:	f005 f992 	bl	80070d4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001db0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001db4:	f7ff ff54 	bl	8001c60 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001db8:	bf00      	nop
 8001dba:	3758      	adds	r7, #88	; 0x58
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40005800 	.word	0x40005800
 8001dc4:	48000400 	.word	0x48000400

08001dc8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd8:	f023 0218 	bic.w	r2, r3, #24
 8001ddc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
	...

08001df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df8:	f003 f97e 	bl	80050f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dfc:	f000 f81c 	bl	8001e38 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e00:	f7ff fea4 	bl	8001b4c <MX_GPIO_Init>
  MX_I2C2_Init();
 8001e04:	f7ff ff44 	bl	8001c90 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001e08:	f000 f990 	bl	800212c <MX_SPI2_Init>
  MX_LoRaWAN_Init();
 8001e0c:	f00b f86e 	bl	800ceec <MX_LoRaWAN_Init>
  /* USER CODE BEGIN 2 */

  APP_LOG(TS_ON, VLEVEL_M, "Hello APP_LOG \r\n");
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <main+0x38>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	2100      	movs	r1, #0
 8001e16:	2002      	movs	r0, #2
 8001e18:	f01d f846 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
  bsp_env_sensors.init(&hi2c2);
 8001e1c:	4904      	ldr	r1, [pc, #16]	; (8001e30 <main+0x3c>)
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <main+0x40>)
 8001e20:	f003 f81a 	bl	8004e58 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef>
  	//lsm303AccelData a = envSensors.getAccelData();
  	//float ax = a.x*100;
  	//APP_LOG(TS_ON, VLEVEL_M, "ax: %d.%02d [m/s^2]\r\n", (int)ax / 100, (int)ax % 100);

    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001e24:	f00b f86a 	bl	800cefc <MX_LoRaWAN_Process>
 8001e28:	e7fc      	b.n	8001e24 <main+0x30>
 8001e2a:	bf00      	nop
 8001e2c:	0801f524 	.word	0x0801f524
 8001e30:	200001cc 	.word	0x200001cc
 8001e34:	20000220 	.word	0x20000220

08001e38 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b09a      	sub	sp, #104	; 0x68
 8001e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3e:	f107 0320 	add.w	r3, r7, #32
 8001e42:	2248      	movs	r2, #72	; 0x48
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f01d fb26 	bl	801f498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
 8001e5c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e5e:	f006 f969 	bl	8008134 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff ffb0 	bl	8001dc8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e68:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <_Z18SystemClock_Configv+0xcc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e70:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <_Z18SystemClock_Configv+0xcc>)
 8001e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <_Z18SystemClock_Configv+0xcc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001e84:	2326      	movs	r3, #38	; 0x26
 8001e86:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e88:	2381      	movs	r3, #129	; 0x81
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e92:	2301      	movs	r3, #1
 8001e94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e96:	2340      	movs	r3, #64	; 0x40
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001e9e:	23b0      	movs	r3, #176	; 0xb0
 8001ea0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea6:	f107 0320 	add.w	r3, r7, #32
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f006 fc8e 	bl	80087cc <HAL_RCC_OscConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bf14      	ite	ne
 8001eb6:	2301      	movne	r3, #1
 8001eb8:	2300      	moveq	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8001ec0:	f000 f822 	bl	8001f08 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001ec4:	234f      	movs	r3, #79	; 0x4f
 8001ec6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001edc:	f107 0308 	add.w	r3, r7, #8
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f006 fff4 	bl	8008ed0 <HAL_RCC_ClockConfig>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf14      	ite	ne
 8001eee:	2301      	movne	r3, #1
 8001ef0:	2300      	moveq	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8001ef8:	f000 f806 	bl	8001f08 <Error_Handler>
  }
}
 8001efc:	bf00      	nop
 8001efe:	3768      	adds	r7, #104	; 0x68
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	58000400 	.word	0x58000400

08001f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0c:	b672      	cpsid	i
}
 8001f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  	APP_LOG(TS_ON, VLEVEL_M, "HAL error");
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <Error_Handler+0x18>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	2100      	movs	r1, #0
 8001f16:	2002      	movs	r0, #2
 8001f18:	f01c ffc6 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
 8001f1c:	e7f8      	b.n	8001f10 <Error_Handler+0x8>
 8001f1e:	bf00      	nop
 8001f20:	0801f538 	.word	0x0801f538

08001f24 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d107      	bne.n	8001f44 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d102      	bne.n	8001f44 <_Z41__static_initialization_and_destruction_0ii+0x20>
EnvionmentSensors bsp_env_sensors;
 8001f3e:	4803      	ldr	r0, [pc, #12]	; (8001f4c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001f40:	f002 ff77 	bl	8004e32 <_ZN17EnvionmentSensorsC1Ev>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000220 	.word	0x20000220

08001f50 <_GLOBAL__sub_I_bsp_env_sensors>:
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f7ff ffe3 	bl	8001f24 <_Z41__static_initialization_and_destruction_0ii>
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <LL_APB1_GRP1_EnableClock>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08c      	sub	sp, #48	; 0x30
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	222c      	movs	r2, #44	; 0x2c
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f01d fa6b 	bl	801f498 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <MX_RTC_Init+0x9c>)
 8001fc4:	4a22      	ldr	r2, [pc, #136]	; (8002050 <MX_RTC_Init+0xa0>)
 8001fc6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001fc8:	4b20      	ldr	r3, [pc, #128]	; (800204c <MX_RTC_Init+0x9c>)
 8001fca:	221f      	movs	r2, #31
 8001fcc:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001fce:	4b1f      	ldr	r3, [pc, #124]	; (800204c <MX_RTC_Init+0x9c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <MX_RTC_Init+0x9c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <MX_RTC_Init+0x9c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <MX_RTC_Init+0x9c>)
 8001fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fe6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <MX_RTC_Init+0x9c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <MX_RTC_Init+0x9c>)
 8001ff0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ff6:	4815      	ldr	r0, [pc, #84]	; (800204c <MX_RTC_Init+0x9c>)
 8001ff8:	f007 fc26 	bl	8009848 <HAL_RTC_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002002:	f7ff ff81 	bl	8001f08 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8002006:	4811      	ldr	r0, [pc, #68]	; (800204c <MX_RTC_Init+0x9c>)
 8002008:	f007 ff1c 	bl	8009e44 <HAL_RTCEx_SetSSRU_IT>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002012:	f7ff ff79 	bl	8001f08 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002022:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002026:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	2200      	movs	r2, #0
 8002032:	4619      	mov	r1, r3
 8002034:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_RTC_Init+0x9c>)
 8002036:	f007 fc89 	bl	800994c <HAL_RTC_SetAlarm_IT>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002040:	f7ff ff62 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002044:	bf00      	nop
 8002046:	3730      	adds	r7, #48	; 0x30
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000330 	.word	0x20000330
 8002050:	40002800 	.word	0x40002800

08002054 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b090      	sub	sp, #64	; 0x40
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800205c:	f107 0308 	add.w	r3, r7, #8
 8002060:	2238      	movs	r2, #56	; 0x38
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f01d fa17 	bl	801f498 <memset>
  if(rtcHandle->Instance==RTC)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <HAL_RTC_MspInit+0x74>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d125      	bne.n	80020c0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002078:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800207a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002080:	f107 0308 	add.w	r3, r7, #8
 8002084:	4618      	mov	r0, r3
 8002086:	f007 fac5 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002090:	f7ff ff3a 	bl	8001f08 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002094:	f7ff ff64 	bl	8001f60 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002098:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800209c:	f7ff ff70 	bl	8001f80 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2100      	movs	r1, #0
 80020a4:	2002      	movs	r0, #2
 80020a6:	f004 f9da 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80020aa:	2002      	movs	r0, #2
 80020ac:	f004 f9f1 	bl	8006492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2100      	movs	r1, #0
 80020b4:	202a      	movs	r0, #42	; 0x2a
 80020b6:	f004 f9d2 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80020ba:	202a      	movs	r0, #42	; 0x2a
 80020bc:	f004 f9e9 	bl	8006492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80020c0:	bf00      	nop
 80020c2:	3740      	adds	r7, #64	; 0x40
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40002800 	.word	0x40002800

080020cc <LL_AHB2_GRP1_EnableClock>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4013      	ands	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020f0:	68fb      	ldr	r3, [r7, #12]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <LL_APB1_GRP1_EnableClock>:
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002108:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800210a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4313      	orrs	r3, r2
 8002112:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002118:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002120:	68fb      	ldr	r3, [r7, #12]
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <MX_SPI2_Init+0x74>)
 8002132:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <MX_SPI2_Init+0x78>)
 8002134:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <MX_SPI2_Init+0x74>)
 8002138:	f44f 7282 	mov.w	r2, #260	; 0x104
 800213c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800213e:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <MX_SPI2_Init+0x74>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <MX_SPI2_Init+0x74>)
 8002146:	f44f 7240 	mov.w	r2, #768	; 0x300
 800214a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <MX_SPI2_Init+0x74>)
 800214e:	2200      	movs	r2, #0
 8002150:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <MX_SPI2_Init+0x74>)
 8002154:	2200      	movs	r2, #0
 8002156:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <MX_SPI2_Init+0x74>)
 800215a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800215e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <MX_SPI2_Init+0x74>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <MX_SPI2_Init+0x74>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <MX_SPI2_Init+0x74>)
 800216e:	2200      	movs	r2, #0
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <MX_SPI2_Init+0x74>)
 8002174:	2200      	movs	r2, #0
 8002176:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <MX_SPI2_Init+0x74>)
 800217a:	2207      	movs	r2, #7
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <MX_SPI2_Init+0x74>)
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MX_SPI2_Init+0x74>)
 8002186:	2208      	movs	r2, #8
 8002188:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <MX_SPI2_Init+0x74>)
 800218c:	f007 fee8 	bl	8009f60 <HAL_SPI_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002196:	f7ff feb7 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000368 	.word	0x20000368
 80021a4:	40003800 	.word	0x40003800

080021a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b096      	sub	sp, #88	; 0x58
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	2238      	movs	r2, #56	; 0x38
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f01d f965 	bl	801f498 <memset>
  if(spiHandle->Instance==SPI2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a2b      	ldr	r2, [pc, #172]	; (8002280 <HAL_SPI_MspInit+0xd8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d14e      	bne.n	8002276 <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80021d8:	2310      	movs	r3, #16
 80021da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 80021dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	4618      	mov	r0, r3
 80021e8:	f007 fa14 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80021f2:	f7ff fe89 	bl	8001f08 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021fa:	f7ff ff7f 	bl	80020fc <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	2002      	movs	r0, #2
 8002200:	f7ff ff64 	bl	80020cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002204:	2001      	movs	r0, #1
 8002206:	f7ff ff61 	bl	80020cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800220a:	2004      	movs	r0, #4
 800220c:	f7ff ff5e 	bl	80020cc <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    PC1     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002210:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002214:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002222:	2305      	movs	r3, #5
 8002224:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002226:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800222a:	4619      	mov	r1, r3
 800222c:	4815      	ldr	r0, [pc, #84]	; (8002284 <HAL_SPI_MspInit+0xdc>)
 800222e:	f004 ff51 	bl	80070d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002236:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002244:	2305      	movs	r3, #5
 8002246:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800224c:	4619      	mov	r1, r3
 800224e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002252:	f004 ff3f 	bl	80070d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002256:	2302      	movs	r3, #2
 8002258:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8002266:	2303      	movs	r3, #3
 8002268:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800226e:	4619      	mov	r1, r3
 8002270:	4805      	ldr	r0, [pc, #20]	; (8002288 <HAL_SPI_MspInit+0xe0>)
 8002272:	f004 ff2f 	bl	80070d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002276:	bf00      	nop
 8002278:	3758      	adds	r7, #88	; 0x58
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40003800 	.word	0x40003800
 8002284:	48000400 	.word	0x48000400
 8002288:	48000800 	.word	0x48000800

0800228c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8002292:	2201      	movs	r2, #1
 8002294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	58000400 	.word	0x58000400

080022a4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80022c0:	f002 ff3a 	bl	8005138 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80022c4:	f7ff ffe2 	bl	800228c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80022c8:	2001      	movs	r0, #1
 80022ca:	f005 ffc5 	bl	8008258 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80022d6:	f002 ff3d 	bl	8005154 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80022da:	f000 fedf 	bl	800309c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */
  
  /* USER CODE END ExitStopMode_2 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80022e6:	f002 ff27 	bl	8005138 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80022ea:	2101      	movs	r1, #1
 80022ec:	2000      	movs	r0, #0
 80022ee:	f005 ff2f 	bl	8008150 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80022fa:	f002 ff2b 	bl	8005154 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002312:	e7fe      	b.n	8002312 <NMI_Handler+0x4>

08002314 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <HardFault_Handler+0x4>

0800231a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <MemManage_Handler+0x4>

08002320 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <BusFault_Handler+0x4>

08002326 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800232a:	e7fe      	b.n	800232a <UsageFault_Handler+0x4>

0800232c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8002362:	f007 fdab 	bl	8009ebc <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000330 	.word	0x20000330

08002370 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <DMA1_Channel1_IRQHandler+0x10>)
 8002376:	f004 fb23 	bl	80069c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000474 	.word	0x20000474

08002384 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <USART1_IRQHandler+0x10>)
 800238a:	f008 fcb5 	bl	800acf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200003e0 	.word	0x200003e0

08002398 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <RTC_Alarm_IRQHandler+0x10>)
 800239e:	f007 fc3d 	bl	8009c1c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000330 	.word	0x20000330

080023ac <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <SUBGHZ_Radio_IRQHandler+0x10>)
 80023b2:	f008 f9c5 	bl	800a740 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200003cc 	.word	0x200003cc

080023c0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80023d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4013      	ands	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023e4:	68fb      	ldr	r3, [r7, #12]
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <MX_SUBGHZ_Init+0x20>)
 80023f6:	2208      	movs	r2, #8
 80023f8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <MX_SUBGHZ_Init+0x20>)
 80023fc:	f007 ff1e 	bl	800a23c <HAL_SUBGHZ_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002406:	f7ff fd7f 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200003cc 	.word	0x200003cc

08002414 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800241c:	2001      	movs	r0, #1
 800241e:	f7ff ffcf 	bl	80023c0 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2100      	movs	r1, #0
 8002426:	2032      	movs	r0, #50	; 0x32
 8002428:	f004 f819 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800242c:	2032      	movs	r0, #50	; 0x32
 800242e:	f004 f830 	bl	8006492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <LL_RCC_SetClkAfterWakeFromStop>:
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800244c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002464:	4b02      	ldr	r3, [pc, #8]	; (8002470 <LL_FLASH_GetUDN+0x10>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	1fff7580 	.word	0x1fff7580

08002474 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <LL_FLASH_GetDeviceID+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	b2db      	uxtb	r3, r3
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	1fff7584 	.word	0x1fff7584

0800248c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <LL_FLASH_GetSTCompanyID+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0a1b      	lsrs	r3, r3, #8
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	1fff7584 	.word	0x1fff7584

080024a4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80024a8:	2000      	movs	r0, #0
 80024aa:	f7ff ffc6 	bl	800243a <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80024ae:	f01c fa3d 	bl	801e92c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <SystemApp_Init+0x48>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 80024b8:	f000 f988 	bl	80027cc <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 80024bc:	f01c fcc6 	bl	801ee4c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80024c0:	480b      	ldr	r0, [pc, #44]	; (80024f0 <SystemApp_Init+0x4c>)
 80024c2:	f01c fd71 	bl	801efa8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <SystemApp_Init+0x50>)
 80024c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024cc:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80024ce:	2003      	movs	r0, #3
 80024d0:	f01c fd78 	bl	801efc4 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80024d4:	f7ff f820 	bl	8001518 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80024d8:	f000 f9b0 	bl	800283c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80024dc:	f01b fbf2 	bl	801dcc4 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80024e0:	2101      	movs	r1, #1
 80024e2:	2001      	movs	r0, #1
 80024e4:	f01b fc2e 	bl	801dd44 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200003d8 	.word	0x200003d8
 80024f0:	080026c5 	.word	0x080026c5
 80024f4:	58004000 	.word	0x58004000

080024f8 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80024fc:	f01b fc52 	bl	801dda4 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}

08002504 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800250e:	f7ff f811 	bl	8001534 <SYS_GetBatteryLevel>
 8002512:	4603      	mov	r3, r0
 8002514:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8002516:	88bb      	ldrh	r3, [r7, #4]
 8002518:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800251c:	4293      	cmp	r3, r2
 800251e:	d902      	bls.n	8002526 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002520:	23fe      	movs	r3, #254	; 0xfe
 8002522:	71fb      	strb	r3, [r7, #7]
 8002524:	e014      	b.n	8002550 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8002526:	88bb      	ldrh	r3, [r7, #4]
 8002528:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800252c:	d202      	bcs.n	8002534 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	71fb      	strb	r3, [r7, #7]
 8002532:	e00d      	b.n	8002550 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002534:	88bb      	ldrh	r3, [r7, #4]
 8002536:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800253a:	461a      	mov	r2, r3
 800253c:	4613      	mov	r3, r2
 800253e:	01db      	lsls	r3, r3, #7
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	461a      	mov	r2, r3
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <GetBatteryLevel+0x58>)
 8002548:	fba3 2302 	umull	r2, r3, r3, r2
 800254c:	09db      	lsrs	r3, r3, #7
 800254e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002550:	79fb      	ldrb	r3, [r7, #7]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	1b4e81b5 	.word	0x1b4e81b5

08002560 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	4618      	mov	r0, r3
 800256e:	f000 f93b 	bl	80027e8 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fd33 	bl	8000fe0 <__aeabi_f2iz>
 800257a:	4603      	mov	r3, r0
 800257c:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 800257e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800258a:	b590      	push	{r4, r7, lr}
 800258c:	b087      	sub	sp, #28
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002596:	f7ff ff63 	bl	8002460 <LL_FLASH_GetUDN>
 800259a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a2:	d138      	bne.n	8002616 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80025a4:	f002 fde4 	bl	8005170 <HAL_GetUIDw0>
 80025a8:	4604      	mov	r4, r0
 80025aa:	f002 fdf5 	bl	8005198 <HAL_GetUIDw2>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4423      	add	r3, r4
 80025b2:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 80025b4:	f002 fde6 	bl	8005184 <HAL_GetUIDw1>
 80025b8:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	0e1a      	lsrs	r2, r3, #24
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3307      	adds	r3, #7
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	0c1a      	lsrs	r2, r3, #16
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3306      	adds	r3, #6
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	0a1a      	lsrs	r2, r3, #8
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3305      	adds	r3, #5
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3304      	adds	r3, #4
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	0e1a      	lsrs	r2, r3, #24
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3303      	adds	r3, #3
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	0c1a      	lsrs	r2, r3, #16
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3302      	adds	r3, #2
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	0a1a      	lsrs	r2, r3, #8
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3301      	adds	r3, #1
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002614:	e031      	b.n	800267a <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3307      	adds	r3, #7
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	0a1a      	lsrs	r2, r3, #8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3306      	adds	r3, #6
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	0c1a      	lsrs	r2, r3, #16
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3305      	adds	r3, #5
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	0e1a      	lsrs	r2, r3, #24
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3304      	adds	r3, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002644:	f7ff ff16 	bl	8002474 <LL_FLASH_GetDeviceID>
 8002648:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3303      	adds	r3, #3
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002654:	f7ff ff1a 	bl	800248c <LL_FLASH_GetSTCompanyID>
 8002658:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3302      	adds	r3, #2
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	0a1a      	lsrs	r2, r3, #8
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3301      	adds	r3, #1
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	0c1b      	lsrs	r3, r3, #16
 8002674:	b2da      	uxtb	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	701a      	strb	r2, [r3, #0]
}
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd90      	pop	{r4, r7, pc}

08002682 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002682:	b590      	push	{r4, r7, lr}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 800268a:	f7ff fee9 	bl	8002460 <LL_FLASH_GetUDN>
 800268e:	4602      	mov	r2, r0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800269c:	d10d      	bne.n	80026ba <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800269e:	f002 fd67 	bl	8005170 <HAL_GetUIDw0>
 80026a2:	4604      	mov	r4, r0
 80026a4:	f002 fd6e 	bl	8005184 <HAL_GetUIDw1>
 80026a8:	4603      	mov	r3, r0
 80026aa:	405c      	eors	r4, r3
 80026ac:	f002 fd74 	bl	8005198 <HAL_GetUIDw2>
 80026b0:	4603      	mov	r3, r0
 80026b2:	ea84 0203 	eor.w	r2, r4, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd90      	pop	{r4, r7, pc}
	...

080026c4 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	4618      	mov	r0, r3
 80026d4:	f01b fc76 	bl	801dfc4 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80026de:	9200      	str	r2, [sp, #0]
 80026e0:	4a07      	ldr	r2, [pc, #28]	; (8002700 <TimestampNow+0x3c>)
 80026e2:	2110      	movs	r1, #16
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f81d 	bl	8002724 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fd fd44 	bl	8000178 <strlen>
 80026f0:	4603      	mov	r3, r0
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	0801f544 	.word	0x0801f544

08002704 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002708:	2101      	movs	r1, #1
 800270a:	2002      	movs	r0, #2
 800270c:	f01b faea 	bl	801dce4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}

08002714 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002718:	2100      	movs	r1, #0
 800271a:	2002      	movs	r0, #2
 800271c:	f01b fae2 	bl	801dce4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}

08002724 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002724:	b40c      	push	{r2, r3}
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002730:	f107 031c 	add.w	r3, r7, #28
 8002734:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002736:	6839      	ldr	r1, [r7, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f01b fe13 	bl	801e368 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800274c:	b002      	add	sp, #8
 800274e:	4770      	bx	lr

08002750 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_GetTick+0x24>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002776:	f000 f92d 	bl	80029d4 <TIMER_IF_GetTimerValue>
 800277a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 800277c:	687b      	ldr	r3, [r7, #4]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200003d8 	.word	0x200003d8

0800278c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f9a3 	bl	8002ae2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80027ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80027b2:	4905      	ldr	r1, [pc, #20]	; (80027c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	58000800 	.word	0x58000800

080027cc <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 80027d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80027d4:	f7ff ffe6 	bl	80027a4 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 80027d8:	f002 fce8 	bl	80051ac <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80027dc:	f002 fcec 	bl	80051b8 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80027e0:	f002 fcf0 	bl	80051c4 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80027f0:	4b0e      	ldr	r3, [pc, #56]	; (800282c <EnvSensors_Read+0x44>)
 80027f2:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = bsp_env_sensors.getTemperature();
 80027f4:	480e      	ldr	r0, [pc, #56]	; (8002830 <EnvSensors_Read+0x48>)
 80027f6:	f002 fb9f 	bl	8004f38 <_ZN17EnvionmentSensors14getTemperatureEv>
 80027fa:	6138      	str	r0, [r7, #16]
  float PRESSURE_Value = bsp_env_sensors.getPressure();
 80027fc:	480c      	ldr	r0, [pc, #48]	; (8002830 <EnvSensors_Read+0x48>)
 80027fe:	f002 fb8d 	bl	8004f1c <_ZN17EnvionmentSensors11getPressureEv>
 8002802:	60f8      	str	r0, [r7, #12]

  sensor_data->humidity    = HUMIDITY_Value;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a06      	ldr	r2, [pc, #24]	; (8002834 <EnvSensors_Read+0x4c>)
 800281a:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a06      	ldr	r2, [pc, #24]	; (8002838 <EnvSensors_Read+0x50>)
 8002820:	611a      	str	r2, [r3, #16]

  return 0;
 8002822:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	42480000 	.word	0x42480000
 8002830:	20000220 	.word	0x20000220
 8002834:	003e090d 	.word	0x003e090d
 8002838:	000503ab 	.word	0x000503ab

0800283c <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Init */

  /* USER CODE END EnvSensors_Init */
  return ret;
 8002846:	687b      	ldr	r3, [r7, #4]
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <TIMER_IF_Init+0x5c>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	f083 0301 	eor.w	r3, r3, #1
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01b      	beq.n	80028c4 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <TIMER_IF_Init+0x60>)
 800288e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002894:	f7ff fb8c 	bl	8001fb0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002898:	f000 f856 	bl	8002948 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800289c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028a0:	480c      	ldr	r0, [pc, #48]	; (80028d4 <TIMER_IF_Init+0x60>)
 80028a2:	f007 f95f 	bl	8009b64 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80028a6:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <TIMER_IF_Init+0x60>)
 80028a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80028ae:	4809      	ldr	r0, [pc, #36]	; (80028d4 <TIMER_IF_Init+0x60>)
 80028b0:	f007 fa96 	bl	8009de0 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f000 f9d3 	bl	8002c60 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80028ba:	f000 f85f 	bl	800297c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80028be:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <TIMER_IF_Init+0x5c>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80028c4:	79fb      	ldrb	r3, [r7, #7]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200003d9 	.word	0x200003d9
 80028d4:	20000330 	.word	0x20000330

080028d8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08e      	sub	sp, #56	; 0x38
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80028e6:	f107 0308 	add.w	r3, r7, #8
 80028ea:	222c      	movs	r2, #44	; 0x2c
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f01c fdd2 	bl	801f498 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80028f4:	f000 f828 	bl	8002948 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <TIMER_IF_StartTimer+0x68>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	4413      	add	r3, r2
 8002900:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	43db      	mvns	r3, r3
 800290a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002910:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002914:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800291a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800291c:	f107 0308 	add.w	r3, r7, #8
 8002920:	2201      	movs	r2, #1
 8002922:	4619      	mov	r1, r3
 8002924:	4807      	ldr	r0, [pc, #28]	; (8002944 <TIMER_IF_StartTimer+0x6c>)
 8002926:	f007 f811 	bl	800994c <HAL_RTC_SetAlarm_IT>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002930:	f7ff faea 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002934:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002938:	4618      	mov	r0, r3
 800293a:	3738      	adds	r7, #56	; 0x38
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	200003dc 	.word	0x200003dc
 8002944:	20000330 	.word	0x20000330

08002948 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002952:	4b08      	ldr	r3, [pc, #32]	; (8002974 <TIMER_IF_StopTimer+0x2c>)
 8002954:	2201      	movs	r2, #1
 8002956:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002958:	f44f 7180 	mov.w	r1, #256	; 0x100
 800295c:	4806      	ldr	r0, [pc, #24]	; (8002978 <TIMER_IF_StopTimer+0x30>)
 800295e:	f007 f901 	bl	8009b64 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <TIMER_IF_StopTimer+0x30>)
 8002964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800296a:	79fb      	ldrb	r3, [r7, #7]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40002800 	.word	0x40002800
 8002978:	20000330 	.word	0x20000330

0800297c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002980:	f000 f98e 	bl	8002ca0 <GetTimerTicks>
 8002984:	4603      	mov	r3, r0
 8002986:	4a03      	ldr	r2, [pc, #12]	; (8002994 <TIMER_IF_SetTimerContext+0x18>)
 8002988:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800298a:	4b02      	ldr	r3, [pc, #8]	; (8002994 <TIMER_IF_SetTimerContext+0x18>)
 800298c:	681b      	ldr	r3, [r3, #0]
}
 800298e:	4618      	mov	r0, r3
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200003dc 	.word	0x200003dc

08002998 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800299c:	4b02      	ldr	r3, [pc, #8]	; (80029a8 <TIMER_IF_GetTimerContext+0x10>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	200003dc 	.word	0x200003dc

080029ac <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80029b6:	f000 f973 	bl	8002ca0 <GetTimerTicks>
 80029ba:	4602      	mov	r2, r0
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80029c4:	687b      	ldr	r3, [r7, #4]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200003dc 	.word	0x200003dc

080029d4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <TIMER_IF_GetTimerValue+0x24>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80029e6:	f000 f95b 	bl	8002ca0 <GetTimerTicks>
 80029ea:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80029ec:	687b      	ldr	r3, [r7, #4]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200003d9 	.word	0x200003d9

080029fc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002a06:	2303      	movs	r3, #3
 8002a08:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002a0a:	687b      	ldr	r3, [r7, #4]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002a16:	b5b0      	push	{r4, r5, r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002a1e:	2100      	movs	r1, #0
 8002a20:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	2000      	movs	r0, #0
 8002a26:	460a      	mov	r2, r1
 8002a28:	4603      	mov	r3, r0
 8002a2a:	0d95      	lsrs	r5, r2, #22
 8002a2c:	0294      	lsls	r4, r2, #10
 8002a2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	4620      	mov	r0, r4
 8002a38:	4629      	mov	r1, r5
 8002a3a:	f7fe fb17 	bl	800106c <__aeabi_uldivmod>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4613      	mov	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002a46:	68fb      	ldr	r3, [r7, #12]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bdb0      	pop	{r4, r5, r7, pc}

08002a50 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002a50:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	2000      	movs	r0, #0
 8002a62:	460c      	mov	r4, r1
 8002a64:	4605      	mov	r5, r0
 8002a66:	4620      	mov	r0, r4
 8002a68:	4629      	mov	r1, r5
 8002a6a:	f04f 0a00 	mov.w	sl, #0
 8002a6e:	f04f 0b00 	mov.w	fp, #0
 8002a72:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002a76:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002a7a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002a7e:	4650      	mov	r0, sl
 8002a80:	4659      	mov	r1, fp
 8002a82:	1b02      	subs	r2, r0, r4
 8002a84:	eb61 0305 	sbc.w	r3, r1, r5
 8002a88:	f04f 0000 	mov.w	r0, #0
 8002a8c:	f04f 0100 	mov.w	r1, #0
 8002a90:	0099      	lsls	r1, r3, #2
 8002a92:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002a96:	0090      	lsls	r0, r2, #2
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	eb12 0804 	adds.w	r8, r2, r4
 8002aa0:	eb43 0905 	adc.w	r9, r3, r5
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ab4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ab8:	4690      	mov	r8, r2
 8002aba:	4699      	mov	r9, r3
 8002abc:	4640      	mov	r0, r8
 8002abe:	4649      	mov	r1, r9
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	0a82      	lsrs	r2, r0, #10
 8002aca:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002ace:	0a8b      	lsrs	r3, r1, #10
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ae0:	4770      	bx	lr

08002ae2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ff93 	bl	8002a16 <TIMER_IF_Convert_ms2Tick>
 8002af0:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002af2:	f000 f8d5 	bl	8002ca0 <GetTimerTicks>
 8002af6:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002af8:	e000      	b.n	8002afc <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002afa:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002afc:	f000 f8d0 	bl	8002ca0 <GetTimerTicks>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d8f6      	bhi.n	8002afa <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002b1e:	f01c f853 	bl	801ebc8 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002b32:	f000 f8a5 	bl	8002c80 <TIMER_IF_BkUp_Read_MSBticks>
 8002b36:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 f88f 	bl	8002c60 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002b4a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b4e:	b08c      	sub	sp, #48	; 0x30
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002b58:	f000 f8a2 	bl	8002ca0 <GetTimerTicks>
 8002b5c:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002b5e:	f000 f88f 	bl	8002c80 <TIMER_IF_BkUp_Read_MSBticks>
 8002b62:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	2200      	movs	r2, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	60fa      	str	r2, [r7, #12]
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	000b      	movs	r3, r1
 8002b78:	2200      	movs	r2, #0
 8002b7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	460c      	mov	r4, r1
 8002b80:	4605      	mov	r5, r0
 8002b82:	eb12 0804 	adds.w	r8, r2, r4
 8002b86:	eb43 0905 	adc.w	r9, r3, r5
 8002b8a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002b8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	0a82      	lsrs	r2, r0, #10
 8002b9c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002ba0:	0a8b      	lsrs	r3, r1, #10
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002bb4:	f04f 0b00 	mov.w	fp, #0
 8002bb8:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff46 	bl	8002a50 <TIMER_IF_Convert_Tick2ms>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3730      	adds	r7, #48	; 0x30
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002bd8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	2100      	movs	r1, #0
 8002be4:	4803      	ldr	r0, [pc, #12]	; (8002bf4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002be6:	f007 f98d 	bl	8009f04 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000330 	.word	0x20000330

08002bf8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	2101      	movs	r1, #1
 8002c04:	4803      	ldr	r0, [pc, #12]	; (8002c14 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002c06:	f007 f97d 	bl	8009f04 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000330 	.word	0x20000330

08002c18 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002c22:	2100      	movs	r1, #0
 8002c24:	4804      	ldr	r0, [pc, #16]	; (8002c38 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002c26:	f007 f985 	bl	8009f34 <HAL_RTCEx_BKUPRead>
 8002c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002c2c:	687b      	ldr	r3, [r7, #4]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000330 	.word	0x20000330

08002c3c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002c46:	2101      	movs	r1, #1
 8002c48:	4804      	ldr	r0, [pc, #16]	; (8002c5c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002c4a:	f007 f973 	bl	8009f34 <HAL_RTCEx_BKUPRead>
 8002c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002c50:	687b      	ldr	r3, [r7, #4]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000330 	.word	0x20000330

08002c60 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	4803      	ldr	r0, [pc, #12]	; (8002c7c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002c6e:	f007 f949 	bl	8009f04 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000330 	.word	0x20000330

08002c80 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002c86:	2102      	movs	r1, #2
 8002c88:	4804      	ldr	r0, [pc, #16]	; (8002c9c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002c8a:	f007 f953 	bl	8009f34 <HAL_RTCEx_BKUPRead>
 8002c8e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002c90:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000330 	.word	0x20000330

08002ca0 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002ca6:	480b      	ldr	r0, [pc, #44]	; (8002cd4 <GetTimerTicks+0x34>)
 8002ca8:	f7ff fdd9 	bl	800285e <LL_RTC_TIME_GetSubSecond>
 8002cac:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002cae:	e003      	b.n	8002cb8 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002cb0:	4808      	ldr	r0, [pc, #32]	; (8002cd4 <GetTimerTicks+0x34>)
 8002cb2:	f7ff fdd4 	bl	800285e <LL_RTC_TIME_GetSubSecond>
 8002cb6:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002cb8:	4806      	ldr	r0, [pc, #24]	; (8002cd4 <GetTimerTicks+0x34>)
 8002cba:	f7ff fdd0 	bl	800285e <LL_RTC_TIME_GetSubSecond>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d1f4      	bne.n	8002cb0 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40002800 	.word	0x40002800

08002cd8 <LL_AHB2_GRP1_EnableClock>:
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <LL_APB2_GRP1_EnableClock>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <LL_APB2_GRP1_DisableClock>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d4e:	4013      	ands	r3, r2
 8002d50:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d60:	4b22      	ldr	r3, [pc, #136]	; (8002dec <MX_USART1_UART_Init+0x90>)
 8002d62:	4a23      	ldr	r2, [pc, #140]	; (8002df0 <MX_USART1_UART_Init+0x94>)
 8002d64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d66:	4b21      	ldr	r3, [pc, #132]	; (8002dec <MX_USART1_UART_Init+0x90>)
 8002d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d6e:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <MX_USART1_UART_Init+0x90>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d74:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <MX_USART1_UART_Init+0x90>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d7a:	4b1c      	ldr	r3, [pc, #112]	; (8002dec <MX_USART1_UART_Init+0x90>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d80:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <MX_USART1_UART_Init+0x90>)
 8002d82:	220c      	movs	r2, #12
 8002d84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d86:	4b19      	ldr	r3, [pc, #100]	; (8002dec <MX_USART1_UART_Init+0x90>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d8c:	4b17      	ldr	r3, [pc, #92]	; (8002dec <MX_USART1_UART_Init+0x90>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d92:	4b16      	ldr	r3, [pc, #88]	; (8002dec <MX_USART1_UART_Init+0x90>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <MX_USART1_UART_Init+0x90>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d9e:	4b13      	ldr	r3, [pc, #76]	; (8002dec <MX_USART1_UART_Init+0x90>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002da4:	4811      	ldr	r0, [pc, #68]	; (8002dec <MX_USART1_UART_Init+0x90>)
 8002da6:	f007 fe8a 	bl	800aabe <HAL_UART_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002db0:	f7ff f8aa 	bl	8001f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002db4:	2100      	movs	r1, #0
 8002db6:	480d      	ldr	r0, [pc, #52]	; (8002dec <MX_USART1_UART_Init+0x90>)
 8002db8:	f009 ffad 	bl	800cd16 <HAL_UARTEx_SetTxFifoThreshold>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002dc2:	f7ff f8a1 	bl	8001f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4808      	ldr	r0, [pc, #32]	; (8002dec <MX_USART1_UART_Init+0x90>)
 8002dca:	f009 ffe2 	bl	800cd92 <HAL_UARTEx_SetRxFifoThreshold>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002dd4:	f7ff f898 	bl	8001f08 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002dd8:	4804      	ldr	r0, [pc, #16]	; (8002dec <MX_USART1_UART_Init+0x90>)
 8002dda:	f009 ff61 	bl	800cca0 <HAL_UARTEx_EnableFifoMode>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002de4:	f7ff f890 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002de8:	bf00      	nop
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	200003e0 	.word	0x200003e0
 8002df0:	40013800 	.word	0x40013800

08002df4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b096      	sub	sp, #88	; 0x58
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e0c:	f107 030c 	add.w	r3, r7, #12
 8002e10:	2238      	movs	r2, #56	; 0x38
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f01c fb3f 	bl	801f498 <memset>
  if(uartHandle->Instance==USART1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a2f      	ldr	r2, [pc, #188]	; (8002edc <HAL_UART_MspInit+0xe8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d156      	bne.n	8002ed2 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e24:	2301      	movs	r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e28:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002e2c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e2e:	f107 030c 	add.w	r3, r7, #12
 8002e32:	4618      	mov	r0, r3
 8002e34:	f006 fbee 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e3e:	f7ff f863 	bl	8001f08 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e46:	f7ff ff5f 	bl	8002d08 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4a:	2002      	movs	r0, #2
 8002e4c:	f7ff ff44 	bl	8002cd8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002e50:	23c0      	movs	r3, #192	; 0xc0
 8002e52:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e60:	2307      	movs	r3, #7
 8002e62:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e68:	4619      	mov	r1, r3
 8002e6a:	481d      	ldr	r0, [pc, #116]	; (8002ee0 <HAL_UART_MspInit+0xec>)
 8002e6c:	f004 f932 	bl	80070d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002e70:	4b1c      	ldr	r3, [pc, #112]	; (8002ee4 <HAL_UART_MspInit+0xf0>)
 8002e72:	4a1d      	ldr	r2, [pc, #116]	; (8002ee8 <HAL_UART_MspInit+0xf4>)
 8002e74:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <HAL_UART_MspInit+0xf0>)
 8002e78:	2212      	movs	r2, #18
 8002e7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e7c:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <HAL_UART_MspInit+0xf0>)
 8002e7e:	2210      	movs	r2, #16
 8002e80:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e82:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <HAL_UART_MspInit+0xf0>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e88:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <HAL_UART_MspInit+0xf0>)
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <HAL_UART_MspInit+0xf0>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e94:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_UART_MspInit+0xf0>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002e9a:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <HAL_UART_MspInit+0xf0>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ea0:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_UART_MspInit+0xf0>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ea6:	480f      	ldr	r0, [pc, #60]	; (8002ee4 <HAL_UART_MspInit+0xf0>)
 8002ea8:	f003 fb10 	bl	80064cc <HAL_DMA_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002eb2:	f7ff f829 	bl	8001f08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <HAL_UART_MspInit+0xf0>)
 8002eba:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ebc:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <HAL_UART_MspInit+0xf0>)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	2024      	movs	r0, #36	; 0x24
 8002ec8:	f003 fac9 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ecc:	2024      	movs	r0, #36	; 0x24
 8002ece:	f003 fae0 	bl	8006492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ed2:	bf00      	nop
 8002ed4:	3758      	adds	r7, #88	; 0x58
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	48000400 	.word	0x48000400
 8002ee4:	20000474 	.word	0x20000474
 8002ee8:	40020008 	.word	0x40020008

08002eec <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0b      	ldr	r2, [pc, #44]	; (8002f28 <HAL_UART_MspDeInit+0x3c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d10f      	bne.n	8002f1e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002efe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f02:	f7ff ff19 	bl	8002d38 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002f06:	21c0      	movs	r1, #192	; 0xc0
 8002f08:	4808      	ldr	r0, [pc, #32]	; (8002f2c <HAL_UART_MspDeInit+0x40>)
 8002f0a:	f004 fa43 	bl	8007394 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 fb82 	bl	800661c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002f18:	2024      	movs	r0, #36	; 0x24
 8002f1a:	f003 fac8 	bl	80064ae <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	48000400 	.word	0x48000400

08002f30 <LL_APB2_GRP1_ForceReset>:
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr

08002f52 <LL_APB2_GRP1_ReleaseReset>:
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f68:	4013      	ands	r3, r2
 8002f6a:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
	...

08002f78 <LL_EXTI_EnableIT_0_31>:
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <LL_EXTI_EnableIT_0_31+0x24>)
 8002f82:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002f86:	4905      	ldr	r1, [pc, #20]	; (8002f9c <LL_EXTI_EnableIT_0_31+0x24>)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	58000800 	.word	0x58000800

08002fa0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002fa8:	4a07      	ldr	r2, [pc, #28]	; (8002fc8 <vcom_Init+0x28>)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002fae:	f7fe fb53 	bl	8001658 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002fb2:	f7ff fed3 	bl	8002d5c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002fb6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002fba:	f7ff ffdd 	bl	8002f78 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002fbe:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	200004d8 	.word	0x200004d8

08002fcc <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002fd0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fd4:	f7ff ffac 	bl	8002f30 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002fd8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fdc:	f7ff ffb9 	bl	8002f52 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002fe0:	4804      	ldr	r0, [pc, #16]	; (8002ff4 <vcom_DeInit+0x28>)
 8002fe2:	f7ff ff83 	bl	8002eec <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002fe6:	200f      	movs	r0, #15
 8002fe8:	f003 fa61 	bl	80064ae <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002fec:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	200003e0 	.word	0x200003e0

08002ff8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003004:	887b      	ldrh	r3, [r7, #2]
 8003006:	461a      	mov	r2, r3
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4804      	ldr	r0, [pc, #16]	; (800301c <vcom_Trace_DMA+0x24>)
 800300c:	f007 fdf4 	bl	800abf8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003010:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200003e0 	.word	0x200003e0

08003020 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003028:	4a19      	ldr	r2, [pc, #100]	; (8003090 <vcom_ReceiveInit+0x70>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800302e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003032:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003034:	f107 0308 	add.w	r3, r7, #8
 8003038:	e893 0006 	ldmia.w	r3, {r1, r2}
 800303c:	4815      	ldr	r0, [pc, #84]	; (8003094 <vcom_ReceiveInit+0x74>)
 800303e:	f009 fda2 	bl	800cb86 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8003042:	bf00      	nop
 8003044:	4b13      	ldr	r3, [pc, #76]	; (8003094 <vcom_ReceiveInit+0x74>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003052:	d0f7      	beq.n	8003044 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003054:	bf00      	nop
 8003056:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <vcom_ReceiveInit+0x74>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003064:	d1f7      	bne.n	8003056 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <vcom_ReceiveInit+0x74>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <vcom_ReceiveInit+0x74>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003074:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8003076:	4807      	ldr	r0, [pc, #28]	; (8003094 <vcom_ReceiveInit+0x74>)
 8003078:	f009 fde0 	bl	800cc3c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800307c:	2201      	movs	r2, #1
 800307e:	4906      	ldr	r1, [pc, #24]	; (8003098 <vcom_ReceiveInit+0x78>)
 8003080:	4804      	ldr	r0, [pc, #16]	; (8003094 <vcom_ReceiveInit+0x74>)
 8003082:	f007 fd6d 	bl	800ab60 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003086:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	200004dc 	.word	0x200004dc
 8003094:	200003e0 	.word	0x200003e0
 8003098:	200004d4 	.word	0x200004d4

0800309c <vcom_Resume>:

void vcom_Resume(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030a0:	4808      	ldr	r0, [pc, #32]	; (80030c4 <vcom_Resume+0x28>)
 80030a2:	f007 fd0c 	bl	800aabe <HAL_UART_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <vcom_Resume+0x14>
  {
    Error_Handler();
 80030ac:	f7fe ff2c 	bl	8001f08 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80030b0:	4805      	ldr	r0, [pc, #20]	; (80030c8 <vcom_Resume+0x2c>)
 80030b2:	f003 fa0b 	bl	80064cc <HAL_DMA_Init>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <vcom_Resume+0x24>
  {
    Error_Handler();
 80030bc:	f7fe ff24 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80030c0:	bf00      	nop
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	200003e0 	.word	0x200003e0
 80030c8:	20000474 	.word	0x20000474

080030cc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a05      	ldr	r2, [pc, #20]	; (80030f0 <HAL_UART_TxCpltCallback+0x24>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d103      	bne.n	80030e6 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_UART_TxCpltCallback+0x28>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2000      	movs	r0, #0
 80030e4:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40013800 	.word	0x40013800
 80030f4:	200004d8 	.word	0x200004d8

080030f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0d      	ldr	r2, [pc, #52]	; (800313c <HAL_UART_RxCpltCallback+0x44>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d113      	bne.n	8003132 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800310a:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <HAL_UART_RxCpltCallback+0x48>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_UART_RxCpltCallback+0x30>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003118:	2b00      	cmp	r3, #0
 800311a:	d105      	bne.n	8003128 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 800311c:	4b08      	ldr	r3, [pc, #32]	; (8003140 <HAL_UART_RxCpltCallback+0x48>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2200      	movs	r2, #0
 8003122:	2101      	movs	r1, #1
 8003124:	4807      	ldr	r0, [pc, #28]	; (8003144 <HAL_UART_RxCpltCallback+0x4c>)
 8003126:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003128:	2201      	movs	r2, #1
 800312a:	4906      	ldr	r1, [pc, #24]	; (8003144 <HAL_UART_RxCpltCallback+0x4c>)
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f007 fd17 	bl	800ab60 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40013800 	.word	0x40013800
 8003140:	200004dc 	.word	0x200004dc
 8003144:	200004d4 	.word	0x200004d4

08003148 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003148:	480d      	ldr	r0, [pc, #52]	; (8003180 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800314a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800314c:	f7ff fb81 	bl	8002852 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003150:	480c      	ldr	r0, [pc, #48]	; (8003184 <LoopForever+0x6>)
  ldr r1, =_edata
 8003152:	490d      	ldr	r1, [pc, #52]	; (8003188 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003154:	4a0d      	ldr	r2, [pc, #52]	; (800318c <LoopForever+0xe>)
  movs r3, #0
 8003156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003158:	e002      	b.n	8003160 <LoopCopyDataInit>

0800315a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800315a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800315c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800315e:	3304      	adds	r3, #4

08003160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003164:	d3f9      	bcc.n	800315a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003168:	4c0a      	ldr	r4, [pc, #40]	; (8003194 <LoopForever+0x16>)
  movs r3, #0
 800316a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800316c:	e001      	b.n	8003172 <LoopFillZerobss>

0800316e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800316e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003170:	3204      	adds	r2, #4

08003172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003174:	d3fb      	bcc.n	800316e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003176:	f01c f997 	bl	801f4a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800317a:	f7fe fe3b 	bl	8001df4 <main>

0800317e <LoopForever>:

LoopForever:
    b LoopForever
 800317e:	e7fe      	b.n	800317e <LoopForever>
  ldr   r0, =_estack
 8003180:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003188:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 800318c:	08020664 	.word	0x08020664
  ldr r2, =_sbss
 8003190:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8003194:	200023d8 	.word	0x200023d8

08003198 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003198:	e7fe      	b.n	8003198 <ADC_IRQHandler>

0800319a <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f001 fae2 	bl	8004770 <null_ptr_check>
 80031ac:	4603      	mov	r3, r0
 80031ae:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 80031b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d131      	bne.n	800321c <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	7a1b      	ldrb	r3, [r3, #8]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d003      	beq.n	80031c8 <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	729a      	strb	r2, [r3, #10]
 80031c6:	e002      	b.n	80031ce <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 80031ce:	f107 010e 	add.w	r1, r7, #14
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	2000      	movs	r0, #0
 80031d8:	f000 f826 	bl	8003228 <bmp3_get_regs>
 80031dc:	4603      	mov	r3, r0
 80031de:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 80031e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d119      	bne.n	800321c <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 80031e8:	7bbb      	ldrb	r3, [r7, #14]
 80031ea:	2b50      	cmp	r3, #80	; 0x50
 80031ec:	d002      	beq.n	80031f4 <bmp3_init+0x5a>
 80031ee:	7bbb      	ldrb	r3, [r7, #14]
 80031f0:	2b60      	cmp	r3, #96	; 0x60
 80031f2:	d111      	bne.n	8003218 <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 80031f4:	7bba      	ldrb	r2, [r7, #14]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f98f 	bl	800351e <bmp3_soft_reset>
 8003200:	4603      	mov	r3, r0
 8003202:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8003204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d107      	bne.n	800321c <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fb37 	bl	8003880 <get_calib_data>
 8003212:	4603      	mov	r3, r0
 8003214:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8003216:	e001      	b.n	800321c <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8003218:	23fe      	movs	r3, #254	; 0xfe
 800321a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800321c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8003228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800322c:	b08b      	sub	sp, #44	; 0x2c
 800322e:	af00      	add	r7, sp, #0
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	4603      	mov	r3, r0
 8003238:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800323a:	6838      	ldr	r0, [r7, #0]
 800323c:	f001 fa98 	bl	8004770 <null_ptr_check>
 8003240:	4603      	mov	r3, r0
 8003242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8003246:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800324a:	2b00      	cmp	r3, #0
 800324c:	d172      	bne.n	8003334 <bmp3_get_regs+0x10c>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d06f      	beq.n	8003334 <bmp3_get_regs+0x10c>
    {
 8003254:	466b      	mov	r3, sp
 8003256:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	7a9b      	ldrb	r3, [r3, #10]
 800325c:	461a      	mov	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	7a9b      	ldrb	r3, [r3, #10]
 8003268:	461a      	mov	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	18d1      	adds	r1, r2, r3
 800326e:	460b      	mov	r3, r1
 8003270:	3b01      	subs	r3, #1
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	2300      	movs	r3, #0
 8003276:	4688      	mov	r8, r1
 8003278:	4699      	mov	r9, r3
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800328a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800328e:	2300      	movs	r3, #0
 8003290:	460c      	mov	r4, r1
 8003292:	461d      	mov	r5, r3
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	00eb      	lsls	r3, r5, #3
 800329e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032a2:	00e2      	lsls	r2, r4, #3
 80032a4:	1dcb      	adds	r3, r1, #7
 80032a6:	08db      	lsrs	r3, r3, #3
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	ebad 0d03 	sub.w	sp, sp, r3
 80032ae:	466b      	mov	r3, sp
 80032b0:	3300      	adds	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	7a1b      	ldrb	r3, [r3, #8]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d025      	beq.n	8003308 <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032c2:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68dc      	ldr	r4, [r3, #12]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	7bf8      	ldrb	r0, [r7, #15]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	6979      	ldr	r1, [r7, #20]
 80032d2:	47a0      	blx	r4
 80032d4:	4603      	mov	r3, r0
 80032d6:	461a      	mov	r2, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 80032dc:	2300      	movs	r3, #0
 80032de:	623b      	str	r3, [r7, #32]
 80032e0:	e00d      	b.n	80032fe <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	7a9b      	ldrb	r3, [r3, #10]
 80032e6:	461a      	mov	r2, r3
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	441a      	add	r2, r3
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	440b      	add	r3, r1
 80032f2:	6979      	ldr	r1, [r7, #20]
 80032f4:	5c8a      	ldrb	r2, [r1, r2]
 80032f6:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	3301      	adds	r3, #1
 80032fc:	623b      	str	r3, [r7, #32]
 80032fe:	6a3a      	ldr	r2, [r7, #32]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	429a      	cmp	r2, r3
 8003304:	d3ed      	bcc.n	80032e2 <bmp3_get_regs+0xba>
 8003306:	e00b      	b.n	8003320 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68dc      	ldr	r4, [r3, #12]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	7bf8      	ldrb	r0, [r7, #15]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	47a0      	blx	r4
 8003318:	4603      	mov	r3, r0
 800331a:	461a      	mov	r2, r3
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 800332a:	23f9      	movs	r3, #249	; 0xf9
 800332c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003330:	46b5      	mov	sp, r6
    {
 8003332:	e002      	b.n	800333a <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003334:	23ff      	movs	r3, #255	; 0xff
 8003336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800333a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800333e:	4618      	mov	r0, r3
 8003340:	372c      	adds	r7, #44	; 0x2c
 8003342:	46bd      	mov	sp, r7
 8003344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003348 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8003348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800334c:	b08b      	sub	sp, #44	; 0x2c
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	466b      	mov	r3, sp
 800335a:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	0059      	lsls	r1, r3, #1
 8003360:	460b      	mov	r3, r1
 8003362:	3b01      	subs	r3, #1
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	2300      	movs	r3, #0
 8003368:	4688      	mov	r8, r1
 800336a:	4699      	mov	r9, r3
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003378:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800337c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003380:	2300      	movs	r3, #0
 8003382:	460c      	mov	r4, r1
 8003384:	461d      	mov	r5, r3
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	00eb      	lsls	r3, r5, #3
 8003390:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003394:	00e2      	lsls	r2, r4, #3
 8003396:	1dcb      	adds	r3, r1, #7
 8003398:	08db      	lsrs	r3, r3, #3
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	ebad 0d03 	sub.w	sp, sp, r3
 80033a0:	466b      	mov	r3, sp
 80033a2:	3300      	adds	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80033a6:	6838      	ldr	r0, [r7, #0]
 80033a8:	f001 f9e2 	bl	8004770 <null_ptr_check>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80033b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d14e      	bne.n	8003458 <bmp3_set_regs+0x110>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d04b      	beq.n	8003458 <bmp3_set_regs+0x110>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d048      	beq.n	8003458 <bmp3_set_regs+0x110>
    {
        if (len != 0)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d041      	beq.n	8003450 <bmp3_set_regs+0x108>
        {
            temp_buff[0] = reg_data[0];
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	7a1b      	ldrb	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d114      	bne.n	8003406 <bmp3_set_regs+0xbe>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80033dc:	2300      	movs	r3, #0
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e00d      	b.n	80033fe <bmp3_set_regs+0xb6>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80033e2:	7ffb      	ldrb	r3, [r7, #31]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4413      	add	r3, r2
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	7ffb      	ldrb	r3, [r7, #31]
 80033ec:	68f9      	ldr	r1, [r7, #12]
 80033ee:	440b      	add	r3, r1
 80033f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80033f8:	7ffb      	ldrb	r3, [r7, #31]
 80033fa:	3301      	adds	r3, #1
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	7ffb      	ldrb	r3, [r7, #31]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	429a      	cmp	r2, r3
 8003404:	d8ed      	bhi.n	80033e2 <bmp3_set_regs+0x9a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d909      	bls.n	8003420 <bmp3_set_regs+0xd8>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	6979      	ldr	r1, [r7, #20]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fa59 	bl	80038ca <interleave_reg_addr>
                temp_len = len * 2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	623b      	str	r3, [r7, #32]
 800341e:	e001      	b.n	8003424 <bmp3_set_regs+0xdc>
            }
            else
            {
                temp_len = len;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	691c      	ldr	r4, [r3, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	7818      	ldrb	r0, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	6979      	ldr	r1, [r7, #20]
 8003434:	47a0      	blx	r4
 8003436:	4603      	mov	r3, r0
 8003438:	461a      	mov	r2, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <bmp3_set_regs+0x118>
            {
                rslt = BMP3_E_COMM_FAIL;
 8003448:	23f9      	movs	r3, #249	; 0xf9
 800344a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 800344e:	e007      	b.n	8003460 <bmp3_set_regs+0x118>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 8003450:	23fa      	movs	r3, #250	; 0xfa
 8003452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 8003456:	e003      	b.n	8003460 <bmp3_set_regs+0x118>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003458:	23ff      	movs	r3, #255	; 0xff
 800345a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800345e:	e000      	b.n	8003462 <bmp3_set_regs+0x11a>
        if (len != 0)
 8003460:	bf00      	nop
    }

    return rslt;
 8003462:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003466:	46b5      	mov	sp, r6
}
 8003468:	4618      	mov	r0, r3
 800346a:	372c      	adds	r7, #44	; 0x2c
 800346c:	46bd      	mov	sp, r7
 800346e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003472 <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800347c:	6838      	ldr	r0, [r7, #0]
 800347e:	f001 f977 	bl	8004770 <null_ptr_check>
 8003482:	4603      	mov	r3, r0
 8003484:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8003486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d141      	bne.n	8003512 <bmp3_set_sensor_settings+0xa0>
    {
        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	2006      	movs	r0, #6
 8003492:	f001 f956 	bl	8004742 <are_settings_changed>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <bmp3_set_sensor_settings+0x36>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, dev);
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fa77 	bl	8003992 <set_pwr_ctrl_settings>
 80034a4:	4603      	mov	r3, r0
 80034a6:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	20f0      	movs	r0, #240	; 0xf0
 80034ac:	f001 f949 	bl	8004742 <are_settings_changed>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <bmp3_set_sensor_settings+0x58>
 80034b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d105      	bne.n	80034ca <bmp3_set_sensor_settings+0x58>
        {
            /* Set the over sampling, ODR and filter settings*/
            rslt = set_odr_filter_settings(desired_settings, dev);
 80034be:	6839      	ldr	r1, [r7, #0]
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fab5 	bl	8003a30 <set_odr_filter_settings>
 80034c6:	4603      	mov	r3, r0
 80034c8:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80034d0:	f001 f937 	bl	8004742 <are_settings_changed>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <bmp3_set_sensor_settings+0x7c>
 80034da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d105      	bne.n	80034ee <bmp3_set_sensor_settings+0x7c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, dev);
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fb11 	bl	8003b0c <set_int_ctrl_settings>
 80034ea:	4603      	mov	r3, r0
 80034ec:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80034f4:	f001 f925 	bl	8004742 <are_settings_changed>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <bmp3_set_sensor_settings+0xa0>
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d105      	bne.n	8003512 <bmp3_set_sensor_settings+0xa0>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, dev);
 8003506:	6839      	ldr	r1, [r7, #0]
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fb78 	bl	8003bfe <set_advance_settings>
 800350e:	4603      	mov	r3, r0
 8003510:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003512:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8003526:	237e      	movs	r3, #126	; 0x7e
 8003528:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 800352a:	23b6      	movs	r3, #182	; 0xb6
 800352c:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f001 f91e 	bl	8004770 <null_ptr_check>
 8003534:	4603      	mov	r3, r0
 8003536:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8003538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d140      	bne.n	80035c2 <bmp3_soft_reset+0xa4>
    {
        /* Check for command ready status */
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 8003540:	f107 010c 	add.w	r1, r7, #12
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	2003      	movs	r0, #3
 800354a:	f7ff fe6d 	bl	8003228 <bmp3_get_regs>
 800354e:	4603      	mov	r3, r0
 8003550:	73fb      	strb	r3, [r7, #15]

        /* Device is ready to accept new command */
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8003552:	7b3b      	ldrb	r3, [r7, #12]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	d02e      	beq.n	80035ba <bmp3_soft_reset+0x9c>
 800355c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d12a      	bne.n	80035ba <bmp3_soft_reset+0x9c>
        {
            /* Write the soft reset command in the sensor */
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003564:	f107 010d 	add.w	r1, r7, #13
 8003568:	f107 000e 	add.w	r0, r7, #14
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f7ff feea 	bl	8003348 <bmp3_set_regs>
 8003574:	4603      	mov	r3, r0
 8003576:	73fb      	strb	r3, [r7, #15]

            /* Proceed if everything is fine until now */
            if (rslt == BMP3_OK)
 8003578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d11f      	bne.n	80035c0 <bmp3_soft_reset+0xa2>
            {
                /* Wait for 2 ms */
                dev->delay_us(2000, dev->intf_ptr);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6852      	ldr	r2, [r2, #4]
 8003588:	4611      	mov	r1, r2
 800358a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800358e:	4798      	blx	r3

                /* Read for command error status */
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 8003590:	f107 010b 	add.w	r1, r7, #11
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	2002      	movs	r0, #2
 800359a:	f7ff fe45 	bl	8003228 <bmp3_get_regs>
 800359e:	4603      	mov	r3, r0
 80035a0:	73fb      	strb	r3, [r7, #15]

                /* check for command error status */
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 80035a2:	7afb      	ldrb	r3, [r7, #11]
 80035a4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d103      	bne.n	80035b4 <bmp3_soft_reset+0x96>
 80035ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <bmp3_soft_reset+0xa2>
                {
                    /* Command not written hence return
                     * error */
                    rslt = BMP3_E_CMD_EXEC_FAILED;
 80035b4:	23fc      	movs	r3, #252	; 0xfc
 80035b6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP3_OK)
 80035b8:	e002      	b.n	80035c0 <bmp3_soft_reset+0xa2>
                }
            }
        }
        else
        {
            rslt = BMP3_E_CMD_EXEC_FAILED;
 80035ba:	23fc      	movs	r3, #252	; 0xfc
 80035bc:	73fb      	strb	r3, [r7, #15]
 80035be:	e000      	b.n	80035c2 <bmp3_soft_reset+0xa4>
            if (rslt == BMP3_OK)
 80035c0:	bf00      	nop
        }
    }

    return rslt;
 80035c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_dev *dev)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f001 f8ca 	bl	8004770 <null_ptr_check>
 80035dc:	4603      	mov	r3, r0
 80035de:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80035e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d130      	bne.n	800364a <bmp3_set_op_mode+0x7c>
    {
        uint8_t curr_mode = dev->settings.op_mode;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80035ee:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80035f0:	f107 030d 	add.w	r3, r7, #13
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f82d 	bl	8003656 <bmp3_get_op_mode>
 80035fc:	4603      	mov	r3, r0
 80035fe:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if (last_set_mode != BMP3_MODE_SLEEP)
 8003600:	7b7b      	ldrb	r3, [r7, #13]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00c      	beq.n	8003620 <bmp3_set_op_mode+0x52>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f8fa 	bl	8003800 <put_device_to_sleep>
 800360c:	4603      	mov	r3, r0
 800360e:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6852      	ldr	r2, [r2, #4]
 8003618:	4611      	mov	r1, r2
 800361a:	f241 3088 	movw	r0, #5000	; 0x1388
 800361e:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8003620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d110      	bne.n	800364a <bmp3_set_op_mode+0x7c>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 8003628:	7bbb      	ldrb	r3, [r7, #14]
 800362a:	2b03      	cmp	r3, #3
 800362c:	d105      	bne.n	800363a <bmp3_set_op_mode+0x6c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(dev);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f880 	bl	8003734 <set_normal_mode>
 8003634:	4603      	mov	r3, r0
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	e007      	b.n	800364a <bmp3_set_op_mode+0x7c>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800363a:	7bbb      	ldrb	r3, [r7, #14]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d104      	bne.n	800364a <bmp3_set_op_mode+0x7c>
            {
                /* Set forced mode */
                rslt = write_power_mode(dev);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f8a7 	bl	8003794 <write_power_mode>
 8003646:	4603      	mov	r3, r0
 8003648:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800364a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003660:	6838      	ldr	r0, [r7, #0]
 8003662:	f001 f885 	bl	8004770 <null_ptr_check>
 8003666:	4603      	mov	r3, r0
 8003668:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (op_mode != NULL))
 800366a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d114      	bne.n	800369c <bmp3_get_op_mode+0x46>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d011      	beq.n	800369c <bmp3_get_op_mode+0x46>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2201      	movs	r2, #1
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	201b      	movs	r0, #27
 8003680:	f7ff fdd2 	bl	8003228 <bmp3_get_regs>
 8003684:	4603      	mov	r3, r0
 8003686:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	111b      	asrs	r3, r3, #4
 800368e:	b2db      	uxtb	r3, r3
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	b2da      	uxtb	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	e001      	b.n	80036a0 <bmp3_get_op_mode+0x4a>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800369c:	23ff      	movs	r3, #255	; 0xff
 800369e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80036a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	2300      	movs	r3, #0
 80036c0:	83bb      	strh	r3, [r7, #28]
    struct bmp3_uncomp_data uncomp_data = { 0 };
 80036c2:	f107 0310 	add.w	r3, r7, #16
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f001 f84f 	bl	8004770 <null_ptr_check>
 80036d2:	4603      	mov	r3, r0
 80036d4:	77fb      	strb	r3, [r7, #31]

    if ((rslt == BMP3_OK) && (comp_data != NULL))
 80036d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d122      	bne.n	8003724 <bmp3_get_sensor_data+0x78>
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01f      	beq.n	8003724 <bmp3_get_sensor_data+0x78>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80036e4:	f107 0118 	add.w	r1, r7, #24
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2206      	movs	r2, #6
 80036ec:	2004      	movs	r0, #4
 80036ee:	f7ff fd9b 	bl	8003228 <bmp3_get_regs>
 80036f2:	4603      	mov	r3, r0
 80036f4:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMP3_OK)
 80036f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d114      	bne.n	8003728 <bmp3_get_sensor_data+0x7c>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 80036fe:	f107 0210 	add.w	r2, r7, #16
 8003702:	f107 0318 	add.w	r3, r7, #24
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fc66 	bl	8003fda <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3318      	adds	r3, #24
 8003712:	f107 0110 	add.w	r1, r7, #16
 8003716:	7bf8      	ldrb	r0, [r7, #15]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	f000 fc91 	bl	8004040 <compensate_data>
 800371e:	4603      	mov	r3, r0
 8003720:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMP3_OK)
 8003722:	e001      	b.n	8003728 <bmp3_get_sensor_data+0x7c>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003724:	23ff      	movs	r3, #255	; 0xff
 8003726:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003728:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3720      	adds	r7, #32
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_dev *dev)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(dev);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f887 	bl	8003850 <validate_normal_mode_settings>
 8003742:	4603      	mov	r3, r0
 8003744:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8003746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d11c      	bne.n	8003788 <set_normal_mode+0x54>
    {
        rslt = write_power_mode(dev);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f820 	bl	8003794 <write_power_mode>
 8003754:	4603      	mov	r3, r0
 8003756:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8003758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d113      	bne.n	8003788 <set_normal_mode+0x54>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 8003760:	f107 010e 	add.w	r1, r7, #14
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	2002      	movs	r0, #2
 800376a:	f7ff fd5d 	bl	8003228 <bmp3_get_regs>
 800376e:	4603      	mov	r3, r0
 8003770:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 8003772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <set_normal_mode+0x54>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 800377a:	7bbb      	ldrb	r3, [r7, #14]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <set_normal_mode+0x54>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8003784:	23fb      	movs	r3, #251	; 0xfb
 8003786:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003788:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(struct bmp3_dev *dev)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800379c:	231b      	movs	r3, #27
 800379e:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = dev->settings.op_mode;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80037a6:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 80037a8:	7b78      	ldrb	r0, [r7, #13]
 80037aa:	f107 010c 	add.w	r1, r7, #12
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f7ff fd39 	bl	8003228 <bmp3_get_regs>
 80037b6:	4603      	mov	r3, r0
 80037b8:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 80037ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d118      	bne.n	80037f4 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80037c2:	7b3b      	ldrb	r3, [r7, #12]
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80037ca:	b25a      	sxtb	r2, r3
 80037cc:	7bbb      	ldrb	r3, [r7, #14]
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	b25b      	sxtb	r3, r3
 80037d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037d6:	b25b      	sxtb	r3, r3
 80037d8:	4313      	orrs	r3, r2
 80037da:	b25b      	sxtb	r3, r3
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80037e0:	f107 010c 	add.w	r1, r7, #12
 80037e4:	f107 000d 	add.w	r0, r7, #13
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f7ff fdac 	bl	8003348 <bmp3_set_regs>
 80037f0:	4603      	mov	r3, r0
 80037f2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80037f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003808:	231b      	movs	r3, #27
 800380a:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 800380c:	f107 010d 	add.w	r1, r7, #13
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	201b      	movs	r0, #27
 8003816:	f7ff fd07 	bl	8003228 <bmp3_get_regs>
 800381a:	4603      	mov	r3, r0
 800381c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800381e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10e      	bne.n	8003844 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8003826:	7b7b      	ldrb	r3, [r7, #13]
 8003828:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800382c:	b2db      	uxtb	r3, r3
 800382e:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8003830:	f107 010d 	add.w	r1, r7, #13
 8003834:	f107 000e 	add.w	r0, r7, #14
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f7ff fd84 	bl	8003348 <bmp3_set_regs>
 8003840:	4603      	mov	r3, r0
 8003842:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003844:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_dev *dev)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = get_odr_filter_settings(dev);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fa22 	bl	8003ca2 <get_odr_filter_settings>
 800385e:	4603      	mov	r3, r0
 8003860:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d104      	bne.n	8003874 <validate_normal_mode_settings+0x24>
    {
        rslt = validate_osr_and_odr_settings(dev);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fa36 	bl	8003cdc <validate_osr_and_odr_settings>
 8003870:	4603      	mov	r3, r0
 8003872:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8003888:	2331      	movs	r3, #49	; 0x31
 800388a:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 800388c:	2300      	movs	r3, #0
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	f107 030c 	add.w	r3, r7, #12
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80038a0:	f107 0108 	add.w	r1, r7, #8
 80038a4:	7ff8      	ldrb	r0, [r7, #31]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2215      	movs	r2, #21
 80038aa:	f7ff fcbd 	bl	8003228 <bmp3_get_regs>
 80038ae:	4603      	mov	r3, r0
 80038b0:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80038b2:	f107 0308 	add.w	r3, r7, #8
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fbf9 	bl	80040b0 <parse_calib_data>

    return rslt;
 80038be:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b087      	sub	sp, #28
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80038d8:	2301      	movs	r3, #1
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e015      	b.n	800390a <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	441a      	add	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	3b01      	subs	r3, #1
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	440b      	add	r3, r1
 80038ee:	7812      	ldrb	r2, [r2, #0]
 80038f0:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	441a      	add	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	440b      	add	r3, r1
 8003900:	7812      	ldrb	r2, [r2, #0]
 8003902:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	3301      	adds	r3, #1
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d3e5      	bcc.n	80038de <interleave_reg_addr+0x14>
    }
}
 8003912:	bf00      	nop
 8003914:	bf00      	nop
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr

0800391e <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 800391e:	b480      	push	{r7}
 8003920:	b085      	sub	sp, #20
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	b2da      	uxtb	r2, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4413      	add	r3, r2
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	10db      	asrs	r3, r3, #3
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	b2da      	uxtb	r2, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	3301      	adds	r3, #1
 8003958:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	4413      	add	r3, r2
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	b2da      	uxtb	r2, r3
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	3302      	adds	r3, #2
 8003970:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4413      	add	r3, r2
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	105b      	asrs	r3, r3, #1
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	b2da      	uxtb	r2, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	709a      	strb	r2, [r3, #2]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr

08003992 <set_pwr_ctrl_settings>:
/*!
 * @brief This API sets the pressure enable and temperature enable
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800399c:	231b      	movs	r3, #27
 800399e:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80039a0:	7bb8      	ldrb	r0, [r7, #14]
 80039a2:	f107 010d 	add.w	r1, r7, #13
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f7ff fc3d 	bl	8003228 <bmp3_get_regs>
 80039ae:	4603      	mov	r3, r0
 80039b0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80039b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d134      	bne.n	8003a24 <set_pwr_ctrl_settings+0x92>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00f      	beq.n	80039e4 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
 80039c4:	7b7b      	ldrb	r3, [r7, #13]
 80039c6:	b25b      	sxtb	r3, r3
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	b25a      	sxtb	r2, r3
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80039d4:	b25b      	sxtb	r3, r3
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	b25b      	sxtb	r3, r3
 80039dc:	4313      	orrs	r3, r2
 80039de:	b25b      	sxtb	r3, r3
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d010      	beq.n	8003a10 <set_pwr_ctrl_settings+0x7e>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
 80039ee:	7b7b      	ldrb	r3, [r7, #13]
 80039f0:	b25b      	sxtb	r3, r3
 80039f2:	f023 0302 	bic.w	r3, r3, #2
 80039f6:	b25a      	sxtb	r2, r3
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	b25b      	sxtb	r3, r3
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	b25b      	sxtb	r3, r3
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	b25b      	sxtb	r3, r3
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	737b      	strb	r3, [r7, #13]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8003a10:	f107 010d 	add.w	r1, r7, #13
 8003a14:	f107 000e 	add.w	r0, r7, #14
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f7ff fc94 	bl	8003348 <bmp3_set_regs>
 8003a20:	4603      	mov	r3, r0
 8003a22:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8003a3a:	4b33      	ldr	r3, [pc, #204]	; (8003b08 <set_odr_filter_settings+0xd8>)
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	82bb      	strh	r3, [r7, #20]
 8003a40:	2300      	movs	r3, #0
 8003a42:	75bb      	strb	r3, [r7, #22]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	73fb      	strb	r3, [r7, #15]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8003a48:	f107 0110 	add.w	r1, r7, #16
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2204      	movs	r2, #4
 8003a50:	201c      	movs	r0, #28
 8003a52:	f7ff fbe9 	bl	8003228 <bmp3_get_regs>
 8003a56:	4603      	mov	r3, r0
 8003a58:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8003a5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d14b      	bne.n	8003afa <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	2030      	movs	r0, #48	; 0x30
 8003a66:	f000 fe6c 	bl	8004742 <are_settings_changed>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00b      	beq.n	8003a88 <set_odr_filter_settings+0x58>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, dev);
 8003a70:	f107 000f 	add.w	r0, r7, #15
 8003a74:	f107 0210 	add.w	r2, r7, #16
 8003a78:	f107 0114 	add.w	r1, r7, #20
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	4603      	mov	r3, r0
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f9e4 	bl	8003e50 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	2080      	movs	r0, #128	; 0x80
 8003a8c:	f000 fe59 	bl	8004742 <are_settings_changed>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <set_odr_filter_settings+0x78>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, dev);
 8003a96:	f107 020f 	add.w	r2, r7, #15
 8003a9a:	f107 0110 	add.w	r1, r7, #16
 8003a9e:	f107 0014 	add.w	r0, r7, #20
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	f000 fa2b 	bl	8003efe <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	2040      	movs	r0, #64	; 0x40
 8003aac:	f000 fe49 	bl	8004742 <are_settings_changed>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <set_odr_filter_settings+0x98>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, dev);
 8003ab6:	f107 020f 	add.w	r2, r7, #15
 8003aba:	f107 0110 	add.w	r1, r7, #16
 8003abe:	f107 0014 	add.w	r0, r7, #20
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	f000 fa54 	bl	8003f70 <fill_filter_data>
        }

        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d104      	bne.n	8003adc <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(dev);
 8003ad2:	6838      	ldr	r0, [r7, #0]
 8003ad4:	f000 f902 	bl	8003cdc <validate_osr_and_odr_settings>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMP3_OK)
 8003adc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f107 0110 	add.w	r1, r7, #16
 8003aec:	f107 0014 	add.w	r0, r7, #20
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	f7ff fc29 	bl	8003348 <bmp3_set_regs>
 8003af6:	4603      	mov	r3, r0
 8003af8:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8003afa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	0801f550 	.word	0x0801f550

08003b0c <set_int_ctrl_settings>:
 * @brief This internal API sets the interrupt control (output mode, level,
 * latch and data ready) settings of the sensor based on the settings
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 8003b16:	2319      	movs	r3, #25
 8003b18:	737b      	strb	r3, [r7, #13]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8003b1a:	7b78      	ldrb	r0, [r7, #13]
 8003b1c:	f107 010e 	add.w	r1, r7, #14
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f7ff fb80 	bl	8003228 <bmp3_get_regs>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d15e      	bne.n	8003bf2 <set_int_ctrl_settings+0xe6>
    {
        int_settings = dev->settings.int_settings;
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	f107 0308 	add.w	r3, r7, #8
 8003b3a:	32b7      	adds	r2, #183	; 0xb7
 8003b3c:	6810      	ldr	r0, [r2, #0]
 8003b3e:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00d      	beq.n	8003b66 <set_int_ctrl_settings+0x5a>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8003b4a:	7bbb      	ldrb	r3, [r7, #14]
 8003b4c:	b25b      	sxtb	r3, r3
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	b25a      	sxtb	r2, r3
 8003b54:	7a3b      	ldrb	r3, [r7, #8]
 8003b56:	b25b      	sxtb	r3, r3
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	b25b      	sxtb	r3, r3
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	b25b      	sxtb	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00e      	beq.n	8003b8e <set_int_ctrl_settings+0x82>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8003b70:	7bbb      	ldrb	r3, [r7, #14]
 8003b72:	b25b      	sxtb	r3, r3
 8003b74:	f023 0302 	bic.w	r3, r3, #2
 8003b78:	b25a      	sxtb	r2, r3
 8003b7a:	7a7b      	ldrb	r3, [r7, #9]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	b25b      	sxtb	r3, r3
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	b25b      	sxtb	r3, r3
 8003b86:	4313      	orrs	r3, r2
 8003b88:	b25b      	sxtb	r3, r3
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00e      	beq.n	8003bb6 <set_int_ctrl_settings+0xaa>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8003b98:	7bbb      	ldrb	r3, [r7, #14]
 8003b9a:	b25b      	sxtb	r3, r3
 8003b9c:	f023 0304 	bic.w	r3, r3, #4
 8003ba0:	b25a      	sxtb	r2, r3
 8003ba2:	7abb      	ldrb	r3, [r7, #10]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	b25b      	sxtb	r3, r3
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	b25b      	sxtb	r3, r3
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	b25b      	sxtb	r3, r3
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00e      	beq.n	8003bde <set_int_ctrl_settings+0xd2>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 8003bc0:	7bbb      	ldrb	r3, [r7, #14]
 8003bc2:	b25b      	sxtb	r3, r3
 8003bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc8:	b25a      	sxtb	r2, r3
 8003bca:	7afb      	ldrb	r3, [r7, #11]
 8003bcc:	019b      	lsls	r3, r3, #6
 8003bce:	b25b      	sxtb	r3, r3
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	b25b      	sxtb	r3, r3
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	b25b      	sxtb	r3, r3
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	73bb      	strb	r3, [r7, #14]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8003bde:	f107 010e 	add.w	r1, r7, #14
 8003be2:	f107 000d 	add.w	r0, r7, #13
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f7ff fbad 	bl	8003348 <bmp3_set_regs>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <set_advance_settings>:
/*!
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	f107 0308 	add.w	r3, r7, #8
 8003c0e:	32bb      	adds	r2, #187	; 0xbb
 8003c10:	8812      	ldrh	r2, [r2, #0]
 8003c12:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8003c14:	231a      	movs	r3, #26
 8003c16:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8003c18:	7bb8      	ldrb	r0, [r7, #14]
 8003c1a:	f107 010d 	add.w	r1, r7, #13
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f7ff fb01 	bl	8003228 <bmp3_get_regs>
 8003c26:	4603      	mov	r3, r0
 8003c28:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d131      	bne.n	8003c96 <set_advance_settings+0x98>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00e      	beq.n	8003c5a <set_advance_settings+0x5c>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8003c3c:	7b7b      	ldrb	r3, [r7, #13]
 8003c3e:	b25b      	sxtb	r3, r3
 8003c40:	f023 0302 	bic.w	r3, r3, #2
 8003c44:	b25a      	sxtb	r2, r3
 8003c46:	7a3b      	ldrb	r3, [r7, #8]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	b25b      	sxtb	r3, r3
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	b25b      	sxtb	r3, r3
 8003c52:	4313      	orrs	r3, r2
 8003c54:	b25b      	sxtb	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00e      	beq.n	8003c82 <set_advance_settings+0x84>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8003c64:	7b7b      	ldrb	r3, [r7, #13]
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	f023 0304 	bic.w	r3, r3, #4
 8003c6c:	b25a      	sxtb	r2, r3
 8003c6e:	7a7b      	ldrb	r3, [r7, #9]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	b25b      	sxtb	r3, r3
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	b25b      	sxtb	r3, r3
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	b25b      	sxtb	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	737b      	strb	r3, [r7, #13]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8003c82:	f107 010d 	add.w	r1, r7, #13
 8003c86:	f107 000e 	add.w	r0, r7, #14
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f7ff fb5b 	bl	8003348 <bmp3_set_regs>
 8003c92:	4603      	mov	r3, r0
 8003c94:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_dev *dev)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8003caa:	f107 0108 	add.w	r1, r7, #8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	201c      	movs	r0, #28
 8003cb4:	f7ff fab8 	bl	8003228 <bmp3_get_regs>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &dev->settings.odr_filter);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 8003cc2:	f107 0308 	add.w	r3, r7, #8
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fe28 	bl	800391e <parse_odr_filter_settings>

    return rslt;
 8003cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_dev *dev)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b098      	sub	sp, #96	; 0x60
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8003ce4:	23ea      	movs	r3, #234	; 0xea
 8003ce6:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8003cec:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <validate_osr_and_odr_settings+0x84>)
 8003cee:	f107 030c 	add.w	r3, r7, #12
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	2248      	movs	r2, #72	; 0x48
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f01b fbfa 	bl	801f4f0 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (dev->settings.press_en)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d006      	beq.n	8003d14 <validate_osr_and_odr_settings+0x38>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(dev);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f842 	bl	8003d90 <calculate_press_meas_time>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d10:	4413      	add	r3, r2
 8003d12:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (dev->settings.temp_en)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d006      	beq.n	8003d2c <validate_osr_and_odr_settings+0x50>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(dev);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f866 	bl	8003df0 <calculate_temp_meas_time>
 8003d24:	4602      	mov	r2, r0
 8003d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d28:	4413      	add	r3, r2
 8003d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8003d2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d30:	4413      	add	r3, r2
 8003d32:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	3360      	adds	r3, #96	; 0x60
 8003d3e:	443b      	add	r3, r7
 8003d40:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003d44:	4619      	mov	r1, r3
 8003d46:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003d48:	f000 f80c 	bl	8003d64 <verify_meas_time_and_odr_duration>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8003d52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3760      	adds	r7, #96	; 0x60
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	0801f554 	.word	0x0801f554

08003d64 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d202      	bcs.n	8003d7c <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	73fb      	strb	r3, [r7, #15]
 8003d7a:	e001      	b.n	8003d80 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8003d7c:	23fd      	movs	r3, #253	; 0xfd
 8003d7e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr
	...

08003d90 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_dev *dev)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	f107 030c 	add.w	r3, r7, #12
 8003d9e:	32b3      	adds	r2, #179	; 0xb3
 8003da0:	6810      	ldr	r0, [r2, #0]
 8003da2:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8003db0:	7b3b      	ldrb	r3, [r7, #12]
 8003db2:	461a      	mov	r2, r3
 8003db4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003db8:	f000 fca2 	bl	8004700 <pow_bmp3>
 8003dbc:	6178      	str	r0, [r7, #20]
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8003dbe:	490a      	ldr	r1, [pc, #40]	; (8003de8 <calculate_press_meas_time+0x58>)
 8003dc0:	6978      	ldr	r0, [r7, #20]
 8003dc2:	f7fc ffbd 	bl	8000d40 <__aeabi_fmul>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4908      	ldr	r1, [pc, #32]	; (8003dec <calculate_press_meas_time+0x5c>)
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fc feb0 	bl	8000b30 <__addsf3>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd f92a 	bl	800102c <__aeabi_f2uiz>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8003ddc:	693b      	ldr	r3, [r7, #16]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3720      	adds	r7, #32
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	44fa0000 	.word	0x44fa0000
 8003dec:	43c40000 	.word	0x43c40000

08003df0 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_dev *dev)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	f107 030c 	add.w	r3, r7, #12
 8003dfe:	32b3      	adds	r2, #179	; 0xb3
 8003e00:	6810      	ldr	r0, [r2, #0]
 8003e02:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8003e10:	7b7b      	ldrb	r3, [r7, #13]
 8003e12:	461a      	mov	r2, r3
 8003e14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003e18:	f000 fc72 	bl	8004700 <pow_bmp3>
 8003e1c:	6178      	str	r0, [r7, #20]
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8003e1e:	490a      	ldr	r1, [pc, #40]	; (8003e48 <calculate_temp_meas_time+0x58>)
 8003e20:	6978      	ldr	r0, [r7, #20]
 8003e22:	f7fc ff8d 	bl	8000d40 <__aeabi_fmul>
 8003e26:	4603      	mov	r3, r0
 8003e28:	4908      	ldr	r1, [pc, #32]	; (8003e4c <calculate_temp_meas_time+0x5c>)
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fc fe80 	bl	8000b30 <__addsf3>
 8003e30:	4603      	mov	r3, r0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fd f8fa 	bl	800102c <__aeabi_f2uiz>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8003e3c:	693b      	ldr	r3, [r7, #16]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	44fa0000 	.word	0x44fa0000
 8003e4c:	439c8000 	.word	0x439c8000

08003e50 <fill_osr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the over sampling settings for burst write operation.
 */
static void fill_osr_data(uint32_t settings, uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 8003e5e:	6a3a      	ldr	r2, [r7, #32]
 8003e60:	f107 0314 	add.w	r3, r7, #20
 8003e64:	32b3      	adds	r2, #179	; 0xb3
 8003e66:	6810      	ldr	r0, [r2, #0]
 8003e68:	6018      	str	r0, [r3, #0]

    if (settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d03f      	beq.n	8003ef4 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (settings & BMP3_SEL_PRESS_OS)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d013      	beq.n	8003ea6 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	b25b      	sxtb	r3, r3
 8003e84:	f023 0307 	bic.w	r3, r3, #7
 8003e88:	b25a      	sxtb	r2, r3
 8003e8a:	7d3b      	ldrb	r3, [r7, #20]
 8003e8c:	b25b      	sxtb	r3, r3
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	b25b      	sxtb	r3, r3
 8003e94:	4313      	orrs	r3, r2
 8003e96:	b25a      	sxtb	r2, r3
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	440b      	add	r3, r1
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (settings & BMP3_SEL_TEMP_OS)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d014      	beq.n	8003eda <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	b25b      	sxtb	r3, r3
 8003eb6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003eba:	b25a      	sxtb	r2, r3
 8003ebc:	7d7b      	ldrb	r3, [r7, #21]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	b25b      	sxtb	r3, r3
 8003ec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ec6:	b25b      	sxtb	r3, r3
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	b25a      	sxtb	r2, r3
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	440b      	add	r3, r1
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	221c      	movs	r2, #28
 8003ee6:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	3301      	adds	r3, #1
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	701a      	strb	r2, [r3, #0]
    }
}
 8003ef4:	bf00      	nop
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr

08003efe <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_dev *dev)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b087      	sub	sp, #28
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &dev->settings.odr_filter;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	33b3      	adds	r3, #179	; 0xb3
 8003f10:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	78db      	ldrb	r3, [r3, #3]
 8003f16:	2b11      	cmp	r3, #17
 8003f18:	d902      	bls.n	8003f20 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2211      	movs	r2, #17
 8003f1e:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	3301      	adds	r3, #1
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	b25b      	sxtb	r3, r3
 8003f28:	f023 031f 	bic.w	r3, r3, #31
 8003f2c:	b25a      	sxtb	r2, r3
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	78db      	ldrb	r3, [r3, #3]
 8003f32:	b25b      	sxtb	r3, r3
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	b25b      	sxtb	r3, r3
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	b25a      	sxtb	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	4619      	mov	r1, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	440b      	add	r3, r1
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4413      	add	r3, r2
 8003f56:	221d      	movs	r2, #29
 8003f58:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	701a      	strb	r2, [r3, #0]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr

08003f70 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	f107 0314 	add.w	r3, r7, #20
 8003f84:	32b3      	adds	r2, #179	; 0xb3
 8003f86:	6810      	ldr	r0, [r2, #0]
 8003f88:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	3303      	adds	r3, #3
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	b25b      	sxtb	r3, r3
 8003f92:	f023 030e 	bic.w	r3, r3, #14
 8003f96:	b25a      	sxtb	r2, r3
 8003f98:	7dbb      	ldrb	r3, [r7, #22]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	b25b      	sxtb	r3, r3
 8003f9e:	f003 030e 	and.w	r3, r3, #14
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	b25a      	sxtb	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	4619      	mov	r1, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	440b      	add	r3, r1
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	221f      	movs	r2, #31
 8003fc2:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	701a      	strb	r2, [r3, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b087      	sub	sp, #28
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3301      	adds	r3, #1
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	021b      	lsls	r3, r3, #8
 8003ff2:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3302      	adds	r3, #2
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	041b      	lsls	r3, r3, #16
 8003ffc:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	431a      	orrs	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	431a      	orrs	r2, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3303      	adds	r3, #3
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3305      	adds	r3, #5
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	041b      	lsls	r3, r3, #16
 8004026:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	431a      	orrs	r2, r3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	431a      	orrs	r2, r3
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	605a      	str	r2, [r3, #4]
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	4603      	mov	r3, r0
 800404e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d022      	beq.n	80040a0 <compensate_data+0x60>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01f      	beq.n	80040a0 <compensate_data+0x60>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01c      	beq.n	80040a0 <compensate_data+0x60>
    {
        /* If pressure or temperature component is selected */
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <compensate_data+0x42>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8004070:	6839      	ldr	r1, [r7, #0]
 8004072:	68b8      	ldr	r0, [r7, #8]
 8004074:	f000 f9e4 	bl	8004440 <compensate_temperature>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (sensor_comp & BMP3_PRESS)
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00b      	beq.n	80040a4 <compensate_data+0x64>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800408c:	6839      	ldr	r1, [r7, #0]
 800408e:	68b8      	ldr	r0, [r7, #8]
 8004090:	f000 fa19 	bl	80044c6 <compensate_pressure>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp & BMP3_PRESS)
 800409e:	e001      	b.n	80040a4 <compensate_data+0x64>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80040a0:	23ff      	movs	r3, #255	; 0xff
 80040a2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80040a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	3390      	adds	r3, #144	; 0x90
 80040be:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	3318      	adds	r3, #24
 80040c4:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	4ba4      	ldr	r3, [pc, #656]	; (800435c <parse_calib_data+0x2ac>)
 80040cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3301      	adds	r3, #1
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	b21a      	sxth	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	b21b      	sxth	r3, r3
 80040e0:	4313      	orrs	r3, r2
 80040e2:	b21b      	sxth	r3, r3
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fc f98c 	bl	800040c <__aeabi_ui2d>
 80040f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040f8:	f7fc fb2c 	bl	8000754 <__aeabi_ddiv>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	6939      	ldr	r1, [r7, #16]
 8004102:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3303      	adds	r3, #3
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	b21a      	sxth	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3302      	adds	r3, #2
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	b21b      	sxth	r3, r3
 8004118:	4313      	orrs	r3, r2
 800411a:	b21b      	sxth	r3, r3
 800411c:	b29a      	uxth	r2, r3
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	4b8e      	ldr	r3, [pc, #568]	; (8004360 <parse_calib_data+0x2b0>)
 8004128:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	885b      	ldrh	r3, [r3, #2]
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc f96b 	bl	800040c <__aeabi_ui2d>
 8004136:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800413a:	f7fc fb0b 	bl	8000754 <__aeabi_ddiv>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	6939      	ldr	r1, [r7, #16]
 8004144:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	b25a      	sxtb	r2, r3
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	4b82      	ldr	r3, [pc, #520]	; (8004364 <parse_calib_data+0x2b4>)
 800415a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8004164:	4618      	mov	r0, r3
 8004166:	f7fc f961 	bl	800042c <__aeabi_i2d>
 800416a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800416e:	f7fc faf1 	bl	8000754 <__aeabi_ddiv>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	6939      	ldr	r1, [r7, #16]
 8004178:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3306      	adds	r3, #6
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	021b      	lsls	r3, r3, #8
 8004184:	b21a      	sxth	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3305      	adds	r3, #5
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	b21b      	sxth	r3, r3
 800418e:	4313      	orrs	r3, r2
 8004190:	b21a      	sxth	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	4b73      	ldr	r3, [pc, #460]	; (8004368 <parse_calib_data+0x2b8>)
 800419c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80041a6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fc f93e 	bl	800042c <__aeabi_i2d>
 80041b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041b4:	f7fc face 	bl	8000754 <__aeabi_ddiv>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	6939      	ldr	r1, [r7, #16]
 80041be:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3308      	adds	r3, #8
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	b21a      	sxth	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3307      	adds	r3, #7
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	b21b      	sxth	r3, r3
 80041d4:	4313      	orrs	r3, r2
 80041d6:	b21a      	sxth	r2, r3
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	4b62      	ldr	r3, [pc, #392]	; (800436c <parse_calib_data+0x2bc>)
 80041e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80041ec:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fc f91b 	bl	800042c <__aeabi_i2d>
 80041f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041fa:	f7fc faab 	bl	8000754 <__aeabi_ddiv>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	6939      	ldr	r1, [r7, #16]
 8004204:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3309      	adds	r3, #9
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	b25a      	sxtb	r2, r3
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	4b55      	ldr	r3, [pc, #340]	; (8004370 <parse_calib_data+0x2c0>)
 800421a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004224:	4618      	mov	r0, r3
 8004226:	f7fc f901 	bl	800042c <__aeabi_i2d>
 800422a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800422e:	f7fc fa91 	bl	8000754 <__aeabi_ddiv>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	6939      	ldr	r1, [r7, #16]
 8004238:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	330a      	adds	r3, #10
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	b25a      	sxtb	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	4b49      	ldr	r3, [pc, #292]	; (8004374 <parse_calib_data+0x2c4>)
 800424e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8004258:	4618      	mov	r0, r3
 800425a:	f7fc f8e7 	bl	800042c <__aeabi_i2d>
 800425e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004262:	f7fc fa77 	bl	8000754 <__aeabi_ddiv>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	6939      	ldr	r1, [r7, #16]
 800426c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	330c      	adds	r3, #12
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	b21a      	sxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	330b      	adds	r3, #11
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	b21b      	sxth	r3, r3
 8004282:	4313      	orrs	r3, r2
 8004284:	b21b      	sxth	r3, r3
 8004286:	b29a      	uxth	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004294:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	899b      	ldrh	r3, [r3, #12]
 800429c:	4618      	mov	r0, r3
 800429e:	f7fc f8b5 	bl	800040c <__aeabi_ui2d>
 80042a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042a6:	f7fc fa55 	bl	8000754 <__aeabi_ddiv>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	6939      	ldr	r1, [r7, #16]
 80042b0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	330e      	adds	r3, #14
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	b21a      	sxth	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	330d      	adds	r3, #13
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	b21b      	sxth	r3, r3
 80042c6:	4313      	orrs	r3, r2
 80042c8:	b21b      	sxth	r3, r3
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	4b28      	ldr	r3, [pc, #160]	; (8004378 <parse_calib_data+0x2c8>)
 80042d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	89db      	ldrh	r3, [r3, #14]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fc f894 	bl	800040c <__aeabi_ui2d>
 80042e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042e8:	f7fc fa34 	bl	8000754 <__aeabi_ddiv>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	6939      	ldr	r1, [r7, #16]
 80042f2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	330f      	adds	r3, #15
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	b25a      	sxtb	r2, r3
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	4b1d      	ldr	r3, [pc, #116]	; (800437c <parse_calib_data+0x2cc>)
 8004308:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fc f88a 	bl	800042c <__aeabi_i2d>
 8004318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800431c:	f7fc fa1a 	bl	8000754 <__aeabi_ddiv>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	6939      	ldr	r1, [r7, #16]
 8004326:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3310      	adds	r3, #16
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	b25a      	sxtb	r2, r3
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	4b11      	ldr	r3, [pc, #68]	; (8004380 <parse_calib_data+0x2d0>)
 800433c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8004346:	4618      	mov	r0, r3
 8004348:	f7fc f870 	bl	800042c <__aeabi_i2d>
 800434c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004350:	f7fc fa00 	bl	8000754 <__aeabi_ddiv>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	6939      	ldr	r1, [r7, #16]
 800435a:	e013      	b.n	8004384 <parse_calib_data+0x2d4>
 800435c:	3f700000 	.word	0x3f700000
 8004360:	41d00000 	.word	0x41d00000
 8004364:	42f00000 	.word	0x42f00000
 8004368:	41300000 	.word	0x41300000
 800436c:	41c00000 	.word	0x41c00000
 8004370:	41f00000 	.word	0x41f00000
 8004374:	42400000 	.word	0x42400000
 8004378:	40500000 	.word	0x40500000
 800437c:	40700000 	.word	0x40700000
 8004380:	40e00000 	.word	0x40e00000
 8004384:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3312      	adds	r3, #18
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	b21a      	sxth	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3311      	adds	r3, #17
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	b21b      	sxth	r3, r3
 800439a:	4313      	orrs	r3, r2
 800439c:	b21a      	sxth	r2, r3
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	4b25      	ldr	r3, [pc, #148]	; (800443c <parse_calib_data+0x38c>)
 80043a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fc f83a 	bl	800042c <__aeabi_i2d>
 80043b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043bc:	f7fc f9ca 	bl	8000754 <__aeabi_ddiv>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	6939      	ldr	r1, [r7, #16]
 80043c6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3313      	adds	r3, #19
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	b25a      	sxtb	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	4b18      	ldr	r3, [pc, #96]	; (800443c <parse_calib_data+0x38c>)
 80043dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fc f820 	bl	800042c <__aeabi_i2d>
 80043ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043f0:	f7fc f9b0 	bl	8000754 <__aeabi_ddiv>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	6939      	ldr	r1, [r7, #16]
 80043fa:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3314      	adds	r3, #20
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	b25a      	sxtb	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8004412:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800441c:	4618      	mov	r0, r3
 800441e:	f7fc f805 	bl	800042c <__aeabi_i2d>
 8004422:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004426:	f7fc f995 	bl	8000754 <__aeabi_ddiv>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	6939      	ldr	r1, [r7, #16]
 8004430:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8004434:	bf00      	nop
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	42f00000 	.word	0x42f00000

08004440 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 * for e.g. returns temperature 24.26 deg Celsius
 */
static double compensate_temperature(const struct bmp3_uncomp_data *uncomp_data, struct bmp3_calib_data *calib_data)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
    uint32_t uncomp_temp = uncomp_data->temperature;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	61fb      	str	r3, [r7, #28]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 8004450:	69f8      	ldr	r0, [r7, #28]
 8004452:	f7fb ffdb 	bl	800040c <__aeabi_ui2d>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445c:	f7fb fe98 	bl	8000190 <__aeabi_dsub>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	e9c7 2304 	strd	r2, r3, [r7, #16]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800446e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004472:	f7fc f845 	bl	8000500 <__aeabi_dmul>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 800447e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004482:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004486:	f7fc f83b 	bl	8000500 <__aeabi_dmul>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4610      	mov	r0, r2
 8004490:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8004498:	f7fc f832 	bl	8000500 <__aeabi_dmul>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044a8:	f7fb fe74 	bl	8000194 <__adddf3>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	6839      	ldr	r1, [r7, #0]
 80044b2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    return calib_data->quantized_calib_data.t_lin;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
}
 80044bc:	4610      	mov	r0, r2
 80044be:	4619      	mov	r1, r3
 80044c0:	3720      	adds	r7, #32
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 * For e.g. returns pressure in Pascal p = 95305.295 which is 953.05295 hecto pascal
 */
static double compensate_pressure(const struct bmp3_uncomp_data *uncomp_data, const struct bmp3_calib_data *calib_data)
{
 80044c6:	b5b0      	push	{r4, r5, r7, lr}
 80044c8:	b092      	sub	sp, #72	; 0x48
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 80044d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80044da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044dc:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80044e0:	f7fc f80e 	bl	8000500 <__aeabi_dmul>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80044ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ee:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80044f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f4:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80044f8:	2202      	movs	r2, #2
 80044fa:	f000 f901 	bl	8004700 <pow_bmp3>
 80044fe:	4603      	mov	r3, r0
 8004500:	4618      	mov	r0, r3
 8004502:	f7fb ffa5 	bl	8000450 <__aeabi_f2d>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4620      	mov	r0, r4
 800450c:	4629      	mov	r1, r5
 800450e:	f7fb fff7 	bl	8000500 <__aeabi_dmul>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 800451a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800451c:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8004520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004522:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004526:	2203      	movs	r2, #3
 8004528:	f000 f8ea 	bl	8004700 <pow_bmp3>
 800452c:	4603      	mov	r3, r0
 800452e:	4618      	mov	r0, r3
 8004530:	f7fb ff8e 	bl	8000450 <__aeabi_f2d>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4620      	mov	r0, r4
 800453a:	4629      	mov	r1, r5
 800453c:	f7fb ffe0 	bl	8000500 <__aeabi_dmul>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 8004548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800454a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800454e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004552:	f7fb fe1f 	bl	8000194 <__adddf3>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4610      	mov	r0, r2
 800455c:	4619      	mov	r1, r3
 800455e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004562:	f7fb fe17 	bl	8000194 <__adddf3>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800456e:	f7fb fe11 	bl	8000194 <__adddf3>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 800457a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800457c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004582:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004586:	f7fb ffbb 	bl	8000500 <__aeabi_dmul>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8004592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004594:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8004598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800459e:	2202      	movs	r2, #2
 80045a0:	f000 f8ae 	bl	8004700 <pow_bmp3>
 80045a4:	4603      	mov	r3, r0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fb ff52 	bl	8000450 <__aeabi_f2d>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4620      	mov	r0, r4
 80045b2:	4629      	mov	r1, r5
 80045b4:	f7fb ffa4 	bl	8000500 <__aeabi_dmul>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80045c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80045c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c8:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80045cc:	2203      	movs	r2, #3
 80045ce:	f000 f897 	bl	8004700 <pow_bmp3>
 80045d2:	4603      	mov	r3, r0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fb ff3b 	bl	8000450 <__aeabi_f2d>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4620      	mov	r0, r4
 80045e0:	4629      	mov	r1, r5
 80045e2:	f7fb ff8d 	bl	8000500 <__aeabi_dmul>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fb ff0a 	bl	800040c <__aeabi_ui2d>
 80045f8:	4604      	mov	r4, r0
 80045fa:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 80045fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045fe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004602:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004606:	f7fb fdc5 	bl	8000194 <__adddf3>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4610      	mov	r0, r2
 8004610:	4619      	mov	r1, r3
 8004612:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004616:	f7fb fdbd 	bl	8000194 <__adddf3>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4610      	mov	r0, r2
 8004620:	4619      	mov	r1, r3
 8004622:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004626:	f7fb fdb5 	bl	8000194 <__adddf3>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 800462e:	4620      	mov	r0, r4
 8004630:	4629      	mov	r1, r5
 8004632:	f7fb ff65 	bl	8000500 <__aeabi_dmul>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7fb fee2 	bl	800040c <__aeabi_ui2d>
 8004648:	2202      	movs	r2, #2
 800464a:	f000 f859 	bl	8004700 <pow_bmp3>
 800464e:	4603      	mov	r3, r0
 8004650:	4618      	mov	r0, r3
 8004652:	f7fb fefd 	bl	8000450 <__aeabi_f2d>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 800465e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004660:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8004664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004666:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800466a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800466c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004670:	f7fb ff46 	bl	8000500 <__aeabi_dmul>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4620      	mov	r0, r4
 800467a:	4629      	mov	r1, r5
 800467c:	f7fb fd8a 	bl	8000194 <__adddf3>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 8004688:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800468c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004690:	f7fb ff36 	bl	8000500 <__aeabi_dmul>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fb feb3 	bl	800040c <__aeabi_ui2d>
 80046a6:	2203      	movs	r2, #3
 80046a8:	f000 f82a 	bl	8004700 <pow_bmp3>
 80046ac:	4603      	mov	r3, r0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fb fece 	bl	8000450 <__aeabi_f2d>
 80046b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80046ba:	f7fb ff21 	bl	8000500 <__aeabi_dmul>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046c6:	f7fb fd65 	bl	8000194 <__adddf3>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 80046d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80046da:	f7fb fd5b 	bl	8000194 <__adddf3>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80046e6:	f7fb fd55 	bl	8000194 <__adddf3>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return comp_press;
 80046f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80046f6:	4610      	mov	r0, r2
 80046f8:	4619      	mov	r1, r3
 80046fa:	3748      	adds	r7, #72	; 0x48
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bdb0      	pop	{r4, r5, r7, pc}

08004700 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800470a:	4613      	mov	r3, r2
 800470c:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 800470e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004712:	617b      	str	r3, [r7, #20]

    while (power != 0)
 8004714:	e00d      	b.n	8004732 <pow_bmp3+0x32>
    {
        pow_output = (float) base * pow_output;
 8004716:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800471a:	f7fc f9b3 	bl	8000a84 <__aeabi_d2f>
 800471e:	4603      	mov	r3, r0
 8004720:	4619      	mov	r1, r3
 8004722:	6978      	ldr	r0, [r7, #20]
 8004724:	f7fc fb0c 	bl	8000d40 <__aeabi_fmul>
 8004728:	4603      	mov	r3, r0
 800472a:	617b      	str	r3, [r7, #20]
        power--;
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	3b01      	subs	r3, #1
 8004730:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1ee      	bne.n	8004716 <pow_bmp3+0x16>
    }

    return pow_output;
 8004738:	697b      	ldr	r3, [r7, #20]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 8004742:	b480      	push	{r7}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 800474c:	2300      	movs	r3, #0
 800474e:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	4013      	ands	r3, r2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
 800475e:	e001      	b.n	8004764 <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8004760:	2300      	movs	r3, #0
 8004762:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8004764:	7bfb      	ldrb	r3, [r7, #15]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr

08004770 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00f      	beq.n	800479e <null_ptr_check+0x2e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00b      	beq.n	800479e <null_ptr_check+0x2e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <null_ptr_check+0x2e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 800479e:	23ff      	movs	r3, #255	; 0xff
 80047a0:	73fb      	strb	r3, [r7, #15]
 80047a2:	e001      	b.n	80047a8 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80047a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr
	...

080047b8 <_ZN6BMP390C1Ev>:
static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t validate_trimming_param(struct bmp3_dev *dev);
static int8_t cal_crc(uint8_t seed, uint8_t data);

BMP390::BMP390() {
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  _meas_end = 0;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 20e2 	ldrb.w	r2, [r3, #226]	; 0xe2
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  temperature = -999;
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	a313      	add	r3, pc, #76	; (adr r3, 8004838 <_ZN6BMP390C1Ev+0x80>)
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = -999;
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	a310      	add	r3, pc, #64	; (adr r3, 8004838 <_ZN6BMP390C1Ev+0x80>)
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	e9c1 2302 	strd	r2, r3, [r1, #8]

  the_sensor.chip_id = BMP390_I2C_ADDRESS;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	22ee      	movs	r2, #238	; 0xee
 8004804:	741a      	strb	r2, [r3, #16]
  the_sensor.intf = BMP3_I2C_INTF;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	761a      	strb	r2, [r3, #24]
  the_sensor.read = &bmp390_i2c_read;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a0c      	ldr	r2, [pc, #48]	; (8004840 <_ZN6BMP390C1Ev+0x88>)
 8004810:	61da      	str	r2, [r3, #28]
  the_sensor.write = &bmp390_i2c_write;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a0b      	ldr	r2, [pc, #44]	; (8004844 <_ZN6BMP390C1Ev+0x8c>)
 8004816:	621a      	str	r2, [r3, #32]
  the_sensor.intf_ptr = (void *)NULL;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	615a      	str	r2, [r3, #20]
  the_sensor.dummy_byte = 0;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	769a      	strb	r2, [r3, #26]
  the_sensor.delay_us = &delay_usec;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a08      	ldr	r2, [pc, #32]	; (8004848 <_ZN6BMP390C1Ev+0x90>)
 8004828:	625a      	str	r2, [r3, #36]	; 0x24
}
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	00000000 	.word	0x00000000
 800483c:	c08f3800 	.word	0xc08f3800
 8004840:	08004b9f 	.word	0x08004b9f
 8004844:	08004b4d 	.word	0x08004b4d
 8004848:	08004a29 	.word	0x08004a29

0800484c <_ZN6BMP3904initEP19__I2C_HandleTypeDef>:

bool BMP390::init(I2C_HandleTypeDef *pntr_hi2c){
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
	the_sensor.intf_ptr = (void *)pntr_hi2c;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	615a      	str	r2, [r3, #20]

	int8_t rslt = BMP3_OK;
 800485c:	2300      	movs	r3, #0
 800485e:	73fb      	strb	r3, [r7, #15]
	/* Reset the sensor */
	rslt = bmp3_soft_reset(&the_sensor);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3310      	adds	r3, #16
 8004864:	4618      	mov	r0, r3
 8004866:	f7fe fe5a 	bl	800351e <bmp3_soft_reset>
 800486a:	4603      	mov	r3, r0
 800486c:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP3_OK) { return false; }
 800486e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x2e>
 8004876:	2300      	movs	r3, #0
 8004878:	e028      	b.n	80048cc <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x80>

	rslt = bmp3_init(&the_sensor);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3310      	adds	r3, #16
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe fc8b 	bl	800319a <bmp3_init>
 8004884:	4603      	mov	r3, r0
 8004886:	73fb      	strb	r3, [r7, #15]
	rslt = validate_trimming_param(&the_sensor);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3310      	adds	r3, #16
 800488c:	4618      	mov	r0, r3
 800488e:	f000 f9af 	bl	8004bf0 <_ZL23validate_trimming_paramP8bmp3_dev>
 8004892:	4603      	mov	r3, r0
 8004894:	73fb      	strb	r3, [r7, #15]

	if (rslt != BMP3_OK) { return false; }
 8004896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x56>
 800489e:	2300      	movs	r3, #0
 80048a0:	e014      	b.n	80048cc <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x80>

	setTemperatureOversampling(BMP3_NO_OVERSAMPLING);
 80048a2:	2100      	movs	r1, #0
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f8d5 	bl	8004a54 <_ZN6BMP39026setTemperatureOversamplingEh>
	setPressureOversampling(BMP3_NO_OVERSAMPLING);
 80048aa:	2100      	movs	r1, #0
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f8f2 	bl	8004a96 <_ZN6BMP39023setPressureOversamplingEh>
	setIIRFilterCoeff(BMP3_IIR_FILTER_DISABLE);
 80048b2:	2100      	movs	r1, #0
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f90f 	bl	8004ad8 <_ZN6BMP39017setIIRFilterCoeffEh>
	setOutputDataRate(BMP3_ODR_25_HZ);
 80048ba:	2103      	movs	r1, #3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f92c 	bl	8004b1a <_ZN6BMP39017setOutputDataRateEh>

	// don't do anything till we request a reading
	the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

	return true;
 80048ca:	2301      	movs	r3, #1
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <_ZN6BMP39015readTemperatureEv>:

float BMP390::readTemperature(void) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  performReading();
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f81f 	bl	8004920 <_ZN6BMP39014performReadingEv>
  return temperature;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	4610      	mov	r0, r2
 80048ea:	4619      	mov	r1, r3
 80048ec:	f7fc f8ca 	bl	8000a84 <__aeabi_d2f>
 80048f0:	4603      	mov	r3, r0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <_ZN6BMP39012readPressureEv>:

float BMP390::readPressure(void) {
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  performReading();
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f80c 	bl	8004920 <_ZN6BMP39014performReadingEv>
  return pressure;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800490e:	4610      	mov	r0, r2
 8004910:	4619      	mov	r1, r3
 8004912:	f7fc f8b7 	bl	8000a84 <__aeabi_d2f>
 8004916:	4603      	mov	r3, r0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <_ZN6BMP39014performReadingEv>:

  float atmospheric = readPressure() / 100.0F; //convert to units of hPa
  return 44330.0 * (1.0 - std::pow(atmospheric / seaLevel, 0.1903));
}

bool BMP390::performReading(void) {
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  /* Used to select the settings user needs to change */
  uint16_t settings_sel = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	83fb      	strh	r3, [r7, #30]
  /* Variable used to select the sensor component */
  uint8_t sensor_comp = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	777b      	strb	r3, [r7, #29]

  /* Select the pressure and temperature sensor to be enabled */
  the_sensor.settings.temp_en = BMP3_ENABLE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
  settings_sel |= BMP3_SEL_TEMP_EN;
 8004938:	8bfb      	ldrh	r3, [r7, #30]
 800493a:	f043 0304 	orr.w	r3, r3, #4
 800493e:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_TEMP;
 8004940:	7f7b      	ldrb	r3, [r7, #29]
 8004942:	f043 0302 	orr.w	r3, r3, #2
 8004946:	777b      	strb	r3, [r7, #29]
  if (_tempOSEnabled) {
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <_ZN6BMP39014performReadingEv+0x3a>
    settings_sel |= BMP3_SEL_TEMP_OS;
 8004952:	8bfb      	ldrh	r3, [r7, #30]
 8004954:	f043 0320 	orr.w	r3, r3, #32
 8004958:	83fb      	strh	r3, [r7, #30]
  }

  the_sensor.settings.press_en = BMP3_ENABLE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  settings_sel |= BMP3_SEL_PRESS_EN;
 8004962:	8bfb      	ldrh	r3, [r7, #30]
 8004964:	f043 0302 	orr.w	r3, r3, #2
 8004968:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_PRESS;
 800496a:	7f7b      	ldrb	r3, [r7, #29]
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	777b      	strb	r3, [r7, #29]
  if (_presOSEnabled) {
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <_ZN6BMP39014performReadingEv+0x64>
    settings_sel |= BMP3_SEL_PRESS_OS;
 800497c:	8bfb      	ldrh	r3, [r7, #30]
 800497e:	f043 0310 	orr.w	r3, r3, #16
 8004982:	83fb      	strh	r3, [r7, #30]
  }

  if (_filterEnabled) {
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <_ZN6BMP39014performReadingEv+0x76>
    settings_sel |= BMP3_SEL_IIR_FILTER;
 800498e:	8bfb      	ldrh	r3, [r7, #30]
 8004990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004994:	83fb      	strh	r3, [r7, #30]
  }

  if (_ODREnabled) {
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <_ZN6BMP39014performReadingEv+0x88>
    settings_sel |= BMP3_SEL_ODR;
 80049a0:	8bfb      	ldrh	r3, [r7, #30]
 80049a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a6:	83fb      	strh	r3, [r7, #30]

  // set interrupt to data ready
  // settings_sel |= BMP3_DRDY_EN_SEL | BMP3_LEVEL_SEL | BMP3_LATCH_SEL;

  /* Set the desired sensor configuration */
  rslt = bmp3_set_sensor_settings(settings_sel, &the_sensor);
 80049a8:	8bfa      	ldrh	r2, [r7, #30]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3310      	adds	r3, #16
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f7fe fd5e 	bl	8003472 <bmp3_set_sensor_settings>
 80049b6:	4603      	mov	r3, r0
 80049b8:	773b      	strb	r3, [r7, #28]

  if (rslt != BMP3_OK)
 80049ba:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <_ZN6BMP39014performReadingEv+0xa6>
    return false;
 80049c2:	2300      	movs	r3, #0
 80049c4:	e02c      	b.n	8004a20 <_ZN6BMP39014performReadingEv+0x100>

  /* Set the power mode */
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
  rslt = bmp3_set_op_mode(&the_sensor);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3310      	adds	r3, #16
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe fdfb 	bl	80035ce <bmp3_set_op_mode>
 80049d8:	4603      	mov	r3, r0
 80049da:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 80049dc:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <_ZN6BMP39014performReadingEv+0xc8>
    return false;
 80049e4:	2300      	movs	r3, #0
 80049e6:	e01b      	b.n	8004a20 <_ZN6BMP39014performReadingEv+0x100>

  /* Variable used to store the compensated data */
  struct bmp3_data data;

  /* Temperature and Pressure data are read and stored in the bmp3_data instance */
  rslt = bmp3_get_sensor_data(sensor_comp, &data, &the_sensor);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f103 0210 	add.w	r2, r3, #16
 80049ee:	f107 0108 	add.w	r1, r7, #8
 80049f2:	7f7b      	ldrb	r3, [r7, #29]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fe fe59 	bl	80036ac <bmp3_get_sensor_data>
 80049fa:	4603      	mov	r3, r0
 80049fc:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 80049fe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <_ZN6BMP39014performReadingEv+0xea>
    return false;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e00a      	b.n	8004a20 <_ZN6BMP39014performReadingEv+0x100>


  /* Save the temperature and pressure data */
  temperature = data.temperature;
 8004a0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = data.pressure;
 8004a14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	e9c1 2302 	strd	r2, r3, [r1, #8]

  return true;
 8004a1e:	2301      	movs	r3, #1
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3720      	adds	r7, #32
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <_ZL10delay_usecmPv>:

// Our hardware interface functions
static void delay_usec(uint32_t us, void *intf_ptr){
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
	uint8_t ms = us/1000;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a06      	ldr	r2, [pc, #24]	; (8004a50 <_ZL10delay_usecmPv+0x28>)
 8004a36:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3a:	099b      	lsrs	r3, r3, #6
 8004a3c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(ms);
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fd fea3 	bl	800278c <HAL_Delay>
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	10624dd3 	.word	0x10624dd3

08004a54 <_ZN6BMP39026setTemperatureOversamplingEh>:

bool BMP390::setTemperatureOversampling(uint8_t oversample) {
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	2b05      	cmp	r3, #5
 8004a64:	d901      	bls.n	8004a6a <_ZN6BMP39026setTemperatureOversamplingEh+0x16>
    return false;
 8004a66:	2300      	movs	r3, #0
 8004a68:	e010      	b.n	8004a8c <_ZN6BMP39026setTemperatureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.temp_os = oversample;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	78fa      	ldrb	r2, [r7, #3]
 8004a6e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

  if (oversample == BMP3_NO_OVERSAMPLING)
 8004a72:	78fb      	ldrb	r3, [r7, #3]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <_ZN6BMP39026setTemperatureOversamplingEh+0x2e>
    _tempOSEnabled = false;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004a80:	e003      	b.n	8004a8a <_ZN6BMP39026setTemperatureOversamplingEh+0x36>
  else
    _tempOSEnabled = true;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1

  return true;
 8004a8a:	2301      	movs	r3, #1
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr

08004a96 <_ZN6BMP39023setPressureOversamplingEh>:
   BMP3_OVERSAMPLING_2X, BMP3_OVERSAMPLING_4X, BMP3_OVERSAMPLING_8X,
   BMP3_OVERSAMPLING_16X, BMP3_OVERSAMPLING_32X
    @return True on success, False on failure
*/
/**************************************************************************/
bool BMP390::setPressureOversampling(uint8_t oversample) {
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	2b05      	cmp	r3, #5
 8004aa6:	d901      	bls.n	8004aac <_ZN6BMP39023setPressureOversamplingEh+0x16>
    return false;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e010      	b.n	8004ace <_ZN6BMP39023setPressureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.press_os = oversample;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	78fa      	ldrb	r2, [r7, #3]
 8004ab0:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

  if (oversample == BMP3_NO_OVERSAMPLING)
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d104      	bne.n	8004ac4 <_ZN6BMP39023setPressureOversamplingEh+0x2e>
    _presOSEnabled = false;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004ac2:	e003      	b.n	8004acc <_ZN6BMP39023setPressureOversamplingEh+0x36>
  else
    _presOSEnabled = true;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2

  return true;
 8004acc:	2301      	movs	r3, #1
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr

08004ad8 <_ZN6BMP39017setIIRFilterCoeffEh>:
   BMP3_IIR_FILTER_COEFF_31, BMP3_IIR_FILTER_COEFF_63, BMP3_IIR_FILTER_COEFF_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setIIRFilterCoeff(uint8_t filtercoeff) {
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	70fb      	strb	r3, [r7, #3]
  if (filtercoeff > BMP3_IIR_FILTER_COEFF_127)
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	2b07      	cmp	r3, #7
 8004ae8:	d901      	bls.n	8004aee <_ZN6BMP39017setIIRFilterCoeffEh+0x16>
    return false;
 8004aea:	2300      	movs	r3, #0
 8004aec:	e010      	b.n	8004b10 <_ZN6BMP39017setIIRFilterCoeffEh+0x38>

  the_sensor.settings.odr_filter.iir_filter = filtercoeff;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	78fa      	ldrb	r2, [r7, #3]
 8004af2:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

  if (filtercoeff == BMP3_IIR_FILTER_DISABLE)
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d104      	bne.n	8004b06 <_ZN6BMP39017setIIRFilterCoeffEh+0x2e>
    _filterEnabled = false;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8004b04:	e003      	b.n	8004b0e <_ZN6BMP39017setIIRFilterCoeffEh+0x36>
  else
    _filterEnabled = true;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

  return true;
 8004b0e:	2301      	movs	r3, #1
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr

08004b1a <_ZN6BMP39017setOutputDataRateEh>:
   BMP3_ODR_0_01_HZ, BMP3_ODR_0_006_HZ, BMP3_ODR_0_003_HZ, or BMP3_ODR_0_001_HZ
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setOutputDataRate(uint8_t odr) {
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	70fb      	strb	r3, [r7, #3]
  if (odr > BMP3_ODR_0_001_HZ)
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	2b11      	cmp	r3, #17
 8004b2a:	d901      	bls.n	8004b30 <_ZN6BMP39017setOutputDataRateEh+0x16>
    return false;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e008      	b.n	8004b42 <_ZN6BMP39017setOutputDataRateEh+0x28>

  the_sensor.settings.odr_filter.odr = odr;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	78fa      	ldrb	r2, [r7, #3]
 8004b34:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

  _ODREnabled = true;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3

  return true;
 8004b40:	2301      	movs	r3, #1
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <_ZL16bmp390_i2c_writehPKhmPv>:

static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr){
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	; 0x28
 8004b50:	af04      	add	r7, sp, #16
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	4603      	mov	r3, r0
 8004b5a:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Write(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b6c:	9102      	str	r1, [sp, #8]
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	2301      	movs	r3, #1
 8004b76:	21ee      	movs	r1, #238	; 0xee
 8004b78:	6978      	ldr	r0, [r7, #20]
 8004b7a:	f002 fd7f 	bl	800767c <HAL_I2C_Mem_Write>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <_ZL16bmp390_i2c_writehPKhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b92:	e000      	b.n	8004b96 <_ZL16bmp390_i2c_writehPKhmPv+0x4a>
	}
	return 0;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <_ZL15bmp390_i2c_readhPhmPv>:

static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr){
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b08a      	sub	sp, #40	; 0x28
 8004ba2:	af04      	add	r7, sp, #16
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	4603      	mov	r3, r0
 8004bac:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Read(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bbe:	9102      	str	r1, [sp, #8]
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	21ee      	movs	r1, #238	; 0xee
 8004bca:	6978      	ldr	r0, [r7, #20]
 8004bcc:	f002 fe6a 	bl	80078a4 <HAL_I2C_Mem_Read>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	bf14      	ite	ne
 8004bd6:	2301      	movne	r3, #1
 8004bd8:	2300      	moveq	r3, #0
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <_ZL15bmp390_i2c_readhPhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 8004be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004be4:	e000      	b.n	8004be8 <_ZL15bmp390_i2c_readhPhmPv+0x4a>
	}
	return 0;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <_ZL23validate_trimming_paramP8bmp3_dev>:

static int8_t validate_trimming_param(struct bmp3_dev *dev) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	; 0x28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t crc = 0xFF;
 8004bf8:	23ff      	movs	r3, #255	; 0xff
 8004bfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 8004bfe:	f107 010c 	add.w	r1, r7, #12
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2215      	movs	r2, #21
 8004c06:	2031      	movs	r0, #49	; 0x31
 8004c08:	f7fe fb0e 	bl	8003228 <bmp3_get_regs>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (rslt == BMP3_OK) {
 8004c12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d133      	bne.n	8004c82 <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
    for (i = 0; i < 21; i++) {
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004c20:	e013      	b.n	8004c4a <_ZL23validate_trimming_paramP8bmp3_dev+0x5a>
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
 8004c22:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c26:	3328      	adds	r3, #40	; 0x28
 8004c28:	443b      	add	r3, r7
 8004c2a:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8004c2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c32:	4611      	mov	r1, r2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 f82a 	bl	8004c8e <_ZL7cal_crchh>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (i = 0; i < 21; i++) {
 8004c40:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c44:	3301      	adds	r3, #1
 8004c46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004c4a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c4e:	2b14      	cmp	r3, #20
 8004c50:	d9e7      	bls.n	8004c22 <_ZL23validate_trimming_paramP8bmp3_dev+0x32>
    }

    crc = (crc ^ 0xFF);
 8004c52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c56:	43db      	mvns	r3, r3
 8004c58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 8004c5c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	2030      	movs	r0, #48	; 0x30
 8004c66:	f7fe fadf 	bl	8003228 <bmp3_get_regs>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (stored_crc != crc) {
 8004c70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c74:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d002      	beq.n	8004c82 <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
      rslt = -1;
 8004c7c:	23ff      	movs	r3, #255	; 0xff
 8004c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  return rslt;
 8004c82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3728      	adds	r7, #40	; 0x28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <_ZL7cal_crchh>:

/*
 * @brief function to calculate CRC for the trimming parameters
 * */
static int8_t cal_crc(uint8_t seed, uint8_t data) {
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	4603      	mov	r3, r0
 8004c96:	460a      	mov	r2, r1
 8004c98:	71fb      	strb	r3, [r7, #7]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	71bb      	strb	r3, [r7, #6]
  int8_t poly = 0x1D;
 8004c9e:	231d      	movs	r3, #29
 8004ca0:	737b      	strb	r3, [r7, #13]
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	73bb      	strb	r3, [r7, #14]
 8004ca6:	e01c      	b.n	8004ce2 <_ZL7cal_crchh+0x54>
    if ((seed & 0x80) ^ (data & 0x80)) {
 8004ca8:	79fa      	ldrb	r2, [r7, #7]
 8004caa:	79bb      	ldrb	r3, [r7, #6]
 8004cac:	4053      	eors	r3, r2
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	b25b      	sxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	da02      	bge.n	8004cbc <_ZL7cal_crchh+0x2e>
      var2 = 1;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
 8004cba:	e001      	b.n	8004cc0 <_ZL7cal_crchh+0x32>
    } else {
      var2 = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	73fb      	strb	r3, [r7, #15]
    }

    seed = (seed & 0x7F) << 1;
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	71fb      	strb	r3, [r7, #7]
    data = (data & 0x7F) << 1;
 8004cc6:	79bb      	ldrb	r3, [r7, #6]
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	71bb      	strb	r3, [r7, #6]
    seed = seed ^ (uint8_t)(poly * var2);
 8004ccc:	7b7a      	ldrb	r2, [r7, #13]
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	fb12 f303 	smulbb	r3, r2, r3
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	4053      	eors	r3, r2
 8004cda:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8004cdc:	7bbb      	ldrb	r3, [r7, #14]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	73bb      	strb	r3, [r7, #14]
 8004ce2:	7bbb      	ldrb	r3, [r7, #14]
 8004ce4:	2b07      	cmp	r3, #7
 8004ce6:	d9df      	bls.n	8004ca8 <_ZL7cal_crchh+0x1a>
  }

  return (int8_t)seed;
 8004ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr

08004cf6 <_ZN12LSM303_AccelC1Ev>:
#include <lsm303_accel.hpp>

LSM303_Accel::LSM303_Accel() {
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  pntr_hi2c = NULL;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]

  // Initialize the raw accel data
  data.x = 0;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	609a      	str	r2, [r3, #8]
  data.y = 0;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	60da      	str	r2, [r3, #12]
  data.z = 0;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	611a      	str	r2, [r3, #16]
}
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr

08004d28 <_ZN12LSM303_Accel5writeEhPKhh>:

bool LSM303_Accel::write(const uint8_t reg_location, const uint8_t *data, const uint8_t len){
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af04      	add	r7, sp, #16
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	607a      	str	r2, [r7, #4]
 8004d32:	461a      	mov	r2, r3
 8004d34:	460b      	mov	r3, r1
 8004d36:	72fb      	strb	r3, [r7, #11]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	72bb      	strb	r3, [r7, #10]
  if (HAL_I2C_Mem_Write((I2C_HandleTypeDef *) pntr_hi2c, LSM303_ADDRESS_ACCEL, reg_location, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) != HAL_OK) {
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	7afb      	ldrb	r3, [r7, #11]
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	7abb      	ldrb	r3, [r7, #10]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d4c:	9102      	str	r1, [sp, #8]
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	2301      	movs	r3, #1
 8004d56:	2132      	movs	r1, #50	; 0x32
 8004d58:	f002 fc90 	bl	800767c <HAL_I2C_Mem_Write>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bf14      	ite	ne
 8004d62:	2301      	movne	r3, #1
 8004d64:	2300      	moveq	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <_ZN12LSM303_Accel5writeEhPKhh+0x54>
    // Error handling: You can handle write errors here
  	APP_LOG(TS_ON, VLEVEL_M,"Error writing \r\n");
 8004d6c:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <_ZN12LSM303_Accel5writeEhPKhh+0x60>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	2100      	movs	r1, #0
 8004d72:	2002      	movs	r0, #2
 8004d74:	f01a f898 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
    return false;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	e000      	b.n	8004d7e <_ZN12LSM303_Accel5writeEhPKhh+0x56>
  }
  return true;
 8004d7c:	2301      	movs	r3, #1
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	0801f59c 	.word	0x0801f59c

08004d8c <_ZN12LSM303_Accel4readEhPhh>:

bool LSM303_Accel::read(const uint8_t reg_location, uint8_t *data, const uint8_t len){
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af04      	add	r7, sp, #16
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	461a      	mov	r2, r3
 8004d98:	460b      	mov	r3, r1
 8004d9a:	72fb      	strb	r3, [r7, #11]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	72bb      	strb	r3, [r7, #10]
  if (HAL_I2C_Mem_Read((I2C_HandleTypeDef *) pntr_hi2c, LSM303_ADDRESS_ACCEL, reg_location, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) != HAL_OK) {
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	7afb      	ldrb	r3, [r7, #11]
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	7abb      	ldrb	r3, [r7, #10]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004db0:	9102      	str	r1, [sp, #8]
 8004db2:	9301      	str	r3, [sp, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	2301      	movs	r3, #1
 8004dba:	2132      	movs	r1, #50	; 0x32
 8004dbc:	f002 fd72 	bl	80078a4 <HAL_I2C_Mem_Read>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	bf14      	ite	ne
 8004dc6:	2301      	movne	r3, #1
 8004dc8:	2300      	moveq	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <_ZN12LSM303_Accel4readEhPhh+0x48>
    // Error handling: You can handle write errors here
    return false;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e000      	b.n	8004dd6 <_ZN12LSM303_Accel4readEhPhh+0x4a>
  }
  return true;
 8004dd4:	2301      	movs	r3, #1
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef>:

bool LSM303_Accel::init(I2C_HandleTypeDef *_pntr_hi2c) {
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
	pntr_hi2c = _pntr_hi2c;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	601a      	str	r2, [r3, #0]
  uint8_t len = 1;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]

  uint8_t reg_data = 0x57; // Enable the accelerometer (100Hz)
 8004df2:	2357      	movs	r3, #87	; 0x57
 8004df4:	73bb      	strb	r3, [r7, #14]
  if ( write(LSM303_REGISTER_ACCEL_CTRL_REG1_A, &reg_data, len) ){
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	f107 020e 	add.w	r2, r7, #14
 8004dfc:	2120      	movs	r1, #32
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff ff92 	bl	8004d28 <_ZN12LSM303_Accel5writeEhPKhh>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00e      	beq.n	8004e28 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4a>
    if ( read(LSM303_REGISTER_ACCEL_WHO_AM_I, &reg_data, len) ) {
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	f107 020e 	add.w	r2, r7, #14
 8004e10:	210f      	movs	r1, #15
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff ffba 	bl	8004d8c <_ZN12LSM303_Accel4readEhPhh>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d004      	beq.n	8004e28 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4a>
      if (reg_data == 0x33) return true; //confirm that we are talking
 8004e1e:	7bbb      	ldrb	r3, [r7, #14]
 8004e20:	2b33      	cmp	r3, #51	; 0x33
 8004e22:	d101      	bne.n	8004e28 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4a>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4c>
    }
  }
  return false; //something went wrong
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <_ZN17EnvionmentSensorsC1Ev>:
#include <env_sensors.hpp>


//#define IGNORE_ENV_SENSORS

EnvionmentSensors::EnvionmentSensors(){ }
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff ff5a 	bl	8004cf6 <_ZN12LSM303_AccelC1Ev>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3318      	adds	r3, #24
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff fcb6 	bl	80047b8 <_ZN6BMP390C1Ev>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef>:

bool EnvionmentSensors::init(I2C_HandleTypeDef *pntr_hi2c){
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
	APP_LOG(TS_ON, VLEVEL_M, "env sensors i2c interface: %d \r\n", pntr_hi2c);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	4b28      	ldr	r3, [pc, #160]	; (8004f08 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xb0>)
 8004e68:	2201      	movs	r2, #1
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	2002      	movs	r0, #2
 8004e6e:	f01a f81b 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
	if( lsm_accel.init(pntr_hi2c) ){
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6839      	ldr	r1, [r7, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff ffb1 	bl	8004dde <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00f      	beq.n	8004ea2 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0x4a>
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup valid \r\n");
 8004e82:	4b22      	ldr	r3, [pc, #136]	; (8004f0c <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xb4>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	2100      	movs	r1, #0
 8004e88:	2002      	movs	r0, #2
 8004e8a:	f01a f80d 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
	} else {
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup failed \r\n");
		return false;
	}

	if( bmp.init(pntr_hi2c) ){
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3318      	adds	r3, #24
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff fcd9 	bl	800484c <_ZN6BMP3904initEP19__I2C_HandleTypeDef>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d028      	beq.n	8004ef2 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0x9a>
 8004ea0:	e007      	b.n	8004eb2 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0x5a>
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup failed \r\n");
 8004ea2:	4b1b      	ldr	r3, [pc, #108]	; (8004f10 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xb8>)
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	2002      	movs	r0, #2
 8004eaa:	f019 fffd 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
		return false;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e026      	b.n	8004f00 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xa8>
		APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup valid \r\n");
 8004eb2:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xbc>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	2002      	movs	r0, #2
 8004eba:	f019 fff5 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
	} else {
		APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup failed \r\n");
		return false;
	}
	bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3318      	adds	r3, #24
 8004ec2:	2103      	movs	r1, #3
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff fdc5 	bl	8004a54 <_ZN6BMP39026setTemperatureOversamplingEh>
	bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3318      	adds	r3, #24
 8004ece:	2102      	movs	r1, #2
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff fde0 	bl	8004a96 <_ZN6BMP39023setPressureOversamplingEh>
	bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_3);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3318      	adds	r3, #24
 8004eda:	2102      	movs	r1, #2
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fdfb 	bl	8004ad8 <_ZN6BMP39017setIIRFilterCoeffEh>
	bmp.setOutputDataRate(BMP3_ODR_50_HZ);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3318      	adds	r3, #24
 8004ee6:	2102      	movs	r1, #2
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff fe16 	bl	8004b1a <_ZN6BMP39017setOutputDataRateEh>

	return true;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e006      	b.n	8004f00 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xa8>
		APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup failed \r\n");
 8004ef2:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xc0>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	2002      	movs	r0, #2
 8004efa:	f019 ffd5 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
		return false;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	0801f5b0 	.word	0x0801f5b0
 8004f0c:	0801f5d4 	.word	0x0801f5d4
 8004f10:	0801f5ec 	.word	0x0801f5ec
 8004f14:	0801f604 	.word	0x0801f604
 8004f18:	0801f61c 	.word	0x0801f61c

08004f1c <_ZN17EnvionmentSensors11getPressureEv>:

float EnvionmentSensors::getPressure(){
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
	return bmp.readPressure();
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3318      	adds	r3, #24
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fce6 	bl	80048fa <_ZN6BMP39012readPressureEv>
 8004f2e:	4603      	mov	r3, r0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <_ZN17EnvionmentSensors14getTemperatureEv>:

float EnvionmentSensors::getTemperature(){
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
	return bmp.readTemperature();
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3318      	adds	r3, #24
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff fcc5 	bl	80048d4 <_ZN6BMP39015readTemperatureEv>
 8004f4a:	4603      	mov	r3, r0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8004f5a:	1d3b      	adds	r3, r7, #4
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	605a      	str	r2, [r3, #4]
 8004f62:	609a      	str	r2, [r3, #8]
 8004f64:	60da      	str	r2, [r3, #12]
 8004f66:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8004f68:	2310      	movs	r3, #16
 8004f6a:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f74:	2303      	movs	r3, #3
 8004f76:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8004f78:	1d3b      	adds	r3, r7, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f80:	f002 f8a8 	bl	80070d4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8004f84:	2320      	movs	r3, #32
 8004f86:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8004f88:	1d3b      	adds	r3, r7, #4
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f90:	f002 f8a0 	bl	80070d4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8004f94:	2200      	movs	r2, #0
 8004f96:	2120      	movs	r1, #32
 8004f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f9c:	f002 fac8 	bl	8007530 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2110      	movs	r1, #16
 8004fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fa8:	f002 fac2 	bl	8007530 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d83f      	bhi.n	8005048 <BSP_RADIO_ConfigRFSwitch+0x90>
 8004fc8:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8004fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fce:	bf00      	nop
 8004fd0:	08004fe1 	.word	0x08004fe1
 8004fd4:	08004ffb 	.word	0x08004ffb
 8004fd8:	08005015 	.word	0x08005015
 8004fdc:	0800502f 	.word	0x0800502f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2110      	movs	r1, #16
 8004fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fe8:	f002 faa2 	bl	8007530 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8004fec:	2200      	movs	r2, #0
 8004fee:	2120      	movs	r1, #32
 8004ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ff4:	f002 fa9c 	bl	8007530 <HAL_GPIO_WritePin>
      break;      
 8004ff8:	e027      	b.n	800504a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	2110      	movs	r1, #16
 8004ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005002:	f002 fa95 	bl	8007530 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8005006:	2200      	movs	r2, #0
 8005008:	2120      	movs	r1, #32
 800500a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800500e:	f002 fa8f 	bl	8007530 <HAL_GPIO_WritePin>
      break;
 8005012:	e01a      	b.n	800504a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8005014:	2201      	movs	r2, #1
 8005016:	2110      	movs	r1, #16
 8005018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800501c:	f002 fa88 	bl	8007530 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8005020:	2201      	movs	r2, #1
 8005022:	2120      	movs	r1, #32
 8005024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005028:	f002 fa82 	bl	8007530 <HAL_GPIO_WritePin>
      break;
 800502c:	e00d      	b.n	800504a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800502e:	2200      	movs	r2, #0
 8005030:	2110      	movs	r1, #16
 8005032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005036:	f002 fa7b 	bl	8007530 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800503a:	2201      	movs	r2, #1
 800503c:	2120      	movs	r1, #32
 800503e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005042:	f002 fa75 	bl	8007530 <HAL_GPIO_WritePin>
      break;
 8005046:	e000      	b.n	800504a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8005048:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8005058:	2302      	movs	r3, #2
}
 800505a:	4618      	mov	r0, r3
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr

08005062 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8005062:	b480      	push	{r7}
 8005064:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8005066:	2301      	movs	r3, #1
}
 8005068:	4618      	mov	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr

08005070 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8005074:	2301      	movs	r3, #1
}
 8005076:	4618      	mov	r0, r3
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr

0800507e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800507e:	b480      	push	{r7}
 8005080:	b085      	sub	sp, #20
 8005082:	af00      	add	r7, sp, #0
 8005084:	4603      	mov	r3, r0
 8005086:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d102      	bne.n	8005094 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800508e:	230f      	movs	r3, #15
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e001      	b.n	8005098 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8005094:	2316      	movs	r3, #22
 8005096:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005098:	68fb      	ldr	r3, [r7, #12]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr

080050a4 <LL_DBGMCU_EnableDBGSleepMode>:
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80050a8:	4b04      	ldr	r3, [pc, #16]	; (80050bc <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	4a03      	ldr	r2, [pc, #12]	; (80050bc <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	6053      	str	r3, [r2, #4]
}
 80050b4:	bf00      	nop
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr
 80050bc:	e0042000 	.word	0xe0042000

080050c0 <LL_DBGMCU_EnableDBGStopMode>:
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80050c4:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4a03      	ldr	r2, [pc, #12]	; (80050d8 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80050ca:	f043 0302 	orr.w	r3, r3, #2
 80050ce:	6053      	str	r3, [r2, #4]
}
 80050d0:	bf00      	nop
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr
 80050d8:	e0042000 	.word	0xe0042000

080050dc <LL_DBGMCU_EnableDBGStandbyMode>:
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80050e0:	4b04      	ldr	r3, [pc, #16]	; (80050f4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	4a03      	ldr	r2, [pc, #12]	; (80050f4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80050e6:	f043 0304 	orr.w	r3, r3, #4
 80050ea:	6053      	str	r3, [r2, #4]
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr
 80050f4:	e0042000 	.word	0xe0042000

080050f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005102:	2003      	movs	r0, #3
 8005104:	f001 f9a0 	bl	8006448 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005108:	f004 f8a6 	bl	8009258 <HAL_RCC_GetHCLKFreq>
 800510c:	4603      	mov	r3, r0
 800510e:	4a09      	ldr	r2, [pc, #36]	; (8005134 <HAL_Init+0x3c>)
 8005110:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005112:	200f      	movs	r0, #15
 8005114:	f7fd fb1c 	bl	8002750 <HAL_InitTick>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	71fb      	strb	r3, [r7, #7]
 8005122:	e001      	b.n	8005128 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005124:	f7fd f8ed 	bl	8002302 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005128:	79fb      	ldrb	r3, [r7, #7]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	20000000 	.word	0x20000000

08005138 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800513c:	4b04      	ldr	r3, [pc, #16]	; (8005150 <HAL_SuspendTick+0x18>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a03      	ldr	r2, [pc, #12]	; (8005150 <HAL_SuspendTick+0x18>)
 8005142:	f023 0302 	bic.w	r3, r3, #2
 8005146:	6013      	str	r3, [r2, #0]
}
 8005148:	bf00      	nop
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr
 8005150:	e000e010 	.word	0xe000e010

08005154 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8005158:	4b04      	ldr	r3, [pc, #16]	; (800516c <HAL_ResumeTick+0x18>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a03      	ldr	r2, [pc, #12]	; (800516c <HAL_ResumeTick+0x18>)
 800515e:	f043 0302 	orr.w	r3, r3, #2
 8005162:	6013      	str	r3, [r2, #0]
}
 8005164:	bf00      	nop
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	e000e010 	.word	0xe000e010

08005170 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8005174:	4b02      	ldr	r3, [pc, #8]	; (8005180 <HAL_GetUIDw0+0x10>)
 8005176:	681b      	ldr	r3, [r3, #0]
}
 8005178:	4618      	mov	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr
 8005180:	1fff7590 	.word	0x1fff7590

08005184 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8005188:	4b02      	ldr	r3, [pc, #8]	; (8005194 <HAL_GetUIDw1+0x10>)
 800518a:	681b      	ldr	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr
 8005194:	1fff7594 	.word	0x1fff7594

08005198 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800519c:	4b02      	ldr	r3, [pc, #8]	; (80051a8 <HAL_GetUIDw2+0x10>)
 800519e:	681b      	ldr	r3, [r3, #0]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr
 80051a8:	1fff7598 	.word	0x1fff7598

080051ac <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80051b0:	f7ff ff78 	bl	80050a4 <LL_DBGMCU_EnableDBGSleepMode>
}
 80051b4:	bf00      	nop
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80051bc:	f7ff ff80 	bl	80050c0 <LL_DBGMCU_EnableDBGStopMode>
}
 80051c0:	bf00      	nop
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80051c8:	f7ff ff88 	bl	80050dc <LL_DBGMCU_EnableDBGStandbyMode>
}
 80051cc:	bf00      	nop
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	601a      	str	r2, [r3, #0]
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr

080051f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005204:	4618      	mov	r0, r3
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	bc80      	pop	{r7}
 800520c:	4770      	bx	lr

0800520e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800520e:	b480      	push	{r7}
 8005210:	b085      	sub	sp, #20
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	695a      	ldr	r2, [r3, #20]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2107      	movs	r1, #7
 8005226:	fa01 f303 	lsl.w	r3, r1, r3
 800522a:	43db      	mvns	r3, r3
 800522c:	401a      	ands	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	fa01 f303 	lsl.w	r3, r1, r3
 800523a:	431a      	orrs	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005240:	bf00      	nop
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr

0800524a <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	695a      	ldr	r2, [r3, #20]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2107      	movs	r1, #7
 8005260:	fa01 f303 	lsl.w	r3, r1, r3
 8005264:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr

0800527a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr

0800529e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f003 031f 	and.w	r3, r3, #31
 80052b4:	210f      	movs	r1, #15
 80052b6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ba:	43db      	mvns	r3, r3
 80052bc:	401a      	ands	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	0e9b      	lsrs	r3, r3, #26
 80052c2:	f003 010f 	and.w	r1, r3, #15
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	fa01 f303 	lsl.w	r3, r1, r3
 80052d0:	431a      	orrs	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr

080052e0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005318:	43db      	mvns	r3, r3
 800531a:	401a      	ands	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr

0800532a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	695a      	ldr	r2, [r3, #20]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	021b      	lsls	r3, r3, #8
 800533e:	43db      	mvns	r3, r3
 8005340:	401a      	ands	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	0219      	lsls	r1, r3, #8
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	400b      	ands	r3, r1
 800534a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800534e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005352:	431a      	orrs	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr

08005362 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005372:	f023 0317 	bic.w	r3, r3, #23
 8005376:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005398:	f023 0317 	bic.w	r3, r3, #23
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6093      	str	r3, [r2, #8]
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr

080053aa <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053be:	d101      	bne.n	80053c4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr

080053d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053e0:	f023 0317 	bic.w	r3, r3, #23
 80053e4:	f043 0201 	orr.w	r2, r3, #1
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr

080053f6 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005406:	f023 0317 	bic.w	r3, r3, #23
 800540a:	f043 0202 	orr.w	r2, r3, #2
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr

0800541c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <LL_ADC_IsEnabled+0x18>
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <LL_ADC_IsEnabled+0x1a>
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr

08005440 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b02      	cmp	r3, #2
 8005452:	d101      	bne.n	8005458 <LL_ADC_IsDisableOngoing+0x18>
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <LL_ADC_IsDisableOngoing+0x1a>
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr

08005464 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005474:	f023 0317 	bic.w	r3, r3, #23
 8005478:	f043 0204 	orr.w	r2, r3, #4
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr

0800548a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800549a:	f023 0317 	bic.w	r3, r3, #23
 800549e:	f043 0210 	orr.w	r2, r3, #16
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc80      	pop	{r7}
 80054ae:	4770      	bx	lr

080054b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d101      	bne.n	80054c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80054c4:	2301      	movs	r3, #1
 80054c6:	e000      	b.n	80054ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e17e      	b.n	80057f4 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005500:	2b00      	cmp	r3, #0
 8005502:	d109      	bne.n	8005518 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7fb ffbf 	bl	8001488 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff ff44 	bl	80053aa <LL_ADC_IsInternalRegulatorEnabled>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d115      	bne.n	8005554 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff ff18 	bl	8005362 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005532:	4b9e      	ldr	r3, [pc, #632]	; (80057ac <HAL_ADC_Init+0x2d8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	4a9d      	ldr	r2, [pc, #628]	; (80057b0 <HAL_ADC_Init+0x2dc>)
 800553a:	fba2 2303 	umull	r2, r3, r2, r3
 800553e:	099b      	lsrs	r3, r3, #6
 8005540:	3301      	adds	r3, #1
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005546:	e002      	b.n	800554e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3b01      	subs	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f9      	bne.n	8005548 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff ff26 	bl	80053aa <LL_ADC_IsInternalRegulatorEnabled>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10d      	bne.n	8005580 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005568:	f043 0210 	orr.w	r2, r3, #16
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005574:	f043 0201 	orr.w	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff ff93 	bl	80054b0 <LL_ADC_REG_IsConversionOngoing>
 800558a:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b00      	cmp	r3, #0
 8005596:	f040 8124 	bne.w	80057e2 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f040 8120 	bne.w	80057e2 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80055aa:	f043 0202 	orr.w	r2, r3, #2
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff ff30 	bl	800541c <LL_ADC_IsEnabled>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f040 80a7 	bne.w	8005712 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	7e1b      	ldrb	r3, [r3, #24]
 80055cc:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80055ce:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	7e5b      	ldrb	r3, [r3, #25]
 80055d4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80055d6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	7e9b      	ldrb	r3, [r3, #26]
 80055dc:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80055de:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055e4:	2a00      	cmp	r2, #0
 80055e6:	d002      	beq.n	80055ee <HAL_ADC_Init+0x11a>
 80055e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055ec:	e000      	b.n	80055f0 <HAL_ADC_Init+0x11c>
 80055ee:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80055f0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80055f6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	da04      	bge.n	800560a <HAL_ADC_Init+0x136>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005608:	e001      	b.n	800560e <HAL_ADC_Init+0x13a>
 800560a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800560e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005616:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005618:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	4313      	orrs	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d114      	bne.n	8005654 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	7e9b      	ldrb	r3, [r3, #26]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d104      	bne.n	800563c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005638:	61bb      	str	r3, [r7, #24]
 800563a:	e00b      	b.n	8005654 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005640:	f043 0220 	orr.w	r2, r3, #32
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564c:	f043 0201 	orr.w	r2, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	d009      	beq.n	8005670 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005668:	4313      	orrs	r3, r2
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	4313      	orrs	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800567a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	69b9      	ldr	r1, [r7, #24]
 8005684:	430b      	orrs	r3, r1
 8005686:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005694:	4313      	orrs	r3, r2
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d111      	bne.n	80056ca <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80056b2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80056b8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80056be:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f043 0301 	orr.w	r3, r3, #1
 80056c8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	4b38      	ldr	r3, [pc, #224]	; (80057b4 <HAL_ADC_Init+0x2e0>)
 80056d2:	4013      	ands	r3, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6812      	ldr	r2, [r2, #0]
 80056d8:	6979      	ldr	r1, [r7, #20]
 80056da:	430b      	orrs	r3, r1
 80056dc:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80056e6:	d014      	beq.n	8005712 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80056ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f0:	d00f      	beq.n	8005712 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80056f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056fa:	d00a      	beq.n	8005712 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80056fc:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <HAL_ADC_Init+0x2e4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800570c:	492a      	ldr	r1, [pc, #168]	; (80057b8 <HAL_ADC_Init+0x2e4>)
 800570e:	4313      	orrs	r3, r2
 8005710:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571a:	461a      	mov	r2, r3
 800571c:	2100      	movs	r1, #0
 800571e:	f7ff fd76 	bl	800520e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	461a      	mov	r2, r3
 800572c:	4923      	ldr	r1, [pc, #140]	; (80057bc <HAL_ADC_Init+0x2e8>)
 800572e:	f7ff fd6e 	bl	800520e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d108      	bne.n	800574c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f062 020f 	orn	r2, r2, #15
 8005748:	629a      	str	r2, [r3, #40]	; 0x28
 800574a:	e017      	b.n	800577c <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005754:	d112      	bne.n	800577c <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	3b01      	subs	r3, #1
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	f003 031c 	and.w	r3, r3, #28
 8005768:	f06f 020f 	mvn.w	r2, #15
 800576c:	fa02 f103 	lsl.w	r1, r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2100      	movs	r1, #0
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff fd61 	bl	800524a <LL_ADC_GetSamplingTimeCommonChannels>
 8005788:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800578e:	429a      	cmp	r2, r3
 8005790:	d116      	bne.n	80057c0 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579c:	f023 0303 	bic.w	r3, r3, #3
 80057a0:	f043 0201 	orr.w	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80057a8:	e023      	b.n	80057f2 <HAL_ADC_Init+0x31e>
 80057aa:	bf00      	nop
 80057ac:	20000000 	.word	0x20000000
 80057b0:	053e2d63 	.word	0x053e2d63
 80057b4:	1ffffc02 	.word	0x1ffffc02
 80057b8:	40012708 	.word	0x40012708
 80057bc:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c4:	f023 0312 	bic.w	r3, r3, #18
 80057c8:	f043 0210 	orr.w	r2, r3, #16
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d4:	f043 0201 	orr.w	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80057e0:	e007      	b.n	80057f2 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e6:	f043 0210 	orr.w	r2, r3, #16
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80057f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3720      	adds	r7, #32
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e07a      	b.n	8005904 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005812:	f043 0202 	orr.w	r2, r3, #2
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 face 	bl	8005dbc <ADC_ConversionStop>
 8005820:	4603      	mov	r3, r0
 8005822:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10f      	bne.n	800584a <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fb92 	bl	8005f54 <ADC_Disable>
 8005830:	4603      	mov	r3, r0
 8005832:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d102      	bne.n	8005840 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff fd9f 	bl	8005388 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6812      	ldr	r2, [r2, #0]
 8005854:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8005858:	f023 0303 	bic.w	r3, r3, #3
 800585c:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f240 329f 	movw	r2, #927	; 0x39f
 8005866:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68d9      	ldr	r1, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b26      	ldr	r3, [pc, #152]	; (800590c <HAL_ADC_DeInit+0x110>)
 8005874:	400b      	ands	r3, r1
 8005876:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691a      	ldr	r2, [r3, #16]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8005886:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695a      	ldr	r2, [r3, #20]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0207 	bic.w	r2, r2, #7
 8005896:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6a1a      	ldr	r2, [r3, #32]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80058a6:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80058b6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80058c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2200      	movs	r2, #0
 80058d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80058d6:	4b0e      	ldr	r3, [pc, #56]	; (8005910 <HAL_ADC_DeInit+0x114>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a0d      	ldr	r2, [pc, #52]	; (8005910 <HAL_ADC_DeInit+0x114>)
 80058dc:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80058e0:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7fb fdfe 	bl	80014e4 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	833e0200 	.word	0x833e0200
 8005910:	40012708 	.word	0x40012708

08005914 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff fdc5 	bl	80054b0 <LL_ADC_REG_IsConversionOngoing>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d132      	bne.n	8005992 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <HAL_ADC_Start+0x26>
 8005936:	2302      	movs	r3, #2
 8005938:	e02e      	b.n	8005998 <HAL_ADC_Start+0x84>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fa80 	bl	8005e48 <ADC_Enable>
 8005948:	4603      	mov	r3, r0
 800594a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d11a      	bne.n	8005988 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005956:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	221c      	movs	r2, #28
 8005972:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff fd6f 	bl	8005464 <LL_ADC_REG_StartConversion>
 8005986:	e006      	b.n	8005996 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005990:	e001      	b.n	8005996 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005992:	2302      	movs	r3, #2
 8005994:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8005996:	7bfb      	ldrb	r3, [r7, #15]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_ADC_Stop+0x16>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e022      	b.n	80059fc <HAL_ADC_Stop+0x5c>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f9fc 	bl	8005dbc <ADC_ConversionStop>
 80059c4:	4603      	mov	r3, r0
 80059c6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d111      	bne.n	80059f2 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fac0 	bl	8005f54 <ADC_Disable>
 80059d4:	4603      	mov	r3, r0
 80059d6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e6:	f023 0301 	bic.w	r3, r3, #1
 80059ea:	f043 0201 	orr.w	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d102      	bne.n	8005a1c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8005a16:	2308      	movs	r3, #8
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	e010      	b.n	8005a3e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d007      	beq.n	8005a3a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2e:	f043 0220 	orr.w	r2, r3, #32
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e077      	b.n	8005b2a <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8005a3a:	2304      	movs	r3, #4
 8005a3c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005a3e:	f7fc fe91 	bl	8002764 <HAL_GetTick>
 8005a42:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005a44:	e021      	b.n	8005a8a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a4c:	d01d      	beq.n	8005a8a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005a4e:	f7fc fe89 	bl	8002764 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d302      	bcc.n	8005a64 <HAL_ADC_PollForConversion+0x60>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d112      	bne.n	8005a8a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10b      	bne.n	8005a8a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a76:	f043 0204 	orr.w	r2, r3, #4
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e04f      	b.n	8005b2a <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4013      	ands	r3, r2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0d6      	beq.n	8005a46 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff fbe6 	bl	800527a <LL_ADC_REG_IsTriggerSourceSWStart>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d031      	beq.n	8005b18 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	7e9b      	ldrb	r3, [r3, #26]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d12d      	bne.n	8005b18 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d126      	bne.n	8005b18 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fcee 	bl	80054b0 <LL_ADC_REG_IsConversionOngoing>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d112      	bne.n	8005b00 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 020c 	bic.w	r2, r2, #12
 8005ae8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af2:	f023 0301 	bic.w	r3, r3, #1
 8005af6:	f043 0201 	orr.w	r2, r3, #1
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	659a      	str	r2, [r3, #88]	; 0x58
 8005afe:	e00b      	b.n	8005b18 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b04:	f043 0220 	orr.w	r2, r3, #32
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b10:	f043 0201 	orr.w	r2, r3, #1
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	7e1b      	ldrb	r3, [r3, #24]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d103      	bne.n	8005b28 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	220c      	movs	r2, #12
 8005b26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bc80      	pop	{r7}
 8005b48:	4770      	bx	lr
	...

08005b4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_ADC_ConfigChannel+0x28>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e110      	b.n	8005d96 <HAL_ADC_ConfigChannel+0x24a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff fc95 	bl	80054b0 <LL_ADC_REG_IsConversionOngoing>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f040 80f7 	bne.w	8005d7c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	f000 80b1 	beq.w	8005cfa <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba0:	d004      	beq.n	8005bac <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005ba6:	4a7e      	ldr	r2, [pc, #504]	; (8005da0 <HAL_ADC_ConfigChannel+0x254>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d108      	bne.n	8005bbe <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f7ff fb92 	bl	80052e0 <LL_ADC_REG_SetSequencerChAdd>
 8005bbc:	e041      	b.n	8005c42 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	210f      	movs	r1, #15
 8005bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	401a      	ands	r2, r3
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d105      	bne.n	8005bec <HAL_ADC_ConfigChannel+0xa0>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	0e9b      	lsrs	r3, r3, #26
 8005be6:	f003 031f 	and.w	r3, r3, #31
 8005bea:	e011      	b.n	8005c10 <HAL_ADC_ConfigChannel+0xc4>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	fa93 f3a3 	rbit	r3, r3
 8005bf8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8005c04:	2320      	movs	r3, #32
 8005c06:	e003      	b.n	8005c10 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	fab3 f383 	clz	r3, r3
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	6849      	ldr	r1, [r1, #4]
 8005c14:	f001 011f 	and.w	r1, r1, #31
 8005c18:	408b      	lsls	r3, r1
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	089b      	lsrs	r3, r3, #2
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d808      	bhi.n	8005c42 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	6859      	ldr	r1, [r3, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f7ff fb2e 	bl	800529e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6819      	ldr	r1, [r3, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f7ff fb6b 	bl	800532a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f280 8097 	bge.w	8005d8c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c5e:	4851      	ldr	r0, [pc, #324]	; (8005da4 <HAL_ADC_ConfigChannel+0x258>)
 8005c60:	f7ff fac8 	bl	80051f4 <LL_ADC_GetCommonPathInternalCh>
 8005c64:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a4f      	ldr	r2, [pc, #316]	; (8005da8 <HAL_ADC_ConfigChannel+0x25c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d120      	bne.n	8005cb2 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d11b      	bne.n	8005cb2 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c80:	4619      	mov	r1, r3
 8005c82:	4848      	ldr	r0, [pc, #288]	; (8005da4 <HAL_ADC_ConfigChannel+0x258>)
 8005c84:	f7ff faa4 	bl	80051d0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c88:	4b48      	ldr	r3, [pc, #288]	; (8005dac <HAL_ADC_ConfigChannel+0x260>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	099b      	lsrs	r3, r3, #6
 8005c8e:	4a48      	ldr	r2, [pc, #288]	; (8005db0 <HAL_ADC_ConfigChannel+0x264>)
 8005c90:	fba2 2303 	umull	r2, r3, r2, r3
 8005c94:	099b      	lsrs	r3, r3, #6
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	4613      	mov	r3, r2
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005ca2:	e002      	b.n	8005caa <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1f9      	bne.n	8005ca4 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005cb0:	e06c      	b.n	8005d8c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a3f      	ldr	r2, [pc, #252]	; (8005db4 <HAL_ADC_ConfigChannel+0x268>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d10c      	bne.n	8005cd6 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d107      	bne.n	8005cd6 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4835      	ldr	r0, [pc, #212]	; (8005da4 <HAL_ADC_ConfigChannel+0x258>)
 8005cd0:	f7ff fa7e 	bl	80051d0 <LL_ADC_SetCommonPathInternalCh>
 8005cd4:	e05a      	b.n	8005d8c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a37      	ldr	r2, [pc, #220]	; (8005db8 <HAL_ADC_ConfigChannel+0x26c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d155      	bne.n	8005d8c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d150      	bne.n	8005d8c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	482c      	ldr	r0, [pc, #176]	; (8005da4 <HAL_ADC_ConfigChannel+0x258>)
 8005cf4:	f7ff fa6c 	bl	80051d0 <LL_ADC_SetCommonPathInternalCh>
 8005cf8:	e048      	b.n	8005d8c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d02:	d004      	beq.n	8005d0e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005d08:	4a25      	ldr	r2, [pc, #148]	; (8005da0 <HAL_ADC_ConfigChannel+0x254>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d107      	bne.n	8005d1e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4619      	mov	r1, r3
 8005d18:	4610      	mov	r0, r2
 8005d1a:	f7ff faf3 	bl	8005304 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	da32      	bge.n	8005d8c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d26:	481f      	ldr	r0, [pc, #124]	; (8005da4 <HAL_ADC_ConfigChannel+0x258>)
 8005d28:	f7ff fa64 	bl	80051f4 <LL_ADC_GetCommonPathInternalCh>
 8005d2c:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1d      	ldr	r2, [pc, #116]	; (8005da8 <HAL_ADC_ConfigChannel+0x25c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d107      	bne.n	8005d48 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4818      	ldr	r0, [pc, #96]	; (8005da4 <HAL_ADC_ConfigChannel+0x258>)
 8005d42:	f7ff fa45 	bl	80051d0 <LL_ADC_SetCommonPathInternalCh>
 8005d46:	e021      	b.n	8005d8c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a19      	ldr	r2, [pc, #100]	; (8005db4 <HAL_ADC_ConfigChannel+0x268>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d107      	bne.n	8005d62 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4812      	ldr	r0, [pc, #72]	; (8005da4 <HAL_ADC_ConfigChannel+0x258>)
 8005d5c:	f7ff fa38 	bl	80051d0 <LL_ADC_SetCommonPathInternalCh>
 8005d60:	e014      	b.n	8005d8c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a14      	ldr	r2, [pc, #80]	; (8005db8 <HAL_ADC_ConfigChannel+0x26c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d10f      	bne.n	8005d8c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005d72:	4619      	mov	r1, r3
 8005d74:	480b      	ldr	r0, [pc, #44]	; (8005da4 <HAL_ADC_ConfigChannel+0x258>)
 8005d76:	f7ff fa2b 	bl	80051d0 <LL_ADC_SetCommonPathInternalCh>
 8005d7a:	e007      	b.n	8005d8c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d80:	f043 0220 	orr.w	r2, r3, #32
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8005d94:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3720      	adds	r7, #32
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	80000004 	.word	0x80000004
 8005da4:	40012708 	.word	0x40012708
 8005da8:	b0001000 	.word	0xb0001000
 8005dac:	20000000 	.word	0x20000000
 8005db0:	053e2d63 	.word	0x053e2d63
 8005db4:	b8004000 	.word	0xb8004000
 8005db8:	b4002000 	.word	0xb4002000

08005dbc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fb71 	bl	80054b0 <LL_ADC_REG_IsConversionOngoing>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d033      	beq.n	8005e3c <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff fb31 	bl	8005440 <LL_ADC_IsDisableOngoing>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d104      	bne.n	8005dee <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff fb4e 	bl	800548a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005dee:	f7fc fcb9 	bl	8002764 <HAL_GetTick>
 8005df2:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005df4:	e01b      	b.n	8005e2e <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005df6:	f7fc fcb5 	bl	8002764 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d914      	bls.n	8005e2e <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00d      	beq.n	8005e2e <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e16:	f043 0210 	orr.w	r2, r3, #16
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e22:	f043 0201 	orr.w	r2, r3, #1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e007      	b.n	8005e3e <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1dc      	bne.n	8005df6 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff fadf 	bl	800541c <LL_ADC_IsEnabled>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d169      	bne.n	8005f38 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	4b36      	ldr	r3, [pc, #216]	; (8005f44 <ADC_Enable+0xfc>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00d      	beq.n	8005e8e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e76:	f043 0210 	orr.w	r2, r3, #16
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e82:	f043 0201 	orr.w	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e055      	b.n	8005f3a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff fa9c 	bl	80053d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8005e98:	482b      	ldr	r0, [pc, #172]	; (8005f48 <ADC_Enable+0x100>)
 8005e9a:	f7ff f9ab 	bl	80051f4 <LL_ADC_GetCommonPathInternalCh>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00f      	beq.n	8005ec8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ea8:	4b28      	ldr	r3, [pc, #160]	; (8005f4c <ADC_Enable+0x104>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	099b      	lsrs	r3, r3, #6
 8005eae:	4a28      	ldr	r2, [pc, #160]	; (8005f50 <ADC_Enable+0x108>)
 8005eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb4:	099b      	lsrs	r3, r3, #6
 8005eb6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8005eb8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005eba:	e002      	b.n	8005ec2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1f9      	bne.n	8005ebc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	7e5b      	ldrb	r3, [r3, #25]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d033      	beq.n	8005f38 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005ed0:	f7fc fc48 	bl	8002764 <HAL_GetTick>
 8005ed4:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ed6:	e028      	b.n	8005f2a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7ff fa9d 	bl	800541c <LL_ADC_IsEnabled>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff fa6f 	bl	80053d0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ef2:	f7fc fc37 	bl	8002764 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d914      	bls.n	8005f2a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d00d      	beq.n	8005f2a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f12:	f043 0210 	orr.w	r2, r3, #16
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1e:	f043 0201 	orr.w	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e007      	b.n	8005f3a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d1cf      	bne.n	8005ed8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	80000017 	.word	0x80000017
 8005f48:	40012708 	.word	0x40012708
 8005f4c:	20000000 	.word	0x20000000
 8005f50:	053e2d63 	.word	0x053e2d63

08005f54 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff fa6d 	bl	8005440 <LL_ADC_IsDisableOngoing>
 8005f66:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff fa55 	bl	800541c <LL_ADC_IsEnabled>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d047      	beq.n	8006008 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d144      	bne.n	8006008 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0305 	and.w	r3, r3, #5
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d10c      	bne.n	8005fa6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff fa30 	bl	80053f6 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2203      	movs	r2, #3
 8005f9c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005f9e:	f7fc fbe1 	bl	8002764 <HAL_GetTick>
 8005fa2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005fa4:	e029      	b.n	8005ffa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005faa:	f043 0210 	orr.w	r2, r3, #16
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb6:	f043 0201 	orr.w	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e023      	b.n	800600a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005fc2:	f7fc fbcf 	bl	8002764 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d914      	bls.n	8005ffa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00d      	beq.n	8005ffa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe2:	f043 0210 	orr.w	r2, r3, #16
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fee:	f043 0201 	orr.w	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e007      	b.n	800600a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1dc      	bne.n	8005fc2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <LL_ADC_SetCalibrationFactor>:
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006022:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr

0800603a <LL_ADC_GetCalibrationFactor>:
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	bc80      	pop	{r7}
 8006054:	4770      	bx	lr

08006056 <LL_ADC_Enable>:
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006066:	f023 0317 	bic.w	r3, r3, #23
 800606a:	f043 0201 	orr.w	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	609a      	str	r2, [r3, #8]
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr

0800607c <LL_ADC_Disable>:
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800608c:	f023 0317 	bic.w	r3, r3, #23
 8006090:	f043 0202 	orr.w	r2, r3, #2
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	609a      	str	r2, [r3, #8]
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	bc80      	pop	{r7}
 80060a0:	4770      	bx	lr

080060a2 <LL_ADC_IsEnabled>:
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <LL_ADC_IsEnabled+0x18>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <LL_ADC_IsEnabled+0x1a>
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bc80      	pop	{r7}
 80060c4:	4770      	bx	lr

080060c6 <LL_ADC_StartCalibration>:
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060d6:	f023 0317 	bic.w	r3, r3, #23
 80060da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	609a      	str	r2, [r3, #8]
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bc80      	pop	{r7}
 80060ea:	4770      	bx	lr

080060ec <LL_ADC_IsCalibrationOnGoing>:
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006100:	d101      	bne.n	8006106 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006102:	2301      	movs	r3, #1
 8006104:	e000      	b.n	8006108 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	bc80      	pop	{r7}
 8006110:	4770      	bx	lr

08006112 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b088      	sub	sp, #32
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800611a:	2300      	movs	r3, #0
 800611c:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800611e:	2300      	movs	r3, #0
 8006120:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_ADCEx_Calibration_Start+0x1e>
 800612c:	2302      	movs	r3, #2
 800612e:	e0b9      	b.n	80062a4 <HAL_ADCEx_Calibration_Start+0x192>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff ff0b 	bl	8005f54 <ADC_Disable>
 800613e:	4603      	mov	r3, r0
 8006140:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff ffab 	bl	80060a2 <LL_ADC_IsEnabled>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	f040 809d 	bne.w	800628e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006158:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800615c:	f043 0202 	orr.w	r2, r3, #2
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	f248 0303 	movw	r3, #32771	; 0x8003
 800616e:	4013      	ands	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006180:	f023 0303 	bic.w	r3, r3, #3
 8006184:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006186:	2300      	movs	r3, #0
 8006188:	61fb      	str	r3, [r7, #28]
 800618a:	e02e      	b.n	80061ea <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff ff98 	bl	80060c6 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006196:	e014      	b.n	80061c2 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	3301      	adds	r3, #1
 800619c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 80061a4:	d30d      	bcc.n	80061c2 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061aa:	f023 0312 	bic.w	r3, r3, #18
 80061ae:	f043 0210 	orr.w	r2, r3, #16
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e070      	b.n	80062a4 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff ff90 	bl	80060ec <LL_ADC_IsCalibrationOnGoing>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e2      	bne.n	8006198 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff ff2f 	bl	800603a <LL_ADC_GetCalibrationFactor>
 80061dc:	4602      	mov	r2, r0
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	4413      	add	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	3301      	adds	r3, #1
 80061e8:	61fb      	str	r3, [r7, #28]
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	2b07      	cmp	r3, #7
 80061ee:	d9cd      	bls.n	800618c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff ff29 	bl	8006056 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69b9      	ldr	r1, [r7, #24]
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff ff01 	bl	8006012 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff ff31 	bl	800607c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800621a:	f7fc faa3 	bl	8002764 <HAL_GetTick>
 800621e:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006220:	e01c      	b.n	800625c <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006222:	f7fc fa9f 	bl	8002764 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d915      	bls.n	800625c <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff ff34 	bl	80060a2 <LL_ADC_IsEnabled>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00d      	beq.n	800625c <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006244:	f043 0210 	orr.w	r2, r3, #16
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006250:	f043 0201 	orr.w	r2, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e023      	b.n	80062a4 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff ff1e 	bl	80060a2 <LL_ADC_IsEnabled>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1da      	bne.n	8006222 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68d9      	ldr	r1, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	430a      	orrs	r2, r1
 800627a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006280:	f023 0303 	bic.w	r3, r3, #3
 8006284:	f043 0201 	orr.w	r2, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	659a      	str	r2, [r3, #88]	; 0x58
 800628c:	e005      	b.n	800629a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006292:	f043 0210 	orr.w	r2, r3, #16
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80062a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3720      	adds	r7, #32
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062bc:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <__NVIC_SetPriorityGrouping+0x44>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062c8:	4013      	ands	r3, r2
 80062ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062de:	4a04      	ldr	r2, [pc, #16]	; (80062f0 <__NVIC_SetPriorityGrouping+0x44>)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	60d3      	str	r3, [r2, #12]
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	e000ed00 	.word	0xe000ed00

080062f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062f8:	4b04      	ldr	r3, [pc, #16]	; (800630c <__NVIC_GetPriorityGrouping+0x18>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	0a1b      	lsrs	r3, r3, #8
 80062fe:	f003 0307 	and.w	r3, r3, #7
}
 8006302:	4618      	mov	r0, r3
 8006304:	46bd      	mov	sp, r7
 8006306:	bc80      	pop	{r7}
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	e000ed00 	.word	0xe000ed00

08006310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	4603      	mov	r3, r0
 8006318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800631a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800631e:	2b00      	cmp	r3, #0
 8006320:	db0b      	blt.n	800633a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	f003 021f 	and.w	r2, r3, #31
 8006328:	4906      	ldr	r1, [pc, #24]	; (8006344 <__NVIC_EnableIRQ+0x34>)
 800632a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	2001      	movs	r0, #1
 8006332:	fa00 f202 	lsl.w	r2, r0, r2
 8006336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr
 8006344:	e000e100 	.word	0xe000e100

08006348 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006356:	2b00      	cmp	r3, #0
 8006358:	db12      	blt.n	8006380 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	f003 021f 	and.w	r2, r3, #31
 8006360:	490a      	ldr	r1, [pc, #40]	; (800638c <__NVIC_DisableIRQ+0x44>)
 8006362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	2001      	movs	r0, #1
 800636a:	fa00 f202 	lsl.w	r2, r0, r2
 800636e:	3320      	adds	r3, #32
 8006370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006374:	f3bf 8f4f 	dsb	sy
}
 8006378:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800637a:	f3bf 8f6f 	isb	sy
}
 800637e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	bc80      	pop	{r7}
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	e000e100 	.word	0xe000e100

08006390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	4603      	mov	r3, r0
 8006398:	6039      	str	r1, [r7, #0]
 800639a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800639c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	db0a      	blt.n	80063ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	490c      	ldr	r1, [pc, #48]	; (80063dc <__NVIC_SetPriority+0x4c>)
 80063aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ae:	0112      	lsls	r2, r2, #4
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	440b      	add	r3, r1
 80063b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063b8:	e00a      	b.n	80063d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	4908      	ldr	r1, [pc, #32]	; (80063e0 <__NVIC_SetPriority+0x50>)
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	3b04      	subs	r3, #4
 80063c8:	0112      	lsls	r2, r2, #4
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	440b      	add	r3, r1
 80063ce:	761a      	strb	r2, [r3, #24]
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	e000e100 	.word	0xe000e100
 80063e0:	e000ed00 	.word	0xe000ed00

080063e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b089      	sub	sp, #36	; 0x24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f1c3 0307 	rsb	r3, r3, #7
 80063fe:	2b04      	cmp	r3, #4
 8006400:	bf28      	it	cs
 8006402:	2304      	movcs	r3, #4
 8006404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	3304      	adds	r3, #4
 800640a:	2b06      	cmp	r3, #6
 800640c:	d902      	bls.n	8006414 <NVIC_EncodePriority+0x30>
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	3b03      	subs	r3, #3
 8006412:	e000      	b.n	8006416 <NVIC_EncodePriority+0x32>
 8006414:	2300      	movs	r3, #0
 8006416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	43da      	mvns	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	401a      	ands	r2, r3
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800642c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	fa01 f303 	lsl.w	r3, r1, r3
 8006436:	43d9      	mvns	r1, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800643c:	4313      	orrs	r3, r2
         );
}
 800643e:	4618      	mov	r0, r3
 8006440:	3724      	adds	r7, #36	; 0x24
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr

08006448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff ff2b 	bl	80062ac <__NVIC_SetPriorityGrouping>
}
 8006456:	bf00      	nop
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b086      	sub	sp, #24
 8006462:	af00      	add	r7, sp, #0
 8006464:	4603      	mov	r3, r0
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
 800646a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800646c:	f7ff ff42 	bl	80062f4 <__NVIC_GetPriorityGrouping>
 8006470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	6978      	ldr	r0, [r7, #20]
 8006478:	f7ff ffb4 	bl	80063e4 <NVIC_EncodePriority>
 800647c:	4602      	mov	r2, r0
 800647e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006482:	4611      	mov	r1, r2
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff ff83 	bl	8006390 <__NVIC_SetPriority>
}
 800648a:	bf00      	nop
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	4603      	mov	r3, r0
 800649a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800649c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff ff35 	bl	8006310 <__NVIC_EnableIRQ>
}
 80064a6:	bf00      	nop
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	4603      	mov	r3, r0
 80064b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80064b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff ff43 	bl	8006348 <__NVIC_DisableIRQ>
}
 80064c2:	bf00      	nop
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
	...

080064cc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e08e      	b.n	80065fc <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	4b47      	ldr	r3, [pc, #284]	; (8006604 <HAL_DMA_Init+0x138>)
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d80f      	bhi.n	800650a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	4b45      	ldr	r3, [pc, #276]	; (8006608 <HAL_DMA_Init+0x13c>)
 80064f2:	4413      	add	r3, r2
 80064f4:	4a45      	ldr	r2, [pc, #276]	; (800660c <HAL_DMA_Init+0x140>)
 80064f6:	fba2 2303 	umull	r2, r3, r2, r3
 80064fa:	091b      	lsrs	r3, r3, #4
 80064fc:	009a      	lsls	r2, r3, #2
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a42      	ldr	r2, [pc, #264]	; (8006610 <HAL_DMA_Init+0x144>)
 8006506:	641a      	str	r2, [r3, #64]	; 0x40
 8006508:	e00e      	b.n	8006528 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	4b40      	ldr	r3, [pc, #256]	; (8006614 <HAL_DMA_Init+0x148>)
 8006512:	4413      	add	r3, r2
 8006514:	4a3d      	ldr	r2, [pc, #244]	; (800660c <HAL_DMA_Init+0x140>)
 8006516:	fba2 2303 	umull	r2, r3, r2, r3
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	009a      	lsls	r2, r3, #2
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a3c      	ldr	r2, [pc, #240]	; (8006618 <HAL_DMA_Init+0x14c>)
 8006526:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800653e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006542:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6819      	ldr	r1, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	431a      	orrs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fb24 	bl	8006bc8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006588:	d102      	bne.n	8006590 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006598:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800659c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80065a6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d010      	beq.n	80065d2 <HAL_DMA_Init+0x106>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d80c      	bhi.n	80065d2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fb4d 	bl	8006c58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80065ce:	605a      	str	r2, [r3, #4]
 80065d0:	e008      	b.n	80065e4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	40020407 	.word	0x40020407
 8006608:	bffdfff8 	.word	0xbffdfff8
 800660c:	cccccccd 	.word	0xcccccccd
 8006610:	40020000 	.word	0x40020000
 8006614:	bffdfbf8 	.word	0xbffdfbf8
 8006618:	40020400 	.word	0x40020400

0800661c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e07b      	b.n	8006726 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0201 	bic.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	4b3a      	ldr	r3, [pc, #232]	; (8006730 <HAL_DMA_DeInit+0x114>)
 8006646:	429a      	cmp	r2, r3
 8006648:	d80f      	bhi.n	800666a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	4b38      	ldr	r3, [pc, #224]	; (8006734 <HAL_DMA_DeInit+0x118>)
 8006652:	4413      	add	r3, r2
 8006654:	4a38      	ldr	r2, [pc, #224]	; (8006738 <HAL_DMA_DeInit+0x11c>)
 8006656:	fba2 2303 	umull	r2, r3, r2, r3
 800665a:	091b      	lsrs	r3, r3, #4
 800665c:	009a      	lsls	r2, r3, #2
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a35      	ldr	r2, [pc, #212]	; (800673c <HAL_DMA_DeInit+0x120>)
 8006666:	641a      	str	r2, [r3, #64]	; 0x40
 8006668:	e00e      	b.n	8006688 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	4b33      	ldr	r3, [pc, #204]	; (8006740 <HAL_DMA_DeInit+0x124>)
 8006672:	4413      	add	r3, r2
 8006674:	4a30      	ldr	r2, [pc, #192]	; (8006738 <HAL_DMA_DeInit+0x11c>)
 8006676:	fba2 2303 	umull	r2, r3, r2, r3
 800667a:	091b      	lsrs	r3, r3, #4
 800667c:	009a      	lsls	r2, r3, #2
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a2f      	ldr	r2, [pc, #188]	; (8006744 <HAL_DMA_DeInit+0x128>)
 8006686:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006694:	f003 021c 	and.w	r2, r3, #28
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	2101      	movs	r1, #1
 800669e:	fa01 f202 	lsl.w	r2, r1, r2
 80066a2:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fa8f 	bl	8006bc8 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066ba:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00f      	beq.n	80066e4 <HAL_DMA_DeInit+0xc8>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d80b      	bhi.n	80066e4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fac3 	bl	8006c58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d6:	2200      	movs	r2, #0
 80066d8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80066e2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	40020407 	.word	0x40020407
 8006734:	bffdfff8 	.word	0xbffdfff8
 8006738:	cccccccd 	.word	0xcccccccd
 800673c:	40020000 	.word	0x40020000
 8006740:	bffdfbf8 	.word	0xbffdfbf8
 8006744:	40020400 	.word	0x40020400

08006748 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_DMA_Start_IT+0x20>
 8006764:	2302      	movs	r3, #2
 8006766:	e069      	b.n	800683c <HAL_DMA_Start_IT+0xf4>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b01      	cmp	r3, #1
 800677a:	d155      	bne.n	8006828 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0201 	bic.w	r2, r2, #1
 8006798:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f9d3 	bl	8006b4c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d008      	beq.n	80067c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 020e 	orr.w	r2, r2, #14
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	e00f      	b.n	80067e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0204 	bic.w	r2, r2, #4
 80067ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 020a 	orr.w	r2, r2, #10
 80067de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067fc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006802:	2b00      	cmp	r3, #0
 8006804:	d007      	beq.n	8006816 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006814:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0201 	orr.w	r2, r2, #1
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	e008      	b.n	800683a <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2280      	movs	r2, #128	; 0x80
 800682c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800683a:	7dfb      	ldrb	r3, [r7, #23]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e04f      	b.n	80068f6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d008      	beq.n	8006874 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2204      	movs	r2, #4
 8006866:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e040      	b.n	80068f6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 020e 	bic.w	r2, r2, #14
 8006882:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800688e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006892:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0201 	bic.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a8:	f003 021c 	and.w	r2, r3, #28
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	2101      	movs	r1, #1
 80068b2:	fa01 f202 	lsl.w	r2, r1, r2
 80068b6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80068c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00c      	beq.n	80068e4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80068e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr

08006900 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d005      	beq.n	8006924 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2204      	movs	r2, #4
 800691c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	73fb      	strb	r3, [r7, #15]
 8006922:	e047      	b.n	80069b4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 020e 	bic.w	r2, r2, #14
 8006932:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0201 	bic.w	r2, r2, #1
 8006942:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800694e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006952:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006958:	f003 021c 	and.w	r2, r3, #28
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	2101      	movs	r1, #1
 8006962:	fa01 f202 	lsl.w	r2, r1, r2
 8006966:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006970:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00c      	beq.n	8006994 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006988:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006992:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
    }
  }
  return status;
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
	...

080069c0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069dc:	f003 031c 	and.w	r3, r3, #28
 80069e0:	2204      	movs	r2, #4
 80069e2:	409a      	lsls	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4013      	ands	r3, r2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d027      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x7c>
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d022      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d107      	bne.n	8006a14 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0204 	bic.w	r2, r2, #4
 8006a12:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a18:	f003 021c 	and.w	r2, r3, #28
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	2104      	movs	r1, #4
 8006a22:	fa01 f202 	lsl.w	r2, r1, r2
 8006a26:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 8081 	beq.w	8006b34 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006a3a:	e07b      	b.n	8006b34 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a40:	f003 031c 	and.w	r3, r3, #28
 8006a44:	2202      	movs	r2, #2
 8006a46:	409a      	lsls	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d03d      	beq.n	8006acc <HAL_DMA_IRQHandler+0x10c>
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d038      	beq.n	8006acc <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0320 	and.w	r3, r3, #32
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10b      	bne.n	8006a80 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 020a 	bic.w	r2, r2, #10
 8006a76:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	461a      	mov	r2, r3
 8006a86:	4b2e      	ldr	r3, [pc, #184]	; (8006b40 <HAL_DMA_IRQHandler+0x180>)
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d909      	bls.n	8006aa0 <HAL_DMA_IRQHandler+0xe0>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a90:	f003 031c 	and.w	r3, r3, #28
 8006a94:	4a2b      	ldr	r2, [pc, #172]	; (8006b44 <HAL_DMA_IRQHandler+0x184>)
 8006a96:	2102      	movs	r1, #2
 8006a98:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9c:	6053      	str	r3, [r2, #4]
 8006a9e:	e008      	b.n	8006ab2 <HAL_DMA_IRQHandler+0xf2>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa4:	f003 031c 	and.w	r3, r3, #28
 8006aa8:	4a27      	ldr	r2, [pc, #156]	; (8006b48 <HAL_DMA_IRQHandler+0x188>)
 8006aaa:	2102      	movs	r1, #2
 8006aac:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab0:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d038      	beq.n	8006b34 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006aca:	e033      	b.n	8006b34 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad0:	f003 031c 	and.w	r3, r3, #28
 8006ad4:	2208      	movs	r2, #8
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4013      	ands	r3, r2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d02a      	beq.n	8006b36 <HAL_DMA_IRQHandler+0x176>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d025      	beq.n	8006b36 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 020e 	bic.w	r2, r2, #14
 8006af8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	f003 021c 	and.w	r2, r3, #28
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	2101      	movs	r1, #1
 8006b08:	fa01 f202 	lsl.w	r2, r1, r2
 8006b0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop
}
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	40020080 	.word	0x40020080
 8006b44:	40020400 	.word	0x40020400
 8006b48:	40020000 	.word	0x40020000

08006b4c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006b62:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d004      	beq.n	8006b76 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006b74:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7a:	f003 021c 	and.w	r2, r3, #28
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	2101      	movs	r1, #1
 8006b84:	fa01 f202 	lsl.w	r2, r1, r2
 8006b88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	2b10      	cmp	r3, #16
 8006b98:	d108      	bne.n	8006bac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006baa:	e007      	b.n	8006bbc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	60da      	str	r2, [r3, #12]
}
 8006bbc:	bf00      	nop
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr
	...

08006bc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	4b1c      	ldr	r3, [pc, #112]	; (8006c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d813      	bhi.n	8006c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be0:	089b      	lsrs	r3, r3, #2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006be8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	3b08      	subs	r3, #8
 8006bf8:	4a14      	ldr	r2, [pc, #80]	; (8006c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8006bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfe:	091b      	lsrs	r3, r3, #4
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	e011      	b.n	8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c08:	089b      	lsrs	r3, r3, #2
 8006c0a:	009a      	lsls	r2, r3, #2
 8006c0c:	4b10      	ldr	r3, [pc, #64]	; (8006c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8006c0e:	4413      	add	r3, r2
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	3b08      	subs	r3, #8
 8006c1c:	4a0b      	ldr	r2, [pc, #44]	; (8006c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8006c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c22:	091b      	lsrs	r3, r3, #4
 8006c24:	3307      	adds	r3, #7
 8006c26:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8006c2c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f003 031f 	and.w	r3, r3, #31
 8006c34:	2201      	movs	r2, #1
 8006c36:	409a      	lsls	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006c3c:	bf00      	nop
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	40020407 	.word	0x40020407
 8006c4c:	cccccccd 	.word	0xcccccccd
 8006c50:	4002081c 	.word	0x4002081c
 8006c54:	40020880 	.word	0x40020880

08006c58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c68:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	; (8006c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a08      	ldr	r2, [pc, #32]	; (8006c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006c7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2201      	movs	r2, #1
 8006c88:	409a      	lsls	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006c8e:	bf00      	nop
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr
 8006c98:	1000823f 	.word	0x1000823f
 8006c9c:	40020940 	.word	0x40020940

08006ca0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006cae:	4b1c      	ldr	r3, [pc, #112]	; (8006d20 <HAL_FLASH_Program+0x80>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_FLASH_Program+0x1a>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e02d      	b.n	8006d16 <HAL_FLASH_Program+0x76>
 8006cba:	4b19      	ldr	r3, [pc, #100]	; (8006d20 <HAL_FLASH_Program+0x80>)
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006cc0:	4b17      	ldr	r3, [pc, #92]	; (8006d20 <HAL_FLASH_Program+0x80>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cca:	f000 f869 	bl	8006da0 <FLASH_WaitForLastOperation>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d11a      	bne.n	8006d0e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d105      	bne.n	8006cea <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006cde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ce2:	68b8      	ldr	r0, [r7, #8]
 8006ce4:	f000 f8be 	bl	8006e64 <FLASH_Program_DoubleWord>
 8006ce8:	e004      	b.n	8006cf4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	4619      	mov	r1, r3
 8006cee:	68b8      	ldr	r0, [r7, #8]
 8006cf0:	f000 f8de 	bl	8006eb0 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006cf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cf8:	f000 f852 	bl	8006da0 <FLASH_WaitForLastOperation>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8006d00:	4b08      	ldr	r3, [pc, #32]	; (8006d24 <HAL_FLASH_Program+0x84>)
 8006d02:	695a      	ldr	r2, [r3, #20]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	43db      	mvns	r3, r3
 8006d08:	4906      	ldr	r1, [pc, #24]	; (8006d24 <HAL_FLASH_Program+0x84>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006d0e:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <HAL_FLASH_Program+0x80>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	200004e0 	.word	0x200004e0
 8006d24:	58004000 	.word	0x58004000

08006d28 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006d32:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <HAL_FLASH_Unlock+0x38>)
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	da0b      	bge.n	8006d52 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006d3a:	4b09      	ldr	r3, [pc, #36]	; (8006d60 <HAL_FLASH_Unlock+0x38>)
 8006d3c:	4a09      	ldr	r2, [pc, #36]	; (8006d64 <HAL_FLASH_Unlock+0x3c>)
 8006d3e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <HAL_FLASH_Unlock+0x38>)
 8006d42:	4a09      	ldr	r2, [pc, #36]	; (8006d68 <HAL_FLASH_Unlock+0x40>)
 8006d44:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006d46:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <HAL_FLASH_Unlock+0x38>)
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da01      	bge.n	8006d52 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006d52:	79fb      	ldrb	r3, [r7, #7]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bc80      	pop	{r7}
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	58004000 	.word	0x58004000
 8006d64:	45670123 	.word	0x45670123
 8006d68:	cdef89ab 	.word	0xcdef89ab

08006d6c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006d76:	4b09      	ldr	r3, [pc, #36]	; (8006d9c <HAL_FLASH_Lock+0x30>)
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	4a08      	ldr	r2, [pc, #32]	; (8006d9c <HAL_FLASH_Lock+0x30>)
 8006d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d80:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8006d82:	4b06      	ldr	r3, [pc, #24]	; (8006d9c <HAL_FLASH_Lock+0x30>)
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	db01      	blt.n	8006d8e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	58004000 	.word	0x58004000

08006da0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8006da8:	f7fb fcdc 	bl	8002764 <HAL_GetTick>
 8006dac:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006dae:	e009      	b.n	8006dc4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8006db0:	f7fb fcd8 	bl	8002764 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d801      	bhi.n	8006dc4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e047      	b.n	8006e54 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006dc4:	4b25      	ldr	r3, [pc, #148]	; (8006e5c <FLASH_WaitForLastOperation+0xbc>)
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd0:	d0ee      	beq.n	8006db0 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8006dd2:	4b22      	ldr	r3, [pc, #136]	; (8006e5c <FLASH_WaitForLastOperation+0xbc>)
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006de2:	4b1e      	ldr	r3, [pc, #120]	; (8006e5c <FLASH_WaitForLastOperation+0xbc>)
 8006de4:	2201      	movs	r2, #1
 8006de6:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8006dee:	4013      	ands	r3, r2
 8006df0:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d007      	beq.n	8006e0c <FLASH_WaitForLastOperation+0x6c>
 8006dfc:	4b17      	ldr	r3, [pc, #92]	; (8006e5c <FLASH_WaitForLastOperation+0xbc>)
 8006dfe:	699a      	ldr	r2, [r3, #24]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006e06:	4915      	ldr	r1, [pc, #84]	; (8006e5c <FLASH_WaitForLastOperation+0xbc>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	618b      	str	r3, [r1, #24]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d004      	beq.n	8006e20 <FLASH_WaitForLastOperation+0x80>
 8006e16:	4a11      	ldr	r2, [pc, #68]	; (8006e5c <FLASH_WaitForLastOperation+0xbc>)
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006e1e:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00e      	beq.n	8006e44 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8006e26:	4a0e      	ldr	r2, [pc, #56]	; (8006e60 <FLASH_WaitForLastOperation+0xc0>)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e011      	b.n	8006e54 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8006e30:	f7fb fc98 	bl	8002764 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d801      	bhi.n	8006e44 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e007      	b.n	8006e54 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8006e44:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <FLASH_WaitForLastOperation+0xbc>)
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e50:	d0ee      	beq.n	8006e30 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	58004000 	.word	0x58004000
 8006e60:	200004e0 	.word	0x200004e0

08006e64 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006e70:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <FLASH_Program_DoubleWord+0x48>)
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	4a0d      	ldr	r2, [pc, #52]	; (8006eac <FLASH_Program_DoubleWord+0x48>)
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006e82:	f3bf 8f6f 	isb	sy
}
 8006e86:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8006e88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	000a      	movs	r2, r1
 8006e96:	2300      	movs	r3, #0
 8006e98:	68f9      	ldr	r1, [r7, #12]
 8006e9a:	3104      	adds	r1, #4
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	600b      	str	r3, [r1, #0]
}
 8006ea0:	bf00      	nop
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bc80      	pop	{r7}
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	58004000 	.word	0x58004000

08006eb0 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b089      	sub	sp, #36	; 0x24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006eba:	2340      	movs	r3, #64	; 0x40
 8006ebc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006ec6:	4b18      	ldr	r3, [pc, #96]	; (8006f28 <FLASH_Program_Fast+0x78>)
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	4a17      	ldr	r2, [pc, #92]	; (8006f28 <FLASH_Program_Fast+0x78>)
 8006ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ed0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8006eda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006edc:	b672      	cpsid	i
}
 8006ede:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	3304      	adds	r3, #4
 8006eec:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	617b      	str	r3, [r7, #20]
    row_index--;
 8006ef4:	7ffb      	ldrb	r3, [r7, #31]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8006efa:	7ffb      	ldrb	r3, [r7, #31]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1ef      	bne.n	8006ee0 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8006f00:	bf00      	nop
 8006f02:	4b09      	ldr	r3, [pc, #36]	; (8006f28 <FLASH_Program_Fast+0x78>)
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f0e:	d0f8      	beq.n	8006f02 <FLASH_Program_Fast+0x52>
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f383 8810 	msr	PRIMASK, r3
}
 8006f1a:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006f1c:	bf00      	nop
 8006f1e:	3724      	adds	r7, #36	; 0x24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bc80      	pop	{r7}
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	58004000 	.word	0x58004000

08006f2c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006f36:	4b28      	ldr	r3, [pc, #160]	; (8006fd8 <HAL_FLASHEx_Erase+0xac>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d101      	bne.n	8006f42 <HAL_FLASHEx_Erase+0x16>
 8006f3e:	2302      	movs	r3, #2
 8006f40:	e046      	b.n	8006fd0 <HAL_FLASHEx_Erase+0xa4>
 8006f42:	4b25      	ldr	r3, [pc, #148]	; (8006fd8 <HAL_FLASHEx_Erase+0xac>)
 8006f44:	2201      	movs	r2, #1
 8006f46:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006f48:	4b23      	ldr	r3, [pc, #140]	; (8006fd8 <HAL_FLASHEx_Erase+0xac>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006f4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f52:	f7ff ff25 	bl	8006da0 <FLASH_WaitForLastOperation>
 8006f56:	4603      	mov	r3, r0
 8006f58:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d133      	bne.n	8006fc8 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d108      	bne.n	8006f7a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8006f68:	f000 f838 	bl	8006fdc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f70:	f7ff ff16 	bl	8006da0 <FLASH_WaitForLastOperation>
 8006f74:	4603      	mov	r3, r0
 8006f76:	73fb      	strb	r3, [r7, #15]
 8006f78:	e024      	b.n	8006fc4 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f80:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	60bb      	str	r3, [r7, #8]
 8006f88:	e012      	b.n	8006fb0 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8006f8a:	68b8      	ldr	r0, [r7, #8]
 8006f8c:	f000 f836 	bl	8006ffc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f94:	f7ff ff04 	bl	8006da0 <FLASH_WaitForLastOperation>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	601a      	str	r2, [r3, #0]
          break;
 8006fa8:	e00a      	b.n	8006fc0 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	3301      	adds	r3, #1
 8006fae:	60bb      	str	r3, [r7, #8]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	4413      	add	r3, r2
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d3e4      	bcc.n	8006f8a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8006fc0:	f000 f878 	bl	80070b4 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006fc4:	f000 f832 	bl	800702c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006fc8:	4b03      	ldr	r3, [pc, #12]	; (8006fd8 <HAL_FLASHEx_Erase+0xac>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	701a      	strb	r2, [r3, #0]

  return status;
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	200004e0 	.word	0x200004e0

08006fdc <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8006fe0:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <FLASH_MassErase+0x1c>)
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	4a04      	ldr	r2, [pc, #16]	; (8006ff8 <FLASH_MassErase+0x1c>)
 8006fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fea:	f043 0304 	orr.w	r3, r3, #4
 8006fee:	6153      	str	r3, [r2, #20]
#endif
}
 8006ff0:	bf00      	nop
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bc80      	pop	{r7}
 8006ff6:	4770      	bx	lr
 8006ff8:	58004000 	.word	0x58004000

08006ffc <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8007004:	4b08      	ldr	r3, [pc, #32]	; (8007028 <FLASH_PageErase+0x2c>)
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	4313      	orrs	r3, r2
 8007012:	4a05      	ldr	r2, [pc, #20]	; (8007028 <FLASH_PageErase+0x2c>)
 8007014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007018:	f043 0302 	orr.w	r3, r3, #2
 800701c:	6153      	str	r3, [r2, #20]
#endif
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr
 8007028:	58004000 	.word	0x58004000

0800702c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8007030:	4b1f      	ldr	r3, [pc, #124]	; (80070b0 <FLASH_FlushCaches+0x84>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007038:	2b01      	cmp	r3, #1
 800703a:	d117      	bne.n	800706c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800703c:	4b1c      	ldr	r3, [pc, #112]	; (80070b0 <FLASH_FlushCaches+0x84>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a1b      	ldr	r2, [pc, #108]	; (80070b0 <FLASH_FlushCaches+0x84>)
 8007042:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007046:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007048:	4b19      	ldr	r3, [pc, #100]	; (80070b0 <FLASH_FlushCaches+0x84>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <FLASH_FlushCaches+0x84>)
 800704e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	4b16      	ldr	r3, [pc, #88]	; (80070b0 <FLASH_FlushCaches+0x84>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <FLASH_FlushCaches+0x84>)
 800705a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800705e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007060:	4b13      	ldr	r3, [pc, #76]	; (80070b0 <FLASH_FlushCaches+0x84>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a12      	ldr	r2, [pc, #72]	; (80070b0 <FLASH_FlushCaches+0x84>)
 8007066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800706a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800706c:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <FLASH_FlushCaches+0x84>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007074:	2b01      	cmp	r3, #1
 8007076:	d117      	bne.n	80070a8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007078:	4b0d      	ldr	r3, [pc, #52]	; (80070b0 <FLASH_FlushCaches+0x84>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a0c      	ldr	r2, [pc, #48]	; (80070b0 <FLASH_FlushCaches+0x84>)
 800707e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007082:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007084:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <FLASH_FlushCaches+0x84>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <FLASH_FlushCaches+0x84>)
 800708a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <FLASH_FlushCaches+0x84>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a06      	ldr	r2, [pc, #24]	; (80070b0 <FLASH_FlushCaches+0x84>)
 8007096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800709a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800709c:	4b04      	ldr	r3, [pc, #16]	; (80070b0 <FLASH_FlushCaches+0x84>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a03      	ldr	r2, [pc, #12]	; (80070b0 <FLASH_FlushCaches+0x84>)
 80070a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070a6:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80070a8:	bf00      	nop
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bc80      	pop	{r7}
 80070ae:	4770      	bx	lr
 80070b0:	58004000 	.word	0x58004000

080070b4 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <FLASH_AcknowledgePageErase+0x1c>)
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	4a04      	ldr	r2, [pc, #16]	; (80070d0 <FLASH_AcknowledgePageErase+0x1c>)
 80070be:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80070c2:	f023 0302 	bic.w	r3, r3, #2
 80070c6:	6153      	str	r3, [r2, #20]
#endif
}
 80070c8:	bf00      	nop
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bc80      	pop	{r7}
 80070ce:	4770      	bx	lr
 80070d0:	58004000 	.word	0x58004000

080070d4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80070de:	2300      	movs	r3, #0
 80070e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80070e2:	e140      	b.n	8007366 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	2101      	movs	r1, #1
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	fa01 f303 	lsl.w	r3, r1, r3
 80070f0:	4013      	ands	r3, r2
 80070f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 8132 	beq.w	8007360 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f003 0303 	and.w	r3, r3, #3
 8007104:	2b01      	cmp	r3, #1
 8007106:	d005      	beq.n	8007114 <HAL_GPIO_Init+0x40>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d130      	bne.n	8007176 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	2203      	movs	r2, #3
 8007120:	fa02 f303 	lsl.w	r3, r2, r3
 8007124:	43db      	mvns	r3, r3
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	4013      	ands	r3, r2
 800712a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	68da      	ldr	r2, [r3, #12]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	fa02 f303 	lsl.w	r3, r2, r3
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	4313      	orrs	r3, r2
 800713c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800714a:	2201      	movs	r2, #1
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	fa02 f303 	lsl.w	r3, r2, r3
 8007152:	43db      	mvns	r3, r3
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4013      	ands	r3, r2
 8007158:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	091b      	lsrs	r3, r3, #4
 8007160:	f003 0201 	and.w	r2, r3, #1
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	fa02 f303 	lsl.w	r3, r2, r3
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	2b03      	cmp	r3, #3
 8007180:	d017      	beq.n	80071b2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	2203      	movs	r2, #3
 800718e:	fa02 f303 	lsl.w	r3, r2, r3
 8007192:	43db      	mvns	r3, r3
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4013      	ands	r3, r2
 8007198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	005b      	lsls	r3, r3, #1
 80071a2:	fa02 f303 	lsl.w	r3, r2, r3
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d123      	bne.n	8007206 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	08da      	lsrs	r2, r3, #3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3208      	adds	r2, #8
 80071c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	220f      	movs	r2, #15
 80071d6:	fa02 f303 	lsl.w	r3, r2, r3
 80071da:	43db      	mvns	r3, r3
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4013      	ands	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	691a      	ldr	r2, [r3, #16]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	08da      	lsrs	r2, r3, #3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3208      	adds	r2, #8
 8007200:	6939      	ldr	r1, [r7, #16]
 8007202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	2203      	movs	r2, #3
 8007212:	fa02 f303 	lsl.w	r3, r2, r3
 8007216:	43db      	mvns	r3, r3
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	4013      	ands	r3, r2
 800721c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f003 0203 	and.w	r2, r3, #3
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	fa02 f303 	lsl.w	r3, r2, r3
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	4313      	orrs	r3, r2
 8007232:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 808c 	beq.w	8007360 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007248:	4a4e      	ldr	r2, [pc, #312]	; (8007384 <HAL_GPIO_Init+0x2b0>)
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	089b      	lsrs	r3, r3, #2
 800724e:	3302      	adds	r3, #2
 8007250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007254:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f003 0303 	and.w	r3, r3, #3
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	2207      	movs	r2, #7
 8007260:	fa02 f303 	lsl.w	r3, r2, r3
 8007264:	43db      	mvns	r3, r3
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	4013      	ands	r3, r2
 800726a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007272:	d00d      	beq.n	8007290 <HAL_GPIO_Init+0x1bc>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a44      	ldr	r2, [pc, #272]	; (8007388 <HAL_GPIO_Init+0x2b4>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d007      	beq.n	800728c <HAL_GPIO_Init+0x1b8>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a43      	ldr	r2, [pc, #268]	; (800738c <HAL_GPIO_Init+0x2b8>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d101      	bne.n	8007288 <HAL_GPIO_Init+0x1b4>
 8007284:	2302      	movs	r3, #2
 8007286:	e004      	b.n	8007292 <HAL_GPIO_Init+0x1be>
 8007288:	2307      	movs	r3, #7
 800728a:	e002      	b.n	8007292 <HAL_GPIO_Init+0x1be>
 800728c:	2301      	movs	r3, #1
 800728e:	e000      	b.n	8007292 <HAL_GPIO_Init+0x1be>
 8007290:	2300      	movs	r3, #0
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	f002 0203 	and.w	r2, r2, #3
 8007298:	0092      	lsls	r2, r2, #2
 800729a:	4093      	lsls	r3, r2
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	4313      	orrs	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80072a2:	4938      	ldr	r1, [pc, #224]	; (8007384 <HAL_GPIO_Init+0x2b0>)
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	089b      	lsrs	r3, r3, #2
 80072a8:	3302      	adds	r3, #2
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80072b0:	4b37      	ldr	r3, [pc, #220]	; (8007390 <HAL_GPIO_Init+0x2bc>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	43db      	mvns	r3, r3
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4013      	ands	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80072d4:	4a2e      	ldr	r2, [pc, #184]	; (8007390 <HAL_GPIO_Init+0x2bc>)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80072da:	4b2d      	ldr	r3, [pc, #180]	; (8007390 <HAL_GPIO_Init+0x2bc>)
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	43db      	mvns	r3, r3
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	4013      	ands	r3, r2
 80072e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80072fe:	4a24      	ldr	r2, [pc, #144]	; (8007390 <HAL_GPIO_Init+0x2bc>)
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8007304:	4b22      	ldr	r3, [pc, #136]	; (8007390 <HAL_GPIO_Init+0x2bc>)
 8007306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800730a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	43db      	mvns	r3, r3
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4013      	ands	r3, r2
 8007314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800732a:	4a19      	ldr	r2, [pc, #100]	; (8007390 <HAL_GPIO_Init+0x2bc>)
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8007332:	4b17      	ldr	r3, [pc, #92]	; (8007390 <HAL_GPIO_Init+0x2bc>)
 8007334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007338:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	43db      	mvns	r3, r3
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	4013      	ands	r3, r2
 8007342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4313      	orrs	r3, r2
 8007356:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8007358:	4a0d      	ldr	r2, [pc, #52]	; (8007390 <HAL_GPIO_Init+0x2bc>)
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	3301      	adds	r3, #1
 8007364:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	fa22 f303 	lsr.w	r3, r2, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	f47f aeb7 	bne.w	80070e4 <HAL_GPIO_Init+0x10>
  }
}
 8007376:	bf00      	nop
 8007378:	bf00      	nop
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	bc80      	pop	{r7}
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	40010000 	.word	0x40010000
 8007388:	48000400 	.word	0x48000400
 800738c:	48000800 	.word	0x48000800
 8007390:	58000800 	.word	0x58000800

08007394 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800739e:	2300      	movs	r3, #0
 80073a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80073a2:	e0af      	b.n	8007504 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80073a4:	2201      	movs	r2, #1
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	4013      	ands	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 80a2 	beq.w	80074fe <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80073ba:	4a59      	ldr	r2, [pc, #356]	; (8007520 <HAL_GPIO_DeInit+0x18c>)
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	089b      	lsrs	r3, r3, #2
 80073c0:	3302      	adds	r3, #2
 80073c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	2207      	movs	r2, #7
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	4013      	ands	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80073e2:	d00d      	beq.n	8007400 <HAL_GPIO_DeInit+0x6c>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a4f      	ldr	r2, [pc, #316]	; (8007524 <HAL_GPIO_DeInit+0x190>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d007      	beq.n	80073fc <HAL_GPIO_DeInit+0x68>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a4e      	ldr	r2, [pc, #312]	; (8007528 <HAL_GPIO_DeInit+0x194>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d101      	bne.n	80073f8 <HAL_GPIO_DeInit+0x64>
 80073f4:	2302      	movs	r3, #2
 80073f6:	e004      	b.n	8007402 <HAL_GPIO_DeInit+0x6e>
 80073f8:	2307      	movs	r3, #7
 80073fa:	e002      	b.n	8007402 <HAL_GPIO_DeInit+0x6e>
 80073fc:	2301      	movs	r3, #1
 80073fe:	e000      	b.n	8007402 <HAL_GPIO_DeInit+0x6e>
 8007400:	2300      	movs	r3, #0
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	f002 0203 	and.w	r2, r2, #3
 8007408:	0092      	lsls	r2, r2, #2
 800740a:	4093      	lsls	r3, r2
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	429a      	cmp	r2, r3
 8007410:	d136      	bne.n	8007480 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8007412:	4b46      	ldr	r3, [pc, #280]	; (800752c <HAL_GPIO_DeInit+0x198>)
 8007414:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	43db      	mvns	r3, r3
 800741c:	4943      	ldr	r1, [pc, #268]	; (800752c <HAL_GPIO_DeInit+0x198>)
 800741e:	4013      	ands	r3, r2
 8007420:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8007424:	4b41      	ldr	r3, [pc, #260]	; (800752c <HAL_GPIO_DeInit+0x198>)
 8007426:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	43db      	mvns	r3, r3
 800742e:	493f      	ldr	r1, [pc, #252]	; (800752c <HAL_GPIO_DeInit+0x198>)
 8007430:	4013      	ands	r3, r2
 8007432:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8007436:	4b3d      	ldr	r3, [pc, #244]	; (800752c <HAL_GPIO_DeInit+0x198>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	43db      	mvns	r3, r3
 800743e:	493b      	ldr	r1, [pc, #236]	; (800752c <HAL_GPIO_DeInit+0x198>)
 8007440:	4013      	ands	r3, r2
 8007442:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8007444:	4b39      	ldr	r3, [pc, #228]	; (800752c <HAL_GPIO_DeInit+0x198>)
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	43db      	mvns	r3, r3
 800744c:	4937      	ldr	r1, [pc, #220]	; (800752c <HAL_GPIO_DeInit+0x198>)
 800744e:	4013      	ands	r3, r2
 8007450:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f003 0303 	and.w	r3, r3, #3
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	2207      	movs	r2, #7
 800745c:	fa02 f303 	lsl.w	r3, r2, r3
 8007460:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007462:	4a2f      	ldr	r2, [pc, #188]	; (8007520 <HAL_GPIO_DeInit+0x18c>)
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	089b      	lsrs	r3, r3, #2
 8007468:	3302      	adds	r3, #2
 800746a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	43da      	mvns	r2, r3
 8007472:	482b      	ldr	r0, [pc, #172]	; (8007520 <HAL_GPIO_DeInit+0x18c>)
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	089b      	lsrs	r3, r3, #2
 8007478:	400a      	ands	r2, r1
 800747a:	3302      	adds	r3, #2
 800747c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	2103      	movs	r1, #3
 800748a:	fa01 f303 	lsl.w	r3, r1, r3
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	08da      	lsrs	r2, r3, #3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3208      	adds	r2, #8
 800749c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	220f      	movs	r2, #15
 80074aa:	fa02 f303 	lsl.w	r3, r2, r3
 80074ae:	43db      	mvns	r3, r3
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	08d2      	lsrs	r2, r2, #3
 80074b4:	4019      	ands	r1, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3208      	adds	r2, #8
 80074ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	2103      	movs	r1, #3
 80074c8:	fa01 f303 	lsl.w	r3, r1, r3
 80074cc:	43db      	mvns	r3, r3
 80074ce:	401a      	ands	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	2101      	movs	r1, #1
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	fa01 f303 	lsl.w	r3, r1, r3
 80074e0:	43db      	mvns	r3, r3
 80074e2:	401a      	ands	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	2103      	movs	r1, #3
 80074f2:	fa01 f303 	lsl.w	r3, r1, r3
 80074f6:	43db      	mvns	r3, r3
 80074f8:	401a      	ands	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	60da      	str	r2, [r3, #12]
    }

    position++;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	3301      	adds	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	fa22 f303 	lsr.w	r3, r2, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	f47f af49 	bne.w	80073a4 <HAL_GPIO_DeInit+0x10>
  }
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	371c      	adds	r7, #28
 8007518:	46bd      	mov	sp, r7
 800751a:	bc80      	pop	{r7}
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	40010000 	.word	0x40010000
 8007524:	48000400 	.word	0x48000400
 8007528:	48000800 	.word	0x48000800
 800752c:	58000800 	.word	0x58000800

08007530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	807b      	strh	r3, [r7, #2]
 800753c:	4613      	mov	r3, r2
 800753e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007540:	787b      	ldrb	r3, [r7, #1]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007546:	887a      	ldrh	r2, [r7, #2]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800754c:	e002      	b.n	8007554 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800754e:	887a      	ldrh	r2, [r7, #2]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	bc80      	pop	{r7}
 800755c:	4770      	bx	lr

0800755e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e081      	b.n	8007674 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d106      	bne.n	800758a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7fa fbc3 	bl	8001d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2224      	movs	r2, #36	; 0x24
 800758e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0201 	bic.w	r2, r2, #1
 80075a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689a      	ldr	r2, [r3, #8]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d107      	bne.n	80075d8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075d4:	609a      	str	r2, [r3, #8]
 80075d6:	e006      	b.n	80075e6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80075e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d104      	bne.n	80075f8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075f6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800760a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68da      	ldr	r2, [r3, #12]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800761a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	69d9      	ldr	r1, [r3, #28]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1a      	ldr	r2, [r3, #32]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	430a      	orrs	r2, r1
 8007644:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f042 0201 	orr.w	r2, r2, #1
 8007654:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2220      	movs	r2, #32
 8007660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af02      	add	r7, sp, #8
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	4608      	mov	r0, r1
 8007686:	4611      	mov	r1, r2
 8007688:	461a      	mov	r2, r3
 800768a:	4603      	mov	r3, r0
 800768c:	817b      	strh	r3, [r7, #10]
 800768e:	460b      	mov	r3, r1
 8007690:	813b      	strh	r3, [r7, #8]
 8007692:	4613      	mov	r3, r2
 8007694:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b20      	cmp	r3, #32
 80076a0:	f040 80f9 	bne.w	8007896 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <HAL_I2C_Mem_Write+0x34>
 80076aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d105      	bne.n	80076bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e0ed      	b.n	8007898 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d101      	bne.n	80076ca <HAL_I2C_Mem_Write+0x4e>
 80076c6:	2302      	movs	r3, #2
 80076c8:	e0e6      	b.n	8007898 <HAL_I2C_Mem_Write+0x21c>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076d2:	f7fb f847 	bl	8002764 <HAL_GetTick>
 80076d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	2319      	movs	r3, #25
 80076de:	2201      	movs	r2, #1
 80076e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 fac2 	bl	8007c6e <I2C_WaitOnFlagUntilTimeout>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e0d1      	b.n	8007898 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2221      	movs	r2, #33	; 0x21
 80076f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2240      	movs	r2, #64	; 0x40
 8007700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a3a      	ldr	r2, [r7, #32]
 800770e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007714:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800771c:	88f8      	ldrh	r0, [r7, #6]
 800771e:	893a      	ldrh	r2, [r7, #8]
 8007720:	8979      	ldrh	r1, [r7, #10]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	9301      	str	r3, [sp, #4]
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	4603      	mov	r3, r0
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 f9d3 	bl	8007ad8 <I2C_RequestMemoryWrite>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e0a9      	b.n	8007898 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007748:	b29b      	uxth	r3, r3
 800774a:	2bff      	cmp	r3, #255	; 0xff
 800774c:	d90e      	bls.n	800776c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	22ff      	movs	r2, #255	; 0xff
 8007752:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007758:	b2da      	uxtb	r2, r3
 800775a:	8979      	ldrh	r1, [r7, #10]
 800775c:	2300      	movs	r3, #0
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 fc1f 	bl	8007fa8 <I2C_TransferConfig>
 800776a:	e00f      	b.n	800778c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007770:	b29a      	uxth	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777a:	b2da      	uxtb	r2, r3
 800777c:	8979      	ldrh	r1, [r7, #10]
 800777e:	2300      	movs	r3, #0
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 fc0e 	bl	8007fa8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 faac 	bl	8007cee <I2C_WaitOnTXISFlagUntilTimeout>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e07b      	b.n	8007898 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	781a      	ldrb	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	3b01      	subs	r3, #1
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c8:	3b01      	subs	r3, #1
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d034      	beq.n	8007844 <HAL_I2C_Mem_Write+0x1c8>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d130      	bne.n	8007844 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	2200      	movs	r2, #0
 80077ea:	2180      	movs	r1, #128	; 0x80
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 fa3e 	bl	8007c6e <I2C_WaitOnFlagUntilTimeout>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e04d      	b.n	8007898 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007800:	b29b      	uxth	r3, r3
 8007802:	2bff      	cmp	r3, #255	; 0xff
 8007804:	d90e      	bls.n	8007824 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	22ff      	movs	r2, #255	; 0xff
 800780a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007810:	b2da      	uxtb	r2, r3
 8007812:	8979      	ldrh	r1, [r7, #10]
 8007814:	2300      	movs	r3, #0
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 fbc3 	bl	8007fa8 <I2C_TransferConfig>
 8007822:	e00f      	b.n	8007844 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007832:	b2da      	uxtb	r2, r3
 8007834:	8979      	ldrh	r1, [r7, #10]
 8007836:	2300      	movs	r3, #0
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 fbb2 	bl	8007fa8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007848:	b29b      	uxth	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d19e      	bne.n	800778c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 fa8b 	bl	8007d6e <I2C_WaitOnSTOPFlagUntilTimeout>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e01a      	b.n	8007898 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2220      	movs	r2, #32
 8007868:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	6859      	ldr	r1, [r3, #4]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	4b0a      	ldr	r3, [pc, #40]	; (80078a0 <HAL_I2C_Mem_Write+0x224>)
 8007876:	400b      	ands	r3, r1
 8007878:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2220      	movs	r2, #32
 800787e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	e000      	b.n	8007898 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007896:	2302      	movs	r3, #2
  }
}
 8007898:	4618      	mov	r0, r3
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	fe00e800 	.word	0xfe00e800

080078a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b088      	sub	sp, #32
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	4608      	mov	r0, r1
 80078ae:	4611      	mov	r1, r2
 80078b0:	461a      	mov	r2, r3
 80078b2:	4603      	mov	r3, r0
 80078b4:	817b      	strh	r3, [r7, #10]
 80078b6:	460b      	mov	r3, r1
 80078b8:	813b      	strh	r3, [r7, #8]
 80078ba:	4613      	mov	r3, r2
 80078bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b20      	cmp	r3, #32
 80078c8:	f040 80fd 	bne.w	8007ac6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <HAL_I2C_Mem_Read+0x34>
 80078d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d105      	bne.n	80078e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e0f1      	b.n	8007ac8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d101      	bne.n	80078f2 <HAL_I2C_Mem_Read+0x4e>
 80078ee:	2302      	movs	r3, #2
 80078f0:	e0ea      	b.n	8007ac8 <HAL_I2C_Mem_Read+0x224>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078fa:	f7fa ff33 	bl	8002764 <HAL_GetTick>
 80078fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	2319      	movs	r3, #25
 8007906:	2201      	movs	r2, #1
 8007908:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f9ae 	bl	8007c6e <I2C_WaitOnFlagUntilTimeout>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e0d5      	b.n	8007ac8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2222      	movs	r2, #34	; 0x22
 8007920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2240      	movs	r2, #64	; 0x40
 8007928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a3a      	ldr	r2, [r7, #32]
 8007936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800793c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007944:	88f8      	ldrh	r0, [r7, #6]
 8007946:	893a      	ldrh	r2, [r7, #8]
 8007948:	8979      	ldrh	r1, [r7, #10]
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	4603      	mov	r3, r0
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f913 	bl	8007b80 <I2C_RequestMemoryRead>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e0ad      	b.n	8007ac8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007970:	b29b      	uxth	r3, r3
 8007972:	2bff      	cmp	r3, #255	; 0xff
 8007974:	d90e      	bls.n	8007994 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	22ff      	movs	r2, #255	; 0xff
 800797a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007980:	b2da      	uxtb	r2, r3
 8007982:	8979      	ldrh	r1, [r7, #10]
 8007984:	4b52      	ldr	r3, [pc, #328]	; (8007ad0 <HAL_I2C_Mem_Read+0x22c>)
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 fb0b 	bl	8007fa8 <I2C_TransferConfig>
 8007992:	e00f      	b.n	80079b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007998:	b29a      	uxth	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	8979      	ldrh	r1, [r7, #10]
 80079a6:	4b4a      	ldr	r3, [pc, #296]	; (8007ad0 <HAL_I2C_Mem_Read+0x22c>)
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 fafa 	bl	8007fa8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ba:	2200      	movs	r2, #0
 80079bc:	2104      	movs	r1, #4
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 f955 	bl	8007c6e <I2C_WaitOnFlagUntilTimeout>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e07c      	b.n	8007ac8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	b2d2      	uxtb	r2, r2
 80079da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ea:	3b01      	subs	r3, #1
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	3b01      	subs	r3, #1
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d034      	beq.n	8007a74 <HAL_I2C_Mem_Read+0x1d0>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d130      	bne.n	8007a74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2180      	movs	r1, #128	; 0x80
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f926 	bl	8007c6e <I2C_WaitOnFlagUntilTimeout>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e04d      	b.n	8007ac8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	2bff      	cmp	r3, #255	; 0xff
 8007a34:	d90e      	bls.n	8007a54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	22ff      	movs	r2, #255	; 0xff
 8007a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	8979      	ldrh	r1, [r7, #10]
 8007a44:	2300      	movs	r3, #0
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 faab 	bl	8007fa8 <I2C_TransferConfig>
 8007a52:	e00f      	b.n	8007a74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	8979      	ldrh	r1, [r7, #10]
 8007a66:	2300      	movs	r3, #0
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 fa9a 	bl	8007fa8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d19a      	bne.n	80079b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 f973 	bl	8007d6e <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d001      	beq.n	8007a92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e01a      	b.n	8007ac8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2220      	movs	r2, #32
 8007a98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6859      	ldr	r1, [r3, #4]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <HAL_I2C_Mem_Read+0x230>)
 8007aa6:	400b      	ands	r3, r1
 8007aa8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	e000      	b.n	8007ac8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007ac6:	2302      	movs	r3, #2
  }
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	80002400 	.word	0x80002400
 8007ad4:	fe00e800 	.word	0xfe00e800

08007ad8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	4608      	mov	r0, r1
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	817b      	strh	r3, [r7, #10]
 8007aea:	460b      	mov	r3, r1
 8007aec:	813b      	strh	r3, [r7, #8]
 8007aee:	4613      	mov	r3, r2
 8007af0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007af2:	88fb      	ldrh	r3, [r7, #6]
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	8979      	ldrh	r1, [r7, #10]
 8007af8:	4b20      	ldr	r3, [pc, #128]	; (8007b7c <I2C_RequestMemoryWrite+0xa4>)
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 fa51 	bl	8007fa8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b06:	69fa      	ldr	r2, [r7, #28]
 8007b08:	69b9      	ldr	r1, [r7, #24]
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 f8ef 	bl	8007cee <I2C_WaitOnTXISFlagUntilTimeout>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e02c      	b.n	8007b74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b1a:	88fb      	ldrh	r3, [r7, #6]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d105      	bne.n	8007b2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b20:	893b      	ldrh	r3, [r7, #8]
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	629a      	str	r2, [r3, #40]	; 0x28
 8007b2a:	e015      	b.n	8007b58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b2c:	893b      	ldrh	r3, [r7, #8]
 8007b2e:	0a1b      	lsrs	r3, r3, #8
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	69b9      	ldr	r1, [r7, #24]
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 f8d5 	bl	8007cee <I2C_WaitOnTXISFlagUntilTimeout>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e012      	b.n	8007b74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b4e:	893b      	ldrh	r3, [r7, #8]
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	2180      	movs	r1, #128	; 0x80
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f883 	bl	8007c6e <I2C_WaitOnFlagUntilTimeout>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	80002000 	.word	0x80002000

08007b80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af02      	add	r7, sp, #8
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	4608      	mov	r0, r1
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	4603      	mov	r3, r0
 8007b90:	817b      	strh	r3, [r7, #10]
 8007b92:	460b      	mov	r3, r1
 8007b94:	813b      	strh	r3, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007b9a:	88fb      	ldrh	r3, [r7, #6]
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	8979      	ldrh	r1, [r7, #10]
 8007ba0:	4b20      	ldr	r3, [pc, #128]	; (8007c24 <I2C_RequestMemoryRead+0xa4>)
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 f9fe 	bl	8007fa8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bac:	69fa      	ldr	r2, [r7, #28]
 8007bae:	69b9      	ldr	r1, [r7, #24]
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 f89c 	bl	8007cee <I2C_WaitOnTXISFlagUntilTimeout>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e02c      	b.n	8007c1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bc0:	88fb      	ldrh	r3, [r7, #6]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d105      	bne.n	8007bd2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bc6:	893b      	ldrh	r3, [r7, #8]
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	629a      	str	r2, [r3, #40]	; 0x28
 8007bd0:	e015      	b.n	8007bfe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007bd2:	893b      	ldrh	r3, [r7, #8]
 8007bd4:	0a1b      	lsrs	r3, r3, #8
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007be0:	69fa      	ldr	r2, [r7, #28]
 8007be2:	69b9      	ldr	r1, [r7, #24]
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 f882 	bl	8007cee <I2C_WaitOnTXISFlagUntilTimeout>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e012      	b.n	8007c1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bf4:	893b      	ldrh	r3, [r7, #8]
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	2200      	movs	r2, #0
 8007c06:	2140      	movs	r1, #64	; 0x40
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 f830 	bl	8007c6e <I2C_WaitOnFlagUntilTimeout>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e000      	b.n	8007c1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	80002000 	.word	0x80002000

08007c28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d103      	bne.n	8007c46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2200      	movs	r2, #0
 8007c44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d007      	beq.n	8007c64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f042 0201 	orr.w	r2, r2, #1
 8007c62:	619a      	str	r2, [r3, #24]
  }
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bc80      	pop	{r7}
 8007c6c:	4770      	bx	lr

08007c6e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	603b      	str	r3, [r7, #0]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c7e:	e022      	b.n	8007cc6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c86:	d01e      	beq.n	8007cc6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c88:	f7fa fd6c 	bl	8002764 <HAL_GetTick>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d302      	bcc.n	8007c9e <I2C_WaitOnFlagUntilTimeout+0x30>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d113      	bne.n	8007cc6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca2:	f043 0220 	orr.w	r2, r3, #32
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e00f      	b.n	8007ce6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	699a      	ldr	r2, [r3, #24]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	bf0c      	ite	eq
 8007cd6:	2301      	moveq	r3, #1
 8007cd8:	2300      	movne	r3, #0
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	461a      	mov	r2, r3
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d0cd      	beq.n	8007c80 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007cfa:	e02c      	b.n	8007d56 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	68b9      	ldr	r1, [r7, #8]
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 f871 	bl	8007de8 <I2C_IsErrorOccurred>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e02a      	b.n	8007d66 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d16:	d01e      	beq.n	8007d56 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d18:	f7fa fd24 	bl	8002764 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d302      	bcc.n	8007d2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d113      	bne.n	8007d56 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d32:	f043 0220 	orr.w	r2, r3, #32
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e007      	b.n	8007d66 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d1cb      	bne.n	8007cfc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d7a:	e028      	b.n	8007dce <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	68b9      	ldr	r1, [r7, #8]
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 f831 	bl	8007de8 <I2C_IsErrorOccurred>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e026      	b.n	8007dde <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d90:	f7fa fce8 	bl	8002764 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d302      	bcc.n	8007da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d113      	bne.n	8007dce <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007daa:	f043 0220 	orr.w	r2, r3, #32
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2220      	movs	r2, #32
 8007db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e007      	b.n	8007dde <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	f003 0320 	and.w	r3, r3, #32
 8007dd8:	2b20      	cmp	r3, #32
 8007dda:	d1cf      	bne.n	8007d7c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08a      	sub	sp, #40	; 0x28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	f003 0310 	and.w	r3, r3, #16
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d068      	beq.n	8007ee6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2210      	movs	r2, #16
 8007e1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e1c:	e049      	b.n	8007eb2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e24:	d045      	beq.n	8007eb2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007e26:	f7fa fc9d 	bl	8002764 <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d302      	bcc.n	8007e3c <I2C_IsErrorOccurred+0x54>
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d13a      	bne.n	8007eb2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e5e:	d121      	bne.n	8007ea4 <I2C_IsErrorOccurred+0xbc>
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e66:	d01d      	beq.n	8007ea4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007e68:	7cfb      	ldrb	r3, [r7, #19]
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	d01a      	beq.n	8007ea4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007e7e:	f7fa fc71 	bl	8002764 <HAL_GetTick>
 8007e82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e84:	e00e      	b.n	8007ea4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007e86:	f7fa fc6d 	bl	8002764 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b19      	cmp	r3, #25
 8007e92:	d907      	bls.n	8007ea4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	f043 0320 	orr.w	r3, r3, #32
 8007e9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007ea2:	e006      	b.n	8007eb2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	d1e9      	bne.n	8007e86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	f003 0320 	and.w	r3, r3, #32
 8007ebc:	2b20      	cmp	r3, #32
 8007ebe:	d003      	beq.n	8007ec8 <I2C_IsErrorOccurred+0xe0>
 8007ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0aa      	beq.n	8007e1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d103      	bne.n	8007ed8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	f043 0304 	orr.w	r3, r3, #4
 8007ede:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00b      	beq.n	8007f10 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
 8007efa:	f043 0301 	orr.w	r3, r3, #1
 8007efe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00b      	beq.n	8007f32 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	f043 0308 	orr.w	r3, r3, #8
 8007f20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00b      	beq.n	8007f54 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
 8007f3e:	f043 0302 	orr.w	r3, r3, #2
 8007f42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d01c      	beq.n	8007f96 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f7ff fe63 	bl	8007c28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6859      	ldr	r1, [r3, #4]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <I2C_IsErrorOccurred+0x1bc>)
 8007f6e:	400b      	ands	r3, r1
 8007f70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	431a      	orrs	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2220      	movs	r2, #32
 8007f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007f96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3728      	adds	r7, #40	; 0x28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	fe00e800 	.word	0xfe00e800

08007fa8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b087      	sub	sp, #28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	607b      	str	r3, [r7, #4]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	817b      	strh	r3, [r7, #10]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fba:	897b      	ldrh	r3, [r7, #10]
 8007fbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007fc0:	7a7b      	ldrb	r3, [r7, #9]
 8007fc2:	041b      	lsls	r3, r3, #16
 8007fc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fc8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fd6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	0d5b      	lsrs	r3, r3, #21
 8007fe2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007fe6:	4b07      	ldr	r3, [pc, #28]	; (8008004 <I2C_TransferConfig+0x5c>)
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	43db      	mvns	r3, r3
 8007fec:	ea02 0103 	and.w	r1, r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007ffa:	bf00      	nop
 8007ffc:	371c      	adds	r7, #28
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr
 8008004:	03ff63ff 	.word	0x03ff63ff

08008008 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b20      	cmp	r3, #32
 800801c:	d138      	bne.n	8008090 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008024:	2b01      	cmp	r3, #1
 8008026:	d101      	bne.n	800802c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008028:	2302      	movs	r3, #2
 800802a:	e032      	b.n	8008092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2224      	movs	r2, #36	; 0x24
 8008038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f022 0201 	bic.w	r2, r2, #1
 800804a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800805a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6819      	ldr	r1, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	430a      	orrs	r2, r1
 800806a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0201 	orr.w	r2, r2, #1
 800807a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2220      	movs	r2, #32
 8008080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	e000      	b.n	8008092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008090:	2302      	movs	r3, #2
  }
}
 8008092:	4618      	mov	r0, r3
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	bc80      	pop	{r7}
 800809a:	4770      	bx	lr

0800809c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b20      	cmp	r3, #32
 80080b0:	d139      	bne.n	8008126 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80080bc:	2302      	movs	r3, #2
 80080be:	e033      	b.n	8008128 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2224      	movs	r2, #36	; 0x24
 80080cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0201 	bic.w	r2, r2, #1
 80080de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80080ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	021b      	lsls	r3, r3, #8
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f042 0201 	orr.w	r2, r2, #1
 8008110:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2220      	movs	r2, #32
 8008116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	e000      	b.n	8008128 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008126:	2302      	movs	r3, #2
  }
}
 8008128:	4618      	mov	r0, r3
 800812a:	3714      	adds	r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	bc80      	pop	{r7}
 8008130:	4770      	bx	lr
	...

08008134 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008134:	b480      	push	{r7}
 8008136:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008138:	4b04      	ldr	r3, [pc, #16]	; (800814c <HAL_PWR_EnableBkUpAccess+0x18>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a03      	ldr	r2, [pc, #12]	; (800814c <HAL_PWR_EnableBkUpAccess+0x18>)
 800813e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008142:	6013      	str	r3, [r2, #0]
}
 8008144:	bf00      	nop
 8008146:	46bd      	mov	sp, r7
 8008148:	bc80      	pop	{r7}
 800814a:	4770      	bx	lr
 800814c:	58000400 	.word	0x58000400

08008150 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10c      	bne.n	800817c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8008162:	4b13      	ldr	r3, [pc, #76]	; (80081b0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800816a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800816e:	d10d      	bne.n	800818c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8008170:	f000 f83c 	bl	80081ec <HAL_PWREx_DisableLowPowerRunMode>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d008      	beq.n	800818c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800817a:	e015      	b.n	80081a8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800817c:	4b0c      	ldr	r3, [pc, #48]	; (80081b0 <HAL_PWR_EnterSLEEPMode+0x60>)
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8008188:	f000 f822 	bl	80081d0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800818c:	4b09      	ldr	r3, [pc, #36]	; (80081b4 <HAL_PWR_EnterSLEEPMode+0x64>)
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	4a08      	ldr	r2, [pc, #32]	; (80081b4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8008192:	f023 0304 	bic.w	r3, r3, #4
 8008196:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d101      	bne.n	80081a2 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800819e:	bf30      	wfi
 80081a0:	e002      	b.n	80081a8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80081a2:	bf40      	sev
    __WFE();
 80081a4:	bf20      	wfe
    __WFE();
 80081a6:	bf20      	wfe
  }
}
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	58000400 	.word	0x58000400
 80081b4:	e000ed00 	.word	0xe000ed00

080081b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80081bc:	4b03      	ldr	r3, [pc, #12]	; (80081cc <HAL_PWREx_GetVoltageRange+0x14>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bc80      	pop	{r7}
 80081ca:	4770      	bx	lr
 80081cc:	58000400 	.word	0x58000400

080081d0 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80081d4:	4b04      	ldr	r3, [pc, #16]	; (80081e8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a03      	ldr	r2, [pc, #12]	; (80081e8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80081da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081de:	6013      	str	r3, [r2, #0]
}
 80081e0:	bf00      	nop
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr
 80081e8:	58000400 	.word	0x58000400

080081ec <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80081f2:	4b16      	ldr	r3, [pc, #88]	; (800824c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a15      	ldr	r2, [pc, #84]	; (800824c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80081f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081fc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80081fe:	4b14      	ldr	r3, [pc, #80]	; (8008250 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2232      	movs	r2, #50	; 0x32
 8008204:	fb02 f303 	mul.w	r3, r2, r3
 8008208:	4a12      	ldr	r2, [pc, #72]	; (8008254 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800820a:	fba2 2303 	umull	r2, r3, r2, r3
 800820e:	0c9b      	lsrs	r3, r3, #18
 8008210:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8008212:	e002      	b.n	800821a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3b01      	subs	r3, #1
 8008218:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800821a:	4b0c      	ldr	r3, [pc, #48]	; (800824c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008226:	d102      	bne.n	800822e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1f2      	bne.n	8008214 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800822e:	4b07      	ldr	r3, [pc, #28]	; (800824c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800823a:	d101      	bne.n	8008240 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e000      	b.n	8008242 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	4770      	bx	lr
 800824c:	58000400 	.word	0x58000400
 8008250:	20000000 	.word	0x20000000
 8008254:	431bde83 	.word	0x431bde83

08008258 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8008262:	4b10      	ldr	r3, [pc, #64]	; (80082a4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f023 0307 	bic.w	r3, r3, #7
 800826a:	4a0e      	ldr	r2, [pc, #56]	; (80082a4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800826c:	f043 0302 	orr.w	r3, r3, #2
 8008270:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008272:	4b0d      	ldr	r3, [pc, #52]	; (80082a8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	4a0c      	ldr	r2, [pc, #48]	; (80082a8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008278:	f043 0304 	orr.w	r3, r3, #4
 800827c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800827e:	79fb      	ldrb	r3, [r7, #7]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d101      	bne.n	8008288 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008284:	bf30      	wfi
 8008286:	e002      	b.n	800828e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008288:	bf40      	sev
    __WFE();
 800828a:	bf20      	wfe
    __WFE();
 800828c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800828e:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	4a05      	ldr	r2, [pc, #20]	; (80082a8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008294:	f023 0304 	bic.w	r3, r3, #4
 8008298:	6113      	str	r3, [r2, #16]
}
 800829a:	bf00      	nop
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	bc80      	pop	{r7}
 80082a2:	4770      	bx	lr
 80082a4:	58000400 	.word	0x58000400
 80082a8:	e000ed00 	.word	0xe000ed00

080082ac <LL_PWR_IsEnabledBkUpAccess>:
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80082b0:	4b06      	ldr	r3, [pc, #24]	; (80082cc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082bc:	d101      	bne.n	80082c2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80082be:	2301      	movs	r3, #1
 80082c0:	e000      	b.n	80082c4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr
 80082cc:	58000400 	.word	0x58000400

080082d0 <LL_RCC_HSE_EnableTcxo>:
{
 80082d0:	b480      	push	{r7}
 80082d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80082d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082e2:	6013      	str	r3, [r2, #0]
}
 80082e4:	bf00      	nop
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bc80      	pop	{r7}
 80082ea:	4770      	bx	lr

080082ec <LL_RCC_HSE_DisableTcxo>:
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80082f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082fe:	6013      	str	r3, [r2, #0]
}
 8008300:	bf00      	nop
 8008302:	46bd      	mov	sp, r7
 8008304:	bc80      	pop	{r7}
 8008306:	4770      	bx	lr

08008308 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800830c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800831a:	d101      	bne.n	8008320 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800831c:	2301      	movs	r3, #1
 800831e:	e000      	b.n	8008322 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	46bd      	mov	sp, r7
 8008326:	bc80      	pop	{r7}
 8008328:	4770      	bx	lr

0800832a <LL_RCC_HSE_Enable>:
{
 800832a:	b480      	push	{r7}
 800832c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800832e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800833c:	6013      	str	r3, [r2, #0]
}
 800833e:	bf00      	nop
 8008340:	46bd      	mov	sp, r7
 8008342:	bc80      	pop	{r7}
 8008344:	4770      	bx	lr

08008346 <LL_RCC_HSE_Disable>:
{
 8008346:	b480      	push	{r7}
 8008348:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800834a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008358:	6013      	str	r3, [r2, #0]
}
 800835a:	bf00      	nop
 800835c:	46bd      	mov	sp, r7
 800835e:	bc80      	pop	{r7}
 8008360:	4770      	bx	lr

08008362 <LL_RCC_HSE_IsReady>:
{
 8008362:	b480      	push	{r7}
 8008364:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008370:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008374:	d101      	bne.n	800837a <LL_RCC_HSE_IsReady+0x18>
 8008376:	2301      	movs	r3, #1
 8008378:	e000      	b.n	800837c <LL_RCC_HSE_IsReady+0x1a>
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	46bd      	mov	sp, r7
 8008380:	bc80      	pop	{r7}
 8008382:	4770      	bx	lr

08008384 <LL_RCC_HSI_Enable>:
{
 8008384:	b480      	push	{r7}
 8008386:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008396:	6013      	str	r3, [r2, #0]
}
 8008398:	bf00      	nop
 800839a:	46bd      	mov	sp, r7
 800839c:	bc80      	pop	{r7}
 800839e:	4770      	bx	lr

080083a0 <LL_RCC_HSI_Disable>:
{
 80083a0:	b480      	push	{r7}
 80083a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80083a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083b2:	6013      	str	r3, [r2, #0]
}
 80083b4:	bf00      	nop
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bc80      	pop	{r7}
 80083ba:	4770      	bx	lr

080083bc <LL_RCC_HSI_IsReady>:
{
 80083bc:	b480      	push	{r7}
 80083be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80083c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ce:	d101      	bne.n	80083d4 <LL_RCC_HSI_IsReady+0x18>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e000      	b.n	80083d6 <LL_RCC_HSI_IsReady+0x1a>
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr

080083de <LL_RCC_HSI_SetCalibTrimming>:
{
 80083de:	b480      	push	{r7}
 80083e0:	b083      	sub	sp, #12
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80083e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	061b      	lsls	r3, r3, #24
 80083f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083f8:	4313      	orrs	r3, r2
 80083fa:	604b      	str	r3, [r1, #4]
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	bc80      	pop	{r7}
 8008404:	4770      	bx	lr

08008406 <LL_RCC_LSE_IsReady>:
{
 8008406:	b480      	push	{r7}
 8008408:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800840a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800840e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	2b02      	cmp	r3, #2
 8008418:	d101      	bne.n	800841e <LL_RCC_LSE_IsReady+0x18>
 800841a:	2301      	movs	r3, #1
 800841c:	e000      	b.n	8008420 <LL_RCC_LSE_IsReady+0x1a>
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	46bd      	mov	sp, r7
 8008424:	bc80      	pop	{r7}
 8008426:	4770      	bx	lr

08008428 <LL_RCC_LSI_Enable>:
{
 8008428:	b480      	push	{r7}
 800842a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800842c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008438:	f043 0301 	orr.w	r3, r3, #1
 800843c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008440:	bf00      	nop
 8008442:	46bd      	mov	sp, r7
 8008444:	bc80      	pop	{r7}
 8008446:	4770      	bx	lr

08008448 <LL_RCC_LSI_Disable>:
{
 8008448:	b480      	push	{r7}
 800844a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800844c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008458:	f023 0301 	bic.w	r3, r3, #1
 800845c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008460:	bf00      	nop
 8008462:	46bd      	mov	sp, r7
 8008464:	bc80      	pop	{r7}
 8008466:	4770      	bx	lr

08008468 <LL_RCC_LSI_IsReady>:
{
 8008468:	b480      	push	{r7}
 800846a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800846c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b02      	cmp	r3, #2
 800847a:	d101      	bne.n	8008480 <LL_RCC_LSI_IsReady+0x18>
 800847c:	2301      	movs	r3, #1
 800847e:	e000      	b.n	8008482 <LL_RCC_LSI_IsReady+0x1a>
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	46bd      	mov	sp, r7
 8008486:	bc80      	pop	{r7}
 8008488:	4770      	bx	lr

0800848a <LL_RCC_MSI_Enable>:
{
 800848a:	b480      	push	{r7}
 800848c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800848e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008498:	f043 0301 	orr.w	r3, r3, #1
 800849c:	6013      	str	r3, [r2, #0]
}
 800849e:	bf00      	nop
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bc80      	pop	{r7}
 80084a4:	4770      	bx	lr

080084a6 <LL_RCC_MSI_Disable>:
{
 80084a6:	b480      	push	{r7}
 80084a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80084aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084b4:	f023 0301 	bic.w	r3, r3, #1
 80084b8:	6013      	str	r3, [r2, #0]
}
 80084ba:	bf00      	nop
 80084bc:	46bd      	mov	sp, r7
 80084be:	bc80      	pop	{r7}
 80084c0:	4770      	bx	lr

080084c2 <LL_RCC_MSI_IsReady>:
{
 80084c2:	b480      	push	{r7}
 80084c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80084c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0302 	and.w	r3, r3, #2
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d101      	bne.n	80084d8 <LL_RCC_MSI_IsReady+0x16>
 80084d4:	2301      	movs	r3, #1
 80084d6:	e000      	b.n	80084da <LL_RCC_MSI_IsReady+0x18>
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	46bd      	mov	sp, r7
 80084de:	bc80      	pop	{r7}
 80084e0:	4770      	bx	lr

080084e2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80084e2:	b480      	push	{r7}
 80084e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80084e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0308 	and.w	r3, r3, #8
 80084f0:	2b08      	cmp	r3, #8
 80084f2:	d101      	bne.n	80084f8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80084f4:	2301      	movs	r3, #1
 80084f6:	e000      	b.n	80084fa <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bc80      	pop	{r7}
 8008500:	4770      	bx	lr

08008502 <LL_RCC_MSI_GetRange>:
{
 8008502:	b480      	push	{r7}
 8008504:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8008506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008510:	4618      	mov	r0, r3
 8008512:	46bd      	mov	sp, r7
 8008514:	bc80      	pop	{r7}
 8008516:	4770      	bx	lr

08008518 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8008518:	b480      	push	{r7}
 800851a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800851c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008524:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8008528:	4618      	mov	r0, r3
 800852a:	46bd      	mov	sp, r7
 800852c:	bc80      	pop	{r7}
 800852e:	4770      	bx	lr

08008530 <LL_RCC_MSI_SetCalibTrimming>:
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800854a:	4313      	orrs	r3, r2
 800854c:	604b      	str	r3, [r1, #4]
}
 800854e:	bf00      	nop
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	bc80      	pop	{r7}
 8008556:	4770      	bx	lr

08008558 <LL_RCC_SetSysClkSource>:
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f023 0203 	bic.w	r2, r3, #3
 800856a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4313      	orrs	r3, r2
 8008572:	608b      	str	r3, [r1, #8]
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	bc80      	pop	{r7}
 800857c:	4770      	bx	lr

0800857e <LL_RCC_GetSysClkSource>:
{
 800857e:	b480      	push	{r7}
 8008580:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f003 030c 	and.w	r3, r3, #12
}
 800858c:	4618      	mov	r0, r3
 800858e:	46bd      	mov	sp, r7
 8008590:	bc80      	pop	{r7}
 8008592:	4770      	bx	lr

08008594 <LL_RCC_SetAHBPrescaler>:
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800859c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	608b      	str	r3, [r1, #8]
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bc80      	pop	{r7}
 80085b8:	4770      	bx	lr

080085ba <LL_RCC_SetAHB3Prescaler>:
{
 80085ba:	b480      	push	{r7}
 80085bc:	b083      	sub	sp, #12
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80085c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80085ca:	f023 020f 	bic.w	r2, r3, #15
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	091b      	lsrs	r3, r3, #4
 80085d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085d6:	4313      	orrs	r3, r2
 80085d8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bc80      	pop	{r7}
 80085e4:	4770      	bx	lr

080085e6 <LL_RCC_SetAPB1Prescaler>:
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80085ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80085f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4313      	orrs	r3, r2
 8008600:	608b      	str	r3, [r1, #8]
}
 8008602:	bf00      	nop
 8008604:	370c      	adds	r7, #12
 8008606:	46bd      	mov	sp, r7
 8008608:	bc80      	pop	{r7}
 800860a:	4770      	bx	lr

0800860c <LL_RCC_SetAPB2Prescaler>:
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800861e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4313      	orrs	r3, r2
 8008626:	608b      	str	r3, [r1, #8]
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	bc80      	pop	{r7}
 8008630:	4770      	bx	lr

08008632 <LL_RCC_GetAHBPrescaler>:
{
 8008632:	b480      	push	{r7}
 8008634:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008640:	4618      	mov	r0, r3
 8008642:	46bd      	mov	sp, r7
 8008644:	bc80      	pop	{r7}
 8008646:	4770      	bx	lr

08008648 <LL_RCC_GetAHB3Prescaler>:
{
 8008648:	b480      	push	{r7}
 800864a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800864c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008650:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800865a:	4618      	mov	r0, r3
 800865c:	46bd      	mov	sp, r7
 800865e:	bc80      	pop	{r7}
 8008660:	4770      	bx	lr

08008662 <LL_RCC_GetAPB1Prescaler>:
{
 8008662:	b480      	push	{r7}
 8008664:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008670:	4618      	mov	r0, r3
 8008672:	46bd      	mov	sp, r7
 8008674:	bc80      	pop	{r7}
 8008676:	4770      	bx	lr

08008678 <LL_RCC_GetAPB2Prescaler>:
{
 8008678:	b480      	push	{r7}
 800867a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800867c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008686:	4618      	mov	r0, r3
 8008688:	46bd      	mov	sp, r7
 800868a:	bc80      	pop	{r7}
 800868c:	4770      	bx	lr

0800868e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800868e:	b480      	push	{r7}
 8008690:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800869c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086a0:	6013      	str	r3, [r2, #0]
}
 80086a2:	bf00      	nop
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bc80      	pop	{r7}
 80086a8:	4770      	bx	lr

080086aa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80086aa:	b480      	push	{r7}
 80086ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80086ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086bc:	6013      	str	r3, [r2, #0]
}
 80086be:	bf00      	nop
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bc80      	pop	{r7}
 80086c4:	4770      	bx	lr

080086c6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80086c6:	b480      	push	{r7}
 80086c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80086ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086d8:	d101      	bne.n	80086de <LL_RCC_PLL_IsReady+0x18>
 80086da:	2301      	movs	r3, #1
 80086dc:	e000      	b.n	80086e0 <LL_RCC_PLL_IsReady+0x1a>
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bc80      	pop	{r7}
 80086e6:	4770      	bx	lr

080086e8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80086e8:	b480      	push	{r7}
 80086ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80086ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	0a1b      	lsrs	r3, r3, #8
 80086f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bc80      	pop	{r7}
 80086fe:	4770      	bx	lr

08008700 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8008700:	b480      	push	{r7}
 8008702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800870e:	4618      	mov	r0, r3
 8008710:	46bd      	mov	sp, r7
 8008712:	bc80      	pop	{r7}
 8008714:	4770      	bx	lr

08008716 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008716:	b480      	push	{r7}
 8008718:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800871a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008724:	4618      	mov	r0, r3
 8008726:	46bd      	mov	sp, r7
 8008728:	bc80      	pop	{r7}
 800872a:	4770      	bx	lr

0800872c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f003 0303 	and.w	r3, r3, #3
}
 800873a:	4618      	mov	r0, r3
 800873c:	46bd      	mov	sp, r7
 800873e:	bc80      	pop	{r7}
 8008740:	4770      	bx	lr

08008742 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8008742:	b480      	push	{r7}
 8008744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008754:	d101      	bne.n	800875a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008756:	2301      	movs	r3, #1
 8008758:	e000      	b.n	800875c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	46bd      	mov	sp, r7
 8008760:	bc80      	pop	{r7}
 8008762:	4770      	bx	lr

08008764 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008764:	b480      	push	{r7}
 8008766:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800876c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008778:	d101      	bne.n	800877e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800877a:	2301      	movs	r3, #1
 800877c:	e000      	b.n	8008780 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	46bd      	mov	sp, r7
 8008784:	bc80      	pop	{r7}
 8008786:	4770      	bx	lr

08008788 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008788:	b480      	push	{r7}
 800878a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800878c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008796:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800879a:	d101      	bne.n	80087a0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800879c:	2301      	movs	r3, #1
 800879e:	e000      	b.n	80087a2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bc80      	pop	{r7}
 80087a8:	4770      	bx	lr

080087aa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80087aa:	b480      	push	{r7}
 80087ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80087ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087bc:	d101      	bne.n	80087c2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80087be:	2301      	movs	r3, #1
 80087c0:	e000      	b.n	80087c4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bc80      	pop	{r7}
 80087ca:	4770      	bx	lr

080087cc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b088      	sub	sp, #32
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e36f      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087de:	f7ff fece 	bl	800857e <LL_RCC_GetSysClkSource>
 80087e2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087e4:	f7ff ffa2 	bl	800872c <LL_RCC_PLL_GetMainSource>
 80087e8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0320 	and.w	r3, r3, #32
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 80c4 	beq.w	8008980 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d005      	beq.n	800880a <HAL_RCC_OscConfig+0x3e>
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	2b0c      	cmp	r3, #12
 8008802:	d176      	bne.n	80088f2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d173      	bne.n	80088f2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e353      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800881a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0308 	and.w	r3, r3, #8
 8008824:	2b00      	cmp	r3, #0
 8008826:	d005      	beq.n	8008834 <HAL_RCC_OscConfig+0x68>
 8008828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008832:	e006      	b.n	8008842 <HAL_RCC_OscConfig+0x76>
 8008834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800883c:	091b      	lsrs	r3, r3, #4
 800883e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008842:	4293      	cmp	r3, r2
 8008844:	d222      	bcs.n	800888c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884a:	4618      	mov	r0, r3
 800884c:	f000 fd3c 	bl	80092c8 <RCC_SetFlashLatencyFromMSIRange>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e331      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800885a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008864:	f043 0308 	orr.w	r3, r3, #8
 8008868:	6013      	str	r3, [r2, #0]
 800886a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008878:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800887c:	4313      	orrs	r3, r2
 800887e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	4618      	mov	r0, r3
 8008886:	f7ff fe53 	bl	8008530 <LL_RCC_MSI_SetCalibTrimming>
 800888a:	e021      	b.n	80088d0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800888c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008896:	f043 0308 	orr.w	r3, r3, #8
 800889a:	6013      	str	r3, [r2, #0]
 800889c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088ae:	4313      	orrs	r3, r2
 80088b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7ff fe3a 	bl	8008530 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 fd01 	bl	80092c8 <RCC_SetFlashLatencyFromMSIRange>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e2f6      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80088d0:	f000 fcc2 	bl	8009258 <HAL_RCC_GetHCLKFreq>
 80088d4:	4603      	mov	r3, r0
 80088d6:	4aa7      	ldr	r2, [pc, #668]	; (8008b74 <HAL_RCC_OscConfig+0x3a8>)
 80088d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80088da:	4ba7      	ldr	r3, [pc, #668]	; (8008b78 <HAL_RCC_OscConfig+0x3ac>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4618      	mov	r0, r3
 80088e0:	f7f9 ff36 	bl	8002750 <HAL_InitTick>
 80088e4:	4603      	mov	r3, r0
 80088e6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80088e8:	7cfb      	ldrb	r3, [r7, #19]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d047      	beq.n	800897e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80088ee:	7cfb      	ldrb	r3, [r7, #19]
 80088f0:	e2e5      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d02c      	beq.n	8008954 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80088fa:	f7ff fdc6 	bl	800848a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80088fe:	f7f9 ff31 	bl	8002764 <HAL_GetTick>
 8008902:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008904:	e008      	b.n	8008918 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008906:	f7f9 ff2d 	bl	8002764 <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	2b02      	cmp	r3, #2
 8008912:	d901      	bls.n	8008918 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e2d2      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008918:	f7ff fdd3 	bl	80084c2 <LL_RCC_MSI_IsReady>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0f1      	beq.n	8008906 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800892c:	f043 0308 	orr.w	r3, r3, #8
 8008930:	6013      	str	r3, [r2, #0]
 8008932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008940:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008944:	4313      	orrs	r3, r2
 8008946:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff fdef 	bl	8008530 <LL_RCC_MSI_SetCalibTrimming>
 8008952:	e015      	b.n	8008980 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008954:	f7ff fda7 	bl	80084a6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008958:	f7f9 ff04 	bl	8002764 <HAL_GetTick>
 800895c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800895e:	e008      	b.n	8008972 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008960:	f7f9 ff00 	bl	8002764 <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	2b02      	cmp	r3, #2
 800896c:	d901      	bls.n	8008972 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e2a5      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008972:	f7ff fda6 	bl	80084c2 <LL_RCC_MSI_IsReady>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1f1      	bne.n	8008960 <HAL_RCC_OscConfig+0x194>
 800897c:	e000      	b.n	8008980 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800897e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	d058      	beq.n	8008a3e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	2b08      	cmp	r3, #8
 8008990:	d005      	beq.n	800899e <HAL_RCC_OscConfig+0x1d2>
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	2b0c      	cmp	r3, #12
 8008996:	d108      	bne.n	80089aa <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	2b03      	cmp	r3, #3
 800899c:	d105      	bne.n	80089aa <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d14b      	bne.n	8008a3e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e289      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80089aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089bc:	4313      	orrs	r3, r2
 80089be:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089c8:	d102      	bne.n	80089d0 <HAL_RCC_OscConfig+0x204>
 80089ca:	f7ff fcae 	bl	800832a <LL_RCC_HSE_Enable>
 80089ce:	e00d      	b.n	80089ec <HAL_RCC_OscConfig+0x220>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80089d8:	d104      	bne.n	80089e4 <HAL_RCC_OscConfig+0x218>
 80089da:	f7ff fc79 	bl	80082d0 <LL_RCC_HSE_EnableTcxo>
 80089de:	f7ff fca4 	bl	800832a <LL_RCC_HSE_Enable>
 80089e2:	e003      	b.n	80089ec <HAL_RCC_OscConfig+0x220>
 80089e4:	f7ff fcaf 	bl	8008346 <LL_RCC_HSE_Disable>
 80089e8:	f7ff fc80 	bl	80082ec <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d012      	beq.n	8008a1a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089f4:	f7f9 feb6 	bl	8002764 <HAL_GetTick>
 80089f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80089fa:	e008      	b.n	8008a0e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089fc:	f7f9 feb2 	bl	8002764 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b64      	cmp	r3, #100	; 0x64
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e257      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008a0e:	f7ff fca8 	bl	8008362 <LL_RCC_HSE_IsReady>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d0f1      	beq.n	80089fc <HAL_RCC_OscConfig+0x230>
 8008a18:	e011      	b.n	8008a3e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a1a:	f7f9 fea3 	bl	8002764 <HAL_GetTick>
 8008a1e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008a20:	e008      	b.n	8008a34 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a22:	f7f9 fe9f 	bl	8002764 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b64      	cmp	r3, #100	; 0x64
 8008a2e:	d901      	bls.n	8008a34 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e244      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008a34:	f7ff fc95 	bl	8008362 <LL_RCC_HSE_IsReady>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1f1      	bne.n	8008a22 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d046      	beq.n	8008ad8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d005      	beq.n	8008a5c <HAL_RCC_OscConfig+0x290>
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	2b0c      	cmp	r3, #12
 8008a54:	d10e      	bne.n	8008a74 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d10b      	bne.n	8008a74 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e22a      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7ff fcb6 	bl	80083de <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008a72:	e031      	b.n	8008ad8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d019      	beq.n	8008ab0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a7c:	f7ff fc82 	bl	8008384 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a80:	f7f9 fe70 	bl	8002764 <HAL_GetTick>
 8008a84:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008a86:	e008      	b.n	8008a9a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a88:	f7f9 fe6c 	bl	8002764 <HAL_GetTick>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d901      	bls.n	8008a9a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e211      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008a9a:	f7ff fc8f 	bl	80083bc <LL_RCC_HSI_IsReady>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d0f1      	beq.n	8008a88 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7ff fc98 	bl	80083de <LL_RCC_HSI_SetCalibTrimming>
 8008aae:	e013      	b.n	8008ad8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ab0:	f7ff fc76 	bl	80083a0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab4:	f7f9 fe56 	bl	8002764 <HAL_GetTick>
 8008ab8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008aba:	e008      	b.n	8008ace <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008abc:	f7f9 fe52 	bl	8002764 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d901      	bls.n	8008ace <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e1f7      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008ace:	f7ff fc75 	bl	80083bc <LL_RCC_HSI_IsReady>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1f1      	bne.n	8008abc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0308 	and.w	r3, r3, #8
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d06e      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d056      	beq.n	8008b9a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8008aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008af4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	69da      	ldr	r2, [r3, #28]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f003 0310 	and.w	r3, r3, #16
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d031      	beq.n	8008b68 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f003 0302 	and.w	r3, r3, #2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d006      	beq.n	8008b1c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e1d0      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d013      	beq.n	8008b4e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8008b26:	f7ff fc8f 	bl	8008448 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b2a:	f7f9 fe1b 	bl	8002764 <HAL_GetTick>
 8008b2e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8008b30:	e008      	b.n	8008b44 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b32:	f7f9 fe17 	bl	8002764 <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	2b11      	cmp	r3, #17
 8008b3e:	d901      	bls.n	8008b44 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e1bc      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8008b44:	f7ff fc90 	bl	8008468 <LL_RCC_LSI_IsReady>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1f1      	bne.n	8008b32 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8008b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b56:	f023 0210 	bic.w	r2, r3, #16
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b62:	4313      	orrs	r3, r2
 8008b64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b68:	f7ff fc5e 	bl	8008428 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b6c:	f7f9 fdfa 	bl	8002764 <HAL_GetTick>
 8008b70:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8008b72:	e00c      	b.n	8008b8e <HAL_RCC_OscConfig+0x3c2>
 8008b74:	20000000 	.word	0x20000000
 8008b78:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b7c:	f7f9 fdf2 	bl	8002764 <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	2b11      	cmp	r3, #17
 8008b88:	d901      	bls.n	8008b8e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e197      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8008b8e:	f7ff fc6b 	bl	8008468 <LL_RCC_LSI_IsReady>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d0f1      	beq.n	8008b7c <HAL_RCC_OscConfig+0x3b0>
 8008b98:	e013      	b.n	8008bc2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b9a:	f7ff fc55 	bl	8008448 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b9e:	f7f9 fde1 	bl	8002764 <HAL_GetTick>
 8008ba2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8008ba4:	e008      	b.n	8008bb8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ba6:	f7f9 fddd 	bl	8002764 <HAL_GetTick>
 8008baa:	4602      	mov	r2, r0
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	2b11      	cmp	r3, #17
 8008bb2:	d901      	bls.n	8008bb8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e182      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8008bb8:	f7ff fc56 	bl	8008468 <LL_RCC_LSI_IsReady>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1f1      	bne.n	8008ba6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0304 	and.w	r3, r3, #4
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 80d8 	beq.w	8008d80 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008bd0:	f7ff fb6c 	bl	80082ac <LL_PWR_IsEnabledBkUpAccess>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d113      	bne.n	8008c02 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008bda:	f7ff faab 	bl	8008134 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bde:	f7f9 fdc1 	bl	8002764 <HAL_GetTick>
 8008be2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008be4:	e008      	b.n	8008bf8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008be6:	f7f9 fdbd 	bl	8002764 <HAL_GetTick>
 8008bea:	4602      	mov	r2, r0
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d901      	bls.n	8008bf8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e162      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008bf8:	f7ff fb58 	bl	80082ac <LL_PWR_IsEnabledBkUpAccess>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0f1      	beq.n	8008be6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d07b      	beq.n	8008d02 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	2b85      	cmp	r3, #133	; 0x85
 8008c10:	d003      	beq.n	8008c1a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	2b05      	cmp	r3, #5
 8008c18:	d109      	bne.n	8008c2e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c26:	f043 0304 	orr.w	r3, r3, #4
 8008c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c2e:	f7f9 fd99 	bl	8002764 <HAL_GetTick>
 8008c32:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c40:	f043 0301 	orr.w	r3, r3, #1
 8008c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008c48:	e00a      	b.n	8008c60 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c4a:	f7f9 fd8b 	bl	8002764 <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d901      	bls.n	8008c60 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e12e      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008c60:	f7ff fbd1 	bl	8008406 <LL_RCC_LSE_IsReady>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0ef      	beq.n	8008c4a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	2b81      	cmp	r3, #129	; 0x81
 8008c70:	d003      	beq.n	8008c7a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	2b85      	cmp	r3, #133	; 0x85
 8008c78:	d121      	bne.n	8008cbe <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c7a:	f7f9 fd73 	bl	8002764 <HAL_GetTick>
 8008c7e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008c94:	e00a      	b.n	8008cac <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c96:	f7f9 fd65 	bl	8002764 <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d901      	bls.n	8008cac <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e108      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d0ec      	beq.n	8008c96 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008cbc:	e060      	b.n	8008d80 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cbe:	f7f9 fd51 	bl	8002764 <HAL_GetTick>
 8008cc2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008cd8:	e00a      	b.n	8008cf0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cda:	f7f9 fd43 	bl	8002764 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d901      	bls.n	8008cf0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e0e6      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1ec      	bne.n	8008cda <HAL_RCC_OscConfig+0x50e>
 8008d00:	e03e      	b.n	8008d80 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d02:	f7f9 fd2f 	bl	8002764 <HAL_GetTick>
 8008d06:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008d1c:	e00a      	b.n	8008d34 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d1e:	f7f9 fd21 	bl	8002764 <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d901      	bls.n	8008d34 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e0c4      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1ec      	bne.n	8008d1e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d44:	f7f9 fd0e 	bl	8002764 <HAL_GetTick>
 8008d48:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d56:	f023 0301 	bic.w	r3, r3, #1
 8008d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008d5e:	e00a      	b.n	8008d76 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d60:	f7f9 fd00 	bl	8002764 <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d901      	bls.n	8008d76 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e0a3      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008d76:	f7ff fb46 	bl	8008406 <LL_RCC_LSE_IsReady>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1ef      	bne.n	8008d60 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 8099 	beq.w	8008ebc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	2b0c      	cmp	r3, #12
 8008d8e:	d06c      	beq.n	8008e6a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d14b      	bne.n	8008e30 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d98:	f7ff fc87 	bl	80086aa <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d9c:	f7f9 fce2 	bl	8002764 <HAL_GetTick>
 8008da0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008da2:	e008      	b.n	8008db6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008da4:	f7f9 fcde 	bl	8002764 <HAL_GetTick>
 8008da8:	4602      	mov	r2, r0
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	2b0a      	cmp	r3, #10
 8008db0:	d901      	bls.n	8008db6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e083      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008db6:	f7ff fc86 	bl	80086c6 <LL_RCC_PLL_IsReady>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1f1      	bne.n	8008da4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dc4:	68da      	ldr	r2, [r3, #12]
 8008dc6:	4b40      	ldr	r3, [pc, #256]	; (8008ec8 <HAL_RCC_OscConfig+0x6fc>)
 8008dc8:	4013      	ands	r3, r2
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008dd2:	4311      	orrs	r1, r2
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008dd8:	0212      	lsls	r2, r2, #8
 8008dda:	4311      	orrs	r1, r2
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008de0:	4311      	orrs	r1, r2
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008de6:	4311      	orrs	r1, r2
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008dec:	430a      	orrs	r2, r1
 8008dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008df2:	4313      	orrs	r3, r2
 8008df4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008df6:	f7ff fc4a 	bl	800868e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e08:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e0a:	f7f9 fcab 	bl	8002764 <HAL_GetTick>
 8008e0e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8008e10:	e008      	b.n	8008e24 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e12:	f7f9 fca7 	bl	8002764 <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	2b0a      	cmp	r3, #10
 8008e1e:	d901      	bls.n	8008e24 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e04c      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8008e24:	f7ff fc4f 	bl	80086c6 <LL_RCC_PLL_IsReady>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d0f1      	beq.n	8008e12 <HAL_RCC_OscConfig+0x646>
 8008e2e:	e045      	b.n	8008ebc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e30:	f7ff fc3b 	bl	80086aa <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e34:	f7f9 fc96 	bl	8002764 <HAL_GetTick>
 8008e38:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008e3a:	e008      	b.n	8008e4e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e3c:	f7f9 fc92 	bl	8002764 <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	2b0a      	cmp	r3, #10
 8008e48:	d901      	bls.n	8008e4e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e037      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008e4e:	f7ff fc3a 	bl	80086c6 <LL_RCC_PLL_IsReady>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1f1      	bne.n	8008e3c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e62:	4b1a      	ldr	r3, [pc, #104]	; (8008ecc <HAL_RCC_OscConfig+0x700>)
 8008e64:	4013      	ands	r3, r2
 8008e66:	60cb      	str	r3, [r1, #12]
 8008e68:	e028      	b.n	8008ebc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d101      	bne.n	8008e76 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e023      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	f003 0203 	and.w	r2, r3, #3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d115      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d10e      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea4:	021b      	lsls	r3, r3, #8
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d106      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d001      	beq.n	8008ebc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e000      	b.n	8008ebe <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3720      	adds	r7, #32
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	11c1808c 	.word	0x11c1808c
 8008ecc:	eefefffc 	.word	0xeefefffc

08008ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e10f      	b.n	8009104 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ee4:	4b89      	ldr	r3, [pc, #548]	; (800910c <HAL_RCC_ClockConfig+0x23c>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0307 	and.w	r3, r3, #7
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d91b      	bls.n	8008f2a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ef2:	4b86      	ldr	r3, [pc, #536]	; (800910c <HAL_RCC_ClockConfig+0x23c>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f023 0207 	bic.w	r2, r3, #7
 8008efa:	4984      	ldr	r1, [pc, #528]	; (800910c <HAL_RCC_ClockConfig+0x23c>)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f02:	f7f9 fc2f 	bl	8002764 <HAL_GetTick>
 8008f06:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f08:	e008      	b.n	8008f1c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008f0a:	f7f9 fc2b 	bl	8002764 <HAL_GetTick>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d901      	bls.n	8008f1c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	e0f3      	b.n	8009104 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f1c:	4b7b      	ldr	r3, [pc, #492]	; (800910c <HAL_RCC_ClockConfig+0x23c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0307 	and.w	r3, r3, #7
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d1ef      	bne.n	8008f0a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d016      	beq.n	8008f64 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7ff fb2a 	bl	8008594 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008f40:	f7f9 fc10 	bl	8002764 <HAL_GetTick>
 8008f44:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008f46:	e008      	b.n	8008f5a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008f48:	f7f9 fc0c 	bl	8002764 <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d901      	bls.n	8008f5a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e0d4      	b.n	8009104 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008f5a:	f7ff fbf2 	bl	8008742 <LL_RCC_IsActiveFlag_HPRE>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d0f1      	beq.n	8008f48 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d016      	beq.n	8008f9e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7ff fb20 	bl	80085ba <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008f7a:	f7f9 fbf3 	bl	8002764 <HAL_GetTick>
 8008f7e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008f80:	e008      	b.n	8008f94 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008f82:	f7f9 fbef 	bl	8002764 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d901      	bls.n	8008f94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e0b7      	b.n	8009104 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008f94:	f7ff fbe6 	bl	8008764 <LL_RCC_IsActiveFlag_SHDHPRE>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0f1      	beq.n	8008f82 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0304 	and.w	r3, r3, #4
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d016      	beq.n	8008fd8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff fb19 	bl	80085e6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008fb4:	f7f9 fbd6 	bl	8002764 <HAL_GetTick>
 8008fb8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008fba:	e008      	b.n	8008fce <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008fbc:	f7f9 fbd2 	bl	8002764 <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d901      	bls.n	8008fce <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e09a      	b.n	8009104 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008fce:	f7ff fbdb 	bl	8008788 <LL_RCC_IsActiveFlag_PPRE1>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0f1      	beq.n	8008fbc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0308 	and.w	r3, r3, #8
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d017      	beq.n	8009014 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	00db      	lsls	r3, r3, #3
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7ff fb0e 	bl	800860c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008ff0:	f7f9 fbb8 	bl	8002764 <HAL_GetTick>
 8008ff4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008ff6:	e008      	b.n	800900a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008ff8:	f7f9 fbb4 	bl	8002764 <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b02      	cmp	r3, #2
 8009004:	d901      	bls.n	800900a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e07c      	b.n	8009104 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800900a:	f7ff fbce 	bl	80087aa <LL_RCC_IsActiveFlag_PPRE2>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d0f1      	beq.n	8008ff8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b00      	cmp	r3, #0
 800901e:	d043      	beq.n	80090a8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	2b02      	cmp	r3, #2
 8009026:	d106      	bne.n	8009036 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8009028:	f7ff f99b 	bl	8008362 <LL_RCC_HSE_IsReady>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d11e      	bne.n	8009070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e066      	b.n	8009104 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	2b03      	cmp	r3, #3
 800903c:	d106      	bne.n	800904c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800903e:	f7ff fb42 	bl	80086c6 <LL_RCC_PLL_IsReady>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d113      	bne.n	8009070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e05b      	b.n	8009104 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d106      	bne.n	8009062 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009054:	f7ff fa35 	bl	80084c2 <LL_RCC_MSI_IsReady>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d108      	bne.n	8009070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e050      	b.n	8009104 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009062:	f7ff f9ab 	bl	80083bc <LL_RCC_HSI_IsReady>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e049      	b.n	8009104 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	4618      	mov	r0, r3
 8009076:	f7ff fa6f 	bl	8008558 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800907a:	f7f9 fb73 	bl	8002764 <HAL_GetTick>
 800907e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009080:	e00a      	b.n	8009098 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009082:	f7f9 fb6f 	bl	8002764 <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009090:	4293      	cmp	r3, r2
 8009092:	d901      	bls.n	8009098 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e035      	b.n	8009104 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009098:	f7ff fa71 	bl	800857e <LL_RCC_GetSysClkSource>
 800909c:	4602      	mov	r2, r0
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d1ec      	bne.n	8009082 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090a8:	4b18      	ldr	r3, [pc, #96]	; (800910c <HAL_RCC_ClockConfig+0x23c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0307 	and.w	r3, r3, #7
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d21b      	bcs.n	80090ee <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090b6:	4b15      	ldr	r3, [pc, #84]	; (800910c <HAL_RCC_ClockConfig+0x23c>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f023 0207 	bic.w	r2, r3, #7
 80090be:	4913      	ldr	r1, [pc, #76]	; (800910c <HAL_RCC_ClockConfig+0x23c>)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090c6:	f7f9 fb4d 	bl	8002764 <HAL_GetTick>
 80090ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090cc:	e008      	b.n	80090e0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80090ce:	f7f9 fb49 	bl	8002764 <HAL_GetTick>
 80090d2:	4602      	mov	r2, r0
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d901      	bls.n	80090e0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e011      	b.n	8009104 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090e0:	4b0a      	ldr	r3, [pc, #40]	; (800910c <HAL_RCC_ClockConfig+0x23c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 0307 	and.w	r3, r3, #7
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d1ef      	bne.n	80090ce <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80090ee:	f000 f8b3 	bl	8009258 <HAL_RCC_GetHCLKFreq>
 80090f2:	4603      	mov	r3, r0
 80090f4:	4a06      	ldr	r2, [pc, #24]	; (8009110 <HAL_RCC_ClockConfig+0x240>)
 80090f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80090f8:	4b06      	ldr	r3, [pc, #24]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7f9 fb27 	bl	8002750 <HAL_InitTick>
 8009102:	4603      	mov	r3, r0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	58004000 	.word	0x58004000
 8009110:	20000000 	.word	0x20000000
 8009114:	20000004 	.word	0x20000004

08009118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009118:	b590      	push	{r4, r7, lr}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8009122:	2300      	movs	r3, #0
 8009124:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009126:	f7ff fa2a 	bl	800857e <LL_RCC_GetSysClkSource>
 800912a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800912c:	f7ff fafe 	bl	800872c <LL_RCC_PLL_GetMainSource>
 8009130:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d005      	beq.n	8009144 <HAL_RCC_GetSysClockFreq+0x2c>
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2b0c      	cmp	r3, #12
 800913c:	d139      	bne.n	80091b2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d136      	bne.n	80091b2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009144:	f7ff f9cd 	bl	80084e2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d115      	bne.n	800917a <HAL_RCC_GetSysClockFreq+0x62>
 800914e:	f7ff f9c8 	bl	80084e2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009152:	4603      	mov	r3, r0
 8009154:	2b01      	cmp	r3, #1
 8009156:	d106      	bne.n	8009166 <HAL_RCC_GetSysClockFreq+0x4e>
 8009158:	f7ff f9d3 	bl	8008502 <LL_RCC_MSI_GetRange>
 800915c:	4603      	mov	r3, r0
 800915e:	0a1b      	lsrs	r3, r3, #8
 8009160:	f003 030f 	and.w	r3, r3, #15
 8009164:	e005      	b.n	8009172 <HAL_RCC_GetSysClockFreq+0x5a>
 8009166:	f7ff f9d7 	bl	8008518 <LL_RCC_MSI_GetRangeAfterStandby>
 800916a:	4603      	mov	r3, r0
 800916c:	0a1b      	lsrs	r3, r3, #8
 800916e:	f003 030f 	and.w	r3, r3, #15
 8009172:	4a36      	ldr	r2, [pc, #216]	; (800924c <HAL_RCC_GetSysClockFreq+0x134>)
 8009174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009178:	e014      	b.n	80091a4 <HAL_RCC_GetSysClockFreq+0x8c>
 800917a:	f7ff f9b2 	bl	80084e2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800917e:	4603      	mov	r3, r0
 8009180:	2b01      	cmp	r3, #1
 8009182:	d106      	bne.n	8009192 <HAL_RCC_GetSysClockFreq+0x7a>
 8009184:	f7ff f9bd 	bl	8008502 <LL_RCC_MSI_GetRange>
 8009188:	4603      	mov	r3, r0
 800918a:	091b      	lsrs	r3, r3, #4
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	e005      	b.n	800919e <HAL_RCC_GetSysClockFreq+0x86>
 8009192:	f7ff f9c1 	bl	8008518 <LL_RCC_MSI_GetRangeAfterStandby>
 8009196:	4603      	mov	r3, r0
 8009198:	091b      	lsrs	r3, r3, #4
 800919a:	f003 030f 	and.w	r3, r3, #15
 800919e:	4a2b      	ldr	r2, [pc, #172]	; (800924c <HAL_RCC_GetSysClockFreq+0x134>)
 80091a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091a4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d115      	bne.n	80091d8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80091b0:	e012      	b.n	80091d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2b04      	cmp	r3, #4
 80091b6:	d102      	bne.n	80091be <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80091b8:	4b25      	ldr	r3, [pc, #148]	; (8009250 <HAL_RCC_GetSysClockFreq+0x138>)
 80091ba:	617b      	str	r3, [r7, #20]
 80091bc:	e00c      	b.n	80091d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2b08      	cmp	r3, #8
 80091c2:	d109      	bne.n	80091d8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80091c4:	f7ff f8a0 	bl	8008308 <LL_RCC_HSE_IsEnabledDiv2>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d102      	bne.n	80091d4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80091ce:	4b20      	ldr	r3, [pc, #128]	; (8009250 <HAL_RCC_GetSysClockFreq+0x138>)
 80091d0:	617b      	str	r3, [r7, #20]
 80091d2:	e001      	b.n	80091d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80091d4:	4b1f      	ldr	r3, [pc, #124]	; (8009254 <HAL_RCC_GetSysClockFreq+0x13c>)
 80091d6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091d8:	f7ff f9d1 	bl	800857e <LL_RCC_GetSysClkSource>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b0c      	cmp	r3, #12
 80091e0:	d12f      	bne.n	8009242 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80091e2:	f7ff faa3 	bl	800872c <LL_RCC_PLL_GetMainSource>
 80091e6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d003      	beq.n	80091f6 <HAL_RCC_GetSysClockFreq+0xde>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b03      	cmp	r3, #3
 80091f2:	d003      	beq.n	80091fc <HAL_RCC_GetSysClockFreq+0xe4>
 80091f4:	e00d      	b.n	8009212 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80091f6:	4b16      	ldr	r3, [pc, #88]	; (8009250 <HAL_RCC_GetSysClockFreq+0x138>)
 80091f8:	60fb      	str	r3, [r7, #12]
        break;
 80091fa:	e00d      	b.n	8009218 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80091fc:	f7ff f884 	bl	8008308 <LL_RCC_HSE_IsEnabledDiv2>
 8009200:	4603      	mov	r3, r0
 8009202:	2b01      	cmp	r3, #1
 8009204:	d102      	bne.n	800920c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8009206:	4b12      	ldr	r3, [pc, #72]	; (8009250 <HAL_RCC_GetSysClockFreq+0x138>)
 8009208:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800920a:	e005      	b.n	8009218 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800920c:	4b11      	ldr	r3, [pc, #68]	; (8009254 <HAL_RCC_GetSysClockFreq+0x13c>)
 800920e:	60fb      	str	r3, [r7, #12]
        break;
 8009210:	e002      	b.n	8009218 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	60fb      	str	r3, [r7, #12]
        break;
 8009216:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009218:	f7ff fa66 	bl	80086e8 <LL_RCC_PLL_GetN>
 800921c:	4602      	mov	r2, r0
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	fb03 f402 	mul.w	r4, r3, r2
 8009224:	f7ff fa77 	bl	8008716 <LL_RCC_PLL_GetDivider>
 8009228:	4603      	mov	r3, r0
 800922a:	091b      	lsrs	r3, r3, #4
 800922c:	3301      	adds	r3, #1
 800922e:	fbb4 f4f3 	udiv	r4, r4, r3
 8009232:	f7ff fa65 	bl	8008700 <LL_RCC_PLL_GetR>
 8009236:	4603      	mov	r3, r0
 8009238:	0f5b      	lsrs	r3, r3, #29
 800923a:	3301      	adds	r3, #1
 800923c:	fbb4 f3f3 	udiv	r3, r4, r3
 8009240:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8009242:	697b      	ldr	r3, [r7, #20]
}
 8009244:	4618      	mov	r0, r3
 8009246:	371c      	adds	r7, #28
 8009248:	46bd      	mov	sp, r7
 800924a:	bd90      	pop	{r4, r7, pc}
 800924c:	0801ff58 	.word	0x0801ff58
 8009250:	00f42400 	.word	0x00f42400
 8009254:	01e84800 	.word	0x01e84800

08009258 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009258:	b598      	push	{r3, r4, r7, lr}
 800925a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800925c:	f7ff ff5c 	bl	8009118 <HAL_RCC_GetSysClockFreq>
 8009260:	4604      	mov	r4, r0
 8009262:	f7ff f9e6 	bl	8008632 <LL_RCC_GetAHBPrescaler>
 8009266:	4603      	mov	r3, r0
 8009268:	091b      	lsrs	r3, r3, #4
 800926a:	f003 030f 	and.w	r3, r3, #15
 800926e:	4a03      	ldr	r2, [pc, #12]	; (800927c <HAL_RCC_GetHCLKFreq+0x24>)
 8009270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009274:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009278:	4618      	mov	r0, r3
 800927a:	bd98      	pop	{r3, r4, r7, pc}
 800927c:	0801fef8 	.word	0x0801fef8

08009280 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009280:	b598      	push	{r3, r4, r7, lr}
 8009282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009284:	f7ff ffe8 	bl	8009258 <HAL_RCC_GetHCLKFreq>
 8009288:	4604      	mov	r4, r0
 800928a:	f7ff f9ea 	bl	8008662 <LL_RCC_GetAPB1Prescaler>
 800928e:	4603      	mov	r3, r0
 8009290:	0a1b      	lsrs	r3, r3, #8
 8009292:	4a03      	ldr	r2, [pc, #12]	; (80092a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009298:	fa24 f303 	lsr.w	r3, r4, r3
}
 800929c:	4618      	mov	r0, r3
 800929e:	bd98      	pop	{r3, r4, r7, pc}
 80092a0:	0801ff38 	.word	0x0801ff38

080092a4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092a4:	b598      	push	{r3, r4, r7, lr}
 80092a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80092a8:	f7ff ffd6 	bl	8009258 <HAL_RCC_GetHCLKFreq>
 80092ac:	4604      	mov	r4, r0
 80092ae:	f7ff f9e3 	bl	8008678 <LL_RCC_GetAPB2Prescaler>
 80092b2:	4603      	mov	r3, r0
 80092b4:	0adb      	lsrs	r3, r3, #11
 80092b6:	4a03      	ldr	r2, [pc, #12]	; (80092c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80092b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	bd98      	pop	{r3, r4, r7, pc}
 80092c4:	0801ff38 	.word	0x0801ff38

080092c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80092c8:	b590      	push	{r4, r7, lr}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	091b      	lsrs	r3, r3, #4
 80092d4:	f003 030f 	and.w	r3, r3, #15
 80092d8:	4a10      	ldr	r2, [pc, #64]	; (800931c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80092da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092de:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80092e0:	f7ff f9b2 	bl	8008648 <LL_RCC_GetAHB3Prescaler>
 80092e4:	4603      	mov	r3, r0
 80092e6:	091b      	lsrs	r3, r3, #4
 80092e8:	f003 030f 	and.w	r3, r3, #15
 80092ec:	4a0c      	ldr	r2, [pc, #48]	; (8009320 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80092ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	4a09      	ldr	r2, [pc, #36]	; (8009324 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80092fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009302:	0c9c      	lsrs	r4, r3, #18
 8009304:	f7fe ff58 	bl	80081b8 <HAL_PWREx_GetVoltageRange>
 8009308:	4603      	mov	r3, r0
 800930a:	4619      	mov	r1, r3
 800930c:	4620      	mov	r0, r4
 800930e:	f000 f80b 	bl	8009328 <RCC_SetFlashLatency>
 8009312:	4603      	mov	r3, r0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	bd90      	pop	{r4, r7, pc}
 800931c:	0801ff58 	.word	0x0801ff58
 8009320:	0801fef8 	.word	0x0801fef8
 8009324:	431bde83 	.word	0x431bde83

08009328 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08e      	sub	sp, #56	; 0x38
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8009332:	4a3a      	ldr	r2, [pc, #232]	; (800941c <RCC_SetFlashLatency+0xf4>)
 8009334:	f107 0320 	add.w	r3, r7, #32
 8009338:	e892 0003 	ldmia.w	r2, {r0, r1}
 800933c:	6018      	str	r0, [r3, #0]
 800933e:	3304      	adds	r3, #4
 8009340:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8009342:	4a37      	ldr	r2, [pc, #220]	; (8009420 <RCC_SetFlashLatency+0xf8>)
 8009344:	f107 0318 	add.w	r3, r7, #24
 8009348:	e892 0003 	ldmia.w	r2, {r0, r1}
 800934c:	6018      	str	r0, [r3, #0]
 800934e:	3304      	adds	r3, #4
 8009350:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8009352:	4a34      	ldr	r2, [pc, #208]	; (8009424 <RCC_SetFlashLatency+0xfc>)
 8009354:	f107 030c 	add.w	r3, r7, #12
 8009358:	ca07      	ldmia	r2, {r0, r1, r2}
 800935a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800935e:	2300      	movs	r3, #0
 8009360:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009368:	d11b      	bne.n	80093a2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800936a:	2300      	movs	r3, #0
 800936c:	633b      	str	r3, [r7, #48]	; 0x30
 800936e:	e014      	b.n	800939a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009372:	005b      	lsls	r3, r3, #1
 8009374:	3338      	adds	r3, #56	; 0x38
 8009376:	443b      	add	r3, r7
 8009378:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800937c:	461a      	mov	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4293      	cmp	r3, r2
 8009382:	d807      	bhi.n	8009394 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	3338      	adds	r3, #56	; 0x38
 800938a:	443b      	add	r3, r7
 800938c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009390:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009392:	e021      	b.n	80093d8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009396:	3301      	adds	r3, #1
 8009398:	633b      	str	r3, [r7, #48]	; 0x30
 800939a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939c:	2b02      	cmp	r3, #2
 800939e:	d9e7      	bls.n	8009370 <RCC_SetFlashLatency+0x48>
 80093a0:	e01a      	b.n	80093d8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80093a2:	2300      	movs	r3, #0
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093a6:	e014      	b.n	80093d2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80093a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093aa:	005b      	lsls	r3, r3, #1
 80093ac:	3338      	adds	r3, #56	; 0x38
 80093ae:	443b      	add	r3, r7
 80093b0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80093b4:	461a      	mov	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d807      	bhi.n	80093cc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80093bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	3338      	adds	r3, #56	; 0x38
 80093c2:	443b      	add	r3, r7
 80093c4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80093c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80093ca:	e005      	b.n	80093d8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80093cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ce:	3301      	adds	r3, #1
 80093d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d9e7      	bls.n	80093a8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80093d8:	4b13      	ldr	r3, [pc, #76]	; (8009428 <RCC_SetFlashLatency+0x100>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f023 0207 	bic.w	r2, r3, #7
 80093e0:	4911      	ldr	r1, [pc, #68]	; (8009428 <RCC_SetFlashLatency+0x100>)
 80093e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e4:	4313      	orrs	r3, r2
 80093e6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80093e8:	f7f9 f9bc 	bl	8002764 <HAL_GetTick>
 80093ec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80093ee:	e008      	b.n	8009402 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80093f0:	f7f9 f9b8 	bl	8002764 <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d901      	bls.n	8009402 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e007      	b.n	8009412 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009402:	4b09      	ldr	r3, [pc, #36]	; (8009428 <RCC_SetFlashLatency+0x100>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800940c:	429a      	cmp	r2, r3
 800940e:	d1ef      	bne.n	80093f0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3738      	adds	r7, #56	; 0x38
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	0801f634 	.word	0x0801f634
 8009420:	0801f63c 	.word	0x0801f63c
 8009424:	0801f644 	.word	0x0801f644
 8009428:	58004000 	.word	0x58004000

0800942c <LL_RCC_LSE_IsReady>:
{
 800942c:	b480      	push	{r7}
 800942e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009438:	f003 0302 	and.w	r3, r3, #2
 800943c:	2b02      	cmp	r3, #2
 800943e:	d101      	bne.n	8009444 <LL_RCC_LSE_IsReady+0x18>
 8009440:	2301      	movs	r3, #1
 8009442:	e000      	b.n	8009446 <LL_RCC_LSE_IsReady+0x1a>
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	46bd      	mov	sp, r7
 800944a:	bc80      	pop	{r7}
 800944c:	4770      	bx	lr

0800944e <LL_RCC_SetUSARTClockSource>:
{
 800944e:	b480      	push	{r7}
 8009450:	b083      	sub	sp, #12
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8009456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800945a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	0c1b      	lsrs	r3, r3, #16
 8009462:	43db      	mvns	r3, r3
 8009464:	401a      	ands	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	b29b      	uxth	r3, r3
 800946a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800946e:	4313      	orrs	r3, r2
 8009470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	bc80      	pop	{r7}
 800947c:	4770      	bx	lr

0800947e <LL_RCC_SetI2SClockSource>:
{
 800947e:	b480      	push	{r7}
 8009480:	b083      	sub	sp, #12
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8009486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800948a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800948e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4313      	orrs	r3, r2
 800949a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800949e:	bf00      	nop
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bc80      	pop	{r7}
 80094a6:	4770      	bx	lr

080094a8 <LL_RCC_SetLPUARTClockSource>:
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80094b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80094bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bc80      	pop	{r7}
 80094d0:	4770      	bx	lr

080094d2 <LL_RCC_SetI2CClockSource>:
{
 80094d2:	b480      	push	{r7}
 80094d4:	b083      	sub	sp, #12
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80094da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	091b      	lsrs	r3, r3, #4
 80094e6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80094ea:	43db      	mvns	r3, r3
 80094ec:	401a      	ands	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	011b      	lsls	r3, r3, #4
 80094f2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80094f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094fa:	4313      	orrs	r3, r2
 80094fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	bc80      	pop	{r7}
 8009508:	4770      	bx	lr

0800950a <LL_RCC_SetLPTIMClockSource>:
{
 800950a:	b480      	push	{r7}
 800950c:	b083      	sub	sp, #12
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8009512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009516:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	0c1b      	lsrs	r3, r3, #16
 800951e:	041b      	lsls	r3, r3, #16
 8009520:	43db      	mvns	r3, r3
 8009522:	401a      	ands	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	041b      	lsls	r3, r3, #16
 8009528:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800952c:	4313      	orrs	r3, r2
 800952e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009532:	bf00      	nop
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	bc80      	pop	{r7}
 800953a:	4770      	bx	lr

0800953c <LL_RCC_SetRNGClockSource>:
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8009544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800954c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009550:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4313      	orrs	r3, r2
 8009558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	bc80      	pop	{r7}
 8009564:	4770      	bx	lr

08009566 <LL_RCC_SetADCClockSource>:
{
 8009566:	b480      	push	{r7}
 8009568:	b083      	sub	sp, #12
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800956e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009576:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800957a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4313      	orrs	r3, r2
 8009582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	bc80      	pop	{r7}
 800958e:	4770      	bx	lr

08009590 <LL_RCC_SetRTCClockSource>:
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800959c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bc80      	pop	{r7}
 80095b8:	4770      	bx	lr

080095ba <LL_RCC_GetRTCClockSource>:
{
 80095ba:	b480      	push	{r7}
 80095bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80095be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bc80      	pop	{r7}
 80095d0:	4770      	bx	lr

080095d2 <LL_RCC_ForceBackupDomainReset>:
{
 80095d2:	b480      	push	{r7}
 80095d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80095d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80095ea:	bf00      	nop
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bc80      	pop	{r7}
 80095f0:	4770      	bx	lr

080095f2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80095f2:	b480      	push	{r7}
 80095f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80095f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800960a:	bf00      	nop
 800960c:	46bd      	mov	sp, r7
 800960e:	bc80      	pop	{r7}
 8009610:	4770      	bx	lr
	...

08009614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8009620:	2300      	movs	r3, #0
 8009622:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009624:	2300      	movs	r3, #0
 8009626:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d058      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8009634:	f7fe fd7e 	bl	8008134 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009638:	f7f9 f894 	bl	8002764 <HAL_GetTick>
 800963c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800963e:	e009      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009640:	f7f9 f890 	bl	8002764 <HAL_GetTick>
 8009644:	4602      	mov	r2, r0
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	2b02      	cmp	r3, #2
 800964c:	d902      	bls.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	74fb      	strb	r3, [r7, #19]
        break;
 8009652:	e006      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8009654:	4b7b      	ldr	r3, [pc, #492]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800965c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009660:	d1ee      	bne.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8009662:	7cfb      	ldrb	r3, [r7, #19]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d13c      	bne.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8009668:	f7ff ffa7 	bl	80095ba <LL_RCC_GetRTCClockSource>
 800966c:	4602      	mov	r2, r0
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009672:	429a      	cmp	r2, r3
 8009674:	d00f      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800967a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800967e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009682:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009684:	f7ff ffa5 	bl	80095d2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009688:	f7ff ffb3 	bl	80095f2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800968c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f003 0302 	and.w	r3, r3, #2
 800969c:	2b00      	cmp	r3, #0
 800969e:	d014      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096a0:	f7f9 f860 	bl	8002764 <HAL_GetTick>
 80096a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80096a6:	e00b      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096a8:	f7f9 f85c 	bl	8002764 <HAL_GetTick>
 80096ac:	4602      	mov	r2, r0
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d902      	bls.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80096ba:	2303      	movs	r3, #3
 80096bc:	74fb      	strb	r3, [r7, #19]
            break;
 80096be:	e004      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80096c0:	f7ff feb4 	bl	800942c <LL_RCC_LSE_IsReady>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d1ee      	bne.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80096ca:	7cfb      	ldrb	r3, [r7, #19]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d105      	bne.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7ff ff5b 	bl	8009590 <LL_RCC_SetRTCClockSource>
 80096da:	e004      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80096dc:	7cfb      	ldrb	r3, [r7, #19]
 80096de:	74bb      	strb	r3, [r7, #18]
 80096e0:	e001      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096e2:	7cfb      	ldrb	r3, [r7, #19]
 80096e4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d004      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7ff fea9 	bl	800944e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 0302 	and.w	r3, r3, #2
 8009704:	2b00      	cmp	r3, #0
 8009706:	d004      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	4618      	mov	r0, r3
 800970e:	f7ff fe9e 	bl	800944e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0320 	and.w	r3, r3, #32
 800971a:	2b00      	cmp	r3, #0
 800971c:	d004      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff fec0 	bl	80094a8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009730:	2b00      	cmp	r3, #0
 8009732:	d004      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a1b      	ldr	r3, [r3, #32]
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff fee6 	bl	800950a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009746:	2b00      	cmp	r3, #0
 8009748:	d004      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	4618      	mov	r0, r3
 8009750:	f7ff fedb 	bl	800950a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800975c:	2b00      	cmp	r3, #0
 800975e:	d004      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009764:	4618      	mov	r0, r3
 8009766:	f7ff fed0 	bl	800950a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009772:	2b00      	cmp	r3, #0
 8009774:	d004      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff fea9 	bl	80094d2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009788:	2b00      	cmp	r3, #0
 800978a:	d004      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	4618      	mov	r0, r3
 8009792:	f7ff fe9e 	bl	80094d2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d004      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	69db      	ldr	r3, [r3, #28]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7ff fe93 	bl	80094d2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0310 	and.w	r3, r3, #16
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d011      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	4618      	mov	r0, r3
 80097be:	f7ff fe5e 	bl	800947e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ca:	d107      	bne.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80097cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80097d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d010      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7ff fea5 	bl	800953c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d107      	bne.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80097fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009804:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009808:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009812:	2b00      	cmp	r3, #0
 8009814:	d011      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981a:	4618      	mov	r0, r3
 800981c:	f7ff fea3 	bl	8009566 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009828:	d107      	bne.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800982a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009838:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800983a:	7cbb      	ldrb	r3, [r7, #18]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	58000400 	.word	0x58000400

08009848 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d071      	beq.n	800993e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	d106      	bne.n	8009874 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7f8 fbf0 	bl	8002054 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2202      	movs	r2, #2
 8009878:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800987c:	4b32      	ldr	r3, [pc, #200]	; (8009948 <HAL_RTC_Init+0x100>)
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	f003 0310 	and.w	r3, r3, #16
 8009884:	2b10      	cmp	r3, #16
 8009886:	d051      	beq.n	800992c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009888:	4b2f      	ldr	r3, [pc, #188]	; (8009948 <HAL_RTC_Init+0x100>)
 800988a:	22ca      	movs	r2, #202	; 0xca
 800988c:	625a      	str	r2, [r3, #36]	; 0x24
 800988e:	4b2e      	ldr	r3, [pc, #184]	; (8009948 <HAL_RTC_Init+0x100>)
 8009890:	2253      	movs	r2, #83	; 0x53
 8009892:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fa11 	bl	8009cbc <RTC_EnterInitMode>
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d13f      	bne.n	8009924 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80098a4:	4b28      	ldr	r3, [pc, #160]	; (8009948 <HAL_RTC_Init+0x100>)
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	4a27      	ldr	r2, [pc, #156]	; (8009948 <HAL_RTC_Init+0x100>)
 80098aa:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80098ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098b2:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80098b4:	4b24      	ldr	r3, [pc, #144]	; (8009948 <HAL_RTC_Init+0x100>)
 80098b6:	699a      	ldr	r2, [r3, #24]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6859      	ldr	r1, [r3, #4]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	4319      	orrs	r1, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	430b      	orrs	r3, r1
 80098c8:	491f      	ldr	r1, [pc, #124]	; (8009948 <HAL_RTC_Init+0x100>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68da      	ldr	r2, [r3, #12]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	041b      	lsls	r3, r3, #16
 80098d8:	491b      	ldr	r1, [pc, #108]	; (8009948 <HAL_RTC_Init+0x100>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80098de:	4b1a      	ldr	r3, [pc, #104]	; (8009948 <HAL_RTC_Init+0x100>)
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ee:	430b      	orrs	r3, r1
 80098f0:	4915      	ldr	r1, [pc, #84]	; (8009948 <HAL_RTC_Init+0x100>)
 80098f2:	4313      	orrs	r3, r2
 80098f4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fa14 	bl	8009d24 <RTC_ExitInitMode>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8009900:	7bfb      	ldrb	r3, [r7, #15]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10e      	bne.n	8009924 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8009906:	4b10      	ldr	r3, [pc, #64]	; (8009948 <HAL_RTC_Init+0x100>)
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a19      	ldr	r1, [r3, #32]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	4319      	orrs	r1, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	695b      	ldr	r3, [r3, #20]
 800991c:	430b      	orrs	r3, r1
 800991e:	490a      	ldr	r1, [pc, #40]	; (8009948 <HAL_RTC_Init+0x100>)
 8009920:	4313      	orrs	r3, r2
 8009922:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009924:	4b08      	ldr	r3, [pc, #32]	; (8009948 <HAL_RTC_Init+0x100>)
 8009926:	22ff      	movs	r2, #255	; 0xff
 8009928:	625a      	str	r2, [r3, #36]	; 0x24
 800992a:	e001      	b.n	8009930 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009930:	7bfb      	ldrb	r3, [r7, #15]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d103      	bne.n	800993e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800993e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	40002800 	.word	0x40002800

0800994c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800994c:	b590      	push	{r4, r7, lr}
 800994e:	b087      	sub	sp, #28
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009958:	2300      	movs	r3, #0
 800995a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009962:	2b01      	cmp	r3, #1
 8009964:	d101      	bne.n	800996a <HAL_RTC_SetAlarm_IT+0x1e>
 8009966:	2302      	movs	r3, #2
 8009968:	e0f3      	b.n	8009b52 <HAL_RTC_SetAlarm_IT+0x206>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2202      	movs	r2, #2
 8009976:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800997a:	4b78      	ldr	r3, [pc, #480]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009982:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800998a:	d06a      	beq.n	8009a62 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d13a      	bne.n	8009a08 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009992:	4b72      	ldr	r3, [pc, #456]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999a:	2b00      	cmp	r3, #0
 800999c:	d102      	bne.n	80099a4 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2200      	movs	r2, #0
 80099a2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f000 f9f5 	bl	8009da0 <RTC_ByteToBcd2>
 80099b6:	4603      	mov	r3, r0
 80099b8:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	785b      	ldrb	r3, [r3, #1]
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 f9ee 	bl	8009da0 <RTC_ByteToBcd2>
 80099c4:	4603      	mov	r3, r0
 80099c6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80099c8:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	789b      	ldrb	r3, [r3, #2]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 f9e6 	bl	8009da0 <RTC_ByteToBcd2>
 80099d4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80099d6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	78db      	ldrb	r3, [r3, #3]
 80099de:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80099e0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 f9d8 	bl	8009da0 <RTC_ByteToBcd2>
 80099f0:	4603      	mov	r3, r0
 80099f2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80099f4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80099fc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009a02:	4313      	orrs	r3, r2
 8009a04:	617b      	str	r3, [r7, #20]
 8009a06:	e02c      	b.n	8009a62 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	695b      	ldr	r3, [r3, #20]
 8009a0c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8009a10:	d00d      	beq.n	8009a2e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a1a:	d008      	beq.n	8009a2e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009a1c:	4b4f      	ldr	r3, [pc, #316]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d102      	bne.n	8009a2e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	785b      	ldrb	r3, [r3, #1]
 8009a38:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009a3a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009a40:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	78db      	ldrb	r3, [r3, #3]
 8009a46:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009a48:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a50:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009a52:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009a58:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a62:	4b3e      	ldr	r3, [pc, #248]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009a64:	22ca      	movs	r2, #202	; 0xca
 8009a66:	625a      	str	r2, [r3, #36]	; 0x24
 8009a68:	4b3c      	ldr	r3, [pc, #240]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009a6a:	2253      	movs	r2, #83	; 0x53
 8009a6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a76:	d12c      	bne.n	8009ad2 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009a78:	4b38      	ldr	r3, [pc, #224]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	4a37      	ldr	r2, [pc, #220]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009a7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009a82:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009a84:	4b35      	ldr	r3, [pc, #212]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009a86:	2201      	movs	r2, #1
 8009a88:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a90:	d107      	bne.n	8009aa2 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	699a      	ldr	r2, [r3, #24]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	69db      	ldr	r3, [r3, #28]
 8009a9a:	4930      	ldr	r1, [pc, #192]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	644b      	str	r3, [r1, #68]	; 0x44
 8009aa0:	e006      	b.n	8009ab0 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8009aa2:	4a2e      	ldr	r2, [pc, #184]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8009aa8:	4a2c      	ldr	r2, [pc, #176]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8009ab0:	4a2a      	ldr	r2, [pc, #168]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009abc:	f043 0201 	orr.w	r2, r3, #1
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009ac4:	4b25      	ldr	r3, [pc, #148]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	4a24      	ldr	r2, [pc, #144]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009aca:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8009ace:	6193      	str	r3, [r2, #24]
 8009ad0:	e02b      	b.n	8009b2a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009ad2:	4b22      	ldr	r3, [pc, #136]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	4a21      	ldr	r2, [pc, #132]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009ad8:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009adc:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009ade:	4b1f      	ldr	r3, [pc, #124]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aea:	d107      	bne.n	8009afc <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	699a      	ldr	r2, [r3, #24]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	69db      	ldr	r3, [r3, #28]
 8009af4:	4919      	ldr	r1, [pc, #100]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009af6:	4313      	orrs	r3, r2
 8009af8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009afa:	e006      	b.n	8009b0a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8009afc:	4a17      	ldr	r2, [pc, #92]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8009b02:	4a16      	ldr	r2, [pc, #88]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8009b0a:	4a14      	ldr	r2, [pc, #80]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b16:	f043 0202 	orr.w	r2, r3, #2
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009b1e:	4b0f      	ldr	r3, [pc, #60]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	4a0e      	ldr	r2, [pc, #56]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009b24:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8009b28:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009b2a:	4b0d      	ldr	r3, [pc, #52]	; (8009b60 <HAL_RTC_SetAlarm_IT+0x214>)
 8009b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b30:	4a0b      	ldr	r2, [pc, #44]	; (8009b60 <HAL_RTC_SetAlarm_IT+0x214>)
 8009b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b36:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b3a:	4b08      	ldr	r3, [pc, #32]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x210>)
 8009b3c:	22ff      	movs	r2, #255	; 0xff
 8009b3e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	371c      	adds	r7, #28
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd90      	pop	{r4, r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	40002800 	.word	0x40002800
 8009b60:	58000800 	.word	0x58000800

08009b64 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d101      	bne.n	8009b7c <HAL_RTC_DeactivateAlarm+0x18>
 8009b78:	2302      	movs	r3, #2
 8009b7a:	e048      	b.n	8009c0e <HAL_RTC_DeactivateAlarm+0xaa>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2202      	movs	r2, #2
 8009b88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b8c:	4b22      	ldr	r3, [pc, #136]	; (8009c18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009b8e:	22ca      	movs	r2, #202	; 0xca
 8009b90:	625a      	str	r2, [r3, #36]	; 0x24
 8009b92:	4b21      	ldr	r3, [pc, #132]	; (8009c18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009b94:	2253      	movs	r2, #83	; 0x53
 8009b96:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b9e:	d115      	bne.n	8009bcc <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009ba0:	4b1d      	ldr	r3, [pc, #116]	; (8009c18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	4a1c      	ldr	r2, [pc, #112]	; (8009c18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009ba6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009baa:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8009bac:	4b1a      	ldr	r3, [pc, #104]	; (8009c18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bb0:	4a19      	ldr	r2, [pc, #100]	; (8009c18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bb6:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bbc:	f023 0201 	bic.w	r2, r3, #1
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009bc4:	4b14      	ldr	r3, [pc, #80]	; (8009c18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8009bca:	e014      	b.n	8009bf6 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009bcc:	4b12      	ldr	r3, [pc, #72]	; (8009c18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	4a11      	ldr	r2, [pc, #68]	; (8009c18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bd2:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009bd6:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8009bd8:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bdc:	4a0e      	ldr	r2, [pc, #56]	; (8009c18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009be2:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be8:	f023 0202 	bic.w	r2, r3, #2
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009bf0:	4b09      	ldr	r3, [pc, #36]	; (8009c18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bf6:	4b08      	ldr	r3, [pc, #32]	; (8009c18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bf8:	22ff      	movs	r2, #255	; 0xff
 8009bfa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bc80      	pop	{r7}
 8009c16:	4770      	bx	lr
 8009c18:	40002800 	.word	0x40002800

08009c1c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8009c24:	4b11      	ldr	r3, [pc, #68]	; (8009c6c <HAL_RTC_AlarmIRQHandler+0x50>)
 8009c26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d005      	beq.n	8009c46 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009c3a:	4b0c      	ldr	r3, [pc, #48]	; (8009c6c <HAL_RTC_AlarmIRQHandler+0x50>)
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7f8 ff68 	bl	8002b16 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f003 0302 	and.w	r3, r3, #2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d005      	beq.n	8009c5c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009c50:	4b06      	ldr	r3, [pc, #24]	; (8009c6c <HAL_RTC_AlarmIRQHandler+0x50>)
 8009c52:	2202      	movs	r2, #2
 8009c54:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f94a 	bl	8009ef0 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009c64:	bf00      	nop
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	40002800 	.word	0x40002800

08009c70 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009c78:	4b0f      	ldr	r3, [pc, #60]	; (8009cb8 <HAL_RTC_WaitForSynchro+0x48>)
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	4a0e      	ldr	r2, [pc, #56]	; (8009cb8 <HAL_RTC_WaitForSynchro+0x48>)
 8009c7e:	f023 0320 	bic.w	r3, r3, #32
 8009c82:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009c84:	f7f8 fd6e 	bl	8002764 <HAL_GetTick>
 8009c88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009c8a:	e009      	b.n	8009ca0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c8c:	f7f8 fd6a 	bl	8002764 <HAL_GetTick>
 8009c90:	4602      	mov	r2, r0
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c9a:	d901      	bls.n	8009ca0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e006      	b.n	8009cae <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009ca0:	4b05      	ldr	r3, [pc, #20]	; (8009cb8 <HAL_RTC_WaitForSynchro+0x48>)
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	f003 0320 	and.w	r3, r3, #32
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d0ef      	beq.n	8009c8c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	40002800 	.word	0x40002800

08009cbc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009cc8:	4b15      	ldr	r3, [pc, #84]	; (8009d20 <RTC_EnterInitMode+0x64>)
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d120      	bne.n	8009d16 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009cd4:	4b12      	ldr	r3, [pc, #72]	; (8009d20 <RTC_EnterInitMode+0x64>)
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	4a11      	ldr	r2, [pc, #68]	; (8009d20 <RTC_EnterInitMode+0x64>)
 8009cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cde:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009ce0:	f7f8 fd40 	bl	8002764 <HAL_GetTick>
 8009ce4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009ce6:	e00d      	b.n	8009d04 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009ce8:	f7f8 fd3c 	bl	8002764 <HAL_GetTick>
 8009cec:	4602      	mov	r2, r0
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cf6:	d905      	bls.n	8009d04 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2203      	movs	r2, #3
 8009d00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009d04:	4b06      	ldr	r3, [pc, #24]	; (8009d20 <RTC_EnterInitMode+0x64>)
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d102      	bne.n	8009d16 <RTC_EnterInitMode+0x5a>
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
 8009d12:	2b03      	cmp	r3, #3
 8009d14:	d1e8      	bne.n	8009ce8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	40002800 	.word	0x40002800

08009d24 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009d30:	4b1a      	ldr	r3, [pc, #104]	; (8009d9c <RTC_ExitInitMode+0x78>)
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	4a19      	ldr	r2, [pc, #100]	; (8009d9c <RTC_ExitInitMode+0x78>)
 8009d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d3a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009d3c:	4b17      	ldr	r3, [pc, #92]	; (8009d9c <RTC_ExitInitMode+0x78>)
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	f003 0320 	and.w	r3, r3, #32
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10c      	bne.n	8009d62 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7ff ff91 	bl	8009c70 <HAL_RTC_WaitForSynchro>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d01e      	beq.n	8009d92 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2203      	movs	r2, #3
 8009d58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	73fb      	strb	r3, [r7, #15]
 8009d60:	e017      	b.n	8009d92 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009d62:	4b0e      	ldr	r3, [pc, #56]	; (8009d9c <RTC_ExitInitMode+0x78>)
 8009d64:	699b      	ldr	r3, [r3, #24]
 8009d66:	4a0d      	ldr	r2, [pc, #52]	; (8009d9c <RTC_ExitInitMode+0x78>)
 8009d68:	f023 0320 	bic.w	r3, r3, #32
 8009d6c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff ff7e 	bl	8009c70 <HAL_RTC_WaitForSynchro>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d005      	beq.n	8009d86 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2203      	movs	r2, #3
 8009d7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009d82:	2303      	movs	r3, #3
 8009d84:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009d86:	4b05      	ldr	r3, [pc, #20]	; (8009d9c <RTC_ExitInitMode+0x78>)
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	4a04      	ldr	r2, [pc, #16]	; (8009d9c <RTC_ExitInitMode+0x78>)
 8009d8c:	f043 0320 	orr.w	r3, r3, #32
 8009d90:	6193      	str	r3, [r2, #24]
  }

  return status;
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	40002800 	.word	0x40002800

08009da0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	4603      	mov	r3, r0
 8009da8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8009dae:	79fb      	ldrb	r3, [r7, #7]
 8009db0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8009db2:	e005      	b.n	8009dc0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	3301      	adds	r3, #1
 8009db8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8009dba:	7afb      	ldrb	r3, [r7, #11]
 8009dbc:	3b0a      	subs	r3, #10
 8009dbe:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8009dc0:	7afb      	ldrb	r3, [r7, #11]
 8009dc2:	2b09      	cmp	r3, #9
 8009dc4:	d8f6      	bhi.n	8009db4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	011b      	lsls	r3, r3, #4
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	7afb      	ldrb	r3, [r7, #11]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	b2db      	uxtb	r3, r3
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bc80      	pop	{r7}
 8009ddc:	4770      	bx	lr
	...

08009de0 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d101      	bne.n	8009df6 <HAL_RTCEx_EnableBypassShadow+0x16>
 8009df2:	2302      	movs	r3, #2
 8009df4:	e01f      	b.n	8009e36 <HAL_RTCEx_EnableBypassShadow+0x56>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2202      	movs	r2, #2
 8009e02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e06:	4b0e      	ldr	r3, [pc, #56]	; (8009e40 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009e08:	22ca      	movs	r2, #202	; 0xca
 8009e0a:	625a      	str	r2, [r3, #36]	; 0x24
 8009e0c:	4b0c      	ldr	r3, [pc, #48]	; (8009e40 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009e0e:	2253      	movs	r2, #83	; 0x53
 8009e10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009e12:	4b0b      	ldr	r3, [pc, #44]	; (8009e40 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	4a0a      	ldr	r2, [pc, #40]	; (8009e40 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009e18:	f043 0320 	orr.w	r3, r3, #32
 8009e1c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e1e:	4b08      	ldr	r3, [pc, #32]	; (8009e40 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009e20:	22ff      	movs	r2, #255	; 0xff
 8009e22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bc80      	pop	{r7}
 8009e3e:	4770      	bx	lr
 8009e40:	40002800 	.word	0x40002800

08009e44 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d101      	bne.n	8009e5a <HAL_RTCEx_SetSSRU_IT+0x16>
 8009e56:	2302      	movs	r3, #2
 8009e58:	e027      	b.n	8009eaa <HAL_RTCEx_SetSSRU_IT+0x66>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2202      	movs	r2, #2
 8009e66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e6a:	4b12      	ldr	r3, [pc, #72]	; (8009eb4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009e6c:	22ca      	movs	r2, #202	; 0xca
 8009e6e:	625a      	str	r2, [r3, #36]	; 0x24
 8009e70:	4b10      	ldr	r3, [pc, #64]	; (8009eb4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009e72:	2253      	movs	r2, #83	; 0x53
 8009e74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8009e76:	4b0f      	ldr	r3, [pc, #60]	; (8009eb4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	4a0e      	ldr	r2, [pc, #56]	; (8009eb4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e80:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8009e82:	4b0d      	ldr	r3, [pc, #52]	; (8009eb8 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8009e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e88:	4a0b      	ldr	r2, [pc, #44]	; (8009eb8 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8009e8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e92:	4b08      	ldr	r3, [pc, #32]	; (8009eb4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009e94:	22ff      	movs	r2, #255	; 0xff
 8009e96:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bc80      	pop	{r7}
 8009eb2:	4770      	bx	lr
 8009eb4:	40002800 	.word	0x40002800
 8009eb8:	58000800 	.word	0x58000800

08009ebc <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8009ec4:	4b09      	ldr	r3, [pc, #36]	; (8009eec <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8009ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d005      	beq.n	8009edc <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8009ed0:	4b06      	ldr	r3, [pc, #24]	; (8009eec <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8009ed2:	2240      	movs	r2, #64	; 0x40
 8009ed4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7f8 fe27 	bl	8002b2a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009ee4:	bf00      	nop
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	40002800 	.word	0x40002800

08009ef0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bc80      	pop	{r7}
 8009f00:	4770      	bx	lr
	...

08009f04 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b087      	sub	sp, #28
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8009f10:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <HAL_RTCEx_BKUPWrite+0x2c>)
 8009f12:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	697a      	ldr	r2, [r7, #20]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	601a      	str	r2, [r3, #0]
}
 8009f24:	bf00      	nop
 8009f26:	371c      	adds	r7, #28
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bc80      	pop	{r7}
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	4000b100 	.word	0x4000b100

08009f34 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8009f3e:	4b07      	ldr	r3, [pc, #28]	; (8009f5c <HAL_RTCEx_BKUPRead+0x28>)
 8009f40:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	4413      	add	r3, r2
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bc80      	pop	{r7}
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	4000b100 	.word	0x4000b100

08009f60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d101      	bne.n	8009f72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e0c6      	b.n	800a100 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d108      	bne.n	8009f8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f82:	d009      	beq.n	8009f98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	61da      	str	r2, [r3, #28]
 8009f8a:	e005      	b.n	8009f98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d106      	bne.n	8009fb2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7f8 f8fb 	bl	80021a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2202      	movs	r2, #2
 8009fb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fc8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fd2:	d902      	bls.n	8009fda <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	60fb      	str	r3, [r7, #12]
 8009fd8:	e002      	b.n	8009fe0 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fde:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009fe8:	d007      	beq.n	8009ffa <HAL_SPI_Init+0x9a>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ff2:	d002      	beq.n	8009ffa <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a00a:	431a      	orrs	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	f003 0302 	and.w	r3, r3, #2
 800a014:	431a      	orrs	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	f003 0301 	and.w	r3, r3, #1
 800a01e:	431a      	orrs	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a028:	431a      	orrs	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a032:	431a      	orrs	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a1b      	ldr	r3, [r3, #32]
 800a038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a03c:	ea42 0103 	orr.w	r1, r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a044:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	430a      	orrs	r2, r1
 800a04e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a058:	d11b      	bne.n	800a092 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d10b      	bne.n	800a07a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a06a:	d903      	bls.n	800a074 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2202      	movs	r2, #2
 800a070:	631a      	str	r2, [r3, #48]	; 0x30
 800a072:	e002      	b.n	800a07a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d107      	bne.n	800a092 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a090:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	0c1b      	lsrs	r3, r3, #16
 800a098:	f003 0204 	and.w	r2, r3, #4
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	f003 0310 	and.w	r3, r3, #16
 800a0a4:	431a      	orrs	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0aa:	f003 0308 	and.w	r3, r3, #8
 800a0ae:	431a      	orrs	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a0b8:	ea42 0103 	orr.w	r1, r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	430a      	orrs	r2, r1
 800a0c8:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0d2:	d105      	bne.n	800a0e0 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	b292      	uxth	r2, r2
 800a0de:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	69da      	ldr	r2, [r3, #28]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <LL_PWR_SetRadioBusyTrigger>:
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800a110:	4b06      	ldr	r3, [pc, #24]	; (800a12c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a118:	4904      	ldr	r1, [pc, #16]	; (800a12c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	608b      	str	r3, [r1, #8]
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	bc80      	pop	{r7}
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	58000400 	.word	0x58000400

0800a130 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800a130:	b480      	push	{r7}
 800a132:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a134:	4b05      	ldr	r3, [pc, #20]	; (800a14c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800a136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a13a:	4a04      	ldr	r2, [pc, #16]	; (800a14c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800a13c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a144:	bf00      	nop
 800a146:	46bd      	mov	sp, r7
 800a148:	bc80      	pop	{r7}
 800a14a:	4770      	bx	lr
 800a14c:	58000400 	.word	0x58000400

0800a150 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800a150:	b480      	push	{r7}
 800a152:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a154:	4b05      	ldr	r3, [pc, #20]	; (800a16c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800a156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a15a:	4a04      	ldr	r2, [pc, #16]	; (800a16c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800a15c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a164:	bf00      	nop
 800a166:	46bd      	mov	sp, r7
 800a168:	bc80      	pop	{r7}
 800a16a:	4770      	bx	lr
 800a16c:	58000400 	.word	0x58000400

0800a170 <LL_PWR_ClearFlag_RFBUSY>:
{
 800a170:	b480      	push	{r7}
 800a172:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800a174:	4b03      	ldr	r3, [pc, #12]	; (800a184 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800a176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a17a:	619a      	str	r2, [r3, #24]
}
 800a17c:	bf00      	nop
 800a17e:	46bd      	mov	sp, r7
 800a180:	bc80      	pop	{r7}
 800a182:	4770      	bx	lr
 800a184:	58000400 	.word	0x58000400

0800a188 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800a188:	b480      	push	{r7}
 800a18a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800a18c:	4b06      	ldr	r3, [pc, #24]	; (800a1a8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	f003 0302 	and.w	r3, r3, #2
 800a194:	2b02      	cmp	r3, #2
 800a196:	d101      	bne.n	800a19c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800a198:	2301      	movs	r3, #1
 800a19a:	e000      	b.n	800a19e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bc80      	pop	{r7}
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	58000400 	.word	0x58000400

0800a1ac <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800a1b0:	4b06      	ldr	r3, [pc, #24]	; (800a1cc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800a1b2:	695b      	ldr	r3, [r3, #20]
 800a1b4:	f003 0304 	and.w	r3, r3, #4
 800a1b8:	2b04      	cmp	r3, #4
 800a1ba:	d101      	bne.n	800a1c0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e000      	b.n	800a1c2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bc80      	pop	{r7}
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	58000400 	.word	0x58000400

0800a1d0 <LL_RCC_RF_DisableReset>:
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800a1d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a1e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a1e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800a1e8:	bf00      	nop
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bc80      	pop	{r7}
 800a1ee:	4770      	bx	lr

0800a1f0 <LL_RCC_IsRFUnderReset>:
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800a1f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a200:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a204:	d101      	bne.n	800a20a <LL_RCC_IsRFUnderReset+0x1a>
 800a206:	2301      	movs	r3, #1
 800a208:	e000      	b.n	800a20c <LL_RCC_IsRFUnderReset+0x1c>
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	46bd      	mov	sp, r7
 800a210:	bc80      	pop	{r7}
 800a212:	4770      	bx	lr

0800a214 <LL_EXTI_EnableIT_32_63>:
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a21c:	4b06      	ldr	r3, [pc, #24]	; (800a238 <LL_EXTI_EnableIT_32_63+0x24>)
 800a21e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a222:	4905      	ldr	r1, [pc, #20]	; (800a238 <LL_EXTI_EnableIT_32_63+0x24>)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4313      	orrs	r3, r2
 800a228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	bc80      	pop	{r7}
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	58000800 	.word	0x58000800

0800a23c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d103      	bne.n	800a252 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	73fb      	strb	r3, [r7, #15]
    return status;
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
 800a250:	e052      	b.n	800a2f8 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	799b      	ldrb	r3, [r3, #6]
 800a25a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800a25c:	7bbb      	ldrb	r3, [r7, #14]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d002      	beq.n	800a268 <HAL_SUBGHZ_Init+0x2c>
 800a262:	7bbb      	ldrb	r3, [r7, #14]
 800a264:	2b03      	cmp	r3, #3
 800a266:	d109      	bne.n	800a27c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f7f8 f8d0 	bl	8002414 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800a274:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a278:	f7ff ffcc 	bl	800a214 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800a27c:	7bbb      	ldrb	r3, [r7, #14]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d126      	bne.n	800a2d0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2202      	movs	r2, #2
 800a286:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800a288:	f7ff ffa2 	bl	800a1d0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a28c:	4b1c      	ldr	r3, [pc, #112]	; (800a300 <HAL_SUBGHZ_Init+0xc4>)
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	4613      	mov	r3, r2
 800a292:	00db      	lsls	r3, r3, #3
 800a294:	1a9b      	subs	r3, r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	0cdb      	lsrs	r3, r3, #19
 800a29a:	2264      	movs	r2, #100	; 0x64
 800a29c:	fb02 f303 	mul.w	r3, r2, r3
 800a2a0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d105      	bne.n	800a2b4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	609a      	str	r2, [r3, #8]
        break;
 800a2b2:	e007      	b.n	800a2c4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800a2ba:	f7ff ff99 	bl	800a1f0 <LL_RCC_IsRFUnderReset>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1ee      	bne.n	800a2a2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a2c4:	f7ff ff34 	bl	800a130 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800a2c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a2cc:	f7ff ff1c 	bl	800a108 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800a2d0:	f7ff ff4e 	bl	800a170 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10a      	bne.n	800a2f0 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 faac 	bl	800a83c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	719a      	strb	r2, [r3, #6]

  return status;
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	20000000 	.word	0x20000000

0800a304 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	607a      	str	r2, [r7, #4]
 800a30e:	461a      	mov	r2, r3
 800a310:	460b      	mov	r3, r1
 800a312:	817b      	strh	r3, [r7, #10]
 800a314:	4613      	mov	r3, r2
 800a316:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	799b      	ldrb	r3, [r3, #6]
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d14a      	bne.n	800a3b8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	795b      	ldrb	r3, [r3, #5]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d101      	bne.n	800a32e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800a32a:	2302      	movs	r3, #2
 800a32c:	e045      	b.n	800a3ba <HAL_SUBGHZ_WriteRegisters+0xb6>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2201      	movs	r2, #1
 800a332:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2202      	movs	r2, #2
 800a338:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f000 fb4c 	bl	800a9d8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a340:	f7ff ff06 	bl	800a150 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800a344:	210d      	movs	r1, #13
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f000 fa98 	bl	800a87c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800a34c:	897b      	ldrh	r3, [r7, #10]
 800a34e:	0a1b      	lsrs	r3, r3, #8
 800a350:	b29b      	uxth	r3, r3
 800a352:	b2db      	uxtb	r3, r3
 800a354:	4619      	mov	r1, r3
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f000 fa90 	bl	800a87c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a35c:	897b      	ldrh	r3, [r7, #10]
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	4619      	mov	r1, r3
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f000 fa8a 	bl	800a87c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a368:	2300      	movs	r3, #0
 800a36a:	82bb      	strh	r3, [r7, #20]
 800a36c:	e00a      	b.n	800a384 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a36e:	8abb      	ldrh	r3, [r7, #20]
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	4413      	add	r3, r2
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	4619      	mov	r1, r3
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f000 fa7f 	bl	800a87c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a37e:	8abb      	ldrh	r3, [r7, #20]
 800a380:	3301      	adds	r3, #1
 800a382:	82bb      	strh	r3, [r7, #20]
 800a384:	8aba      	ldrh	r2, [r7, #20]
 800a386:	893b      	ldrh	r3, [r7, #8]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d3f0      	bcc.n	800a36e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a38c:	f7ff fed0 	bl	800a130 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f000 fb45 	bl	800aa20 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d002      	beq.n	800a3a4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	75fb      	strb	r3, [r7, #23]
 800a3a2:	e001      	b.n	800a3a8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	715a      	strb	r2, [r3, #5]

    return status;
 800a3b4:	7dfb      	ldrb	r3, [r7, #23]
 800a3b6:	e000      	b.n	800a3ba <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a3b8:	2302      	movs	r3, #2
  }
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3718      	adds	r7, #24
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b088      	sub	sp, #32
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	60f8      	str	r0, [r7, #12]
 800a3ca:	607a      	str	r2, [r7, #4]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	817b      	strh	r3, [r7, #10]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	799b      	ldrb	r3, [r3, #6]
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d14a      	bne.n	800a47a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	795b      	ldrb	r3, [r3, #5]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d101      	bne.n	800a3f0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	e045      	b.n	800a47c <HAL_SUBGHZ_ReadRegisters+0xba>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 faee 	bl	800a9d8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a3fc:	f7ff fea8 	bl	800a150 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800a400:	211d      	movs	r1, #29
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f000 fa3a 	bl	800a87c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800a408:	897b      	ldrh	r3, [r7, #10]
 800a40a:	0a1b      	lsrs	r3, r3, #8
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	4619      	mov	r1, r3
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f000 fa32 	bl	800a87c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a418:	897b      	ldrh	r3, [r7, #10]
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	4619      	mov	r1, r3
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f000 fa2c 	bl	800a87c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800a424:	2100      	movs	r1, #0
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f000 fa28 	bl	800a87c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a42c:	2300      	movs	r3, #0
 800a42e:	82fb      	strh	r3, [r7, #22]
 800a430:	e009      	b.n	800a446 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a432:	69b9      	ldr	r1, [r7, #24]
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f000 fa77 	bl	800a928 <SUBGHZSPI_Receive>
      pData++;
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	3301      	adds	r3, #1
 800a43e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a440:	8afb      	ldrh	r3, [r7, #22]
 800a442:	3301      	adds	r3, #1
 800a444:	82fb      	strh	r3, [r7, #22]
 800a446:	8afa      	ldrh	r2, [r7, #22]
 800a448:	893b      	ldrh	r3, [r7, #8]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d3f1      	bcc.n	800a432 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a44e:	f7ff fe6f 	bl	800a130 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f000 fae4 	bl	800aa20 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	77fb      	strb	r3, [r7, #31]
 800a464:	e001      	b.n	800a46a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2201      	movs	r2, #1
 800a46e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	715a      	strb	r2, [r3, #5]

    return status;
 800a476:	7ffb      	ldrb	r3, [r7, #31]
 800a478:	e000      	b.n	800a47c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800a47a:	2302      	movs	r3, #2
  }
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3720      	adds	r7, #32
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	607a      	str	r2, [r7, #4]
 800a48e:	461a      	mov	r2, r3
 800a490:	460b      	mov	r3, r1
 800a492:	72fb      	strb	r3, [r7, #11]
 800a494:	4613      	mov	r3, r2
 800a496:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	799b      	ldrb	r3, [r3, #6]
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d14a      	bne.n	800a538 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	795b      	ldrb	r3, [r3, #5]
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d101      	bne.n	800a4ae <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	e045      	b.n	800a53a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f000 fa8f 	bl	800a9d8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800a4ba:	7afb      	ldrb	r3, [r7, #11]
 800a4bc:	2b84      	cmp	r3, #132	; 0x84
 800a4be:	d002      	beq.n	800a4c6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800a4c0:	7afb      	ldrb	r3, [r7, #11]
 800a4c2:	2b94      	cmp	r3, #148	; 0x94
 800a4c4:	d103      	bne.n	800a4ce <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	711a      	strb	r2, [r3, #4]
 800a4cc:	e002      	b.n	800a4d4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a4d4:	f7ff fe3c 	bl	800a150 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a4d8:	7afb      	ldrb	r3, [r7, #11]
 800a4da:	4619      	mov	r1, r3
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f000 f9cd 	bl	800a87c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	82bb      	strh	r3, [r7, #20]
 800a4e6:	e00a      	b.n	800a4fe <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a4e8:	8abb      	ldrh	r3, [r7, #20]
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 f9c2 	bl	800a87c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a4f8:	8abb      	ldrh	r3, [r7, #20]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	82bb      	strh	r3, [r7, #20]
 800a4fe:	8aba      	ldrh	r2, [r7, #20]
 800a500:	893b      	ldrh	r3, [r7, #8]
 800a502:	429a      	cmp	r2, r3
 800a504:	d3f0      	bcc.n	800a4e8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a506:	f7ff fe13 	bl	800a130 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800a50a:	7afb      	ldrb	r3, [r7, #11]
 800a50c:	2b84      	cmp	r3, #132	; 0x84
 800a50e:	d002      	beq.n	800a516 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f000 fa85 	bl	800aa20 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d002      	beq.n	800a524 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	75fb      	strb	r3, [r7, #23]
 800a522:	e001      	b.n	800a528 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2201      	movs	r2, #1
 800a52c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	715a      	strb	r2, [r3, #5]

    return status;
 800a534:	7dfb      	ldrb	r3, [r7, #23]
 800a536:	e000      	b.n	800a53a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a538:	2302      	movs	r3, #2
  }
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3718      	adds	r7, #24
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b088      	sub	sp, #32
 800a546:	af00      	add	r7, sp, #0
 800a548:	60f8      	str	r0, [r7, #12]
 800a54a:	607a      	str	r2, [r7, #4]
 800a54c:	461a      	mov	r2, r3
 800a54e:	460b      	mov	r3, r1
 800a550:	72fb      	strb	r3, [r7, #11]
 800a552:	4613      	mov	r3, r2
 800a554:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	799b      	ldrb	r3, [r3, #6]
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b01      	cmp	r3, #1
 800a562:	d13d      	bne.n	800a5e0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	795b      	ldrb	r3, [r3, #5]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d101      	bne.n	800a570 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800a56c:	2302      	movs	r3, #2
 800a56e:	e038      	b.n	800a5e2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2201      	movs	r2, #1
 800a574:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 fa2e 	bl	800a9d8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a57c:	f7ff fde8 	bl	800a150 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a580:	7afb      	ldrb	r3, [r7, #11]
 800a582:	4619      	mov	r1, r3
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 f979 	bl	800a87c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a58a:	2100      	movs	r1, #0
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f000 f975 	bl	800a87c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a592:	2300      	movs	r3, #0
 800a594:	82fb      	strh	r3, [r7, #22]
 800a596:	e009      	b.n	800a5ac <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a598:	69b9      	ldr	r1, [r7, #24]
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f000 f9c4 	bl	800a928 <SUBGHZSPI_Receive>
      pData++;
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a5a6:	8afb      	ldrh	r3, [r7, #22]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	82fb      	strh	r3, [r7, #22]
 800a5ac:	8afa      	ldrh	r2, [r7, #22]
 800a5ae:	893b      	ldrh	r3, [r7, #8]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d3f1      	bcc.n	800a598 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a5b4:	f7ff fdbc 	bl	800a130 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f000 fa31 	bl	800aa20 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	77fb      	strb	r3, [r7, #31]
 800a5ca:	e001      	b.n	800a5d0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	715a      	strb	r2, [r3, #5]

    return status;
 800a5dc:	7ffb      	ldrb	r3, [r7, #31]
 800a5de:	e000      	b.n	800a5e2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a5e0:	2302      	movs	r3, #2
  }
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3720      	adds	r7, #32
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b086      	sub	sp, #24
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	72fb      	strb	r3, [r7, #11]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	799b      	ldrb	r3, [r3, #6]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b01      	cmp	r3, #1
 800a606:	d13e      	bne.n	800a686 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	795b      	ldrb	r3, [r3, #5]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d101      	bne.n	800a614 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800a610:	2302      	movs	r3, #2
 800a612:	e039      	b.n	800a688 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2201      	movs	r2, #1
 800a618:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 f9dc 	bl	800a9d8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a620:	f7ff fd96 	bl	800a150 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a624:	210e      	movs	r1, #14
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f000 f928 	bl	800a87c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a62c:	7afb      	ldrb	r3, [r7, #11]
 800a62e:	4619      	mov	r1, r3
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f000 f923 	bl	800a87c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a636:	2300      	movs	r3, #0
 800a638:	82bb      	strh	r3, [r7, #20]
 800a63a:	e00a      	b.n	800a652 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a63c:	8abb      	ldrh	r3, [r7, #20]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	4413      	add	r3, r2
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	4619      	mov	r1, r3
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f000 f918 	bl	800a87c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a64c:	8abb      	ldrh	r3, [r7, #20]
 800a64e:	3301      	adds	r3, #1
 800a650:	82bb      	strh	r3, [r7, #20]
 800a652:	8aba      	ldrh	r2, [r7, #20]
 800a654:	893b      	ldrh	r3, [r7, #8]
 800a656:	429a      	cmp	r2, r3
 800a658:	d3f0      	bcc.n	800a63c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a65a:	f7ff fd69 	bl	800a130 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f000 f9de 	bl	800aa20 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	75fb      	strb	r3, [r7, #23]
 800a670:	e001      	b.n	800a676 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2201      	movs	r2, #1
 800a67a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	715a      	strb	r2, [r3, #5]

    return status;
 800a682:	7dfb      	ldrb	r3, [r7, #23]
 800a684:	e000      	b.n	800a688 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a686:	2302      	movs	r3, #2
  }
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3718      	adds	r7, #24
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b088      	sub	sp, #32
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	607a      	str	r2, [r7, #4]
 800a69a:	461a      	mov	r2, r3
 800a69c:	460b      	mov	r3, r1
 800a69e:	72fb      	strb	r3, [r7, #11]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	799b      	ldrb	r3, [r3, #6]
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d141      	bne.n	800a736 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	795b      	ldrb	r3, [r3, #5]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d101      	bne.n	800a6be <HAL_SUBGHZ_ReadBuffer+0x2e>
 800a6ba:	2302      	movs	r3, #2
 800a6bc:	e03c      	b.n	800a738 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	f000 f987 	bl	800a9d8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a6ca:	f7ff fd41 	bl	800a150 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a6ce:	211e      	movs	r1, #30
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f000 f8d3 	bl	800a87c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a6d6:	7afb      	ldrb	r3, [r7, #11]
 800a6d8:	4619      	mov	r1, r3
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 f8ce 	bl	800a87c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 f8ca 	bl	800a87c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	82fb      	strh	r3, [r7, #22]
 800a6ec:	e009      	b.n	800a702 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a6ee:	69b9      	ldr	r1, [r7, #24]
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f000 f919 	bl	800a928 <SUBGHZSPI_Receive>
      pData++;
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a6fc:	8afb      	ldrh	r3, [r7, #22]
 800a6fe:	3301      	adds	r3, #1
 800a700:	82fb      	strh	r3, [r7, #22]
 800a702:	8afa      	ldrh	r2, [r7, #22]
 800a704:	893b      	ldrh	r3, [r7, #8]
 800a706:	429a      	cmp	r2, r3
 800a708:	d3f1      	bcc.n	800a6ee <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a70a:	f7ff fd11 	bl	800a130 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f000 f986 	bl	800aa20 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	77fb      	strb	r3, [r7, #31]
 800a720:	e001      	b.n	800a726 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2201      	movs	r2, #1
 800a72a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	715a      	strb	r2, [r3, #5]

    return status;
 800a732:	7ffb      	ldrb	r3, [r7, #31]
 800a734:	e000      	b.n	800a738 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a736:	2302      	movs	r3, #2
  }
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3720      	adds	r7, #32
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a748:	2300      	movs	r3, #0
 800a74a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a74c:	f107 020c 	add.w	r2, r7, #12
 800a750:	2302      	movs	r3, #2
 800a752:	2112      	movs	r1, #18
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7ff fef4 	bl	800a542 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a75a:	7b3b      	ldrb	r3, [r7, #12]
 800a75c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a75e:	89fb      	ldrh	r3, [r7, #14]
 800a760:	021b      	lsls	r3, r3, #8
 800a762:	b21a      	sxth	r2, r3
 800a764:	7b7b      	ldrb	r3, [r7, #13]
 800a766:	b21b      	sxth	r3, r3
 800a768:	4313      	orrs	r3, r2
 800a76a:	b21b      	sxth	r3, r3
 800a76c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800a76e:	f107 020c 	add.w	r2, r7, #12
 800a772:	2302      	movs	r3, #2
 800a774:	2102      	movs	r1, #2
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7ff fe84 	bl	800a484 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a77c:	89fb      	ldrh	r3, [r7, #14]
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	2b00      	cmp	r3, #0
 800a784:	d002      	beq.n	800a78c <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f013 f8c0 	bl	801d90c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a78c:	89fb      	ldrh	r3, [r7, #14]
 800a78e:	f003 0302 	and.w	r3, r3, #2
 800a792:	2b00      	cmp	r3, #0
 800a794:	d002      	beq.n	800a79c <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f013 f8c6 	bl	801d928 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a79c:	89fb      	ldrh	r3, [r7, #14]
 800a79e:	f003 0304 	and.w	r3, r3, #4
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d002      	beq.n	800a7ac <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f013 f916 	bl	801d9d8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a7ac:	89fb      	ldrh	r3, [r7, #14]
 800a7ae:	f003 0308 	and.w	r3, r3, #8
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d002      	beq.n	800a7bc <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f013 f91c 	bl	801d9f4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a7bc:	89fb      	ldrh	r3, [r7, #14]
 800a7be:	f003 0310 	and.w	r3, r3, #16
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d002      	beq.n	800a7cc <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f013 f922 	bl	801da10 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a7cc:	89fb      	ldrh	r3, [r7, #14]
 800a7ce:	f003 0320 	and.w	r3, r3, #32
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d002      	beq.n	800a7dc <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f013 f8f0 	bl	801d9bc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a7dc:	89fb      	ldrh	r3, [r7, #14]
 800a7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d002      	beq.n	800a7ec <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f013 f8ac 	bl	801d944 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a7ec:	89fb      	ldrh	r3, [r7, #14]
 800a7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00d      	beq.n	800a812 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a7f6:	89fb      	ldrh	r3, [r7, #14]
 800a7f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d004      	beq.n	800a80a <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a800:	2101      	movs	r1, #1
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f013 f8ac 	bl	801d960 <HAL_SUBGHZ_CADStatusCallback>
 800a808:	e003      	b.n	800a812 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a80a:	2100      	movs	r1, #0
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f013 f8a7 	bl	801d960 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a812:	89fb      	ldrh	r3, [r7, #14]
 800a814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d002      	beq.n	800a822 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f013 f8bd 	bl	801d99c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800a822:	89fb      	ldrh	r3, [r7, #14]
 800a824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d002      	beq.n	800a832 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f013 f8fd 	bl	801da2c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800a832:	bf00      	nop
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
	...

0800a83c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a844:	4b0c      	ldr	r3, [pc, #48]	; (800a878 <SUBGHZSPI_Init+0x3c>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a0b      	ldr	r2, [pc, #44]	; (800a878 <SUBGHZSPI_Init+0x3c>)
 800a84a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a84e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800a850:	4a09      	ldr	r2, [pc, #36]	; (800a878 <SUBGHZSPI_Init+0x3c>)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800a858:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800a85a:	4b07      	ldr	r3, [pc, #28]	; (800a878 <SUBGHZSPI_Init+0x3c>)
 800a85c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800a860:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a862:	4b05      	ldr	r3, [pc, #20]	; (800a878 <SUBGHZSPI_Init+0x3c>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a04      	ldr	r2, [pc, #16]	; (800a878 <SUBGHZSPI_Init+0x3c>)
 800a868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a86c:	6013      	str	r3, [r2, #0]
}
 800a86e:	bf00      	nop
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	bc80      	pop	{r7}
 800a876:	4770      	bx	lr
 800a878:	58010000 	.word	0x58010000

0800a87c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b087      	sub	sp, #28
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	460b      	mov	r3, r1
 800a886:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a88c:	4b23      	ldr	r3, [pc, #140]	; (800a91c <SUBGHZSPI_Transmit+0xa0>)
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	4613      	mov	r3, r2
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	1a9b      	subs	r3, r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	0cdb      	lsrs	r3, r3, #19
 800a89a:	2264      	movs	r2, #100	; 0x64
 800a89c:	fb02 f303 	mul.w	r3, r2, r3
 800a8a0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d105      	bne.n	800a8b4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	609a      	str	r2, [r3, #8]
      break;
 800a8b2:	e008      	b.n	800a8c6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a8ba:	4b19      	ldr	r3, [pc, #100]	; (800a920 <SUBGHZSPI_Transmit+0xa4>)
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	f003 0302 	and.w	r3, r3, #2
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d1ed      	bne.n	800a8a2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a8c6:	4b17      	ldr	r3, [pc, #92]	; (800a924 <SUBGHZSPI_Transmit+0xa8>)
 800a8c8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	78fa      	ldrb	r2, [r7, #3]
 800a8ce:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a8d0:	4b12      	ldr	r3, [pc, #72]	; (800a91c <SUBGHZSPI_Transmit+0xa0>)
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	00db      	lsls	r3, r3, #3
 800a8d8:	1a9b      	subs	r3, r3, r2
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	0cdb      	lsrs	r3, r3, #19
 800a8de:	2264      	movs	r2, #100	; 0x64
 800a8e0:	fb02 f303 	mul.w	r3, r2, r3
 800a8e4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d105      	bne.n	800a8f8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	609a      	str	r2, [r3, #8]
      break;
 800a8f6:	e008      	b.n	800a90a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a8fe:	4b08      	ldr	r3, [pc, #32]	; (800a920 <SUBGHZSPI_Transmit+0xa4>)
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	2b01      	cmp	r3, #1
 800a908:	d1ed      	bne.n	800a8e6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800a90a:	4b05      	ldr	r3, [pc, #20]	; (800a920 <SUBGHZSPI_Transmit+0xa4>)
 800a90c:	68db      	ldr	r3, [r3, #12]

  return status;
 800a90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a910:	4618      	mov	r0, r3
 800a912:	371c      	adds	r7, #28
 800a914:	46bd      	mov	sp, r7
 800a916:	bc80      	pop	{r7}
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	20000000 	.word	0x20000000
 800a920:	58010000 	.word	0x58010000
 800a924:	5801000c 	.word	0x5801000c

0800a928 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800a928:	b480      	push	{r7}
 800a92a:	b087      	sub	sp, #28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a936:	4b25      	ldr	r3, [pc, #148]	; (800a9cc <SUBGHZSPI_Receive+0xa4>)
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	4613      	mov	r3, r2
 800a93c:	00db      	lsls	r3, r3, #3
 800a93e:	1a9b      	subs	r3, r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	0cdb      	lsrs	r3, r3, #19
 800a944:	2264      	movs	r2, #100	; 0x64
 800a946:	fb02 f303 	mul.w	r3, r2, r3
 800a94a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d105      	bne.n	800a95e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	609a      	str	r2, [r3, #8]
      break;
 800a95c:	e008      	b.n	800a970 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3b01      	subs	r3, #1
 800a962:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a964:	4b1a      	ldr	r3, [pc, #104]	; (800a9d0 <SUBGHZSPI_Receive+0xa8>)
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	f003 0302 	and.w	r3, r3, #2
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d1ed      	bne.n	800a94c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a970:	4b18      	ldr	r3, [pc, #96]	; (800a9d4 <SUBGHZSPI_Receive+0xac>)
 800a972:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	22ff      	movs	r2, #255	; 0xff
 800a978:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a97a:	4b14      	ldr	r3, [pc, #80]	; (800a9cc <SUBGHZSPI_Receive+0xa4>)
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	4613      	mov	r3, r2
 800a980:	00db      	lsls	r3, r3, #3
 800a982:	1a9b      	subs	r3, r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	0cdb      	lsrs	r3, r3, #19
 800a988:	2264      	movs	r2, #100	; 0x64
 800a98a:	fb02 f303 	mul.w	r3, r2, r3
 800a98e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d105      	bne.n	800a9a2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2201      	movs	r2, #1
 800a99e:	609a      	str	r2, [r3, #8]
      break;
 800a9a0:	e008      	b.n	800a9b4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a9a8:	4b09      	ldr	r3, [pc, #36]	; (800a9d0 <SUBGHZSPI_Receive+0xa8>)
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d1ed      	bne.n	800a990 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800a9b4:	4b06      	ldr	r3, [pc, #24]	; (800a9d0 <SUBGHZSPI_Receive+0xa8>)
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	701a      	strb	r2, [r3, #0]

  return status;
 800a9be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	371c      	adds	r7, #28
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bc80      	pop	{r7}
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	20000000 	.word	0x20000000
 800a9d0:	58010000 	.word	0x58010000
 800a9d4:	5801000c 	.word	0x5801000c

0800a9d8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	791b      	ldrb	r3, [r3, #4]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d111      	bne.n	800aa0c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800a9e8:	4b0c      	ldr	r3, [pc, #48]	; (800aa1c <SUBGHZ_CheckDeviceReady+0x44>)
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	005b      	lsls	r3, r3, #1
 800a9f0:	4413      	add	r3, r2
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	0c1b      	lsrs	r3, r3, #16
 800a9f6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a9f8:	f7ff fbaa 	bl	800a150 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1f9      	bne.n	800a9fc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800aa08:	f7ff fb92 	bl	800a130 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f807 	bl	800aa20 <SUBGHZ_WaitOnBusy>
 800aa12:	4603      	mov	r3, r0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	20000000 	.word	0x20000000

0800aa20 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800aa2c:	4b12      	ldr	r3, [pc, #72]	; (800aa78 <SUBGHZ_WaitOnBusy+0x58>)
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	4613      	mov	r3, r2
 800aa32:	005b      	lsls	r3, r3, #1
 800aa34:	4413      	add	r3, r2
 800aa36:	00db      	lsls	r3, r3, #3
 800aa38:	0d1b      	lsrs	r3, r3, #20
 800aa3a:	2264      	movs	r2, #100	; 0x64
 800aa3c:	fb02 f303 	mul.w	r3, r2, r3
 800aa40:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800aa42:	f7ff fbb3 	bl	800a1ac <LL_PWR_IsActiveFlag_RFBUSYMS>
 800aa46:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d105      	bne.n	800aa5a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2202      	movs	r2, #2
 800aa56:	609a      	str	r2, [r3, #8]
      break;
 800aa58:	e009      	b.n	800aa6e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800aa60:	f7ff fb92 	bl	800a188 <LL_PWR_IsActiveFlag_RFBUSYS>
 800aa64:	4602      	mov	r2, r0
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	4013      	ands	r3, r2
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d0e9      	beq.n	800aa42 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800aa6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3718      	adds	r7, #24
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	20000000 	.word	0x20000000

0800aa7c <LL_RCC_GetUSARTClockSource>:
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800aa84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	401a      	ands	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	041b      	lsls	r3, r3, #16
 800aa94:	4313      	orrs	r3, r2
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bc80      	pop	{r7}
 800aa9e:	4770      	bx	lr

0800aaa0 <LL_RCC_GetLPUARTClockSource>:
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800aaa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aaac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4013      	ands	r3, r2
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bc80      	pop	{r7}
 800aabc:	4770      	bx	lr

0800aabe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b082      	sub	sp, #8
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d101      	bne.n	800aad0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	e042      	b.n	800ab56 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d106      	bne.n	800aae8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f7f8 f986 	bl	8002df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2224      	movs	r2, #36	; 0x24
 800aaec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f022 0201 	bic.w	r2, r2, #1
 800aafe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 fc3b 	bl	800b37c <UART_SetConfig>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d101      	bne.n	800ab10 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e022      	b.n	800ab56 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fea3 	bl	800b864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	685a      	ldr	r2, [r3, #4]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	689a      	ldr	r2, [r3, #8]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f042 0201 	orr.w	r2, r2, #1
 800ab4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 ff29 	bl	800b9a6 <UART_CheckIdleState>
 800ab54:	4603      	mov	r3, r0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
	...

0800ab60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b08a      	sub	sp, #40	; 0x28
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab74:	2b20      	cmp	r3, #32
 800ab76:	d137      	bne.n	800abe8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d002      	beq.n	800ab84 <HAL_UART_Receive_IT+0x24>
 800ab7e:	88fb      	ldrh	r3, [r7, #6]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d101      	bne.n	800ab88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	e030      	b.n	800abea <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a18      	ldr	r2, [pc, #96]	; (800abf4 <HAL_UART_Receive_IT+0x94>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d01f      	beq.n	800abd8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d018      	beq.n	800abd8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	e853 3f00 	ldrex	r3, [r3]
 800abb2:	613b      	str	r3, [r7, #16]
   return(result);
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800abba:	627b      	str	r3, [r7, #36]	; 0x24
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	461a      	mov	r2, r3
 800abc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc4:	623b      	str	r3, [r7, #32]
 800abc6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc8:	69f9      	ldr	r1, [r7, #28]
 800abca:	6a3a      	ldr	r2, [r7, #32]
 800abcc:	e841 2300 	strex	r3, r2, [r1]
 800abd0:	61bb      	str	r3, [r7, #24]
   return(result);
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1e6      	bne.n	800aba6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800abd8:	88fb      	ldrh	r3, [r7, #6]
 800abda:	461a      	mov	r2, r3
 800abdc:	68b9      	ldr	r1, [r7, #8]
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f000 fff8 	bl	800bbd4 <UART_Start_Receive_IT>
 800abe4:	4603      	mov	r3, r0
 800abe6:	e000      	b.n	800abea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800abe8:	2302      	movs	r3, #2
  }
}
 800abea:	4618      	mov	r0, r3
 800abec:	3728      	adds	r7, #40	; 0x28
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	40008000 	.word	0x40008000

0800abf8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b08a      	sub	sp, #40	; 0x28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	4613      	mov	r3, r2
 800ac04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac0c:	2b20      	cmp	r3, #32
 800ac0e:	d167      	bne.n	800ace0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d002      	beq.n	800ac1c <HAL_UART_Transmit_DMA+0x24>
 800ac16:	88fb      	ldrh	r3, [r7, #6]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d101      	bne.n	800ac20 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e060      	b.n	800ace2 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	68ba      	ldr	r2, [r7, #8]
 800ac24:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	88fa      	ldrh	r2, [r7, #6]
 800ac2a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	88fa      	ldrh	r2, [r7, #6]
 800ac32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2221      	movs	r2, #33	; 0x21
 800ac42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d028      	beq.n	800aca0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac52:	4a26      	ldr	r2, [pc, #152]	; (800acec <HAL_UART_Transmit_DMA+0xf4>)
 800ac54:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac5a:	4a25      	ldr	r2, [pc, #148]	; (800acf0 <HAL_UART_Transmit_DMA+0xf8>)
 800ac5c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac62:	4a24      	ldr	r2, [pc, #144]	; (800acf4 <HAL_UART_Transmit_DMA+0xfc>)
 800ac64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac76:	4619      	mov	r1, r3
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3328      	adds	r3, #40	; 0x28
 800ac7e:	461a      	mov	r2, r3
 800ac80:	88fb      	ldrh	r3, [r7, #6]
 800ac82:	f7fb fd61 	bl	8006748 <HAL_DMA_Start_IT>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d009      	beq.n	800aca0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2210      	movs	r2, #16
 800ac90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2220      	movs	r2, #32
 800ac98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e020      	b.n	800ace2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2240      	movs	r2, #64	; 0x40
 800aca6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	3308      	adds	r3, #8
 800acae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	e853 3f00 	ldrex	r3, [r3]
 800acb6:	613b      	str	r3, [r7, #16]
   return(result);
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acbe:	627b      	str	r3, [r7, #36]	; 0x24
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3308      	adds	r3, #8
 800acc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acc8:	623a      	str	r2, [r7, #32]
 800acca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800accc:	69f9      	ldr	r1, [r7, #28]
 800acce:	6a3a      	ldr	r2, [r7, #32]
 800acd0:	e841 2300 	strex	r3, r2, [r1]
 800acd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e5      	bne.n	800aca8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	e000      	b.n	800ace2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ace0:	2302      	movs	r3, #2
  }
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3728      	adds	r7, #40	; 0x28
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	0800bf5f 	.word	0x0800bf5f
 800acf0:	0800bff9 	.word	0x0800bff9
 800acf4:	0800c015 	.word	0x0800c015

0800acf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b0ba      	sub	sp, #232	; 0xe8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	69db      	ldr	r3, [r3, #28]
 800ad06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ad22:	f640 030f 	movw	r3, #2063	; 0x80f
 800ad26:	4013      	ands	r3, r2
 800ad28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ad2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d11b      	bne.n	800ad6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad38:	f003 0320 	and.w	r3, r3, #32
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d015      	beq.n	800ad6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad44:	f003 0320 	and.w	r3, r3, #32
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d105      	bne.n	800ad58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d009      	beq.n	800ad6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f000 82e3 	beq.w	800b328 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	4798      	blx	r3
      }
      return;
 800ad6a:	e2dd      	b.n	800b328 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ad6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f000 8123 	beq.w	800afbc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ad76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ad7a:	4b8d      	ldr	r3, [pc, #564]	; (800afb0 <HAL_UART_IRQHandler+0x2b8>)
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d106      	bne.n	800ad90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ad82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ad86:	4b8b      	ldr	r3, [pc, #556]	; (800afb4 <HAL_UART_IRQHandler+0x2bc>)
 800ad88:	4013      	ands	r3, r2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 8116 	beq.w	800afbc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad94:	f003 0301 	and.w	r3, r3, #1
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d011      	beq.n	800adc0 <HAL_UART_IRQHandler+0xc8>
 800ad9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ada0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00b      	beq.n	800adc0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2201      	movs	r2, #1
 800adae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adb6:	f043 0201 	orr.w	r2, r3, #1
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc4:	f003 0302 	and.w	r3, r3, #2
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d011      	beq.n	800adf0 <HAL_UART_IRQHandler+0xf8>
 800adcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00b      	beq.n	800adf0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2202      	movs	r2, #2
 800adde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ade6:	f043 0204 	orr.w	r2, r3, #4
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adf4:	f003 0304 	and.w	r3, r3, #4
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d011      	beq.n	800ae20 <HAL_UART_IRQHandler+0x128>
 800adfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00b      	beq.n	800ae20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2204      	movs	r2, #4
 800ae0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae16:	f043 0202 	orr.w	r2, r3, #2
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae24:	f003 0308 	and.w	r3, r3, #8
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d017      	beq.n	800ae5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae30:	f003 0320 	and.w	r3, r3, #32
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d105      	bne.n	800ae44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ae38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ae3c:	4b5c      	ldr	r3, [pc, #368]	; (800afb0 <HAL_UART_IRQHandler+0x2b8>)
 800ae3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00b      	beq.n	800ae5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2208      	movs	r2, #8
 800ae4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae52:	f043 0208 	orr.w	r2, r3, #8
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d012      	beq.n	800ae8e <HAL_UART_IRQHandler+0x196>
 800ae68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00c      	beq.n	800ae8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae84:	f043 0220 	orr.w	r2, r3, #32
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 8249 	beq.w	800b32c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae9e:	f003 0320 	and.w	r3, r3, #32
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d013      	beq.n	800aece <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeaa:	f003 0320 	and.w	r3, r3, #32
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d105      	bne.n	800aebe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aeb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d007      	beq.n	800aece <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d003      	beq.n	800aece <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aed4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee2:	2b40      	cmp	r3, #64	; 0x40
 800aee4:	d005      	beq.n	800aef2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aeea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d054      	beq.n	800af9c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 ffce 	bl	800be94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af02:	2b40      	cmp	r3, #64	; 0x40
 800af04:	d146      	bne.n	800af94 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	3308      	adds	r3, #8
 800af0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af14:	e853 3f00 	ldrex	r3, [r3]
 800af18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	3308      	adds	r3, #8
 800af2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800af36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800af3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af42:	e841 2300 	strex	r3, r2, [r1]
 800af46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1d9      	bne.n	800af06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d017      	beq.n	800af8c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af62:	4a15      	ldr	r2, [pc, #84]	; (800afb8 <HAL_UART_IRQHandler+0x2c0>)
 800af64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7fb fcc7 	bl	8006900 <HAL_DMA_Abort_IT>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d019      	beq.n	800afac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800af86:	4610      	mov	r0, r2
 800af88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af8a:	e00f      	b.n	800afac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f9e0 	bl	800b352 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af92:	e00b      	b.n	800afac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 f9dc 	bl	800b352 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af9a:	e007      	b.n	800afac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f9d8 	bl	800b352 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800afaa:	e1bf      	b.n	800b32c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afac:	bf00      	nop
    return;
 800afae:	e1bd      	b.n	800b32c <HAL_UART_IRQHandler+0x634>
 800afb0:	10000001 	.word	0x10000001
 800afb4:	04000120 	.word	0x04000120
 800afb8:	0800c095 	.word	0x0800c095

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	f040 8153 	bne.w	800b26c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800afc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afca:	f003 0310 	and.w	r3, r3, #16
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 814c 	beq.w	800b26c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800afd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afd8:	f003 0310 	and.w	r3, r3, #16
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f000 8145 	beq.w	800b26c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2210      	movs	r2, #16
 800afe8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff4:	2b40      	cmp	r3, #64	; 0x40
 800aff6:	f040 80bb 	bne.w	800b170 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b008:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f000 818f 	beq.w	800b330 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b018:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b01c:	429a      	cmp	r2, r3
 800b01e:	f080 8187 	bcs.w	800b330 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b028:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0320 	and.w	r3, r3, #32
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f040 8087 	bne.w	800b14e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b048:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b04c:	e853 3f00 	ldrex	r3, [r3]
 800b050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b054:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b05c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	461a      	mov	r2, r3
 800b066:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b06a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b06e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b072:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b076:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b07a:	e841 2300 	strex	r3, r2, [r1]
 800b07e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b082:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1da      	bne.n	800b040 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3308      	adds	r3, #8
 800b090:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b094:	e853 3f00 	ldrex	r3, [r3]
 800b098:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b09a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b09c:	f023 0301 	bic.w	r3, r3, #1
 800b0a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	3308      	adds	r3, #8
 800b0aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b0ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b0b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b0b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0ba:	e841 2300 	strex	r3, r2, [r1]
 800b0be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b0c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d1e1      	bne.n	800b08a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0d0:	e853 3f00 	ldrex	r3, [r3]
 800b0d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b0d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b0ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b0ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b0f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b0f2:	e841 2300 	strex	r3, r2, [r1]
 800b0f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b0f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1e3      	bne.n	800b0c6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2220      	movs	r2, #32
 800b102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b114:	e853 3f00 	ldrex	r3, [r3]
 800b118:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b11a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b11c:	f023 0310 	bic.w	r3, r3, #16
 800b120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	461a      	mov	r2, r3
 800b12a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b12e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b130:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b132:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b134:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b136:	e841 2300 	strex	r3, r2, [r1]
 800b13a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b13c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1e4      	bne.n	800b10c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fb fb7b 	bl	8006844 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2202      	movs	r2, #2
 800b152:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b160:	b29b      	uxth	r3, r3
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	b29b      	uxth	r3, r3
 800b166:	4619      	mov	r1, r3
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f8fb 	bl	800b364 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b16e:	e0df      	b.n	800b330 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	1ad3      	subs	r3, r2, r3
 800b180:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f000 80d1 	beq.w	800b334 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b196:	2b00      	cmp	r3, #0
 800b198:	f000 80cc 	beq.w	800b334 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	e853 3f00 	ldrex	r3, [r3]
 800b1a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1be:	647b      	str	r3, [r7, #68]	; 0x44
 800b1c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b1c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e4      	bne.n	800b19c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	e853 3f00 	ldrex	r3, [r3]
 800b1e0:	623b      	str	r3, [r7, #32]
   return(result);
 800b1e2:	6a3b      	ldr	r3, [r7, #32]
 800b1e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1e8:	f023 0301 	bic.w	r3, r3, #1
 800b1ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3308      	adds	r3, #8
 800b1f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b1fa:	633a      	str	r2, [r7, #48]	; 0x30
 800b1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b202:	e841 2300 	strex	r3, r2, [r1]
 800b206:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1e1      	bne.n	800b1d2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2220      	movs	r2, #32
 800b212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	e853 3f00 	ldrex	r3, [r3]
 800b22e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f023 0310 	bic.w	r3, r3, #16
 800b236:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	461a      	mov	r2, r3
 800b240:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b244:	61fb      	str	r3, [r7, #28]
 800b246:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b248:	69b9      	ldr	r1, [r7, #24]
 800b24a:	69fa      	ldr	r2, [r7, #28]
 800b24c:	e841 2300 	strex	r3, r2, [r1]
 800b250:	617b      	str	r3, [r7, #20]
   return(result);
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1e4      	bne.n	800b222 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2202      	movs	r2, #2
 800b25c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b25e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b262:	4619      	mov	r1, r3
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f87d 	bl	800b364 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b26a:	e063      	b.n	800b334 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b26c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00e      	beq.n	800b296 <HAL_UART_IRQHandler+0x59e>
 800b278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b27c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b280:	2b00      	cmp	r3, #0
 800b282:	d008      	beq.n	800b296 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b28c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f001 fc5e 	bl	800cb50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b294:	e051      	b.n	800b33a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b29a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d014      	beq.n	800b2cc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b2a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d105      	bne.n	800b2ba <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b2ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d008      	beq.n	800b2cc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d03a      	beq.n	800b338 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	4798      	blx	r3
    }
    return;
 800b2ca:	e035      	b.n	800b338 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b2cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d009      	beq.n	800b2ec <HAL_UART_IRQHandler+0x5f4>
 800b2d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d003      	beq.n	800b2ec <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 feeb 	bl	800c0c0 <UART_EndTransmit_IT>
    return;
 800b2ea:	e026      	b.n	800b33a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b2ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d009      	beq.n	800b30c <HAL_UART_IRQHandler+0x614>
 800b2f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d003      	beq.n	800b30c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f001 fc35 	bl	800cb74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b30a:	e016      	b.n	800b33a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d010      	beq.n	800b33a <HAL_UART_IRQHandler+0x642>
 800b318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	da0c      	bge.n	800b33a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f001 fc1e 	bl	800cb62 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b326:	e008      	b.n	800b33a <HAL_UART_IRQHandler+0x642>
      return;
 800b328:	bf00      	nop
 800b32a:	e006      	b.n	800b33a <HAL_UART_IRQHandler+0x642>
    return;
 800b32c:	bf00      	nop
 800b32e:	e004      	b.n	800b33a <HAL_UART_IRQHandler+0x642>
      return;
 800b330:	bf00      	nop
 800b332:	e002      	b.n	800b33a <HAL_UART_IRQHandler+0x642>
      return;
 800b334:	bf00      	nop
 800b336:	e000      	b.n	800b33a <HAL_UART_IRQHandler+0x642>
    return;
 800b338:	bf00      	nop
  }
}
 800b33a:	37e8      	adds	r7, #232	; 0xe8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bc80      	pop	{r7}
 800b350:	4770      	bx	lr

0800b352 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b352:	b480      	push	{r7}
 800b354:	b083      	sub	sp, #12
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b35a:	bf00      	nop
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	bc80      	pop	{r7}
 800b362:	4770      	bx	lr

0800b364 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	460b      	mov	r3, r1
 800b36e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	bc80      	pop	{r7}
 800b378:	4770      	bx	lr
	...

0800b37c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b37c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b380:	b08c      	sub	sp, #48	; 0x30
 800b382:	af00      	add	r7, sp, #0
 800b384:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	689a      	ldr	r2, [r3, #8]
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	431a      	orrs	r2, r3
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	431a      	orrs	r2, r3
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	69db      	ldr	r3, [r3, #28]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	4b94      	ldr	r3, [pc, #592]	; (800b5fc <UART_SetConfig+0x280>)
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	697a      	ldr	r2, [r7, #20]
 800b3b0:	6812      	ldr	r2, [r2, #0]
 800b3b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3b4:	430b      	orrs	r3, r1
 800b3b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	68da      	ldr	r2, [r3, #12]
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	430a      	orrs	r2, r1
 800b3cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	699b      	ldr	r3, [r3, #24]
 800b3d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a89      	ldr	r2, [pc, #548]	; (800b600 <UART_SetConfig+0x284>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d004      	beq.n	800b3e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	6a1b      	ldr	r3, [r3, #32]
 800b3e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b3f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b3f6:	697a      	ldr	r2, [r7, #20]
 800b3f8:	6812      	ldr	r2, [r2, #0]
 800b3fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3fc:	430b      	orrs	r3, r1
 800b3fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b406:	f023 010f 	bic.w	r1, r3, #15
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	430a      	orrs	r2, r1
 800b414:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a7a      	ldr	r2, [pc, #488]	; (800b604 <UART_SetConfig+0x288>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d127      	bne.n	800b470 <UART_SetConfig+0xf4>
 800b420:	2003      	movs	r0, #3
 800b422:	f7ff fb2b 	bl	800aa7c <LL_RCC_GetUSARTClockSource>
 800b426:	4603      	mov	r3, r0
 800b428:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800b42c:	2b03      	cmp	r3, #3
 800b42e:	d81b      	bhi.n	800b468 <UART_SetConfig+0xec>
 800b430:	a201      	add	r2, pc, #4	; (adr r2, 800b438 <UART_SetConfig+0xbc>)
 800b432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b436:	bf00      	nop
 800b438:	0800b449 	.word	0x0800b449
 800b43c:	0800b459 	.word	0x0800b459
 800b440:	0800b451 	.word	0x0800b451
 800b444:	0800b461 	.word	0x0800b461
 800b448:	2301      	movs	r3, #1
 800b44a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b44e:	e080      	b.n	800b552 <UART_SetConfig+0x1d6>
 800b450:	2302      	movs	r3, #2
 800b452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b456:	e07c      	b.n	800b552 <UART_SetConfig+0x1d6>
 800b458:	2304      	movs	r3, #4
 800b45a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b45e:	e078      	b.n	800b552 <UART_SetConfig+0x1d6>
 800b460:	2308      	movs	r3, #8
 800b462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b466:	e074      	b.n	800b552 <UART_SetConfig+0x1d6>
 800b468:	2310      	movs	r3, #16
 800b46a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b46e:	e070      	b.n	800b552 <UART_SetConfig+0x1d6>
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a64      	ldr	r2, [pc, #400]	; (800b608 <UART_SetConfig+0x28c>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d138      	bne.n	800b4ec <UART_SetConfig+0x170>
 800b47a:	200c      	movs	r0, #12
 800b47c:	f7ff fafe 	bl	800aa7c <LL_RCC_GetUSARTClockSource>
 800b480:	4603      	mov	r3, r0
 800b482:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800b486:	2b0c      	cmp	r3, #12
 800b488:	d82c      	bhi.n	800b4e4 <UART_SetConfig+0x168>
 800b48a:	a201      	add	r2, pc, #4	; (adr r2, 800b490 <UART_SetConfig+0x114>)
 800b48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b490:	0800b4c5 	.word	0x0800b4c5
 800b494:	0800b4e5 	.word	0x0800b4e5
 800b498:	0800b4e5 	.word	0x0800b4e5
 800b49c:	0800b4e5 	.word	0x0800b4e5
 800b4a0:	0800b4d5 	.word	0x0800b4d5
 800b4a4:	0800b4e5 	.word	0x0800b4e5
 800b4a8:	0800b4e5 	.word	0x0800b4e5
 800b4ac:	0800b4e5 	.word	0x0800b4e5
 800b4b0:	0800b4cd 	.word	0x0800b4cd
 800b4b4:	0800b4e5 	.word	0x0800b4e5
 800b4b8:	0800b4e5 	.word	0x0800b4e5
 800b4bc:	0800b4e5 	.word	0x0800b4e5
 800b4c0:	0800b4dd 	.word	0x0800b4dd
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ca:	e042      	b.n	800b552 <UART_SetConfig+0x1d6>
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4d2:	e03e      	b.n	800b552 <UART_SetConfig+0x1d6>
 800b4d4:	2304      	movs	r3, #4
 800b4d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4da:	e03a      	b.n	800b552 <UART_SetConfig+0x1d6>
 800b4dc:	2308      	movs	r3, #8
 800b4de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4e2:	e036      	b.n	800b552 <UART_SetConfig+0x1d6>
 800b4e4:	2310      	movs	r3, #16
 800b4e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ea:	e032      	b.n	800b552 <UART_SetConfig+0x1d6>
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a43      	ldr	r2, [pc, #268]	; (800b600 <UART_SetConfig+0x284>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d12a      	bne.n	800b54c <UART_SetConfig+0x1d0>
 800b4f6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b4fa:	f7ff fad1 	bl	800aaa0 <LL_RCC_GetLPUARTClockSource>
 800b4fe:	4603      	mov	r3, r0
 800b500:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b504:	d01a      	beq.n	800b53c <UART_SetConfig+0x1c0>
 800b506:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b50a:	d81b      	bhi.n	800b544 <UART_SetConfig+0x1c8>
 800b50c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b510:	d00c      	beq.n	800b52c <UART_SetConfig+0x1b0>
 800b512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b516:	d815      	bhi.n	800b544 <UART_SetConfig+0x1c8>
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d003      	beq.n	800b524 <UART_SetConfig+0x1a8>
 800b51c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b520:	d008      	beq.n	800b534 <UART_SetConfig+0x1b8>
 800b522:	e00f      	b.n	800b544 <UART_SetConfig+0x1c8>
 800b524:	2300      	movs	r3, #0
 800b526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b52a:	e012      	b.n	800b552 <UART_SetConfig+0x1d6>
 800b52c:	2302      	movs	r3, #2
 800b52e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b532:	e00e      	b.n	800b552 <UART_SetConfig+0x1d6>
 800b534:	2304      	movs	r3, #4
 800b536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b53a:	e00a      	b.n	800b552 <UART_SetConfig+0x1d6>
 800b53c:	2308      	movs	r3, #8
 800b53e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b542:	e006      	b.n	800b552 <UART_SetConfig+0x1d6>
 800b544:	2310      	movs	r3, #16
 800b546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b54a:	e002      	b.n	800b552 <UART_SetConfig+0x1d6>
 800b54c:	2310      	movs	r3, #16
 800b54e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a2a      	ldr	r2, [pc, #168]	; (800b600 <UART_SetConfig+0x284>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	f040 80a4 	bne.w	800b6a6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b55e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b562:	2b08      	cmp	r3, #8
 800b564:	d823      	bhi.n	800b5ae <UART_SetConfig+0x232>
 800b566:	a201      	add	r2, pc, #4	; (adr r2, 800b56c <UART_SetConfig+0x1f0>)
 800b568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56c:	0800b591 	.word	0x0800b591
 800b570:	0800b5af 	.word	0x0800b5af
 800b574:	0800b599 	.word	0x0800b599
 800b578:	0800b5af 	.word	0x0800b5af
 800b57c:	0800b59f 	.word	0x0800b59f
 800b580:	0800b5af 	.word	0x0800b5af
 800b584:	0800b5af 	.word	0x0800b5af
 800b588:	0800b5af 	.word	0x0800b5af
 800b58c:	0800b5a7 	.word	0x0800b5a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b590:	f7fd fe76 	bl	8009280 <HAL_RCC_GetPCLK1Freq>
 800b594:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b596:	e010      	b.n	800b5ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b598:	4b1c      	ldr	r3, [pc, #112]	; (800b60c <UART_SetConfig+0x290>)
 800b59a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b59c:	e00d      	b.n	800b5ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b59e:	f7fd fdbb 	bl	8009118 <HAL_RCC_GetSysClockFreq>
 800b5a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b5a4:	e009      	b.n	800b5ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b5ac:	e005      	b.n	800b5ba <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b5b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f000 8137 	beq.w	800b830 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c6:	4a12      	ldr	r2, [pc, #72]	; (800b610 <UART_SetConfig+0x294>)
 800b5c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	685a      	ldr	r2, [r3, #4]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	005b      	lsls	r3, r3, #1
 800b5de:	4413      	add	r3, r2
 800b5e0:	69ba      	ldr	r2, [r7, #24]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d305      	bcc.n	800b5f2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5ec:	69ba      	ldr	r2, [r7, #24]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d910      	bls.n	800b614 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b5f8:	e11a      	b.n	800b830 <UART_SetConfig+0x4b4>
 800b5fa:	bf00      	nop
 800b5fc:	cfff69f3 	.word	0xcfff69f3
 800b600:	40008000 	.word	0x40008000
 800b604:	40013800 	.word	0x40013800
 800b608:	40004400 	.word	0x40004400
 800b60c:	00f42400 	.word	0x00f42400
 800b610:	0801ffe8 	.word	0x0801ffe8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b616:	2200      	movs	r2, #0
 800b618:	60bb      	str	r3, [r7, #8]
 800b61a:	60fa      	str	r2, [r7, #12]
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b620:	4a8e      	ldr	r2, [pc, #568]	; (800b85c <UART_SetConfig+0x4e0>)
 800b622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b626:	b29b      	uxth	r3, r3
 800b628:	2200      	movs	r2, #0
 800b62a:	603b      	str	r3, [r7, #0]
 800b62c:	607a      	str	r2, [r7, #4]
 800b62e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b632:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b636:	f7f5 fd19 	bl	800106c <__aeabi_uldivmod>
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	4610      	mov	r0, r2
 800b640:	4619      	mov	r1, r3
 800b642:	f04f 0200 	mov.w	r2, #0
 800b646:	f04f 0300 	mov.w	r3, #0
 800b64a:	020b      	lsls	r3, r1, #8
 800b64c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b650:	0202      	lsls	r2, r0, #8
 800b652:	6979      	ldr	r1, [r7, #20]
 800b654:	6849      	ldr	r1, [r1, #4]
 800b656:	0849      	lsrs	r1, r1, #1
 800b658:	2000      	movs	r0, #0
 800b65a:	460c      	mov	r4, r1
 800b65c:	4605      	mov	r5, r0
 800b65e:	eb12 0804 	adds.w	r8, r2, r4
 800b662:	eb43 0905 	adc.w	r9, r3, r5
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	469a      	mov	sl, r3
 800b66e:	4693      	mov	fp, r2
 800b670:	4652      	mov	r2, sl
 800b672:	465b      	mov	r3, fp
 800b674:	4640      	mov	r0, r8
 800b676:	4649      	mov	r1, r9
 800b678:	f7f5 fcf8 	bl	800106c <__aeabi_uldivmod>
 800b67c:	4602      	mov	r2, r0
 800b67e:	460b      	mov	r3, r1
 800b680:	4613      	mov	r3, r2
 800b682:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b684:	6a3b      	ldr	r3, [r7, #32]
 800b686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b68a:	d308      	bcc.n	800b69e <UART_SetConfig+0x322>
 800b68c:	6a3b      	ldr	r3, [r7, #32]
 800b68e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b692:	d204      	bcs.n	800b69e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	6a3a      	ldr	r2, [r7, #32]
 800b69a:	60da      	str	r2, [r3, #12]
 800b69c:	e0c8      	b.n	800b830 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b6a4:	e0c4      	b.n	800b830 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	69db      	ldr	r3, [r3, #28]
 800b6aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6ae:	d167      	bne.n	800b780 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800b6b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b6b4:	2b08      	cmp	r3, #8
 800b6b6:	d828      	bhi.n	800b70a <UART_SetConfig+0x38e>
 800b6b8:	a201      	add	r2, pc, #4	; (adr r2, 800b6c0 <UART_SetConfig+0x344>)
 800b6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6be:	bf00      	nop
 800b6c0:	0800b6e5 	.word	0x0800b6e5
 800b6c4:	0800b6ed 	.word	0x0800b6ed
 800b6c8:	0800b6f5 	.word	0x0800b6f5
 800b6cc:	0800b70b 	.word	0x0800b70b
 800b6d0:	0800b6fb 	.word	0x0800b6fb
 800b6d4:	0800b70b 	.word	0x0800b70b
 800b6d8:	0800b70b 	.word	0x0800b70b
 800b6dc:	0800b70b 	.word	0x0800b70b
 800b6e0:	0800b703 	.word	0x0800b703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6e4:	f7fd fdcc 	bl	8009280 <HAL_RCC_GetPCLK1Freq>
 800b6e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6ea:	e014      	b.n	800b716 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6ec:	f7fd fdda 	bl	80092a4 <HAL_RCC_GetPCLK2Freq>
 800b6f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6f2:	e010      	b.n	800b716 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6f4:	4b5a      	ldr	r3, [pc, #360]	; (800b860 <UART_SetConfig+0x4e4>)
 800b6f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6f8:	e00d      	b.n	800b716 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6fa:	f7fd fd0d 	bl	8009118 <HAL_RCC_GetSysClockFreq>
 800b6fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b700:	e009      	b.n	800b716 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b706:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b708:	e005      	b.n	800b716 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800b70a:	2300      	movs	r3, #0
 800b70c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b714:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 8089 	beq.w	800b830 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b722:	4a4e      	ldr	r2, [pc, #312]	; (800b85c <UART_SetConfig+0x4e0>)
 800b724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b728:	461a      	mov	r2, r3
 800b72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b730:	005a      	lsls	r2, r3, #1
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	085b      	lsrs	r3, r3, #1
 800b738:	441a      	add	r2, r3
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b742:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b744:	6a3b      	ldr	r3, [r7, #32]
 800b746:	2b0f      	cmp	r3, #15
 800b748:	d916      	bls.n	800b778 <UART_SetConfig+0x3fc>
 800b74a:	6a3b      	ldr	r3, [r7, #32]
 800b74c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b750:	d212      	bcs.n	800b778 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	b29b      	uxth	r3, r3
 800b756:	f023 030f 	bic.w	r3, r3, #15
 800b75a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b75c:	6a3b      	ldr	r3, [r7, #32]
 800b75e:	085b      	lsrs	r3, r3, #1
 800b760:	b29b      	uxth	r3, r3
 800b762:	f003 0307 	and.w	r3, r3, #7
 800b766:	b29a      	uxth	r2, r3
 800b768:	8bfb      	ldrh	r3, [r7, #30]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	8bfa      	ldrh	r2, [r7, #30]
 800b774:	60da      	str	r2, [r3, #12]
 800b776:	e05b      	b.n	800b830 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b77e:	e057      	b.n	800b830 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b780:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b784:	2b08      	cmp	r3, #8
 800b786:	d828      	bhi.n	800b7da <UART_SetConfig+0x45e>
 800b788:	a201      	add	r2, pc, #4	; (adr r2, 800b790 <UART_SetConfig+0x414>)
 800b78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78e:	bf00      	nop
 800b790:	0800b7b5 	.word	0x0800b7b5
 800b794:	0800b7bd 	.word	0x0800b7bd
 800b798:	0800b7c5 	.word	0x0800b7c5
 800b79c:	0800b7db 	.word	0x0800b7db
 800b7a0:	0800b7cb 	.word	0x0800b7cb
 800b7a4:	0800b7db 	.word	0x0800b7db
 800b7a8:	0800b7db 	.word	0x0800b7db
 800b7ac:	0800b7db 	.word	0x0800b7db
 800b7b0:	0800b7d3 	.word	0x0800b7d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7b4:	f7fd fd64 	bl	8009280 <HAL_RCC_GetPCLK1Freq>
 800b7b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7ba:	e014      	b.n	800b7e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7bc:	f7fd fd72 	bl	80092a4 <HAL_RCC_GetPCLK2Freq>
 800b7c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7c2:	e010      	b.n	800b7e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7c4:	4b26      	ldr	r3, [pc, #152]	; (800b860 <UART_SetConfig+0x4e4>)
 800b7c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b7c8:	e00d      	b.n	800b7e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7ca:	f7fd fca5 	bl	8009118 <HAL_RCC_GetSysClockFreq>
 800b7ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7d0:	e009      	b.n	800b7e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b7d8:	e005      	b.n	800b7e6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b7e4:	bf00      	nop
    }

    if (pclk != 0U)
 800b7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d021      	beq.n	800b830 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f0:	4a1a      	ldr	r2, [pc, #104]	; (800b85c <UART_SetConfig+0x4e0>)
 800b7f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	085b      	lsrs	r3, r3, #1
 800b804:	441a      	add	r2, r3
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b80e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b810:	6a3b      	ldr	r3, [r7, #32]
 800b812:	2b0f      	cmp	r3, #15
 800b814:	d909      	bls.n	800b82a <UART_SetConfig+0x4ae>
 800b816:	6a3b      	ldr	r3, [r7, #32]
 800b818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b81c:	d205      	bcs.n	800b82a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b81e:	6a3b      	ldr	r3, [r7, #32]
 800b820:	b29a      	uxth	r2, r3
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	60da      	str	r2, [r3, #12]
 800b828:	e002      	b.n	800b830 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	2201      	movs	r2, #1
 800b834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	2200      	movs	r2, #0
 800b844:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	2200      	movs	r2, #0
 800b84a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b84c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b850:	4618      	mov	r0, r3
 800b852:	3730      	adds	r7, #48	; 0x30
 800b854:	46bd      	mov	sp, r7
 800b856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b85a:	bf00      	nop
 800b85c:	0801ffe8 	.word	0x0801ffe8
 800b860:	00f42400 	.word	0x00f42400

0800b864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00a      	beq.n	800b88e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	430a      	orrs	r2, r1
 800b88c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b892:	f003 0302 	and.w	r3, r3, #2
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00a      	beq.n	800b8b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	430a      	orrs	r2, r1
 800b8ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b4:	f003 0304 	and.w	r3, r3, #4
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00a      	beq.n	800b8d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	430a      	orrs	r2, r1
 800b8d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d6:	f003 0308 	and.w	r3, r3, #8
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00a      	beq.n	800b8f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	430a      	orrs	r2, r1
 800b8f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f8:	f003 0310 	and.w	r3, r3, #16
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00a      	beq.n	800b916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	430a      	orrs	r2, r1
 800b914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b91a:	f003 0320 	and.w	r3, r3, #32
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00a      	beq.n	800b938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	430a      	orrs	r2, r1
 800b936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b940:	2b00      	cmp	r3, #0
 800b942:	d01a      	beq.n	800b97a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	430a      	orrs	r2, r1
 800b958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b95e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b962:	d10a      	bne.n	800b97a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	430a      	orrs	r2, r1
 800b978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b97e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00a      	beq.n	800b99c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	430a      	orrs	r2, r1
 800b99a:	605a      	str	r2, [r3, #4]
  }
}
 800b99c:	bf00      	nop
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bc80      	pop	{r7}
 800b9a4:	4770      	bx	lr

0800b9a6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b086      	sub	sp, #24
 800b9aa:	af02      	add	r7, sp, #8
 800b9ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b9b6:	f7f6 fed5 	bl	8002764 <HAL_GetTick>
 800b9ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f003 0308 	and.w	r3, r3, #8
 800b9c6:	2b08      	cmp	r3, #8
 800b9c8:	d10e      	bne.n	800b9e8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 f832 	bl	800ba42 <UART_WaitOnFlagUntilTimeout>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	e028      	b.n	800ba3a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f003 0304 	and.w	r3, r3, #4
 800b9f2:	2b04      	cmp	r3, #4
 800b9f4:	d10e      	bne.n	800ba14 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f81c 	bl	800ba42 <UART_WaitOnFlagUntilTimeout>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e012      	b.n	800ba3a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2220      	movs	r2, #32
 800ba18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2220      	movs	r2, #32
 800ba20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ba38:	2300      	movs	r3, #0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b09c      	sub	sp, #112	; 0x70
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	60f8      	str	r0, [r7, #12]
 800ba4a:	60b9      	str	r1, [r7, #8]
 800ba4c:	603b      	str	r3, [r7, #0]
 800ba4e:	4613      	mov	r3, r2
 800ba50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba52:	e0a9      	b.n	800bba8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba5a:	f000 80a5 	beq.w	800bba8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba5e:	f7f6 fe81 	bl	8002764 <HAL_GetTick>
 800ba62:	4602      	mov	r2, r0
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	1ad3      	subs	r3, r2, r3
 800ba68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d302      	bcc.n	800ba74 <UART_WaitOnFlagUntilTimeout+0x32>
 800ba6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d140      	bne.n	800baf6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba7c:	e853 3f00 	ldrex	r3, [r3]
 800ba80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ba82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ba88:	667b      	str	r3, [r7, #100]	; 0x64
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba94:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba9a:	e841 2300 	strex	r3, r2, [r1]
 800ba9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800baa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d1e6      	bne.n	800ba74 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3308      	adds	r3, #8
 800baac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bab0:	e853 3f00 	ldrex	r3, [r3]
 800bab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab8:	f023 0301 	bic.w	r3, r3, #1
 800babc:	663b      	str	r3, [r7, #96]	; 0x60
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	3308      	adds	r3, #8
 800bac4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bac6:	64ba      	str	r2, [r7, #72]	; 0x48
 800bac8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bacc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bace:	e841 2300 	strex	r3, r2, [r1]
 800bad2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1e5      	bne.n	800baa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2220      	movs	r2, #32
 800bade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2220      	movs	r2, #32
 800bae6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2200      	movs	r2, #0
 800baee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800baf2:	2303      	movs	r3, #3
 800baf4:	e069      	b.n	800bbca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f003 0304 	and.w	r3, r3, #4
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d051      	beq.n	800bba8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	69db      	ldr	r3, [r3, #28]
 800bb0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb12:	d149      	bne.n	800bba8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb26:	e853 3f00 	ldrex	r3, [r3]
 800bb2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb32:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	461a      	mov	r2, r3
 800bb3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb3c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb44:	e841 2300 	strex	r3, r2, [r1]
 800bb48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d1e6      	bne.n	800bb1e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	3308      	adds	r3, #8
 800bb56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	e853 3f00 	ldrex	r3, [r3]
 800bb5e:	613b      	str	r3, [r7, #16]
   return(result);
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	f023 0301 	bic.w	r3, r3, #1
 800bb66:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	3308      	adds	r3, #8
 800bb6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb70:	623a      	str	r2, [r7, #32]
 800bb72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb74:	69f9      	ldr	r1, [r7, #28]
 800bb76:	6a3a      	ldr	r2, [r7, #32]
 800bb78:	e841 2300 	strex	r3, r2, [r1]
 800bb7c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d1e5      	bne.n	800bb50 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2220      	movs	r2, #32
 800bb88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2220      	movs	r2, #32
 800bb90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2220      	movs	r2, #32
 800bb98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bba4:	2303      	movs	r3, #3
 800bba6:	e010      	b.n	800bbca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	69da      	ldr	r2, [r3, #28]
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	68ba      	ldr	r2, [r7, #8]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	bf0c      	ite	eq
 800bbb8:	2301      	moveq	r3, #1
 800bbba:	2300      	movne	r3, #0
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	79fb      	ldrb	r3, [r7, #7]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	f43f af46 	beq.w	800ba54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3770      	adds	r7, #112	; 0x70
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b0a3      	sub	sp, #140	; 0x8c
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	88fa      	ldrh	r2, [r7, #6]
 800bbec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	88fa      	ldrh	r2, [r7, #6]
 800bbf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc06:	d10e      	bne.n	800bc26 <UART_Start_Receive_IT+0x52>
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d105      	bne.n	800bc1c <UART_Start_Receive_IT+0x48>
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bc16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc1a:	e02d      	b.n	800bc78 <UART_Start_Receive_IT+0xa4>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	22ff      	movs	r2, #255	; 0xff
 800bc20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc24:	e028      	b.n	800bc78 <UART_Start_Receive_IT+0xa4>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d10d      	bne.n	800bc4a <UART_Start_Receive_IT+0x76>
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d104      	bne.n	800bc40 <UART_Start_Receive_IT+0x6c>
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	22ff      	movs	r2, #255	; 0xff
 800bc3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc3e:	e01b      	b.n	800bc78 <UART_Start_Receive_IT+0xa4>
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	227f      	movs	r2, #127	; 0x7f
 800bc44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc48:	e016      	b.n	800bc78 <UART_Start_Receive_IT+0xa4>
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc52:	d10d      	bne.n	800bc70 <UART_Start_Receive_IT+0x9c>
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d104      	bne.n	800bc66 <UART_Start_Receive_IT+0x92>
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	227f      	movs	r2, #127	; 0x7f
 800bc60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc64:	e008      	b.n	800bc78 <UART_Start_Receive_IT+0xa4>
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	223f      	movs	r2, #63	; 0x3f
 800bc6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc6e:	e003      	b.n	800bc78 <UART_Start_Receive_IT+0xa4>
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2222      	movs	r2, #34	; 0x22
 800bc84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	3308      	adds	r3, #8
 800bc8e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc92:	e853 3f00 	ldrex	r3, [r3]
 800bc96:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bc98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc9a:	f043 0301 	orr.w	r3, r3, #1
 800bc9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	3308      	adds	r3, #8
 800bca8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bcac:	673a      	str	r2, [r7, #112]	; 0x70
 800bcae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bcb2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bcb4:	e841 2300 	strex	r3, r2, [r1]
 800bcb8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800bcba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1e3      	bne.n	800bc88 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcc8:	d14f      	bne.n	800bd6a <UART_Start_Receive_IT+0x196>
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bcd0:	88fa      	ldrh	r2, [r7, #6]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d349      	bcc.n	800bd6a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcde:	d107      	bne.n	800bcf0 <UART_Start_Receive_IT+0x11c>
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	691b      	ldr	r3, [r3, #16]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d103      	bne.n	800bcf0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	4a46      	ldr	r2, [pc, #280]	; (800be04 <UART_Start_Receive_IT+0x230>)
 800bcec:	675a      	str	r2, [r3, #116]	; 0x74
 800bcee:	e002      	b.n	800bcf6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	4a45      	ldr	r2, [pc, #276]	; (800be08 <UART_Start_Receive_IT+0x234>)
 800bcf4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d01a      	beq.n	800bd34 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd06:	e853 3f00 	ldrex	r3, [r3]
 800bd0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bd0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd20:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd22:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd28:	e841 2300 	strex	r3, r2, [r1]
 800bd2c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bd2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1e4      	bne.n	800bcfe <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	3308      	adds	r3, #8
 800bd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3e:	e853 3f00 	ldrex	r3, [r3]
 800bd42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	3308      	adds	r3, #8
 800bd52:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bd54:	64ba      	str	r2, [r7, #72]	; 0x48
 800bd56:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd5c:	e841 2300 	strex	r3, r2, [r1]
 800bd60:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bd62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1e5      	bne.n	800bd34 <UART_Start_Receive_IT+0x160>
 800bd68:	e046      	b.n	800bdf8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd72:	d107      	bne.n	800bd84 <UART_Start_Receive_IT+0x1b0>
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	691b      	ldr	r3, [r3, #16]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d103      	bne.n	800bd84 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	4a23      	ldr	r2, [pc, #140]	; (800be0c <UART_Start_Receive_IT+0x238>)
 800bd80:	675a      	str	r2, [r3, #116]	; 0x74
 800bd82:	e002      	b.n	800bd8a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	4a22      	ldr	r2, [pc, #136]	; (800be10 <UART_Start_Receive_IT+0x23c>)
 800bd88:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d019      	beq.n	800bdc6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9a:	e853 3f00 	ldrex	r3, [r3]
 800bd9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bda6:	677b      	str	r3, [r7, #116]	; 0x74
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	461a      	mov	r2, r3
 800bdae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdb0:	637b      	str	r3, [r7, #52]	; 0x34
 800bdb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bdb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdb8:	e841 2300 	strex	r3, r2, [r1]
 800bdbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d1e6      	bne.n	800bd92 <UART_Start_Receive_IT+0x1be>
 800bdc4:	e018      	b.n	800bdf8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	e853 3f00 	ldrex	r3, [r3]
 800bdd2:	613b      	str	r3, [r7, #16]
   return(result);
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	f043 0320 	orr.w	r3, r3, #32
 800bdda:	67bb      	str	r3, [r7, #120]	; 0x78
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	461a      	mov	r2, r3
 800bde2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bde4:	623b      	str	r3, [r7, #32]
 800bde6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde8:	69f9      	ldr	r1, [r7, #28]
 800bdea:	6a3a      	ldr	r2, [r7, #32]
 800bdec:	e841 2300 	strex	r3, r2, [r1]
 800bdf0:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d1e6      	bne.n	800bdc6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	378c      	adds	r7, #140	; 0x8c
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bc80      	pop	{r7}
 800be02:	4770      	bx	lr
 800be04:	0800c7e9 	.word	0x0800c7e9
 800be08:	0800c489 	.word	0x0800c489
 800be0c:	0800c2d1 	.word	0x0800c2d1
 800be10:	0800c119 	.word	0x0800c119

0800be14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be14:	b480      	push	{r7}
 800be16:	b08f      	sub	sp, #60	; 0x3c
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be22:	6a3b      	ldr	r3, [r7, #32]
 800be24:	e853 3f00 	ldrex	r3, [r3]
 800be28:	61fb      	str	r3, [r7, #28]
   return(result);
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800be30:	637b      	str	r3, [r7, #52]	; 0x34
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	461a      	mov	r2, r3
 800be38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be3c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be42:	e841 2300 	strex	r3, r2, [r1]
 800be46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1e6      	bne.n	800be1c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	3308      	adds	r3, #8
 800be54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	e853 3f00 	ldrex	r3, [r3]
 800be5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800be64:	633b      	str	r3, [r7, #48]	; 0x30
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	3308      	adds	r3, #8
 800be6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be6e:	61ba      	str	r2, [r7, #24]
 800be70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be72:	6979      	ldr	r1, [r7, #20]
 800be74:	69ba      	ldr	r2, [r7, #24]
 800be76:	e841 2300 	strex	r3, r2, [r1]
 800be7a:	613b      	str	r3, [r7, #16]
   return(result);
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1e5      	bne.n	800be4e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2220      	movs	r2, #32
 800be86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800be8a:	bf00      	nop
 800be8c:	373c      	adds	r7, #60	; 0x3c
 800be8e:	46bd      	mov	sp, r7
 800be90:	bc80      	pop	{r7}
 800be92:	4770      	bx	lr

0800be94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be94:	b480      	push	{r7}
 800be96:	b095      	sub	sp, #84	; 0x54
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea4:	e853 3f00 	ldrex	r3, [r3]
 800bea8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800beb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	461a      	mov	r2, r3
 800beb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beba:	643b      	str	r3, [r7, #64]	; 0x40
 800bebc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bebe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bec2:	e841 2300 	strex	r3, r2, [r1]
 800bec6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1e6      	bne.n	800be9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	3308      	adds	r3, #8
 800bed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed6:	6a3b      	ldr	r3, [r7, #32]
 800bed8:	e853 3f00 	ldrex	r3, [r3]
 800bedc:	61fb      	str	r3, [r7, #28]
   return(result);
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bee4:	f023 0301 	bic.w	r3, r3, #1
 800bee8:	64bb      	str	r3, [r7, #72]	; 0x48
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	3308      	adds	r3, #8
 800bef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bef2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bef4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800befa:	e841 2300 	strex	r3, r2, [r1]
 800befe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1e3      	bne.n	800bece <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d118      	bne.n	800bf40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	e853 3f00 	ldrex	r3, [r3]
 800bf1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	f023 0310 	bic.w	r3, r3, #16
 800bf22:	647b      	str	r3, [r7, #68]	; 0x44
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf2c:	61bb      	str	r3, [r7, #24]
 800bf2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf30:	6979      	ldr	r1, [r7, #20]
 800bf32:	69ba      	ldr	r2, [r7, #24]
 800bf34:	e841 2300 	strex	r3, r2, [r1]
 800bf38:	613b      	str	r3, [r7, #16]
   return(result);
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1e6      	bne.n	800bf0e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2220      	movs	r2, #32
 800bf44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bf54:	bf00      	nop
 800bf56:	3754      	adds	r7, #84	; 0x54
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bc80      	pop	{r7}
 800bf5c:	4770      	bx	lr

0800bf5e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b090      	sub	sp, #64	; 0x40
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f003 0320 	and.w	r3, r3, #32
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d137      	bne.n	800bfea <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bf7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	3308      	adds	r3, #8
 800bf88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8c:	e853 3f00 	ldrex	r3, [r3]
 800bf90:	623b      	str	r3, [r7, #32]
   return(result);
 800bf92:	6a3b      	ldr	r3, [r7, #32]
 800bf94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf98:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfa2:	633a      	str	r2, [r7, #48]	; 0x30
 800bfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfaa:	e841 2300 	strex	r3, r2, [r1]
 800bfae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d1e5      	bne.n	800bf82 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	e853 3f00 	ldrex	r3, [r3]
 800bfc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfca:	637b      	str	r3, [r7, #52]	; 0x34
 800bfcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd4:	61fb      	str	r3, [r7, #28]
 800bfd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd8:	69b9      	ldr	r1, [r7, #24]
 800bfda:	69fa      	ldr	r2, [r7, #28]
 800bfdc:	e841 2300 	strex	r3, r2, [r1]
 800bfe0:	617b      	str	r3, [r7, #20]
   return(result);
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1e6      	bne.n	800bfb6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bfe8:	e002      	b.n	800bff0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bfea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bfec:	f7f7 f86e 	bl	80030cc <HAL_UART_TxCpltCallback>
}
 800bff0:	bf00      	nop
 800bff2:	3740      	adds	r7, #64	; 0x40
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c004:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	f7ff f99a 	bl	800b340 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c00c:	bf00      	nop
 800c00e:	3710      	adds	r7, #16
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c020:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c028:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c030:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c03c:	2b80      	cmp	r3, #128	; 0x80
 800c03e:	d109      	bne.n	800c054 <UART_DMAError+0x40>
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	2b21      	cmp	r3, #33	; 0x21
 800c044:	d106      	bne.n	800c054 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	2200      	movs	r2, #0
 800c04a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c04e:	6978      	ldr	r0, [r7, #20]
 800c050:	f7ff fee0 	bl	800be14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c05e:	2b40      	cmp	r3, #64	; 0x40
 800c060:	d109      	bne.n	800c076 <UART_DMAError+0x62>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2b22      	cmp	r3, #34	; 0x22
 800c066:	d106      	bne.n	800c076 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c070:	6978      	ldr	r0, [r7, #20]
 800c072:	f7ff ff0f 	bl	800be94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c07c:	f043 0210 	orr.w	r2, r3, #16
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c086:	6978      	ldr	r0, [r7, #20]
 800c088:	f7ff f963 	bl	800b352 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c08c:	bf00      	nop
 800c08e:	3718      	adds	r7, #24
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f7ff f94d 	bl	800b352 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0b8:	bf00      	nop
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b088      	sub	sp, #32
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	e853 3f00 	ldrex	r3, [r3]
 800c0d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0dc:	61fb      	str	r3, [r7, #28]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	61bb      	str	r3, [r7, #24]
 800c0e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ea:	6979      	ldr	r1, [r7, #20]
 800c0ec:	69ba      	ldr	r2, [r7, #24]
 800c0ee:	e841 2300 	strex	r3, r2, [r1]
 800c0f2:	613b      	str	r3, [r7, #16]
   return(result);
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1e6      	bne.n	800c0c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2220      	movs	r2, #32
 800c0fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7f6 ffdf 	bl	80030cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c10e:	bf00      	nop
 800c110:	3720      	adds	r7, #32
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
	...

0800c118 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b09c      	sub	sp, #112	; 0x70
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c126:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c130:	2b22      	cmp	r3, #34	; 0x22
 800c132:	f040 80be 	bne.w	800c2b2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c140:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c144:	b2d9      	uxtb	r1, r3
 800c146:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c14a:	b2da      	uxtb	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c150:	400a      	ands	r2, r1
 800c152:	b2d2      	uxtb	r2, r2
 800c154:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c15a:	1c5a      	adds	r2, r3, #1
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c166:	b29b      	uxth	r3, r3
 800c168:	3b01      	subs	r3, #1
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c178:	b29b      	uxth	r3, r3
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f040 80a1 	bne.w	800c2c2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c188:	e853 3f00 	ldrex	r3, [r3]
 800c18c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c18e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c190:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c194:	66bb      	str	r3, [r7, #104]	; 0x68
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	461a      	mov	r2, r3
 800c19c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c19e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c1a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1a6:	e841 2300 	strex	r3, r2, [r1]
 800c1aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c1ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d1e6      	bne.n	800c180 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	3308      	adds	r3, #8
 800c1b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1bc:	e853 3f00 	ldrex	r3, [r3]
 800c1c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c4:	f023 0301 	bic.w	r3, r3, #1
 800c1c8:	667b      	str	r3, [r7, #100]	; 0x64
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	3308      	adds	r3, #8
 800c1d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1d2:	647a      	str	r2, [r7, #68]	; 0x44
 800c1d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c1d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1da:	e841 2300 	strex	r3, r2, [r1]
 800c1de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d1e5      	bne.n	800c1b2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2220      	movs	r2, #32
 800c1ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a33      	ldr	r2, [pc, #204]	; (800c2cc <UART_RxISR_8BIT+0x1b4>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d01f      	beq.n	800c244 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d018      	beq.n	800c244 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21a:	e853 3f00 	ldrex	r3, [r3]
 800c21e:	623b      	str	r3, [r7, #32]
   return(result);
 800c220:	6a3b      	ldr	r3, [r7, #32]
 800c222:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c226:	663b      	str	r3, [r7, #96]	; 0x60
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	461a      	mov	r2, r3
 800c22e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c230:	633b      	str	r3, [r7, #48]	; 0x30
 800c232:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c238:	e841 2300 	strex	r3, r2, [r1]
 800c23c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1e6      	bne.n	800c212 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d12e      	bne.n	800c2aa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	e853 3f00 	ldrex	r3, [r3]
 800c25e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f023 0310 	bic.w	r3, r3, #16
 800c266:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	461a      	mov	r2, r3
 800c26e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c270:	61fb      	str	r3, [r7, #28]
 800c272:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c274:	69b9      	ldr	r1, [r7, #24]
 800c276:	69fa      	ldr	r2, [r7, #28]
 800c278:	e841 2300 	strex	r3, r2, [r1]
 800c27c:	617b      	str	r3, [r7, #20]
   return(result);
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d1e6      	bne.n	800c252 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	69db      	ldr	r3, [r3, #28]
 800c28a:	f003 0310 	and.w	r3, r3, #16
 800c28e:	2b10      	cmp	r3, #16
 800c290:	d103      	bne.n	800c29a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2210      	movs	r2, #16
 800c298:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7ff f85e 	bl	800b364 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c2a8:	e00b      	b.n	800c2c2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f7f6 ff24 	bl	80030f8 <HAL_UART_RxCpltCallback>
}
 800c2b0:	e007      	b.n	800c2c2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	699a      	ldr	r2, [r3, #24]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f042 0208 	orr.w	r2, r2, #8
 800c2c0:	619a      	str	r2, [r3, #24]
}
 800c2c2:	bf00      	nop
 800c2c4:	3770      	adds	r7, #112	; 0x70
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	40008000 	.word	0x40008000

0800c2d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b09c      	sub	sp, #112	; 0x70
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2e8:	2b22      	cmp	r3, #34	; 0x22
 800c2ea:	f040 80be 	bne.w	800c46a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2fc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c2fe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c302:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c306:	4013      	ands	r3, r2
 800c308:	b29a      	uxth	r2, r3
 800c30a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c30c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c312:	1c9a      	adds	r2, r3, #2
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c31e:	b29b      	uxth	r3, r3
 800c320:	3b01      	subs	r3, #1
 800c322:	b29a      	uxth	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c330:	b29b      	uxth	r3, r3
 800c332:	2b00      	cmp	r3, #0
 800c334:	f040 80a1 	bne.w	800c47a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c340:	e853 3f00 	ldrex	r3, [r3]
 800c344:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c34c:	667b      	str	r3, [r7, #100]	; 0x64
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	461a      	mov	r2, r3
 800c354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c356:	657b      	str	r3, [r7, #84]	; 0x54
 800c358:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c35c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c35e:	e841 2300 	strex	r3, r2, [r1]
 800c362:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1e6      	bne.n	800c338 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	3308      	adds	r3, #8
 800c370:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c374:	e853 3f00 	ldrex	r3, [r3]
 800c378:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37c:	f023 0301 	bic.w	r3, r3, #1
 800c380:	663b      	str	r3, [r7, #96]	; 0x60
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	3308      	adds	r3, #8
 800c388:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c38a:	643a      	str	r2, [r7, #64]	; 0x40
 800c38c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c390:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c392:	e841 2300 	strex	r3, r2, [r1]
 800c396:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1e5      	bne.n	800c36a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2220      	movs	r2, #32
 800c3a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a33      	ldr	r2, [pc, #204]	; (800c484 <UART_RxISR_16BIT+0x1b4>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d01f      	beq.n	800c3fc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d018      	beq.n	800c3fc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d0:	6a3b      	ldr	r3, [r7, #32]
 800c3d2:	e853 3f00 	ldrex	r3, [r3]
 800c3d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c3de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3ea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3f0:	e841 2300 	strex	r3, r2, [r1]
 800c3f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d1e6      	bne.n	800c3ca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c400:	2b01      	cmp	r3, #1
 800c402:	d12e      	bne.n	800c462 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	e853 3f00 	ldrex	r3, [r3]
 800c416:	60bb      	str	r3, [r7, #8]
   return(result);
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	f023 0310 	bic.w	r3, r3, #16
 800c41e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	461a      	mov	r2, r3
 800c426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c428:	61bb      	str	r3, [r7, #24]
 800c42a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42c:	6979      	ldr	r1, [r7, #20]
 800c42e:	69ba      	ldr	r2, [r7, #24]
 800c430:	e841 2300 	strex	r3, r2, [r1]
 800c434:	613b      	str	r3, [r7, #16]
   return(result);
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1e6      	bne.n	800c40a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	69db      	ldr	r3, [r3, #28]
 800c442:	f003 0310 	and.w	r3, r3, #16
 800c446:	2b10      	cmp	r3, #16
 800c448:	d103      	bne.n	800c452 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2210      	movs	r2, #16
 800c450:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c458:	4619      	mov	r1, r3
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f7fe ff82 	bl	800b364 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c460:	e00b      	b.n	800c47a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f7f6 fe48 	bl	80030f8 <HAL_UART_RxCpltCallback>
}
 800c468:	e007      	b.n	800c47a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	699a      	ldr	r2, [r3, #24]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f042 0208 	orr.w	r2, r2, #8
 800c478:	619a      	str	r2, [r3, #24]
}
 800c47a:	bf00      	nop
 800c47c:	3770      	adds	r7, #112	; 0x70
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	40008000 	.word	0x40008000

0800c488 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b0ac      	sub	sp, #176	; 0xb0
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c496:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	69db      	ldr	r3, [r3, #28]
 800c4a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4be:	2b22      	cmp	r3, #34	; 0x22
 800c4c0:	f040 8182 	bne.w	800c7c8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c4ca:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c4ce:	e125      	b.n	800c71c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c4da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c4de:	b2d9      	uxtb	r1, r3
 800c4e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c4e4:	b2da      	uxtb	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ea:	400a      	ands	r2, r1
 800c4ec:	b2d2      	uxtb	r2, r2
 800c4ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4f4:	1c5a      	adds	r2, r3, #1
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c500:	b29b      	uxth	r3, r3
 800c502:	3b01      	subs	r3, #1
 800c504:	b29a      	uxth	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	69db      	ldr	r3, [r3, #28]
 800c512:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c51a:	f003 0307 	and.w	r3, r3, #7
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d053      	beq.n	800c5ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c526:	f003 0301 	and.w	r3, r3, #1
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d011      	beq.n	800c552 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c52e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00b      	beq.n	800c552 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2201      	movs	r2, #1
 800c540:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c548:	f043 0201 	orr.w	r2, r3, #1
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c556:	f003 0302 	and.w	r3, r3, #2
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d011      	beq.n	800c582 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c55e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c562:	f003 0301 	and.w	r3, r3, #1
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00b      	beq.n	800c582 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	2202      	movs	r2, #2
 800c570:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c578:	f043 0204 	orr.w	r2, r3, #4
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c586:	f003 0304 	and.w	r3, r3, #4
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d011      	beq.n	800c5b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c58e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c592:	f003 0301 	and.w	r3, r3, #1
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00b      	beq.n	800c5b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2204      	movs	r2, #4
 800c5a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5a8:	f043 0202 	orr.w	r2, r3, #2
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d006      	beq.n	800c5ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f7fe fec8 	bl	800b352 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f040 80a2 	bne.w	800c71c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5e0:	e853 3f00 	ldrex	r3, [r3]
 800c5e4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c5e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c5fc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c600:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c602:	e841 2300 	strex	r3, r2, [r1]
 800c606:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1e4      	bne.n	800c5d8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	3308      	adds	r3, #8
 800c614:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c618:	e853 3f00 	ldrex	r3, [r3]
 800c61c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c61e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c624:	f023 0301 	bic.w	r3, r3, #1
 800c628:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	3308      	adds	r3, #8
 800c632:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c636:	66ba      	str	r2, [r7, #104]	; 0x68
 800c638:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c63a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c63c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c63e:	e841 2300 	strex	r3, r2, [r1]
 800c642:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1e1      	bne.n	800c60e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2220      	movs	r2, #32
 800c64e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2200      	movs	r2, #0
 800c656:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4a5f      	ldr	r2, [pc, #380]	; (800c7e0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d021      	beq.n	800c6ac <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c672:	2b00      	cmp	r3, #0
 800c674:	d01a      	beq.n	800c6ac <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c67e:	e853 3f00 	ldrex	r3, [r3]
 800c682:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c686:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c68a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	461a      	mov	r2, r3
 800c694:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c698:	657b      	str	r3, [r7, #84]	; 0x54
 800c69a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c69e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c6a0:	e841 2300 	strex	r3, r2, [r1]
 800c6a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c6a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1e4      	bne.n	800c676 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d130      	bne.n	800c716 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c2:	e853 3f00 	ldrex	r3, [r3]
 800c6c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ca:	f023 0310 	bic.w	r3, r3, #16
 800c6ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6dc:	643b      	str	r3, [r7, #64]	; 0x40
 800c6de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6e4:	e841 2300 	strex	r3, r2, [r1]
 800c6e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d1e4      	bne.n	800c6ba <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	69db      	ldr	r3, [r3, #28]
 800c6f6:	f003 0310 	and.w	r3, r3, #16
 800c6fa:	2b10      	cmp	r3, #16
 800c6fc:	d103      	bne.n	800c706 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2210      	movs	r2, #16
 800c704:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c70c:	4619      	mov	r1, r3
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7fe fe28 	bl	800b364 <HAL_UARTEx_RxEventCallback>
 800c714:	e002      	b.n	800c71c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f7f6 fcee 	bl	80030f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c71c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c720:	2b00      	cmp	r3, #0
 800c722:	d006      	beq.n	800c732 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c728:	f003 0320 	and.w	r3, r3, #32
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f47f aecf 	bne.w	800c4d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c738:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c73c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c740:	2b00      	cmp	r3, #0
 800c742:	d049      	beq.n	800c7d8 <UART_RxISR_8BIT_FIFOEN+0x350>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c74a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c74e:	429a      	cmp	r2, r3
 800c750:	d242      	bcs.n	800c7d8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	3308      	adds	r3, #8
 800c758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75a:	6a3b      	ldr	r3, [r7, #32]
 800c75c:	e853 3f00 	ldrex	r3, [r3]
 800c760:	61fb      	str	r3, [r7, #28]
   return(result);
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	3308      	adds	r3, #8
 800c772:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c776:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c778:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c77c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c77e:	e841 2300 	strex	r3, r2, [r1]
 800c782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1e3      	bne.n	800c752 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	4a15      	ldr	r2, [pc, #84]	; (800c7e4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c78e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	e853 3f00 	ldrex	r3, [r3]
 800c79c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	f043 0320 	orr.w	r3, r3, #32
 800c7a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c7b2:	61bb      	str	r3, [r7, #24]
 800c7b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b6:	6979      	ldr	r1, [r7, #20]
 800c7b8:	69ba      	ldr	r2, [r7, #24]
 800c7ba:	e841 2300 	strex	r3, r2, [r1]
 800c7be:	613b      	str	r3, [r7, #16]
   return(result);
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d1e4      	bne.n	800c790 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c7c6:	e007      	b.n	800c7d8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	699a      	ldr	r2, [r3, #24]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f042 0208 	orr.w	r2, r2, #8
 800c7d6:	619a      	str	r2, [r3, #24]
}
 800c7d8:	bf00      	nop
 800c7da:	37b0      	adds	r7, #176	; 0xb0
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	40008000 	.word	0x40008000
 800c7e4:	0800c119 	.word	0x0800c119

0800c7e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b0ae      	sub	sp, #184	; 0xb8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c7f6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	69db      	ldr	r3, [r3, #28]
 800c800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c81e:	2b22      	cmp	r3, #34	; 0x22
 800c820:	f040 8186 	bne.w	800cb30 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c82a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c82e:	e129      	b.n	800ca84 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c836:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c83e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c842:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c846:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c84a:	4013      	ands	r3, r2
 800c84c:	b29a      	uxth	r2, r3
 800c84e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c852:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c858:	1c9a      	adds	r2, r3, #2
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c864:	b29b      	uxth	r3, r3
 800c866:	3b01      	subs	r3, #1
 800c868:	b29a      	uxth	r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	69db      	ldr	r3, [r3, #28]
 800c876:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c87a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c87e:	f003 0307 	and.w	r3, r3, #7
 800c882:	2b00      	cmp	r3, #0
 800c884:	d053      	beq.n	800c92e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c88a:	f003 0301 	and.w	r3, r3, #1
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d011      	beq.n	800c8b6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00b      	beq.n	800c8b6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8ac:	f043 0201 	orr.w	r2, r3, #1
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c8b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c8ba:	f003 0302 	and.w	r3, r3, #2
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d011      	beq.n	800c8e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c8c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c8c6:	f003 0301 	and.w	r3, r3, #1
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00b      	beq.n	800c8e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2202      	movs	r2, #2
 800c8d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8dc:	f043 0204 	orr.w	r2, r3, #4
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c8e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c8ea:	f003 0304 	and.w	r3, r3, #4
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d011      	beq.n	800c916 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c8f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c8f6:	f003 0301 	and.w	r3, r3, #1
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00b      	beq.n	800c916 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2204      	movs	r2, #4
 800c904:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c90c:	f043 0202 	orr.w	r2, r3, #2
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d006      	beq.n	800c92e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7fe fd16 	bl	800b352 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c934:	b29b      	uxth	r3, r3
 800c936:	2b00      	cmp	r3, #0
 800c938:	f040 80a4 	bne.w	800ca84 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c944:	e853 3f00 	ldrex	r3, [r3]
 800c948:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c94a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c94c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	461a      	mov	r2, r3
 800c95a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c95e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c962:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c964:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c966:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c96a:	e841 2300 	strex	r3, r2, [r1]
 800c96e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c972:	2b00      	cmp	r3, #0
 800c974:	d1e2      	bne.n	800c93c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	3308      	adds	r3, #8
 800c97c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c980:	e853 3f00 	ldrex	r3, [r3]
 800c984:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c98c:	f023 0301 	bic.w	r3, r3, #1
 800c990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	3308      	adds	r3, #8
 800c99a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c99e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c9a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c9a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c9a6:	e841 2300 	strex	r3, r2, [r1]
 800c9aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c9ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1e1      	bne.n	800c976 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2220      	movs	r2, #32
 800c9b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a5f      	ldr	r2, [pc, #380]	; (800cb48 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d021      	beq.n	800ca14 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d01a      	beq.n	800ca14 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9e6:	e853 3f00 	ldrex	r3, [r3]
 800c9ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c9ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c9f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca00:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca08:	e841 2300 	strex	r3, r2, [r1]
 800ca0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ca0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d1e4      	bne.n	800c9de <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d130      	bne.n	800ca7e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2a:	e853 3f00 	ldrex	r3, [r3]
 800ca2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca32:	f023 0310 	bic.w	r3, r3, #16
 800ca36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	461a      	mov	r2, r3
 800ca40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ca44:	647b      	str	r3, [r7, #68]	; 0x44
 800ca46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca4c:	e841 2300 	strex	r3, r2, [r1]
 800ca50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ca52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d1e4      	bne.n	800ca22 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	69db      	ldr	r3, [r3, #28]
 800ca5e:	f003 0310 	and.w	r3, r3, #16
 800ca62:	2b10      	cmp	r3, #16
 800ca64:	d103      	bne.n	800ca6e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2210      	movs	r2, #16
 800ca6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ca74:	4619      	mov	r1, r3
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f7fe fc74 	bl	800b364 <HAL_UARTEx_RxEventCallback>
 800ca7c:	e002      	b.n	800ca84 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f7f6 fb3a 	bl	80030f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ca84:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d006      	beq.n	800ca9a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800ca8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ca90:	f003 0320 	and.w	r3, r3, #32
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	f47f aecb 	bne.w	800c830 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800caa0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800caa4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d049      	beq.n	800cb40 <UART_RxISR_16BIT_FIFOEN+0x358>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cab2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d242      	bcs.n	800cb40 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	3308      	adds	r3, #8
 800cac0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac4:	e853 3f00 	ldrex	r3, [r3]
 800cac8:	623b      	str	r3, [r7, #32]
   return(result);
 800caca:	6a3b      	ldr	r3, [r7, #32]
 800cacc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cad0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	3308      	adds	r3, #8
 800cada:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cade:	633a      	str	r2, [r7, #48]	; 0x30
 800cae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cae6:	e841 2300 	strex	r3, r2, [r1]
 800caea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800caec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1e3      	bne.n	800caba <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	4a15      	ldr	r2, [pc, #84]	; (800cb4c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800caf6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	e853 3f00 	ldrex	r3, [r3]
 800cb04:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f043 0320 	orr.w	r3, r3, #32
 800cb0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	461a      	mov	r2, r3
 800cb16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb1a:	61fb      	str	r3, [r7, #28]
 800cb1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1e:	69b9      	ldr	r1, [r7, #24]
 800cb20:	69fa      	ldr	r2, [r7, #28]
 800cb22:	e841 2300 	strex	r3, r2, [r1]
 800cb26:	617b      	str	r3, [r7, #20]
   return(result);
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1e4      	bne.n	800caf8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb2e:	e007      	b.n	800cb40 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	699a      	ldr	r2, [r3, #24]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f042 0208 	orr.w	r2, r2, #8
 800cb3e:	619a      	str	r2, [r3, #24]
}
 800cb40:	bf00      	nop
 800cb42:	37b8      	adds	r7, #184	; 0xb8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	40008000 	.word	0x40008000
 800cb4c:	0800c2d1 	.word	0x0800c2d1

0800cb50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bc80      	pop	{r7}
 800cb60:	4770      	bx	lr

0800cb62 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cb62:	b480      	push	{r7}
 800cb64:	b083      	sub	sp, #12
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cb6a:	bf00      	nop
 800cb6c:	370c      	adds	r7, #12
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bc80      	pop	{r7}
 800cb72:	4770      	bx	lr

0800cb74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cb7c:	bf00      	nop
 800cb7e:	370c      	adds	r7, #12
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bc80      	pop	{r7}
 800cb84:	4770      	bx	lr

0800cb86 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b088      	sub	sp, #32
 800cb8a:	af02      	add	r7, sp, #8
 800cb8c:	60f8      	str	r0, [r7, #12]
 800cb8e:	1d3b      	adds	r3, r7, #4
 800cb90:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d101      	bne.n	800cba6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800cba2:	2302      	movs	r3, #2
 800cba4:	e046      	b.n	800cc34 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2201      	movs	r2, #1
 800cbaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2224      	movs	r2, #36	; 0x24
 800cbb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f022 0201 	bic.w	r2, r2, #1
 800cbc4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	430a      	orrs	r2, r1
 800cbd8:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d105      	bne.n	800cbec <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800cbe0:	1d3b      	adds	r3, r7, #4
 800cbe2:	e893 0006 	ldmia.w	r3, {r1, r2}
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	f000 f911 	bl	800ce0e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f042 0201 	orr.w	r2, r2, #1
 800cbfa:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cbfc:	f7f5 fdb2 	bl	8002764 <HAL_GetTick>
 800cc00:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc06:	9300      	str	r3, [sp, #0]
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f7fe ff16 	bl	800ba42 <UART_WaitOnFlagUntilTimeout>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d002      	beq.n	800cc22 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800cc1c:	2303      	movs	r3, #3
 800cc1e:	75fb      	strb	r3, [r7, #23]
 800cc20:	e003      	b.n	800cc2a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2220      	movs	r2, #32
 800cc26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800cc32:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3718      	adds	r7, #24
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b089      	sub	sp, #36	; 0x24
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d101      	bne.n	800cc52 <HAL_UARTEx_EnableStopMode+0x16>
 800cc4e:	2302      	movs	r3, #2
 800cc50:	e021      	b.n	800cc96 <HAL_UARTEx_EnableStopMode+0x5a>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2201      	movs	r2, #1
 800cc56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	e853 3f00 	ldrex	r3, [r3]
 800cc66:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	f043 0302 	orr.w	r3, r3, #2
 800cc6e:	61fb      	str	r3, [r7, #28]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	461a      	mov	r2, r3
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	61bb      	str	r3, [r7, #24]
 800cc7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7c:	6979      	ldr	r1, [r7, #20]
 800cc7e:	69ba      	ldr	r2, [r7, #24]
 800cc80:	e841 2300 	strex	r3, r2, [r1]
 800cc84:	613b      	str	r3, [r7, #16]
   return(result);
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1e6      	bne.n	800cc5a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3724      	adds	r7, #36	; 0x24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bc80      	pop	{r7}
 800cc9e:	4770      	bx	lr

0800cca0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d101      	bne.n	800ccb6 <HAL_UARTEx_EnableFifoMode+0x16>
 800ccb2:	2302      	movs	r3, #2
 800ccb4:	e02b      	b.n	800cd0e <HAL_UARTEx_EnableFifoMode+0x6e>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2201      	movs	r2, #1
 800ccba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2224      	movs	r2, #36	; 0x24
 800ccc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f022 0201 	bic.w	r2, r2, #1
 800ccdc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cce4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ccec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 f8ac 	bl	800ce54 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2220      	movs	r2, #32
 800cd00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cd0c:	2300      	movs	r3, #0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b084      	sub	sp, #16
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d101      	bne.n	800cd2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd2a:	2302      	movs	r3, #2
 800cd2c:	e02d      	b.n	800cd8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2201      	movs	r2, #1
 800cd32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2224      	movs	r2, #36	; 0x24
 800cd3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f022 0201 	bic.w	r2, r2, #1
 800cd54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	683a      	ldr	r2, [r7, #0]
 800cd66:	430a      	orrs	r2, r1
 800cd68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 f872 	bl	800ce54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	68fa      	ldr	r2, [r7, #12]
 800cd76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2220      	movs	r2, #32
 800cd7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3710      	adds	r7, #16
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b084      	sub	sp, #16
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
 800cd9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d101      	bne.n	800cdaa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cda6:	2302      	movs	r3, #2
 800cda8:	e02d      	b.n	800ce06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2201      	movs	r2, #1
 800cdae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2224      	movs	r2, #36	; 0x24
 800cdb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f022 0201 	bic.w	r2, r2, #1
 800cdd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	683a      	ldr	r2, [r7, #0]
 800cde2:	430a      	orrs	r2, r1
 800cde4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 f834 	bl	800ce54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2220      	movs	r2, #32
 800cdf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ce0e:	b480      	push	{r7}
 800ce10:	b085      	sub	sp, #20
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	60f8      	str	r0, [r7, #12]
 800ce16:	1d3b      	adds	r3, r7, #4
 800ce18:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	f023 0210 	bic.w	r2, r3, #16
 800ce26:	893b      	ldrh	r3, [r7, #8]
 800ce28:	4619      	mov	r1, r3
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	430a      	orrs	r2, r1
 800ce30:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800ce3c:	7abb      	ldrb	r3, [r7, #10]
 800ce3e:	061a      	lsls	r2, r3, #24
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	430a      	orrs	r2, r1
 800ce46:	605a      	str	r2, [r3, #4]
}
 800ce48:	bf00      	nop
 800ce4a:	3714      	adds	r7, #20
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bc80      	pop	{r7}
 800ce50:	4770      	bx	lr
	...

0800ce54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d108      	bne.n	800ce76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ce74:	e031      	b.n	800ceda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ce76:	2308      	movs	r3, #8
 800ce78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ce7a:	2308      	movs	r3, #8
 800ce7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	689b      	ldr	r3, [r3, #8]
 800ce84:	0e5b      	lsrs	r3, r3, #25
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	f003 0307 	and.w	r3, r3, #7
 800ce8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	0f5b      	lsrs	r3, r3, #29
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	f003 0307 	and.w	r3, r3, #7
 800ce9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce9e:	7bbb      	ldrb	r3, [r7, #14]
 800cea0:	7b3a      	ldrb	r2, [r7, #12]
 800cea2:	4910      	ldr	r1, [pc, #64]	; (800cee4 <UARTEx_SetNbDataToProcess+0x90>)
 800cea4:	5c8a      	ldrb	r2, [r1, r2]
 800cea6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ceaa:	7b3a      	ldrb	r2, [r7, #12]
 800ceac:	490e      	ldr	r1, [pc, #56]	; (800cee8 <UARTEx_SetNbDataToProcess+0x94>)
 800ceae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ceb0:	fb93 f3f2 	sdiv	r3, r3, r2
 800ceb4:	b29a      	uxth	r2, r3
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cebc:	7bfb      	ldrb	r3, [r7, #15]
 800cebe:	7b7a      	ldrb	r2, [r7, #13]
 800cec0:	4908      	ldr	r1, [pc, #32]	; (800cee4 <UARTEx_SetNbDataToProcess+0x90>)
 800cec2:	5c8a      	ldrb	r2, [r1, r2]
 800cec4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cec8:	7b7a      	ldrb	r2, [r7, #13]
 800ceca:	4907      	ldr	r1, [pc, #28]	; (800cee8 <UARTEx_SetNbDataToProcess+0x94>)
 800cecc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cece:	fb93 f3f2 	sdiv	r3, r3, r2
 800ced2:	b29a      	uxth	r2, r3
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ceda:	bf00      	nop
 800cedc:	3714      	adds	r7, #20
 800cede:	46bd      	mov	sp, r7
 800cee0:	bc80      	pop	{r7}
 800cee2:	4770      	bx	lr
 800cee4:	08020000 	.word	0x08020000
 800cee8:	08020008 	.word	0x08020008

0800ceec <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800cef0:	f7f5 fad8 	bl	80024a4 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800cef4:	f000 f820 	bl	800cf38 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800cef8:	bf00      	nop
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800cf00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf04:	f011 fb82 	bl	801e60c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800cf08:	bf00      	nop
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800cf10:	f3bf 8f4f 	dsb	sy
}
 800cf14:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cf16:	4b06      	ldr	r3, [pc, #24]	; (800cf30 <__NVIC_SystemReset+0x24>)
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cf1e:	4904      	ldr	r1, [pc, #16]	; (800cf30 <__NVIC_SystemReset+0x24>)
 800cf20:	4b04      	ldr	r3, [pc, #16]	; (800cf34 <__NVIC_SystemReset+0x28>)
 800cf22:	4313      	orrs	r3, r2
 800cf24:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800cf26:	f3bf 8f4f 	dsb	sy
}
 800cf2a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cf2c:	bf00      	nop
 800cf2e:	e7fd      	b.n	800cf2c <__NVIC_SystemReset+0x20>
 800cf30:	e000ed00 	.word	0xe000ed00
 800cf34:	05fa0004 	.word	0x05fa0004

0800cf38 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b086      	sub	sp, #24
 800cf3c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800cf42:	2300      	movs	r3, #0
 800cf44:	9302      	str	r3, [sp, #8]
 800cf46:	2303      	movs	r3, #3
 800cf48:	9301      	str	r3, [sp, #4]
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	9300      	str	r3, [sp, #0]
 800cf4e:	4b59      	ldr	r3, [pc, #356]	; (800d0b4 <LoRaWAN_Init+0x17c>)
 800cf50:	2200      	movs	r2, #0
 800cf52:	2100      	movs	r1, #0
 800cf54:	2002      	movs	r0, #2
 800cf56:	f011 ffa7 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	9302      	str	r3, [sp, #8]
 800cf5e:	2305      	movs	r3, #5
 800cf60:	9301      	str	r3, [sp, #4]
 800cf62:	2302      	movs	r3, #2
 800cf64:	9300      	str	r3, [sp, #0]
 800cf66:	4b54      	ldr	r3, [pc, #336]	; (800d0b8 <LoRaWAN_Init+0x180>)
 800cf68:	2200      	movs	r2, #0
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	2002      	movs	r0, #2
 800cf6e:	f011 ff9b 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800cf72:	2300      	movs	r3, #0
 800cf74:	9302      	str	r3, [sp, #8]
 800cf76:	2303      	movs	r3, #3
 800cf78:	9301      	str	r3, [sp, #4]
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	4b4f      	ldr	r3, [pc, #316]	; (800d0bc <LoRaWAN_Init+0x184>)
 800cf80:	2200      	movs	r2, #0
 800cf82:	2100      	movs	r1, #0
 800cf84:	2002      	movs	r0, #2
 800cf86:	f011 ff8f 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800cf8a:	1d3b      	adds	r3, r7, #4
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	2000      	movs	r0, #0
 800cf90:	f003 fa70 	bl	8010474 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	0e1b      	lsrs	r3, r3, #24
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	0c1b      	lsrs	r3, r3, #16
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	0a1b      	lsrs	r3, r3, #8
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	9302      	str	r3, [sp, #8]
 800cfac:	9101      	str	r1, [sp, #4]
 800cfae:	9200      	str	r2, [sp, #0]
 800cfb0:	4b43      	ldr	r3, [pc, #268]	; (800d0c0 <LoRaWAN_Init+0x188>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	2002      	movs	r0, #2
 800cfb8:	f011 ff76 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800cfbc:	1d3b      	adds	r3, r7, #4
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	2001      	movs	r0, #1
 800cfc2:	f003 fa57 	bl	8010474 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	0e1b      	lsrs	r3, r3, #24
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	461a      	mov	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	0c1b      	lsrs	r3, r3, #16
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	0a1b      	lsrs	r3, r3, #8
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	b2c0      	uxtb	r0, r0
 800cfe0:	9003      	str	r0, [sp, #12]
 800cfe2:	9302      	str	r3, [sp, #8]
 800cfe4:	9101      	str	r1, [sp, #4]
 800cfe6:	9200      	str	r2, [sp, #0]
 800cfe8:	4b36      	ldr	r3, [pc, #216]	; (800d0c4 <LoRaWAN_Init+0x18c>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	2100      	movs	r1, #0
 800cfee:	2002      	movs	r0, #2
 800cff0:	f011 ff5a 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800cff4:	2300      	movs	r3, #0
 800cff6:	9300      	str	r3, [sp, #0]
 800cff8:	4b33      	ldr	r3, [pc, #204]	; (800d0c8 <LoRaWAN_Init+0x190>)
 800cffa:	2200      	movs	r2, #0
 800cffc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d000:	4832      	ldr	r0, [pc, #200]	; (800d0cc <LoRaWAN_Init+0x194>)
 800d002:	f011 fca3 	bl	801e94c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800d006:	2300      	movs	r3, #0
 800d008:	9300      	str	r3, [sp, #0]
 800d00a:	4b31      	ldr	r3, [pc, #196]	; (800d0d0 <LoRaWAN_Init+0x198>)
 800d00c:	2200      	movs	r2, #0
 800d00e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d012:	4830      	ldr	r0, [pc, #192]	; (800d0d4 <LoRaWAN_Init+0x19c>)
 800d014:	f011 fc9a 	bl	801e94c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800d018:	2300      	movs	r3, #0
 800d01a:	9300      	str	r3, [sp, #0]
 800d01c:	4b2e      	ldr	r3, [pc, #184]	; (800d0d8 <LoRaWAN_Init+0x1a0>)
 800d01e:	2201      	movs	r2, #1
 800d020:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d024:	482d      	ldr	r0, [pc, #180]	; (800d0dc <LoRaWAN_Init+0x1a4>)
 800d026:	f011 fc91 	bl	801e94c <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800d02a:	2300      	movs	r3, #0
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	4b2c      	ldr	r3, [pc, #176]	; (800d0e0 <LoRaWAN_Init+0x1a8>)
 800d030:	2200      	movs	r2, #0
 800d032:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d036:	482b      	ldr	r0, [pc, #172]	; (800d0e4 <LoRaWAN_Init+0x1ac>)
 800d038:	f011 fc88 	bl	801e94c <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800d03c:	4a2a      	ldr	r2, [pc, #168]	; (800d0e8 <LoRaWAN_Init+0x1b0>)
 800d03e:	2100      	movs	r1, #0
 800d040:	2001      	movs	r0, #1
 800d042:	f011 fbdf 	bl	801e804 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800d046:	4a29      	ldr	r2, [pc, #164]	; (800d0ec <LoRaWAN_Init+0x1b4>)
 800d048:	2100      	movs	r1, #0
 800d04a:	2002      	movs	r0, #2
 800d04c:	f011 fbda 	bl	801e804 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800d050:	4a27      	ldr	r2, [pc, #156]	; (800d0f0 <LoRaWAN_Init+0x1b8>)
 800d052:	2100      	movs	r1, #0
 800d054:	2004      	movs	r0, #4
 800d056:	f011 fbd5 	bl	801e804 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800d05a:	4a26      	ldr	r2, [pc, #152]	; (800d0f4 <LoRaWAN_Init+0x1bc>)
 800d05c:	2100      	movs	r1, #0
 800d05e:	2008      	movs	r0, #8
 800d060:	f011 fbd0 	bl	801e804 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800d064:	f000 fd64 	bl	800db30 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800d068:	4923      	ldr	r1, [pc, #140]	; (800d0f8 <LoRaWAN_Init+0x1c0>)
 800d06a:	4824      	ldr	r0, [pc, #144]	; (800d0fc <LoRaWAN_Init+0x1c4>)
 800d06c:	f002 fa74 	bl	800f558 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800d070:	4823      	ldr	r0, [pc, #140]	; (800d100 <LoRaWAN_Init+0x1c8>)
 800d072:	f002 fadf 	bl	800f634 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800d076:	4819      	ldr	r0, [pc, #100]	; (800d0dc <LoRaWAN_Init+0x1a4>)
 800d078:	f011 fc9e 	bl	801e9b8 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800d07c:	4b21      	ldr	r3, [pc, #132]	; (800d104 <LoRaWAN_Init+0x1cc>)
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	4a21      	ldr	r2, [pc, #132]	; (800d108 <LoRaWAN_Init+0x1d0>)
 800d082:	7812      	ldrb	r2, [r2, #0]
 800d084:	4611      	mov	r1, r2
 800d086:	4618      	mov	r0, r3
 800d088:	f002 fc2c 	bl	800f8e4 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800d08c:	4b1f      	ldr	r3, [pc, #124]	; (800d10c <LoRaWAN_Init+0x1d4>)
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d10b      	bne.n	800d0ac <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800d094:	4b1e      	ldr	r3, [pc, #120]	; (800d110 <LoRaWAN_Init+0x1d8>)
 800d096:	6819      	ldr	r1, [r3, #0]
 800d098:	2300      	movs	r3, #0
 800d09a:	9300      	str	r3, [sp, #0]
 800d09c:	4b1d      	ldr	r3, [pc, #116]	; (800d114 <LoRaWAN_Init+0x1dc>)
 800d09e:	2200      	movs	r2, #0
 800d0a0:	481d      	ldr	r0, [pc, #116]	; (800d118 <LoRaWAN_Init+0x1e0>)
 800d0a2:	f011 fc53 	bl	801e94c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800d0a6:	481c      	ldr	r0, [pc, #112]	; (800d118 <LoRaWAN_Init+0x1e0>)
 800d0a8:	f011 fc86 	bl	801e9b8 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800d0ac:	bf00      	nop
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	0801f670 	.word	0x0801f670
 800d0b8:	0801f694 	.word	0x0801f694
 800d0bc:	0801f6b8 	.word	0x0801f6b8
 800d0c0:	0801f6dc 	.word	0x0801f6dc
 800d0c4:	0801f700 	.word	0x0801f700
 800d0c8:	0800d651 	.word	0x0800d651
 800d0cc:	20000620 	.word	0x20000620
 800d0d0:	0800d663 	.word	0x0800d663
 800d0d4:	20000638 	.word	0x20000638
 800d0d8:	0800d675 	.word	0x0800d675
 800d0dc:	20000650 	.word	0x20000650
 800d0e0:	0800da31 	.word	0x0800da31
 800d0e4:	20000514 	.word	0x20000514
 800d0e8:	0800f879 	.word	0x0800f879
 800d0ec:	0800d265 	.word	0x0800d265
 800d0f0:	0800da55 	.word	0x0800da55
 800d0f4:	0800d9b1 	.word	0x0800d9b1
 800d0f8:	01030000 	.word	0x01030000
 800d0fc:	20000024 	.word	0x20000024
 800d100:	20000070 	.word	0x20000070
 800d104:	20000020 	.word	0x20000020
 800d108:	20000021 	.word	0x20000021
 800d10c:	200004f8 	.word	0x200004f8
 800d110:	20000088 	.word	0x20000088
 800d114:	0800d61d 	.word	0x0800d61d
 800d118:	200004fc 	.word	0x200004fc

0800d11c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800d11c:	b5b0      	push	{r4, r5, r7, lr}
 800d11e:	b08a      	sub	sp, #40	; 0x28
 800d120:	af06      	add	r7, sp, #24
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800d126:	2300      	movs	r3, #0
 800d128:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f000 8086 	beq.w	800d23e <OnRxData+0x122>
  {

    UTIL_TIMER_Start(&RxLedTimer);
 800d132:	4845      	ldr	r0, [pc, #276]	; (800d248 <OnRxData+0x12c>)
 800d134:	f011 fc40 	bl	801e9b8 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d05a      	beq.n	800d1f6 <OnRxData+0xda>
    {
      if (appData != NULL)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d057      	beq.n	800d1f6 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d050      	beq.n	800d1f6 <OnRxData+0xda>
        {
          switch (appData->Port)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	2b02      	cmp	r3, #2
 800d15a:	d01f      	beq.n	800d19c <OnRxData+0x80>
 800d15c:	2b03      	cmp	r3, #3
 800d15e:	d145      	bne.n	800d1ec <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	785b      	ldrb	r3, [r3, #1]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d143      	bne.n	800d1f0 <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	2b02      	cmp	r3, #2
 800d170:	d00e      	beq.n	800d190 <OnRxData+0x74>
 800d172:	2b02      	cmp	r3, #2
 800d174:	dc10      	bgt.n	800d198 <OnRxData+0x7c>
 800d176:	2b00      	cmp	r3, #0
 800d178:	d002      	beq.n	800d180 <OnRxData+0x64>
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d004      	beq.n	800d188 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800d17e:	e00b      	b.n	800d198 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 800d180:	2000      	movs	r0, #0
 800d182:	f002 fd63 	bl	800fc4c <LmHandlerRequestClass>
                    break;
 800d186:	e008      	b.n	800d19a <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 800d188:	2001      	movs	r0, #1
 800d18a:	f002 fd5f 	bl	800fc4c <LmHandlerRequestClass>
                    break;
 800d18e:	e004      	b.n	800d19a <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 800d190:	2002      	movs	r0, #2
 800d192:	f002 fd5b 	bl	800fc4c <LmHandlerRequestClass>
                    break;
 800d196:	e000      	b.n	800d19a <OnRxData+0x7e>
                    break;
 800d198:	bf00      	nop
                }
              }
              break;
 800d19a:	e029      	b.n	800d1f0 <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	785b      	ldrb	r3, [r3, #1]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d127      	bne.n	800d1f4 <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	f003 0301 	and.w	r3, r3, #1
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	4b26      	ldr	r3, [pc, #152]	; (800d24c <OnRxData+0x130>)
 800d1b2:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800d1b4:	4b25      	ldr	r3, [pc, #148]	; (800d24c <OnRxData+0x130>)
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10b      	bne.n	800d1d4 <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800d1bc:	4b24      	ldr	r3, [pc, #144]	; (800d250 <OnRxData+0x134>)
 800d1be:	2200      	movs	r2, #0
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	2003      	movs	r0, #3
 800d1c4:	f011 fe70 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	2120      	movs	r1, #32
 800d1cc:	4821      	ldr	r0, [pc, #132]	; (800d254 <OnRxData+0x138>)
 800d1ce:	f7fa f9af 	bl	8007530 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800d1d2:	e00f      	b.n	800d1f4 <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800d1d4:	4b20      	ldr	r3, [pc, #128]	; (800d258 <OnRxData+0x13c>)
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	2100      	movs	r1, #0
 800d1da:	2003      	movs	r0, #3
 800d1dc:	f011 fe64 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	2120      	movs	r1, #32
 800d1e4:	481b      	ldr	r0, [pc, #108]	; (800d254 <OnRxData+0x138>)
 800d1e6:	f7fa f9a3 	bl	8007530 <HAL_GPIO_WritePin>
              break;
 800d1ea:	e003      	b.n	800d1f4 <OnRxData+0xd8>

            default:

              break;
 800d1ec:	bf00      	nop
 800d1ee:	e002      	b.n	800d1f6 <OnRxData+0xda>
              break;
 800d1f0:	bf00      	nop
 800d1f2:	e000      	b.n	800d1f6 <OnRxData+0xda>
              break;
 800d1f4:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	7c1b      	ldrb	r3, [r3, #16]
 800d1fa:	2b05      	cmp	r3, #5
 800d1fc:	d81f      	bhi.n	800d23e <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	7bfa      	ldrb	r2, [r7, #15]
 800d204:	6839      	ldr	r1, [r7, #0]
 800d206:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800d20a:	460c      	mov	r4, r1
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	7c09      	ldrb	r1, [r1, #16]
 800d210:	4608      	mov	r0, r1
 800d212:	4912      	ldr	r1, [pc, #72]	; (800d25c <OnRxData+0x140>)
 800d214:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d218:	6838      	ldr	r0, [r7, #0]
 800d21a:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800d21e:	4605      	mov	r5, r0
 800d220:	6838      	ldr	r0, [r7, #0]
 800d222:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800d226:	9005      	str	r0, [sp, #20]
 800d228:	9504      	str	r5, [sp, #16]
 800d22a:	9103      	str	r1, [sp, #12]
 800d22c:	9402      	str	r4, [sp, #8]
 800d22e:	9201      	str	r2, [sp, #4]
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	4b0b      	ldr	r3, [pc, #44]	; (800d260 <OnRxData+0x144>)
 800d234:	2200      	movs	r2, #0
 800d236:	2100      	movs	r1, #0
 800d238:	2003      	movs	r0, #3
 800d23a:	f011 fe35 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800d23e:	bf00      	nop
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bdb0      	pop	{r4, r5, r7, pc}
 800d246:	bf00      	nop
 800d248:	20000638 	.word	0x20000638
 800d24c:	2000061e 	.word	0x2000061e
 800d250:	0801f724 	.word	0x0801f724
 800d254:	48000400 	.word	0x48000400
 800d258:	0801f730 	.word	0x0801f730
 800d25c:	20000008 	.word	0x20000008
 800d260:	0801f73c 	.word	0x0801f73c

0800d264 <SendTxData>:

static void SendTxData(void)
{
 800d264:	b590      	push	{r4, r7, lr}
 800d266:	b093      	sub	sp, #76	; 0x4c
 800d268:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d26a:	23ff      	movs	r3, #255	; 0xff
 800d26c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t batteryLevel = GetBatteryLevel();
 800d270:	f7f5 f948 	bl	8002504 <GetBatteryLevel>
 800d274:	4603      	mov	r3, r0
 800d276:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	63fb      	str	r3, [r7, #60]	; 0x3c

  uint16_t pressure = 0;
 800d27e:	2300      	movs	r3, #0
 800d280:	86bb      	strh	r3, [r7, #52]	; 0x34
  int16_t temperature = 0;
 800d282:	2300      	movs	r3, #0
 800d284:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t humidity = 0;
 800d286:	2300      	movs	r3, #0
 800d288:	863b      	strh	r3, [r7, #48]	; 0x30
  uint32_t i = 0;
 800d28a:	2300      	movs	r3, #0
 800d28c:	63bb      	str	r3, [r7, #56]	; 0x38
  int32_t latitude = 0;
 800d28e:	2300      	movs	r3, #0
 800d290:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t longitude = 0;
 800d292:	2300      	movs	r3, #0
 800d294:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t altitudeGps = 0;
 800d296:	2300      	movs	r3, #0
 800d298:	84fb      	strh	r3, [r7, #38]	; 0x26

  EnvSensors_Read(&sensor_data);
 800d29a:	1d3b      	adds	r3, r7, #4
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7f5 faa3 	bl	80027e8 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800d2a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d2a6:	9300      	str	r3, [sp, #0]
 800d2a8:	4b72      	ldr	r3, [pc, #456]	; (800d474 <SendTxData+0x210>)
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	2100      	movs	r1, #0
 800d2ae:	2002      	movs	r0, #2
 800d2b0:	f011 fdfa 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
  float temperature_f = sensor_data.temperature*100;
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	4970      	ldr	r1, [pc, #448]	; (800d478 <SendTxData+0x214>)
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7f3 fd41 	bl	8000d40 <__aeabi_fmul>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	623b      	str	r3, [r7, #32]
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d.%02d [C]\r\n", (int)temperature_f / 100, (int)temperature_f % 100);
 800d2c2:	6a38      	ldr	r0, [r7, #32]
 800d2c4:	f7f3 fe8c 	bl	8000fe0 <__aeabi_f2iz>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	4a6c      	ldr	r2, [pc, #432]	; (800d47c <SendTxData+0x218>)
 800d2cc:	fb82 1203 	smull	r1, r2, r2, r3
 800d2d0:	1152      	asrs	r2, r2, #5
 800d2d2:	17db      	asrs	r3, r3, #31
 800d2d4:	1ad4      	subs	r4, r2, r3
 800d2d6:	6a38      	ldr	r0, [r7, #32]
 800d2d8:	f7f3 fe82 	bl	8000fe0 <__aeabi_f2iz>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	4b67      	ldr	r3, [pc, #412]	; (800d47c <SendTxData+0x218>)
 800d2e0:	fb83 1302 	smull	r1, r3, r3, r2
 800d2e4:	1159      	asrs	r1, r3, #5
 800d2e6:	17d3      	asrs	r3, r2, #31
 800d2e8:	1acb      	subs	r3, r1, r3
 800d2ea:	2164      	movs	r1, #100	; 0x64
 800d2ec:	fb01 f303 	mul.w	r3, r1, r3
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	9301      	str	r3, [sp, #4]
 800d2f4:	9400      	str	r4, [sp, #0]
 800d2f6:	4b62      	ldr	r3, [pc, #392]	; (800d480 <SendTxData+0x21c>)
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	2100      	movs	r1, #0
 800d2fc:	2002      	movs	r0, #2
 800d2fe:	f011 fdd3 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
  temperature = (uint16_t)temperature_f;
 800d302:	6a38      	ldr	r0, [r7, #32]
 800d304:	f7f3 fe92 	bl	800102c <__aeabi_f2uiz>
 800d308:	4603      	mov	r3, r0
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	867b      	strh	r3, [r7, #50]	; 0x32

  float pressure_f = sensor_data.pressure*100;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4959      	ldr	r1, [pc, #356]	; (800d478 <SendTxData+0x214>)
 800d312:	4618      	mov	r0, r3
 800d314:	f7f3 fd14 	bl	8000d40 <__aeabi_fmul>
 800d318:	4603      	mov	r3, r0
 800d31a:	61fb      	str	r3, [r7, #28]
  APP_LOG(TS_ON, VLEVEL_M, "pressure: %d.%02d [Pa]\r\n", (int)pressure_f / 100, (int)pressure_f % 100);
 800d31c:	69f8      	ldr	r0, [r7, #28]
 800d31e:	f7f3 fe5f 	bl	8000fe0 <__aeabi_f2iz>
 800d322:	4603      	mov	r3, r0
 800d324:	4a55      	ldr	r2, [pc, #340]	; (800d47c <SendTxData+0x218>)
 800d326:	fb82 1203 	smull	r1, r2, r2, r3
 800d32a:	1152      	asrs	r2, r2, #5
 800d32c:	17db      	asrs	r3, r3, #31
 800d32e:	1ad4      	subs	r4, r2, r3
 800d330:	69f8      	ldr	r0, [r7, #28]
 800d332:	f7f3 fe55 	bl	8000fe0 <__aeabi_f2iz>
 800d336:	4602      	mov	r2, r0
 800d338:	4b50      	ldr	r3, [pc, #320]	; (800d47c <SendTxData+0x218>)
 800d33a:	fb83 1302 	smull	r1, r3, r3, r2
 800d33e:	1159      	asrs	r1, r3, #5
 800d340:	17d3      	asrs	r3, r2, #31
 800d342:	1acb      	subs	r3, r1, r3
 800d344:	2164      	movs	r1, #100	; 0x64
 800d346:	fb01 f303 	mul.w	r3, r1, r3
 800d34a:	1ad3      	subs	r3, r2, r3
 800d34c:	9301      	str	r3, [sp, #4]
 800d34e:	9400      	str	r4, [sp, #0]
 800d350:	4b4c      	ldr	r3, [pc, #304]	; (800d484 <SendTxData+0x220>)
 800d352:	2201      	movs	r2, #1
 800d354:	2100      	movs	r1, #0
 800d356:	2002      	movs	r0, #2
 800d358:	f011 fda6 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800d35c:	4b4a      	ldr	r3, [pc, #296]	; (800d488 <SendTxData+0x224>)
 800d35e:	2202      	movs	r2, #2
 800d360:	701a      	strb	r2, [r3, #0]

  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	4949      	ldr	r1, [pc, #292]	; (800d48c <SendTxData+0x228>)
 800d366:	4618      	mov	r0, r3
 800d368:	f7f3 fcea 	bl	8000d40 <__aeabi_fmul>
 800d36c:	4603      	mov	r3, r0
 800d36e:	4618      	mov	r0, r3
 800d370:	f7f3 fe5c 	bl	800102c <__aeabi_f2uiz>
 800d374:	4603      	mov	r3, r0
 800d376:	863b      	strh	r3, [r7, #48]	; 0x30
  temperature = (int16_t)(sensor_data.temperature);
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7f3 fe30 	bl	8000fe0 <__aeabi_f2iz>
 800d380:	4603      	mov	r3, r0
 800d382:	867b      	strh	r3, [r7, #50]	; 0x32
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	493c      	ldr	r1, [pc, #240]	; (800d478 <SendTxData+0x214>)
 800d388:	4618      	mov	r0, r3
 800d38a:	f7f3 fcd9 	bl	8000d40 <__aeabi_fmul>
 800d38e:	4603      	mov	r3, r0
 800d390:	493e      	ldr	r1, [pc, #248]	; (800d48c <SendTxData+0x228>)
 800d392:	4618      	mov	r0, r3
 800d394:	f7f3 fd88 	bl	8000ea8 <__aeabi_fdiv>
 800d398:	4603      	mov	r3, r0
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7f3 fe46 	bl	800102c <__aeabi_f2uiz>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	86bb      	strh	r3, [r7, #52]	; 0x34

  AppData.Buffer[i++] = AppLedStateOn;
 800d3a4:	4b38      	ldr	r3, [pc, #224]	; (800d488 <SendTxData+0x224>)
 800d3a6:	685a      	ldr	r2, [r3, #4]
 800d3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3aa:	1c59      	adds	r1, r3, #1
 800d3ac:	63b9      	str	r1, [r7, #56]	; 0x38
 800d3ae:	4413      	add	r3, r2
 800d3b0:	4a37      	ldr	r2, [pc, #220]	; (800d490 <SendTxData+0x22c>)
 800d3b2:	7812      	ldrb	r2, [r2, #0]
 800d3b4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800d3b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d3b8:	0a1b      	lsrs	r3, r3, #8
 800d3ba:	b298      	uxth	r0, r3
 800d3bc:	4b32      	ldr	r3, [pc, #200]	; (800d488 <SendTxData+0x224>)
 800d3be:	685a      	ldr	r2, [r3, #4]
 800d3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c2:	1c59      	adds	r1, r3, #1
 800d3c4:	63b9      	str	r1, [r7, #56]	; 0x38
 800d3c6:	4413      	add	r3, r2
 800d3c8:	b2c2      	uxtb	r2, r0
 800d3ca:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800d3cc:	4b2e      	ldr	r3, [pc, #184]	; (800d488 <SendTxData+0x224>)
 800d3ce:	685a      	ldr	r2, [r3, #4]
 800d3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d2:	1c59      	adds	r1, r3, #1
 800d3d4:	63b9      	str	r1, [r7, #56]	; 0x38
 800d3d6:	4413      	add	r3, r2
 800d3d8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d3da:	b2d2      	uxtb	r2, r2
 800d3dc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800d3de:	4b2a      	ldr	r3, [pc, #168]	; (800d488 <SendTxData+0x224>)
 800d3e0:	685a      	ldr	r2, [r3, #4]
 800d3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e4:	1c59      	adds	r1, r3, #1
 800d3e6:	63b9      	str	r1, [r7, #56]	; 0x38
 800d3e8:	4413      	add	r3, r2
 800d3ea:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800d3ec:	b2d2      	uxtb	r2, r2
 800d3ee:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800d3f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d3f2:	0a1b      	lsrs	r3, r3, #8
 800d3f4:	b298      	uxth	r0, r3
 800d3f6:	4b24      	ldr	r3, [pc, #144]	; (800d488 <SendTxData+0x224>)
 800d3f8:	685a      	ldr	r2, [r3, #4]
 800d3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fc:	1c59      	adds	r1, r3, #1
 800d3fe:	63b9      	str	r1, [r7, #56]	; 0x38
 800d400:	4413      	add	r3, r2
 800d402:	b2c2      	uxtb	r2, r0
 800d404:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800d406:	4b20      	ldr	r3, [pc, #128]	; (800d488 <SendTxData+0x224>)
 800d408:	685a      	ldr	r2, [r3, #4]
 800d40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d40c:	1c59      	adds	r1, r3, #1
 800d40e:	63b9      	str	r1, [r7, #56]	; 0x38
 800d410:	4413      	add	r3, r2
 800d412:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800d414:	b2d2      	uxtb	r2, r2
 800d416:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800d418:	4b1e      	ldr	r3, [pc, #120]	; (800d494 <SendTxData+0x230>)
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	2b08      	cmp	r3, #8
 800d41e:	d007      	beq.n	800d430 <SendTxData+0x1cc>
 800d420:	4b1c      	ldr	r3, [pc, #112]	; (800d494 <SendTxData+0x230>)
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d003      	beq.n	800d430 <SendTxData+0x1cc>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800d428:	4b1a      	ldr	r3, [pc, #104]	; (800d494 <SendTxData+0x230>)
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d133      	bne.n	800d498 <SendTxData+0x234>
  {
    AppData.Buffer[i++] = 0;
 800d430:	4b15      	ldr	r3, [pc, #84]	; (800d488 <SendTxData+0x224>)
 800d432:	685a      	ldr	r2, [r3, #4]
 800d434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d436:	1c59      	adds	r1, r3, #1
 800d438:	63b9      	str	r1, [r7, #56]	; 0x38
 800d43a:	4413      	add	r3, r2
 800d43c:	2200      	movs	r2, #0
 800d43e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800d440:	4b11      	ldr	r3, [pc, #68]	; (800d488 <SendTxData+0x224>)
 800d442:	685a      	ldr	r2, [r3, #4]
 800d444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d446:	1c59      	adds	r1, r3, #1
 800d448:	63b9      	str	r1, [r7, #56]	; 0x38
 800d44a:	4413      	add	r3, r2
 800d44c:	2200      	movs	r2, #0
 800d44e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800d450:	4b0d      	ldr	r3, [pc, #52]	; (800d488 <SendTxData+0x224>)
 800d452:	685a      	ldr	r2, [r3, #4]
 800d454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d456:	1c59      	adds	r1, r3, #1
 800d458:	63b9      	str	r1, [r7, #56]	; 0x38
 800d45a:	4413      	add	r3, r2
 800d45c:	2200      	movs	r2, #0
 800d45e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800d460:	4b09      	ldr	r3, [pc, #36]	; (800d488 <SendTxData+0x224>)
 800d462:	685a      	ldr	r2, [r3, #4]
 800d464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d466:	1c59      	adds	r1, r3, #1
 800d468:	63b9      	str	r1, [r7, #56]	; 0x38
 800d46a:	4413      	add	r3, r2
 800d46c:	2200      	movs	r2, #0
 800d46e:	701a      	strb	r2, [r3, #0]
 800d470:	e06e      	b.n	800d550 <SendTxData+0x2ec>
 800d472:	bf00      	nop
 800d474:	0801f784 	.word	0x0801f784
 800d478:	42c80000 	.word	0x42c80000
 800d47c:	51eb851f 	.word	0x51eb851f
 800d480:	0801f790 	.word	0x0801f790
 800d484:	0801f7a4 	.word	0x0801f7a4
 800d488:	2000008c 	.word	0x2000008c
 800d48c:	41200000 	.word	0x41200000
 800d490:	2000061e 	.word	0x2000061e
 800d494:	20000070 	.word	0x20000070
  }
  else
  {
    latitude = sensor_data.latitude;
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	62fb      	str	r3, [r7, #44]	; 0x2c
    longitude = sensor_data.longitude;
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	62bb      	str	r3, [r7, #40]	; 0x28

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800d4a0:	4b55      	ldr	r3, [pc, #340]	; (800d5f8 <SendTxData+0x394>)
 800d4a2:	685a      	ldr	r2, [r3, #4]
 800d4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a6:	1c59      	adds	r1, r3, #1
 800d4a8:	63b9      	str	r1, [r7, #56]	; 0x38
 800d4aa:	18d4      	adds	r4, r2, r3
 800d4ac:	f7f5 f82a 	bl	8002504 <GetBatteryLevel>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800d4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b6:	1418      	asrs	r0, r3, #16
 800d4b8:	4b4f      	ldr	r3, [pc, #316]	; (800d5f8 <SendTxData+0x394>)
 800d4ba:	685a      	ldr	r2, [r3, #4]
 800d4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4be:	1c59      	adds	r1, r3, #1
 800d4c0:	63b9      	str	r1, [r7, #56]	; 0x38
 800d4c2:	4413      	add	r3, r2
 800d4c4:	b2c2      	uxtb	r2, r0
 800d4c6:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800d4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ca:	1218      	asrs	r0, r3, #8
 800d4cc:	4b4a      	ldr	r3, [pc, #296]	; (800d5f8 <SendTxData+0x394>)
 800d4ce:	685a      	ldr	r2, [r3, #4]
 800d4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d2:	1c59      	adds	r1, r3, #1
 800d4d4:	63b9      	str	r1, [r7, #56]	; 0x38
 800d4d6:	4413      	add	r3, r2
 800d4d8:	b2c2      	uxtb	r2, r0
 800d4da:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800d4dc:	4b46      	ldr	r3, [pc, #280]	; (800d5f8 <SendTxData+0x394>)
 800d4de:	685a      	ldr	r2, [r3, #4]
 800d4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e2:	1c59      	adds	r1, r3, #1
 800d4e4:	63b9      	str	r1, [r7, #56]	; 0x38
 800d4e6:	4413      	add	r3, r2
 800d4e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4ea:	b2d2      	uxtb	r2, r2
 800d4ec:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800d4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f0:	1418      	asrs	r0, r3, #16
 800d4f2:	4b41      	ldr	r3, [pc, #260]	; (800d5f8 <SendTxData+0x394>)
 800d4f4:	685a      	ldr	r2, [r3, #4]
 800d4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f8:	1c59      	adds	r1, r3, #1
 800d4fa:	63b9      	str	r1, [r7, #56]	; 0x38
 800d4fc:	4413      	add	r3, r2
 800d4fe:	b2c2      	uxtb	r2, r0
 800d500:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800d502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d504:	1218      	asrs	r0, r3, #8
 800d506:	4b3c      	ldr	r3, [pc, #240]	; (800d5f8 <SendTxData+0x394>)
 800d508:	685a      	ldr	r2, [r3, #4]
 800d50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50c:	1c59      	adds	r1, r3, #1
 800d50e:	63b9      	str	r1, [r7, #56]	; 0x38
 800d510:	4413      	add	r3, r2
 800d512:	b2c2      	uxtb	r2, r0
 800d514:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800d516:	4b38      	ldr	r3, [pc, #224]	; (800d5f8 <SendTxData+0x394>)
 800d518:	685a      	ldr	r2, [r3, #4]
 800d51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51c:	1c59      	adds	r1, r3, #1
 800d51e:	63b9      	str	r1, [r7, #56]	; 0x38
 800d520:	4413      	add	r3, r2
 800d522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d524:	b2d2      	uxtb	r2, r2
 800d526:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800d528:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d52a:	0a1b      	lsrs	r3, r3, #8
 800d52c:	b298      	uxth	r0, r3
 800d52e:	4b32      	ldr	r3, [pc, #200]	; (800d5f8 <SendTxData+0x394>)
 800d530:	685a      	ldr	r2, [r3, #4]
 800d532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d534:	1c59      	adds	r1, r3, #1
 800d536:	63b9      	str	r1, [r7, #56]	; 0x38
 800d538:	4413      	add	r3, r2
 800d53a:	b2c2      	uxtb	r2, r0
 800d53c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800d53e:	4b2e      	ldr	r3, [pc, #184]	; (800d5f8 <SendTxData+0x394>)
 800d540:	685a      	ldr	r2, [r3, #4]
 800d542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d544:	1c59      	adds	r1, r3, #1
 800d546:	63b9      	str	r1, [r7, #56]	; 0x38
 800d548:	4413      	add	r3, r2
 800d54a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d54c:	b2d2      	uxtb	r2, r2
 800d54e:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800d550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d552:	b2da      	uxtb	r2, r3
 800d554:	4b28      	ldr	r3, [pc, #160]	; (800d5f8 <SendTxData+0x394>)
 800d556:	705a      	strb	r2, [r3, #1]


  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d558:	4b28      	ldr	r3, [pc, #160]	; (800d5fc <SendTxData+0x398>)
 800d55a:	7a5b      	ldrb	r3, [r3, #9]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d007      	beq.n	800d570 <SendTxData+0x30c>
 800d560:	f002 fa62 	bl	800fa28 <LmHandlerJoinStatus>
 800d564:	4603      	mov	r3, r0
 800d566:	2b01      	cmp	r3, #1
 800d568:	d102      	bne.n	800d570 <SendTxData+0x30c>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800d56a:	4824      	ldr	r0, [pc, #144]	; (800d5fc <SendTxData+0x398>)
 800d56c:	f011 fa92 	bl	801ea94 <UTIL_TIMER_Stop>
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800d570:	4b23      	ldr	r3, [pc, #140]	; (800d600 <SendTxData+0x39c>)
 800d572:	78db      	ldrb	r3, [r3, #3]
 800d574:	2200      	movs	r2, #0
 800d576:	4619      	mov	r1, r3
 800d578:	481f      	ldr	r0, [pc, #124]	; (800d5f8 <SendTxData+0x394>)
 800d57a:	f002 fa71 	bl	800fa60 <LmHandlerSend>
 800d57e:	4603      	mov	r3, r0
 800d580:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (LORAMAC_HANDLER_SUCCESS == status)
 800d584:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d106      	bne.n	800d59a <SendTxData+0x336>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800d58c:	4b1d      	ldr	r3, [pc, #116]	; (800d604 <SendTxData+0x3a0>)
 800d58e:	2201      	movs	r2, #1
 800d590:	2100      	movs	r1, #0
 800d592:	2001      	movs	r0, #1
 800d594:	f011 fc88 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
 800d598:	e016      	b.n	800d5c8 <SendTxData+0x364>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800d59a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d59e:	f113 0f06 	cmn.w	r3, #6
 800d5a2:	d111      	bne.n	800d5c8 <SendTxData+0x364>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800d5a4:	f002 f994 	bl	800f8d0 <LmHandlerGetDutyCycleWaitTime>
 800d5a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (nextTxIn > 0)
 800d5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d00b      	beq.n	800d5c8 <SendTxData+0x364>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800d5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b2:	4a15      	ldr	r2, [pc, #84]	; (800d608 <SendTxData+0x3a4>)
 800d5b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d5b8:	099b      	lsrs	r3, r3, #6
 800d5ba:	9300      	str	r3, [sp, #0]
 800d5bc:	4b13      	ldr	r3, [pc, #76]	; (800d60c <SendTxData+0x3a8>)
 800d5be:	2201      	movs	r2, #1
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	2001      	movs	r0, #1
 800d5c4:	f011 fc70 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800d5c8:	4b11      	ldr	r3, [pc, #68]	; (800d610 <SendTxData+0x3ac>)
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d10f      	bne.n	800d5f0 <SendTxData+0x38c>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800d5d0:	4810      	ldr	r0, [pc, #64]	; (800d614 <SendTxData+0x3b0>)
 800d5d2:	f011 fa5f 	bl	801ea94 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800d5d6:	4b10      	ldr	r3, [pc, #64]	; (800d618 <SendTxData+0x3b4>)
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	bf38      	it	cc
 800d5e0:	4613      	movcc	r3, r2
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	480b      	ldr	r0, [pc, #44]	; (800d614 <SendTxData+0x3b0>)
 800d5e6:	f011 fac5 	bl	801eb74 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800d5ea:	480a      	ldr	r0, [pc, #40]	; (800d614 <SendTxData+0x3b0>)
 800d5ec:	f011 f9e4 	bl	801e9b8 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800d5f0:	bf00      	nop
 800d5f2:	3744      	adds	r7, #68	; 0x44
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd90      	pop	{r4, r7, pc}
 800d5f8:	2000008c 	.word	0x2000008c
 800d5fc:	20000650 	.word	0x20000650
 800d600:	20000070 	.word	0x20000070
 800d604:	0801f7c0 	.word	0x0801f7c0
 800d608:	10624dd3 	.word	0x10624dd3
 800d60c:	0801f7d0 	.word	0x0801f7d0
 800d610:	200004f8 	.word	0x200004f8
 800d614:	200004fc 	.word	0x200004fc
 800d618:	20000088 	.word	0x20000088

0800d61c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */
	APP_LOG(TS_ON, VLEVEL_M, "starting TX timer\r\n");
 800d624:	4b08      	ldr	r3, [pc, #32]	; (800d648 <OnTxTimerEvent+0x2c>)
 800d626:	2201      	movs	r2, #1
 800d628:	2100      	movs	r1, #0
 800d62a:	2002      	movs	r0, #2
 800d62c:	f011 fc3c 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800d630:	2100      	movs	r1, #0
 800d632:	2002      	movs	r0, #2
 800d634:	f011 f908 	bl	801e848 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800d638:	4804      	ldr	r0, [pc, #16]	; (800d64c <OnTxTimerEvent+0x30>)
 800d63a:	f011 f9bd 	bl	801e9b8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800d63e:	bf00      	nop
 800d640:	3708      	adds	r7, #8
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	0801f7f0 	.word	0x0801f7f0
 800d64c:	200004fc 	.word	0x200004fc

0800d650 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{ }
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	bf00      	nop
 800d65a:	370c      	adds	r7, #12
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bc80      	pop	{r7}
 800d660:	4770      	bx	lr

0800d662 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{ }
 800d662:	b480      	push	{r7}
 800d664:	b083      	sub	sp, #12
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
 800d66a:	bf00      	nop
 800d66c:	370c      	adds	r7, #12
 800d66e:	46bd      	mov	sp, r7
 800d670:	bc80      	pop	{r7}
 800d672:	4770      	bx	lr

0800d674 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{ }
 800d674:	b480      	push	{r7}
 800d676:	b083      	sub	sp, #12
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	bf00      	nop
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	bc80      	pop	{r7}
 800d684:	4770      	bx	lr
	...

0800d688 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af04      	add	r7, sp, #16
 800d68e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d041      	beq.n	800d71a <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d03d      	beq.n	800d71a <OnTxData+0x92>
    {
      UTIL_TIMER_Start(&TxLedTimer);
 800d69e:	4821      	ldr	r0, [pc, #132]	; (800d724 <OnTxData+0x9c>)
 800d6a0:	f011 f98a 	bl	801e9b8 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800d6a4:	4b20      	ldr	r3, [pc, #128]	; (800d728 <OnTxData+0xa0>)
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	2002      	movs	r0, #2
 800d6ac:	f011 fbfc 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_M, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	7c12      	ldrb	r2, [r2, #16]
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800d6c0:	4610      	mov	r0, r2
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800d6c8:	9203      	str	r2, [sp, #12]
 800d6ca:	9002      	str	r0, [sp, #8]
 800d6cc:	9101      	str	r1, [sp, #4]
 800d6ce:	9300      	str	r3, [sp, #0]
 800d6d0:	4b16      	ldr	r3, [pc, #88]	; (800d72c <OnTxData+0xa4>)
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	2100      	movs	r1, #0
 800d6d6:	2002      	movs	r0, #2
 800d6d8:	f011 fbe6 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_M, " | MSG TYPE:");
 800d6dc:	4b14      	ldr	r3, [pc, #80]	; (800d730 <OnTxData+0xa8>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	2100      	movs	r1, #0
 800d6e2:	2002      	movs	r0, #2
 800d6e4:	f011 fbe0 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	7a1b      	ldrb	r3, [r3, #8]
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d10e      	bne.n	800d70e <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	7a5b      	ldrb	r3, [r3, #9]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d001      	beq.n	800d6fc <OnTxData+0x74>
 800d6f8:	4b0e      	ldr	r3, [pc, #56]	; (800d734 <OnTxData+0xac>)
 800d6fa:	e000      	b.n	800d6fe <OnTxData+0x76>
 800d6fc:	4b0e      	ldr	r3, [pc, #56]	; (800d738 <OnTxData+0xb0>)
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	4b0e      	ldr	r3, [pc, #56]	; (800d73c <OnTxData+0xb4>)
 800d702:	2200      	movs	r2, #0
 800d704:	2100      	movs	r1, #0
 800d706:	2002      	movs	r0, #2
 800d708:	f011 fbce 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_M, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800d70c:	e005      	b.n	800d71a <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_M, "UNCONFIRMED\r\n");
 800d70e:	4b0c      	ldr	r3, [pc, #48]	; (800d740 <OnTxData+0xb8>)
 800d710:	2200      	movs	r2, #0
 800d712:	2100      	movs	r1, #0
 800d714:	2002      	movs	r0, #2
 800d716:	f011 fbc7 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
}
 800d71a:	bf00      	nop
 800d71c:	3708      	adds	r7, #8
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	20000620 	.word	0x20000620
 800d728:	0801f804 	.word	0x0801f804
 800d72c:	0801f838 	.word	0x0801f838
 800d730:	0801f86c 	.word	0x0801f86c
 800d734:	0801f87c 	.word	0x0801f87c
 800d738:	0801f880 	.word	0x0801f880
 800d73c:	0801f888 	.word	0x0801f888
 800d740:	0801f89c 	.word	0x0801f89c

0800d744 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d039      	beq.n	800d7c6 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d11e      	bne.n	800d79a <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800d75c:	2100      	movs	r1, #0
 800d75e:	2004      	movs	r0, #4
 800d760:	f011 f872 	bl	801e848 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800d764:	481a      	ldr	r0, [pc, #104]	; (800d7d0 <OnJoinRequest+0x8c>)
 800d766:	f011 f995 	bl	801ea94 <UTIL_TIMER_Stop>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800d76a:	4b1a      	ldr	r3, [pc, #104]	; (800d7d4 <OnJoinRequest+0x90>)
 800d76c:	2200      	movs	r2, #0
 800d76e:	2100      	movs	r1, #0
 800d770:	2002      	movs	r0, #2
 800d772:	f011 fb99 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	79db      	ldrb	r3, [r3, #7]
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d106      	bne.n	800d78c <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800d77e:	4b16      	ldr	r3, [pc, #88]	; (800d7d8 <OnJoinRequest+0x94>)
 800d780:	2200      	movs	r2, #0
 800d782:	2100      	movs	r1, #0
 800d784:	2002      	movs	r0, #2
 800d786:	f011 fb8f 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800d78a:	e01c      	b.n	800d7c6 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800d78c:	4b13      	ldr	r3, [pc, #76]	; (800d7dc <OnJoinRequest+0x98>)
 800d78e:	2200      	movs	r2, #0
 800d790:	2100      	movs	r1, #0
 800d792:	2002      	movs	r0, #2
 800d794:	f011 fb88 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
}
 800d798:	e015      	b.n	800d7c6 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800d79a:	4b11      	ldr	r3, [pc, #68]	; (800d7e0 <OnJoinRequest+0x9c>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	2100      	movs	r1, #0
 800d7a0:	2002      	movs	r0, #2
 800d7a2:	f011 fb81 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	79db      	ldrb	r3, [r3, #7]
 800d7aa:	2b02      	cmp	r3, #2
 800d7ac:	d10b      	bne.n	800d7c6 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800d7ae:	4b0d      	ldr	r3, [pc, #52]	; (800d7e4 <OnJoinRequest+0xa0>)
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	2100      	movs	r1, #0
 800d7b4:	2002      	movs	r0, #2
 800d7b6:	f011 fb77 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800d7ba:	4b0b      	ldr	r3, [pc, #44]	; (800d7e8 <OnJoinRequest+0xa4>)
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	2101      	movs	r1, #1
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f002 f88f 	bl	800f8e4 <LmHandlerJoin>
}
 800d7c6:	bf00      	nop
 800d7c8:	3708      	adds	r7, #8
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	20000650 	.word	0x20000650
 800d7d4:	0801f8ac 	.word	0x0801f8ac
 800d7d8:	0801f8c4 	.word	0x0801f8c4
 800d7dc:	0801f8e4 	.word	0x0801f8e4
 800d7e0:	0801f904 	.word	0x0801f904
 800d7e4:	0801f920 	.word	0x0801f920
 800d7e8:	20000020 	.word	0x20000020

0800d7ec <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800d7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ee:	b093      	sub	sp, #76	; 0x4c
 800d7f0:	af0c      	add	r7, sp, #48	; 0x30
 800d7f2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d056      	beq.n	800d8a8 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	785b      	ldrb	r3, [r3, #1]
 800d7fe:	2b02      	cmp	r3, #2
 800d800:	d008      	beq.n	800d814 <OnBeaconStatusChange+0x28>
 800d802:	2b03      	cmp	r3, #3
 800d804:	d049      	beq.n	800d89a <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800d806:	4b2a      	ldr	r3, [pc, #168]	; (800d8b0 <OnBeaconStatusChange+0xc4>)
 800d808:	2200      	movs	r2, #0
 800d80a:	2100      	movs	r1, #0
 800d80c:	2002      	movs	r0, #2
 800d80e:	f011 fb4b 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d812:	e049      	b.n	800d8a8 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	7c1b      	ldrb	r3, [r3, #16]
 800d818:	4618      	mov	r0, r3
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d820:	461c      	mov	r4, r3
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d828:	461d      	mov	r5, r3
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	697a      	ldr	r2, [r7, #20]
 800d830:	6852      	ldr	r2, [r2, #4]
 800d832:	6979      	ldr	r1, [r7, #20]
 800d834:	7d89      	ldrb	r1, [r1, #22]
 800d836:	460e      	mov	r6, r1
 800d838:	6979      	ldr	r1, [r7, #20]
 800d83a:	7dc9      	ldrb	r1, [r1, #23]
 800d83c:	6139      	str	r1, [r7, #16]
 800d83e:	6979      	ldr	r1, [r7, #20]
 800d840:	7e09      	ldrb	r1, [r1, #24]
 800d842:	60f9      	str	r1, [r7, #12]
 800d844:	6979      	ldr	r1, [r7, #20]
 800d846:	7e49      	ldrb	r1, [r1, #25]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	6979      	ldr	r1, [r7, #20]
 800d84c:	7e89      	ldrb	r1, [r1, #26]
 800d84e:	6079      	str	r1, [r7, #4]
 800d850:	6979      	ldr	r1, [r7, #20]
 800d852:	7ec9      	ldrb	r1, [r1, #27]
 800d854:	6039      	str	r1, [r7, #0]
 800d856:	6979      	ldr	r1, [r7, #20]
 800d858:	7f09      	ldrb	r1, [r1, #28]
 800d85a:	910b      	str	r1, [sp, #44]	; 0x2c
 800d85c:	f8d7 c000 	ldr.w	ip, [r7]
 800d860:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800d864:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800d868:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d86c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800d870:	f8cd c020 	str.w	ip, [sp, #32]
 800d874:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800d878:	f8cd c01c 	str.w	ip, [sp, #28]
 800d87c:	6939      	ldr	r1, [r7, #16]
 800d87e:	9106      	str	r1, [sp, #24]
 800d880:	9605      	str	r6, [sp, #20]
 800d882:	9204      	str	r2, [sp, #16]
 800d884:	9303      	str	r3, [sp, #12]
 800d886:	9502      	str	r5, [sp, #8]
 800d888:	9401      	str	r4, [sp, #4]
 800d88a:	9000      	str	r0, [sp, #0]
 800d88c:	4b09      	ldr	r3, [pc, #36]	; (800d8b4 <OnBeaconStatusChange+0xc8>)
 800d88e:	2200      	movs	r2, #0
 800d890:	2100      	movs	r1, #0
 800d892:	2002      	movs	r0, #2
 800d894:	f011 fb08 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800d898:	e006      	b.n	800d8a8 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800d89a:	4b07      	ldr	r3, [pc, #28]	; (800d8b8 <OnBeaconStatusChange+0xcc>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	2100      	movs	r1, #0
 800d8a0:	2002      	movs	r0, #2
 800d8a2:	f011 fb01 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d8a6:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800d8a8:	bf00      	nop
 800d8aa:	371c      	adds	r7, #28
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8b0:	0801f944 	.word	0x0801f944
 800d8b4:	0801f95c 	.word	0x0801f95c
 800d8b8:	0801f9d0 	.word	0x0801f9d0

0800d8bc <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800d8c0:	bf00      	nop
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bc80      	pop	{r7}
 800d8c6:	4770      	bx	lr

0800d8c8 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af02      	add	r7, sp, #8
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800d8d2:	79fb      	ldrb	r3, [r7, #7]
 800d8d4:	4a06      	ldr	r2, [pc, #24]	; (800d8f0 <OnClassChange+0x28>)
 800d8d6:	5cd3      	ldrb	r3, [r2, r3]
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	4b06      	ldr	r3, [pc, #24]	; (800d8f4 <OnClassChange+0x2c>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	2100      	movs	r1, #0
 800d8e0:	2002      	movs	r0, #2
 800d8e2:	f011 fae1 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800d8e6:	bf00      	nop
 800d8e8:	3708      	adds	r7, #8
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	0801fa0c 	.word	0x0801fa0c
 800d8f4:	0801f9f0 	.word	0x0801f9f0

0800d8f8 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800d8fc:	2100      	movs	r1, #0
 800d8fe:	2001      	movs	r0, #1
 800d900:	f010 ffa2 	bl	801e848 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800d904:	bf00      	nop
 800d906:	bd80      	pop	{r7, pc}

0800d908 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800d910:	4a0d      	ldr	r2, [pc, #52]	; (800d948 <OnTxPeriodicityChanged+0x40>)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800d916:	4b0c      	ldr	r3, [pc, #48]	; (800d948 <OnTxPeriodicityChanged+0x40>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d103      	bne.n	800d926 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800d91e:	4b0a      	ldr	r3, [pc, #40]	; (800d948 <OnTxPeriodicityChanged+0x40>)
 800d920:	f242 7210 	movw	r2, #10000	; 0x2710
 800d924:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800d926:	4809      	ldr	r0, [pc, #36]	; (800d94c <OnTxPeriodicityChanged+0x44>)
 800d928:	f011 f8b4 	bl	801ea94 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800d92c:	4b06      	ldr	r3, [pc, #24]	; (800d948 <OnTxPeriodicityChanged+0x40>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4619      	mov	r1, r3
 800d932:	4806      	ldr	r0, [pc, #24]	; (800d94c <OnTxPeriodicityChanged+0x44>)
 800d934:	f011 f91e 	bl	801eb74 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800d938:	4804      	ldr	r0, [pc, #16]	; (800d94c <OnTxPeriodicityChanged+0x44>)
 800d93a:	f011 f83d 	bl	801e9b8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800d93e:	bf00      	nop
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	20000088 	.word	0x20000088
 800d94c:	200004fc 	.word	0x200004fc

0800d950 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	4603      	mov	r3, r0
 800d958:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800d95a:	4a04      	ldr	r2, [pc, #16]	; (800d96c <OnTxFrameCtrlChanged+0x1c>)
 800d95c:	79fb      	ldrb	r3, [r7, #7]
 800d95e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800d960:	bf00      	nop
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	bc80      	pop	{r7}
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	20000070 	.word	0x20000070

0800d970 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
 800d976:	4603      	mov	r3, r0
 800d978:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800d97a:	4a04      	ldr	r2, [pc, #16]	; (800d98c <OnPingSlotPeriodicityChanged+0x1c>)
 800d97c:	79fb      	ldrb	r3, [r7, #7]
 800d97e:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800d980:	bf00      	nop
 800d982:	370c      	adds	r7, #12
 800d984:	46bd      	mov	sp, r7
 800d986:	bc80      	pop	{r7}
 800d988:	4770      	bx	lr
 800d98a:	bf00      	nop
 800d98c:	20000070 	.word	0x20000070

0800d990 <OnSystemReset>:

static void OnSystemReset(void)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d994:	f002 fd9f 	bl	80104d6 <LmHandlerHalt>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d106      	bne.n	800d9ac <OnSystemReset+0x1c>
 800d99e:	f002 f843 	bl	800fa28 <LmHandlerJoinStatus>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d101      	bne.n	800d9ac <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800d9a8:	f7ff fab0 	bl	800cf0c <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800d9ac:	bf00      	nop
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <StopJoin>:

static void StopJoin(void)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800d9b4:	4817      	ldr	r0, [pc, #92]	; (800da14 <StopJoin+0x64>)
 800d9b6:	f011 f86d 	bl	801ea94 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800d9ba:	f002 fd7f 	bl	80104bc <LmHandlerStop>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d006      	beq.n	800d9d2 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800d9c4:	4b14      	ldr	r3, [pc, #80]	; (800da18 <StopJoin+0x68>)
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	2100      	movs	r1, #0
 800d9ca:	2002      	movs	r0, #2
 800d9cc:	f011 fa6c 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
 800d9d0:	e01a      	b.n	800da08 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800d9d2:	4b12      	ldr	r3, [pc, #72]	; (800da1c <StopJoin+0x6c>)
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	2002      	movs	r0, #2
 800d9da:	f011 fa65 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800d9de:	4b10      	ldr	r3, [pc, #64]	; (800da20 <StopJoin+0x70>)
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800d9e4:	4b0f      	ldr	r3, [pc, #60]	; (800da24 <StopJoin+0x74>)
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	2002      	movs	r0, #2
 800d9ec:	f011 fa5c 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800d9f0:	480d      	ldr	r0, [pc, #52]	; (800da28 <StopJoin+0x78>)
 800d9f2:	f001 fe1f 	bl	800f634 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800d9f6:	4b0a      	ldr	r3, [pc, #40]	; (800da20 <StopJoin+0x70>)
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	2101      	movs	r1, #1
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f001 ff71 	bl	800f8e4 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800da02:	4804      	ldr	r0, [pc, #16]	; (800da14 <StopJoin+0x64>)
 800da04:	f010 ffd8 	bl	801e9b8 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800da08:	4808      	ldr	r0, [pc, #32]	; (800da2c <StopJoin+0x7c>)
 800da0a:	f010 ffd5 	bl	801e9b8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800da0e:	bf00      	nop
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	200004fc 	.word	0x200004fc
 800da18:	0801fa10 	.word	0x0801fa10
 800da1c:	0801fa30 	.word	0x0801fa30
 800da20:	20000020 	.word	0x20000020
 800da24:	0801fa44 	.word	0x0801fa44
 800da28:	20000070 	.word	0x20000070
 800da2c:	20000514 	.word	0x20000514

0800da30 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800da38:	4b05      	ldr	r3, [pc, #20]	; (800da50 <OnStopJoinTimerEvent+0x20>)
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	2b02      	cmp	r3, #2
 800da3e:	d103      	bne.n	800da48 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800da40:	2100      	movs	r1, #0
 800da42:	2008      	movs	r0, #8
 800da44:	f010 ff00 	bl	801e848 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800da48:	bf00      	nop
 800da4a:	3708      	adds	r7, #8
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}
 800da50:	20000020 	.word	0x20000020

0800da54 <StoreContext>:

static void StoreContext(void)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800da5a:	23ff      	movs	r3, #255	; 0xff
 800da5c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800da5e:	f002 fd6f 	bl	8010540 <LmHandlerNvmDataStore>
 800da62:	4603      	mov	r3, r0
 800da64:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800da66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da6a:	f113 0f08 	cmn.w	r3, #8
 800da6e:	d106      	bne.n	800da7e <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800da70:	4b0a      	ldr	r3, [pc, #40]	; (800da9c <StoreContext+0x48>)
 800da72:	2200      	movs	r2, #0
 800da74:	2100      	movs	r1, #0
 800da76:	2002      	movs	r0, #2
 800da78:	f011 fa16 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800da7c:	e00a      	b.n	800da94 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800da7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da86:	d105      	bne.n	800da94 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800da88:	4b05      	ldr	r3, [pc, #20]	; (800daa0 <StoreContext+0x4c>)
 800da8a:	2200      	movs	r2, #0
 800da8c:	2100      	movs	r1, #0
 800da8e:	2002      	movs	r0, #2
 800da90:	f011 fa0a 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
}
 800da94:	bf00      	nop
 800da96:	3708      	adds	r7, #8
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	0801fa64 	.word	0x0801fa64
 800daa0:	0801fa7c 	.word	0x0801fa7c

0800daa4 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	4603      	mov	r3, r0
 800daac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800daae:	79fb      	ldrb	r3, [r7, #7]
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d106      	bne.n	800dac2 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800dab4:	4b08      	ldr	r3, [pc, #32]	; (800dad8 <OnNvmDataChange+0x34>)
 800dab6:	2200      	movs	r2, #0
 800dab8:	2100      	movs	r1, #0
 800daba:	2002      	movs	r0, #2
 800dabc:	f011 f9f4 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800dac0:	e005      	b.n	800dace <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800dac2:	4b06      	ldr	r3, [pc, #24]	; (800dadc <OnNvmDataChange+0x38>)
 800dac4:	2200      	movs	r2, #0
 800dac6:	2100      	movs	r1, #0
 800dac8:	2002      	movs	r0, #2
 800daca:	f011 f9ed 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
}
 800dace:	bf00      	nop
 800dad0:	3708      	adds	r7, #8
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	0801fa94 	.word	0x0801fa94
 800dadc:	0801faa8 	.word	0x0801faa8

0800dae0 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800daea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800daee:	4807      	ldr	r0, [pc, #28]	; (800db0c <OnStoreContextRequest+0x2c>)
 800daf0:	f7f3 fe14 	bl	800171c <FLASH_IF_Erase>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d104      	bne.n	800db04 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800dafa:	683a      	ldr	r2, [r7, #0]
 800dafc:	6879      	ldr	r1, [r7, #4]
 800dafe:	4803      	ldr	r0, [pc, #12]	; (800db0c <OnStoreContextRequest+0x2c>)
 800db00:	f7f3 fdbc 	bl	800167c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800db04:	bf00      	nop
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	0803f000 	.word	0x0803f000

0800db10 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800db1a:	683a      	ldr	r2, [r7, #0]
 800db1c:	4903      	ldr	r1, [pc, #12]	; (800db2c <OnRestoreContextRequest+0x1c>)
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f7f3 fdd4 	bl	80016cc <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800db24:	bf00      	nop
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	0803f000 	.word	0x0803f000

0800db30 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800db34:	4b15      	ldr	r3, [pc, #84]	; (800db8c <LoraInfo_Init+0x5c>)
 800db36:	2200      	movs	r2, #0
 800db38:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800db3a:	4b14      	ldr	r3, [pc, #80]	; (800db8c <LoraInfo_Init+0x5c>)
 800db3c:	2200      	movs	r2, #0
 800db3e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800db40:	4b12      	ldr	r3, [pc, #72]	; (800db8c <LoraInfo_Init+0x5c>)
 800db42:	2200      	movs	r2, #0
 800db44:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800db46:	4b11      	ldr	r3, [pc, #68]	; (800db8c <LoraInfo_Init+0x5c>)
 800db48:	2200      	movs	r2, #0
 800db4a:	60da      	str	r2, [r3, #12]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800db4c:	4b0f      	ldr	r3, [pc, #60]	; (800db8c <LoraInfo_Init+0x5c>)
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db54:	4a0d      	ldr	r2, [pc, #52]	; (800db8c <LoraInfo_Init+0x5c>)
 800db56:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800db58:	4b0c      	ldr	r3, [pc, #48]	; (800db8c <LoraInfo_Init+0x5c>)
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d10c      	bne.n	800db7a <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800db60:	4b0b      	ldr	r3, [pc, #44]	; (800db90 <LoraInfo_Init+0x60>)
 800db62:	2200      	movs	r2, #0
 800db64:	2100      	movs	r1, #0
 800db66:	2000      	movs	r0, #0
 800db68:	f011 f99e 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800db6c:	bf00      	nop
 800db6e:	f011 f989 	bl	801ee84 <UTIL_ADV_TRACE_IsBufferEmpty>
 800db72:	4603      	mov	r3, r0
 800db74:	2b01      	cmp	r3, #1
 800db76:	d1fa      	bne.n	800db6e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800db78:	e7fe      	b.n	800db78 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800db7a:	4b04      	ldr	r3, [pc, #16]	; (800db8c <LoraInfo_Init+0x5c>)
 800db7c:	2200      	movs	r2, #0
 800db7e:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800db80:	4b02      	ldr	r3, [pc, #8]	; (800db8c <LoraInfo_Init+0x5c>)
 800db82:	2201      	movs	r2, #1
 800db84:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800db86:	bf00      	nop
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	20000668 	.word	0x20000668
 800db90:	0801fabc 	.word	0x0801fabc

0800db94 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800db94:	b480      	push	{r7}
 800db96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800db98:	4b02      	ldr	r3, [pc, #8]	; (800dba4 <LoraInfo_GetPtr+0x10>)
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bc80      	pop	{r7}
 800dba0:	4770      	bx	lr
 800dba2:	bf00      	nop
 800dba4:	20000668 	.word	0x20000668

0800dba8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800dbac:	f7f7 f9d2 	bl	8004f54 <BSP_RADIO_Init>
 800dbb0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b082      	sub	sp, #8
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800dbc0:	79fb      	ldrb	r3, [r7, #7]
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7f7 f9f8 	bl	8004fb8 <BSP_RADIO_ConfigRFSwitch>
 800dbc8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3708      	adds	r7, #8
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800dbd6:	f7f7 fa3d 	bl	8005054 <BSP_RADIO_GetTxConfig>
 800dbda:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800dbe4:	f7f7 fa3d 	bl	8005062 <BSP_RADIO_IsTCXO>
 800dbe8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800dbf2:	f7f7 fa3d 	bl	8005070 <BSP_RADIO_IsDCDC>
 800dbf6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	4603      	mov	r3, r0
 800dc04:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800dc06:	79fb      	ldrb	r3, [r7, #7]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7f7 fa38 	bl	800507e <BSP_RADIO_GetRFOMaxPowerConfig>
 800dc0e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	33f1      	adds	r3, #241	; 0xf1
 800dc24:	2210      	movs	r2, #16
 800dc26:	2100      	movs	r1, #0
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f00c fdd3 	bl	801a7d4 <memset1>
    ctx->M_n = 0;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2200      	movs	r2, #0
 800dc32:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	22f0      	movs	r2, #240	; 0xf0
 800dc3a:	2100      	movs	r1, #0
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f00c fdc9 	bl	801a7d4 <memset1>
}
 800dc42:	bf00      	nop
 800dc44:	3708      	adds	r7, #8
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}

0800dc4a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800dc4a:	b580      	push	{r7, lr}
 800dc4c:	b082      	sub	sp, #8
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
 800dc52:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	461a      	mov	r2, r3
 800dc58:	2110      	movs	r1, #16
 800dc5a:	6838      	ldr	r0, [r7, #0]
 800dc5c:	f000 fe5c 	bl	800e918 <lorawan_aes_set_key>
}
 800dc60:	bf00      	nop
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b08c      	sub	sp, #48	; 0x30
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	f000 80a1 	beq.w	800ddc2 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dc86:	f1c3 0310 	rsb	r3, r3, #16
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	bf28      	it	cs
 800dc90:	4613      	movcs	r3, r2
 800dc92:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f203 1201 	addw	r2, r3, #257	; 0x101
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dca0:	4413      	add	r3, r2
 800dca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dca4:	b292      	uxth	r2, r2
 800dca6:	68b9      	ldr	r1, [r7, #8]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f00c fd58 	bl	801a75e <memcpy1>
        ctx->M_n += mlen;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb6:	441a      	add	r2, r3
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dcc4:	2b0f      	cmp	r3, #15
 800dcc6:	f240 808d 	bls.w	800dde4 <AES_CMAC_Update+0x17c>
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	f000 8088 	beq.w	800dde4 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcd8:	e015      	b.n	800dd06 <AES_CMAC_Update+0x9e>
 800dcda:	68fa      	ldr	r2, [r7, #12]
 800dcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcde:	4413      	add	r3, r2
 800dce0:	33f1      	adds	r3, #241	; 0xf1
 800dce2:	781a      	ldrb	r2, [r3, #0]
 800dce4:	68f9      	ldr	r1, [r7, #12]
 800dce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce8:	440b      	add	r3, r1
 800dcea:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	4053      	eors	r3, r2
 800dcf2:	b2d9      	uxtb	r1, r3
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf8:	4413      	add	r3, r2
 800dcfa:	33f1      	adds	r3, #241	; 0xf1
 800dcfc:	460a      	mov	r2, r1
 800dcfe:	701a      	strb	r2, [r3, #0]
 800dd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd02:	3301      	adds	r3, #1
 800dd04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd08:	2b0f      	cmp	r3, #15
 800dd0a:	dde6      	ble.n	800dcda <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800dd12:	f107 0314 	add.w	r3, r7, #20
 800dd16:	2210      	movs	r2, #16
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f00c fd20 	bl	801a75e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800dd1e:	68fa      	ldr	r2, [r7, #12]
 800dd20:	f107 0114 	add.w	r1, r7, #20
 800dd24:	f107 0314 	add.w	r3, r7, #20
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f000 fed3 	bl	800ead4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	33f1      	adds	r3, #241	; 0xf1
 800dd32:	f107 0114 	add.w	r1, r7, #20
 800dd36:	2210      	movs	r2, #16
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f00c fd10 	bl	801a75e <memcpy1>

        data += mlen;
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd42:	4413      	add	r3, r2
 800dd44:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800dd46:	687a      	ldr	r2, [r7, #4]
 800dd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4a:	1ad3      	subs	r3, r2, r3
 800dd4c:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800dd4e:	e038      	b.n	800ddc2 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800dd50:	2300      	movs	r3, #0
 800dd52:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd54:	e013      	b.n	800dd7e <AES_CMAC_Update+0x116>
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5a:	4413      	add	r3, r2
 800dd5c:	33f1      	adds	r3, #241	; 0xf1
 800dd5e:	781a      	ldrb	r2, [r3, #0]
 800dd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd62:	68b9      	ldr	r1, [r7, #8]
 800dd64:	440b      	add	r3, r1
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	4053      	eors	r3, r2
 800dd6a:	b2d9      	uxtb	r1, r3
 800dd6c:	68fa      	ldr	r2, [r7, #12]
 800dd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd70:	4413      	add	r3, r2
 800dd72:	33f1      	adds	r3, #241	; 0xf1
 800dd74:	460a      	mov	r2, r1
 800dd76:	701a      	strb	r2, [r3, #0]
 800dd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd80:	2b0f      	cmp	r3, #15
 800dd82:	dde8      	ble.n	800dd56 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800dd8a:	f107 0314 	add.w	r3, r7, #20
 800dd8e:	2210      	movs	r2, #16
 800dd90:	4618      	mov	r0, r3
 800dd92:	f00c fce4 	bl	801a75e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800dd96:	68fa      	ldr	r2, [r7, #12]
 800dd98:	f107 0114 	add.w	r1, r7, #20
 800dd9c:	f107 0314 	add.w	r3, r7, #20
 800dda0:	4618      	mov	r0, r3
 800dda2:	f000 fe97 	bl	800ead4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	33f1      	adds	r3, #241	; 0xf1
 800ddaa:	f107 0114 	add.w	r1, r7, #20
 800ddae:	2210      	movs	r2, #16
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f00c fcd4 	bl	801a75e <memcpy1>

        data += 16;
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	3310      	adds	r3, #16
 800ddba:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	3b10      	subs	r3, #16
 800ddc0:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2b10      	cmp	r3, #16
 800ddc6:	d8c3      	bhi.n	800dd50 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ddce:	687a      	ldr	r2, [r7, #4]
 800ddd0:	b292      	uxth	r2, r2
 800ddd2:	68b9      	ldr	r1, [r7, #8]
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f00c fcc2 	bl	801a75e <memcpy1>
    ctx->M_n = len;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800dde2:	e000      	b.n	800dde6 <AES_CMAC_Update+0x17e>
            return;
 800dde4:	bf00      	nop
}
 800dde6:	3730      	adds	r7, #48	; 0x30
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b092      	sub	sp, #72	; 0x48
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ddf6:	f107 031c 	add.w	r3, r7, #28
 800ddfa:	2210      	movs	r2, #16
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	4618      	mov	r0, r3
 800de00:	f00c fce8 	bl	801a7d4 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800de04:	683a      	ldr	r2, [r7, #0]
 800de06:	f107 011c 	add.w	r1, r7, #28
 800de0a:	f107 031c 	add.w	r3, r7, #28
 800de0e:	4618      	mov	r0, r3
 800de10:	f000 fe60 	bl	800ead4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800de14:	7f3b      	ldrb	r3, [r7, #28]
 800de16:	b25b      	sxtb	r3, r3
 800de18:	2b00      	cmp	r3, #0
 800de1a:	da30      	bge.n	800de7e <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800de1c:	2300      	movs	r3, #0
 800de1e:	647b      	str	r3, [r7, #68]	; 0x44
 800de20:	e01b      	b.n	800de5a <AES_CMAC_Final+0x6e>
 800de22:	f107 021c 	add.w	r2, r7, #28
 800de26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de28:	4413      	add	r3, r2
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	005b      	lsls	r3, r3, #1
 800de2e:	b25a      	sxtb	r2, r3
 800de30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de32:	3301      	adds	r3, #1
 800de34:	3348      	adds	r3, #72	; 0x48
 800de36:	443b      	add	r3, r7
 800de38:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800de3c:	09db      	lsrs	r3, r3, #7
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	b25b      	sxtb	r3, r3
 800de42:	4313      	orrs	r3, r2
 800de44:	b25b      	sxtb	r3, r3
 800de46:	b2d9      	uxtb	r1, r3
 800de48:	f107 021c 	add.w	r2, r7, #28
 800de4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de4e:	4413      	add	r3, r2
 800de50:	460a      	mov	r2, r1
 800de52:	701a      	strb	r2, [r3, #0]
 800de54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de56:	3301      	adds	r3, #1
 800de58:	647b      	str	r3, [r7, #68]	; 0x44
 800de5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de5c:	2b0e      	cmp	r3, #14
 800de5e:	dde0      	ble.n	800de22 <AES_CMAC_Final+0x36>
 800de60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de64:	005b      	lsls	r3, r3, #1
 800de66:	b2db      	uxtb	r3, r3
 800de68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800de6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de70:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800de74:	43db      	mvns	r3, r3
 800de76:	b2db      	uxtb	r3, r3
 800de78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de7c:	e027      	b.n	800dece <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800de7e:	2300      	movs	r3, #0
 800de80:	643b      	str	r3, [r7, #64]	; 0x40
 800de82:	e01b      	b.n	800debc <AES_CMAC_Final+0xd0>
 800de84:	f107 021c 	add.w	r2, r7, #28
 800de88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de8a:	4413      	add	r3, r2
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	005b      	lsls	r3, r3, #1
 800de90:	b25a      	sxtb	r2, r3
 800de92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de94:	3301      	adds	r3, #1
 800de96:	3348      	adds	r3, #72	; 0x48
 800de98:	443b      	add	r3, r7
 800de9a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800de9e:	09db      	lsrs	r3, r3, #7
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	b25b      	sxtb	r3, r3
 800dea4:	4313      	orrs	r3, r2
 800dea6:	b25b      	sxtb	r3, r3
 800dea8:	b2d9      	uxtb	r1, r3
 800deaa:	f107 021c 	add.w	r2, r7, #28
 800deae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deb0:	4413      	add	r3, r2
 800deb2:	460a      	mov	r2, r1
 800deb4:	701a      	strb	r2, [r3, #0]
 800deb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deb8:	3301      	adds	r3, #1
 800deba:	643b      	str	r3, [r7, #64]	; 0x40
 800debc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800debe:	2b0e      	cmp	r3, #14
 800dec0:	dde0      	ble.n	800de84 <AES_CMAC_Final+0x98>
 800dec2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dec6:	005b      	lsls	r3, r3, #1
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ded4:	2b10      	cmp	r3, #16
 800ded6:	d11d      	bne.n	800df14 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800ded8:	2300      	movs	r3, #0
 800deda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dedc:	e016      	b.n	800df0c <AES_CMAC_Final+0x120>
 800dede:	683a      	ldr	r2, [r7, #0]
 800dee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dee2:	4413      	add	r3, r2
 800dee4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dee8:	781a      	ldrb	r2, [r3, #0]
 800deea:	f107 011c 	add.w	r1, r7, #28
 800deee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800def0:	440b      	add	r3, r1
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	4053      	eors	r3, r2
 800def6:	b2d9      	uxtb	r1, r3
 800def8:	683a      	ldr	r2, [r7, #0]
 800defa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800defc:	4413      	add	r3, r2
 800defe:	f203 1301 	addw	r3, r3, #257	; 0x101
 800df02:	460a      	mov	r2, r1
 800df04:	701a      	strb	r2, [r3, #0]
 800df06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df08:	3301      	adds	r3, #1
 800df0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df0e:	2b0f      	cmp	r3, #15
 800df10:	dde5      	ble.n	800dede <AES_CMAC_Final+0xf2>
 800df12:	e096      	b.n	800e042 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800df14:	7f3b      	ldrb	r3, [r7, #28]
 800df16:	b25b      	sxtb	r3, r3
 800df18:	2b00      	cmp	r3, #0
 800df1a:	da30      	bge.n	800df7e <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800df1c:	2300      	movs	r3, #0
 800df1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800df20:	e01b      	b.n	800df5a <AES_CMAC_Final+0x16e>
 800df22:	f107 021c 	add.w	r2, r7, #28
 800df26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df28:	4413      	add	r3, r2
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	005b      	lsls	r3, r3, #1
 800df2e:	b25a      	sxtb	r2, r3
 800df30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df32:	3301      	adds	r3, #1
 800df34:	3348      	adds	r3, #72	; 0x48
 800df36:	443b      	add	r3, r7
 800df38:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800df3c:	09db      	lsrs	r3, r3, #7
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	b25b      	sxtb	r3, r3
 800df42:	4313      	orrs	r3, r2
 800df44:	b25b      	sxtb	r3, r3
 800df46:	b2d9      	uxtb	r1, r3
 800df48:	f107 021c 	add.w	r2, r7, #28
 800df4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4e:	4413      	add	r3, r2
 800df50:	460a      	mov	r2, r1
 800df52:	701a      	strb	r2, [r3, #0]
 800df54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df56:	3301      	adds	r3, #1
 800df58:	63bb      	str	r3, [r7, #56]	; 0x38
 800df5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5c:	2b0e      	cmp	r3, #14
 800df5e:	dde0      	ble.n	800df22 <AES_CMAC_Final+0x136>
 800df60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800df64:	005b      	lsls	r3, r3, #1
 800df66:	b2db      	uxtb	r3, r3
 800df68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800df6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800df70:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800df74:	43db      	mvns	r3, r3
 800df76:	b2db      	uxtb	r3, r3
 800df78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df7c:	e027      	b.n	800dfce <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800df7e:	2300      	movs	r3, #0
 800df80:	637b      	str	r3, [r7, #52]	; 0x34
 800df82:	e01b      	b.n	800dfbc <AES_CMAC_Final+0x1d0>
 800df84:	f107 021c 	add.w	r2, r7, #28
 800df88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df8a:	4413      	add	r3, r2
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	005b      	lsls	r3, r3, #1
 800df90:	b25a      	sxtb	r2, r3
 800df92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df94:	3301      	adds	r3, #1
 800df96:	3348      	adds	r3, #72	; 0x48
 800df98:	443b      	add	r3, r7
 800df9a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800df9e:	09db      	lsrs	r3, r3, #7
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	b25b      	sxtb	r3, r3
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	b25b      	sxtb	r3, r3
 800dfa8:	b2d9      	uxtb	r1, r3
 800dfaa:	f107 021c 	add.w	r2, r7, #28
 800dfae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfb0:	4413      	add	r3, r2
 800dfb2:	460a      	mov	r2, r1
 800dfb4:	701a      	strb	r2, [r3, #0]
 800dfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfb8:	3301      	adds	r3, #1
 800dfba:	637b      	str	r3, [r7, #52]	; 0x34
 800dfbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfbe:	2b0e      	cmp	r3, #14
 800dfc0:	dde0      	ble.n	800df84 <AES_CMAC_Final+0x198>
 800dfc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dfc6:	005b      	lsls	r3, r3, #1
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dfd4:	683a      	ldr	r2, [r7, #0]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	2280      	movs	r2, #128	; 0x80
 800dfda:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800dfde:	e007      	b.n	800dff0 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dfe6:	683a      	ldr	r2, [r7, #0]
 800dfe8:	4413      	add	r3, r2
 800dfea:	2200      	movs	r2, #0
 800dfec:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dff6:	1c5a      	adds	r2, r3, #1
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e004:	2b0f      	cmp	r3, #15
 800e006:	d9eb      	bls.n	800dfe0 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800e008:	2300      	movs	r3, #0
 800e00a:	633b      	str	r3, [r7, #48]	; 0x30
 800e00c:	e016      	b.n	800e03c <AES_CMAC_Final+0x250>
 800e00e:	683a      	ldr	r2, [r7, #0]
 800e010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e012:	4413      	add	r3, r2
 800e014:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e018:	781a      	ldrb	r2, [r3, #0]
 800e01a:	f107 011c 	add.w	r1, r7, #28
 800e01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e020:	440b      	add	r3, r1
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	4053      	eors	r3, r2
 800e026:	b2d9      	uxtb	r1, r3
 800e028:	683a      	ldr	r2, [r7, #0]
 800e02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e02c:	4413      	add	r3, r2
 800e02e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e032:	460a      	mov	r2, r1
 800e034:	701a      	strb	r2, [r3, #0]
 800e036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e038:	3301      	adds	r3, #1
 800e03a:	633b      	str	r3, [r7, #48]	; 0x30
 800e03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03e:	2b0f      	cmp	r3, #15
 800e040:	dde5      	ble.n	800e00e <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800e042:	2300      	movs	r3, #0
 800e044:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e046:	e015      	b.n	800e074 <AES_CMAC_Final+0x288>
 800e048:	683a      	ldr	r2, [r7, #0]
 800e04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04c:	4413      	add	r3, r2
 800e04e:	33f1      	adds	r3, #241	; 0xf1
 800e050:	781a      	ldrb	r2, [r3, #0]
 800e052:	6839      	ldr	r1, [r7, #0]
 800e054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e056:	440b      	add	r3, r1
 800e058:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	4053      	eors	r3, r2
 800e060:	b2d9      	uxtb	r1, r3
 800e062:	683a      	ldr	r2, [r7, #0]
 800e064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e066:	4413      	add	r3, r2
 800e068:	33f1      	adds	r3, #241	; 0xf1
 800e06a:	460a      	mov	r2, r1
 800e06c:	701a      	strb	r2, [r3, #0]
 800e06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e070:	3301      	adds	r3, #1
 800e072:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e076:	2b0f      	cmp	r3, #15
 800e078:	dde6      	ble.n	800e048 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e080:	f107 030c 	add.w	r3, r7, #12
 800e084:	2210      	movs	r2, #16
 800e086:	4618      	mov	r0, r3
 800e088:	f00c fb69 	bl	801a75e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e08c:	683a      	ldr	r2, [r7, #0]
 800e08e:	f107 030c 	add.w	r3, r7, #12
 800e092:	6879      	ldr	r1, [r7, #4]
 800e094:	4618      	mov	r0, r3
 800e096:	f000 fd1d 	bl	800ead4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e09a:	f107 031c 	add.w	r3, r7, #28
 800e09e:	2210      	movs	r2, #16
 800e0a0:	2100      	movs	r1, #0
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f00c fb96 	bl	801a7d4 <memset1>
}
 800e0a8:	bf00      	nop
 800e0aa:	3748      	adds	r7, #72	; 0x48
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b083      	sub	sp, #12
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	781a      	ldrb	r2, [r3, #0]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	683a      	ldr	r2, [r7, #0]
 800e0c8:	7852      	ldrb	r2, [r2, #1]
 800e0ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	3302      	adds	r3, #2
 800e0d0:	683a      	ldr	r2, [r7, #0]
 800e0d2:	7892      	ldrb	r2, [r2, #2]
 800e0d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	3303      	adds	r3, #3
 800e0da:	683a      	ldr	r2, [r7, #0]
 800e0dc:	78d2      	ldrb	r2, [r2, #3]
 800e0de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	3304      	adds	r3, #4
 800e0e4:	683a      	ldr	r2, [r7, #0]
 800e0e6:	7912      	ldrb	r2, [r2, #4]
 800e0e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	3305      	adds	r3, #5
 800e0ee:	683a      	ldr	r2, [r7, #0]
 800e0f0:	7952      	ldrb	r2, [r2, #5]
 800e0f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	3306      	adds	r3, #6
 800e0f8:	683a      	ldr	r2, [r7, #0]
 800e0fa:	7992      	ldrb	r2, [r2, #6]
 800e0fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	3307      	adds	r3, #7
 800e102:	683a      	ldr	r2, [r7, #0]
 800e104:	79d2      	ldrb	r2, [r2, #7]
 800e106:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	3308      	adds	r3, #8
 800e10c:	683a      	ldr	r2, [r7, #0]
 800e10e:	7a12      	ldrb	r2, [r2, #8]
 800e110:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	3309      	adds	r3, #9
 800e116:	683a      	ldr	r2, [r7, #0]
 800e118:	7a52      	ldrb	r2, [r2, #9]
 800e11a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	330a      	adds	r3, #10
 800e120:	683a      	ldr	r2, [r7, #0]
 800e122:	7a92      	ldrb	r2, [r2, #10]
 800e124:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	330b      	adds	r3, #11
 800e12a:	683a      	ldr	r2, [r7, #0]
 800e12c:	7ad2      	ldrb	r2, [r2, #11]
 800e12e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	330c      	adds	r3, #12
 800e134:	683a      	ldr	r2, [r7, #0]
 800e136:	7b12      	ldrb	r2, [r2, #12]
 800e138:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	330d      	adds	r3, #13
 800e13e:	683a      	ldr	r2, [r7, #0]
 800e140:	7b52      	ldrb	r2, [r2, #13]
 800e142:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	330e      	adds	r3, #14
 800e148:	683a      	ldr	r2, [r7, #0]
 800e14a:	7b92      	ldrb	r2, [r2, #14]
 800e14c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	330f      	adds	r3, #15
 800e152:	683a      	ldr	r2, [r7, #0]
 800e154:	7bd2      	ldrb	r2, [r2, #15]
 800e156:	701a      	strb	r2, [r3, #0]
#endif
}
 800e158:	bf00      	nop
 800e15a:	370c      	adds	r7, #12
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bc80      	pop	{r7}
 800e160:	4770      	bx	lr

0800e162 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800e162:	b480      	push	{r7}
 800e164:	b085      	sub	sp, #20
 800e166:	af00      	add	r7, sp, #0
 800e168:	60f8      	str	r0, [r7, #12]
 800e16a:	60b9      	str	r1, [r7, #8]
 800e16c:	4613      	mov	r3, r2
 800e16e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800e170:	e007      	b.n	800e182 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e172:	68ba      	ldr	r2, [r7, #8]
 800e174:	1c53      	adds	r3, r2, #1
 800e176:	60bb      	str	r3, [r7, #8]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	1c59      	adds	r1, r3, #1
 800e17c:	60f9      	str	r1, [r7, #12]
 800e17e:	7812      	ldrb	r2, [r2, #0]
 800e180:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800e182:	79fb      	ldrb	r3, [r7, #7]
 800e184:	1e5a      	subs	r2, r3, #1
 800e186:	71fa      	strb	r2, [r7, #7]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1f2      	bne.n	800e172 <copy_block_nn+0x10>
}
 800e18c:	bf00      	nop
 800e18e:	bf00      	nop
 800e190:	3714      	adds	r7, #20
 800e192:	46bd      	mov	sp, r7
 800e194:	bc80      	pop	{r7}
 800e196:	4770      	bx	lr

0800e198 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	781a      	ldrb	r2, [r3, #0]
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	4053      	eors	r3, r2
 800e1ac:	b2da      	uxtb	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	7819      	ldrb	r1, [r3, #0]
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	781a      	ldrb	r2, [r3, #0]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	404a      	eors	r2, r1
 800e1c4:	b2d2      	uxtb	r2, r2
 800e1c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	3302      	adds	r3, #2
 800e1cc:	7819      	ldrb	r1, [r3, #0]
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	3302      	adds	r3, #2
 800e1d2:	781a      	ldrb	r2, [r3, #0]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	3302      	adds	r3, #2
 800e1d8:	404a      	eors	r2, r1
 800e1da:	b2d2      	uxtb	r2, r2
 800e1dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	3303      	adds	r3, #3
 800e1e2:	7819      	ldrb	r1, [r3, #0]
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	3303      	adds	r3, #3
 800e1e8:	781a      	ldrb	r2, [r3, #0]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	3303      	adds	r3, #3
 800e1ee:	404a      	eors	r2, r1
 800e1f0:	b2d2      	uxtb	r2, r2
 800e1f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	3304      	adds	r3, #4
 800e1f8:	7819      	ldrb	r1, [r3, #0]
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	3304      	adds	r3, #4
 800e1fe:	781a      	ldrb	r2, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	3304      	adds	r3, #4
 800e204:	404a      	eors	r2, r1
 800e206:	b2d2      	uxtb	r2, r2
 800e208:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	3305      	adds	r3, #5
 800e20e:	7819      	ldrb	r1, [r3, #0]
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	3305      	adds	r3, #5
 800e214:	781a      	ldrb	r2, [r3, #0]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	3305      	adds	r3, #5
 800e21a:	404a      	eors	r2, r1
 800e21c:	b2d2      	uxtb	r2, r2
 800e21e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	3306      	adds	r3, #6
 800e224:	7819      	ldrb	r1, [r3, #0]
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	3306      	adds	r3, #6
 800e22a:	781a      	ldrb	r2, [r3, #0]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	3306      	adds	r3, #6
 800e230:	404a      	eors	r2, r1
 800e232:	b2d2      	uxtb	r2, r2
 800e234:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	3307      	adds	r3, #7
 800e23a:	7819      	ldrb	r1, [r3, #0]
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	3307      	adds	r3, #7
 800e240:	781a      	ldrb	r2, [r3, #0]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	3307      	adds	r3, #7
 800e246:	404a      	eors	r2, r1
 800e248:	b2d2      	uxtb	r2, r2
 800e24a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	3308      	adds	r3, #8
 800e250:	7819      	ldrb	r1, [r3, #0]
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	3308      	adds	r3, #8
 800e256:	781a      	ldrb	r2, [r3, #0]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	3308      	adds	r3, #8
 800e25c:	404a      	eors	r2, r1
 800e25e:	b2d2      	uxtb	r2, r2
 800e260:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	3309      	adds	r3, #9
 800e266:	7819      	ldrb	r1, [r3, #0]
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	3309      	adds	r3, #9
 800e26c:	781a      	ldrb	r2, [r3, #0]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	3309      	adds	r3, #9
 800e272:	404a      	eors	r2, r1
 800e274:	b2d2      	uxtb	r2, r2
 800e276:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	330a      	adds	r3, #10
 800e27c:	7819      	ldrb	r1, [r3, #0]
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	330a      	adds	r3, #10
 800e282:	781a      	ldrb	r2, [r3, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	330a      	adds	r3, #10
 800e288:	404a      	eors	r2, r1
 800e28a:	b2d2      	uxtb	r2, r2
 800e28c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	330b      	adds	r3, #11
 800e292:	7819      	ldrb	r1, [r3, #0]
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	330b      	adds	r3, #11
 800e298:	781a      	ldrb	r2, [r3, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	330b      	adds	r3, #11
 800e29e:	404a      	eors	r2, r1
 800e2a0:	b2d2      	uxtb	r2, r2
 800e2a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	330c      	adds	r3, #12
 800e2a8:	7819      	ldrb	r1, [r3, #0]
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	330c      	adds	r3, #12
 800e2ae:	781a      	ldrb	r2, [r3, #0]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	330c      	adds	r3, #12
 800e2b4:	404a      	eors	r2, r1
 800e2b6:	b2d2      	uxtb	r2, r2
 800e2b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	330d      	adds	r3, #13
 800e2be:	7819      	ldrb	r1, [r3, #0]
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	330d      	adds	r3, #13
 800e2c4:	781a      	ldrb	r2, [r3, #0]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	330d      	adds	r3, #13
 800e2ca:	404a      	eors	r2, r1
 800e2cc:	b2d2      	uxtb	r2, r2
 800e2ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	330e      	adds	r3, #14
 800e2d4:	7819      	ldrb	r1, [r3, #0]
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	330e      	adds	r3, #14
 800e2da:	781a      	ldrb	r2, [r3, #0]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	330e      	adds	r3, #14
 800e2e0:	404a      	eors	r2, r1
 800e2e2:	b2d2      	uxtb	r2, r2
 800e2e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	330f      	adds	r3, #15
 800e2ea:	7819      	ldrb	r1, [r3, #0]
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	330f      	adds	r3, #15
 800e2f0:	781a      	ldrb	r2, [r3, #0]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	330f      	adds	r3, #15
 800e2f6:	404a      	eors	r2, r1
 800e2f8:	b2d2      	uxtb	r2, r2
 800e2fa:	701a      	strb	r2, [r3, #0]
#endif
}
 800e2fc:	bf00      	nop
 800e2fe:	370c      	adds	r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	bc80      	pop	{r7}
 800e304:	4770      	bx	lr

0800e306 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800e306:	b480      	push	{r7}
 800e308:	b085      	sub	sp, #20
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	60f8      	str	r0, [r7, #12]
 800e30e:	60b9      	str	r1, [r7, #8]
 800e310:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	781a      	ldrb	r2, [r3, #0]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	4053      	eors	r3, r2
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	3301      	adds	r3, #1
 800e326:	7819      	ldrb	r1, [r3, #0]
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	3301      	adds	r3, #1
 800e32c:	781a      	ldrb	r2, [r3, #0]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	3301      	adds	r3, #1
 800e332:	404a      	eors	r2, r1
 800e334:	b2d2      	uxtb	r2, r2
 800e336:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	3302      	adds	r3, #2
 800e33c:	7819      	ldrb	r1, [r3, #0]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	3302      	adds	r3, #2
 800e342:	781a      	ldrb	r2, [r3, #0]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	3302      	adds	r3, #2
 800e348:	404a      	eors	r2, r1
 800e34a:	b2d2      	uxtb	r2, r2
 800e34c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	3303      	adds	r3, #3
 800e352:	7819      	ldrb	r1, [r3, #0]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	3303      	adds	r3, #3
 800e358:	781a      	ldrb	r2, [r3, #0]
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	3303      	adds	r3, #3
 800e35e:	404a      	eors	r2, r1
 800e360:	b2d2      	uxtb	r2, r2
 800e362:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	3304      	adds	r3, #4
 800e368:	7819      	ldrb	r1, [r3, #0]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	3304      	adds	r3, #4
 800e36e:	781a      	ldrb	r2, [r3, #0]
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	3304      	adds	r3, #4
 800e374:	404a      	eors	r2, r1
 800e376:	b2d2      	uxtb	r2, r2
 800e378:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	3305      	adds	r3, #5
 800e37e:	7819      	ldrb	r1, [r3, #0]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	3305      	adds	r3, #5
 800e384:	781a      	ldrb	r2, [r3, #0]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	3305      	adds	r3, #5
 800e38a:	404a      	eors	r2, r1
 800e38c:	b2d2      	uxtb	r2, r2
 800e38e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	3306      	adds	r3, #6
 800e394:	7819      	ldrb	r1, [r3, #0]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	3306      	adds	r3, #6
 800e39a:	781a      	ldrb	r2, [r3, #0]
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	3306      	adds	r3, #6
 800e3a0:	404a      	eors	r2, r1
 800e3a2:	b2d2      	uxtb	r2, r2
 800e3a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	3307      	adds	r3, #7
 800e3aa:	7819      	ldrb	r1, [r3, #0]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	3307      	adds	r3, #7
 800e3b0:	781a      	ldrb	r2, [r3, #0]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	3307      	adds	r3, #7
 800e3b6:	404a      	eors	r2, r1
 800e3b8:	b2d2      	uxtb	r2, r2
 800e3ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	3308      	adds	r3, #8
 800e3c0:	7819      	ldrb	r1, [r3, #0]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	3308      	adds	r3, #8
 800e3c6:	781a      	ldrb	r2, [r3, #0]
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	3308      	adds	r3, #8
 800e3cc:	404a      	eors	r2, r1
 800e3ce:	b2d2      	uxtb	r2, r2
 800e3d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	3309      	adds	r3, #9
 800e3d6:	7819      	ldrb	r1, [r3, #0]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	3309      	adds	r3, #9
 800e3dc:	781a      	ldrb	r2, [r3, #0]
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	3309      	adds	r3, #9
 800e3e2:	404a      	eors	r2, r1
 800e3e4:	b2d2      	uxtb	r2, r2
 800e3e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	330a      	adds	r3, #10
 800e3ec:	7819      	ldrb	r1, [r3, #0]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	330a      	adds	r3, #10
 800e3f2:	781a      	ldrb	r2, [r3, #0]
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	330a      	adds	r3, #10
 800e3f8:	404a      	eors	r2, r1
 800e3fa:	b2d2      	uxtb	r2, r2
 800e3fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	330b      	adds	r3, #11
 800e402:	7819      	ldrb	r1, [r3, #0]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	330b      	adds	r3, #11
 800e408:	781a      	ldrb	r2, [r3, #0]
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	330b      	adds	r3, #11
 800e40e:	404a      	eors	r2, r1
 800e410:	b2d2      	uxtb	r2, r2
 800e412:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	330c      	adds	r3, #12
 800e418:	7819      	ldrb	r1, [r3, #0]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	330c      	adds	r3, #12
 800e41e:	781a      	ldrb	r2, [r3, #0]
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	330c      	adds	r3, #12
 800e424:	404a      	eors	r2, r1
 800e426:	b2d2      	uxtb	r2, r2
 800e428:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	330d      	adds	r3, #13
 800e42e:	7819      	ldrb	r1, [r3, #0]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	330d      	adds	r3, #13
 800e434:	781a      	ldrb	r2, [r3, #0]
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	330d      	adds	r3, #13
 800e43a:	404a      	eors	r2, r1
 800e43c:	b2d2      	uxtb	r2, r2
 800e43e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	330e      	adds	r3, #14
 800e444:	7819      	ldrb	r1, [r3, #0]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	330e      	adds	r3, #14
 800e44a:	781a      	ldrb	r2, [r3, #0]
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	330e      	adds	r3, #14
 800e450:	404a      	eors	r2, r1
 800e452:	b2d2      	uxtb	r2, r2
 800e454:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	330f      	adds	r3, #15
 800e45a:	7819      	ldrb	r1, [r3, #0]
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	330f      	adds	r3, #15
 800e460:	781a      	ldrb	r2, [r3, #0]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	330f      	adds	r3, #15
 800e466:	404a      	eors	r2, r1
 800e468:	b2d2      	uxtb	r2, r2
 800e46a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e46c:	bf00      	nop
 800e46e:	3714      	adds	r7, #20
 800e470:	46bd      	mov	sp, r7
 800e472:	bc80      	pop	{r7}
 800e474:	4770      	bx	lr

0800e476 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e476:	b580      	push	{r7, lr}
 800e478:	b082      	sub	sp, #8
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
 800e47e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800e480:	6839      	ldr	r1, [r7, #0]
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7ff fe88 	bl	800e198 <xor_block>
}
 800e488:	bf00      	nop
 800e48a:	3708      	adds	r7, #8
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e490:	b480      	push	{r7}
 800e492:	b085      	sub	sp, #20
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	461a      	mov	r2, r3
 800e49e:	4b48      	ldr	r3, [pc, #288]	; (800e5c0 <shift_sub_rows+0x130>)
 800e4a0:	5c9a      	ldrb	r2, [r3, r2]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	701a      	strb	r2, [r3, #0]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	3304      	adds	r3, #4
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	3304      	adds	r3, #4
 800e4b2:	4a43      	ldr	r2, [pc, #268]	; (800e5c0 <shift_sub_rows+0x130>)
 800e4b4:	5c52      	ldrb	r2, [r2, r1]
 800e4b6:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	3308      	adds	r3, #8
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	4619      	mov	r1, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	3308      	adds	r3, #8
 800e4c4:	4a3e      	ldr	r2, [pc, #248]	; (800e5c0 <shift_sub_rows+0x130>)
 800e4c6:	5c52      	ldrb	r2, [r2, r1]
 800e4c8:	701a      	strb	r2, [r3, #0]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	330c      	adds	r3, #12
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	330c      	adds	r3, #12
 800e4d6:	4a3a      	ldr	r2, [pc, #232]	; (800e5c0 <shift_sub_rows+0x130>)
 800e4d8:	5c52      	ldrb	r2, [r2, r1]
 800e4da:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	785b      	ldrb	r3, [r3, #1]
 800e4e0:	73fb      	strb	r3, [r7, #15]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	3305      	adds	r3, #5
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	4a34      	ldr	r2, [pc, #208]	; (800e5c0 <shift_sub_rows+0x130>)
 800e4f0:	5c52      	ldrb	r2, [r2, r1]
 800e4f2:	701a      	strb	r2, [r3, #0]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	3309      	adds	r3, #9
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	3305      	adds	r3, #5
 800e500:	4a2f      	ldr	r2, [pc, #188]	; (800e5c0 <shift_sub_rows+0x130>)
 800e502:	5c52      	ldrb	r2, [r2, r1]
 800e504:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	330d      	adds	r3, #13
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	4619      	mov	r1, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	3309      	adds	r3, #9
 800e512:	4a2b      	ldr	r2, [pc, #172]	; (800e5c0 <shift_sub_rows+0x130>)
 800e514:	5c52      	ldrb	r2, [r2, r1]
 800e516:	701a      	strb	r2, [r3, #0]
 800e518:	7bfa      	ldrb	r2, [r7, #15]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	330d      	adds	r3, #13
 800e51e:	4928      	ldr	r1, [pc, #160]	; (800e5c0 <shift_sub_rows+0x130>)
 800e520:	5c8a      	ldrb	r2, [r1, r2]
 800e522:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	789b      	ldrb	r3, [r3, #2]
 800e528:	73fb      	strb	r3, [r7, #15]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	330a      	adds	r3, #10
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	4619      	mov	r1, r3
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	3302      	adds	r3, #2
 800e536:	4a22      	ldr	r2, [pc, #136]	; (800e5c0 <shift_sub_rows+0x130>)
 800e538:	5c52      	ldrb	r2, [r2, r1]
 800e53a:	701a      	strb	r2, [r3, #0]
 800e53c:	7bfa      	ldrb	r2, [r7, #15]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	330a      	adds	r3, #10
 800e542:	491f      	ldr	r1, [pc, #124]	; (800e5c0 <shift_sub_rows+0x130>)
 800e544:	5c8a      	ldrb	r2, [r1, r2]
 800e546:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	799b      	ldrb	r3, [r3, #6]
 800e54c:	73fb      	strb	r3, [r7, #15]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	330e      	adds	r3, #14
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	4619      	mov	r1, r3
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	3306      	adds	r3, #6
 800e55a:	4a19      	ldr	r2, [pc, #100]	; (800e5c0 <shift_sub_rows+0x130>)
 800e55c:	5c52      	ldrb	r2, [r2, r1]
 800e55e:	701a      	strb	r2, [r3, #0]
 800e560:	7bfa      	ldrb	r2, [r7, #15]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	330e      	adds	r3, #14
 800e566:	4916      	ldr	r1, [pc, #88]	; (800e5c0 <shift_sub_rows+0x130>)
 800e568:	5c8a      	ldrb	r2, [r1, r2]
 800e56a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	7bdb      	ldrb	r3, [r3, #15]
 800e570:	73fb      	strb	r3, [r7, #15]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	330b      	adds	r3, #11
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	4619      	mov	r1, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	330f      	adds	r3, #15
 800e57e:	4a10      	ldr	r2, [pc, #64]	; (800e5c0 <shift_sub_rows+0x130>)
 800e580:	5c52      	ldrb	r2, [r2, r1]
 800e582:	701a      	strb	r2, [r3, #0]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	3307      	adds	r3, #7
 800e588:	781b      	ldrb	r3, [r3, #0]
 800e58a:	4619      	mov	r1, r3
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	330b      	adds	r3, #11
 800e590:	4a0b      	ldr	r2, [pc, #44]	; (800e5c0 <shift_sub_rows+0x130>)
 800e592:	5c52      	ldrb	r2, [r2, r1]
 800e594:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	3303      	adds	r3, #3
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	4619      	mov	r1, r3
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	3307      	adds	r3, #7
 800e5a2:	4a07      	ldr	r2, [pc, #28]	; (800e5c0 <shift_sub_rows+0x130>)
 800e5a4:	5c52      	ldrb	r2, [r2, r1]
 800e5a6:	701a      	strb	r2, [r3, #0]
 800e5a8:	7bfa      	ldrb	r2, [r7, #15]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	3303      	adds	r3, #3
 800e5ae:	4904      	ldr	r1, [pc, #16]	; (800e5c0 <shift_sub_rows+0x130>)
 800e5b0:	5c8a      	ldrb	r2, [r1, r2]
 800e5b2:	701a      	strb	r2, [r3, #0]
}
 800e5b4:	bf00      	nop
 800e5b6:	3714      	adds	r7, #20
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bc80      	pop	{r7}
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	08020010 	.word	0x08020010

0800e5c4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b086      	sub	sp, #24
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e5cc:	f107 0308 	add.w	r3, r7, #8
 800e5d0:	6879      	ldr	r1, [r7, #4]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7ff fd6c 	bl	800e0b0 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e5d8:	7a3b      	ldrb	r3, [r7, #8]
 800e5da:	461a      	mov	r2, r3
 800e5dc:	4b9a      	ldr	r3, [pc, #616]	; (800e848 <mix_sub_columns+0x284>)
 800e5de:	5c9a      	ldrb	r2, [r3, r2]
 800e5e0:	7b7b      	ldrb	r3, [r7, #13]
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	4b99      	ldr	r3, [pc, #612]	; (800e84c <mix_sub_columns+0x288>)
 800e5e6:	5c5b      	ldrb	r3, [r3, r1]
 800e5e8:	4053      	eors	r3, r2
 800e5ea:	b2da      	uxtb	r2, r3
 800e5ec:	7cbb      	ldrb	r3, [r7, #18]
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	4b97      	ldr	r3, [pc, #604]	; (800e850 <mix_sub_columns+0x28c>)
 800e5f2:	5c5b      	ldrb	r3, [r3, r1]
 800e5f4:	4053      	eors	r3, r2
 800e5f6:	b2da      	uxtb	r2, r3
 800e5f8:	7dfb      	ldrb	r3, [r7, #23]
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	4b94      	ldr	r3, [pc, #592]	; (800e850 <mix_sub_columns+0x28c>)
 800e5fe:	5c5b      	ldrb	r3, [r3, r1]
 800e600:	4053      	eors	r3, r2
 800e602:	b2da      	uxtb	r2, r3
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e608:	7a3b      	ldrb	r3, [r7, #8]
 800e60a:	461a      	mov	r2, r3
 800e60c:	4b90      	ldr	r3, [pc, #576]	; (800e850 <mix_sub_columns+0x28c>)
 800e60e:	5c9a      	ldrb	r2, [r3, r2]
 800e610:	7b7b      	ldrb	r3, [r7, #13]
 800e612:	4619      	mov	r1, r3
 800e614:	4b8c      	ldr	r3, [pc, #560]	; (800e848 <mix_sub_columns+0x284>)
 800e616:	5c5b      	ldrb	r3, [r3, r1]
 800e618:	4053      	eors	r3, r2
 800e61a:	b2da      	uxtb	r2, r3
 800e61c:	7cbb      	ldrb	r3, [r7, #18]
 800e61e:	4619      	mov	r1, r3
 800e620:	4b8a      	ldr	r3, [pc, #552]	; (800e84c <mix_sub_columns+0x288>)
 800e622:	5c5b      	ldrb	r3, [r3, r1]
 800e624:	4053      	eors	r3, r2
 800e626:	b2d9      	uxtb	r1, r3
 800e628:	7dfb      	ldrb	r3, [r7, #23]
 800e62a:	461a      	mov	r2, r3
 800e62c:	4b88      	ldr	r3, [pc, #544]	; (800e850 <mix_sub_columns+0x28c>)
 800e62e:	5c9a      	ldrb	r2, [r3, r2]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	3301      	adds	r3, #1
 800e634:	404a      	eors	r2, r1
 800e636:	b2d2      	uxtb	r2, r2
 800e638:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e63a:	7a3b      	ldrb	r3, [r7, #8]
 800e63c:	461a      	mov	r2, r3
 800e63e:	4b84      	ldr	r3, [pc, #528]	; (800e850 <mix_sub_columns+0x28c>)
 800e640:	5c9a      	ldrb	r2, [r3, r2]
 800e642:	7b7b      	ldrb	r3, [r7, #13]
 800e644:	4619      	mov	r1, r3
 800e646:	4b82      	ldr	r3, [pc, #520]	; (800e850 <mix_sub_columns+0x28c>)
 800e648:	5c5b      	ldrb	r3, [r3, r1]
 800e64a:	4053      	eors	r3, r2
 800e64c:	b2da      	uxtb	r2, r3
 800e64e:	7cbb      	ldrb	r3, [r7, #18]
 800e650:	4619      	mov	r1, r3
 800e652:	4b7d      	ldr	r3, [pc, #500]	; (800e848 <mix_sub_columns+0x284>)
 800e654:	5c5b      	ldrb	r3, [r3, r1]
 800e656:	4053      	eors	r3, r2
 800e658:	b2d9      	uxtb	r1, r3
 800e65a:	7dfb      	ldrb	r3, [r7, #23]
 800e65c:	461a      	mov	r2, r3
 800e65e:	4b7b      	ldr	r3, [pc, #492]	; (800e84c <mix_sub_columns+0x288>)
 800e660:	5c9a      	ldrb	r2, [r3, r2]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	3302      	adds	r3, #2
 800e666:	404a      	eors	r2, r1
 800e668:	b2d2      	uxtb	r2, r2
 800e66a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e66c:	7a3b      	ldrb	r3, [r7, #8]
 800e66e:	461a      	mov	r2, r3
 800e670:	4b76      	ldr	r3, [pc, #472]	; (800e84c <mix_sub_columns+0x288>)
 800e672:	5c9a      	ldrb	r2, [r3, r2]
 800e674:	7b7b      	ldrb	r3, [r7, #13]
 800e676:	4619      	mov	r1, r3
 800e678:	4b75      	ldr	r3, [pc, #468]	; (800e850 <mix_sub_columns+0x28c>)
 800e67a:	5c5b      	ldrb	r3, [r3, r1]
 800e67c:	4053      	eors	r3, r2
 800e67e:	b2da      	uxtb	r2, r3
 800e680:	7cbb      	ldrb	r3, [r7, #18]
 800e682:	4619      	mov	r1, r3
 800e684:	4b72      	ldr	r3, [pc, #456]	; (800e850 <mix_sub_columns+0x28c>)
 800e686:	5c5b      	ldrb	r3, [r3, r1]
 800e688:	4053      	eors	r3, r2
 800e68a:	b2d9      	uxtb	r1, r3
 800e68c:	7dfb      	ldrb	r3, [r7, #23]
 800e68e:	461a      	mov	r2, r3
 800e690:	4b6d      	ldr	r3, [pc, #436]	; (800e848 <mix_sub_columns+0x284>)
 800e692:	5c9a      	ldrb	r2, [r3, r2]
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	3303      	adds	r3, #3
 800e698:	404a      	eors	r2, r1
 800e69a:	b2d2      	uxtb	r2, r2
 800e69c:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e69e:	7b3b      	ldrb	r3, [r7, #12]
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	4b69      	ldr	r3, [pc, #420]	; (800e848 <mix_sub_columns+0x284>)
 800e6a4:	5c9a      	ldrb	r2, [r3, r2]
 800e6a6:	7c7b      	ldrb	r3, [r7, #17]
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	4b68      	ldr	r3, [pc, #416]	; (800e84c <mix_sub_columns+0x288>)
 800e6ac:	5c5b      	ldrb	r3, [r3, r1]
 800e6ae:	4053      	eors	r3, r2
 800e6b0:	b2da      	uxtb	r2, r3
 800e6b2:	7dbb      	ldrb	r3, [r7, #22]
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	4b66      	ldr	r3, [pc, #408]	; (800e850 <mix_sub_columns+0x28c>)
 800e6b8:	5c5b      	ldrb	r3, [r3, r1]
 800e6ba:	4053      	eors	r3, r2
 800e6bc:	b2d9      	uxtb	r1, r3
 800e6be:	7afb      	ldrb	r3, [r7, #11]
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	4b63      	ldr	r3, [pc, #396]	; (800e850 <mix_sub_columns+0x28c>)
 800e6c4:	5c9a      	ldrb	r2, [r3, r2]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	3304      	adds	r3, #4
 800e6ca:	404a      	eors	r2, r1
 800e6cc:	b2d2      	uxtb	r2, r2
 800e6ce:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e6d0:	7b3b      	ldrb	r3, [r7, #12]
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	4b5e      	ldr	r3, [pc, #376]	; (800e850 <mix_sub_columns+0x28c>)
 800e6d6:	5c9a      	ldrb	r2, [r3, r2]
 800e6d8:	7c7b      	ldrb	r3, [r7, #17]
 800e6da:	4619      	mov	r1, r3
 800e6dc:	4b5a      	ldr	r3, [pc, #360]	; (800e848 <mix_sub_columns+0x284>)
 800e6de:	5c5b      	ldrb	r3, [r3, r1]
 800e6e0:	4053      	eors	r3, r2
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	7dbb      	ldrb	r3, [r7, #22]
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	4b58      	ldr	r3, [pc, #352]	; (800e84c <mix_sub_columns+0x288>)
 800e6ea:	5c5b      	ldrb	r3, [r3, r1]
 800e6ec:	4053      	eors	r3, r2
 800e6ee:	b2d9      	uxtb	r1, r3
 800e6f0:	7afb      	ldrb	r3, [r7, #11]
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	4b56      	ldr	r3, [pc, #344]	; (800e850 <mix_sub_columns+0x28c>)
 800e6f6:	5c9a      	ldrb	r2, [r3, r2]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	3305      	adds	r3, #5
 800e6fc:	404a      	eors	r2, r1
 800e6fe:	b2d2      	uxtb	r2, r2
 800e700:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e702:	7b3b      	ldrb	r3, [r7, #12]
 800e704:	461a      	mov	r2, r3
 800e706:	4b52      	ldr	r3, [pc, #328]	; (800e850 <mix_sub_columns+0x28c>)
 800e708:	5c9a      	ldrb	r2, [r3, r2]
 800e70a:	7c7b      	ldrb	r3, [r7, #17]
 800e70c:	4619      	mov	r1, r3
 800e70e:	4b50      	ldr	r3, [pc, #320]	; (800e850 <mix_sub_columns+0x28c>)
 800e710:	5c5b      	ldrb	r3, [r3, r1]
 800e712:	4053      	eors	r3, r2
 800e714:	b2da      	uxtb	r2, r3
 800e716:	7dbb      	ldrb	r3, [r7, #22]
 800e718:	4619      	mov	r1, r3
 800e71a:	4b4b      	ldr	r3, [pc, #300]	; (800e848 <mix_sub_columns+0x284>)
 800e71c:	5c5b      	ldrb	r3, [r3, r1]
 800e71e:	4053      	eors	r3, r2
 800e720:	b2d9      	uxtb	r1, r3
 800e722:	7afb      	ldrb	r3, [r7, #11]
 800e724:	461a      	mov	r2, r3
 800e726:	4b49      	ldr	r3, [pc, #292]	; (800e84c <mix_sub_columns+0x288>)
 800e728:	5c9a      	ldrb	r2, [r3, r2]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	3306      	adds	r3, #6
 800e72e:	404a      	eors	r2, r1
 800e730:	b2d2      	uxtb	r2, r2
 800e732:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e734:	7b3b      	ldrb	r3, [r7, #12]
 800e736:	461a      	mov	r2, r3
 800e738:	4b44      	ldr	r3, [pc, #272]	; (800e84c <mix_sub_columns+0x288>)
 800e73a:	5c9a      	ldrb	r2, [r3, r2]
 800e73c:	7c7b      	ldrb	r3, [r7, #17]
 800e73e:	4619      	mov	r1, r3
 800e740:	4b43      	ldr	r3, [pc, #268]	; (800e850 <mix_sub_columns+0x28c>)
 800e742:	5c5b      	ldrb	r3, [r3, r1]
 800e744:	4053      	eors	r3, r2
 800e746:	b2da      	uxtb	r2, r3
 800e748:	7dbb      	ldrb	r3, [r7, #22]
 800e74a:	4619      	mov	r1, r3
 800e74c:	4b40      	ldr	r3, [pc, #256]	; (800e850 <mix_sub_columns+0x28c>)
 800e74e:	5c5b      	ldrb	r3, [r3, r1]
 800e750:	4053      	eors	r3, r2
 800e752:	b2d9      	uxtb	r1, r3
 800e754:	7afb      	ldrb	r3, [r7, #11]
 800e756:	461a      	mov	r2, r3
 800e758:	4b3b      	ldr	r3, [pc, #236]	; (800e848 <mix_sub_columns+0x284>)
 800e75a:	5c9a      	ldrb	r2, [r3, r2]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	3307      	adds	r3, #7
 800e760:	404a      	eors	r2, r1
 800e762:	b2d2      	uxtb	r2, r2
 800e764:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e766:	7c3b      	ldrb	r3, [r7, #16]
 800e768:	461a      	mov	r2, r3
 800e76a:	4b37      	ldr	r3, [pc, #220]	; (800e848 <mix_sub_columns+0x284>)
 800e76c:	5c9a      	ldrb	r2, [r3, r2]
 800e76e:	7d7b      	ldrb	r3, [r7, #21]
 800e770:	4619      	mov	r1, r3
 800e772:	4b36      	ldr	r3, [pc, #216]	; (800e84c <mix_sub_columns+0x288>)
 800e774:	5c5b      	ldrb	r3, [r3, r1]
 800e776:	4053      	eors	r3, r2
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	7abb      	ldrb	r3, [r7, #10]
 800e77c:	4619      	mov	r1, r3
 800e77e:	4b34      	ldr	r3, [pc, #208]	; (800e850 <mix_sub_columns+0x28c>)
 800e780:	5c5b      	ldrb	r3, [r3, r1]
 800e782:	4053      	eors	r3, r2
 800e784:	b2d9      	uxtb	r1, r3
 800e786:	7bfb      	ldrb	r3, [r7, #15]
 800e788:	461a      	mov	r2, r3
 800e78a:	4b31      	ldr	r3, [pc, #196]	; (800e850 <mix_sub_columns+0x28c>)
 800e78c:	5c9a      	ldrb	r2, [r3, r2]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	3308      	adds	r3, #8
 800e792:	404a      	eors	r2, r1
 800e794:	b2d2      	uxtb	r2, r2
 800e796:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e798:	7c3b      	ldrb	r3, [r7, #16]
 800e79a:	461a      	mov	r2, r3
 800e79c:	4b2c      	ldr	r3, [pc, #176]	; (800e850 <mix_sub_columns+0x28c>)
 800e79e:	5c9a      	ldrb	r2, [r3, r2]
 800e7a0:	7d7b      	ldrb	r3, [r7, #21]
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	4b28      	ldr	r3, [pc, #160]	; (800e848 <mix_sub_columns+0x284>)
 800e7a6:	5c5b      	ldrb	r3, [r3, r1]
 800e7a8:	4053      	eors	r3, r2
 800e7aa:	b2da      	uxtb	r2, r3
 800e7ac:	7abb      	ldrb	r3, [r7, #10]
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	4b26      	ldr	r3, [pc, #152]	; (800e84c <mix_sub_columns+0x288>)
 800e7b2:	5c5b      	ldrb	r3, [r3, r1]
 800e7b4:	4053      	eors	r3, r2
 800e7b6:	b2d9      	uxtb	r1, r3
 800e7b8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	4b24      	ldr	r3, [pc, #144]	; (800e850 <mix_sub_columns+0x28c>)
 800e7be:	5c9a      	ldrb	r2, [r3, r2]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	3309      	adds	r3, #9
 800e7c4:	404a      	eors	r2, r1
 800e7c6:	b2d2      	uxtb	r2, r2
 800e7c8:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e7ca:	7c3b      	ldrb	r3, [r7, #16]
 800e7cc:	461a      	mov	r2, r3
 800e7ce:	4b20      	ldr	r3, [pc, #128]	; (800e850 <mix_sub_columns+0x28c>)
 800e7d0:	5c9a      	ldrb	r2, [r3, r2]
 800e7d2:	7d7b      	ldrb	r3, [r7, #21]
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	4b1e      	ldr	r3, [pc, #120]	; (800e850 <mix_sub_columns+0x28c>)
 800e7d8:	5c5b      	ldrb	r3, [r3, r1]
 800e7da:	4053      	eors	r3, r2
 800e7dc:	b2da      	uxtb	r2, r3
 800e7de:	7abb      	ldrb	r3, [r7, #10]
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	4b19      	ldr	r3, [pc, #100]	; (800e848 <mix_sub_columns+0x284>)
 800e7e4:	5c5b      	ldrb	r3, [r3, r1]
 800e7e6:	4053      	eors	r3, r2
 800e7e8:	b2d9      	uxtb	r1, r3
 800e7ea:	7bfb      	ldrb	r3, [r7, #15]
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	4b17      	ldr	r3, [pc, #92]	; (800e84c <mix_sub_columns+0x288>)
 800e7f0:	5c9a      	ldrb	r2, [r3, r2]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	330a      	adds	r3, #10
 800e7f6:	404a      	eors	r2, r1
 800e7f8:	b2d2      	uxtb	r2, r2
 800e7fa:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e7fc:	7c3b      	ldrb	r3, [r7, #16]
 800e7fe:	461a      	mov	r2, r3
 800e800:	4b12      	ldr	r3, [pc, #72]	; (800e84c <mix_sub_columns+0x288>)
 800e802:	5c9a      	ldrb	r2, [r3, r2]
 800e804:	7d7b      	ldrb	r3, [r7, #21]
 800e806:	4619      	mov	r1, r3
 800e808:	4b11      	ldr	r3, [pc, #68]	; (800e850 <mix_sub_columns+0x28c>)
 800e80a:	5c5b      	ldrb	r3, [r3, r1]
 800e80c:	4053      	eors	r3, r2
 800e80e:	b2da      	uxtb	r2, r3
 800e810:	7abb      	ldrb	r3, [r7, #10]
 800e812:	4619      	mov	r1, r3
 800e814:	4b0e      	ldr	r3, [pc, #56]	; (800e850 <mix_sub_columns+0x28c>)
 800e816:	5c5b      	ldrb	r3, [r3, r1]
 800e818:	4053      	eors	r3, r2
 800e81a:	b2d9      	uxtb	r1, r3
 800e81c:	7bfb      	ldrb	r3, [r7, #15]
 800e81e:	461a      	mov	r2, r3
 800e820:	4b09      	ldr	r3, [pc, #36]	; (800e848 <mix_sub_columns+0x284>)
 800e822:	5c9a      	ldrb	r2, [r3, r2]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	330b      	adds	r3, #11
 800e828:	404a      	eors	r2, r1
 800e82a:	b2d2      	uxtb	r2, r2
 800e82c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e82e:	7d3b      	ldrb	r3, [r7, #20]
 800e830:	461a      	mov	r2, r3
 800e832:	4b05      	ldr	r3, [pc, #20]	; (800e848 <mix_sub_columns+0x284>)
 800e834:	5c9a      	ldrb	r2, [r3, r2]
 800e836:	7a7b      	ldrb	r3, [r7, #9]
 800e838:	4619      	mov	r1, r3
 800e83a:	4b04      	ldr	r3, [pc, #16]	; (800e84c <mix_sub_columns+0x288>)
 800e83c:	5c5b      	ldrb	r3, [r3, r1]
 800e83e:	4053      	eors	r3, r2
 800e840:	b2da      	uxtb	r2, r3
 800e842:	7bbb      	ldrb	r3, [r7, #14]
 800e844:	4619      	mov	r1, r3
 800e846:	e005      	b.n	800e854 <mix_sub_columns+0x290>
 800e848:	08020110 	.word	0x08020110
 800e84c:	08020210 	.word	0x08020210
 800e850:	08020010 	.word	0x08020010
 800e854:	4b2d      	ldr	r3, [pc, #180]	; (800e90c <mix_sub_columns+0x348>)
 800e856:	5c5b      	ldrb	r3, [r3, r1]
 800e858:	4053      	eors	r3, r2
 800e85a:	b2d9      	uxtb	r1, r3
 800e85c:	7cfb      	ldrb	r3, [r7, #19]
 800e85e:	461a      	mov	r2, r3
 800e860:	4b2a      	ldr	r3, [pc, #168]	; (800e90c <mix_sub_columns+0x348>)
 800e862:	5c9a      	ldrb	r2, [r3, r2]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	330c      	adds	r3, #12
 800e868:	404a      	eors	r2, r1
 800e86a:	b2d2      	uxtb	r2, r2
 800e86c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e86e:	7d3b      	ldrb	r3, [r7, #20]
 800e870:	461a      	mov	r2, r3
 800e872:	4b26      	ldr	r3, [pc, #152]	; (800e90c <mix_sub_columns+0x348>)
 800e874:	5c9a      	ldrb	r2, [r3, r2]
 800e876:	7a7b      	ldrb	r3, [r7, #9]
 800e878:	4619      	mov	r1, r3
 800e87a:	4b25      	ldr	r3, [pc, #148]	; (800e910 <mix_sub_columns+0x34c>)
 800e87c:	5c5b      	ldrb	r3, [r3, r1]
 800e87e:	4053      	eors	r3, r2
 800e880:	b2da      	uxtb	r2, r3
 800e882:	7bbb      	ldrb	r3, [r7, #14]
 800e884:	4619      	mov	r1, r3
 800e886:	4b23      	ldr	r3, [pc, #140]	; (800e914 <mix_sub_columns+0x350>)
 800e888:	5c5b      	ldrb	r3, [r3, r1]
 800e88a:	4053      	eors	r3, r2
 800e88c:	b2d9      	uxtb	r1, r3
 800e88e:	7cfb      	ldrb	r3, [r7, #19]
 800e890:	461a      	mov	r2, r3
 800e892:	4b1e      	ldr	r3, [pc, #120]	; (800e90c <mix_sub_columns+0x348>)
 800e894:	5c9a      	ldrb	r2, [r3, r2]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	330d      	adds	r3, #13
 800e89a:	404a      	eors	r2, r1
 800e89c:	b2d2      	uxtb	r2, r2
 800e89e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e8a0:	7d3b      	ldrb	r3, [r7, #20]
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	4b19      	ldr	r3, [pc, #100]	; (800e90c <mix_sub_columns+0x348>)
 800e8a6:	5c9a      	ldrb	r2, [r3, r2]
 800e8a8:	7a7b      	ldrb	r3, [r7, #9]
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	4b17      	ldr	r3, [pc, #92]	; (800e90c <mix_sub_columns+0x348>)
 800e8ae:	5c5b      	ldrb	r3, [r3, r1]
 800e8b0:	4053      	eors	r3, r2
 800e8b2:	b2da      	uxtb	r2, r3
 800e8b4:	7bbb      	ldrb	r3, [r7, #14]
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	4b15      	ldr	r3, [pc, #84]	; (800e910 <mix_sub_columns+0x34c>)
 800e8ba:	5c5b      	ldrb	r3, [r3, r1]
 800e8bc:	4053      	eors	r3, r2
 800e8be:	b2d9      	uxtb	r1, r3
 800e8c0:	7cfb      	ldrb	r3, [r7, #19]
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	4b13      	ldr	r3, [pc, #76]	; (800e914 <mix_sub_columns+0x350>)
 800e8c6:	5c9a      	ldrb	r2, [r3, r2]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	330e      	adds	r3, #14
 800e8cc:	404a      	eors	r2, r1
 800e8ce:	b2d2      	uxtb	r2, r2
 800e8d0:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e8d2:	7d3b      	ldrb	r3, [r7, #20]
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	4b0f      	ldr	r3, [pc, #60]	; (800e914 <mix_sub_columns+0x350>)
 800e8d8:	5c9a      	ldrb	r2, [r3, r2]
 800e8da:	7a7b      	ldrb	r3, [r7, #9]
 800e8dc:	4619      	mov	r1, r3
 800e8de:	4b0b      	ldr	r3, [pc, #44]	; (800e90c <mix_sub_columns+0x348>)
 800e8e0:	5c5b      	ldrb	r3, [r3, r1]
 800e8e2:	4053      	eors	r3, r2
 800e8e4:	b2da      	uxtb	r2, r3
 800e8e6:	7bbb      	ldrb	r3, [r7, #14]
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	4b08      	ldr	r3, [pc, #32]	; (800e90c <mix_sub_columns+0x348>)
 800e8ec:	5c5b      	ldrb	r3, [r3, r1]
 800e8ee:	4053      	eors	r3, r2
 800e8f0:	b2d9      	uxtb	r1, r3
 800e8f2:	7cfb      	ldrb	r3, [r7, #19]
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	4b06      	ldr	r3, [pc, #24]	; (800e910 <mix_sub_columns+0x34c>)
 800e8f8:	5c9a      	ldrb	r2, [r3, r2]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	330f      	adds	r3, #15
 800e8fe:	404a      	eors	r2, r1
 800e900:	b2d2      	uxtb	r2, r2
 800e902:	701a      	strb	r2, [r3, #0]
  }
 800e904:	bf00      	nop
 800e906:	3718      	adds	r7, #24
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	08020010 	.word	0x08020010
 800e910:	08020110 	.word	0x08020110
 800e914:	08020210 	.word	0x08020210

0800e918 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b086      	sub	sp, #24
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	460b      	mov	r3, r1
 800e922:	607a      	str	r2, [r7, #4]
 800e924:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800e926:	7afb      	ldrb	r3, [r7, #11]
 800e928:	3b10      	subs	r3, #16
 800e92a:	2b10      	cmp	r3, #16
 800e92c:	bf8c      	ite	hi
 800e92e:	2201      	movhi	r2, #1
 800e930:	2200      	movls	r2, #0
 800e932:	b2d2      	uxtb	r2, r2
 800e934:	2a00      	cmp	r2, #0
 800e936:	d10b      	bne.n	800e950 <lorawan_aes_set_key+0x38>
 800e938:	4a64      	ldr	r2, [pc, #400]	; (800eacc <lorawan_aes_set_key+0x1b4>)
 800e93a:	fa22 f303 	lsr.w	r3, r2, r3
 800e93e:	f003 0301 	and.w	r3, r3, #1
 800e942:	2b00      	cmp	r3, #0
 800e944:	bf14      	ite	ne
 800e946:	2301      	movne	r3, #1
 800e948:	2300      	moveq	r3, #0
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d105      	bne.n	800e95c <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2200      	movs	r2, #0
 800e954:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800e958:	23ff      	movs	r3, #255	; 0xff
 800e95a:	e0b2      	b.n	800eac2 <lorawan_aes_set_key+0x1aa>
        break;
 800e95c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	7afa      	ldrb	r2, [r7, #11]
 800e962:	68f9      	ldr	r1, [r7, #12]
 800e964:	4618      	mov	r0, r3
 800e966:	f7ff fbfc 	bl	800e162 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e96a:	7afb      	ldrb	r3, [r7, #11]
 800e96c:	331c      	adds	r3, #28
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800e974:	7c7b      	ldrb	r3, [r7, #17]
 800e976:	091b      	lsrs	r3, r3, #4
 800e978:	b2db      	uxtb	r3, r3
 800e97a:	3b01      	subs	r3, #1
 800e97c:	b2da      	uxtb	r2, r3
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e984:	7afb      	ldrb	r3, [r7, #11]
 800e986:	75fb      	strb	r3, [r7, #23]
 800e988:	2301      	movs	r3, #1
 800e98a:	75bb      	strb	r3, [r7, #22]
 800e98c:	e093      	b.n	800eab6 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800e98e:	7dfb      	ldrb	r3, [r7, #23]
 800e990:	3b04      	subs	r3, #4
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	5cd3      	ldrb	r3, [r2, r3]
 800e996:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800e998:	7dfb      	ldrb	r3, [r7, #23]
 800e99a:	3b03      	subs	r3, #3
 800e99c:	687a      	ldr	r2, [r7, #4]
 800e99e:	5cd3      	ldrb	r3, [r2, r3]
 800e9a0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800e9a2:	7dfb      	ldrb	r3, [r7, #23]
 800e9a4:	3b02      	subs	r3, #2
 800e9a6:	687a      	ldr	r2, [r7, #4]
 800e9a8:	5cd3      	ldrb	r3, [r2, r3]
 800e9aa:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800e9ac:	7dfb      	ldrb	r3, [r7, #23]
 800e9ae:	3b01      	subs	r3, #1
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	5cd3      	ldrb	r3, [r2, r3]
 800e9b4:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800e9b6:	7dfb      	ldrb	r3, [r7, #23]
 800e9b8:	7afa      	ldrb	r2, [r7, #11]
 800e9ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800e9be:	fb01 f202 	mul.w	r2, r1, r2
 800e9c2:	1a9b      	subs	r3, r3, r2
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d127      	bne.n	800ea1a <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800e9ca:	7d7b      	ldrb	r3, [r7, #21]
 800e9cc:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800e9ce:	7d3b      	ldrb	r3, [r7, #20]
 800e9d0:	4a3f      	ldr	r2, [pc, #252]	; (800ead0 <lorawan_aes_set_key+0x1b8>)
 800e9d2:	5cd2      	ldrb	r2, [r2, r3]
 800e9d4:	7dbb      	ldrb	r3, [r7, #22]
 800e9d6:	4053      	eors	r3, r2
 800e9d8:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800e9da:	7cfb      	ldrb	r3, [r7, #19]
 800e9dc:	4a3c      	ldr	r2, [pc, #240]	; (800ead0 <lorawan_aes_set_key+0x1b8>)
 800e9de:	5cd3      	ldrb	r3, [r2, r3]
 800e9e0:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800e9e2:	7cbb      	ldrb	r3, [r7, #18]
 800e9e4:	4a3a      	ldr	r2, [pc, #232]	; (800ead0 <lorawan_aes_set_key+0x1b8>)
 800e9e6:	5cd3      	ldrb	r3, [r2, r3]
 800e9e8:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800e9ea:	7c3b      	ldrb	r3, [r7, #16]
 800e9ec:	4a38      	ldr	r2, [pc, #224]	; (800ead0 <lorawan_aes_set_key+0x1b8>)
 800e9ee:	5cd3      	ldrb	r3, [r2, r3]
 800e9f0:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800e9f2:	7dbb      	ldrb	r3, [r7, #22]
 800e9f4:	005b      	lsls	r3, r3, #1
 800e9f6:	b25a      	sxtb	r2, r3
 800e9f8:	7dbb      	ldrb	r3, [r7, #22]
 800e9fa:	09db      	lsrs	r3, r3, #7
 800e9fc:	b2db      	uxtb	r3, r3
 800e9fe:	4619      	mov	r1, r3
 800ea00:	0049      	lsls	r1, r1, #1
 800ea02:	440b      	add	r3, r1
 800ea04:	4619      	mov	r1, r3
 800ea06:	00c8      	lsls	r0, r1, #3
 800ea08:	4619      	mov	r1, r3
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	440b      	add	r3, r1
 800ea0e:	b2db      	uxtb	r3, r3
 800ea10:	b25b      	sxtb	r3, r3
 800ea12:	4053      	eors	r3, r2
 800ea14:	b25b      	sxtb	r3, r3
 800ea16:	75bb      	strb	r3, [r7, #22]
 800ea18:	e01c      	b.n	800ea54 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800ea1a:	7afb      	ldrb	r3, [r7, #11]
 800ea1c:	2b18      	cmp	r3, #24
 800ea1e:	d919      	bls.n	800ea54 <lorawan_aes_set_key+0x13c>
 800ea20:	7dfb      	ldrb	r3, [r7, #23]
 800ea22:	7afa      	ldrb	r2, [r7, #11]
 800ea24:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea28:	fb01 f202 	mul.w	r2, r1, r2
 800ea2c:	1a9b      	subs	r3, r3, r2
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	2b10      	cmp	r3, #16
 800ea32:	d10f      	bne.n	800ea54 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800ea34:	7d7b      	ldrb	r3, [r7, #21]
 800ea36:	4a26      	ldr	r2, [pc, #152]	; (800ead0 <lorawan_aes_set_key+0x1b8>)
 800ea38:	5cd3      	ldrb	r3, [r2, r3]
 800ea3a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800ea3c:	7d3b      	ldrb	r3, [r7, #20]
 800ea3e:	4a24      	ldr	r2, [pc, #144]	; (800ead0 <lorawan_aes_set_key+0x1b8>)
 800ea40:	5cd3      	ldrb	r3, [r2, r3]
 800ea42:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800ea44:	7cfb      	ldrb	r3, [r7, #19]
 800ea46:	4a22      	ldr	r2, [pc, #136]	; (800ead0 <lorawan_aes_set_key+0x1b8>)
 800ea48:	5cd3      	ldrb	r3, [r2, r3]
 800ea4a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800ea4c:	7cbb      	ldrb	r3, [r7, #18]
 800ea4e:	4a20      	ldr	r2, [pc, #128]	; (800ead0 <lorawan_aes_set_key+0x1b8>)
 800ea50:	5cd3      	ldrb	r3, [r2, r3]
 800ea52:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800ea54:	7dfa      	ldrb	r2, [r7, #23]
 800ea56:	7afb      	ldrb	r3, [r7, #11]
 800ea58:	1ad3      	subs	r3, r2, r3
 800ea5a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ea5c:	7c3b      	ldrb	r3, [r7, #16]
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	5cd1      	ldrb	r1, [r2, r3]
 800ea62:	7dfb      	ldrb	r3, [r7, #23]
 800ea64:	7d7a      	ldrb	r2, [r7, #21]
 800ea66:	404a      	eors	r2, r1
 800ea68:	b2d1      	uxtb	r1, r2
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ea6e:	7c3b      	ldrb	r3, [r7, #16]
 800ea70:	3301      	adds	r3, #1
 800ea72:	687a      	ldr	r2, [r7, #4]
 800ea74:	5cd1      	ldrb	r1, [r2, r3]
 800ea76:	7dfb      	ldrb	r3, [r7, #23]
 800ea78:	3301      	adds	r3, #1
 800ea7a:	7d3a      	ldrb	r2, [r7, #20]
 800ea7c:	404a      	eors	r2, r1
 800ea7e:	b2d1      	uxtb	r1, r2
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800ea84:	7c3b      	ldrb	r3, [r7, #16]
 800ea86:	3302      	adds	r3, #2
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	5cd1      	ldrb	r1, [r2, r3]
 800ea8c:	7dfb      	ldrb	r3, [r7, #23]
 800ea8e:	3302      	adds	r3, #2
 800ea90:	7cfa      	ldrb	r2, [r7, #19]
 800ea92:	404a      	eors	r2, r1
 800ea94:	b2d1      	uxtb	r1, r2
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ea9a:	7c3b      	ldrb	r3, [r7, #16]
 800ea9c:	3303      	adds	r3, #3
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	5cd1      	ldrb	r1, [r2, r3]
 800eaa2:	7dfb      	ldrb	r3, [r7, #23]
 800eaa4:	3303      	adds	r3, #3
 800eaa6:	7cba      	ldrb	r2, [r7, #18]
 800eaa8:	404a      	eors	r2, r1
 800eaaa:	b2d1      	uxtb	r1, r2
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800eab0:	7dfb      	ldrb	r3, [r7, #23]
 800eab2:	3304      	adds	r3, #4
 800eab4:	75fb      	strb	r3, [r7, #23]
 800eab6:	7dfa      	ldrb	r2, [r7, #23]
 800eab8:	7c7b      	ldrb	r3, [r7, #17]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	f4ff af67 	bcc.w	800e98e <lorawan_aes_set_key+0x76>
    }
    return 0;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3718      	adds	r7, #24
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	00010101 	.word	0x00010101
 800ead0:	08020010 	.word	0x08020010

0800ead4 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b08a      	sub	sp, #40	; 0x28
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d038      	beq.n	800eb5c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800eaea:	687a      	ldr	r2, [r7, #4]
 800eaec:	f107 0314 	add.w	r3, r7, #20
 800eaf0:	68f9      	ldr	r1, [r7, #12]
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7ff fc07 	bl	800e306 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800eaf8:	2301      	movs	r3, #1
 800eafa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eafe:	e014      	b.n	800eb2a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800eb00:	f107 0314 	add.w	r3, r7, #20
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7ff fd5d 	bl	800e5c4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800eb10:	0112      	lsls	r2, r2, #4
 800eb12:	441a      	add	r2, r3
 800eb14:	f107 0314 	add.w	r3, r7, #20
 800eb18:	4611      	mov	r1, r2
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7ff fcab 	bl	800e476 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800eb20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb24:	3301      	adds	r3, #1
 800eb26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800eb30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d3e3      	bcc.n	800eb00 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800eb38:	f107 0314 	add.w	r3, r7, #20
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7ff fca7 	bl	800e490 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800eb48:	0112      	lsls	r2, r2, #4
 800eb4a:	441a      	add	r2, r3
 800eb4c:	f107 0314 	add.w	r3, r7, #20
 800eb50:	4619      	mov	r1, r3
 800eb52:	68b8      	ldr	r0, [r7, #8]
 800eb54:	f7ff fbd7 	bl	800e306 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	e000      	b.n	800eb5e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800eb5c:	23ff      	movs	r3, #255	; 0xff
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3728      	adds	r7, #40	; 0x28
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
	...

0800eb68 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800eb68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb6a:	b0a1      	sub	sp, #132	; 0x84
 800eb6c:	af12      	add	r7, sp, #72	; 0x48
 800eb6e:	4603      	mov	r3, r0
 800eb70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800eb74:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800eb78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb7c:	4611      	mov	r1, r2
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f000 fa12 	bl	800efa8 <SecureElementGetKeyByID>
 800eb84:	4603      	mov	r3, r0
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d174      	bne.n	800ec74 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eb90:	e06c      	b.n	800ec6c <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800eb92:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eb96:	4939      	ldr	r1, [pc, #228]	; (800ec7c <PrintKey+0x114>)
 800eb98:	4613      	mov	r3, r2
 800eb9a:	005b      	lsls	r3, r3, #1
 800eb9c:	4413      	add	r3, r2
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	440b      	add	r3, r1
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d15a      	bne.n	800ec62 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800ebac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ebb0:	4932      	ldr	r1, [pc, #200]	; (800ec7c <PrintKey+0x114>)
 800ebb2:	4613      	mov	r3, r2
 800ebb4:	005b      	lsls	r3, r3, #1
 800ebb6:	4413      	add	r3, r2
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	440b      	add	r3, r1
 800ebbc:	3308      	adds	r3, #8
 800ebbe:	6819      	ldr	r1, [r3, #0]
 800ebc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc2:	785b      	ldrb	r3, [r3, #1]
 800ebc4:	461d      	mov	r5, r3
 800ebc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc8:	789b      	ldrb	r3, [r3, #2]
 800ebca:	461e      	mov	r6, r3
 800ebcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebce:	78db      	ldrb	r3, [r3, #3]
 800ebd0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd4:	791b      	ldrb	r3, [r3, #4]
 800ebd6:	627b      	str	r3, [r7, #36]	; 0x24
 800ebd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebda:	795b      	ldrb	r3, [r3, #5]
 800ebdc:	623b      	str	r3, [r7, #32]
 800ebde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe0:	799b      	ldrb	r3, [r3, #6]
 800ebe2:	61fb      	str	r3, [r7, #28]
 800ebe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe6:	79db      	ldrb	r3, [r3, #7]
 800ebe8:	61bb      	str	r3, [r7, #24]
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	7a1b      	ldrb	r3, [r3, #8]
 800ebee:	617b      	str	r3, [r7, #20]
 800ebf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf2:	7a5b      	ldrb	r3, [r3, #9]
 800ebf4:	613b      	str	r3, [r7, #16]
 800ebf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf8:	7a9b      	ldrb	r3, [r3, #10]
 800ebfa:	60fb      	str	r3, [r7, #12]
 800ebfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfe:	7adb      	ldrb	r3, [r3, #11]
 800ec00:	60bb      	str	r3, [r7, #8]
 800ec02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec04:	7b1b      	ldrb	r3, [r3, #12]
 800ec06:	607b      	str	r3, [r7, #4]
 800ec08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0a:	7b5b      	ldrb	r3, [r3, #13]
 800ec0c:	461c      	mov	r4, r3
 800ec0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec10:	7b9b      	ldrb	r3, [r3, #14]
 800ec12:	4618      	mov	r0, r3
 800ec14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec16:	7bdb      	ldrb	r3, [r3, #15]
 800ec18:	461a      	mov	r2, r3
 800ec1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1c:	7c1b      	ldrb	r3, [r3, #16]
 800ec1e:	9310      	str	r3, [sp, #64]	; 0x40
 800ec20:	920f      	str	r2, [sp, #60]	; 0x3c
 800ec22:	900e      	str	r0, [sp, #56]	; 0x38
 800ec24:	940d      	str	r4, [sp, #52]	; 0x34
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	920c      	str	r2, [sp, #48]	; 0x30
 800ec2a:	68ba      	ldr	r2, [r7, #8]
 800ec2c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ec2e:	68fa      	ldr	r2, [r7, #12]
 800ec30:	920a      	str	r2, [sp, #40]	; 0x28
 800ec32:	693a      	ldr	r2, [r7, #16]
 800ec34:	9209      	str	r2, [sp, #36]	; 0x24
 800ec36:	697a      	ldr	r2, [r7, #20]
 800ec38:	9208      	str	r2, [sp, #32]
 800ec3a:	69ba      	ldr	r2, [r7, #24]
 800ec3c:	9207      	str	r2, [sp, #28]
 800ec3e:	69fa      	ldr	r2, [r7, #28]
 800ec40:	9206      	str	r2, [sp, #24]
 800ec42:	6a3a      	ldr	r2, [r7, #32]
 800ec44:	9205      	str	r2, [sp, #20]
 800ec46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec48:	9204      	str	r2, [sp, #16]
 800ec4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4c:	9303      	str	r3, [sp, #12]
 800ec4e:	9602      	str	r6, [sp, #8]
 800ec50:	9501      	str	r5, [sp, #4]
 800ec52:	9100      	str	r1, [sp, #0]
 800ec54:	4b0a      	ldr	r3, [pc, #40]	; (800ec80 <PrintKey+0x118>)
 800ec56:	2200      	movs	r2, #0
 800ec58:	2100      	movs	r1, #0
 800ec5a:	2002      	movs	r0, #2
 800ec5c:	f010 f924 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
 800ec60:	e008      	b.n	800ec74 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ec62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec66:	3301      	adds	r3, #1
 800ec68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ec6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec70:	2b0a      	cmp	r3, #10
 800ec72:	d98e      	bls.n	800eb92 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800ec74:	373c      	adds	r7, #60	; 0x3c
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	08020310 	.word	0x08020310
 800ec80:	0801fba0 	.word	0x0801fba0

0800ec84 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800ec84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec86:	b091      	sub	sp, #68	; 0x44
 800ec88:	af08      	add	r7, sp, #32
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800ec92:	f107 0310 	add.w	r3, r7, #16
 800ec96:	4618      	mov	r0, r3
 800ec98:	f000 fbda 	bl	800f450 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800ec9c:	7c3b      	ldrb	r3, [r7, #16]
 800ec9e:	7c7a      	ldrb	r2, [r7, #17]
 800eca0:	7cb9      	ldrb	r1, [r7, #18]
 800eca2:	7cf8      	ldrb	r0, [r7, #19]
 800eca4:	7d3c      	ldrb	r4, [r7, #20]
 800eca6:	7d7d      	ldrb	r5, [r7, #21]
 800eca8:	7dbe      	ldrb	r6, [r7, #22]
 800ecaa:	f897 c017 	ldrb.w	ip, [r7, #23]
 800ecae:	f8cd c01c 	str.w	ip, [sp, #28]
 800ecb2:	9606      	str	r6, [sp, #24]
 800ecb4:	9505      	str	r5, [sp, #20]
 800ecb6:	9404      	str	r4, [sp, #16]
 800ecb8:	9003      	str	r0, [sp, #12]
 800ecba:	9102      	str	r1, [sp, #8]
 800ecbc:	9201      	str	r2, [sp, #4]
 800ecbe:	9300      	str	r3, [sp, #0]
 800ecc0:	4b24      	ldr	r3, [pc, #144]	; (800ed54 <PrintIds+0xd0>)
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	2100      	movs	r1, #0
 800ecc6:	2002      	movs	r0, #2
 800ecc8:	f010 f8ee 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800eccc:	f107 0318 	add.w	r3, r7, #24
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f000 fbed 	bl	800f4b0 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800ecd6:	7e3b      	ldrb	r3, [r7, #24]
 800ecd8:	7e7a      	ldrb	r2, [r7, #25]
 800ecda:	7eb9      	ldrb	r1, [r7, #26]
 800ecdc:	7ef8      	ldrb	r0, [r7, #27]
 800ecde:	7f3c      	ldrb	r4, [r7, #28]
 800ece0:	7f7d      	ldrb	r5, [r7, #29]
 800ece2:	7fbe      	ldrb	r6, [r7, #30]
 800ece4:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800ece8:	f8cd c01c 	str.w	ip, [sp, #28]
 800ecec:	9606      	str	r6, [sp, #24]
 800ecee:	9505      	str	r5, [sp, #20]
 800ecf0:	9404      	str	r4, [sp, #16]
 800ecf2:	9003      	str	r0, [sp, #12]
 800ecf4:	9102      	str	r1, [sp, #8]
 800ecf6:	9201      	str	r2, [sp, #4]
 800ecf8:	9300      	str	r3, [sp, #0]
 800ecfa:	4b17      	ldr	r3, [pc, #92]	; (800ed58 <PrintIds+0xd4>)
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	2100      	movs	r1, #0
 800ed00:	2002      	movs	r0, #2
 800ed02:	f010 f8d1 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800ed06:	f107 020c 	add.w	r2, r7, #12
 800ed0a:	79fb      	ldrb	r3, [r7, #7]
 800ed0c:	4611      	mov	r1, r2
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f000 fc00 	bl	800f514 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800ed14:	f107 030c 	add.w	r3, r7, #12
 800ed18:	3303      	adds	r3, #3
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	f107 030c 	add.w	r3, r7, #12
 800ed22:	3302      	adds	r3, #2
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	4619      	mov	r1, r3
 800ed28:	f107 030c 	add.w	r3, r7, #12
 800ed2c:	3301      	adds	r3, #1
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	4618      	mov	r0, r3
 800ed32:	f107 030c 	add.w	r3, r7, #12
 800ed36:	781b      	ldrb	r3, [r3, #0]
 800ed38:	9303      	str	r3, [sp, #12]
 800ed3a:	9002      	str	r0, [sp, #8]
 800ed3c:	9101      	str	r1, [sp, #4]
 800ed3e:	9200      	str	r2, [sp, #0]
 800ed40:	4b06      	ldr	r3, [pc, #24]	; (800ed5c <PrintIds+0xd8>)
 800ed42:	2200      	movs	r2, #0
 800ed44:	2100      	movs	r1, #0
 800ed46:	2002      	movs	r0, #2
 800ed48:	f010 f8ae 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800ed4c:	bf00      	nop
 800ed4e:	3724      	adds	r7, #36	; 0x24
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed54:	0801fbfc 	.word	0x0801fbfc
 800ed58:	0801fc3c 	.word	0x0801fc3c
 800ed5c:	0801fc7c 	.word	0x0801fc7c

0800ed60 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800ed60:	b480      	push	{r7}
 800ed62:	b085      	sub	sp, #20
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	4603      	mov	r3, r0
 800ed68:	6039      	str	r1, [r7, #0]
 800ed6a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	73fb      	strb	r3, [r7, #15]
 800ed70:	e01a      	b.n	800eda8 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ed72:	4b12      	ldr	r3, [pc, #72]	; (800edbc <GetKeyByID+0x5c>)
 800ed74:	6819      	ldr	r1, [r3, #0]
 800ed76:	7bfa      	ldrb	r2, [r7, #15]
 800ed78:	4613      	mov	r3, r2
 800ed7a:	011b      	lsls	r3, r3, #4
 800ed7c:	4413      	add	r3, r2
 800ed7e:	440b      	add	r3, r1
 800ed80:	3318      	adds	r3, #24
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	79fa      	ldrb	r2, [r7, #7]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d10b      	bne.n	800eda2 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ed8a:	4b0c      	ldr	r3, [pc, #48]	; (800edbc <GetKeyByID+0x5c>)
 800ed8c:	6819      	ldr	r1, [r3, #0]
 800ed8e:	7bfa      	ldrb	r2, [r7, #15]
 800ed90:	4613      	mov	r3, r2
 800ed92:	011b      	lsls	r3, r3, #4
 800ed94:	4413      	add	r3, r2
 800ed96:	3318      	adds	r3, #24
 800ed98:	18ca      	adds	r2, r1, r3
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	e006      	b.n	800edb0 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eda2:	7bfb      	ldrb	r3, [r7, #15]
 800eda4:	3301      	adds	r3, #1
 800eda6:	73fb      	strb	r3, [r7, #15]
 800eda8:	7bfb      	ldrb	r3, [r7, #15]
 800edaa:	2b0a      	cmp	r3, #10
 800edac:	d9e1      	bls.n	800ed72 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800edae:	2303      	movs	r3, #3
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3714      	adds	r7, #20
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bc80      	pop	{r7}
 800edb8:	4770      	bx	lr
 800edba:	bf00      	nop
 800edbc:	20000678 	.word	0x20000678

0800edc0 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800edc0:	b590      	push	{r4, r7, lr}
 800edc2:	b0d1      	sub	sp, #324	; 0x144
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800edca:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800edce:	6020      	str	r0, [r4, #0]
 800edd0:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800edd4:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800edd8:	6001      	str	r1, [r0, #0]
 800edda:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800edde:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800ede2:	600a      	str	r2, [r1, #0]
 800ede4:	461a      	mov	r2, r3
 800ede6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800edea:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800edee:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800edf0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800edf4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d003      	beq.n	800ee06 <ComputeCmac+0x46>
 800edfe:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d101      	bne.n	800ee0a <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ee06:	2302      	movs	r3, #2
 800ee08:	e05d      	b.n	800eec6 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ee0a:	f107 0314 	add.w	r3, r7, #20
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7fe ff02 	bl	800dc18 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ee14:	f107 0210 	add.w	r2, r7, #16
 800ee18:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ee1c:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	4611      	mov	r1, r2
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7ff ff9b 	bl	800ed60 <GetKeyByID>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ee30:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d144      	bne.n	800eec2 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ee38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ee3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	f107 0314 	add.w	r3, r7, #20
 800ee48:	4611      	mov	r1, r2
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7fe fefd 	bl	800dc4a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ee50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ee54:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d009      	beq.n	800ee72 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800ee5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ee62:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ee66:	f107 0014 	add.w	r0, r7, #20
 800ee6a:	2210      	movs	r2, #16
 800ee6c:	6819      	ldr	r1, [r3, #0]
 800ee6e:	f7fe fefb 	bl	800dc68 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ee72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ee76:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800ee7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ee7e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ee82:	f107 0014 	add.w	r0, r7, #20
 800ee86:	6812      	ldr	r2, [r2, #0]
 800ee88:	6819      	ldr	r1, [r3, #0]
 800ee8a:	f7fe feed 	bl	800dc68 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ee8e:	f107 0214 	add.w	r2, r7, #20
 800ee92:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ee96:	4611      	mov	r1, r2
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7fe ffa7 	bl	800ddec <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800ee9e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800eea2:	461a      	mov	r2, r3
 800eea4:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800eea8:	021b      	lsls	r3, r3, #8
 800eeaa:	431a      	orrs	r2, r3
 800eeac:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800eeb0:	041b      	lsls	r3, r3, #16
 800eeb2:	431a      	orrs	r2, r3
 800eeb4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800eeb8:	061b      	lsls	r3, r3, #24
 800eeba:	431a      	orrs	r2, r3
 800eebc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800eec0:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800eec2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd90      	pop	{r4, r7, pc}

0800eed0 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d101      	bne.n	800eee2 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eede:	2302      	movs	r3, #2
 800eee0:	e00a      	b.n	800eef8 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800eee2:	4a07      	ldr	r2, [pc, #28]	; (800ef00 <SecureElementInit+0x30>)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800eee8:	4b05      	ldr	r3, [pc, #20]	; (800ef00 <SecureElementInit+0x30>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	22d8      	movs	r2, #216	; 0xd8
 800eeee:	4905      	ldr	r1, [pc, #20]	; (800ef04 <SecureElementInit+0x34>)
 800eef0:	4618      	mov	r0, r3
 800eef2:	f00b fc34 	bl	801a75e <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800eef6:	2300      	movs	r3, #0
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3708      	adds	r7, #8
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}
 800ef00:	20000678 	.word	0x20000678
 800ef04:	08020578 	.word	0x08020578

0800ef08 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b086      	sub	sp, #24
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800ef12:	2300      	movs	r3, #0
 800ef14:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800ef16:	f107 030c 	add.w	r3, r7, #12
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f000 fa98 	bl	800f450 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800ef20:	f107 0308 	add.w	r3, r7, #8
 800ef24:	4619      	mov	r1, r3
 800ef26:	2001      	movs	r0, #1
 800ef28:	f000 faf4 	bl	800f514 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d024      	beq.n	800ef7c <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800ef32:	2300      	movs	r3, #0
 800ef34:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800ef36:	2300      	movs	r3, #0
 800ef38:	75bb      	strb	r3, [r7, #22]
 800ef3a:	e00c      	b.n	800ef56 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800ef3c:	7dbb      	ldrb	r3, [r7, #22]
 800ef3e:	3318      	adds	r3, #24
 800ef40:	443b      	add	r3, r7
 800ef42:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d002      	beq.n	800ef50 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	75fb      	strb	r3, [r7, #23]
                break;
 800ef4e:	e005      	b.n	800ef5c <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800ef50:	7dbb      	ldrb	r3, [r7, #22]
 800ef52:	3301      	adds	r3, #1
 800ef54:	75bb      	strb	r3, [r7, #22]
 800ef56:	7dbb      	ldrb	r3, [r7, #22]
 800ef58:	2b07      	cmp	r3, #7
 800ef5a:	d9ef      	bls.n	800ef3c <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800ef5c:	7dfb      	ldrb	r3, [r7, #23]
 800ef5e:	f083 0301 	eor.w	r3, r3, #1
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d009      	beq.n	800ef7c <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800ef68:	f107 020c 	add.w	r2, r7, #12
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	4610      	mov	r0, r2
 800ef70:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800ef72:	f107 030c 	add.w	r3, r7, #12
 800ef76:	4618      	mov	r0, r3
 800ef78:	f000 fa52 	bl	800f420 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d00c      	beq.n	800ef9c <SecureElementInitMcuID+0x94>
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d109      	bne.n	800ef9c <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800ef88:	f107 0208 	add.w	r2, r7, #8
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	4610      	mov	r0, r2
 800ef90:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	4619      	mov	r1, r3
 800ef96:	2001      	movs	r0, #1
 800ef98:	f000 faa2 	bl	800f4e0 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800ef9c:	2300      	movs	r3, #0
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3718      	adds	r7, #24
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
	...

0800efa8 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800efa8:	b480      	push	{r7}
 800efaa:	b085      	sub	sp, #20
 800efac:	af00      	add	r7, sp, #0
 800efae:	4603      	mov	r3, r0
 800efb0:	6039      	str	r1, [r7, #0]
 800efb2:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800efb4:	2300      	movs	r3, #0
 800efb6:	73fb      	strb	r3, [r7, #15]
 800efb8:	e01a      	b.n	800eff0 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800efba:	4b12      	ldr	r3, [pc, #72]	; (800f004 <SecureElementGetKeyByID+0x5c>)
 800efbc:	6819      	ldr	r1, [r3, #0]
 800efbe:	7bfa      	ldrb	r2, [r7, #15]
 800efc0:	4613      	mov	r3, r2
 800efc2:	011b      	lsls	r3, r3, #4
 800efc4:	4413      	add	r3, r2
 800efc6:	440b      	add	r3, r1
 800efc8:	3318      	adds	r3, #24
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	79fa      	ldrb	r2, [r7, #7]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d10b      	bne.n	800efea <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800efd2:	4b0c      	ldr	r3, [pc, #48]	; (800f004 <SecureElementGetKeyByID+0x5c>)
 800efd4:	6819      	ldr	r1, [r3, #0]
 800efd6:	7bfa      	ldrb	r2, [r7, #15]
 800efd8:	4613      	mov	r3, r2
 800efda:	011b      	lsls	r3, r3, #4
 800efdc:	4413      	add	r3, r2
 800efde:	3318      	adds	r3, #24
 800efe0:	18ca      	adds	r2, r1, r3
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800efe6:	2300      	movs	r3, #0
 800efe8:	e006      	b.n	800eff8 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800efea:	7bfb      	ldrb	r3, [r7, #15]
 800efec:	3301      	adds	r3, #1
 800efee:	73fb      	strb	r3, [r7, #15]
 800eff0:	7bfb      	ldrb	r3, [r7, #15]
 800eff2:	2b0a      	cmp	r3, #10
 800eff4:	d9e1      	bls.n	800efba <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eff6:	2303      	movs	r3, #3
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3714      	adds	r7, #20
 800effc:	46bd      	mov	sp, r7
 800effe:	bc80      	pop	{r7}
 800f000:	4770      	bx	lr
 800f002:	bf00      	nop
 800f004:	20000678 	.word	0x20000678

0800f008 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800f00c:	2000      	movs	r0, #0
 800f00e:	f7ff fdab 	bl	800eb68 <PrintKey>
    PrintKey( NWK_KEY );
 800f012:	2001      	movs	r0, #1
 800f014:	f7ff fda8 	bl	800eb68 <PrintKey>
    PrintKey( APP_S_KEY );
 800f018:	2009      	movs	r0, #9
 800f01a:	f7ff fda5 	bl	800eb68 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800f01e:	2008      	movs	r0, #8
 800f020:	f7ff fda2 	bl	800eb68 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800f024:	2000      	movs	r0, #0
 800f026:	f7ff fe2d 	bl	800ec84 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800f02a:	2300      	movs	r3, #0
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	4603      	mov	r3, r0
 800f038:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800f03a:	200b      	movs	r0, #11
 800f03c:	f7ff fd94 	bl	800eb68 <PrintKey>
    PrintKey( MC_KE_KEY );
 800f040:	200c      	movs	r0, #12
 800f042:	f7ff fd91 	bl	800eb68 <PrintKey>
    PrintKey( APP_S_KEY );
 800f046:	2009      	movs	r0, #9
 800f048:	f7ff fd8e 	bl	800eb68 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800f04c:	2008      	movs	r0, #8
 800f04e:	f7ff fd8b 	bl	800eb68 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800f052:	200a      	movs	r0, #10
 800f054:	f7ff fd88 	bl	800eb68 <PrintKey>
    PrintIds( mode );
 800f058:	79fb      	ldrb	r3, [r7, #7]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7ff fe12 	bl	800ec84 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3708      	adds	r7, #8
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
	...

0800f06c <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b088      	sub	sp, #32
 800f070:	af00      	add	r7, sp, #0
 800f072:	4603      	mov	r3, r0
 800f074:	6039      	str	r1, [r7, #0]
 800f076:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d101      	bne.n	800f082 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f07e:	2302      	movs	r3, #2
 800f080:	e04c      	b.n	800f11c <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f082:	2300      	movs	r3, #0
 800f084:	77fb      	strb	r3, [r7, #31]
 800f086:	e045      	b.n	800f114 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f088:	4b26      	ldr	r3, [pc, #152]	; (800f124 <SecureElementSetKey+0xb8>)
 800f08a:	6819      	ldr	r1, [r3, #0]
 800f08c:	7ffa      	ldrb	r2, [r7, #31]
 800f08e:	4613      	mov	r3, r2
 800f090:	011b      	lsls	r3, r3, #4
 800f092:	4413      	add	r3, r2
 800f094:	440b      	add	r3, r1
 800f096:	3318      	adds	r3, #24
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	79fa      	ldrb	r2, [r7, #7]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d136      	bne.n	800f10e <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800f0a0:	79fb      	ldrb	r3, [r7, #7]
 800f0a2:	2b0d      	cmp	r3, #13
 800f0a4:	d123      	bne.n	800f0ee <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800f0a6:	2306      	movs	r3, #6
 800f0a8:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	60fb      	str	r3, [r7, #12]
 800f0ae:	f107 0310 	add.w	r3, r7, #16
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	601a      	str	r2, [r3, #0]
 800f0b6:	605a      	str	r2, [r3, #4]
 800f0b8:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800f0ba:	f107 030c 	add.w	r3, r7, #12
 800f0be:	220c      	movs	r2, #12
 800f0c0:	2110      	movs	r1, #16
 800f0c2:	6838      	ldr	r0, [r7, #0]
 800f0c4:	f000 f876 	bl	800f1b4 <SecureElementAesEncrypt>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800f0cc:	4b15      	ldr	r3, [pc, #84]	; (800f124 <SecureElementSetKey+0xb8>)
 800f0ce:	6819      	ldr	r1, [r3, #0]
 800f0d0:	7ffa      	ldrb	r2, [r7, #31]
 800f0d2:	4613      	mov	r3, r2
 800f0d4:	011b      	lsls	r3, r3, #4
 800f0d6:	4413      	add	r3, r2
 800f0d8:	3318      	adds	r3, #24
 800f0da:	440b      	add	r3, r1
 800f0dc:	3301      	adds	r3, #1
 800f0de:	f107 010c 	add.w	r1, r7, #12
 800f0e2:	2210      	movs	r2, #16
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f00b fb3a 	bl	801a75e <memcpy1>
                return retval;
 800f0ea:	7fbb      	ldrb	r3, [r7, #30]
 800f0ec:	e016      	b.n	800f11c <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800f0ee:	4b0d      	ldr	r3, [pc, #52]	; (800f124 <SecureElementSetKey+0xb8>)
 800f0f0:	6819      	ldr	r1, [r3, #0]
 800f0f2:	7ffa      	ldrb	r2, [r7, #31]
 800f0f4:	4613      	mov	r3, r2
 800f0f6:	011b      	lsls	r3, r3, #4
 800f0f8:	4413      	add	r3, r2
 800f0fa:	3318      	adds	r3, #24
 800f0fc:	440b      	add	r3, r1
 800f0fe:	3301      	adds	r3, #1
 800f100:	2210      	movs	r2, #16
 800f102:	6839      	ldr	r1, [r7, #0]
 800f104:	4618      	mov	r0, r3
 800f106:	f00b fb2a 	bl	801a75e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800f10a:	2300      	movs	r3, #0
 800f10c:	e006      	b.n	800f11c <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f10e:	7ffb      	ldrb	r3, [r7, #31]
 800f110:	3301      	adds	r3, #1
 800f112:	77fb      	strb	r3, [r7, #31]
 800f114:	7ffb      	ldrb	r3, [r7, #31]
 800f116:	2b0a      	cmp	r3, #10
 800f118:	d9b6      	bls.n	800f088 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f11a:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3720      	adds	r7, #32
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}
 800f124:	20000678 	.word	0x20000678

0800f128 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b086      	sub	sp, #24
 800f12c:	af02      	add	r7, sp, #8
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	607a      	str	r2, [r7, #4]
 800f134:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800f136:	78fb      	ldrb	r3, [r7, #3]
 800f138:	2b0b      	cmp	r3, #11
 800f13a:	d901      	bls.n	800f140 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f13c:	2303      	movs	r3, #3
 800f13e:	e009      	b.n	800f154 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f140:	78fa      	ldrb	r2, [r7, #3]
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	9300      	str	r3, [sp, #0]
 800f146:	4613      	mov	r3, r2
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	68b9      	ldr	r1, [r7, #8]
 800f14c:	68f8      	ldr	r0, [r7, #12]
 800f14e:	f7ff fe37 	bl	800edc0 <ComputeCmac>
 800f152:	4603      	mov	r3, r0
}
 800f154:	4618      	mov	r0, r3
 800f156:	3710      	adds	r7, #16
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}

0800f15c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b088      	sub	sp, #32
 800f160:	af02      	add	r7, sp, #8
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	607a      	str	r2, [r7, #4]
 800f168:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d101      	bne.n	800f174 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f170:	2302      	movs	r3, #2
 800f172:	e01b      	b.n	800f1ac <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800f174:	2306      	movs	r3, #6
 800f176:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800f178:	2300      	movs	r3, #0
 800f17a:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f17c:	78fa      	ldrb	r2, [r7, #3]
 800f17e:	f107 0310 	add.w	r3, r7, #16
 800f182:	9300      	str	r3, [sp, #0]
 800f184:	4613      	mov	r3, r2
 800f186:	68ba      	ldr	r2, [r7, #8]
 800f188:	68f9      	ldr	r1, [r7, #12]
 800f18a:	2000      	movs	r0, #0
 800f18c:	f7ff fe18 	bl	800edc0 <ComputeCmac>
 800f190:	4603      	mov	r3, r0
 800f192:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f194:	7dfb      	ldrb	r3, [r7, #23]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d001      	beq.n	800f19e <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800f19a:	7dfb      	ldrb	r3, [r7, #23]
 800f19c:	e006      	b.n	800f1ac <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d001      	beq.n	800f1aa <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800f1aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3718      	adds	r7, #24
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b0c2      	sub	sp, #264	; 0x108
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	60f8      	str	r0, [r7, #12]
 800f1bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f1c0:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800f1c4:	6001      	str	r1, [r0, #0]
 800f1c6:	4611      	mov	r1, r2
 800f1c8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f1cc:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800f1d0:	6013      	str	r3, [r2, #0]
 800f1d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1d6:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800f1da:	460a      	mov	r2, r1
 800f1dc:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d006      	beq.n	800f1f2 <SecureElementAesEncrypt+0x3e>
 800f1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d101      	bne.n	800f1f6 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f1f2:	2302      	movs	r3, #2
 800f1f4:	e059      	b.n	800f2aa <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800f1f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1fa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f003 030f 	and.w	r3, r3, #15
 800f204:	2b00      	cmp	r3, #0
 800f206:	d001      	beq.n	800f20c <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f208:	2305      	movs	r3, #5
 800f20a:	e04e      	b.n	800f2aa <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800f20c:	f107 0314 	add.w	r3, r7, #20
 800f210:	22f0      	movs	r2, #240	; 0xf0
 800f212:	2100      	movs	r1, #0
 800f214:	4618      	mov	r0, r3
 800f216:	f00b fadd 	bl	801a7d4 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f21a:	f107 0210 	add.w	r2, r7, #16
 800f21e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f222:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	4611      	mov	r1, r2
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7ff fd98 	bl	800ed60 <GetKeyByID>
 800f230:	4603      	mov	r3, r0
 800f232:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f236:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d133      	bne.n	800f2a6 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	3301      	adds	r3, #1
 800f242:	f107 0214 	add.w	r2, r7, #20
 800f246:	2110      	movs	r1, #16
 800f248:	4618      	mov	r0, r3
 800f24a:	f7ff fb65 	bl	800e918 <lorawan_aes_set_key>

        uint8_t block = 0;
 800f24e:	2300      	movs	r3, #0
 800f250:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800f254:	e020      	b.n	800f298 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800f256:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f25a:	68fa      	ldr	r2, [r7, #12]
 800f25c:	18d0      	adds	r0, r2, r3
 800f25e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f262:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f266:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800f26a:	6812      	ldr	r2, [r2, #0]
 800f26c:	4413      	add	r3, r2
 800f26e:	f107 0214 	add.w	r2, r7, #20
 800f272:	4619      	mov	r1, r3
 800f274:	f7ff fc2e 	bl	800ead4 <lorawan_aes_encrypt>
            block = block + 16;
 800f278:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f27c:	3310      	adds	r3, #16
 800f27e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800f282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f286:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f28a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f28e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800f292:	6812      	ldr	r2, [r2, #0]
 800f294:	3a10      	subs	r2, #16
 800f296:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800f298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f29c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d1d7      	bne.n	800f256 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800f2a6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b088      	sub	sp, #32
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	460b      	mov	r3, r1
 800f2be:	70fb      	strb	r3, [r7, #3]
 800f2c0:	4613      	mov	r3, r2
 800f2c2:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d101      	bne.n	800f2ce <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f2ca:	2302      	movs	r3, #2
 800f2cc:	e02e      	b.n	800f32c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800f2ce:	2306      	movs	r3, #6
 800f2d0:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800f2d2:	78bb      	ldrb	r3, [r7, #2]
 800f2d4:	2b0c      	cmp	r3, #12
 800f2d6:	d104      	bne.n	800f2e2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f2d8:	78fb      	ldrb	r3, [r7, #3]
 800f2da:	2b0b      	cmp	r3, #11
 800f2dc:	d001      	beq.n	800f2e2 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f2de:	2303      	movs	r3, #3
 800f2e0:	e024      	b.n	800f32c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	60fb      	str	r3, [r7, #12]
 800f2e6:	f107 0310 	add.w	r3, r7, #16
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	601a      	str	r2, [r3, #0]
 800f2ee:	605a      	str	r2, [r3, #4]
 800f2f0:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800f2f2:	f107 030c 	add.w	r3, r7, #12
 800f2f6:	78fa      	ldrb	r2, [r7, #3]
 800f2f8:	2110      	movs	r1, #16
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f7ff ff5a 	bl	800f1b4 <SecureElementAesEncrypt>
 800f300:	4603      	mov	r3, r0
 800f302:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f304:	7ffb      	ldrb	r3, [r7, #31]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d001      	beq.n	800f30e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800f30a:	7ffb      	ldrb	r3, [r7, #31]
 800f30c:	e00e      	b.n	800f32c <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800f30e:	f107 020c 	add.w	r2, r7, #12
 800f312:	78bb      	ldrb	r3, [r7, #2]
 800f314:	4611      	mov	r1, r2
 800f316:	4618      	mov	r0, r3
 800f318:	f7ff fea8 	bl	800f06c <SecureElementSetKey>
 800f31c:	4603      	mov	r3, r0
 800f31e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f320:	7ffb      	ldrb	r3, [r7, #31]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d001      	beq.n	800f32a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800f326:	7ffb      	ldrb	r3, [r7, #31]
 800f328:	e000      	b.n	800f32c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f32a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3720      	adds	r7, #32
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b086      	sub	sp, #24
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60b9      	str	r1, [r7, #8]
 800f33c:	607b      	str	r3, [r7, #4]
 800f33e:	4603      	mov	r3, r0
 800f340:	73fb      	strb	r3, [r7, #15]
 800f342:	4613      	mov	r3, r2
 800f344:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d005      	beq.n	800f358 <SecureElementProcessJoinAccept+0x24>
 800f34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d002      	beq.n	800f358 <SecureElementProcessJoinAccept+0x24>
 800f352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f354:	2b00      	cmp	r3, #0
 800f356:	d101      	bne.n	800f35c <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f358:	2302      	movs	r3, #2
 800f35a:	e05c      	b.n	800f416 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f35c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f360:	2b21      	cmp	r3, #33	; 0x21
 800f362:	d901      	bls.n	800f368 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f364:	2305      	movs	r3, #5
 800f366:	e056      	b.n	800f416 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800f368:	2301      	movs	r3, #1
 800f36a:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f36c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f370:	b29b      	uxth	r3, r3
 800f372:	461a      	mov	r2, r3
 800f374:	6879      	ldr	r1, [r7, #4]
 800f376:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f378:	f00b f9f1 	bl	801a75e <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	1c58      	adds	r0, r3, #1
 800f380:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f384:	3b01      	subs	r3, #1
 800f386:	4619      	mov	r1, r3
 800f388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38a:	3301      	adds	r3, #1
 800f38c:	7dfa      	ldrb	r2, [r7, #23]
 800f38e:	f7ff ff11 	bl	800f1b4 <SecureElementAesEncrypt>
 800f392:	4603      	mov	r3, r0
 800f394:	2b00      	cmp	r3, #0
 800f396:	d001      	beq.n	800f39c <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f398:	2307      	movs	r3, #7
 800f39a:	e03c      	b.n	800f416 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39e:	330b      	adds	r3, #11
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	09db      	lsrs	r3, r3, #7
 800f3a4:	b2da      	uxtb	r2, r3
 800f3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a8:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800f3aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f3ae:	3b04      	subs	r3, #4
 800f3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3b2:	4413      	add	r3, r2
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f3bc:	3b03      	subs	r3, #3
 800f3be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3c0:	4413      	add	r3, r2
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	021b      	lsls	r3, r3, #8
 800f3c6:	ea41 0203 	orr.w	r2, r1, r3
 800f3ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f3ce:	3b02      	subs	r3, #2
 800f3d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3d2:	440b      	add	r3, r1
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	041b      	lsls	r3, r3, #16
 800f3d8:	431a      	orrs	r2, r3
 800f3da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f3de:	3b01      	subs	r3, #1
 800f3e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3e2:	440b      	add	r3, r1
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	061b      	lsls	r3, r3, #24
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800f3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d10d      	bne.n	800f410 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f3f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f3f8:	3b04      	subs	r3, #4
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	693a      	ldr	r2, [r7, #16]
 800f400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f402:	f7ff feab 	bl	800f15c <SecureElementVerifyAesCmac>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d003      	beq.n	800f414 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f40c:	2301      	movs	r3, #1
 800f40e:	e002      	b.n	800f416 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f410:	2304      	movs	r3, #4
 800f412:	e000      	b.n	800f416 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f414:	2300      	movs	r3, #0
}
 800f416:	4618      	mov	r0, r3
 800f418:	3718      	adds	r7, #24
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
	...

0800f420 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d101      	bne.n	800f432 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f42e:	2302      	movs	r3, #2
 800f430:	e007      	b.n	800f442 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800f432:	4b06      	ldr	r3, [pc, #24]	; (800f44c <SecureElementSetDevEui+0x2c>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2208      	movs	r2, #8
 800f438:	6879      	ldr	r1, [r7, #4]
 800f43a:	4618      	mov	r0, r3
 800f43c:	f00b f98f 	bl	801a75e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f440:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f442:	4618      	mov	r0, r3
 800f444:	3708      	adds	r7, #8
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
 800f44a:	bf00      	nop
 800f44c:	20000678 	.word	0x20000678

0800f450 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d101      	bne.n	800f462 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f45e:	2302      	movs	r3, #2
 800f460:	e007      	b.n	800f472 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800f462:	4b06      	ldr	r3, [pc, #24]	; (800f47c <SecureElementGetDevEui+0x2c>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2208      	movs	r2, #8
 800f468:	4619      	mov	r1, r3
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f00b f977 	bl	801a75e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f470:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f472:	4618      	mov	r0, r3
 800f474:	3708      	adds	r7, #8
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	20000678 	.word	0x20000678

0800f480 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d101      	bne.n	800f492 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f48e:	2302      	movs	r3, #2
 800f490:	e008      	b.n	800f4a4 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800f492:	4b06      	ldr	r3, [pc, #24]	; (800f4ac <SecureElementSetJoinEui+0x2c>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	3308      	adds	r3, #8
 800f498:	2208      	movs	r2, #8
 800f49a:	6879      	ldr	r1, [r7, #4]
 800f49c:	4618      	mov	r0, r3
 800f49e:	f00b f95e 	bl	801a75e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f4a2:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3708      	adds	r7, #8
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	20000678 	.word	0x20000678

0800f4b0 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d101      	bne.n	800f4c2 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f4be:	2302      	movs	r3, #2
 800f4c0:	e008      	b.n	800f4d4 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800f4c2:	4b06      	ldr	r3, [pc, #24]	; (800f4dc <SecureElementGetJoinEui+0x2c>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	3308      	adds	r3, #8
 800f4c8:	2208      	movs	r2, #8
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f00b f946 	bl	801a75e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f4d2:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3708      	adds	r7, #8
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	20000678 	.word	0x20000678

0800f4e0 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b083      	sub	sp, #12
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	6039      	str	r1, [r7, #0]
 800f4ea:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800f4ec:	79fb      	ldrb	r3, [r7, #7]
 800f4ee:	2b02      	cmp	r3, #2
 800f4f0:	d104      	bne.n	800f4fc <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800f4f2:	4b07      	ldr	r3, [pc, #28]	; (800f510 <SecureElementSetDevAddr+0x30>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	683a      	ldr	r2, [r7, #0]
 800f4f8:	611a      	str	r2, [r3, #16]
 800f4fa:	e003      	b.n	800f504 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800f4fc:	4b04      	ldr	r3, [pc, #16]	; (800f510 <SecureElementSetDevAddr+0x30>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	683a      	ldr	r2, [r7, #0]
 800f502:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800f504:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f506:	4618      	mov	r0, r3
 800f508:	370c      	adds	r7, #12
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bc80      	pop	{r7}
 800f50e:	4770      	bx	lr
 800f510:	20000678 	.word	0x20000678

0800f514 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800f514:	b480      	push	{r7}
 800f516:	b083      	sub	sp, #12
 800f518:	af00      	add	r7, sp, #0
 800f51a:	4603      	mov	r3, r0
 800f51c:	6039      	str	r1, [r7, #0]
 800f51e:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d101      	bne.n	800f52a <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f526:	2302      	movs	r3, #2
 800f528:	e00e      	b.n	800f548 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800f52a:	79fb      	ldrb	r3, [r7, #7]
 800f52c:	2b02      	cmp	r3, #2
 800f52e:	d105      	bne.n	800f53c <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800f530:	4b08      	ldr	r3, [pc, #32]	; (800f554 <SecureElementGetDevAddr+0x40>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	691a      	ldr	r2, [r3, #16]
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	601a      	str	r2, [r3, #0]
 800f53a:	e004      	b.n	800f546 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800f53c:	4b05      	ldr	r3, [pc, #20]	; (800f554 <SecureElementGetDevAddr+0x40>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	695a      	ldr	r2, [r3, #20]
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800f546:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f548:	4618      	mov	r0, r3
 800f54a:	370c      	adds	r7, #12
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bc80      	pop	{r7}
 800f550:	4770      	bx	lr
 800f552:	bf00      	nop
 800f554:	20000678 	.word	0x20000678

0800f558 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b082      	sub	sp, #8
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800f562:	4a29      	ldr	r2, [pc, #164]	; (800f608 <LmHandlerInit+0xb0>)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f568:	4b28      	ldr	r3, [pc, #160]	; (800f60c <LmHandlerInit+0xb4>)
 800f56a:	4a29      	ldr	r2, [pc, #164]	; (800f610 <LmHandlerInit+0xb8>)
 800f56c:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f56e:	4b27      	ldr	r3, [pc, #156]	; (800f60c <LmHandlerInit+0xb4>)
 800f570:	4a28      	ldr	r2, [pc, #160]	; (800f614 <LmHandlerInit+0xbc>)
 800f572:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f574:	4b25      	ldr	r3, [pc, #148]	; (800f60c <LmHandlerInit+0xb4>)
 800f576:	4a28      	ldr	r2, [pc, #160]	; (800f618 <LmHandlerInit+0xc0>)
 800f578:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f57a:	4b24      	ldr	r3, [pc, #144]	; (800f60c <LmHandlerInit+0xb4>)
 800f57c:	4a27      	ldr	r2, [pc, #156]	; (800f61c <LmHandlerInit+0xc4>)
 800f57e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f580:	4b21      	ldr	r3, [pc, #132]	; (800f608 <LmHandlerInit+0xb0>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	4a26      	ldr	r2, [pc, #152]	; (800f620 <LmHandlerInit+0xc8>)
 800f588:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f58a:	4b1f      	ldr	r3, [pc, #124]	; (800f608 <LmHandlerInit+0xb0>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	4a23      	ldr	r2, [pc, #140]	; (800f620 <LmHandlerInit+0xc8>)
 800f592:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f594:	4b1c      	ldr	r3, [pc, #112]	; (800f608 <LmHandlerInit+0xb0>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	689b      	ldr	r3, [r3, #8]
 800f59a:	4a21      	ldr	r2, [pc, #132]	; (800f620 <LmHandlerInit+0xc8>)
 800f59c:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800f59e:	4b1a      	ldr	r3, [pc, #104]	; (800f608 <LmHandlerInit+0xb0>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	68db      	ldr	r3, [r3, #12]
 800f5a4:	4a1e      	ldr	r2, [pc, #120]	; (800f620 <LmHandlerInit+0xc8>)
 800f5a6:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f5a8:	4b1d      	ldr	r3, [pc, #116]	; (800f620 <LmHandlerInit+0xc8>)
 800f5aa:	4a1e      	ldr	r2, [pc, #120]	; (800f624 <LmHandlerInit+0xcc>)
 800f5ac:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f5ae:	4b16      	ldr	r3, [pc, #88]	; (800f608 <LmHandlerInit+0xb0>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	699b      	ldr	r3, [r3, #24]
 800f5b4:	4a1a      	ldr	r2, [pc, #104]	; (800f620 <LmHandlerInit+0xc8>)
 800f5b6:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	4a1b      	ldr	r2, [pc, #108]	; (800f628 <LmHandlerInit+0xd0>)
 800f5bc:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800f5be:	4b12      	ldr	r3, [pc, #72]	; (800f608 <LmHandlerInit+0xb0>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5c4:	4a18      	ldr	r2, [pc, #96]	; (800f628 <LmHandlerInit+0xd0>)
 800f5c6:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800f5c8:	4b17      	ldr	r3, [pc, #92]	; (800f628 <LmHandlerInit+0xd0>)
 800f5ca:	4a18      	ldr	r2, [pc, #96]	; (800f62c <LmHandlerInit+0xd4>)
 800f5cc:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800f5ce:	4b16      	ldr	r3, [pc, #88]	; (800f628 <LmHandlerInit+0xd0>)
 800f5d0:	4a17      	ldr	r2, [pc, #92]	; (800f630 <LmHandlerInit+0xd8>)
 800f5d2:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800f5d4:	4914      	ldr	r1, [pc, #80]	; (800f628 <LmHandlerInit+0xd0>)
 800f5d6:	2000      	movs	r0, #0
 800f5d8:	f000 fdb4 	bl	8010144 <LmHandlerPackageRegister>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d002      	beq.n	800f5e8 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800f5e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5e6:	e00a      	b.n	800f5fe <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800f5e8:	463b      	mov	r3, r7
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f001 fd2a 	bl	8011044 <LmhpPackagesRegistrationInit>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d002      	beq.n	800f5fc <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800f5f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5fa:	e000      	b.n	800f5fe <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f5fc:	2300      	movs	r3, #0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3708      	adds	r7, #8
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	200006d0 	.word	0x200006d0
 800f60c:	200006d4 	.word	0x200006d4
 800f610:	0800fe1d 	.word	0x0800fe1d
 800f614:	0800fe91 	.word	0x0800fe91
 800f618:	0800ff61 	.word	0x0800ff61
 800f61c:	080100b1 	.word	0x080100b1
 800f620:	200006e4 	.word	0x200006e4
 800f624:	080105f1 	.word	0x080105f1
 800f628:	20000694 	.word	0x20000694
 800f62c:	08010405 	.word	0x08010405
 800f630:	0801043d 	.word	0x0801043d

0800f634 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b092      	sub	sp, #72	; 0x48
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800f63c:	2218      	movs	r2, #24
 800f63e:	6879      	ldr	r1, [r7, #4]
 800f640:	4884      	ldr	r0, [pc, #528]	; (800f854 <LmHandlerConfigure+0x220>)
 800f642:	f00b f88c 	bl	801a75e <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800f646:	4b84      	ldr	r3, [pc, #528]	; (800f858 <LmHandlerConfigure+0x224>)
 800f648:	2200      	movs	r2, #0
 800f64a:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800f64c:	f7fe faa2 	bl	800db94 <LoraInfo_GetPtr>
 800f650:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800f652:	4b80      	ldr	r3, [pc, #512]	; (800f854 <LmHandlerConfigure+0x220>)
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	461a      	mov	r2, r3
 800f658:	2301      	movs	r3, #1
 800f65a:	4093      	lsls	r3, r2
 800f65c:	461a      	mov	r2, r3
 800f65e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	4013      	ands	r3, r2
 800f664:	2b00      	cmp	r3, #0
 800f666:	d106      	bne.n	800f676 <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800f668:	4b7c      	ldr	r3, [pc, #496]	; (800f85c <LmHandlerConfigure+0x228>)
 800f66a:	2201      	movs	r2, #1
 800f66c:	2100      	movs	r1, #0
 800f66e:	2000      	movs	r0, #0
 800f670:	f00f fc1a 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800f674:	e7fe      	b.n	800f674 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800f676:	4b77      	ldr	r3, [pc, #476]	; (800f854 <LmHandlerConfigure+0x220>)
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	461a      	mov	r2, r3
 800f67c:	4978      	ldr	r1, [pc, #480]	; (800f860 <LmHandlerConfigure+0x22c>)
 800f67e:	4879      	ldr	r0, [pc, #484]	; (800f864 <LmHandlerConfigure+0x230>)
 800f680:	f004 ffd4 	bl	801462c <LoRaMacInitialization>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	d002      	beq.n	800f690 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800f68a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f68e:	e0dc      	b.n	800f84a <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800f690:	2327      	movs	r3, #39	; 0x27
 800f692:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f694:	f107 0318 	add.w	r3, r7, #24
 800f698:	4618      	mov	r0, r3
 800f69a:	f005 fd53 	bl	8015144 <LoRaMacMibSetRequestConfirm>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d103      	bne.n	800f6ac <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800f6a4:	4b70      	ldr	r3, [pc, #448]	; (800f868 <LmHandlerConfigure+0x234>)
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	701a      	strb	r2, [r3, #0]
 800f6aa:	e02a      	b.n	800f702 <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800f6ac:	2328      	movs	r3, #40	; 0x28
 800f6ae:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800f6b0:	4b6e      	ldr	r3, [pc, #440]	; (800f86c <LmHandlerConfigure+0x238>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	691b      	ldr	r3, [r3, #16]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d00c      	beq.n	800f6d4 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800f6ba:	f107 0318 	add.w	r3, r7, #24
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f005 fb68 	bl	8014d94 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800f6c4:	4b69      	ldr	r3, [pc, #420]	; (800f86c <LmHandlerConfigure+0x238>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	691b      	ldr	r3, [r3, #16]
 800f6ca:	69fa      	ldr	r2, [r7, #28]
 800f6cc:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800f6d0:	4610      	mov	r0, r2
 800f6d2:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800f6d4:	2327      	movs	r3, #39	; 0x27
 800f6d6:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f6d8:	f107 0318 	add.w	r3, r7, #24
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f005 fd31 	bl	8015144 <LoRaMacMibSetRequestConfirm>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d10c      	bne.n	800f702 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800f6ec:	f107 0318 	add.w	r3, r7, #24
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f005 fb4f 	bl	8014d94 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f6f6:	7f3b      	ldrb	r3, [r7, #28]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d002      	beq.n	800f702 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800f6fc:	4b5a      	ldr	r3, [pc, #360]	; (800f868 <LmHandlerConfigure+0x234>)
 800f6fe:	2201      	movs	r2, #1
 800f700:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800f702:	4b59      	ldr	r3, [pc, #356]	; (800f868 <LmHandlerConfigure+0x234>)
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d022      	beq.n	800f750 <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800f70a:	4b58      	ldr	r3, [pc, #352]	; (800f86c <LmHandlerConfigure+0x238>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	69db      	ldr	r3, [r3, #28]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d004      	beq.n	800f71e <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800f714:	4b55      	ldr	r3, [pc, #340]	; (800f86c <LmHandlerConfigure+0x238>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	69db      	ldr	r3, [r3, #28]
 800f71a:	2000      	movs	r0, #0
 800f71c:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800f71e:	2327      	movs	r3, #39	; 0x27
 800f720:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800f722:	f107 0318 	add.w	r3, r7, #24
 800f726:	4618      	mov	r0, r3
 800f728:	f005 fb34 	bl	8014d94 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800f730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f732:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f736:	4b47      	ldr	r3, [pc, #284]	; (800f854 <LmHandlerConfigure+0x220>)
 800f738:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800f73a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f73c:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800f740:	4b44      	ldr	r3, [pc, #272]	; (800f854 <LmHandlerConfigure+0x220>)
 800f742:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800f744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f746:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800f74a:	4b42      	ldr	r3, [pc, #264]	; (800f854 <LmHandlerConfigure+0x220>)
 800f74c:	709a      	strb	r2, [r3, #2]
 800f74e:	e008      	b.n	800f762 <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800f750:	2305      	movs	r3, #5
 800f752:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800f754:	2300      	movs	r3, #0
 800f756:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f758:	f107 0318 	add.w	r3, r7, #24
 800f75c:	4618      	mov	r0, r3
 800f75e:	f005 fcf1 	bl	8015144 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800f762:	4b3f      	ldr	r3, [pc, #252]	; (800f860 <LmHandlerConfigure+0x22c>)
 800f764:	689b      	ldr	r3, [r3, #8]
 800f766:	4a3e      	ldr	r2, [pc, #248]	; (800f860 <LmHandlerConfigure+0x22c>)
 800f768:	68d2      	ldr	r2, [r2, #12]
 800f76a:	4611      	mov	r1, r2
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7ff fbcb 	bl	800ef08 <SecureElementInitMcuID>
 800f772:	4603      	mov	r3, r0
 800f774:	2b00      	cmp	r3, #0
 800f776:	d002      	beq.n	800f77e <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f77c:	e065      	b.n	800f84a <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800f77e:	2306      	movs	r3, #6
 800f780:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f782:	f107 0318 	add.w	r3, r7, #24
 800f786:	4618      	mov	r0, r3
 800f788:	f005 fb04 	bl	8014d94 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	4a38      	ldr	r2, [pc, #224]	; (800f870 <LmHandlerConfigure+0x23c>)
 800f790:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f792:	f107 0318 	add.w	r3, r7, #24
 800f796:	4618      	mov	r0, r3
 800f798:	f005 fcd4 	bl	8015144 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800f79c:	2302      	movs	r3, #2
 800f79e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800f7a0:	4b33      	ldr	r3, [pc, #204]	; (800f870 <LmHandlerConfigure+0x23c>)
 800f7a2:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f7a4:	f107 0318 	add.w	r3, r7, #24
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f005 faf3 	bl	8014d94 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800f7ae:	2303      	movs	r3, #3
 800f7b0:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800f7b2:	4b30      	ldr	r3, [pc, #192]	; (800f874 <LmHandlerConfigure+0x240>)
 800f7b4:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f7b6:	f107 0318 	add.w	r3, r7, #24
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f005 faea 	bl	8014d94 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800f7c0:	f7ff fc22 	bl	800f008 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f7c4:	230f      	movs	r3, #15
 800f7c6:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f7cc:	f107 0318 	add.w	r3, r7, #24
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f005 fcb7 	bl	8015144 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f7d6:	2310      	movs	r3, #16
 800f7d8:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f7de:	f107 0318 	add.w	r3, r7, #24
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f005 fcae 	bl	8015144 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f7e8:	2304      	movs	r3, #4
 800f7ea:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f7ec:	4b19      	ldr	r3, [pc, #100]	; (800f854 <LmHandlerConfigure+0x220>)
 800f7ee:	789b      	ldrb	r3, [r3, #2]
 800f7f0:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f7f2:	f107 0318 	add.w	r3, r7, #24
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f005 fca4 	bl	8015144 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800f7fc:	233a      	movs	r3, #58	; 0x3a
 800f7fe:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800f800:	4b14      	ldr	r3, [pc, #80]	; (800f854 <LmHandlerConfigure+0x220>)
 800f802:	695b      	ldr	r3, [r3, #20]
 800f804:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f806:	f107 0318 	add.w	r3, r7, #24
 800f80a:	4618      	mov	r0, r3
 800f80c:	f005 fc9a 	bl	8015144 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f810:	230f      	movs	r3, #15
 800f812:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f814:	4b0f      	ldr	r3, [pc, #60]	; (800f854 <LmHandlerConfigure+0x220>)
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	f107 0210 	add.w	r2, r7, #16
 800f81c:	4611      	mov	r1, r2
 800f81e:	4618      	mov	r0, r3
 800f820:	f008 fbe5 	bl	8017fee <RegionGetPhyParam>
 800f824:	4603      	mov	r3, r0
 800f826:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	bf14      	ite	ne
 800f82e:	2301      	movne	r3, #1
 800f830:	2300      	moveq	r3, #0
 800f832:	b2da      	uxtb	r2, r3
 800f834:	4b07      	ldr	r3, [pc, #28]	; (800f854 <LmHandlerConfigure+0x220>)
 800f836:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800f838:	2014      	movs	r0, #20
 800f83a:	f000 fad7 	bl	800fdec <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f83e:	4b05      	ldr	r3, [pc, #20]	; (800f854 <LmHandlerConfigure+0x220>)
 800f840:	79db      	ldrb	r3, [r3, #7]
 800f842:	4618      	mov	r0, r3
 800f844:	f006 faf8 	bl	8015e38 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f848:	2300      	movs	r3, #0
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3748      	adds	r7, #72	; 0x48
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	200006b8 	.word	0x200006b8
 800f858:	20000700 	.word	0x20000700
 800f85c:	0801fca8 	.word	0x0801fca8
 800f860:	200006e4 	.word	0x200006e4
 800f864:	200006d4 	.word	0x200006d4
 800f868:	200007f6 	.word	0x200007f6
 800f86c:	200006d0 	.word	0x200006d0
 800f870:	2000067c 	.word	0x2000067c
 800f874:	20000684 	.word	0x20000684

0800f878 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800f87e:	f002 fe49 	bl	8012514 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800f882:	f000 fd8b 	bl	801039c <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800f886:	f000 fd5f 	bl	8010348 <LmHandlerPackageIsTxPending>
 800f88a:	4603      	mov	r3, r0
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d117      	bne.n	800f8c0 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800f890:	4b0d      	ldr	r3, [pc, #52]	; (800f8c8 <LmHandlerProcess+0x50>)
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d014      	beq.n	800f8c2 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800f898:	2300      	movs	r3, #0
 800f89a:	703b      	strb	r3, [r7, #0]
 800f89c:	2300      	movs	r3, #0
 800f89e:	707b      	strb	r3, [r7, #1]
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800f8a4:	4b09      	ldr	r3, [pc, #36]	; (800f8cc <LmHandlerProcess+0x54>)
 800f8a6:	78d9      	ldrb	r1, [r3, #3]
 800f8a8:	463b      	mov	r3, r7
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f000 f8d7 	bl	800fa60 <LmHandlerSend>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d104      	bne.n	800f8c2 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800f8b8:	4b03      	ldr	r3, [pc, #12]	; (800f8c8 <LmHandlerProcess+0x50>)
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	701a      	strb	r2, [r3, #0]
 800f8be:	e000      	b.n	800f8c2 <LmHandlerProcess+0x4a>
        return;
 800f8c0:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800f8c2:	3708      	adds	r7, #8
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	20000700 	.word	0x20000700
 800f8cc:	200006b8 	.word	0x200006b8

0800f8d0 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800f8d4:	4b02      	ldr	r3, [pc, #8]	; (800f8e0 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bc80      	pop	{r7}
 800f8de:	4770      	bx	lr
 800f8e0:	200006fc 	.word	0x200006fc

0800f8e4 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b092      	sub	sp, #72	; 0x48
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	460a      	mov	r2, r1
 800f8ee:	71fb      	strb	r3, [r7, #7]
 800f8f0:	4613      	mov	r3, r2
 800f8f2:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f8fa:	4b46      	ldr	r3, [pc, #280]	; (800fa14 <LmHandlerJoin+0x130>)
 800f8fc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f900:	b2db      	uxtb	r3, r3
 800f902:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800f906:	4b43      	ldr	r3, [pc, #268]	; (800fa14 <LmHandlerJoin+0x130>)
 800f908:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f90c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800f910:	79fb      	ldrb	r3, [r7, #7]
 800f912:	2b02      	cmp	r3, #2
 800f914:	d10b      	bne.n	800f92e <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f916:	2302      	movs	r3, #2
 800f918:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f91c:	4b3e      	ldr	r3, [pc, #248]	; (800fa18 <LmHandlerJoin+0x134>)
 800f91e:	2202      	movs	r2, #2
 800f920:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800f922:	4a3d      	ldr	r2, [pc, #244]	; (800fa18 <LmHandlerJoin+0x134>)
 800f924:	79bb      	ldrb	r3, [r7, #6]
 800f926:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800f928:	f005 f936 	bl	8014b98 <LoRaMacStart>
 800f92c:	e05c      	b.n	800f9e8 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f92e:	2301      	movs	r3, #1
 800f930:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f934:	4b38      	ldr	r3, [pc, #224]	; (800fa18 <LmHandlerJoin+0x134>)
 800f936:	2201      	movs	r2, #1
 800f938:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f93a:	4b36      	ldr	r3, [pc, #216]	; (800fa14 <LmHandlerJoin+0x130>)
 800f93c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f940:	4b35      	ldr	r3, [pc, #212]	; (800fa18 <LmHandlerJoin+0x134>)
 800f942:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800f944:	4b33      	ldr	r3, [pc, #204]	; (800fa14 <LmHandlerJoin+0x130>)
 800f946:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800f94a:	4b33      	ldr	r3, [pc, #204]	; (800fa18 <LmHandlerJoin+0x134>)
 800f94c:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f94e:	4b32      	ldr	r3, [pc, #200]	; (800fa18 <LmHandlerJoin+0x134>)
 800f950:	2200      	movs	r2, #0
 800f952:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800f954:	4a30      	ldr	r2, [pc, #192]	; (800fa18 <LmHandlerJoin+0x134>)
 800f956:	79bb      	ldrb	r3, [r7, #6]
 800f958:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800f95a:	4b30      	ldr	r3, [pc, #192]	; (800fa1c <LmHandlerJoin+0x138>)
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	f083 0301 	eor.w	r3, r3, #1
 800f962:	b2db      	uxtb	r3, r3
 800f964:	2b00      	cmp	r3, #0
 800f966:	d034      	beq.n	800f9d2 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800f968:	231f      	movs	r3, #31
 800f96a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800f96c:	4b29      	ldr	r3, [pc, #164]	; (800fa14 <LmHandlerJoin+0x130>)
 800f96e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f972:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f974:	f107 030c 	add.w	r3, r7, #12
 800f978:	4618      	mov	r0, r3
 800f97a:	f005 fbe3 	bl	8015144 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800f97e:	2320      	movs	r3, #32
 800f980:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800f982:	4b24      	ldr	r3, [pc, #144]	; (800fa14 <LmHandlerJoin+0x130>)
 800f984:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f988:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f98a:	f107 030c 	add.w	r3, r7, #12
 800f98e:	4618      	mov	r0, r3
 800f990:	f005 fbd8 	bl	8015144 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800f994:	2322      	movs	r3, #34	; 0x22
 800f996:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800f998:	4b1e      	ldr	r3, [pc, #120]	; (800fa14 <LmHandlerJoin+0x130>)
 800f99a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f99e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f9a0:	f107 030c 	add.w	r3, r7, #12
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f005 fbcd 	bl	8015144 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800f9aa:	2321      	movs	r3, #33	; 0x21
 800f9ac:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800f9ae:	4b19      	ldr	r3, [pc, #100]	; (800fa14 <LmHandlerJoin+0x130>)
 800f9b0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f9b4:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f9b6:	f107 030c 	add.w	r3, r7, #12
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f005 fbc2 	bl	8015144 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800f9c0:	2329      	movs	r3, #41	; 0x29
 800f9c2:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800f9c4:	4b16      	ldr	r3, [pc, #88]	; (800fa20 <LmHandlerJoin+0x13c>)
 800f9c6:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f9c8:	f107 030c 	add.w	r3, r7, #12
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f005 fbb9 	bl	8015144 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800f9d2:	f005 f8e1 	bl	8014b98 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f9da:	2301      	movs	r3, #1
 800f9dc:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f9de:	f107 030c 	add.w	r3, r7, #12
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f005 fbae 	bl	8015144 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800f9e8:	4b0c      	ldr	r3, [pc, #48]	; (800fa1c <LmHandlerJoin+0x138>)
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	f083 0301 	eor.w	r3, r3, #1
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d102      	bne.n	800f9fc <LmHandlerJoin+0x118>
 800f9f6:	79bb      	ldrb	r3, [r7, #6]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d004      	beq.n	800fa06 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800f9fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fa00:	4618      	mov	r0, r3
 800fa02:	f005 ff49 	bl	8015898 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800fa06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa08:	4a06      	ldr	r2, [pc, #24]	; (800fa24 <LmHandlerJoin+0x140>)
 800fa0a:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800fa0c:	bf00      	nop
 800fa0e:	3748      	adds	r7, #72	; 0x48
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	200006b8 	.word	0x200006b8
 800fa18:	20000094 	.word	0x20000094
 800fa1c:	200007f6 	.word	0x200007f6
 800fa20:	01000400 	.word	0x01000400
 800fa24:	200006fc 	.word	0x200006fc

0800fa28 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b08c      	sub	sp, #48	; 0x30
 800fa2c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800fa2e:	2301      	movs	r3, #1
 800fa30:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800fa32:	1d3b      	adds	r3, r7, #4
 800fa34:	4618      	mov	r0, r3
 800fa36:	f005 f9ad 	bl	8014d94 <LoRaMacMibGetRequestConfirm>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800fa40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d106      	bne.n	800fa56 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fa48:	7a3b      	ldrb	r3, [r7, #8]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d101      	bne.n	800fa52 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	e002      	b.n	800fa58 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800fa52:	2301      	movs	r3, #1
 800fa54:	e000      	b.n	800fa58 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800fa56:	2300      	movs	r3, #0
    }
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3730      	adds	r7, #48	; 0x30
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b08a      	sub	sp, #40	; 0x28
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	460b      	mov	r3, r1
 800fa6a:	70fb      	strb	r3, [r7, #3]
 800fa6c:	4613      	mov	r3, r2
 800fa6e:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800fa70:	23ff      	movs	r3, #255	; 0xff
 800fa72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800fa76:	f002 faa7 	bl	8011fc8 <LoRaMacIsBusy>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d002      	beq.n	800fa86 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fa80:	f06f 0301 	mvn.w	r3, #1
 800fa84:	e0ab      	b.n	800fbde <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800fa86:	f002 fac7 	bl	8012018 <LoRaMacIsStopped>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d002      	beq.n	800fa96 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fa90:	f06f 0302 	mvn.w	r3, #2
 800fa94:	e0a3      	b.n	800fbde <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800fa96:	f7ff ffc7 	bl	800fa28 <LmHandlerJoinStatus>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	d00a      	beq.n	800fab6 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800faa0:	4b51      	ldr	r3, [pc, #324]	; (800fbe8 <LmHandlerSend+0x188>)
 800faa2:	79db      	ldrb	r3, [r3, #7]
 800faa4:	4a50      	ldr	r2, [pc, #320]	; (800fbe8 <LmHandlerSend+0x188>)
 800faa6:	7a12      	ldrb	r2, [r2, #8]
 800faa8:	4611      	mov	r1, r2
 800faaa:	4618      	mov	r0, r3
 800faac:	f7ff ff1a 	bl	800f8e4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fab0:	f06f 0302 	mvn.w	r3, #2
 800fab4:	e093      	b.n	800fbde <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800fab6:	4a4d      	ldr	r2, [pc, #308]	; (800fbec <LmHandlerSend+0x18c>)
 800fab8:	78fb      	ldrb	r3, [r7, #3]
 800faba:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800fabc:	78fb      	ldrb	r3, [r7, #3]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	bf14      	ite	ne
 800fac2:	2301      	movne	r3, #1
 800fac4:	2300      	moveq	r3, #0
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800faca:	4b49      	ldr	r3, [pc, #292]	; (800fbf0 <LmHandlerSend+0x190>)
 800facc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fad0:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	785b      	ldrb	r3, [r3, #1]
 800fad6:	f107 020c 	add.w	r2, r7, #12
 800fada:	4611      	mov	r1, r2
 800fadc:	4618      	mov	r0, r3
 800fade:	f005 f8c9 	bl	8014c74 <LoRaMacQueryTxPossible>
 800fae2:	4603      	mov	r3, r0
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d009      	beq.n	800fafc <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800fae8:	2300      	movs	r3, #0
 800faea:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800faec:	2300      	movs	r3, #0
 800faee:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800faf0:	2300      	movs	r3, #0
 800faf2:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800faf4:	23f9      	movs	r3, #249	; 0xf9
 800faf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fafa:	e009      	b.n	800fb10 <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	785b      	ldrb	r3, [r3, #1]
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800fb10:	4b36      	ldr	r3, [pc, #216]	; (800fbec <LmHandlerSend+0x18c>)
 800fb12:	687a      	ldr	r2, [r7, #4]
 800fb14:	3310      	adds	r3, #16
 800fb16:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb1a:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800fb1e:	4b34      	ldr	r3, [pc, #208]	; (800fbf0 <LmHandlerSend+0x190>)
 800fb20:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800fb24:	4b31      	ldr	r3, [pc, #196]	; (800fbec <LmHandlerSend+0x18c>)
 800fb26:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800fb28:	78ba      	ldrb	r2, [r7, #2]
 800fb2a:	f107 0310 	add.w	r3, r7, #16
 800fb2e:	4611      	mov	r1, r2
 800fb30:	4618      	mov	r0, r3
 800fb32:	f006 f849 	bl	8015bc8 <LoRaMacMcpsRequest>
 800fb36:	4603      	mov	r3, r0
 800fb38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800fb3c:	6a3b      	ldr	r3, [r7, #32]
 800fb3e:	4a2d      	ldr	r2, [pc, #180]	; (800fbf4 <LmHandlerSend+0x194>)
 800fb40:	6013      	str	r3, [r2, #0]

    switch( status )
 800fb42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fb46:	2b11      	cmp	r3, #17
 800fb48:	d842      	bhi.n	800fbd0 <LmHandlerSend+0x170>
 800fb4a:	a201      	add	r2, pc, #4	; (adr r2, 800fb50 <LmHandlerSend+0xf0>)
 800fb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb50:	0800fb99 	.word	0x0800fb99
 800fb54:	0800fbb1 	.word	0x0800fbb1
 800fb58:	0800fbd1 	.word	0x0800fbd1
 800fb5c:	0800fbd1 	.word	0x0800fbd1
 800fb60:	0800fbd1 	.word	0x0800fbd1
 800fb64:	0800fbd1 	.word	0x0800fbd1
 800fb68:	0800fbd1 	.word	0x0800fbd1
 800fb6c:	0800fbb9 	.word	0x0800fbb9
 800fb70:	0800fbd1 	.word	0x0800fbd1
 800fb74:	0800fbd1 	.word	0x0800fbd1
 800fb78:	0800fbd1 	.word	0x0800fbd1
 800fb7c:	0800fbc9 	.word	0x0800fbc9
 800fb80:	0800fbd1 	.word	0x0800fbd1
 800fb84:	0800fbd1 	.word	0x0800fbd1
 800fb88:	0800fbb1 	.word	0x0800fbb1
 800fb8c:	0800fbb1 	.word	0x0800fbb1
 800fb90:	0800fbb1 	.word	0x0800fbb1
 800fb94:	0800fbc1 	.word	0x0800fbc1
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800fb98:	4b17      	ldr	r3, [pc, #92]	; (800fbf8 <LmHandlerSend+0x198>)
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800fb9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fba2:	f113 0f07 	cmn.w	r3, #7
 800fba6:	d017      	beq.n	800fbd8 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800fbae:	e013      	b.n	800fbd8 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800fbb0:	23fe      	movs	r3, #254	; 0xfe
 800fbb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fbb6:	e010      	b.n	800fbda <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fbb8:	23fd      	movs	r3, #253	; 0xfd
 800fbba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fbbe:	e00c      	b.n	800fbda <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800fbc0:	23fb      	movs	r3, #251	; 0xfb
 800fbc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fbc6:	e008      	b.n	800fbda <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800fbc8:	23fa      	movs	r3, #250	; 0xfa
 800fbca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fbce:	e004      	b.n	800fbda <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800fbd0:	23ff      	movs	r3, #255	; 0xff
 800fbd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fbd6:	e000      	b.n	800fbda <LmHandlerSend+0x17a>
            break;
 800fbd8:	bf00      	nop
    }

    return lmhStatus;
 800fbda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3728      	adds	r7, #40	; 0x28
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	20000094 	.word	0x20000094
 800fbec:	200000a0 	.word	0x200000a0
 800fbf0:	200006b8 	.word	0x200006b8
 800fbf4:	200006fc 	.word	0x200006fc
 800fbf8:	20000700 	.word	0x20000700

0800fbfc <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b086      	sub	sp, #24
 800fc00:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800fc02:	2309      	movs	r3, #9
 800fc04:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800fc06:	463b      	mov	r3, r7
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f005 fe45 	bl	8015898 <LoRaMacMlmeRequest>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	4a06      	ldr	r2, [pc, #24]	; (800fc30 <LmHandlerDeviceTimeReq+0x34>)
 800fc16:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800fc18:	7dfb      	ldrb	r3, [r7, #23]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d101      	bne.n	800fc22 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	e001      	b.n	800fc26 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fc22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3718      	adds	r7, #24
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	200006fc 	.word	0x200006fc

0800fc34 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800fc34:	b480      	push	{r7}
 800fc36:	b083      	sub	sp, #12
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800fc3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	370c      	adds	r7, #12
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bc80      	pop	{r7}
 800fc4a:	4770      	bx	lr

0800fc4c <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b08e      	sub	sp, #56	; 0x38
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	4603      	mov	r3, r0
 800fc54:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800fc56:	2300      	movs	r3, #0
 800fc58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800fc5c:	f002 f9b4 	bl	8011fc8 <LoRaMacIsBusy>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d002      	beq.n	800fc6c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fc66:	f06f 0301 	mvn.w	r3, #1
 800fc6a:	e071      	b.n	800fd50 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800fc6c:	f7ff fedc 	bl	800fa28 <LmHandlerJoinStatus>
 800fc70:	4603      	mov	r3, r0
 800fc72:	2b01      	cmp	r3, #1
 800fc74:	d002      	beq.n	800fc7c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fc76:	f06f 0302 	mvn.w	r3, #2
 800fc7a:	e069      	b.n	800fd50 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fc80:	f107 030c 	add.w	r3, r7, #12
 800fc84:	4618      	mov	r0, r3
 800fc86:	f005 f885 	bl	8014d94 <LoRaMacMibGetRequestConfirm>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d002      	beq.n	800fc96 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800fc90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc94:	e05c      	b.n	800fd50 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800fc96:	7c3b      	ldrb	r3, [r7, #16]
 800fc98:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800fc9c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fca0:	79fb      	ldrb	r3, [r7, #7]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d052      	beq.n	800fd4c <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800fca6:	79fb      	ldrb	r3, [r7, #7]
 800fca8:	2b02      	cmp	r3, #2
 800fcaa:	d028      	beq.n	800fcfe <LmHandlerRequestClass+0xb2>
 800fcac:	2b02      	cmp	r3, #2
 800fcae:	dc48      	bgt.n	800fd42 <LmHandlerRequestClass+0xf6>
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d002      	beq.n	800fcba <LmHandlerRequestClass+0x6e>
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	d01e      	beq.n	800fcf6 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800fcb8:	e043      	b.n	800fd42 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800fcba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d041      	beq.n	800fd46 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800fcc2:	79fb      	ldrb	r3, [r7, #7]
 800fcc4:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800fcc6:	f107 030c 	add.w	r3, r7, #12
 800fcca:	4618      	mov	r0, r3
 800fccc:	f005 fa3a 	bl	8015144 <LoRaMacMibSetRequestConfirm>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d10b      	bne.n	800fcee <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800fcd6:	4b20      	ldr	r3, [pc, #128]	; (800fd58 <LmHandlerRequestClass+0x10c>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d032      	beq.n	800fd46 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800fce0:	4b1d      	ldr	r3, [pc, #116]	; (800fd58 <LmHandlerRequestClass+0x10c>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fce6:	79fa      	ldrb	r2, [r7, #7]
 800fce8:	4610      	mov	r0, r2
 800fcea:	4798      	blx	r3
                break;
 800fcec:	e02b      	b.n	800fd46 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800fcee:	23ff      	movs	r3, #255	; 0xff
 800fcf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fcf4:	e027      	b.n	800fd46 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800fcf6:	23ff      	movs	r3, #255	; 0xff
 800fcf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fcfc:	e026      	b.n	800fd4c <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800fcfe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d003      	beq.n	800fd0e <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800fd06:	23ff      	movs	r3, #255	; 0xff
 800fd08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd0c:	e01d      	b.n	800fd4a <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800fd0e:	79fb      	ldrb	r3, [r7, #7]
 800fd10:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800fd12:	f107 030c 	add.w	r3, r7, #12
 800fd16:	4618      	mov	r0, r3
 800fd18:	f005 fa14 	bl	8015144 <LoRaMacMibSetRequestConfirm>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d10b      	bne.n	800fd3a <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800fd22:	4b0d      	ldr	r3, [pc, #52]	; (800fd58 <LmHandlerRequestClass+0x10c>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d00e      	beq.n	800fd4a <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800fd2c:	4b0a      	ldr	r3, [pc, #40]	; (800fd58 <LmHandlerRequestClass+0x10c>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd32:	79fa      	ldrb	r2, [r7, #7]
 800fd34:	4610      	mov	r0, r2
 800fd36:	4798      	blx	r3
                break;
 800fd38:	e007      	b.n	800fd4a <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800fd3a:	23ff      	movs	r3, #255	; 0xff
 800fd3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd40:	e003      	b.n	800fd4a <LmHandlerRequestClass+0xfe>
                break;
 800fd42:	bf00      	nop
 800fd44:	e002      	b.n	800fd4c <LmHandlerRequestClass+0x100>
                break;
 800fd46:	bf00      	nop
 800fd48:	e000      	b.n	800fd4c <LmHandlerRequestClass+0x100>
                break;
 800fd4a:	bf00      	nop
        }
    }
    return errorStatus;
 800fd4c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800fd50:	4618      	mov	r0, r3
 800fd52:	3738      	adds	r7, #56	; 0x38
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}
 800fd58:	200006d0 	.word	0x200006d0

0800fd5c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b08c      	sub	sp, #48	; 0x30
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d102      	bne.n	800fd70 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fd6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd6e:	e010      	b.n	800fd92 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fd70:	2300      	movs	r3, #0
 800fd72:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fd74:	f107 0308 	add.w	r3, r7, #8
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f005 f80b 	bl	8014d94 <LoRaMacMibGetRequestConfirm>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d002      	beq.n	800fd8a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fd84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd88:	e003      	b.n	800fd92 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800fd8a:	7b3a      	ldrb	r2, [r7, #12]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800fd90:	2300      	movs	r3, #0
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3730      	adds	r7, #48	; 0x30
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
	...

0800fd9c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b08c      	sub	sp, #48	; 0x30
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d102      	bne.n	800fdb0 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fdaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fdae:	e016      	b.n	800fdde <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800fdb0:	2320      	movs	r3, #32
 800fdb2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800fdb4:	f107 0308 	add.w	r3, r7, #8
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f004 ffeb 	bl	8014d94 <LoRaMacMibGetRequestConfirm>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d002      	beq.n	800fdca <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fdc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fdc8:	e009      	b.n	800fdde <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800fdca:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f993 2000 	ldrsb.w	r2, [r3]
 800fdd8:	4b03      	ldr	r3, [pc, #12]	; (800fde8 <LmHandlerGetTxDatarate+0x4c>)
 800fdda:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800fddc:	2300      	movs	r3, #0
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3730      	adds	r7, #48	; 0x30
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	200006b8 	.word	0x200006b8

0800fdec <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b08c      	sub	sp, #48	; 0x30
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800fdf4:	2323      	movs	r3, #35	; 0x23
 800fdf6:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fdfc:	f107 0308 	add.w	r3, r7, #8
 800fe00:	4618      	mov	r0, r3
 800fe02:	f005 f99f 	bl	8015144 <LoRaMacMibSetRequestConfirm>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d002      	beq.n	800fe12 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe10:	e000      	b.n	800fe14 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800fe12:	2300      	movs	r3, #0
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3730      	adds	r7, #48	; 0x30
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800fe24:	4b18      	ldr	r3, [pc, #96]	; (800fe88 <McpsConfirm+0x6c>)
 800fe26:	2201      	movs	r2, #1
 800fe28:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	785a      	ldrb	r2, [r3, #1]
 800fe2e:	4b16      	ldr	r3, [pc, #88]	; (800fe88 <McpsConfirm+0x6c>)
 800fe30:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	789b      	ldrb	r3, [r3, #2]
 800fe36:	b25a      	sxtb	r2, r3
 800fe38:	4b13      	ldr	r3, [pc, #76]	; (800fe88 <McpsConfirm+0x6c>)
 800fe3a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	68db      	ldr	r3, [r3, #12]
 800fe40:	4a11      	ldr	r2, [pc, #68]	; (800fe88 <McpsConfirm+0x6c>)
 800fe42:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800fe4a:	4b0f      	ldr	r3, [pc, #60]	; (800fe88 <McpsConfirm+0x6c>)
 800fe4c:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	691b      	ldr	r3, [r3, #16]
 800fe52:	b2da      	uxtb	r2, r3
 800fe54:	4b0c      	ldr	r3, [pc, #48]	; (800fe88 <McpsConfirm+0x6c>)
 800fe56:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	791b      	ldrb	r3, [r3, #4]
 800fe5c:	461a      	mov	r2, r3
 800fe5e:	4b0a      	ldr	r3, [pc, #40]	; (800fe88 <McpsConfirm+0x6c>)
 800fe60:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800fe62:	4b0a      	ldr	r3, [pc, #40]	; (800fe8c <McpsConfirm+0x70>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d004      	beq.n	800fe76 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800fe6c:	4b07      	ldr	r3, [pc, #28]	; (800fe8c <McpsConfirm+0x70>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe72:	4805      	ldr	r0, [pc, #20]	; (800fe88 <McpsConfirm+0x6c>)
 800fe74:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800fe76:	6879      	ldr	r1, [r7, #4]
 800fe78:	2000      	movs	r0, #0
 800fe7a:	f000 f9e9 	bl	8010250 <LmHandlerPackagesNotify>
}
 800fe7e:	bf00      	nop
 800fe80:	3708      	adds	r7, #8
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	200000a0 	.word	0x200000a0
 800fe8c:	200006d0 	.word	0x200006d0

0800fe90 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b086      	sub	sp, #24
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800fe9e:	4b2d      	ldr	r3, [pc, #180]	; (800ff54 <McpsIndication+0xc4>)
 800fea0:	2201      	movs	r2, #1
 800fea2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	785a      	ldrb	r2, [r3, #1]
 800fea8:	4b2a      	ldr	r3, [pc, #168]	; (800ff54 <McpsIndication+0xc4>)
 800feaa:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800feac:	4b29      	ldr	r3, [pc, #164]	; (800ff54 <McpsIndication+0xc4>)
 800feae:	785b      	ldrb	r3, [r3, #1]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d14b      	bne.n	800ff4c <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	791b      	ldrb	r3, [r3, #4]
 800feb8:	b25a      	sxtb	r2, r3
 800feba:	4b26      	ldr	r3, [pc, #152]	; (800ff54 <McpsIndication+0xc4>)
 800febc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fec4:	b25a      	sxtb	r2, r3
 800fec6:	4b23      	ldr	r3, [pc, #140]	; (800ff54 <McpsIndication+0xc4>)
 800fec8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fed0:	4b20      	ldr	r3, [pc, #128]	; (800ff54 <McpsIndication+0xc4>)
 800fed2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	78da      	ldrb	r2, [r3, #3]
 800fed8:	4b1e      	ldr	r3, [pc, #120]	; (800ff54 <McpsIndication+0xc4>)
 800feda:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	691b      	ldr	r3, [r3, #16]
 800fee0:	4a1c      	ldr	r2, [pc, #112]	; (800ff54 <McpsIndication+0xc4>)
 800fee2:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	78db      	ldrb	r3, [r3, #3]
 800fee8:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	7b1b      	ldrb	r3, [r3, #12]
 800feee:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	689b      	ldr	r3, [r3, #8]
 800fef4:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800fef6:	4b18      	ldr	r3, [pc, #96]	; (800ff58 <McpsIndication+0xc8>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d007      	beq.n	800ff10 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ff00:	4b15      	ldr	r3, [pc, #84]	; (800ff58 <McpsIndication+0xc8>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff06:	f107 0210 	add.w	r2, r7, #16
 800ff0a:	4912      	ldr	r1, [pc, #72]	; (800ff54 <McpsIndication+0xc4>)
 800ff0c:	4610      	mov	r0, r2
 800ff0e:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800ff10:	4b11      	ldr	r3, [pc, #68]	; (800ff58 <McpsIndication+0xc8>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d007      	beq.n	800ff2a <McpsIndication+0x9a>
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	7e1b      	ldrb	r3, [r3, #24]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d003      	beq.n	800ff2a <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ff22:	4b0d      	ldr	r3, [pc, #52]	; (800ff58 <McpsIndication+0xc8>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff28:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ff2a:	6879      	ldr	r1, [r7, #4]
 800ff2c:	2001      	movs	r0, #1
 800ff2e:	f000 f98f 	bl	8010250 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ff32:	f107 030f 	add.w	r3, r7, #15
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7ff ff10 	bl	800fd5c <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	795b      	ldrb	r3, [r3, #5]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d004      	beq.n	800ff4e <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800ff44:	4b05      	ldr	r3, [pc, #20]	; (800ff5c <McpsIndication+0xcc>)
 800ff46:	2201      	movs	r2, #1
 800ff48:	701a      	strb	r2, [r3, #0]
 800ff4a:	e000      	b.n	800ff4e <McpsIndication+0xbe>
        return;
 800ff4c:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800ff4e:	3718      	adds	r7, #24
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	200000bc 	.word	0x200000bc
 800ff58:	200006d0 	.word	0x200006d0
 800ff5c:	20000700 	.word	0x20000700

0800ff60 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b08c      	sub	sp, #48	; 0x30
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800ff68:	4b49      	ldr	r3, [pc, #292]	; (8010090 <MlmeConfirm+0x130>)
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	785a      	ldrb	r2, [r3, #1]
 800ff72:	4b47      	ldr	r3, [pc, #284]	; (8010090 <MlmeConfirm+0x130>)
 800ff74:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800ff76:	4b47      	ldr	r3, [pc, #284]	; (8010094 <MlmeConfirm+0x134>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d004      	beq.n	800ff8a <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800ff80:	4b44      	ldr	r3, [pc, #272]	; (8010094 <MlmeConfirm+0x134>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff86:	4842      	ldr	r0, [pc, #264]	; (8010090 <MlmeConfirm+0x130>)
 800ff88:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800ff8a:	6879      	ldr	r1, [r7, #4]
 800ff8c:	2002      	movs	r0, #2
 800ff8e:	f000 f95f 	bl	8010250 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	3b01      	subs	r3, #1
 800ff98:	2b0b      	cmp	r3, #11
 800ff9a:	d872      	bhi.n	8010082 <MlmeConfirm+0x122>
 800ff9c:	a201      	add	r2, pc, #4	; (adr r2, 800ffa4 <MlmeConfirm+0x44>)
 800ff9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffa2:	bf00      	nop
 800ffa4:	0800ffd5 	.word	0x0800ffd5
 800ffa8:	08010083 	.word	0x08010083
 800ffac:	08010083 	.word	0x08010083
 800ffb0:	08010083 	.word	0x08010083
 800ffb4:	08010051 	.word	0x08010051
 800ffb8:	08010083 	.word	0x08010083
 800ffbc:	08010083 	.word	0x08010083
 800ffc0:	08010083 	.word	0x08010083
 800ffc4:	08010083 	.word	0x08010083
 800ffc8:	08010083 	.word	0x08010083
 800ffcc:	08010069 	.word	0x08010069
 800ffd0:	08010083 	.word	0x08010083
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800ffd4:	2306      	movs	r3, #6
 800ffd6:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800ffd8:	f107 0308 	add.w	r3, r7, #8
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f004 fed9 	bl	8014d94 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800ffe2:	4b2d      	ldr	r3, [pc, #180]	; (8010098 <MlmeConfirm+0x138>)
 800ffe4:	79db      	ldrb	r3, [r3, #7]
 800ffe6:	68fa      	ldr	r2, [r7, #12]
 800ffe8:	4611      	mov	r1, r2
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7ff fa78 	bl	800f4e0 <SecureElementSetDevAddr>
 800fff0:	4603      	mov	r3, r0
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d102      	bne.n	800fffc <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	4a28      	ldr	r2, [pc, #160]	; (801009c <MlmeConfirm+0x13c>)
 800fffa:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800fffc:	4828      	ldr	r0, [pc, #160]	; (80100a0 <MlmeConfirm+0x140>)
 800fffe:	f7ff fecd 	bl	800fd9c <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8010002:	4828      	ldr	r0, [pc, #160]	; (80100a4 <MlmeConfirm+0x144>)
 8010004:	f000 fa74 	bl	80104f0 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8010008:	4b21      	ldr	r3, [pc, #132]	; (8010090 <MlmeConfirm+0x130>)
 801000a:	785b      	ldrb	r3, [r3, #1]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d108      	bne.n	8010022 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8010010:	4b21      	ldr	r3, [pc, #132]	; (8010098 <MlmeConfirm+0x138>)
 8010012:	2200      	movs	r2, #0
 8010014:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8010016:	4b24      	ldr	r3, [pc, #144]	; (80100a8 <MlmeConfirm+0x148>)
 8010018:	785b      	ldrb	r3, [r3, #1]
 801001a:	4618      	mov	r0, r3
 801001c:	f7ff fe16 	bl	800fc4c <LmHandlerRequestClass>
 8010020:	e002      	b.n	8010028 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8010022:	4b1d      	ldr	r3, [pc, #116]	; (8010098 <MlmeConfirm+0x138>)
 8010024:	22ff      	movs	r2, #255	; 0xff
 8010026:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8010028:	4b1a      	ldr	r3, [pc, #104]	; (8010094 <MlmeConfirm+0x134>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801002e:	2b00      	cmp	r3, #0
 8010030:	d004      	beq.n	801003c <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8010032:	4b18      	ldr	r3, [pc, #96]	; (8010094 <MlmeConfirm+0x134>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010038:	4817      	ldr	r0, [pc, #92]	; (8010098 <MlmeConfirm+0x138>)
 801003a:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 801003c:	4b14      	ldr	r3, [pc, #80]	; (8010090 <MlmeConfirm+0x130>)
 801003e:	785b      	ldrb	r3, [r3, #1]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d120      	bne.n	8010086 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8010044:	4b14      	ldr	r3, [pc, #80]	; (8010098 <MlmeConfirm+0x138>)
 8010046:	79db      	ldrb	r3, [r3, #7]
 8010048:	4618      	mov	r0, r3
 801004a:	f7fe fff1 	bl	800f030 <SecureElementPrintSessionKeys>
                }
            }
            break;
 801004e:	e01a      	b.n	8010086 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 8010050:	4b16      	ldr	r3, [pc, #88]	; (80100ac <MlmeConfirm+0x14c>)
 8010052:	2201      	movs	r2, #1
 8010054:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	7a1a      	ldrb	r2, [r3, #8]
 801005a:	4b14      	ldr	r3, [pc, #80]	; (80100ac <MlmeConfirm+0x14c>)
 801005c:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	7a5a      	ldrb	r2, [r3, #9]
 8010062:	4b12      	ldr	r3, [pc, #72]	; (80100ac <MlmeConfirm+0x14c>)
 8010064:	74da      	strb	r2, [r3, #19]
            }
            break;
 8010066:	e00f      	b.n	8010088 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	785b      	ldrb	r3, [r3, #1]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d105      	bne.n	801007c <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8010070:	4b0d      	ldr	r3, [pc, #52]	; (80100a8 <MlmeConfirm+0x148>)
 8010072:	7c1b      	ldrb	r3, [r3, #16]
 8010074:	4618      	mov	r0, r3
 8010076:	f7ff fddd 	bl	800fc34 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 801007a:	e005      	b.n	8010088 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 801007c:	f7ff fdbe 	bl	800fbfc <LmHandlerDeviceTimeReq>
            break;
 8010080:	e002      	b.n	8010088 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8010082:	bf00      	nop
 8010084:	e000      	b.n	8010088 <MlmeConfirm+0x128>
            break;
 8010086:	bf00      	nop
    }
}
 8010088:	bf00      	nop
 801008a:	3730      	adds	r7, #48	; 0x30
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	200000a0 	.word	0x200000a0
 8010094:	200006d0 	.word	0x200006d0
 8010098:	20000094 	.word	0x20000094
 801009c:	2000067c 	.word	0x2000067c
 80100a0:	20000098 	.word	0x20000098
 80100a4:	20000099 	.word	0x20000099
 80100a8:	200006b8 	.word	0x200006b8
 80100ac:	200000bc 	.word	0x200000bc

080100b0 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 80100ba:	4b20      	ldr	r3, [pc, #128]	; (801013c <MlmeIndication+0x8c>)
 80100bc:	2200      	movs	r2, #0
 80100be:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	785a      	ldrb	r2, [r3, #1]
 80100c4:	4b1d      	ldr	r3, [pc, #116]	; (801013c <MlmeIndication+0x8c>)
 80100c6:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	789b      	ldrb	r3, [r3, #2]
 80100cc:	b25a      	sxtb	r2, r3
 80100ce:	4b1b      	ldr	r3, [pc, #108]	; (801013c <MlmeIndication+0x8c>)
 80100d0:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100d8:	b25a      	sxtb	r2, r3
 80100da:	4b18      	ldr	r3, [pc, #96]	; (801013c <MlmeIndication+0x8c>)
 80100dc:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80100e4:	4b15      	ldr	r3, [pc, #84]	; (801013c <MlmeIndication+0x8c>)
 80100e6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	78da      	ldrb	r2, [r3, #3]
 80100ec:	4b13      	ldr	r3, [pc, #76]	; (801013c <MlmeIndication+0x8c>)
 80100ee:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	4a11      	ldr	r2, [pc, #68]	; (801013c <MlmeIndication+0x8c>)
 80100f6:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 80100f8:	4b11      	ldr	r3, [pc, #68]	; (8010140 <MlmeIndication+0x90>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d00d      	beq.n	801011e <MlmeIndication+0x6e>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	2b0a      	cmp	r3, #10
 8010108:	d009      	beq.n	801011e <MlmeIndication+0x6e>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	2b0e      	cmp	r3, #14
 8010110:	d005      	beq.n	801011e <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8010112:	4b0b      	ldr	r3, [pc, #44]	; (8010140 <MlmeIndication+0x90>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010118:	4908      	ldr	r1, [pc, #32]	; (801013c <MlmeIndication+0x8c>)
 801011a:	2000      	movs	r0, #0
 801011c:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 801011e:	6879      	ldr	r1, [r7, #4]
 8010120:	2003      	movs	r0, #3
 8010122:	f000 f895 	bl	8010250 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	2b0a      	cmp	r3, #10
 801012c:	d001      	beq.n	8010132 <MlmeIndication+0x82>
 801012e:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8010130:	e000      	b.n	8010134 <MlmeIndication+0x84>
            break;
 8010132:	bf00      	nop
    }
}
 8010134:	bf00      	nop
 8010136:	3708      	adds	r7, #8
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	200000bc 	.word	0x200000bc
 8010140:	200006d0 	.word	0x200006d0

08010144 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	4603      	mov	r3, r0
 801014c:	6039      	str	r1, [r7, #0]
 801014e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 8010150:	2300      	movs	r3, #0
 8010152:	60fb      	str	r3, [r7, #12]
    switch( id )
 8010154:	79fb      	ldrb	r3, [r7, #7]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d104      	bne.n	8010164 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 801015a:	f000 fa8b 	bl	8010674 <LmhpCompliancePackageFactory>
 801015e:	4603      	mov	r3, r0
 8010160:	60fb      	str	r3, [r7, #12]
                break;
 8010162:	e00d      	b.n	8010180 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8010164:	f107 020c 	add.w	r2, r7, #12
 8010168:	79fb      	ldrb	r3, [r7, #7]
 801016a:	4611      	mov	r1, r2
 801016c:	4618      	mov	r0, r3
 801016e:	f000 ff73 	bl	8011058 <LmhpPackagesRegister>
 8010172:	4603      	mov	r3, r0
 8010174:	2b00      	cmp	r3, #0
 8010176:	d002      	beq.n	801017e <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 8010178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801017c:	e03b      	b.n	80101f6 <LmHandlerPackageRegister+0xb2>
                }
                break;
 801017e:	bf00      	nop
            }
    }
    if( package != NULL )
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d035      	beq.n	80101f2 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 8010186:	79fb      	ldrb	r3, [r7, #7]
 8010188:	68fa      	ldr	r2, [r7, #12]
 801018a:	491d      	ldr	r1, [pc, #116]	; (8010200 <LmHandlerPackageRegister+0xbc>)
 801018c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8010190:	79fb      	ldrb	r3, [r7, #7]
 8010192:	4a1b      	ldr	r2, [pc, #108]	; (8010200 <LmHandlerPackageRegister+0xbc>)
 8010194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010198:	4a1a      	ldr	r2, [pc, #104]	; (8010204 <LmHandlerPackageRegister+0xc0>)
 801019a:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 801019c:	4b1a      	ldr	r3, [pc, #104]	; (8010208 <LmHandlerPackageRegister+0xc4>)
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	79fb      	ldrb	r3, [r7, #7]
 80101a2:	4917      	ldr	r1, [pc, #92]	; (8010200 <LmHandlerPackageRegister+0xbc>)
 80101a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80101a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80101aa:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 80101ac:	4b16      	ldr	r3, [pc, #88]	; (8010208 <LmHandlerPackageRegister+0xc4>)
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	79fb      	ldrb	r3, [r7, #7]
 80101b2:	4913      	ldr	r1, [pc, #76]	; (8010200 <LmHandlerPackageRegister+0xbc>)
 80101b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80101b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80101ba:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 80101bc:	79fb      	ldrb	r3, [r7, #7]
 80101be:	4a10      	ldr	r2, [pc, #64]	; (8010200 <LmHandlerPackageRegister+0xbc>)
 80101c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101c4:	4a11      	ldr	r2, [pc, #68]	; (801020c <LmHandlerPackageRegister+0xc8>)
 80101c6:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 80101c8:	4b0f      	ldr	r3, [pc, #60]	; (8010208 <LmHandlerPackageRegister+0xc4>)
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	79fb      	ldrb	r3, [r7, #7]
 80101ce:	490c      	ldr	r1, [pc, #48]	; (8010200 <LmHandlerPackageRegister+0xbc>)
 80101d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80101d4:	6992      	ldr	r2, [r2, #24]
 80101d6:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 80101d8:	79fb      	ldrb	r3, [r7, #7]
 80101da:	4a09      	ldr	r2, [pc, #36]	; (8010200 <LmHandlerPackageRegister+0xbc>)
 80101dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	4a0b      	ldr	r2, [pc, #44]	; (8010210 <LmHandlerPackageRegister+0xcc>)
 80101e4:	6851      	ldr	r1, [r2, #4]
 80101e6:	4a0a      	ldr	r2, [pc, #40]	; (8010210 <LmHandlerPackageRegister+0xcc>)
 80101e8:	7852      	ldrb	r2, [r2, #1]
 80101ea:	6838      	ldr	r0, [r7, #0]
 80101ec:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 80101ee:	2300      	movs	r3, #0
 80101f0:	e001      	b.n	80101f6 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 80101f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3710      	adds	r7, #16
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	200006a4 	.word	0x200006a4
 8010204:	0800f8e5 	.word	0x0800f8e5
 8010208:	200006d0 	.word	0x200006d0
 801020c:	0800fbfd 	.word	0x0800fbfd
 8010210:	200000d0 	.word	0x200000d0

08010214 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	4603      	mov	r3, r0
 801021c:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 801021e:	79fb      	ldrb	r3, [r7, #7]
 8010220:	2b04      	cmp	r3, #4
 8010222:	d80e      	bhi.n	8010242 <LmHandlerPackageIsInitialized+0x2e>
 8010224:	79fb      	ldrb	r3, [r7, #7]
 8010226:	4a09      	ldr	r2, [pc, #36]	; (801024c <LmHandlerPackageIsInitialized+0x38>)
 8010228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801022c:	689b      	ldr	r3, [r3, #8]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d007      	beq.n	8010242 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8010232:	79fb      	ldrb	r3, [r7, #7]
 8010234:	4a05      	ldr	r2, [pc, #20]	; (801024c <LmHandlerPackageIsInitialized+0x38>)
 8010236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801023a:	689b      	ldr	r3, [r3, #8]
 801023c:	4798      	blx	r3
 801023e:	4603      	mov	r3, r0
 8010240:	e000      	b.n	8010244 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 8010242:	2300      	movs	r3, #0
    }
}
 8010244:	4618      	mov	r0, r3
 8010246:	3708      	adds	r7, #8
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}
 801024c:	200006a4 	.word	0x200006a4

08010250 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b084      	sub	sp, #16
 8010254:	af00      	add	r7, sp, #0
 8010256:	4603      	mov	r3, r0
 8010258:	6039      	str	r1, [r7, #0]
 801025a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801025c:	2300      	movs	r3, #0
 801025e:	73fb      	strb	r3, [r7, #15]
 8010260:	e067      	b.n	8010332 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 8010262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010266:	4a37      	ldr	r2, [pc, #220]	; (8010344 <LmHandlerPackagesNotify+0xf4>)
 8010268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d05a      	beq.n	8010326 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 8010270:	79fb      	ldrb	r3, [r7, #7]
 8010272:	2b03      	cmp	r3, #3
 8010274:	d84e      	bhi.n	8010314 <LmHandlerPackagesNotify+0xc4>
 8010276:	a201      	add	r2, pc, #4	; (adr r2, 801027c <LmHandlerPackagesNotify+0x2c>)
 8010278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801027c:	0801028d 	.word	0x0801028d
 8010280:	080102af 	.word	0x080102af
 8010284:	080102d1 	.word	0x080102d1
 8010288:	080102f3 	.word	0x080102f3
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 801028c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010290:	4a2c      	ldr	r2, [pc, #176]	; (8010344 <LmHandlerPackagesNotify+0xf4>)
 8010292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010296:	699b      	ldr	r3, [r3, #24]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d03d      	beq.n	8010318 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 801029c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102a0:	4a28      	ldr	r2, [pc, #160]	; (8010344 <LmHandlerPackagesNotify+0xf4>)
 80102a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102a6:	699b      	ldr	r3, [r3, #24]
 80102a8:	6838      	ldr	r0, [r7, #0]
 80102aa:	4798      	blx	r3
                        }
                        break;
 80102ac:	e034      	b.n	8010318 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 80102ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102b2:	4a24      	ldr	r2, [pc, #144]	; (8010344 <LmHandlerPackagesNotify+0xf4>)
 80102b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102b8:	69db      	ldr	r3, [r3, #28]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d02e      	beq.n	801031c <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 80102be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102c2:	4a20      	ldr	r2, [pc, #128]	; (8010344 <LmHandlerPackagesNotify+0xf4>)
 80102c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102c8:	69db      	ldr	r3, [r3, #28]
 80102ca:	6838      	ldr	r0, [r7, #0]
 80102cc:	4798      	blx	r3
                        }
                        break;
 80102ce:	e025      	b.n	801031c <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 80102d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102d4:	4a1b      	ldr	r2, [pc, #108]	; (8010344 <LmHandlerPackagesNotify+0xf4>)
 80102d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102da:	6a1b      	ldr	r3, [r3, #32]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d01f      	beq.n	8010320 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 80102e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102e4:	4a17      	ldr	r2, [pc, #92]	; (8010344 <LmHandlerPackagesNotify+0xf4>)
 80102e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102ea:	6a1b      	ldr	r3, [r3, #32]
 80102ec:	6838      	ldr	r0, [r7, #0]
 80102ee:	4798      	blx	r3
                        }
                        break;
 80102f0:	e016      	b.n	8010320 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 80102f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102f6:	4a13      	ldr	r2, [pc, #76]	; (8010344 <LmHandlerPackagesNotify+0xf4>)
 80102f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d010      	beq.n	8010324 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8010302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010306:	4a0f      	ldr	r2, [pc, #60]	; (8010344 <LmHandlerPackagesNotify+0xf4>)
 8010308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801030c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801030e:	6838      	ldr	r0, [r7, #0]
 8010310:	4798      	blx	r3
                        }
                        break;
 8010312:	e007      	b.n	8010324 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 8010314:	bf00      	nop
 8010316:	e006      	b.n	8010326 <LmHandlerPackagesNotify+0xd6>
                        break;
 8010318:	bf00      	nop
 801031a:	e004      	b.n	8010326 <LmHandlerPackagesNotify+0xd6>
                        break;
 801031c:	bf00      	nop
 801031e:	e002      	b.n	8010326 <LmHandlerPackagesNotify+0xd6>
                        break;
 8010320:	bf00      	nop
 8010322:	e000      	b.n	8010326 <LmHandlerPackagesNotify+0xd6>
                        break;
 8010324:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801032a:	b2db      	uxtb	r3, r3
 801032c:	3301      	adds	r3, #1
 801032e:	b2db      	uxtb	r3, r3
 8010330:	73fb      	strb	r3, [r7, #15]
 8010332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010336:	2b04      	cmp	r3, #4
 8010338:	dd93      	ble.n	8010262 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 801033a:	bf00      	nop
 801033c:	bf00      	nop
 801033e:	3710      	adds	r7, #16
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}
 8010344:	200006a4 	.word	0x200006a4

08010348 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801034e:	2300      	movs	r3, #0
 8010350:	71fb      	strb	r3, [r7, #7]
 8010352:	e018      	b.n	8010386 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 8010354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010358:	4a0f      	ldr	r2, [pc, #60]	; (8010398 <LmHandlerPackageIsTxPending+0x50>)
 801035a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d00b      	beq.n	801037a <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8010362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010366:	4a0c      	ldr	r2, [pc, #48]	; (8010398 <LmHandlerPackageIsTxPending+0x50>)
 8010368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801036c:	68db      	ldr	r3, [r3, #12]
 801036e:	4798      	blx	r3
 8010370:	4603      	mov	r3, r0
 8010372:	2b00      	cmp	r3, #0
 8010374:	d001      	beq.n	801037a <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 8010376:	2301      	movs	r3, #1
 8010378:	e00a      	b.n	8010390 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801037a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801037e:	b2db      	uxtb	r3, r3
 8010380:	3301      	adds	r3, #1
 8010382:	b2db      	uxtb	r3, r3
 8010384:	71fb      	strb	r3, [r7, #7]
 8010386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801038a:	2b04      	cmp	r3, #4
 801038c:	dde2      	ble.n	8010354 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 801038e:	2300      	movs	r3, #0
}
 8010390:	4618      	mov	r0, r3
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	200006a4 	.word	0x200006a4

0801039c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b082      	sub	sp, #8
 80103a0:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80103a2:	2300      	movs	r3, #0
 80103a4:	71fb      	strb	r3, [r7, #7]
 80103a6:	e022      	b.n	80103ee <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 80103a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103ac:	4a14      	ldr	r2, [pc, #80]	; (8010400 <LmHandlerPackagesProcess+0x64>)
 80103ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d015      	beq.n	80103e2 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80103b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103ba:	4a11      	ldr	r2, [pc, #68]	; (8010400 <LmHandlerPackagesProcess+0x64>)
 80103bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103c0:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d00d      	beq.n	80103e2 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 80103c6:	79fb      	ldrb	r3, [r7, #7]
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7ff ff23 	bl	8010214 <LmHandlerPackageIsInitialized>
 80103ce:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d006      	beq.n	80103e2 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 80103d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103d8:	4a09      	ldr	r2, [pc, #36]	; (8010400 <LmHandlerPackagesProcess+0x64>)
 80103da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103de:	691b      	ldr	r3, [r3, #16]
 80103e0:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80103e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	3301      	adds	r3, #1
 80103ea:	b2db      	uxtb	r3, r3
 80103ec:	71fb      	strb	r3, [r7, #7]
 80103ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103f2:	2b04      	cmp	r3, #4
 80103f4:	ddd8      	ble.n	80103a8 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 80103f6:	bf00      	nop
 80103f8:	bf00      	nop
 80103fa:	3708      	adds	r7, #8
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	200006a4 	.word	0x200006a4

08010404 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	4603      	mov	r3, r0
 801040c:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 801040e:	4a09      	ldr	r2, [pc, #36]	; (8010434 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 8010410:	79fb      	ldrb	r3, [r7, #7]
 8010412:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 8010414:	4b08      	ldr	r3, [pc, #32]	; (8010438 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801041a:	2b00      	cmp	r3, #0
 801041c:	d005      	beq.n	801042a <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 801041e:	4b06      	ldr	r3, [pc, #24]	; (8010438 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010424:	79fa      	ldrb	r2, [r7, #7]
 8010426:	4610      	mov	r0, r2
 8010428:	4798      	blx	r3
    }
}
 801042a:	bf00      	nop
 801042c:	3708      	adds	r7, #8
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	200006b8 	.word	0x200006b8
 8010438:	200006d0 	.word	0x200006d0

0801043c <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	4603      	mov	r3, r0
 8010444:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8010446:	4a09      	ldr	r2, [pc, #36]	; (801046c <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 8010448:	79fb      	ldrb	r3, [r7, #7]
 801044a:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 801044c:	4b08      	ldr	r3, [pc, #32]	; (8010470 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010452:	2b00      	cmp	r3, #0
 8010454:	d005      	beq.n	8010462 <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 8010456:	4b06      	ldr	r3, [pc, #24]	; (8010470 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801045c:	79fa      	ldrb	r2, [r7, #7]
 801045e:	4610      	mov	r0, r2
 8010460:	4798      	blx	r3
    }
}
 8010462:	bf00      	nop
 8010464:	3708      	adds	r7, #8
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
 801046a:	bf00      	nop
 801046c:	200006b8 	.word	0x200006b8
 8010470:	200006d0 	.word	0x200006d0

08010474 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 8010474:	b480      	push	{r7}
 8010476:	b083      	sub	sp, #12
 8010478:	af00      	add	r7, sp, #0
 801047a:	4603      	mov	r3, r0
 801047c:	6039      	str	r1, [r7, #0]
 801047e:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d102      	bne.n	801048c <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 8010486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801048a:	e00e      	b.n	80104aa <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 801048c:	79fb      	ldrb	r3, [r7, #7]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d002      	beq.n	8010498 <LmHandlerGetVersion+0x24>
 8010492:	2b01      	cmp	r3, #1
 8010494:	d004      	beq.n	80104a0 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 8010496:	e007      	b.n	80104a8 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	4a06      	ldr	r2, [pc, #24]	; (80104b4 <LmHandlerGetVersion+0x40>)
 801049c:	601a      	str	r2, [r3, #0]
            break;
 801049e:	e003      	b.n	80104a8 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	4a05      	ldr	r2, [pc, #20]	; (80104b8 <LmHandlerGetVersion+0x44>)
 80104a4:	601a      	str	r2, [r3, #0]
            break;
 80104a6:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 80104a8:	2300      	movs	r3, #0
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	370c      	adds	r7, #12
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bc80      	pop	{r7}
 80104b2:	4770      	bx	lr
 80104b4:	01000400 	.word	0x01000400
 80104b8:	02010001 	.word	0x02010001

080104bc <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 80104c0:	f005 fce0 	bl	8015e84 <LoRaMacDeInitialization>
 80104c4:	4603      	mov	r3, r0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d101      	bne.n	80104ce <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80104ca:	2300      	movs	r3, #0
 80104cc:	e001      	b.n	80104d2 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 80104ce:	f06f 0301 	mvn.w	r3, #1
    }
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 80104d6:	b580      	push	{r7, lr}
 80104d8:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 80104da:	f004 fb93 	bl	8014c04 <LoRaMacHalt>
 80104de:	4603      	mov	r3, r0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d101      	bne.n	80104e8 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80104e4:	2300      	movs	r3, #0
 80104e6:	e001      	b.n	80104ec <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 80104e8:	f06f 0301 	mvn.w	r3, #1
    }
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b08c      	sub	sp, #48	; 0x30
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d102      	bne.n	8010504 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80104fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010502:	e016      	b.n	8010532 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8010504:	2321      	movs	r3, #33	; 0x21
 8010506:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010508:	f107 0308 	add.w	r3, r7, #8
 801050c:	4618      	mov	r0, r3
 801050e:	f004 fc41 	bl	8014d94 <LoRaMacMibGetRequestConfirm>
 8010512:	4603      	mov	r3, r0
 8010514:	2b00      	cmp	r3, #0
 8010516:	d002      	beq.n	801051e <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801051c:	e009      	b.n	8010532 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 801051e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f993 2000 	ldrsb.w	r2, [r3]
 801052c:	4b03      	ldr	r3, [pc, #12]	; (801053c <LmHandlerGetTxPower+0x4c>)
 801052e:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 8010530:	2300      	movs	r3, #0
}
 8010532:	4618      	mov	r0, r3
 8010534:	3730      	adds	r7, #48	; 0x30
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	200006b8 	.word	0x200006b8

08010540 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b08e      	sub	sp, #56	; 0x38
 8010544:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8010546:	2300      	movs	r3, #0
 8010548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 801054c:	2300      	movs	r3, #0
 801054e:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 8010550:	f7ff ffc1 	bl	80104d6 <LmHandlerHalt>
 8010554:	4603      	mov	r3, r0
 8010556:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 801055a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801055e:	2b00      	cmp	r3, #0
 8010560:	d12f      	bne.n	80105c2 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 8010562:	f000 f859 	bl	8010618 <NvmDataMgmtStoreBegin>
 8010566:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 8010568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056a:	f113 0f02 	cmn.w	r3, #2
 801056e:	d103      	bne.n	8010578 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8010570:	23f8      	movs	r3, #248	; 0xf8
 8010572:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010576:	e01c      	b.n	80105b2 <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 8010578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801057a:	2b00      	cmp	r3, #0
 801057c:	d104      	bne.n	8010588 <LmHandlerNvmDataStore+0x48>
 801057e:	4b1b      	ldr	r3, [pc, #108]	; (80105ec <LmHandlerNvmDataStore+0xac>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	695b      	ldr	r3, [r3, #20]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d103      	bne.n	8010590 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8010588:	23ff      	movs	r3, #255	; 0xff
 801058a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801058e:	e010      	b.n	80105b2 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 8010590:	2327      	movs	r3, #39	; 0x27
 8010592:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8010594:	463b      	mov	r3, r7
 8010596:	4618      	mov	r0, r3
 8010598:	f004 fbfc 	bl	8014d94 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 80105a0:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 80105a4:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 80105a6:	4b11      	ldr	r3, [pc, #68]	; (80105ec <LmHandlerNvmDataStore+0xac>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	695b      	ldr	r3, [r3, #20]
 80105ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80105ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105b0:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 80105b2:	f000 f847 	bl	8010644 <NvmDataMgmtStoreEnd>
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d002      	beq.n	80105c2 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80105bc:	23ff      	movs	r3, #255	; 0xff
 80105be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 80105c2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d109      	bne.n	80105de <LmHandlerNvmDataStore+0x9e>
 80105ca:	4b08      	ldr	r3, [pc, #32]	; (80105ec <LmHandlerNvmDataStore+0xac>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	69db      	ldr	r3, [r3, #28]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d004      	beq.n	80105de <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 80105d4:	4b05      	ldr	r3, [pc, #20]	; (80105ec <LmHandlerNvmDataStore+0xac>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	69db      	ldr	r3, [r3, #28]
 80105da:	2001      	movs	r0, #1
 80105dc:	4798      	blx	r3
    }

    return lmhStatus;
 80105de:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3738      	adds	r7, #56	; 0x38
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
 80105ea:	bf00      	nop
 80105ec:	200006d0 	.word	0x200006d0

080105f0 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	4603      	mov	r3, r0
 80105f8:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 80105fa:	4b06      	ldr	r3, [pc, #24]	; (8010614 <NvmDataMgmtEvent+0x24>)
 80105fc:	881a      	ldrh	r2, [r3, #0]
 80105fe:	88fb      	ldrh	r3, [r7, #6]
 8010600:	4313      	orrs	r3, r2
 8010602:	b29a      	uxth	r2, r3
 8010604:	4b03      	ldr	r3, [pc, #12]	; (8010614 <NvmDataMgmtEvent+0x24>)
 8010606:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8010608:	bf00      	nop
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	bc80      	pop	{r7}
 8010610:	4770      	bx	lr
 8010612:	bf00      	nop
 8010614:	200007f8 	.word	0x200007f8

08010618 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 8010618:	b580      	push	{r7, lr}
 801061a:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 801061c:	4b08      	ldr	r3, [pc, #32]	; (8010640 <NvmDataMgmtStoreBegin+0x28>)
 801061e:	881b      	ldrh	r3, [r3, #0]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d102      	bne.n	801062a <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 8010624:	f06f 0301 	mvn.w	r3, #1
 8010628:	e008      	b.n	801063c <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 801062a:	f004 fac3 	bl	8014bb4 <LoRaMacStop>
 801062e:	4603      	mov	r3, r0
 8010630:	2b00      	cmp	r3, #0
 8010632:	d002      	beq.n	801063a <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 8010634:	f06f 0302 	mvn.w	r3, #2
 8010638:	e000      	b.n	801063c <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 801063a:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 801063c:	4618      	mov	r0, r3
 801063e:	bd80      	pop	{r7, pc}
 8010640:	200007f8 	.word	0x200007f8

08010644 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 8010644:	b580      	push	{r7, lr}
 8010646:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010648:	4b03      	ldr	r3, [pc, #12]	; (8010658 <NvmDataMgmtStoreEnd+0x14>)
 801064a:	2200      	movs	r2, #0
 801064c:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 801064e:	f004 faa3 	bl	8014b98 <LoRaMacStart>
    return NVM_DATA_OK;
 8010652:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010654:	4618      	mov	r0, r3
 8010656:	bd80      	pop	{r7, pc}
 8010658:	200007f8 	.word	0x200007f8

0801065c <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 801065c:	b580      	push	{r7, lr}
 801065e:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8010660:	2220      	movs	r2, #32
 8010662:	2100      	movs	r1, #0
 8010664:	4802      	ldr	r0, [pc, #8]	; (8010670 <ClassBStatusReset+0x14>)
 8010666:	f00a f8b5 	bl	801a7d4 <memset1>
}
 801066a:	bf00      	nop
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	20000810 	.word	0x20000810

08010674 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 8010674:	b480      	push	{r7}
 8010676:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 8010678:	4b02      	ldr	r3, [pc, #8]	; (8010684 <LmhpCompliancePackageFactory+0x10>)
}
 801067a:	4618      	mov	r0, r3
 801067c:	46bd      	mov	sp, r7
 801067e:	bc80      	pop	{r7}
 8010680:	4770      	bx	lr
 8010682:	bf00      	nop
 8010684:	200000d8 	.word	0x200000d8

08010688 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b086      	sub	sp, #24
 801068c:	af02      	add	r7, sp, #8
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	4613      	mov	r3, r2
 8010694:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d018      	beq.n	80106ce <LmhpComplianceInit+0x46>
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d015      	beq.n	80106ce <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 80106a2:	4a19      	ldr	r2, [pc, #100]	; (8010708 <LmhpComplianceInit+0x80>)
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 80106a8:	4a18      	ldr	r2, [pc, #96]	; (801070c <LmhpComplianceInit+0x84>)
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80106ae:	4a17      	ldr	r2, [pc, #92]	; (801070c <LmhpComplianceInit+0x84>)
 80106b0:	79fb      	ldrb	r3, [r7, #7]
 80106b2:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 80106b4:	4b15      	ldr	r3, [pc, #84]	; (801070c <LmhpComplianceInit+0x84>)
 80106b6:	2201      	movs	r2, #1
 80106b8:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 80106ba:	2300      	movs	r3, #0
 80106bc:	9300      	str	r3, [sp, #0]
 80106be:	4b14      	ldr	r3, [pc, #80]	; (8010710 <LmhpComplianceInit+0x88>)
 80106c0:	2200      	movs	r2, #0
 80106c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80106c6:	4813      	ldr	r0, [pc, #76]	; (8010714 <LmhpComplianceInit+0x8c>)
 80106c8:	f00e f940 	bl	801e94c <UTIL_TIMER_Create>
 80106cc:	e005      	b.n	80106da <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 80106ce:	4b0e      	ldr	r3, [pc, #56]	; (8010708 <LmhpComplianceInit+0x80>)
 80106d0:	2200      	movs	r2, #0
 80106d2:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 80106d4:	4b0d      	ldr	r3, [pc, #52]	; (801070c <LmhpComplianceInit+0x84>)
 80106d6:	2200      	movs	r2, #0
 80106d8:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 80106da:	4b0c      	ldr	r3, [pc, #48]	; (801070c <LmhpComplianceInit+0x84>)
 80106dc:	2200      	movs	r2, #0
 80106de:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 80106e0:	f7ff ffbc 	bl	801065c <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 80106e4:	4b09      	ldr	r3, [pc, #36]	; (801070c <LmhpComplianceInit+0x84>)
 80106e6:	2200      	movs	r2, #0
 80106e8:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 80106ea:	4b08      	ldr	r3, [pc, #32]	; (801070c <LmhpComplianceInit+0x84>)
 80106ec:	2200      	movs	r2, #0
 80106ee:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 80106f0:	4b06      	ldr	r3, [pc, #24]	; (801070c <LmhpComplianceInit+0x84>)
 80106f2:	2200      	movs	r2, #0
 80106f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 80106f8:	4b04      	ldr	r3, [pc, #16]	; (801070c <LmhpComplianceInit+0x84>)
 80106fa:	2200      	movs	r2, #0
 80106fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8010700:	bf00      	nop
 8010702:	3710      	adds	r7, #16
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	20000834 	.word	0x20000834
 801070c:	200007fc 	.word	0x200007fc
 8010710:	08011011 	.word	0x08011011
 8010714:	20000838 	.word	0x20000838

08010718 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 8010718:	b480      	push	{r7}
 801071a:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 801071c:	4b02      	ldr	r3, [pc, #8]	; (8010728 <LmhpComplianceIsInitialized+0x10>)
 801071e:	781b      	ldrb	r3, [r3, #0]
}
 8010720:	4618      	mov	r0, r3
 8010722:	46bd      	mov	sp, r7
 8010724:	bc80      	pop	{r7}
 8010726:	4770      	bx	lr
 8010728:	200007fc 	.word	0x200007fc

0801072c <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 801072c:	b480      	push	{r7}
 801072e:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 8010730:	4b02      	ldr	r3, [pc, #8]	; (801073c <LmhpComplianceIsTxPending+0x10>)
 8010732:	785b      	ldrb	r3, [r3, #1]
}
 8010734:	4618      	mov	r0, r3
 8010736:	46bd      	mov	sp, r7
 8010738:	bc80      	pop	{r7}
 801073a:	4770      	bx	lr
 801073c:	200007fc 	.word	0x200007fc

08010740 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8010740:	b590      	push	{r4, r7, lr}
 8010742:	b085      	sub	sp, #20
 8010744:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 8010746:	4b33      	ldr	r3, [pc, #204]	; (8010814 <LmhpComplianceProcess+0xd4>)
 8010748:	785b      	ldrb	r3, [r3, #1]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d03e      	beq.n	80107cc <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 801074e:	f00e fabb 	bl	801ecc8 <UTIL_TIMER_GetCurrentTime>
 8010752:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 8010754:	4b2f      	ldr	r3, [pc, #188]	; (8010814 <LmhpComplianceProcess+0xd4>)
 8010756:	685c      	ldr	r4, [r3, #4]
 8010758:	f7ff f8ba 	bl	800f8d0 <LmHandlerGetDutyCycleWaitTime>
 801075c:	4603      	mov	r3, r0
 801075e:	4423      	add	r3, r4
 8010760:	68fa      	ldr	r2, [r7, #12]
 8010762:	429a      	cmp	r2, r3
 8010764:	d941      	bls.n	80107ea <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 8010766:	4b2b      	ldr	r3, [pc, #172]	; (8010814 <LmhpComplianceProcess+0xd4>)
 8010768:	7a9b      	ldrb	r3, [r3, #10]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d03d      	beq.n	80107ea <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 801076e:	23e0      	movs	r3, #224	; 0xe0
 8010770:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 8010772:	4b28      	ldr	r3, [pc, #160]	; (8010814 <LmhpComplianceProcess+0xd4>)
 8010774:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 8010776:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8010778:	4b26      	ldr	r3, [pc, #152]	; (8010814 <LmhpComplianceProcess+0xd4>)
 801077a:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 801077c:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 801077e:	23ff      	movs	r3, #255	; 0xff
 8010780:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 8010782:	4b24      	ldr	r3, [pc, #144]	; (8010814 <LmhpComplianceProcess+0xd4>)
 8010784:	7a19      	ldrb	r1, [r3, #8]
 8010786:	463b      	mov	r3, r7
 8010788:	2201      	movs	r2, #1
 801078a:	4618      	mov	r0, r3
 801078c:	f7ff f968 	bl	800fa60 <LmHandlerSend>
 8010790:	4603      	mov	r3, r0
 8010792:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 8010794:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d004      	beq.n	80107a6 <LmhpComplianceProcess+0x66>
 801079c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80107a0:	f113 0f07 	cmn.w	r3, #7
 80107a4:	d106      	bne.n	80107b4 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 80107a6:	4b1b      	ldr	r3, [pc, #108]	; (8010814 <LmhpComplianceProcess+0xd4>)
 80107a8:	2200      	movs	r2, #0
 80107aa:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 80107ac:	4b19      	ldr	r3, [pc, #100]	; (8010814 <LmhpComplianceProcess+0xd4>)
 80107ae:	2200      	movs	r2, #0
 80107b0:	729a      	strb	r2, [r3, #10]
 80107b2:	e007      	b.n	80107c4 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 80107b4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80107b8:	4817      	ldr	r0, [pc, #92]	; (8010818 <LmhpComplianceProcess+0xd8>)
 80107ba:	f00e f9db 	bl	801eb74 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 80107be:	4816      	ldr	r0, [pc, #88]	; (8010818 <LmhpComplianceProcess+0xd8>)
 80107c0:	f00e f8fa 	bl	801e9b8 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 80107c4:	4a13      	ldr	r2, [pc, #76]	; (8010814 <LmhpComplianceProcess+0xd4>)
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	6053      	str	r3, [r2, #4]
 80107ca:	e00e      	b.n	80107ea <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 80107cc:	4b11      	ldr	r3, [pc, #68]	; (8010814 <LmhpComplianceProcess+0xd4>)
 80107ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d009      	beq.n	80107ea <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 80107d6:	4b0f      	ldr	r3, [pc, #60]	; (8010814 <LmhpComplianceProcess+0xd4>)
 80107d8:	2200      	movs	r2, #0
 80107da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 80107de:	4b0d      	ldr	r3, [pc, #52]	; (8010814 <LmhpComplianceProcess+0xd4>)
 80107e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7ff fa31 	bl	800fc4c <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 80107ea:	4b0a      	ldr	r3, [pc, #40]	; (8010814 <LmhpComplianceProcess+0xd4>)
 80107ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d00a      	beq.n	801080a <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 80107f4:	4b07      	ldr	r3, [pc, #28]	; (8010814 <LmhpComplianceProcess+0xd4>)
 80107f6:	2200      	movs	r2, #0
 80107f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 80107fc:	4b07      	ldr	r3, [pc, #28]	; (801081c <LmhpComplianceProcess+0xdc>)
 80107fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010800:	2b00      	cmp	r3, #0
 8010802:	d002      	beq.n	801080a <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 8010804:	4b05      	ldr	r3, [pc, #20]	; (801081c <LmhpComplianceProcess+0xdc>)
 8010806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010808:	4798      	blx	r3
        }
    }
}
 801080a:	bf00      	nop
 801080c:	3714      	adds	r7, #20
 801080e:	46bd      	mov	sp, r7
 8010810:	bd90      	pop	{r4, r7, pc}
 8010812:	bf00      	nop
 8010814:	200007fc 	.word	0x200007fc
 8010818:	20000838 	.word	0x20000838
 801081c:	200000d8 	.word	0x200000d8

08010820 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 8010820:	b5b0      	push	{r4, r5, r7, lr}
 8010822:	b0a4      	sub	sp, #144	; 0x90
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 8010828:	2300      	movs	r3, #0
 801082a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 801082e:	4bd0      	ldr	r3, [pc, #832]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	f083 0301 	eor.w	r3, r3, #1
 8010836:	b2db      	uxtb	r3, r3
 8010838:	2b00      	cmp	r3, #0
 801083a:	f040 83bf 	bne.w	8010fbc <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	78db      	ldrb	r3, [r3, #3]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d103      	bne.n	801084e <LmhpComplianceOnMcpsIndication+0x2e>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	7b9b      	ldrb	r3, [r3, #14]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d005      	beq.n	801085a <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 801084e:	4bc8      	ldr	r3, [pc, #800]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010850:	8a1b      	ldrh	r3, [r3, #16]
 8010852:	3301      	adds	r3, #1
 8010854:	b29a      	uxth	r2, r3
 8010856:	4bc6      	ldr	r3, [pc, #792]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010858:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	7b5b      	ldrb	r3, [r3, #13]
 801085e:	f083 0301 	eor.w	r3, r3, #1
 8010862:	b2db      	uxtb	r3, r3
 8010864:	2b00      	cmp	r3, #0
 8010866:	f040 83ab 	bne.w	8010fc0 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	78db      	ldrb	r3, [r3, #3]
 801086e:	2be0      	cmp	r3, #224	; 0xe0
 8010870:	f040 83a8 	bne.w	8010fc4 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 8010874:	4bbe      	ldr	r3, [pc, #760]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010876:	2200      	movs	r2, #0
 8010878:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	689a      	ldr	r2, [r3, #8]
 801087e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010882:	1c59      	adds	r1, r3, #1
 8010884:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010888:	4413      	add	r3, r2
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	2b7f      	cmp	r3, #127	; 0x7f
 801088e:	f200 8372 	bhi.w	8010f76 <LmhpComplianceOnMcpsIndication+0x756>
 8010892:	a201      	add	r2, pc, #4	; (adr r2, 8010898 <LmhpComplianceOnMcpsIndication+0x78>)
 8010894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010898:	08010a99 	.word	0x08010a99
 801089c:	08010add 	.word	0x08010add
 80108a0:	08010ae7 	.word	0x08010ae7
 80108a4:	08010afd 	.word	0x08010afd
 80108a8:	08010b1f 	.word	0x08010b1f
 80108ac:	08010b4d 	.word	0x08010b4d
 80108b0:	08010b79 	.word	0x08010b79
 80108b4:	08010bd7 	.word	0x08010bd7
 80108b8:	08010c2f 	.word	0x08010c2f
 80108bc:	08010c9b 	.word	0x08010c9b
 80108c0:	08010ceb 	.word	0x08010ceb
 80108c4:	08010f77 	.word	0x08010f77
 80108c8:	08010f77 	.word	0x08010f77
 80108cc:	08010f77 	.word	0x08010f77
 80108d0:	08010f77 	.word	0x08010f77
 80108d4:	08010f77 	.word	0x08010f77
 80108d8:	08010f77 	.word	0x08010f77
 80108dc:	08010f77 	.word	0x08010f77
 80108e0:	08010f77 	.word	0x08010f77
 80108e4:	08010f77 	.word	0x08010f77
 80108e8:	08010f77 	.word	0x08010f77
 80108ec:	08010f77 	.word	0x08010f77
 80108f0:	08010f77 	.word	0x08010f77
 80108f4:	08010f77 	.word	0x08010f77
 80108f8:	08010f77 	.word	0x08010f77
 80108fc:	08010f77 	.word	0x08010f77
 8010900:	08010f77 	.word	0x08010f77
 8010904:	08010f77 	.word	0x08010f77
 8010908:	08010f77 	.word	0x08010f77
 801090c:	08010f77 	.word	0x08010f77
 8010910:	08010f77 	.word	0x08010f77
 8010914:	08010f77 	.word	0x08010f77
 8010918:	08010cf3 	.word	0x08010cf3
 801091c:	08010d05 	.word	0x08010d05
 8010920:	08010d0d 	.word	0x08010d0d
 8010924:	08010f77 	.word	0x08010f77
 8010928:	08010f77 	.word	0x08010f77
 801092c:	08010f77 	.word	0x08010f77
 8010930:	08010f77 	.word	0x08010f77
 8010934:	08010f77 	.word	0x08010f77
 8010938:	08010f77 	.word	0x08010f77
 801093c:	08010f77 	.word	0x08010f77
 8010940:	08010f77 	.word	0x08010f77
 8010944:	08010f77 	.word	0x08010f77
 8010948:	08010f77 	.word	0x08010f77
 801094c:	08010f77 	.word	0x08010f77
 8010950:	08010f77 	.word	0x08010f77
 8010954:	08010f77 	.word	0x08010f77
 8010958:	08010f77 	.word	0x08010f77
 801095c:	08010f77 	.word	0x08010f77
 8010960:	08010f77 	.word	0x08010f77
 8010964:	08010f77 	.word	0x08010f77
 8010968:	08010f77 	.word	0x08010f77
 801096c:	08010f77 	.word	0x08010f77
 8010970:	08010f77 	.word	0x08010f77
 8010974:	08010f77 	.word	0x08010f77
 8010978:	08010f77 	.word	0x08010f77
 801097c:	08010f77 	.word	0x08010f77
 8010980:	08010f77 	.word	0x08010f77
 8010984:	08010f77 	.word	0x08010f77
 8010988:	08010f77 	.word	0x08010f77
 801098c:	08010f77 	.word	0x08010f77
 8010990:	08010f77 	.word	0x08010f77
 8010994:	08010f77 	.word	0x08010f77
 8010998:	08010f77 	.word	0x08010f77
 801099c:	08010f77 	.word	0x08010f77
 80109a0:	08010f77 	.word	0x08010f77
 80109a4:	08010f77 	.word	0x08010f77
 80109a8:	08010f77 	.word	0x08010f77
 80109ac:	08010f77 	.word	0x08010f77
 80109b0:	08010f77 	.word	0x08010f77
 80109b4:	08010f77 	.word	0x08010f77
 80109b8:	08010f77 	.word	0x08010f77
 80109bc:	08010f77 	.word	0x08010f77
 80109c0:	08010f77 	.word	0x08010f77
 80109c4:	08010f77 	.word	0x08010f77
 80109c8:	08010f77 	.word	0x08010f77
 80109cc:	08010f77 	.word	0x08010f77
 80109d0:	08010f77 	.word	0x08010f77
 80109d4:	08010f77 	.word	0x08010f77
 80109d8:	08010f77 	.word	0x08010f77
 80109dc:	08010f77 	.word	0x08010f77
 80109e0:	08010f77 	.word	0x08010f77
 80109e4:	08010f77 	.word	0x08010f77
 80109e8:	08010f77 	.word	0x08010f77
 80109ec:	08010f77 	.word	0x08010f77
 80109f0:	08010f77 	.word	0x08010f77
 80109f4:	08010f77 	.word	0x08010f77
 80109f8:	08010f77 	.word	0x08010f77
 80109fc:	08010f77 	.word	0x08010f77
 8010a00:	08010f77 	.word	0x08010f77
 8010a04:	08010f77 	.word	0x08010f77
 8010a08:	08010f77 	.word	0x08010f77
 8010a0c:	08010f77 	.word	0x08010f77
 8010a10:	08010f77 	.word	0x08010f77
 8010a14:	08010f77 	.word	0x08010f77
 8010a18:	08010f77 	.word	0x08010f77
 8010a1c:	08010f77 	.word	0x08010f77
 8010a20:	08010f77 	.word	0x08010f77
 8010a24:	08010f77 	.word	0x08010f77
 8010a28:	08010f77 	.word	0x08010f77
 8010a2c:	08010f77 	.word	0x08010f77
 8010a30:	08010f77 	.word	0x08010f77
 8010a34:	08010f77 	.word	0x08010f77
 8010a38:	08010f77 	.word	0x08010f77
 8010a3c:	08010f77 	.word	0x08010f77
 8010a40:	08010f77 	.word	0x08010f77
 8010a44:	08010f77 	.word	0x08010f77
 8010a48:	08010f77 	.word	0x08010f77
 8010a4c:	08010f77 	.word	0x08010f77
 8010a50:	08010f77 	.word	0x08010f77
 8010a54:	08010f77 	.word	0x08010f77
 8010a58:	08010f77 	.word	0x08010f77
 8010a5c:	08010f77 	.word	0x08010f77
 8010a60:	08010f77 	.word	0x08010f77
 8010a64:	08010f77 	.word	0x08010f77
 8010a68:	08010f77 	.word	0x08010f77
 8010a6c:	08010f77 	.word	0x08010f77
 8010a70:	08010f77 	.word	0x08010f77
 8010a74:	08010f77 	.word	0x08010f77
 8010a78:	08010f77 	.word	0x08010f77
 8010a7c:	08010f77 	.word	0x08010f77
 8010a80:	08010f77 	.word	0x08010f77
 8010a84:	08010f77 	.word	0x08010f77
 8010a88:	08010f77 	.word	0x08010f77
 8010a8c:	08010d3f 	.word	0x08010d3f
 8010a90:	08010def 	.word	0x08010def
 8010a94:	08010e21 	.word	0x08010e21
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8010a98:	4b35      	ldr	r3, [pc, #212]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010a9a:	68da      	ldr	r2, [r3, #12]
 8010a9c:	4b34      	ldr	r3, [pc, #208]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010a9e:	7a9b      	ldrb	r3, [r3, #10]
 8010aa0:	1c59      	adds	r1, r3, #1
 8010aa2:	b2c8      	uxtb	r0, r1
 8010aa4:	4932      	ldr	r1, [pc, #200]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010aa6:	7288      	strb	r0, [r1, #10]
 8010aa8:	4413      	add	r3, r2
 8010aaa:	2200      	movs	r2, #0
 8010aac:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8010aae:	4b30      	ldr	r3, [pc, #192]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010ab0:	68da      	ldr	r2, [r3, #12]
 8010ab2:	4b2f      	ldr	r3, [pc, #188]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010ab4:	7a9b      	ldrb	r3, [r3, #10]
 8010ab6:	1c59      	adds	r1, r3, #1
 8010ab8:	b2c8      	uxtb	r0, r1
 8010aba:	492d      	ldr	r1, [pc, #180]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010abc:	7288      	strb	r0, [r1, #10]
 8010abe:	4413      	add	r3, r2
 8010ac0:	2206      	movs	r2, #6
 8010ac2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8010ac4:	4b2a      	ldr	r3, [pc, #168]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010ac6:	68da      	ldr	r2, [r3, #12]
 8010ac8:	4b29      	ldr	r3, [pc, #164]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010aca:	7a9b      	ldrb	r3, [r3, #10]
 8010acc:	1c59      	adds	r1, r3, #1
 8010ace:	b2c8      	uxtb	r0, r1
 8010ad0:	4927      	ldr	r1, [pc, #156]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010ad2:	7288      	strb	r0, [r1, #10]
 8010ad4:	4413      	add	r3, r2
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	701a      	strb	r2, [r3, #0]
                break;
 8010ada:	e257      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 8010adc:	4b24      	ldr	r3, [pc, #144]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010ade:	2201      	movs	r2, #1
 8010ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8010ae4:	e252      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 8010ae6:	4b23      	ldr	r3, [pc, #140]	; (8010b74 <LmhpComplianceOnMcpsIndication+0x354>)
 8010ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	f000 8245 	beq.w	8010f7a <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8010af0:	4b20      	ldr	r3, [pc, #128]	; (8010b74 <LmhpComplianceOnMcpsIndication+0x354>)
 8010af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010af4:	2101      	movs	r1, #1
 8010af6:	2002      	movs	r0, #2
 8010af8:	4798      	blx	r3
                }
                break;
 8010afa:	e23e      	b.n	8010f7a <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	689a      	ldr	r2, [r3, #8]
 8010b00:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010b04:	1c59      	adds	r1, r3, #1
 8010b06:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010b0a:	4413      	add	r3, r2
 8010b0c:	781a      	ldrb	r2, [r3, #0]
 8010b0e:	4b18      	ldr	r3, [pc, #96]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010b10:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 8010b14:	4b16      	ldr	r3, [pc, #88]	; (8010b70 <LmhpComplianceOnMcpsIndication+0x350>)
 8010b16:	2201      	movs	r2, #1
 8010b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 8010b1c:	e236      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 8010b1e:	2304      	movs	r3, #4
 8010b20:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	689a      	ldr	r2, [r3, #8]
 8010b26:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010b2a:	1c59      	adds	r1, r3, #1
 8010b2c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010b30:	4413      	add	r3, r2
 8010b32:	781b      	ldrb	r3, [r3, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	bf14      	ite	ne
 8010b38:	2301      	movne	r3, #1
 8010b3a:	2300      	moveq	r3, #0
 8010b3c:	b2db      	uxtb	r3, r3
 8010b3e:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 8010b40:	f107 0308 	add.w	r3, r7, #8
 8010b44:	4618      	mov	r0, r3
 8010b46:	f004 fafd 	bl	8015144 <LoRaMacMibSetRequestConfirm>
                break;
 8010b4a:	e21f      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	689a      	ldr	r2, [r3, #8]
 8010b50:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010b54:	1c59      	adds	r1, r3, #1
 8010b56:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010b5a:	4413      	add	r3, r2
 8010b5c:	781b      	ldrb	r3, [r3, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	bf14      	ite	ne
 8010b62:	2301      	movne	r3, #1
 8010b64:	2300      	moveq	r3, #0
 8010b66:	b2db      	uxtb	r3, r3
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f005 f965 	bl	8015e38 <LoRaMacTestSetDutyCycleOn>
                break;
 8010b6e:	e20d      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
 8010b70:	200007fc 	.word	0x200007fc
 8010b74:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8010b78:	4ba5      	ldr	r3, [pc, #660]	; (8010e10 <LmhpComplianceOnMcpsIndication+0x5f0>)
 8010b7a:	f107 0408 	add.w	r4, r7, #8
 8010b7e:	461d      	mov	r5, r3
 8010b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010b8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	689a      	ldr	r2, [r3, #8]
 8010b94:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010b98:	1c59      	adds	r1, r3, #1
 8010b9a:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010b9e:	4413      	add	r3, r2
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8010ba6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8010baa:	2b0a      	cmp	r3, #10
 8010bac:	f200 81e7 	bhi.w	8010f7e <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8010bb0:	4b98      	ldr	r3, [pc, #608]	; (8010e14 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	f000 81e1 	beq.w	8010f7e <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8010bbc:	4b95      	ldr	r3, [pc, #596]	; (8010e14 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	685a      	ldr	r2, [r3, #4]
 8010bc2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8010bc6:	009b      	lsls	r3, r3, #2
 8010bc8:	3390      	adds	r3, #144	; 0x90
 8010bca:	443b      	add	r3, r7
 8010bcc:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	4790      	blx	r2
                    }
                }
                break;
 8010bd4:	e1d3      	b.n	8010f7e <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	689a      	ldr	r2, [r3, #8]
 8010bda:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010bde:	1c59      	adds	r1, r3, #1
 8010be0:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010be4:	4413      	add	r3, r2
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 8010bec:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	d004      	beq.n	8010bfe <LmhpComplianceOnMcpsIndication+0x3de>
 8010bf4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010bf8:	2b02      	cmp	r3, #2
 8010bfa:	f040 81c2 	bne.w	8010f82 <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8010bfe:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010c02:	2b01      	cmp	r3, #1
 8010c04:	bf14      	ite	ne
 8010c06:	2301      	movne	r3, #1
 8010c08:	2300      	moveq	r3, #0
 8010c0a:	b2db      	uxtb	r3, r3
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	4b82      	ldr	r3, [pc, #520]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010c10:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8010c12:	4b80      	ldr	r3, [pc, #512]	; (8010e14 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	689b      	ldr	r3, [r3, #8]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	f000 81b2 	beq.w	8010f82 <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8010c1e:	4b7d      	ldr	r3, [pc, #500]	; (8010e14 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	689b      	ldr	r3, [r3, #8]
 8010c24:	4a7c      	ldr	r2, [pc, #496]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010c26:	7a12      	ldrb	r2, [r2, #8]
 8010c28:	4610      	mov	r0, r2
 8010c2a:	4798      	blx	r3
                    }
                }
                break;
 8010c2c:	e1a9      	b.n	8010f82 <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8010c2e:	4b7a      	ldr	r3, [pc, #488]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010c30:	68da      	ldr	r2, [r3, #12]
 8010c32:	4b79      	ldr	r3, [pc, #484]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010c34:	7a9b      	ldrb	r3, [r3, #10]
 8010c36:	1c59      	adds	r1, r3, #1
 8010c38:	b2c8      	uxtb	r0, r1
 8010c3a:	4977      	ldr	r1, [pc, #476]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010c3c:	7288      	strb	r0, [r1, #10]
 8010c3e:	4413      	add	r3, r2
 8010c40:	2208      	movs	r2, #8
 8010c42:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8010c44:	2301      	movs	r3, #1
 8010c46:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8010c4a:	e019      	b.n	8010c80 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	689a      	ldr	r2, [r3, #8]
 8010c50:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010c54:	1c59      	adds	r1, r3, #1
 8010c56:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010c5a:	4413      	add	r3, r2
 8010c5c:	781a      	ldrb	r2, [r3, #0]
 8010c5e:	4b6e      	ldr	r3, [pc, #440]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010c60:	68d9      	ldr	r1, [r3, #12]
 8010c62:	4b6d      	ldr	r3, [pc, #436]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010c64:	7a9b      	ldrb	r3, [r3, #10]
 8010c66:	1c58      	adds	r0, r3, #1
 8010c68:	b2c4      	uxtb	r4, r0
 8010c6a:	486b      	ldr	r0, [pc, #428]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010c6c:	7284      	strb	r4, [r0, #10]
 8010c6e:	440b      	add	r3, r1
 8010c70:	3201      	adds	r2, #1
 8010c72:	b2d2      	uxtb	r2, r2
 8010c74:	701a      	strb	r2, [r3, #0]
                     i++ )
 8010c76:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8010c7a:	3301      	adds	r3, #1
 8010c7c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8010c80:	4b65      	ldr	r3, [pc, #404]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010c82:	7a5a      	ldrb	r2, [r3, #9]
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	7b1b      	ldrb	r3, [r3, #12]
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	bf28      	it	cs
 8010c8c:	4613      	movcs	r3, r2
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d3d9      	bcc.n	8010c4c <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 8010c98:	e178      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8010c9a:	4b5f      	ldr	r3, [pc, #380]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010c9c:	68da      	ldr	r2, [r3, #12]
 8010c9e:	4b5e      	ldr	r3, [pc, #376]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010ca0:	7a9b      	ldrb	r3, [r3, #10]
 8010ca2:	1c59      	adds	r1, r3, #1
 8010ca4:	b2c8      	uxtb	r0, r1
 8010ca6:	495c      	ldr	r1, [pc, #368]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010ca8:	7288      	strb	r0, [r1, #10]
 8010caa:	4413      	add	r3, r2
 8010cac:	2209      	movs	r2, #9
 8010cae:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8010cb0:	4b59      	ldr	r3, [pc, #356]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010cb2:	8a18      	ldrh	r0, [r3, #16]
 8010cb4:	4b58      	ldr	r3, [pc, #352]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010cb6:	68da      	ldr	r2, [r3, #12]
 8010cb8:	4b57      	ldr	r3, [pc, #348]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010cba:	7a9b      	ldrb	r3, [r3, #10]
 8010cbc:	1c59      	adds	r1, r3, #1
 8010cbe:	b2cc      	uxtb	r4, r1
 8010cc0:	4955      	ldr	r1, [pc, #340]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010cc2:	728c      	strb	r4, [r1, #10]
 8010cc4:	4413      	add	r3, r2
 8010cc6:	b2c2      	uxtb	r2, r0
 8010cc8:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8010cca:	4b53      	ldr	r3, [pc, #332]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010ccc:	8a1b      	ldrh	r3, [r3, #16]
 8010cce:	0a1b      	lsrs	r3, r3, #8
 8010cd0:	b298      	uxth	r0, r3
 8010cd2:	4b51      	ldr	r3, [pc, #324]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010cd4:	68da      	ldr	r2, [r3, #12]
 8010cd6:	4b50      	ldr	r3, [pc, #320]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010cd8:	7a9b      	ldrb	r3, [r3, #10]
 8010cda:	1c59      	adds	r1, r3, #1
 8010cdc:	b2cc      	uxtb	r4, r1
 8010cde:	494e      	ldr	r1, [pc, #312]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010ce0:	728c      	strb	r4, [r1, #10]
 8010ce2:	4413      	add	r3, r2
 8010ce4:	b2c2      	uxtb	r2, r0
 8010ce6:	701a      	strb	r2, [r3, #0]
                break;
 8010ce8:	e150      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 8010cea:	4b4b      	ldr	r3, [pc, #300]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010cec:	2200      	movs	r2, #0
 8010cee:	821a      	strh	r2, [r3, #16]
                break;
 8010cf0:	e14c      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 8010cf2:	2305      	movs	r3, #5
 8010cf4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 8010cf8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f004 fdcb 	bl	8015898 <LoRaMacMlmeRequest>
                break;
 8010d02:	e143      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 8010d04:	4b45      	ldr	r3, [pc, #276]	; (8010e1c <LmhpComplianceOnMcpsIndication+0x5fc>)
 8010d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d08:	4798      	blx	r3
                break;
 8010d0a:	e13f      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	689a      	ldr	r2, [r3, #8]
 8010d10:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010d14:	1c59      	adds	r1, r3, #1
 8010d16:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010d1a:	4413      	add	r3, r2
 8010d1c:	781a      	ldrb	r2, [r3, #0]
 8010d1e:	4b3e      	ldr	r3, [pc, #248]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010d20:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8010d22:	4b3c      	ldr	r3, [pc, #240]	; (8010e14 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	68db      	ldr	r3, [r3, #12]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f000 812c 	beq.w	8010f86 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8010d2e:	4b39      	ldr	r3, [pc, #228]	; (8010e14 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	4a38      	ldr	r2, [pc, #224]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010d36:	7d52      	ldrb	r2, [r2, #21]
 8010d38:	4610      	mov	r0, r2
 8010d3a:	4798      	blx	r3
                }
                break;
 8010d3c:	e123      	b.n	8010f86 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	7b1b      	ldrb	r3, [r3, #12]
 8010d42:	2b07      	cmp	r3, #7
 8010d44:	f040 8121 	bne.w	8010f8a <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 8010d48:	2306      	movs	r3, #6
 8010d4a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	689a      	ldr	r2, [r3, #8]
 8010d52:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010d56:	4413      	add	r3, r2
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	b21a      	sxth	r2, r3
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6899      	ldr	r1, [r3, #8]
 8010d60:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010d64:	3301      	adds	r3, #1
 8010d66:	440b      	add	r3, r1
 8010d68:	781b      	ldrb	r3, [r3, #0]
 8010d6a:	021b      	lsls	r3, r3, #8
 8010d6c:	b21b      	sxth	r3, r3
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	b21b      	sxth	r3, r3
 8010d72:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 8010d74:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 8010d78:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010d7c:	3302      	adds	r3, #2
 8010d7e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	689a      	ldr	r2, [r3, #8]
 8010d86:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010d8a:	4413      	add	r3, r2
 8010d8c:	781b      	ldrb	r3, [r3, #0]
 8010d8e:	4619      	mov	r1, r3
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	689a      	ldr	r2, [r3, #8]
 8010d94:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010d98:	3301      	adds	r3, #1
 8010d9a:	4413      	add	r3, r2
 8010d9c:	781b      	ldrb	r3, [r3, #0]
 8010d9e:	021b      	lsls	r3, r3, #8
 8010da0:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6899      	ldr	r1, [r3, #8]
 8010da8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010dac:	3302      	adds	r3, #2
 8010dae:	440b      	add	r3, r1
 8010db0:	781b      	ldrb	r3, [r3, #0]
 8010db2:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8010db4:	4313      	orrs	r3, r2
 8010db6:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8010db8:	2364      	movs	r3, #100	; 0x64
 8010dba:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 8010dbe:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 8010dc0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010dc4:	3303      	adds	r3, #3
 8010dc6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	689a      	ldr	r2, [r3, #8]
 8010dce:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010dd2:	1c59      	adds	r1, r3, #1
 8010dd4:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010dd8:	4413      	add	r3, r2
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	b25b      	sxtb	r3, r3
 8010dde:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 8010de2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010de6:	4618      	mov	r0, r3
 8010de8:	f004 fd56 	bl	8015898 <LoRaMacMlmeRequest>
                }
                break;
 8010dec:	e0cd      	b.n	8010f8a <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8010dee:	233b      	movs	r3, #59	; 0x3b
 8010df0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 8010df4:	2300      	movs	r3, #0
 8010df6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010dfa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f004 f9a0 	bl	8015144 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 8010e04:	4b04      	ldr	r3, [pc, #16]	; (8010e18 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010e06:	2201      	movs	r2, #1
 8010e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8010e0c:	e0be      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
 8010e0e:	bf00      	nop
 8010e10:	0801fcf4 	.word	0x0801fcf4
 8010e14:	20000834 	.word	0x20000834
 8010e18:	200007fc 	.word	0x200007fc
 8010e1c:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 8010e20:	232a      	movs	r3, #42	; 0x2a
 8010e22:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 8010e24:	f107 0308 	add.w	r3, r7, #8
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f003 ffb3 	bl	8014d94 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 8010e36:	4b65      	ldr	r3, [pc, #404]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010e38:	68da      	ldr	r2, [r3, #12]
 8010e3a:	4b64      	ldr	r3, [pc, #400]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010e3c:	7a9b      	ldrb	r3, [r3, #10]
 8010e3e:	1c59      	adds	r1, r3, #1
 8010e40:	b2c8      	uxtb	r0, r1
 8010e42:	4962      	ldr	r1, [pc, #392]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010e44:	7288      	strb	r0, [r1, #10]
 8010e46:	4413      	add	r3, r2
 8010e48:	227f      	movs	r2, #127	; 0x7f
 8010e4a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8010e4c:	4b60      	ldr	r3, [pc, #384]	; (8010fd0 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8010e4e:	681a      	ldr	r2, [r3, #0]
 8010e50:	4b5e      	ldr	r3, [pc, #376]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010e52:	68d9      	ldr	r1, [r3, #12]
 8010e54:	4b5d      	ldr	r3, [pc, #372]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010e56:	7a9b      	ldrb	r3, [r3, #10]
 8010e58:	1c58      	adds	r0, r3, #1
 8010e5a:	b2c4      	uxtb	r4, r0
 8010e5c:	485b      	ldr	r0, [pc, #364]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010e5e:	7284      	strb	r4, [r0, #10]
 8010e60:	440b      	add	r3, r1
 8010e62:	78d2      	ldrb	r2, [r2, #3]
 8010e64:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8010e66:	4b5a      	ldr	r3, [pc, #360]	; (8010fd0 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8010e68:	681a      	ldr	r2, [r3, #0]
 8010e6a:	4b58      	ldr	r3, [pc, #352]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010e6c:	68d9      	ldr	r1, [r3, #12]
 8010e6e:	4b57      	ldr	r3, [pc, #348]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010e70:	7a9b      	ldrb	r3, [r3, #10]
 8010e72:	1c58      	adds	r0, r3, #1
 8010e74:	b2c4      	uxtb	r4, r0
 8010e76:	4855      	ldr	r0, [pc, #340]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010e78:	7284      	strb	r4, [r0, #10]
 8010e7a:	440b      	add	r3, r1
 8010e7c:	7892      	ldrb	r2, [r2, #2]
 8010e7e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8010e80:	4b53      	ldr	r3, [pc, #332]	; (8010fd0 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	4b51      	ldr	r3, [pc, #324]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010e86:	68d9      	ldr	r1, [r3, #12]
 8010e88:	4b50      	ldr	r3, [pc, #320]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010e8a:	7a9b      	ldrb	r3, [r3, #10]
 8010e8c:	1c58      	adds	r0, r3, #1
 8010e8e:	b2c4      	uxtb	r4, r0
 8010e90:	484e      	ldr	r0, [pc, #312]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010e92:	7284      	strb	r4, [r0, #10]
 8010e94:	440b      	add	r3, r1
 8010e96:	7852      	ldrb	r2, [r2, #1]
 8010e98:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8010e9a:	4b4d      	ldr	r3, [pc, #308]	; (8010fd0 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8010e9c:	681a      	ldr	r2, [r3, #0]
 8010e9e:	4b4b      	ldr	r3, [pc, #300]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ea0:	68d9      	ldr	r1, [r3, #12]
 8010ea2:	4b4a      	ldr	r3, [pc, #296]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ea4:	7a9b      	ldrb	r3, [r3, #10]
 8010ea6:	1c58      	adds	r0, r3, #1
 8010ea8:	b2c4      	uxtb	r4, r0
 8010eaa:	4848      	ldr	r0, [pc, #288]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010eac:	7284      	strb	r4, [r0, #10]
 8010eae:	440b      	add	r3, r1
 8010eb0:	7812      	ldrb	r2, [r2, #0]
 8010eb2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8010eb4:	4b45      	ldr	r3, [pc, #276]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010eb6:	68da      	ldr	r2, [r3, #12]
 8010eb8:	4b44      	ldr	r3, [pc, #272]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010eba:	7a9b      	ldrb	r3, [r3, #10]
 8010ebc:	1c59      	adds	r1, r3, #1
 8010ebe:	b2c8      	uxtb	r0, r1
 8010ec0:	4942      	ldr	r1, [pc, #264]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ec2:	7288      	strb	r0, [r1, #10]
 8010ec4:	4413      	add	r3, r2
 8010ec6:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8010eca:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8010ecc:	4b3f      	ldr	r3, [pc, #252]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ece:	68da      	ldr	r2, [r3, #12]
 8010ed0:	4b3e      	ldr	r3, [pc, #248]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ed2:	7a9b      	ldrb	r3, [r3, #10]
 8010ed4:	1c59      	adds	r1, r3, #1
 8010ed6:	b2c8      	uxtb	r0, r1
 8010ed8:	493c      	ldr	r1, [pc, #240]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010eda:	7288      	strb	r0, [r1, #10]
 8010edc:	4413      	add	r3, r2
 8010ede:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8010ee2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8010ee4:	4b39      	ldr	r3, [pc, #228]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ee6:	68da      	ldr	r2, [r3, #12]
 8010ee8:	4b38      	ldr	r3, [pc, #224]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010eea:	7a9b      	ldrb	r3, [r3, #10]
 8010eec:	1c59      	adds	r1, r3, #1
 8010eee:	b2c8      	uxtb	r0, r1
 8010ef0:	4936      	ldr	r1, [pc, #216]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ef2:	7288      	strb	r0, [r1, #10]
 8010ef4:	4413      	add	r3, r2
 8010ef6:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8010efa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8010efc:	4b33      	ldr	r3, [pc, #204]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010efe:	68da      	ldr	r2, [r3, #12]
 8010f00:	4b32      	ldr	r3, [pc, #200]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010f02:	7a9b      	ldrb	r3, [r3, #10]
 8010f04:	1c59      	adds	r1, r3, #1
 8010f06:	b2c8      	uxtb	r0, r1
 8010f08:	4930      	ldr	r1, [pc, #192]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010f0a:	7288      	strb	r0, [r1, #10]
 8010f0c:	4413      	add	r3, r2
 8010f0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010f12:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8010f14:	4b2d      	ldr	r3, [pc, #180]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010f16:	68da      	ldr	r2, [r3, #12]
 8010f18:	4b2c      	ldr	r3, [pc, #176]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010f1a:	7a9b      	ldrb	r3, [r3, #10]
 8010f1c:	1c59      	adds	r1, r3, #1
 8010f1e:	b2c8      	uxtb	r0, r1
 8010f20:	492a      	ldr	r1, [pc, #168]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010f22:	7288      	strb	r0, [r1, #10]
 8010f24:	4413      	add	r3, r2
 8010f26:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010f2a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8010f2c:	4b27      	ldr	r3, [pc, #156]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010f2e:	68da      	ldr	r2, [r3, #12]
 8010f30:	4b26      	ldr	r3, [pc, #152]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010f32:	7a9b      	ldrb	r3, [r3, #10]
 8010f34:	1c59      	adds	r1, r3, #1
 8010f36:	b2c8      	uxtb	r0, r1
 8010f38:	4924      	ldr	r1, [pc, #144]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010f3a:	7288      	strb	r0, [r1, #10]
 8010f3c:	4413      	add	r3, r2
 8010f3e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010f42:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8010f44:	4b21      	ldr	r3, [pc, #132]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010f46:	68da      	ldr	r2, [r3, #12]
 8010f48:	4b20      	ldr	r3, [pc, #128]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010f4a:	7a9b      	ldrb	r3, [r3, #10]
 8010f4c:	1c59      	adds	r1, r3, #1
 8010f4e:	b2c8      	uxtb	r0, r1
 8010f50:	491e      	ldr	r1, [pc, #120]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010f52:	7288      	strb	r0, [r1, #10]
 8010f54:	4413      	add	r3, r2
 8010f56:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8010f5a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8010f5c:	4b1b      	ldr	r3, [pc, #108]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010f5e:	68da      	ldr	r2, [r3, #12]
 8010f60:	4b1a      	ldr	r3, [pc, #104]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010f62:	7a9b      	ldrb	r3, [r3, #10]
 8010f64:	1c59      	adds	r1, r3, #1
 8010f66:	b2c8      	uxtb	r0, r1
 8010f68:	4918      	ldr	r1, [pc, #96]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010f6a:	7288      	strb	r0, [r1, #10]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8010f72:	701a      	strb	r2, [r3, #0]
                break;
 8010f74:	e00a      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 8010f76:	bf00      	nop
 8010f78:	e008      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010f7a:	bf00      	nop
 8010f7c:	e006      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010f7e:	bf00      	nop
 8010f80:	e004      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010f82:	bf00      	nop
 8010f84:	e002      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010f86:	bf00      	nop
 8010f88:	e000      	b.n	8010f8c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010f8a:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 8010f8c:	4b0f      	ldr	r3, [pc, #60]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010f8e:	7a9b      	ldrb	r3, [r3, #10]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d00c      	beq.n	8010fae <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 8010f94:	4b0f      	ldr	r3, [pc, #60]	; (8010fd4 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8010f96:	7a5b      	ldrb	r3, [r3, #9]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d114      	bne.n	8010fc6 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 8010f9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010fa0:	480c      	ldr	r0, [pc, #48]	; (8010fd4 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8010fa2:	f00d fde7 	bl	801eb74 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 8010fa6:	480b      	ldr	r0, [pc, #44]	; (8010fd4 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8010fa8:	f00d fd06 	bl	801e9b8 <UTIL_TIMER_Start>
 8010fac:	e00b      	b.n	8010fc6 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 8010fae:	4809      	ldr	r0, [pc, #36]	; (8010fd4 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8010fb0:	f00d fd70 	bl	801ea94 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8010fb4:	4b05      	ldr	r3, [pc, #20]	; (8010fcc <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	705a      	strb	r2, [r3, #1]
 8010fba:	e004      	b.n	8010fc6 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8010fbc:	bf00      	nop
 8010fbe:	e002      	b.n	8010fc6 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8010fc0:	bf00      	nop
 8010fc2:	e000      	b.n	8010fc6 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8010fc4:	bf00      	nop
    }
}
 8010fc6:	3790      	adds	r7, #144	; 0x90
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bdb0      	pop	{r4, r5, r7, pc}
 8010fcc:	200007fc 	.word	0x200007fc
 8010fd0:	20000834 	.word	0x20000834
 8010fd4:	20000838 	.word	0x20000838

08010fd8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8010fd8:	b480      	push	{r7}
 8010fda:	b083      	sub	sp, #12
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 8010fe0:	bf00      	nop
    }
}
 8010fe2:	bf00      	nop
 8010fe4:	370c      	adds	r7, #12
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bc80      	pop	{r7}
 8010fea:	4770      	bx	lr

08010fec <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 8010fec:	b480      	push	{r7}
 8010fee:	b083      	sub	sp, #12
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010ff4:	4b05      	ldr	r3, [pc, #20]	; (801100c <LmhpComplianceOnMlmeIndication+0x20>)
 8010ff6:	781b      	ldrb	r3, [r3, #0]
 8010ff8:	f083 0301 	eor.w	r3, r3, #1
 8010ffc:	b2db      	uxtb	r3, r3
 8010ffe:	2b00      	cmp	r3, #0
    {
        return;
 8011000:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8011002:	370c      	adds	r7, #12
 8011004:	46bd      	mov	sp, r7
 8011006:	bc80      	pop	{r7}
 8011008:	4770      	bx	lr
 801100a:	bf00      	nop
 801100c:	200007fc 	.word	0x200007fc

08011010 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 8011018:	4b08      	ldr	r3, [pc, #32]	; (801103c <OnProcessTimer+0x2c>)
 801101a:	7a9b      	ldrb	r3, [r3, #10]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d002      	beq.n	8011026 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 8011020:	4b06      	ldr	r3, [pc, #24]	; (801103c <OnProcessTimer+0x2c>)
 8011022:	2201      	movs	r2, #1
 8011024:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 8011026:	4b06      	ldr	r3, [pc, #24]	; (8011040 <OnProcessTimer+0x30>)
 8011028:	695b      	ldr	r3, [r3, #20]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d002      	beq.n	8011034 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 801102e:	4b04      	ldr	r3, [pc, #16]	; (8011040 <OnProcessTimer+0x30>)
 8011030:	695b      	ldr	r3, [r3, #20]
 8011032:	4798      	blx	r3
    }
}
 8011034:	bf00      	nop
 8011036:	3708      	adds	r7, #8
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	200007fc 	.word	0x200007fc
 8011040:	200000d8 	.word	0x200000d8

08011044 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 8011044:	b480      	push	{r7}
 8011046:	b083      	sub	sp, #12
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 801104c:	2300      	movs	r3, #0
}
 801104e:	4618      	mov	r0, r3
 8011050:	370c      	adds	r7, #12
 8011052:	46bd      	mov	sp, r7
 8011054:	bc80      	pop	{r7}
 8011056:	4770      	bx	lr

08011058 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8011058:	b480      	push	{r7}
 801105a:	b083      	sub	sp, #12
 801105c:	af00      	add	r7, sp, #0
 801105e:	4603      	mov	r3, r0
 8011060:	6039      	str	r1, [r7, #0]
 8011062:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 8011064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8011068:	4618      	mov	r0, r3
 801106a:	370c      	adds	r7, #12
 801106c:	46bd      	mov	sp, r7
 801106e:	bc80      	pop	{r7}
 8011070:	4770      	bx	lr
	...

08011074 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 8011074:	b590      	push	{r4, r7, lr}
 8011076:	b083      	sub	sp, #12
 8011078:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 801107a:	f00d fe25 	bl	801ecc8 <UTIL_TIMER_GetCurrentTime>
 801107e:	4603      	mov	r3, r0
 8011080:	4a0f      	ldr	r2, [pc, #60]	; (80110c0 <OnRadioTxDone+0x4c>)
 8011082:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8011084:	4c0f      	ldr	r4, [pc, #60]	; (80110c4 <OnRadioTxDone+0x50>)
 8011086:	463b      	mov	r3, r7
 8011088:	4618      	mov	r0, r3
 801108a:	f00c ff9b 	bl	801dfc4 <SysTimeGet>
 801108e:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8011092:	463a      	mov	r2, r7
 8011094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011098:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 801109c:	4a0a      	ldr	r2, [pc, #40]	; (80110c8 <OnRadioTxDone+0x54>)
 801109e:	7813      	ldrb	r3, [r2, #0]
 80110a0:	f043 0320 	orr.w	r3, r3, #32
 80110a4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 80110a6:	f003 fa71 	bl	801458c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80110aa:	4b08      	ldr	r3, [pc, #32]	; (80110cc <OnRadioTxDone+0x58>)
 80110ac:	2201      	movs	r2, #1
 80110ae:	2100      	movs	r1, #0
 80110b0:	2002      	movs	r0, #2
 80110b2:	f00d fef9 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
}
 80110b6:	bf00      	nop
 80110b8:	370c      	adds	r7, #12
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd90      	pop	{r4, r7, pc}
 80110be:	bf00      	nop
 80110c0:	20001998 	.word	0x20001998
 80110c4:	20000850 	.word	0x20000850
 80110c8:	20001994 	.word	0x20001994
 80110cc:	0801fd20 	.word	0x0801fd20

080110d0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b084      	sub	sp, #16
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	60f8      	str	r0, [r7, #12]
 80110d8:	4608      	mov	r0, r1
 80110da:	4611      	mov	r1, r2
 80110dc:	461a      	mov	r2, r3
 80110de:	4603      	mov	r3, r0
 80110e0:	817b      	strh	r3, [r7, #10]
 80110e2:	460b      	mov	r3, r1
 80110e4:	813b      	strh	r3, [r7, #8]
 80110e6:	4613      	mov	r3, r2
 80110e8:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80110ea:	f00d fded 	bl	801ecc8 <UTIL_TIMER_GetCurrentTime>
 80110ee:	4603      	mov	r3, r0
 80110f0:	4a11      	ldr	r2, [pc, #68]	; (8011138 <OnRadioRxDone+0x68>)
 80110f2:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 80110f4:	4a10      	ldr	r2, [pc, #64]	; (8011138 <OnRadioRxDone+0x68>)
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 80110fa:	4a0f      	ldr	r2, [pc, #60]	; (8011138 <OnRadioRxDone+0x68>)
 80110fc:	897b      	ldrh	r3, [r7, #10]
 80110fe:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8011100:	4a0d      	ldr	r2, [pc, #52]	; (8011138 <OnRadioRxDone+0x68>)
 8011102:	893b      	ldrh	r3, [r7, #8]
 8011104:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8011106:	4a0c      	ldr	r2, [pc, #48]	; (8011138 <OnRadioRxDone+0x68>)
 8011108:	79fb      	ldrb	r3, [r7, #7]
 801110a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 801110c:	4a0b      	ldr	r2, [pc, #44]	; (801113c <OnRadioRxDone+0x6c>)
 801110e:	7813      	ldrb	r3, [r2, #0]
 8011110:	f043 0310 	orr.w	r3, r3, #16
 8011114:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8011116:	4a09      	ldr	r2, [pc, #36]	; (801113c <OnRadioRxDone+0x6c>)
 8011118:	7813      	ldrb	r3, [r2, #0]
 801111a:	f043 0301 	orr.w	r3, r3, #1
 801111e:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 8011120:	f003 fa34 	bl	801458c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8011124:	4b06      	ldr	r3, [pc, #24]	; (8011140 <OnRadioRxDone+0x70>)
 8011126:	2201      	movs	r2, #1
 8011128:	2100      	movs	r1, #0
 801112a:	2002      	movs	r0, #2
 801112c:	f00d febc 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
}
 8011130:	bf00      	nop
 8011132:	3710      	adds	r7, #16
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}
 8011138:	2000199c 	.word	0x2000199c
 801113c:	20001994 	.word	0x20001994
 8011140:	0801fd30 	.word	0x0801fd30

08011144 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8011144:	b580      	push	{r7, lr}
 8011146:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8011148:	4a07      	ldr	r2, [pc, #28]	; (8011168 <OnRadioTxTimeout+0x24>)
 801114a:	7813      	ldrb	r3, [r2, #0]
 801114c:	f043 0308 	orr.w	r3, r3, #8
 8011150:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8011152:	f003 fa1b 	bl	801458c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8011156:	4b05      	ldr	r3, [pc, #20]	; (801116c <OnRadioTxTimeout+0x28>)
 8011158:	2201      	movs	r2, #1
 801115a:	2100      	movs	r1, #0
 801115c:	2002      	movs	r0, #2
 801115e:	f00d fea3 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
}
 8011162:	bf00      	nop
 8011164:	bd80      	pop	{r7, pc}
 8011166:	bf00      	nop
 8011168:	20001994 	.word	0x20001994
 801116c:	0801fd40 	.word	0x0801fd40

08011170 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8011170:	b580      	push	{r7, lr}
 8011172:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8011174:	4a04      	ldr	r2, [pc, #16]	; (8011188 <OnRadioRxError+0x18>)
 8011176:	7813      	ldrb	r3, [r2, #0]
 8011178:	f043 0304 	orr.w	r3, r3, #4
 801117c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 801117e:	f003 fa05 	bl	801458c <OnMacProcessNotify>
}
 8011182:	bf00      	nop
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	20001994 	.word	0x20001994

0801118c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 801118c:	b580      	push	{r7, lr}
 801118e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8011190:	4a07      	ldr	r2, [pc, #28]	; (80111b0 <OnRadioRxTimeout+0x24>)
 8011192:	7813      	ldrb	r3, [r2, #0]
 8011194:	f043 0302 	orr.w	r3, r3, #2
 8011198:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 801119a:	f003 f9f7 	bl	801458c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 801119e:	4b05      	ldr	r3, [pc, #20]	; (80111b4 <OnRadioRxTimeout+0x28>)
 80111a0:	2201      	movs	r2, #1
 80111a2:	2100      	movs	r1, #0
 80111a4:	2002      	movs	r0, #2
 80111a6:	f00d fe7f 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
}
 80111aa:	bf00      	nop
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	20001994 	.word	0x20001994
 80111b4:	0801fd50 	.word	0x0801fd50

080111b8 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 80111b8:	b480      	push	{r7}
 80111ba:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80111bc:	4b08      	ldr	r3, [pc, #32]	; (80111e0 <UpdateRxSlotIdleState+0x28>)
 80111be:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80111c2:	2b02      	cmp	r3, #2
 80111c4:	d004      	beq.n	80111d0 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80111c6:	4b07      	ldr	r3, [pc, #28]	; (80111e4 <UpdateRxSlotIdleState+0x2c>)
 80111c8:	2206      	movs	r2, #6
 80111ca:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 80111ce:	e003      	b.n	80111d8 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80111d0:	4b04      	ldr	r3, [pc, #16]	; (80111e4 <UpdateRxSlotIdleState+0x2c>)
 80111d2:	2202      	movs	r2, #2
 80111d4:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 80111d8:	bf00      	nop
 80111da:	46bd      	mov	sp, r7
 80111dc:	bc80      	pop	{r7}
 80111de:	4770      	bx	lr
 80111e0:	20000d6c 	.word	0x20000d6c
 80111e4:	20000850 	.word	0x20000850

080111e8 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b092      	sub	sp, #72	; 0x48
 80111ec:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80111ee:	4b4a      	ldr	r3, [pc, #296]	; (8011318 <ProcessRadioTxDone+0x130>)
 80111f0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80111f4:	2b02      	cmp	r3, #2
 80111f6:	d002      	beq.n	80111fe <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 80111f8:	4b48      	ldr	r3, [pc, #288]	; (801131c <ProcessRadioTxDone+0x134>)
 80111fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111fc:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111fe:	f3ef 8310 	mrs	r3, PRIMASK
 8011202:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8011204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 8011206:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8011208:	b672      	cpsid	i
}
 801120a:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 801120c:	f00d fd5c 	bl	801ecc8 <UTIL_TIMER_GetCurrentTime>
 8011210:	4602      	mov	r2, r0
 8011212:	4b43      	ldr	r3, [pc, #268]	; (8011320 <ProcessRadioTxDone+0x138>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	1ad3      	subs	r3, r2, r3
 8011218:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 801121a:	4b42      	ldr	r3, [pc, #264]	; (8011324 <ProcessRadioTxDone+0x13c>)
 801121c:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 8011220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011222:	1ad3      	subs	r3, r2, r3
 8011224:	4619      	mov	r1, r3
 8011226:	4840      	ldr	r0, [pc, #256]	; (8011328 <ProcessRadioTxDone+0x140>)
 8011228:	f00d fca4 	bl	801eb74 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 801122c:	483e      	ldr	r0, [pc, #248]	; (8011328 <ProcessRadioTxDone+0x140>)
 801122e:	f00d fbc3 	bl	801e9b8 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8011232:	4b3c      	ldr	r3, [pc, #240]	; (8011324 <ProcessRadioTxDone+0x13c>)
 8011234:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8011238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801123a:	1ad3      	subs	r3, r2, r3
 801123c:	4619      	mov	r1, r3
 801123e:	483b      	ldr	r0, [pc, #236]	; (801132c <ProcessRadioTxDone+0x144>)
 8011240:	f00d fc98 	bl	801eb74 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8011244:	4839      	ldr	r0, [pc, #228]	; (801132c <ProcessRadioTxDone+0x144>)
 8011246:	f00d fbb7 	bl	801e9b8 <UTIL_TIMER_Start>
 801124a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801124c:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801124e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011250:	f383 8810 	msr	PRIMASK, r3
}
 8011254:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 8011256:	4b33      	ldr	r3, [pc, #204]	; (8011324 <ProcessRadioTxDone+0x13c>)
 8011258:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 801125c:	2b00      	cmp	r3, #0
 801125e:	d01a      	beq.n	8011296 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8011260:	2315      	movs	r3, #21
 8011262:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011266:	4b2c      	ldr	r3, [pc, #176]	; (8011318 <ProcessRadioTxDone+0x130>)
 8011268:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801126c:	f107 0220 	add.w	r2, r7, #32
 8011270:	4611      	mov	r1, r2
 8011272:	4618      	mov	r0, r3
 8011274:	f006 febb 	bl	8017fee <RegionGetPhyParam>
 8011278:	4603      	mov	r3, r0
 801127a:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 801127c:	4b29      	ldr	r3, [pc, #164]	; (8011324 <ProcessRadioTxDone+0x13c>)
 801127e:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8011282:	69fb      	ldr	r3, [r7, #28]
 8011284:	4413      	add	r3, r2
 8011286:	4619      	mov	r1, r3
 8011288:	4829      	ldr	r0, [pc, #164]	; (8011330 <ProcessRadioTxDone+0x148>)
 801128a:	f00d fc73 	bl	801eb74 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 801128e:	4828      	ldr	r0, [pc, #160]	; (8011330 <ProcessRadioTxDone+0x148>)
 8011290:	f00d fb92 	bl	801e9b8 <UTIL_TIMER_Start>
 8011294:	e003      	b.n	801129e <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011296:	4b23      	ldr	r3, [pc, #140]	; (8011324 <ProcessRadioTxDone+0x13c>)
 8011298:	2200      	movs	r2, #0
 801129a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 801129e:	4b20      	ldr	r3, [pc, #128]	; (8011320 <ProcessRadioTxDone+0x138>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	4a1d      	ldr	r2, [pc, #116]	; (8011318 <ProcessRadioTxDone+0x130>)
 80112a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 80112a6:	4b1f      	ldr	r3, [pc, #124]	; (8011324 <ProcessRadioTxDone+0x13c>)
 80112a8:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 80112ac:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80112ae:	4b1c      	ldr	r3, [pc, #112]	; (8011320 <ProcessRadioTxDone+0x138>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80112b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80112b8:	4618      	mov	r0, r3
 80112ba:	f00c febb 	bl	801e034 <SysTimeGetMcuTime>
 80112be:	4638      	mov	r0, r7
 80112c0:	4b15      	ldr	r3, [pc, #84]	; (8011318 <ProcessRadioTxDone+0x130>)
 80112c2:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 80112c6:	9200      	str	r2, [sp, #0]
 80112c8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80112cc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80112d0:	ca06      	ldmia	r2, {r1, r2}
 80112d2:	f00c fe10 	bl	801def6 <SysTimeSub>
 80112d6:	f107 0314 	add.w	r3, r7, #20
 80112da:	463a      	mov	r2, r7
 80112dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80112e0:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80112e4:	4b0f      	ldr	r3, [pc, #60]	; (8011324 <ProcessRadioTxDone+0x13c>)
 80112e6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80112ea:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 80112ec:	2301      	movs	r3, #1
 80112ee:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80112f0:	4b09      	ldr	r3, [pc, #36]	; (8011318 <ProcessRadioTxDone+0x130>)
 80112f2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d101      	bne.n	80112fe <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 80112fa:	2300      	movs	r3, #0
 80112fc:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80112fe:	4b06      	ldr	r3, [pc, #24]	; (8011318 <ProcessRadioTxDone+0x130>)
 8011300:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011304:	f107 0208 	add.w	r2, r7, #8
 8011308:	4611      	mov	r1, r2
 801130a:	4618      	mov	r0, r3
 801130c:	f006 fe87 	bl	801801e <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 8011310:	bf00      	nop
 8011312:	3740      	adds	r7, #64	; 0x40
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}
 8011318:	20000d6c 	.word	0x20000d6c
 801131c:	08020428 	.word	0x08020428
 8011320:	20001998 	.word	0x20001998
 8011324:	20000850 	.word	0x20000850
 8011328:	20000bd0 	.word	0x20000bd0
 801132c:	20000be8 	.word	0x20000be8
 8011330:	20000c50 	.word	0x20000c50

08011334 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8011334:	b580      	push	{r7, lr}
 8011336:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8011338:	4b10      	ldr	r3, [pc, #64]	; (801137c <PrepareRxDoneAbort+0x48>)
 801133a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801133e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011342:	4a0e      	ldr	r2, [pc, #56]	; (801137c <PrepareRxDoneAbort+0x48>)
 8011344:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8011348:	4b0c      	ldr	r3, [pc, #48]	; (801137c <PrepareRxDoneAbort+0x48>)
 801134a:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 801134e:	2b00      	cmp	r3, #0
 8011350:	d002      	beq.n	8011358 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 8011352:	2000      	movs	r0, #0
 8011354:	f001 f9fa 	bl	801274c <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8011358:	4a08      	ldr	r2, [pc, #32]	; (801137c <PrepareRxDoneAbort+0x48>)
 801135a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801135e:	f043 0302 	orr.w	r3, r3, #2
 8011362:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011366:	4a05      	ldr	r2, [pc, #20]	; (801137c <PrepareRxDoneAbort+0x48>)
 8011368:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801136c:	f043 0310 	orr.w	r3, r3, #16
 8011370:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 8011374:	f7ff ff20 	bl	80111b8 <UpdateRxSlotIdleState>
}
 8011378:	bf00      	nop
 801137a:	bd80      	pop	{r7, pc}
 801137c:	20000850 	.word	0x20000850

08011380 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8011380:	b590      	push	{r4, r7, lr}
 8011382:	b0ab      	sub	sp, #172	; 0xac
 8011384:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011386:	2312      	movs	r3, #18
 8011388:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 801138c:	4b81      	ldr	r3, [pc, #516]	; (8011594 <ProcessRadioRxDone+0x214>)
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 8011394:	4b7f      	ldr	r3, [pc, #508]	; (8011594 <ProcessRadioRxDone+0x214>)
 8011396:	891b      	ldrh	r3, [r3, #8]
 8011398:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 801139c:	4b7d      	ldr	r3, [pc, #500]	; (8011594 <ProcessRadioRxDone+0x214>)
 801139e:	895b      	ldrh	r3, [r3, #10]
 80113a0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 80113a4:	4b7b      	ldr	r3, [pc, #492]	; (8011594 <ProcessRadioRxDone+0x214>)
 80113a6:	7b1b      	ldrb	r3, [r3, #12]
 80113a8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 80113ac:	2300      	movs	r3, #0
 80113ae:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 80113b2:	2300      	movs	r3, #0
 80113b4:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80113b6:	4b78      	ldr	r3, [pc, #480]	; (8011598 <ProcessRadioRxDone+0x218>)
 80113b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80113bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 80113c0:	2300      	movs	r3, #0
 80113c2:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 80113c6:	2301      	movs	r3, #1
 80113c8:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 80113cc:	2301      	movs	r3, #1
 80113ce:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 80113d2:	4a72      	ldr	r2, [pc, #456]	; (801159c <ProcessRadioRxDone+0x21c>)
 80113d4:	7813      	ldrb	r3, [r2, #0]
 80113d6:	f36f 0300 	bfc	r3, #0, #1
 80113da:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 80113dc:	4b70      	ldr	r3, [pc, #448]	; (80115a0 <ProcessRadioRxDone+0x220>)
 80113de:	2200      	movs	r2, #0
 80113e0:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 80113e4:	4a6e      	ldr	r2, [pc, #440]	; (80115a0 <ProcessRadioRxDone+0x220>)
 80113e6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80113ea:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 80113ee:	4a6c      	ldr	r2, [pc, #432]	; (80115a0 <ProcessRadioRxDone+0x220>)
 80113f0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80113f4:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80113f8:	4b69      	ldr	r3, [pc, #420]	; (80115a0 <ProcessRadioRxDone+0x220>)
 80113fa:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 80113fe:	4b68      	ldr	r3, [pc, #416]	; (80115a0 <ProcessRadioRxDone+0x220>)
 8011400:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 8011404:	4b66      	ldr	r3, [pc, #408]	; (80115a0 <ProcessRadioRxDone+0x220>)
 8011406:	2200      	movs	r2, #0
 8011408:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 801140c:	4b64      	ldr	r3, [pc, #400]	; (80115a0 <ProcessRadioRxDone+0x220>)
 801140e:	2200      	movs	r2, #0
 8011410:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8011414:	4b62      	ldr	r3, [pc, #392]	; (80115a0 <ProcessRadioRxDone+0x220>)
 8011416:	2200      	movs	r2, #0
 8011418:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 801141c:	4b60      	ldr	r3, [pc, #384]	; (80115a0 <ProcessRadioRxDone+0x220>)
 801141e:	2200      	movs	r2, #0
 8011420:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8011424:	4b5e      	ldr	r3, [pc, #376]	; (80115a0 <ProcessRadioRxDone+0x220>)
 8011426:	2200      	movs	r2, #0
 8011428:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 801142c:	4b5c      	ldr	r3, [pc, #368]	; (80115a0 <ProcessRadioRxDone+0x220>)
 801142e:	2200      	movs	r2, #0
 8011430:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 8011434:	4b5a      	ldr	r3, [pc, #360]	; (80115a0 <ProcessRadioRxDone+0x220>)
 8011436:	2200      	movs	r2, #0
 8011438:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 801143c:	4b58      	ldr	r3, [pc, #352]	; (80115a0 <ProcessRadioRxDone+0x220>)
 801143e:	2200      	movs	r2, #0
 8011440:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8011444:	4b56      	ldr	r3, [pc, #344]	; (80115a0 <ProcessRadioRxDone+0x220>)
 8011446:	2200      	movs	r2, #0
 8011448:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 801144c:	4b54      	ldr	r3, [pc, #336]	; (80115a0 <ProcessRadioRxDone+0x220>)
 801144e:	2200      	movs	r2, #0
 8011450:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8011454:	4b52      	ldr	r3, [pc, #328]	; (80115a0 <ProcessRadioRxDone+0x220>)
 8011456:	2200      	movs	r2, #0
 8011458:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 801145c:	4b50      	ldr	r3, [pc, #320]	; (80115a0 <ProcessRadioRxDone+0x220>)
 801145e:	2200      	movs	r2, #0
 8011460:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8011464:	4b4f      	ldr	r3, [pc, #316]	; (80115a4 <ProcessRadioRxDone+0x224>)
 8011466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011468:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801146a:	4b4d      	ldr	r3, [pc, #308]	; (80115a0 <ProcessRadioRxDone+0x220>)
 801146c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011470:	2b00      	cmp	r3, #0
 8011472:	d102      	bne.n	801147a <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 8011474:	484c      	ldr	r0, [pc, #304]	; (80115a8 <ProcessRadioRxDone+0x228>)
 8011476:	f00d fb0d 	bl	801ea94 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 801147a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801147e:	4619      	mov	r1, r3
 8011480:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8011484:	f004 fe28 	bl	80160d8 <LoRaMacClassBRxBeacon>
 8011488:	4603      	mov	r3, r0
 801148a:	2b00      	cmp	r3, #0
 801148c:	d00b      	beq.n	80114a6 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 801148e:	4a44      	ldr	r2, [pc, #272]	; (80115a0 <ProcessRadioRxDone+0x220>)
 8011490:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8011494:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8011498:	4a41      	ldr	r2, [pc, #260]	; (80115a0 <ProcessRadioRxDone+0x220>)
 801149a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801149e:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 80114a2:	f000 bc75 	b.w	8011d90 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80114a6:	4b3c      	ldr	r3, [pc, #240]	; (8011598 <ProcessRadioRxDone+0x218>)
 80114a8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	d11e      	bne.n	80114ee <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80114b0:	f004 fe25 	bl	80160fe <LoRaMacClassBIsPingExpected>
 80114b4:	4603      	mov	r3, r0
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d00a      	beq.n	80114d0 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80114ba:	2000      	movs	r0, #0
 80114bc:	f004 fdd6 	bl	801606c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80114c0:	2000      	movs	r0, #0
 80114c2:	f004 fdf7 	bl	80160b4 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80114c6:	4b36      	ldr	r3, [pc, #216]	; (80115a0 <ProcessRadioRxDone+0x220>)
 80114c8:	2204      	movs	r2, #4
 80114ca:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 80114ce:	e00e      	b.n	80114ee <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80114d0:	f004 fe1c 	bl	801610c <LoRaMacClassBIsMulticastExpected>
 80114d4:	4603      	mov	r3, r0
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d009      	beq.n	80114ee <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80114da:	2000      	movs	r0, #0
 80114dc:	f004 fdd0 	bl	8016080 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80114e0:	2000      	movs	r0, #0
 80114e2:	f004 fdf0 	bl	80160c6 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80114e6:	4b2e      	ldr	r3, [pc, #184]	; (80115a0 <ProcessRadioRxDone+0x220>)
 80114e8:	2205      	movs	r2, #5
 80114ea:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 80114ee:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d107      	bne.n	8011506 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80114f6:	4b2a      	ldr	r3, [pc, #168]	; (80115a0 <ProcessRadioRxDone+0x220>)
 80114f8:	2201      	movs	r2, #1
 80114fa:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 80114fe:	f7ff ff19 	bl	8011334 <PrepareRxDoneAbort>
        return;
 8011502:	f000 bc45 	b.w	8011d90 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 8011506:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801150a:	1c5a      	adds	r2, r3, #1
 801150c:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 8011510:	461a      	mov	r2, r3
 8011512:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011516:	4413      	add	r3, r2
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 801151e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8011522:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011526:	b2db      	uxtb	r3, r3
 8011528:	3b01      	subs	r3, #1
 801152a:	2b06      	cmp	r3, #6
 801152c:	f200 8403 	bhi.w	8011d36 <ProcessRadioRxDone+0x9b6>
 8011530:	a201      	add	r2, pc, #4	; (adr r2, 8011538 <ProcessRadioRxDone+0x1b8>)
 8011532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011536:	bf00      	nop
 8011538:	08011555 	.word	0x08011555
 801153c:	08011d37 	.word	0x08011d37
 8011540:	08011753 	.word	0x08011753
 8011544:	08011d37 	.word	0x08011d37
 8011548:	0801174b 	.word	0x0801174b
 801154c:	08011d37 	.word	0x08011d37
 8011550:	08011cdb 	.word	0x08011cdb
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8011554:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011558:	2b10      	cmp	r3, #16
 801155a:	d807      	bhi.n	801156c <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801155c:	4b10      	ldr	r3, [pc, #64]	; (80115a0 <ProcessRadioRxDone+0x220>)
 801155e:	2201      	movs	r2, #1
 8011560:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8011564:	f7ff fee6 	bl	8011334 <PrepareRxDoneAbort>
                return;
 8011568:	f000 bc12 	b.w	8011d90 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 801156c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011570:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 8011572:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011576:	b2db      	uxtb	r3, r3
 8011578:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 801157a:	4b07      	ldr	r3, [pc, #28]	; (8011598 <ProcessRadioRxDone+0x218>)
 801157c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8011580:	2b00      	cmp	r3, #0
 8011582:	d013      	beq.n	80115ac <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011584:	4b06      	ldr	r3, [pc, #24]	; (80115a0 <ProcessRadioRxDone+0x220>)
 8011586:	2201      	movs	r2, #1
 8011588:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 801158c:	f7ff fed2 	bl	8011334 <PrepareRxDoneAbort>
                return;
 8011590:	e3fe      	b.n	8011d90 <ProcessRadioRxDone+0xa10>
 8011592:	bf00      	nop
 8011594:	2000199c 	.word	0x2000199c
 8011598:	20000d6c 	.word	0x20000d6c
 801159c:	20001994 	.word	0x20001994
 80115a0:	20000850 	.word	0x20000850
 80115a4:	08020428 	.word	0x08020428
 80115a8:	20000be8 	.word	0x20000be8
            }

            SecureElementGetJoinEui( joinEui );
 80115ac:	f107 0308 	add.w	r3, r7, #8
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7fd ff7d 	bl	800f4b0 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 80115b6:	f107 0218 	add.w	r2, r7, #24
 80115ba:	f107 0308 	add.w	r3, r7, #8
 80115be:	4619      	mov	r1, r3
 80115c0:	20ff      	movs	r0, #255	; 0xff
 80115c2:	f005 ff95 	bl	80174f0 <LoRaMacCryptoHandleJoinAccept>
 80115c6:	4603      	mov	r3, r0
 80115c8:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 80115cc:	2300      	movs	r3, #0
 80115ce:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80115d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80115d6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	b25b      	sxtb	r3, r3
 80115de:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80115e0:	4bb1      	ldr	r3, [pc, #708]	; (80118a8 <ProcessRadioRxDone+0x528>)
 80115e2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80115e6:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 80115e8:	4baf      	ldr	r3, [pc, #700]	; (80118a8 <ProcessRadioRxDone+0x528>)
 80115ea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80115ee:	1d39      	adds	r1, r7, #4
 80115f0:	2207      	movs	r2, #7
 80115f2:	4618      	mov	r0, r3
 80115f4:	f006 fd36 	bl	8018064 <RegionVerify>
 80115f8:	4603      	mov	r3, r0
 80115fa:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 80115fe:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8011602:	2b00      	cmp	r3, #0
 8011604:	f040 8095 	bne.w	8011732 <ProcessRadioRxDone+0x3b2>
 8011608:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 801160c:	2b00      	cmp	r3, #0
 801160e:	f000 8090 	beq.w	8011732 <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8011612:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011616:	461a      	mov	r2, r3
 8011618:	4ba3      	ldr	r3, [pc, #652]	; (80118a8 <ProcessRadioRxDone+0x528>)
 801161a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 801161e:	4ba2      	ldr	r3, [pc, #648]	; (80118a8 <ProcessRadioRxDone+0x528>)
 8011620:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8011624:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011628:	021b      	lsls	r3, r3, #8
 801162a:	4313      	orrs	r3, r2
 801162c:	4a9e      	ldr	r2, [pc, #632]	; (80118a8 <ProcessRadioRxDone+0x528>)
 801162e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8011632:	4b9d      	ldr	r3, [pc, #628]	; (80118a8 <ProcessRadioRxDone+0x528>)
 8011634:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8011638:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801163c:	041b      	lsls	r3, r3, #16
 801163e:	4313      	orrs	r3, r2
 8011640:	4a99      	ldr	r2, [pc, #612]	; (80118a8 <ProcessRadioRxDone+0x528>)
 8011642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8011646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011648:	4a97      	ldr	r2, [pc, #604]	; (80118a8 <ProcessRadioRxDone+0x528>)
 801164a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 801164e:	4b96      	ldr	r3, [pc, #600]	; (80118a8 <ProcessRadioRxDone+0x528>)
 8011650:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8011654:	4619      	mov	r1, r3
 8011656:	2002      	movs	r0, #2
 8011658:	f7fd ff42 	bl	800f4e0 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 801165c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011660:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8011664:	b2db      	uxtb	r3, r3
 8011666:	461a      	mov	r2, r3
 8011668:	4b8f      	ldr	r3, [pc, #572]	; (80118a8 <ProcessRadioRxDone+0x528>)
 801166a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 801166e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011672:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011676:	b2db      	uxtb	r3, r3
 8011678:	461a      	mov	r2, r3
 801167a:	4b8b      	ldr	r3, [pc, #556]	; (80118a8 <ProcessRadioRxDone+0x528>)
 801167c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8011680:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011684:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011688:	b2db      	uxtb	r3, r3
 801168a:	461a      	mov	r2, r3
 801168c:	4b86      	ldr	r3, [pc, #536]	; (80118a8 <ProcessRadioRxDone+0x528>)
 801168e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8011692:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011696:	461a      	mov	r2, r3
 8011698:	4b83      	ldr	r3, [pc, #524]	; (80118a8 <ProcessRadioRxDone+0x528>)
 801169a:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 801169c:	4b82      	ldr	r3, [pc, #520]	; (80118a8 <ProcessRadioRxDone+0x528>)
 801169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d102      	bne.n	80116aa <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80116a4:	4b80      	ldr	r3, [pc, #512]	; (80118a8 <ProcessRadioRxDone+0x528>)
 80116a6:	2201      	movs	r2, #1
 80116a8:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80116aa:	4b7f      	ldr	r3, [pc, #508]	; (80118a8 <ProcessRadioRxDone+0x528>)
 80116ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80116b2:	fb02 f303 	mul.w	r3, r2, r3
 80116b6:	4a7c      	ldr	r2, [pc, #496]	; (80118a8 <ProcessRadioRxDone+0x528>)
 80116b8:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80116ba:	4b7b      	ldr	r3, [pc, #492]	; (80118a8 <ProcessRadioRxDone+0x528>)
 80116bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116be:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80116c2:	4a79      	ldr	r2, [pc, #484]	; (80118a8 <ProcessRadioRxDone+0x528>)
 80116c4:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 80116c6:	4b78      	ldr	r3, [pc, #480]	; (80118a8 <ProcessRadioRxDone+0x528>)
 80116c8:	2201      	movs	r2, #1
 80116ca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80116ce:	4b76      	ldr	r3, [pc, #472]	; (80118a8 <ProcessRadioRxDone+0x528>)
 80116d0:	2200      	movs	r2, #0
 80116d2:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80116d6:	f107 0318 	add.w	r3, r7, #24
 80116da:	3312      	adds	r3, #18
 80116dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 80116e0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80116e4:	b2db      	uxtb	r3, r3
 80116e6:	3b11      	subs	r3, #17
 80116e8:	b2db      	uxtb	r3, r3
 80116ea:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 80116ee:	4b6f      	ldr	r3, [pc, #444]	; (80118ac <ProcessRadioRxDone+0x52c>)
 80116f0:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 80116f4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80116f8:	4b6b      	ldr	r3, [pc, #428]	; (80118a8 <ProcessRadioRxDone+0x528>)
 80116fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80116fe:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8011702:	4611      	mov	r1, r2
 8011704:	4618      	mov	r0, r3
 8011706:	f006 fcc4 	bl	8018092 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 801170a:	4b67      	ldr	r3, [pc, #412]	; (80118a8 <ProcessRadioRxDone+0x528>)
 801170c:	2202      	movs	r2, #2
 801170e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8011712:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8011716:	4618      	mov	r0, r3
 8011718:	f005 f9f4 	bl	8016b04 <LoRaMacConfirmQueueIsCmdActive>
 801171c:	4603      	mov	r3, r0
 801171e:	2b00      	cmp	r3, #0
 8011720:	f000 8311 	beq.w	8011d46 <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8011724:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8011728:	4619      	mov	r1, r3
 801172a:	2000      	movs	r0, #0
 801172c:	f005 f95e 	bl	80169ec <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8011730:	e309      	b.n	8011d46 <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011732:	2001      	movs	r0, #1
 8011734:	f005 f9e6 	bl	8016b04 <LoRaMacConfirmQueueIsCmdActive>
 8011738:	4603      	mov	r3, r0
 801173a:	2b00      	cmp	r3, #0
 801173c:	f000 8302 	beq.w	8011d44 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8011740:	2101      	movs	r1, #1
 8011742:	2007      	movs	r0, #7
 8011744:	f005 f952 	bl	80169ec <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 8011748:	e2fc      	b.n	8011d44 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 801174a:	4b58      	ldr	r3, [pc, #352]	; (80118ac <ProcessRadioRxDone+0x52c>)
 801174c:	2201      	movs	r2, #1
 801174e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011752:	4b55      	ldr	r3, [pc, #340]	; (80118a8 <ProcessRadioRxDone+0x528>)
 8011754:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8011758:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 801175c:	4b53      	ldr	r3, [pc, #332]	; (80118ac <ProcessRadioRxDone+0x52c>)
 801175e:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 8011762:	b25b      	sxtb	r3, r3
 8011764:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8011768:	230d      	movs	r3, #13
 801176a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 801176e:	4b4e      	ldr	r3, [pc, #312]	; (80118a8 <ProcessRadioRxDone+0x528>)
 8011770:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8011774:	2b00      	cmp	r3, #0
 8011776:	d002      	beq.n	801177e <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8011778:	230e      	movs	r3, #14
 801177a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801177e:	4b4a      	ldr	r3, [pc, #296]	; (80118a8 <ProcessRadioRxDone+0x528>)
 8011780:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011784:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8011788:	4611      	mov	r1, r2
 801178a:	4618      	mov	r0, r3
 801178c:	f006 fc2f 	bl	8017fee <RegionGetPhyParam>
 8011790:	4603      	mov	r3, r0
 8011792:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8011794:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011798:	3b0d      	subs	r3, #13
 801179a:	b29b      	uxth	r3, r3
 801179c:	b21b      	sxth	r3, r3
 801179e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80117a2:	b21a      	sxth	r2, r3
 80117a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80117a6:	b21b      	sxth	r3, r3
 80117a8:	429a      	cmp	r2, r3
 80117aa:	dc03      	bgt.n	80117b4 <ProcessRadioRxDone+0x434>
 80117ac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80117b0:	2b0b      	cmp	r3, #11
 80117b2:	d806      	bhi.n	80117c2 <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80117b4:	4b3d      	ldr	r3, [pc, #244]	; (80118ac <ProcessRadioRxDone+0x52c>)
 80117b6:	2201      	movs	r2, #1
 80117b8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80117bc:	f7ff fdba 	bl	8011334 <PrepareRxDoneAbort>
                return;
 80117c0:	e2e6      	b.n	8011d90 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 80117c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80117c6:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 80117c8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80117cc:	b2db      	uxtb	r3, r3
 80117ce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 80117d2:	4b37      	ldr	r3, [pc, #220]	; (80118b0 <ProcessRadioRxDone+0x530>)
 80117d4:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 80117d6:	23ff      	movs	r3, #255	; 0xff
 80117d8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 80117dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80117e0:	4618      	mov	r0, r3
 80117e2:	f006 f987 	bl	8017af4 <LoRaMacParserData>
 80117e6:	4603      	mov	r3, r0
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d006      	beq.n	80117fa <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80117ec:	4b2f      	ldr	r3, [pc, #188]	; (80118ac <ProcessRadioRxDone+0x52c>)
 80117ee:	2201      	movs	r2, #1
 80117f0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80117f4:	f7ff fd9e 	bl	8011334 <PrepareRxDoneAbort>
                return;
 80117f8:	e2ca      	b.n	8011d90 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80117fa:	4b2b      	ldr	r3, [pc, #172]	; (80118a8 <ProcessRadioRxDone+0x528>)
 80117fc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011800:	2b01      	cmp	r3, #1
 8011802:	d132      	bne.n	801186a <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 8011804:	f004 fc7b 	bl	80160fe <LoRaMacClassBIsPingExpected>
 8011808:	4603      	mov	r3, r0
 801180a:	2b00      	cmp	r3, #0
 801180c:	d014      	beq.n	8011838 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801180e:	2000      	movs	r0, #0
 8011810:	f004 fc2c 	bl	801606c <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8011814:	2000      	movs	r0, #0
 8011816:	f004 fc4d 	bl	80160b4 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 801181a:	4b24      	ldr	r3, [pc, #144]	; (80118ac <ProcessRadioRxDone+0x52c>)
 801181c:	2204      	movs	r2, #4
 801181e:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8011822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011824:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011828:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801182c:	b2db      	uxtb	r3, r3
 801182e:	4619      	mov	r1, r3
 8011830:	4610      	mov	r0, r2
 8011832:	f004 fced 	bl	8016210 <LoRaMacClassBSetFPendingBit>
 8011836:	e018      	b.n	801186a <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011838:	f004 fc68 	bl	801610c <LoRaMacClassBIsMulticastExpected>
 801183c:	4603      	mov	r3, r0
 801183e:	2b00      	cmp	r3, #0
 8011840:	d013      	beq.n	801186a <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011842:	2000      	movs	r0, #0
 8011844:	f004 fc1c 	bl	8016080 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011848:	2000      	movs	r0, #0
 801184a:	f004 fc3c 	bl	80160c6 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 801184e:	4b17      	ldr	r3, [pc, #92]	; (80118ac <ProcessRadioRxDone+0x52c>)
 8011850:	2205      	movs	r2, #5
 8011852:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8011856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011858:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801185c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8011860:	b2db      	uxtb	r3, r3
 8011862:	4619      	mov	r1, r3
 8011864:	4610      	mov	r0, r2
 8011866:	f004 fcd3 	bl	8016210 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 801186a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801186c:	4a0f      	ldr	r2, [pc, #60]	; (80118ac <ProcessRadioRxDone+0x52c>)
 801186e:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8011872:	f107 0212 	add.w	r2, r7, #18
 8011876:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801187a:	4611      	mov	r1, r2
 801187c:	4618      	mov	r0, r3
 801187e:	f002 fd81 	bl	8014384 <DetermineFrameType>
 8011882:	4603      	mov	r3, r0
 8011884:	2b00      	cmp	r3, #0
 8011886:	d006      	beq.n	8011896 <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011888:	4b08      	ldr	r3, [pc, #32]	; (80118ac <ProcessRadioRxDone+0x52c>)
 801188a:	2201      	movs	r2, #1
 801188c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8011890:	f7ff fd50 	bl	8011334 <PrepareRxDoneAbort>
                return;
 8011894:	e27c      	b.n	8011d90 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 8011896:	2300      	movs	r3, #0
 8011898:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 801189c:	2300      	movs	r3, #0
 801189e:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80118a0:	2300      	movs	r3, #0
 80118a2:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 80118a6:	e055      	b.n	8011954 <ProcessRadioRxDone+0x5d4>
 80118a8:	20000d6c 	.word	0x20000d6c
 80118ac:	20000850 	.word	0x20000850
 80118b0:	20000a88 	.word	0x20000a88
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80118b4:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80118b8:	499f      	ldr	r1, [pc, #636]	; (8011b38 <ProcessRadioRxDone+0x7b8>)
 80118ba:	4613      	mov	r3, r2
 80118bc:	005b      	lsls	r3, r3, #1
 80118be:	4413      	add	r3, r2
 80118c0:	011b      	lsls	r3, r3, #4
 80118c2:	440b      	add	r3, r1
 80118c4:	33ec      	adds	r3, #236	; 0xec
 80118c6:	681a      	ldr	r2, [r3, #0]
 80118c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d13d      	bne.n	801194a <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 80118ce:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80118d2:	4999      	ldr	r1, [pc, #612]	; (8011b38 <ProcessRadioRxDone+0x7b8>)
 80118d4:	4613      	mov	r3, r2
 80118d6:	005b      	lsls	r3, r3, #1
 80118d8:	4413      	add	r3, r2
 80118da:	011b      	lsls	r3, r3, #4
 80118dc:	440b      	add	r3, r1
 80118de:	33e9      	adds	r3, #233	; 0xe9
 80118e0:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d031      	beq.n	801194a <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 80118e6:	2301      	movs	r3, #1
 80118e8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80118ec:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80118f0:	4991      	ldr	r1, [pc, #580]	; (8011b38 <ProcessRadioRxDone+0x7b8>)
 80118f2:	4613      	mov	r3, r2
 80118f4:	005b      	lsls	r3, r3, #1
 80118f6:	4413      	add	r3, r2
 80118f8:	011b      	lsls	r3, r3, #4
 80118fa:	440b      	add	r3, r1
 80118fc:	33ea      	adds	r3, #234	; 0xea
 80118fe:	781b      	ldrb	r3, [r3, #0]
 8011900:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8011904:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8011908:	498b      	ldr	r1, [pc, #556]	; (8011b38 <ProcessRadioRxDone+0x7b8>)
 801190a:	4613      	mov	r3, r2
 801190c:	005b      	lsls	r3, r3, #1
 801190e:	4413      	add	r3, r2
 8011910:	011b      	lsls	r3, r3, #4
 8011912:	440b      	add	r3, r1
 8011914:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 801191e:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8011922:	4985      	ldr	r1, [pc, #532]	; (8011b38 <ProcessRadioRxDone+0x7b8>)
 8011924:	4613      	mov	r3, r2
 8011926:	005b      	lsls	r3, r3, #1
 8011928:	4413      	add	r3, r2
 801192a:	011b      	lsls	r3, r3, #4
 801192c:	440b      	add	r3, r1
 801192e:	33ec      	adds	r3, #236	; 0xec
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011936:	4b80      	ldr	r3, [pc, #512]	; (8011b38 <ProcessRadioRxDone+0x7b8>)
 8011938:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801193c:	2b02      	cmp	r3, #2
 801193e:	d10e      	bne.n	801195e <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8011940:	4b7e      	ldr	r3, [pc, #504]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011942:	2203      	movs	r2, #3
 8011944:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 8011948:	e009      	b.n	801195e <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801194a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 801194e:	3301      	adds	r3, #1
 8011950:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8011954:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8011958:	2b00      	cmp	r3, #0
 801195a:	d0ab      	beq.n	80118b4 <ProcessRadioRxDone+0x534>
 801195c:	e000      	b.n	8011960 <ProcessRadioRxDone+0x5e0>
                    break;
 801195e:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8011960:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8011964:	2b01      	cmp	r3, #1
 8011966:	d117      	bne.n	8011998 <ProcessRadioRxDone+0x618>
 8011968:	7cbb      	ldrb	r3, [r7, #18]
 801196a:	2b03      	cmp	r3, #3
 801196c:	d10d      	bne.n	801198a <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 801196e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011972:	f003 0320 	and.w	r3, r3, #32
 8011976:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8011978:	2b00      	cmp	r3, #0
 801197a:	d106      	bne.n	801198a <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 801197c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011984:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011986:	2b00      	cmp	r3, #0
 8011988:	d006      	beq.n	8011998 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801198a:	4b6c      	ldr	r3, [pc, #432]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 801198c:	2201      	movs	r2, #1
 801198e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8011992:	f7ff fccf 	bl	8011334 <PrepareRxDoneAbort>
                return;
 8011996:	e1fb      	b.n	8011d90 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8011998:	7cb9      	ldrb	r1, [r7, #18]
 801199a:	4c67      	ldr	r4, [pc, #412]	; (8011b38 <ProcessRadioRxDone+0x7b8>)
 801199c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80119a0:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80119a4:	f107 0314 	add.w	r3, r7, #20
 80119a8:	9301      	str	r3, [sp, #4]
 80119aa:	f107 0313 	add.w	r3, r7, #19
 80119ae:	9300      	str	r3, [sp, #0]
 80119b0:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 80119b4:	f000 fee4 	bl	8012780 <GetFCntDown>
 80119b8:	4603      	mov	r3, r0
 80119ba:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80119be:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d017      	beq.n	80119f6 <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80119c6:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80119ca:	2b07      	cmp	r3, #7
 80119cc:	d104      	bne.n	80119d8 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80119ce:	4b5b      	ldr	r3, [pc, #364]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 80119d0:	2208      	movs	r2, #8
 80119d2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 80119d6:	e003      	b.n	80119e0 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80119d8:	4b58      	ldr	r3, [pc, #352]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 80119da:	2201      	movs	r2, #1
 80119dc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	4a56      	ldr	r2, [pc, #344]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 80119e4:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	4a54      	ldr	r2, [pc, #336]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 80119ec:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 80119f0:	f7ff fca0 	bl	8011334 <PrepareRxDoneAbort>
                return;
 80119f4:	e1cc      	b.n	8011d90 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80119f6:	7cfa      	ldrb	r2, [r7, #19]
 80119f8:	6979      	ldr	r1, [r7, #20]
 80119fa:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80119fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011a02:	9300      	str	r3, [sp, #0]
 8011a04:	460b      	mov	r3, r1
 8011a06:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011a0a:	f005 fed3 	bl	80177b4 <LoRaMacCryptoUnsecureMessage>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011a14:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d00f      	beq.n	8011a3c <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8011a1c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8011a20:	2b02      	cmp	r3, #2
 8011a22:	d104      	bne.n	8011a2e <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8011a24:	4b45      	ldr	r3, [pc, #276]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011a26:	220a      	movs	r2, #10
 8011a28:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8011a2c:	e003      	b.n	8011a36 <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8011a2e:	4b43      	ldr	r3, [pc, #268]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011a30:	220b      	movs	r2, #11
 8011a32:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 8011a36:	f7ff fc7d 	bl	8011334 <PrepareRxDoneAbort>
                return;
 8011a3a:	e1a9      	b.n	8011d90 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011a3c:	4b3f      	ldr	r3, [pc, #252]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011a3e:	2200      	movs	r2, #0
 8011a40:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8011a44:	4a3d      	ldr	r2, [pc, #244]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011a46:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8011a4a:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 8011a4e:	4b3b      	ldr	r3, [pc, #236]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011a50:	2200      	movs	r2, #0
 8011a52:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8011a56:	4b39      	ldr	r3, [pc, #228]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011a58:	2200      	movs	r2, #0
 8011a5a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	4a36      	ldr	r2, [pc, #216]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011a62:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011a66:	697b      	ldr	r3, [r7, #20]
 8011a68:	4a34      	ldr	r2, [pc, #208]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011a6a:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011a6e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011a72:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011a76:	b2db      	uxtb	r3, r3
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	bf14      	ite	ne
 8011a7c:	2301      	movne	r3, #1
 8011a7e:	2300      	moveq	r3, #0
 8011a80:	b2da      	uxtb	r2, r3
 8011a82:	4b2e      	ldr	r3, [pc, #184]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011a84:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011a88:	4b2c      	ldr	r3, [pc, #176]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011a90:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011a94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011a98:	b2db      	uxtb	r3, r3
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	bf14      	ite	ne
 8011a9e:	2301      	movne	r3, #1
 8011aa0:	2300      	moveq	r3, #0
 8011aa2:	b2da      	uxtb	r2, r3
 8011aa4:	4b25      	ldr	r3, [pc, #148]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011aa6:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011aaa:	4b24      	ldr	r3, [pc, #144]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011aac:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d004      	beq.n	8011abe <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011ab4:	4b21      	ldr	r3, [pc, #132]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011ab6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011aba:	2b01      	cmp	r3, #1
 8011abc:	d106      	bne.n	8011acc <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8011abe:	4b1e      	ldr	r3, [pc, #120]	; (8011b38 <ProcessRadioRxDone+0x7b8>)
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 8011ac4:	4b1c      	ldr	r3, [pc, #112]	; (8011b38 <ProcessRadioRxDone+0x7b8>)
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8011acc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8011ad0:	2b01      	cmp	r3, #1
 8011ad2:	d104      	bne.n	8011ade <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8011ad4:	4b19      	ldr	r3, [pc, #100]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011ad6:	2202      	movs	r2, #2
 8011ad8:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8011adc:	e03a      	b.n	8011b54 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8011ade:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8011ae2:	f023 031f 	bic.w	r3, r3, #31
 8011ae6:	b2db      	uxtb	r3, r3
 8011ae8:	2ba0      	cmp	r3, #160	; 0xa0
 8011aea:	d12b      	bne.n	8011b44 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8011aec:	4b12      	ldr	r3, [pc, #72]	; (8011b38 <ProcessRadioRxDone+0x7b8>)
 8011aee:	2201      	movs	r2, #1
 8011af0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011af4:	4b10      	ldr	r3, [pc, #64]	; (8011b38 <ProcessRadioRxDone+0x7b8>)
 8011af6:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d102      	bne.n	8011b04 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8011afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b00:	4a0d      	ldr	r2, [pc, #52]	; (8011b38 <ProcessRadioRxDone+0x7b8>)
 8011b02:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8011b04:	4b0d      	ldr	r3, [pc, #52]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011b06:	2201      	movs	r2, #1
 8011b08:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011b0c:	4b0b      	ldr	r3, [pc, #44]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011b0e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d01e      	beq.n	8011b54 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 8011b16:	4b09      	ldr	r3, [pc, #36]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011b18:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011b1c:	2b01      	cmp	r3, #1
 8011b1e:	d019      	beq.n	8011b54 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8011b20:	4b05      	ldr	r3, [pc, #20]	; (8011b38 <ProcessRadioRxDone+0x7b8>)
 8011b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b26:	4a05      	ldr	r2, [pc, #20]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011b28:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8011b2c:	4b04      	ldr	r3, [pc, #16]	; (8011b40 <ProcessRadioRxDone+0x7c0>)
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	4a02      	ldr	r2, [pc, #8]	; (8011b3c <ProcessRadioRxDone+0x7bc>)
 8011b32:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 8011b36:	e00d      	b.n	8011b54 <ProcessRadioRxDone+0x7d4>
 8011b38:	20000d6c 	.word	0x20000d6c
 8011b3c:	20000850 	.word	0x20000850
 8011b40:	2000199c 	.word	0x2000199c
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8011b44:	4b94      	ldr	r3, [pc, #592]	; (8011d98 <ProcessRadioRxDone+0xa18>)
 8011b46:	2200      	movs	r2, #0
 8011b48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8011b4c:	4b93      	ldr	r3, [pc, #588]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011b4e:	2200      	movs	r2, #0
 8011b50:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8011b54:	4b90      	ldr	r3, [pc, #576]	; (8011d98 <ProcessRadioRxDone+0xa18>)
 8011b56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d106      	bne.n	8011b6c <ProcessRadioRxDone+0x7ec>
 8011b5e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011b62:	f003 0310 	and.w	r3, r3, #16
 8011b66:	b2db      	uxtb	r3, r3
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d008      	beq.n	8011b7e <ProcessRadioRxDone+0x7fe>
 8011b6c:	4b8a      	ldr	r3, [pc, #552]	; (8011d98 <ProcessRadioRxDone+0xa18>)
 8011b6e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d103      	bne.n	8011b7e <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8011b76:	4b89      	ldr	r3, [pc, #548]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011b78:	2201      	movs	r2, #1
 8011b7a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8011b7e:	4b87      	ldr	r3, [pc, #540]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011b80:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011b84:	4a85      	ldr	r2, [pc, #532]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011b86:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 8011b8a:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f001 ff8a 	bl	8013aa8 <RemoveMacCommands>

            switch( fType )
 8011b94:	7cbb      	ldrb	r3, [r7, #18]
 8011b96:	2b03      	cmp	r3, #3
 8011b98:	d873      	bhi.n	8011c82 <ProcessRadioRxDone+0x902>
 8011b9a:	a201      	add	r2, pc, #4	; (adr r2, 8011ba0 <ProcessRadioRxDone+0x820>)
 8011b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ba0:	08011bb1 	.word	0x08011bb1
 8011ba4:	08011c01 	.word	0x08011c01
 8011ba8:	08011c37 	.word	0x08011c37
 8011bac:	08011c5d 	.word	0x08011c5d
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011bb0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011bb4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011bb8:	b2db      	uxtb	r3, r3
 8011bba:	461c      	mov	r4, r3
 8011bbc:	4b77      	ldr	r3, [pc, #476]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011bbe:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011bc2:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8011bc6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011bca:	f102 0010 	add.w	r0, r2, #16
 8011bce:	9300      	str	r3, [sp, #0]
 8011bd0:	460b      	mov	r3, r1
 8011bd2:	4622      	mov	r2, r4
 8011bd4:	2100      	movs	r1, #0
 8011bd6:	f000 ff4f 	bl	8012a78 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011bda:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8011bde:	4b6f      	ldr	r3, [pc, #444]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011be0:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011be6:	4a6d      	ldr	r2, [pc, #436]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011be8:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011bec:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8011bf0:	4b6a      	ldr	r3, [pc, #424]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011bf2:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8011bf6:	4b69      	ldr	r3, [pc, #420]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8011bfe:	e047      	b.n	8011c90 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011c00:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011c04:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011c08:	b2db      	uxtb	r3, r3
 8011c0a:	461c      	mov	r4, r3
 8011c0c:	4b63      	ldr	r3, [pc, #396]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011c0e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011c12:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8011c16:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011c1a:	f102 0010 	add.w	r0, r2, #16
 8011c1e:	9300      	str	r3, [sp, #0]
 8011c20:	460b      	mov	r3, r1
 8011c22:	4622      	mov	r2, r4
 8011c24:	2100      	movs	r1, #0
 8011c26:	f000 ff27 	bl	8012a78 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011c2a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8011c2e:	4b5b      	ldr	r3, [pc, #364]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011c30:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 8011c34:	e02c      	b.n	8011c90 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8011c36:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011c38:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8011c3c:	4b57      	ldr	r3, [pc, #348]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011c3e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011c42:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8011c46:	9300      	str	r3, [sp, #0]
 8011c48:	460b      	mov	r3, r1
 8011c4a:	2100      	movs	r1, #0
 8011c4c:	f000 ff14 	bl	8012a78 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011c50:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8011c54:	4b51      	ldr	r3, [pc, #324]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011c56:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 8011c5a:	e019      	b.n	8011c90 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011c5c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8011c60:	4b4e      	ldr	r3, [pc, #312]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011c62:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c68:	4a4c      	ldr	r2, [pc, #304]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011c6a:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011c6e:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8011c72:	4b4a      	ldr	r3, [pc, #296]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011c74:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8011c78:	4b48      	ldr	r3, [pc, #288]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011c7a:	2201      	movs	r2, #1
 8011c7c:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8011c80:	e006      	b.n	8011c90 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011c82:	4b46      	ldr	r3, [pc, #280]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011c84:	2201      	movs	r2, #1
 8011c86:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 8011c8a:	f7ff fb53 	bl	8011334 <PrepareRxDoneAbort>
                    break;
 8011c8e:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8011c90:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8011c94:	2be0      	cmp	r3, #224	; 0xe0
 8011c96:	d118      	bne.n	8011cca <ProcessRadioRxDone+0x94a>
 8011c98:	4b3f      	ldr	r3, [pc, #252]	; (8011d98 <ProcessRadioRxDone+0xa18>)
 8011c9a:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8011c9e:	f083 0301 	eor.w	r3, r3, #1
 8011ca2:	b2db      	uxtb	r3, r3
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d010      	beq.n	8011cca <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011ca8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8011cac:	4b3b      	ldr	r3, [pc, #236]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011cae:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8011cb2:	4b3a      	ldr	r3, [pc, #232]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8011cba:	4b38      	ldr	r3, [pc, #224]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 8011cc2:	4b36      	ldr	r3, [pc, #216]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011cca:	4a34      	ldr	r2, [pc, #208]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011ccc:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011cd0:	f043 0302 	orr.w	r3, r3, #2
 8011cd4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 8011cd8:	e035      	b.n	8011d46 <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8011cda:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8011cde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011ce2:	18d1      	adds	r1, r2, r3
 8011ce4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8011ce8:	b29b      	uxth	r3, r3
 8011cea:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8011cee:	1ad3      	subs	r3, r2, r3
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	461a      	mov	r2, r3
 8011cf4:	482a      	ldr	r0, [pc, #168]	; (8011da0 <ProcessRadioRxDone+0xa20>)
 8011cf6:	f008 fd32 	bl	801a75e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8011cfa:	4b28      	ldr	r3, [pc, #160]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011cfc:	2203      	movs	r2, #3
 8011cfe:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011d02:	4b26      	ldr	r3, [pc, #152]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011d04:	2200      	movs	r2, #0
 8011d06:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8011d0a:	4b24      	ldr	r3, [pc, #144]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011d0c:	4a24      	ldr	r2, [pc, #144]	; (8011da0 <ProcessRadioRxDone+0xa20>)
 8011d0e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8011d12:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011d16:	b2da      	uxtb	r2, r3
 8011d18:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8011d1c:	1ad3      	subs	r3, r2, r3
 8011d1e:	b2da      	uxtb	r2, r3
 8011d20:	4b1e      	ldr	r3, [pc, #120]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011d22:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011d26:	4a1d      	ldr	r2, [pc, #116]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011d28:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011d2c:	f043 0302 	orr.w	r3, r3, #2
 8011d30:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 8011d34:	e007      	b.n	8011d46 <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011d36:	4b19      	ldr	r3, [pc, #100]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011d38:	2201      	movs	r2, #1
 8011d3a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 8011d3e:	f7ff faf9 	bl	8011334 <PrepareRxDoneAbort>
            break;
 8011d42:	e000      	b.n	8011d46 <ProcessRadioRxDone+0x9c6>
            break;
 8011d44:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011d46:	4b15      	ldr	r3, [pc, #84]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011d48:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d004      	beq.n	8011d5a <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011d50:	4b12      	ldr	r3, [pc, #72]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011d52:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d10c      	bne.n	8011d74 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 8011d5a:	4b10      	ldr	r3, [pc, #64]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011d5c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d007      	beq.n	8011d74 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 8011d64:	4b0d      	ldr	r3, [pc, #52]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011d66:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d002      	beq.n	8011d74 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 8011d6e:	2000      	movs	r0, #0
 8011d70:	f000 fcec 	bl	801274c <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8011d74:	4b09      	ldr	r3, [pc, #36]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011d76:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011d7a:	2b02      	cmp	r3, #2
 8011d7c:	d006      	beq.n	8011d8c <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8011d7e:	4a07      	ldr	r2, [pc, #28]	; (8011d9c <ProcessRadioRxDone+0xa1c>)
 8011d80:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011d84:	f043 0310 	orr.w	r3, r3, #16
 8011d88:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8011d8c:	f7ff fa14 	bl	80111b8 <UpdateRxSlotIdleState>
}
 8011d90:	37a4      	adds	r7, #164	; 0xa4
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd90      	pop	{r4, r7, pc}
 8011d96:	bf00      	nop
 8011d98:	20000d6c 	.word	0x20000d6c
 8011d9c:	20000850 	.word	0x20000850
 8011da0:	20000a88 	.word	0x20000a88

08011da4 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011da8:	4b11      	ldr	r3, [pc, #68]	; (8011df0 <ProcessRadioTxTimeout+0x4c>)
 8011daa:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011dae:	2b02      	cmp	r3, #2
 8011db0:	d002      	beq.n	8011db8 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8011db2:	4b10      	ldr	r3, [pc, #64]	; (8011df4 <ProcessRadioTxTimeout+0x50>)
 8011db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011db6:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8011db8:	f7ff f9fe 	bl	80111b8 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8011dbc:	4b0e      	ldr	r3, [pc, #56]	; (8011df8 <ProcessRadioTxTimeout+0x54>)
 8011dbe:	2202      	movs	r2, #2
 8011dc0:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8011dc4:	2002      	movs	r0, #2
 8011dc6:	f004 fe69 	bl	8016a9c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8011dca:	4b0b      	ldr	r3, [pc, #44]	; (8011df8 <ProcessRadioTxTimeout+0x54>)
 8011dcc:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d003      	beq.n	8011ddc <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 8011dd4:	4b08      	ldr	r3, [pc, #32]	; (8011df8 <ProcessRadioTxTimeout+0x54>)
 8011dd6:	2201      	movs	r2, #1
 8011dd8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011ddc:	4a06      	ldr	r2, [pc, #24]	; (8011df8 <ProcessRadioTxTimeout+0x54>)
 8011dde:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011de2:	f043 0310 	orr.w	r3, r3, #16
 8011de6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 8011dea:	bf00      	nop
 8011dec:	bd80      	pop	{r7, pc}
 8011dee:	bf00      	nop
 8011df0:	20000d6c 	.word	0x20000d6c
 8011df4:	08020428 	.word	0x08020428
 8011df8:	20000850 	.word	0x20000850

08011dfc <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b084      	sub	sp, #16
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	4603      	mov	r3, r0
 8011e04:	460a      	mov	r2, r1
 8011e06:	71fb      	strb	r3, [r7, #7]
 8011e08:	4613      	mov	r3, r2
 8011e0a:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011e10:	4b3d      	ldr	r3, [pc, #244]	; (8011f08 <HandleRadioRxErrorTimeout+0x10c>)
 8011e12:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011e16:	2b02      	cmp	r3, #2
 8011e18:	d002      	beq.n	8011e20 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 8011e1a:	4b3c      	ldr	r3, [pc, #240]	; (8011f0c <HandleRadioRxErrorTimeout+0x110>)
 8011e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e1e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011e20:	f004 f966 	bl	80160f0 <LoRaMacClassBIsBeaconExpected>
 8011e24:	4603      	mov	r3, r0
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d007      	beq.n	8011e3a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8011e2a:	2002      	movs	r0, #2
 8011e2c:	f004 f914 	bl	8016058 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8011e30:	2000      	movs	r0, #0
 8011e32:	f004 f936 	bl	80160a2 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8011e36:	2301      	movs	r3, #1
 8011e38:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011e3a:	4b33      	ldr	r3, [pc, #204]	; (8011f08 <HandleRadioRxErrorTimeout+0x10c>)
 8011e3c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011e40:	2b01      	cmp	r3, #1
 8011e42:	d119      	bne.n	8011e78 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011e44:	f004 f95b 	bl	80160fe <LoRaMacClassBIsPingExpected>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d007      	beq.n	8011e5e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011e4e:	2000      	movs	r0, #0
 8011e50:	f004 f90c 	bl	801606c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011e54:	2000      	movs	r0, #0
 8011e56:	f004 f92d 	bl	80160b4 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011e5e:	f004 f955 	bl	801610c <LoRaMacClassBIsMulticastExpected>
 8011e62:	4603      	mov	r3, r0
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d007      	beq.n	8011e78 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011e68:	2000      	movs	r0, #0
 8011e6a:	f004 f909 	bl	8016080 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011e6e:	2000      	movs	r0, #0
 8011e70:	f004 f929 	bl	80160c6 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8011e74:	2301      	movs	r3, #1
 8011e76:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8011e78:	7bfb      	ldrb	r3, [r7, #15]
 8011e7a:	f083 0301 	eor.w	r3, r3, #1
 8011e7e:	b2db      	uxtb	r3, r3
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d03b      	beq.n	8011efc <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011e84:	4b22      	ldr	r3, [pc, #136]	; (8011f10 <HandleRadioRxErrorTimeout+0x114>)
 8011e86:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d122      	bne.n	8011ed4 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8011e8e:	4b20      	ldr	r3, [pc, #128]	; (8011f10 <HandleRadioRxErrorTimeout+0x114>)
 8011e90:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d003      	beq.n	8011ea0 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8011e98:	4a1d      	ldr	r2, [pc, #116]	; (8011f10 <HandleRadioRxErrorTimeout+0x114>)
 8011e9a:	79fb      	ldrb	r3, [r7, #7]
 8011e9c:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8011ea0:	79fb      	ldrb	r3, [r7, #7]
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f004 fdfa 	bl	8016a9c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8011ea8:	4b17      	ldr	r3, [pc, #92]	; (8011f08 <HandleRadioRxErrorTimeout+0x10c>)
 8011eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eac:	4618      	mov	r0, r3
 8011eae:	f00c ff1d 	bl	801ecec <UTIL_TIMER_GetElapsedTime>
 8011eb2:	4602      	mov	r2, r0
 8011eb4:	4b16      	ldr	r3, [pc, #88]	; (8011f10 <HandleRadioRxErrorTimeout+0x114>)
 8011eb6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d31e      	bcc.n	8011efc <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8011ebe:	4815      	ldr	r0, [pc, #84]	; (8011f14 <HandleRadioRxErrorTimeout+0x118>)
 8011ec0:	f00c fde8 	bl	801ea94 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011ec4:	4a12      	ldr	r2, [pc, #72]	; (8011f10 <HandleRadioRxErrorTimeout+0x114>)
 8011ec6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011eca:	f043 0310 	orr.w	r3, r3, #16
 8011ece:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8011ed2:	e013      	b.n	8011efc <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8011ed4:	4b0e      	ldr	r3, [pc, #56]	; (8011f10 <HandleRadioRxErrorTimeout+0x114>)
 8011ed6:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d003      	beq.n	8011ee6 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8011ede:	4a0c      	ldr	r2, [pc, #48]	; (8011f10 <HandleRadioRxErrorTimeout+0x114>)
 8011ee0:	79bb      	ldrb	r3, [r7, #6]
 8011ee2:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8011ee6:	79bb      	ldrb	r3, [r7, #6]
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f004 fdd7 	bl	8016a9c <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 8011eee:	4a08      	ldr	r2, [pc, #32]	; (8011f10 <HandleRadioRxErrorTimeout+0x114>)
 8011ef0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011ef4:	f043 0310 	orr.w	r3, r3, #16
 8011ef8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8011efc:	f7ff f95c 	bl	80111b8 <UpdateRxSlotIdleState>
}
 8011f00:	bf00      	nop
 8011f02:	3710      	adds	r7, #16
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	20000d6c 	.word	0x20000d6c
 8011f0c:	08020428 	.word	0x08020428
 8011f10:	20000850 	.word	0x20000850
 8011f14:	20000be8 	.word	0x20000be8

08011f18 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011f1c:	2106      	movs	r1, #6
 8011f1e:	2005      	movs	r0, #5
 8011f20:	f7ff ff6c 	bl	8011dfc <HandleRadioRxErrorTimeout>
}
 8011f24:	bf00      	nop
 8011f26:	bd80      	pop	{r7, pc}

08011f28 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011f2c:	2104      	movs	r1, #4
 8011f2e:	2003      	movs	r0, #3
 8011f30:	f7ff ff64 	bl	8011dfc <HandleRadioRxErrorTimeout>
}
 8011f34:	bf00      	nop
 8011f36:	bd80      	pop	{r7, pc}

08011f38 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b084      	sub	sp, #16
 8011f3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8011f42:	607b      	str	r3, [r7, #4]
  return(result);
 8011f44:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8011f46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011f48:	b672      	cpsid	i
}
 8011f4a:	bf00      	nop
    events = LoRaMacRadioEvents;
 8011f4c:	4b1d      	ldr	r3, [pc, #116]	; (8011fc4 <LoRaMacHandleIrqEvents+0x8c>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8011f52:	4b1c      	ldr	r3, [pc, #112]	; (8011fc4 <LoRaMacHandleIrqEvents+0x8c>)
 8011f54:	2200      	movs	r2, #0
 8011f56:	601a      	str	r2, [r3, #0]
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	f383 8810 	msr	PRIMASK, r3
}
 8011f62:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d027      	beq.n	8011fba <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8011f6a:	783b      	ldrb	r3, [r7, #0]
 8011f6c:	f003 0320 	and.w	r3, r3, #32
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d001      	beq.n	8011f7a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8011f76:	f7ff f937 	bl	80111e8 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8011f7a:	783b      	ldrb	r3, [r7, #0]
 8011f7c:	f003 0310 	and.w	r3, r3, #16
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d001      	beq.n	8011f8a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8011f86:	f7ff f9fb 	bl	8011380 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8011f8a:	783b      	ldrb	r3, [r7, #0]
 8011f8c:	f003 0308 	and.w	r3, r3, #8
 8011f90:	b2db      	uxtb	r3, r3
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d001      	beq.n	8011f9a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8011f96:	f7ff ff05 	bl	8011da4 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8011f9a:	783b      	ldrb	r3, [r7, #0]
 8011f9c:	f003 0304 	and.w	r3, r3, #4
 8011fa0:	b2db      	uxtb	r3, r3
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d001      	beq.n	8011faa <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8011fa6:	f7ff ffb7 	bl	8011f18 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8011faa:	783b      	ldrb	r3, [r7, #0]
 8011fac:	f003 0302 	and.w	r3, r3, #2
 8011fb0:	b2db      	uxtb	r3, r3
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d001      	beq.n	8011fba <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8011fb6:	f7ff ffb7 	bl	8011f28 <ProcessRadioRxTimeout>
        }
    }
}
 8011fba:	bf00      	nop
 8011fbc:	3710      	adds	r7, #16
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	20001994 	.word	0x20001994

08011fc8 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011fc8:	b480      	push	{r7}
 8011fca:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011fcc:	4b10      	ldr	r3, [pc, #64]	; (8012010 <LoRaMacIsBusy+0x48>)
 8011fce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011fd2:	2b01      	cmp	r3, #1
 8011fd4:	d101      	bne.n	8011fda <LoRaMacIsBusy+0x12>
    {
        return false;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	e015      	b.n	8012006 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8011fda:	4b0e      	ldr	r3, [pc, #56]	; (8012014 <LoRaMacIsBusy+0x4c>)
 8011fdc:	781b      	ldrb	r3, [r3, #0]
 8011fde:	f003 0301 	and.w	r3, r3, #1
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d001      	beq.n	8011fec <LoRaMacIsBusy+0x24>
    {
        return true;
 8011fe8:	2301      	movs	r3, #1
 8011fea:	e00c      	b.n	8012006 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011fec:	4b08      	ldr	r3, [pc, #32]	; (8012010 <LoRaMacIsBusy+0x48>)
 8011fee:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d106      	bne.n	8012004 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011ff6:	4b06      	ldr	r3, [pc, #24]	; (8012010 <LoRaMacIsBusy+0x48>)
 8011ff8:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011ffc:	2b01      	cmp	r3, #1
 8011ffe:	d101      	bne.n	8012004 <LoRaMacIsBusy+0x3c>
    {
        return false;
 8012000:	2300      	movs	r3, #0
 8012002:	e000      	b.n	8012006 <LoRaMacIsBusy+0x3e>
    }
    return true;
 8012004:	2301      	movs	r3, #1
}
 8012006:	4618      	mov	r0, r3
 8012008:	46bd      	mov	sp, r7
 801200a:	bc80      	pop	{r7}
 801200c:	4770      	bx	lr
 801200e:	bf00      	nop
 8012010:	20000850 	.word	0x20000850
 8012014:	20001994 	.word	0x20001994

08012018 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8012018:	b480      	push	{r7}
 801201a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 801201c:	4b05      	ldr	r3, [pc, #20]	; (8012034 <LoRaMacIsStopped+0x1c>)
 801201e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012022:	2b01      	cmp	r3, #1
 8012024:	d101      	bne.n	801202a <LoRaMacIsStopped+0x12>
    {
        return true;
 8012026:	2301      	movs	r3, #1
 8012028:	e000      	b.n	801202c <LoRaMacIsStopped+0x14>
    }
    return false;
 801202a:	2300      	movs	r3, #0
}
 801202c:	4618      	mov	r0, r3
 801202e:	46bd      	mov	sp, r7
 8012030:	bc80      	pop	{r7}
 8012032:	4770      	bx	lr
 8012034:	20000850 	.word	0x20000850

08012038 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8012038:	b480      	push	{r7}
 801203a:	b083      	sub	sp, #12
 801203c:	af00      	add	r7, sp, #0
 801203e:	4603      	mov	r3, r0
 8012040:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8012042:	4a04      	ldr	r2, [pc, #16]	; (8012054 <LoRaMacEnableRequests+0x1c>)
 8012044:	79fb      	ldrb	r3, [r7, #7]
 8012046:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 801204a:	bf00      	nop
 801204c:	370c      	adds	r7, #12
 801204e:	46bd      	mov	sp, r7
 8012050:	bc80      	pop	{r7}
 8012052:	4770      	bx	lr
 8012054:	20000850 	.word	0x20000850

08012058 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 801205e:	4b2c      	ldr	r3, [pc, #176]	; (8012110 <LoRaMacHandleRequestEvents+0xb8>)
 8012060:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8012064:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8012066:	4b2a      	ldr	r3, [pc, #168]	; (8012110 <LoRaMacHandleRequestEvents+0xb8>)
 8012068:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801206c:	2b00      	cmp	r3, #0
 801206e:	d14a      	bne.n	8012106 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8012070:	4b27      	ldr	r3, [pc, #156]	; (8012110 <LoRaMacHandleRequestEvents+0xb8>)
 8012072:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8012076:	f003 0301 	and.w	r3, r3, #1
 801207a:	b2db      	uxtb	r3, r3
 801207c:	2b00      	cmp	r3, #0
 801207e:	d006      	beq.n	801208e <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8012080:	4a23      	ldr	r2, [pc, #140]	; (8012110 <LoRaMacHandleRequestEvents+0xb8>)
 8012082:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012086:	f36f 0300 	bfc	r3, #0, #1
 801208a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801208e:	4b20      	ldr	r3, [pc, #128]	; (8012110 <LoRaMacHandleRequestEvents+0xb8>)
 8012090:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8012094:	f003 0304 	and.w	r3, r3, #4
 8012098:	b2db      	uxtb	r3, r3
 801209a:	2b00      	cmp	r3, #0
 801209c:	d006      	beq.n	80120ac <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801209e:	4a1c      	ldr	r2, [pc, #112]	; (8012110 <LoRaMacHandleRequestEvents+0xb8>)
 80120a0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80120a4:	f36f 0382 	bfc	r3, #2, #1
 80120a8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80120ac:	2001      	movs	r0, #1
 80120ae:	f7ff ffc3 	bl	8012038 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 80120b2:	793b      	ldrb	r3, [r7, #4]
 80120b4:	f003 0301 	and.w	r3, r3, #1
 80120b8:	b2db      	uxtb	r3, r3
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d005      	beq.n	80120ca <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80120be:	4b14      	ldr	r3, [pc, #80]	; (8012110 <LoRaMacHandleRequestEvents+0xb8>)
 80120c0:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	4813      	ldr	r0, [pc, #76]	; (8012114 <LoRaMacHandleRequestEvents+0xbc>)
 80120c8:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 80120ca:	793b      	ldrb	r3, [r7, #4]
 80120cc:	f003 0304 	and.w	r3, r3, #4
 80120d0:	b2db      	uxtb	r3, r3
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d00e      	beq.n	80120f4 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80120d6:	4810      	ldr	r0, [pc, #64]	; (8012118 <LoRaMacHandleRequestEvents+0xc0>)
 80120d8:	f004 fd2e 	bl	8016b38 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80120dc:	f004 fd7e 	bl	8016bdc <LoRaMacConfirmQueueGetCnt>
 80120e0:	4603      	mov	r3, r0
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d006      	beq.n	80120f4 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80120e6:	4a0a      	ldr	r2, [pc, #40]	; (8012110 <LoRaMacHandleRequestEvents+0xb8>)
 80120e8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80120ec:	f043 0304 	orr.w	r3, r3, #4
 80120f0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80120f4:	f004 f828 	bl	8016148 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80120f8:	4a05      	ldr	r2, [pc, #20]	; (8012110 <LoRaMacHandleRequestEvents+0xb8>)
 80120fa:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80120fe:	f36f 1304 	bfc	r3, #4, #1
 8012102:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8012106:	bf00      	nop
 8012108:	3708      	adds	r7, #8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	bf00      	nop
 8012110:	20000850 	.word	0x20000850
 8012114:	20000c90 	.word	0x20000c90
 8012118:	20000ca4 	.word	0x20000ca4

0801211c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 801211c:	b580      	push	{r7, lr}
 801211e:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8012120:	4b16      	ldr	r3, [pc, #88]	; (801217c <LoRaMacHandleIndicationEvents+0x60>)
 8012122:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8012126:	f003 0308 	and.w	r3, r3, #8
 801212a:	b2db      	uxtb	r3, r3
 801212c:	2b00      	cmp	r3, #0
 801212e:	d00d      	beq.n	801214c <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8012130:	4a12      	ldr	r2, [pc, #72]	; (801217c <LoRaMacHandleIndicationEvents+0x60>)
 8012132:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012136:	f36f 03c3 	bfc	r3, #3, #1
 801213a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 801213e:	4b0f      	ldr	r3, [pc, #60]	; (801217c <LoRaMacHandleIndicationEvents+0x60>)
 8012140:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8012144:	68db      	ldr	r3, [r3, #12]
 8012146:	490e      	ldr	r1, [pc, #56]	; (8012180 <LoRaMacHandleIndicationEvents+0x64>)
 8012148:	480e      	ldr	r0, [pc, #56]	; (8012184 <LoRaMacHandleIndicationEvents+0x68>)
 801214a:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801214c:	4b0b      	ldr	r3, [pc, #44]	; (801217c <LoRaMacHandleIndicationEvents+0x60>)
 801214e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8012152:	f003 0302 	and.w	r3, r3, #2
 8012156:	b2db      	uxtb	r3, r3
 8012158:	2b00      	cmp	r3, #0
 801215a:	d00d      	beq.n	8012178 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 801215c:	4a07      	ldr	r2, [pc, #28]	; (801217c <LoRaMacHandleIndicationEvents+0x60>)
 801215e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012162:	f36f 0341 	bfc	r3, #1, #1
 8012166:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 801216a:	4b04      	ldr	r3, [pc, #16]	; (801217c <LoRaMacHandleIndicationEvents+0x60>)
 801216c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8012170:	685b      	ldr	r3, [r3, #4]
 8012172:	4903      	ldr	r1, [pc, #12]	; (8012180 <LoRaMacHandleIndicationEvents+0x64>)
 8012174:	4804      	ldr	r0, [pc, #16]	; (8012188 <LoRaMacHandleIndicationEvents+0x6c>)
 8012176:	4798      	blx	r3
    }
}
 8012178:	bf00      	nop
 801217a:	bd80      	pop	{r7, pc}
 801217c:	20000850 	.word	0x20000850
 8012180:	20000cdc 	.word	0x20000cdc
 8012184:	20000cb8 	.word	0x20000cb8
 8012188:	20000c70 	.word	0x20000c70

0801218c <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b082      	sub	sp, #8
 8012190:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8012192:	4b2a      	ldr	r3, [pc, #168]	; (801223c <LoRaMacHandleMcpsRequest+0xb0>)
 8012194:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8012198:	f003 0301 	and.w	r3, r3, #1
 801219c:	b2db      	uxtb	r3, r3
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d048      	beq.n	8012234 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 80121a2:	2300      	movs	r3, #0
 80121a4:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 80121a6:	2300      	movs	r3, #0
 80121a8:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80121aa:	4b24      	ldr	r3, [pc, #144]	; (801223c <LoRaMacHandleMcpsRequest+0xb0>)
 80121ac:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d004      	beq.n	80121be <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 80121b4:	4b21      	ldr	r3, [pc, #132]	; (801223c <LoRaMacHandleMcpsRequest+0xb0>)
 80121b6:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80121ba:	2b03      	cmp	r3, #3
 80121bc:	d104      	bne.n	80121c8 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80121be:	f002 f943 	bl	8014448 <CheckRetransUnconfirmedUplink>
 80121c2:	4603      	mov	r3, r0
 80121c4:	71fb      	strb	r3, [r7, #7]
 80121c6:	e010      	b.n	80121ea <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80121c8:	4b1c      	ldr	r3, [pc, #112]	; (801223c <LoRaMacHandleMcpsRequest+0xb0>)
 80121ca:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	d10b      	bne.n	80121ea <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 80121d2:	4b1a      	ldr	r3, [pc, #104]	; (801223c <LoRaMacHandleMcpsRequest+0xb0>)
 80121d4:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d004      	beq.n	80121e6 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 80121dc:	f002 f960 	bl	80144a0 <CheckRetransConfirmedUplink>
 80121e0:	4603      	mov	r3, r0
 80121e2:	71fb      	strb	r3, [r7, #7]
 80121e4:	e001      	b.n	80121ea <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 80121e6:	2301      	movs	r3, #1
 80121e8:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 80121ea:	79fb      	ldrb	r3, [r7, #7]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d00d      	beq.n	801220c <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 80121f0:	4813      	ldr	r0, [pc, #76]	; (8012240 <LoRaMacHandleMcpsRequest+0xb4>)
 80121f2:	f00c fc4f 	bl	801ea94 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80121f6:	4b11      	ldr	r3, [pc, #68]	; (801223c <LoRaMacHandleMcpsRequest+0xb0>)
 80121f8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80121fc:	f023 0320 	bic.w	r3, r3, #32
 8012200:	4a0e      	ldr	r2, [pc, #56]	; (801223c <LoRaMacHandleMcpsRequest+0xb0>)
 8012202:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8012206:	f002 f985 	bl	8014514 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 801220a:	e013      	b.n	8012234 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 801220c:	79bb      	ldrb	r3, [r7, #6]
 801220e:	f083 0301 	eor.w	r3, r3, #1
 8012212:	b2db      	uxtb	r3, r3
 8012214:	2b00      	cmp	r3, #0
 8012216:	d00d      	beq.n	8012234 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8012218:	4a08      	ldr	r2, [pc, #32]	; (801223c <LoRaMacHandleMcpsRequest+0xb0>)
 801221a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801221e:	f36f 1304 	bfc	r3, #4, #1
 8012222:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 8012226:	4b05      	ldr	r3, [pc, #20]	; (801223c <LoRaMacHandleMcpsRequest+0xb0>)
 8012228:	2200      	movs	r2, #0
 801222a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 801222e:	2000      	movs	r0, #0
 8012230:	f000 f9c8 	bl	80125c4 <OnTxDelayedTimerEvent>
}
 8012234:	bf00      	nop
 8012236:	3708      	adds	r7, #8
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}
 801223c:	20000850 	.word	0x20000850
 8012240:	20000bb8 	.word	0x20000bb8

08012244 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8012244:	b580      	push	{r7, lr}
 8012246:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8012248:	4b18      	ldr	r3, [pc, #96]	; (80122ac <LoRaMacHandleMlmeRequest+0x68>)
 801224a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801224e:	f003 0304 	and.w	r3, r3, #4
 8012252:	b2db      	uxtb	r3, r3
 8012254:	2b00      	cmp	r3, #0
 8012256:	d026      	beq.n	80122a6 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8012258:	2001      	movs	r0, #1
 801225a:	f004 fc53 	bl	8016b04 <LoRaMacConfirmQueueIsCmdActive>
 801225e:	4603      	mov	r3, r0
 8012260:	2b00      	cmp	r3, #0
 8012262:	d012      	beq.n	801228a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8012264:	2001      	movs	r0, #1
 8012266:	f004 fbef 	bl	8016a48 <LoRaMacConfirmQueueGetStatus>
 801226a:	4603      	mov	r3, r0
 801226c:	2b00      	cmp	r3, #0
 801226e:	d103      	bne.n	8012278 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8012270:	4b0e      	ldr	r3, [pc, #56]	; (80122ac <LoRaMacHandleMlmeRequest+0x68>)
 8012272:	2200      	movs	r2, #0
 8012274:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012278:	4b0c      	ldr	r3, [pc, #48]	; (80122ac <LoRaMacHandleMlmeRequest+0x68>)
 801227a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801227e:	f023 0302 	bic.w	r3, r3, #2
 8012282:	4a0a      	ldr	r2, [pc, #40]	; (80122ac <LoRaMacHandleMlmeRequest+0x68>)
 8012284:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8012288:	e00d      	b.n	80122a6 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 801228a:	2006      	movs	r0, #6
 801228c:	f004 fc3a 	bl	8016b04 <LoRaMacConfirmQueueIsCmdActive>
 8012290:	4603      	mov	r3, r0
 8012292:	2b00      	cmp	r3, #0
 8012294:	d007      	beq.n	80122a6 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012296:	4b05      	ldr	r3, [pc, #20]	; (80122ac <LoRaMacHandleMlmeRequest+0x68>)
 8012298:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801229c:	f023 0302 	bic.w	r3, r3, #2
 80122a0:	4a02      	ldr	r2, [pc, #8]	; (80122ac <LoRaMacHandleMlmeRequest+0x68>)
 80122a2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 80122a6:	bf00      	nop
 80122a8:	bd80      	pop	{r7, pc}
 80122aa:	bf00      	nop
 80122ac:	20000850 	.word	0x20000850

080122b0 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80122b4:	200b      	movs	r0, #11
 80122b6:	f004 fc25 	bl	8016b04 <LoRaMacConfirmQueueIsCmdActive>
 80122ba:	4603      	mov	r3, r0
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d019      	beq.n	80122f4 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80122c0:	4b0e      	ldr	r3, [pc, #56]	; (80122fc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80122c2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80122c6:	f003 0301 	and.w	r3, r3, #1
 80122ca:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d111      	bne.n	80122f4 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80122d0:	4b0a      	ldr	r3, [pc, #40]	; (80122fc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80122d2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80122d6:	f003 0304 	and.w	r3, r3, #4
 80122da:	b2db      	uxtb	r3, r3
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d009      	beq.n	80122f4 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80122e0:	4b06      	ldr	r3, [pc, #24]	; (80122fc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80122e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80122e6:	f023 0302 	bic.w	r3, r3, #2
 80122ea:	4a04      	ldr	r2, [pc, #16]	; (80122fc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80122ec:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80122f0:	2301      	movs	r3, #1
 80122f2:	e000      	b.n	80122f6 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80122f4:	2300      	movs	r3, #0
}
 80122f6:	4618      	mov	r0, r3
 80122f8:	bd80      	pop	{r7, pc}
 80122fa:	bf00      	nop
 80122fc:	20000850 	.word	0x20000850

08012300 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 8012300:	b480      	push	{r7}
 8012302:	b083      	sub	sp, #12
 8012304:	af00      	add	r7, sp, #0
 8012306:	4603      	mov	r3, r0
 8012308:	71fb      	strb	r3, [r7, #7]
 801230a:	460b      	mov	r3, r1
 801230c:	71bb      	strb	r3, [r7, #6]
 801230e:	4613      	mov	r3, r2
 8012310:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 8012312:	79fb      	ldrb	r3, [r7, #7]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d00a      	beq.n	801232e <CheckForMinimumAbpDatarate+0x2e>
 8012318:	79bb      	ldrb	r3, [r7, #6]
 801231a:	2b01      	cmp	r3, #1
 801231c:	d107      	bne.n	801232e <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 801231e:	797b      	ldrb	r3, [r7, #5]
 8012320:	f083 0301 	eor.w	r3, r3, #1
 8012324:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8012326:	2b00      	cmp	r3, #0
 8012328:	d001      	beq.n	801232e <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 801232a:	2301      	movs	r3, #1
 801232c:	e000      	b.n	8012330 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 801232e:	2300      	movs	r3, #0
}
 8012330:	4618      	mov	r0, r3
 8012332:	370c      	adds	r7, #12
 8012334:	46bd      	mov	sp, r7
 8012336:	bc80      	pop	{r7}
 8012338:	4770      	bx	lr
	...

0801233c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 801233c:	b480      	push	{r7}
 801233e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8012340:	4b0d      	ldr	r3, [pc, #52]	; (8012378 <LoRaMacCheckForRxAbort+0x3c>)
 8012342:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801234a:	2b00      	cmp	r3, #0
 801234c:	d00f      	beq.n	801236e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 801234e:	4b0a      	ldr	r3, [pc, #40]	; (8012378 <LoRaMacCheckForRxAbort+0x3c>)
 8012350:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012358:	4a07      	ldr	r2, [pc, #28]	; (8012378 <LoRaMacCheckForRxAbort+0x3c>)
 801235a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801235e:	4b06      	ldr	r3, [pc, #24]	; (8012378 <LoRaMacCheckForRxAbort+0x3c>)
 8012360:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012364:	f023 0302 	bic.w	r3, r3, #2
 8012368:	4a03      	ldr	r2, [pc, #12]	; (8012378 <LoRaMacCheckForRxAbort+0x3c>)
 801236a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 801236e:	bf00      	nop
 8012370:	46bd      	mov	sp, r7
 8012372:	bc80      	pop	{r7}
 8012374:	4770      	bx	lr
 8012376:	bf00      	nop
 8012378:	20000850 	.word	0x20000850

0801237c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b084      	sub	sp, #16
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8012384:	2300      	movs	r3, #0
 8012386:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8012388:	2300      	movs	r3, #0
 801238a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 801238c:	4b51      	ldr	r3, [pc, #324]	; (80124d4 <LoRaMacHandleNvm+0x158>)
 801238e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012392:	2b00      	cmp	r3, #0
 8012394:	f040 8099 	bne.w	80124ca <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2124      	movs	r1, #36	; 0x24
 801239c:	4618      	mov	r0, r3
 801239e:	f008 fa33 	bl	801a808 <Crc32>
 80123a2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123a8:	68ba      	ldr	r2, [r7, #8]
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d006      	beq.n	80123bc <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	68ba      	ldr	r2, [r7, #8]
 80123b2:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80123b4:	89fb      	ldrh	r3, [r7, #14]
 80123b6:	f043 0301 	orr.w	r3, r3, #1
 80123ba:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	3328      	adds	r3, #40	; 0x28
 80123c0:	211c      	movs	r1, #28
 80123c2:	4618      	mov	r0, r3
 80123c4:	f008 fa20 	bl	801a808 <Crc32>
 80123c8:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123ce:	68ba      	ldr	r2, [r7, #8]
 80123d0:	429a      	cmp	r2, r3
 80123d2:	d006      	beq.n	80123e2 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	68ba      	ldr	r2, [r7, #8]
 80123d8:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80123da:	89fb      	ldrh	r3, [r7, #14]
 80123dc:	f043 0302 	orr.w	r3, r3, #2
 80123e0:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	3348      	adds	r3, #72	; 0x48
 80123e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80123ea:	4618      	mov	r0, r3
 80123ec:	f008 fa0c 	bl	801a808 <Crc32>
 80123f0:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80123f8:	68ba      	ldr	r2, [r7, #8]
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d007      	beq.n	801240e <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	68ba      	ldr	r2, [r7, #8]
 8012402:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8012406:	89fb      	ldrh	r3, [r7, #14]
 8012408:	f043 0304 	orr.w	r3, r3, #4
 801240c:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8012414:	21d4      	movs	r1, #212	; 0xd4
 8012416:	4618      	mov	r0, r3
 8012418:	f008 f9f6 	bl	801a808 <Crc32>
 801241c:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012424:	68ba      	ldr	r2, [r7, #8]
 8012426:	429a      	cmp	r2, r3
 8012428:	d007      	beq.n	801243a <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	68ba      	ldr	r2, [r7, #8]
 801242e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8012432:	89fb      	ldrh	r3, [r7, #14]
 8012434:	f043 0308 	orr.w	r3, r3, #8
 8012438:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8012440:	2110      	movs	r1, #16
 8012442:	4618      	mov	r0, r3
 8012444:	f008 f9e0 	bl	801a808 <Crc32>
 8012448:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8012450:	68ba      	ldr	r2, [r7, #8]
 8012452:	429a      	cmp	r2, r3
 8012454:	d007      	beq.n	8012466 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	68ba      	ldr	r2, [r7, #8]
 801245a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 801245e:	89fb      	ldrh	r3, [r7, #14]
 8012460:	f043 0310 	orr.w	r3, r3, #16
 8012464:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f503 730e 	add.w	r3, r3, #568	; 0x238
 801246c:	f44f 715e 	mov.w	r1, #888	; 0x378
 8012470:	4618      	mov	r0, r3
 8012472:	f008 f9c9 	bl	801a808 <Crc32>
 8012476:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 801247e:	68ba      	ldr	r2, [r7, #8]
 8012480:	429a      	cmp	r2, r3
 8012482:	d007      	beq.n	8012494 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	68ba      	ldr	r2, [r7, #8]
 8012488:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 801248c:	89fb      	ldrh	r3, [r7, #14]
 801248e:	f043 0320 	orr.w	r3, r3, #32
 8012492:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 801249a:	2114      	movs	r1, #20
 801249c:	4618      	mov	r0, r3
 801249e:	f008 f9b3 	bl	801a808 <Crc32>
 80124a2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 80124aa:	68ba      	ldr	r2, [r7, #8]
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d007      	beq.n	80124c0 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	68ba      	ldr	r2, [r7, #8]
 80124b4:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80124b8:	89fb      	ldrh	r3, [r7, #14]
 80124ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124be:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 80124c0:	89fb      	ldrh	r3, [r7, #14]
 80124c2:	4618      	mov	r0, r3
 80124c4:	f002 f878 	bl	80145b8 <CallNvmDataChangeCallback>
 80124c8:	e000      	b.n	80124cc <LoRaMacHandleNvm+0x150>
        return;
 80124ca:	bf00      	nop
}
 80124cc:	3710      	adds	r7, #16
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}
 80124d2:	bf00      	nop
 80124d4:	20000850 	.word	0x20000850

080124d8 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b084      	sub	sp, #16
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
 80124e0:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 80124e2:	683b      	ldr	r3, [r7, #0]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d00d      	beq.n	8012504 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 80124e8:	6838      	ldr	r0, [r7, #0]
 80124ea:	f00c fbff 	bl	801ecec <UTIL_TIMER_GetElapsedTime>
 80124ee:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 80124f0:	68fa      	ldr	r2, [r7, #12]
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	429a      	cmp	r2, r3
 80124f6:	d905      	bls.n	8012504 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 80124f8:	4b05      	ldr	r3, [pc, #20]	; (8012510 <LoRaMacHandleResponseTimeout+0x38>)
 80124fa:	2200      	movs	r2, #0
 80124fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 8012500:	2301      	movs	r3, #1
 8012502:	e000      	b.n	8012506 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 8012504:	2300      	movs	r3, #0
}
 8012506:	4618      	mov	r0, r3
 8012508:	3710      	adds	r7, #16
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}
 801250e:	bf00      	nop
 8012510:	20000d6c 	.word	0x20000d6c

08012514 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 801251a:	2300      	movs	r3, #0
 801251c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 801251e:	f7ff fd0b 	bl	8011f38 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8012522:	f003 fe80 	bl	8016226 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8012526:	4b25      	ldr	r3, [pc, #148]	; (80125bc <LoRaMacProcess+0xa8>)
 8012528:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801252c:	f003 0310 	and.w	r3, r3, #16
 8012530:	b2db      	uxtb	r3, r3
 8012532:	2b00      	cmp	r3, #0
 8012534:	d023      	beq.n	801257e <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8012536:	2000      	movs	r0, #0
 8012538:	f7ff fd7e 	bl	8012038 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 801253c:	f7ff fefe 	bl	801233c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8012540:	f002 f858 	bl	80145f4 <IsRequestPending>
 8012544:	4603      	mov	r3, r0
 8012546:	2b00      	cmp	r3, #0
 8012548:	d006      	beq.n	8012558 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 801254a:	f7ff feb1 	bl	80122b0 <LoRaMacCheckForBeaconAcquisition>
 801254e:	4603      	mov	r3, r0
 8012550:	461a      	mov	r2, r3
 8012552:	79fb      	ldrb	r3, [r7, #7]
 8012554:	4313      	orrs	r3, r2
 8012556:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8012558:	79fb      	ldrb	r3, [r7, #7]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d103      	bne.n	8012566 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 801255e:	f7ff fe71 	bl	8012244 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8012562:	f7ff fe13 	bl	801218c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8012566:	f7ff fd77 	bl	8012058 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801256a:	2001      	movs	r0, #1
 801256c:	f7ff fd64 	bl	8012038 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8012570:	4a12      	ldr	r2, [pc, #72]	; (80125bc <LoRaMacProcess+0xa8>)
 8012572:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012576:	f043 0320 	orr.w	r3, r3, #32
 801257a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 801257e:	f7ff fdcd 	bl	801211c <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8012582:	4b0e      	ldr	r3, [pc, #56]	; (80125bc <LoRaMacProcess+0xa8>)
 8012584:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8012588:	2b02      	cmp	r3, #2
 801258a:	d101      	bne.n	8012590 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 801258c:	f001 fc1a 	bl	8013dc4 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8012590:	4b0a      	ldr	r3, [pc, #40]	; (80125bc <LoRaMacProcess+0xa8>)
 8012592:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8012596:	f003 0320 	and.w	r3, r3, #32
 801259a:	b2db      	uxtb	r3, r3
 801259c:	2b00      	cmp	r3, #0
 801259e:	d009      	beq.n	80125b4 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 80125a0:	4a06      	ldr	r2, [pc, #24]	; (80125bc <LoRaMacProcess+0xa8>)
 80125a2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80125a6:	f36f 1345 	bfc	r3, #5, #1
 80125aa:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 80125ae:	4804      	ldr	r0, [pc, #16]	; (80125c0 <LoRaMacProcess+0xac>)
 80125b0:	f7ff fee4 	bl	801237c <LoRaMacHandleNvm>
    }
}
 80125b4:	bf00      	nop
 80125b6:	3708      	adds	r7, #8
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}
 80125bc:	20000850 	.word	0x20000850
 80125c0:	20000d6c 	.word	0x20000d6c

080125c4 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b082      	sub	sp, #8
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 80125cc:	481e      	ldr	r0, [pc, #120]	; (8012648 <OnTxDelayedTimerEvent+0x84>)
 80125ce:	f00c fa61 	bl	801ea94 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80125d2:	4b1e      	ldr	r3, [pc, #120]	; (801264c <OnTxDelayedTimerEvent+0x88>)
 80125d4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80125d8:	f023 0320 	bic.w	r3, r3, #32
 80125dc:	4a1b      	ldr	r2, [pc, #108]	; (801264c <OnTxDelayedTimerEvent+0x88>)
 80125de:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 80125e2:	4b1b      	ldr	r3, [pc, #108]	; (8012650 <OnTxDelayedTimerEvent+0x8c>)
 80125e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125e8:	4a18      	ldr	r2, [pc, #96]	; (801264c <OnTxDelayedTimerEvent+0x88>)
 80125ea:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 80125ee:	4611      	mov	r1, r2
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7ff ff71 	bl	80124d8 <LoRaMacHandleResponseTimeout>
 80125f6:	4603      	mov	r3, r0
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d11e      	bne.n	801263a <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 80125fc:	2001      	movs	r0, #1
 80125fe:	f001 f92b 	bl	8013858 <ScheduleTx>
 8012602:	4603      	mov	r3, r0
 8012604:	2b00      	cmp	r3, #0
 8012606:	d01a      	beq.n	801263e <OnTxDelayedTimerEvent+0x7a>
 8012608:	2b0b      	cmp	r3, #11
 801260a:	d018      	beq.n	801263e <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801260c:	4b10      	ldr	r3, [pc, #64]	; (8012650 <OnTxDelayedTimerEvent+0x8c>)
 801260e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012612:	b2da      	uxtb	r2, r3
 8012614:	4b0d      	ldr	r3, [pc, #52]	; (801264c <OnTxDelayedTimerEvent+0x88>)
 8012616:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 801261a:	4b0c      	ldr	r3, [pc, #48]	; (801264c <OnTxDelayedTimerEvent+0x88>)
 801261c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012620:	4b0a      	ldr	r3, [pc, #40]	; (801264c <OnTxDelayedTimerEvent+0x88>)
 8012622:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8012626:	4b09      	ldr	r3, [pc, #36]	; (801264c <OnTxDelayedTimerEvent+0x88>)
 8012628:	2209      	movs	r2, #9
 801262a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 801262e:	2009      	movs	r0, #9
 8012630:	f004 fa34 	bl	8016a9c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8012634:	f001 ff6e 	bl	8014514 <StopRetransmission>
            break;
 8012638:	e002      	b.n	8012640 <OnTxDelayedTimerEvent+0x7c>
        return;
 801263a:	bf00      	nop
 801263c:	e000      	b.n	8012640 <OnTxDelayedTimerEvent+0x7c>
            break;
 801263e:	bf00      	nop
        }
    }
}
 8012640:	3708      	adds	r7, #8
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}
 8012646:	bf00      	nop
 8012648:	20000bb8 	.word	0x20000bb8
 801264c:	20000850 	.word	0x20000850
 8012650:	20000d6c 	.word	0x20000d6c

08012654 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b082      	sub	sp, #8
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 801265c:	4b17      	ldr	r3, [pc, #92]	; (80126bc <OnRxWindow1TimerEvent+0x68>)
 801265e:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8012662:	4b16      	ldr	r3, [pc, #88]	; (80126bc <OnRxWindow1TimerEvent+0x68>)
 8012664:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8012668:	4b15      	ldr	r3, [pc, #84]	; (80126c0 <OnRxWindow1TimerEvent+0x6c>)
 801266a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801266e:	b25a      	sxtb	r2, r3
 8012670:	4b12      	ldr	r3, [pc, #72]	; (80126bc <OnRxWindow1TimerEvent+0x68>)
 8012672:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012676:	4b12      	ldr	r3, [pc, #72]	; (80126c0 <OnRxWindow1TimerEvent+0x6c>)
 8012678:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801267c:	4b0f      	ldr	r3, [pc, #60]	; (80126bc <OnRxWindow1TimerEvent+0x68>)
 801267e:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012682:	4b0f      	ldr	r3, [pc, #60]	; (80126c0 <OnRxWindow1TimerEvent+0x6c>)
 8012684:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012688:	4b0c      	ldr	r3, [pc, #48]	; (80126bc <OnRxWindow1TimerEvent+0x68>)
 801268a:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 801268e:	4b0b      	ldr	r3, [pc, #44]	; (80126bc <OnRxWindow1TimerEvent+0x68>)
 8012690:	2200      	movs	r2, #0
 8012692:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8012696:	4b09      	ldr	r3, [pc, #36]	; (80126bc <OnRxWindow1TimerEvent+0x68>)
 8012698:	2200      	movs	r2, #0
 801269a:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801269e:	4b08      	ldr	r3, [pc, #32]	; (80126c0 <OnRxWindow1TimerEvent+0x6c>)
 80126a0:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80126a4:	4b05      	ldr	r3, [pc, #20]	; (80126bc <OnRxWindow1TimerEvent+0x68>)
 80126a6:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80126aa:	4906      	ldr	r1, [pc, #24]	; (80126c4 <OnRxWindow1TimerEvent+0x70>)
 80126ac:	4806      	ldr	r0, [pc, #24]	; (80126c8 <OnRxWindow1TimerEvent+0x74>)
 80126ae:	f001 fb55 	bl	8013d5c <RxWindowSetup>
}
 80126b2:	bf00      	nop
 80126b4:	3708      	adds	r7, #8
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
 80126ba:	bf00      	nop
 80126bc:	20000850 	.word	0x20000850
 80126c0:	20000d6c 	.word	0x20000d6c
 80126c4:	20000c08 	.word	0x20000c08
 80126c8:	20000bd0 	.word	0x20000bd0

080126cc <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80126d4:	4b19      	ldr	r3, [pc, #100]	; (801273c <OnRxWindow2TimerEvent+0x70>)
 80126d6:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d029      	beq.n	8012732 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80126de:	4b17      	ldr	r3, [pc, #92]	; (801273c <OnRxWindow2TimerEvent+0x70>)
 80126e0:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80126e4:	4b15      	ldr	r3, [pc, #84]	; (801273c <OnRxWindow2TimerEvent+0x70>)
 80126e6:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80126ea:	4b15      	ldr	r3, [pc, #84]	; (8012740 <OnRxWindow2TimerEvent+0x74>)
 80126ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126ee:	4a13      	ldr	r2, [pc, #76]	; (801273c <OnRxWindow2TimerEvent+0x70>)
 80126f0:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80126f4:	4b12      	ldr	r3, [pc, #72]	; (8012740 <OnRxWindow2TimerEvent+0x74>)
 80126f6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80126fa:	4b10      	ldr	r3, [pc, #64]	; (801273c <OnRxWindow2TimerEvent+0x70>)
 80126fc:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012700:	4b0f      	ldr	r3, [pc, #60]	; (8012740 <OnRxWindow2TimerEvent+0x74>)
 8012702:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012706:	4b0d      	ldr	r3, [pc, #52]	; (801273c <OnRxWindow2TimerEvent+0x70>)
 8012708:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 801270c:	4b0b      	ldr	r3, [pc, #44]	; (801273c <OnRxWindow2TimerEvent+0x70>)
 801270e:	2200      	movs	r2, #0
 8012710:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012714:	4b09      	ldr	r3, [pc, #36]	; (801273c <OnRxWindow2TimerEvent+0x70>)
 8012716:	2201      	movs	r2, #1
 8012718:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801271c:	4b08      	ldr	r3, [pc, #32]	; (8012740 <OnRxWindow2TimerEvent+0x74>)
 801271e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8012722:	4b06      	ldr	r3, [pc, #24]	; (801273c <OnRxWindow2TimerEvent+0x70>)
 8012724:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8012728:	4906      	ldr	r1, [pc, #24]	; (8012744 <OnRxWindow2TimerEvent+0x78>)
 801272a:	4807      	ldr	r0, [pc, #28]	; (8012748 <OnRxWindow2TimerEvent+0x7c>)
 801272c:	f001 fb16 	bl	8013d5c <RxWindowSetup>
 8012730:	e000      	b.n	8012734 <OnRxWindow2TimerEvent+0x68>
        return;
 8012732:	bf00      	nop
}
 8012734:	3708      	adds	r7, #8
 8012736:	46bd      	mov	sp, r7
 8012738:	bd80      	pop	{r7, pc}
 801273a:	bf00      	nop
 801273c:	20000850 	.word	0x20000850
 8012740:	20000d6c 	.word	0x20000d6c
 8012744:	20000c20 	.word	0x20000c20
 8012748:	20000be8 	.word	0x20000be8

0801274c <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b082      	sub	sp, #8
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8012754:	4808      	ldr	r0, [pc, #32]	; (8012778 <OnRetransmitTimeoutTimerEvent+0x2c>)
 8012756:	f00c f99d 	bl	801ea94 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 801275a:	4b08      	ldr	r3, [pc, #32]	; (801277c <OnRetransmitTimeoutTimerEvent+0x30>)
 801275c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8012760:	2b00      	cmp	r3, #0
 8012762:	d003      	beq.n	801276c <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8012764:	4b05      	ldr	r3, [pc, #20]	; (801277c <OnRetransmitTimeoutTimerEvent+0x30>)
 8012766:	2201      	movs	r2, #1
 8012768:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 801276c:	f001 ff0e 	bl	801458c <OnMacProcessNotify>
}
 8012770:	bf00      	nop
 8012772:	3708      	adds	r7, #8
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}
 8012778:	20000c50 	.word	0x20000c50
 801277c:	20000850 	.word	0x20000850

08012780 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b084      	sub	sp, #16
 8012784:	af00      	add	r7, sp, #0
 8012786:	60ba      	str	r2, [r7, #8]
 8012788:	607b      	str	r3, [r7, #4]
 801278a:	4603      	mov	r3, r0
 801278c:	73fb      	strb	r3, [r7, #15]
 801278e:	460b      	mov	r3, r1
 8012790:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d005      	beq.n	80127a4 <GetFCntDown+0x24>
 8012798:	69bb      	ldr	r3, [r7, #24]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d002      	beq.n	80127a4 <GetFCntDown+0x24>
 801279e:	69fb      	ldr	r3, [r7, #28]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d101      	bne.n	80127a8 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80127a4:	2309      	movs	r3, #9
 80127a6:	e028      	b.n	80127fa <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 80127a8:	7bfb      	ldrb	r3, [r7, #15]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d016      	beq.n	80127dc <GetFCntDown+0x5c>
 80127ae:	2b01      	cmp	r3, #1
 80127b0:	d118      	bne.n	80127e4 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 80127b2:	79bb      	ldrb	r3, [r7, #6]
 80127b4:	2b01      	cmp	r3, #1
 80127b6:	d10d      	bne.n	80127d4 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80127b8:	7bbb      	ldrb	r3, [r7, #14]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d002      	beq.n	80127c4 <GetFCntDown+0x44>
 80127be:	7bbb      	ldrb	r3, [r7, #14]
 80127c0:	2b03      	cmp	r3, #3
 80127c2:	d103      	bne.n	80127cc <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 80127c4:	69bb      	ldr	r3, [r7, #24]
 80127c6:	2202      	movs	r2, #2
 80127c8:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 80127ca:	e00d      	b.n	80127e8 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 80127cc:	69bb      	ldr	r3, [r7, #24]
 80127ce:	2201      	movs	r2, #1
 80127d0:	701a      	strb	r2, [r3, #0]
            break;
 80127d2:	e009      	b.n	80127e8 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 80127d4:	69bb      	ldr	r3, [r7, #24]
 80127d6:	2203      	movs	r2, #3
 80127d8:	701a      	strb	r2, [r3, #0]
            break;
 80127da:	e005      	b.n	80127e8 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 80127dc:	69bb      	ldr	r3, [r7, #24]
 80127de:	2204      	movs	r2, #4
 80127e0:	701a      	strb	r2, [r3, #0]
            break;
 80127e2:	e001      	b.n	80127e8 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80127e4:	2305      	movs	r3, #5
 80127e6:	e008      	b.n	80127fa <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 80127e8:	69bb      	ldr	r3, [r7, #24]
 80127ea:	7818      	ldrb	r0, [r3, #0]
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	89db      	ldrh	r3, [r3, #14]
 80127f0:	69fa      	ldr	r2, [r7, #28]
 80127f2:	4619      	mov	r1, r3
 80127f4:	f004 fd90 	bl	8017318 <LoRaMacCryptoGetFCntDown>
 80127f8:	4603      	mov	r3, r0
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3710      	adds	r7, #16
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
	...

08012804 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8012804:	b5b0      	push	{r4, r5, r7, lr}
 8012806:	b084      	sub	sp, #16
 8012808:	af00      	add	r7, sp, #0
 801280a:	4603      	mov	r3, r0
 801280c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801280e:	2303      	movs	r3, #3
 8012810:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8012812:	4b6e      	ldr	r3, [pc, #440]	; (80129cc <SwitchClass+0x1c8>)
 8012814:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012818:	2b02      	cmp	r3, #2
 801281a:	f000 80bb 	beq.w	8012994 <SwitchClass+0x190>
 801281e:	2b02      	cmp	r3, #2
 8012820:	f300 80ce 	bgt.w	80129c0 <SwitchClass+0x1bc>
 8012824:	2b00      	cmp	r3, #0
 8012826:	d003      	beq.n	8012830 <SwitchClass+0x2c>
 8012828:	2b01      	cmp	r3, #1
 801282a:	f000 80a5 	beq.w	8012978 <SwitchClass+0x174>
 801282e:	e0c7      	b.n	80129c0 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8012830:	79fb      	ldrb	r3, [r7, #7]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d109      	bne.n	801284a <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012836:	4b65      	ldr	r3, [pc, #404]	; (80129cc <SwitchClass+0x1c8>)
 8012838:	4a64      	ldr	r2, [pc, #400]	; (80129cc <SwitchClass+0x1c8>)
 801283a:	3374      	adds	r3, #116	; 0x74
 801283c:	326c      	adds	r2, #108	; 0x6c
 801283e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012842:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8012846:	2300      	movs	r3, #0
 8012848:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 801284a:	79fb      	ldrb	r3, [r7, #7]
 801284c:	2b01      	cmp	r3, #1
 801284e:	d10c      	bne.n	801286a <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8012850:	79fb      	ldrb	r3, [r7, #7]
 8012852:	4618      	mov	r0, r3
 8012854:	f003 fc7e 	bl	8016154 <LoRaMacClassBSwitchClass>
 8012858:	4603      	mov	r3, r0
 801285a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 801285c:	7bfb      	ldrb	r3, [r7, #15]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d103      	bne.n	801286a <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8012862:	4a5a      	ldr	r2, [pc, #360]	; (80129cc <SwitchClass+0x1c8>)
 8012864:	79fb      	ldrb	r3, [r7, #7]
 8012866:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 801286a:	79fb      	ldrb	r3, [r7, #7]
 801286c:	2b02      	cmp	r3, #2
 801286e:	f040 80a2 	bne.w	80129b6 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012872:	4a56      	ldr	r2, [pc, #344]	; (80129cc <SwitchClass+0x1c8>)
 8012874:	79fb      	ldrb	r3, [r7, #7]
 8012876:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801287a:	4a55      	ldr	r2, [pc, #340]	; (80129d0 <SwitchClass+0x1cc>)
 801287c:	4b54      	ldr	r3, [pc, #336]	; (80129d0 <SwitchClass+0x1cc>)
 801287e:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8012882:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8012886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801288a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801288e:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012892:	4b4f      	ldr	r3, [pc, #316]	; (80129d0 <SwitchClass+0x1cc>)
 8012894:	2202      	movs	r2, #2
 8012896:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801289a:	2300      	movs	r3, #0
 801289c:	73bb      	strb	r3, [r7, #14]
 801289e:	e05b      	b.n	8012958 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80128a0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80128a4:	4949      	ldr	r1, [pc, #292]	; (80129cc <SwitchClass+0x1c8>)
 80128a6:	4613      	mov	r3, r2
 80128a8:	005b      	lsls	r3, r3, #1
 80128aa:	4413      	add	r3, r2
 80128ac:	011b      	lsls	r3, r3, #4
 80128ae:	440b      	add	r3, r1
 80128b0:	33e9      	adds	r3, #233	; 0xe9
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d049      	beq.n	801294c <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 80128b8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80128bc:	4943      	ldr	r1, [pc, #268]	; (80129cc <SwitchClass+0x1c8>)
 80128be:	4613      	mov	r3, r2
 80128c0:	005b      	lsls	r3, r3, #1
 80128c2:	4413      	add	r3, r2
 80128c4:	011b      	lsls	r3, r3, #4
 80128c6:	440b      	add	r3, r1
 80128c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80128cc:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80128ce:	2b02      	cmp	r3, #2
 80128d0:	d13c      	bne.n	801294c <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 80128d2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80128d6:	493d      	ldr	r1, [pc, #244]	; (80129cc <SwitchClass+0x1c8>)
 80128d8:	4613      	mov	r3, r2
 80128da:	005b      	lsls	r3, r3, #1
 80128dc:	4413      	add	r3, r2
 80128de:	011b      	lsls	r3, r3, #4
 80128e0:	440b      	add	r3, r1
 80128e2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	4a38      	ldr	r2, [pc, #224]	; (80129cc <SwitchClass+0x1c8>)
 80128ea:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 80128ec:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80128f0:	4936      	ldr	r1, [pc, #216]	; (80129cc <SwitchClass+0x1c8>)
 80128f2:	4613      	mov	r3, r2
 80128f4:	005b      	lsls	r3, r3, #1
 80128f6:	4413      	add	r3, r2
 80128f8:	011b      	lsls	r3, r3, #4
 80128fa:	440b      	add	r3, r1
 80128fc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012900:	f993 3000 	ldrsb.w	r3, [r3]
 8012904:	b2da      	uxtb	r2, r3
 8012906:	4b31      	ldr	r3, [pc, #196]	; (80129cc <SwitchClass+0x1c8>)
 8012908:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801290c:	4b30      	ldr	r3, [pc, #192]	; (80129d0 <SwitchClass+0x1cc>)
 801290e:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8012912:	4b2f      	ldr	r3, [pc, #188]	; (80129d0 <SwitchClass+0x1cc>)
 8012914:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012918:	4b2c      	ldr	r3, [pc, #176]	; (80129cc <SwitchClass+0x1c8>)
 801291a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801291c:	4a2c      	ldr	r2, [pc, #176]	; (80129d0 <SwitchClass+0x1cc>)
 801291e:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012922:	4b2a      	ldr	r3, [pc, #168]	; (80129cc <SwitchClass+0x1c8>)
 8012924:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8012928:	4b29      	ldr	r3, [pc, #164]	; (80129d0 <SwitchClass+0x1cc>)
 801292a:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801292e:	4b27      	ldr	r3, [pc, #156]	; (80129cc <SwitchClass+0x1c8>)
 8012930:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012934:	4b26      	ldr	r3, [pc, #152]	; (80129d0 <SwitchClass+0x1cc>)
 8012936:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801293a:	4b25      	ldr	r3, [pc, #148]	; (80129d0 <SwitchClass+0x1cc>)
 801293c:	2203      	movs	r2, #3
 801293e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8012942:	4b23      	ldr	r3, [pc, #140]	; (80129d0 <SwitchClass+0x1cc>)
 8012944:	2201      	movs	r2, #1
 8012946:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 801294a:	e009      	b.n	8012960 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801294c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012950:	b2db      	uxtb	r3, r3
 8012952:	3301      	adds	r3, #1
 8012954:	b2db      	uxtb	r3, r3
 8012956:	73bb      	strb	r3, [r7, #14]
 8012958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801295c:	2b00      	cmp	r3, #0
 801295e:	dd9f      	ble.n	80128a0 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8012960:	4b1b      	ldr	r3, [pc, #108]	; (80129d0 <SwitchClass+0x1cc>)
 8012962:	2200      	movs	r2, #0
 8012964:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8012968:	4b1a      	ldr	r3, [pc, #104]	; (80129d4 <SwitchClass+0x1d0>)
 801296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801296c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 801296e:	f001 fa29 	bl	8013dc4 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8012972:	2300      	movs	r3, #0
 8012974:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8012976:	e01e      	b.n	80129b6 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8012978:	79fb      	ldrb	r3, [r7, #7]
 801297a:	4618      	mov	r0, r3
 801297c:	f003 fbea 	bl	8016154 <LoRaMacClassBSwitchClass>
 8012980:	4603      	mov	r3, r0
 8012982:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8012984:	7bfb      	ldrb	r3, [r7, #15]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d117      	bne.n	80129ba <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801298a:	4a10      	ldr	r2, [pc, #64]	; (80129cc <SwitchClass+0x1c8>)
 801298c:	79fb      	ldrb	r3, [r7, #7]
 801298e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 8012992:	e012      	b.n	80129ba <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8012994:	79fb      	ldrb	r3, [r7, #7]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d111      	bne.n	80129be <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 801299a:	4b0d      	ldr	r3, [pc, #52]	; (80129d0 <SwitchClass+0x1cc>)
 801299c:	2206      	movs	r2, #6
 801299e:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 80129a2:	4a0a      	ldr	r2, [pc, #40]	; (80129cc <SwitchClass+0x1c8>)
 80129a4:	79fb      	ldrb	r3, [r7, #7]
 80129a6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80129aa:	4b0a      	ldr	r3, [pc, #40]	; (80129d4 <SwitchClass+0x1d0>)
 80129ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129ae:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 80129b0:	2300      	movs	r3, #0
 80129b2:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 80129b4:	e003      	b.n	80129be <SwitchClass+0x1ba>
            break;
 80129b6:	bf00      	nop
 80129b8:	e002      	b.n	80129c0 <SwitchClass+0x1bc>
            break;
 80129ba:	bf00      	nop
 80129bc:	e000      	b.n	80129c0 <SwitchClass+0x1bc>
            break;
 80129be:	bf00      	nop
        }
    }

    return status;
 80129c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80129c2:	4618      	mov	r0, r3
 80129c4:	3710      	adds	r7, #16
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bdb0      	pop	{r4, r5, r7, pc}
 80129ca:	bf00      	nop
 80129cc:	20000d6c 	.word	0x20000d6c
 80129d0:	20000850 	.word	0x20000850
 80129d4:	08020428 	.word	0x08020428

080129d8 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b086      	sub	sp, #24
 80129dc:	af00      	add	r7, sp, #0
 80129de:	4603      	mov	r3, r0
 80129e0:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80129e2:	4b10      	ldr	r3, [pc, #64]	; (8012a24 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80129e4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80129e8:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 80129ea:	79fb      	ldrb	r3, [r7, #7]
 80129ec:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80129ee:	230d      	movs	r3, #13
 80129f0:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80129f2:	4b0c      	ldr	r3, [pc, #48]	; (8012a24 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80129f4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d001      	beq.n	8012a00 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80129fc:	230e      	movs	r3, #14
 80129fe:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012a00:	4b08      	ldr	r3, [pc, #32]	; (8012a24 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012a02:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a06:	f107 0210 	add.w	r2, r7, #16
 8012a0a:	4611      	mov	r1, r2
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f005 faee 	bl	8017fee <RegionGetPhyParam>
 8012a12:	4603      	mov	r3, r0
 8012a14:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	b2db      	uxtb	r3, r3
}
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	3718      	adds	r7, #24
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}
 8012a22:	bf00      	nop
 8012a24:	20000d6c 	.word	0x20000d6c

08012a28 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	4603      	mov	r3, r0
 8012a30:	71fb      	strb	r3, [r7, #7]
 8012a32:	460b      	mov	r3, r1
 8012a34:	71bb      	strb	r3, [r7, #6]
 8012a36:	4613      	mov	r3, r2
 8012a38:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012a42:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012a46:	4618      	mov	r0, r3
 8012a48:	f7ff ffc6 	bl	80129d8 <GetMaxAppPayloadWithoutFOptsLength>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8012a50:	79fb      	ldrb	r3, [r7, #7]
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	797b      	ldrb	r3, [r7, #5]
 8012a56:	b29b      	uxth	r3, r3
 8012a58:	4413      	add	r3, r2
 8012a5a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8012a5c:	89ba      	ldrh	r2, [r7, #12]
 8012a5e:	89fb      	ldrh	r3, [r7, #14]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d804      	bhi.n	8012a6e <ValidatePayloadLength+0x46>
 8012a64:	89bb      	ldrh	r3, [r7, #12]
 8012a66:	2bff      	cmp	r3, #255	; 0xff
 8012a68:	d801      	bhi.n	8012a6e <ValidatePayloadLength+0x46>
    {
        return true;
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	e000      	b.n	8012a70 <ValidatePayloadLength+0x48>
    }
    return false;
 8012a6e:	2300      	movs	r3, #0
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	3710      	adds	r7, #16
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}

08012a78 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8012a78:	b590      	push	{r4, r7, lr}
 8012a7a:	b0a5      	sub	sp, #148	; 0x94
 8012a7c:	af02      	add	r7, sp, #8
 8012a7e:	6078      	str	r0, [r7, #4]
 8012a80:	4608      	mov	r0, r1
 8012a82:	4611      	mov	r1, r2
 8012a84:	461a      	mov	r2, r3
 8012a86:	4603      	mov	r3, r0
 8012a88:	70fb      	strb	r3, [r7, #3]
 8012a8a:	460b      	mov	r3, r1
 8012a8c:	70bb      	strb	r3, [r7, #2]
 8012a8e:	4613      	mov	r3, r2
 8012a90:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8012a92:	2300      	movs	r3, #0
 8012a94:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8012aa4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	f000 84ab 	beq.w	8013404 <ProcessMacCommands+0x98c>
 8012aae:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012ab2:	2b01      	cmp	r3, #1
 8012ab4:	f040 84ac 	bne.w	8013410 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8012ab8:	f000 bca4 	b.w	8013404 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8012abc:	78fb      	ldrb	r3, [r7, #3]
 8012abe:	687a      	ldr	r2, [r7, #4]
 8012ac0:	4413      	add	r3, r2
 8012ac2:	781b      	ldrb	r3, [r3, #0]
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f003 fe45 	bl	8016754 <LoRaMacCommandsGetCmdSize>
 8012aca:	4603      	mov	r3, r0
 8012acc:	461a      	mov	r2, r3
 8012ace:	78fb      	ldrb	r3, [r7, #3]
 8012ad0:	441a      	add	r2, r3
 8012ad2:	78bb      	ldrb	r3, [r7, #2]
 8012ad4:	429a      	cmp	r2, r3
 8012ad6:	f300 849d 	bgt.w	8013414 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8012ada:	78fb      	ldrb	r3, [r7, #3]
 8012adc:	1c5a      	adds	r2, r3, #1
 8012ade:	70fa      	strb	r2, [r7, #3]
 8012ae0:	461a      	mov	r2, r3
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	4413      	add	r3, r2
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	3b02      	subs	r3, #2
 8012aea:	2b11      	cmp	r3, #17
 8012aec:	f200 8494 	bhi.w	8013418 <ProcessMacCommands+0x9a0>
 8012af0:	a201      	add	r2, pc, #4	; (adr r2, 8012af8 <ProcessMacCommands+0x80>)
 8012af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012af6:	bf00      	nop
 8012af8:	08012b41 	.word	0x08012b41
 8012afc:	08012b83 	.word	0x08012b83
 8012b00:	08012cff 	.word	0x08012cff
 8012b04:	08012d3d 	.word	0x08012d3d
 8012b08:	08012e35 	.word	0x08012e35
 8012b0c:	08012e85 	.word	0x08012e85
 8012b10:	08012f41 	.word	0x08012f41
 8012b14:	08012f97 	.word	0x08012f97
 8012b18:	0801307d 	.word	0x0801307d
 8012b1c:	08013419 	.word	0x08013419
 8012b20:	08013419 	.word	0x08013419
 8012b24:	08013125 	.word	0x08013125
 8012b28:	08013419 	.word	0x08013419
 8012b2c:	08013419 	.word	0x08013419
 8012b30:	08013245 	.word	0x08013245
 8012b34:	08013279 	.word	0x08013279
 8012b38:	08013309 	.word	0x08013309
 8012b3c:	0801337f 	.word	0x0801337f
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8012b40:	2005      	movs	r0, #5
 8012b42:	f003 ffdf 	bl	8016b04 <LoRaMacConfirmQueueIsCmdActive>
 8012b46:	4603      	mov	r3, r0
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	f000 845b 	beq.w	8013404 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8012b4e:	2105      	movs	r1, #5
 8012b50:	2000      	movs	r0, #0
 8012b52:	f003 ff4b 	bl	80169ec <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8012b56:	78fb      	ldrb	r3, [r7, #3]
 8012b58:	1c5a      	adds	r2, r3, #1
 8012b5a:	70fa      	strb	r2, [r7, #3]
 8012b5c:	461a      	mov	r2, r3
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	4413      	add	r3, r2
 8012b62:	781a      	ldrb	r2, [r3, #0]
 8012b64:	4bb0      	ldr	r3, [pc, #704]	; (8012e28 <ProcessMacCommands+0x3b0>)
 8012b66:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8012b6a:	78fb      	ldrb	r3, [r7, #3]
 8012b6c:	1c5a      	adds	r2, r3, #1
 8012b6e:	70fa      	strb	r2, [r7, #3]
 8012b70:	461a      	mov	r2, r3
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	4413      	add	r3, r2
 8012b76:	781a      	ldrb	r2, [r3, #0]
 8012b78:	4bab      	ldr	r3, [pc, #684]	; (8012e28 <ProcessMacCommands+0x3b0>)
 8012b7a:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 8012b7e:	f000 bc41 	b.w	8013404 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8012b82:	2300      	movs	r3, #0
 8012b84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8012b94:	2300      	movs	r3, #0
 8012b96:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 8012b9a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8012b9e:	f083 0301 	eor.w	r3, r3, #1
 8012ba2:	b2db      	uxtb	r3, r3
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	f000 80a5 	beq.w	8012cf4 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 8012baa:	2301      	movs	r3, #1
 8012bac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8012bb0:	78fb      	ldrb	r3, [r7, #3]
 8012bb2:	3b01      	subs	r3, #1
 8012bb4:	687a      	ldr	r2, [r7, #4]
 8012bb6:	4413      	add	r3, r2
 8012bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012bba:	4b9c      	ldr	r3, [pc, #624]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012bbc:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8012bc0:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012bc4:	4b99      	ldr	r3, [pc, #612]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012bc6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012bca:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012bce:	4b97      	ldr	r3, [pc, #604]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012bd0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012bd4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012bd8:	4b94      	ldr	r3, [pc, #592]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012bda:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012bde:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012be2:	4b92      	ldr	r3, [pc, #584]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012be4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012be8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8012bec:	4b8f      	ldr	r3, [pc, #572]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012bee:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8012bf2:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8012bf4:	4b8d      	ldr	r3, [pc, #564]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012bf6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d008      	beq.n	8012c10 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8012bfe:	78ba      	ldrb	r2, [r7, #2]
 8012c00:	78fb      	ldrb	r3, [r7, #3]
 8012c02:	1ad3      	subs	r3, r2, r3
 8012c04:	b2db      	uxtb	r3, r3
 8012c06:	3301      	adds	r3, #1
 8012c08:	b2db      	uxtb	r3, r3
 8012c0a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8012c0e:	e002      	b.n	8012c16 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 8012c10:	2305      	movs	r3, #5
 8012c12:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8012c16:	4b85      	ldr	r3, [pc, #532]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012c18:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012c1c:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8012c20:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8012c24:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012c28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012c2c:	9301      	str	r3, [sp, #4]
 8012c2e:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8012c32:	9300      	str	r3, [sp, #0]
 8012c34:	4623      	mov	r3, r4
 8012c36:	f005 fa97 	bl	8018168 <RegionLinkAdrReq>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8012c40:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012c44:	f003 0307 	and.w	r3, r3, #7
 8012c48:	2b07      	cmp	r3, #7
 8012c4a:	d119      	bne.n	8012c80 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8012c4c:	4b77      	ldr	r3, [pc, #476]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012c4e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8012c52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8012c56:	429a      	cmp	r2, r3
 8012c58:	da03      	bge.n	8012c62 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8012c5a:	4b74      	ldr	r3, [pc, #464]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012c5c:	2201      	movs	r2, #1
 8012c5e:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8012c62:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8012c66:	4b71      	ldr	r3, [pc, #452]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012c68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8012c6c:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8012c70:	4b6e      	ldr	r3, [pc, #440]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8012c76:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8012c7a:	4b6c      	ldr	r3, [pc, #432]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012c7c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8012c80:	2300      	movs	r3, #0
 8012c82:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8012c86:	e00b      	b.n	8012ca0 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8012c88:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	4619      	mov	r1, r3
 8012c90:	2003      	movs	r0, #3
 8012c92:	f003 fbff 	bl	8016494 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8012c96:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8012c9a:	3301      	adds	r3, #1
 8012c9c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8012ca0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8012ca4:	4a62      	ldr	r2, [pc, #392]	; (8012e30 <ProcessMacCommands+0x3b8>)
 8012ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8012caa:	089b      	lsrs	r3, r3, #2
 8012cac:	b2db      	uxtb	r3, r3
 8012cae:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d3e8      	bcc.n	8012c88 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8012cb6:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8012cba:	78fb      	ldrb	r3, [r7, #3]
 8012cbc:	4413      	add	r3, r2
 8012cbe:	b2db      	uxtb	r3, r3
 8012cc0:	3b01      	subs	r3, #1
 8012cc2:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8012cc4:	78fa      	ldrb	r2, [r7, #3]
 8012cc6:	78bb      	ldrb	r3, [r7, #2]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d20a      	bcs.n	8012ce2 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8012ccc:	78fb      	ldrb	r3, [r7, #3]
 8012cce:	1c5a      	adds	r2, r3, #1
 8012cd0:	70fa      	strb	r2, [r7, #3]
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	4413      	add	r3, r2
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	2b03      	cmp	r3, #3
 8012cdc:	f43f af68 	beq.w	8012bb0 <ProcessMacCommands+0x138>
 8012ce0:	e000      	b.n	8012ce4 <ProcessMacCommands+0x26c>
                            break;
 8012ce2:	bf00      	nop

                    if( macIndex < commandsSize )
 8012ce4:	78fa      	ldrb	r2, [r7, #3]
 8012ce6:	78bb      	ldrb	r3, [r7, #2]
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	d206      	bcs.n	8012cfa <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 8012cec:	78fb      	ldrb	r3, [r7, #3]
 8012cee:	3b01      	subs	r3, #1
 8012cf0:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8012cf2:	e002      	b.n	8012cfa <ProcessMacCommands+0x282>
                    macIndex += 4;
 8012cf4:	78fb      	ldrb	r3, [r7, #3]
 8012cf6:	3304      	adds	r3, #4
 8012cf8:	70fb      	strb	r3, [r7, #3]
                break;
 8012cfa:	bf00      	nop
 8012cfc:	e382      	b.n	8013404 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8012cfe:	78fb      	ldrb	r3, [r7, #3]
 8012d00:	1c5a      	adds	r2, r3, #1
 8012d02:	70fa      	strb	r2, [r7, #3]
 8012d04:	461a      	mov	r2, r3
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	4413      	add	r3, r2
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	f003 030f 	and.w	r3, r3, #15
 8012d10:	b2da      	uxtb	r2, r3
 8012d12:	4b46      	ldr	r3, [pc, #280]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012d14:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8012d18:	4b44      	ldr	r3, [pc, #272]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012d1a:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8012d1e:	461a      	mov	r2, r3
 8012d20:	2301      	movs	r3, #1
 8012d22:	4093      	lsls	r3, r2
 8012d24:	b29a      	uxth	r2, r3
 8012d26:	4b41      	ldr	r3, [pc, #260]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012d28:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8012d2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012d30:	2200      	movs	r2, #0
 8012d32:	4619      	mov	r1, r3
 8012d34:	2004      	movs	r0, #4
 8012d36:	f003 fbad 	bl	8016494 <LoRaMacCommandsAddCmd>
                break;
 8012d3a:	e363      	b.n	8013404 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8012d3c:	2307      	movs	r3, #7
 8012d3e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8012d42:	78fb      	ldrb	r3, [r7, #3]
 8012d44:	687a      	ldr	r2, [r7, #4]
 8012d46:	4413      	add	r3, r2
 8012d48:	781b      	ldrb	r3, [r3, #0]
 8012d4a:	091b      	lsrs	r3, r3, #4
 8012d4c:	b2db      	uxtb	r3, r3
 8012d4e:	b25b      	sxtb	r3, r3
 8012d50:	f003 0307 	and.w	r3, r3, #7
 8012d54:	b25b      	sxtb	r3, r3
 8012d56:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8012d5a:	78fb      	ldrb	r3, [r7, #3]
 8012d5c:	687a      	ldr	r2, [r7, #4]
 8012d5e:	4413      	add	r3, r2
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	b25b      	sxtb	r3, r3
 8012d64:	f003 030f 	and.w	r3, r3, #15
 8012d68:	b25b      	sxtb	r3, r3
 8012d6a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8012d6e:	78fb      	ldrb	r3, [r7, #3]
 8012d70:	3301      	adds	r3, #1
 8012d72:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8012d74:	78fb      	ldrb	r3, [r7, #3]
 8012d76:	1c5a      	adds	r2, r3, #1
 8012d78:	70fa      	strb	r2, [r7, #3]
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	4413      	add	r3, r2
 8012d80:	781b      	ldrb	r3, [r3, #0]
 8012d82:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012d84:	78fb      	ldrb	r3, [r7, #3]
 8012d86:	1c5a      	adds	r2, r3, #1
 8012d88:	70fa      	strb	r2, [r7, #3]
 8012d8a:	461a      	mov	r2, r3
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	4413      	add	r3, r2
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	021a      	lsls	r2, r3, #8
 8012d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d96:	4313      	orrs	r3, r2
 8012d98:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012d9a:	78fb      	ldrb	r3, [r7, #3]
 8012d9c:	1c5a      	adds	r2, r3, #1
 8012d9e:	70fa      	strb	r2, [r7, #3]
 8012da0:	461a      	mov	r2, r3
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	4413      	add	r3, r2
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	041a      	lsls	r2, r3, #16
 8012daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dac:	4313      	orrs	r3, r2
 8012dae:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8012db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012db2:	2264      	movs	r2, #100	; 0x64
 8012db4:	fb02 f303 	mul.w	r3, r2, r3
 8012db8:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8012dba:	4b1c      	ldr	r3, [pc, #112]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012dbc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012dc0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012dc4:	4611      	mov	r1, r2
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f005 f9e8 	bl	801819c <RegionRxParamSetupReq>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8012dd2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012dd6:	f003 0307 	and.w	r3, r3, #7
 8012dda:	2b07      	cmp	r3, #7
 8012ddc:	d117      	bne.n	8012e0e <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8012dde:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8012de2:	b2da      	uxtb	r2, r3
 8012de4:	4b11      	ldr	r3, [pc, #68]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012de6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8012dea:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8012dee:	b2da      	uxtb	r2, r3
 8012df0:	4b0e      	ldr	r3, [pc, #56]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012df2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8012df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012df8:	4a0c      	ldr	r2, [pc, #48]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012dfa:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8012dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dfe:	4a0b      	ldr	r2, [pc, #44]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012e00:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8012e02:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8012e06:	b2da      	uxtb	r2, r3
 8012e08:	4b08      	ldr	r3, [pc, #32]	; (8012e2c <ProcessMacCommands+0x3b4>)
 8012e0a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 8012e0e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012e12:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8012e16:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012e1a:	2201      	movs	r2, #1
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	2005      	movs	r0, #5
 8012e20:	f003 fb38 	bl	8016494 <LoRaMacCommandsAddCmd>
                break;
 8012e24:	bf00      	nop
 8012e26:	e2ed      	b.n	8013404 <ProcessMacCommands+0x98c>
 8012e28:	20000850 	.word	0x20000850
 8012e2c:	20000d6c 	.word	0x20000d6c
 8012e30:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8012e34:	23ff      	movs	r3, #255	; 0xff
 8012e36:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8012e3a:	4bb7      	ldr	r3, [pc, #732]	; (8013118 <ProcessMacCommands+0x6a0>)
 8012e3c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d00d      	beq.n	8012e60 <ProcessMacCommands+0x3e8>
 8012e44:	4bb4      	ldr	r3, [pc, #720]	; (8013118 <ProcessMacCommands+0x6a0>)
 8012e46:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d007      	beq.n	8012e60 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8012e50:	4bb1      	ldr	r3, [pc, #708]	; (8013118 <ProcessMacCommands+0x6a0>)
 8012e52:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	4798      	blx	r3
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8012e60:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8012e64:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8012e68:	787b      	ldrb	r3, [r7, #1]
 8012e6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e6e:	b2db      	uxtb	r3, r3
 8012e70:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8012e74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012e78:	2202      	movs	r2, #2
 8012e7a:	4619      	mov	r1, r3
 8012e7c:	2006      	movs	r0, #6
 8012e7e:	f003 fb09 	bl	8016494 <LoRaMacCommandsAddCmd>
                break;
 8012e82:	e2bf      	b.n	8013404 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8012e84:	2303      	movs	r3, #3
 8012e86:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8012e8a:	78fb      	ldrb	r3, [r7, #3]
 8012e8c:	1c5a      	adds	r2, r3, #1
 8012e8e:	70fa      	strb	r2, [r7, #3]
 8012e90:	461a      	mov	r2, r3
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	4413      	add	r3, r2
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	b25b      	sxtb	r3, r3
 8012e9a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8012e9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012ea2:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8012ea4:	78fb      	ldrb	r3, [r7, #3]
 8012ea6:	1c5a      	adds	r2, r3, #1
 8012ea8:	70fa      	strb	r2, [r7, #3]
 8012eaa:	461a      	mov	r2, r3
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	4413      	add	r3, r2
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012eb4:	78fb      	ldrb	r3, [r7, #3]
 8012eb6:	1c5a      	adds	r2, r3, #1
 8012eb8:	70fa      	strb	r2, [r7, #3]
 8012eba:	461a      	mov	r2, r3
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	4413      	add	r3, r2
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	021a      	lsls	r2, r3, #8
 8012ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec6:	4313      	orrs	r3, r2
 8012ec8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012eca:	78fb      	ldrb	r3, [r7, #3]
 8012ecc:	1c5a      	adds	r2, r3, #1
 8012ece:	70fa      	strb	r2, [r7, #3]
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	4413      	add	r3, r2
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	041a      	lsls	r2, r3, #16
 8012eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012edc:	4313      	orrs	r3, r2
 8012ede:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8012ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee2:	2264      	movs	r2, #100	; 0x64
 8012ee4:	fb02 f303 	mul.w	r3, r2, r3
 8012ee8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8012eea:	2300      	movs	r3, #0
 8012eec:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8012eee:	78fb      	ldrb	r3, [r7, #3]
 8012ef0:	1c5a      	adds	r2, r3, #1
 8012ef2:	70fa      	strb	r2, [r7, #3]
 8012ef4:	461a      	mov	r2, r3
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	4413      	add	r3, r2
 8012efa:	781b      	ldrb	r3, [r3, #0]
 8012efc:	b25b      	sxtb	r3, r3
 8012efe:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8012f02:	4b86      	ldr	r3, [pc, #536]	; (801311c <ProcessMacCommands+0x6a4>)
 8012f04:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012f08:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012f0c:	4611      	mov	r1, r2
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f005 f957 	bl	80181c2 <RegionNewChannelReq>
 8012f14:	4603      	mov	r3, r0
 8012f16:	b2db      	uxtb	r3, r3
 8012f18:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012f1c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012f20:	b25b      	sxtb	r3, r3
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	db0a      	blt.n	8012f3c <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 8012f26:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012f2a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8012f2e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012f32:	2201      	movs	r2, #1
 8012f34:	4619      	mov	r1, r3
 8012f36:	2007      	movs	r0, #7
 8012f38:	f003 faac 	bl	8016494 <LoRaMacCommandsAddCmd>
                }
                break;
 8012f3c:	bf00      	nop
 8012f3e:	e261      	b.n	8013404 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8012f40:	78fb      	ldrb	r3, [r7, #3]
 8012f42:	1c5a      	adds	r2, r3, #1
 8012f44:	70fa      	strb	r2, [r7, #3]
 8012f46:	461a      	mov	r2, r3
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	4413      	add	r3, r2
 8012f4c:	781b      	ldrb	r3, [r3, #0]
 8012f4e:	f003 030f 	and.w	r3, r3, #15
 8012f52:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8012f56:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d104      	bne.n	8012f68 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 8012f5e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012f62:	3301      	adds	r3, #1
 8012f64:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8012f68:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012f70:	fb02 f303 	mul.w	r3, r2, r3
 8012f74:	461a      	mov	r2, r3
 8012f76:	4b69      	ldr	r3, [pc, #420]	; (801311c <ProcessMacCommands+0x6a4>)
 8012f78:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8012f7a:	4b68      	ldr	r3, [pc, #416]	; (801311c <ProcessMacCommands+0x6a4>)
 8012f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f7e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8012f82:	4a66      	ldr	r2, [pc, #408]	; (801311c <ProcessMacCommands+0x6a4>)
 8012f84:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8012f86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	4619      	mov	r1, r3
 8012f8e:	2008      	movs	r0, #8
 8012f90:	f003 fa80 	bl	8016494 <LoRaMacCommandsAddCmd>
                break;
 8012f94:	e236      	b.n	8013404 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8012f96:	78fb      	ldrb	r3, [r7, #3]
 8012f98:	1c5a      	adds	r2, r3, #1
 8012f9a:	70fa      	strb	r2, [r7, #3]
 8012f9c:	461a      	mov	r2, r3
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	4413      	add	r3, r2
 8012fa2:	781b      	ldrb	r3, [r3, #0]
 8012fa4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8012fae:	2300      	movs	r3, #0
 8012fb0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8012fb4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012fb8:	f003 0320 	and.w	r3, r3, #32
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d002      	beq.n	8012fc6 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8012fc6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012fca:	f003 0310 	and.w	r3, r3, #16
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d002      	beq.n	8012fd8 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8012fd8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012fdc:	f003 030f 	and.w	r3, r3, #15
 8012fe0:	b2db      	uxtb	r3, r3
 8012fe2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8012fe6:	4b4d      	ldr	r3, [pc, #308]	; (801311c <ProcessMacCommands+0x6a4>)
 8012fe8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012fec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012ff0:	4611      	mov	r1, r2
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f005 f8f8 	bl	80181e8 <RegionTxParamSetupReq>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ffe:	d03b      	beq.n	8013078 <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8013000:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8013004:	4b45      	ldr	r3, [pc, #276]	; (801311c <ProcessMacCommands+0x6a4>)
 8013006:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 801300a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801300e:	4b43      	ldr	r3, [pc, #268]	; (801311c <ProcessMacCommands+0x6a4>)
 8013010:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8013014:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013018:	461a      	mov	r2, r3
 801301a:	4b41      	ldr	r3, [pc, #260]	; (8013120 <ProcessMacCommands+0x6a8>)
 801301c:	5c9b      	ldrb	r3, [r3, r2]
 801301e:	4618      	mov	r0, r3
 8013020:	f7ed fe36 	bl	8000c90 <__aeabi_ui2f>
 8013024:	4603      	mov	r3, r0
 8013026:	4a3d      	ldr	r2, [pc, #244]	; (801311c <ProcessMacCommands+0x6a4>)
 8013028:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 801302c:	2302      	movs	r3, #2
 801302e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013032:	4b3a      	ldr	r3, [pc, #232]	; (801311c <ProcessMacCommands+0x6a4>)
 8013034:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013038:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801303c:	4b37      	ldr	r3, [pc, #220]	; (801311c <ProcessMacCommands+0x6a4>)
 801303e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013042:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013046:	4611      	mov	r1, r2
 8013048:	4618      	mov	r0, r3
 801304a:	f004 ffd0 	bl	8017fee <RegionGetPhyParam>
 801304e:	4603      	mov	r3, r0
 8013050:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8013052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013054:	b25a      	sxtb	r2, r3
 8013056:	4b31      	ldr	r3, [pc, #196]	; (801311c <ProcessMacCommands+0x6a4>)
 8013058:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801305c:	4293      	cmp	r3, r2
 801305e:	bfb8      	it	lt
 8013060:	4613      	movlt	r3, r2
 8013062:	b25a      	sxtb	r2, r3
 8013064:	4b2d      	ldr	r3, [pc, #180]	; (801311c <ProcessMacCommands+0x6a4>)
 8013066:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 801306a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801306e:	2200      	movs	r2, #0
 8013070:	4619      	mov	r1, r3
 8013072:	2009      	movs	r0, #9
 8013074:	f003 fa0e 	bl	8016494 <LoRaMacCommandsAddCmd>
                }
                break;
 8013078:	bf00      	nop
 801307a:	e1c3      	b.n	8013404 <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 801307c:	2303      	movs	r3, #3
 801307e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8013082:	78fb      	ldrb	r3, [r7, #3]
 8013084:	1c5a      	adds	r2, r3, #1
 8013086:	70fa      	strb	r2, [r7, #3]
 8013088:	461a      	mov	r2, r3
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	4413      	add	r3, r2
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8013094:	78fb      	ldrb	r3, [r7, #3]
 8013096:	1c5a      	adds	r2, r3, #1
 8013098:	70fa      	strb	r2, [r7, #3]
 801309a:	461a      	mov	r2, r3
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	4413      	add	r3, r2
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80130a4:	78fb      	ldrb	r3, [r7, #3]
 80130a6:	1c5a      	adds	r2, r3, #1
 80130a8:	70fa      	strb	r2, [r7, #3]
 80130aa:	461a      	mov	r2, r3
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	4413      	add	r3, r2
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	021a      	lsls	r2, r3, #8
 80130b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b6:	4313      	orrs	r3, r2
 80130b8:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80130ba:	78fb      	ldrb	r3, [r7, #3]
 80130bc:	1c5a      	adds	r2, r3, #1
 80130be:	70fa      	strb	r2, [r7, #3]
 80130c0:	461a      	mov	r2, r3
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	4413      	add	r3, r2
 80130c6:	781b      	ldrb	r3, [r3, #0]
 80130c8:	041a      	lsls	r2, r3, #16
 80130ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130cc:	4313      	orrs	r3, r2
 80130ce:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 80130d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d2:	2264      	movs	r2, #100	; 0x64
 80130d4:	fb02 f303 	mul.w	r3, r2, r3
 80130d8:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80130da:	4b10      	ldr	r3, [pc, #64]	; (801311c <ProcessMacCommands+0x6a4>)
 80130dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80130e0:	f107 0220 	add.w	r2, r7, #32
 80130e4:	4611      	mov	r1, r2
 80130e6:	4618      	mov	r0, r3
 80130e8:	f005 f891 	bl	801820e <RegionDlChannelReq>
 80130ec:	4603      	mov	r3, r0
 80130ee:	b2db      	uxtb	r3, r3
 80130f0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80130f4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80130f8:	b25b      	sxtb	r3, r3
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	db0a      	blt.n	8013114 <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 80130fe:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013102:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8013106:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801310a:	2201      	movs	r2, #1
 801310c:	4619      	mov	r1, r3
 801310e:	200a      	movs	r0, #10
 8013110:	f003 f9c0 	bl	8016494 <LoRaMacCommandsAddCmd>
                }
                break;
 8013114:	bf00      	nop
 8013116:	e175      	b.n	8013404 <ProcessMacCommands+0x98c>
 8013118:	20000850 	.word	0x20000850
 801311c:	20000d6c 	.word	0x20000d6c
 8013120:	08020394 	.word	0x08020394
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8013124:	2009      	movs	r0, #9
 8013126:	f003 fced 	bl	8016b04 <LoRaMacConfirmQueueIsCmdActive>
 801312a:	4603      	mov	r3, r0
 801312c:	2b00      	cmp	r3, #0
 801312e:	f000 8084 	beq.w	801323a <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8013132:	2109      	movs	r1, #9
 8013134:	2000      	movs	r0, #0
 8013136:	f003 fc59 	bl	80169ec <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 801313a:	f107 0318 	add.w	r3, r7, #24
 801313e:	2200      	movs	r2, #0
 8013140:	601a      	str	r2, [r3, #0]
 8013142:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8013144:	f107 0310 	add.w	r3, r7, #16
 8013148:	2200      	movs	r2, #0
 801314a:	601a      	str	r2, [r3, #0]
 801314c:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 801314e:	f107 0308 	add.w	r3, r7, #8
 8013152:	2200      	movs	r2, #0
 8013154:	601a      	str	r2, [r3, #0]
 8013156:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8013158:	78fb      	ldrb	r3, [r7, #3]
 801315a:	1c5a      	adds	r2, r3, #1
 801315c:	70fa      	strb	r2, [r7, #3]
 801315e:	461a      	mov	r2, r3
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	4413      	add	r3, r2
 8013164:	781b      	ldrb	r3, [r3, #0]
 8013166:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8013168:	78fb      	ldrb	r3, [r7, #3]
 801316a:	1c5a      	adds	r2, r3, #1
 801316c:	70fa      	strb	r2, [r7, #3]
 801316e:	461a      	mov	r2, r3
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	4413      	add	r3, r2
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	021a      	lsls	r2, r3, #8
 8013178:	69bb      	ldr	r3, [r7, #24]
 801317a:	4313      	orrs	r3, r2
 801317c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801317e:	78fb      	ldrb	r3, [r7, #3]
 8013180:	1c5a      	adds	r2, r3, #1
 8013182:	70fa      	strb	r2, [r7, #3]
 8013184:	461a      	mov	r2, r3
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	4413      	add	r3, r2
 801318a:	781b      	ldrb	r3, [r3, #0]
 801318c:	041a      	lsls	r2, r3, #16
 801318e:	69bb      	ldr	r3, [r7, #24]
 8013190:	4313      	orrs	r3, r2
 8013192:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8013194:	78fb      	ldrb	r3, [r7, #3]
 8013196:	1c5a      	adds	r2, r3, #1
 8013198:	70fa      	strb	r2, [r7, #3]
 801319a:	461a      	mov	r2, r3
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	4413      	add	r3, r2
 80131a0:	781b      	ldrb	r3, [r3, #0]
 80131a2:	061a      	lsls	r2, r3, #24
 80131a4:	69bb      	ldr	r3, [r7, #24]
 80131a6:	4313      	orrs	r3, r2
 80131a8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80131aa:	78fb      	ldrb	r3, [r7, #3]
 80131ac:	1c5a      	adds	r2, r3, #1
 80131ae:	70fa      	strb	r2, [r7, #3]
 80131b0:	461a      	mov	r2, r3
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	4413      	add	r3, r2
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	b21b      	sxth	r3, r3
 80131ba:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80131bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80131c0:	461a      	mov	r2, r3
 80131c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80131c6:	fb02 f303 	mul.w	r3, r2, r3
 80131ca:	121b      	asrs	r3, r3, #8
 80131cc:	b21b      	sxth	r3, r3
 80131ce:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80131d0:	f107 0310 	add.w	r3, r7, #16
 80131d4:	f107 0218 	add.w	r2, r7, #24
 80131d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80131dc:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80131e0:	693a      	ldr	r2, [r7, #16]
 80131e2:	4b8f      	ldr	r3, [pc, #572]	; (8013420 <ProcessMacCommands+0x9a8>)
 80131e4:	4413      	add	r3, r2
 80131e6:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80131e8:	f107 0308 	add.w	r3, r7, #8
 80131ec:	4618      	mov	r0, r3
 80131ee:	f00a fee9 	bl	801dfc4 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80131f2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80131f6:	4b8b      	ldr	r3, [pc, #556]	; (8013424 <ProcessMacCommands+0x9ac>)
 80131f8:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 80131fc:	9200      	str	r2, [sp, #0]
 80131fe:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8013202:	f107 0210 	add.w	r2, r7, #16
 8013206:	ca06      	ldmia	r2, {r1, r2}
 8013208:	f00a fe75 	bl	801def6 <SysTimeSub>
 801320c:	f107 0010 	add.w	r0, r7, #16
 8013210:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013212:	9300      	str	r3, [sp, #0]
 8013214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013216:	f107 0208 	add.w	r2, r7, #8
 801321a:	ca06      	ldmia	r2, {r1, r2}
 801321c:	f00a fe32 	bl	801de84 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8013220:	f107 0310 	add.w	r3, r7, #16
 8013224:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013228:	f00a fe9e 	bl	801df68 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 801322c:	f002 ffd0 	bl	80161d0 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8013230:	4b7c      	ldr	r3, [pc, #496]	; (8013424 <ProcessMacCommands+0x9ac>)
 8013232:	2201      	movs	r2, #1
 8013234:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8013238:	e0e4      	b.n	8013404 <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 801323a:	4b7a      	ldr	r3, [pc, #488]	; (8013424 <ProcessMacCommands+0x9ac>)
 801323c:	2200      	movs	r2, #0
 801323e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 8013242:	e0df      	b.n	8013404 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8013244:	200c      	movs	r0, #12
 8013246:	f003 fc5d 	bl	8016b04 <LoRaMacConfirmQueueIsCmdActive>
 801324a:	4603      	mov	r3, r0
 801324c:	2b00      	cmp	r3, #0
 801324e:	f000 80d9 	beq.w	8013404 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8013252:	210c      	movs	r1, #12
 8013254:	2000      	movs	r0, #0
 8013256:	f003 fbc9 	bl	80169ec <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 801325a:	4b72      	ldr	r3, [pc, #456]	; (8013424 <ProcessMacCommands+0x9ac>)
 801325c:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8013260:	2b04      	cmp	r3, #4
 8013262:	f000 80cf 	beq.w	8013404 <ProcessMacCommands+0x98c>
 8013266:	4b6f      	ldr	r3, [pc, #444]	; (8013424 <ProcessMacCommands+0x9ac>)
 8013268:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 801326c:	2b05      	cmp	r3, #5
 801326e:	f000 80c9 	beq.w	8013404 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8013272:	f002 ff8e 	bl	8016192 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8013276:	e0c5      	b.n	8013404 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8013278:	2303      	movs	r3, #3
 801327a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 801327e:	2300      	movs	r3, #0
 8013280:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8013282:	78fb      	ldrb	r3, [r7, #3]
 8013284:	1c5a      	adds	r2, r3, #1
 8013286:	70fa      	strb	r2, [r7, #3]
 8013288:	461a      	mov	r2, r3
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	4413      	add	r3, r2
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8013292:	78fb      	ldrb	r3, [r7, #3]
 8013294:	1c5a      	adds	r2, r3, #1
 8013296:	70fa      	strb	r2, [r7, #3]
 8013298:	461a      	mov	r2, r3
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	4413      	add	r3, r2
 801329e:	781b      	ldrb	r3, [r3, #0]
 80132a0:	021b      	lsls	r3, r3, #8
 80132a2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80132a4:	4313      	orrs	r3, r2
 80132a6:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80132a8:	78fb      	ldrb	r3, [r7, #3]
 80132aa:	1c5a      	adds	r2, r3, #1
 80132ac:	70fa      	strb	r2, [r7, #3]
 80132ae:	461a      	mov	r2, r3
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	4413      	add	r3, r2
 80132b4:	781b      	ldrb	r3, [r3, #0]
 80132b6:	041b      	lsls	r3, r3, #16
 80132b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80132ba:	4313      	orrs	r3, r2
 80132bc:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 80132be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80132c0:	2264      	movs	r2, #100	; 0x64
 80132c2:	fb02 f303 	mul.w	r3, r2, r3
 80132c6:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80132c8:	78fb      	ldrb	r3, [r7, #3]
 80132ca:	1c5a      	adds	r2, r3, #1
 80132cc:	70fa      	strb	r2, [r7, #3]
 80132ce:	461a      	mov	r2, r3
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	4413      	add	r3, r2
 80132d4:	781b      	ldrb	r3, [r3, #0]
 80132d6:	f003 030f 	and.w	r3, r3, #15
 80132da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80132de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80132e2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80132e4:	4618      	mov	r0, r3
 80132e6:	f002 ff5a 	bl	801619e <LoRaMacClassBPingSlotChannelReq>
 80132ea:	4603      	mov	r3, r0
 80132ec:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 80132f0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80132f4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80132f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80132fc:	2201      	movs	r2, #1
 80132fe:	4619      	mov	r1, r3
 8013300:	2011      	movs	r0, #17
 8013302:	f003 f8c7 	bl	8016494 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 8013306:	e07d      	b.n	8013404 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8013308:	200d      	movs	r0, #13
 801330a:	f003 fbfb 	bl	8016b04 <LoRaMacConfirmQueueIsCmdActive>
 801330e:	4603      	mov	r3, r0
 8013310:	2b00      	cmp	r3, #0
 8013312:	d077      	beq.n	8013404 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8013314:	210d      	movs	r1, #13
 8013316:	2000      	movs	r0, #0
 8013318:	f003 fb68 	bl	80169ec <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 801331c:	2300      	movs	r3, #0
 801331e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8013322:	2300      	movs	r3, #0
 8013324:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8013328:	78fb      	ldrb	r3, [r7, #3]
 801332a:	1c5a      	adds	r2, r3, #1
 801332c:	70fa      	strb	r2, [r7, #3]
 801332e:	461a      	mov	r2, r3
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	4413      	add	r3, r2
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 801333a:	78fb      	ldrb	r3, [r7, #3]
 801333c:	1c5a      	adds	r2, r3, #1
 801333e:	70fa      	strb	r2, [r7, #3]
 8013340:	461a      	mov	r2, r3
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	4413      	add	r3, r2
 8013346:	781b      	ldrb	r3, [r3, #0]
 8013348:	021b      	lsls	r3, r3, #8
 801334a:	b21a      	sxth	r2, r3
 801334c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8013350:	4313      	orrs	r3, r2
 8013352:	b21b      	sxth	r3, r3
 8013354:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8013358:	78fb      	ldrb	r3, [r7, #3]
 801335a:	1c5a      	adds	r2, r3, #1
 801335c:	70fa      	strb	r2, [r7, #3]
 801335e:	461a      	mov	r2, r3
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	4413      	add	r3, r2
 8013364:	781b      	ldrb	r3, [r3, #0]
 8013366:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 801336a:	4b2f      	ldr	r3, [pc, #188]	; (8013428 <ProcessMacCommands+0x9b0>)
 801336c:	681a      	ldr	r2, [r3, #0]
 801336e:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8013372:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8013376:	4618      	mov	r0, r3
 8013378:	f002 ff1d 	bl	80161b6 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 801337c:	e042      	b.n	8013404 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 801337e:	2300      	movs	r3, #0
 8013380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8013384:	78fb      	ldrb	r3, [r7, #3]
 8013386:	1c5a      	adds	r2, r3, #1
 8013388:	70fa      	strb	r2, [r7, #3]
 801338a:	461a      	mov	r2, r3
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	4413      	add	r3, r2
 8013390:	781b      	ldrb	r3, [r3, #0]
 8013392:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8013396:	78fb      	ldrb	r3, [r7, #3]
 8013398:	1c5a      	adds	r2, r3, #1
 801339a:	70fa      	strb	r2, [r7, #3]
 801339c:	461a      	mov	r2, r3
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	4413      	add	r3, r2
 80133a2:	781b      	ldrb	r3, [r3, #0]
 80133a4:	021b      	lsls	r3, r3, #8
 80133a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80133aa:	4313      	orrs	r3, r2
 80133ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80133b0:	78fb      	ldrb	r3, [r7, #3]
 80133b2:	1c5a      	adds	r2, r3, #1
 80133b4:	70fa      	strb	r2, [r7, #3]
 80133b6:	461a      	mov	r2, r3
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	4413      	add	r3, r2
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	041b      	lsls	r3, r3, #16
 80133c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80133c4:	4313      	orrs	r3, r2
 80133c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 80133ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80133ce:	2264      	movs	r2, #100	; 0x64
 80133d0:	fb02 f303 	mul.w	r3, r2, r3
 80133d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80133d8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80133dc:	f002 fefe 	bl	80161dc <LoRaMacClassBBeaconFreqReq>
 80133e0:	4603      	mov	r3, r0
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d003      	beq.n	80133ee <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 80133e6:	2301      	movs	r3, #1
 80133e8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80133ec:	e002      	b.n	80133f4 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80133ee:	2300      	movs	r3, #0
 80133f0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80133f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80133f8:	2201      	movs	r2, #1
 80133fa:	4619      	mov	r1, r3
 80133fc:	2013      	movs	r0, #19
 80133fe:	f003 f849 	bl	8016494 <LoRaMacCommandsAddCmd>
                }
                break;
 8013402:	bf00      	nop
    while( macIndex < commandsSize )
 8013404:	78fa      	ldrb	r2, [r7, #3]
 8013406:	78bb      	ldrb	r3, [r7, #2]
 8013408:	429a      	cmp	r2, r3
 801340a:	f4ff ab57 	bcc.w	8012abc <ProcessMacCommands+0x44>
 801340e:	e004      	b.n	801341a <ProcessMacCommands+0x9a2>
        return;
 8013410:	bf00      	nop
 8013412:	e002      	b.n	801341a <ProcessMacCommands+0x9a2>
            return;
 8013414:	bf00      	nop
 8013416:	e000      	b.n	801341a <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8013418:	bf00      	nop
        }
    }
}
 801341a:	378c      	adds	r7, #140	; 0x8c
 801341c:	46bd      	mov	sp, r7
 801341e:	bd90      	pop	{r4, r7, pc}
 8013420:	12d53d80 	.word	0x12d53d80
 8013424:	20000850 	.word	0x20000850
 8013428:	2000199c 	.word	0x2000199c

0801342c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b08e      	sub	sp, #56	; 0x38
 8013430:	af02      	add	r7, sp, #8
 8013432:	60f8      	str	r0, [r7, #12]
 8013434:	607a      	str	r2, [r7, #4]
 8013436:	461a      	mov	r2, r3
 8013438:	460b      	mov	r3, r1
 801343a:	72fb      	strb	r3, [r7, #11]
 801343c:	4613      	mov	r3, r2
 801343e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013440:	2303      	movs	r3, #3
 8013442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013446:	4b66      	ldr	r3, [pc, #408]	; (80135e0 <Send+0x1b4>)
 8013448:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801344c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8013450:	4b63      	ldr	r3, [pc, #396]	; (80135e0 <Send+0x1b4>)
 8013452:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013456:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801345a:	4b61      	ldr	r3, [pc, #388]	; (80135e0 <Send+0x1b4>)
 801345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801345e:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8013460:	4b5f      	ldr	r3, [pc, #380]	; (80135e0 <Send+0x1b4>)
 8013462:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8013466:	2b00      	cmp	r3, #0
 8013468:	d101      	bne.n	801346e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801346a:	2307      	movs	r3, #7
 801346c:	e0b4      	b.n	80135d8 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801346e:	4b5c      	ldr	r3, [pc, #368]	; (80135e0 <Send+0x1b4>)
 8013470:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8013474:	2b00      	cmp	r3, #0
 8013476:	d102      	bne.n	801347e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8013478:	4b59      	ldr	r3, [pc, #356]	; (80135e0 <Send+0x1b4>)
 801347a:	2200      	movs	r2, #0
 801347c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 801347e:	2300      	movs	r3, #0
 8013480:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8013484:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013488:	f36f 0303 	bfc	r3, #0, #4
 801348c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8013490:	4b53      	ldr	r3, [pc, #332]	; (80135e0 <Send+0x1b4>)
 8013492:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8013496:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801349a:	f362 13c7 	bfi	r3, r2, #7, #1
 801349e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80134a2:	4b4f      	ldr	r3, [pc, #316]	; (80135e0 <Send+0x1b4>)
 80134a4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80134a8:	2b01      	cmp	r3, #1
 80134aa:	d106      	bne.n	80134ba <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 80134ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80134b0:	f043 0310 	orr.w	r3, r3, #16
 80134b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80134b8:	e005      	b.n	80134c6 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80134ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80134be:	f36f 1304 	bfc	r3, #4, #1
 80134c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80134c6:	4b46      	ldr	r3, [pc, #280]	; (80135e0 <Send+0x1b4>)
 80134c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d005      	beq.n	80134dc <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80134d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80134d4:	f043 0320 	orr.w	r3, r3, #32
 80134d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 80134dc:	2301      	movs	r3, #1
 80134de:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80134e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80134e4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80134e8:	b2db      	uxtb	r3, r3
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	bf14      	ite	ne
 80134ee:	2301      	movne	r3, #1
 80134f0:	2300      	moveq	r3, #0
 80134f2:	b2db      	uxtb	r3, r3
 80134f4:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80134f6:	4b3a      	ldr	r3, [pc, #232]	; (80135e0 <Send+0x1b4>)
 80134f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134fa:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80134fc:	4b38      	ldr	r3, [pc, #224]	; (80135e0 <Send+0x1b4>)
 80134fe:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8013502:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8013504:	4b36      	ldr	r3, [pc, #216]	; (80135e0 <Send+0x1b4>)
 8013506:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 801350a:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801350c:	4b34      	ldr	r3, [pc, #208]	; (80135e0 <Send+0x1b4>)
 801350e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013512:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013516:	4b32      	ldr	r3, [pc, #200]	; (80135e0 <Send+0x1b4>)
 8013518:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801351c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013520:	4b2f      	ldr	r3, [pc, #188]	; (80135e0 <Send+0x1b4>)
 8013522:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 801352a:	4b2d      	ldr	r3, [pc, #180]	; (80135e0 <Send+0x1b4>)
 801352c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013530:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8013534:	4b2a      	ldr	r3, [pc, #168]	; (80135e0 <Send+0x1b4>)
 8013536:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801353a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 801353e:	f107 0014 	add.w	r0, r7, #20
 8013542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013546:	9300      	str	r3, [sp, #0]
 8013548:	4b26      	ldr	r3, [pc, #152]	; (80135e4 <Send+0x1b8>)
 801354a:	4a27      	ldr	r2, [pc, #156]	; (80135e8 <Send+0x1bc>)
 801354c:	4927      	ldr	r1, [pc, #156]	; (80135ec <Send+0x1c0>)
 801354e:	f002 fcbf 	bl	8015ed0 <LoRaMacAdrCalcNext>
 8013552:	4603      	mov	r3, r0
 8013554:	461a      	mov	r2, r3
 8013556:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801355a:	f362 1386 	bfi	r3, r2, #6, #1
 801355e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8013562:	7afa      	ldrb	r2, [r7, #11]
 8013564:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8013568:	893b      	ldrh	r3, [r7, #8]
 801356a:	9300      	str	r3, [sp, #0]
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	68f8      	ldr	r0, [r7, #12]
 8013570:	f000 fc72 	bl	8013e58 <PrepareFrame>
 8013574:	4603      	mov	r3, r0
 8013576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 801357a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801357e:	2b00      	cmp	r3, #0
 8013580:	d003      	beq.n	801358a <Send+0x15e>
 8013582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013586:	2b0a      	cmp	r3, #10
 8013588:	d107      	bne.n	801359a <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 801358a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801358e:	4618      	mov	r0, r3
 8013590:	f000 f962 	bl	8013858 <ScheduleTx>
 8013594:	4603      	mov	r3, r0
 8013596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 801359a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d00a      	beq.n	80135b8 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 80135a2:	4a0f      	ldr	r2, [pc, #60]	; (80135e0 <Send+0x1b4>)
 80135a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80135a8:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 80135ac:	4a0c      	ldr	r2, [pc, #48]	; (80135e0 <Send+0x1b4>)
 80135ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80135b2:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 80135b6:	e00d      	b.n	80135d4 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 80135b8:	4b09      	ldr	r3, [pc, #36]	; (80135e0 <Send+0x1b4>)
 80135ba:	2200      	movs	r2, #0
 80135bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80135c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135c2:	4a07      	ldr	r2, [pc, #28]	; (80135e0 <Send+0x1b4>)
 80135c4:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80135c6:	f003 f80b 	bl	80165e0 <LoRaMacCommandsRemoveNoneStickyCmds>
 80135ca:	4603      	mov	r3, r0
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d001      	beq.n	80135d4 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80135d0:	2313      	movs	r3, #19
 80135d2:	e001      	b.n	80135d8 <Send+0x1ac>
        }
    }
    return status;
 80135d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80135d8:	4618      	mov	r0, r3
 80135da:	3730      	adds	r7, #48	; 0x30
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}
 80135e0:	20000d6c 	.word	0x20000d6c
 80135e4:	20000dd4 	.word	0x20000dd4
 80135e8:	20000da4 	.word	0x20000da4
 80135ec:	20000da5 	.word	0x20000da5

080135f0 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b084      	sub	sp, #16
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	4603      	mov	r3, r0
 80135f8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80135fa:	2300      	movs	r3, #0
 80135fc:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80135fe:	2300      	movs	r3, #0
 8013600:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8013602:	2301      	movs	r3, #1
 8013604:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8013606:	79fb      	ldrb	r3, [r7, #7]
 8013608:	2bff      	cmp	r3, #255	; 0xff
 801360a:	d11f      	bne.n	801364c <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 801360c:	2000      	movs	r0, #0
 801360e:	f7ff f8f9 	bl	8012804 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8013612:	4b15      	ldr	r3, [pc, #84]	; (8013668 <SendReJoinReq+0x78>)
 8013614:	2200      	movs	r2, #0
 8013616:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 801361a:	4b13      	ldr	r3, [pc, #76]	; (8013668 <SendReJoinReq+0x78>)
 801361c:	4a13      	ldr	r2, [pc, #76]	; (801366c <SendReJoinReq+0x7c>)
 801361e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013622:	4b11      	ldr	r3, [pc, #68]	; (8013668 <SendReJoinReq+0x78>)
 8013624:	22ff      	movs	r2, #255	; 0xff
 8013626:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 801362a:	7b3b      	ldrb	r3, [r7, #12]
 801362c:	f36f 1347 	bfc	r3, #5, #3
 8013630:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8013632:	7b3a      	ldrb	r2, [r7, #12]
 8013634:	4b0c      	ldr	r3, [pc, #48]	; (8013668 <SendReJoinReq+0x78>)
 8013636:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 801363a:	480d      	ldr	r0, [pc, #52]	; (8013670 <SendReJoinReq+0x80>)
 801363c:	f7fb ff38 	bl	800f4b0 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8013640:	480c      	ldr	r0, [pc, #48]	; (8013674 <SendReJoinReq+0x84>)
 8013642:	f7fb ff05 	bl	800f450 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8013646:	2300      	movs	r3, #0
 8013648:	73fb      	strb	r3, [r7, #15]

            break;
 801364a:	e002      	b.n	8013652 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801364c:	2302      	movs	r3, #2
 801364e:	73bb      	strb	r3, [r7, #14]
            break;
 8013650:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8013652:	7bfb      	ldrb	r3, [r7, #15]
 8013654:	4618      	mov	r0, r3
 8013656:	f000 f8ff 	bl	8013858 <ScheduleTx>
 801365a:	4603      	mov	r3, r0
 801365c:	73bb      	strb	r3, [r7, #14]
    return status;
 801365e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013660:	4618      	mov	r0, r3
 8013662:	3710      	adds	r7, #16
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}
 8013668:	20000850 	.word	0x20000850
 801366c:	20000852 	.word	0x20000852
 8013670:	2000095e 	.word	0x2000095e
 8013674:	20000966 	.word	0x20000966

08013678 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8013678:	b580      	push	{r7, lr}
 801367a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801367c:	f002 fd38 	bl	80160f0 <LoRaMacClassBIsBeaconExpected>
 8013680:	4603      	mov	r3, r0
 8013682:	2b00      	cmp	r3, #0
 8013684:	d001      	beq.n	801368a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8013686:	230e      	movs	r3, #14
 8013688:	e013      	b.n	80136b2 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801368a:	4b0b      	ldr	r3, [pc, #44]	; (80136b8 <CheckForClassBCollision+0x40>)
 801368c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013690:	2b01      	cmp	r3, #1
 8013692:	d10d      	bne.n	80136b0 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8013694:	f002 fd33 	bl	80160fe <LoRaMacClassBIsPingExpected>
 8013698:	4603      	mov	r3, r0
 801369a:	2b00      	cmp	r3, #0
 801369c:	d001      	beq.n	80136a2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801369e:	230f      	movs	r3, #15
 80136a0:	e007      	b.n	80136b2 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80136a2:	f002 fd33 	bl	801610c <LoRaMacClassBIsMulticastExpected>
 80136a6:	4603      	mov	r3, r0
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d001      	beq.n	80136b0 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80136ac:	230f      	movs	r3, #15
 80136ae:	e000      	b.n	80136b2 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 80136b0:	2300      	movs	r3, #0
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	bf00      	nop
 80136b8:	20000d6c 	.word	0x20000d6c

080136bc <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80136bc:	b590      	push	{r4, r7, lr}
 80136be:	b083      	sub	sp, #12
 80136c0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80136c2:	4b2d      	ldr	r3, [pc, #180]	; (8013778 <ComputeRxWindowParameters+0xbc>)
 80136c4:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80136c8:	4b2b      	ldr	r3, [pc, #172]	; (8013778 <ComputeRxWindowParameters+0xbc>)
 80136ca:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80136ce:	4b2a      	ldr	r3, [pc, #168]	; (8013778 <ComputeRxWindowParameters+0xbc>)
 80136d0:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 80136d4:	4b28      	ldr	r3, [pc, #160]	; (8013778 <ComputeRxWindowParameters+0xbc>)
 80136d6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80136da:	4b27      	ldr	r3, [pc, #156]	; (8013778 <ComputeRxWindowParameters+0xbc>)
 80136dc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80136e0:	b25b      	sxtb	r3, r3
 80136e2:	f004 fdd9 	bl	8018298 <RegionApplyDrOffset>
 80136e6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80136e8:	b259      	sxtb	r1, r3
 80136ea:	4b23      	ldr	r3, [pc, #140]	; (8013778 <ComputeRxWindowParameters+0xbc>)
 80136ec:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80136f0:	4b21      	ldr	r3, [pc, #132]	; (8013778 <ComputeRxWindowParameters+0xbc>)
 80136f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80136f4:	4821      	ldr	r0, [pc, #132]	; (801377c <ComputeRxWindowParameters+0xc0>)
 80136f6:	9000      	str	r0, [sp, #0]
 80136f8:	4620      	mov	r0, r4
 80136fa:	f004 fcef 	bl	80180dc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80136fe:	4b1e      	ldr	r3, [pc, #120]	; (8013778 <ComputeRxWindowParameters+0xbc>)
 8013700:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8013704:	4b1c      	ldr	r3, [pc, #112]	; (8013778 <ComputeRxWindowParameters+0xbc>)
 8013706:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801370a:	b259      	sxtb	r1, r3
 801370c:	4b1a      	ldr	r3, [pc, #104]	; (8013778 <ComputeRxWindowParameters+0xbc>)
 801370e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8013712:	4b19      	ldr	r3, [pc, #100]	; (8013778 <ComputeRxWindowParameters+0xbc>)
 8013714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013716:	4c1a      	ldr	r4, [pc, #104]	; (8013780 <ComputeRxWindowParameters+0xc4>)
 8013718:	9400      	str	r4, [sp, #0]
 801371a:	f004 fcdf 	bl	80180dc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801371e:	4b16      	ldr	r3, [pc, #88]	; (8013778 <ComputeRxWindowParameters+0xbc>)
 8013720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013722:	4a18      	ldr	r2, [pc, #96]	; (8013784 <ComputeRxWindowParameters+0xc8>)
 8013724:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8013728:	4413      	add	r3, r2
 801372a:	4a16      	ldr	r2, [pc, #88]	; (8013784 <ComputeRxWindowParameters+0xc8>)
 801372c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8013730:	4b11      	ldr	r3, [pc, #68]	; (8013778 <ComputeRxWindowParameters+0xbc>)
 8013732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013734:	4a13      	ldr	r2, [pc, #76]	; (8013784 <ComputeRxWindowParameters+0xc8>)
 8013736:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 801373a:	4413      	add	r3, r2
 801373c:	4a11      	ldr	r2, [pc, #68]	; (8013784 <ComputeRxWindowParameters+0xc8>)
 801373e:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8013742:	4b10      	ldr	r3, [pc, #64]	; (8013784 <ComputeRxWindowParameters+0xc8>)
 8013744:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013748:	2b04      	cmp	r3, #4
 801374a:	d011      	beq.n	8013770 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801374c:	4b0a      	ldr	r3, [pc, #40]	; (8013778 <ComputeRxWindowParameters+0xbc>)
 801374e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013750:	4a0c      	ldr	r2, [pc, #48]	; (8013784 <ComputeRxWindowParameters+0xc8>)
 8013752:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8013756:	4413      	add	r3, r2
 8013758:	4a0a      	ldr	r2, [pc, #40]	; (8013784 <ComputeRxWindowParameters+0xc8>)
 801375a:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801375e:	4b06      	ldr	r3, [pc, #24]	; (8013778 <ComputeRxWindowParameters+0xbc>)
 8013760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013762:	4a08      	ldr	r2, [pc, #32]	; (8013784 <ComputeRxWindowParameters+0xc8>)
 8013764:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8013768:	4413      	add	r3, r2
 801376a:	4a06      	ldr	r2, [pc, #24]	; (8013784 <ComputeRxWindowParameters+0xc8>)
 801376c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8013770:	bf00      	nop
 8013772:	3704      	adds	r7, #4
 8013774:	46bd      	mov	sp, r7
 8013776:	bd90      	pop	{r4, r7, pc}
 8013778:	20000d6c 	.word	0x20000d6c
 801377c:	20000c08 	.word	0x20000c08
 8013780:	20000c20 	.word	0x20000c20
 8013784:	20000850 	.word	0x20000850

08013788 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b082      	sub	sp, #8
 801378c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801378e:	2300      	movs	r3, #0
 8013790:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8013792:	4b13      	ldr	r3, [pc, #76]	; (80137e0 <VerifyTxFrame+0x58>)
 8013794:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8013798:	2b00      	cmp	r3, #0
 801379a:	d01b      	beq.n	80137d4 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801379c:	1d3b      	adds	r3, r7, #4
 801379e:	4618      	mov	r0, r3
 80137a0:	f002 ff6e 	bl	8016680 <LoRaMacCommandsGetSizeSerializedCmds>
 80137a4:	4603      	mov	r3, r0
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d001      	beq.n	80137ae <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80137aa:	2313      	movs	r3, #19
 80137ac:	e013      	b.n	80137d6 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80137ae:	4b0d      	ldr	r3, [pc, #52]	; (80137e4 <VerifyTxFrame+0x5c>)
 80137b0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80137b4:	4a0a      	ldr	r2, [pc, #40]	; (80137e0 <VerifyTxFrame+0x58>)
 80137b6:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 80137ba:	687a      	ldr	r2, [r7, #4]
 80137bc:	b2d2      	uxtb	r2, r2
 80137be:	4618      	mov	r0, r3
 80137c0:	f7ff f932 	bl	8012a28 <ValidatePayloadLength>
 80137c4:	4603      	mov	r3, r0
 80137c6:	f083 0301 	eor.w	r3, r3, #1
 80137ca:	b2db      	uxtb	r3, r3
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d001      	beq.n	80137d4 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80137d0:	2308      	movs	r3, #8
 80137d2:	e000      	b.n	80137d6 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80137d4:	2300      	movs	r3, #0
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3708      	adds	r7, #8
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}
 80137de:	bf00      	nop
 80137e0:	20000d6c 	.word	0x20000d6c
 80137e4:	20000850 	.word	0x20000850

080137e8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b082      	sub	sp, #8
 80137ec:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80137ee:	4b18      	ldr	r3, [pc, #96]	; (8013850 <SerializeTxFrame+0x68>)
 80137f0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d002      	beq.n	80137fe <SerializeTxFrame+0x16>
 80137f8:	2b04      	cmp	r3, #4
 80137fa:	d011      	beq.n	8013820 <SerializeTxFrame+0x38>
 80137fc:	e021      	b.n	8013842 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80137fe:	4815      	ldr	r0, [pc, #84]	; (8013854 <SerializeTxFrame+0x6c>)
 8013800:	f004 fa6c 	bl	8017cdc <LoRaMacSerializerJoinRequest>
 8013804:	4603      	mov	r3, r0
 8013806:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8013808:	79fb      	ldrb	r3, [r7, #7]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d001      	beq.n	8013812 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801380e:	2311      	movs	r3, #17
 8013810:	e01a      	b.n	8013848 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8013812:	4b0f      	ldr	r3, [pc, #60]	; (8013850 <SerializeTxFrame+0x68>)
 8013814:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013818:	b29a      	uxth	r2, r3
 801381a:	4b0d      	ldr	r3, [pc, #52]	; (8013850 <SerializeTxFrame+0x68>)
 801381c:	801a      	strh	r2, [r3, #0]
            break;
 801381e:	e012      	b.n	8013846 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8013820:	480c      	ldr	r0, [pc, #48]	; (8013854 <SerializeTxFrame+0x6c>)
 8013822:	f004 fadd 	bl	8017de0 <LoRaMacSerializerData>
 8013826:	4603      	mov	r3, r0
 8013828:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801382a:	79fb      	ldrb	r3, [r7, #7]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d001      	beq.n	8013834 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013830:	2311      	movs	r3, #17
 8013832:	e009      	b.n	8013848 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8013834:	4b06      	ldr	r3, [pc, #24]	; (8013850 <SerializeTxFrame+0x68>)
 8013836:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801383a:	b29a      	uxth	r2, r3
 801383c:	4b04      	ldr	r3, [pc, #16]	; (8013850 <SerializeTxFrame+0x68>)
 801383e:	801a      	strh	r2, [r3, #0]
            break;
 8013840:	e001      	b.n	8013846 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013842:	2303      	movs	r3, #3
 8013844:	e000      	b.n	8013848 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8013846:	2300      	movs	r3, #0
}
 8013848:	4618      	mov	r0, r3
 801384a:	3708      	adds	r7, #8
 801384c:	46bd      	mov	sp, r7
 801384e:	bd80      	pop	{r7, pc}
 8013850:	20000850 	.word	0x20000850
 8013854:	20000958 	.word	0x20000958

08013858 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b090      	sub	sp, #64	; 0x40
 801385c:	af02      	add	r7, sp, #8
 801385e:	4603      	mov	r3, r0
 8013860:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013862:	2303      	movs	r3, #3
 8013864:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8013868:	f7ff ff06 	bl	8013678 <CheckForClassBCollision>
 801386c:	4603      	mov	r3, r0
 801386e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013872:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013876:	2b00      	cmp	r3, #0
 8013878:	d002      	beq.n	8013880 <ScheduleTx+0x28>
    {
        return status;
 801387a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801387e:	e092      	b.n	80139a6 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8013880:	f000 f8f8 	bl	8013a74 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8013884:	f7ff ffb0 	bl	80137e8 <SerializeTxFrame>
 8013888:	4603      	mov	r3, r0
 801388a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801388e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013892:	2b00      	cmp	r3, #0
 8013894:	d002      	beq.n	801389c <ScheduleTx+0x44>
    {
        return status;
 8013896:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801389a:	e084      	b.n	80139a6 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801389c:	4b44      	ldr	r3, [pc, #272]	; (80139b0 <ScheduleTx+0x158>)
 801389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138a0:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80138a2:	4b43      	ldr	r3, [pc, #268]	; (80139b0 <ScheduleTx+0x158>)
 80138a4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80138a8:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80138aa:	4b41      	ldr	r3, [pc, #260]	; (80139b0 <ScheduleTx+0x158>)
 80138ac:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80138b0:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80138b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80138b6:	4618      	mov	r0, r3
 80138b8:	f00a fbbc 	bl	801e034 <SysTimeGetMcuTime>
 80138bc:	4638      	mov	r0, r7
 80138be:	4b3c      	ldr	r3, [pc, #240]	; (80139b0 <ScheduleTx+0x158>)
 80138c0:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 80138c4:	9200      	str	r2, [sp, #0]
 80138c6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80138ca:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80138ce:	ca06      	ldmia	r2, {r1, r2}
 80138d0:	f00a fb11 	bl	801def6 <SysTimeSub>
 80138d4:	f107 0320 	add.w	r3, r7, #32
 80138d8:	463a      	mov	r2, r7
 80138da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80138de:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80138e2:	4b33      	ldr	r3, [pc, #204]	; (80139b0 <ScheduleTx+0x158>)
 80138e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138e6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80138e8:	2300      	movs	r3, #0
 80138ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 80138ee:	2301      	movs	r3, #1
 80138f0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80138f2:	4b30      	ldr	r3, [pc, #192]	; (80139b4 <ScheduleTx+0x15c>)
 80138f4:	881b      	ldrh	r3, [r3, #0]
 80138f6:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80138f8:	4b2d      	ldr	r3, [pc, #180]	; (80139b0 <ScheduleTx+0x158>)
 80138fa:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d104      	bne.n	801390c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8013902:	2301      	movs	r3, #1
 8013904:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8013908:	2300      	movs	r3, #0
 801390a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 801390c:	4b28      	ldr	r3, [pc, #160]	; (80139b0 <ScheduleTx+0x158>)
 801390e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013912:	f107 0114 	add.w	r1, r7, #20
 8013916:	4b28      	ldr	r3, [pc, #160]	; (80139b8 <ScheduleTx+0x160>)
 8013918:	9300      	str	r3, [sp, #0]
 801391a:	4b28      	ldr	r3, [pc, #160]	; (80139bc <ScheduleTx+0x164>)
 801391c:	4a28      	ldr	r2, [pc, #160]	; (80139c0 <ScheduleTx+0x168>)
 801391e:	f004 fca3 	bl	8018268 <RegionNextChannel>
 8013922:	4603      	mov	r3, r0
 8013924:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8013928:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801392c:	2b00      	cmp	r3, #0
 801392e:	d025      	beq.n	801397c <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8013930:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013934:	2b0b      	cmp	r3, #11
 8013936:	d11e      	bne.n	8013976 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8013938:	4b1e      	ldr	r3, [pc, #120]	; (80139b4 <ScheduleTx+0x15c>)
 801393a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801393e:	2b00      	cmp	r3, #0
 8013940:	d01c      	beq.n	801397c <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8013942:	7bfb      	ldrb	r3, [r7, #15]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d013      	beq.n	8013970 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8013948:	4b1a      	ldr	r3, [pc, #104]	; (80139b4 <ScheduleTx+0x15c>)
 801394a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801394e:	f043 0320 	orr.w	r3, r3, #32
 8013952:	4a18      	ldr	r2, [pc, #96]	; (80139b4 <ScheduleTx+0x15c>)
 8013954:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8013958:	4b16      	ldr	r3, [pc, #88]	; (80139b4 <ScheduleTx+0x15c>)
 801395a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801395e:	4619      	mov	r1, r3
 8013960:	4818      	ldr	r0, [pc, #96]	; (80139c4 <ScheduleTx+0x16c>)
 8013962:	f00b f907 	bl	801eb74 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8013966:	4817      	ldr	r0, [pc, #92]	; (80139c4 <ScheduleTx+0x16c>)
 8013968:	f00b f826 	bl	801e9b8 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 801396c:	2300      	movs	r3, #0
 801396e:	e01a      	b.n	80139a6 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8013970:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013974:	e017      	b.n	80139a6 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8013976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801397a:	e014      	b.n	80139a6 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 801397c:	f7ff fe9e 	bl	80136bc <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8013980:	f7ff ff02 	bl	8013788 <VerifyTxFrame>
 8013984:	4603      	mov	r3, r0
 8013986:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801398a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801398e:	2b00      	cmp	r3, #0
 8013990:	d002      	beq.n	8013998 <ScheduleTx+0x140>
    {
        return status;
 8013992:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013996:	e006      	b.n	80139a6 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8013998:	4b06      	ldr	r3, [pc, #24]	; (80139b4 <ScheduleTx+0x15c>)
 801399a:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 801399e:	4618      	mov	r0, r3
 80139a0:	f000 fb76 	bl	8014090 <SendFrameOnChannel>
 80139a4:	4603      	mov	r3, r0
}
 80139a6:	4618      	mov	r0, r3
 80139a8:	3738      	adds	r7, #56	; 0x38
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd80      	pop	{r7, pc}
 80139ae:	bf00      	nop
 80139b0:	20000d6c 	.word	0x20000d6c
 80139b4:	20000850 	.word	0x20000850
 80139b8:	20000d9c 	.word	0x20000d9c
 80139bc:	20000ce4 	.word	0x20000ce4
 80139c0:	20000c6b 	.word	0x20000c6b
 80139c4:	20000bb8 	.word	0x20000bb8

080139c8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b084      	sub	sp, #16
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	4603      	mov	r3, r0
 80139d0:	460a      	mov	r2, r1
 80139d2:	71fb      	strb	r3, [r7, #7]
 80139d4:	4613      	mov	r3, r2
 80139d6:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80139d8:	2312      	movs	r3, #18
 80139da:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80139dc:	2300      	movs	r3, #0
 80139de:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80139e0:	4b22      	ldr	r3, [pc, #136]	; (8013a6c <SecureFrame+0xa4>)
 80139e2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d002      	beq.n	80139f0 <SecureFrame+0x28>
 80139ea:	2b04      	cmp	r3, #4
 80139ec:	d011      	beq.n	8013a12 <SecureFrame+0x4a>
 80139ee:	e036      	b.n	8013a5e <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80139f0:	481f      	ldr	r0, [pc, #124]	; (8013a70 <SecureFrame+0xa8>)
 80139f2:	f003 fd3f 	bl	8017474 <LoRaMacCryptoPrepareJoinRequest>
 80139f6:	4603      	mov	r3, r0
 80139f8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80139fa:	7bfb      	ldrb	r3, [r7, #15]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d001      	beq.n	8013a04 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013a00:	2311      	movs	r3, #17
 8013a02:	e02f      	b.n	8013a64 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8013a04:	4b19      	ldr	r3, [pc, #100]	; (8013a6c <SecureFrame+0xa4>)
 8013a06:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013a0a:	b29a      	uxth	r2, r3
 8013a0c:	4b17      	ldr	r3, [pc, #92]	; (8013a6c <SecureFrame+0xa4>)
 8013a0e:	801a      	strh	r2, [r3, #0]
            break;
 8013a10:	e027      	b.n	8013a62 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013a12:	f107 0308 	add.w	r3, r7, #8
 8013a16:	4618      	mov	r0, r3
 8013a18:	f003 fc66 	bl	80172e8 <LoRaMacCryptoGetFCntUp>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d001      	beq.n	8013a26 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013a22:	2312      	movs	r3, #18
 8013a24:	e01e      	b.n	8013a64 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8013a26:	4b11      	ldr	r3, [pc, #68]	; (8013a6c <SecureFrame+0xa4>)
 8013a28:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d002      	beq.n	8013a36 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	3b01      	subs	r3, #1
 8013a34:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8013a36:	68b8      	ldr	r0, [r7, #8]
 8013a38:	79ba      	ldrb	r2, [r7, #6]
 8013a3a:	79f9      	ldrb	r1, [r7, #7]
 8013a3c:	4b0c      	ldr	r3, [pc, #48]	; (8013a70 <SecureFrame+0xa8>)
 8013a3e:	f003 fe41 	bl	80176c4 <LoRaMacCryptoSecureMessage>
 8013a42:	4603      	mov	r3, r0
 8013a44:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013a46:	7bfb      	ldrb	r3, [r7, #15]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d001      	beq.n	8013a50 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013a4c:	2311      	movs	r3, #17
 8013a4e:	e009      	b.n	8013a64 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8013a50:	4b06      	ldr	r3, [pc, #24]	; (8013a6c <SecureFrame+0xa4>)
 8013a52:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013a56:	b29a      	uxth	r2, r3
 8013a58:	4b04      	ldr	r3, [pc, #16]	; (8013a6c <SecureFrame+0xa4>)
 8013a5a:	801a      	strh	r2, [r3, #0]
            break;
 8013a5c:	e001      	b.n	8013a62 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013a5e:	2303      	movs	r3, #3
 8013a60:	e000      	b.n	8013a64 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8013a62:	2300      	movs	r3, #0
}
 8013a64:	4618      	mov	r0, r3
 8013a66:	3710      	adds	r7, #16
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}
 8013a6c:	20000850 	.word	0x20000850
 8013a70:	20000958 	.word	0x20000958

08013a74 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8013a74:	b480      	push	{r7}
 8013a76:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8013a78:	4b09      	ldr	r3, [pc, #36]	; (8013aa0 <CalculateBackOff+0x2c>)
 8013a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d10a      	bne.n	8013a96 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8013a80:	4b07      	ldr	r3, [pc, #28]	; (8013aa0 <CalculateBackOff+0x2c>)
 8013a82:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8013a86:	3b01      	subs	r3, #1
 8013a88:	4a06      	ldr	r2, [pc, #24]	; (8013aa4 <CalculateBackOff+0x30>)
 8013a8a:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 8013a8e:	fb02 f303 	mul.w	r3, r2, r3
 8013a92:	4a03      	ldr	r2, [pc, #12]	; (8013aa0 <CalculateBackOff+0x2c>)
 8013a94:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8013a96:	bf00      	nop
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bc80      	pop	{r7}
 8013a9c:	4770      	bx	lr
 8013a9e:	bf00      	nop
 8013aa0:	20000d6c 	.word	0x20000d6c
 8013aa4:	20000850 	.word	0x20000850

08013aa8 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b082      	sub	sp, #8
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	4603      	mov	r3, r0
 8013ab0:	7139      	strb	r1, [r7, #4]
 8013ab2:	71fb      	strb	r3, [r7, #7]
 8013ab4:	4613      	mov	r3, r2
 8013ab6:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8013ab8:	79fb      	ldrb	r3, [r7, #7]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d002      	beq.n	8013ac4 <RemoveMacCommands+0x1c>
 8013abe:	79fb      	ldrb	r3, [r7, #7]
 8013ac0:	2b01      	cmp	r3, #1
 8013ac2:	d10d      	bne.n	8013ae0 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8013ac4:	79bb      	ldrb	r3, [r7, #6]
 8013ac6:	2b01      	cmp	r3, #1
 8013ac8:	d108      	bne.n	8013adc <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8013aca:	793b      	ldrb	r3, [r7, #4]
 8013acc:	f003 0320 	and.w	r3, r3, #32
 8013ad0:	b2db      	uxtb	r3, r3
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d004      	beq.n	8013ae0 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8013ad6:	f002 fda7 	bl	8016628 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8013ada:	e001      	b.n	8013ae0 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8013adc:	f002 fda4 	bl	8016628 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8013ae0:	bf00      	nop
 8013ae2:	3708      	adds	r7, #8
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	bd80      	pop	{r7, pc}

08013ae8 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8013ae8:	b5b0      	push	{r4, r5, r7, lr}
 8013aea:	b092      	sub	sp, #72	; 0x48
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	4603      	mov	r3, r0
 8013af0:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8013af2:	79fb      	ldrb	r3, [r7, #7]
 8013af4:	f083 0301 	eor.w	r3, r3, #1
 8013af8:	b2db      	uxtb	r3, r3
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d003      	beq.n	8013b06 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8013afe:	4b88      	ldr	r3, [pc, #544]	; (8013d20 <ResetMacParameters+0x238>)
 8013b00:	2200      	movs	r2, #0
 8013b02:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8013b06:	4b86      	ldr	r3, [pc, #536]	; (8013d20 <ResetMacParameters+0x238>)
 8013b08:	2200      	movs	r2, #0
 8013b0a:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8013b0c:	4b85      	ldr	r3, [pc, #532]	; (8013d24 <ResetMacParameters+0x23c>)
 8013b0e:	2200      	movs	r2, #0
 8013b10:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8013b14:	4b83      	ldr	r3, [pc, #524]	; (8013d24 <ResetMacParameters+0x23c>)
 8013b16:	2200      	movs	r2, #0
 8013b18:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8013b1c:	4b81      	ldr	r3, [pc, #516]	; (8013d24 <ResetMacParameters+0x23c>)
 8013b1e:	2200      	movs	r2, #0
 8013b20:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8013b24:	4b7e      	ldr	r3, [pc, #504]	; (8013d20 <ResetMacParameters+0x238>)
 8013b26:	2200      	movs	r2, #0
 8013b28:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8013b2c:	4b7c      	ldr	r3, [pc, #496]	; (8013d20 <ResetMacParameters+0x238>)
 8013b2e:	2201      	movs	r2, #1
 8013b30:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013b34:	4b7a      	ldr	r3, [pc, #488]	; (8013d20 <ResetMacParameters+0x238>)
 8013b36:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8013b3a:	4b79      	ldr	r3, [pc, #484]	; (8013d20 <ResetMacParameters+0x238>)
 8013b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013b40:	4b77      	ldr	r3, [pc, #476]	; (8013d20 <ResetMacParameters+0x238>)
 8013b42:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8013b46:	4b76      	ldr	r3, [pc, #472]	; (8013d20 <ResetMacParameters+0x238>)
 8013b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8013b4c:	4b74      	ldr	r3, [pc, #464]	; (8013d20 <ResetMacParameters+0x238>)
 8013b4e:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8013b52:	4b73      	ldr	r3, [pc, #460]	; (8013d20 <ResetMacParameters+0x238>)
 8013b54:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013b58:	4b71      	ldr	r3, [pc, #452]	; (8013d20 <ResetMacParameters+0x238>)
 8013b5a:	4a71      	ldr	r2, [pc, #452]	; (8013d20 <ResetMacParameters+0x238>)
 8013b5c:	336c      	adds	r3, #108	; 0x6c
 8013b5e:	32b4      	adds	r2, #180	; 0xb4
 8013b60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b64:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013b68:	4b6d      	ldr	r3, [pc, #436]	; (8013d20 <ResetMacParameters+0x238>)
 8013b6a:	4a6d      	ldr	r2, [pc, #436]	; (8013d20 <ResetMacParameters+0x238>)
 8013b6c:	3374      	adds	r3, #116	; 0x74
 8013b6e:	32bc      	adds	r2, #188	; 0xbc
 8013b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b74:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8013b78:	4b69      	ldr	r3, [pc, #420]	; (8013d20 <ResetMacParameters+0x238>)
 8013b7a:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8013b7e:	4b68      	ldr	r3, [pc, #416]	; (8013d20 <ResetMacParameters+0x238>)
 8013b80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8013b84:	4b66      	ldr	r3, [pc, #408]	; (8013d20 <ResetMacParameters+0x238>)
 8013b86:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8013b8a:	4b65      	ldr	r3, [pc, #404]	; (8013d20 <ResetMacParameters+0x238>)
 8013b8c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8013b90:	4b63      	ldr	r3, [pc, #396]	; (8013d20 <ResetMacParameters+0x238>)
 8013b92:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013b96:	4a62      	ldr	r2, [pc, #392]	; (8013d20 <ResetMacParameters+0x238>)
 8013b98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013b9c:	4b60      	ldr	r3, [pc, #384]	; (8013d20 <ResetMacParameters+0x238>)
 8013b9e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013ba2:	4a5f      	ldr	r2, [pc, #380]	; (8013d20 <ResetMacParameters+0x238>)
 8013ba4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8013ba8:	4b5d      	ldr	r3, [pc, #372]	; (8013d20 <ResetMacParameters+0x238>)
 8013baa:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8013bae:	4b5c      	ldr	r3, [pc, #368]	; (8013d20 <ResetMacParameters+0x238>)
 8013bb0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8013bb4:	4b5a      	ldr	r3, [pc, #360]	; (8013d20 <ResetMacParameters+0x238>)
 8013bb6:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8013bba:	4b59      	ldr	r3, [pc, #356]	; (8013d20 <ResetMacParameters+0x238>)
 8013bbc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8013bc0:	4b58      	ldr	r3, [pc, #352]	; (8013d24 <ResetMacParameters+0x23c>)
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8013bc8:	4b55      	ldr	r3, [pc, #340]	; (8013d20 <ResetMacParameters+0x238>)
 8013bca:	2200      	movs	r2, #0
 8013bcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8013bd0:	4b53      	ldr	r3, [pc, #332]	; (8013d20 <ResetMacParameters+0x238>)
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8013bd8:	4b51      	ldr	r3, [pc, #324]	; (8013d20 <ResetMacParameters+0x238>)
 8013bda:	2200      	movs	r2, #0
 8013bdc:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8013be0:	4b4f      	ldr	r3, [pc, #316]	; (8013d20 <ResetMacParameters+0x238>)
 8013be2:	2200      	movs	r2, #0
 8013be4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8013be8:	4b4d      	ldr	r3, [pc, #308]	; (8013d20 <ResetMacParameters+0x238>)
 8013bea:	2200      	movs	r2, #0
 8013bec:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8013bf0:	4b4b      	ldr	r3, [pc, #300]	; (8013d20 <ResetMacParameters+0x238>)
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8013bf8:	4b49      	ldr	r3, [pc, #292]	; (8013d20 <ResetMacParameters+0x238>)
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8013c00:	4b47      	ldr	r3, [pc, #284]	; (8013d20 <ResetMacParameters+0x238>)
 8013c02:	2200      	movs	r2, #0
 8013c04:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8013c08:	4b45      	ldr	r3, [pc, #276]	; (8013d20 <ResetMacParameters+0x238>)
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8013c10:	4b43      	ldr	r3, [pc, #268]	; (8013d20 <ResetMacParameters+0x238>)
 8013c12:	2200      	movs	r2, #0
 8013c14:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8013c18:	4b41      	ldr	r3, [pc, #260]	; (8013d20 <ResetMacParameters+0x238>)
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8013c20:	2301      	movs	r3, #1
 8013c22:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013c24:	4b40      	ldr	r3, [pc, #256]	; (8013d28 <ResetMacParameters+0x240>)
 8013c26:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013c28:	4b40      	ldr	r3, [pc, #256]	; (8013d2c <ResetMacParameters+0x244>)
 8013c2a:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 8013c2c:	4b40      	ldr	r3, [pc, #256]	; (8013d30 <ResetMacParameters+0x248>)
 8013c2e:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013c30:	4b3b      	ldr	r3, [pc, #236]	; (8013d20 <ResetMacParameters+0x238>)
 8013c32:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013c36:	f107 020c 	add.w	r2, r7, #12
 8013c3a:	4611      	mov	r1, r2
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f004 f9ff 	bl	8018040 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8013c42:	4b38      	ldr	r3, [pc, #224]	; (8013d24 <ResetMacParameters+0x23c>)
 8013c44:	2200      	movs	r2, #0
 8013c46:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8013c4a:	4b36      	ldr	r3, [pc, #216]	; (8013d24 <ResetMacParameters+0x23c>)
 8013c4c:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8013c50:	4b34      	ldr	r3, [pc, #208]	; (8013d24 <ResetMacParameters+0x23c>)
 8013c52:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8013c56:	4b32      	ldr	r3, [pc, #200]	; (8013d20 <ResetMacParameters+0x238>)
 8013c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c5a:	4a32      	ldr	r2, [pc, #200]	; (8013d24 <ResetMacParameters+0x23c>)
 8013c5c:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013c60:	4b2f      	ldr	r3, [pc, #188]	; (8013d20 <ResetMacParameters+0x238>)
 8013c62:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8013c66:	4b2f      	ldr	r3, [pc, #188]	; (8013d24 <ResetMacParameters+0x23c>)
 8013c68:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8013c6c:	4b2c      	ldr	r3, [pc, #176]	; (8013d20 <ResetMacParameters+0x238>)
 8013c6e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013c72:	4b2c      	ldr	r3, [pc, #176]	; (8013d24 <ResetMacParameters+0x23c>)
 8013c74:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8013c78:	4b2a      	ldr	r3, [pc, #168]	; (8013d24 <ResetMacParameters+0x23c>)
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8013c80:	4b28      	ldr	r3, [pc, #160]	; (8013d24 <ResetMacParameters+0x23c>)
 8013c82:	2201      	movs	r2, #1
 8013c84:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013c88:	4b25      	ldr	r3, [pc, #148]	; (8013d20 <ResetMacParameters+0x238>)
 8013c8a:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8013c8e:	4b25      	ldr	r3, [pc, #148]	; (8013d24 <ResetMacParameters+0x23c>)
 8013c90:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8013c94:	4a23      	ldr	r2, [pc, #140]	; (8013d24 <ResetMacParameters+0x23c>)
 8013c96:	4b23      	ldr	r3, [pc, #140]	; (8013d24 <ResetMacParameters+0x23c>)
 8013c98:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8013c9c:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8013ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ca4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013ca8:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013cac:	4b1d      	ldr	r3, [pc, #116]	; (8013d24 <ResetMacParameters+0x23c>)
 8013cae:	2201      	movs	r2, #1
 8013cb0:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013cb4:	4b1b      	ldr	r3, [pc, #108]	; (8013d24 <ResetMacParameters+0x23c>)
 8013cb6:	2202      	movs	r2, #2
 8013cb8:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 8013cc4:	4b17      	ldr	r3, [pc, #92]	; (8013d24 <ResetMacParameters+0x23c>)
 8013cc6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d009      	beq.n	8013ce2 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8013cce:	4b15      	ldr	r3, [pc, #84]	; (8013d24 <ResetMacParameters+0x23c>)
 8013cd0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013cd4:	685b      	ldr	r3, [r3, #4]
 8013cd6:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8013cd8:	4b12      	ldr	r3, [pc, #72]	; (8013d24 <ResetMacParameters+0x23c>)
 8013cda:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013cde:	695b      	ldr	r3, [r3, #20]
 8013ce0:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8013ce2:	4b14      	ldr	r3, [pc, #80]	; (8013d34 <ResetMacParameters+0x24c>)
 8013ce4:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013ce6:	4b14      	ldr	r3, [pc, #80]	; (8013d38 <ResetMacParameters+0x250>)
 8013ce8:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8013cea:	4b14      	ldr	r3, [pc, #80]	; (8013d3c <ResetMacParameters+0x254>)
 8013cec:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8013cee:	4b14      	ldr	r3, [pc, #80]	; (8013d40 <ResetMacParameters+0x258>)
 8013cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8013cf2:	4b14      	ldr	r3, [pc, #80]	; (8013d44 <ResetMacParameters+0x25c>)
 8013cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8013cf6:	4b14      	ldr	r3, [pc, #80]	; (8013d48 <ResetMacParameters+0x260>)
 8013cf8:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8013cfa:	4b14      	ldr	r3, [pc, #80]	; (8013d4c <ResetMacParameters+0x264>)
 8013cfc:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8013cfe:	4b14      	ldr	r3, [pc, #80]	; (8013d50 <ResetMacParameters+0x268>)
 8013d00:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8013d02:	4b14      	ldr	r3, [pc, #80]	; (8013d54 <ResetMacParameters+0x26c>)
 8013d04:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8013d06:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8013d0a:	f107 031c 	add.w	r3, r7, #28
 8013d0e:	4a12      	ldr	r2, [pc, #72]	; (8013d58 <ResetMacParameters+0x270>)
 8013d10:	4618      	mov	r0, r3
 8013d12:	f002 f996 	bl	8016042 <LoRaMacClassBInit>
}
 8013d16:	bf00      	nop
 8013d18:	3748      	adds	r7, #72	; 0x48
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8013d1e:	bf00      	nop
 8013d20:	20000d6c 	.word	0x20000d6c
 8013d24:	20000850 	.word	0x20000850
 8013d28:	20000f90 	.word	0x20000f90
 8013d2c:	20000fa4 	.word	0x20000fa4
 8013d30:	20001904 	.word	0x20001904
 8013d34:	20000cb8 	.word	0x20000cb8
 8013d38:	20000c70 	.word	0x20000c70
 8013d3c:	20000ca4 	.word	0x20000ca4
 8013d40:	20000ce1 	.word	0x20000ce1
 8013d44:	20000e50 	.word	0x20000e50
 8013d48:	20000db4 	.word	0x20000db4
 8013d4c:	20000db8 	.word	0x20000db8
 8013d50:	20000e54 	.word	0x20000e54
 8013d54:	20000e9c 	.word	0x20000e9c
 8013d58:	20001320 	.word	0x20001320

08013d5c <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b082      	sub	sp, #8
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
 8013d64:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8013d66:	6878      	ldr	r0, [r7, #4]
 8013d68:	f00a fe94 	bl	801ea94 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8013d6c:	4b11      	ldr	r3, [pc, #68]	; (8013db4 <RxWindowSetup+0x58>)
 8013d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d70:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8013d72:	4b11      	ldr	r3, [pc, #68]	; (8013db8 <RxWindowSetup+0x5c>)
 8013d74:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013d78:	4a10      	ldr	r2, [pc, #64]	; (8013dbc <RxWindowSetup+0x60>)
 8013d7a:	6839      	ldr	r1, [r7, #0]
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f004 f9c7 	bl	8018110 <RegionRxConfig>
 8013d82:	4603      	mov	r3, r0
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d010      	beq.n	8013daa <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8013d88:	4b0d      	ldr	r3, [pc, #52]	; (8013dc0 <RxWindowSetup+0x64>)
 8013d8a:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8013d8e:	4b0c      	ldr	r3, [pc, #48]	; (8013dc0 <RxWindowSetup+0x64>)
 8013d90:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8013d94:	4b07      	ldr	r3, [pc, #28]	; (8013db4 <RxWindowSetup+0x58>)
 8013d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d98:	4a07      	ldr	r2, [pc, #28]	; (8013db8 <RxWindowSetup+0x5c>)
 8013d9a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8013d9c:	4610      	mov	r0, r2
 8013d9e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	7cda      	ldrb	r2, [r3, #19]
 8013da4:	4b06      	ldr	r3, [pc, #24]	; (8013dc0 <RxWindowSetup+0x64>)
 8013da6:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8013daa:	bf00      	nop
 8013dac:	3708      	adds	r7, #8
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	08020428 	.word	0x08020428
 8013db8:	20000d6c 	.word	0x20000d6c
 8013dbc:	20000c74 	.word	0x20000c74
 8013dc0:	20000850 	.word	0x20000850

08013dc4 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8013dc4:	b590      	push	{r4, r7, lr}
 8013dc6:	b083      	sub	sp, #12
 8013dc8:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013dca:	4b1e      	ldr	r3, [pc, #120]	; (8013e44 <OpenContinuousRxCWindow+0x80>)
 8013dcc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8013dd0:	4b1c      	ldr	r3, [pc, #112]	; (8013e44 <OpenContinuousRxCWindow+0x80>)
 8013dd2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013dd6:	b259      	sxtb	r1, r3
 8013dd8:	4b1a      	ldr	r3, [pc, #104]	; (8013e44 <OpenContinuousRxCWindow+0x80>)
 8013dda:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8013dde:	4b19      	ldr	r3, [pc, #100]	; (8013e44 <OpenContinuousRxCWindow+0x80>)
 8013de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013de2:	4c19      	ldr	r4, [pc, #100]	; (8013e48 <OpenContinuousRxCWindow+0x84>)
 8013de4:	9400      	str	r4, [sp, #0]
 8013de6:	f004 f979 	bl	80180dc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013dea:	4b18      	ldr	r3, [pc, #96]	; (8013e4c <OpenContinuousRxCWindow+0x88>)
 8013dec:	2202      	movs	r2, #2
 8013dee:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013df2:	4b14      	ldr	r3, [pc, #80]	; (8013e44 <OpenContinuousRxCWindow+0x80>)
 8013df4:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8013df8:	4b14      	ldr	r3, [pc, #80]	; (8013e4c <OpenContinuousRxCWindow+0x88>)
 8013dfa:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013dfe:	4b13      	ldr	r3, [pc, #76]	; (8013e4c <OpenContinuousRxCWindow+0x88>)
 8013e00:	2201      	movs	r2, #1
 8013e02:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8013e06:	4b0f      	ldr	r3, [pc, #60]	; (8013e44 <OpenContinuousRxCWindow+0x80>)
 8013e08:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013e0c:	4a10      	ldr	r2, [pc, #64]	; (8013e50 <OpenContinuousRxCWindow+0x8c>)
 8013e0e:	490e      	ldr	r1, [pc, #56]	; (8013e48 <OpenContinuousRxCWindow+0x84>)
 8013e10:	4618      	mov	r0, r3
 8013e12:	f004 f97d 	bl	8018110 <RegionRxConfig>
 8013e16:	4603      	mov	r3, r0
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d00f      	beq.n	8013e3c <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8013e1c:	4b0b      	ldr	r3, [pc, #44]	; (8013e4c <OpenContinuousRxCWindow+0x88>)
 8013e1e:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8013e22:	4b0a      	ldr	r3, [pc, #40]	; (8013e4c <OpenContinuousRxCWindow+0x88>)
 8013e24:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8013e28:	4b0a      	ldr	r3, [pc, #40]	; (8013e54 <OpenContinuousRxCWindow+0x90>)
 8013e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e2c:	2000      	movs	r0, #0
 8013e2e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8013e30:	4b06      	ldr	r3, [pc, #24]	; (8013e4c <OpenContinuousRxCWindow+0x88>)
 8013e32:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 8013e36:	4b05      	ldr	r3, [pc, #20]	; (8013e4c <OpenContinuousRxCWindow+0x88>)
 8013e38:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8013e3c:	bf00      	nop
 8013e3e:	3704      	adds	r7, #4
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd90      	pop	{r4, r7, pc}
 8013e44:	20000d6c 	.word	0x20000d6c
 8013e48:	20000c38 	.word	0x20000c38
 8013e4c:	20000850 	.word	0x20000850
 8013e50:	20000c74 	.word	0x20000c74
 8013e54:	08020428 	.word	0x08020428

08013e58 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b088      	sub	sp, #32
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	60f8      	str	r0, [r7, #12]
 8013e60:	60b9      	str	r1, [r7, #8]
 8013e62:	603b      	str	r3, [r7, #0]
 8013e64:	4613      	mov	r3, r2
 8013e66:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8013e68:	4b82      	ldr	r3, [pc, #520]	; (8014074 <PrepareFrame+0x21c>)
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8013e6e:	4b81      	ldr	r3, [pc, #516]	; (8014074 <PrepareFrame+0x21c>)
 8013e70:	2200      	movs	r2, #0
 8013e72:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 8013e76:	2300      	movs	r3, #0
 8013e78:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8013e7e:	2300      	movs	r3, #0
 8013e80:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8013e82:	683b      	ldr	r3, [r7, #0]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d101      	bne.n	8013e8c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8013e8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013e8e:	461a      	mov	r2, r3
 8013e90:	6839      	ldr	r1, [r7, #0]
 8013e92:	4879      	ldr	r0, [pc, #484]	; (8014078 <PrepareFrame+0x220>)
 8013e94:	f006 fc63 	bl	801a75e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8013e98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013e9a:	b2da      	uxtb	r2, r3
 8013e9c:	4b75      	ldr	r3, [pc, #468]	; (8014074 <PrepareFrame+0x21c>)
 8013e9e:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	781a      	ldrb	r2, [r3, #0]
 8013ea6:	4b73      	ldr	r3, [pc, #460]	; (8014074 <PrepareFrame+0x21c>)
 8013ea8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	781b      	ldrb	r3, [r3, #0]
 8013eae:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8013eb2:	b2db      	uxtb	r3, r3
 8013eb4:	2b07      	cmp	r3, #7
 8013eb6:	f000 80b9 	beq.w	801402c <PrepareFrame+0x1d4>
 8013eba:	2b07      	cmp	r3, #7
 8013ebc:	f300 80d0 	bgt.w	8014060 <PrepareFrame+0x208>
 8013ec0:	2b02      	cmp	r3, #2
 8013ec2:	d006      	beq.n	8013ed2 <PrepareFrame+0x7a>
 8013ec4:	2b04      	cmp	r3, #4
 8013ec6:	f040 80cb 	bne.w	8014060 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8013eca:	4b6a      	ldr	r3, [pc, #424]	; (8014074 <PrepareFrame+0x21c>)
 8013ecc:	2201      	movs	r2, #1
 8013ece:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8013ed2:	4b68      	ldr	r3, [pc, #416]	; (8014074 <PrepareFrame+0x21c>)
 8013ed4:	2204      	movs	r2, #4
 8013ed6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8013eda:	4b66      	ldr	r3, [pc, #408]	; (8014074 <PrepareFrame+0x21c>)
 8013edc:	4a67      	ldr	r2, [pc, #412]	; (801407c <PrepareFrame+0x224>)
 8013ede:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013ee2:	4b64      	ldr	r3, [pc, #400]	; (8014074 <PrepareFrame+0x21c>)
 8013ee4:	22ff      	movs	r2, #255	; 0xff
 8013ee6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	781a      	ldrb	r2, [r3, #0]
 8013eee:	4b61      	ldr	r3, [pc, #388]	; (8014074 <PrepareFrame+0x21c>)
 8013ef0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8013ef4:	4a5f      	ldr	r2, [pc, #380]	; (8014074 <PrepareFrame+0x21c>)
 8013ef6:	79fb      	ldrb	r3, [r7, #7]
 8013ef8:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8013efc:	4b60      	ldr	r3, [pc, #384]	; (8014080 <PrepareFrame+0x228>)
 8013efe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8013f02:	4a5c      	ldr	r2, [pc, #368]	; (8014074 <PrepareFrame+0x21c>)
 8013f04:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	781a      	ldrb	r2, [r3, #0]
 8013f0c:	4b59      	ldr	r3, [pc, #356]	; (8014074 <PrepareFrame+0x21c>)
 8013f0e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8013f12:	4b58      	ldr	r3, [pc, #352]	; (8014074 <PrepareFrame+0x21c>)
 8013f14:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8013f18:	4b56      	ldr	r3, [pc, #344]	; (8014074 <PrepareFrame+0x21c>)
 8013f1a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8013f1e:	4b55      	ldr	r3, [pc, #340]	; (8014074 <PrepareFrame+0x21c>)
 8013f20:	4a55      	ldr	r2, [pc, #340]	; (8014078 <PrepareFrame+0x220>)
 8013f22:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013f26:	f107 0318 	add.w	r3, r7, #24
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f003 f9dc 	bl	80172e8 <LoRaMacCryptoGetFCntUp>
 8013f30:	4603      	mov	r3, r0
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d001      	beq.n	8013f3a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013f36:	2312      	movs	r3, #18
 8013f38:	e098      	b.n	801406c <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8013f3a:	69bb      	ldr	r3, [r7, #24]
 8013f3c:	b29a      	uxth	r2, r3
 8013f3e:	4b4d      	ldr	r3, [pc, #308]	; (8014074 <PrepareFrame+0x21c>)
 8013f40:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8013f44:	4b4b      	ldr	r3, [pc, #300]	; (8014074 <PrepareFrame+0x21c>)
 8013f46:	2200      	movs	r2, #0
 8013f48:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8013f4c:	4b49      	ldr	r3, [pc, #292]	; (8014074 <PrepareFrame+0x21c>)
 8013f4e:	2200      	movs	r2, #0
 8013f50:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8013f54:	69bb      	ldr	r3, [r7, #24]
 8013f56:	4a47      	ldr	r2, [pc, #284]	; (8014074 <PrepareFrame+0x21c>)
 8013f58:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013f5c:	f107 0314 	add.w	r3, r7, #20
 8013f60:	4618      	mov	r0, r3
 8013f62:	f002 fb8d 	bl	8016680 <LoRaMacCommandsGetSizeSerializedCmds>
 8013f66:	4603      	mov	r3, r0
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d001      	beq.n	8013f70 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013f6c:	2313      	movs	r3, #19
 8013f6e:	e07d      	b.n	801406c <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d076      	beq.n	8014064 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8013f76:	4b42      	ldr	r3, [pc, #264]	; (8014080 <PrepareFrame+0x228>)
 8013f78:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7fe fd2b 	bl	80129d8 <GetMaxAppPayloadWithoutFOptsLength>
 8013f82:	4603      	mov	r3, r0
 8013f84:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013f86:	4b3b      	ldr	r3, [pc, #236]	; (8014074 <PrepareFrame+0x21c>)
 8013f88:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d01d      	beq.n	8013fcc <PrepareFrame+0x174>
 8013f90:	697b      	ldr	r3, [r7, #20]
 8013f92:	2b0f      	cmp	r3, #15
 8013f94:	d81a      	bhi.n	8013fcc <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8013f96:	f107 0314 	add.w	r3, r7, #20
 8013f9a:	4a3a      	ldr	r2, [pc, #232]	; (8014084 <PrepareFrame+0x22c>)
 8013f9c:	4619      	mov	r1, r3
 8013f9e:	200f      	movs	r0, #15
 8013fa0:	f002 fb84 	bl	80166ac <LoRaMacCommandsSerializeCmds>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d001      	beq.n	8013fae <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013faa:	2313      	movs	r3, #19
 8013fac:	e05e      	b.n	801406c <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	f003 030f 	and.w	r3, r3, #15
 8013fb4:	b2d9      	uxtb	r1, r3
 8013fb6:	68ba      	ldr	r2, [r7, #8]
 8013fb8:	7813      	ldrb	r3, [r2, #0]
 8013fba:	f361 0303 	bfi	r3, r1, #0, #4
 8013fbe:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	781a      	ldrb	r2, [r3, #0]
 8013fc4:	4b2b      	ldr	r3, [pc, #172]	; (8014074 <PrepareFrame+0x21c>)
 8013fc6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8013fca:	e04b      	b.n	8014064 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013fcc:	4b29      	ldr	r3, [pc, #164]	; (8014074 <PrepareFrame+0x21c>)
 8013fce:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d010      	beq.n	8013ff8 <PrepareFrame+0x1a0>
 8013fd6:	697b      	ldr	r3, [r7, #20]
 8013fd8:	2b0f      	cmp	r3, #15
 8013fda:	d90d      	bls.n	8013ff8 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013fdc:	7ffb      	ldrb	r3, [r7, #31]
 8013fde:	f107 0114 	add.w	r1, r7, #20
 8013fe2:	4a29      	ldr	r2, [pc, #164]	; (8014088 <PrepareFrame+0x230>)
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f002 fb61 	bl	80166ac <LoRaMacCommandsSerializeCmds>
 8013fea:	4603      	mov	r3, r0
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d001      	beq.n	8013ff4 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013ff0:	2313      	movs	r3, #19
 8013ff2:	e03b      	b.n	801406c <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8013ff4:	230a      	movs	r3, #10
 8013ff6:	e039      	b.n	801406c <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013ff8:	7ffb      	ldrb	r3, [r7, #31]
 8013ffa:	f107 0114 	add.w	r1, r7, #20
 8013ffe:	4a22      	ldr	r2, [pc, #136]	; (8014088 <PrepareFrame+0x230>)
 8014000:	4618      	mov	r0, r3
 8014002:	f002 fb53 	bl	80166ac <LoRaMacCommandsSerializeCmds>
 8014006:	4603      	mov	r3, r0
 8014008:	2b00      	cmp	r3, #0
 801400a:	d001      	beq.n	8014010 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801400c:	2313      	movs	r3, #19
 801400e:	e02d      	b.n	801406c <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8014010:	4b18      	ldr	r3, [pc, #96]	; (8014074 <PrepareFrame+0x21c>)
 8014012:	2200      	movs	r2, #0
 8014014:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8014018:	4b16      	ldr	r3, [pc, #88]	; (8014074 <PrepareFrame+0x21c>)
 801401a:	4a1b      	ldr	r2, [pc, #108]	; (8014088 <PrepareFrame+0x230>)
 801401c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8014020:	697b      	ldr	r3, [r7, #20]
 8014022:	b2da      	uxtb	r2, r3
 8014024:	4b13      	ldr	r3, [pc, #76]	; (8014074 <PrepareFrame+0x21c>)
 8014026:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 801402a:	e01b      	b.n	8014064 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d01a      	beq.n	8014068 <PrepareFrame+0x210>
 8014032:	4b10      	ldr	r3, [pc, #64]	; (8014074 <PrepareFrame+0x21c>)
 8014034:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8014038:	2b00      	cmp	r3, #0
 801403a:	d015      	beq.n	8014068 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801403c:	4813      	ldr	r0, [pc, #76]	; (801408c <PrepareFrame+0x234>)
 801403e:	4b0d      	ldr	r3, [pc, #52]	; (8014074 <PrepareFrame+0x21c>)
 8014040:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8014044:	b29b      	uxth	r3, r3
 8014046:	461a      	mov	r2, r3
 8014048:	6839      	ldr	r1, [r7, #0]
 801404a:	f006 fb88 	bl	801a75e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801404e:	4b09      	ldr	r3, [pc, #36]	; (8014074 <PrepareFrame+0x21c>)
 8014050:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8014054:	b29b      	uxth	r3, r3
 8014056:	3301      	adds	r3, #1
 8014058:	b29a      	uxth	r2, r3
 801405a:	4b06      	ldr	r3, [pc, #24]	; (8014074 <PrepareFrame+0x21c>)
 801405c:	801a      	strh	r2, [r3, #0]
            }
            break;
 801405e:	e003      	b.n	8014068 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014060:	2302      	movs	r3, #2
 8014062:	e003      	b.n	801406c <PrepareFrame+0x214>
            break;
 8014064:	bf00      	nop
 8014066:	e000      	b.n	801406a <PrepareFrame+0x212>
            break;
 8014068:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801406a:	2300      	movs	r3, #0
}
 801406c:	4618      	mov	r0, r3
 801406e:	3720      	adds	r7, #32
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}
 8014074:	20000850 	.word	0x20000850
 8014078:	20000988 	.word	0x20000988
 801407c:	20000852 	.word	0x20000852
 8014080:	20000d6c 	.word	0x20000d6c
 8014084:	20000968 	.word	0x20000968
 8014088:	20000cec 	.word	0x20000cec
 801408c:	20000853 	.word	0x20000853

08014090 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b08a      	sub	sp, #40	; 0x28
 8014094:	af00      	add	r7, sp, #0
 8014096:	4603      	mov	r3, r0
 8014098:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801409a:	2303      	movs	r3, #3
 801409c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80140a0:	2300      	movs	r3, #0
 80140a2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80140a4:	79fb      	ldrb	r3, [r7, #7]
 80140a6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80140a8:	4b4b      	ldr	r3, [pc, #300]	; (80141d8 <SendFrameOnChannel+0x148>)
 80140aa:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80140ae:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80140b0:	4b49      	ldr	r3, [pc, #292]	; (80141d8 <SendFrameOnChannel+0x148>)
 80140b2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80140b6:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80140b8:	4b47      	ldr	r3, [pc, #284]	; (80141d8 <SendFrameOnChannel+0x148>)
 80140ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140be:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80140c0:	4b45      	ldr	r3, [pc, #276]	; (80141d8 <SendFrameOnChannel+0x148>)
 80140c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80140c6:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80140c8:	4b44      	ldr	r3, [pc, #272]	; (80141dc <SendFrameOnChannel+0x14c>)
 80140ca:	881b      	ldrh	r3, [r3, #0]
 80140cc:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80140ce:	4b42      	ldr	r3, [pc, #264]	; (80141d8 <SendFrameOnChannel+0x148>)
 80140d0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80140d4:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80140d6:	4b40      	ldr	r3, [pc, #256]	; (80141d8 <SendFrameOnChannel+0x148>)
 80140d8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80140dc:	f107 020f 	add.w	r2, r7, #15
 80140e0:	f107 0110 	add.w	r1, r7, #16
 80140e4:	4b3e      	ldr	r3, [pc, #248]	; (80141e0 <SendFrameOnChannel+0x150>)
 80140e6:	f004 f828 	bl	801813a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80140ea:	4b3c      	ldr	r3, [pc, #240]	; (80141dc <SendFrameOnChannel+0x14c>)
 80140ec:	2201      	movs	r2, #1
 80140ee:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80140f2:	4b39      	ldr	r3, [pc, #228]	; (80141d8 <SendFrameOnChannel+0x148>)
 80140f4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80140f8:	b2da      	uxtb	r2, r3
 80140fa:	4b38      	ldr	r3, [pc, #224]	; (80141dc <SendFrameOnChannel+0x14c>)
 80140fc:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8014100:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014104:	4b35      	ldr	r3, [pc, #212]	; (80141dc <SendFrameOnChannel+0x14c>)
 8014106:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 801410a:	79fb      	ldrb	r3, [r7, #7]
 801410c:	4a33      	ldr	r2, [pc, #204]	; (80141dc <SendFrameOnChannel+0x14c>)
 801410e:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8014112:	4b32      	ldr	r3, [pc, #200]	; (80141dc <SendFrameOnChannel+0x14c>)
 8014114:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8014118:	4a30      	ldr	r2, [pc, #192]	; (80141dc <SendFrameOnChannel+0x14c>)
 801411a:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801411e:	4b2f      	ldr	r3, [pc, #188]	; (80141dc <SendFrameOnChannel+0x14c>)
 8014120:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8014124:	4a2d      	ldr	r2, [pc, #180]	; (80141dc <SendFrameOnChannel+0x14c>)
 8014126:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801412a:	f001 fff6 	bl	801611a <LoRaMacClassBIsBeaconModeActive>
 801412e:	4603      	mov	r3, r0
 8014130:	2b00      	cmp	r3, #0
 8014132:	d00b      	beq.n	801414c <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8014134:	4b29      	ldr	r3, [pc, #164]	; (80141dc <SendFrameOnChannel+0x14c>)
 8014136:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801413a:	4618      	mov	r0, r3
 801413c:	f002 f858 	bl	80161f0 <LoRaMacClassBIsUplinkCollision>
 8014140:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8014142:	6a3b      	ldr	r3, [r7, #32]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d001      	beq.n	801414c <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8014148:	2310      	movs	r3, #16
 801414a:	e040      	b.n	80141ce <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801414c:	4b22      	ldr	r3, [pc, #136]	; (80141d8 <SendFrameOnChannel+0x148>)
 801414e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014152:	2b01      	cmp	r3, #1
 8014154:	d101      	bne.n	801415a <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8014156:	f002 f855 	bl	8016204 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801415a:	f001 ffef 	bl	801613c <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801415e:	4b1e      	ldr	r3, [pc, #120]	; (80141d8 <SendFrameOnChannel+0x148>)
 8014160:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014164:	b2db      	uxtb	r3, r3
 8014166:	4a1d      	ldr	r2, [pc, #116]	; (80141dc <SendFrameOnChannel+0x14c>)
 8014168:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 801416c:	4611      	mov	r1, r2
 801416e:	4618      	mov	r0, r3
 8014170:	f7ff fc2a 	bl	80139c8 <SecureFrame>
 8014174:	4603      	mov	r3, r0
 8014176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 801417a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801417e:	2b00      	cmp	r3, #0
 8014180:	d002      	beq.n	8014188 <SendFrameOnChannel+0xf8>
    {
        return status;
 8014182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014186:	e022      	b.n	80141ce <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8014188:	4b14      	ldr	r3, [pc, #80]	; (80141dc <SendFrameOnChannel+0x14c>)
 801418a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801418e:	f043 0302 	orr.w	r3, r3, #2
 8014192:	4a12      	ldr	r2, [pc, #72]	; (80141dc <SendFrameOnChannel+0x14c>)
 8014194:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8014198:	4b10      	ldr	r3, [pc, #64]	; (80141dc <SendFrameOnChannel+0x14c>)
 801419a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801419e:	3301      	adds	r3, #1
 80141a0:	b2da      	uxtb	r2, r3
 80141a2:	4b0e      	ldr	r3, [pc, #56]	; (80141dc <SendFrameOnChannel+0x14c>)
 80141a4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80141a8:	4b0c      	ldr	r3, [pc, #48]	; (80141dc <SendFrameOnChannel+0x14c>)
 80141aa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80141ae:	4b0b      	ldr	r3, [pc, #44]	; (80141dc <SendFrameOnChannel+0x14c>)
 80141b0:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 80141b4:	4b09      	ldr	r3, [pc, #36]	; (80141dc <SendFrameOnChannel+0x14c>)
 80141b6:	2200      	movs	r2, #0
 80141b8:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80141bc:	4b09      	ldr	r3, [pc, #36]	; (80141e4 <SendFrameOnChannel+0x154>)
 80141be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141c0:	4a06      	ldr	r2, [pc, #24]	; (80141dc <SendFrameOnChannel+0x14c>)
 80141c2:	8812      	ldrh	r2, [r2, #0]
 80141c4:	b2d2      	uxtb	r2, r2
 80141c6:	4611      	mov	r1, r2
 80141c8:	4807      	ldr	r0, [pc, #28]	; (80141e8 <SendFrameOnChannel+0x158>)
 80141ca:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80141cc:	2300      	movs	r3, #0
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3728      	adds	r7, #40	; 0x28
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}
 80141d6:	bf00      	nop
 80141d8:	20000d6c 	.word	0x20000d6c
 80141dc:	20000850 	.word	0x20000850
 80141e0:	20000c6c 	.word	0x20000c6c
 80141e4:	08020428 	.word	0x08020428
 80141e8:	20000852 	.word	0x20000852

080141ec <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b082      	sub	sp, #8
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	4603      	mov	r3, r0
 80141f4:	6039      	str	r1, [r7, #0]
 80141f6:	80fb      	strh	r3, [r7, #6]
 80141f8:	4613      	mov	r3, r2
 80141fa:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80141fc:	4b09      	ldr	r3, [pc, #36]	; (8014224 <SetTxContinuousWave+0x38>)
 80141fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014200:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014204:	88fa      	ldrh	r2, [r7, #6]
 8014206:	6838      	ldr	r0, [r7, #0]
 8014208:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801420a:	4b07      	ldr	r3, [pc, #28]	; (8014228 <SetTxContinuousWave+0x3c>)
 801420c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014210:	f043 0302 	orr.w	r3, r3, #2
 8014214:	4a04      	ldr	r2, [pc, #16]	; (8014228 <SetTxContinuousWave+0x3c>)
 8014216:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801421a:	2300      	movs	r3, #0
}
 801421c:	4618      	mov	r0, r3
 801421e:	3708      	adds	r7, #8
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}
 8014224:	08020428 	.word	0x08020428
 8014228:	20000850 	.word	0x20000850

0801422c <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8014232:	2300      	movs	r3, #0
 8014234:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8014236:	4b49      	ldr	r3, [pc, #292]	; (801435c <RestoreNvmData+0x130>)
 8014238:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801423c:	2b01      	cmp	r3, #1
 801423e:	d001      	beq.n	8014244 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8014240:	2301      	movs	r3, #1
 8014242:	e087      	b.n	8014354 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8014244:	2124      	movs	r1, #36	; 0x24
 8014246:	4846      	ldr	r0, [pc, #280]	; (8014360 <RestoreNvmData+0x134>)
 8014248:	f006 fade 	bl	801a808 <Crc32>
 801424c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801424e:	4b44      	ldr	r3, [pc, #272]	; (8014360 <RestoreNvmData+0x134>)
 8014250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014252:	687a      	ldr	r2, [r7, #4]
 8014254:	429a      	cmp	r2, r3
 8014256:	d001      	beq.n	801425c <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8014258:	2317      	movs	r3, #23
 801425a:	e07b      	b.n	8014354 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 801425c:	211c      	movs	r1, #28
 801425e:	4841      	ldr	r0, [pc, #260]	; (8014364 <RestoreNvmData+0x138>)
 8014260:	f006 fad2 	bl	801a808 <Crc32>
 8014264:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8014266:	4b3e      	ldr	r3, [pc, #248]	; (8014360 <RestoreNvmData+0x134>)
 8014268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801426a:	687a      	ldr	r2, [r7, #4]
 801426c:	429a      	cmp	r2, r3
 801426e:	d001      	beq.n	8014274 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8014270:	2317      	movs	r3, #23
 8014272:	e06f      	b.n	8014354 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8014274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014278:	483b      	ldr	r0, [pc, #236]	; (8014368 <RestoreNvmData+0x13c>)
 801427a:	f006 fac5 	bl	801a808 <Crc32>
 801427e:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8014280:	4b37      	ldr	r3, [pc, #220]	; (8014360 <RestoreNvmData+0x134>)
 8014282:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8014286:	687a      	ldr	r2, [r7, #4]
 8014288:	429a      	cmp	r2, r3
 801428a:	d001      	beq.n	8014290 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801428c:	2317      	movs	r3, #23
 801428e:	e061      	b.n	8014354 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8014290:	21d4      	movs	r1, #212	; 0xd4
 8014292:	4836      	ldr	r0, [pc, #216]	; (801436c <RestoreNvmData+0x140>)
 8014294:	f006 fab8 	bl	801a808 <Crc32>
 8014298:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 801429a:	4b31      	ldr	r3, [pc, #196]	; (8014360 <RestoreNvmData+0x134>)
 801429c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80142a0:	687a      	ldr	r2, [r7, #4]
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d001      	beq.n	80142aa <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80142a6:	2317      	movs	r3, #23
 80142a8:	e054      	b.n	8014354 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80142aa:	2110      	movs	r1, #16
 80142ac:	4830      	ldr	r0, [pc, #192]	; (8014370 <RestoreNvmData+0x144>)
 80142ae:	f006 faab 	bl	801a808 <Crc32>
 80142b2:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80142b4:	4b2a      	ldr	r3, [pc, #168]	; (8014360 <RestoreNvmData+0x134>)
 80142b6:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 80142ba:	687a      	ldr	r2, [r7, #4]
 80142bc:	429a      	cmp	r2, r3
 80142be:	d001      	beq.n	80142c4 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80142c0:	2317      	movs	r3, #23
 80142c2:	e047      	b.n	8014354 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 80142c4:	f44f 715e 	mov.w	r1, #888	; 0x378
 80142c8:	482a      	ldr	r0, [pc, #168]	; (8014374 <RestoreNvmData+0x148>)
 80142ca:	f006 fa9d 	bl	801a808 <Crc32>
 80142ce:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 80142d0:	4b23      	ldr	r3, [pc, #140]	; (8014360 <RestoreNvmData+0x134>)
 80142d2:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 80142d6:	687a      	ldr	r2, [r7, #4]
 80142d8:	429a      	cmp	r2, r3
 80142da:	d001      	beq.n	80142e0 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80142dc:	2317      	movs	r3, #23
 80142de:	e039      	b.n	8014354 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80142e0:	2114      	movs	r1, #20
 80142e2:	4825      	ldr	r0, [pc, #148]	; (8014378 <RestoreNvmData+0x14c>)
 80142e4:	f006 fa90 	bl	801a808 <Crc32>
 80142e8:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80142ea:	4b1d      	ldr	r3, [pc, #116]	; (8014360 <RestoreNvmData+0x134>)
 80142ec:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 80142f0:	687a      	ldr	r2, [r7, #4]
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d001      	beq.n	80142fa <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80142f6:	2317      	movs	r3, #23
 80142f8:	e02c      	b.n	8014354 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80142fa:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80142fe:	4918      	ldr	r1, [pc, #96]	; (8014360 <RestoreNvmData+0x134>)
 8014300:	481e      	ldr	r0, [pc, #120]	; (801437c <RestoreNvmData+0x150>)
 8014302:	f006 fa2c 	bl	801a75e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8014306:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801430a:	2100      	movs	r1, #0
 801430c:	4814      	ldr	r0, [pc, #80]	; (8014360 <RestoreNvmData+0x134>)
 801430e:	f006 fa61 	bl	801a7d4 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8014312:	4b12      	ldr	r3, [pc, #72]	; (801435c <RestoreNvmData+0x130>)
 8014314:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8014318:	4b10      	ldr	r3, [pc, #64]	; (801435c <RestoreNvmData+0x130>)
 801431a:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801431e:	4b17      	ldr	r3, [pc, #92]	; (801437c <RestoreNvmData+0x150>)
 8014320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014322:	4a0e      	ldr	r2, [pc, #56]	; (801435c <RestoreNvmData+0x130>)
 8014324:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014328:	4b14      	ldr	r3, [pc, #80]	; (801437c <RestoreNvmData+0x150>)
 801432a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801432e:	4b0b      	ldr	r3, [pc, #44]	; (801435c <RestoreNvmData+0x130>)
 8014330:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8014334:	4b09      	ldr	r3, [pc, #36]	; (801435c <RestoreNvmData+0x130>)
 8014336:	2201      	movs	r2, #1
 8014338:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801433c:	4b07      	ldr	r3, [pc, #28]	; (801435c <RestoreNvmData+0x130>)
 801433e:	2202      	movs	r2, #2
 8014340:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014344:	4b0e      	ldr	r3, [pc, #56]	; (8014380 <RestoreNvmData+0x154>)
 8014346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014348:	4a0c      	ldr	r2, [pc, #48]	; (801437c <RestoreNvmData+0x150>)
 801434a:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 801434e:	4610      	mov	r0, r2
 8014350:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8014352:	2300      	movs	r3, #0
}
 8014354:	4618      	mov	r0, r3
 8014356:	3708      	adds	r7, #8
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}
 801435c:	20000850 	.word	0x20000850
 8014360:	20001338 	.word	0x20001338
 8014364:	20001360 	.word	0x20001360
 8014368:	20001380 	.word	0x20001380
 801436c:	20001484 	.word	0x20001484
 8014370:	2000155c 	.word	0x2000155c
 8014374:	20001570 	.word	0x20001570
 8014378:	200018ec 	.word	0x200018ec
 801437c:	20000d6c 	.word	0x20000d6c
 8014380:	08020428 	.word	0x08020428

08014384 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8014384:	b480      	push	{r7}
 8014386:	b083      	sub	sp, #12
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
 801438c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d002      	beq.n	801439a <DetermineFrameType+0x16>
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d101      	bne.n	801439e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801439a:	2303      	movs	r3, #3
 801439c:	e03b      	b.n	8014416 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	7b1b      	ldrb	r3, [r3, #12]
 80143a2:	f003 030f 	and.w	r3, r3, #15
 80143a6:	b2db      	uxtb	r3, r3
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d008      	beq.n	80143be <DetermineFrameType+0x3a>
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d003      	beq.n	80143be <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	2200      	movs	r2, #0
 80143ba:	701a      	strb	r2, [r3, #0]
 80143bc:	e02a      	b.n	8014414 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d103      	bne.n	80143d0 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	2201      	movs	r2, #1
 80143cc:	701a      	strb	r2, [r3, #0]
 80143ce:	e021      	b.n	8014414 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	7b1b      	ldrb	r3, [r3, #12]
 80143d4:	f003 030f 	and.w	r3, r3, #15
 80143d8:	b2db      	uxtb	r3, r3
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d108      	bne.n	80143f0 <DetermineFrameType+0x6c>
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d103      	bne.n	80143f0 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	2202      	movs	r2, #2
 80143ec:	701a      	strb	r2, [r3, #0]
 80143ee:	e011      	b.n	8014414 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	7b1b      	ldrb	r3, [r3, #12]
 80143f4:	f003 030f 	and.w	r3, r3, #15
 80143f8:	b2db      	uxtb	r3, r3
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d108      	bne.n	8014410 <DetermineFrameType+0x8c>
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d003      	beq.n	8014410 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	2203      	movs	r2, #3
 801440c:	701a      	strb	r2, [r3, #0]
 801440e:	e001      	b.n	8014414 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8014410:	2318      	movs	r3, #24
 8014412:	e000      	b.n	8014416 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8014414:	2300      	movs	r3, #0
}
 8014416:	4618      	mov	r0, r3
 8014418:	370c      	adds	r7, #12
 801441a:	46bd      	mov	sp, r7
 801441c:	bc80      	pop	{r7}
 801441e:	4770      	bx	lr

08014420 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8014420:	b480      	push	{r7}
 8014422:	b083      	sub	sp, #12
 8014424:	af00      	add	r7, sp, #0
 8014426:	4603      	mov	r3, r0
 8014428:	460a      	mov	r2, r1
 801442a:	71fb      	strb	r3, [r7, #7]
 801442c:	4613      	mov	r3, r2
 801442e:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8014430:	79fa      	ldrb	r2, [r7, #7]
 8014432:	79bb      	ldrb	r3, [r7, #6]
 8014434:	429a      	cmp	r2, r3
 8014436:	d301      	bcc.n	801443c <CheckRetrans+0x1c>
    {
        return true;
 8014438:	2301      	movs	r3, #1
 801443a:	e000      	b.n	801443e <CheckRetrans+0x1e>
    }
    return false;
 801443c:	2300      	movs	r3, #0
}
 801443e:	4618      	mov	r0, r3
 8014440:	370c      	adds	r7, #12
 8014442:	46bd      	mov	sp, r7
 8014444:	bc80      	pop	{r7}
 8014446:	4770      	bx	lr

08014448 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8014448:	b580      	push	{r7, lr}
 801444a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 801444c:	4b12      	ldr	r3, [pc, #72]	; (8014498 <CheckRetransUnconfirmedUplink+0x50>)
 801444e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014452:	4a12      	ldr	r2, [pc, #72]	; (801449c <CheckRetransUnconfirmedUplink+0x54>)
 8014454:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8014458:	4611      	mov	r1, r2
 801445a:	4618      	mov	r0, r3
 801445c:	f7ff ffe0 	bl	8014420 <CheckRetrans>
 8014460:	4603      	mov	r3, r0
 8014462:	2b00      	cmp	r3, #0
 8014464:	d001      	beq.n	801446a <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8014466:	2301      	movs	r3, #1
 8014468:	e014      	b.n	8014494 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801446a:	4b0b      	ldr	r3, [pc, #44]	; (8014498 <CheckRetransUnconfirmedUplink+0x50>)
 801446c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8014470:	f003 0302 	and.w	r3, r3, #2
 8014474:	b2db      	uxtb	r3, r3
 8014476:	2b00      	cmp	r3, #0
 8014478:	d00b      	beq.n	8014492 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801447a:	4b07      	ldr	r3, [pc, #28]	; (8014498 <CheckRetransUnconfirmedUplink+0x50>)
 801447c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8014480:	2b00      	cmp	r3, #0
 8014482:	d004      	beq.n	801448e <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8014484:	4b04      	ldr	r3, [pc, #16]	; (8014498 <CheckRetransUnconfirmedUplink+0x50>)
 8014486:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801448a:	2b01      	cmp	r3, #1
 801448c:	d101      	bne.n	8014492 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 801448e:	2301      	movs	r3, #1
 8014490:	e000      	b.n	8014494 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8014492:	2300      	movs	r3, #0
}
 8014494:	4618      	mov	r0, r3
 8014496:	bd80      	pop	{r7, pc}
 8014498:	20000850 	.word	0x20000850
 801449c:	20000d6c 	.word	0x20000d6c

080144a0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80144a4:	4b10      	ldr	r3, [pc, #64]	; (80144e8 <CheckRetransConfirmedUplink+0x48>)
 80144a6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80144aa:	4a10      	ldr	r2, [pc, #64]	; (80144ec <CheckRetransConfirmedUplink+0x4c>)
 80144ac:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 80144b0:	4611      	mov	r1, r2
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7ff ffb4 	bl	8014420 <CheckRetrans>
 80144b8:	4603      	mov	r3, r0
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d001      	beq.n	80144c2 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80144be:	2301      	movs	r3, #1
 80144c0:	e00f      	b.n	80144e2 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80144c2:	4b09      	ldr	r3, [pc, #36]	; (80144e8 <CheckRetransConfirmedUplink+0x48>)
 80144c4:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80144c8:	f003 0302 	and.w	r3, r3, #2
 80144cc:	b2db      	uxtb	r3, r3
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d006      	beq.n	80144e0 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80144d2:	4b05      	ldr	r3, [pc, #20]	; (80144e8 <CheckRetransConfirmedUplink+0x48>)
 80144d4:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d001      	beq.n	80144e0 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 80144dc:	2301      	movs	r3, #1
 80144de:	e000      	b.n	80144e2 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 80144e0:	2300      	movs	r3, #0
}
 80144e2:	4618      	mov	r0, r3
 80144e4:	bd80      	pop	{r7, pc}
 80144e6:	bf00      	nop
 80144e8:	20000850 	.word	0x20000850
 80144ec:	20000d6c 	.word	0x20000d6c

080144f0 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 80144f0:	b480      	push	{r7}
 80144f2:	b083      	sub	sp, #12
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80144fe:	d002      	beq.n	8014506 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	3301      	adds	r3, #1
 8014504:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8014506:	687b      	ldr	r3, [r7, #4]
}
 8014508:	4618      	mov	r0, r3
 801450a:	370c      	adds	r7, #12
 801450c:	46bd      	mov	sp, r7
 801450e:	bc80      	pop	{r7}
 8014510:	4770      	bx	lr
	...

08014514 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8014514:	b580      	push	{r7, lr}
 8014516:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8014518:	4b1a      	ldr	r3, [pc, #104]	; (8014584 <StopRetransmission+0x70>)
 801451a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801451e:	f003 0302 	and.w	r3, r3, #2
 8014522:	b2db      	uxtb	r3, r3
 8014524:	2b00      	cmp	r3, #0
 8014526:	d009      	beq.n	801453c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8014528:	4b16      	ldr	r3, [pc, #88]	; (8014584 <StopRetransmission+0x70>)
 801452a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801452e:	2b00      	cmp	r3, #0
 8014530:	d011      	beq.n	8014556 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8014532:	4b14      	ldr	r3, [pc, #80]	; (8014584 <StopRetransmission+0x70>)
 8014534:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8014538:	2b01      	cmp	r3, #1
 801453a:	d00c      	beq.n	8014556 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801453c:	4b12      	ldr	r3, [pc, #72]	; (8014588 <StopRetransmission+0x74>)
 801453e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014542:	2b00      	cmp	r3, #0
 8014544:	d007      	beq.n	8014556 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8014546:	4b10      	ldr	r3, [pc, #64]	; (8014588 <StopRetransmission+0x74>)
 8014548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801454a:	4618      	mov	r0, r3
 801454c:	f7ff ffd0 	bl	80144f0 <IncreaseAdrAckCounter>
 8014550:	4603      	mov	r3, r0
 8014552:	4a0d      	ldr	r2, [pc, #52]	; (8014588 <StopRetransmission+0x74>)
 8014554:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8014556:	4b0b      	ldr	r3, [pc, #44]	; (8014584 <StopRetransmission+0x70>)
 8014558:	2200      	movs	r2, #0
 801455a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 801455e:	4b09      	ldr	r3, [pc, #36]	; (8014584 <StopRetransmission+0x70>)
 8014560:	2200      	movs	r2, #0
 8014562:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8014566:	4b07      	ldr	r3, [pc, #28]	; (8014584 <StopRetransmission+0x70>)
 8014568:	2200      	movs	r2, #0
 801456a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801456e:	4b05      	ldr	r3, [pc, #20]	; (8014584 <StopRetransmission+0x70>)
 8014570:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014574:	f023 0302 	bic.w	r3, r3, #2
 8014578:	4a02      	ldr	r2, [pc, #8]	; (8014584 <StopRetransmission+0x70>)
 801457a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 801457e:	2301      	movs	r3, #1
}
 8014580:	4618      	mov	r0, r3
 8014582:	bd80      	pop	{r7, pc}
 8014584:	20000850 	.word	0x20000850
 8014588:	20000d6c 	.word	0x20000d6c

0801458c <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 801458c:	b580      	push	{r7, lr}
 801458e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8014590:	4b08      	ldr	r3, [pc, #32]	; (80145b4 <OnMacProcessNotify+0x28>)
 8014592:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014596:	2b00      	cmp	r3, #0
 8014598:	d00a      	beq.n	80145b0 <OnMacProcessNotify+0x24>
 801459a:	4b06      	ldr	r3, [pc, #24]	; (80145b4 <OnMacProcessNotify+0x28>)
 801459c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80145a0:	695b      	ldr	r3, [r3, #20]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d004      	beq.n	80145b0 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80145a6:	4b03      	ldr	r3, [pc, #12]	; (80145b4 <OnMacProcessNotify+0x28>)
 80145a8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80145ac:	695b      	ldr	r3, [r3, #20]
 80145ae:	4798      	blx	r3
    }
}
 80145b0:	bf00      	nop
 80145b2:	bd80      	pop	{r7, pc}
 80145b4:	20000850 	.word	0x20000850

080145b8 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b082      	sub	sp, #8
 80145bc:	af00      	add	r7, sp, #0
 80145be:	4603      	mov	r3, r0
 80145c0:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80145c2:	4b0b      	ldr	r3, [pc, #44]	; (80145f0 <CallNvmDataChangeCallback+0x38>)
 80145c4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d00c      	beq.n	80145e6 <CallNvmDataChangeCallback+0x2e>
 80145cc:	4b08      	ldr	r3, [pc, #32]	; (80145f0 <CallNvmDataChangeCallback+0x38>)
 80145ce:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80145d2:	691b      	ldr	r3, [r3, #16]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d006      	beq.n	80145e6 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80145d8:	4b05      	ldr	r3, [pc, #20]	; (80145f0 <CallNvmDataChangeCallback+0x38>)
 80145da:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80145de:	691b      	ldr	r3, [r3, #16]
 80145e0:	88fa      	ldrh	r2, [r7, #6]
 80145e2:	4610      	mov	r0, r2
 80145e4:	4798      	blx	r3
    }
}
 80145e6:	bf00      	nop
 80145e8:	3708      	adds	r7, #8
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}
 80145ee:	bf00      	nop
 80145f0:	20000850 	.word	0x20000850

080145f4 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80145f4:	b480      	push	{r7}
 80145f6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80145f8:	4b0b      	ldr	r3, [pc, #44]	; (8014628 <IsRequestPending+0x34>)
 80145fa:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80145fe:	f003 0304 	and.w	r3, r3, #4
 8014602:	b2db      	uxtb	r3, r3
 8014604:	2b00      	cmp	r3, #0
 8014606:	d107      	bne.n	8014618 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8014608:	4b07      	ldr	r3, [pc, #28]	; (8014628 <IsRequestPending+0x34>)
 801460a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801460e:	f003 0301 	and.w	r3, r3, #1
 8014612:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8014614:	2b00      	cmp	r3, #0
 8014616:	d001      	beq.n	801461c <IsRequestPending+0x28>
    {
        return 1;
 8014618:	2301      	movs	r3, #1
 801461a:	e000      	b.n	801461e <IsRequestPending+0x2a>
    }
    return 0;
 801461c:	2300      	movs	r3, #0
}
 801461e:	4618      	mov	r0, r3
 8014620:	46bd      	mov	sp, r7
 8014622:	bc80      	pop	{r7}
 8014624:	4770      	bx	lr
 8014626:	bf00      	nop
 8014628:	20000850 	.word	0x20000850

0801462c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 801462c:	b590      	push	{r4, r7, lr}
 801462e:	b091      	sub	sp, #68	; 0x44
 8014630:	af02      	add	r7, sp, #8
 8014632:	6178      	str	r0, [r7, #20]
 8014634:	6139      	str	r1, [r7, #16]
 8014636:	4613      	mov	r3, r2
 8014638:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801463a:	697b      	ldr	r3, [r7, #20]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d002      	beq.n	8014646 <LoRaMacInitialization+0x1a>
 8014640:	693b      	ldr	r3, [r7, #16]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d101      	bne.n	801464a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014646:	2303      	movs	r3, #3
 8014648:	e27a      	b.n	8014b40 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801464a:	697b      	ldr	r3, [r7, #20]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d00b      	beq.n	801466a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8014652:	697b      	ldr	r3, [r7, #20]
 8014654:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8014656:	2b00      	cmp	r3, #0
 8014658:	d007      	beq.n	801466a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801465a:	697b      	ldr	r3, [r7, #20]
 801465c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801465e:	2b00      	cmp	r3, #0
 8014660:	d003      	beq.n	801466a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8014662:	697b      	ldr	r3, [r7, #20]
 8014664:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8014666:	2b00      	cmp	r3, #0
 8014668:	d101      	bne.n	801466e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801466a:	2303      	movs	r3, #3
 801466c:	e268      	b.n	8014b40 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801466e:	7bfb      	ldrb	r3, [r7, #15]
 8014670:	4618      	mov	r0, r3
 8014672:	f003 fcac 	bl	8017fce <RegionIsActive>
 8014676:	4603      	mov	r3, r0
 8014678:	f083 0301 	eor.w	r3, r3, #1
 801467c:	b2db      	uxtb	r3, r3
 801467e:	2b00      	cmp	r3, #0
 8014680:	d001      	beq.n	8014686 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014682:	2309      	movs	r3, #9
 8014684:	e25c      	b.n	8014b40 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8014686:	6978      	ldr	r0, [r7, #20]
 8014688:	f002 f932 	bl	80168f0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 801468c:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8014690:	2100      	movs	r1, #0
 8014692:	48c7      	ldr	r0, [pc, #796]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014694:	f006 f89e 	bl	801a7d4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8014698:	f240 521c 	movw	r2, #1308	; 0x51c
 801469c:	2100      	movs	r1, #0
 801469e:	48c5      	ldr	r0, [pc, #788]	; (80149b4 <LoRaMacInitialization+0x388>)
 80146a0:	f006 f898 	bl	801a7d4 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 80146a4:	4ac2      	ldr	r2, [pc, #776]	; (80149b0 <LoRaMacInitialization+0x384>)
 80146a6:	7bfb      	ldrb	r3, [r7, #15]
 80146a8:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80146ac:	4bc0      	ldr	r3, [pc, #768]	; (80149b0 <LoRaMacInitialization+0x384>)
 80146ae:	2200      	movs	r2, #0
 80146b0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 80146b4:	4bbe      	ldr	r3, [pc, #760]	; (80149b0 <LoRaMacInitialization+0x384>)
 80146b6:	2200      	movs	r2, #0
 80146b8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80146bc:	4bbc      	ldr	r3, [pc, #752]	; (80149b0 <LoRaMacInitialization+0x384>)
 80146be:	4abe      	ldr	r2, [pc, #760]	; (80149b8 <LoRaMacInitialization+0x38c>)
 80146c0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80146c4:	2300      	movs	r3, #0
 80146c6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80146ca:	4bbc      	ldr	r3, [pc, #752]	; (80149bc <LoRaMacInitialization+0x390>)
 80146cc:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80146ce:	4bbc      	ldr	r3, [pc, #752]	; (80149c0 <LoRaMacInitialization+0x394>)
 80146d0:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 80146d2:	4bbc      	ldr	r3, [pc, #752]	; (80149c4 <LoRaMacInitialization+0x398>)
 80146d4:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80146d6:	4bb6      	ldr	r3, [pc, #728]	; (80149b0 <LoRaMacInitialization+0x384>)
 80146d8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80146dc:	f107 021c 	add.w	r2, r7, #28
 80146e0:	4611      	mov	r1, r2
 80146e2:	4618      	mov	r0, r3
 80146e4:	f003 fcac 	bl	8018040 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80146e8:	230f      	movs	r3, #15
 80146ea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80146ee:	4bb0      	ldr	r3, [pc, #704]	; (80149b0 <LoRaMacInitialization+0x384>)
 80146f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80146f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80146f8:	4611      	mov	r1, r2
 80146fa:	4618      	mov	r0, r3
 80146fc:	f003 fc77 	bl	8017fee <RegionGetPhyParam>
 8014700:	4603      	mov	r3, r0
 8014702:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8014704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014706:	2b00      	cmp	r3, #0
 8014708:	bf14      	ite	ne
 801470a:	2301      	movne	r3, #1
 801470c:	2300      	moveq	r3, #0
 801470e:	b2da      	uxtb	r2, r3
 8014710:	4ba7      	ldr	r3, [pc, #668]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014712:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8014716:	230a      	movs	r3, #10
 8014718:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801471c:	4ba4      	ldr	r3, [pc, #656]	; (80149b0 <LoRaMacInitialization+0x384>)
 801471e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014722:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014726:	4611      	mov	r1, r2
 8014728:	4618      	mov	r0, r3
 801472a:	f003 fc60 	bl	8017fee <RegionGetPhyParam>
 801472e:	4603      	mov	r3, r0
 8014730:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8014732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014734:	b25a      	sxtb	r2, r3
 8014736:	4b9e      	ldr	r3, [pc, #632]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014738:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 801473c:	2306      	movs	r3, #6
 801473e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014742:	4b9b      	ldr	r3, [pc, #620]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014744:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014748:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801474c:	4611      	mov	r1, r2
 801474e:	4618      	mov	r0, r3
 8014750:	f003 fc4d 	bl	8017fee <RegionGetPhyParam>
 8014754:	4603      	mov	r3, r0
 8014756:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8014758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801475a:	b25a      	sxtb	r2, r3
 801475c:	4b94      	ldr	r3, [pc, #592]	; (80149b0 <LoRaMacInitialization+0x384>)
 801475e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8014762:	2310      	movs	r3, #16
 8014764:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014768:	4b91      	ldr	r3, [pc, #580]	; (80149b0 <LoRaMacInitialization+0x384>)
 801476a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801476e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014772:	4611      	mov	r1, r2
 8014774:	4618      	mov	r0, r3
 8014776:	f003 fc3a 	bl	8017fee <RegionGetPhyParam>
 801477a:	4603      	mov	r3, r0
 801477c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014780:	4a8b      	ldr	r2, [pc, #556]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014782:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8014786:	2311      	movs	r3, #17
 8014788:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801478c:	4b88      	ldr	r3, [pc, #544]	; (80149b0 <LoRaMacInitialization+0x384>)
 801478e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014792:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014796:	4611      	mov	r1, r2
 8014798:	4618      	mov	r0, r3
 801479a:	f003 fc28 	bl	8017fee <RegionGetPhyParam>
 801479e:	4603      	mov	r3, r0
 80147a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80147a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147a4:	4a82      	ldr	r2, [pc, #520]	; (80149b0 <LoRaMacInitialization+0x384>)
 80147a6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80147aa:	2312      	movs	r3, #18
 80147ac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80147b0:	4b7f      	ldr	r3, [pc, #508]	; (80149b0 <LoRaMacInitialization+0x384>)
 80147b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80147b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80147ba:	4611      	mov	r1, r2
 80147bc:	4618      	mov	r0, r3
 80147be:	f003 fc16 	bl	8017fee <RegionGetPhyParam>
 80147c2:	4603      	mov	r3, r0
 80147c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80147c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147c8:	4a79      	ldr	r2, [pc, #484]	; (80149b0 <LoRaMacInitialization+0x384>)
 80147ca:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80147ce:	2313      	movs	r3, #19
 80147d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80147d4:	4b76      	ldr	r3, [pc, #472]	; (80149b0 <LoRaMacInitialization+0x384>)
 80147d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80147da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80147de:	4611      	mov	r1, r2
 80147e0:	4618      	mov	r0, r3
 80147e2:	f003 fc04 	bl	8017fee <RegionGetPhyParam>
 80147e6:	4603      	mov	r3, r0
 80147e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80147ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ec:	4a70      	ldr	r2, [pc, #448]	; (80149b0 <LoRaMacInitialization+0x384>)
 80147ee:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80147f2:	2314      	movs	r3, #20
 80147f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80147f8:	4b6d      	ldr	r3, [pc, #436]	; (80149b0 <LoRaMacInitialization+0x384>)
 80147fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80147fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014802:	4611      	mov	r1, r2
 8014804:	4618      	mov	r0, r3
 8014806:	f003 fbf2 	bl	8017fee <RegionGetPhyParam>
 801480a:	4603      	mov	r3, r0
 801480c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014810:	4a67      	ldr	r2, [pc, #412]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014812:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8014816:	2316      	movs	r3, #22
 8014818:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801481c:	4b64      	ldr	r3, [pc, #400]	; (80149b0 <LoRaMacInitialization+0x384>)
 801481e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014822:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014826:	4611      	mov	r1, r2
 8014828:	4618      	mov	r0, r3
 801482a:	f003 fbe0 	bl	8017fee <RegionGetPhyParam>
 801482e:	4603      	mov	r3, r0
 8014830:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8014832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014834:	b2da      	uxtb	r2, r3
 8014836:	4b5e      	ldr	r3, [pc, #376]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014838:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 801483c:	2317      	movs	r3, #23
 801483e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014842:	4b5b      	ldr	r3, [pc, #364]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014844:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014848:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801484c:	4611      	mov	r1, r2
 801484e:	4618      	mov	r0, r3
 8014850:	f003 fbcd 	bl	8017fee <RegionGetPhyParam>
 8014854:	4603      	mov	r3, r0
 8014856:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8014858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801485a:	4a55      	ldr	r2, [pc, #340]	; (80149b0 <LoRaMacInitialization+0x384>)
 801485c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8014860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014862:	4a53      	ldr	r2, [pc, #332]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014864:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8014868:	2318      	movs	r3, #24
 801486a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801486e:	4b50      	ldr	r3, [pc, #320]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014870:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014874:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014878:	4611      	mov	r1, r2
 801487a:	4618      	mov	r0, r3
 801487c:	f003 fbb7 	bl	8017fee <RegionGetPhyParam>
 8014880:	4603      	mov	r3, r0
 8014882:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8014884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014886:	b2da      	uxtb	r2, r3
 8014888:	4b49      	ldr	r3, [pc, #292]	; (80149b0 <LoRaMacInitialization+0x384>)
 801488a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801488e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014890:	b2da      	uxtb	r2, r3
 8014892:	4b47      	ldr	r3, [pc, #284]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014894:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8014898:	231d      	movs	r3, #29
 801489a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801489e:	4b44      	ldr	r3, [pc, #272]	; (80149b0 <LoRaMacInitialization+0x384>)
 80148a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80148a8:	4611      	mov	r1, r2
 80148aa:	4618      	mov	r0, r3
 80148ac:	f003 fb9f 	bl	8017fee <RegionGetPhyParam>
 80148b0:	4603      	mov	r3, r0
 80148b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80148b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148b6:	b2da      	uxtb	r2, r3
 80148b8:	4b3d      	ldr	r3, [pc, #244]	; (80149b0 <LoRaMacInitialization+0x384>)
 80148ba:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80148be:	231e      	movs	r3, #30
 80148c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80148c4:	4b3a      	ldr	r3, [pc, #232]	; (80149b0 <LoRaMacInitialization+0x384>)
 80148c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80148ce:	4611      	mov	r1, r2
 80148d0:	4618      	mov	r0, r3
 80148d2:	f003 fb8c 	bl	8017fee <RegionGetPhyParam>
 80148d6:	4603      	mov	r3, r0
 80148d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80148da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148dc:	b2da      	uxtb	r2, r3
 80148de:	4b34      	ldr	r3, [pc, #208]	; (80149b0 <LoRaMacInitialization+0x384>)
 80148e0:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80148e4:	231f      	movs	r3, #31
 80148e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80148ea:	4b31      	ldr	r3, [pc, #196]	; (80149b0 <LoRaMacInitialization+0x384>)
 80148ec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80148f4:	4611      	mov	r1, r2
 80148f6:	4618      	mov	r0, r3
 80148f8:	f003 fb79 	bl	8017fee <RegionGetPhyParam>
 80148fc:	4603      	mov	r3, r0
 80148fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8014900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014902:	4a2b      	ldr	r2, [pc, #172]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014904:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8014908:	2320      	movs	r3, #32
 801490a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801490e:	4b28      	ldr	r3, [pc, #160]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014910:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014914:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014918:	4611      	mov	r1, r2
 801491a:	4618      	mov	r0, r3
 801491c:	f003 fb67 	bl	8017fee <RegionGetPhyParam>
 8014920:	4603      	mov	r3, r0
 8014922:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8014924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014926:	4a22      	ldr	r2, [pc, #136]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014928:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 801492c:	230b      	movs	r3, #11
 801492e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014932:	4b1f      	ldr	r3, [pc, #124]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014934:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014938:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801493c:	4611      	mov	r1, r2
 801493e:	4618      	mov	r0, r3
 8014940:	f003 fb55 	bl	8017fee <RegionGetPhyParam>
 8014944:	4603      	mov	r3, r0
 8014946:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8014948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801494a:	b29a      	uxth	r2, r3
 801494c:	4b18      	ldr	r3, [pc, #96]	; (80149b0 <LoRaMacInitialization+0x384>)
 801494e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8014952:	230c      	movs	r3, #12
 8014954:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014958:	4b15      	ldr	r3, [pc, #84]	; (80149b0 <LoRaMacInitialization+0x384>)
 801495a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801495e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014962:	4611      	mov	r1, r2
 8014964:	4618      	mov	r0, r3
 8014966:	f003 fb42 	bl	8017fee <RegionGetPhyParam>
 801496a:	4603      	mov	r3, r0
 801496c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 801496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014970:	b29a      	uxth	r2, r3
 8014972:	4b0f      	ldr	r3, [pc, #60]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014974:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8014978:	4b0d      	ldr	r3, [pc, #52]	; (80149b0 <LoRaMacInitialization+0x384>)
 801497a:	2201      	movs	r2, #1
 801497c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8014980:	4b0b      	ldr	r3, [pc, #44]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014982:	220a      	movs	r2, #10
 8014984:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8014988:	4b09      	ldr	r3, [pc, #36]	; (80149b0 <LoRaMacInitialization+0x384>)
 801498a:	2206      	movs	r2, #6
 801498c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8014990:	4b07      	ldr	r3, [pc, #28]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014996:	4a06      	ldr	r2, [pc, #24]	; (80149b0 <LoRaMacInitialization+0x384>)
 8014998:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801499a:	4b05      	ldr	r3, [pc, #20]	; (80149b0 <LoRaMacInitialization+0x384>)
 801499c:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80149a0:	4b03      	ldr	r3, [pc, #12]	; (80149b0 <LoRaMacInitialization+0x384>)
 80149a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80149a6:	4b02      	ldr	r3, [pc, #8]	; (80149b0 <LoRaMacInitialization+0x384>)
 80149a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80149ac:	e00c      	b.n	80149c8 <LoRaMacInitialization+0x39c>
 80149ae:	bf00      	nop
 80149b0:	20000d6c 	.word	0x20000d6c
 80149b4:	20000850 	.word	0x20000850
 80149b8:	01000400 	.word	0x01000400
 80149bc:	20000f90 	.word	0x20000f90
 80149c0:	20000fa4 	.word	0x20000fa4
 80149c4:	20001904 	.word	0x20001904
 80149c8:	4a5f      	ldr	r2, [pc, #380]	; (8014b48 <LoRaMacInitialization+0x51c>)
 80149ca:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80149cc:	4b5e      	ldr	r3, [pc, #376]	; (8014b48 <LoRaMacInitialization+0x51c>)
 80149ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80149d2:	4a5d      	ldr	r2, [pc, #372]	; (8014b48 <LoRaMacInitialization+0x51c>)
 80149d4:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80149d6:	4b5c      	ldr	r3, [pc, #368]	; (8014b48 <LoRaMacInitialization+0x51c>)
 80149d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80149dc:	4a5a      	ldr	r2, [pc, #360]	; (8014b48 <LoRaMacInitialization+0x51c>)
 80149de:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80149e0:	4b59      	ldr	r3, [pc, #356]	; (8014b48 <LoRaMacInitialization+0x51c>)
 80149e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80149e6:	4a58      	ldr	r2, [pc, #352]	; (8014b48 <LoRaMacInitialization+0x51c>)
 80149e8:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80149ea:	4b57      	ldr	r3, [pc, #348]	; (8014b48 <LoRaMacInitialization+0x51c>)
 80149ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80149f0:	4a55      	ldr	r2, [pc, #340]	; (8014b48 <LoRaMacInitialization+0x51c>)
 80149f2:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80149f4:	4b54      	ldr	r3, [pc, #336]	; (8014b48 <LoRaMacInitialization+0x51c>)
 80149f6:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 80149fa:	4b53      	ldr	r3, [pc, #332]	; (8014b48 <LoRaMacInitialization+0x51c>)
 80149fc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8014a00:	4b51      	ldr	r3, [pc, #324]	; (8014b48 <LoRaMacInitialization+0x51c>)
 8014a02:	2201      	movs	r2, #1
 8014a04:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8014a08:	4a50      	ldr	r2, [pc, #320]	; (8014b4c <LoRaMacInitialization+0x520>)
 8014a0a:	693b      	ldr	r3, [r7, #16]
 8014a0c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8014a10:	2000      	movs	r0, #0
 8014a12:	f7ff f869 	bl	8013ae8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8014a16:	4b4c      	ldr	r3, [pc, #304]	; (8014b48 <LoRaMacInitialization+0x51c>)
 8014a18:	2201      	movs	r2, #1
 8014a1a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8014a1e:	4a4b      	ldr	r2, [pc, #300]	; (8014b4c <LoRaMacInitialization+0x520>)
 8014a20:	697b      	ldr	r3, [r7, #20]
 8014a22:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8014a26:	4b49      	ldr	r3, [pc, #292]	; (8014b4c <LoRaMacInitialization+0x520>)
 8014a28:	2200      	movs	r2, #0
 8014a2a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8014a2e:	4b47      	ldr	r3, [pc, #284]	; (8014b4c <LoRaMacInitialization+0x520>)
 8014a30:	2201      	movs	r2, #1
 8014a32:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8014a36:	4b44      	ldr	r3, [pc, #272]	; (8014b48 <LoRaMacInitialization+0x51c>)
 8014a38:	2200      	movs	r2, #0
 8014a3a:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8014a3c:	4b42      	ldr	r3, [pc, #264]	; (8014b48 <LoRaMacInitialization+0x51c>)
 8014a3e:	2200      	movs	r2, #0
 8014a40:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8014a42:	2300      	movs	r3, #0
 8014a44:	9300      	str	r3, [sp, #0]
 8014a46:	4b42      	ldr	r3, [pc, #264]	; (8014b50 <LoRaMacInitialization+0x524>)
 8014a48:	2200      	movs	r2, #0
 8014a4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014a4e:	4841      	ldr	r0, [pc, #260]	; (8014b54 <LoRaMacInitialization+0x528>)
 8014a50:	f009 ff7c 	bl	801e94c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8014a54:	2300      	movs	r3, #0
 8014a56:	9300      	str	r3, [sp, #0]
 8014a58:	4b3f      	ldr	r3, [pc, #252]	; (8014b58 <LoRaMacInitialization+0x52c>)
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014a60:	483e      	ldr	r0, [pc, #248]	; (8014b5c <LoRaMacInitialization+0x530>)
 8014a62:	f009 ff73 	bl	801e94c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8014a66:	2300      	movs	r3, #0
 8014a68:	9300      	str	r3, [sp, #0]
 8014a6a:	4b3d      	ldr	r3, [pc, #244]	; (8014b60 <LoRaMacInitialization+0x534>)
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014a72:	483c      	ldr	r0, [pc, #240]	; (8014b64 <LoRaMacInitialization+0x538>)
 8014a74:	f009 ff6a 	bl	801e94c <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8014a78:	2300      	movs	r3, #0
 8014a7a:	9300      	str	r3, [sp, #0]
 8014a7c:	4b3a      	ldr	r3, [pc, #232]	; (8014b68 <LoRaMacInitialization+0x53c>)
 8014a7e:	2200      	movs	r2, #0
 8014a80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014a84:	4839      	ldr	r0, [pc, #228]	; (8014b6c <LoRaMacInitialization+0x540>)
 8014a86:	f009 ff61 	bl	801e94c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8014a8a:	4c2f      	ldr	r4, [pc, #188]	; (8014b48 <LoRaMacInitialization+0x51c>)
 8014a8c:	463b      	mov	r3, r7
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f009 fad0 	bl	801e034 <SysTimeGetMcuTime>
 8014a94:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8014a98:	463a      	mov	r2, r7
 8014a9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014a9e:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8014aa2:	4b33      	ldr	r3, [pc, #204]	; (8014b70 <LoRaMacInitialization+0x544>)
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8014aa8:	4b28      	ldr	r3, [pc, #160]	; (8014b4c <LoRaMacInitialization+0x520>)
 8014aaa:	4a32      	ldr	r2, [pc, #200]	; (8014b74 <LoRaMacInitialization+0x548>)
 8014aac:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8014ab0:	4b26      	ldr	r3, [pc, #152]	; (8014b4c <LoRaMacInitialization+0x520>)
 8014ab2:	4a31      	ldr	r2, [pc, #196]	; (8014b78 <LoRaMacInitialization+0x54c>)
 8014ab4:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8014ab8:	4b24      	ldr	r3, [pc, #144]	; (8014b4c <LoRaMacInitialization+0x520>)
 8014aba:	4a30      	ldr	r2, [pc, #192]	; (8014b7c <LoRaMacInitialization+0x550>)
 8014abc:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8014ac0:	4b22      	ldr	r3, [pc, #136]	; (8014b4c <LoRaMacInitialization+0x520>)
 8014ac2:	4a2f      	ldr	r2, [pc, #188]	; (8014b80 <LoRaMacInitialization+0x554>)
 8014ac4:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8014ac8:	4b20      	ldr	r3, [pc, #128]	; (8014b4c <LoRaMacInitialization+0x520>)
 8014aca:	4a2e      	ldr	r2, [pc, #184]	; (8014b84 <LoRaMacInitialization+0x558>)
 8014acc:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8014ad0:	4b2d      	ldr	r3, [pc, #180]	; (8014b88 <LoRaMacInitialization+0x55c>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	482d      	ldr	r0, [pc, #180]	; (8014b8c <LoRaMacInitialization+0x560>)
 8014ad6:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8014ad8:	482d      	ldr	r0, [pc, #180]	; (8014b90 <LoRaMacInitialization+0x564>)
 8014ada:	f7fa f9f9 	bl	800eed0 <SecureElementInit>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d001      	beq.n	8014ae8 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014ae4:	2311      	movs	r3, #17
 8014ae6:	e02b      	b.n	8014b40 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8014ae8:	4817      	ldr	r0, [pc, #92]	; (8014b48 <LoRaMacInitialization+0x51c>)
 8014aea:	f002 fbc1 	bl	8017270 <LoRaMacCryptoInit>
 8014aee:	4603      	mov	r3, r0
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d001      	beq.n	8014af8 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014af4:	2311      	movs	r3, #17
 8014af6:	e023      	b.n	8014b40 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8014af8:	f001 fcbc 	bl	8016474 <LoRaMacCommandsInit>
 8014afc:	4603      	mov	r3, r0
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d001      	beq.n	8014b06 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014b02:	2313      	movs	r3, #19
 8014b04:	e01c      	b.n	8014b40 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8014b06:	4823      	ldr	r0, [pc, #140]	; (8014b94 <LoRaMacInitialization+0x568>)
 8014b08:	f002 fc52 	bl	80173b0 <LoRaMacCryptoSetMulticastReference>
 8014b0c:	4603      	mov	r3, r0
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d001      	beq.n	8014b16 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014b12:	2311      	movs	r3, #17
 8014b14:	e014      	b.n	8014b40 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8014b16:	4b1c      	ldr	r3, [pc, #112]	; (8014b88 <LoRaMacInitialization+0x55c>)
 8014b18:	695b      	ldr	r3, [r3, #20]
 8014b1a:	4798      	blx	r3
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f005 fdf8 	bl	801a714 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014b24:	4b18      	ldr	r3, [pc, #96]	; (8014b88 <LoRaMacInitialization+0x55c>)
 8014b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b28:	4a07      	ldr	r2, [pc, #28]	; (8014b48 <LoRaMacInitialization+0x51c>)
 8014b2a:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8014b2e:	4610      	mov	r0, r2
 8014b30:	4798      	blx	r3
    Radio.Sleep( );
 8014b32:	4b15      	ldr	r3, [pc, #84]	; (8014b88 <LoRaMacInitialization+0x55c>)
 8014b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b36:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8014b38:	2001      	movs	r0, #1
 8014b3a:	f7fd fa7d 	bl	8012038 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8014b3e:	2300      	movs	r3, #0
}
 8014b40:	4618      	mov	r0, r3
 8014b42:	373c      	adds	r7, #60	; 0x3c
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd90      	pop	{r4, r7, pc}
 8014b48:	20000d6c 	.word	0x20000d6c
 8014b4c:	20000850 	.word	0x20000850
 8014b50:	080125c5 	.word	0x080125c5
 8014b54:	20000bb8 	.word	0x20000bb8
 8014b58:	08012655 	.word	0x08012655
 8014b5c:	20000bd0 	.word	0x20000bd0
 8014b60:	080126cd 	.word	0x080126cd
 8014b64:	20000be8 	.word	0x20000be8
 8014b68:	0801274d 	.word	0x0801274d
 8014b6c:	20000c50 	.word	0x20000c50
 8014b70:	20001994 	.word	0x20001994
 8014b74:	08011075 	.word	0x08011075
 8014b78:	080110d1 	.word	0x080110d1
 8014b7c:	08011171 	.word	0x08011171
 8014b80:	08011145 	.word	0x08011145
 8014b84:	0801118d 	.word	0x0801118d
 8014b88:	08020428 	.word	0x08020428
 8014b8c:	20000b9c 	.word	0x20000b9c
 8014b90:	20000eb8 	.word	0x20000eb8
 8014b94:	20000e54 	.word	0x20000e54

08014b98 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8014b9c:	4b04      	ldr	r3, [pc, #16]	; (8014bb0 <LoRaMacStart+0x18>)
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8014ba4:	f7fc fb08 	bl	80111b8 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8014ba8:	2300      	movs	r3, #0
}
 8014baa:	4618      	mov	r0, r3
 8014bac:	bd80      	pop	{r7, pc}
 8014bae:	bf00      	nop
 8014bb0:	20000850 	.word	0x20000850

08014bb4 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8014bb8:	f7fd fa06 	bl	8011fc8 <LoRaMacIsBusy>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	f083 0301 	eor.w	r3, r3, #1
 8014bc2:	b2db      	uxtb	r3, r3
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d00d      	beq.n	8014be4 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8014bc8:	4b0b      	ldr	r3, [pc, #44]	; (8014bf8 <LoRaMacStop+0x44>)
 8014bca:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014bce:	2b02      	cmp	r3, #2
 8014bd0:	d102      	bne.n	8014bd8 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8014bd2:	4b0a      	ldr	r3, [pc, #40]	; (8014bfc <LoRaMacStop+0x48>)
 8014bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bd6:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8014bd8:	4b09      	ldr	r3, [pc, #36]	; (8014c00 <LoRaMacStop+0x4c>)
 8014bda:	2201      	movs	r2, #1
 8014bdc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8014be0:	2300      	movs	r3, #0
 8014be2:	e007      	b.n	8014bf4 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8014be4:	4b06      	ldr	r3, [pc, #24]	; (8014c00 <LoRaMacStop+0x4c>)
 8014be6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014bea:	2b01      	cmp	r3, #1
 8014bec:	d101      	bne.n	8014bf2 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8014bee:	2300      	movs	r3, #0
 8014bf0:	e000      	b.n	8014bf4 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8014bf2:	2301      	movs	r3, #1
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	bd80      	pop	{r7, pc}
 8014bf8:	20000d6c 	.word	0x20000d6c
 8014bfc:	08020428 	.word	0x08020428
 8014c00:	20000850 	.word	0x20000850

08014c04 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8014c08:	4812      	ldr	r0, [pc, #72]	; (8014c54 <LoRaMacHalt+0x50>)
 8014c0a:	f009 ff43 	bl	801ea94 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8014c0e:	4812      	ldr	r0, [pc, #72]	; (8014c58 <LoRaMacHalt+0x54>)
 8014c10:	f009 ff40 	bl	801ea94 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8014c14:	4811      	ldr	r0, [pc, #68]	; (8014c5c <LoRaMacHalt+0x58>)
 8014c16:	f009 ff3d 	bl	801ea94 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8014c1a:	4811      	ldr	r0, [pc, #68]	; (8014c60 <LoRaMacHalt+0x5c>)
 8014c1c:	f009 ff3a 	bl	801ea94 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8014c20:	f001 fa8c 	bl	801613c <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8014c24:	4b0f      	ldr	r3, [pc, #60]	; (8014c64 <LoRaMacHalt+0x60>)
 8014c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c28:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8014c2a:	4b0f      	ldr	r3, [pc, #60]	; (8014c68 <LoRaMacHalt+0x64>)
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8014c32:	480e      	ldr	r0, [pc, #56]	; (8014c6c <LoRaMacHalt+0x68>)
 8014c34:	f7fd fba2 	bl	801237c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8014c38:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8014c3c:	490b      	ldr	r1, [pc, #44]	; (8014c6c <LoRaMacHalt+0x68>)
 8014c3e:	480c      	ldr	r0, [pc, #48]	; (8014c70 <LoRaMacHalt+0x6c>)
 8014c40:	f005 fd8d 	bl	801a75e <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8014c44:	4b08      	ldr	r3, [pc, #32]	; (8014c68 <LoRaMacHalt+0x64>)
 8014c46:	2201      	movs	r2, #1
 8014c48:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8014c4c:	2300      	movs	r3, #0
}
 8014c4e:	4618      	mov	r0, r3
 8014c50:	bd80      	pop	{r7, pc}
 8014c52:	bf00      	nop
 8014c54:	20000bb8 	.word	0x20000bb8
 8014c58:	20000bd0 	.word	0x20000bd0
 8014c5c:	20000be8 	.word	0x20000be8
 8014c60:	20000c50 	.word	0x20000c50
 8014c64:	08020428 	.word	0x08020428
 8014c68:	20000850 	.word	0x20000850
 8014c6c:	20000d6c 	.word	0x20000d6c
 8014c70:	20001338 	.word	0x20001338

08014c74 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8014c74:	b590      	push	{r4, r7, lr}
 8014c76:	b08d      	sub	sp, #52	; 0x34
 8014c78:	af02      	add	r7, sp, #8
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	6039      	str	r1, [r7, #0]
 8014c7e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014c80:	4b42      	ldr	r3, [pc, #264]	; (8014d8c <LoRaMacQueryTxPossible+0x118>)
 8014c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c84:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014c86:	4b41      	ldr	r3, [pc, #260]	; (8014d8c <LoRaMacQueryTxPossible+0x118>)
 8014c88:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 8014c8c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014c8e:	4b3f      	ldr	r3, [pc, #252]	; (8014d8c <LoRaMacQueryTxPossible+0x118>)
 8014c90:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8014c94:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8014c96:	4b3e      	ldr	r3, [pc, #248]	; (8014d90 <LoRaMacQueryTxPossible+0x11c>)
 8014c98:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014c9c:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8014ca2:	683b      	ldr	r3, [r7, #0]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d101      	bne.n	8014cac <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014ca8:	2303      	movs	r3, #3
 8014caa:	e06b      	b.n	8014d84 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8014cac:	2300      	movs	r3, #0
 8014cae:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8014cb0:	4b36      	ldr	r3, [pc, #216]	; (8014d8c <LoRaMacQueryTxPossible+0x118>)
 8014cb2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014cb6:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014cb8:	4b34      	ldr	r3, [pc, #208]	; (8014d8c <LoRaMacQueryTxPossible+0x118>)
 8014cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cbc:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8014cbe:	4b33      	ldr	r3, [pc, #204]	; (8014d8c <LoRaMacQueryTxPossible+0x118>)
 8014cc0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8014cc4:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014cc6:	4b31      	ldr	r3, [pc, #196]	; (8014d8c <LoRaMacQueryTxPossible+0x118>)
 8014cc8:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8014ccc:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8014cce:	4b2f      	ldr	r3, [pc, #188]	; (8014d8c <LoRaMacQueryTxPossible+0x118>)
 8014cd0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014cd4:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014cd8:	4b2c      	ldr	r3, [pc, #176]	; (8014d8c <LoRaMacQueryTxPossible+0x118>)
 8014cda:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8014cde:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8014ce2:	4b2b      	ldr	r3, [pc, #172]	; (8014d90 <LoRaMacQueryTxPossible+0x11c>)
 8014ce4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014ce8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014cec:	4b27      	ldr	r3, [pc, #156]	; (8014d8c <LoRaMacQueryTxPossible+0x118>)
 8014cee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8014cf6:	4b25      	ldr	r3, [pc, #148]	; (8014d8c <LoRaMacQueryTxPossible+0x118>)
 8014cf8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014cfc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8014d00:	f107 040d 	add.w	r4, r7, #13
 8014d04:	f107 020e 	add.w	r2, r7, #14
 8014d08:	f107 010f 	add.w	r1, r7, #15
 8014d0c:	f107 0014 	add.w	r0, r7, #20
 8014d10:	f107 0310 	add.w	r3, r7, #16
 8014d14:	9300      	str	r3, [sp, #0]
 8014d16:	4623      	mov	r3, r4
 8014d18:	f001 f8da 	bl	8015ed0 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8014d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d20:	4618      	mov	r0, r3
 8014d22:	f7fd fe59 	bl	80129d8 <GetMaxAppPayloadWithoutFOptsLength>
 8014d26:	4603      	mov	r3, r0
 8014d28:	461a      	mov	r2, r3
 8014d2a:	683b      	ldr	r3, [r7, #0]
 8014d2c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8014d2e:	f107 0308 	add.w	r3, r7, #8
 8014d32:	4618      	mov	r0, r3
 8014d34:	f001 fca4 	bl	8016680 <LoRaMacCommandsGetSizeSerializedCmds>
 8014d38:	4603      	mov	r3, r0
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d001      	beq.n	8014d42 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014d3e:	2313      	movs	r3, #19
 8014d40:	e020      	b.n	8014d84 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8014d42:	68bb      	ldr	r3, [r7, #8]
 8014d44:	2b0f      	cmp	r3, #15
 8014d46:	d819      	bhi.n	8014d7c <LoRaMacQueryTxPossible+0x108>
 8014d48:	683b      	ldr	r3, [r7, #0]
 8014d4a:	785b      	ldrb	r3, [r3, #1]
 8014d4c:	461a      	mov	r2, r3
 8014d4e:	68bb      	ldr	r3, [r7, #8]
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d313      	bcc.n	8014d7c <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	785a      	ldrb	r2, [r3, #1]
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	b2db      	uxtb	r3, r3
 8014d5c:	1ad3      	subs	r3, r2, r3
 8014d5e:	b2da      	uxtb	r2, r3
 8014d60:	683b      	ldr	r3, [r7, #0]
 8014d62:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8014d64:	683b      	ldr	r3, [r7, #0]
 8014d66:	785b      	ldrb	r3, [r3, #1]
 8014d68:	4619      	mov	r1, r3
 8014d6a:	79fa      	ldrb	r2, [r7, #7]
 8014d6c:	68bb      	ldr	r3, [r7, #8]
 8014d6e:	4413      	add	r3, r2
 8014d70:	4299      	cmp	r1, r3
 8014d72:	d301      	bcc.n	8014d78 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8014d74:	2300      	movs	r3, #0
 8014d76:	e005      	b.n	8014d84 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8014d78:	2308      	movs	r3, #8
 8014d7a:	e003      	b.n	8014d84 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	2200      	movs	r2, #0
 8014d80:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8014d82:	2308      	movs	r3, #8
    }
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	372c      	adds	r7, #44	; 0x2c
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd90      	pop	{r4, r7, pc}
 8014d8c:	20000d6c 	.word	0x20000d6c
 8014d90:	20000850 	.word	0x20000850

08014d94 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8014d94:	b590      	push	{r4, r7, lr}
 8014d96:	b087      	sub	sp, #28
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d101      	bne.n	8014daa <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014da6:	2303      	movs	r3, #3
 8014da8:	e1c4      	b.n	8015134 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	781b      	ldrb	r3, [r3, #0]
 8014dae:	2b41      	cmp	r3, #65	; 0x41
 8014db0:	f200 81b9 	bhi.w	8015126 <LoRaMacMibGetRequestConfirm+0x392>
 8014db4:	a201      	add	r2, pc, #4	; (adr r2, 8014dbc <LoRaMacMibGetRequestConfirm+0x28>)
 8014db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dba:	bf00      	nop
 8014dbc:	08014ec5 	.word	0x08014ec5
 8014dc0:	08014ed1 	.word	0x08014ed1
 8014dc4:	08014edd 	.word	0x08014edd
 8014dc8:	08014ee9 	.word	0x08014ee9
 8014dcc:	08014ef5 	.word	0x08014ef5
 8014dd0:	08014f01 	.word	0x08014f01
 8014dd4:	08014f0d 	.word	0x08014f0d
 8014dd8:	08015127 	.word	0x08015127
 8014ddc:	08015127 	.word	0x08015127
 8014de0:	08015127 	.word	0x08015127
 8014de4:	08015127 	.word	0x08015127
 8014de8:	08015127 	.word	0x08015127
 8014dec:	08015127 	.word	0x08015127
 8014df0:	08015127 	.word	0x08015127
 8014df4:	08015127 	.word	0x08015127
 8014df8:	08014f21 	.word	0x08014f21
 8014dfc:	08014f2d 	.word	0x08014f2d
 8014e00:	08014f39 	.word	0x08014f39
 8014e04:	08014f5b 	.word	0x08014f5b
 8014e08:	08014f6d 	.word	0x08014f6d
 8014e0c:	08014f7f 	.word	0x08014f7f
 8014e10:	08014f91 	.word	0x08014f91
 8014e14:	08014fc5 	.word	0x08014fc5
 8014e18:	08014fa3 	.word	0x08014fa3
 8014e1c:	08014fe7 	.word	0x08014fe7
 8014e20:	08014ff3 	.word	0x08014ff3
 8014e24:	08014ffd 	.word	0x08014ffd
 8014e28:	08015007 	.word	0x08015007
 8014e2c:	08015011 	.word	0x08015011
 8014e30:	0801501b 	.word	0x0801501b
 8014e34:	08015025 	.word	0x08015025
 8014e38:	08015051 	.word	0x08015051
 8014e3c:	0801505d 	.word	0x0801505d
 8014e40:	08015075 	.word	0x08015075
 8014e44:	08015069 	.word	0x08015069
 8014e48:	08015081 	.word	0x08015081
 8014e4c:	0801508b 	.word	0x0801508b
 8014e50:	08015097 	.word	0x08015097
 8014e54:	080150b3 	.word	0x080150b3
 8014e58:	080150a3 	.word	0x080150a3
 8014e5c:	080150ab 	.word	0x080150ab
 8014e60:	08015127 	.word	0x08015127
 8014e64:	080150bf 	.word	0x080150bf
 8014e68:	08015127 	.word	0x08015127
 8014e6c:	08015127 	.word	0x08015127
 8014e70:	08015127 	.word	0x08015127
 8014e74:	08015127 	.word	0x08015127
 8014e78:	08015127 	.word	0x08015127
 8014e7c:	08015127 	.word	0x08015127
 8014e80:	08015127 	.word	0x08015127
 8014e84:	08015127 	.word	0x08015127
 8014e88:	08015127 	.word	0x08015127
 8014e8c:	08015127 	.word	0x08015127
 8014e90:	08015127 	.word	0x08015127
 8014e94:	08015127 	.word	0x08015127
 8014e98:	08015127 	.word	0x08015127
 8014e9c:	08015127 	.word	0x08015127
 8014ea0:	08015127 	.word	0x08015127
 8014ea4:	080150d3 	.word	0x080150d3
 8014ea8:	080150df 	.word	0x080150df
 8014eac:	080150eb 	.word	0x080150eb
 8014eb0:	080150f7 	.word	0x080150f7
 8014eb4:	08015103 	.word	0x08015103
 8014eb8:	0801510f 	.word	0x0801510f
 8014ebc:	0801511b 	.word	0x0801511b
 8014ec0:	08015121 	.word	0x08015121
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8014ec4:	4b9d      	ldr	r3, [pc, #628]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014ec6:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	711a      	strb	r2, [r3, #4]
            break;
 8014ece:	e130      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014ed0:	4b9a      	ldr	r3, [pc, #616]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014ed2:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	711a      	strb	r2, [r3, #4]
            break;
 8014eda:	e12a      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	685b      	ldr	r3, [r3, #4]
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f7fa fab5 	bl	800f450 <SecureElementGetDevEui>
            break;
 8014ee6:	e124      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	685b      	ldr	r3, [r3, #4]
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7fa fadf 	bl	800f4b0 <SecureElementGetJoinEui>
            break;
 8014ef2:	e11e      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014ef4:	4b91      	ldr	r3, [pc, #580]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014ef6:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	711a      	strb	r2, [r3, #4]
            break;
 8014efe:	e118      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8014f00:	4b8e      	ldr	r3, [pc, #568]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014f02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	605a      	str	r2, [r3, #4]
            break;
 8014f0a:	e112      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8014f0c:	4b8b      	ldr	r3, [pc, #556]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014f0e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	3304      	adds	r3, #4
 8014f16:	4619      	mov	r1, r3
 8014f18:	4610      	mov	r0, r2
 8014f1a:	f7fa fafb 	bl	800f514 <SecureElementGetDevAddr>
            break;
 8014f1e:	e108      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8014f20:	4b86      	ldr	r3, [pc, #536]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014f22:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	711a      	strb	r2, [r3, #4]
            break;
 8014f2a:	e102      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8014f2c:	4b83      	ldr	r3, [pc, #524]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014f2e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	711a      	strb	r2, [r3, #4]
            break;
 8014f36:	e0fc      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8014f38:	231c      	movs	r3, #28
 8014f3a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014f3c:	4b7f      	ldr	r3, [pc, #508]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014f3e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f42:	f107 0210 	add.w	r2, r7, #16
 8014f46:	4611      	mov	r1, r2
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f003 f850 	bl	8017fee <RegionGetPhyParam>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8014f52:	68fa      	ldr	r2, [r7, #12]
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	605a      	str	r2, [r3, #4]
            break;
 8014f58:	e0eb      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	4a77      	ldr	r2, [pc, #476]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014f5e:	3304      	adds	r3, #4
 8014f60:	326c      	adds	r2, #108	; 0x6c
 8014f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f66:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014f6a:	e0e2      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	4a73      	ldr	r2, [pc, #460]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014f70:	3304      	adds	r3, #4
 8014f72:	32b4      	adds	r2, #180	; 0xb4
 8014f74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f78:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014f7c:	e0d9      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	4a6e      	ldr	r2, [pc, #440]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014f82:	3304      	adds	r3, #4
 8014f84:	3274      	adds	r2, #116	; 0x74
 8014f86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f8a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014f8e:	e0d0      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	4a6a      	ldr	r2, [pc, #424]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014f94:	3304      	adds	r3, #4
 8014f96:	32bc      	adds	r2, #188	; 0xbc
 8014f98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f9c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014fa0:	e0c7      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8014fa2:	231a      	movs	r3, #26
 8014fa4:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014fa6:	4b65      	ldr	r3, [pc, #404]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014fa8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014fac:	f107 0210 	add.w	r2, r7, #16
 8014fb0:	4611      	mov	r1, r2
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	f003 f81b 	bl	8017fee <RegionGetPhyParam>
 8014fb8:	4603      	mov	r3, r0
 8014fba:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8014fbc:	68fa      	ldr	r2, [r7, #12]
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	605a      	str	r2, [r3, #4]
            break;
 8014fc2:	e0b6      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8014fc4:	2319      	movs	r3, #25
 8014fc6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014fc8:	4b5c      	ldr	r3, [pc, #368]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014fca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014fce:	f107 0210 	add.w	r2, r7, #16
 8014fd2:	4611      	mov	r1, r2
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f003 f80a 	bl	8017fee <RegionGetPhyParam>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8014fde:	68fa      	ldr	r2, [r7, #12]
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	605a      	str	r2, [r3, #4]
            break;
 8014fe4:	e0a5      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8014fe6:	4b55      	ldr	r3, [pc, #340]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014fe8:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	711a      	strb	r2, [r3, #4]
            break;
 8014ff0:	e09f      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8014ff2:	4b52      	ldr	r3, [pc, #328]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	605a      	str	r2, [r3, #4]
            break;
 8014ffa:	e09a      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8014ffc:	4b4f      	ldr	r3, [pc, #316]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014ffe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	605a      	str	r2, [r3, #4]
            break;
 8015004:	e095      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8015006:	4b4d      	ldr	r3, [pc, #308]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015008:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	605a      	str	r2, [r3, #4]
            break;
 801500e:	e090      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8015010:	4b4a      	ldr	r3, [pc, #296]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015012:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	605a      	str	r2, [r3, #4]
            break;
 8015018:	e08b      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801501a:	4b48      	ldr	r3, [pc, #288]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801501c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	605a      	str	r2, [r3, #4]
            break;
 8015022:	e086      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8015024:	2302      	movs	r3, #2
 8015026:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015028:	4b44      	ldr	r3, [pc, #272]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801502a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801502e:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015030:	4b42      	ldr	r3, [pc, #264]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015032:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015036:	f107 0210 	add.w	r2, r7, #16
 801503a:	4611      	mov	r1, r2
 801503c:	4618      	mov	r0, r3
 801503e:	f002 ffd6 	bl	8017fee <RegionGetPhyParam>
 8015042:	4603      	mov	r3, r0
 8015044:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	b25a      	sxtb	r2, r3
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	711a      	strb	r2, [r3, #4]
            break;
 801504e:	e070      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8015050:	4b3a      	ldr	r3, [pc, #232]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015052:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	711a      	strb	r2, [r3, #4]
            break;
 801505a:	e06a      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801505c:	4b37      	ldr	r3, [pc, #220]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801505e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	711a      	strb	r2, [r3, #4]
            break;
 8015066:	e064      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8015068:	4b34      	ldr	r3, [pc, #208]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801506a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	711a      	strb	r2, [r3, #4]
            break;
 8015072:	e05e      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8015074:	4b31      	ldr	r3, [pc, #196]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015076:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	711a      	strb	r2, [r3, #4]
            break;
 801507e:	e058      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8015080:	4b2e      	ldr	r3, [pc, #184]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	605a      	str	r2, [r3, #4]
            break;
 8015088:	e053      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801508a:	4b2c      	ldr	r3, [pc, #176]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801508c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	711a      	strb	r2, [r3, #4]
            break;
 8015094:	e04d      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8015096:	4b29      	ldr	r3, [pc, #164]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015098:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	605a      	str	r2, [r3, #4]
            break;
 80150a0:	e047      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	4a25      	ldr	r2, [pc, #148]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80150a6:	605a      	str	r2, [r3, #4]
            break;
 80150a8:	e043      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	4a24      	ldr	r2, [pc, #144]	; (8015140 <LoRaMacMibGetRequestConfirm+0x3ac>)
 80150ae:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 80150b0:	e03f      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80150b2:	4b22      	ldr	r3, [pc, #136]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80150b4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	605a      	str	r2, [r3, #4]
            break;
 80150bc:	e039      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	4a1e      	ldr	r2, [pc, #120]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80150c2:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 80150c6:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80150c8:	687c      	ldr	r4, [r7, #4]
 80150ca:	f003 f907 	bl	80182dc <RegionGetVersion>
 80150ce:	60a0      	str	r0, [r4, #8]
            break;
 80150d0:	e02f      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80150d2:	4b1a      	ldr	r3, [pc, #104]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80150d4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	605a      	str	r2, [r3, #4]
            break;
 80150dc:	e029      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80150de:	4b17      	ldr	r3, [pc, #92]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80150e0:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	711a      	strb	r2, [r3, #4]
            break;
 80150e8:	e023      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80150ea:	4b14      	ldr	r3, [pc, #80]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80150ec:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	809a      	strh	r2, [r3, #4]
            break;
 80150f4:	e01d      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80150f6:	4b11      	ldr	r3, [pc, #68]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80150f8:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	809a      	strh	r2, [r3, #4]
            break;
 8015100:	e017      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8015102:	4b0e      	ldr	r3, [pc, #56]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015104:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	809a      	strh	r2, [r3, #4]
            break;
 801510c:	e011      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 801510e:	4b0b      	ldr	r3, [pc, #44]	; (801513c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015110:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	809a      	strh	r2, [r3, #4]
            break;
 8015118:	e00b      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801511a:	2318      	movs	r3, #24
 801511c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801511e:	e008      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8015120:	2318      	movs	r3, #24
 8015122:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8015124:	e005      	b.n	8015132 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8015126:	6878      	ldr	r0, [r7, #4]
 8015128:	f001 f81f 	bl	801616a <LoRaMacClassBMibGetRequestConfirm>
 801512c:	4603      	mov	r3, r0
 801512e:	75fb      	strb	r3, [r7, #23]
            break;
 8015130:	bf00      	nop
        }
    }
    return status;
 8015132:	7dfb      	ldrb	r3, [r7, #23]
}
 8015134:	4618      	mov	r0, r3
 8015136:	371c      	adds	r7, #28
 8015138:	46bd      	mov	sp, r7
 801513a:	bd90      	pop	{r4, r7, pc}
 801513c:	20000d6c 	.word	0x20000d6c
 8015140:	20001338 	.word	0x20001338

08015144 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b086      	sub	sp, #24
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801514c:	2300      	movs	r3, #0
 801514e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d101      	bne.n	801515a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015156:	2303      	movs	r3, #3
 8015158:	e396      	b.n	8015888 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801515a:	4bbd      	ldr	r3, [pc, #756]	; (8015450 <LoRaMacMibSetRequestConfirm+0x30c>)
 801515c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8015160:	f003 0302 	and.w	r3, r3, #2
 8015164:	2b00      	cmp	r3, #0
 8015166:	d001      	beq.n	801516c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8015168:	2301      	movs	r3, #1
 801516a:	e38d      	b.n	8015888 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	781b      	ldrb	r3, [r3, #0]
 8015170:	2b41      	cmp	r3, #65	; 0x41
 8015172:	f200 835d 	bhi.w	8015830 <LoRaMacMibSetRequestConfirm+0x6ec>
 8015176:	a201      	add	r2, pc, #4	; (adr r2, 801517c <LoRaMacMibSetRequestConfirm+0x38>)
 8015178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801517c:	08015285 	.word	0x08015285
 8015180:	08015295 	.word	0x08015295
 8015184:	080152af 	.word	0x080152af
 8015188:	080152c7 	.word	0x080152c7
 801518c:	080152df 	.word	0x080152df
 8015190:	080152eb 	.word	0x080152eb
 8015194:	080152f7 	.word	0x080152f7
 8015198:	08015321 	.word	0x08015321
 801519c:	08015347 	.word	0x08015347
 80151a0:	0801536d 	.word	0x0801536d
 80151a4:	08015393 	.word	0x08015393
 80151a8:	080153b9 	.word	0x080153b9
 80151ac:	080153df 	.word	0x080153df
 80151b0:	08015405 	.word	0x08015405
 80151b4:	0801542b 	.word	0x0801542b
 80151b8:	08015459 	.word	0x08015459
 80151bc:	08015479 	.word	0x08015479
 80151c0:	08015831 	.word	0x08015831
 80151c4:	08015485 	.word	0x08015485
 80151c8:	080154f5 	.word	0x080154f5
 80151cc:	08015535 	.word	0x08015535
 80151d0:	08015597 	.word	0x08015597
 80151d4:	08015607 	.word	0x08015607
 80151d8:	080155d7 	.word	0x080155d7
 80151dc:	08015637 	.word	0x08015637
 80151e0:	08015659 	.word	0x08015659
 80151e4:	08015663 	.word	0x08015663
 80151e8:	0801566d 	.word	0x0801566d
 80151ec:	08015677 	.word	0x08015677
 80151f0:	08015681 	.word	0x08015681
 80151f4:	08015831 	.word	0x08015831
 80151f8:	0801568b 	.word	0x0801568b
 80151fc:	080156bd 	.word	0x080156bd
 8015200:	08015731 	.word	0x08015731
 8015204:	080156f7 	.word	0x080156f7
 8015208:	08015763 	.word	0x08015763
 801520c:	08015779 	.word	0x08015779
 8015210:	08015791 	.word	0x08015791
 8015214:	0801579d 	.word	0x0801579d
 8015218:	080157a9 	.word	0x080157a9
 801521c:	08015831 	.word	0x08015831
 8015220:	080157b3 	.word	0x080157b3
 8015224:	08015831 	.word	0x08015831
 8015228:	08015831 	.word	0x08015831
 801522c:	08015831 	.word	0x08015831
 8015230:	08015831 	.word	0x08015831
 8015234:	08015831 	.word	0x08015831
 8015238:	08015831 	.word	0x08015831
 801523c:	08015831 	.word	0x08015831
 8015240:	08015831 	.word	0x08015831
 8015244:	08015831 	.word	0x08015831
 8015248:	08015831 	.word	0x08015831
 801524c:	08015831 	.word	0x08015831
 8015250:	08015831 	.word	0x08015831
 8015254:	08015831 	.word	0x08015831
 8015258:	08015831 	.word	0x08015831
 801525c:	08015831 	.word	0x08015831
 8015260:	08015831 	.word	0x08015831
 8015264:	080157dd 	.word	0x080157dd
 8015268:	080157e9 	.word	0x080157e9
 801526c:	080157f5 	.word	0x080157f5
 8015270:	08015801 	.word	0x08015801
 8015274:	0801580d 	.word	0x0801580d
 8015278:	08015819 	.word	0x08015819
 801527c:	08015825 	.word	0x08015825
 8015280:	0801582b 	.word	0x0801582b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	791b      	ldrb	r3, [r3, #4]
 8015288:	4618      	mov	r0, r3
 801528a:	f7fd fabb 	bl	8012804 <SwitchClass>
 801528e:	4603      	mov	r3, r0
 8015290:	75fb      	strb	r3, [r7, #23]
            break;
 8015292:	e2ee      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	791b      	ldrb	r3, [r3, #4]
 8015298:	2b02      	cmp	r3, #2
 801529a:	d005      	beq.n	80152a8 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	791a      	ldrb	r2, [r3, #4]
 80152a0:	4b6c      	ldr	r3, [pc, #432]	; (8015454 <LoRaMacMibSetRequestConfirm+0x310>)
 80152a2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80152a6:	e2e4      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80152a8:	2303      	movs	r3, #3
 80152aa:	75fb      	strb	r3, [r7, #23]
            break;
 80152ac:	e2e1      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	685b      	ldr	r3, [r3, #4]
 80152b2:	4618      	mov	r0, r3
 80152b4:	f7fa f8b4 	bl	800f420 <SecureElementSetDevEui>
 80152b8:	4603      	mov	r3, r0
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	f000 82be 	beq.w	801583c <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80152c0:	2303      	movs	r3, #3
 80152c2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80152c4:	e2ba      	b.n	801583c <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	685b      	ldr	r3, [r3, #4]
 80152ca:	4618      	mov	r0, r3
 80152cc:	f7fa f8d8 	bl	800f480 <SecureElementSetJoinEui>
 80152d0:	4603      	mov	r3, r0
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	f000 82b4 	beq.w	8015840 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80152d8:	2303      	movs	r3, #3
 80152da:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80152dc:	e2b0      	b.n	8015840 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	791a      	ldrb	r2, [r3, #4]
 80152e2:	4b5c      	ldr	r3, [pc, #368]	; (8015454 <LoRaMacMibSetRequestConfirm+0x310>)
 80152e4:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 80152e8:	e2c3      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	685b      	ldr	r3, [r3, #4]
 80152ee:	4a59      	ldr	r2, [pc, #356]	; (8015454 <LoRaMacMibSetRequestConfirm+0x310>)
 80152f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 80152f4:	e2bd      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 80152f6:	4b57      	ldr	r3, [pc, #348]	; (8015454 <LoRaMacMibSetRequestConfirm+0x310>)
 80152f8:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	685b      	ldr	r3, [r3, #4]
 8015300:	4619      	mov	r1, r3
 8015302:	4610      	mov	r0, r2
 8015304:	f7fa f8ec 	bl	800f4e0 <SecureElementSetDevAddr>
 8015308:	4603      	mov	r3, r0
 801530a:	2b00      	cmp	r3, #0
 801530c:	d002      	beq.n	8015314 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801530e:	2303      	movs	r3, #3
 8015310:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8015312:	e2ae      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	685b      	ldr	r3, [r3, #4]
 8015318:	4a4e      	ldr	r2, [pc, #312]	; (8015454 <LoRaMacMibSetRequestConfirm+0x310>)
 801531a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 801531e:	e2a8      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	685b      	ldr	r3, [r3, #4]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d00b      	beq.n	8015340 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	685b      	ldr	r3, [r3, #4]
 801532c:	4619      	mov	r1, r3
 801532e:	2000      	movs	r0, #0
 8015330:	f002 f868 	bl	8017404 <LoRaMacCryptoSetKey>
 8015334:	4603      	mov	r3, r0
 8015336:	2b00      	cmp	r3, #0
 8015338:	f000 8284 	beq.w	8015844 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801533c:	2311      	movs	r3, #17
 801533e:	e2a3      	b.n	8015888 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015340:	2303      	movs	r3, #3
 8015342:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015344:	e27e      	b.n	8015844 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	685b      	ldr	r3, [r3, #4]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d00b      	beq.n	8015366 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	685b      	ldr	r3, [r3, #4]
 8015352:	4619      	mov	r1, r3
 8015354:	2001      	movs	r0, #1
 8015356:	f002 f855 	bl	8017404 <LoRaMacCryptoSetKey>
 801535a:	4603      	mov	r3, r0
 801535c:	2b00      	cmp	r3, #0
 801535e:	f000 8273 	beq.w	8015848 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015362:	2311      	movs	r3, #17
 8015364:	e290      	b.n	8015888 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015366:	2303      	movs	r3, #3
 8015368:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801536a:	e26d      	b.n	8015848 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	685b      	ldr	r3, [r3, #4]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d00b      	beq.n	801538c <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	685b      	ldr	r3, [r3, #4]
 8015378:	4619      	mov	r1, r3
 801537a:	2008      	movs	r0, #8
 801537c:	f002 f842 	bl	8017404 <LoRaMacCryptoSetKey>
 8015380:	4603      	mov	r3, r0
 8015382:	2b00      	cmp	r3, #0
 8015384:	f000 8262 	beq.w	801584c <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015388:	2311      	movs	r3, #17
 801538a:	e27d      	b.n	8015888 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801538c:	2303      	movs	r3, #3
 801538e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015390:	e25c      	b.n	801584c <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	685b      	ldr	r3, [r3, #4]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d00b      	beq.n	80153b2 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	685b      	ldr	r3, [r3, #4]
 801539e:	4619      	mov	r1, r3
 80153a0:	2009      	movs	r0, #9
 80153a2:	f002 f82f 	bl	8017404 <LoRaMacCryptoSetKey>
 80153a6:	4603      	mov	r3, r0
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	f000 8251 	beq.w	8015850 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80153ae:	2311      	movs	r3, #17
 80153b0:	e26a      	b.n	8015888 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80153b2:	2303      	movs	r3, #3
 80153b4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80153b6:	e24b      	b.n	8015850 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	685b      	ldr	r3, [r3, #4]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d00b      	beq.n	80153d8 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	685b      	ldr	r3, [r3, #4]
 80153c4:	4619      	mov	r1, r3
 80153c6:	200c      	movs	r0, #12
 80153c8:	f002 f81c 	bl	8017404 <LoRaMacCryptoSetKey>
 80153cc:	4603      	mov	r3, r0
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	f000 8240 	beq.w	8015854 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80153d4:	2311      	movs	r3, #17
 80153d6:	e257      	b.n	8015888 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80153d8:	2303      	movs	r3, #3
 80153da:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80153dc:	e23a      	b.n	8015854 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	685b      	ldr	r3, [r3, #4]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d00b      	beq.n	80153fe <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	685b      	ldr	r3, [r3, #4]
 80153ea:	4619      	mov	r1, r3
 80153ec:	200d      	movs	r0, #13
 80153ee:	f002 f809 	bl	8017404 <LoRaMacCryptoSetKey>
 80153f2:	4603      	mov	r3, r0
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	f000 822f 	beq.w	8015858 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80153fa:	2311      	movs	r3, #17
 80153fc:	e244      	b.n	8015888 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80153fe:	2303      	movs	r3, #3
 8015400:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015402:	e229      	b.n	8015858 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	685b      	ldr	r3, [r3, #4]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d00b      	beq.n	8015424 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	685b      	ldr	r3, [r3, #4]
 8015410:	4619      	mov	r1, r3
 8015412:	200e      	movs	r0, #14
 8015414:	f001 fff6 	bl	8017404 <LoRaMacCryptoSetKey>
 8015418:	4603      	mov	r3, r0
 801541a:	2b00      	cmp	r3, #0
 801541c:	f000 821e 	beq.w	801585c <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015420:	2311      	movs	r3, #17
 8015422:	e231      	b.n	8015888 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015424:	2303      	movs	r3, #3
 8015426:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015428:	e218      	b.n	801585c <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	685b      	ldr	r3, [r3, #4]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d00b      	beq.n	801544a <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	685b      	ldr	r3, [r3, #4]
 8015436:	4619      	mov	r1, r3
 8015438:	200f      	movs	r0, #15
 801543a:	f001 ffe3 	bl	8017404 <LoRaMacCryptoSetKey>
 801543e:	4603      	mov	r3, r0
 8015440:	2b00      	cmp	r3, #0
 8015442:	f000 820d 	beq.w	8015860 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015446:	2311      	movs	r3, #17
 8015448:	e21e      	b.n	8015888 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801544a:	2303      	movs	r3, #3
 801544c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801544e:	e207      	b.n	8015860 <LoRaMacMibSetRequestConfirm+0x71c>
 8015450:	20000850 	.word	0x20000850
 8015454:	20000d6c 	.word	0x20000d6c
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	791a      	ldrb	r2, [r3, #4]
 801545c:	4bb2      	ldr	r3, [pc, #712]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801545e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8015462:	4bb2      	ldr	r3, [pc, #712]	; (801572c <LoRaMacMibSetRequestConfirm+0x5e8>)
 8015464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015466:	4ab0      	ldr	r2, [pc, #704]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015468:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 801546c:	4610      	mov	r0, r2
 801546e:	4798      	blx	r3
            Radio.Sleep( );
 8015470:	4bae      	ldr	r3, [pc, #696]	; (801572c <LoRaMacMibSetRequestConfirm+0x5e8>)
 8015472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015474:	4798      	blx	r3
            break;
 8015476:	e1fc      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	791a      	ldrb	r2, [r3, #4]
 801547c:	4baa      	ldr	r3, [pc, #680]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801547e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8015482:	e1f6      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	7a1b      	ldrb	r3, [r3, #8]
 8015488:	b25b      	sxtb	r3, r3
 801548a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801548c:	4ba6      	ldr	r3, [pc, #664]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801548e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8015492:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8015494:	4ba4      	ldr	r3, [pc, #656]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015496:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801549a:	f107 0108 	add.w	r1, r7, #8
 801549e:	2207      	movs	r2, #7
 80154a0:	4618      	mov	r0, r3
 80154a2:	f002 fddf 	bl	8018064 <RegionVerify>
 80154a6:	4603      	mov	r3, r0
 80154a8:	f083 0301 	eor.w	r3, r3, #1
 80154ac:	b2db      	uxtb	r3, r3
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d002      	beq.n	80154b8 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80154b2:	2303      	movs	r3, #3
 80154b4:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 80154b6:	e1dc      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	685b      	ldr	r3, [r3, #4]
 80154bc:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80154be:	4b9a      	ldr	r3, [pc, #616]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80154c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80154c4:	f107 0108 	add.w	r1, r7, #8
 80154c8:	2200      	movs	r2, #0
 80154ca:	4618      	mov	r0, r3
 80154cc:	f002 fdca 	bl	8018064 <RegionVerify>
 80154d0:	4603      	mov	r3, r0
 80154d2:	f083 0301 	eor.w	r3, r3, #1
 80154d6:	b2db      	uxtb	r3, r3
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d002      	beq.n	80154e2 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80154dc:	2303      	movs	r3, #3
 80154de:	75fb      	strb	r3, [r7, #23]
            break;
 80154e0:	e1c7      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80154e2:	4b91      	ldr	r3, [pc, #580]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80154e4:	687a      	ldr	r2, [r7, #4]
 80154e6:	336c      	adds	r3, #108	; 0x6c
 80154e8:	3204      	adds	r2, #4
 80154ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80154ee:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80154f2:	e1be      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	7a1b      	ldrb	r3, [r3, #8]
 80154f8:	b25b      	sxtb	r3, r3
 80154fa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80154fc:	4b8a      	ldr	r3, [pc, #552]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80154fe:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8015502:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8015504:	4b88      	ldr	r3, [pc, #544]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015506:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801550a:	f107 0108 	add.w	r1, r7, #8
 801550e:	2207      	movs	r2, #7
 8015510:	4618      	mov	r0, r3
 8015512:	f002 fda7 	bl	8018064 <RegionVerify>
 8015516:	4603      	mov	r3, r0
 8015518:	2b00      	cmp	r3, #0
 801551a:	d008      	beq.n	801552e <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 801551c:	4b82      	ldr	r3, [pc, #520]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801551e:	687a      	ldr	r2, [r7, #4]
 8015520:	33b4      	adds	r3, #180	; 0xb4
 8015522:	3204      	adds	r2, #4
 8015524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015528:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801552c:	e1a1      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801552e:	2303      	movs	r3, #3
 8015530:	75fb      	strb	r3, [r7, #23]
            break;
 8015532:	e19e      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	7a1b      	ldrb	r3, [r3, #8]
 8015538:	b25b      	sxtb	r3, r3
 801553a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801553c:	4b7a      	ldr	r3, [pc, #488]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801553e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8015542:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8015544:	4b78      	ldr	r3, [pc, #480]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015546:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801554a:	f107 0108 	add.w	r1, r7, #8
 801554e:	2207      	movs	r2, #7
 8015550:	4618      	mov	r0, r3
 8015552:	f002 fd87 	bl	8018064 <RegionVerify>
 8015556:	4603      	mov	r3, r0
 8015558:	2b00      	cmp	r3, #0
 801555a:	d019      	beq.n	8015590 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801555c:	4b72      	ldr	r3, [pc, #456]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801555e:	687a      	ldr	r2, [r7, #4]
 8015560:	3374      	adds	r3, #116	; 0x74
 8015562:	3204      	adds	r2, #4
 8015564:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015568:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 801556c:	4b6e      	ldr	r3, [pc, #440]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801556e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8015572:	2b02      	cmp	r3, #2
 8015574:	f040 8176 	bne.w	8015864 <LoRaMacMibSetRequestConfirm+0x720>
 8015578:	4b6b      	ldr	r3, [pc, #428]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801557a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801557e:	2b00      	cmp	r3, #0
 8015580:	f000 8170 	beq.w	8015864 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8015584:	4b69      	ldr	r3, [pc, #420]	; (801572c <LoRaMacMibSetRequestConfirm+0x5e8>)
 8015586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015588:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 801558a:	f7fe fc1b 	bl	8013dc4 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801558e:	e169      	b.n	8015864 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015590:	2303      	movs	r3, #3
 8015592:	75fb      	strb	r3, [r7, #23]
            break;
 8015594:	e166      	b.n	8015864 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	7a1b      	ldrb	r3, [r3, #8]
 801559a:	b25b      	sxtb	r3, r3
 801559c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801559e:	4b62      	ldr	r3, [pc, #392]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80155a0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80155a4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80155a6:	4b60      	ldr	r3, [pc, #384]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80155a8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80155ac:	f107 0108 	add.w	r1, r7, #8
 80155b0:	2207      	movs	r2, #7
 80155b2:	4618      	mov	r0, r3
 80155b4:	f002 fd56 	bl	8018064 <RegionVerify>
 80155b8:	4603      	mov	r3, r0
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d008      	beq.n	80155d0 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80155be:	4b5a      	ldr	r3, [pc, #360]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80155c0:	687a      	ldr	r2, [r7, #4]
 80155c2:	33bc      	adds	r3, #188	; 0xbc
 80155c4:	3204      	adds	r2, #4
 80155c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80155ca:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80155ce:	e150      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80155d0:	2303      	movs	r3, #3
 80155d2:	75fb      	strb	r3, [r7, #23]
            break;
 80155d4:	e14d      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	685b      	ldr	r3, [r3, #4]
 80155da:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80155dc:	2301      	movs	r3, #1
 80155de:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80155e0:	4b51      	ldr	r3, [pc, #324]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80155e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80155e6:	f107 020c 	add.w	r2, r7, #12
 80155ea:	4611      	mov	r1, r2
 80155ec:	4618      	mov	r0, r3
 80155ee:	f002 fd62 	bl	80180b6 <RegionChanMaskSet>
 80155f2:	4603      	mov	r3, r0
 80155f4:	f083 0301 	eor.w	r3, r3, #1
 80155f8:	b2db      	uxtb	r3, r3
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	f000 8134 	beq.w	8015868 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015600:	2303      	movs	r3, #3
 8015602:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015604:	e130      	b.n	8015868 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	685b      	ldr	r3, [r3, #4]
 801560a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801560c:	2300      	movs	r3, #0
 801560e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8015610:	4b45      	ldr	r3, [pc, #276]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015612:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015616:	f107 020c 	add.w	r2, r7, #12
 801561a:	4611      	mov	r1, r2
 801561c:	4618      	mov	r0, r3
 801561e:	f002 fd4a 	bl	80180b6 <RegionChanMaskSet>
 8015622:	4603      	mov	r3, r0
 8015624:	f083 0301 	eor.w	r3, r3, #1
 8015628:	b2db      	uxtb	r3, r3
 801562a:	2b00      	cmp	r3, #0
 801562c:	f000 811e 	beq.w	801586c <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015630:	2303      	movs	r3, #3
 8015632:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015634:	e11a      	b.n	801586c <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	791b      	ldrb	r3, [r3, #4]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d009      	beq.n	8015652 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8015642:	2b0f      	cmp	r3, #15
 8015644:	d805      	bhi.n	8015652 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	791a      	ldrb	r2, [r3, #4]
 801564a:	4b37      	ldr	r3, [pc, #220]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801564c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015650:	e10f      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015652:	2303      	movs	r3, #3
 8015654:	75fb      	strb	r3, [r7, #23]
            break;
 8015656:	e10c      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	685b      	ldr	r3, [r3, #4]
 801565c:	4a32      	ldr	r2, [pc, #200]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801565e:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8015660:	e107      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	685b      	ldr	r3, [r3, #4]
 8015666:	4a30      	ldr	r2, [pc, #192]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015668:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 801566a:	e102      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	685b      	ldr	r3, [r3, #4]
 8015670:	4a2d      	ldr	r2, [pc, #180]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015672:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8015674:	e0fd      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	685b      	ldr	r3, [r3, #4]
 801567a:	4a2b      	ldr	r2, [pc, #172]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801567c:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 801567e:	e0f8      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	685b      	ldr	r3, [r3, #4]
 8015684:	4a28      	ldr	r2, [pc, #160]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015686:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8015688:	e0f3      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015690:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8015692:	4b25      	ldr	r3, [pc, #148]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015694:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015698:	f107 0108 	add.w	r1, r7, #8
 801569c:	2206      	movs	r2, #6
 801569e:	4618      	mov	r0, r3
 80156a0:	f002 fce0 	bl	8018064 <RegionVerify>
 80156a4:	4603      	mov	r3, r0
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d005      	beq.n	80156b6 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80156aa:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80156ae:	4b1e      	ldr	r3, [pc, #120]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80156b0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80156b4:	e0dd      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80156b6:	2303      	movs	r3, #3
 80156b8:	75fb      	strb	r3, [r7, #23]
            break;
 80156ba:	e0da      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80156c2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80156c4:	4b18      	ldr	r3, [pc, #96]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80156c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80156ca:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80156cc:	4b16      	ldr	r3, [pc, #88]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80156ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80156d2:	f107 0108 	add.w	r1, r7, #8
 80156d6:	2205      	movs	r2, #5
 80156d8:	4618      	mov	r0, r3
 80156da:	f002 fcc3 	bl	8018064 <RegionVerify>
 80156de:	4603      	mov	r3, r0
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d005      	beq.n	80156f0 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80156e4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80156e8:	4b0f      	ldr	r3, [pc, #60]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80156ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80156ee:	e0c0      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80156f0:	2303      	movs	r3, #3
 80156f2:	75fb      	strb	r3, [r7, #23]
            break;
 80156f4:	e0bd      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80156fc:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80156fe:	4b0a      	ldr	r3, [pc, #40]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015700:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015704:	f107 0108 	add.w	r1, r7, #8
 8015708:	220a      	movs	r2, #10
 801570a:	4618      	mov	r0, r3
 801570c:	f002 fcaa 	bl	8018064 <RegionVerify>
 8015710:	4603      	mov	r3, r0
 8015712:	2b00      	cmp	r3, #0
 8015714:	d005      	beq.n	8015722 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8015716:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801571a:	4b03      	ldr	r3, [pc, #12]	; (8015728 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801571c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015720:	e0a7      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015722:	2303      	movs	r3, #3
 8015724:	75fb      	strb	r3, [r7, #23]
            break;
 8015726:	e0a4      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
 8015728:	20000d6c 	.word	0x20000d6c
 801572c:	08020428 	.word	0x08020428
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015736:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8015738:	4b55      	ldr	r3, [pc, #340]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 801573a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801573e:	f107 0108 	add.w	r1, r7, #8
 8015742:	2209      	movs	r2, #9
 8015744:	4618      	mov	r0, r3
 8015746:	f002 fc8d 	bl	8018064 <RegionVerify>
 801574a:	4603      	mov	r3, r0
 801574c:	2b00      	cmp	r3, #0
 801574e:	d005      	beq.n	801575c <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8015750:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015754:	4b4e      	ldr	r3, [pc, #312]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015756:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801575a:	e08a      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801575c:	2303      	movs	r3, #3
 801575e:	75fb      	strb	r3, [r7, #23]
            break;
 8015760:	e087      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	685b      	ldr	r3, [r3, #4]
 8015766:	4a4a      	ldr	r2, [pc, #296]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015768:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 801576c:	4b48      	ldr	r3, [pc, #288]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 801576e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015772:	4a47      	ldr	r2, [pc, #284]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015774:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8015776:	e07c      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	791a      	ldrb	r2, [r3, #4]
 801577c:	4b44      	ldr	r3, [pc, #272]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 801577e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8015782:	4b43      	ldr	r3, [pc, #268]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015784:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8015788:	4b41      	ldr	r3, [pc, #260]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 801578a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 801578e:	e070      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	685b      	ldr	r3, [r3, #4]
 8015794:	4a3e      	ldr	r2, [pc, #248]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015796:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 801579a:	e06a      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	685b      	ldr	r3, [r3, #4]
 80157a0:	4a3b      	ldr	r2, [pc, #236]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 80157a2:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 80157a6:	e064      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 80157a8:	f7fe fd40 	bl	801422c <RestoreNvmData>
 80157ac:	4603      	mov	r3, r0
 80157ae:	75fb      	strb	r3, [r7, #23]
            break;
 80157b0:	e05f      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	799b      	ldrb	r3, [r3, #6]
 80157b6:	2b01      	cmp	r3, #1
 80157b8:	d80d      	bhi.n	80157d6 <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80157ba:	4a35      	ldr	r2, [pc, #212]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	685b      	ldr	r3, [r3, #4]
 80157c0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	6858      	ldr	r0, [r3, #4]
 80157c8:	f001 fd7e 	bl	80172c8 <LoRaMacCryptoSetLrWanVersion>
 80157cc:	4603      	mov	r3, r0
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d04e      	beq.n	8015870 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80157d2:	2311      	movs	r3, #17
 80157d4:	e058      	b.n	8015888 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80157d6:	2303      	movs	r3, #3
 80157d8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80157da:	e049      	b.n	8015870 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	685b      	ldr	r3, [r3, #4]
 80157e0:	4a2b      	ldr	r2, [pc, #172]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 80157e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 80157e6:	e044      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	791a      	ldrb	r2, [r3, #4]
 80157ec:	4b28      	ldr	r3, [pc, #160]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 80157ee:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 80157f2:	e03e      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	889a      	ldrh	r2, [r3, #4]
 80157f8:	4b25      	ldr	r3, [pc, #148]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 80157fa:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 80157fe:	e038      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	889a      	ldrh	r2, [r3, #4]
 8015804:	4b22      	ldr	r3, [pc, #136]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015806:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 801580a:	e032      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	889a      	ldrh	r2, [r3, #4]
 8015810:	4b1f      	ldr	r3, [pc, #124]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015812:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8015816:	e02c      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	889a      	ldrh	r2, [r3, #4]
 801581c:	4b1c      	ldr	r3, [pc, #112]	; (8015890 <LoRaMacMibSetRequestConfirm+0x74c>)
 801581e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8015822:	e026      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8015824:	2318      	movs	r3, #24
 8015826:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8015828:	e023      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801582a:	2318      	movs	r3, #24
 801582c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801582e:	e020      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f000 fca4 	bl	801617e <LoRaMacMibClassBSetRequestConfirm>
 8015836:	4603      	mov	r3, r0
 8015838:	75fb      	strb	r3, [r7, #23]
            break;
 801583a:	e01a      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801583c:	bf00      	nop
 801583e:	e018      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015840:	bf00      	nop
 8015842:	e016      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015844:	bf00      	nop
 8015846:	e014      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015848:	bf00      	nop
 801584a:	e012      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801584c:	bf00      	nop
 801584e:	e010      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015850:	bf00      	nop
 8015852:	e00e      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015854:	bf00      	nop
 8015856:	e00c      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015858:	bf00      	nop
 801585a:	e00a      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801585c:	bf00      	nop
 801585e:	e008      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015860:	bf00      	nop
 8015862:	e006      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015864:	bf00      	nop
 8015866:	e004      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015868:	bf00      	nop
 801586a:	e002      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801586c:	bf00      	nop
 801586e:	e000      	b.n	8015872 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015870:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 8015872:	7dfb      	ldrb	r3, [r7, #23]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d106      	bne.n	8015886 <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8015878:	4a06      	ldr	r2, [pc, #24]	; (8015894 <LoRaMacMibSetRequestConfirm+0x750>)
 801587a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801587e:	f043 0320 	orr.w	r3, r3, #32
 8015882:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8015886:	7dfb      	ldrb	r3, [r7, #23]
}
 8015888:	4618      	mov	r0, r3
 801588a:	3718      	adds	r7, #24
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}
 8015890:	20000d6c 	.word	0x20000d6c
 8015894:	20000850 	.word	0x20000850

08015898 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b08a      	sub	sp, #40	; 0x28
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80158a0:	2302      	movs	r3, #2
 80158a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80158a6:	2300      	movs	r3, #0
 80158a8:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d101      	bne.n	80158b4 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80158b0:	2303      	movs	r3, #3
 80158b2:	e17e      	b.n	8015bb2 <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	2200      	movs	r2, #0
 80158b8:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80158ba:	f7fc fb85 	bl	8011fc8 <LoRaMacIsBusy>
 80158be:	4603      	mov	r3, r0
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d001      	beq.n	80158c8 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 80158c4:	2301      	movs	r3, #1
 80158c6:	e174      	b.n	8015bb2 <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80158c8:	f001 f994 	bl	8016bf4 <LoRaMacConfirmQueueIsFull>
 80158cc:	4603      	mov	r3, r0
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d001      	beq.n	80158d6 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 80158d2:	2301      	movs	r3, #1
 80158d4:	e16d      	b.n	8015bb2 <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80158d6:	f001 f981 	bl	8016bdc <LoRaMacConfirmQueueGetCnt>
 80158da:	4603      	mov	r3, r0
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d104      	bne.n	80158ea <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80158e0:	2214      	movs	r2, #20
 80158e2:	2100      	movs	r1, #0
 80158e4:	48b5      	ldr	r0, [pc, #724]	; (8015bbc <LoRaMacMlmeRequest+0x324>)
 80158e6:	f004 ff75 	bl	801a7d4 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80158ea:	4bb5      	ldr	r3, [pc, #724]	; (8015bc0 <LoRaMacMlmeRequest+0x328>)
 80158ec:	2201      	movs	r2, #1
 80158ee:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80158f2:	4ab3      	ldr	r2, [pc, #716]	; (8015bc0 <LoRaMacMlmeRequest+0x328>)
 80158f4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80158f8:	f043 0304 	orr.w	r3, r3, #4
 80158fc:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	781b      	ldrb	r3, [r3, #0]
 8015904:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015908:	2301      	movs	r3, #1
 801590a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 801590e:	2300      	movs	r3, #0
 8015910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8015914:	2300      	movs	r3, #0
 8015916:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	781b      	ldrb	r3, [r3, #0]
 801591e:	3b01      	subs	r3, #1
 8015920:	2b0c      	cmp	r3, #12
 8015922:	f200 811a 	bhi.w	8015b5a <LoRaMacMlmeRequest+0x2c2>
 8015926:	a201      	add	r2, pc, #4	; (adr r2, 801592c <LoRaMacMlmeRequest+0x94>)
 8015928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801592c:	08015961 	.word	0x08015961
 8015930:	08015b5b 	.word	0x08015b5b
 8015934:	08015b5b 	.word	0x08015b5b
 8015938:	08015b5b 	.word	0x08015b5b
 801593c:	08015a3f 	.word	0x08015a3f
 8015940:	08015a63 	.word	0x08015a63
 8015944:	08015b5b 	.word	0x08015b5b
 8015948:	08015b5b 	.word	0x08015b5b
 801594c:	08015a81 	.word	0x08015a81
 8015950:	08015b5b 	.word	0x08015b5b
 8015954:	08015b29 	.word	0x08015b29
 8015958:	08015abd 	.word	0x08015abd
 801595c:	08015b07 	.word	0x08015b07
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8015960:	4b97      	ldr	r3, [pc, #604]	; (8015bc0 <LoRaMacMlmeRequest+0x328>)
 8015962:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8015966:	f003 0320 	and.w	r3, r3, #32
 801596a:	2b00      	cmp	r3, #0
 801596c:	d001      	beq.n	8015972 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 801596e:	2301      	movs	r3, #1
 8015970:	e11f      	b.n	8015bb2 <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	791b      	ldrb	r3, [r3, #4]
 8015976:	2b02      	cmp	r3, #2
 8015978:	d135      	bne.n	80159e6 <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 801597a:	2000      	movs	r0, #0
 801597c:	f7fe f8b4 	bl	8013ae8 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8015980:	4b90      	ldr	r3, [pc, #576]	; (8015bc4 <LoRaMacMlmeRequest+0x32c>)
 8015982:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	795b      	ldrb	r3, [r3, #5]
 801598a:	b25b      	sxtb	r3, r3
 801598c:	2200      	movs	r2, #0
 801598e:	4619      	mov	r1, r3
 8015990:	f002 fc50 	bl	8018234 <RegionAlternateDr>
 8015994:	4603      	mov	r3, r0
 8015996:	461a      	mov	r2, r3
 8015998:	4b8a      	ldr	r3, [pc, #552]	; (8015bc4 <LoRaMacMlmeRequest+0x32c>)
 801599a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	f993 2006 	ldrsb.w	r2, [r3, #6]
 80159a4:	4b87      	ldr	r3, [pc, #540]	; (8015bc4 <LoRaMacMlmeRequest+0x32c>)
 80159a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80159aa:	2307      	movs	r3, #7
 80159ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 80159b0:	20ff      	movs	r0, #255	; 0xff
 80159b2:	f7fd fe1d 	bl	80135f0 <SendReJoinReq>
 80159b6:	4603      	mov	r3, r0
 80159b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 80159bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	f000 80cc 	beq.w	8015b5e <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80159c6:	4b7f      	ldr	r3, [pc, #508]	; (8015bc4 <LoRaMacMlmeRequest+0x32c>)
 80159c8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	795b      	ldrb	r3, [r3, #5]
 80159d0:	b25b      	sxtb	r3, r3
 80159d2:	2201      	movs	r2, #1
 80159d4:	4619      	mov	r1, r3
 80159d6:	f002 fc2d 	bl	8018234 <RegionAlternateDr>
 80159da:	4603      	mov	r3, r0
 80159dc:	461a      	mov	r2, r3
 80159de:	4b79      	ldr	r3, [pc, #484]	; (8015bc4 <LoRaMacMlmeRequest+0x32c>)
 80159e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80159e4:	e0bb      	b.n	8015b5e <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	791b      	ldrb	r3, [r3, #4]
 80159ea:	2b01      	cmp	r3, #1
 80159ec:	f040 80b7 	bne.w	8015b5e <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80159f0:	4b74      	ldr	r3, [pc, #464]	; (8015bc4 <LoRaMacMlmeRequest+0x32c>)
 80159f2:	2200      	movs	r2, #0
 80159f4:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80159f8:	2302      	movs	r3, #2
 80159fa:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80159fc:	4b71      	ldr	r3, [pc, #452]	; (8015bc4 <LoRaMacMlmeRequest+0x32c>)
 80159fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015a02:	f107 020c 	add.w	r2, r7, #12
 8015a06:	4611      	mov	r1, r2
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f002 fb19 	bl	8018040 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	791a      	ldrb	r2, [r3, #4]
 8015a12:	4b6c      	ldr	r3, [pc, #432]	; (8015bc4 <LoRaMacMlmeRequest+0x32c>)
 8015a14:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8015a18:	2300      	movs	r3, #0
 8015a1a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8015a1e:	2301      	movs	r3, #1
 8015a20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 8015a24:	f7fe fdb2 	bl	801458c <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8015a28:	4a65      	ldr	r2, [pc, #404]	; (8015bc0 <LoRaMacMlmeRequest+0x328>)
 8015a2a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8015a2e:	f043 0310 	orr.w	r3, r3, #16
 8015a32:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 8015a36:	2300      	movs	r3, #0
 8015a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8015a3c:	e08f      	b.n	8015b5e <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015a3e:	2300      	movs	r3, #0
 8015a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015a44:	f107 031c 	add.w	r3, r7, #28
 8015a48:	2200      	movs	r2, #0
 8015a4a:	4619      	mov	r1, r3
 8015a4c:	2002      	movs	r0, #2
 8015a4e:	f000 fd21 	bl	8016494 <LoRaMacCommandsAddCmd>
 8015a52:	4603      	mov	r3, r0
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	f000 8084 	beq.w	8015b62 <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015a5a:	2313      	movs	r3, #19
 8015a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8015a60:	e07f      	b.n	8015b62 <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	8898      	ldrh	r0, [r3, #4]
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	6899      	ldr	r1, [r3, #8]
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015a70:	b2db      	uxtb	r3, r3
 8015a72:	461a      	mov	r2, r3
 8015a74:	f7fe fbba 	bl	80141ec <SetTxContinuousWave>
 8015a78:	4603      	mov	r3, r0
 8015a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8015a7e:	e077      	b.n	8015b70 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015a80:	2300      	movs	r3, #0
 8015a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8015a86:	f107 0308 	add.w	r3, r7, #8
 8015a8a:	4619      	mov	r1, r3
 8015a8c:	200d      	movs	r0, #13
 8015a8e:	f000 fd81 	bl	8016594 <LoRaMacCommandsGetCmd>
 8015a92:	4603      	mov	r3, r0
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d103      	bne.n	8015aa0 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 8015a98:	2300      	movs	r3, #0
 8015a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8015a9e:	e062      	b.n	8015b66 <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015aa0:	f107 031c 	add.w	r3, r7, #28
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	4619      	mov	r1, r3
 8015aa8:	200d      	movs	r0, #13
 8015aaa:	f000 fcf3 	bl	8016494 <LoRaMacCommandsAddCmd>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d058      	beq.n	8015b66 <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015ab4:	2313      	movs	r3, #19
 8015ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8015aba:	e054      	b.n	8015b66 <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8015abc:	4b41      	ldr	r3, [pc, #260]	; (8015bc4 <LoRaMacMlmeRequest+0x32c>)
 8015abe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d151      	bne.n	8015b6a <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	791b      	ldrb	r3, [r3, #4]
 8015aca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	791b      	ldrb	r3, [r3, #4]
 8015ad2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015ad6:	b2db      	uxtb	r3, r3
 8015ad8:	4618      	mov	r0, r3
 8015ada:	f000 fb25 	bl	8016128 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8015ade:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015ae2:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8015aea:	f107 031c 	add.w	r3, r7, #28
 8015aee:	2201      	movs	r2, #1
 8015af0:	4619      	mov	r1, r3
 8015af2:	2010      	movs	r0, #16
 8015af4:	f000 fcce 	bl	8016494 <LoRaMacCommandsAddCmd>
 8015af8:	4603      	mov	r3, r0
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d035      	beq.n	8015b6a <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015afe:	2313      	movs	r3, #19
 8015b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8015b04:	e031      	b.n	8015b6a <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015b06:	2300      	movs	r3, #0
 8015b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015b0c:	f107 031c 	add.w	r3, r7, #28
 8015b10:	2200      	movs	r2, #0
 8015b12:	4619      	mov	r1, r3
 8015b14:	2012      	movs	r0, #18
 8015b16:	f000 fcbd 	bl	8016494 <LoRaMacCommandsAddCmd>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d026      	beq.n	8015b6e <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015b20:	2313      	movs	r3, #19
 8015b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8015b26:	e022      	b.n	8015b6e <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8015b28:	2301      	movs	r3, #1
 8015b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8015b2e:	f000 fab1 	bl	8016094 <LoRaMacClassBIsAcquisitionInProgress>
 8015b32:	4603      	mov	r3, r0
 8015b34:	f083 0301 	eor.w	r3, r3, #1
 8015b38:	b2db      	uxtb	r3, r3
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d009      	beq.n	8015b52 <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8015b3e:	2000      	movs	r0, #0
 8015b40:	f000 fa8a 	bl	8016058 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8015b44:	2000      	movs	r0, #0
 8015b46:	f000 faac 	bl	80160a2 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8015b50:	e00e      	b.n	8015b70 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 8015b52:	2301      	movs	r3, #1
 8015b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8015b58:	e00a      	b.n	8015b70 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 8015b5a:	bf00      	nop
 8015b5c:	e008      	b.n	8015b70 <LoRaMacMlmeRequest+0x2d8>
            break;
 8015b5e:	bf00      	nop
 8015b60:	e006      	b.n	8015b70 <LoRaMacMlmeRequest+0x2d8>
            break;
 8015b62:	bf00      	nop
 8015b64:	e004      	b.n	8015b70 <LoRaMacMlmeRequest+0x2d8>
            break;
 8015b66:	bf00      	nop
 8015b68:	e002      	b.n	8015b70 <LoRaMacMlmeRequest+0x2d8>
            break;
 8015b6a:	bf00      	nop
 8015b6c:	e000      	b.n	8015b70 <LoRaMacMlmeRequest+0x2d8>
            break;
 8015b6e:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015b70:	4b13      	ldr	r3, [pc, #76]	; (8015bc0 <LoRaMacMlmeRequest+0x328>)
 8015b72:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8015b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d010      	beq.n	8015ba4 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8015b82:	f001 f82b 	bl	8016bdc <LoRaMacConfirmQueueGetCnt>
 8015b86:	4603      	mov	r3, r0
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d110      	bne.n	8015bae <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 8015b8c:	4b0c      	ldr	r3, [pc, #48]	; (8015bc0 <LoRaMacMlmeRequest+0x328>)
 8015b8e:	2200      	movs	r2, #0
 8015b90:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8015b94:	4a0a      	ldr	r2, [pc, #40]	; (8015bc0 <LoRaMacMlmeRequest+0x328>)
 8015b96:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8015b9a:	f36f 0382 	bfc	r3, #2, #1
 8015b9e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8015ba2:	e004      	b.n	8015bae <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8015ba4:	f107 0320 	add.w	r3, r7, #32
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f000 fec3 	bl	8016934 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8015bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	3728      	adds	r7, #40	; 0x28
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	bd80      	pop	{r7, pc}
 8015bba:	bf00      	nop
 8015bbc:	20000ca4 	.word	0x20000ca4
 8015bc0:	20000850 	.word	0x20000850
 8015bc4:	20000d6c 	.word	0x20000d6c

08015bc8 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8015bc8:	b5b0      	push	{r4, r5, r7, lr}
 8015bca:	b092      	sub	sp, #72	; 0x48
 8015bcc:	af02      	add	r7, sp, #8
 8015bce:	6078      	str	r0, [r7, #4]
 8015bd0:	460b      	mov	r3, r1
 8015bd2:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015bd4:	2302      	movs	r3, #2
 8015bd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8015bda:	2300      	movs	r3, #0
 8015bdc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 8015be0:	2300      	movs	r3, #0
 8015be2:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8015be4:	2300      	movs	r3, #0
 8015be6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 8015bea:	2300      	movs	r3, #0
 8015bec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d101      	bne.n	8015bfa <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015bf6:	2303      	movs	r3, #3
 8015bf8:	e113      	b.n	8015e22 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	2200      	movs	r2, #0
 8015bfe:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8015c00:	f7fc f9e2 	bl	8011fc8 <LoRaMacIsBusy>
 8015c04:	4603      	mov	r3, r0
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d001      	beq.n	8015c0e <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	e109      	b.n	8015e22 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	f107 040c 	add.w	r4, r7, #12
 8015c14:	461d      	mov	r5, r3
 8015c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015c1a:	682b      	ldr	r3, [r5, #0]
 8015c1c:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8015c24:	2214      	movs	r2, #20
 8015c26:	2100      	movs	r1, #0
 8015c28:	4880      	ldr	r0, [pc, #512]	; (8015e2c <LoRaMacMcpsRequest+0x264>)
 8015c2a:	f004 fdd3 	bl	801a7d4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015c2e:	4b80      	ldr	r3, [pc, #512]	; (8015e30 <LoRaMacMcpsRequest+0x268>)
 8015c30:	2201      	movs	r2, #1
 8015c32:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8015c36:	4b7f      	ldr	r3, [pc, #508]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015c38:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8015c3c:	2b02      	cmp	r3, #2
 8015c3e:	d111      	bne.n	8015c64 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8015c40:	4b7c      	ldr	r3, [pc, #496]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015c42:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8015c46:	2b02      	cmp	r3, #2
 8015c48:	d10c      	bne.n	8015c64 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8015c4a:	4b7a      	ldr	r3, [pc, #488]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015c4c:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8015c50:	f083 0301 	eor.w	r3, r3, #1
 8015c54:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d004      	beq.n	8015c64 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8015c5a:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d101      	bne.n	8015c64 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8015c60:	2301      	movs	r3, #1
 8015c62:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8015c64:	7b3b      	ldrb	r3, [r7, #12]
 8015c66:	2b03      	cmp	r3, #3
 8015c68:	d030      	beq.n	8015ccc <LoRaMacMcpsRequest+0x104>
 8015c6a:	2b03      	cmp	r3, #3
 8015c6c:	dc3f      	bgt.n	8015cee <LoRaMacMcpsRequest+0x126>
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d002      	beq.n	8015c78 <LoRaMacMcpsRequest+0xb0>
 8015c72:	2b01      	cmp	r3, #1
 8015c74:	d015      	beq.n	8015ca2 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8015c76:	e03a      	b.n	8015cee <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8015c78:	2301      	movs	r3, #1
 8015c7a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8015c7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015c82:	2202      	movs	r2, #2
 8015c84:	f362 1347 	bfi	r3, r2, #5, #3
 8015c88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8015c8c:	7c3b      	ldrb	r3, [r7, #16]
 8015c8e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8015c92:	697b      	ldr	r3, [r7, #20]
 8015c94:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8015c96:	8b3b      	ldrh	r3, [r7, #24]
 8015c98:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8015c9a:	7ebb      	ldrb	r3, [r7, #26]
 8015c9c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8015ca0:	e026      	b.n	8015cf0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8015ca2:	2301      	movs	r3, #1
 8015ca4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8015ca8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015cac:	2204      	movs	r2, #4
 8015cae:	f362 1347 	bfi	r3, r2, #5, #3
 8015cb2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8015cb6:	7c3b      	ldrb	r3, [r7, #16]
 8015cb8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8015cbc:	697b      	ldr	r3, [r7, #20]
 8015cbe:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8015cc0:	8b3b      	ldrh	r3, [r7, #24]
 8015cc2:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8015cc4:	7ebb      	ldrb	r3, [r7, #26]
 8015cc6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8015cca:	e011      	b.n	8015cf0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8015ccc:	2301      	movs	r3, #1
 8015cce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8015cd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015cd6:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8015cda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8015cde:	693b      	ldr	r3, [r7, #16]
 8015ce0:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8015ce2:	8abb      	ldrh	r3, [r7, #20]
 8015ce4:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 8015ce6:	7dbb      	ldrb	r3, [r7, #22]
 8015ce8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8015cec:	e000      	b.n	8015cf0 <LoRaMacMcpsRequest+0x128>
            break;
 8015cee:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015cf0:	2302      	movs	r3, #2
 8015cf2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015cf6:	4b4f      	ldr	r3, [pc, #316]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015cf8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015cfc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015d00:	4b4c      	ldr	r3, [pc, #304]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015d02:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015d06:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015d0a:	4611      	mov	r1, r2
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f002 f96e 	bl	8017fee <RegionGetPhyParam>
 8015d12:	4603      	mov	r3, r0
 8015d14:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8015d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d18:	b25b      	sxtb	r3, r3
 8015d1a:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8015d1e:	4293      	cmp	r3, r2
 8015d20:	bfb8      	it	lt
 8015d22:	4613      	movlt	r3, r2
 8015d24:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8015d28:	4b42      	ldr	r3, [pc, #264]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015d2a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8015d2e:	4a41      	ldr	r2, [pc, #260]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015d30:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8015d34:	4a3f      	ldr	r2, [pc, #252]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015d36:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	f7fc fae0 	bl	8012300 <CheckForMinimumAbpDatarate>
 8015d40:	4603      	mov	r3, r0
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d002      	beq.n	8015d4c <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8015d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d48:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8015d4c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d05f      	beq.n	8015e14 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8015d54:	4b37      	ldr	r3, [pc, #220]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015d56:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8015d5a:	f083 0301 	eor.w	r3, r3, #1
 8015d5e:	b2db      	uxtb	r3, r3
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d10e      	bne.n	8015d82 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8015d64:	4b33      	ldr	r3, [pc, #204]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015d66:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8015d6a:	4a32      	ldr	r2, [pc, #200]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015d6c:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8015d70:	4a30      	ldr	r2, [pc, #192]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015d72:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8015d76:	4618      	mov	r0, r3
 8015d78:	f7fc fac2 	bl	8012300 <CheckForMinimumAbpDatarate>
 8015d7c:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d01c      	beq.n	8015dbc <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8015d82:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8015d86:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015d8a:	4b2a      	ldr	r3, [pc, #168]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015d8c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015d94:	4b27      	ldr	r3, [pc, #156]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015d96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015d9a:	f107 0120 	add.w	r1, r7, #32
 8015d9e:	2205      	movs	r2, #5
 8015da0:	4618      	mov	r0, r3
 8015da2:	f002 f95f 	bl	8018064 <RegionVerify>
 8015da6:	4603      	mov	r3, r0
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d005      	beq.n	8015db8 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015dac:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8015db0:	4b20      	ldr	r3, [pc, #128]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015db2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8015db6:	e001      	b.n	8015dbc <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8015db8:	2303      	movs	r3, #3
 8015dba:	e032      	b.n	8015e22 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8015dbc:	4b1d      	ldr	r3, [pc, #116]	; (8015e34 <LoRaMacMcpsRequest+0x26c>)
 8015dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015dc2:	4a1b      	ldr	r2, [pc, #108]	; (8015e30 <LoRaMacMcpsRequest+0x268>)
 8015dc4:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8015dc8:	4611      	mov	r1, r2
 8015dca:	4618      	mov	r0, r3
 8015dcc:	f7fc fb84 	bl	80124d8 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8015dd0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015dd2:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8015dd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8015dda:	78fb      	ldrb	r3, [r7, #3]
 8015ddc:	9300      	str	r3, [sp, #0]
 8015dde:	4613      	mov	r3, r2
 8015de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015de2:	f7fd fb23 	bl	801342c <Send>
 8015de6:	4603      	mov	r3, r0
 8015de8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 8015dec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d10b      	bne.n	8015e0c <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8015df4:	7b3a      	ldrb	r2, [r7, #12]
 8015df6:	4b0e      	ldr	r3, [pc, #56]	; (8015e30 <LoRaMacMcpsRequest+0x268>)
 8015df8:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8015dfc:	4a0c      	ldr	r2, [pc, #48]	; (8015e30 <LoRaMacMcpsRequest+0x268>)
 8015dfe:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8015e02:	f043 0301 	orr.w	r3, r3, #1
 8015e06:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8015e0a:	e003      	b.n	8015e14 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8015e0c:	4b08      	ldr	r3, [pc, #32]	; (8015e30 <LoRaMacMcpsRequest+0x268>)
 8015e0e:	2200      	movs	r2, #0
 8015e10:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015e14:	4b06      	ldr	r3, [pc, #24]	; (8015e30 <LoRaMacMcpsRequest+0x268>)
 8015e16:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	611a      	str	r2, [r3, #16]

    return status;
 8015e1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	3740      	adds	r7, #64	; 0x40
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bdb0      	pop	{r4, r5, r7, pc}
 8015e2a:	bf00      	nop
 8015e2c:	20000c90 	.word	0x20000c90
 8015e30:	20000850 	.word	0x20000850
 8015e34:	20000d6c 	.word	0x20000d6c

08015e38 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b084      	sub	sp, #16
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	4603      	mov	r3, r0
 8015e40:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8015e42:	79fb      	ldrb	r3, [r7, #7]
 8015e44:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8015e46:	4b0d      	ldr	r3, [pc, #52]	; (8015e7c <LoRaMacTestSetDutyCycleOn+0x44>)
 8015e48:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015e4c:	f107 010c 	add.w	r1, r7, #12
 8015e50:	220f      	movs	r2, #15
 8015e52:	4618      	mov	r0, r3
 8015e54:	f002 f906 	bl	8018064 <RegionVerify>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d00a      	beq.n	8015e74 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8015e5e:	4a07      	ldr	r2, [pc, #28]	; (8015e7c <LoRaMacTestSetDutyCycleOn+0x44>)
 8015e60:	79fb      	ldrb	r3, [r7, #7]
 8015e62:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8015e66:	4a06      	ldr	r2, [pc, #24]	; (8015e80 <LoRaMacTestSetDutyCycleOn+0x48>)
 8015e68:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8015e6c:	f043 0320 	orr.w	r3, r3, #32
 8015e70:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8015e74:	bf00      	nop
 8015e76:	3710      	adds	r7, #16
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	bd80      	pop	{r7, pc}
 8015e7c:	20000d6c 	.word	0x20000d6c
 8015e80:	20000850 	.word	0x20000850

08015e84 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8015e88:	f7fe fe94 	bl	8014bb4 <LoRaMacStop>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d112      	bne.n	8015eb8 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8015e92:	480b      	ldr	r0, [pc, #44]	; (8015ec0 <LoRaMacDeInitialization+0x3c>)
 8015e94:	f008 fdfe 	bl	801ea94 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8015e98:	480a      	ldr	r0, [pc, #40]	; (8015ec4 <LoRaMacDeInitialization+0x40>)
 8015e9a:	f008 fdfb 	bl	801ea94 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8015e9e:	480a      	ldr	r0, [pc, #40]	; (8015ec8 <LoRaMacDeInitialization+0x44>)
 8015ea0:	f008 fdf8 	bl	801ea94 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8015ea4:	f000 f94a 	bl	801613c <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8015ea8:	2000      	movs	r0, #0
 8015eaa:	f7fd fe1d 	bl	8013ae8 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8015eae:	4b07      	ldr	r3, [pc, #28]	; (8015ecc <LoRaMacDeInitialization+0x48>)
 8015eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015eb2:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	e000      	b.n	8015eba <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8015eb8:	2301      	movs	r3, #1
    }
}
 8015eba:	4618      	mov	r0, r3
 8015ebc:	bd80      	pop	{r7, pc}
 8015ebe:	bf00      	nop
 8015ec0:	20000bb8 	.word	0x20000bb8
 8015ec4:	20000bd0 	.word	0x20000bd0
 8015ec8:	20000be8 	.word	0x20000be8
 8015ecc:	08020428 	.word	0x08020428

08015ed0 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b08c      	sub	sp, #48	; 0x30
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	60f8      	str	r0, [r7, #12]
 8015ed8:	60b9      	str	r1, [r7, #8]
 8015eda:	607a      	str	r2, [r7, #4]
 8015edc:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8015ede:	2300      	movs	r3, #0
 8015ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	7b1b      	ldrb	r3, [r3, #12]
 8015ee8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	7b5b      	ldrb	r3, [r3, #13]
 8015ef0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	7b9b      	ldrb	r3, [r3, #14]
 8015ef8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	685a      	ldr	r2, [r3, #4]
 8015f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f02:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	785b      	ldrb	r3, [r3, #1]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	f000 8088 	beq.w	801601e <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8015f0e:	2302      	movs	r3, #2
 8015f10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	7bdb      	ldrb	r3, [r3, #15]
 8015f18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	7c1b      	ldrb	r3, [r3, #16]
 8015f20:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015f24:	4611      	mov	r1, r2
 8015f26:	4618      	mov	r0, r3
 8015f28:	f002 f861 	bl	8017fee <RegionGetPhyParam>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8015f30:	6a3b      	ldr	r3, [r7, #32]
 8015f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8015f36:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 8015f3a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8015f3e:	4293      	cmp	r3, r2
 8015f40:	bfb8      	it	lt
 8015f42:	4613      	movlt	r3, r2
 8015f44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	685b      	ldr	r3, [r3, #4]
 8015f4c:	68fa      	ldr	r2, [r7, #12]
 8015f4e:	8912      	ldrh	r2, [r2, #8]
 8015f50:	4293      	cmp	r3, r2
 8015f52:	d302      	bcc.n	8015f5a <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8015f54:	2301      	movs	r3, #1
 8015f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	685b      	ldr	r3, [r3, #4]
 8015f5e:	68fa      	ldr	r2, [r7, #12]
 8015f60:	8912      	ldrh	r2, [r2, #8]
 8015f62:	4611      	mov	r1, r2
 8015f64:	68fa      	ldr	r2, [r7, #12]
 8015f66:	8952      	ldrh	r2, [r2, #10]
 8015f68:	440a      	add	r2, r1
 8015f6a:	4293      	cmp	r3, r2
 8015f6c:	d30f      	bcc.n	8015f8e <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8015f6e:	230a      	movs	r3, #10
 8015f70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	7c1b      	ldrb	r3, [r3, #16]
 8015f78:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015f7c:	4611      	mov	r1, r2
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f002 f835 	bl	8017fee <RegionGetPhyParam>
 8015f84:	4603      	mov	r3, r0
 8015f86:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8015f88:	6a3b      	ldr	r3, [r7, #32]
 8015f8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	685b      	ldr	r3, [r3, #4]
 8015f92:	68fa      	ldr	r2, [r7, #12]
 8015f94:	8912      	ldrh	r2, [r2, #8]
 8015f96:	4611      	mov	r1, r2
 8015f98:	68fa      	ldr	r2, [r7, #12]
 8015f9a:	8952      	ldrh	r2, [r2, #10]
 8015f9c:	0052      	lsls	r2, r2, #1
 8015f9e:	440a      	add	r2, r1
 8015fa0:	4293      	cmp	r3, r2
 8015fa2:	d33c      	bcc.n	801601e <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	685b      	ldr	r3, [r3, #4]
 8015fa8:	68fa      	ldr	r2, [r7, #12]
 8015faa:	8912      	ldrh	r2, [r2, #8]
 8015fac:	1a9b      	subs	r3, r3, r2
 8015fae:	68fa      	ldr	r2, [r7, #12]
 8015fb0:	8952      	ldrh	r2, [r2, #10]
 8015fb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8015fb6:	fb01 f202 	mul.w	r2, r1, r2
 8015fba:	1a9b      	subs	r3, r3, r2
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d12e      	bne.n	801601e <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8015fc0:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015fc4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015fc8:	429a      	cmp	r2, r3
 8015fca:	d110      	bne.n	8015fee <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	781b      	ldrb	r3, [r3, #0]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d009      	beq.n	8015fe8 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015fd4:	2302      	movs	r3, #2
 8015fd6:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	7c1b      	ldrb	r3, [r3, #16]
 8015fdc:	f107 0210 	add.w	r2, r7, #16
 8015fe0:	4611      	mov	r1, r2
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f002 f82c 	bl	8018040 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8015fe8:	2301      	movs	r3, #1
 8015fea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8015fee:	2321      	movs	r3, #33	; 0x21
 8015ff0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 8015ff4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015ff8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	7bdb      	ldrb	r3, [r3, #15]
 8016000:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	7c1b      	ldrb	r3, [r3, #16]
 8016008:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801600c:	4611      	mov	r1, r2
 801600e:	4618      	mov	r0, r3
 8016010:	f001 ffed 	bl	8017fee <RegionGetPhyParam>
 8016014:	4603      	mov	r3, r0
 8016016:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8016018:	6a3b      	ldr	r3, [r7, #32]
 801601a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 801601e:	68bb      	ldr	r3, [r7, #8]
 8016020:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8016024:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801602c:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 801602e:	683b      	ldr	r3, [r7, #0]
 8016030:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016034:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8016036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801603a:	4618      	mov	r0, r3
 801603c:	3730      	adds	r7, #48	; 0x30
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}

08016042 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8016042:	b480      	push	{r7}
 8016044:	b085      	sub	sp, #20
 8016046:	af00      	add	r7, sp, #0
 8016048:	60f8      	str	r0, [r7, #12]
 801604a:	60b9      	str	r1, [r7, #8]
 801604c:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801604e:	bf00      	nop
 8016050:	3714      	adds	r7, #20
 8016052:	46bd      	mov	sp, r7
 8016054:	bc80      	pop	{r7}
 8016056:	4770      	bx	lr

08016058 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8016058:	b480      	push	{r7}
 801605a:	b083      	sub	sp, #12
 801605c:	af00      	add	r7, sp, #0
 801605e:	4603      	mov	r3, r0
 8016060:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016062:	bf00      	nop
 8016064:	370c      	adds	r7, #12
 8016066:	46bd      	mov	sp, r7
 8016068:	bc80      	pop	{r7}
 801606a:	4770      	bx	lr

0801606c <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801606c:	b480      	push	{r7}
 801606e:	b083      	sub	sp, #12
 8016070:	af00      	add	r7, sp, #0
 8016072:	4603      	mov	r3, r0
 8016074:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016076:	bf00      	nop
 8016078:	370c      	adds	r7, #12
 801607a:	46bd      	mov	sp, r7
 801607c:	bc80      	pop	{r7}
 801607e:	4770      	bx	lr

08016080 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8016080:	b480      	push	{r7}
 8016082:	b083      	sub	sp, #12
 8016084:	af00      	add	r7, sp, #0
 8016086:	4603      	mov	r3, r0
 8016088:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801608a:	bf00      	nop
 801608c:	370c      	adds	r7, #12
 801608e:	46bd      	mov	sp, r7
 8016090:	bc80      	pop	{r7}
 8016092:	4770      	bx	lr

08016094 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8016094:	b480      	push	{r7}
 8016096:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8016098:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801609a:	4618      	mov	r0, r3
 801609c:	46bd      	mov	sp, r7
 801609e:	bc80      	pop	{r7}
 80160a0:	4770      	bx	lr

080160a2 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80160a2:	b480      	push	{r7}
 80160a4:	b083      	sub	sp, #12
 80160a6:	af00      	add	r7, sp, #0
 80160a8:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80160aa:	bf00      	nop
 80160ac:	370c      	adds	r7, #12
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bc80      	pop	{r7}
 80160b2:	4770      	bx	lr

080160b4 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80160b4:	b480      	push	{r7}
 80160b6:	b083      	sub	sp, #12
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80160bc:	bf00      	nop
 80160be:	370c      	adds	r7, #12
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bc80      	pop	{r7}
 80160c4:	4770      	bx	lr

080160c6 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80160c6:	b480      	push	{r7}
 80160c8:	b083      	sub	sp, #12
 80160ca:	af00      	add	r7, sp, #0
 80160cc:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80160ce:	bf00      	nop
 80160d0:	370c      	adds	r7, #12
 80160d2:	46bd      	mov	sp, r7
 80160d4:	bc80      	pop	{r7}
 80160d6:	4770      	bx	lr

080160d8 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80160d8:	b480      	push	{r7}
 80160da:	b083      	sub	sp, #12
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
 80160e0:	460b      	mov	r3, r1
 80160e2:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80160e4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80160e6:	4618      	mov	r0, r3
 80160e8:	370c      	adds	r7, #12
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bc80      	pop	{r7}
 80160ee:	4770      	bx	lr

080160f0 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80160f0:	b480      	push	{r7}
 80160f2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80160f4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80160f6:	4618      	mov	r0, r3
 80160f8:	46bd      	mov	sp, r7
 80160fa:	bc80      	pop	{r7}
 80160fc:	4770      	bx	lr

080160fe <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80160fe:	b480      	push	{r7}
 8016100:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8016102:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016104:	4618      	mov	r0, r3
 8016106:	46bd      	mov	sp, r7
 8016108:	bc80      	pop	{r7}
 801610a:	4770      	bx	lr

0801610c <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801610c:	b480      	push	{r7}
 801610e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8016110:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016112:	4618      	mov	r0, r3
 8016114:	46bd      	mov	sp, r7
 8016116:	bc80      	pop	{r7}
 8016118:	4770      	bx	lr

0801611a <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801611a:	b480      	push	{r7}
 801611c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801611e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016120:	4618      	mov	r0, r3
 8016122:	46bd      	mov	sp, r7
 8016124:	bc80      	pop	{r7}
 8016126:	4770      	bx	lr

08016128 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8016128:	b480      	push	{r7}
 801612a:	b083      	sub	sp, #12
 801612c:	af00      	add	r7, sp, #0
 801612e:	4603      	mov	r3, r0
 8016130:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016132:	bf00      	nop
 8016134:	370c      	adds	r7, #12
 8016136:	46bd      	mov	sp, r7
 8016138:	bc80      	pop	{r7}
 801613a:	4770      	bx	lr

0801613c <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801613c:	b480      	push	{r7}
 801613e:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016140:	bf00      	nop
 8016142:	46bd      	mov	sp, r7
 8016144:	bc80      	pop	{r7}
 8016146:	4770      	bx	lr

08016148 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8016148:	b480      	push	{r7}
 801614a:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801614c:	bf00      	nop
 801614e:	46bd      	mov	sp, r7
 8016150:	bc80      	pop	{r7}
 8016152:	4770      	bx	lr

08016154 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8016154:	b480      	push	{r7}
 8016156:	b083      	sub	sp, #12
 8016158:	af00      	add	r7, sp, #0
 801615a:	4603      	mov	r3, r0
 801615c:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801615e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016160:	4618      	mov	r0, r3
 8016162:	370c      	adds	r7, #12
 8016164:	46bd      	mov	sp, r7
 8016166:	bc80      	pop	{r7}
 8016168:	4770      	bx	lr

0801616a <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801616a:	b480      	push	{r7}
 801616c:	b083      	sub	sp, #12
 801616e:	af00      	add	r7, sp, #0
 8016170:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8016172:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016174:	4618      	mov	r0, r3
 8016176:	370c      	adds	r7, #12
 8016178:	46bd      	mov	sp, r7
 801617a:	bc80      	pop	{r7}
 801617c:	4770      	bx	lr

0801617e <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801617e:	b480      	push	{r7}
 8016180:	b083      	sub	sp, #12
 8016182:	af00      	add	r7, sp, #0
 8016184:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8016186:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016188:	4618      	mov	r0, r3
 801618a:	370c      	adds	r7, #12
 801618c:	46bd      	mov	sp, r7
 801618e:	bc80      	pop	{r7}
 8016190:	4770      	bx	lr

08016192 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8016192:	b480      	push	{r7}
 8016194:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016196:	bf00      	nop
 8016198:	46bd      	mov	sp, r7
 801619a:	bc80      	pop	{r7}
 801619c:	4770      	bx	lr

0801619e <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801619e:	b480      	push	{r7}
 80161a0:	b083      	sub	sp, #12
 80161a2:	af00      	add	r7, sp, #0
 80161a4:	4603      	mov	r3, r0
 80161a6:	6039      	str	r1, [r7, #0]
 80161a8:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80161aa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80161ac:	4618      	mov	r0, r3
 80161ae:	370c      	adds	r7, #12
 80161b0:	46bd      	mov	sp, r7
 80161b2:	bc80      	pop	{r7}
 80161b4:	4770      	bx	lr

080161b6 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80161b6:	b480      	push	{r7}
 80161b8:	b083      	sub	sp, #12
 80161ba:	af00      	add	r7, sp, #0
 80161bc:	4603      	mov	r3, r0
 80161be:	603a      	str	r2, [r7, #0]
 80161c0:	80fb      	strh	r3, [r7, #6]
 80161c2:	460b      	mov	r3, r1
 80161c4:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80161c6:	bf00      	nop
 80161c8:	370c      	adds	r7, #12
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bc80      	pop	{r7}
 80161ce:	4770      	bx	lr

080161d0 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80161d0:	b480      	push	{r7}
 80161d2:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80161d4:	bf00      	nop
 80161d6:	46bd      	mov	sp, r7
 80161d8:	bc80      	pop	{r7}
 80161da:	4770      	bx	lr

080161dc <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80161dc:	b480      	push	{r7}
 80161de:	b083      	sub	sp, #12
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80161e4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80161e6:	4618      	mov	r0, r3
 80161e8:	370c      	adds	r7, #12
 80161ea:	46bd      	mov	sp, r7
 80161ec:	bc80      	pop	{r7}
 80161ee:	4770      	bx	lr

080161f0 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80161f0:	b480      	push	{r7}
 80161f2:	b083      	sub	sp, #12
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80161f8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80161fa:	4618      	mov	r0, r3
 80161fc:	370c      	adds	r7, #12
 80161fe:	46bd      	mov	sp, r7
 8016200:	bc80      	pop	{r7}
 8016202:	4770      	bx	lr

08016204 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8016204:	b480      	push	{r7}
 8016206:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8016208:	bf00      	nop
 801620a:	46bd      	mov	sp, r7
 801620c:	bc80      	pop	{r7}
 801620e:	4770      	bx	lr

08016210 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8016210:	b480      	push	{r7}
 8016212:	b083      	sub	sp, #12
 8016214:	af00      	add	r7, sp, #0
 8016216:	6078      	str	r0, [r7, #4]
 8016218:	460b      	mov	r3, r1
 801621a:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801621c:	bf00      	nop
 801621e:	370c      	adds	r7, #12
 8016220:	46bd      	mov	sp, r7
 8016222:	bc80      	pop	{r7}
 8016224:	4770      	bx	lr

08016226 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8016226:	b480      	push	{r7}
 8016228:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801622a:	bf00      	nop
 801622c:	46bd      	mov	sp, r7
 801622e:	bc80      	pop	{r7}
 8016230:	4770      	bx	lr

08016232 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8016232:	b480      	push	{r7}
 8016234:	b085      	sub	sp, #20
 8016236:	af00      	add	r7, sp, #0
 8016238:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801623e:	2300      	movs	r3, #0
 8016240:	81fb      	strh	r3, [r7, #14]
 8016242:	e00a      	b.n	801625a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8016244:	89fb      	ldrh	r3, [r7, #14]
 8016246:	68ba      	ldr	r2, [r7, #8]
 8016248:	4413      	add	r3, r2
 801624a:	781b      	ldrb	r3, [r3, #0]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d001      	beq.n	8016254 <IsSlotFree+0x22>
        {
            return false;
 8016250:	2300      	movs	r3, #0
 8016252:	e006      	b.n	8016262 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8016254:	89fb      	ldrh	r3, [r7, #14]
 8016256:	3301      	adds	r3, #1
 8016258:	81fb      	strh	r3, [r7, #14]
 801625a:	89fb      	ldrh	r3, [r7, #14]
 801625c:	2b0f      	cmp	r3, #15
 801625e:	d9f1      	bls.n	8016244 <IsSlotFree+0x12>
        }
    }
    return true;
 8016260:	2301      	movs	r3, #1
}
 8016262:	4618      	mov	r0, r3
 8016264:	3714      	adds	r7, #20
 8016266:	46bd      	mov	sp, r7
 8016268:	bc80      	pop	{r7}
 801626a:	4770      	bx	lr

0801626c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 801626c:	b580      	push	{r7, lr}
 801626e:	b082      	sub	sp, #8
 8016270:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8016272:	2300      	movs	r3, #0
 8016274:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8016276:	e007      	b.n	8016288 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8016278:	79fb      	ldrb	r3, [r7, #7]
 801627a:	3301      	adds	r3, #1
 801627c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801627e:	79fb      	ldrb	r3, [r7, #7]
 8016280:	2b20      	cmp	r3, #32
 8016282:	d101      	bne.n	8016288 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8016284:	2300      	movs	r3, #0
 8016286:	e012      	b.n	80162ae <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8016288:	79fb      	ldrb	r3, [r7, #7]
 801628a:	011b      	lsls	r3, r3, #4
 801628c:	3308      	adds	r3, #8
 801628e:	4a0a      	ldr	r2, [pc, #40]	; (80162b8 <MallocNewMacCommandSlot+0x4c>)
 8016290:	4413      	add	r3, r2
 8016292:	4618      	mov	r0, r3
 8016294:	f7ff ffcd 	bl	8016232 <IsSlotFree>
 8016298:	4603      	mov	r3, r0
 801629a:	f083 0301 	eor.w	r3, r3, #1
 801629e:	b2db      	uxtb	r3, r3
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d1e9      	bne.n	8016278 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80162a4:	79fb      	ldrb	r3, [r7, #7]
 80162a6:	011b      	lsls	r3, r3, #4
 80162a8:	3308      	adds	r3, #8
 80162aa:	4a03      	ldr	r2, [pc, #12]	; (80162b8 <MallocNewMacCommandSlot+0x4c>)
 80162ac:	4413      	add	r3, r2
}
 80162ae:	4618      	mov	r0, r3
 80162b0:	3708      	adds	r7, #8
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop
 80162b8:	200019ac 	.word	0x200019ac

080162bc <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b082      	sub	sp, #8
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d101      	bne.n	80162ce <FreeMacCommandSlot+0x12>
    {
        return false;
 80162ca:	2300      	movs	r3, #0
 80162cc:	e005      	b.n	80162da <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80162ce:	2210      	movs	r2, #16
 80162d0:	2100      	movs	r1, #0
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f004 fa7e 	bl	801a7d4 <memset1>

    return true;
 80162d8:	2301      	movs	r3, #1
}
 80162da:	4618      	mov	r0, r3
 80162dc:	3708      	adds	r7, #8
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}

080162e2 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80162e2:	b480      	push	{r7}
 80162e4:	b083      	sub	sp, #12
 80162e6:	af00      	add	r7, sp, #0
 80162e8:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d101      	bne.n	80162f4 <LinkedListInit+0x12>
    {
        return false;
 80162f0:	2300      	movs	r3, #0
 80162f2:	e006      	b.n	8016302 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	2200      	movs	r2, #0
 80162f8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	2200      	movs	r2, #0
 80162fe:	605a      	str	r2, [r3, #4]

    return true;
 8016300:	2301      	movs	r3, #1
}
 8016302:	4618      	mov	r0, r3
 8016304:	370c      	adds	r7, #12
 8016306:	46bd      	mov	sp, r7
 8016308:	bc80      	pop	{r7}
 801630a:	4770      	bx	lr

0801630c <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 801630c:	b480      	push	{r7}
 801630e:	b083      	sub	sp, #12
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
 8016314:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d002      	beq.n	8016322 <LinkedListAdd+0x16>
 801631c:	683b      	ldr	r3, [r7, #0]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d101      	bne.n	8016326 <LinkedListAdd+0x1a>
    {
        return false;
 8016322:	2300      	movs	r3, #0
 8016324:	e015      	b.n	8016352 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d102      	bne.n	8016334 <LinkedListAdd+0x28>
    {
        list->First = element;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	683a      	ldr	r2, [r7, #0]
 8016332:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	685b      	ldr	r3, [r3, #4]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d003      	beq.n	8016344 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	685b      	ldr	r3, [r3, #4]
 8016340:	683a      	ldr	r2, [r7, #0]
 8016342:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8016344:	683b      	ldr	r3, [r7, #0]
 8016346:	2200      	movs	r2, #0
 8016348:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	683a      	ldr	r2, [r7, #0]
 801634e:	605a      	str	r2, [r3, #4]

    return true;
 8016350:	2301      	movs	r3, #1
}
 8016352:	4618      	mov	r0, r3
 8016354:	370c      	adds	r7, #12
 8016356:	46bd      	mov	sp, r7
 8016358:	bc80      	pop	{r7}
 801635a:	4770      	bx	lr

0801635c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 801635c:	b480      	push	{r7}
 801635e:	b085      	sub	sp, #20
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d002      	beq.n	8016372 <LinkedListGetPrevious+0x16>
 801636c:	683b      	ldr	r3, [r7, #0]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d101      	bne.n	8016376 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8016372:	2300      	movs	r3, #0
 8016374:	e016      	b.n	80163a4 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 801637c:	683a      	ldr	r2, [r7, #0]
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	429a      	cmp	r2, r3
 8016382:	d00c      	beq.n	801639e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8016384:	e002      	b.n	801638c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d007      	beq.n	80163a2 <LinkedListGetPrevious+0x46>
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	683a      	ldr	r2, [r7, #0]
 8016398:	429a      	cmp	r2, r3
 801639a:	d1f4      	bne.n	8016386 <LinkedListGetPrevious+0x2a>
 801639c:	e001      	b.n	80163a2 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801639e:	2300      	movs	r3, #0
 80163a0:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80163a2:	68fb      	ldr	r3, [r7, #12]
}
 80163a4:	4618      	mov	r0, r3
 80163a6:	3714      	adds	r7, #20
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bc80      	pop	{r7}
 80163ac:	4770      	bx	lr

080163ae <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80163ae:	b580      	push	{r7, lr}
 80163b0:	b084      	sub	sp, #16
 80163b2:	af00      	add	r7, sp, #0
 80163b4:	6078      	str	r0, [r7, #4]
 80163b6:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d002      	beq.n	80163c4 <LinkedListRemove+0x16>
 80163be:	683b      	ldr	r3, [r7, #0]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d101      	bne.n	80163c8 <LinkedListRemove+0x1a>
    {
        return false;
 80163c4:	2300      	movs	r3, #0
 80163c6:	e020      	b.n	801640a <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80163c8:	6839      	ldr	r1, [r7, #0]
 80163ca:	6878      	ldr	r0, [r7, #4]
 80163cc:	f7ff ffc6 	bl	801635c <LinkedListGetPrevious>
 80163d0:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	683a      	ldr	r2, [r7, #0]
 80163d8:	429a      	cmp	r2, r3
 80163da:	d103      	bne.n	80163e4 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80163dc:	683b      	ldr	r3, [r7, #0]
 80163de:	681a      	ldr	r2, [r3, #0]
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	685b      	ldr	r3, [r3, #4]
 80163e8:	683a      	ldr	r2, [r7, #0]
 80163ea:	429a      	cmp	r2, r3
 80163ec:	d102      	bne.n	80163f4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	68fa      	ldr	r2, [r7, #12]
 80163f2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d003      	beq.n	8016402 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80163fa:	683b      	ldr	r3, [r7, #0]
 80163fc:	681a      	ldr	r2, [r3, #0]
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8016402:	683b      	ldr	r3, [r7, #0]
 8016404:	2200      	movs	r2, #0
 8016406:	601a      	str	r2, [r3, #0]

    return true;
 8016408:	2301      	movs	r3, #1
}
 801640a:	4618      	mov	r0, r3
 801640c:	3710      	adds	r7, #16
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}
	...

08016414 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8016414:	b480      	push	{r7}
 8016416:	b083      	sub	sp, #12
 8016418:	af00      	add	r7, sp, #0
 801641a:	4603      	mov	r3, r0
 801641c:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 801641e:	79fb      	ldrb	r3, [r7, #7]
 8016420:	2b11      	cmp	r3, #17
 8016422:	bf8c      	ite	hi
 8016424:	2201      	movhi	r2, #1
 8016426:	2200      	movls	r2, #0
 8016428:	b2d2      	uxtb	r2, r2
 801642a:	2a00      	cmp	r2, #0
 801642c:	d10d      	bne.n	801644a <IsSticky+0x36>
 801642e:	4a0a      	ldr	r2, [pc, #40]	; (8016458 <IsSticky+0x44>)
 8016430:	fa22 f303 	lsr.w	r3, r2, r3
 8016434:	f003 0301 	and.w	r3, r3, #1
 8016438:	2b00      	cmp	r3, #0
 801643a:	bf14      	ite	ne
 801643c:	2301      	movne	r3, #1
 801643e:	2300      	moveq	r3, #0
 8016440:	b2db      	uxtb	r3, r3
 8016442:	2b00      	cmp	r3, #0
 8016444:	d001      	beq.n	801644a <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8016446:	2301      	movs	r3, #1
 8016448:	e000      	b.n	801644c <IsSticky+0x38>
        default:
            return false;
 801644a:	2300      	movs	r3, #0
    }
}
 801644c:	4618      	mov	r0, r3
 801644e:	370c      	adds	r7, #12
 8016450:	46bd      	mov	sp, r7
 8016452:	bc80      	pop	{r7}
 8016454:	4770      	bx	lr
 8016456:	bf00      	nop
 8016458:	00020720 	.word	0x00020720

0801645c <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 801645c:	b480      	push	{r7}
 801645e:	b083      	sub	sp, #12
 8016460:	af00      	add	r7, sp, #0
 8016462:	4603      	mov	r3, r0
 8016464:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8016466:	2300      	movs	r3, #0
    }
}
 8016468:	4618      	mov	r0, r3
 801646a:	370c      	adds	r7, #12
 801646c:	46bd      	mov	sp, r7
 801646e:	bc80      	pop	{r7}
 8016470:	4770      	bx	lr
	...

08016474 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8016474:	b580      	push	{r7, lr}
 8016476:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8016478:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801647c:	2100      	movs	r1, #0
 801647e:	4804      	ldr	r0, [pc, #16]	; (8016490 <LoRaMacCommandsInit+0x1c>)
 8016480:	f004 f9a8 	bl	801a7d4 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8016484:	4802      	ldr	r0, [pc, #8]	; (8016490 <LoRaMacCommandsInit+0x1c>)
 8016486:	f7ff ff2c 	bl	80162e2 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801648a:	2300      	movs	r3, #0
}
 801648c:	4618      	mov	r0, r3
 801648e:	bd80      	pop	{r7, pc}
 8016490:	200019ac 	.word	0x200019ac

08016494 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b086      	sub	sp, #24
 8016498:	af00      	add	r7, sp, #0
 801649a:	4603      	mov	r3, r0
 801649c:	60b9      	str	r1, [r7, #8]
 801649e:	607a      	str	r2, [r7, #4]
 80164a0:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80164a2:	68bb      	ldr	r3, [r7, #8]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d101      	bne.n	80164ac <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80164a8:	2301      	movs	r3, #1
 80164aa:	e03b      	b.n	8016524 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80164ac:	f7ff fede 	bl	801626c <MallocNewMacCommandSlot>
 80164b0:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80164b2:	697b      	ldr	r3, [r7, #20]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d101      	bne.n	80164bc <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80164b8:	2302      	movs	r3, #2
 80164ba:	e033      	b.n	8016524 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80164bc:	6979      	ldr	r1, [r7, #20]
 80164be:	481b      	ldr	r0, [pc, #108]	; (801652c <LoRaMacCommandsAddCmd+0x98>)
 80164c0:	f7ff ff24 	bl	801630c <LinkedListAdd>
 80164c4:	4603      	mov	r3, r0
 80164c6:	f083 0301 	eor.w	r3, r3, #1
 80164ca:	b2db      	uxtb	r3, r3
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d001      	beq.n	80164d4 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80164d0:	2305      	movs	r3, #5
 80164d2:	e027      	b.n	8016524 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	7bfa      	ldrb	r2, [r7, #15]
 80164d8:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80164da:	697b      	ldr	r3, [r7, #20]
 80164dc:	687a      	ldr	r2, [r7, #4]
 80164de:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80164e0:	697b      	ldr	r3, [r7, #20]
 80164e2:	3305      	adds	r3, #5
 80164e4:	687a      	ldr	r2, [r7, #4]
 80164e6:	b292      	uxth	r2, r2
 80164e8:	68b9      	ldr	r1, [r7, #8]
 80164ea:	4618      	mov	r0, r3
 80164ec:	f004 f937 	bl	801a75e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80164f0:	7bfb      	ldrb	r3, [r7, #15]
 80164f2:	4618      	mov	r0, r3
 80164f4:	f7ff ff8e 	bl	8016414 <IsSticky>
 80164f8:	4603      	mov	r3, r0
 80164fa:	461a      	mov	r2, r3
 80164fc:	697b      	ldr	r3, [r7, #20]
 80164fe:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8016500:	7bfb      	ldrb	r3, [r7, #15]
 8016502:	4618      	mov	r0, r3
 8016504:	f7ff ffaa 	bl	801645c <IsConfirmationRequired>
 8016508:	4603      	mov	r3, r0
 801650a:	461a      	mov	r2, r3
 801650c:	697b      	ldr	r3, [r7, #20]
 801650e:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8016510:	4b06      	ldr	r3, [pc, #24]	; (801652c <LoRaMacCommandsAddCmd+0x98>)
 8016512:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	4413      	add	r3, r2
 801651a:	3301      	adds	r3, #1
 801651c:	4a03      	ldr	r2, [pc, #12]	; (801652c <LoRaMacCommandsAddCmd+0x98>)
 801651e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8016522:	2300      	movs	r3, #0
}
 8016524:	4618      	mov	r0, r3
 8016526:	3718      	adds	r7, #24
 8016528:	46bd      	mov	sp, r7
 801652a:	bd80      	pop	{r7, pc}
 801652c:	200019ac 	.word	0x200019ac

08016530 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b082      	sub	sp, #8
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d101      	bne.n	8016542 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801653e:	2301      	movs	r3, #1
 8016540:	e021      	b.n	8016586 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8016542:	6879      	ldr	r1, [r7, #4]
 8016544:	4812      	ldr	r0, [pc, #72]	; (8016590 <LoRaMacCommandsRemoveCmd+0x60>)
 8016546:	f7ff ff32 	bl	80163ae <LinkedListRemove>
 801654a:	4603      	mov	r3, r0
 801654c:	f083 0301 	eor.w	r3, r3, #1
 8016550:	b2db      	uxtb	r3, r3
 8016552:	2b00      	cmp	r3, #0
 8016554:	d001      	beq.n	801655a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8016556:	2303      	movs	r3, #3
 8016558:	e015      	b.n	8016586 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801655a:	4b0d      	ldr	r3, [pc, #52]	; (8016590 <LoRaMacCommandsRemoveCmd+0x60>)
 801655c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	689b      	ldr	r3, [r3, #8]
 8016564:	1ad3      	subs	r3, r2, r3
 8016566:	3b01      	subs	r3, #1
 8016568:	4a09      	ldr	r2, [pc, #36]	; (8016590 <LoRaMacCommandsRemoveCmd+0x60>)
 801656a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	f7ff fea4 	bl	80162bc <FreeMacCommandSlot>
 8016574:	4603      	mov	r3, r0
 8016576:	f083 0301 	eor.w	r3, r3, #1
 801657a:	b2db      	uxtb	r3, r3
 801657c:	2b00      	cmp	r3, #0
 801657e:	d001      	beq.n	8016584 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8016580:	2305      	movs	r3, #5
 8016582:	e000      	b.n	8016586 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8016584:	2300      	movs	r3, #0
}
 8016586:	4618      	mov	r0, r3
 8016588:	3708      	adds	r7, #8
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}
 801658e:	bf00      	nop
 8016590:	200019ac 	.word	0x200019ac

08016594 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8016594:	b480      	push	{r7}
 8016596:	b085      	sub	sp, #20
 8016598:	af00      	add	r7, sp, #0
 801659a:	4603      	mov	r3, r0
 801659c:	6039      	str	r1, [r7, #0]
 801659e:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80165a0:	4b0e      	ldr	r3, [pc, #56]	; (80165dc <LoRaMacCommandsGetCmd+0x48>)
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80165a6:	e002      	b.n	80165ae <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d004      	beq.n	80165be <LoRaMacCommandsGetCmd+0x2a>
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	791b      	ldrb	r3, [r3, #4]
 80165b8:	79fa      	ldrb	r2, [r7, #7]
 80165ba:	429a      	cmp	r2, r3
 80165bc:	d1f4      	bne.n	80165a8 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 80165be:	683b      	ldr	r3, [r7, #0]
 80165c0:	68fa      	ldr	r2, [r7, #12]
 80165c2:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d101      	bne.n	80165ce <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80165ca:	2303      	movs	r3, #3
 80165cc:	e000      	b.n	80165d0 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 80165ce:	2300      	movs	r3, #0
}
 80165d0:	4618      	mov	r0, r3
 80165d2:	3714      	adds	r7, #20
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bc80      	pop	{r7}
 80165d8:	4770      	bx	lr
 80165da:	bf00      	nop
 80165dc:	200019ac 	.word	0x200019ac

080165e0 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b082      	sub	sp, #8
 80165e4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80165e6:	4b0f      	ldr	r3, [pc, #60]	; (8016624 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80165ec:	e012      	b.n	8016614 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	7b1b      	ldrb	r3, [r3, #12]
 80165f2:	f083 0301 	eor.w	r3, r3, #1
 80165f6:	b2db      	uxtb	r3, r3
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d008      	beq.n	801660e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f7ff ff94 	bl	8016530 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8016608:	683b      	ldr	r3, [r7, #0]
 801660a:	607b      	str	r3, [r7, #4]
 801660c:	e002      	b.n	8016614 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d1e9      	bne.n	80165ee <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801661a:	2300      	movs	r3, #0
}
 801661c:	4618      	mov	r0, r3
 801661e:	3708      	adds	r7, #8
 8016620:	46bd      	mov	sp, r7
 8016622:	bd80      	pop	{r7, pc}
 8016624:	200019ac 	.word	0x200019ac

08016628 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b082      	sub	sp, #8
 801662c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801662e:	4b13      	ldr	r3, [pc, #76]	; (801667c <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8016634:	e01a      	b.n	801666c <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	791b      	ldrb	r3, [r3, #4]
 8016640:	4618      	mov	r0, r3
 8016642:	f7ff fee7 	bl	8016414 <IsSticky>
 8016646:	4603      	mov	r3, r0
 8016648:	2b00      	cmp	r3, #0
 801664a:	d00d      	beq.n	8016668 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	791b      	ldrb	r3, [r3, #4]
 8016650:	4618      	mov	r0, r3
 8016652:	f7ff ff03 	bl	801645c <IsConfirmationRequired>
 8016656:	4603      	mov	r3, r0
 8016658:	f083 0301 	eor.w	r3, r3, #1
 801665c:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 801665e:	2b00      	cmp	r3, #0
 8016660:	d002      	beq.n	8016668 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f7ff ff64 	bl	8016530 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8016668:	683b      	ldr	r3, [r7, #0]
 801666a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d1e1      	bne.n	8016636 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8016672:	2300      	movs	r3, #0
}
 8016674:	4618      	mov	r0, r3
 8016676:	3708      	adds	r7, #8
 8016678:	46bd      	mov	sp, r7
 801667a:	bd80      	pop	{r7, pc}
 801667c:	200019ac 	.word	0x200019ac

08016680 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8016680:	b480      	push	{r7}
 8016682:	b083      	sub	sp, #12
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d101      	bne.n	8016692 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801668e:	2301      	movs	r3, #1
 8016690:	e005      	b.n	801669e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8016692:	4b05      	ldr	r3, [pc, #20]	; (80166a8 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8016694:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 801669c:	2300      	movs	r3, #0
}
 801669e:	4618      	mov	r0, r3
 80166a0:	370c      	adds	r7, #12
 80166a2:	46bd      	mov	sp, r7
 80166a4:	bc80      	pop	{r7}
 80166a6:	4770      	bx	lr
 80166a8:	200019ac 	.word	0x200019ac

080166ac <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b088      	sub	sp, #32
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	60f8      	str	r0, [r7, #12]
 80166b4:	60b9      	str	r1, [r7, #8]
 80166b6:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80166b8:	4b25      	ldr	r3, [pc, #148]	; (8016750 <LoRaMacCommandsSerializeCmds+0xa4>)
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80166be:	2300      	movs	r3, #0
 80166c0:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d002      	beq.n	80166ce <LoRaMacCommandsSerializeCmds+0x22>
 80166c8:	68bb      	ldr	r3, [r7, #8]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d126      	bne.n	801671c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80166ce:	2301      	movs	r3, #1
 80166d0:	e039      	b.n	8016746 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80166d2:	7efb      	ldrb	r3, [r7, #27]
 80166d4:	68fa      	ldr	r2, [r7, #12]
 80166d6:	1ad2      	subs	r2, r2, r3
 80166d8:	69fb      	ldr	r3, [r7, #28]
 80166da:	689b      	ldr	r3, [r3, #8]
 80166dc:	3301      	adds	r3, #1
 80166de:	429a      	cmp	r2, r3
 80166e0:	d320      	bcc.n	8016724 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80166e2:	7efb      	ldrb	r3, [r7, #27]
 80166e4:	1c5a      	adds	r2, r3, #1
 80166e6:	76fa      	strb	r2, [r7, #27]
 80166e8:	461a      	mov	r2, r3
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	4413      	add	r3, r2
 80166ee:	69fa      	ldr	r2, [r7, #28]
 80166f0:	7912      	ldrb	r2, [r2, #4]
 80166f2:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80166f4:	7efb      	ldrb	r3, [r7, #27]
 80166f6:	687a      	ldr	r2, [r7, #4]
 80166f8:	18d0      	adds	r0, r2, r3
 80166fa:	69fb      	ldr	r3, [r7, #28]
 80166fc:	1d59      	adds	r1, r3, #5
 80166fe:	69fb      	ldr	r3, [r7, #28]
 8016700:	689b      	ldr	r3, [r3, #8]
 8016702:	b29b      	uxth	r3, r3
 8016704:	461a      	mov	r2, r3
 8016706:	f004 f82a 	bl	801a75e <memcpy1>
            itr += curElement->PayloadSize;
 801670a:	69fb      	ldr	r3, [r7, #28]
 801670c:	689b      	ldr	r3, [r3, #8]
 801670e:	b2da      	uxtb	r2, r3
 8016710:	7efb      	ldrb	r3, [r7, #27]
 8016712:	4413      	add	r3, r2
 8016714:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8016716:	69fb      	ldr	r3, [r7, #28]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801671c:	69fb      	ldr	r3, [r7, #28]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d1d7      	bne.n	80166d2 <LoRaMacCommandsSerializeCmds+0x26>
 8016722:	e009      	b.n	8016738 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8016724:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8016726:	e007      	b.n	8016738 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8016728:	69fb      	ldr	r3, [r7, #28]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801672e:	69f8      	ldr	r0, [r7, #28]
 8016730:	f7ff fefe 	bl	8016530 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8016734:	697b      	ldr	r3, [r7, #20]
 8016736:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8016738:	69fb      	ldr	r3, [r7, #28]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d1f4      	bne.n	8016728 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801673e:	68b8      	ldr	r0, [r7, #8]
 8016740:	f7ff ff9e 	bl	8016680 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8016744:	2300      	movs	r3, #0
}
 8016746:	4618      	mov	r0, r3
 8016748:	3720      	adds	r7, #32
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}
 801674e:	bf00      	nop
 8016750:	200019ac 	.word	0x200019ac

08016754 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8016754:	b480      	push	{r7}
 8016756:	b085      	sub	sp, #20
 8016758:	af00      	add	r7, sp, #0
 801675a:	4603      	mov	r3, r0
 801675c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801675e:	2300      	movs	r3, #0
 8016760:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8016762:	79fb      	ldrb	r3, [r7, #7]
 8016764:	3b02      	subs	r3, #2
 8016766:	2b11      	cmp	r3, #17
 8016768:	d850      	bhi.n	801680c <LoRaMacCommandsGetCmdSize+0xb8>
 801676a:	a201      	add	r2, pc, #4	; (adr r2, 8016770 <LoRaMacCommandsGetCmdSize+0x1c>)
 801676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016770:	080167b9 	.word	0x080167b9
 8016774:	080167bf 	.word	0x080167bf
 8016778:	080167c5 	.word	0x080167c5
 801677c:	080167cb 	.word	0x080167cb
 8016780:	080167d1 	.word	0x080167d1
 8016784:	080167d7 	.word	0x080167d7
 8016788:	080167dd 	.word	0x080167dd
 801678c:	080167e3 	.word	0x080167e3
 8016790:	080167e9 	.word	0x080167e9
 8016794:	0801680d 	.word	0x0801680d
 8016798:	0801680d 	.word	0x0801680d
 801679c:	080167ef 	.word	0x080167ef
 80167a0:	0801680d 	.word	0x0801680d
 80167a4:	0801680d 	.word	0x0801680d
 80167a8:	080167f5 	.word	0x080167f5
 80167ac:	080167fb 	.word	0x080167fb
 80167b0:	08016801 	.word	0x08016801
 80167b4:	08016807 	.word	0x08016807
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80167b8:	2303      	movs	r3, #3
 80167ba:	73fb      	strb	r3, [r7, #15]
            break;
 80167bc:	e027      	b.n	801680e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80167be:	2305      	movs	r3, #5
 80167c0:	73fb      	strb	r3, [r7, #15]
            break;
 80167c2:	e024      	b.n	801680e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80167c4:	2302      	movs	r3, #2
 80167c6:	73fb      	strb	r3, [r7, #15]
            break;
 80167c8:	e021      	b.n	801680e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80167ca:	2305      	movs	r3, #5
 80167cc:	73fb      	strb	r3, [r7, #15]
            break;
 80167ce:	e01e      	b.n	801680e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80167d0:	2301      	movs	r3, #1
 80167d2:	73fb      	strb	r3, [r7, #15]
            break;
 80167d4:	e01b      	b.n	801680e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80167d6:	2306      	movs	r3, #6
 80167d8:	73fb      	strb	r3, [r7, #15]
            break;
 80167da:	e018      	b.n	801680e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80167dc:	2302      	movs	r3, #2
 80167de:	73fb      	strb	r3, [r7, #15]
            break;
 80167e0:	e015      	b.n	801680e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80167e2:	2302      	movs	r3, #2
 80167e4:	73fb      	strb	r3, [r7, #15]
            break;
 80167e6:	e012      	b.n	801680e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80167e8:	2305      	movs	r3, #5
 80167ea:	73fb      	strb	r3, [r7, #15]
            break;
 80167ec:	e00f      	b.n	801680e <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80167ee:	2306      	movs	r3, #6
 80167f0:	73fb      	strb	r3, [r7, #15]
            break;
 80167f2:	e00c      	b.n	801680e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80167f4:	2301      	movs	r3, #1
 80167f6:	73fb      	strb	r3, [r7, #15]
            break;
 80167f8:	e009      	b.n	801680e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80167fa:	2305      	movs	r3, #5
 80167fc:	73fb      	strb	r3, [r7, #15]
            break;
 80167fe:	e006      	b.n	801680e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8016800:	2304      	movs	r3, #4
 8016802:	73fb      	strb	r3, [r7, #15]
            break;
 8016804:	e003      	b.n	801680e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8016806:	2304      	movs	r3, #4
 8016808:	73fb      	strb	r3, [r7, #15]
            break;
 801680a:	e000      	b.n	801680e <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801680c:	bf00      	nop
        }
    }
    return cidSize;
 801680e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016810:	4618      	mov	r0, r3
 8016812:	3714      	adds	r7, #20
 8016814:	46bd      	mov	sp, r7
 8016816:	bc80      	pop	{r7}
 8016818:	4770      	bx	lr
 801681a:	bf00      	nop

0801681c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801681c:	b480      	push	{r7}
 801681e:	b083      	sub	sp, #12
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	4a07      	ldr	r2, [pc, #28]	; (8016844 <IncreaseBufferPointer+0x28>)
 8016828:	4293      	cmp	r3, r2
 801682a:	d102      	bne.n	8016832 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801682c:	4b06      	ldr	r3, [pc, #24]	; (8016848 <IncreaseBufferPointer+0x2c>)
 801682e:	607b      	str	r3, [r7, #4]
 8016830:	e002      	b.n	8016838 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	3304      	adds	r3, #4
 8016836:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8016838:	687b      	ldr	r3, [r7, #4]
}
 801683a:	4618      	mov	r0, r3
 801683c:	370c      	adds	r7, #12
 801683e:	46bd      	mov	sp, r7
 8016840:	bc80      	pop	{r7}
 8016842:	4770      	bx	lr
 8016844:	20001bd4 	.word	0x20001bd4
 8016848:	20001bc4 	.word	0x20001bc4

0801684c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801684c:	b480      	push	{r7}
 801684e:	b083      	sub	sp, #12
 8016850:	af00      	add	r7, sp, #0
 8016852:	4603      	mov	r3, r0
 8016854:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8016856:	79fb      	ldrb	r3, [r7, #7]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d101      	bne.n	8016860 <IsListEmpty+0x14>
    {
        return true;
 801685c:	2301      	movs	r3, #1
 801685e:	e000      	b.n	8016862 <IsListEmpty+0x16>
    }
    return false;
 8016860:	2300      	movs	r3, #0
}
 8016862:	4618      	mov	r0, r3
 8016864:	370c      	adds	r7, #12
 8016866:	46bd      	mov	sp, r7
 8016868:	bc80      	pop	{r7}
 801686a:	4770      	bx	lr

0801686c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801686c:	b480      	push	{r7}
 801686e:	b083      	sub	sp, #12
 8016870:	af00      	add	r7, sp, #0
 8016872:	4603      	mov	r3, r0
 8016874:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8016876:	79fb      	ldrb	r3, [r7, #7]
 8016878:	2b04      	cmp	r3, #4
 801687a:	d901      	bls.n	8016880 <IsListFull+0x14>
    {
        return true;
 801687c:	2301      	movs	r3, #1
 801687e:	e000      	b.n	8016882 <IsListFull+0x16>
    }
    return false;
 8016880:	2300      	movs	r3, #0
}
 8016882:	4618      	mov	r0, r3
 8016884:	370c      	adds	r7, #12
 8016886:	46bd      	mov	sp, r7
 8016888:	bc80      	pop	{r7}
 801688a:	4770      	bx	lr

0801688c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b086      	sub	sp, #24
 8016890:	af00      	add	r7, sp, #0
 8016892:	4603      	mov	r3, r0
 8016894:	60b9      	str	r1, [r7, #8]
 8016896:	607a      	str	r2, [r7, #4]
 8016898:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801689a:	68bb      	ldr	r3, [r7, #8]
 801689c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801689e:	4b13      	ldr	r3, [pc, #76]	; (80168ec <GetElement+0x60>)
 80168a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80168a4:	4618      	mov	r0, r3
 80168a6:	f7ff ffd1 	bl	801684c <IsListEmpty>
 80168aa:	4603      	mov	r3, r0
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d001      	beq.n	80168b4 <GetElement+0x28>
    {
        return NULL;
 80168b0:	2300      	movs	r3, #0
 80168b2:	e017      	b.n	80168e4 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80168b4:	2300      	movs	r3, #0
 80168b6:	74fb      	strb	r3, [r7, #19]
 80168b8:	e00d      	b.n	80168d6 <GetElement+0x4a>
    {
        if( element->Request == request )
 80168ba:	697b      	ldr	r3, [r7, #20]
 80168bc:	781b      	ldrb	r3, [r3, #0]
 80168be:	7bfa      	ldrb	r2, [r7, #15]
 80168c0:	429a      	cmp	r2, r3
 80168c2:	d101      	bne.n	80168c8 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80168c4:	697b      	ldr	r3, [r7, #20]
 80168c6:	e00d      	b.n	80168e4 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80168c8:	6978      	ldr	r0, [r7, #20]
 80168ca:	f7ff ffa7 	bl	801681c <IncreaseBufferPointer>
 80168ce:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80168d0:	7cfb      	ldrb	r3, [r7, #19]
 80168d2:	3301      	adds	r3, #1
 80168d4:	74fb      	strb	r3, [r7, #19]
 80168d6:	4b05      	ldr	r3, [pc, #20]	; (80168ec <GetElement+0x60>)
 80168d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80168dc:	7cfa      	ldrb	r2, [r7, #19]
 80168de:	429a      	cmp	r2, r3
 80168e0:	d3eb      	bcc.n	80168ba <GetElement+0x2e>
    }

    return NULL;
 80168e2:	2300      	movs	r3, #0
}
 80168e4:	4618      	mov	r0, r3
 80168e6:	3718      	adds	r7, #24
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bd80      	pop	{r7, pc}
 80168ec:	20001bb8 	.word	0x20001bb8

080168f0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b082      	sub	sp, #8
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80168f8:	4a0c      	ldr	r2, [pc, #48]	; (801692c <LoRaMacConfirmQueueInit+0x3c>)
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80168fe:	4b0b      	ldr	r3, [pc, #44]	; (801692c <LoRaMacConfirmQueueInit+0x3c>)
 8016900:	2200      	movs	r2, #0
 8016902:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8016906:	4b09      	ldr	r3, [pc, #36]	; (801692c <LoRaMacConfirmQueueInit+0x3c>)
 8016908:	4a09      	ldr	r2, [pc, #36]	; (8016930 <LoRaMacConfirmQueueInit+0x40>)
 801690a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801690c:	4b07      	ldr	r3, [pc, #28]	; (801692c <LoRaMacConfirmQueueInit+0x3c>)
 801690e:	4a08      	ldr	r2, [pc, #32]	; (8016930 <LoRaMacConfirmQueueInit+0x40>)
 8016910:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8016912:	2214      	movs	r2, #20
 8016914:	21ff      	movs	r1, #255	; 0xff
 8016916:	4806      	ldr	r0, [pc, #24]	; (8016930 <LoRaMacConfirmQueueInit+0x40>)
 8016918:	f003 ff5c 	bl	801a7d4 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801691c:	4b03      	ldr	r3, [pc, #12]	; (801692c <LoRaMacConfirmQueueInit+0x3c>)
 801691e:	2201      	movs	r2, #1
 8016920:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8016924:	bf00      	nop
 8016926:	3708      	adds	r7, #8
 8016928:	46bd      	mov	sp, r7
 801692a:	bd80      	pop	{r7, pc}
 801692c:	20001bb8 	.word	0x20001bb8
 8016930:	20001bc4 	.word	0x20001bc4

08016934 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b082      	sub	sp, #8
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801693c:	4b19      	ldr	r3, [pc, #100]	; (80169a4 <LoRaMacConfirmQueueAdd+0x70>)
 801693e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016942:	4618      	mov	r0, r3
 8016944:	f7ff ff92 	bl	801686c <IsListFull>
 8016948:	4603      	mov	r3, r0
 801694a:	2b00      	cmp	r3, #0
 801694c:	d001      	beq.n	8016952 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801694e:	2300      	movs	r3, #0
 8016950:	e024      	b.n	801699c <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8016952:	4b14      	ldr	r3, [pc, #80]	; (80169a4 <LoRaMacConfirmQueueAdd+0x70>)
 8016954:	689b      	ldr	r3, [r3, #8]
 8016956:	687a      	ldr	r2, [r7, #4]
 8016958:	7812      	ldrb	r2, [r2, #0]
 801695a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801695c:	4b11      	ldr	r3, [pc, #68]	; (80169a4 <LoRaMacConfirmQueueAdd+0x70>)
 801695e:	689b      	ldr	r3, [r3, #8]
 8016960:	687a      	ldr	r2, [r7, #4]
 8016962:	7852      	ldrb	r2, [r2, #1]
 8016964:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8016966:	4b0f      	ldr	r3, [pc, #60]	; (80169a4 <LoRaMacConfirmQueueAdd+0x70>)
 8016968:	689b      	ldr	r3, [r3, #8]
 801696a:	687a      	ldr	r2, [r7, #4]
 801696c:	78d2      	ldrb	r2, [r2, #3]
 801696e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8016970:	4b0c      	ldr	r3, [pc, #48]	; (80169a4 <LoRaMacConfirmQueueAdd+0x70>)
 8016972:	689b      	ldr	r3, [r3, #8]
 8016974:	687a      	ldr	r2, [r7, #4]
 8016976:	7892      	ldrb	r2, [r2, #2]
 8016978:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801697a:	4b0a      	ldr	r3, [pc, #40]	; (80169a4 <LoRaMacConfirmQueueAdd+0x70>)
 801697c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016980:	3301      	adds	r3, #1
 8016982:	b2da      	uxtb	r2, r3
 8016984:	4b07      	ldr	r3, [pc, #28]	; (80169a4 <LoRaMacConfirmQueueAdd+0x70>)
 8016986:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801698a:	4b06      	ldr	r3, [pc, #24]	; (80169a4 <LoRaMacConfirmQueueAdd+0x70>)
 801698c:	689b      	ldr	r3, [r3, #8]
 801698e:	4618      	mov	r0, r3
 8016990:	f7ff ff44 	bl	801681c <IncreaseBufferPointer>
 8016994:	4603      	mov	r3, r0
 8016996:	4a03      	ldr	r2, [pc, #12]	; (80169a4 <LoRaMacConfirmQueueAdd+0x70>)
 8016998:	6093      	str	r3, [r2, #8]

    return true;
 801699a:	2301      	movs	r3, #1
}
 801699c:	4618      	mov	r0, r3
 801699e:	3708      	adds	r7, #8
 80169a0:	46bd      	mov	sp, r7
 80169a2:	bd80      	pop	{r7, pc}
 80169a4:	20001bb8 	.word	0x20001bb8

080169a8 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80169ac:	4b0e      	ldr	r3, [pc, #56]	; (80169e8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80169ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80169b2:	4618      	mov	r0, r3
 80169b4:	f7ff ff4a 	bl	801684c <IsListEmpty>
 80169b8:	4603      	mov	r3, r0
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d001      	beq.n	80169c2 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 80169be:	2300      	movs	r3, #0
 80169c0:	e010      	b.n	80169e4 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80169c2:	4b09      	ldr	r3, [pc, #36]	; (80169e8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80169c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80169c8:	3b01      	subs	r3, #1
 80169ca:	b2da      	uxtb	r2, r3
 80169cc:	4b06      	ldr	r3, [pc, #24]	; (80169e8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80169ce:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80169d2:	4b05      	ldr	r3, [pc, #20]	; (80169e8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80169d4:	685b      	ldr	r3, [r3, #4]
 80169d6:	4618      	mov	r0, r3
 80169d8:	f7ff ff20 	bl	801681c <IncreaseBufferPointer>
 80169dc:	4603      	mov	r3, r0
 80169de:	4a02      	ldr	r2, [pc, #8]	; (80169e8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80169e0:	6053      	str	r3, [r2, #4]

    return true;
 80169e2:	2301      	movs	r3, #1
}
 80169e4:	4618      	mov	r0, r3
 80169e6:	bd80      	pop	{r7, pc}
 80169e8:	20001bb8 	.word	0x20001bb8

080169ec <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b084      	sub	sp, #16
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	4603      	mov	r3, r0
 80169f4:	460a      	mov	r2, r1
 80169f6:	71fb      	strb	r3, [r7, #7]
 80169f8:	4613      	mov	r3, r2
 80169fa:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80169fc:	2300      	movs	r3, #0
 80169fe:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016a00:	4b10      	ldr	r3, [pc, #64]	; (8016a44 <LoRaMacConfirmQueueSetStatus+0x58>)
 8016a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016a06:	4618      	mov	r0, r3
 8016a08:	f7ff ff20 	bl	801684c <IsListEmpty>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	f083 0301 	eor.w	r3, r3, #1
 8016a12:	b2db      	uxtb	r3, r3
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d011      	beq.n	8016a3c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8016a18:	4b0a      	ldr	r3, [pc, #40]	; (8016a44 <LoRaMacConfirmQueueSetStatus+0x58>)
 8016a1a:	6859      	ldr	r1, [r3, #4]
 8016a1c:	4b09      	ldr	r3, [pc, #36]	; (8016a44 <LoRaMacConfirmQueueSetStatus+0x58>)
 8016a1e:	689a      	ldr	r2, [r3, #8]
 8016a20:	79bb      	ldrb	r3, [r7, #6]
 8016a22:	4618      	mov	r0, r3
 8016a24:	f7ff ff32 	bl	801688c <GetElement>
 8016a28:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d005      	beq.n	8016a3c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	79fa      	ldrb	r2, [r7, #7]
 8016a34:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	2201      	movs	r2, #1
 8016a3a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8016a3c:	bf00      	nop
 8016a3e:	3710      	adds	r7, #16
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}
 8016a44:	20001bb8 	.word	0x20001bb8

08016a48 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b084      	sub	sp, #16
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	4603      	mov	r3, r0
 8016a50:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8016a52:	2300      	movs	r3, #0
 8016a54:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016a56:	4b10      	ldr	r3, [pc, #64]	; (8016a98 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	f7ff fef5 	bl	801684c <IsListEmpty>
 8016a62:	4603      	mov	r3, r0
 8016a64:	f083 0301 	eor.w	r3, r3, #1
 8016a68:	b2db      	uxtb	r3, r3
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d00e      	beq.n	8016a8c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8016a6e:	4b0a      	ldr	r3, [pc, #40]	; (8016a98 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016a70:	6859      	ldr	r1, [r3, #4]
 8016a72:	4b09      	ldr	r3, [pc, #36]	; (8016a98 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016a74:	689a      	ldr	r2, [r3, #8]
 8016a76:	79fb      	ldrb	r3, [r7, #7]
 8016a78:	4618      	mov	r0, r3
 8016a7a:	f7ff ff07 	bl	801688c <GetElement>
 8016a7e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d002      	beq.n	8016a8c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	785b      	ldrb	r3, [r3, #1]
 8016a8a:	e000      	b.n	8016a8e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016a8c:	2301      	movs	r3, #1
}
 8016a8e:	4618      	mov	r0, r3
 8016a90:	3710      	adds	r7, #16
 8016a92:	46bd      	mov	sp, r7
 8016a94:	bd80      	pop	{r7, pc}
 8016a96:	bf00      	nop
 8016a98:	20001bb8 	.word	0x20001bb8

08016a9c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b084      	sub	sp, #16
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8016aa6:	4b16      	ldr	r3, [pc, #88]	; (8016b00 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016aa8:	685b      	ldr	r3, [r3, #4]
 8016aaa:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8016aac:	4a14      	ldr	r2, [pc, #80]	; (8016b00 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016aae:	79fb      	ldrb	r3, [r7, #7]
 8016ab0:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016ab4:	4b12      	ldr	r3, [pc, #72]	; (8016b00 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7ff fec6 	bl	801684c <IsListEmpty>
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	f083 0301 	eor.w	r3, r3, #1
 8016ac6:	b2db      	uxtb	r3, r3
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d015      	beq.n	8016af8 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	79fa      	ldrb	r2, [r7, #7]
 8016ad0:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	78db      	ldrb	r3, [r3, #3]
 8016ad6:	f083 0301 	eor.w	r3, r3, #1
 8016ada:	b2db      	uxtb	r3, r3
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d002      	beq.n	8016ae6 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	2201      	movs	r2, #1
 8016ae4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8016ae6:	68f8      	ldr	r0, [r7, #12]
 8016ae8:	f7ff fe98 	bl	801681c <IncreaseBufferPointer>
 8016aec:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8016aee:	4b04      	ldr	r3, [pc, #16]	; (8016b00 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016af0:	689b      	ldr	r3, [r3, #8]
 8016af2:	68fa      	ldr	r2, [r7, #12]
 8016af4:	429a      	cmp	r2, r3
 8016af6:	d1e9      	bne.n	8016acc <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8016af8:	bf00      	nop
 8016afa:	3710      	adds	r7, #16
 8016afc:	46bd      	mov	sp, r7
 8016afe:	bd80      	pop	{r7, pc}
 8016b00:	20001bb8 	.word	0x20001bb8

08016b04 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b082      	sub	sp, #8
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8016b0e:	4b09      	ldr	r3, [pc, #36]	; (8016b34 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8016b10:	6859      	ldr	r1, [r3, #4]
 8016b12:	4b08      	ldr	r3, [pc, #32]	; (8016b34 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8016b14:	689a      	ldr	r2, [r3, #8]
 8016b16:	79fb      	ldrb	r3, [r7, #7]
 8016b18:	4618      	mov	r0, r3
 8016b1a:	f7ff feb7 	bl	801688c <GetElement>
 8016b1e:	4603      	mov	r3, r0
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d001      	beq.n	8016b28 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8016b24:	2301      	movs	r3, #1
 8016b26:	e000      	b.n	8016b2a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8016b28:	2300      	movs	r3, #0
}
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	3708      	adds	r7, #8
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	bd80      	pop	{r7, pc}
 8016b32:	bf00      	nop
 8016b34:	20001bb8 	.word	0x20001bb8

08016b38 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b084      	sub	sp, #16
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016b40:	4b25      	ldr	r3, [pc, #148]	; (8016bd8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016b46:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8016b48:	2300      	movs	r3, #0
 8016b4a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8016b4c:	f107 0308 	add.w	r3, r7, #8
 8016b50:	2204      	movs	r2, #4
 8016b52:	2100      	movs	r1, #0
 8016b54:	4618      	mov	r0, r3
 8016b56:	f003 fe3d 	bl	801a7d4 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	73fb      	strb	r3, [r7, #15]
 8016b5e:	e032      	b.n	8016bc6 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8016b60:	4b1d      	ldr	r3, [pc, #116]	; (8016bd8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016b62:	685b      	ldr	r3, [r3, #4]
 8016b64:	781a      	ldrb	r2, [r3, #0]
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8016b6a:	4b1b      	ldr	r3, [pc, #108]	; (8016bd8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016b6c:	685b      	ldr	r3, [r3, #4]
 8016b6e:	785a      	ldrb	r2, [r3, #1]
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8016b74:	4b18      	ldr	r3, [pc, #96]	; (8016bd8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016b76:	685b      	ldr	r3, [r3, #4]
 8016b78:	789b      	ldrb	r3, [r3, #2]
 8016b7a:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8016b7c:	7b7b      	ldrb	r3, [r7, #13]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d005      	beq.n	8016b8e <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8016b82:	4b15      	ldr	r3, [pc, #84]	; (8016bd8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	689b      	ldr	r3, [r3, #8]
 8016b88:	6878      	ldr	r0, [r7, #4]
 8016b8a:	4798      	blx	r3
 8016b8c:	e00b      	b.n	8016ba6 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8016b8e:	4b12      	ldr	r3, [pc, #72]	; (8016bd8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016b90:	685b      	ldr	r3, [r3, #4]
 8016b92:	781b      	ldrb	r3, [r3, #0]
 8016b94:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8016b96:	4b10      	ldr	r3, [pc, #64]	; (8016bd8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016b98:	685b      	ldr	r3, [r3, #4]
 8016b9a:	785b      	ldrb	r3, [r3, #1]
 8016b9c:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8016b9e:	4b0e      	ldr	r3, [pc, #56]	; (8016bd8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016ba0:	685b      	ldr	r3, [r3, #4]
 8016ba2:	78db      	ldrb	r3, [r3, #3]
 8016ba4:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8016ba6:	f7ff feff 	bl	80169a8 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8016baa:	7b7b      	ldrb	r3, [r7, #13]
 8016bac:	f083 0301 	eor.w	r3, r3, #1
 8016bb0:	b2db      	uxtb	r3, r3
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d004      	beq.n	8016bc0 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8016bb6:	f107 0308 	add.w	r3, r7, #8
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7ff feba 	bl	8016934 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8016bc0:	7bfb      	ldrb	r3, [r7, #15]
 8016bc2:	3301      	adds	r3, #1
 8016bc4:	73fb      	strb	r3, [r7, #15]
 8016bc6:	7bfa      	ldrb	r2, [r7, #15]
 8016bc8:	7bbb      	ldrb	r3, [r7, #14]
 8016bca:	429a      	cmp	r2, r3
 8016bcc:	d3c8      	bcc.n	8016b60 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8016bce:	bf00      	nop
 8016bd0:	bf00      	nop
 8016bd2:	3710      	adds	r7, #16
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}
 8016bd8:	20001bb8 	.word	0x20001bb8

08016bdc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8016bdc:	b480      	push	{r7}
 8016bde:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016be0:	4b03      	ldr	r3, [pc, #12]	; (8016bf0 <LoRaMacConfirmQueueGetCnt+0x14>)
 8016be2:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	46bd      	mov	sp, r7
 8016bea:	bc80      	pop	{r7}
 8016bec:	4770      	bx	lr
 8016bee:	bf00      	nop
 8016bf0:	20001bb8 	.word	0x20001bb8

08016bf4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016bf8:	4b06      	ldr	r3, [pc, #24]	; (8016c14 <LoRaMacConfirmQueueIsFull+0x20>)
 8016bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f7ff fe34 	bl	801686c <IsListFull>
 8016c04:	4603      	mov	r3, r0
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d001      	beq.n	8016c0e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8016c0a:	2301      	movs	r3, #1
 8016c0c:	e000      	b.n	8016c10 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8016c0e:	2300      	movs	r3, #0
    }
}
 8016c10:	4618      	mov	r0, r3
 8016c12:	bd80      	pop	{r7, pc}
 8016c14:	20001bb8 	.word	0x20001bb8

08016c18 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b08e      	sub	sp, #56	; 0x38
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	60f8      	str	r0, [r7, #12]
 8016c20:	607b      	str	r3, [r7, #4]
 8016c22:	460b      	mov	r3, r1
 8016c24:	817b      	strh	r3, [r7, #10]
 8016c26:	4613      	mov	r3, r2
 8016c28:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d101      	bne.n	8016c34 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016c30:	2309      	movs	r3, #9
 8016c32:	e086      	b.n	8016d42 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8016c34:	2300      	movs	r3, #0
 8016c36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8016c3a:	2301      	movs	r3, #1
 8016c3c:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8016c3e:	2300      	movs	r3, #0
 8016c40:	623b      	str	r3, [r7, #32]
 8016c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016c46:	2200      	movs	r2, #0
 8016c48:	601a      	str	r2, [r3, #0]
 8016c4a:	605a      	str	r2, [r3, #4]
 8016c4c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8016c4e:	2300      	movs	r3, #0
 8016c50:	613b      	str	r3, [r7, #16]
 8016c52:	f107 0314 	add.w	r3, r7, #20
 8016c56:	2200      	movs	r2, #0
 8016c58:	601a      	str	r2, [r3, #0]
 8016c5a:	605a      	str	r2, [r3, #4]
 8016c5c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8016c5e:	2301      	movs	r3, #1
 8016c60:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8016c62:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8016c66:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	b2db      	uxtb	r3, r3
 8016c6c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	0a1b      	lsrs	r3, r3, #8
 8016c72:	b2db      	uxtb	r3, r3
 8016c74:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	0c1b      	lsrs	r3, r3, #16
 8016c7a:	b2db      	uxtb	r3, r3
 8016c7c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	0e1b      	lsrs	r3, r3, #24
 8016c82:	b2db      	uxtb	r3, r3
 8016c84:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8016c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c88:	b2db      	uxtb	r3, r3
 8016c8a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8016c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c8e:	0a1b      	lsrs	r3, r3, #8
 8016c90:	b2db      	uxtb	r3, r3
 8016c92:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8016c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c96:	0c1b      	lsrs	r3, r3, #16
 8016c98:	b2db      	uxtb	r3, r3
 8016c9a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8016c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c9e:	0e1b      	lsrs	r3, r3, #24
 8016ca0:	b2db      	uxtb	r3, r3
 8016ca2:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8016ca4:	e048      	b.n	8016d38 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8016ca6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016ca8:	b2db      	uxtb	r3, r3
 8016caa:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8016cac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016cae:	3301      	adds	r3, #1
 8016cb0:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8016cb2:	f107 0320 	add.w	r3, r7, #32
 8016cb6:	7a7a      	ldrb	r2, [r7, #9]
 8016cb8:	f107 0010 	add.w	r0, r7, #16
 8016cbc:	2110      	movs	r1, #16
 8016cbe:	f7f8 fa79 	bl	800f1b4 <SecureElementAesEncrypt>
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d001      	beq.n	8016ccc <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016cc8:	230e      	movs	r3, #14
 8016cca:	e03a      	b.n	8016d42 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016ccc:	2300      	movs	r3, #0
 8016cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016cd2:	e01e      	b.n	8016d12 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8016cd4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8016cd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016cdc:	4413      	add	r3, r2
 8016cde:	461a      	mov	r2, r3
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	4413      	add	r3, r2
 8016ce4:	7819      	ldrb	r1, [r3, #0]
 8016ce6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016cea:	3338      	adds	r3, #56	; 0x38
 8016cec:	443b      	add	r3, r7
 8016cee:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8016cf2:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8016cf6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016cfa:	4403      	add	r3, r0
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	4403      	add	r3, r0
 8016d02:	404a      	eors	r2, r1
 8016d04:	b2d2      	uxtb	r2, r2
 8016d06:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016d08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016d0c:	3301      	adds	r3, #1
 8016d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016d12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016d16:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8016d1a:	2a10      	cmp	r2, #16
 8016d1c:	bfa8      	it	ge
 8016d1e:	2210      	movge	r2, #16
 8016d20:	b212      	sxth	r2, r2
 8016d22:	4293      	cmp	r3, r2
 8016d24:	dbd6      	blt.n	8016cd4 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8016d26:	897b      	ldrh	r3, [r7, #10]
 8016d28:	3b10      	subs	r3, #16
 8016d2a:	b29b      	uxth	r3, r3
 8016d2c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8016d2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016d32:	3310      	adds	r3, #16
 8016d34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8016d38:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	dcb2      	bgt.n	8016ca6 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016d40:	2300      	movs	r3, #0
}
 8016d42:	4618      	mov	r0, r3
 8016d44:	3738      	adds	r7, #56	; 0x38
 8016d46:	46bd      	mov	sp, r7
 8016d48:	bd80      	pop	{r7, pc}

08016d4a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8016d4a:	b490      	push	{r4, r7}
 8016d4c:	b082      	sub	sp, #8
 8016d4e:	af00      	add	r7, sp, #0
 8016d50:	4604      	mov	r4, r0
 8016d52:	4608      	mov	r0, r1
 8016d54:	4611      	mov	r1, r2
 8016d56:	461a      	mov	r2, r3
 8016d58:	4623      	mov	r3, r4
 8016d5a:	80fb      	strh	r3, [r7, #6]
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	717b      	strb	r3, [r7, #5]
 8016d60:	460b      	mov	r3, r1
 8016d62:	713b      	strb	r3, [r7, #4]
 8016d64:	4613      	mov	r3, r2
 8016d66:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8016d68:	69bb      	ldr	r3, [r7, #24]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d101      	bne.n	8016d72 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016d6e:	2309      	movs	r3, #9
 8016d70:	e04e      	b.n	8016e10 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8016d72:	69bb      	ldr	r3, [r7, #24]
 8016d74:	2249      	movs	r2, #73	; 0x49
 8016d76:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8016d78:	69bb      	ldr	r3, [r7, #24]
 8016d7a:	3301      	adds	r3, #1
 8016d7c:	2200      	movs	r2, #0
 8016d7e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8016d80:	69bb      	ldr	r3, [r7, #24]
 8016d82:	3302      	adds	r3, #2
 8016d84:	2200      	movs	r2, #0
 8016d86:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8016d88:	69bb      	ldr	r3, [r7, #24]
 8016d8a:	3303      	adds	r3, #3
 8016d8c:	2200      	movs	r2, #0
 8016d8e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8016d90:	69bb      	ldr	r3, [r7, #24]
 8016d92:	3304      	adds	r3, #4
 8016d94:	2200      	movs	r2, #0
 8016d96:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8016d98:	69bb      	ldr	r3, [r7, #24]
 8016d9a:	3305      	adds	r3, #5
 8016d9c:	78fa      	ldrb	r2, [r7, #3]
 8016d9e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8016da0:	69bb      	ldr	r3, [r7, #24]
 8016da2:	3306      	adds	r3, #6
 8016da4:	693a      	ldr	r2, [r7, #16]
 8016da6:	b2d2      	uxtb	r2, r2
 8016da8:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8016daa:	693b      	ldr	r3, [r7, #16]
 8016dac:	0a1a      	lsrs	r2, r3, #8
 8016dae:	69bb      	ldr	r3, [r7, #24]
 8016db0:	3307      	adds	r3, #7
 8016db2:	b2d2      	uxtb	r2, r2
 8016db4:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8016db6:	693b      	ldr	r3, [r7, #16]
 8016db8:	0c1a      	lsrs	r2, r3, #16
 8016dba:	69bb      	ldr	r3, [r7, #24]
 8016dbc:	3308      	adds	r3, #8
 8016dbe:	b2d2      	uxtb	r2, r2
 8016dc0:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8016dc2:	693b      	ldr	r3, [r7, #16]
 8016dc4:	0e1a      	lsrs	r2, r3, #24
 8016dc6:	69bb      	ldr	r3, [r7, #24]
 8016dc8:	3309      	adds	r3, #9
 8016dca:	b2d2      	uxtb	r2, r2
 8016dcc:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8016dce:	69bb      	ldr	r3, [r7, #24]
 8016dd0:	330a      	adds	r3, #10
 8016dd2:	697a      	ldr	r2, [r7, #20]
 8016dd4:	b2d2      	uxtb	r2, r2
 8016dd6:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8016dd8:	697b      	ldr	r3, [r7, #20]
 8016dda:	0a1a      	lsrs	r2, r3, #8
 8016ddc:	69bb      	ldr	r3, [r7, #24]
 8016dde:	330b      	adds	r3, #11
 8016de0:	b2d2      	uxtb	r2, r2
 8016de2:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8016de4:	697b      	ldr	r3, [r7, #20]
 8016de6:	0c1a      	lsrs	r2, r3, #16
 8016de8:	69bb      	ldr	r3, [r7, #24]
 8016dea:	330c      	adds	r3, #12
 8016dec:	b2d2      	uxtb	r2, r2
 8016dee:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8016df0:	697b      	ldr	r3, [r7, #20]
 8016df2:	0e1a      	lsrs	r2, r3, #24
 8016df4:	69bb      	ldr	r3, [r7, #24]
 8016df6:	330d      	adds	r3, #13
 8016df8:	b2d2      	uxtb	r2, r2
 8016dfa:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8016dfc:	69bb      	ldr	r3, [r7, #24]
 8016dfe:	330e      	adds	r3, #14
 8016e00:	2200      	movs	r2, #0
 8016e02:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8016e04:	69bb      	ldr	r3, [r7, #24]
 8016e06:	330f      	adds	r3, #15
 8016e08:	88fa      	ldrh	r2, [r7, #6]
 8016e0a:	b2d2      	uxtb	r2, r2
 8016e0c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016e0e:	2300      	movs	r3, #0
}
 8016e10:	4618      	mov	r0, r3
 8016e12:	3708      	adds	r7, #8
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bc90      	pop	{r4, r7}
 8016e18:	4770      	bx	lr

08016e1a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8016e1a:	b590      	push	{r4, r7, lr}
 8016e1c:	b08b      	sub	sp, #44	; 0x2c
 8016e1e:	af04      	add	r7, sp, #16
 8016e20:	6078      	str	r0, [r7, #4]
 8016e22:	4608      	mov	r0, r1
 8016e24:	4611      	mov	r1, r2
 8016e26:	461a      	mov	r2, r3
 8016e28:	4603      	mov	r3, r0
 8016e2a:	807b      	strh	r3, [r7, #2]
 8016e2c:	460b      	mov	r3, r1
 8016e2e:	707b      	strb	r3, [r7, #1]
 8016e30:	4613      	mov	r3, r2
 8016e32:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d002      	beq.n	8016e40 <ComputeCmacB0+0x26>
 8016e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d101      	bne.n	8016e44 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016e40:	2309      	movs	r3, #9
 8016e42:	e024      	b.n	8016e8e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016e44:	887b      	ldrh	r3, [r7, #2]
 8016e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016e4a:	d901      	bls.n	8016e50 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016e4c:	230d      	movs	r3, #13
 8016e4e:	e01e      	b.n	8016e8e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016e50:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8016e54:	783a      	ldrb	r2, [r7, #0]
 8016e56:	7879      	ldrb	r1, [r7, #1]
 8016e58:	8878      	ldrh	r0, [r7, #2]
 8016e5a:	f107 0308 	add.w	r3, r7, #8
 8016e5e:	9302      	str	r3, [sp, #8]
 8016e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e62:	9301      	str	r3, [sp, #4]
 8016e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e66:	9300      	str	r3, [sp, #0]
 8016e68:	4623      	mov	r3, r4
 8016e6a:	f7ff ff6e 	bl	8016d4a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8016e6e:	887a      	ldrh	r2, [r7, #2]
 8016e70:	7879      	ldrb	r1, [r7, #1]
 8016e72:	f107 0008 	add.w	r0, r7, #8
 8016e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e78:	9300      	str	r3, [sp, #0]
 8016e7a:	460b      	mov	r3, r1
 8016e7c:	6879      	ldr	r1, [r7, #4]
 8016e7e:	f7f8 f953 	bl	800f128 <SecureElementComputeAesCmac>
 8016e82:	4603      	mov	r3, r0
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d001      	beq.n	8016e8c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016e88:	230e      	movs	r3, #14
 8016e8a:	e000      	b.n	8016e8e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016e8c:	2300      	movs	r3, #0
}
 8016e8e:	4618      	mov	r0, r3
 8016e90:	371c      	adds	r7, #28
 8016e92:	46bd      	mov	sp, r7
 8016e94:	bd90      	pop	{r4, r7, pc}

08016e96 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8016e96:	b590      	push	{r4, r7, lr}
 8016e98:	b0cd      	sub	sp, #308	; 0x134
 8016e9a:	af04      	add	r7, sp, #16
 8016e9c:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8016ea0:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8016ea4:	6020      	str	r0, [r4, #0]
 8016ea6:	460c      	mov	r4, r1
 8016ea8:	4610      	mov	r0, r2
 8016eaa:	4619      	mov	r1, r3
 8016eac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016eb0:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016eb4:	4622      	mov	r2, r4
 8016eb6:	801a      	strh	r2, [r3, #0]
 8016eb8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016ebc:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016ec0:	4602      	mov	r2, r0
 8016ec2:	701a      	strb	r2, [r3, #0]
 8016ec4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016ec8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016ecc:	460a      	mov	r2, r1
 8016ece:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8016ed0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016ed4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d101      	bne.n	8016ee2 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ede:	2309      	movs	r3, #9
 8016ee0:	e063      	b.n	8016faa <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016ee2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016ee6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016eea:	881b      	ldrh	r3, [r3, #0]
 8016eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ef0:	d901      	bls.n	8016ef6 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016ef2:	230d      	movs	r3, #13
 8016ef4:	e059      	b.n	8016faa <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8016ef6:	f107 030c 	add.w	r3, r7, #12
 8016efa:	f44f 7288 	mov.w	r2, #272	; 0x110
 8016efe:	2100      	movs	r1, #0
 8016f00:	4618      	mov	r0, r3
 8016f02:	f003 fc67 	bl	801a7d4 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016f06:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8016f0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016f0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016f12:	781a      	ldrb	r2, [r3, #0]
 8016f14:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016f18:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016f1c:	7819      	ldrb	r1, [r3, #0]
 8016f1e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016f22:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016f26:	8818      	ldrh	r0, [r3, #0]
 8016f28:	f107 030c 	add.w	r3, r7, #12
 8016f2c:	9302      	str	r3, [sp, #8]
 8016f2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016f32:	9301      	str	r3, [sp, #4]
 8016f34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016f38:	9300      	str	r3, [sp, #0]
 8016f3a:	4623      	mov	r3, r4
 8016f3c:	f7ff ff05 	bl	8016d4a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8016f40:	f107 030c 	add.w	r3, r7, #12
 8016f44:	3310      	adds	r3, #16
 8016f46:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8016f4a:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8016f4e:	8812      	ldrh	r2, [r2, #0]
 8016f50:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8016f54:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8016f58:	6809      	ldr	r1, [r1, #0]
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f003 fbff 	bl	801a75e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8016f60:	2306      	movs	r3, #6
 8016f62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8016f66:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016f6a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016f6e:	881b      	ldrh	r3, [r3, #0]
 8016f70:	3310      	adds	r3, #16
 8016f72:	4619      	mov	r1, r3
 8016f74:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016f78:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016f7c:	781b      	ldrb	r3, [r3, #0]
 8016f7e:	f107 000c 	add.w	r0, r7, #12
 8016f82:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8016f86:	f7f8 f8e9 	bl	800f15c <SecureElementVerifyAesCmac>
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016f90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d101      	bne.n	8016f9c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8016f98:	2300      	movs	r3, #0
 8016f9a:	e006      	b.n	8016faa <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8016f9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016fa0:	2b01      	cmp	r3, #1
 8016fa2:	d101      	bne.n	8016fa8 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8016fa4:	2301      	movs	r3, #1
 8016fa6:	e000      	b.n	8016faa <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016fa8:	230e      	movs	r3, #14
}
 8016faa:	4618      	mov	r0, r3
 8016fac:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	bd90      	pop	{r4, r7, pc}

08016fb4 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8016fb4:	b480      	push	{r7}
 8016fb6:	b085      	sub	sp, #20
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	4603      	mov	r3, r0
 8016fbc:	6039      	str	r1, [r7, #0]
 8016fbe:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	73fb      	strb	r3, [r7, #15]
 8016fc4:	e011      	b.n	8016fea <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8016fc6:	7bfb      	ldrb	r3, [r7, #15]
 8016fc8:	4a0c      	ldr	r2, [pc, #48]	; (8016ffc <GetKeyAddrItem+0x48>)
 8016fca:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016fce:	79fa      	ldrb	r2, [r7, #7]
 8016fd0:	429a      	cmp	r2, r3
 8016fd2:	d107      	bne.n	8016fe4 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8016fd4:	7bfb      	ldrb	r3, [r7, #15]
 8016fd6:	009b      	lsls	r3, r3, #2
 8016fd8:	4a08      	ldr	r2, [pc, #32]	; (8016ffc <GetKeyAddrItem+0x48>)
 8016fda:	441a      	add	r2, r3
 8016fdc:	683b      	ldr	r3, [r7, #0]
 8016fde:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	e006      	b.n	8016ff2 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016fe4:	7bfb      	ldrb	r3, [r7, #15]
 8016fe6:	3301      	adds	r3, #1
 8016fe8:	73fb      	strb	r3, [r7, #15]
 8016fea:	7bfb      	ldrb	r3, [r7, #15]
 8016fec:	2b01      	cmp	r3, #1
 8016fee:	d9ea      	bls.n	8016fc6 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8016ff0:	230b      	movs	r3, #11
}
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	3714      	adds	r7, #20
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	bc80      	pop	{r7}
 8016ffa:	4770      	bx	lr
 8016ffc:	20000110 	.word	0x20000110

08017000 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b088      	sub	sp, #32
 8017004:	af00      	add	r7, sp, #0
 8017006:	60b9      	str	r1, [r7, #8]
 8017008:	607a      	str	r2, [r7, #4]
 801700a:	461a      	mov	r2, r3
 801700c:	4603      	mov	r3, r0
 801700e:	73fb      	strb	r3, [r7, #15]
 8017010:	4613      	mov	r3, r2
 8017012:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8017014:	2300      	movs	r3, #0
 8017016:	613b      	str	r3, [r7, #16]
 8017018:	f107 0314 	add.w	r3, r7, #20
 801701c:	2200      	movs	r2, #0
 801701e:	601a      	str	r2, [r3, #0]
 8017020:	605a      	str	r2, [r3, #4]
 8017022:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8017024:	7bfb      	ldrb	r3, [r7, #15]
 8017026:	2b08      	cmp	r3, #8
 8017028:	d002      	beq.n	8017030 <DeriveSessionKey10x+0x30>
 801702a:	2b09      	cmp	r3, #9
 801702c:	d003      	beq.n	8017036 <DeriveSessionKey10x+0x36>
 801702e:	e005      	b.n	801703c <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8017030:	2301      	movs	r3, #1
 8017032:	743b      	strb	r3, [r7, #16]
            break;
 8017034:	e004      	b.n	8017040 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8017036:	2302      	movs	r3, #2
 8017038:	743b      	strb	r3, [r7, #16]
            break;
 801703a:	e001      	b.n	8017040 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801703c:	230a      	movs	r3, #10
 801703e:	e02a      	b.n	8017096 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8017040:	68bb      	ldr	r3, [r7, #8]
 8017042:	b2db      	uxtb	r3, r3
 8017044:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8017046:	68bb      	ldr	r3, [r7, #8]
 8017048:	0a1b      	lsrs	r3, r3, #8
 801704a:	b2db      	uxtb	r3, r3
 801704c:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801704e:	68bb      	ldr	r3, [r7, #8]
 8017050:	0c1b      	lsrs	r3, r3, #16
 8017052:	b2db      	uxtb	r3, r3
 8017054:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	b2db      	uxtb	r3, r3
 801705a:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	0a1b      	lsrs	r3, r3, #8
 8017060:	b2db      	uxtb	r3, r3
 8017062:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	0c1b      	lsrs	r3, r3, #16
 8017068:	b2db      	uxtb	r3, r3
 801706a:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801706c:	89bb      	ldrh	r3, [r7, #12]
 801706e:	b2db      	uxtb	r3, r3
 8017070:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8017072:	89bb      	ldrh	r3, [r7, #12]
 8017074:	0a1b      	lsrs	r3, r3, #8
 8017076:	b29b      	uxth	r3, r3
 8017078:	b2db      	uxtb	r3, r3
 801707a:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801707c:	7bfa      	ldrb	r2, [r7, #15]
 801707e:	f107 0310 	add.w	r3, r7, #16
 8017082:	2101      	movs	r1, #1
 8017084:	4618      	mov	r0, r3
 8017086:	f7f8 f915 	bl	800f2b4 <SecureElementDeriveAndStoreKey>
 801708a:	4603      	mov	r3, r0
 801708c:	2b00      	cmp	r3, #0
 801708e:	d001      	beq.n	8017094 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017090:	230e      	movs	r3, #14
 8017092:	e000      	b.n	8017096 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017094:	2300      	movs	r3, #0
}
 8017096:	4618      	mov	r0, r3
 8017098:	3720      	adds	r7, #32
 801709a:	46bd      	mov	sp, r7
 801709c:	bd80      	pop	{r7, pc}
	...

080170a0 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80170a0:	b480      	push	{r7}
 80170a2:	b083      	sub	sp, #12
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	4603      	mov	r3, r0
 80170a8:	6039      	str	r1, [r7, #0]
 80170aa:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80170ac:	683b      	ldr	r3, [r7, #0]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d101      	bne.n	80170b6 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80170b2:	2309      	movs	r3, #9
 80170b4:	e029      	b.n	801710a <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 80170b6:	79fb      	ldrb	r3, [r7, #7]
 80170b8:	3b01      	subs	r3, #1
 80170ba:	2b03      	cmp	r3, #3
 80170bc:	d822      	bhi.n	8017104 <GetLastFcntDown+0x64>
 80170be:	a201      	add	r2, pc, #4	; (adr r2, 80170c4 <GetLastFcntDown+0x24>)
 80170c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170c4:	080170d5 	.word	0x080170d5
 80170c8:	080170e1 	.word	0x080170e1
 80170cc:	080170ed 	.word	0x080170ed
 80170d0:	080170f9 	.word	0x080170f9
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80170d4:	4b0f      	ldr	r3, [pc, #60]	; (8017114 <GetLastFcntDown+0x74>)
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	691a      	ldr	r2, [r3, #16]
 80170da:	683b      	ldr	r3, [r7, #0]
 80170dc:	601a      	str	r2, [r3, #0]
            break;
 80170de:	e013      	b.n	8017108 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80170e0:	4b0c      	ldr	r3, [pc, #48]	; (8017114 <GetLastFcntDown+0x74>)
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	695a      	ldr	r2, [r3, #20]
 80170e6:	683b      	ldr	r3, [r7, #0]
 80170e8:	601a      	str	r2, [r3, #0]
            break;
 80170ea:	e00d      	b.n	8017108 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80170ec:	4b09      	ldr	r3, [pc, #36]	; (8017114 <GetLastFcntDown+0x74>)
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	699a      	ldr	r2, [r3, #24]
 80170f2:	683b      	ldr	r3, [r7, #0]
 80170f4:	601a      	str	r2, [r3, #0]
            break;
 80170f6:	e007      	b.n	8017108 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80170f8:	4b06      	ldr	r3, [pc, #24]	; (8017114 <GetLastFcntDown+0x74>)
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	69da      	ldr	r2, [r3, #28]
 80170fe:	683b      	ldr	r3, [r7, #0]
 8017100:	601a      	str	r2, [r3, #0]
            break;
 8017102:	e001      	b.n	8017108 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8017104:	2305      	movs	r3, #5
 8017106:	e000      	b.n	801710a <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8017108:	2300      	movs	r3, #0
}
 801710a:	4618      	mov	r0, r3
 801710c:	370c      	adds	r7, #12
 801710e:	46bd      	mov	sp, r7
 8017110:	bc80      	pop	{r7}
 8017112:	4770      	bx	lr
 8017114:	20001bdc 	.word	0x20001bdc

08017118 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b084      	sub	sp, #16
 801711c:	af00      	add	r7, sp, #0
 801711e:	4603      	mov	r3, r0
 8017120:	6039      	str	r1, [r7, #0]
 8017122:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8017124:	2300      	movs	r3, #0
 8017126:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8017128:	f107 020c 	add.w	r2, r7, #12
 801712c:	79fb      	ldrb	r3, [r7, #7]
 801712e:	4611      	mov	r1, r2
 8017130:	4618      	mov	r0, r3
 8017132:	f7ff ffb5 	bl	80170a0 <GetLastFcntDown>
 8017136:	4603      	mov	r3, r0
 8017138:	2b00      	cmp	r3, #0
 801713a:	d001      	beq.n	8017140 <CheckFCntDown+0x28>
    {
        return false;
 801713c:	2300      	movs	r3, #0
 801713e:	e00a      	b.n	8017156 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	683a      	ldr	r2, [r7, #0]
 8017144:	429a      	cmp	r2, r3
 8017146:	d803      	bhi.n	8017150 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8017148:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801714a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801714e:	d101      	bne.n	8017154 <CheckFCntDown+0x3c>
    {
        return true;
 8017150:	2301      	movs	r3, #1
 8017152:	e000      	b.n	8017156 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8017154:	2300      	movs	r3, #0
    }
}
 8017156:	4618      	mov	r0, r3
 8017158:	3710      	adds	r7, #16
 801715a:	46bd      	mov	sp, r7
 801715c:	bd80      	pop	{r7, pc}
	...

08017160 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8017160:	b480      	push	{r7}
 8017162:	b083      	sub	sp, #12
 8017164:	af00      	add	r7, sp, #0
 8017166:	4603      	mov	r3, r0
 8017168:	6039      	str	r1, [r7, #0]
 801716a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 801716c:	79fb      	ldrb	r3, [r7, #7]
 801716e:	3b01      	subs	r3, #1
 8017170:	2b03      	cmp	r3, #3
 8017172:	d82b      	bhi.n	80171cc <UpdateFCntDown+0x6c>
 8017174:	a201      	add	r2, pc, #4	; (adr r2, 801717c <UpdateFCntDown+0x1c>)
 8017176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801717a:	bf00      	nop
 801717c:	0801718d 	.word	0x0801718d
 8017180:	0801719f 	.word	0x0801719f
 8017184:	080171b1 	.word	0x080171b1
 8017188:	080171c3 	.word	0x080171c3
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801718c:	4b12      	ldr	r3, [pc, #72]	; (80171d8 <UpdateFCntDown+0x78>)
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	683a      	ldr	r2, [r7, #0]
 8017192:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8017194:	4b10      	ldr	r3, [pc, #64]	; (80171d8 <UpdateFCntDown+0x78>)
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	683a      	ldr	r2, [r7, #0]
 801719a:	621a      	str	r2, [r3, #32]
            break;
 801719c:	e017      	b.n	80171ce <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801719e:	4b0e      	ldr	r3, [pc, #56]	; (80171d8 <UpdateFCntDown+0x78>)
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	683a      	ldr	r2, [r7, #0]
 80171a4:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 80171a6:	4b0c      	ldr	r3, [pc, #48]	; (80171d8 <UpdateFCntDown+0x78>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	683a      	ldr	r2, [r7, #0]
 80171ac:	621a      	str	r2, [r3, #32]
            break;
 80171ae:	e00e      	b.n	80171ce <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80171b0:	4b09      	ldr	r3, [pc, #36]	; (80171d8 <UpdateFCntDown+0x78>)
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	683a      	ldr	r2, [r7, #0]
 80171b6:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 80171b8:	4b07      	ldr	r3, [pc, #28]	; (80171d8 <UpdateFCntDown+0x78>)
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	683a      	ldr	r2, [r7, #0]
 80171be:	621a      	str	r2, [r3, #32]
            break;
 80171c0:	e005      	b.n	80171ce <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80171c2:	4b05      	ldr	r3, [pc, #20]	; (80171d8 <UpdateFCntDown+0x78>)
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	683a      	ldr	r2, [r7, #0]
 80171c8:	61da      	str	r2, [r3, #28]
            break;
 80171ca:	e000      	b.n	80171ce <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80171cc:	bf00      	nop
    }
}
 80171ce:	bf00      	nop
 80171d0:	370c      	adds	r7, #12
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bc80      	pop	{r7}
 80171d6:	4770      	bx	lr
 80171d8:	20001bdc 	.word	0x20001bdc

080171dc <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80171dc:	b480      	push	{r7}
 80171de:	b083      	sub	sp, #12
 80171e0:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80171e2:	4b18      	ldr	r3, [pc, #96]	; (8017244 <ResetFCnts+0x68>)
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	2200      	movs	r2, #0
 80171e8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80171ea:	4b16      	ldr	r3, [pc, #88]	; (8017244 <ResetFCnts+0x68>)
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80171f2:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80171f4:	4b13      	ldr	r3, [pc, #76]	; (8017244 <ResetFCnts+0x68>)
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80171fc:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80171fe:	4b11      	ldr	r3, [pc, #68]	; (8017244 <ResetFCnts+0x68>)
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017206:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8017208:	4b0e      	ldr	r3, [pc, #56]	; (8017244 <ResetFCnts+0x68>)
 801720a:	681a      	ldr	r2, [r3, #0]
 801720c:	4b0d      	ldr	r3, [pc, #52]	; (8017244 <ResetFCnts+0x68>)
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	6992      	ldr	r2, [r2, #24]
 8017212:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8017214:	2300      	movs	r3, #0
 8017216:	607b      	str	r3, [r7, #4]
 8017218:	e00b      	b.n	8017232 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 801721a:	4b0a      	ldr	r3, [pc, #40]	; (8017244 <ResetFCnts+0x68>)
 801721c:	681a      	ldr	r2, [r3, #0]
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	3306      	adds	r3, #6
 8017222:	009b      	lsls	r3, r3, #2
 8017224:	4413      	add	r3, r2
 8017226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801722a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	3301      	adds	r3, #1
 8017230:	607b      	str	r3, [r7, #4]
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	2b00      	cmp	r3, #0
 8017236:	ddf0      	ble.n	801721a <ResetFCnts+0x3e>
    }
}
 8017238:	bf00      	nop
 801723a:	bf00      	nop
 801723c:	370c      	adds	r7, #12
 801723e:	46bd      	mov	sp, r7
 8017240:	bc80      	pop	{r7}
 8017242:	4770      	bx	lr
 8017244:	20001bdc 	.word	0x20001bdc

08017248 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8017248:	b480      	push	{r7}
 801724a:	b083      	sub	sp, #12
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8017250:	4b06      	ldr	r3, [pc, #24]	; (801726c <IsJoinNonce10xOk+0x24>)
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	689b      	ldr	r3, [r3, #8]
 8017256:	687a      	ldr	r2, [r7, #4]
 8017258:	429a      	cmp	r2, r3
 801725a:	bf8c      	ite	hi
 801725c:	2301      	movhi	r3, #1
 801725e:	2300      	movls	r3, #0
 8017260:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8017262:	4618      	mov	r0, r3
 8017264:	370c      	adds	r7, #12
 8017266:	46bd      	mov	sp, r7
 8017268:	bc80      	pop	{r7}
 801726a:	4770      	bx	lr
 801726c:	20001bdc 	.word	0x20001bdc

08017270 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8017270:	b580      	push	{r7, lr}
 8017272:	b082      	sub	sp, #8
 8017274:	af00      	add	r7, sp, #0
 8017276:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d101      	bne.n	8017282 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801727e:	2308      	movs	r3, #8
 8017280:	e01c      	b.n	80172bc <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8017282:	4a10      	ldr	r2, [pc, #64]	; (80172c4 <LoRaMacCryptoInit+0x54>)
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8017288:	4b0e      	ldr	r3, [pc, #56]	; (80172c4 <LoRaMacCryptoInit+0x54>)
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	2228      	movs	r2, #40	; 0x28
 801728e:	2100      	movs	r1, #0
 8017290:	4618      	mov	r0, r3
 8017292:	f003 fa9f 	bl	801a7d4 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8017296:	4b0b      	ldr	r3, [pc, #44]	; (80172c4 <LoRaMacCryptoInit+0x54>)
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	2201      	movs	r2, #1
 801729c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801729e:	4b09      	ldr	r3, [pc, #36]	; (80172c4 <LoRaMacCryptoInit+0x54>)
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	2201      	movs	r2, #1
 80172a4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80172a6:	4b07      	ldr	r3, [pc, #28]	; (80172c4 <LoRaMacCryptoInit+0x54>)
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	2201      	movs	r2, #1
 80172ac:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80172ae:	4b05      	ldr	r3, [pc, #20]	; (80172c4 <LoRaMacCryptoInit+0x54>)
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	2200      	movs	r2, #0
 80172b4:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80172b6:	f7ff ff91 	bl	80171dc <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80172ba:	2300      	movs	r3, #0
}
 80172bc:	4618      	mov	r0, r3
 80172be:	3708      	adds	r7, #8
 80172c0:	46bd      	mov	sp, r7
 80172c2:	bd80      	pop	{r7, pc}
 80172c4:	20001bdc 	.word	0x20001bdc

080172c8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80172c8:	b480      	push	{r7}
 80172ca:	b083      	sub	sp, #12
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80172d0:	4b04      	ldr	r3, [pc, #16]	; (80172e4 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	687a      	ldr	r2, [r7, #4]
 80172d6:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80172d8:	2300      	movs	r3, #0
}
 80172da:	4618      	mov	r0, r3
 80172dc:	370c      	adds	r7, #12
 80172de:	46bd      	mov	sp, r7
 80172e0:	bc80      	pop	{r7}
 80172e2:	4770      	bx	lr
 80172e4:	20001bdc 	.word	0x20001bdc

080172e8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80172e8:	b480      	push	{r7}
 80172ea:	b083      	sub	sp, #12
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d101      	bne.n	80172fa <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80172f6:	2309      	movs	r3, #9
 80172f8:	e006      	b.n	8017308 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80172fa:	4b06      	ldr	r3, [pc, #24]	; (8017314 <LoRaMacCryptoGetFCntUp+0x2c>)
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	68db      	ldr	r3, [r3, #12]
 8017300:	1c5a      	adds	r2, r3, #1
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8017306:	2300      	movs	r3, #0
}
 8017308:	4618      	mov	r0, r3
 801730a:	370c      	adds	r7, #12
 801730c:	46bd      	mov	sp, r7
 801730e:	bc80      	pop	{r7}
 8017310:	4770      	bx	lr
 8017312:	bf00      	nop
 8017314:	20001bdc 	.word	0x20001bdc

08017318 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b088      	sub	sp, #32
 801731c:	af00      	add	r7, sp, #0
 801731e:	4603      	mov	r3, r0
 8017320:	60b9      	str	r1, [r7, #8]
 8017322:	607a      	str	r2, [r7, #4]
 8017324:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8017326:	2300      	movs	r3, #0
 8017328:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801732a:	2300      	movs	r3, #0
 801732c:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801732e:	2312      	movs	r3, #18
 8017330:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	2b00      	cmp	r3, #0
 8017336:	d101      	bne.n	801733c <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017338:	2309      	movs	r3, #9
 801733a:	e035      	b.n	80173a8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801733c:	f107 0214 	add.w	r2, r7, #20
 8017340:	7bfb      	ldrb	r3, [r7, #15]
 8017342:	4611      	mov	r1, r2
 8017344:	4618      	mov	r0, r3
 8017346:	f7ff feab 	bl	80170a0 <GetLastFcntDown>
 801734a:	4603      	mov	r3, r0
 801734c:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801734e:	7efb      	ldrb	r3, [r7, #27]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d001      	beq.n	8017358 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8017354:	7efb      	ldrb	r3, [r7, #27]
 8017356:	e027      	b.n	80173a8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8017358:	697b      	ldr	r3, [r7, #20]
 801735a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801735e:	d103      	bne.n	8017368 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	68ba      	ldr	r2, [r7, #8]
 8017364:	601a      	str	r2, [r3, #0]
 8017366:	e01e      	b.n	80173a6 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8017368:	697b      	ldr	r3, [r7, #20]
 801736a:	b29b      	uxth	r3, r3
 801736c:	68ba      	ldr	r2, [r7, #8]
 801736e:	1ad3      	subs	r3, r2, r3
 8017370:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8017372:	69fb      	ldr	r3, [r7, #28]
 8017374:	2b00      	cmp	r3, #0
 8017376:	dd05      	ble.n	8017384 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8017378:	697a      	ldr	r2, [r7, #20]
 801737a:	69fb      	ldr	r3, [r7, #28]
 801737c:	441a      	add	r2, r3
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	601a      	str	r2, [r3, #0]
 8017382:	e010      	b.n	80173a6 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8017384:	69fb      	ldr	r3, [r7, #28]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d104      	bne.n	8017394 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801738a:	697a      	ldr	r2, [r7, #20]
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8017390:	2307      	movs	r3, #7
 8017392:	e009      	b.n	80173a8 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8017394:	697b      	ldr	r3, [r7, #20]
 8017396:	0c1b      	lsrs	r3, r3, #16
 8017398:	041b      	lsls	r3, r3, #16
 801739a:	68ba      	ldr	r2, [r7, #8]
 801739c:	4413      	add	r3, r2
 801739e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80173a6:	2300      	movs	r3, #0
}
 80173a8:	4618      	mov	r0, r3
 80173aa:	3720      	adds	r7, #32
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd80      	pop	{r7, pc}

080173b0 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80173b0:	b480      	push	{r7}
 80173b2:	b085      	sub	sp, #20
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d101      	bne.n	80173c2 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80173be:	2309      	movs	r3, #9
 80173c0:	e019      	b.n	80173f6 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80173c2:	2300      	movs	r3, #0
 80173c4:	60fb      	str	r3, [r7, #12]
 80173c6:	e012      	b.n	80173ee <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80173c8:	4b0d      	ldr	r3, [pc, #52]	; (8017400 <LoRaMacCryptoSetMulticastReference+0x50>)
 80173ca:	6819      	ldr	r1, [r3, #0]
 80173cc:	68fa      	ldr	r2, [r7, #12]
 80173ce:	4613      	mov	r3, r2
 80173d0:	005b      	lsls	r3, r3, #1
 80173d2:	4413      	add	r3, r2
 80173d4:	011b      	lsls	r3, r3, #4
 80173d6:	461a      	mov	r2, r3
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	4413      	add	r3, r2
 80173dc:	68fa      	ldr	r2, [r7, #12]
 80173de:	3206      	adds	r2, #6
 80173e0:	0092      	lsls	r2, r2, #2
 80173e2:	440a      	add	r2, r1
 80173e4:	3204      	adds	r2, #4
 80173e6:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	3301      	adds	r3, #1
 80173ec:	60fb      	str	r3, [r7, #12]
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	dde9      	ble.n	80173c8 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80173f4:	2300      	movs	r3, #0
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	3714      	adds	r7, #20
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bc80      	pop	{r7}
 80173fe:	4770      	bx	lr
 8017400:	20001bdc 	.word	0x20001bdc

08017404 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b082      	sub	sp, #8
 8017408:	af00      	add	r7, sp, #0
 801740a:	4603      	mov	r3, r0
 801740c:	6039      	str	r1, [r7, #0]
 801740e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8017410:	79fb      	ldrb	r3, [r7, #7]
 8017412:	6839      	ldr	r1, [r7, #0]
 8017414:	4618      	mov	r0, r3
 8017416:	f7f7 fe29 	bl	800f06c <SecureElementSetKey>
 801741a:	4603      	mov	r3, r0
 801741c:	2b00      	cmp	r3, #0
 801741e:	d001      	beq.n	8017424 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017420:	230e      	movs	r3, #14
 8017422:	e021      	b.n	8017468 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8017424:	79fb      	ldrb	r3, [r7, #7]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d11d      	bne.n	8017466 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801742a:	4b11      	ldr	r3, [pc, #68]	; (8017470 <LoRaMacCryptoSetKey+0x6c>)
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	789b      	ldrb	r3, [r3, #2]
 8017430:	210b      	movs	r1, #11
 8017432:	4618      	mov	r0, r3
 8017434:	f000 fa58 	bl	80178e8 <LoRaMacCryptoDeriveLifeTimeKey>
 8017438:	4603      	mov	r3, r0
 801743a:	2b00      	cmp	r3, #0
 801743c:	d001      	beq.n	8017442 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801743e:	230e      	movs	r3, #14
 8017440:	e012      	b.n	8017468 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8017442:	210c      	movs	r1, #12
 8017444:	2000      	movs	r0, #0
 8017446:	f000 fa4f 	bl	80178e8 <LoRaMacCryptoDeriveLifeTimeKey>
 801744a:	4603      	mov	r3, r0
 801744c:	2b00      	cmp	r3, #0
 801744e:	d001      	beq.n	8017454 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017450:	230e      	movs	r3, #14
 8017452:	e009      	b.n	8017468 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8017454:	210a      	movs	r1, #10
 8017456:	2000      	movs	r0, #0
 8017458:	f000 fa46 	bl	80178e8 <LoRaMacCryptoDeriveLifeTimeKey>
 801745c:	4603      	mov	r3, r0
 801745e:	2b00      	cmp	r3, #0
 8017460:	d001      	beq.n	8017466 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017462:	230e      	movs	r3, #14
 8017464:	e000      	b.n	8017468 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8017466:	2300      	movs	r3, #0
}
 8017468:	4618      	mov	r0, r3
 801746a:	3708      	adds	r7, #8
 801746c:	46bd      	mov	sp, r7
 801746e:	bd80      	pop	{r7, pc}
 8017470:	20001bdc 	.word	0x20001bdc

08017474 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8017474:	b580      	push	{r7, lr}
 8017476:	b086      	sub	sp, #24
 8017478:	af02      	add	r7, sp, #8
 801747a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d101      	bne.n	8017486 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017482:	2309      	movs	r3, #9
 8017484:	e02d      	b.n	80174e2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8017486:	2301      	movs	r3, #1
 8017488:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 801748a:	4b18      	ldr	r3, [pc, #96]	; (80174ec <LoRaMacCryptoPrepareJoinRequest+0x78>)
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	889a      	ldrh	r2, [r3, #4]
 8017490:	3201      	adds	r2, #1
 8017492:	b292      	uxth	r2, r2
 8017494:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8017496:	4b15      	ldr	r3, [pc, #84]	; (80174ec <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	889a      	ldrh	r2, [r3, #4]
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80174a0:	6878      	ldr	r0, [r7, #4]
 80174a2:	f000 fc1b 	bl	8017cdc <LoRaMacSerializerJoinRequest>
 80174a6:	4603      	mov	r3, r0
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d001      	beq.n	80174b0 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80174ac:	2310      	movs	r3, #16
 80174ae:	e018      	b.n	80174e2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	6819      	ldr	r1, [r3, #0]
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	3318      	adds	r3, #24
 80174b8:	7bfa      	ldrb	r2, [r7, #15]
 80174ba:	9300      	str	r3, [sp, #0]
 80174bc:	4613      	mov	r3, r2
 80174be:	2213      	movs	r2, #19
 80174c0:	2000      	movs	r0, #0
 80174c2:	f7f7 fe31 	bl	800f128 <SecureElementComputeAesCmac>
 80174c6:	4603      	mov	r3, r0
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d001      	beq.n	80174d0 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80174cc:	230e      	movs	r3, #14
 80174ce:	e008      	b.n	80174e2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80174d0:	6878      	ldr	r0, [r7, #4]
 80174d2:	f000 fc03 	bl	8017cdc <LoRaMacSerializerJoinRequest>
 80174d6:	4603      	mov	r3, r0
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d001      	beq.n	80174e0 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80174dc:	2310      	movs	r3, #16
 80174de:	e000      	b.n	80174e2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80174e0:	2300      	movs	r3, #0
}
 80174e2:	4618      	mov	r0, r3
 80174e4:	3710      	adds	r7, #16
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd80      	pop	{r7, pc}
 80174ea:	bf00      	nop
 80174ec:	20001bdc 	.word	0x20001bdc

080174f0 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80174f0:	b590      	push	{r4, r7, lr}
 80174f2:	b097      	sub	sp, #92	; 0x5c
 80174f4:	af04      	add	r7, sp, #16
 80174f6:	4603      	mov	r3, r0
 80174f8:	60b9      	str	r1, [r7, #8]
 80174fa:	607a      	str	r2, [r7, #4]
 80174fc:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	2b00      	cmp	r3, #0
 8017502:	d002      	beq.n	801750a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8017504:	68bb      	ldr	r3, [r7, #8]
 8017506:	2b00      	cmp	r3, #0
 8017508:	d101      	bne.n	801750e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801750a:	2309      	movs	r3, #9
 801750c:	e0d3      	b.n	80176b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801750e:	2312      	movs	r3, #18
 8017510:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8017514:	2300      	movs	r3, #0
 8017516:	617b      	str	r3, [r7, #20]
 8017518:	f107 0318 	add.w	r3, r7, #24
 801751c:	221d      	movs	r2, #29
 801751e:	2100      	movs	r1, #0
 8017520:	4618      	mov	r0, r3
 8017522:	f007 ffb9 	bl	801f498 <memset>
    uint8_t versionMinor         = 0;
 8017526:	2300      	movs	r3, #0
 8017528:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801752a:	4b65      	ldr	r3, [pc, #404]	; (80176c0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	889b      	ldrh	r3, [r3, #4]
 8017530:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	681c      	ldr	r4, [r3, #0]
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	791b      	ldrb	r3, [r3, #4]
 801753c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8017540:	7bf8      	ldrb	r0, [r7, #15]
 8017542:	f107 0213 	add.w	r2, r7, #19
 8017546:	9202      	str	r2, [sp, #8]
 8017548:	f107 0214 	add.w	r2, r7, #20
 801754c:	9201      	str	r2, [sp, #4]
 801754e:	9300      	str	r3, [sp, #0]
 8017550:	4623      	mov	r3, r4
 8017552:	460a      	mov	r2, r1
 8017554:	68b9      	ldr	r1, [r7, #8]
 8017556:	f7f7 feed 	bl	800f334 <SecureElementProcessJoinAccept>
 801755a:	4603      	mov	r3, r0
 801755c:	2b00      	cmp	r3, #0
 801755e:	d001      	beq.n	8017564 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017560:	230e      	movs	r3, #14
 8017562:	e0a8      	b.n	80176b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	6818      	ldr	r0, [r3, #0]
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	791b      	ldrb	r3, [r3, #4]
 801756c:	b29a      	uxth	r2, r3
 801756e:	f107 0314 	add.w	r3, r7, #20
 8017572:	4619      	mov	r1, r3
 8017574:	f003 f8f3 	bl	801a75e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8017578:	6878      	ldr	r0, [r7, #4]
 801757a:	f000 f9f0 	bl	801795e <LoRaMacParserJoinAccept>
 801757e:	4603      	mov	r3, r0
 8017580:	2b00      	cmp	r3, #0
 8017582:	d001      	beq.n	8017588 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8017584:	230f      	movs	r3, #15
 8017586:	e096      	b.n	80176b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8017588:	2300      	movs	r3, #0
 801758a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	799b      	ldrb	r3, [r3, #6]
 8017592:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	79db      	ldrb	r3, [r3, #7]
 8017598:	021b      	lsls	r3, r3, #8
 801759a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801759c:	4313      	orrs	r3, r2
 801759e:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	7a1b      	ldrb	r3, [r3, #8]
 80175a4:	041b      	lsls	r3, r3, #16
 80175a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80175a8:	4313      	orrs	r3, r2
 80175aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 80175ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80175ae:	f7ff fe4b 	bl	8017248 <IsJoinNonce10xOk>
 80175b2:	4603      	mov	r3, r0
 80175b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 80175b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d010      	beq.n	80175e2 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80175c0:	4b3f      	ldr	r3, [pc, #252]	; (80176c0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80175c6:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 80175c8:	7cfb      	ldrb	r3, [r7, #19]
 80175ca:	210b      	movs	r1, #11
 80175cc:	4618      	mov	r0, r3
 80175ce:	f000 f98b 	bl	80178e8 <LoRaMacCryptoDeriveLifeTimeKey>
 80175d2:	4603      	mov	r3, r0
 80175d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80175d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d005      	beq.n	80175ec <LoRaMacCryptoHandleJoinAccept+0xfc>
 80175e0:	e001      	b.n	80175e6 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80175e2:	2303      	movs	r3, #3
 80175e4:	e067      	b.n	80176b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 80175e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80175ea:	e064      	b.n	80176b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 80175ec:	210c      	movs	r1, #12
 80175ee:	2000      	movs	r0, #0
 80175f0:	f000 f97a 	bl	80178e8 <LoRaMacCryptoDeriveLifeTimeKey>
 80175f4:	4603      	mov	r3, r0
 80175f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80175fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d002      	beq.n	8017608 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8017602:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017606:	e056      	b.n	80176b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8017608:	210a      	movs	r1, #10
 801760a:	2000      	movs	r0, #0
 801760c:	f000 f96c 	bl	80178e8 <LoRaMacCryptoDeriveLifeTimeKey>
 8017610:	4603      	mov	r3, r0
 8017612:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017616:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801761a:	2b00      	cmp	r3, #0
 801761c:	d002      	beq.n	8017624 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 801761e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017622:	e048      	b.n	80176b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	7a5b      	ldrb	r3, [r3, #9]
 8017628:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	7a9b      	ldrb	r3, [r3, #10]
 801762e:	021b      	lsls	r3, r3, #8
 8017630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017632:	4313      	orrs	r3, r2
 8017634:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	7adb      	ldrb	r3, [r3, #11]
 801763a:	041b      	lsls	r3, r3, #16
 801763c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801763e:	4313      	orrs	r3, r2
 8017640:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8017642:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017648:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801764a:	2009      	movs	r0, #9
 801764c:	f7ff fcd8 	bl	8017000 <DeriveSessionKey10x>
 8017650:	4603      	mov	r3, r0
 8017652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017656:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801765a:	2b00      	cmp	r3, #0
 801765c:	d002      	beq.n	8017664 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 801765e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017662:	e028      	b.n	80176b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8017664:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801766a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801766c:	2008      	movs	r0, #8
 801766e:	f7ff fcc7 	bl	8017000 <DeriveSessionKey10x>
 8017672:	4603      	mov	r3, r0
 8017674:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017678:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801767c:	2b00      	cmp	r3, #0
 801767e:	d002      	beq.n	8017686 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8017680:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017684:	e017      	b.n	80176b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8017686:	4b0e      	ldr	r3, [pc, #56]	; (80176c0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	7cfa      	ldrb	r2, [r7, #19]
 801768c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 801768e:	4b0c      	ldr	r3, [pc, #48]	; (80176c0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	2200      	movs	r2, #0
 8017694:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8017696:	4b0a      	ldr	r3, [pc, #40]	; (80176c0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801769e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80176a0:	4b07      	ldr	r3, [pc, #28]	; (80176c0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80176a8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80176aa:	4b05      	ldr	r3, [pc, #20]	; (80176c0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80176b2:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80176b4:	2300      	movs	r3, #0
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	374c      	adds	r7, #76	; 0x4c
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd90      	pop	{r4, r7, pc}
 80176be:	bf00      	nop
 80176c0:	20001bdc 	.word	0x20001bdc

080176c4 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80176c4:	b590      	push	{r4, r7, lr}
 80176c6:	b08b      	sub	sp, #44	; 0x2c
 80176c8:	af04      	add	r7, sp, #16
 80176ca:	60f8      	str	r0, [r7, #12]
 80176cc:	607b      	str	r3, [r7, #4]
 80176ce:	460b      	mov	r3, r1
 80176d0:	72fb      	strb	r3, [r7, #11]
 80176d2:	4613      	mov	r3, r2
 80176d4:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80176d6:	2312      	movs	r3, #18
 80176d8:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80176da:	2309      	movs	r3, #9
 80176dc:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d101      	bne.n	80176e8 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80176e4:	2309      	movs	r3, #9
 80176e6:	e05f      	b.n	80177a8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80176e8:	4b31      	ldr	r3, [pc, #196]	; (80177b0 <LoRaMacCryptoSecureMessage+0xec>)
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	68db      	ldr	r3, [r3, #12]
 80176ee:	68fa      	ldr	r2, [r7, #12]
 80176f0:	429a      	cmp	r2, r3
 80176f2:	d201      	bcs.n	80176f8 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80176f4:	2306      	movs	r3, #6
 80176f6:	e057      	b.n	80177a8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d101      	bne.n	8017706 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8017702:	2308      	movs	r3, #8
 8017704:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8017706:	4b2a      	ldr	r3, [pc, #168]	; (80177b0 <LoRaMacCryptoSecureMessage+0xec>)
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	68db      	ldr	r3, [r3, #12]
 801770c:	68fa      	ldr	r2, [r7, #12]
 801770e:	429a      	cmp	r2, r3
 8017710:	d916      	bls.n	8017740 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801771c:	b219      	sxth	r1, r3
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	689c      	ldr	r4, [r3, #8]
 8017722:	7dfa      	ldrb	r2, [r7, #23]
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	9301      	str	r3, [sp, #4]
 8017728:	2300      	movs	r3, #0
 801772a:	9300      	str	r3, [sp, #0]
 801772c:	4623      	mov	r3, r4
 801772e:	f7ff fa73 	bl	8016c18 <PayloadEncrypt>
 8017732:	4603      	mov	r3, r0
 8017734:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017736:	7dbb      	ldrb	r3, [r7, #22]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d001      	beq.n	8017740 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 801773c:	7dbb      	ldrb	r3, [r7, #22]
 801773e:	e033      	b.n	80177a8 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8017740:	6878      	ldr	r0, [r7, #4]
 8017742:	f000 fb4d 	bl	8017de0 <LoRaMacSerializerData>
 8017746:	4603      	mov	r3, r0
 8017748:	2b00      	cmp	r3, #0
 801774a:	d001      	beq.n	8017750 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801774c:	2310      	movs	r3, #16
 801774e:	e02b      	b.n	80177a8 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8017750:	2308      	movs	r3, #8
 8017752:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	6818      	ldr	r0, [r3, #0]
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	791b      	ldrb	r3, [r3, #4]
 801775c:	b29b      	uxth	r3, r3
 801775e:	3b04      	subs	r3, #4
 8017760:	b299      	uxth	r1, r3
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	689b      	ldr	r3, [r3, #8]
 8017766:	687a      	ldr	r2, [r7, #4]
 8017768:	322c      	adds	r2, #44	; 0x2c
 801776a:	7dfc      	ldrb	r4, [r7, #23]
 801776c:	9203      	str	r2, [sp, #12]
 801776e:	68fa      	ldr	r2, [r7, #12]
 8017770:	9202      	str	r2, [sp, #8]
 8017772:	9301      	str	r3, [sp, #4]
 8017774:	2300      	movs	r3, #0
 8017776:	9300      	str	r3, [sp, #0]
 8017778:	2300      	movs	r3, #0
 801777a:	4622      	mov	r2, r4
 801777c:	f7ff fb4d 	bl	8016e1a <ComputeCmacB0>
 8017780:	4603      	mov	r3, r0
 8017782:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017784:	7dbb      	ldrb	r3, [r7, #22]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d001      	beq.n	801778e <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 801778a:	7dbb      	ldrb	r3, [r7, #22]
 801778c:	e00c      	b.n	80177a8 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801778e:	6878      	ldr	r0, [r7, #4]
 8017790:	f000 fb26 	bl	8017de0 <LoRaMacSerializerData>
 8017794:	4603      	mov	r3, r0
 8017796:	2b00      	cmp	r3, #0
 8017798:	d001      	beq.n	801779e <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801779a:	2310      	movs	r3, #16
 801779c:	e004      	b.n	80177a8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801779e:	4b04      	ldr	r3, [pc, #16]	; (80177b0 <LoRaMacCryptoSecureMessage+0xec>)
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	68fa      	ldr	r2, [r7, #12]
 80177a4:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80177a6:	2300      	movs	r3, #0
}
 80177a8:	4618      	mov	r0, r3
 80177aa:	371c      	adds	r7, #28
 80177ac:	46bd      	mov	sp, r7
 80177ae:	bd90      	pop	{r4, r7, pc}
 80177b0:	20001bdc 	.word	0x20001bdc

080177b4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80177b4:	b590      	push	{r4, r7, lr}
 80177b6:	b08b      	sub	sp, #44	; 0x2c
 80177b8:	af04      	add	r7, sp, #16
 80177ba:	60b9      	str	r1, [r7, #8]
 80177bc:	607b      	str	r3, [r7, #4]
 80177be:	4603      	mov	r3, r0
 80177c0:	73fb      	strb	r3, [r7, #15]
 80177c2:	4613      	mov	r3, r2
 80177c4:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80177c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d101      	bne.n	80177d0 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80177cc:	2309      	movs	r3, #9
 80177ce:	e084      	b.n	80178da <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80177d0:	7bbb      	ldrb	r3, [r7, #14]
 80177d2:	6879      	ldr	r1, [r7, #4]
 80177d4:	4618      	mov	r0, r3
 80177d6:	f7ff fc9f 	bl	8017118 <CheckFCntDown>
 80177da:	4603      	mov	r3, r0
 80177dc:	f083 0301 	eor.w	r3, r3, #1
 80177e0:	b2db      	uxtb	r3, r3
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d001      	beq.n	80177ea <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80177e6:	2306      	movs	r3, #6
 80177e8:	e077      	b.n	80178da <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80177ea:	2312      	movs	r3, #18
 80177ec:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80177ee:	2309      	movs	r3, #9
 80177f0:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80177f2:	2308      	movs	r3, #8
 80177f4:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80177f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80177f8:	f000 f97c 	bl	8017af4 <LoRaMacParserData>
 80177fc:	4603      	mov	r3, r0
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d001      	beq.n	8017806 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8017802:	230f      	movs	r3, #15
 8017804:	e069      	b.n	80178da <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8017806:	f107 0210 	add.w	r2, r7, #16
 801780a:	7bfb      	ldrb	r3, [r7, #15]
 801780c:	4611      	mov	r1, r2
 801780e:	4618      	mov	r0, r3
 8017810:	f7ff fbd0 	bl	8016fb4 <GetKeyAddrItem>
 8017814:	4603      	mov	r3, r0
 8017816:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017818:	7d7b      	ldrb	r3, [r7, #21]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d001      	beq.n	8017822 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801781e:	7d7b      	ldrb	r3, [r7, #21]
 8017820:	e05b      	b.n	80178da <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8017822:	693b      	ldr	r3, [r7, #16]
 8017824:	785b      	ldrb	r3, [r3, #1]
 8017826:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8017828:	693b      	ldr	r3, [r7, #16]
 801782a:	789b      	ldrb	r3, [r3, #2]
 801782c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017830:	689b      	ldr	r3, [r3, #8]
 8017832:	68ba      	ldr	r2, [r7, #8]
 8017834:	429a      	cmp	r2, r3
 8017836:	d001      	beq.n	801783c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8017838:	2302      	movs	r3, #2
 801783a:	e04e      	b.n	80178da <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801783e:	7b1b      	ldrb	r3, [r3, #12]
 8017840:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8017844:	b2db      	uxtb	r3, r3
 8017846:	2b00      	cmp	r3, #0
 8017848:	bf14      	ite	ne
 801784a:	2301      	movne	r3, #1
 801784c:	2300      	moveq	r3, #0
 801784e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8017850:	4b24      	ldr	r3, [pc, #144]	; (80178e4 <LoRaMacCryptoUnsecureMessage+0x130>)
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	789b      	ldrb	r3, [r3, #2]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d101      	bne.n	801785e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801785a:	2300      	movs	r3, #0
 801785c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017860:	6818      	ldr	r0, [r3, #0]
 8017862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017864:	791b      	ldrb	r3, [r3, #4]
 8017866:	b29b      	uxth	r3, r3
 8017868:	3b04      	subs	r3, #4
 801786a:	b299      	uxth	r1, r3
 801786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017870:	7dbc      	ldrb	r4, [r7, #22]
 8017872:	7d3a      	ldrb	r2, [r7, #20]
 8017874:	9303      	str	r3, [sp, #12]
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	9302      	str	r3, [sp, #8]
 801787a:	68bb      	ldr	r3, [r7, #8]
 801787c:	9301      	str	r3, [sp, #4]
 801787e:	2301      	movs	r3, #1
 8017880:	9300      	str	r3, [sp, #0]
 8017882:	4623      	mov	r3, r4
 8017884:	f7ff fb07 	bl	8016e96 <VerifyCmacB0>
 8017888:	4603      	mov	r3, r0
 801788a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801788c:	7d7b      	ldrb	r3, [r7, #21]
 801788e:	2b00      	cmp	r3, #0
 8017890:	d001      	beq.n	8017896 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8017892:	7d7b      	ldrb	r3, [r7, #21]
 8017894:	e021      	b.n	80178da <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8017896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017898:	f893 3020 	ldrb.w	r3, [r3, #32]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d101      	bne.n	80178a4 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80178a0:	2308      	movs	r3, #8
 80178a2:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80178a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80178a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80178ae:	b219      	sxth	r1, r3
 80178b0:	7dfa      	ldrb	r2, [r7, #23]
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	9301      	str	r3, [sp, #4]
 80178b6:	2301      	movs	r3, #1
 80178b8:	9300      	str	r3, [sp, #0]
 80178ba:	68bb      	ldr	r3, [r7, #8]
 80178bc:	f7ff f9ac 	bl	8016c18 <PayloadEncrypt>
 80178c0:	4603      	mov	r3, r0
 80178c2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80178c4:	7d7b      	ldrb	r3, [r7, #21]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d001      	beq.n	80178ce <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 80178ca:	7d7b      	ldrb	r3, [r7, #21]
 80178cc:	e005      	b.n	80178da <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 80178ce:	7bbb      	ldrb	r3, [r7, #14]
 80178d0:	6879      	ldr	r1, [r7, #4]
 80178d2:	4618      	mov	r0, r3
 80178d4:	f7ff fc44 	bl	8017160 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80178d8:	2300      	movs	r3, #0
}
 80178da:	4618      	mov	r0, r3
 80178dc:	371c      	adds	r7, #28
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd90      	pop	{r4, r7, pc}
 80178e2:	bf00      	nop
 80178e4:	20001bdc 	.word	0x20001bdc

080178e8 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b088      	sub	sp, #32
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	4603      	mov	r3, r0
 80178f0:	460a      	mov	r2, r1
 80178f2:	71fb      	strb	r3, [r7, #7]
 80178f4:	4613      	mov	r3, r2
 80178f6:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 80178f8:	2300      	movs	r3, #0
 80178fa:	60fb      	str	r3, [r7, #12]
 80178fc:	f107 0310 	add.w	r3, r7, #16
 8017900:	2200      	movs	r2, #0
 8017902:	601a      	str	r2, [r3, #0]
 8017904:	605a      	str	r2, [r3, #4]
 8017906:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8017908:	2300      	movs	r3, #0
 801790a:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 801790c:	79bb      	ldrb	r3, [r7, #6]
 801790e:	2b0c      	cmp	r3, #12
 8017910:	d00b      	beq.n	801792a <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8017912:	2b0c      	cmp	r3, #12
 8017914:	dc0f      	bgt.n	8017936 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8017916:	2b0a      	cmp	r3, #10
 8017918:	d00a      	beq.n	8017930 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 801791a:	2b0b      	cmp	r3, #11
 801791c:	d10b      	bne.n	8017936 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 801791e:	79fb      	ldrb	r3, [r7, #7]
 8017920:	2b01      	cmp	r3, #1
 8017922:	d10a      	bne.n	801793a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8017924:	2320      	movs	r3, #32
 8017926:	733b      	strb	r3, [r7, #12]
            }
            break;
 8017928:	e007      	b.n	801793a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 801792a:	230b      	movs	r3, #11
 801792c:	77fb      	strb	r3, [r7, #31]
            break;
 801792e:	e005      	b.n	801793c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8017930:	2330      	movs	r3, #48	; 0x30
 8017932:	733b      	strb	r3, [r7, #12]
            break;
 8017934:	e002      	b.n	801793c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8017936:	230a      	movs	r3, #10
 8017938:	e00d      	b.n	8017956 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 801793a:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 801793c:	79ba      	ldrb	r2, [r7, #6]
 801793e:	7ff9      	ldrb	r1, [r7, #31]
 8017940:	f107 030c 	add.w	r3, r7, #12
 8017944:	4618      	mov	r0, r3
 8017946:	f7f7 fcb5 	bl	800f2b4 <SecureElementDeriveAndStoreKey>
 801794a:	4603      	mov	r3, r0
 801794c:	2b00      	cmp	r3, #0
 801794e:	d001      	beq.n	8017954 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017950:	230e      	movs	r3, #14
 8017952:	e000      	b.n	8017956 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017954:	2300      	movs	r3, #0
}
 8017956:	4618      	mov	r0, r3
 8017958:	3720      	adds	r7, #32
 801795a:	46bd      	mov	sp, r7
 801795c:	bd80      	pop	{r7, pc}

0801795e <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801795e:	b580      	push	{r7, lr}
 8017960:	b084      	sub	sp, #16
 8017962:	af00      	add	r7, sp, #0
 8017964:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	2b00      	cmp	r3, #0
 801796a:	d003      	beq.n	8017974 <LoRaMacParserJoinAccept+0x16>
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d101      	bne.n	8017978 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8017974:	2302      	movs	r3, #2
 8017976:	e0b9      	b.n	8017aec <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8017978:	2300      	movs	r3, #0
 801797a:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	681a      	ldr	r2, [r3, #0]
 8017980:	89fb      	ldrh	r3, [r7, #14]
 8017982:	1c59      	adds	r1, r3, #1
 8017984:	81f9      	strh	r1, [r7, #14]
 8017986:	4413      	add	r3, r2
 8017988:	781a      	ldrb	r2, [r3, #0]
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	1d98      	adds	r0, r3, #6
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	681a      	ldr	r2, [r3, #0]
 8017996:	89fb      	ldrh	r3, [r7, #14]
 8017998:	4413      	add	r3, r2
 801799a:	2203      	movs	r2, #3
 801799c:	4619      	mov	r1, r3
 801799e:	f002 fede 	bl	801a75e <memcpy1>
    bufItr = bufItr + 3;
 80179a2:	89fb      	ldrh	r3, [r7, #14]
 80179a4:	3303      	adds	r3, #3
 80179a6:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	f103 0009 	add.w	r0, r3, #9
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	681a      	ldr	r2, [r3, #0]
 80179b2:	89fb      	ldrh	r3, [r7, #14]
 80179b4:	4413      	add	r3, r2
 80179b6:	2203      	movs	r2, #3
 80179b8:	4619      	mov	r1, r3
 80179ba:	f002 fed0 	bl	801a75e <memcpy1>
    bufItr = bufItr + 3;
 80179be:	89fb      	ldrh	r3, [r7, #14]
 80179c0:	3303      	adds	r3, #3
 80179c2:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	681a      	ldr	r2, [r3, #0]
 80179c8:	89fb      	ldrh	r3, [r7, #14]
 80179ca:	1c59      	adds	r1, r3, #1
 80179cc:	81f9      	strh	r1, [r7, #14]
 80179ce:	4413      	add	r3, r2
 80179d0:	781b      	ldrb	r3, [r3, #0]
 80179d2:	461a      	mov	r2, r3
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	681a      	ldr	r2, [r3, #0]
 80179dc:	89fb      	ldrh	r3, [r7, #14]
 80179de:	1c59      	adds	r1, r3, #1
 80179e0:	81f9      	strh	r1, [r7, #14]
 80179e2:	4413      	add	r3, r2
 80179e4:	781b      	ldrb	r3, [r3, #0]
 80179e6:	021a      	lsls	r2, r3, #8
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	68db      	ldr	r3, [r3, #12]
 80179ec:	431a      	orrs	r2, r3
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	681a      	ldr	r2, [r3, #0]
 80179f6:	89fb      	ldrh	r3, [r7, #14]
 80179f8:	1c59      	adds	r1, r3, #1
 80179fa:	81f9      	strh	r1, [r7, #14]
 80179fc:	4413      	add	r3, r2
 80179fe:	781b      	ldrb	r3, [r3, #0]
 8017a00:	041a      	lsls	r2, r3, #16
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	68db      	ldr	r3, [r3, #12]
 8017a06:	431a      	orrs	r2, r3
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	681a      	ldr	r2, [r3, #0]
 8017a10:	89fb      	ldrh	r3, [r7, #14]
 8017a12:	1c59      	adds	r1, r3, #1
 8017a14:	81f9      	strh	r1, [r7, #14]
 8017a16:	4413      	add	r3, r2
 8017a18:	781b      	ldrb	r3, [r3, #0]
 8017a1a:	061a      	lsls	r2, r3, #24
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	68db      	ldr	r3, [r3, #12]
 8017a20:	431a      	orrs	r2, r3
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	681a      	ldr	r2, [r3, #0]
 8017a2a:	89fb      	ldrh	r3, [r7, #14]
 8017a2c:	1c59      	adds	r1, r3, #1
 8017a2e:	81f9      	strh	r1, [r7, #14]
 8017a30:	4413      	add	r3, r2
 8017a32:	781a      	ldrb	r2, [r3, #0]
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	681a      	ldr	r2, [r3, #0]
 8017a3c:	89fb      	ldrh	r3, [r7, #14]
 8017a3e:	1c59      	adds	r1, r3, #1
 8017a40:	81f9      	strh	r1, [r7, #14]
 8017a42:	4413      	add	r3, r2
 8017a44:	781a      	ldrb	r2, [r3, #0]
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	791b      	ldrb	r3, [r3, #4]
 8017a4e:	1f1a      	subs	r2, r3, #4
 8017a50:	89fb      	ldrh	r3, [r7, #14]
 8017a52:	1ad3      	subs	r3, r2, r3
 8017a54:	2b10      	cmp	r3, #16
 8017a56:	d10e      	bne.n	8017a76 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	f103 0012 	add.w	r0, r3, #18
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	681a      	ldr	r2, [r3, #0]
 8017a62:	89fb      	ldrh	r3, [r7, #14]
 8017a64:	4413      	add	r3, r2
 8017a66:	2210      	movs	r2, #16
 8017a68:	4619      	mov	r1, r3
 8017a6a:	f002 fe78 	bl	801a75e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8017a6e:	89fb      	ldrh	r3, [r7, #14]
 8017a70:	3310      	adds	r3, #16
 8017a72:	81fb      	strh	r3, [r7, #14]
 8017a74:	e008      	b.n	8017a88 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	791b      	ldrb	r3, [r3, #4]
 8017a7a:	1f1a      	subs	r2, r3, #4
 8017a7c:	89fb      	ldrh	r3, [r7, #14]
 8017a7e:	1ad3      	subs	r3, r2, r3
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	dd01      	ble.n	8017a88 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8017a84:	2301      	movs	r3, #1
 8017a86:	e031      	b.n	8017aec <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	681a      	ldr	r2, [r3, #0]
 8017a8c:	89fb      	ldrh	r3, [r7, #14]
 8017a8e:	1c59      	adds	r1, r3, #1
 8017a90:	81f9      	strh	r1, [r7, #14]
 8017a92:	4413      	add	r3, r2
 8017a94:	781b      	ldrb	r3, [r3, #0]
 8017a96:	461a      	mov	r2, r3
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	681a      	ldr	r2, [r3, #0]
 8017aa0:	89fb      	ldrh	r3, [r7, #14]
 8017aa2:	1c59      	adds	r1, r3, #1
 8017aa4:	81f9      	strh	r1, [r7, #14]
 8017aa6:	4413      	add	r3, r2
 8017aa8:	781b      	ldrb	r3, [r3, #0]
 8017aaa:	021a      	lsls	r2, r3, #8
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ab0:	431a      	orrs	r2, r3
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	681a      	ldr	r2, [r3, #0]
 8017aba:	89fb      	ldrh	r3, [r7, #14]
 8017abc:	1c59      	adds	r1, r3, #1
 8017abe:	81f9      	strh	r1, [r7, #14]
 8017ac0:	4413      	add	r3, r2
 8017ac2:	781b      	ldrb	r3, [r3, #0]
 8017ac4:	041a      	lsls	r2, r3, #16
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017aca:	431a      	orrs	r2, r3
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	681a      	ldr	r2, [r3, #0]
 8017ad4:	89fb      	ldrh	r3, [r7, #14]
 8017ad6:	1c59      	adds	r1, r3, #1
 8017ad8:	81f9      	strh	r1, [r7, #14]
 8017ada:	4413      	add	r3, r2
 8017adc:	781b      	ldrb	r3, [r3, #0]
 8017ade:	061a      	lsls	r2, r3, #24
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ae4:	431a      	orrs	r2, r3
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8017aea:	2300      	movs	r3, #0
}
 8017aec:	4618      	mov	r0, r3
 8017aee:	3710      	adds	r7, #16
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bd80      	pop	{r7, pc}

08017af4 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b084      	sub	sp, #16
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d003      	beq.n	8017b0a <LoRaMacParserData+0x16>
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d101      	bne.n	8017b0e <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8017b0a:	2302      	movs	r3, #2
 8017b0c:	e0e2      	b.n	8017cd4 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8017b0e:	2300      	movs	r3, #0
 8017b10:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	681a      	ldr	r2, [r3, #0]
 8017b16:	89fb      	ldrh	r3, [r7, #14]
 8017b18:	1c59      	adds	r1, r3, #1
 8017b1a:	81f9      	strh	r1, [r7, #14]
 8017b1c:	4413      	add	r3, r2
 8017b1e:	781a      	ldrb	r2, [r3, #0]
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	681a      	ldr	r2, [r3, #0]
 8017b28:	89fb      	ldrh	r3, [r7, #14]
 8017b2a:	1c59      	adds	r1, r3, #1
 8017b2c:	81f9      	strh	r1, [r7, #14]
 8017b2e:	4413      	add	r3, r2
 8017b30:	781b      	ldrb	r3, [r3, #0]
 8017b32:	461a      	mov	r2, r3
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	681a      	ldr	r2, [r3, #0]
 8017b3c:	89fb      	ldrh	r3, [r7, #14]
 8017b3e:	1c59      	adds	r1, r3, #1
 8017b40:	81f9      	strh	r1, [r7, #14]
 8017b42:	4413      	add	r3, r2
 8017b44:	781b      	ldrb	r3, [r3, #0]
 8017b46:	021a      	lsls	r2, r3, #8
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	689b      	ldr	r3, [r3, #8]
 8017b4c:	431a      	orrs	r2, r3
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	681a      	ldr	r2, [r3, #0]
 8017b56:	89fb      	ldrh	r3, [r7, #14]
 8017b58:	1c59      	adds	r1, r3, #1
 8017b5a:	81f9      	strh	r1, [r7, #14]
 8017b5c:	4413      	add	r3, r2
 8017b5e:	781b      	ldrb	r3, [r3, #0]
 8017b60:	041a      	lsls	r2, r3, #16
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	689b      	ldr	r3, [r3, #8]
 8017b66:	431a      	orrs	r2, r3
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	681a      	ldr	r2, [r3, #0]
 8017b70:	89fb      	ldrh	r3, [r7, #14]
 8017b72:	1c59      	adds	r1, r3, #1
 8017b74:	81f9      	strh	r1, [r7, #14]
 8017b76:	4413      	add	r3, r2
 8017b78:	781b      	ldrb	r3, [r3, #0]
 8017b7a:	061a      	lsls	r2, r3, #24
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	689b      	ldr	r3, [r3, #8]
 8017b80:	431a      	orrs	r2, r3
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	681a      	ldr	r2, [r3, #0]
 8017b8a:	89fb      	ldrh	r3, [r7, #14]
 8017b8c:	1c59      	adds	r1, r3, #1
 8017b8e:	81f9      	strh	r1, [r7, #14]
 8017b90:	4413      	add	r3, r2
 8017b92:	781a      	ldrb	r2, [r3, #0]
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	681a      	ldr	r2, [r3, #0]
 8017b9c:	89fb      	ldrh	r3, [r7, #14]
 8017b9e:	1c59      	adds	r1, r3, #1
 8017ba0:	81f9      	strh	r1, [r7, #14]
 8017ba2:	4413      	add	r3, r2
 8017ba4:	781b      	ldrb	r3, [r3, #0]
 8017ba6:	b29a      	uxth	r2, r3
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	681a      	ldr	r2, [r3, #0]
 8017bb0:	89fb      	ldrh	r3, [r7, #14]
 8017bb2:	1c59      	adds	r1, r3, #1
 8017bb4:	81f9      	strh	r1, [r7, #14]
 8017bb6:	4413      	add	r3, r2
 8017bb8:	781b      	ldrb	r3, [r3, #0]
 8017bba:	0219      	lsls	r1, r3, #8
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	89db      	ldrh	r3, [r3, #14]
 8017bc0:	b21a      	sxth	r2, r3
 8017bc2:	b20b      	sxth	r3, r1
 8017bc4:	4313      	orrs	r3, r2
 8017bc6:	b21b      	sxth	r3, r3
 8017bc8:	b29a      	uxth	r2, r3
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	f103 0010 	add.w	r0, r3, #16
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	681a      	ldr	r2, [r3, #0]
 8017bd8:	89fb      	ldrh	r3, [r7, #14]
 8017bda:	18d1      	adds	r1, r2, r3
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	7b1b      	ldrb	r3, [r3, #12]
 8017be0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017be4:	b2db      	uxtb	r3, r3
 8017be6:	b29b      	uxth	r3, r3
 8017be8:	461a      	mov	r2, r3
 8017bea:	f002 fdb8 	bl	801a75e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	7b1b      	ldrb	r3, [r3, #12]
 8017bf2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017bf6:	b2db      	uxtb	r3, r3
 8017bf8:	b29a      	uxth	r2, r3
 8017bfa:	89fb      	ldrh	r3, [r7, #14]
 8017bfc:	4413      	add	r3, r2
 8017bfe:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	2200      	movs	r2, #0
 8017c04:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	2200      	movs	r2, #0
 8017c0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	791b      	ldrb	r3, [r3, #4]
 8017c14:	461a      	mov	r2, r3
 8017c16:	89fb      	ldrh	r3, [r7, #14]
 8017c18:	1ad3      	subs	r3, r2, r3
 8017c1a:	2b04      	cmp	r3, #4
 8017c1c:	dd28      	ble.n	8017c70 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	681a      	ldr	r2, [r3, #0]
 8017c22:	89fb      	ldrh	r3, [r7, #14]
 8017c24:	1c59      	adds	r1, r3, #1
 8017c26:	81f9      	strh	r1, [r7, #14]
 8017c28:	4413      	add	r3, r2
 8017c2a:	781a      	ldrb	r2, [r3, #0]
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	791a      	ldrb	r2, [r3, #4]
 8017c36:	89fb      	ldrh	r3, [r7, #14]
 8017c38:	b2db      	uxtb	r3, r3
 8017c3a:	1ad3      	subs	r3, r2, r3
 8017c3c:	b2db      	uxtb	r3, r3
 8017c3e:	3b04      	subs	r3, #4
 8017c40:	b2da      	uxtb	r2, r3
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	681a      	ldr	r2, [r3, #0]
 8017c50:	89fb      	ldrh	r3, [r7, #14]
 8017c52:	18d1      	adds	r1, r2, r3
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017c5a:	b29b      	uxth	r3, r3
 8017c5c:	461a      	mov	r2, r3
 8017c5e:	f002 fd7e 	bl	801a75e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017c68:	b29a      	uxth	r2, r3
 8017c6a:	89fb      	ldrh	r3, [r7, #14]
 8017c6c:	4413      	add	r3, r2
 8017c6e:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	681a      	ldr	r2, [r3, #0]
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	791b      	ldrb	r3, [r3, #4]
 8017c78:	3b04      	subs	r3, #4
 8017c7a:	4413      	add	r3, r2
 8017c7c:	781b      	ldrb	r3, [r3, #0]
 8017c7e:	461a      	mov	r2, r3
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	6819      	ldr	r1, [r3, #0]
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	791b      	ldrb	r3, [r3, #4]
 8017c90:	3b03      	subs	r3, #3
 8017c92:	440b      	add	r3, r1
 8017c94:	781b      	ldrb	r3, [r3, #0]
 8017c96:	021b      	lsls	r3, r3, #8
 8017c98:	431a      	orrs	r2, r3
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	6819      	ldr	r1, [r3, #0]
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	791b      	ldrb	r3, [r3, #4]
 8017caa:	3b02      	subs	r3, #2
 8017cac:	440b      	add	r3, r1
 8017cae:	781b      	ldrb	r3, [r3, #0]
 8017cb0:	041b      	lsls	r3, r3, #16
 8017cb2:	431a      	orrs	r2, r3
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	6819      	ldr	r1, [r3, #0]
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	791b      	ldrb	r3, [r3, #4]
 8017cc4:	3b01      	subs	r3, #1
 8017cc6:	440b      	add	r3, r1
 8017cc8:	781b      	ldrb	r3, [r3, #0]
 8017cca:	061b      	lsls	r3, r3, #24
 8017ccc:	431a      	orrs	r2, r3
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8017cd2:	2300      	movs	r3, #0
}
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	3710      	adds	r7, #16
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	bd80      	pop	{r7, pc}

08017cdc <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8017cdc:	b580      	push	{r7, lr}
 8017cde:	b084      	sub	sp, #16
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d003      	beq.n	8017cf2 <LoRaMacSerializerJoinRequest+0x16>
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d101      	bne.n	8017cf6 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017cf2:	2301      	movs	r3, #1
 8017cf4:	e070      	b.n	8017dd8 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	791b      	ldrb	r3, [r3, #4]
 8017cfe:	2b16      	cmp	r3, #22
 8017d00:	d801      	bhi.n	8017d06 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017d02:	2302      	movs	r3, #2
 8017d04:	e068      	b.n	8017dd8 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	681a      	ldr	r2, [r3, #0]
 8017d0a:	89fb      	ldrh	r3, [r7, #14]
 8017d0c:	1c59      	adds	r1, r3, #1
 8017d0e:	81f9      	strh	r1, [r7, #14]
 8017d10:	4413      	add	r3, r2
 8017d12:	687a      	ldr	r2, [r7, #4]
 8017d14:	7952      	ldrb	r2, [r2, #5]
 8017d16:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	681a      	ldr	r2, [r3, #0]
 8017d1c:	89fb      	ldrh	r3, [r7, #14]
 8017d1e:	18d0      	adds	r0, r2, r3
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	3306      	adds	r3, #6
 8017d24:	2208      	movs	r2, #8
 8017d26:	4619      	mov	r1, r3
 8017d28:	f002 fd34 	bl	801a794 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8017d2c:	89fb      	ldrh	r3, [r7, #14]
 8017d2e:	3308      	adds	r3, #8
 8017d30:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	681a      	ldr	r2, [r3, #0]
 8017d36:	89fb      	ldrh	r3, [r7, #14]
 8017d38:	18d0      	adds	r0, r2, r3
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	330e      	adds	r3, #14
 8017d3e:	2208      	movs	r2, #8
 8017d40:	4619      	mov	r1, r3
 8017d42:	f002 fd27 	bl	801a794 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8017d46:	89fb      	ldrh	r3, [r7, #14]
 8017d48:	3308      	adds	r3, #8
 8017d4a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	8ad9      	ldrh	r1, [r3, #22]
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	681a      	ldr	r2, [r3, #0]
 8017d54:	89fb      	ldrh	r3, [r7, #14]
 8017d56:	1c58      	adds	r0, r3, #1
 8017d58:	81f8      	strh	r0, [r7, #14]
 8017d5a:	4413      	add	r3, r2
 8017d5c:	b2ca      	uxtb	r2, r1
 8017d5e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	8adb      	ldrh	r3, [r3, #22]
 8017d64:	0a1b      	lsrs	r3, r3, #8
 8017d66:	b299      	uxth	r1, r3
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	681a      	ldr	r2, [r3, #0]
 8017d6c:	89fb      	ldrh	r3, [r7, #14]
 8017d6e:	1c58      	adds	r0, r3, #1
 8017d70:	81f8      	strh	r0, [r7, #14]
 8017d72:	4413      	add	r3, r2
 8017d74:	b2ca      	uxtb	r2, r1
 8017d76:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	6999      	ldr	r1, [r3, #24]
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	681a      	ldr	r2, [r3, #0]
 8017d80:	89fb      	ldrh	r3, [r7, #14]
 8017d82:	1c58      	adds	r0, r3, #1
 8017d84:	81f8      	strh	r0, [r7, #14]
 8017d86:	4413      	add	r3, r2
 8017d88:	b2ca      	uxtb	r2, r1
 8017d8a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	699b      	ldr	r3, [r3, #24]
 8017d90:	0a19      	lsrs	r1, r3, #8
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	681a      	ldr	r2, [r3, #0]
 8017d96:	89fb      	ldrh	r3, [r7, #14]
 8017d98:	1c58      	adds	r0, r3, #1
 8017d9a:	81f8      	strh	r0, [r7, #14]
 8017d9c:	4413      	add	r3, r2
 8017d9e:	b2ca      	uxtb	r2, r1
 8017da0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	699b      	ldr	r3, [r3, #24]
 8017da6:	0c19      	lsrs	r1, r3, #16
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	681a      	ldr	r2, [r3, #0]
 8017dac:	89fb      	ldrh	r3, [r7, #14]
 8017dae:	1c58      	adds	r0, r3, #1
 8017db0:	81f8      	strh	r0, [r7, #14]
 8017db2:	4413      	add	r3, r2
 8017db4:	b2ca      	uxtb	r2, r1
 8017db6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	699b      	ldr	r3, [r3, #24]
 8017dbc:	0e19      	lsrs	r1, r3, #24
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	681a      	ldr	r2, [r3, #0]
 8017dc2:	89fb      	ldrh	r3, [r7, #14]
 8017dc4:	1c58      	adds	r0, r3, #1
 8017dc6:	81f8      	strh	r0, [r7, #14]
 8017dc8:	4413      	add	r3, r2
 8017dca:	b2ca      	uxtb	r2, r1
 8017dcc:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017dce:	89fb      	ldrh	r3, [r7, #14]
 8017dd0:	b2da      	uxtb	r2, r3
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017dd6:	2300      	movs	r3, #0
}
 8017dd8:	4618      	mov	r0, r3
 8017dda:	3710      	adds	r7, #16
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	bd80      	pop	{r7, pc}

08017de0 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b084      	sub	sp, #16
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d003      	beq.n	8017df6 <LoRaMacSerializerData+0x16>
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d101      	bne.n	8017dfa <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017df6:	2301      	movs	r3, #1
 8017df8:	e0e5      	b.n	8017fc6 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8017dfe:	2308      	movs	r3, #8
 8017e00:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	7b1b      	ldrb	r3, [r3, #12]
 8017e06:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017e0a:	b2db      	uxtb	r3, r3
 8017e0c:	b29a      	uxth	r2, r3
 8017e0e:	89bb      	ldrh	r3, [r7, #12]
 8017e10:	4413      	add	r3, r2
 8017e12:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d002      	beq.n	8017e24 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8017e1e:	89bb      	ldrh	r3, [r7, #12]
 8017e20:	3301      	adds	r3, #1
 8017e22:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e2a:	b29a      	uxth	r2, r3
 8017e2c:	89bb      	ldrh	r3, [r7, #12]
 8017e2e:	4413      	add	r3, r2
 8017e30:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8017e32:	89bb      	ldrh	r3, [r7, #12]
 8017e34:	3304      	adds	r3, #4
 8017e36:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	791b      	ldrb	r3, [r3, #4]
 8017e3c:	b29b      	uxth	r3, r3
 8017e3e:	89ba      	ldrh	r2, [r7, #12]
 8017e40:	429a      	cmp	r2, r3
 8017e42:	d901      	bls.n	8017e48 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017e44:	2302      	movs	r3, #2
 8017e46:	e0be      	b.n	8017fc6 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	681a      	ldr	r2, [r3, #0]
 8017e4c:	89fb      	ldrh	r3, [r7, #14]
 8017e4e:	1c59      	adds	r1, r3, #1
 8017e50:	81f9      	strh	r1, [r7, #14]
 8017e52:	4413      	add	r3, r2
 8017e54:	687a      	ldr	r2, [r7, #4]
 8017e56:	7952      	ldrb	r2, [r2, #5]
 8017e58:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	6899      	ldr	r1, [r3, #8]
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	681a      	ldr	r2, [r3, #0]
 8017e62:	89fb      	ldrh	r3, [r7, #14]
 8017e64:	1c58      	adds	r0, r3, #1
 8017e66:	81f8      	strh	r0, [r7, #14]
 8017e68:	4413      	add	r3, r2
 8017e6a:	b2ca      	uxtb	r2, r1
 8017e6c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	689b      	ldr	r3, [r3, #8]
 8017e72:	0a19      	lsrs	r1, r3, #8
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	681a      	ldr	r2, [r3, #0]
 8017e78:	89fb      	ldrh	r3, [r7, #14]
 8017e7a:	1c58      	adds	r0, r3, #1
 8017e7c:	81f8      	strh	r0, [r7, #14]
 8017e7e:	4413      	add	r3, r2
 8017e80:	b2ca      	uxtb	r2, r1
 8017e82:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	689b      	ldr	r3, [r3, #8]
 8017e88:	0c19      	lsrs	r1, r3, #16
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	681a      	ldr	r2, [r3, #0]
 8017e8e:	89fb      	ldrh	r3, [r7, #14]
 8017e90:	1c58      	adds	r0, r3, #1
 8017e92:	81f8      	strh	r0, [r7, #14]
 8017e94:	4413      	add	r3, r2
 8017e96:	b2ca      	uxtb	r2, r1
 8017e98:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	689b      	ldr	r3, [r3, #8]
 8017e9e:	0e19      	lsrs	r1, r3, #24
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	681a      	ldr	r2, [r3, #0]
 8017ea4:	89fb      	ldrh	r3, [r7, #14]
 8017ea6:	1c58      	adds	r0, r3, #1
 8017ea8:	81f8      	strh	r0, [r7, #14]
 8017eaa:	4413      	add	r3, r2
 8017eac:	b2ca      	uxtb	r2, r1
 8017eae:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	681a      	ldr	r2, [r3, #0]
 8017eb4:	89fb      	ldrh	r3, [r7, #14]
 8017eb6:	1c59      	adds	r1, r3, #1
 8017eb8:	81f9      	strh	r1, [r7, #14]
 8017eba:	4413      	add	r3, r2
 8017ebc:	687a      	ldr	r2, [r7, #4]
 8017ebe:	7b12      	ldrb	r2, [r2, #12]
 8017ec0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	89d9      	ldrh	r1, [r3, #14]
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	681a      	ldr	r2, [r3, #0]
 8017eca:	89fb      	ldrh	r3, [r7, #14]
 8017ecc:	1c58      	adds	r0, r3, #1
 8017ece:	81f8      	strh	r0, [r7, #14]
 8017ed0:	4413      	add	r3, r2
 8017ed2:	b2ca      	uxtb	r2, r1
 8017ed4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	89db      	ldrh	r3, [r3, #14]
 8017eda:	0a1b      	lsrs	r3, r3, #8
 8017edc:	b299      	uxth	r1, r3
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	681a      	ldr	r2, [r3, #0]
 8017ee2:	89fb      	ldrh	r3, [r7, #14]
 8017ee4:	1c58      	adds	r0, r3, #1
 8017ee6:	81f8      	strh	r0, [r7, #14]
 8017ee8:	4413      	add	r3, r2
 8017eea:	b2ca      	uxtb	r2, r1
 8017eec:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	681a      	ldr	r2, [r3, #0]
 8017ef2:	89fb      	ldrh	r3, [r7, #14]
 8017ef4:	18d0      	adds	r0, r2, r3
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	f103 0110 	add.w	r1, r3, #16
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	7b1b      	ldrb	r3, [r3, #12]
 8017f00:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017f04:	b2db      	uxtb	r3, r3
 8017f06:	b29b      	uxth	r3, r3
 8017f08:	461a      	mov	r2, r3
 8017f0a:	f002 fc28 	bl	801a75e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	7b1b      	ldrb	r3, [r3, #12]
 8017f12:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017f16:	b2db      	uxtb	r3, r3
 8017f18:	b29a      	uxth	r2, r3
 8017f1a:	89fb      	ldrh	r3, [r7, #14]
 8017f1c:	4413      	add	r3, r2
 8017f1e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d009      	beq.n	8017f3e <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	681a      	ldr	r2, [r3, #0]
 8017f2e:	89fb      	ldrh	r3, [r7, #14]
 8017f30:	1c59      	adds	r1, r3, #1
 8017f32:	81f9      	strh	r1, [r7, #14]
 8017f34:	4413      	add	r3, r2
 8017f36:	687a      	ldr	r2, [r7, #4]
 8017f38:	f892 2020 	ldrb.w	r2, [r2, #32]
 8017f3c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	681a      	ldr	r2, [r3, #0]
 8017f42:	89fb      	ldrh	r3, [r7, #14]
 8017f44:	18d0      	adds	r0, r2, r3
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017f50:	b29b      	uxth	r3, r3
 8017f52:	461a      	mov	r2, r3
 8017f54:	f002 fc03 	bl	801a75e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017f5e:	b29a      	uxth	r2, r3
 8017f60:	89fb      	ldrh	r3, [r7, #14]
 8017f62:	4413      	add	r3, r2
 8017f64:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	681a      	ldr	r2, [r3, #0]
 8017f6e:	89fb      	ldrh	r3, [r7, #14]
 8017f70:	1c58      	adds	r0, r3, #1
 8017f72:	81f8      	strh	r0, [r7, #14]
 8017f74:	4413      	add	r3, r2
 8017f76:	b2ca      	uxtb	r2, r1
 8017f78:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f7e:	0a19      	lsrs	r1, r3, #8
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	681a      	ldr	r2, [r3, #0]
 8017f84:	89fb      	ldrh	r3, [r7, #14]
 8017f86:	1c58      	adds	r0, r3, #1
 8017f88:	81f8      	strh	r0, [r7, #14]
 8017f8a:	4413      	add	r3, r2
 8017f8c:	b2ca      	uxtb	r2, r1
 8017f8e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f94:	0c19      	lsrs	r1, r3, #16
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	681a      	ldr	r2, [r3, #0]
 8017f9a:	89fb      	ldrh	r3, [r7, #14]
 8017f9c:	1c58      	adds	r0, r3, #1
 8017f9e:	81f8      	strh	r0, [r7, #14]
 8017fa0:	4413      	add	r3, r2
 8017fa2:	b2ca      	uxtb	r2, r1
 8017fa4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017faa:	0e19      	lsrs	r1, r3, #24
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	681a      	ldr	r2, [r3, #0]
 8017fb0:	89fb      	ldrh	r3, [r7, #14]
 8017fb2:	1c58      	adds	r0, r3, #1
 8017fb4:	81f8      	strh	r0, [r7, #14]
 8017fb6:	4413      	add	r3, r2
 8017fb8:	b2ca      	uxtb	r2, r1
 8017fba:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017fbc:	89fb      	ldrh	r3, [r7, #14]
 8017fbe:	b2da      	uxtb	r2, r3
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017fc4:	2300      	movs	r3, #0
}
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	3710      	adds	r7, #16
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	bd80      	pop	{r7, pc}

08017fce <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8017fce:	b480      	push	{r7}
 8017fd0:	b083      	sub	sp, #12
 8017fd2:	af00      	add	r7, sp, #0
 8017fd4:	4603      	mov	r3, r0
 8017fd6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017fd8:	79fb      	ldrb	r3, [r7, #7]
 8017fda:	2b08      	cmp	r3, #8
 8017fdc:	d101      	bne.n	8017fe2 <RegionIsActive+0x14>
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8017fde:	2301      	movs	r3, #1
 8017fe0:	e000      	b.n	8017fe4 <RegionIsActive+0x16>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8017fe2:	2300      	movs	r3, #0
        }
    }
}
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	370c      	adds	r7, #12
 8017fe8:	46bd      	mov	sp, r7
 8017fea:	bc80      	pop	{r7}
 8017fec:	4770      	bx	lr

08017fee <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8017fee:	b580      	push	{r7, lr}
 8017ff0:	b084      	sub	sp, #16
 8017ff2:	af00      	add	r7, sp, #0
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	6039      	str	r1, [r7, #0]
 8017ff8:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	60bb      	str	r3, [r7, #8]
    switch( region )
 8017ffe:	79fb      	ldrb	r3, [r7, #7]
 8018000:	2b08      	cmp	r3, #8
 8018002:	d105      	bne.n	8018010 <RegionGetPhyParam+0x22>
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8018004:	6838      	ldr	r0, [r7, #0]
 8018006:	f001 fa11 	bl	801942c <RegionUS915GetPhyParam>
 801800a:	4603      	mov	r3, r0
 801800c:	60fb      	str	r3, [r7, #12]
 801800e:	e001      	b.n	8018014 <RegionGetPhyParam+0x26>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8018010:	68bb      	ldr	r3, [r7, #8]
 8018012:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	4618      	mov	r0, r3
 8018018:	3710      	adds	r7, #16
 801801a:	46bd      	mov	sp, r7
 801801c:	bd80      	pop	{r7, pc}

0801801e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801801e:	b580      	push	{r7, lr}
 8018020:	b082      	sub	sp, #8
 8018022:	af00      	add	r7, sp, #0
 8018024:	4603      	mov	r3, r0
 8018026:	6039      	str	r1, [r7, #0]
 8018028:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801802a:	79fb      	ldrb	r3, [r7, #7]
 801802c:	2b08      	cmp	r3, #8
 801802e:	d103      	bne.n	8018038 <RegionSetBandTxDone+0x1a>
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
 8018030:	6838      	ldr	r0, [r7, #0]
 8018032:	f001 fb57 	bl	80196e4 <RegionUS915SetBandTxDone>
 8018036:	e000      	b.n	801803a <RegionSetBandTxDone+0x1c>
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8018038:	bf00      	nop
        }
    }
}
 801803a:	3708      	adds	r7, #8
 801803c:	46bd      	mov	sp, r7
 801803e:	bd80      	pop	{r7, pc}

08018040 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8018040:	b580      	push	{r7, lr}
 8018042:	b082      	sub	sp, #8
 8018044:	af00      	add	r7, sp, #0
 8018046:	4603      	mov	r3, r0
 8018048:	6039      	str	r1, [r7, #0]
 801804a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801804c:	79fb      	ldrb	r3, [r7, #7]
 801804e:	2b08      	cmp	r3, #8
 8018050:	d103      	bne.n	801805a <RegionInitDefaults+0x1a>
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
 8018052:	6838      	ldr	r0, [r7, #0]
 8018054:	f001 fb72 	bl	801973c <RegionUS915InitDefaults>
 8018058:	e000      	b.n	801805c <RegionInitDefaults+0x1c>
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801805a:	bf00      	nop
        }
    }
}
 801805c:	bf00      	nop
 801805e:	3708      	adds	r7, #8
 8018060:	46bd      	mov	sp, r7
 8018062:	bd80      	pop	{r7, pc}

08018064 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b082      	sub	sp, #8
 8018068:	af00      	add	r7, sp, #0
 801806a:	4603      	mov	r3, r0
 801806c:	6039      	str	r1, [r7, #0]
 801806e:	71fb      	strb	r3, [r7, #7]
 8018070:	4613      	mov	r3, r2
 8018072:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8018074:	79fb      	ldrb	r3, [r7, #7]
 8018076:	2b08      	cmp	r3, #8
 8018078:	d106      	bne.n	8018088 <RegionVerify+0x24>
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 801807a:	79bb      	ldrb	r3, [r7, #6]
 801807c:	4619      	mov	r1, r3
 801807e:	6838      	ldr	r0, [r7, #0]
 8018080:	f001 fc8e 	bl	80199a0 <RegionUS915Verify>
 8018084:	4603      	mov	r3, r0
 8018086:	e000      	b.n	801808a <RegionVerify+0x26>
        RU864_VERIFY( );
        default:
        {
            return false;
 8018088:	2300      	movs	r3, #0
        }
    }
}
 801808a:	4618      	mov	r0, r3
 801808c:	3708      	adds	r7, #8
 801808e:	46bd      	mov	sp, r7
 8018090:	bd80      	pop	{r7, pc}

08018092 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8018092:	b580      	push	{r7, lr}
 8018094:	b082      	sub	sp, #8
 8018096:	af00      	add	r7, sp, #0
 8018098:	4603      	mov	r3, r0
 801809a:	6039      	str	r1, [r7, #0]
 801809c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801809e:	79fb      	ldrb	r3, [r7, #7]
 80180a0:	2b08      	cmp	r3, #8
 80180a2:	d103      	bne.n	80180ac <RegionApplyCFList+0x1a>
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
 80180a4:	6838      	ldr	r0, [r7, #0]
 80180a6:	f001 fcf1 	bl	8019a8c <RegionUS915ApplyCFList>
 80180aa:	e000      	b.n	80180ae <RegionApplyCFList+0x1c>
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80180ac:	bf00      	nop
        }
    }
}
 80180ae:	bf00      	nop
 80180b0:	3708      	adds	r7, #8
 80180b2:	46bd      	mov	sp, r7
 80180b4:	bd80      	pop	{r7, pc}

080180b6 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80180b6:	b580      	push	{r7, lr}
 80180b8:	b082      	sub	sp, #8
 80180ba:	af00      	add	r7, sp, #0
 80180bc:	4603      	mov	r3, r0
 80180be:	6039      	str	r1, [r7, #0]
 80180c0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80180c2:	79fb      	ldrb	r3, [r7, #7]
 80180c4:	2b08      	cmp	r3, #8
 80180c6:	d104      	bne.n	80180d2 <RegionChanMaskSet+0x1c>
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 80180c8:	6838      	ldr	r0, [r7, #0]
 80180ca:	f001 fd53 	bl	8019b74 <RegionUS915ChanMaskSet>
 80180ce:	4603      	mov	r3, r0
 80180d0:	e000      	b.n	80180d4 <RegionChanMaskSet+0x1e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80180d2:	2300      	movs	r3, #0
        }
    }
}
 80180d4:	4618      	mov	r0, r3
 80180d6:	3708      	adds	r7, #8
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd80      	pop	{r7, pc}

080180dc <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b082      	sub	sp, #8
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	603b      	str	r3, [r7, #0]
 80180e4:	4603      	mov	r3, r0
 80180e6:	71fb      	strb	r3, [r7, #7]
 80180e8:	460b      	mov	r3, r1
 80180ea:	71bb      	strb	r3, [r7, #6]
 80180ec:	4613      	mov	r3, r2
 80180ee:	717b      	strb	r3, [r7, #5]
    switch( region )
 80180f0:	79fb      	ldrb	r3, [r7, #7]
 80180f2:	2b08      	cmp	r3, #8
 80180f4:	d107      	bne.n	8018106 <RegionComputeRxWindowParameters+0x2a>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 80180f6:	7979      	ldrb	r1, [r7, #5]
 80180f8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80180fc:	693b      	ldr	r3, [r7, #16]
 80180fe:	683a      	ldr	r2, [r7, #0]
 8018100:	f001 fda0 	bl	8019c44 <RegionUS915ComputeRxWindowParameters>
 8018104:	e000      	b.n	8018108 <RegionComputeRxWindowParameters+0x2c>
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8018106:	bf00      	nop
        }
    }
}
 8018108:	bf00      	nop
 801810a:	3708      	adds	r7, #8
 801810c:	46bd      	mov	sp, r7
 801810e:	bd80      	pop	{r7, pc}

08018110 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018110:	b580      	push	{r7, lr}
 8018112:	b084      	sub	sp, #16
 8018114:	af00      	add	r7, sp, #0
 8018116:	4603      	mov	r3, r0
 8018118:	60b9      	str	r1, [r7, #8]
 801811a:	607a      	str	r2, [r7, #4]
 801811c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801811e:	7bfb      	ldrb	r3, [r7, #15]
 8018120:	2b08      	cmp	r3, #8
 8018122:	d105      	bne.n	8018130 <RegionRxConfig+0x20>
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8018124:	6879      	ldr	r1, [r7, #4]
 8018126:	68b8      	ldr	r0, [r7, #8]
 8018128:	f001 fdd6 	bl	8019cd8 <RegionUS915RxConfig>
 801812c:	4603      	mov	r3, r0
 801812e:	e000      	b.n	8018132 <RegionRxConfig+0x22>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8018130:	2300      	movs	r3, #0
        }
    }
}
 8018132:	4618      	mov	r0, r3
 8018134:	3710      	adds	r7, #16
 8018136:	46bd      	mov	sp, r7
 8018138:	bd80      	pop	{r7, pc}

0801813a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801813a:	b580      	push	{r7, lr}
 801813c:	b084      	sub	sp, #16
 801813e:	af00      	add	r7, sp, #0
 8018140:	60b9      	str	r1, [r7, #8]
 8018142:	607a      	str	r2, [r7, #4]
 8018144:	603b      	str	r3, [r7, #0]
 8018146:	4603      	mov	r3, r0
 8018148:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801814a:	7bfb      	ldrb	r3, [r7, #15]
 801814c:	2b08      	cmp	r3, #8
 801814e:	d106      	bne.n	801815e <RegionTxConfig+0x24>
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8018150:	683a      	ldr	r2, [r7, #0]
 8018152:	6879      	ldr	r1, [r7, #4]
 8018154:	68b8      	ldr	r0, [r7, #8]
 8018156:	f001 fe43 	bl	8019de0 <RegionUS915TxConfig>
 801815a:	4603      	mov	r3, r0
 801815c:	e000      	b.n	8018160 <RegionTxConfig+0x26>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801815e:	2300      	movs	r3, #0
        }
    }
}
 8018160:	4618      	mov	r0, r3
 8018162:	3710      	adds	r7, #16
 8018164:	46bd      	mov	sp, r7
 8018166:	bd80      	pop	{r7, pc}

08018168 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018168:	b580      	push	{r7, lr}
 801816a:	b086      	sub	sp, #24
 801816c:	af02      	add	r7, sp, #8
 801816e:	60b9      	str	r1, [r7, #8]
 8018170:	607a      	str	r2, [r7, #4]
 8018172:	603b      	str	r3, [r7, #0]
 8018174:	4603      	mov	r3, r0
 8018176:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8018178:	7bfb      	ldrb	r3, [r7, #15]
 801817a:	2b08      	cmp	r3, #8
 801817c:	d109      	bne.n	8018192 <RegionLinkAdrReq+0x2a>
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 801817e:	69fb      	ldr	r3, [r7, #28]
 8018180:	9300      	str	r3, [sp, #0]
 8018182:	69bb      	ldr	r3, [r7, #24]
 8018184:	683a      	ldr	r2, [r7, #0]
 8018186:	6879      	ldr	r1, [r7, #4]
 8018188:	68b8      	ldr	r0, [r7, #8]
 801818a:	f001 fed3 	bl	8019f34 <RegionUS915LinkAdrReq>
 801818e:	4603      	mov	r3, r0
 8018190:	e000      	b.n	8018194 <RegionLinkAdrReq+0x2c>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8018192:	2300      	movs	r3, #0
        }
    }
}
 8018194:	4618      	mov	r0, r3
 8018196:	3710      	adds	r7, #16
 8018198:	46bd      	mov	sp, r7
 801819a:	bd80      	pop	{r7, pc}

0801819c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801819c:	b580      	push	{r7, lr}
 801819e:	b082      	sub	sp, #8
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	4603      	mov	r3, r0
 80181a4:	6039      	str	r1, [r7, #0]
 80181a6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80181a8:	79fb      	ldrb	r3, [r7, #7]
 80181aa:	2b08      	cmp	r3, #8
 80181ac:	d104      	bne.n	80181b8 <RegionRxParamSetupReq+0x1c>
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 80181ae:	6838      	ldr	r0, [r7, #0]
 80181b0:	f002 f8da 	bl	801a368 <RegionUS915RxParamSetupReq>
 80181b4:	4603      	mov	r3, r0
 80181b6:	e000      	b.n	80181ba <RegionRxParamSetupReq+0x1e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80181b8:	2300      	movs	r3, #0
        }
    }
}
 80181ba:	4618      	mov	r0, r3
 80181bc:	3708      	adds	r7, #8
 80181be:	46bd      	mov	sp, r7
 80181c0:	bd80      	pop	{r7, pc}

080181c2 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80181c2:	b580      	push	{r7, lr}
 80181c4:	b082      	sub	sp, #8
 80181c6:	af00      	add	r7, sp, #0
 80181c8:	4603      	mov	r3, r0
 80181ca:	6039      	str	r1, [r7, #0]
 80181cc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80181ce:	79fb      	ldrb	r3, [r7, #7]
 80181d0:	2b08      	cmp	r3, #8
 80181d2:	d104      	bne.n	80181de <RegionNewChannelReq+0x1c>
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 80181d4:	6838      	ldr	r0, [r7, #0]
 80181d6:	f002 f913 	bl	801a400 <RegionUS915NewChannelReq>
 80181da:	4603      	mov	r3, r0
 80181dc:	e000      	b.n	80181e0 <RegionNewChannelReq+0x1e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80181de:	2300      	movs	r3, #0
        }
    }
}
 80181e0:	4618      	mov	r0, r3
 80181e2:	3708      	adds	r7, #8
 80181e4:	46bd      	mov	sp, r7
 80181e6:	bd80      	pop	{r7, pc}

080181e8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b082      	sub	sp, #8
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	4603      	mov	r3, r0
 80181f0:	6039      	str	r1, [r7, #0]
 80181f2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80181f4:	79fb      	ldrb	r3, [r7, #7]
 80181f6:	2b08      	cmp	r3, #8
 80181f8:	d104      	bne.n	8018204 <RegionTxParamSetupReq+0x1c>
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 80181fa:	6838      	ldr	r0, [r7, #0]
 80181fc:	f002 f90b 	bl	801a416 <RegionUS915TxParamSetupReq>
 8018200:	4603      	mov	r3, r0
 8018202:	e000      	b.n	8018206 <RegionTxParamSetupReq+0x1e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8018204:	2300      	movs	r3, #0
        }
    }
}
 8018206:	4618      	mov	r0, r3
 8018208:	3708      	adds	r7, #8
 801820a:	46bd      	mov	sp, r7
 801820c:	bd80      	pop	{r7, pc}

0801820e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801820e:	b580      	push	{r7, lr}
 8018210:	b082      	sub	sp, #8
 8018212:	af00      	add	r7, sp, #0
 8018214:	4603      	mov	r3, r0
 8018216:	6039      	str	r1, [r7, #0]
 8018218:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801821a:	79fb      	ldrb	r3, [r7, #7]
 801821c:	2b08      	cmp	r3, #8
 801821e:	d104      	bne.n	801822a <RegionDlChannelReq+0x1c>
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8018220:	6838      	ldr	r0, [r7, #0]
 8018222:	f002 f903 	bl	801a42c <RegionUS915DlChannelReq>
 8018226:	4603      	mov	r3, r0
 8018228:	e000      	b.n	801822c <RegionDlChannelReq+0x1e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801822a:	2300      	movs	r3, #0
        }
    }
}
 801822c:	4618      	mov	r0, r3
 801822e:	3708      	adds	r7, #8
 8018230:	46bd      	mov	sp, r7
 8018232:	bd80      	pop	{r7, pc}

08018234 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8018234:	b580      	push	{r7, lr}
 8018236:	b082      	sub	sp, #8
 8018238:	af00      	add	r7, sp, #0
 801823a:	4603      	mov	r3, r0
 801823c:	71fb      	strb	r3, [r7, #7]
 801823e:	460b      	mov	r3, r1
 8018240:	71bb      	strb	r3, [r7, #6]
 8018242:	4613      	mov	r3, r2
 8018244:	717b      	strb	r3, [r7, #5]
    switch( region )
 8018246:	79fb      	ldrb	r3, [r7, #7]
 8018248:	2b08      	cmp	r3, #8
 801824a:	d108      	bne.n	801825e <RegionAlternateDr+0x2a>
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 801824c:	797a      	ldrb	r2, [r7, #5]
 801824e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018252:	4611      	mov	r1, r2
 8018254:	4618      	mov	r0, r3
 8018256:	f002 f8f5 	bl	801a444 <RegionUS915AlternateDr>
 801825a:	4603      	mov	r3, r0
 801825c:	e000      	b.n	8018260 <RegionAlternateDr+0x2c>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801825e:	2300      	movs	r3, #0
        }
    }
}
 8018260:	4618      	mov	r0, r3
 8018262:	3708      	adds	r7, #8
 8018264:	46bd      	mov	sp, r7
 8018266:	bd80      	pop	{r7, pc}

08018268 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018268:	b580      	push	{r7, lr}
 801826a:	b084      	sub	sp, #16
 801826c:	af00      	add	r7, sp, #0
 801826e:	60b9      	str	r1, [r7, #8]
 8018270:	607a      	str	r2, [r7, #4]
 8018272:	603b      	str	r3, [r7, #0]
 8018274:	4603      	mov	r3, r0
 8018276:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8018278:	7bfb      	ldrb	r3, [r7, #15]
 801827a:	2b08      	cmp	r3, #8
 801827c:	d107      	bne.n	801828e <RegionNextChannel+0x26>
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 801827e:	69bb      	ldr	r3, [r7, #24]
 8018280:	683a      	ldr	r2, [r7, #0]
 8018282:	6879      	ldr	r1, [r7, #4]
 8018284:	68b8      	ldr	r0, [r7, #8]
 8018286:	f002 f913 	bl	801a4b0 <RegionUS915NextChannel>
 801828a:	4603      	mov	r3, r0
 801828c:	e000      	b.n	8018290 <RegionNextChannel+0x28>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801828e:	2309      	movs	r3, #9
        }
    }
}
 8018290:	4618      	mov	r0, r3
 8018292:	3710      	adds	r7, #16
 8018294:	46bd      	mov	sp, r7
 8018296:	bd80      	pop	{r7, pc}

08018298 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018298:	b590      	push	{r4, r7, lr}
 801829a:	b083      	sub	sp, #12
 801829c:	af00      	add	r7, sp, #0
 801829e:	4604      	mov	r4, r0
 80182a0:	4608      	mov	r0, r1
 80182a2:	4611      	mov	r1, r2
 80182a4:	461a      	mov	r2, r3
 80182a6:	4623      	mov	r3, r4
 80182a8:	71fb      	strb	r3, [r7, #7]
 80182aa:	4603      	mov	r3, r0
 80182ac:	71bb      	strb	r3, [r7, #6]
 80182ae:	460b      	mov	r3, r1
 80182b0:	717b      	strb	r3, [r7, #5]
 80182b2:	4613      	mov	r3, r2
 80182b4:	713b      	strb	r3, [r7, #4]
    switch( region )
 80182b6:	79fb      	ldrb	r3, [r7, #7]
 80182b8:	2b08      	cmp	r3, #8
 80182ba:	d109      	bne.n	80182d0 <RegionApplyDrOffset+0x38>
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 80182bc:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80182c0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80182c4:	79bb      	ldrb	r3, [r7, #6]
 80182c6:	4618      	mov	r0, r3
 80182c8:	f002 f9e0 	bl	801a68c <RegionUS915ApplyDrOffset>
 80182cc:	4603      	mov	r3, r0
 80182ce:	e000      	b.n	80182d2 <RegionApplyDrOffset+0x3a>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80182d0:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80182d2:	4618      	mov	r0, r3
 80182d4:	370c      	adds	r7, #12
 80182d6:	46bd      	mov	sp, r7
 80182d8:	bd90      	pop	{r4, r7, pc}
	...

080182dc <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80182dc:	b480      	push	{r7}
 80182de:	b083      	sub	sp, #12
 80182e0:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80182e2:	4b04      	ldr	r3, [pc, #16]	; (80182f4 <RegionGetVersion+0x18>)
 80182e4:	607b      	str	r3, [r7, #4]

    return version;
 80182e6:	687b      	ldr	r3, [r7, #4]
}
 80182e8:	4618      	mov	r0, r3
 80182ea:	370c      	adds	r7, #12
 80182ec:	46bd      	mov	sp, r7
 80182ee:	bc80      	pop	{r7}
 80182f0:	4770      	bx	lr
 80182f2:	bf00      	nop
 80182f4:	02010001 	.word	0x02010001

080182f8 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 80182f8:	b480      	push	{r7}
 80182fa:	b087      	sub	sp, #28
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	4603      	mov	r3, r0
 8018300:	60b9      	str	r1, [r7, #8]
 8018302:	607a      	str	r2, [r7, #4]
 8018304:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8018306:	68bb      	ldr	r3, [r7, #8]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d002      	beq.n	8018312 <FindAvailable125kHzChannels+0x1a>
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d101      	bne.n	8018316 <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8018312:	2303      	movs	r3, #3
 8018314:	e021      	b.n	801835a <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	2200      	movs	r2, #0
 801831a:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 801831c:	2300      	movs	r3, #0
 801831e:	75fb      	strb	r3, [r7, #23]
 8018320:	e017      	b.n	8018352 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8018322:	89fa      	ldrh	r2, [r7, #14]
 8018324:	7dfb      	ldrb	r3, [r7, #23]
 8018326:	fa42 f303 	asr.w	r3, r2, r3
 801832a:	f003 0301 	and.w	r3, r3, #1
 801832e:	2b00      	cmp	r3, #0
 8018330:	d00c      	beq.n	801834c <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	781b      	ldrb	r3, [r3, #0]
 8018336:	461a      	mov	r2, r3
 8018338:	68bb      	ldr	r3, [r7, #8]
 801833a:	4413      	add	r3, r2
 801833c:	7dfa      	ldrb	r2, [r7, #23]
 801833e:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	781b      	ldrb	r3, [r3, #0]
 8018344:	3301      	adds	r3, #1
 8018346:	b2da      	uxtb	r2, r3
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 801834c:	7dfb      	ldrb	r3, [r7, #23]
 801834e:	3301      	adds	r3, #1
 8018350:	75fb      	strb	r3, [r7, #23]
 8018352:	7dfb      	ldrb	r3, [r7, #23]
 8018354:	2b07      	cmp	r3, #7
 8018356:	d9e4      	bls.n	8018322 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8018358:	2300      	movs	r3, #0
}
 801835a:	4618      	mov	r0, r3
 801835c:	371c      	adds	r7, #28
 801835e:	46bd      	mov	sp, r7
 8018360:	bc80      	pop	{r7}
 8018362:	4770      	bx	lr

08018364 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8018364:	b590      	push	{r4, r7, lr}
 8018366:	b089      	sub	sp, #36	; 0x24
 8018368:	af00      	add	r7, sp, #0
 801836a:	60f8      	str	r0, [r7, #12]
 801836c:	60b9      	str	r1, [r7, #8]
 801836e:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8018370:	2300      	movs	r3, #0
 8018372:	617b      	str	r3, [r7, #20]
 8018374:	2300      	movs	r3, #0
 8018376:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8018378:	2300      	movs	r3, #0
 801837a:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d005      	beq.n	801838e <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8018382:	68bb      	ldr	r3, [r7, #8]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d002      	beq.n	801838e <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d101      	bne.n	8018392 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801838e:	2303      	movs	r3, #3
 8018390:	e055      	b.n	801843e <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8018392:	68bb      	ldr	r3, [r7, #8]
 8018394:	781b      	ldrb	r3, [r3, #0]
 8018396:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8018398:	7f7b      	ldrb	r3, [r7, #29]
 801839a:	085b      	lsrs	r3, r3, #1
 801839c:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 801839e:	7f7b      	ldrb	r3, [r7, #29]
 80183a0:	f003 0301 	and.w	r3, r3, #1
 80183a4:	b2db      	uxtb	r3, r3
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d107      	bne.n	80183ba <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 80183aa:	7f3b      	ldrb	r3, [r7, #28]
 80183ac:	005b      	lsls	r3, r3, #1
 80183ae:	68fa      	ldr	r2, [r7, #12]
 80183b0:	4413      	add	r3, r2
 80183b2:	881b      	ldrh	r3, [r3, #0]
 80183b4:	b2db      	uxtb	r3, r3
 80183b6:	83fb      	strh	r3, [r7, #30]
 80183b8:	e006      	b.n	80183c8 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 80183ba:	7f3b      	ldrb	r3, [r7, #28]
 80183bc:	005b      	lsls	r3, r3, #1
 80183be:	68fa      	ldr	r2, [r7, #12]
 80183c0:	4413      	add	r3, r2
 80183c2:	881b      	ldrh	r3, [r3, #0]
 80183c4:	0a1b      	lsrs	r3, r3, #8
 80183c6:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 80183c8:	f107 0213 	add.w	r2, r7, #19
 80183cc:	f107 0114 	add.w	r1, r7, #20
 80183d0:	8bfb      	ldrh	r3, [r7, #30]
 80183d2:	4618      	mov	r0, r3
 80183d4:	f7ff ff90 	bl	80182f8 <FindAvailable125kHzChannels>
 80183d8:	4603      	mov	r3, r0
 80183da:	2b03      	cmp	r3, #3
 80183dc:	d101      	bne.n	80183e2 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80183de:	2303      	movs	r3, #3
 80183e0:	e02d      	b.n	801843e <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 80183e2:	7cfb      	ldrb	r3, [r7, #19]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d011      	beq.n	801840c <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 80183e8:	7f7b      	ldrb	r3, [r7, #29]
 80183ea:	00db      	lsls	r3, r3, #3
 80183ec:	b2dc      	uxtb	r4, r3
 80183ee:	7cfb      	ldrb	r3, [r7, #19]
 80183f0:	3b01      	subs	r3, #1
 80183f2:	4619      	mov	r1, r3
 80183f4:	2000      	movs	r0, #0
 80183f6:	f002 f99b 	bl	801a730 <randr>
 80183fa:	4603      	mov	r3, r0
 80183fc:	3320      	adds	r3, #32
 80183fe:	443b      	add	r3, r7
 8018400:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8018404:	4423      	add	r3, r4
 8018406:	b2da      	uxtb	r2, r3
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 801840c:	7f7b      	ldrb	r3, [r7, #29]
 801840e:	3301      	adds	r3, #1
 8018410:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8018412:	7f7b      	ldrb	r3, [r7, #29]
 8018414:	2b07      	cmp	r3, #7
 8018416:	d901      	bls.n	801841c <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8018418:	2300      	movs	r3, #0
 801841a:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 801841c:	7cfb      	ldrb	r3, [r7, #19]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d104      	bne.n	801842c <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 8018422:	68bb      	ldr	r3, [r7, #8]
 8018424:	781b      	ldrb	r3, [r3, #0]
 8018426:	7f7a      	ldrb	r2, [r7, #29]
 8018428:	429a      	cmp	r2, r3
 801842a:	d1b5      	bne.n	8018398 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 801842c:	7cfb      	ldrb	r3, [r7, #19]
 801842e:	2b00      	cmp	r3, #0
 8018430:	d004      	beq.n	801843c <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8018432:	68bb      	ldr	r3, [r7, #8]
 8018434:	7f7a      	ldrb	r2, [r7, #29]
 8018436:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018438:	2300      	movs	r3, #0
 801843a:	e000      	b.n	801843e <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 801843c:	2303      	movs	r3, #3
}
 801843e:	4618      	mov	r0, r3
 8018440:	3724      	adds	r7, #36	; 0x24
 8018442:	46bd      	mov	sp, r7
 8018444:	bd90      	pop	{r4, r7, pc}

08018446 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8018446:	b480      	push	{r7}
 8018448:	b085      	sub	sp, #20
 801844a:	af00      	add	r7, sp, #0
 801844c:	4603      	mov	r3, r0
 801844e:	60b9      	str	r1, [r7, #8]
 8018450:	607a      	str	r2, [r7, #4]
 8018452:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8018454:	7bfb      	ldrb	r3, [r7, #15]
 8018456:	687a      	ldr	r2, [r7, #4]
 8018458:	fb03 f202 	mul.w	r2, r3, r2
 801845c:	68bb      	ldr	r3, [r7, #8]
 801845e:	4413      	add	r3, r2
}
 8018460:	4618      	mov	r0, r3
 8018462:	3714      	adds	r7, #20
 8018464:	46bd      	mov	sp, r7
 8018466:	bc80      	pop	{r7}
 8018468:	4770      	bx	lr

0801846a <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801846a:	b480      	push	{r7}
 801846c:	b087      	sub	sp, #28
 801846e:	af00      	add	r7, sp, #0
 8018470:	60f8      	str	r0, [r7, #12]
 8018472:	4608      	mov	r0, r1
 8018474:	4639      	mov	r1, r7
 8018476:	e881 000c 	stmia.w	r1, {r2, r3}
 801847a:	4603      	mov	r3, r0
 801847c:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	881b      	ldrh	r3, [r3, #0]
 8018482:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8018484:	7afb      	ldrb	r3, [r7, #11]
 8018486:	f083 0301 	eor.w	r3, r3, #1
 801848a:	b2db      	uxtb	r3, r3
 801848c:	2b00      	cmp	r3, #0
 801848e:	d01b      	beq.n	80184c8 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8018490:	f242 7310 	movw	r3, #10000	; 0x2710
 8018494:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8018496:	683b      	ldr	r3, [r7, #0]
 8018498:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801849c:	d202      	bcs.n	80184a4 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 801849e:	2364      	movs	r3, #100	; 0x64
 80184a0:	82bb      	strh	r3, [r7, #20]
 80184a2:	e00b      	b.n	80184bc <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80184a4:	683b      	ldr	r3, [r7, #0]
 80184a6:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80184aa:	4293      	cmp	r3, r2
 80184ac:	d803      	bhi.n	80184b6 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80184ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80184b2:	82bb      	strh	r3, [r7, #20]
 80184b4:	e002      	b.n	80184bc <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80184b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80184ba:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80184bc:	8aba      	ldrh	r2, [r7, #20]
 80184be:	8afb      	ldrh	r3, [r7, #22]
 80184c0:	4293      	cmp	r3, r2
 80184c2:	bf38      	it	cc
 80184c4:	4613      	movcc	r3, r2
 80184c6:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80184c8:	8afb      	ldrh	r3, [r7, #22]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d101      	bne.n	80184d2 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80184ce:	2301      	movs	r3, #1
 80184d0:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80184d2:	8afb      	ldrh	r3, [r7, #22]
}
 80184d4:	4618      	mov	r0, r3
 80184d6:	371c      	adds	r7, #28
 80184d8:	46bd      	mov	sp, r7
 80184da:	bc80      	pop	{r7}
 80184dc:	4770      	bx	lr
	...

080184e0 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b08e      	sub	sp, #56	; 0x38
 80184e4:	af02      	add	r7, sp, #8
 80184e6:	60f8      	str	r0, [r7, #12]
 80184e8:	4608      	mov	r0, r1
 80184ea:	4639      	mov	r1, r7
 80184ec:	e881 000c 	stmia.w	r1, {r2, r3}
 80184f0:	4603      	mov	r3, r0
 80184f2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	881b      	ldrh	r3, [r3, #0]
 80184f8:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80184fa:	4b4b      	ldr	r3, [pc, #300]	; (8018628 <SetMaxTimeCredits+0x148>)
 80184fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80184fe:	463b      	mov	r3, r7
 8018500:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018504:	f005 fdb6 	bl	801e074 <SysTimeToMs>
 8018508:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 801850a:	f107 0314 	add.w	r3, r7, #20
 801850e:	2200      	movs	r2, #0
 8018510:	601a      	str	r2, [r3, #0]
 8018512:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8018514:	7af9      	ldrb	r1, [r7, #11]
 8018516:	463b      	mov	r3, r7
 8018518:	cb0c      	ldmia	r3, {r2, r3}
 801851a:	68f8      	ldr	r0, [r7, #12]
 801851c:	f7ff ffa5 	bl	801846a <GetDutyCycle>
 8018520:	4603      	mov	r3, r0
 8018522:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8018524:	7afb      	ldrb	r3, [r7, #11]
 8018526:	f083 0301 	eor.w	r3, r3, #1
 801852a:	b2db      	uxtb	r3, r3
 801852c:	2b00      	cmp	r3, #0
 801852e:	d062      	beq.n	80185f6 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8018530:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018532:	2b64      	cmp	r3, #100	; 0x64
 8018534:	d105      	bne.n	8018542 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8018536:	4b3c      	ldr	r3, [pc, #240]	; (8018628 <SetMaxTimeCredits+0x148>)
 8018538:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801853e:	609a      	str	r2, [r3, #8]
 8018540:	e00b      	b.n	801855a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8018542:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018548:	d105      	bne.n	8018556 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801854a:	4b38      	ldr	r3, [pc, #224]	; (801862c <SetMaxTimeCredits+0x14c>)
 801854c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018552:	609a      	str	r2, [r3, #8]
 8018554:	e001      	b.n	801855a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8018556:	4b36      	ldr	r3, [pc, #216]	; (8018630 <SetMaxTimeCredits+0x150>)
 8018558:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	689a      	ldr	r2, [r3, #8]
 801855e:	f107 031c 	add.w	r3, r7, #28
 8018562:	4611      	mov	r1, r2
 8018564:	4618      	mov	r0, r3
 8018566:	f005 fdad 	bl	801e0c4 <SysTimeFromMs>
 801856a:	f107 0014 	add.w	r0, r7, #20
 801856e:	6a3b      	ldr	r3, [r7, #32]
 8018570:	9300      	str	r3, [sp, #0]
 8018572:	69fb      	ldr	r3, [r7, #28]
 8018574:	463a      	mov	r2, r7
 8018576:	ca06      	ldmia	r2, {r1, r2}
 8018578:	f005 fcbd 	bl	801def6 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801857c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8018580:	f083 0301 	eor.w	r3, r3, #1
 8018584:	b2db      	uxtb	r3, r3
 8018586:	2b00      	cmp	r3, #0
 8018588:	d006      	beq.n	8018598 <SetMaxTimeCredits+0xb8>
 801858a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801858e:	f083 0301 	eor.w	r3, r3, #1
 8018592:	b2db      	uxtb	r3, r3
 8018594:	2b00      	cmp	r3, #0
 8018596:	d108      	bne.n	80185aa <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801859c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801859e:	429a      	cmp	r2, r3
 80185a0:	d103      	bne.n	80185aa <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80185a2:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80185a4:	4a23      	ldr	r2, [pc, #140]	; (8018634 <SetMaxTimeCredits+0x154>)
 80185a6:	4293      	cmp	r3, r2
 80185a8:	d92f      	bls.n	801860a <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80185ae:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80185b0:	683b      	ldr	r3, [r7, #0]
 80185b2:	4a21      	ldr	r2, [pc, #132]	; (8018638 <SetMaxTimeCredits+0x158>)
 80185b4:	4293      	cmp	r3, r2
 80185b6:	d928      	bls.n	801860a <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80185b8:	683b      	ldr	r3, [r7, #0]
 80185ba:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80185be:	3b30      	subs	r3, #48	; 0x30
 80185c0:	4a1e      	ldr	r2, [pc, #120]	; (801863c <SetMaxTimeCredits+0x15c>)
 80185c2:	fba2 2303 	umull	r2, r3, r2, r3
 80185c6:	0c1b      	lsrs	r3, r3, #16
 80185c8:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80185ca:	697b      	ldr	r3, [r7, #20]
 80185cc:	4a1c      	ldr	r2, [pc, #112]	; (8018640 <SetMaxTimeCredits+0x160>)
 80185ce:	fb02 f303 	mul.w	r3, r2, r3
 80185d2:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80185d4:	697b      	ldr	r3, [r7, #20]
 80185d6:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80185da:	3330      	adds	r3, #48	; 0x30
 80185dc:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80185de:	2300      	movs	r3, #0
 80185e0:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80185e2:	f107 0314 	add.w	r3, r7, #20
 80185e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80185ea:	f005 fd43 	bl	801e074 <SysTimeToMs>
 80185ee:	4602      	mov	r2, r0
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	609a      	str	r2, [r3, #8]
 80185f4:	e009      	b.n	801860a <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80185f6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80185fa:	f083 0301 	eor.w	r3, r3, #1
 80185fe:	b2db      	uxtb	r3, r3
 8018600:	2b00      	cmp	r3, #0
 8018602:	d002      	beq.n	801860a <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018608:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	685b      	ldr	r3, [r3, #4]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d102      	bne.n	8018618 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018616:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801861c:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801861e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8018620:	4618      	mov	r0, r3
 8018622:	3730      	adds	r7, #48	; 0x30
 8018624:	46bd      	mov	sp, r7
 8018626:	bd80      	pop	{r7, pc}
 8018628:	001b7740 	.word	0x001b7740
 801862c:	0112a880 	.word	0x0112a880
 8018630:	02932e00 	.word	0x02932e00
 8018634:	0001517f 	.word	0x0001517f
 8018638:	0001ec2f 	.word	0x0001ec2f
 801863c:	c22e4507 	.word	0xc22e4507
 8018640:	00015180 	.word	0x00015180

08018644 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8018644:	b580      	push	{r7, lr}
 8018646:	b086      	sub	sp, #24
 8018648:	af02      	add	r7, sp, #8
 801864a:	6078      	str	r0, [r7, #4]
 801864c:	4608      	mov	r0, r1
 801864e:	4611      	mov	r1, r2
 8018650:	461a      	mov	r2, r3
 8018652:	4603      	mov	r3, r0
 8018654:	70fb      	strb	r3, [r7, #3]
 8018656:	460b      	mov	r3, r1
 8018658:	70bb      	strb	r3, [r7, #2]
 801865a:	4613      	mov	r3, r2
 801865c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801865e:	78f9      	ldrb	r1, [r7, #3]
 8018660:	787b      	ldrb	r3, [r7, #1]
 8018662:	9301      	str	r3, [sp, #4]
 8018664:	78bb      	ldrb	r3, [r7, #2]
 8018666:	9300      	str	r3, [sp, #0]
 8018668:	f107 0318 	add.w	r3, r7, #24
 801866c:	cb0c      	ldmia	r3, {r2, r3}
 801866e:	6878      	ldr	r0, [r7, #4]
 8018670:	f7ff ff36 	bl	80184e0 <SetMaxTimeCredits>
 8018674:	4603      	mov	r3, r0
 8018676:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8018678:	78fb      	ldrb	r3, [r7, #3]
 801867a:	2b00      	cmp	r3, #0
 801867c:	d00a      	beq.n	8018694 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	685b      	ldr	r3, [r3, #4]
 8018682:	4618      	mov	r0, r3
 8018684:	f006 fb32 	bl	801ecec <UTIL_TIMER_GetElapsedTime>
 8018688:	4602      	mov	r2, r0
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	68db      	ldr	r3, [r3, #12]
 801868e:	441a      	add	r2, r3
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	68da      	ldr	r2, [r3, #12]
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	691b      	ldr	r3, [r3, #16]
 801869c:	429a      	cmp	r2, r3
 801869e:	d903      	bls.n	80186a8 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	691a      	ldr	r2, [r3, #16]
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	6a3a      	ldr	r2, [r7, #32]
 80186ac:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80186ae:	89fb      	ldrh	r3, [r7, #14]
}
 80186b0:	4618      	mov	r0, r3
 80186b2:	3710      	adds	r7, #16
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}

080186b8 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80186b8:	b480      	push	{r7}
 80186ba:	b085      	sub	sp, #20
 80186bc:	af00      	add	r7, sp, #0
 80186be:	4603      	mov	r3, r0
 80186c0:	460a      	mov	r2, r1
 80186c2:	80fb      	strh	r3, [r7, #6]
 80186c4:	4613      	mov	r3, r2
 80186c6:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80186c8:	2300      	movs	r3, #0
 80186ca:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80186cc:	2300      	movs	r3, #0
 80186ce:	73bb      	strb	r3, [r7, #14]
 80186d0:	e011      	b.n	80186f6 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80186d2:	88fa      	ldrh	r2, [r7, #6]
 80186d4:	7bbb      	ldrb	r3, [r7, #14]
 80186d6:	2101      	movs	r1, #1
 80186d8:	fa01 f303 	lsl.w	r3, r1, r3
 80186dc:	401a      	ands	r2, r3
 80186de:	7bbb      	ldrb	r3, [r7, #14]
 80186e0:	2101      	movs	r1, #1
 80186e2:	fa01 f303 	lsl.w	r3, r1, r3
 80186e6:	429a      	cmp	r2, r3
 80186e8:	d102      	bne.n	80186f0 <CountChannels+0x38>
        {
            nbActiveBits++;
 80186ea:	7bfb      	ldrb	r3, [r7, #15]
 80186ec:	3301      	adds	r3, #1
 80186ee:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80186f0:	7bbb      	ldrb	r3, [r7, #14]
 80186f2:	3301      	adds	r3, #1
 80186f4:	73bb      	strb	r3, [r7, #14]
 80186f6:	7bba      	ldrb	r2, [r7, #14]
 80186f8:	797b      	ldrb	r3, [r7, #5]
 80186fa:	429a      	cmp	r2, r3
 80186fc:	d3e9      	bcc.n	80186d2 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80186fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8018700:	4618      	mov	r0, r3
 8018702:	3714      	adds	r7, #20
 8018704:	46bd      	mov	sp, r7
 8018706:	bc80      	pop	{r7}
 8018708:	4770      	bx	lr

0801870a <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801870a:	b580      	push	{r7, lr}
 801870c:	b084      	sub	sp, #16
 801870e:	af00      	add	r7, sp, #0
 8018710:	6039      	str	r1, [r7, #0]
 8018712:	4611      	mov	r1, r2
 8018714:	461a      	mov	r2, r3
 8018716:	4603      	mov	r3, r0
 8018718:	71fb      	strb	r3, [r7, #7]
 801871a:	460b      	mov	r3, r1
 801871c:	71bb      	strb	r3, [r7, #6]
 801871e:	4613      	mov	r3, r2
 8018720:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8018722:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8018726:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801872a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801872e:	4618      	mov	r0, r3
 8018730:	f000 f85d 	bl	80187ee <RegionCommonValueInRange>
 8018734:	4603      	mov	r3, r0
 8018736:	2b00      	cmp	r3, #0
 8018738:	d101      	bne.n	801873e <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801873a:	2300      	movs	r3, #0
 801873c:	e053      	b.n	80187e6 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801873e:	2300      	movs	r3, #0
 8018740:	73fb      	strb	r3, [r7, #15]
 8018742:	2300      	movs	r3, #0
 8018744:	73bb      	strb	r3, [r7, #14]
 8018746:	e049      	b.n	80187dc <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018748:	2300      	movs	r3, #0
 801874a:	737b      	strb	r3, [r7, #13]
 801874c:	e03d      	b.n	80187ca <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801874e:	7bbb      	ldrb	r3, [r7, #14]
 8018750:	005b      	lsls	r3, r3, #1
 8018752:	683a      	ldr	r2, [r7, #0]
 8018754:	4413      	add	r3, r2
 8018756:	881b      	ldrh	r3, [r3, #0]
 8018758:	461a      	mov	r2, r3
 801875a:	7b7b      	ldrb	r3, [r7, #13]
 801875c:	fa42 f303 	asr.w	r3, r2, r3
 8018760:	f003 0301 	and.w	r3, r3, #1
 8018764:	2b00      	cmp	r3, #0
 8018766:	d02d      	beq.n	80187c4 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8018768:	7bfa      	ldrb	r2, [r7, #15]
 801876a:	7b7b      	ldrb	r3, [r7, #13]
 801876c:	4413      	add	r3, r2
 801876e:	461a      	mov	r2, r3
 8018770:	4613      	mov	r3, r2
 8018772:	005b      	lsls	r3, r3, #1
 8018774:	4413      	add	r3, r2
 8018776:	009b      	lsls	r3, r3, #2
 8018778:	461a      	mov	r2, r3
 801877a:	69fb      	ldr	r3, [r7, #28]
 801877c:	4413      	add	r3, r2
 801877e:	7a1b      	ldrb	r3, [r3, #8]
 8018780:	f343 0303 	sbfx	r3, r3, #0, #4
 8018784:	b25b      	sxtb	r3, r3
 8018786:	f003 030f 	and.w	r3, r3, #15
 801878a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801878c:	7bfa      	ldrb	r2, [r7, #15]
 801878e:	7b7b      	ldrb	r3, [r7, #13]
 8018790:	4413      	add	r3, r2
 8018792:	461a      	mov	r2, r3
 8018794:	4613      	mov	r3, r2
 8018796:	005b      	lsls	r3, r3, #1
 8018798:	4413      	add	r3, r2
 801879a:	009b      	lsls	r3, r3, #2
 801879c:	461a      	mov	r2, r3
 801879e:	69fb      	ldr	r3, [r7, #28]
 80187a0:	4413      	add	r3, r2
 80187a2:	7a1b      	ldrb	r3, [r3, #8]
 80187a4:	f343 1303 	sbfx	r3, r3, #4, #4
 80187a8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80187aa:	f003 030f 	and.w	r3, r3, #15
 80187ae:	b25a      	sxtb	r2, r3
 80187b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80187b4:	4618      	mov	r0, r3
 80187b6:	f000 f81a 	bl	80187ee <RegionCommonValueInRange>
 80187ba:	4603      	mov	r3, r0
 80187bc:	2b01      	cmp	r3, #1
 80187be:	d101      	bne.n	80187c4 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80187c0:	2301      	movs	r3, #1
 80187c2:	e010      	b.n	80187e6 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80187c4:	7b7b      	ldrb	r3, [r7, #13]
 80187c6:	3301      	adds	r3, #1
 80187c8:	737b      	strb	r3, [r7, #13]
 80187ca:	7b7b      	ldrb	r3, [r7, #13]
 80187cc:	2b0f      	cmp	r3, #15
 80187ce:	d9be      	bls.n	801874e <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80187d0:	7bfb      	ldrb	r3, [r7, #15]
 80187d2:	3310      	adds	r3, #16
 80187d4:	73fb      	strb	r3, [r7, #15]
 80187d6:	7bbb      	ldrb	r3, [r7, #14]
 80187d8:	3301      	adds	r3, #1
 80187da:	73bb      	strb	r3, [r7, #14]
 80187dc:	7bfa      	ldrb	r2, [r7, #15]
 80187de:	79fb      	ldrb	r3, [r7, #7]
 80187e0:	429a      	cmp	r2, r3
 80187e2:	d3b1      	bcc.n	8018748 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80187e4:	2300      	movs	r3, #0
}
 80187e6:	4618      	mov	r0, r3
 80187e8:	3710      	adds	r7, #16
 80187ea:	46bd      	mov	sp, r7
 80187ec:	bd80      	pop	{r7, pc}

080187ee <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80187ee:	b480      	push	{r7}
 80187f0:	b083      	sub	sp, #12
 80187f2:	af00      	add	r7, sp, #0
 80187f4:	4603      	mov	r3, r0
 80187f6:	71fb      	strb	r3, [r7, #7]
 80187f8:	460b      	mov	r3, r1
 80187fa:	71bb      	strb	r3, [r7, #6]
 80187fc:	4613      	mov	r3, r2
 80187fe:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8018800:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8018804:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018808:	429a      	cmp	r2, r3
 801880a:	db07      	blt.n	801881c <RegionCommonValueInRange+0x2e>
 801880c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8018810:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018814:	429a      	cmp	r2, r3
 8018816:	dc01      	bgt.n	801881c <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8018818:	2301      	movs	r3, #1
 801881a:	e000      	b.n	801881e <RegionCommonValueInRange+0x30>
    }
    return 0;
 801881c:	2300      	movs	r3, #0
}
 801881e:	4618      	mov	r0, r3
 8018820:	370c      	adds	r7, #12
 8018822:	46bd      	mov	sp, r7
 8018824:	bc80      	pop	{r7}
 8018826:	4770      	bx	lr

08018828 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8018828:	b480      	push	{r7}
 801882a:	b085      	sub	sp, #20
 801882c:	af00      	add	r7, sp, #0
 801882e:	6078      	str	r0, [r7, #4]
 8018830:	460b      	mov	r3, r1
 8018832:	70fb      	strb	r3, [r7, #3]
 8018834:	4613      	mov	r3, r2
 8018836:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8018838:	78fb      	ldrb	r3, [r7, #3]
 801883a:	091b      	lsrs	r3, r3, #4
 801883c:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801883e:	78bb      	ldrb	r3, [r7, #2]
 8018840:	091b      	lsrs	r3, r3, #4
 8018842:	b2db      	uxtb	r3, r3
 8018844:	7bfa      	ldrb	r2, [r7, #15]
 8018846:	429a      	cmp	r2, r3
 8018848:	d803      	bhi.n	8018852 <RegionCommonChanDisable+0x2a>
 801884a:	78fa      	ldrb	r2, [r7, #3]
 801884c:	78bb      	ldrb	r3, [r7, #2]
 801884e:	429a      	cmp	r2, r3
 8018850:	d301      	bcc.n	8018856 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8018852:	2300      	movs	r3, #0
 8018854:	e017      	b.n	8018886 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8018856:	7bfb      	ldrb	r3, [r7, #15]
 8018858:	005b      	lsls	r3, r3, #1
 801885a:	687a      	ldr	r2, [r7, #4]
 801885c:	4413      	add	r3, r2
 801885e:	881b      	ldrh	r3, [r3, #0]
 8018860:	b21a      	sxth	r2, r3
 8018862:	78fb      	ldrb	r3, [r7, #3]
 8018864:	f003 030f 	and.w	r3, r3, #15
 8018868:	2101      	movs	r1, #1
 801886a:	fa01 f303 	lsl.w	r3, r1, r3
 801886e:	b21b      	sxth	r3, r3
 8018870:	43db      	mvns	r3, r3
 8018872:	b21b      	sxth	r3, r3
 8018874:	4013      	ands	r3, r2
 8018876:	b219      	sxth	r1, r3
 8018878:	7bfb      	ldrb	r3, [r7, #15]
 801887a:	005b      	lsls	r3, r3, #1
 801887c:	687a      	ldr	r2, [r7, #4]
 801887e:	4413      	add	r3, r2
 8018880:	b28a      	uxth	r2, r1
 8018882:	801a      	strh	r2, [r3, #0]

    return true;
 8018884:	2301      	movs	r3, #1
}
 8018886:	4618      	mov	r0, r3
 8018888:	3714      	adds	r7, #20
 801888a:	46bd      	mov	sp, r7
 801888c:	bc80      	pop	{r7}
 801888e:	4770      	bx	lr

08018890 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8018890:	b580      	push	{r7, lr}
 8018892:	b084      	sub	sp, #16
 8018894:	af00      	add	r7, sp, #0
 8018896:	6078      	str	r0, [r7, #4]
 8018898:	460b      	mov	r3, r1
 801889a:	70fb      	strb	r3, [r7, #3]
 801889c:	4613      	mov	r3, r2
 801889e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80188a0:	2300      	movs	r3, #0
 80188a2:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d101      	bne.n	80188ae <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80188aa:	2300      	movs	r3, #0
 80188ac:	e018      	b.n	80188e0 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80188ae:	78fb      	ldrb	r3, [r7, #3]
 80188b0:	73bb      	strb	r3, [r7, #14]
 80188b2:	e010      	b.n	80188d6 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80188b4:	7bbb      	ldrb	r3, [r7, #14]
 80188b6:	005b      	lsls	r3, r3, #1
 80188b8:	687a      	ldr	r2, [r7, #4]
 80188ba:	4413      	add	r3, r2
 80188bc:	881b      	ldrh	r3, [r3, #0]
 80188be:	2110      	movs	r1, #16
 80188c0:	4618      	mov	r0, r3
 80188c2:	f7ff fef9 	bl	80186b8 <CountChannels>
 80188c6:	4603      	mov	r3, r0
 80188c8:	461a      	mov	r2, r3
 80188ca:	7bfb      	ldrb	r3, [r7, #15]
 80188cc:	4413      	add	r3, r2
 80188ce:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80188d0:	7bbb      	ldrb	r3, [r7, #14]
 80188d2:	3301      	adds	r3, #1
 80188d4:	73bb      	strb	r3, [r7, #14]
 80188d6:	7bba      	ldrb	r2, [r7, #14]
 80188d8:	78bb      	ldrb	r3, [r7, #2]
 80188da:	429a      	cmp	r2, r3
 80188dc:	d3ea      	bcc.n	80188b4 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80188de:	7bfb      	ldrb	r3, [r7, #15]
}
 80188e0:	4618      	mov	r0, r3
 80188e2:	3710      	adds	r7, #16
 80188e4:	46bd      	mov	sp, r7
 80188e6:	bd80      	pop	{r7, pc}

080188e8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80188e8:	b480      	push	{r7}
 80188ea:	b087      	sub	sp, #28
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	60f8      	str	r0, [r7, #12]
 80188f0:	60b9      	str	r1, [r7, #8]
 80188f2:	4613      	mov	r3, r2
 80188f4:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d016      	beq.n	801892a <RegionCommonChanMaskCopy+0x42>
 80188fc:	68bb      	ldr	r3, [r7, #8]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d013      	beq.n	801892a <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8018902:	2300      	movs	r3, #0
 8018904:	75fb      	strb	r3, [r7, #23]
 8018906:	e00c      	b.n	8018922 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8018908:	7dfb      	ldrb	r3, [r7, #23]
 801890a:	005b      	lsls	r3, r3, #1
 801890c:	68ba      	ldr	r2, [r7, #8]
 801890e:	441a      	add	r2, r3
 8018910:	7dfb      	ldrb	r3, [r7, #23]
 8018912:	005b      	lsls	r3, r3, #1
 8018914:	68f9      	ldr	r1, [r7, #12]
 8018916:	440b      	add	r3, r1
 8018918:	8812      	ldrh	r2, [r2, #0]
 801891a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801891c:	7dfb      	ldrb	r3, [r7, #23]
 801891e:	3301      	adds	r3, #1
 8018920:	75fb      	strb	r3, [r7, #23]
 8018922:	7dfa      	ldrb	r2, [r7, #23]
 8018924:	79fb      	ldrb	r3, [r7, #7]
 8018926:	429a      	cmp	r2, r3
 8018928:	d3ee      	bcc.n	8018908 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 801892a:	bf00      	nop
 801892c:	371c      	adds	r7, #28
 801892e:	46bd      	mov	sp, r7
 8018930:	bc80      	pop	{r7}
 8018932:	4770      	bx	lr

08018934 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8018934:	b082      	sub	sp, #8
 8018936:	b580      	push	{r7, lr}
 8018938:	b086      	sub	sp, #24
 801893a:	af00      	add	r7, sp, #0
 801893c:	60f8      	str	r0, [r7, #12]
 801893e:	60b9      	str	r1, [r7, #8]
 8018940:	627b      	str	r3, [r7, #36]	; 0x24
 8018942:	4613      	mov	r3, r2
 8018944:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8018946:	79f9      	ldrb	r1, [r7, #7]
 8018948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801894c:	cb0c      	ldmia	r3, {r2, r3}
 801894e:	68f8      	ldr	r0, [r7, #12]
 8018950:	f7ff fd8b 	bl	801846a <GetDutyCycle>
 8018954:	4603      	mov	r3, r0
 8018956:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	68da      	ldr	r2, [r3, #12]
 801895c:	8afb      	ldrh	r3, [r7, #22]
 801895e:	68b9      	ldr	r1, [r7, #8]
 8018960:	fb01 f303 	mul.w	r3, r1, r3
 8018964:	429a      	cmp	r2, r3
 8018966:	d909      	bls.n	801897c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	68da      	ldr	r2, [r3, #12]
 801896c:	8afb      	ldrh	r3, [r7, #22]
 801896e:	68b9      	ldr	r1, [r7, #8]
 8018970:	fb01 f303 	mul.w	r3, r1, r3
 8018974:	1ad2      	subs	r2, r2, r3
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801897a:	e002      	b.n	8018982 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	2200      	movs	r2, #0
 8018980:	60da      	str	r2, [r3, #12]
}
 8018982:	bf00      	nop
 8018984:	3718      	adds	r7, #24
 8018986:	46bd      	mov	sp, r7
 8018988:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801898c:	b002      	add	sp, #8
 801898e:	4770      	bx	lr

08018990 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8018990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018992:	b08f      	sub	sp, #60	; 0x3c
 8018994:	af04      	add	r7, sp, #16
 8018996:	6039      	str	r1, [r7, #0]
 8018998:	4611      	mov	r1, r2
 801899a:	461a      	mov	r2, r3
 801899c:	4603      	mov	r3, r0
 801899e:	71fb      	strb	r3, [r7, #7]
 80189a0:	460b      	mov	r3, r1
 80189a2:	71bb      	strb	r3, [r7, #6]
 80189a4:	4613      	mov	r3, r2
 80189a6:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80189a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80189ac:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80189ae:	f006 f98b 	bl	801ecc8 <UTIL_TIMER_GetCurrentTime>
 80189b2:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 80189b4:	2300      	movs	r3, #0
 80189b6:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 80189b8:	2301      	movs	r3, #1
 80189ba:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 80189bc:	2300      	movs	r3, #0
 80189be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 80189c2:	2300      	movs	r3, #0
 80189c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80189c8:	e0ba      	b.n	8018b40 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80189ca:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80189ce:	4613      	mov	r3, r2
 80189d0:	005b      	lsls	r3, r3, #1
 80189d2:	4413      	add	r3, r2
 80189d4:	00db      	lsls	r3, r3, #3
 80189d6:	461a      	mov	r2, r3
 80189d8:	683b      	ldr	r3, [r7, #0]
 80189da:	189c      	adds	r4, r3, r2
 80189dc:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 80189e0:	797a      	ldrb	r2, [r7, #5]
 80189e2:	79fd      	ldrb	r5, [r7, #7]
 80189e4:	69fb      	ldr	r3, [r7, #28]
 80189e6:	9302      	str	r3, [sp, #8]
 80189e8:	46ec      	mov	ip, sp
 80189ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80189ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80189f2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80189f6:	4633      	mov	r3, r6
 80189f8:	4629      	mov	r1, r5
 80189fa:	4620      	mov	r0, r4
 80189fc:	f7ff fe22 	bl	8018644 <UpdateTimeCredits>
 8018a00:	4603      	mov	r3, r0
 8018a02:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8018a04:	8afa      	ldrh	r2, [r7, #22]
 8018a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a08:	fb02 f303 	mul.w	r3, r2, r3
 8018a0c:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8018a0e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018a12:	4613      	mov	r3, r2
 8018a14:	005b      	lsls	r3, r3, #1
 8018a16:	4413      	add	r3, r2
 8018a18:	00db      	lsls	r3, r3, #3
 8018a1a:	461a      	mov	r2, r3
 8018a1c:	683b      	ldr	r3, [r7, #0]
 8018a1e:	4413      	add	r3, r2
 8018a20:	68db      	ldr	r3, [r3, #12]
 8018a22:	69ba      	ldr	r2, [r7, #24]
 8018a24:	429a      	cmp	r2, r3
 8018a26:	d908      	bls.n	8018a3a <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8018a28:	797b      	ldrb	r3, [r7, #5]
 8018a2a:	f083 0301 	eor.w	r3, r3, #1
 8018a2e:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d013      	beq.n	8018a5c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8018a34:	79fb      	ldrb	r3, [r7, #7]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d010      	beq.n	8018a5c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8018a3a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018a3e:	4613      	mov	r3, r2
 8018a40:	005b      	lsls	r3, r3, #1
 8018a42:	4413      	add	r3, r2
 8018a44:	00db      	lsls	r3, r3, #3
 8018a46:	461a      	mov	r2, r3
 8018a48:	683b      	ldr	r3, [r7, #0]
 8018a4a:	4413      	add	r3, r2
 8018a4c:	2201      	movs	r2, #1
 8018a4e:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8018a50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018a54:	3301      	adds	r3, #1
 8018a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018a5a:	e06c      	b.n	8018b36 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8018a5c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018a60:	4613      	mov	r3, r2
 8018a62:	005b      	lsls	r3, r3, #1
 8018a64:	4413      	add	r3, r2
 8018a66:	00db      	lsls	r3, r3, #3
 8018a68:	461a      	mov	r2, r3
 8018a6a:	683b      	ldr	r3, [r7, #0]
 8018a6c:	4413      	add	r3, r2
 8018a6e:	2200      	movs	r2, #0
 8018a70:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8018a72:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018a76:	4613      	mov	r3, r2
 8018a78:	005b      	lsls	r3, r3, #1
 8018a7a:	4413      	add	r3, r2
 8018a7c:	00db      	lsls	r3, r3, #3
 8018a7e:	461a      	mov	r2, r3
 8018a80:	683b      	ldr	r3, [r7, #0]
 8018a82:	4413      	add	r3, r2
 8018a84:	691b      	ldr	r3, [r3, #16]
 8018a86:	69ba      	ldr	r2, [r7, #24]
 8018a88:	429a      	cmp	r2, r3
 8018a8a:	d815      	bhi.n	8018ab8 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8018a8c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018a90:	4613      	mov	r3, r2
 8018a92:	005b      	lsls	r3, r3, #1
 8018a94:	4413      	add	r3, r2
 8018a96:	00db      	lsls	r3, r3, #3
 8018a98:	461a      	mov	r2, r3
 8018a9a:	683b      	ldr	r3, [r7, #0]
 8018a9c:	4413      	add	r3, r2
 8018a9e:	68db      	ldr	r3, [r3, #12]
 8018aa0:	69ba      	ldr	r2, [r7, #24]
 8018aa2:	1ad3      	subs	r3, r2, r3
 8018aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018aa6:	4293      	cmp	r3, r2
 8018aa8:	bf28      	it	cs
 8018aaa:	4613      	movcs	r3, r2
 8018aac:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8018aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018ab2:	3301      	adds	r3, #1
 8018ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8018ab8:	79fb      	ldrb	r3, [r7, #7]
 8018aba:	f083 0301 	eor.w	r3, r3, #1
 8018abe:	b2db      	uxtb	r3, r3
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d038      	beq.n	8018b36 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	60fb      	str	r3, [r7, #12]
 8018ac8:	2300      	movs	r3, #0
 8018aca:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8018acc:	8afb      	ldrh	r3, [r7, #22]
 8018ace:	2b64      	cmp	r3, #100	; 0x64
 8018ad0:	d103      	bne.n	8018ada <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8018ad2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8018ad6:	60fb      	str	r3, [r7, #12]
 8018ad8:	e009      	b.n	8018aee <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8018ada:	8afb      	ldrh	r3, [r7, #22]
 8018adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018ae0:	d103      	bne.n	8018aea <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8018ae2:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8018ae6:	60fb      	str	r3, [r7, #12]
 8018ae8:	e001      	b.n	8018aee <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8018aea:	4b1e      	ldr	r3, [pc, #120]	; (8018b64 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8018aec:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8018aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018af0:	4a1c      	ldr	r2, [pc, #112]	; (8018b64 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8018af2:	4293      	cmp	r3, r2
 8018af4:	d90e      	bls.n	8018b14 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8018af6:	68fa      	ldr	r2, [r7, #12]
 8018af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018afa:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8018afe:	3b30      	subs	r3, #48	; 0x30
 8018b00:	4919      	ldr	r1, [pc, #100]	; (8018b68 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8018b02:	fba1 1303 	umull	r1, r3, r1, r3
 8018b06:	0c1b      	lsrs	r3, r3, #16
 8018b08:	3301      	adds	r3, #1
 8018b0a:	4918      	ldr	r1, [pc, #96]	; (8018b6c <RegionCommonUpdateBandTimeOff+0x1dc>)
 8018b0c:	fb01 f303 	mul.w	r3, r1, r3
 8018b10:	4413      	add	r3, r2
 8018b12:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8018b14:	f107 000c 	add.w	r0, r7, #12
 8018b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018b1a:	9300      	str	r3, [sp, #0]
 8018b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b1e:	f107 020c 	add.w	r2, r7, #12
 8018b22:	ca06      	ldmia	r2, {r1, r2}
 8018b24:	f005 f9e7 	bl	801def6 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8018b28:	f107 030c 	add.w	r3, r7, #12
 8018b2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018b30:	f005 faa0 	bl	801e074 <SysTimeToMs>
 8018b34:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8018b36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018b3a:	3301      	adds	r3, #1
 8018b3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018b40:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018b44:	79bb      	ldrb	r3, [r7, #6]
 8018b46:	429a      	cmp	r2, r3
 8018b48:	f4ff af3f 	bcc.w	80189ca <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8018b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d102      	bne.n	8018b5a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8018b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b58:	e000      	b.n	8018b5c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8018b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	372c      	adds	r7, #44	; 0x2c
 8018b60:	46bd      	mov	sp, r7
 8018b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b64:	0001ec30 	.word	0x0001ec30
 8018b68:	c22e4507 	.word	0xc22e4507
 8018b6c:	00015180 	.word	0x00015180

08018b70 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8018b70:	b480      	push	{r7}
 8018b72:	b085      	sub	sp, #20
 8018b74:	af00      	add	r7, sp, #0
 8018b76:	6078      	str	r0, [r7, #4]
 8018b78:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	781b      	ldrb	r3, [r3, #0]
 8018b82:	2b03      	cmp	r3, #3
 8018b84:	d13f      	bne.n	8018c06 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	3301      	adds	r3, #1
 8018b8a:	781b      	ldrb	r3, [r3, #0]
 8018b8c:	b25a      	sxtb	r2, r3
 8018b8e:	683b      	ldr	r3, [r7, #0]
 8018b90:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8018b92:	683b      	ldr	r3, [r7, #0]
 8018b94:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018b98:	f003 030f 	and.w	r3, r3, #15
 8018b9c:	b25a      	sxtb	r2, r3
 8018b9e:	683b      	ldr	r3, [r7, #0]
 8018ba0:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8018ba2:	683b      	ldr	r3, [r7, #0]
 8018ba4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ba8:	b2db      	uxtb	r3, r3
 8018baa:	091b      	lsrs	r3, r3, #4
 8018bac:	b2db      	uxtb	r3, r3
 8018bae:	b25a      	sxtb	r2, r3
 8018bb0:	683b      	ldr	r3, [r7, #0]
 8018bb2:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	3302      	adds	r3, #2
 8018bb8:	781b      	ldrb	r3, [r3, #0]
 8018bba:	b29a      	uxth	r2, r3
 8018bbc:	683b      	ldr	r3, [r7, #0]
 8018bbe:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8018bc0:	683b      	ldr	r3, [r7, #0]
 8018bc2:	889b      	ldrh	r3, [r3, #4]
 8018bc4:	b21a      	sxth	r2, r3
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	3303      	adds	r3, #3
 8018bca:	781b      	ldrb	r3, [r3, #0]
 8018bcc:	021b      	lsls	r3, r3, #8
 8018bce:	b21b      	sxth	r3, r3
 8018bd0:	4313      	orrs	r3, r2
 8018bd2:	b21b      	sxth	r3, r3
 8018bd4:	b29a      	uxth	r2, r3
 8018bd6:	683b      	ldr	r3, [r7, #0]
 8018bd8:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	791a      	ldrb	r2, [r3, #4]
 8018bde:	683b      	ldr	r3, [r7, #0]
 8018be0:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8018be2:	683b      	ldr	r3, [r7, #0]
 8018be4:	781b      	ldrb	r3, [r3, #0]
 8018be6:	091b      	lsrs	r3, r3, #4
 8018be8:	b2db      	uxtb	r3, r3
 8018bea:	f003 0307 	and.w	r3, r3, #7
 8018bee:	b2da      	uxtb	r2, r3
 8018bf0:	683b      	ldr	r3, [r7, #0]
 8018bf2:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8018bf4:	683b      	ldr	r3, [r7, #0]
 8018bf6:	781b      	ldrb	r3, [r3, #0]
 8018bf8:	f003 030f 	and.w	r3, r3, #15
 8018bfc:	b2da      	uxtb	r2, r3
 8018bfe:	683b      	ldr	r3, [r7, #0]
 8018c00:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8018c02:	2305      	movs	r3, #5
 8018c04:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8018c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c08:	4618      	mov	r0, r3
 8018c0a:	3714      	adds	r7, #20
 8018c0c:	46bd      	mov	sp, r7
 8018c0e:	bc80      	pop	{r7}
 8018c10:	4770      	bx	lr

08018c12 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8018c12:	b5b0      	push	{r4, r5, r7, lr}
 8018c14:	b088      	sub	sp, #32
 8018c16:	af02      	add	r7, sp, #8
 8018c18:	60f8      	str	r0, [r7, #12]
 8018c1a:	60b9      	str	r1, [r7, #8]
 8018c1c:	607a      	str	r2, [r7, #4]
 8018c1e:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	791b      	ldrb	r3, [r3, #4]
 8018c24:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	799b      	ldrb	r3, [r3, #6]
 8018c2a:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	79db      	ldrb	r3, [r3, #7]
 8018c30:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8018c32:	68fb      	ldr	r3, [r7, #12]
 8018c34:	7a1b      	ldrb	r3, [r3, #8]
 8018c36:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	795b      	ldrb	r3, [r3, #5]
 8018c3c:	f083 0301 	eor.w	r3, r3, #1
 8018c40:	b2db      	uxtb	r3, r3
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d008      	beq.n	8018c58 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	7adb      	ldrb	r3, [r3, #11]
 8018c4a:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	7a5b      	ldrb	r3, [r3, #9]
 8018c50:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	7a9b      	ldrb	r3, [r3, #10]
 8018c56:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8018c58:	7dfb      	ldrb	r3, [r7, #23]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d04a      	beq.n	8018cf4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8018c5e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8018c62:	2b0f      	cmp	r3, #15
 8018c64:	d103      	bne.n	8018c6e <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	7a5b      	ldrb	r3, [r3, #9]
 8018c6a:	75bb      	strb	r3, [r7, #22]
 8018c6c:	e01d      	b.n	8018caa <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	7b18      	ldrb	r0, [r3, #12]
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	6919      	ldr	r1, [r3, #16]
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8018c82:	68fa      	ldr	r2, [r7, #12]
 8018c84:	6992      	ldr	r2, [r2, #24]
 8018c86:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8018c8a:	9201      	str	r2, [sp, #4]
 8018c8c:	9300      	str	r3, [sp, #0]
 8018c8e:	462b      	mov	r3, r5
 8018c90:	4622      	mov	r2, r4
 8018c92:	f7ff fd3a 	bl	801870a <RegionCommonChanVerifyDr>
 8018c96:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8018c98:	f083 0301 	eor.w	r3, r3, #1
 8018c9c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d003      	beq.n	8018caa <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8018ca2:	7dfb      	ldrb	r3, [r7, #23]
 8018ca4:	f023 0302 	bic.w	r3, r3, #2
 8018ca8:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8018caa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018cae:	2b0f      	cmp	r3, #15
 8018cb0:	d103      	bne.n	8018cba <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	7a9b      	ldrb	r3, [r3, #10]
 8018cb6:	757b      	strb	r3, [r7, #21]
 8018cb8:	e01c      	b.n	8018cf4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8018cba:	68fb      	ldr	r3, [r7, #12]
 8018cbc:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8018cc6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018cca:	4618      	mov	r0, r3
 8018ccc:	f7ff fd8f 	bl	80187ee <RegionCommonValueInRange>
 8018cd0:	4603      	mov	r3, r0
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d10e      	bne.n	8018cf4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8018cdc:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8018ce0:	429a      	cmp	r2, r3
 8018ce2:	da03      	bge.n	8018cec <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	7f5b      	ldrb	r3, [r3, #29]
 8018ce8:	757b      	strb	r3, [r7, #21]
 8018cea:	e003      	b.n	8018cf4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8018cec:	7dfb      	ldrb	r3, [r7, #23]
 8018cee:	f023 0304 	bic.w	r3, r3, #4
 8018cf2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8018cf4:	7dfb      	ldrb	r3, [r7, #23]
 8018cf6:	2b07      	cmp	r3, #7
 8018cf8:	d105      	bne.n	8018d06 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8018cfa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d101      	bne.n	8018d06 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8018d02:	2301      	movs	r3, #1
 8018d04:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8018d06:	68bb      	ldr	r3, [r7, #8]
 8018d08:	7dba      	ldrb	r2, [r7, #22]
 8018d0a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	7d7a      	ldrb	r2, [r7, #21]
 8018d10:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8018d12:	7d3a      	ldrb	r2, [r7, #20]
 8018d14:	683b      	ldr	r3, [r7, #0]
 8018d16:	701a      	strb	r2, [r3, #0]

    return status;
 8018d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	3718      	adds	r7, #24
 8018d1e:	46bd      	mov	sp, r7
 8018d20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018d24 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8018d24:	b480      	push	{r7}
 8018d26:	b083      	sub	sp, #12
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	4603      	mov	r3, r0
 8018d2c:	6039      	str	r1, [r7, #0]
 8018d2e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8018d30:	79fb      	ldrb	r3, [r7, #7]
 8018d32:	4a06      	ldr	r2, [pc, #24]	; (8018d4c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8018d34:	fa02 f303 	lsl.w	r3, r2, r3
 8018d38:	461a      	mov	r2, r3
 8018d3a:	683b      	ldr	r3, [r7, #0]
 8018d3c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018d40:	4618      	mov	r0, r3
 8018d42:	370c      	adds	r7, #12
 8018d44:	46bd      	mov	sp, r7
 8018d46:	bc80      	pop	{r7}
 8018d48:	4770      	bx	lr
 8018d4a:	bf00      	nop
 8018d4c:	000f4240 	.word	0x000f4240

08018d50 <RegionCommonComputeRxWindowParameters>:
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8018d50:	b480      	push	{r7}
 8018d52:	b085      	sub	sp, #20
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	60f8      	str	r0, [r7, #12]
 8018d58:	607a      	str	r2, [r7, #4]
 8018d5a:	603b      	str	r3, [r7, #0]
 8018d5c:	460b      	mov	r3, r1
 8018d5e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8018d60:	7afa      	ldrb	r2, [r7, #11]
 8018d62:	7afb      	ldrb	r3, [r7, #11]
 8018d64:	3b04      	subs	r3, #4
 8018d66:	4619      	mov	r1, r3
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	fb03 f101 	mul.w	r1, r3, r1
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018d74:	fb00 f303 	mul.w	r3, r0, r3
 8018d78:	440b      	add	r3, r1
 8018d7a:	005b      	lsls	r3, r3, #1
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d013      	beq.n	8018da8 <RegionCommonComputeRxWindowParameters+0x58>
 8018d80:	7afb      	ldrb	r3, [r7, #11]
 8018d82:	3b04      	subs	r3, #4
 8018d84:	4619      	mov	r1, r3
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	fb03 f101 	mul.w	r1, r3, r1
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018d92:	fb00 f303 	mul.w	r3, r0, r3
 8018d96:	440b      	add	r3, r1
 8018d98:	0059      	lsls	r1, r3, #1
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	440b      	add	r3, r1
 8018d9e:	1e59      	subs	r1, r3, #1
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	fbb1 f3f3 	udiv	r3, r1, r3
 8018da6:	e00f      	b.n	8018dc8 <RegionCommonComputeRxWindowParameters+0x78>
 8018da8:	7afb      	ldrb	r3, [r7, #11]
 8018daa:	3b04      	subs	r3, #4
 8018dac:	4619      	mov	r1, r3
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	fb03 f101 	mul.w	r1, r3, r1
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018dba:	fb00 f303 	mul.w	r3, r0, r3
 8018dbe:	440b      	add	r3, r1
 8018dc0:	0059      	lsls	r1, r3, #1
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8018dc8:	429a      	cmp	r2, r3
 8018dca:	bf38      	it	cc
 8018dcc:	461a      	movcc	r2, r3
 8018dce:	69bb      	ldr	r3, [r7, #24]
 8018dd0:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	009b      	lsls	r3, r3, #2
 8018dd6:	4619      	mov	r1, r3
 8018dd8:	69bb      	ldr	r3, [r7, #24]
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	68fa      	ldr	r2, [r7, #12]
 8018dde:	fb02 f303 	mul.w	r3, r2, r3
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d007      	beq.n	8018df6 <RegionCommonComputeRxWindowParameters+0xa6>
 8018de6:	69bb      	ldr	r3, [r7, #24]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	68fa      	ldr	r2, [r7, #12]
 8018dec:	fb02 f303 	mul.w	r3, r2, r3
 8018df0:	3301      	adds	r3, #1
 8018df2:	085b      	lsrs	r3, r3, #1
 8018df4:	e005      	b.n	8018e02 <RegionCommonComputeRxWindowParameters+0xb2>
 8018df6:	69bb      	ldr	r3, [r7, #24]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	68fa      	ldr	r2, [r7, #12]
 8018dfc:	fb02 f303 	mul.w	r3, r2, r3
 8018e00:	085b      	lsrs	r3, r3, #1
 8018e02:	1acb      	subs	r3, r1, r3
 8018e04:	683a      	ldr	r2, [r7, #0]
 8018e06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018e0a:	fb01 f202 	mul.w	r2, r1, r2
 8018e0e:	1a9b      	subs	r3, r3, r2
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	dd27      	ble.n	8018e64 <RegionCommonComputeRxWindowParameters+0x114>
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	009b      	lsls	r3, r3, #2
 8018e18:	4619      	mov	r1, r3
 8018e1a:	69bb      	ldr	r3, [r7, #24]
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	68fa      	ldr	r2, [r7, #12]
 8018e20:	fb02 f303 	mul.w	r3, r2, r3
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d007      	beq.n	8018e38 <RegionCommonComputeRxWindowParameters+0xe8>
 8018e28:	69bb      	ldr	r3, [r7, #24]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	68fa      	ldr	r2, [r7, #12]
 8018e2e:	fb02 f303 	mul.w	r3, r2, r3
 8018e32:	3301      	adds	r3, #1
 8018e34:	085b      	lsrs	r3, r3, #1
 8018e36:	e005      	b.n	8018e44 <RegionCommonComputeRxWindowParameters+0xf4>
 8018e38:	69bb      	ldr	r3, [r7, #24]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	68fa      	ldr	r2, [r7, #12]
 8018e3e:	fb02 f303 	mul.w	r3, r2, r3
 8018e42:	085b      	lsrs	r3, r3, #1
 8018e44:	1acb      	subs	r3, r1, r3
 8018e46:	683a      	ldr	r2, [r7, #0]
 8018e48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018e4c:	fb01 f202 	mul.w	r2, r1, r2
 8018e50:	1a9b      	subs	r3, r3, r2
 8018e52:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8018e56:	4a19      	ldr	r2, [pc, #100]	; (8018ebc <RegionCommonComputeRxWindowParameters+0x16c>)
 8018e58:	fb82 1203 	smull	r1, r2, r2, r3
 8018e5c:	1192      	asrs	r2, r2, #6
 8018e5e:	17db      	asrs	r3, r3, #31
 8018e60:	1ad3      	subs	r3, r2, r3
 8018e62:	e024      	b.n	8018eae <RegionCommonComputeRxWindowParameters+0x15e>
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	009b      	lsls	r3, r3, #2
 8018e68:	4619      	mov	r1, r3
 8018e6a:	69bb      	ldr	r3, [r7, #24]
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	68fa      	ldr	r2, [r7, #12]
 8018e70:	fb02 f303 	mul.w	r3, r2, r3
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d007      	beq.n	8018e88 <RegionCommonComputeRxWindowParameters+0x138>
 8018e78:	69bb      	ldr	r3, [r7, #24]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	68fa      	ldr	r2, [r7, #12]
 8018e7e:	fb02 f303 	mul.w	r3, r2, r3
 8018e82:	3301      	adds	r3, #1
 8018e84:	085b      	lsrs	r3, r3, #1
 8018e86:	e005      	b.n	8018e94 <RegionCommonComputeRxWindowParameters+0x144>
 8018e88:	69bb      	ldr	r3, [r7, #24]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	68fa      	ldr	r2, [r7, #12]
 8018e8e:	fb02 f303 	mul.w	r3, r2, r3
 8018e92:	085b      	lsrs	r3, r3, #1
 8018e94:	1acb      	subs	r3, r1, r3
 8018e96:	683a      	ldr	r2, [r7, #0]
 8018e98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018e9c:	fb01 f202 	mul.w	r2, r1, r2
 8018ea0:	1a9b      	subs	r3, r3, r2
 8018ea2:	4a06      	ldr	r2, [pc, #24]	; (8018ebc <RegionCommonComputeRxWindowParameters+0x16c>)
 8018ea4:	fb82 1203 	smull	r1, r2, r2, r3
 8018ea8:	1192      	asrs	r2, r2, #6
 8018eaa:	17db      	asrs	r3, r3, #31
 8018eac:	1ad3      	subs	r3, r2, r3
 8018eae:	69fa      	ldr	r2, [r7, #28]
 8018eb0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8018eb2:	bf00      	nop
 8018eb4:	3714      	adds	r7, #20
 8018eb6:	46bd      	mov	sp, r7
 8018eb8:	bc80      	pop	{r7}
 8018eba:	4770      	bx	lr
 8018ebc:	10624dd3 	.word	0x10624dd3

08018ec0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8018ec0:	b580      	push	{r7, lr}
 8018ec2:	b086      	sub	sp, #24
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	60b9      	str	r1, [r7, #8]
 8018eca:	607a      	str	r2, [r7, #4]
 8018ecc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018ece:	2300      	movs	r3, #0
 8018ed0:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8018ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018ed6:	005b      	lsls	r3, r3, #1
 8018ed8:	4618      	mov	r0, r3
 8018eda:	f7e7 fed9 	bl	8000c90 <__aeabi_ui2f>
 8018ede:	4603      	mov	r3, r0
 8018ee0:	4619      	mov	r1, r3
 8018ee2:	68b8      	ldr	r0, [r7, #8]
 8018ee4:	f7e7 fe22 	bl	8000b2c <__aeabi_fsub>
 8018ee8:	4603      	mov	r3, r0
 8018eea:	6879      	ldr	r1, [r7, #4]
 8018eec:	4618      	mov	r0, r3
 8018eee:	f7e7 fe1d 	bl	8000b2c <__aeabi_fsub>
 8018ef2:	4603      	mov	r3, r0
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	f7e7 faab 	bl	8000450 <__aeabi_f2d>
 8018efa:	4602      	mov	r2, r0
 8018efc:	460b      	mov	r3, r1
 8018efe:	4610      	mov	r0, r2
 8018f00:	4619      	mov	r1, r3
 8018f02:	f006 fa49 	bl	801f398 <floor>
 8018f06:	4602      	mov	r2, r0
 8018f08:	460b      	mov	r3, r1
 8018f0a:	4610      	mov	r0, r2
 8018f0c:	4619      	mov	r1, r3
 8018f0e:	f7e7 fd91 	bl	8000a34 <__aeabi_d2iz>
 8018f12:	4603      	mov	r3, r0
 8018f14:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8018f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	3718      	adds	r7, #24
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	bd80      	pop	{r7, pc}

08018f22 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8018f22:	b590      	push	{r4, r7, lr}
 8018f24:	b087      	sub	sp, #28
 8018f26:	af00      	add	r7, sp, #0
 8018f28:	60f8      	str	r0, [r7, #12]
 8018f2a:	60b9      	str	r1, [r7, #8]
 8018f2c:	607a      	str	r2, [r7, #4]
 8018f2e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8018f30:	2300      	movs	r3, #0
 8018f32:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8018f34:	2300      	movs	r3, #0
 8018f36:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018f38:	2300      	movs	r3, #0
 8018f3a:	757b      	strb	r3, [r7, #21]
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	753b      	strb	r3, [r7, #20]
 8018f40:	e09c      	b.n	801907c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018f42:	2300      	movs	r3, #0
 8018f44:	74fb      	strb	r3, [r7, #19]
 8018f46:	e08f      	b.n	8019068 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	685a      	ldr	r2, [r3, #4]
 8018f4c:	7d3b      	ldrb	r3, [r7, #20]
 8018f4e:	005b      	lsls	r3, r3, #1
 8018f50:	4413      	add	r3, r2
 8018f52:	881b      	ldrh	r3, [r3, #0]
 8018f54:	461a      	mov	r2, r3
 8018f56:	7cfb      	ldrb	r3, [r7, #19]
 8018f58:	fa42 f303 	asr.w	r3, r2, r3
 8018f5c:	f003 0301 	and.w	r3, r3, #1
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d07e      	beq.n	8019062 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	689a      	ldr	r2, [r3, #8]
 8018f68:	7d79      	ldrb	r1, [r7, #21]
 8018f6a:	7cfb      	ldrb	r3, [r7, #19]
 8018f6c:	440b      	add	r3, r1
 8018f6e:	4619      	mov	r1, r3
 8018f70:	460b      	mov	r3, r1
 8018f72:	005b      	lsls	r3, r3, #1
 8018f74:	440b      	add	r3, r1
 8018f76:	009b      	lsls	r3, r3, #2
 8018f78:	4413      	add	r3, r2
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d06b      	beq.n	8019058 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	781b      	ldrb	r3, [r3, #0]
 8018f84:	f083 0301 	eor.w	r3, r3, #1
 8018f88:	b2db      	uxtb	r3, r3
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d011      	beq.n	8018fb2 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d00d      	beq.n	8018fb2 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	695a      	ldr	r2, [r3, #20]
 8018f9a:	7d3b      	ldrb	r3, [r7, #20]
 8018f9c:	005b      	lsls	r3, r3, #1
 8018f9e:	4413      	add	r3, r2
 8018fa0:	881b      	ldrh	r3, [r3, #0]
 8018fa2:	461a      	mov	r2, r3
 8018fa4:	7cfb      	ldrb	r3, [r7, #19]
 8018fa6:	fa42 f303 	asr.w	r3, r2, r3
 8018faa:	f003 0301 	and.w	r3, r3, #1
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d054      	beq.n	801905c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	785b      	ldrb	r3, [r3, #1]
 8018fb6:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8018fb8:	68fb      	ldr	r3, [r7, #12]
 8018fba:	689a      	ldr	r2, [r3, #8]
 8018fbc:	7d79      	ldrb	r1, [r7, #21]
 8018fbe:	7cfb      	ldrb	r3, [r7, #19]
 8018fc0:	440b      	add	r3, r1
 8018fc2:	4619      	mov	r1, r3
 8018fc4:	460b      	mov	r3, r1
 8018fc6:	005b      	lsls	r3, r3, #1
 8018fc8:	440b      	add	r3, r1
 8018fca:	009b      	lsls	r3, r3, #2
 8018fcc:	4413      	add	r3, r2
 8018fce:	7a1b      	ldrb	r3, [r3, #8]
 8018fd0:	f343 0303 	sbfx	r3, r3, #0, #4
 8018fd4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018fd6:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	689a      	ldr	r2, [r3, #8]
 8018fdc:	7d79      	ldrb	r1, [r7, #21]
 8018fde:	7cfb      	ldrb	r3, [r7, #19]
 8018fe0:	440b      	add	r3, r1
 8018fe2:	4619      	mov	r1, r3
 8018fe4:	460b      	mov	r3, r1
 8018fe6:	005b      	lsls	r3, r3, #1
 8018fe8:	440b      	add	r3, r1
 8018fea:	009b      	lsls	r3, r3, #2
 8018fec:	4413      	add	r3, r2
 8018fee:	7a1b      	ldrb	r3, [r3, #8]
 8018ff0:	f343 1303 	sbfx	r3, r3, #4, #4
 8018ff4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018ff6:	461a      	mov	r2, r3
 8018ff8:	4621      	mov	r1, r4
 8018ffa:	f7ff fbf8 	bl	80187ee <RegionCommonValueInRange>
 8018ffe:	4603      	mov	r3, r0
 8019000:	2b00      	cmp	r3, #0
 8019002:	d02d      	beq.n	8019060 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	68da      	ldr	r2, [r3, #12]
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	6899      	ldr	r1, [r3, #8]
 801900c:	7d78      	ldrb	r0, [r7, #21]
 801900e:	7cfb      	ldrb	r3, [r7, #19]
 8019010:	4403      	add	r3, r0
 8019012:	4618      	mov	r0, r3
 8019014:	4603      	mov	r3, r0
 8019016:	005b      	lsls	r3, r3, #1
 8019018:	4403      	add	r3, r0
 801901a:	009b      	lsls	r3, r3, #2
 801901c:	440b      	add	r3, r1
 801901e:	7a5b      	ldrb	r3, [r3, #9]
 8019020:	4619      	mov	r1, r3
 8019022:	460b      	mov	r3, r1
 8019024:	005b      	lsls	r3, r3, #1
 8019026:	440b      	add	r3, r1
 8019028:	00db      	lsls	r3, r3, #3
 801902a:	4413      	add	r3, r2
 801902c:	7d1b      	ldrb	r3, [r3, #20]
 801902e:	f083 0301 	eor.w	r3, r3, #1
 8019032:	b2db      	uxtb	r3, r3
 8019034:	2b00      	cmp	r3, #0
 8019036:	d003      	beq.n	8019040 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8019038:	7dbb      	ldrb	r3, [r7, #22]
 801903a:	3301      	adds	r3, #1
 801903c:	75bb      	strb	r3, [r7, #22]
                    continue;
 801903e:	e010      	b.n	8019062 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8019040:	7dfb      	ldrb	r3, [r7, #23]
 8019042:	1c5a      	adds	r2, r3, #1
 8019044:	75fa      	strb	r2, [r7, #23]
 8019046:	461a      	mov	r2, r3
 8019048:	68bb      	ldr	r3, [r7, #8]
 801904a:	4413      	add	r3, r2
 801904c:	7d79      	ldrb	r1, [r7, #21]
 801904e:	7cfa      	ldrb	r2, [r7, #19]
 8019050:	440a      	add	r2, r1
 8019052:	b2d2      	uxtb	r2, r2
 8019054:	701a      	strb	r2, [r3, #0]
 8019056:	e004      	b.n	8019062 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8019058:	bf00      	nop
 801905a:	e002      	b.n	8019062 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801905c:	bf00      	nop
 801905e:	e000      	b.n	8019062 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8019060:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8019062:	7cfb      	ldrb	r3, [r7, #19]
 8019064:	3301      	adds	r3, #1
 8019066:	74fb      	strb	r3, [r7, #19]
 8019068:	7cfb      	ldrb	r3, [r7, #19]
 801906a:	2b0f      	cmp	r3, #15
 801906c:	f67f af6c 	bls.w	8018f48 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8019070:	7d7b      	ldrb	r3, [r7, #21]
 8019072:	3310      	adds	r3, #16
 8019074:	757b      	strb	r3, [r7, #21]
 8019076:	7d3b      	ldrb	r3, [r7, #20]
 8019078:	3301      	adds	r3, #1
 801907a:	753b      	strb	r3, [r7, #20]
 801907c:	7d7b      	ldrb	r3, [r7, #21]
 801907e:	b29a      	uxth	r2, r3
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	8a1b      	ldrh	r3, [r3, #16]
 8019084:	429a      	cmp	r2, r3
 8019086:	f4ff af5c 	bcc.w	8018f42 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	7dfa      	ldrb	r2, [r7, #23]
 801908e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8019090:	683b      	ldr	r3, [r7, #0]
 8019092:	7dba      	ldrb	r2, [r7, #22]
 8019094:	701a      	strb	r2, [r3, #0]
}
 8019096:	bf00      	nop
 8019098:	371c      	adds	r7, #28
 801909a:	46bd      	mov	sp, r7
 801909c:	bd90      	pop	{r4, r7, pc}

0801909e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801909e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190a0:	b08b      	sub	sp, #44	; 0x2c
 80190a2:	af04      	add	r7, sp, #16
 80190a4:	60f8      	str	r0, [r7, #12]
 80190a6:	60b9      	str	r1, [r7, #8]
 80190a8:	607a      	str	r2, [r7, #4]
 80190aa:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	685b      	ldr	r3, [r3, #4]
 80190b0:	4618      	mov	r0, r3
 80190b2:	f005 fe1b 	bl	801ecec <UTIL_TIMER_GetElapsedTime>
 80190b6:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	681a      	ldr	r2, [r3, #0]
 80190bc:	697b      	ldr	r3, [r7, #20]
 80190be:	1ad2      	subs	r2, r2, r3
 80190c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190c2:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80190c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190c6:	2201      	movs	r2, #1
 80190c8:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80190ca:	683b      	ldr	r3, [r7, #0]
 80190cc:	2200      	movs	r2, #0
 80190ce:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	685b      	ldr	r3, [r3, #4]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d004      	beq.n	80190e2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80190dc:	697a      	ldr	r2, [r7, #20]
 80190de:	429a      	cmp	r2, r3
 80190e0:	d32b      	bcc.n	801913a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80190e2:	68bb      	ldr	r3, [r7, #8]
 80190e4:	2200      	movs	r2, #0
 80190e6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	69db      	ldr	r3, [r3, #28]
 80190ec:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80190f2:	68dd      	ldr	r5, [r3, #12]
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	7a5e      	ldrb	r6, [r3, #9]
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	f893 c008 	ldrb.w	ip, [r3, #8]
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	7d1b      	ldrb	r3, [r3, #20]
 8019102:	68fa      	ldr	r2, [r7, #12]
 8019104:	6992      	ldr	r2, [r2, #24]
 8019106:	9203      	str	r2, [sp, #12]
 8019108:	68fa      	ldr	r2, [r7, #12]
 801910a:	f10d 0e04 	add.w	lr, sp, #4
 801910e:	320c      	adds	r2, #12
 8019110:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019114:	e88e 0003 	stmia.w	lr, {r0, r1}
 8019118:	9300      	str	r3, [sp, #0]
 801911a:	4663      	mov	r3, ip
 801911c:	4632      	mov	r2, r6
 801911e:	4629      	mov	r1, r5
 8019120:	4620      	mov	r0, r4
 8019122:	f7ff fc35 	bl	8018990 <RegionCommonUpdateBandTimeOff>
 8019126:	4602      	mov	r2, r0
 8019128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801912a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	69d8      	ldr	r0, [r3, #28]
 8019130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019132:	683a      	ldr	r2, [r7, #0]
 8019134:	6879      	ldr	r1, [r7, #4]
 8019136:	f7ff fef4 	bl	8018f22 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801913a:	683b      	ldr	r3, [r7, #0]
 801913c:	781b      	ldrb	r3, [r3, #0]
 801913e:	2b00      	cmp	r3, #0
 8019140:	d004      	beq.n	801914c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8019142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019144:	2200      	movs	r2, #0
 8019146:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8019148:	2300      	movs	r3, #0
 801914a:	e006      	b.n	801915a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801914e:	781b      	ldrb	r3, [r3, #0]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d001      	beq.n	8019158 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8019154:	230b      	movs	r3, #11
 8019156:	e000      	b.n	801915a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019158:	230c      	movs	r3, #12
    }
}
 801915a:	4618      	mov	r0, r3
 801915c:	371c      	adds	r7, #28
 801915e:	46bd      	mov	sp, r7
 8019160:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019162 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8019162:	b5b0      	push	{r4, r5, r7, lr}
 8019164:	b086      	sub	sp, #24
 8019166:	af02      	add	r7, sp, #8
 8019168:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	781b      	ldrb	r3, [r3, #0]
 801916e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	f993 2000 	ldrsb.w	r2, [r3]
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801917c:	429a      	cmp	r2, r3
 801917e:	d103      	bne.n	8019188 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8019186:	e026      	b.n	80191d6 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8019188:	7bfb      	ldrb	r3, [r7, #15]
 801918a:	3b01      	subs	r3, #1
 801918c:	b2db      	uxtb	r3, r3
 801918e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8019196:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801919a:	429a      	cmp	r2, r3
 801919c:	d019      	beq.n	80191d2 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	78d8      	ldrb	r0, [r3, #3]
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	6859      	ldr	r1, [r3, #4]
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191b2:	687a      	ldr	r2, [r7, #4]
 80191b4:	6892      	ldr	r2, [r2, #8]
 80191b6:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80191ba:	9201      	str	r2, [sp, #4]
 80191bc:	9300      	str	r3, [sp, #0]
 80191be:	462b      	mov	r3, r5
 80191c0:	4622      	mov	r2, r4
 80191c2:	f7ff faa2 	bl	801870a <RegionCommonChanVerifyDr>
 80191c6:	4603      	mov	r3, r0
 80191c8:	f083 0301 	eor.w	r3, r3, #1
 80191cc:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d1da      	bne.n	8019188 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80191d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80191d6:	4618      	mov	r0, r3
 80191d8:	3710      	adds	r7, #16
 80191da:	46bd      	mov	sp, r7
 80191dc:	bdb0      	pop	{r4, r5, r7, pc}

080191de <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80191de:	b480      	push	{r7}
 80191e0:	b083      	sub	sp, #12
 80191e2:	af00      	add	r7, sp, #0
 80191e4:	4603      	mov	r3, r0
 80191e6:	460a      	mov	r2, r1
 80191e8:	71fb      	strb	r3, [r7, #7]
 80191ea:	4613      	mov	r3, r2
 80191ec:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80191ee:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80191f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80191f6:	4293      	cmp	r3, r2
 80191f8:	bfb8      	it	lt
 80191fa:	4613      	movlt	r3, r2
 80191fc:	b25b      	sxtb	r3, r3
}
 80191fe:	4618      	mov	r0, r3
 8019200:	370c      	adds	r7, #12
 8019202:	46bd      	mov	sp, r7
 8019204:	bc80      	pop	{r7}
 8019206:	4770      	bx	lr

08019208 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8019208:	b480      	push	{r7}
 801920a:	b083      	sub	sp, #12
 801920c:	af00      	add	r7, sp, #0
 801920e:	6078      	str	r0, [r7, #4]
 8019210:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	009b      	lsls	r3, r3, #2
 8019216:	683a      	ldr	r2, [r7, #0]
 8019218:	4413      	add	r3, r2
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	4a07      	ldr	r2, [pc, #28]	; (801923c <RegionCommonGetBandwidth+0x34>)
 801921e:	4293      	cmp	r3, r2
 8019220:	d004      	beq.n	801922c <RegionCommonGetBandwidth+0x24>
 8019222:	4a07      	ldr	r2, [pc, #28]	; (8019240 <RegionCommonGetBandwidth+0x38>)
 8019224:	4293      	cmp	r3, r2
 8019226:	d003      	beq.n	8019230 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8019228:	2300      	movs	r3, #0
 801922a:	e002      	b.n	8019232 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 801922c:	2301      	movs	r3, #1
 801922e:	e000      	b.n	8019232 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8019230:	2302      	movs	r3, #2
    }
}
 8019232:	4618      	mov	r0, r3
 8019234:	370c      	adds	r7, #12
 8019236:	46bd      	mov	sp, r7
 8019238:	bc80      	pop	{r7}
 801923a:	4770      	bx	lr
 801923c:	0003d090 	.word	0x0003d090
 8019240:	0007a120 	.word	0x0007a120

08019244 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8019244:	b580      	push	{r7, lr}
 8019246:	b086      	sub	sp, #24
 8019248:	af04      	add	r7, sp, #16
 801924a:	4603      	mov	r3, r0
 801924c:	6039      	str	r1, [r7, #0]
 801924e:	71fb      	strb	r3, [r7, #7]
 8019250:	4613      	mov	r3, r2
 8019252:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8019254:	79fb      	ldrb	r3, [r7, #7]
 8019256:	2b05      	cmp	r3, #5
 8019258:	d810      	bhi.n	801927c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801925a:	79fb      	ldrb	r3, [r7, #7]
 801925c:	4a0f      	ldr	r2, [pc, #60]	; (801929c <RegionCommonRxConfigPrint+0x58>)
 801925e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019262:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8019266:	9202      	str	r2, [sp, #8]
 8019268:	683a      	ldr	r2, [r7, #0]
 801926a:	9201      	str	r2, [sp, #4]
 801926c:	9300      	str	r3, [sp, #0]
 801926e:	4b0c      	ldr	r3, [pc, #48]	; (80192a0 <RegionCommonRxConfigPrint+0x5c>)
 8019270:	2201      	movs	r2, #1
 8019272:	2100      	movs	r1, #0
 8019274:	2002      	movs	r0, #2
 8019276:	f005 fe17 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801927a:	e00a      	b.n	8019292 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801927c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019280:	9301      	str	r3, [sp, #4]
 8019282:	683b      	ldr	r3, [r7, #0]
 8019284:	9300      	str	r3, [sp, #0]
 8019286:	4b07      	ldr	r3, [pc, #28]	; (80192a4 <RegionCommonRxConfigPrint+0x60>)
 8019288:	2201      	movs	r2, #1
 801928a:	2100      	movs	r1, #0
 801928c:	2002      	movs	r0, #2
 801928e:	f005 fe0b 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
}
 8019292:	bf00      	nop
 8019294:	3708      	adds	r7, #8
 8019296:	46bd      	mov	sp, r7
 8019298:	bd80      	pop	{r7, pc}
 801929a:	bf00      	nop
 801929c:	20000118 	.word	0x20000118
 80192a0:	0801fda0 	.word	0x0801fda0
 80192a4:	0801fdc0 	.word	0x0801fdc0

080192a8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b084      	sub	sp, #16
 80192ac:	af02      	add	r7, sp, #8
 80192ae:	6078      	str	r0, [r7, #4]
 80192b0:	460b      	mov	r3, r1
 80192b2:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80192b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80192b8:	9301      	str	r3, [sp, #4]
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	9300      	str	r3, [sp, #0]
 80192be:	4b05      	ldr	r3, [pc, #20]	; (80192d4 <RegionCommonTxConfigPrint+0x2c>)
 80192c0:	2201      	movs	r2, #1
 80192c2:	2100      	movs	r1, #0
 80192c4:	2002      	movs	r0, #2
 80192c6:	f005 fdef 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
}
 80192ca:	bf00      	nop
 80192cc:	3708      	adds	r7, #8
 80192ce:	46bd      	mov	sp, r7
 80192d0:	bd80      	pop	{r7, pc}
 80192d2:	bf00      	nop
 80192d4:	0801fddc 	.word	0x0801fddc

080192d8 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80192d8:	b580      	push	{r7, lr}
 80192da:	b084      	sub	sp, #16
 80192dc:	af00      	add	r7, sp, #0
 80192de:	603b      	str	r3, [r7, #0]
 80192e0:	4603      	mov	r3, r0
 80192e2:	71fb      	strb	r3, [r7, #7]
 80192e4:	460b      	mov	r3, r1
 80192e6:	71bb      	strb	r3, [r7, #6]
 80192e8:	4613      	mov	r3, r2
 80192ea:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 80192ec:	79fb      	ldrb	r3, [r7, #7]
 80192ee:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 80192f0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80192f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80192f8:	4611      	mov	r1, r2
 80192fa:	4618      	mov	r0, r3
 80192fc:	f7ff ff6f 	bl	80191de <RegionCommonLimitTxPower>
 8019300:	4603      	mov	r3, r0
 8019302:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8019304:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8019308:	2b04      	cmp	r3, #4
 801930a:	d106      	bne.n	801931a <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 801930c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019310:	2b02      	cmp	r3, #2
 8019312:	bfb8      	it	lt
 8019314:	2302      	movlt	r3, #2
 8019316:	73fb      	strb	r3, [r7, #15]
 8019318:	e00d      	b.n	8019336 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801931a:	2204      	movs	r2, #4
 801931c:	2100      	movs	r1, #0
 801931e:	6838      	ldr	r0, [r7, #0]
 8019320:	f7ff fab6 	bl	8018890 <RegionCommonCountChannels>
 8019324:	4603      	mov	r3, r0
 8019326:	2b31      	cmp	r3, #49	; 0x31
 8019328:	d805      	bhi.n	8019336 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801932a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801932e:	2b05      	cmp	r3, #5
 8019330:	bfb8      	it	lt
 8019332:	2305      	movlt	r3, #5
 8019334:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8019336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801933a:	4618      	mov	r0, r3
 801933c:	3710      	adds	r7, #16
 801933e:	46bd      	mov	sp, r7
 8019340:	bd80      	pop	{r7, pc}
	...

08019344 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8019344:	b580      	push	{r7, lr}
 8019346:	b082      	sub	sp, #8
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801934c:	4b18      	ldr	r3, [pc, #96]	; (80193b0 <VerifyRfFreq+0x6c>)
 801934e:	6a1b      	ldr	r3, [r3, #32]
 8019350:	6878      	ldr	r0, [r7, #4]
 8019352:	4798      	blx	r3
 8019354:	4603      	mov	r3, r0
 8019356:	f083 0301 	eor.w	r3, r3, #1
 801935a:	b2db      	uxtb	r3, r3
 801935c:	2b00      	cmp	r3, #0
 801935e:	d001      	beq.n	8019364 <VerifyRfFreq+0x20>
    {
        return false;
 8019360:	2300      	movs	r3, #0
 8019362:	e021      	b.n	80193a8 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	4a13      	ldr	r2, [pc, #76]	; (80193b4 <VerifyRfFreq+0x70>)
 8019368:	4293      	cmp	r3, r2
 801936a:	d910      	bls.n	801938e <VerifyRfFreq+0x4a>
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	4a12      	ldr	r2, [pc, #72]	; (80193b8 <VerifyRfFreq+0x74>)
 8019370:	4293      	cmp	r3, r2
 8019372:	d80c      	bhi.n	801938e <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8019374:	687a      	ldr	r2, [r7, #4]
 8019376:	4b11      	ldr	r3, [pc, #68]	; (80193bc <VerifyRfFreq+0x78>)
 8019378:	4413      	add	r3, r2
 801937a:	4a11      	ldr	r2, [pc, #68]	; (80193c0 <VerifyRfFreq+0x7c>)
 801937c:	fba2 1203 	umull	r1, r2, r2, r3
 8019380:	0c92      	lsrs	r2, r2, #18
 8019382:	4910      	ldr	r1, [pc, #64]	; (80193c4 <VerifyRfFreq+0x80>)
 8019384:	fb01 f202 	mul.w	r2, r1, r2
 8019388:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801938a:	2a00      	cmp	r2, #0
 801938c:	d001      	beq.n	8019392 <VerifyRfFreq+0x4e>
    {
        return false;
 801938e:	2300      	movs	r3, #0
 8019390:	e00a      	b.n	80193a8 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	4a0c      	ldr	r2, [pc, #48]	; (80193c8 <VerifyRfFreq+0x84>)
 8019396:	4293      	cmp	r3, r2
 8019398:	d903      	bls.n	80193a2 <VerifyRfFreq+0x5e>
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	4a06      	ldr	r2, [pc, #24]	; (80193b8 <VerifyRfFreq+0x74>)
 801939e:	4293      	cmp	r3, r2
 80193a0:	d901      	bls.n	80193a6 <VerifyRfFreq+0x62>
    {
        return false;
 80193a2:	2300      	movs	r3, #0
 80193a4:	e000      	b.n	80193a8 <VerifyRfFreq+0x64>
    }
    return true;
 80193a6:	2301      	movs	r3, #1
}
 80193a8:	4618      	mov	r0, r3
 80193aa:	3708      	adds	r7, #8
 80193ac:	46bd      	mov	sp, r7
 80193ae:	bd80      	pop	{r7, pc}
 80193b0:	08020428 	.word	0x08020428
 80193b4:	3708709f 	.word	0x3708709f
 80193b8:	374886e0 	.word	0x374886e0
 80193bc:	c8f78f60 	.word	0xc8f78f60
 80193c0:	6fd91d85 	.word	0x6fd91d85
 80193c4:	000927c0 	.word	0x000927c0
 80193c8:	35c8015f 	.word	0x35c8015f

080193cc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80193cc:	b590      	push	{r4, r7, lr}
 80193ce:	b089      	sub	sp, #36	; 0x24
 80193d0:	af04      	add	r7, sp, #16
 80193d2:	4603      	mov	r3, r0
 80193d4:	460a      	mov	r2, r1
 80193d6:	71fb      	strb	r3, [r7, #7]
 80193d8:	4613      	mov	r3, r2
 80193da:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 80193dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80193e0:	4a0f      	ldr	r2, [pc, #60]	; (8019420 <GetTimeOnAir+0x54>)
 80193e2:	5cd3      	ldrb	r3, [r2, r3]
 80193e4:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 80193e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80193ea:	490e      	ldr	r1, [pc, #56]	; (8019424 <GetTimeOnAir+0x58>)
 80193ec:	4618      	mov	r0, r3
 80193ee:	f7ff ff0b 	bl	8019208 <RegionCommonGetBandwidth>
 80193f2:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80193f4:	4b0c      	ldr	r3, [pc, #48]	; (8019428 <GetTimeOnAir+0x5c>)
 80193f6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80193f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80193fc:	88bb      	ldrh	r3, [r7, #4]
 80193fe:	b2db      	uxtb	r3, r3
 8019400:	2101      	movs	r1, #1
 8019402:	9103      	str	r1, [sp, #12]
 8019404:	9302      	str	r3, [sp, #8]
 8019406:	2300      	movs	r3, #0
 8019408:	9301      	str	r3, [sp, #4]
 801940a:	2308      	movs	r3, #8
 801940c:	9300      	str	r3, [sp, #0]
 801940e:	2301      	movs	r3, #1
 8019410:	68b9      	ldr	r1, [r7, #8]
 8019412:	2001      	movs	r0, #1
 8019414:	47a0      	blx	r4
 8019416:	4603      	mov	r3, r0
}
 8019418:	4618      	mov	r0, r3
 801941a:	3714      	adds	r7, #20
 801941c:	46bd      	mov	sp, r7
 801941e:	bd90      	pop	{r4, r7, pc}
 8019420:	080203a4 	.word	0x080203a4
 8019424:	080203b4 	.word	0x080203b4
 8019428:	08020428 	.word	0x08020428

0801942c <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801942c:	b580      	push	{r7, lr}
 801942e:	b088      	sub	sp, #32
 8019430:	af00      	add	r7, sp, #0
 8019432:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8019434:	2300      	movs	r3, #0
 8019436:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	781b      	ldrb	r3, [r3, #0]
 801943c:	3b01      	subs	r3, #1
 801943e:	2b37      	cmp	r3, #55	; 0x37
 8019440:	f200 8136 	bhi.w	80196b0 <RegionUS915GetPhyParam+0x284>
 8019444:	a201      	add	r2, pc, #4	; (adr r2, 801944c <RegionUS915GetPhyParam+0x20>)
 8019446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801944a:	bf00      	nop
 801944c:	0801952d 	.word	0x0801952d
 8019450:	08019533 	.word	0x08019533
 8019454:	080196b1 	.word	0x080196b1
 8019458:	080196b1 	.word	0x080196b1
 801945c:	080196b1 	.word	0x080196b1
 8019460:	08019539 	.word	0x08019539
 8019464:	080196b1 	.word	0x080196b1
 8019468:	08019573 	.word	0x08019573
 801946c:	080196b1 	.word	0x080196b1
 8019470:	08019579 	.word	0x08019579
 8019474:	0801957f 	.word	0x0801957f
 8019478:	08019585 	.word	0x08019585
 801947c:	0801958b 	.word	0x0801958b
 8019480:	0801959b 	.word	0x0801959b
 8019484:	080195ab 	.word	0x080195ab
 8019488:	080195b1 	.word	0x080195b1
 801948c:	080195b9 	.word	0x080195b9
 8019490:	080195c1 	.word	0x080195c1
 8019494:	080195c9 	.word	0x080195c9
 8019498:	080195d1 	.word	0x080195d1
 801949c:	080195d9 	.word	0x080195d9
 80194a0:	080195ed 	.word	0x080195ed
 80194a4:	080195f3 	.word	0x080195f3
 80194a8:	080195f9 	.word	0x080195f9
 80194ac:	080195ff 	.word	0x080195ff
 80194b0:	0801960b 	.word	0x0801960b
 80194b4:	08019617 	.word	0x08019617
 80194b8:	0801961d 	.word	0x0801961d
 80194bc:	08019625 	.word	0x08019625
 80194c0:	0801962b 	.word	0x0801962b
 80194c4:	08019631 	.word	0x08019631
 80194c8:	08019637 	.word	0x08019637
 80194cc:	0801953f 	.word	0x0801953f
 80194d0:	080196b1 	.word	0x080196b1
 80194d4:	080196b1 	.word	0x080196b1
 80194d8:	080196b1 	.word	0x080196b1
 80194dc:	080196b1 	.word	0x080196b1
 80194e0:	080196b1 	.word	0x080196b1
 80194e4:	080196b1 	.word	0x080196b1
 80194e8:	080196b1 	.word	0x080196b1
 80194ec:	080196b1 	.word	0x080196b1
 80194f0:	080196b1 	.word	0x080196b1
 80194f4:	080196b1 	.word	0x080196b1
 80194f8:	080196b1 	.word	0x080196b1
 80194fc:	080196b1 	.word	0x080196b1
 8019500:	080196b1 	.word	0x080196b1
 8019504:	0801963f 	.word	0x0801963f
 8019508:	08019653 	.word	0x08019653
 801950c:	08019661 	.word	0x08019661
 8019510:	08019667 	.word	0x08019667
 8019514:	080196b1 	.word	0x080196b1
 8019518:	0801966d 	.word	0x0801966d
 801951c:	08019681 	.word	0x08019681
 8019520:	08019687 	.word	0x08019687
 8019524:	0801968d 	.word	0x0801968d
 8019528:	0801969d 	.word	0x0801969d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801952c:	2308      	movs	r3, #8
 801952e:	61bb      	str	r3, [r7, #24]
            break;
 8019530:	e0bf      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8019532:	2300      	movs	r3, #0
 8019534:	61bb      	str	r3, [r7, #24]
            break;
 8019536:	e0bc      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8019538:	2300      	movs	r3, #0
 801953a:	61bb      	str	r3, [r7, #24]
            break;
 801953c:	e0b9      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8019544:	733b      	strb	r3, [r7, #12]
 8019546:	2304      	movs	r3, #4
 8019548:	737b      	strb	r3, [r7, #13]
 801954a:	2300      	movs	r3, #0
 801954c:	73bb      	strb	r3, [r7, #14]
 801954e:	2348      	movs	r3, #72	; 0x48
 8019550:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8019552:	4b5b      	ldr	r3, [pc, #364]	; (80196c0 <RegionUS915GetPhyParam+0x294>)
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801955a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801955c:	4b58      	ldr	r3, [pc, #352]	; (80196c0 <RegionUS915GetPhyParam+0x294>)
 801955e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8019560:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8019562:	f107 030c 	add.w	r3, r7, #12
 8019566:	4618      	mov	r0, r3
 8019568:	f7ff fdfb 	bl	8019162 <RegionCommonGetNextLowerTxDr>
 801956c:	4603      	mov	r3, r0
 801956e:	61bb      	str	r3, [r7, #24]
            break;
 8019570:	e09f      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8019572:	2300      	movs	r3, #0
 8019574:	61bb      	str	r3, [r7, #24]
            break;
 8019576:	e09c      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8019578:	2300      	movs	r3, #0
 801957a:	61bb      	str	r3, [r7, #24]
            break;
 801957c:	e099      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801957e:	2340      	movs	r3, #64	; 0x40
 8019580:	61bb      	str	r3, [r7, #24]
            break;
 8019582:	e096      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8019584:	2320      	movs	r3, #32
 8019586:	61bb      	str	r3, [r7, #24]
            break;
 8019588:	e093      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019590:	461a      	mov	r2, r3
 8019592:	4b4c      	ldr	r3, [pc, #304]	; (80196c4 <RegionUS915GetPhyParam+0x298>)
 8019594:	5c9b      	ldrb	r3, [r3, r2]
 8019596:	61bb      	str	r3, [r7, #24]
            break;
 8019598:	e08b      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80195a0:	461a      	mov	r2, r3
 80195a2:	4b49      	ldr	r3, [pc, #292]	; (80196c8 <RegionUS915GetPhyParam+0x29c>)
 80195a4:	5c9b      	ldrb	r3, [r3, r2]
 80195a6:	61bb      	str	r3, [r7, #24]
            break;
 80195a8:	e083      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 80195aa:	2300      	movs	r3, #0
 80195ac:	61bb      	str	r3, [r7, #24]
            break;
 80195ae:	e080      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 80195b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80195b4:	61bb      	str	r3, [r7, #24]
            break;
 80195b6:	e07c      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80195b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80195bc:	61bb      	str	r3, [r7, #24]
            break;
 80195be:	e078      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80195c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80195c4:	61bb      	str	r3, [r7, #24]
            break;
 80195c6:	e074      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80195c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80195cc:	61bb      	str	r3, [r7, #24]
            break;
 80195ce:	e070      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80195d0:	f241 7370 	movw	r3, #6000	; 0x1770
 80195d4:	61bb      	str	r3, [r7, #24]
            break;
 80195d6:	e06c      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 80195d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80195dc:	483b      	ldr	r0, [pc, #236]	; (80196cc <RegionUS915GetPhyParam+0x2a0>)
 80195de:	f001 f8a7 	bl	801a730 <randr>
 80195e2:	4603      	mov	r3, r0
 80195e4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80195e8:	61bb      	str	r3, [r7, #24]
            break;
 80195ea:	e062      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80195ec:	2300      	movs	r3, #0
 80195ee:	61bb      	str	r3, [r7, #24]
            break;
 80195f0:	e05f      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 80195f2:	4b37      	ldr	r3, [pc, #220]	; (80196d0 <RegionUS915GetPhyParam+0x2a4>)
 80195f4:	61bb      	str	r3, [r7, #24]
            break;
 80195f6:	e05c      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 80195f8:	2308      	movs	r3, #8
 80195fa:	61bb      	str	r3, [r7, #24]
            break;
 80195fc:	e059      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80195fe:	4b30      	ldr	r3, [pc, #192]	; (80196c0 <RegionUS915GetPhyParam+0x294>)
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019606:	61bb      	str	r3, [r7, #24]
            break;
 8019608:	e053      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801960a:	4b2d      	ldr	r3, [pc, #180]	; (80196c0 <RegionUS915GetPhyParam+0x294>)
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8019612:	61bb      	str	r3, [r7, #24]
            break;
 8019614:	e04d      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8019616:	2348      	movs	r3, #72	; 0x48
 8019618:	61bb      	str	r3, [r7, #24]
            break;
 801961a:	e04a      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801961c:	4b28      	ldr	r3, [pc, #160]	; (80196c0 <RegionUS915GetPhyParam+0x294>)
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	61bb      	str	r3, [r7, #24]
            break;
 8019622:	e046      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8019624:	2300      	movs	r3, #0
 8019626:	61bb      	str	r3, [r7, #24]
            break;
 8019628:	e043      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801962a:	2300      	movs	r3, #0
 801962c:	61bb      	str	r3, [r7, #24]
            break;
 801962e:	e040      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8019630:	4b28      	ldr	r3, [pc, #160]	; (80196d4 <RegionUS915GetPhyParam+0x2a8>)
 8019632:	61bb      	str	r3, [r7, #24]
            break;
 8019634:	e03d      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8019636:	f04f 0300 	mov.w	r3, #0
 801963a:	61bb      	str	r3, [r7, #24]
            break;
 801963c:	e039      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	791b      	ldrb	r3, [r3, #4]
 8019642:	4a25      	ldr	r2, [pc, #148]	; (80196d8 <RegionUS915GetPhyParam+0x2ac>)
 8019644:	4922      	ldr	r1, [pc, #136]	; (80196d0 <RegionUS915GetPhyParam+0x2a4>)
 8019646:	4618      	mov	r0, r3
 8019648:	f7fe fefd 	bl	8018446 <RegionBaseUSCalcDownlinkFrequency>
 801964c:	4603      	mov	r3, r0
 801964e:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8019650:	e02f      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8019652:	2317      	movs	r3, #23
 8019654:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8019656:	2304      	movs	r3, #4
 8019658:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801965a:	2303      	movs	r3, #3
 801965c:	76bb      	strb	r3, [r7, #26]
            break;
 801965e:	e028      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8019660:	2308      	movs	r3, #8
 8019662:	61bb      	str	r3, [r7, #24]
            break;
 8019664:	e025      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8019666:	2308      	movs	r3, #8
 8019668:	61bb      	str	r3, [r7, #24]
            break;
 801966a:	e022      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	791b      	ldrb	r3, [r3, #4]
 8019670:	4a19      	ldr	r2, [pc, #100]	; (80196d8 <RegionUS915GetPhyParam+0x2ac>)
 8019672:	4917      	ldr	r1, [pc, #92]	; (80196d0 <RegionUS915GetPhyParam+0x2a4>)
 8019674:	4618      	mov	r0, r3
 8019676:	f7fe fee6 	bl	8018446 <RegionBaseUSCalcDownlinkFrequency>
 801967a:	4603      	mov	r3, r0
 801967c:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801967e:	e018      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8019680:	2308      	movs	r3, #8
 8019682:	61bb      	str	r3, [r7, #24]
            break;
 8019684:	e015      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8019686:	2308      	movs	r3, #8
 8019688:	61bb      	str	r3, [r7, #24]
            break;
 801968a:	e012      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019692:	461a      	mov	r2, r3
 8019694:	4b11      	ldr	r3, [pc, #68]	; (80196dc <RegionUS915GetPhyParam+0x2b0>)
 8019696:	5c9b      	ldrb	r3, [r3, r2]
 8019698:	61bb      	str	r3, [r7, #24]
            break;
 801969a:	e00a      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80196a2:	490f      	ldr	r1, [pc, #60]	; (80196e0 <RegionUS915GetPhyParam+0x2b4>)
 80196a4:	4618      	mov	r0, r3
 80196a6:	f7ff fdaf 	bl	8019208 <RegionCommonGetBandwidth>
 80196aa:	4603      	mov	r3, r0
 80196ac:	61bb      	str	r3, [r7, #24]
            break;
 80196ae:	e000      	b.n	80196b2 <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 80196b0:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 80196b2:	69bb      	ldr	r3, [r7, #24]
 80196b4:	61fb      	str	r3, [r7, #28]
 80196b6:	69fb      	ldr	r3, [r7, #28]
}
 80196b8:	4618      	mov	r0, r3
 80196ba:	3720      	adds	r7, #32
 80196bc:	46bd      	mov	sp, r7
 80196be:	bd80      	pop	{r7, pc}
 80196c0:	20001be4 	.word	0x20001be4
 80196c4:	08020408 	.word	0x08020408
 80196c8:	08020418 	.word	0x08020418
 80196cc:	fffffc18 	.word	0xfffffc18
 80196d0:	370870a0 	.word	0x370870a0
 80196d4:	4200999a 	.word	0x4200999a
 80196d8:	000927c0 	.word	0x000927c0
 80196dc:	080203a4 	.word	0x080203a4
 80196e0:	080203b4 	.word	0x080203b4

080196e4 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80196e4:	b590      	push	{r4, r7, lr}
 80196e6:	b085      	sub	sp, #20
 80196e8:	af02      	add	r7, sp, #8
 80196ea:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80196ec:	4b11      	ldr	r3, [pc, #68]	; (8019734 <RegionUS915SetBandTxDone+0x50>)
 80196ee:	681a      	ldr	r2, [r3, #0]
 80196f0:	4b11      	ldr	r3, [pc, #68]	; (8019738 <RegionUS915SetBandTxDone+0x54>)
 80196f2:	6819      	ldr	r1, [r3, #0]
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	781b      	ldrb	r3, [r3, #0]
 80196f8:	4618      	mov	r0, r3
 80196fa:	4603      	mov	r3, r0
 80196fc:	005b      	lsls	r3, r3, #1
 80196fe:	4403      	add	r3, r0
 8019700:	009b      	lsls	r3, r3, #2
 8019702:	440b      	add	r3, r1
 8019704:	3309      	adds	r3, #9
 8019706:	781b      	ldrb	r3, [r3, #0]
 8019708:	4619      	mov	r1, r3
 801970a:	460b      	mov	r3, r1
 801970c:	005b      	lsls	r3, r3, #1
 801970e:	440b      	add	r3, r1
 8019710:	00db      	lsls	r3, r3, #3
 8019712:	18d0      	adds	r0, r2, r3
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	6899      	ldr	r1, [r3, #8]
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	785c      	ldrb	r4, [r3, #1]
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	691a      	ldr	r2, [r3, #16]
 8019720:	9200      	str	r2, [sp, #0]
 8019722:	68db      	ldr	r3, [r3, #12]
 8019724:	4622      	mov	r2, r4
 8019726:	f7ff f905 	bl	8018934 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 801972a:	bf00      	nop
 801972c:	370c      	adds	r7, #12
 801972e:	46bd      	mov	sp, r7
 8019730:	bd90      	pop	{r4, r7, pc}
 8019732:	bf00      	nop
 8019734:	20001be8 	.word	0x20001be8
 8019738:	20001be4 	.word	0x20001be4

0801973c <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801973c:	b580      	push	{r7, lr}
 801973e:	b08a      	sub	sp, #40	; 0x28
 8019740:	af00      	add	r7, sp, #0
 8019742:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8019744:	2301      	movs	r3, #1
 8019746:	81bb      	strh	r3, [r7, #12]
 8019748:	2300      	movs	r3, #0
 801974a:	73bb      	strb	r3, [r7, #14]
 801974c:	2300      	movs	r3, #0
 801974e:	613b      	str	r3, [r7, #16]
 8019750:	2300      	movs	r3, #0
 8019752:	617b      	str	r3, [r7, #20]
 8019754:	2300      	movs	r3, #0
 8019756:	61bb      	str	r3, [r7, #24]
 8019758:	2300      	movs	r3, #0
 801975a:	61fb      	str	r3, [r7, #28]
 801975c:	2300      	movs	r3, #0
 801975e:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	7b1b      	ldrb	r3, [r3, #12]
 8019766:	2b00      	cmp	r3, #0
 8019768:	d007      	beq.n	801977a <RegionUS915InitDefaults+0x3e>
 801976a:	2b00      	cmp	r3, #0
 801976c:	f2c0 8104 	blt.w	8019978 <RegionUS915InitDefaults+0x23c>
 8019770:	3b01      	subs	r3, #1
 8019772:	2b01      	cmp	r3, #1
 8019774:	f200 8100 	bhi.w	8019978 <RegionUS915InitDefaults+0x23c>
 8019778:	e0ce      	b.n	8019918 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	2b00      	cmp	r3, #0
 8019780:	f000 80fc 	beq.w	801997c <RegionUS915InitDefaults+0x240>
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	685b      	ldr	r3, [r3, #4]
 8019788:	2b00      	cmp	r3, #0
 801978a:	f000 80f7 	beq.w	801997c <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	4a7c      	ldr	r2, [pc, #496]	; (8019984 <RegionUS915InitDefaults+0x248>)
 8019794:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	685b      	ldr	r3, [r3, #4]
 801979a:	4a7b      	ldr	r2, [pc, #492]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 801979c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	689b      	ldr	r3, [r3, #8]
 80197a2:	4a7a      	ldr	r2, [pc, #488]	; (801998c <RegionUS915InitDefaults+0x250>)
 80197a4:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80197a6:	4b77      	ldr	r3, [pc, #476]	; (8019984 <RegionUS915InitDefaults+0x248>)
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	2200      	movs	r2, #0
 80197ac:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 80197ae:	4b75      	ldr	r3, [pc, #468]	; (8019984 <RegionUS915InitDefaults+0x248>)
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	2200      	movs	r2, #0
 80197b4:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 80197b6:	4b75      	ldr	r3, [pc, #468]	; (801998c <RegionUS915InitDefaults+0x250>)
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	f107 010c 	add.w	r1, r7, #12
 80197be:	2218      	movs	r2, #24
 80197c0:	4618      	mov	r0, r3
 80197c2:	f000 ffcc 	bl	801a75e <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80197c6:	2300      	movs	r3, #0
 80197c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80197cc:	e02e      	b.n	801982c <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 80197ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80197d2:	4a6f      	ldr	r2, [pc, #444]	; (8019990 <RegionUS915InitDefaults+0x254>)
 80197d4:	fb03 f202 	mul.w	r2, r3, r2
 80197d8:	4b6e      	ldr	r3, [pc, #440]	; (8019994 <RegionUS915InitDefaults+0x258>)
 80197da:	4413      	add	r3, r2
 80197dc:	4a6a      	ldr	r2, [pc, #424]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 80197de:	6811      	ldr	r1, [r2, #0]
 80197e0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80197e4:	4618      	mov	r0, r3
 80197e6:	4613      	mov	r3, r2
 80197e8:	005b      	lsls	r3, r3, #1
 80197ea:	4413      	add	r3, r2
 80197ec:	009b      	lsls	r3, r3, #2
 80197ee:	440b      	add	r3, r1
 80197f0:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80197f2:	4b65      	ldr	r3, [pc, #404]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 80197f4:	6819      	ldr	r1, [r3, #0]
 80197f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80197fa:	4613      	mov	r3, r2
 80197fc:	005b      	lsls	r3, r3, #1
 80197fe:	4413      	add	r3, r2
 8019800:	009b      	lsls	r3, r3, #2
 8019802:	440b      	add	r3, r1
 8019804:	3308      	adds	r3, #8
 8019806:	2230      	movs	r2, #48	; 0x30
 8019808:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801980a:	4b5f      	ldr	r3, [pc, #380]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 801980c:	6819      	ldr	r1, [r3, #0]
 801980e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019812:	4613      	mov	r3, r2
 8019814:	005b      	lsls	r3, r3, #1
 8019816:	4413      	add	r3, r2
 8019818:	009b      	lsls	r3, r3, #2
 801981a:	440b      	add	r3, r1
 801981c:	3309      	adds	r3, #9
 801981e:	2200      	movs	r2, #0
 8019820:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8019822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019826:	3301      	adds	r3, #1
 8019828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801982c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019830:	2b3f      	cmp	r3, #63	; 0x3f
 8019832:	d9cc      	bls.n	80197ce <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8019834:	2340      	movs	r3, #64	; 0x40
 8019836:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801983a:	e02f      	b.n	801989c <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801983c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019840:	3b40      	subs	r3, #64	; 0x40
 8019842:	4a55      	ldr	r2, [pc, #340]	; (8019998 <RegionUS915InitDefaults+0x25c>)
 8019844:	fb03 f202 	mul.w	r2, r3, r2
 8019848:	4b54      	ldr	r3, [pc, #336]	; (801999c <RegionUS915InitDefaults+0x260>)
 801984a:	4413      	add	r3, r2
 801984c:	4a4e      	ldr	r2, [pc, #312]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 801984e:	6811      	ldr	r1, [r2, #0]
 8019850:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8019854:	4618      	mov	r0, r3
 8019856:	4613      	mov	r3, r2
 8019858:	005b      	lsls	r3, r3, #1
 801985a:	4413      	add	r3, r2
 801985c:	009b      	lsls	r3, r3, #2
 801985e:	440b      	add	r3, r1
 8019860:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8019862:	4b49      	ldr	r3, [pc, #292]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 8019864:	6819      	ldr	r1, [r3, #0]
 8019866:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801986a:	4613      	mov	r3, r2
 801986c:	005b      	lsls	r3, r3, #1
 801986e:	4413      	add	r3, r2
 8019870:	009b      	lsls	r3, r3, #2
 8019872:	440b      	add	r3, r1
 8019874:	3308      	adds	r3, #8
 8019876:	2244      	movs	r2, #68	; 0x44
 8019878:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801987a:	4b43      	ldr	r3, [pc, #268]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 801987c:	6819      	ldr	r1, [r3, #0]
 801987e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8019882:	4613      	mov	r3, r2
 8019884:	005b      	lsls	r3, r3, #1
 8019886:	4413      	add	r3, r2
 8019888:	009b      	lsls	r3, r3, #2
 801988a:	440b      	add	r3, r1
 801988c:	3309      	adds	r3, #9
 801988e:	2200      	movs	r2, #0
 8019890:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8019892:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019896:	3301      	adds	r3, #1
 8019898:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801989c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80198a0:	2b47      	cmp	r3, #71	; 0x47
 80198a2:	d9cb      	bls.n	801983c <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 80198a4:	4b38      	ldr	r3, [pc, #224]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80198ac:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 80198b0:	4b35      	ldr	r3, [pc, #212]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80198b8:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 80198bc:	4b32      	ldr	r3, [pc, #200]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80198c4:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 80198c8:	4b2f      	ldr	r3, [pc, #188]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80198d0:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 80198d4:	4b2c      	ldr	r3, [pc, #176]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	22ff      	movs	r2, #255	; 0xff
 80198da:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80198de:	4b2a      	ldr	r3, [pc, #168]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	2200      	movs	r2, #0
 80198e4:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80198e8:	4b27      	ldr	r3, [pc, #156]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80198f0:	4b25      	ldr	r3, [pc, #148]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80198f8:	2206      	movs	r2, #6
 80198fa:	4619      	mov	r1, r3
 80198fc:	f7fe fff4 	bl	80188e8 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8019900:	4b20      	ldr	r3, [pc, #128]	; (8019984 <RegionUS915InitDefaults+0x248>)
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	4618      	mov	r0, r3
 8019906:	4b20      	ldr	r3, [pc, #128]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801990e:	2206      	movs	r2, #6
 8019910:	4619      	mov	r1, r3
 8019912:	f7fe ffe9 	bl	80188e8 <RegionCommonChanMaskCopy>
            break;
 8019916:	e032      	b.n	801997e <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8019918:	4b1b      	ldr	r3, [pc, #108]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8019920:	4b19      	ldr	r3, [pc, #100]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8019928:	2206      	movs	r2, #6
 801992a:	4619      	mov	r1, r3
 801992c:	f7fe ffdc 	bl	80188e8 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8019930:	2300      	movs	r3, #0
 8019932:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8019936:	e01a      	b.n	801996e <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8019938:	4b12      	ldr	r3, [pc, #72]	; (8019984 <RegionUS915InitDefaults+0x248>)
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8019940:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8019944:	4b10      	ldr	r3, [pc, #64]	; (8019988 <RegionUS915InitDefaults+0x24c>)
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801994c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8019950:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8019954:	4b0b      	ldr	r3, [pc, #44]	; (8019984 <RegionUS915InitDefaults+0x248>)
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801995c:	4001      	ands	r1, r0
 801995e:	b289      	uxth	r1, r1
 8019960:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8019964:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019968:	3301      	adds	r3, #1
 801996a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801996e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019972:	2b05      	cmp	r3, #5
 8019974:	d9e0      	bls.n	8019938 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 8019976:	e002      	b.n	801997e <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 8019978:	bf00      	nop
 801997a:	e000      	b.n	801997e <RegionUS915InitDefaults+0x242>
                return;
 801997c:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801997e:	3728      	adds	r7, #40	; 0x28
 8019980:	46bd      	mov	sp, r7
 8019982:	bd80      	pop	{r7, pc}
 8019984:	20001be0 	.word	0x20001be0
 8019988:	20001be4 	.word	0x20001be4
 801998c:	20001be8 	.word	0x20001be8
 8019990:	00030d40 	.word	0x00030d40
 8019994:	35c80160 	.word	0x35c80160
 8019998:	00186a00 	.word	0x00186a00
 801999c:	35d2afc0 	.word	0x35d2afc0

080199a0 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80199a0:	b580      	push	{r7, lr}
 80199a2:	b082      	sub	sp, #8
 80199a4:	af00      	add	r7, sp, #0
 80199a6:	6078      	str	r0, [r7, #4]
 80199a8:	460b      	mov	r3, r1
 80199aa:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 80199ac:	78fb      	ldrb	r3, [r7, #3]
 80199ae:	2b0f      	cmp	r3, #15
 80199b0:	d867      	bhi.n	8019a82 <RegionUS915Verify+0xe2>
 80199b2:	a201      	add	r2, pc, #4	; (adr r2, 80199b8 <RegionUS915Verify+0x18>)
 80199b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199b8:	080199f9 	.word	0x080199f9
 80199bc:	08019a83 	.word	0x08019a83
 80199c0:	08019a83 	.word	0x08019a83
 80199c4:	08019a83 	.word	0x08019a83
 80199c8:	08019a83 	.word	0x08019a83
 80199cc:	08019a07 	.word	0x08019a07
 80199d0:	08019a25 	.word	0x08019a25
 80199d4:	08019a43 	.word	0x08019a43
 80199d8:	08019a83 	.word	0x08019a83
 80199dc:	08019a61 	.word	0x08019a61
 80199e0:	08019a61 	.word	0x08019a61
 80199e4:	08019a83 	.word	0x08019a83
 80199e8:	08019a83 	.word	0x08019a83
 80199ec:	08019a83 	.word	0x08019a83
 80199f0:	08019a83 	.word	0x08019a83
 80199f4:	08019a7f 	.word	0x08019a7f
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	4618      	mov	r0, r3
 80199fe:	f7ff fca1 	bl	8019344 <VerifyRfFreq>
 8019a02:	4603      	mov	r3, r0
 8019a04:	e03e      	b.n	8019a84 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	f993 3000 	ldrsb.w	r3, [r3]
 8019a0c:	2204      	movs	r2, #4
 8019a0e:	2100      	movs	r1, #0
 8019a10:	4618      	mov	r0, r3
 8019a12:	f7fe feec 	bl	80187ee <RegionCommonValueInRange>
 8019a16:	4603      	mov	r3, r0
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	bf14      	ite	ne
 8019a1c:	2301      	movne	r3, #1
 8019a1e:	2300      	moveq	r3, #0
 8019a20:	b2db      	uxtb	r3, r3
 8019a22:	e02f      	b.n	8019a84 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	f993 3000 	ldrsb.w	r3, [r3]
 8019a2a:	2205      	movs	r2, #5
 8019a2c:	2100      	movs	r1, #0
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f7fe fedd 	bl	80187ee <RegionCommonValueInRange>
 8019a34:	4603      	mov	r3, r0
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	bf14      	ite	ne
 8019a3a:	2301      	movne	r3, #1
 8019a3c:	2300      	moveq	r3, #0
 8019a3e:	b2db      	uxtb	r3, r3
 8019a40:	e020      	b.n	8019a84 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	f993 3000 	ldrsb.w	r3, [r3]
 8019a48:	220d      	movs	r2, #13
 8019a4a:	2108      	movs	r1, #8
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	f7fe fece 	bl	80187ee <RegionCommonValueInRange>
 8019a52:	4603      	mov	r3, r0
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	bf14      	ite	ne
 8019a58:	2301      	movne	r3, #1
 8019a5a:	2300      	moveq	r3, #0
 8019a5c:	b2db      	uxtb	r3, r3
 8019a5e:	e011      	b.n	8019a84 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	f993 3000 	ldrsb.w	r3, [r3]
 8019a66:	220e      	movs	r2, #14
 8019a68:	2100      	movs	r1, #0
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	f7fe febf 	bl	80187ee <RegionCommonValueInRange>
 8019a70:	4603      	mov	r3, r0
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	bf14      	ite	ne
 8019a76:	2301      	movne	r3, #1
 8019a78:	2300      	moveq	r3, #0
 8019a7a:	b2db      	uxtb	r3, r3
 8019a7c:	e002      	b.n	8019a84 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 8019a7e:	2300      	movs	r3, #0
 8019a80:	e000      	b.n	8019a84 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 8019a82:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8019a84:	4618      	mov	r0, r3
 8019a86:	3708      	adds	r7, #8
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	bd80      	pop	{r7, pc}

08019a8c <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8019a8c:	b480      	push	{r7}
 8019a8e:	b085      	sub	sp, #20
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	7a1b      	ldrb	r3, [r3, #8]
 8019a98:	2b10      	cmp	r3, #16
 8019a9a:	d160      	bne.n	8019b5e <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	685b      	ldr	r3, [r3, #4]
 8019aa0:	330f      	adds	r3, #15
 8019aa2:	781b      	ldrb	r3, [r3, #0]
 8019aa4:	2b01      	cmp	r3, #1
 8019aa6:	d15c      	bne.n	8019b62 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8019aa8:	2300      	movs	r3, #0
 8019aaa:	73fb      	strb	r3, [r7, #15]
 8019aac:	2300      	movs	r3, #0
 8019aae:	73bb      	strb	r3, [r7, #14]
 8019ab0:	e051      	b.n	8019b56 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	685a      	ldr	r2, [r3, #4]
 8019ab6:	7bbb      	ldrb	r3, [r7, #14]
 8019ab8:	4413      	add	r3, r2
 8019aba:	7819      	ldrb	r1, [r3, #0]
 8019abc:	4b2b      	ldr	r3, [pc, #172]	; (8019b6c <RegionUS915ApplyCFList+0xe0>)
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	7bfa      	ldrb	r2, [r7, #15]
 8019ac2:	b289      	uxth	r1, r1
 8019ac4:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8019ac8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8019acc:	4b27      	ldr	r3, [pc, #156]	; (8019b6c <RegionUS915ApplyCFList+0xe0>)
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	7bfa      	ldrb	r2, [r7, #15]
 8019ad2:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8019ad6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	685a      	ldr	r2, [r3, #4]
 8019ade:	7bbb      	ldrb	r3, [r7, #14]
 8019ae0:	3301      	adds	r3, #1
 8019ae2:	4413      	add	r3, r2
 8019ae4:	781b      	ldrb	r3, [r3, #0]
 8019ae6:	b29b      	uxth	r3, r3
 8019ae8:	021b      	lsls	r3, r3, #8
 8019aea:	b299      	uxth	r1, r3
 8019aec:	4b1f      	ldr	r3, [pc, #124]	; (8019b6c <RegionUS915ApplyCFList+0xe0>)
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	7bfa      	ldrb	r2, [r7, #15]
 8019af2:	4301      	orrs	r1, r0
 8019af4:	b289      	uxth	r1, r1
 8019af6:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8019afa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 8019afe:	7bfb      	ldrb	r3, [r7, #15]
 8019b00:	2b04      	cmp	r3, #4
 8019b02:	d10f      	bne.n	8019b24 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8019b04:	4b19      	ldr	r3, [pc, #100]	; (8019b6c <RegionUS915ApplyCFList+0xe0>)
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	7bfa      	ldrb	r2, [r7, #15]
 8019b0a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8019b0e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8019b12:	4b16      	ldr	r3, [pc, #88]	; (8019b6c <RegionUS915ApplyCFList+0xe0>)
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	7bfa      	ldrb	r2, [r7, #15]
 8019b18:	b2c9      	uxtb	r1, r1
 8019b1a:	b289      	uxth	r1, r1
 8019b1c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8019b20:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8019b24:	4b12      	ldr	r3, [pc, #72]	; (8019b70 <RegionUS915ApplyCFList+0xe4>)
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	7bfa      	ldrb	r2, [r7, #15]
 8019b2a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8019b2e:	4b0f      	ldr	r3, [pc, #60]	; (8019b6c <RegionUS915ApplyCFList+0xe0>)
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	7bfa      	ldrb	r2, [r7, #15]
 8019b34:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8019b38:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8019b3c:	4b0c      	ldr	r3, [pc, #48]	; (8019b70 <RegionUS915ApplyCFList+0xe4>)
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	7bfa      	ldrb	r2, [r7, #15]
 8019b42:	4001      	ands	r1, r0
 8019b44:	b289      	uxth	r1, r1
 8019b46:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8019b4a:	7bfb      	ldrb	r3, [r7, #15]
 8019b4c:	3301      	adds	r3, #1
 8019b4e:	73fb      	strb	r3, [r7, #15]
 8019b50:	7bbb      	ldrb	r3, [r7, #14]
 8019b52:	3302      	adds	r3, #2
 8019b54:	73bb      	strb	r3, [r7, #14]
 8019b56:	7bfb      	ldrb	r3, [r7, #15]
 8019b58:	2b04      	cmp	r3, #4
 8019b5a:	d9aa      	bls.n	8019ab2 <RegionUS915ApplyCFList+0x26>
 8019b5c:	e002      	b.n	8019b64 <RegionUS915ApplyCFList+0xd8>
        return;
 8019b5e:	bf00      	nop
 8019b60:	e000      	b.n	8019b64 <RegionUS915ApplyCFList+0xd8>
        return;
 8019b62:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8019b64:	3714      	adds	r7, #20
 8019b66:	46bd      	mov	sp, r7
 8019b68:	bc80      	pop	{r7}
 8019b6a:	4770      	bx	lr
 8019b6c:	20001be4 	.word	0x20001be4
 8019b70:	20001be0 	.word	0x20001be0

08019b74 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8019b74:	b580      	push	{r7, lr}
 8019b76:	b084      	sub	sp, #16
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	681b      	ldr	r3, [r3, #0]
 8019b80:	2204      	movs	r2, #4
 8019b82:	2100      	movs	r1, #0
 8019b84:	4618      	mov	r0, r3
 8019b86:	f7fe fe83 	bl	8018890 <RegionCommonCountChannels>
 8019b8a:	4603      	mov	r3, r0
 8019b8c:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8019b8e:	7bbb      	ldrb	r3, [r7, #14]
 8019b90:	2b01      	cmp	r3, #1
 8019b92:	d804      	bhi.n	8019b9e <RegionUS915ChanMaskSet+0x2a>
 8019b94:	7bbb      	ldrb	r3, [r7, #14]
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d001      	beq.n	8019b9e <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	e04a      	b.n	8019c34 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	791b      	ldrb	r3, [r3, #4]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d002      	beq.n	8019bac <RegionUS915ChanMaskSet+0x38>
 8019ba6:	2b01      	cmp	r3, #1
 8019ba8:	d036      	beq.n	8019c18 <RegionUS915ChanMaskSet+0xa4>
 8019baa:	e040      	b.n	8019c2e <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019bac:	4b23      	ldr	r3, [pc, #140]	; (8019c3c <RegionUS915ChanMaskSet+0xc8>)
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	2206      	movs	r2, #6
 8019bba:	4619      	mov	r1, r3
 8019bbc:	f7fe fe94 	bl	80188e8 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8019bc0:	4b1e      	ldr	r3, [pc, #120]	; (8019c3c <RegionUS915ChanMaskSet+0xc8>)
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 8019bc8:	4b1c      	ldr	r3, [pc, #112]	; (8019c3c <RegionUS915ChanMaskSet+0xc8>)
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	b2d2      	uxtb	r2, r2
 8019bce:	b292      	uxth	r2, r2
 8019bd0:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8019bd4:	4b19      	ldr	r3, [pc, #100]	; (8019c3c <RegionUS915ChanMaskSet+0xc8>)
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	2200      	movs	r2, #0
 8019bda:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8019bde:	2300      	movs	r3, #0
 8019be0:	73fb      	strb	r3, [r7, #15]
 8019be2:	e015      	b.n	8019c10 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8019be4:	4b16      	ldr	r3, [pc, #88]	; (8019c40 <RegionUS915ChanMaskSet+0xcc>)
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	7bfa      	ldrb	r2, [r7, #15]
 8019bea:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8019bee:	4b13      	ldr	r3, [pc, #76]	; (8019c3c <RegionUS915ChanMaskSet+0xc8>)
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	7bfa      	ldrb	r2, [r7, #15]
 8019bf4:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8019bf8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8019bfc:	4b10      	ldr	r3, [pc, #64]	; (8019c40 <RegionUS915ChanMaskSet+0xcc>)
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	7bfa      	ldrb	r2, [r7, #15]
 8019c02:	4001      	ands	r1, r0
 8019c04:	b289      	uxth	r1, r1
 8019c06:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8019c0a:	7bfb      	ldrb	r3, [r7, #15]
 8019c0c:	3301      	adds	r3, #1
 8019c0e:	73fb      	strb	r3, [r7, #15]
 8019c10:	7bfb      	ldrb	r3, [r7, #15]
 8019c12:	2b05      	cmp	r3, #5
 8019c14:	d9e6      	bls.n	8019be4 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8019c16:	e00c      	b.n	8019c32 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019c18:	4b08      	ldr	r3, [pc, #32]	; (8019c3c <RegionUS915ChanMaskSet+0xc8>)
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	2206      	movs	r2, #6
 8019c26:	4619      	mov	r1, r3
 8019c28:	f7fe fe5e 	bl	80188e8 <RegionCommonChanMaskCopy>
            break;
 8019c2c:	e001      	b.n	8019c32 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 8019c2e:	2300      	movs	r3, #0
 8019c30:	e000      	b.n	8019c34 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 8019c32:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8019c34:	4618      	mov	r0, r3
 8019c36:	3710      	adds	r7, #16
 8019c38:	46bd      	mov	sp, r7
 8019c3a:	bd80      	pop	{r7, pc}
 8019c3c:	20001be4 	.word	0x20001be4
 8019c40:	20001be0 	.word	0x20001be0

08019c44 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019c44:	b580      	push	{r7, lr}
 8019c46:	b088      	sub	sp, #32
 8019c48:	af02      	add	r7, sp, #8
 8019c4a:	60ba      	str	r2, [r7, #8]
 8019c4c:	607b      	str	r3, [r7, #4]
 8019c4e:	4603      	mov	r3, r0
 8019c50:	73fb      	strb	r3, [r7, #15]
 8019c52:	460b      	mov	r3, r1
 8019c54:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 8019c56:	2300      	movs	r3, #0
 8019c58:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8019c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019c5e:	2b0d      	cmp	r3, #13
 8019c60:	bfa8      	it	ge
 8019c62:	230d      	movge	r3, #13
 8019c64:	b25a      	sxtb	r2, r3
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019c70:	4916      	ldr	r1, [pc, #88]	; (8019ccc <RegionUS915ComputeRxWindowParameters+0x88>)
 8019c72:	4618      	mov	r0, r3
 8019c74:	f7ff fac8 	bl	8019208 <RegionCommonGetBandwidth>
 8019c78:	4603      	mov	r3, r0
 8019c7a:	b2da      	uxtb	r2, r3
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019c86:	461a      	mov	r2, r3
 8019c88:	4b11      	ldr	r3, [pc, #68]	; (8019cd0 <RegionUS915ComputeRxWindowParameters+0x8c>)
 8019c8a:	5c9a      	ldrb	r2, [r3, r2]
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019c92:	4619      	mov	r1, r3
 8019c94:	4b0d      	ldr	r3, [pc, #52]	; (8019ccc <RegionUS915ComputeRxWindowParameters+0x88>)
 8019c96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019c9a:	4619      	mov	r1, r3
 8019c9c:	4610      	mov	r0, r2
 8019c9e:	f7ff f841 	bl	8018d24 <RegionCommonComputeSymbolTimeLoRa>
 8019ca2:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8019ca4:	4b0b      	ldr	r3, [pc, #44]	; (8019cd4 <RegionUS915ComputeRxWindowParameters+0x90>)
 8019ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ca8:	4798      	blx	r3
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	3308      	adds	r3, #8
 8019cae:	687a      	ldr	r2, [r7, #4]
 8019cb0:	320c      	adds	r2, #12
 8019cb2:	7bb9      	ldrb	r1, [r7, #14]
 8019cb4:	9201      	str	r2, [sp, #4]
 8019cb6:	9300      	str	r3, [sp, #0]
 8019cb8:	4603      	mov	r3, r0
 8019cba:	68ba      	ldr	r2, [r7, #8]
 8019cbc:	6978      	ldr	r0, [r7, #20]
 8019cbe:	f7ff f847 	bl	8018d50 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8019cc2:	bf00      	nop
 8019cc4:	3718      	adds	r7, #24
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	bd80      	pop	{r7, pc}
 8019cca:	bf00      	nop
 8019ccc:	080203b4 	.word	0x080203b4
 8019cd0:	080203a4 	.word	0x080203a4
 8019cd4:	08020428 	.word	0x08020428

08019cd8 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8019cd8:	b590      	push	{r4, r7, lr}
 8019cda:	b091      	sub	sp, #68	; 0x44
 8019cdc:	af0a      	add	r7, sp, #40	; 0x28
 8019cde:	6078      	str	r0, [r7, #4]
 8019ce0:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	785b      	ldrb	r3, [r3, #1]
 8019ce6:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8019ce8:	2300      	movs	r3, #0
 8019cea:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8019cec:	2300      	movs	r3, #0
 8019cee:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	685b      	ldr	r3, [r3, #4]
 8019cf4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8019cf6:	4b34      	ldr	r3, [pc, #208]	; (8019dc8 <RegionUS915RxConfig+0xf0>)
 8019cf8:	685b      	ldr	r3, [r3, #4]
 8019cfa:	4798      	blx	r3
 8019cfc:	4603      	mov	r3, r0
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d001      	beq.n	8019d06 <RegionUS915RxConfig+0x2e>
    {
        return false;
 8019d02:	2300      	movs	r3, #0
 8019d04:	e05c      	b.n	8019dc0 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	7cdb      	ldrb	r3, [r3, #19]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d109      	bne.n	8019d22 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	781b      	ldrb	r3, [r3, #0]
 8019d12:	f003 0307 	and.w	r3, r3, #7
 8019d16:	4a2d      	ldr	r2, [pc, #180]	; (8019dcc <RegionUS915RxConfig+0xf4>)
 8019d18:	fb03 f202 	mul.w	r2, r3, r2
 8019d1c:	4b2c      	ldr	r3, [pc, #176]	; (8019dd0 <RegionUS915RxConfig+0xf8>)
 8019d1e:	4413      	add	r3, r2
 8019d20:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8019d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d26:	4a2b      	ldr	r2, [pc, #172]	; (8019dd4 <RegionUS915RxConfig+0xfc>)
 8019d28:	5cd3      	ldrb	r3, [r2, r3]
 8019d2a:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8019d2c:	4b26      	ldr	r3, [pc, #152]	; (8019dc8 <RegionUS915RxConfig+0xf0>)
 8019d2e:	68db      	ldr	r3, [r3, #12]
 8019d30:	6938      	ldr	r0, [r7, #16]
 8019d32:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8019d34:	4b24      	ldr	r3, [pc, #144]	; (8019dc8 <RegionUS915RxConfig+0xf0>)
 8019d36:	699c      	ldr	r4, [r3, #24]
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	789b      	ldrb	r3, [r3, #2]
 8019d3c:	4618      	mov	r0, r3
 8019d3e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	689b      	ldr	r3, [r3, #8]
 8019d46:	b29b      	uxth	r3, r3
 8019d48:	687a      	ldr	r2, [r7, #4]
 8019d4a:	7c92      	ldrb	r2, [r2, #18]
 8019d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8019d4e:	2201      	movs	r2, #1
 8019d50:	9208      	str	r2, [sp, #32]
 8019d52:	2200      	movs	r2, #0
 8019d54:	9207      	str	r2, [sp, #28]
 8019d56:	2200      	movs	r2, #0
 8019d58:	9206      	str	r2, [sp, #24]
 8019d5a:	2200      	movs	r2, #0
 8019d5c:	9205      	str	r2, [sp, #20]
 8019d5e:	2200      	movs	r2, #0
 8019d60:	9204      	str	r2, [sp, #16]
 8019d62:	2200      	movs	r2, #0
 8019d64:	9203      	str	r2, [sp, #12]
 8019d66:	9302      	str	r3, [sp, #8]
 8019d68:	2308      	movs	r3, #8
 8019d6a:	9301      	str	r3, [sp, #4]
 8019d6c:	2300      	movs	r3, #0
 8019d6e:	9300      	str	r3, [sp, #0]
 8019d70:	2301      	movs	r3, #1
 8019d72:	460a      	mov	r2, r1
 8019d74:	4601      	mov	r1, r0
 8019d76:	2001      	movs	r0, #1
 8019d78:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	7c5b      	ldrb	r3, [r3, #17]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d005      	beq.n	8019d8e <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8019d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d86:	4a14      	ldr	r2, [pc, #80]	; (8019dd8 <RegionUS915RxConfig+0x100>)
 8019d88:	5cd3      	ldrb	r3, [r2, r3]
 8019d8a:	75fb      	strb	r3, [r7, #23]
 8019d8c:	e004      	b.n	8019d98 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8019d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d92:	4a12      	ldr	r2, [pc, #72]	; (8019ddc <RegionUS915RxConfig+0x104>)
 8019d94:	5cd3      	ldrb	r3, [r2, r3]
 8019d96:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8019d98:	4b0b      	ldr	r3, [pc, #44]	; (8019dc8 <RegionUS915RxConfig+0xf0>)
 8019d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019d9c:	7dfa      	ldrb	r2, [r7, #23]
 8019d9e:	320d      	adds	r2, #13
 8019da0:	b2d2      	uxtb	r2, r2
 8019da2:	4611      	mov	r1, r2
 8019da4:	2001      	movs	r0, #1
 8019da6:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	7cdb      	ldrb	r3, [r3, #19]
 8019dac:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8019db0:	6939      	ldr	r1, [r7, #16]
 8019db2:	4618      	mov	r0, r3
 8019db4:	f7ff fa46 	bl	8019244 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8019db8:	683b      	ldr	r3, [r7, #0]
 8019dba:	7bfa      	ldrb	r2, [r7, #15]
 8019dbc:	701a      	strb	r2, [r3, #0]
    return true;
 8019dbe:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8019dc0:	4618      	mov	r0, r3
 8019dc2:	371c      	adds	r7, #28
 8019dc4:	46bd      	mov	sp, r7
 8019dc6:	bd90      	pop	{r4, r7, pc}
 8019dc8:	08020428 	.word	0x08020428
 8019dcc:	000927c0 	.word	0x000927c0
 8019dd0:	370870a0 	.word	0x370870a0
 8019dd4:	080203a4 	.word	0x080203a4
 8019dd8:	08020418 	.word	0x08020418
 8019ddc:	08020408 	.word	0x08020408

08019de0 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8019de0:	b590      	push	{r4, r7, lr}
 8019de2:	b093      	sub	sp, #76	; 0x4c
 8019de4:	af0a      	add	r7, sp, #40	; 0x28
 8019de6:	60f8      	str	r0, [r7, #12]
 8019de8:	60b9      	str	r1, [r7, #8]
 8019dea:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8019dec:	68fb      	ldr	r3, [r7, #12]
 8019dee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019df2:	461a      	mov	r2, r3
 8019df4:	4b49      	ldr	r3, [pc, #292]	; (8019f1c <RegionUS915TxConfig+0x13c>)
 8019df6:	5c9b      	ldrb	r3, [r3, r2]
 8019df8:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019e00:	4b47      	ldr	r3, [pc, #284]	; (8019f20 <RegionUS915TxConfig+0x140>)
 8019e02:	681a      	ldr	r2, [r3, #0]
 8019e04:	4b47      	ldr	r3, [pc, #284]	; (8019f24 <RegionUS915TxConfig+0x144>)
 8019e06:	6819      	ldr	r1, [r3, #0]
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	781b      	ldrb	r3, [r3, #0]
 8019e0c:	461c      	mov	r4, r3
 8019e0e:	4623      	mov	r3, r4
 8019e10:	005b      	lsls	r3, r3, #1
 8019e12:	4423      	add	r3, r4
 8019e14:	009b      	lsls	r3, r3, #2
 8019e16:	440b      	add	r3, r1
 8019e18:	3309      	adds	r3, #9
 8019e1a:	781b      	ldrb	r3, [r3, #0]
 8019e1c:	4619      	mov	r1, r3
 8019e1e:	460b      	mov	r3, r1
 8019e20:	005b      	lsls	r3, r3, #1
 8019e22:	440b      	add	r3, r1
 8019e24:	00db      	lsls	r3, r3, #3
 8019e26:	4413      	add	r3, r2
 8019e28:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8019e32:	4b3c      	ldr	r3, [pc, #240]	; (8019f24 <RegionUS915TxConfig+0x144>)
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019e3a:	f7ff fa4d 	bl	80192d8 <LimitTxPower>
 8019e3e:	4603      	mov	r3, r0
 8019e40:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019e48:	4937      	ldr	r1, [pc, #220]	; (8019f28 <RegionUS915TxConfig+0x148>)
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	f7ff f9dc 	bl	8019208 <RegionCommonGetBandwidth>
 8019e50:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8019e52:	2300      	movs	r3, #0
 8019e54:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8019e56:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019e5a:	f04f 0200 	mov.w	r2, #0
 8019e5e:	4933      	ldr	r1, [pc, #204]	; (8019f2c <RegionUS915TxConfig+0x14c>)
 8019e60:	4618      	mov	r0, r3
 8019e62:	f7ff f82d 	bl	8018ec0 <RegionCommonComputeTxPower>
 8019e66:	4603      	mov	r3, r0
 8019e68:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8019e6a:	4b31      	ldr	r3, [pc, #196]	; (8019f30 <RegionUS915TxConfig+0x150>)
 8019e6c:	68da      	ldr	r2, [r3, #12]
 8019e6e:	4b2d      	ldr	r3, [pc, #180]	; (8019f24 <RegionUS915TxConfig+0x144>)
 8019e70:	6819      	ldr	r1, [r3, #0]
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	781b      	ldrb	r3, [r3, #0]
 8019e76:	4618      	mov	r0, r3
 8019e78:	4603      	mov	r3, r0
 8019e7a:	005b      	lsls	r3, r3, #1
 8019e7c:	4403      	add	r3, r0
 8019e7e:	009b      	lsls	r3, r3, #2
 8019e80:	440b      	add	r3, r1
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	4618      	mov	r0, r3
 8019e86:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8019e88:	4b29      	ldr	r3, [pc, #164]	; (8019f30 <RegionUS915TxConfig+0x150>)
 8019e8a:	69dc      	ldr	r4, [r3, #28]
 8019e8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019e90:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019e94:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8019e98:	9208      	str	r2, [sp, #32]
 8019e9a:	2200      	movs	r2, #0
 8019e9c:	9207      	str	r2, [sp, #28]
 8019e9e:	2200      	movs	r2, #0
 8019ea0:	9206      	str	r2, [sp, #24]
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	9205      	str	r2, [sp, #20]
 8019ea6:	2201      	movs	r2, #1
 8019ea8:	9204      	str	r2, [sp, #16]
 8019eaa:	2200      	movs	r2, #0
 8019eac:	9203      	str	r2, [sp, #12]
 8019eae:	2208      	movs	r2, #8
 8019eb0:	9202      	str	r2, [sp, #8]
 8019eb2:	2201      	movs	r2, #1
 8019eb4:	9201      	str	r2, [sp, #4]
 8019eb6:	9300      	str	r3, [sp, #0]
 8019eb8:	69bb      	ldr	r3, [r7, #24]
 8019eba:	2200      	movs	r2, #0
 8019ebc:	2001      	movs	r0, #1
 8019ebe:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8019ec0:	4b18      	ldr	r3, [pc, #96]	; (8019f24 <RegionUS915TxConfig+0x144>)
 8019ec2:	681a      	ldr	r2, [r3, #0]
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	781b      	ldrb	r3, [r3, #0]
 8019ec8:	4619      	mov	r1, r3
 8019eca:	460b      	mov	r3, r1
 8019ecc:	005b      	lsls	r3, r3, #1
 8019ece:	440b      	add	r3, r1
 8019ed0:	009b      	lsls	r3, r3, #2
 8019ed2:	4413      	add	r3, r2
 8019ed4:	681a      	ldr	r2, [r3, #0]
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019edc:	4619      	mov	r1, r3
 8019ede:	4610      	mov	r0, r2
 8019ee0:	f7ff f9e2 	bl	80192a8 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8019ee4:	4b12      	ldr	r3, [pc, #72]	; (8019f30 <RegionUS915TxConfig+0x150>)
 8019ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019ee8:	68fa      	ldr	r2, [r7, #12]
 8019eea:	8992      	ldrh	r2, [r2, #12]
 8019eec:	b2d2      	uxtb	r2, r2
 8019eee:	4611      	mov	r1, r2
 8019ef0:	2001      	movs	r0, #1
 8019ef2:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	899b      	ldrh	r3, [r3, #12]
 8019efe:	4619      	mov	r1, r3
 8019f00:	4610      	mov	r0, r2
 8019f02:	f7ff fa63 	bl	80193cc <GetTimeOnAir>
 8019f06:	4602      	mov	r2, r0
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8019f0c:	68bb      	ldr	r3, [r7, #8]
 8019f0e:	7fba      	ldrb	r2, [r7, #30]
 8019f10:	701a      	strb	r2, [r3, #0]
    return true;
 8019f12:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8019f14:	4618      	mov	r0, r3
 8019f16:	3724      	adds	r7, #36	; 0x24
 8019f18:	46bd      	mov	sp, r7
 8019f1a:	bd90      	pop	{r4, r7, pc}
 8019f1c:	080203a4 	.word	0x080203a4
 8019f20:	20001be8 	.word	0x20001be8
 8019f24:	20001be4 	.word	0x20001be4
 8019f28:	080203b4 	.word	0x080203b4
 8019f2c:	41f00000 	.word	0x41f00000
 8019f30:	08020428 	.word	0x08020428

08019f34 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019f34:	b590      	push	{r4, r7, lr}
 8019f36:	b097      	sub	sp, #92	; 0x5c
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	60f8      	str	r0, [r7, #12]
 8019f3c:	60b9      	str	r1, [r7, #8]
 8019f3e:	607a      	str	r2, [r7, #4]
 8019f40:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8019f42:	2307      	movs	r3, #7
 8019f44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019f48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8019f4c:	2200      	movs	r2, #0
 8019f4e:	601a      	str	r2, [r3, #0]
 8019f50:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8019f52:	2300      	movs	r3, #0
 8019f54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 8019f58:	2300      	movs	r3, #0
 8019f5a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8019f5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019f62:	2200      	movs	r2, #0
 8019f64:	601a      	str	r2, [r3, #0]
 8019f66:	605a      	str	r2, [r3, #4]
 8019f68:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8019f6a:	4b97      	ldr	r3, [pc, #604]	; (801a1c8 <RegionUS915LinkAdrReq+0x294>)
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	f503 7158 	add.w	r1, r3, #864	; 0x360
 8019f72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019f76:	2206      	movs	r2, #6
 8019f78:	4618      	mov	r0, r3
 8019f7a:	f7fe fcb5 	bl	80188e8 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019f7e:	e11b      	b.n	801a1b8 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8019f80:	68fb      	ldr	r3, [r7, #12]
 8019f82:	685a      	ldr	r2, [r3, #4]
 8019f84:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8019f88:	4413      	add	r3, r2
 8019f8a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019f8e:	4611      	mov	r1, r2
 8019f90:	4618      	mov	r0, r3
 8019f92:	f7fe fded 	bl	8018b70 <RegionCommonParseLinkAdrReq>
 8019f96:	4603      	mov	r3, r0
 8019f98:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 8019f9c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	f000 8113 	beq.w	801a1cc <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8019fa6:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8019faa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8019fae:	4413      	add	r3, r2
 8019fb0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8019fb4:	2307      	movs	r3, #7
 8019fb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 8019fba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8019fbe:	2b06      	cmp	r3, #6
 8019fc0:	d116      	bne.n	8019ff0 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8019fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019fc6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 8019fca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019fce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 8019fd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019fd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 8019fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019fde:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8019fe2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8019fe6:	b2db      	uxtb	r3, r3
 8019fe8:	b29b      	uxth	r3, r3
 8019fea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8019fee:	e0e3      	b.n	801a1b8 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8019ff0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8019ff4:	2b07      	cmp	r3, #7
 8019ff6:	d112      	bne.n	801a01e <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 8019ffe:	2300      	movs	r3, #0
 801a000:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 801a004:	2300      	movs	r3, #0
 801a006:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 801a00a:	2300      	movs	r3, #0
 801a00c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801a010:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801a014:	b2db      	uxtb	r3, r3
 801a016:	b29b      	uxth	r3, r3
 801a018:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801a01c:	e0cc      	b.n	801a1b8 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801a01e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a022:	2b05      	cmp	r3, #5
 801a024:	f040 80bf 	bne.w	801a1a6 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 801a028:	2301      	movs	r3, #1
 801a02a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801a02e:	2300      	movs	r3, #0
 801a030:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801a034:	2300      	movs	r3, #0
 801a036:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801a03a:	e0ae      	b.n	801a19a <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801a03c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801a040:	b2da      	uxtb	r2, r3
 801a042:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801a046:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a04a:	fa01 f303 	lsl.w	r3, r1, r3
 801a04e:	4013      	ands	r3, r2
 801a050:	2b00      	cmp	r3, #0
 801a052:	d04d      	beq.n	801a0f0 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 801a054:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a058:	f003 0301 	and.w	r3, r3, #1
 801a05c:	b2db      	uxtb	r3, r3
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d120      	bne.n	801a0a4 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801a062:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801a066:	005b      	lsls	r3, r3, #1
 801a068:	3358      	adds	r3, #88	; 0x58
 801a06a:	443b      	add	r3, r7
 801a06c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801a070:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801a074:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 801a078:	b292      	uxth	r2, r2
 801a07a:	005b      	lsls	r3, r3, #1
 801a07c:	3358      	adds	r3, #88	; 0x58
 801a07e:	443b      	add	r3, r7
 801a080:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801a084:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801a088:	b21a      	sxth	r2, r3
 801a08a:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801a08e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a092:	fa01 f303 	lsl.w	r3, r1, r3
 801a096:	b21b      	sxth	r3, r3
 801a098:	4313      	orrs	r3, r2
 801a09a:	b21b      	sxth	r3, r3
 801a09c:	b29b      	uxth	r3, r3
 801a09e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801a0a2:	e075      	b.n	801a190 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 801a0a4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801a0a8:	005b      	lsls	r3, r3, #1
 801a0aa:	3358      	adds	r3, #88	; 0x58
 801a0ac:	443b      	add	r3, r7
 801a0ae:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801a0b2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801a0b6:	f062 02ff 	orn	r2, r2, #255	; 0xff
 801a0ba:	b292      	uxth	r2, r2
 801a0bc:	005b      	lsls	r3, r3, #1
 801a0be:	3358      	adds	r3, #88	; 0x58
 801a0c0:	443b      	add	r3, r7
 801a0c2:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801a0c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801a0ca:	b21a      	sxth	r2, r3
 801a0cc:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801a0d0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a0d4:	fa01 f303 	lsl.w	r3, r1, r3
 801a0d8:	b21b      	sxth	r3, r3
 801a0da:	4313      	orrs	r3, r2
 801a0dc:	b21b      	sxth	r3, r3
 801a0de:	b29b      	uxth	r3, r3
 801a0e0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801a0e4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801a0e8:	3301      	adds	r3, #1
 801a0ea:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801a0ee:	e04f      	b.n	801a190 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801a0f0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a0f4:	f003 0301 	and.w	r3, r3, #1
 801a0f8:	b2db      	uxtb	r3, r3
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d122      	bne.n	801a144 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801a0fe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801a102:	005b      	lsls	r3, r3, #1
 801a104:	3358      	adds	r3, #88	; 0x58
 801a106:	443b      	add	r3, r7
 801a108:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801a10c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801a110:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801a114:	b292      	uxth	r2, r2
 801a116:	005b      	lsls	r3, r3, #1
 801a118:	3358      	adds	r3, #88	; 0x58
 801a11a:	443b      	add	r3, r7
 801a11c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801a120:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801a124:	b21a      	sxth	r2, r3
 801a126:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801a12a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a12e:	fa01 f303 	lsl.w	r3, r1, r3
 801a132:	b21b      	sxth	r3, r3
 801a134:	43db      	mvns	r3, r3
 801a136:	b21b      	sxth	r3, r3
 801a138:	4013      	ands	r3, r2
 801a13a:	b21b      	sxth	r3, r3
 801a13c:	b29b      	uxth	r3, r3
 801a13e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801a142:	e025      	b.n	801a190 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801a144:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801a148:	005b      	lsls	r3, r3, #1
 801a14a:	3358      	adds	r3, #88	; 0x58
 801a14c:	443b      	add	r3, r7
 801a14e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801a152:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801a156:	b2d2      	uxtb	r2, r2
 801a158:	b292      	uxth	r2, r2
 801a15a:	005b      	lsls	r3, r3, #1
 801a15c:	3358      	adds	r3, #88	; 0x58
 801a15e:	443b      	add	r3, r7
 801a160:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801a164:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801a168:	b21a      	sxth	r2, r3
 801a16a:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801a16e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a172:	fa01 f303 	lsl.w	r3, r1, r3
 801a176:	b21b      	sxth	r3, r3
 801a178:	43db      	mvns	r3, r3
 801a17a:	b21b      	sxth	r3, r3
 801a17c:	4013      	ands	r3, r2
 801a17e:	b21b      	sxth	r3, r3
 801a180:	b29b      	uxth	r3, r3
 801a182:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801a186:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801a18a:	3301      	adds	r3, #1
 801a18c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 801a190:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a194:	3301      	adds	r3, #1
 801a196:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801a19a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a19e:	2b07      	cmp	r3, #7
 801a1a0:	f67f af4c 	bls.w	801a03c <RegionUS915LinkAdrReq+0x108>
 801a1a4:	e008      	b.n	801a1b8 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801a1a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a1aa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801a1ae:	005b      	lsls	r3, r3, #1
 801a1b0:	3358      	adds	r3, #88	; 0x58
 801a1b2:	443b      	add	r3, r7
 801a1b4:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	7a1b      	ldrb	r3, [r3, #8]
 801a1bc:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801a1c0:	429a      	cmp	r2, r3
 801a1c2:	f4ff aedd 	bcc.w	8019f80 <RegionUS915LinkAdrReq+0x4c>
 801a1c6:	e002      	b.n	801a1ce <RegionUS915LinkAdrReq+0x29a>
 801a1c8:	20001be4 	.word	0x20001be4
            break; // break loop, since no more request has been found
 801a1cc:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801a1ce:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801a1d2:	2b03      	cmp	r3, #3
 801a1d4:	dc0f      	bgt.n	801a1f6 <RegionUS915LinkAdrReq+0x2c2>
 801a1d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a1da:	2204      	movs	r2, #4
 801a1dc:	2100      	movs	r1, #0
 801a1de:	4618      	mov	r0, r3
 801a1e0:	f7fe fb56 	bl	8018890 <RegionCommonCountChannels>
 801a1e4:	4603      	mov	r3, r0
 801a1e6:	2b01      	cmp	r3, #1
 801a1e8:	d805      	bhi.n	801a1f6 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 801a1ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801a1ee:	f023 0301 	bic.w	r3, r3, #1
 801a1f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801a1f6:	2302      	movs	r3, #2
 801a1f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801a1fc:	68fb      	ldr	r3, [r7, #12]
 801a1fe:	7a5b      	ldrb	r3, [r3, #9]
 801a200:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801a204:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a208:	4618      	mov	r0, r3
 801a20a:	f7ff f90f 	bl	801942c <RegionUS915GetPhyParam>
 801a20e:	4603      	mov	r3, r0
 801a210:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 801a212:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801a216:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	7a9b      	ldrb	r3, [r3, #10]
 801a21c:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801a21e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801a222:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801a224:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 801a228:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801a22a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801a22e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801a236:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801a238:	68fb      	ldr	r3, [r7, #12]
 801a23a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801a23e:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	7b5b      	ldrb	r3, [r3, #13]
 801a244:	b25b      	sxtb	r3, r3
 801a246:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801a248:	2348      	movs	r3, #72	; 0x48
 801a24a:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801a24e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a252:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801a254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a256:	b25b      	sxtb	r3, r3
 801a258:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801a25c:	2304      	movs	r3, #4
 801a25e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801a262:	4b3f      	ldr	r3, [pc, #252]	; (801a360 <RegionUS915LinkAdrReq+0x42c>)
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801a268:	230e      	movs	r3, #14
 801a26a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801a26e:	2300      	movs	r3, #0
 801a270:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801a27a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801a27e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a282:	1c9a      	adds	r2, r3, #2
 801a284:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a288:	1c59      	adds	r1, r3, #1
 801a28a:	f107 0014 	add.w	r0, r7, #20
 801a28e:	4623      	mov	r3, r4
 801a290:	f7fe fcbf 	bl	8018c12 <RegionCommonLinkAdrReqVerifyParams>
 801a294:	4603      	mov	r3, r0
 801a296:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801a29a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801a29e:	2b07      	cmp	r3, #7
 801a2a0:	d147      	bne.n	801a332 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801a2a2:	4b2f      	ldr	r3, [pc, #188]	; (801a360 <RegionUS915LinkAdrReq+0x42c>)
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a2aa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801a2ae:	2206      	movs	r2, #6
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	f7fe fb19 	bl	80188e8 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801a2b6:	4b2b      	ldr	r3, [pc, #172]	; (801a364 <RegionUS915LinkAdrReq+0x430>)
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	8819      	ldrh	r1, [r3, #0]
 801a2bc:	4b28      	ldr	r3, [pc, #160]	; (801a360 <RegionUS915LinkAdrReq+0x42c>)
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801a2c4:	4b27      	ldr	r3, [pc, #156]	; (801a364 <RegionUS915LinkAdrReq+0x430>)
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	400a      	ands	r2, r1
 801a2ca:	b292      	uxth	r2, r2
 801a2cc:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801a2ce:	4b25      	ldr	r3, [pc, #148]	; (801a364 <RegionUS915LinkAdrReq+0x430>)
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	8859      	ldrh	r1, [r3, #2]
 801a2d4:	4b22      	ldr	r3, [pc, #136]	; (801a360 <RegionUS915LinkAdrReq+0x42c>)
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 801a2dc:	4b21      	ldr	r3, [pc, #132]	; (801a364 <RegionUS915LinkAdrReq+0x430>)
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	400a      	ands	r2, r1
 801a2e2:	b292      	uxth	r2, r2
 801a2e4:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801a2e6:	4b1f      	ldr	r3, [pc, #124]	; (801a364 <RegionUS915LinkAdrReq+0x430>)
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	8899      	ldrh	r1, [r3, #4]
 801a2ec:	4b1c      	ldr	r3, [pc, #112]	; (801a360 <RegionUS915LinkAdrReq+0x42c>)
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 801a2f4:	4b1b      	ldr	r3, [pc, #108]	; (801a364 <RegionUS915LinkAdrReq+0x430>)
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	400a      	ands	r2, r1
 801a2fa:	b292      	uxth	r2, r2
 801a2fc:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801a2fe:	4b19      	ldr	r3, [pc, #100]	; (801a364 <RegionUS915LinkAdrReq+0x430>)
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	88d9      	ldrh	r1, [r3, #6]
 801a304:	4b16      	ldr	r3, [pc, #88]	; (801a360 <RegionUS915LinkAdrReq+0x42c>)
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 801a30c:	4b15      	ldr	r3, [pc, #84]	; (801a364 <RegionUS915LinkAdrReq+0x430>)
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	400a      	ands	r2, r1
 801a312:	b292      	uxth	r2, r2
 801a314:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801a316:	4b12      	ldr	r3, [pc, #72]	; (801a360 <RegionUS915LinkAdrReq+0x42c>)
 801a318:	681a      	ldr	r2, [r3, #0]
 801a31a:	4b12      	ldr	r3, [pc, #72]	; (801a364 <RegionUS915LinkAdrReq+0x430>)
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801a322:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801a324:	4b0e      	ldr	r3, [pc, #56]	; (801a360 <RegionUS915LinkAdrReq+0x42c>)
 801a326:	681a      	ldr	r2, [r3, #0]
 801a328:	4b0e      	ldr	r3, [pc, #56]	; (801a364 <RegionUS915LinkAdrReq+0x430>)
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801a330:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801a332:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 801a336:	68bb      	ldr	r3, [r7, #8]
 801a338:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801a33a:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801a342:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801a346:	683b      	ldr	r3, [r7, #0]
 801a348:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801a34a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a34c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801a350:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801a352:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801a356:	4618      	mov	r0, r3
 801a358:	375c      	adds	r7, #92	; 0x5c
 801a35a:	46bd      	mov	sp, r7
 801a35c:	bd90      	pop	{r4, r7, pc}
 801a35e:	bf00      	nop
 801a360:	20001be4 	.word	0x20001be4
 801a364:	20001be0 	.word	0x20001be0

0801a368 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801a368:	b580      	push	{r7, lr}
 801a36a:	b084      	sub	sp, #16
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801a370:	2307      	movs	r3, #7
 801a372:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	685b      	ldr	r3, [r3, #4]
 801a378:	4618      	mov	r0, r3
 801a37a:	f7fe ffe3 	bl	8019344 <VerifyRfFreq>
 801a37e:	4603      	mov	r3, r0
 801a380:	f083 0301 	eor.w	r3, r3, #1
 801a384:	b2db      	uxtb	r3, r3
 801a386:	2b00      	cmp	r3, #0
 801a388:	d003      	beq.n	801a392 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801a38a:	7bfb      	ldrb	r3, [r7, #15]
 801a38c:	f023 0301 	bic.w	r3, r3, #1
 801a390:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	f993 3000 	ldrsb.w	r3, [r3]
 801a398:	220d      	movs	r2, #13
 801a39a:	2108      	movs	r1, #8
 801a39c:	4618      	mov	r0, r3
 801a39e:	f7fe fa26 	bl	80187ee <RegionCommonValueInRange>
 801a3a2:	4603      	mov	r3, r0
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d103      	bne.n	801a3b0 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 801a3a8:	7bfb      	ldrb	r3, [r7, #15]
 801a3aa:	f023 0302 	bic.w	r3, r3, #2
 801a3ae:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	f993 3000 	ldrsb.w	r3, [r3]
 801a3b6:	2207      	movs	r2, #7
 801a3b8:	2105      	movs	r1, #5
 801a3ba:	4618      	mov	r0, r3
 801a3bc:	f7fe fa17 	bl	80187ee <RegionCommonValueInRange>
 801a3c0:	4603      	mov	r3, r0
 801a3c2:	2b01      	cmp	r3, #1
 801a3c4:	d004      	beq.n	801a3d0 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801a3cc:	2b0d      	cmp	r3, #13
 801a3ce:	dd03      	ble.n	801a3d8 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 801a3d0:	7bfb      	ldrb	r3, [r7, #15]
 801a3d2:	f023 0302 	bic.w	r3, r3, #2
 801a3d6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a3de:	2203      	movs	r2, #3
 801a3e0:	2100      	movs	r1, #0
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	f7fe fa03 	bl	80187ee <RegionCommonValueInRange>
 801a3e8:	4603      	mov	r3, r0
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d103      	bne.n	801a3f6 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801a3ee:	7bfb      	ldrb	r3, [r7, #15]
 801a3f0:	f023 0304 	bic.w	r3, r3, #4
 801a3f4:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 801a3f6:	7bfb      	ldrb	r3, [r7, #15]
}
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	3710      	adds	r7, #16
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	bd80      	pop	{r7, pc}

0801a400 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801a400:	b480      	push	{r7}
 801a402:	b083      	sub	sp, #12
 801a404:	af00      	add	r7, sp, #0
 801a406:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801a408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a40c:	4618      	mov	r0, r3
 801a40e:	370c      	adds	r7, #12
 801a410:	46bd      	mov	sp, r7
 801a412:	bc80      	pop	{r7}
 801a414:	4770      	bx	lr

0801a416 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801a416:	b480      	push	{r7}
 801a418:	b083      	sub	sp, #12
 801a41a:	af00      	add	r7, sp, #0
 801a41c:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801a41e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a422:	4618      	mov	r0, r3
 801a424:	370c      	adds	r7, #12
 801a426:	46bd      	mov	sp, r7
 801a428:	bc80      	pop	{r7}
 801a42a:	4770      	bx	lr

0801a42c <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801a42c:	b480      	push	{r7}
 801a42e:	b083      	sub	sp, #12
 801a430:	af00      	add	r7, sp, #0
 801a432:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801a434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a438:	4618      	mov	r0, r3
 801a43a:	370c      	adds	r7, #12
 801a43c:	46bd      	mov	sp, r7
 801a43e:	bc80      	pop	{r7}
 801a440:	4770      	bx	lr
	...

0801a444 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801a444:	b480      	push	{r7}
 801a446:	b083      	sub	sp, #12
 801a448:	af00      	add	r7, sp, #0
 801a44a:	4603      	mov	r3, r0
 801a44c:	460a      	mov	r2, r1
 801a44e:	71fb      	strb	r3, [r7, #7]
 801a450:	4613      	mov	r3, r2
 801a452:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 801a454:	79bb      	ldrb	r3, [r7, #6]
 801a456:	2b00      	cmp	r3, #0
 801a458:	d106      	bne.n	801a468 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801a45a:	4b13      	ldr	r3, [pc, #76]	; (801a4a8 <RegionUS915AlternateDr+0x64>)
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	7b5a      	ldrb	r2, [r3, #13]
 801a460:	3201      	adds	r2, #1
 801a462:	b2d2      	uxtb	r2, r2
 801a464:	735a      	strb	r2, [r3, #13]
 801a466:	e005      	b.n	801a474 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 801a468:	4b0f      	ldr	r3, [pc, #60]	; (801a4a8 <RegionUS915AlternateDr+0x64>)
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	7b5a      	ldrb	r2, [r3, #13]
 801a46e:	3a01      	subs	r2, #1
 801a470:	b2d2      	uxtb	r2, r2
 801a472:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 801a474:	4b0c      	ldr	r3, [pc, #48]	; (801a4a8 <RegionUS915AlternateDr+0x64>)
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	7b5a      	ldrb	r2, [r3, #13]
 801a47a:	4b0c      	ldr	r3, [pc, #48]	; (801a4ac <RegionUS915AlternateDr+0x68>)
 801a47c:	fba3 1302 	umull	r1, r3, r3, r2
 801a480:	0859      	lsrs	r1, r3, #1
 801a482:	460b      	mov	r3, r1
 801a484:	00db      	lsls	r3, r3, #3
 801a486:	440b      	add	r3, r1
 801a488:	1ad3      	subs	r3, r2, r3
 801a48a:	b2db      	uxtb	r3, r3
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d102      	bne.n	801a496 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 801a490:	2304      	movs	r3, #4
 801a492:	71fb      	strb	r3, [r7, #7]
 801a494:	e001      	b.n	801a49a <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 801a496:	2300      	movs	r3, #0
 801a498:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 801a49a:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 801a49e:	4618      	mov	r0, r3
 801a4a0:	370c      	adds	r7, #12
 801a4a2:	46bd      	mov	sp, r7
 801a4a4:	bc80      	pop	{r7}
 801a4a6:	4770      	bx	lr
 801a4a8:	20001be0 	.word	0x20001be0
 801a4ac:	38e38e39 	.word	0x38e38e39

0801a4b0 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801a4b0:	b580      	push	{r7, lr}
 801a4b2:	b0a8      	sub	sp, #160	; 0xa0
 801a4b4:	af02      	add	r7, sp, #8
 801a4b6:	60f8      	str	r0, [r7, #12]
 801a4b8:	60b9      	str	r1, [r7, #8]
 801a4ba:	607a      	str	r2, [r7, #4]
 801a4bc:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801a4be:	2300      	movs	r3, #0
 801a4c0:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801a4ca:	2300      	movs	r3, #0
 801a4cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a4ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a4d2:	2244      	movs	r2, #68	; 0x44
 801a4d4:	2100      	movs	r1, #0
 801a4d6:	4618      	mov	r0, r3
 801a4d8:	f004 ffde 	bl	801f498 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801a4dc:	230c      	movs	r3, #12
 801a4de:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801a4e2:	4b67      	ldr	r3, [pc, #412]	; (801a680 <RegionUS915NextChannel+0x1d0>)
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	2204      	movs	r2, #4
 801a4e8:	2100      	movs	r1, #0
 801a4ea:	4618      	mov	r0, r3
 801a4ec:	f7fe f9d0 	bl	8018890 <RegionCommonCountChannels>
 801a4f0:	4603      	mov	r3, r0
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d10e      	bne.n	801a514 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801a4f6:	4b62      	ldr	r3, [pc, #392]	; (801a680 <RegionUS915NextChannel+0x1d0>)
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	4b61      	ldr	r3, [pc, #388]	; (801a684 <RegionUS915NextChannel+0x1d4>)
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a504:	2204      	movs	r2, #4
 801a506:	4619      	mov	r1, r3
 801a508:	f7fe f9ee 	bl	80188e8 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801a50c:	4b5c      	ldr	r3, [pc, #368]	; (801a680 <RegionUS915NextChannel+0x1d0>)
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	2200      	movs	r2, #0
 801a512:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801a514:	68fb      	ldr	r3, [r7, #12]
 801a516:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801a51a:	2b03      	cmp	r3, #3
 801a51c:	dd0c      	ble.n	801a538 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801a51e:	4b58      	ldr	r3, [pc, #352]	; (801a680 <RegionUS915NextChannel+0x1d0>)
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	891b      	ldrh	r3, [r3, #8]
 801a524:	b2db      	uxtb	r3, r3
 801a526:	2b00      	cmp	r3, #0
 801a528:	d106      	bne.n	801a538 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801a52a:	4b56      	ldr	r3, [pc, #344]	; (801a684 <RegionUS915NextChannel+0x1d4>)
 801a52c:	681a      	ldr	r2, [r3, #0]
 801a52e:	4b54      	ldr	r3, [pc, #336]	; (801a680 <RegionUS915NextChannel+0x1d0>)
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801a536:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801a538:	68fb      	ldr	r3, [r7, #12]
 801a53a:	7a5b      	ldrb	r3, [r3, #9]
 801a53c:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801a544:	b2db      	uxtb	r3, r3
 801a546:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801a548:	4b4d      	ldr	r3, [pc, #308]	; (801a680 <RegionUS915NextChannel+0x1d0>)
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801a54e:	4b4d      	ldr	r3, [pc, #308]	; (801a684 <RegionUS915NextChannel+0x1d4>)
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801a554:	4b4c      	ldr	r3, [pc, #304]	; (801a688 <RegionUS915NextChannel+0x1d8>)
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801a55a:	2348      	movs	r3, #72	; 0x48
 801a55c:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 801a55e:	2300      	movs	r3, #0
 801a560:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801a562:	68fb      	ldr	r3, [r7, #12]
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	685b      	ldr	r3, [r3, #4]
 801a56c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801a56e:	68fb      	ldr	r3, [r7, #12]
 801a570:	7a9b      	ldrb	r3, [r3, #10]
 801a572:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801a576:	2301      	movs	r3, #1
 801a578:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801a57c:	f107 0314 	add.w	r3, r7, #20
 801a580:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801a582:	68fa      	ldr	r2, [r7, #12]
 801a584:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a588:	320c      	adds	r2, #12
 801a58a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a58e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801a592:	68fb      	ldr	r3, [r7, #12]
 801a594:	7d1b      	ldrb	r3, [r3, #20]
 801a596:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801a5a0:	68fb      	ldr	r3, [r7, #12]
 801a5a2:	8adb      	ldrh	r3, [r3, #22]
 801a5a4:	4619      	mov	r1, r3
 801a5a6:	4610      	mov	r0, r2
 801a5a8:	f7fe ff10 	bl	80193cc <GetTimeOnAir>
 801a5ac:	4603      	mov	r3, r0
 801a5ae:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801a5b0:	f107 0195 	add.w	r1, r7, #149	; 0x95
 801a5b4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801a5b8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	9301      	str	r3, [sp, #4]
 801a5c0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801a5c4:	9300      	str	r3, [sp, #0]
 801a5c6:	460b      	mov	r3, r1
 801a5c8:	6839      	ldr	r1, [r7, #0]
 801a5ca:	f7fe fd68 	bl	801909e <RegionCommonIdentifyChannels>
 801a5ce:	4603      	mov	r3, r0
 801a5d0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801a5d4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d14a      	bne.n	801a672 <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	7a5b      	ldrb	r3, [r3, #9]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d00e      	beq.n	801a602 <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801a5e4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 801a5e8:	3b01      	subs	r3, #1
 801a5ea:	4619      	mov	r1, r3
 801a5ec:	2000      	movs	r0, #0
 801a5ee:	f000 f89f 	bl	801a730 <randr>
 801a5f2:	4603      	mov	r3, r0
 801a5f4:	3398      	adds	r3, #152	; 0x98
 801a5f6:	443b      	add	r3, r7
 801a5f8:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 801a5fc:	68bb      	ldr	r3, [r7, #8]
 801a5fe:	701a      	strb	r2, [r3, #0]
 801a600:	e02e      	b.n	801a660 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801a602:	68fb      	ldr	r3, [r7, #12]
 801a604:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d10e      	bne.n	801a62a <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801a60c:	4b1c      	ldr	r3, [pc, #112]	; (801a680 <RegionUS915NextChannel+0x1d0>)
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801a612:	4b1b      	ldr	r3, [pc, #108]	; (801a680 <RegionUS915NextChannel+0x1d0>)
 801a614:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801a616:	330c      	adds	r3, #12
 801a618:	68ba      	ldr	r2, [r7, #8]
 801a61a:	4619      	mov	r1, r3
 801a61c:	f7fd fea2 	bl	8018364 <RegionBaseUSComputeNext125kHzJoinChannel>
 801a620:	4603      	mov	r3, r0
 801a622:	2b03      	cmp	r3, #3
 801a624:	d11c      	bne.n	801a660 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801a626:	2303      	movs	r3, #3
 801a628:	e025      	b.n	801a676 <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801a62a:	2300      	movs	r3, #0
 801a62c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801a630:	e004      	b.n	801a63c <RegionUS915NextChannel+0x18c>
                {
                    i++;
 801a632:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a636:	3301      	adds	r3, #1
 801a638:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801a63c:	4b10      	ldr	r3, [pc, #64]	; (801a680 <RegionUS915NextChannel+0x1d0>)
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	891b      	ldrh	r3, [r3, #8]
 801a642:	b2da      	uxtb	r2, r3
 801a644:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a648:	fa42 f303 	asr.w	r3, r2, r3
 801a64c:	f003 0301 	and.w	r3, r3, #1
 801a650:	2b00      	cmp	r3, #0
 801a652:	d0ee      	beq.n	801a632 <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 801a654:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a658:	3340      	adds	r3, #64	; 0x40
 801a65a:	b2da      	uxtb	r2, r3
 801a65c:	68bb      	ldr	r3, [r7, #8]
 801a65e:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801a660:	4b07      	ldr	r3, [pc, #28]	; (801a680 <RegionUS915NextChannel+0x1d0>)
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	4618      	mov	r0, r3
 801a666:	68bb      	ldr	r3, [r7, #8]
 801a668:	781b      	ldrb	r3, [r3, #0]
 801a66a:	2248      	movs	r2, #72	; 0x48
 801a66c:	4619      	mov	r1, r3
 801a66e:	f7fe f8db 	bl	8018828 <RegionCommonChanDisable>
    }
    return status;
 801a672:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801a676:	4618      	mov	r0, r3
 801a678:	3798      	adds	r7, #152	; 0x98
 801a67a:	46bd      	mov	sp, r7
 801a67c:	bd80      	pop	{r7, pc}
 801a67e:	bf00      	nop
 801a680:	20001be0 	.word	0x20001be0
 801a684:	20001be4 	.word	0x20001be4
 801a688:	20001be8 	.word	0x20001be8

0801a68c <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801a68c:	b480      	push	{r7}
 801a68e:	b085      	sub	sp, #20
 801a690:	af00      	add	r7, sp, #0
 801a692:	4603      	mov	r3, r0
 801a694:	71fb      	strb	r3, [r7, #7]
 801a696:	460b      	mov	r3, r1
 801a698:	71bb      	strb	r3, [r7, #6]
 801a69a:	4613      	mov	r3, r2
 801a69c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801a69e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801a6a2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801a6a6:	4909      	ldr	r1, [pc, #36]	; (801a6cc <RegionUS915ApplyDrOffset+0x40>)
 801a6a8:	0092      	lsls	r2, r2, #2
 801a6aa:	440a      	add	r2, r1
 801a6ac:	4413      	add	r3, r2
 801a6ae:	781b      	ldrb	r3, [r3, #0]
 801a6b0:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801a6b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	da01      	bge.n	801a6be <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801a6ba:	2300      	movs	r3, #0
 801a6bc:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801a6be:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	3714      	adds	r7, #20
 801a6c4:	46bd      	mov	sp, r7
 801a6c6:	bc80      	pop	{r7}
 801a6c8:	4770      	bx	lr
 801a6ca:	bf00      	nop
 801a6cc:	080203f4 	.word	0x080203f4

0801a6d0 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801a6d0:	b480      	push	{r7}
 801a6d2:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801a6d4:	4b0d      	ldr	r3, [pc, #52]	; (801a70c <rand1+0x3c>)
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	4a0d      	ldr	r2, [pc, #52]	; (801a710 <rand1+0x40>)
 801a6da:	fb02 f303 	mul.w	r3, r2, r3
 801a6de:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a6e2:	3339      	adds	r3, #57	; 0x39
 801a6e4:	4a09      	ldr	r2, [pc, #36]	; (801a70c <rand1+0x3c>)
 801a6e6:	6013      	str	r3, [r2, #0]
 801a6e8:	4b08      	ldr	r3, [pc, #32]	; (801a70c <rand1+0x3c>)
 801a6ea:	681a      	ldr	r2, [r3, #0]
 801a6ec:	2303      	movs	r3, #3
 801a6ee:	fba3 1302 	umull	r1, r3, r3, r2
 801a6f2:	1ad1      	subs	r1, r2, r3
 801a6f4:	0849      	lsrs	r1, r1, #1
 801a6f6:	440b      	add	r3, r1
 801a6f8:	0f99      	lsrs	r1, r3, #30
 801a6fa:	460b      	mov	r3, r1
 801a6fc:	07db      	lsls	r3, r3, #31
 801a6fe:	1a5b      	subs	r3, r3, r1
 801a700:	1ad1      	subs	r1, r2, r3
 801a702:	460b      	mov	r3, r1
}
 801a704:	4618      	mov	r0, r3
 801a706:	46bd      	mov	sp, r7
 801a708:	bc80      	pop	{r7}
 801a70a:	4770      	bx	lr
 801a70c:	20000130 	.word	0x20000130
 801a710:	41c64e6d 	.word	0x41c64e6d

0801a714 <srand1>:

void srand1( uint32_t seed )
{
 801a714:	b480      	push	{r7}
 801a716:	b083      	sub	sp, #12
 801a718:	af00      	add	r7, sp, #0
 801a71a:	6078      	str	r0, [r7, #4]
    next = seed;
 801a71c:	4a03      	ldr	r2, [pc, #12]	; (801a72c <srand1+0x18>)
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	6013      	str	r3, [r2, #0]
}
 801a722:	bf00      	nop
 801a724:	370c      	adds	r7, #12
 801a726:	46bd      	mov	sp, r7
 801a728:	bc80      	pop	{r7}
 801a72a:	4770      	bx	lr
 801a72c:	20000130 	.word	0x20000130

0801a730 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801a730:	b580      	push	{r7, lr}
 801a732:	b082      	sub	sp, #8
 801a734:	af00      	add	r7, sp, #0
 801a736:	6078      	str	r0, [r7, #4]
 801a738:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801a73a:	f7ff ffc9 	bl	801a6d0 <rand1>
 801a73e:	4602      	mov	r2, r0
 801a740:	6839      	ldr	r1, [r7, #0]
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	1acb      	subs	r3, r1, r3
 801a746:	3301      	adds	r3, #1
 801a748:	fb92 f1f3 	sdiv	r1, r2, r3
 801a74c:	fb01 f303 	mul.w	r3, r1, r3
 801a750:	1ad2      	subs	r2, r2, r3
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	4413      	add	r3, r2
}
 801a756:	4618      	mov	r0, r3
 801a758:	3708      	adds	r7, #8
 801a75a:	46bd      	mov	sp, r7
 801a75c:	bd80      	pop	{r7, pc}

0801a75e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801a75e:	b480      	push	{r7}
 801a760:	b085      	sub	sp, #20
 801a762:	af00      	add	r7, sp, #0
 801a764:	60f8      	str	r0, [r7, #12]
 801a766:	60b9      	str	r1, [r7, #8]
 801a768:	4613      	mov	r3, r2
 801a76a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801a76c:	e007      	b.n	801a77e <memcpy1+0x20>
    {
        *dst++ = *src++;
 801a76e:	68ba      	ldr	r2, [r7, #8]
 801a770:	1c53      	adds	r3, r2, #1
 801a772:	60bb      	str	r3, [r7, #8]
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	1c59      	adds	r1, r3, #1
 801a778:	60f9      	str	r1, [r7, #12]
 801a77a:	7812      	ldrb	r2, [r2, #0]
 801a77c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801a77e:	88fb      	ldrh	r3, [r7, #6]
 801a780:	1e5a      	subs	r2, r3, #1
 801a782:	80fa      	strh	r2, [r7, #6]
 801a784:	2b00      	cmp	r3, #0
 801a786:	d1f2      	bne.n	801a76e <memcpy1+0x10>
    }
}
 801a788:	bf00      	nop
 801a78a:	bf00      	nop
 801a78c:	3714      	adds	r7, #20
 801a78e:	46bd      	mov	sp, r7
 801a790:	bc80      	pop	{r7}
 801a792:	4770      	bx	lr

0801a794 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801a794:	b480      	push	{r7}
 801a796:	b085      	sub	sp, #20
 801a798:	af00      	add	r7, sp, #0
 801a79a:	60f8      	str	r0, [r7, #12]
 801a79c:	60b9      	str	r1, [r7, #8]
 801a79e:	4613      	mov	r3, r2
 801a7a0:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801a7a2:	88fb      	ldrh	r3, [r7, #6]
 801a7a4:	3b01      	subs	r3, #1
 801a7a6:	68fa      	ldr	r2, [r7, #12]
 801a7a8:	4413      	add	r3, r2
 801a7aa:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801a7ac:	e007      	b.n	801a7be <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801a7ae:	68ba      	ldr	r2, [r7, #8]
 801a7b0:	1c53      	adds	r3, r2, #1
 801a7b2:	60bb      	str	r3, [r7, #8]
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	1e59      	subs	r1, r3, #1
 801a7b8:	60f9      	str	r1, [r7, #12]
 801a7ba:	7812      	ldrb	r2, [r2, #0]
 801a7bc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801a7be:	88fb      	ldrh	r3, [r7, #6]
 801a7c0:	1e5a      	subs	r2, r3, #1
 801a7c2:	80fa      	strh	r2, [r7, #6]
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d1f2      	bne.n	801a7ae <memcpyr+0x1a>
    }
}
 801a7c8:	bf00      	nop
 801a7ca:	bf00      	nop
 801a7cc:	3714      	adds	r7, #20
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	bc80      	pop	{r7}
 801a7d2:	4770      	bx	lr

0801a7d4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801a7d4:	b480      	push	{r7}
 801a7d6:	b083      	sub	sp, #12
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	6078      	str	r0, [r7, #4]
 801a7dc:	460b      	mov	r3, r1
 801a7de:	70fb      	strb	r3, [r7, #3]
 801a7e0:	4613      	mov	r3, r2
 801a7e2:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801a7e4:	e004      	b.n	801a7f0 <memset1+0x1c>
    {
        *dst++ = value;
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	1c5a      	adds	r2, r3, #1
 801a7ea:	607a      	str	r2, [r7, #4]
 801a7ec:	78fa      	ldrb	r2, [r7, #3]
 801a7ee:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801a7f0:	883b      	ldrh	r3, [r7, #0]
 801a7f2:	1e5a      	subs	r2, r3, #1
 801a7f4:	803a      	strh	r2, [r7, #0]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d1f5      	bne.n	801a7e6 <memset1+0x12>
    }
}
 801a7fa:	bf00      	nop
 801a7fc:	bf00      	nop
 801a7fe:	370c      	adds	r7, #12
 801a800:	46bd      	mov	sp, r7
 801a802:	bc80      	pop	{r7}
 801a804:	4770      	bx	lr
	...

0801a808 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801a808:	b480      	push	{r7}
 801a80a:	b085      	sub	sp, #20
 801a80c:	af00      	add	r7, sp, #0
 801a80e:	6078      	str	r0, [r7, #4]
 801a810:	460b      	mov	r3, r1
 801a812:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801a814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a818:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d101      	bne.n	801a824 <Crc32+0x1c>
    {
        return 0;
 801a820:	2300      	movs	r3, #0
 801a822:	e026      	b.n	801a872 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801a824:	2300      	movs	r3, #0
 801a826:	817b      	strh	r3, [r7, #10]
 801a828:	e01d      	b.n	801a866 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801a82a:	897b      	ldrh	r3, [r7, #10]
 801a82c:	687a      	ldr	r2, [r7, #4]
 801a82e:	4413      	add	r3, r2
 801a830:	781b      	ldrb	r3, [r3, #0]
 801a832:	461a      	mov	r2, r3
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	4053      	eors	r3, r2
 801a838:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801a83a:	2300      	movs	r3, #0
 801a83c:	813b      	strh	r3, [r7, #8]
 801a83e:	e00c      	b.n	801a85a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	085a      	lsrs	r2, r3, #1
 801a844:	68fb      	ldr	r3, [r7, #12]
 801a846:	f003 0301 	and.w	r3, r3, #1
 801a84a:	425b      	negs	r3, r3
 801a84c:	490b      	ldr	r1, [pc, #44]	; (801a87c <Crc32+0x74>)
 801a84e:	400b      	ands	r3, r1
 801a850:	4053      	eors	r3, r2
 801a852:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801a854:	893b      	ldrh	r3, [r7, #8]
 801a856:	3301      	adds	r3, #1
 801a858:	813b      	strh	r3, [r7, #8]
 801a85a:	893b      	ldrh	r3, [r7, #8]
 801a85c:	2b07      	cmp	r3, #7
 801a85e:	d9ef      	bls.n	801a840 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801a860:	897b      	ldrh	r3, [r7, #10]
 801a862:	3301      	adds	r3, #1
 801a864:	817b      	strh	r3, [r7, #10]
 801a866:	897a      	ldrh	r2, [r7, #10]
 801a868:	887b      	ldrh	r3, [r7, #2]
 801a86a:	429a      	cmp	r2, r3
 801a86c:	d3dd      	bcc.n	801a82a <Crc32+0x22>
        }
    }

    return ~crc;
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	43db      	mvns	r3, r3
}
 801a872:	4618      	mov	r0, r3
 801a874:	3714      	adds	r7, #20
 801a876:	46bd      	mov	sp, r7
 801a878:	bc80      	pop	{r7}
 801a87a:	4770      	bx	lr
 801a87c:	edb88320 	.word	0xedb88320

0801a880 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801a880:	b580      	push	{r7, lr}
 801a882:	b084      	sub	sp, #16
 801a884:	af02      	add	r7, sp, #8
 801a886:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801a888:	4a24      	ldr	r2, [pc, #144]	; (801a91c <RadioInit+0x9c>)
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801a88e:	4b24      	ldr	r3, [pc, #144]	; (801a920 <RadioInit+0xa0>)
 801a890:	2200      	movs	r2, #0
 801a892:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801a894:	4b22      	ldr	r3, [pc, #136]	; (801a920 <RadioInit+0xa0>)
 801a896:	2200      	movs	r2, #0
 801a898:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801a89a:	4b21      	ldr	r3, [pc, #132]	; (801a920 <RadioInit+0xa0>)
 801a89c:	2200      	movs	r2, #0
 801a89e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a8a0:	4b1f      	ldr	r3, [pc, #124]	; (801a920 <RadioInit+0xa0>)
 801a8a2:	2200      	movs	r2, #0
 801a8a4:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 801a8a6:	481f      	ldr	r0, [pc, #124]	; (801a924 <RadioInit+0xa4>)
 801a8a8:	f001 ffc2 	bl	801c830 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801a8ac:	4b1c      	ldr	r3, [pc, #112]	; (801a920 <RadioInit+0xa0>)
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801a8b2:	4b1b      	ldr	r3, [pc, #108]	; (801a920 <RadioInit+0xa0>)
 801a8b4:	2200      	movs	r2, #0
 801a8b6:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801a8b8:	f002 fa56 	bl	801cd68 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801a8bc:	2100      	movs	r1, #0
 801a8be:	2000      	movs	r0, #0
 801a8c0:	f002 fe22 	bl	801d508 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801a8c4:	2204      	movs	r2, #4
 801a8c6:	2100      	movs	r1, #0
 801a8c8:	2001      	movs	r0, #1
 801a8ca:	f002 fbdf 	bl	801d08c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a8ce:	2300      	movs	r3, #0
 801a8d0:	2200      	movs	r2, #0
 801a8d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a8d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801a8da:	f002 fb0f 	bl	801cefc <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801a8de:	f000 fe99 	bl	801b614 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801a8e2:	2300      	movs	r3, #0
 801a8e4:	9300      	str	r3, [sp, #0]
 801a8e6:	4b10      	ldr	r3, [pc, #64]	; (801a928 <RadioInit+0xa8>)
 801a8e8:	2200      	movs	r2, #0
 801a8ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801a8ee:	480f      	ldr	r0, [pc, #60]	; (801a92c <RadioInit+0xac>)
 801a8f0:	f004 f82c 	bl	801e94c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801a8f4:	2300      	movs	r3, #0
 801a8f6:	9300      	str	r3, [sp, #0]
 801a8f8:	4b0d      	ldr	r3, [pc, #52]	; (801a930 <RadioInit+0xb0>)
 801a8fa:	2200      	movs	r2, #0
 801a8fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801a900:	480c      	ldr	r0, [pc, #48]	; (801a934 <RadioInit+0xb4>)
 801a902:	f004 f823 	bl	801e94c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801a906:	4809      	ldr	r0, [pc, #36]	; (801a92c <RadioInit+0xac>)
 801a908:	f004 f8c4 	bl	801ea94 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801a90c:	4809      	ldr	r0, [pc, #36]	; (801a934 <RadioInit+0xb4>)
 801a90e:	f004 f8c1 	bl	801ea94 <UTIL_TIMER_Stop>
}
 801a912:	bf00      	nop
 801a914:	3708      	adds	r7, #8
 801a916:	46bd      	mov	sp, r7
 801a918:	bd80      	pop	{r7, pc}
 801a91a:	bf00      	nop
 801a91c:	20001cec 	.word	0x20001cec
 801a920:	20001cf0 	.word	0x20001cf0
 801a924:	0801ba0d 	.word	0x0801ba0d
 801a928:	0801b995 	.word	0x0801b995
 801a92c:	20001d4c 	.word	0x20001d4c
 801a930:	0801b9a9 	.word	0x0801b9a9
 801a934:	20001d64 	.word	0x20001d64

0801a938 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801a938:	b580      	push	{r7, lr}
 801a93a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801a93c:	f001 ffc0 	bl	801c8c0 <SUBGRF_GetOperatingMode>
 801a940:	4603      	mov	r3, r0
 801a942:	2b07      	cmp	r3, #7
 801a944:	d00a      	beq.n	801a95c <RadioGetStatus+0x24>
 801a946:	2b07      	cmp	r3, #7
 801a948:	dc0a      	bgt.n	801a960 <RadioGetStatus+0x28>
 801a94a:	2b04      	cmp	r3, #4
 801a94c:	d002      	beq.n	801a954 <RadioGetStatus+0x1c>
 801a94e:	2b05      	cmp	r3, #5
 801a950:	d002      	beq.n	801a958 <RadioGetStatus+0x20>
 801a952:	e005      	b.n	801a960 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801a954:	2302      	movs	r3, #2
 801a956:	e004      	b.n	801a962 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801a958:	2301      	movs	r3, #1
 801a95a:	e002      	b.n	801a962 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801a95c:	2303      	movs	r3, #3
 801a95e:	e000      	b.n	801a962 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801a960:	2300      	movs	r3, #0
    }
}
 801a962:	4618      	mov	r0, r3
 801a964:	bd80      	pop	{r7, pc}
	...

0801a968 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801a968:	b580      	push	{r7, lr}
 801a96a:	b082      	sub	sp, #8
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	4603      	mov	r3, r0
 801a970:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801a972:	4a2a      	ldr	r2, [pc, #168]	; (801aa1c <RadioSetModem+0xb4>)
 801a974:	79fb      	ldrb	r3, [r7, #7]
 801a976:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801a978:	79fb      	ldrb	r3, [r7, #7]
 801a97a:	4618      	mov	r0, r3
 801a97c:	f003 f997 	bl	801dcae <RFW_SetRadioModem>
    switch( modem )
 801a980:	79fb      	ldrb	r3, [r7, #7]
 801a982:	2b05      	cmp	r3, #5
 801a984:	d80e      	bhi.n	801a9a4 <RadioSetModem+0x3c>
 801a986:	a201      	add	r2, pc, #4	; (adr r2, 801a98c <RadioSetModem+0x24>)
 801a988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a98c:	0801a9b3 	.word	0x0801a9b3
 801a990:	0801a9c1 	.word	0x0801a9c1
 801a994:	0801a9a5 	.word	0x0801a9a5
 801a998:	0801a9e7 	.word	0x0801a9e7
 801a99c:	0801a9f5 	.word	0x0801a9f5
 801a9a0:	0801aa03 	.word	0x0801aa03
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801a9a4:	2003      	movs	r0, #3
 801a9a6:	f002 fb4b 	bl	801d040 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a9aa:	4b1c      	ldr	r3, [pc, #112]	; (801aa1c <RadioSetModem+0xb4>)
 801a9ac:	2200      	movs	r2, #0
 801a9ae:	735a      	strb	r2, [r3, #13]
        break;
 801a9b0:	e02f      	b.n	801aa12 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a9b2:	2000      	movs	r0, #0
 801a9b4:	f002 fb44 	bl	801d040 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a9b8:	4b18      	ldr	r3, [pc, #96]	; (801aa1c <RadioSetModem+0xb4>)
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	735a      	strb	r2, [r3, #13]
        break;
 801a9be:	e028      	b.n	801aa12 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801a9c0:	2001      	movs	r0, #1
 801a9c2:	f002 fb3d 	bl	801d040 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801a9c6:	4b15      	ldr	r3, [pc, #84]	; (801aa1c <RadioSetModem+0xb4>)
 801a9c8:	7b5a      	ldrb	r2, [r3, #13]
 801a9ca:	4b14      	ldr	r3, [pc, #80]	; (801aa1c <RadioSetModem+0xb4>)
 801a9cc:	7b1b      	ldrb	r3, [r3, #12]
 801a9ce:	429a      	cmp	r2, r3
 801a9d0:	d01e      	beq.n	801aa10 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801a9d2:	4b12      	ldr	r3, [pc, #72]	; (801aa1c <RadioSetModem+0xb4>)
 801a9d4:	7b1a      	ldrb	r2, [r3, #12]
 801a9d6:	4b11      	ldr	r3, [pc, #68]	; (801aa1c <RadioSetModem+0xb4>)
 801a9d8:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801a9da:	4b10      	ldr	r3, [pc, #64]	; (801aa1c <RadioSetModem+0xb4>)
 801a9dc:	7b5b      	ldrb	r3, [r3, #13]
 801a9de:	4618      	mov	r0, r3
 801a9e0:	f000 ffa2 	bl	801b928 <RadioSetPublicNetwork>
        }
        break;
 801a9e4:	e014      	b.n	801aa10 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a9e6:	2002      	movs	r0, #2
 801a9e8:	f002 fb2a 	bl	801d040 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a9ec:	4b0b      	ldr	r3, [pc, #44]	; (801aa1c <RadioSetModem+0xb4>)
 801a9ee:	2200      	movs	r2, #0
 801a9f0:	735a      	strb	r2, [r3, #13]
        break;
 801a9f2:	e00e      	b.n	801aa12 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a9f4:	2002      	movs	r0, #2
 801a9f6:	f002 fb23 	bl	801d040 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a9fa:	4b08      	ldr	r3, [pc, #32]	; (801aa1c <RadioSetModem+0xb4>)
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	735a      	strb	r2, [r3, #13]
        break;
 801aa00:	e007      	b.n	801aa12 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801aa02:	2000      	movs	r0, #0
 801aa04:	f002 fb1c 	bl	801d040 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801aa08:	4b04      	ldr	r3, [pc, #16]	; (801aa1c <RadioSetModem+0xb4>)
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	735a      	strb	r2, [r3, #13]
        break;
 801aa0e:	e000      	b.n	801aa12 <RadioSetModem+0xaa>
        break;
 801aa10:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801aa12:	bf00      	nop
 801aa14:	3708      	adds	r7, #8
 801aa16:	46bd      	mov	sp, r7
 801aa18:	bd80      	pop	{r7, pc}
 801aa1a:	bf00      	nop
 801aa1c:	20001cf0 	.word	0x20001cf0

0801aa20 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801aa20:	b580      	push	{r7, lr}
 801aa22:	b082      	sub	sp, #8
 801aa24:	af00      	add	r7, sp, #0
 801aa26:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801aa28:	6878      	ldr	r0, [r7, #4]
 801aa2a:	f002 fac3 	bl	801cfb4 <SUBGRF_SetRfFrequency>
}
 801aa2e:	bf00      	nop
 801aa30:	3708      	adds	r7, #8
 801aa32:	46bd      	mov	sp, r7
 801aa34:	bd80      	pop	{r7, pc}

0801aa36 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801aa36:	b580      	push	{r7, lr}
 801aa38:	b090      	sub	sp, #64	; 0x40
 801aa3a:	af0a      	add	r7, sp, #40	; 0x28
 801aa3c:	60f8      	str	r0, [r7, #12]
 801aa3e:	60b9      	str	r1, [r7, #8]
 801aa40:	603b      	str	r3, [r7, #0]
 801aa42:	4613      	mov	r3, r2
 801aa44:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801aa46:	2301      	movs	r3, #1
 801aa48:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801aa4e:	2300      	movs	r3, #0
 801aa50:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801aa52:	f000 fdf2 	bl	801b63a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801aa56:	2000      	movs	r0, #0
 801aa58:	f7ff ff86 	bl	801a968 <RadioSetModem>

    RadioSetChannel( freq );
 801aa5c:	68f8      	ldr	r0, [r7, #12]
 801aa5e:	f7ff ffdf 	bl	801aa20 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801aa62:	2301      	movs	r3, #1
 801aa64:	9309      	str	r3, [sp, #36]	; 0x24
 801aa66:	2300      	movs	r3, #0
 801aa68:	9308      	str	r3, [sp, #32]
 801aa6a:	2300      	movs	r3, #0
 801aa6c:	9307      	str	r3, [sp, #28]
 801aa6e:	2300      	movs	r3, #0
 801aa70:	9306      	str	r3, [sp, #24]
 801aa72:	2300      	movs	r3, #0
 801aa74:	9305      	str	r3, [sp, #20]
 801aa76:	2300      	movs	r3, #0
 801aa78:	9304      	str	r3, [sp, #16]
 801aa7a:	2300      	movs	r3, #0
 801aa7c:	9303      	str	r3, [sp, #12]
 801aa7e:	2300      	movs	r3, #0
 801aa80:	9302      	str	r3, [sp, #8]
 801aa82:	2303      	movs	r3, #3
 801aa84:	9301      	str	r3, [sp, #4]
 801aa86:	68bb      	ldr	r3, [r7, #8]
 801aa88:	9300      	str	r3, [sp, #0]
 801aa8a:	2300      	movs	r3, #0
 801aa8c:	f44f 7216 	mov.w	r2, #600	; 0x258
 801aa90:	68b9      	ldr	r1, [r7, #8]
 801aa92:	2000      	movs	r0, #0
 801aa94:	f000 f83c 	bl	801ab10 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801aa98:	2000      	movs	r0, #0
 801aa9a:	f000 fdd5 	bl	801b648 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801aa9e:	f000 ff71 	bl	801b984 <RadioGetWakeupTime>
 801aaa2:	4603      	mov	r3, r0
 801aaa4:	4618      	mov	r0, r3
 801aaa6:	f7e7 fe71 	bl	800278c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801aaaa:	f004 f90d 	bl	801ecc8 <UTIL_TIMER_GetCurrentTime>
 801aaae:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801aab0:	e00d      	b.n	801aace <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801aab2:	2000      	movs	r0, #0
 801aab4:	f000 feb6 	bl	801b824 <RadioRssi>
 801aab8:	4603      	mov	r3, r0
 801aaba:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801aabc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801aac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801aac4:	429a      	cmp	r2, r3
 801aac6:	dd02      	ble.n	801aace <RadioIsChannelFree+0x98>
        {
            status = false;
 801aac8:	2300      	movs	r3, #0
 801aaca:	75fb      	strb	r3, [r7, #23]
            break;
 801aacc:	e006      	b.n	801aadc <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801aace:	6938      	ldr	r0, [r7, #16]
 801aad0:	f004 f90c 	bl	801ecec <UTIL_TIMER_GetElapsedTime>
 801aad4:	4602      	mov	r2, r0
 801aad6:	683b      	ldr	r3, [r7, #0]
 801aad8:	4293      	cmp	r3, r2
 801aada:	d8ea      	bhi.n	801aab2 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801aadc:	f000 fdad 	bl	801b63a <RadioStandby>

    return status;
 801aae0:	7dfb      	ldrb	r3, [r7, #23]
}
 801aae2:	4618      	mov	r0, r3
 801aae4:	3718      	adds	r7, #24
 801aae6:	46bd      	mov	sp, r7
 801aae8:	bd80      	pop	{r7, pc}

0801aaea <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801aaea:	b580      	push	{r7, lr}
 801aaec:	b082      	sub	sp, #8
 801aaee:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801aaf4:	2300      	movs	r3, #0
 801aaf6:	2200      	movs	r2, #0
 801aaf8:	2100      	movs	r1, #0
 801aafa:	2000      	movs	r0, #0
 801aafc:	f002 f9fe 	bl	801cefc <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801ab00:	f001 ffaf 	bl	801ca62 <SUBGRF_GetRandom>
 801ab04:	6078      	str	r0, [r7, #4]

    return rnd;
 801ab06:	687b      	ldr	r3, [r7, #4]
}
 801ab08:	4618      	mov	r0, r3
 801ab0a:	3708      	adds	r7, #8
 801ab0c:	46bd      	mov	sp, r7
 801ab0e:	bd80      	pop	{r7, pc}

0801ab10 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801ab10:	b580      	push	{r7, lr}
 801ab12:	b08a      	sub	sp, #40	; 0x28
 801ab14:	af00      	add	r7, sp, #0
 801ab16:	60b9      	str	r1, [r7, #8]
 801ab18:	607a      	str	r2, [r7, #4]
 801ab1a:	461a      	mov	r2, r3
 801ab1c:	4603      	mov	r3, r0
 801ab1e:	73fb      	strb	r3, [r7, #15]
 801ab20:	4613      	mov	r3, r2
 801ab22:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801ab24:	4ab9      	ldr	r2, [pc, #740]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ab26:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ab2a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801ab2c:	f003 f87d 	bl	801dc2a <RFW_DeInit>
    if( rxContinuous == true )
 801ab30:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d001      	beq.n	801ab3c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801ab38:	2300      	movs	r3, #0
 801ab3a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801ab3c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d004      	beq.n	801ab4e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801ab44:	4ab2      	ldr	r2, [pc, #712]	; (801ae10 <RadioSetRxConfig+0x300>)
 801ab46:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801ab4a:	7013      	strb	r3, [r2, #0]
 801ab4c:	e002      	b.n	801ab54 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801ab4e:	4bb0      	ldr	r3, [pc, #704]	; (801ae10 <RadioSetRxConfig+0x300>)
 801ab50:	22ff      	movs	r2, #255	; 0xff
 801ab52:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801ab54:	7bfb      	ldrb	r3, [r7, #15]
 801ab56:	2b05      	cmp	r3, #5
 801ab58:	d009      	beq.n	801ab6e <RadioSetRxConfig+0x5e>
 801ab5a:	2b05      	cmp	r3, #5
 801ab5c:	f300 81d7 	bgt.w	801af0e <RadioSetRxConfig+0x3fe>
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	f000 80bf 	beq.w	801ace4 <RadioSetRxConfig+0x1d4>
 801ab66:	2b01      	cmp	r3, #1
 801ab68:	f000 8124 	beq.w	801adb4 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801ab6c:	e1cf      	b.n	801af0e <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801ab6e:	2001      	movs	r0, #1
 801ab70:	f002 f8bc 	bl	801ccec <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801ab74:	4ba5      	ldr	r3, [pc, #660]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ab76:	2200      	movs	r2, #0
 801ab78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801ab7c:	4aa3      	ldr	r2, [pc, #652]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801ab82:	4ba2      	ldr	r3, [pc, #648]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ab84:	2209      	movs	r2, #9
 801ab86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801ab8a:	4ba0      	ldr	r3, [pc, #640]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ab8c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801ab90:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801ab92:	68b8      	ldr	r0, [r7, #8]
 801ab94:	f002 ff7c 	bl	801da90 <SUBGRF_GetFskBandwidthRegValue>
 801ab98:	4603      	mov	r3, r0
 801ab9a:	461a      	mov	r2, r3
 801ab9c:	4b9b      	ldr	r3, [pc, #620]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ab9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801aba2:	4b9a      	ldr	r3, [pc, #616]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801aba4:	2200      	movs	r2, #0
 801aba6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801aba8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801abaa:	00db      	lsls	r3, r3, #3
 801abac:	b29a      	uxth	r2, r3
 801abae:	4b97      	ldr	r3, [pc, #604]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801abb0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801abb2:	4b96      	ldr	r3, [pc, #600]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801abb4:	2200      	movs	r2, #0
 801abb6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801abb8:	4b94      	ldr	r3, [pc, #592]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801abba:	2210      	movs	r2, #16
 801abbc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801abbe:	4b93      	ldr	r3, [pc, #588]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801abc0:	2200      	movs	r2, #0
 801abc2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801abc4:	4b91      	ldr	r3, [pc, #580]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801abc6:	2200      	movs	r2, #0
 801abc8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801abca:	4b91      	ldr	r3, [pc, #580]	; (801ae10 <RadioSetRxConfig+0x300>)
 801abcc:	781a      	ldrb	r2, [r3, #0]
 801abce:	4b8f      	ldr	r3, [pc, #572]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801abd0:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801abd2:	4b8e      	ldr	r3, [pc, #568]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801abd4:	2201      	movs	r2, #1
 801abd6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801abd8:	4b8c      	ldr	r3, [pc, #560]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801abda:	2200      	movs	r2, #0
 801abdc:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801abde:	2005      	movs	r0, #5
 801abe0:	f7ff fec2 	bl	801a968 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801abe4:	488b      	ldr	r0, [pc, #556]	; (801ae14 <RadioSetRxConfig+0x304>)
 801abe6:	f002 fb1f 	bl	801d228 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abea:	488b      	ldr	r0, [pc, #556]	; (801ae18 <RadioSetRxConfig+0x308>)
 801abec:	f002 fbee 	bl	801d3cc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801abf0:	4a8a      	ldr	r2, [pc, #552]	; (801ae1c <RadioSetRxConfig+0x30c>)
 801abf2:	f107 031c 	add.w	r3, r7, #28
 801abf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801abfa:	e883 0003 	stmia.w	r3, {r0, r1}
 801abfe:	f107 031c 	add.w	r3, r7, #28
 801ac02:	4618      	mov	r0, r3
 801ac04:	f001 feab 	bl	801c95e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801ac08:	f240 10ff 	movw	r0, #511	; 0x1ff
 801ac0c:	f001 fef6 	bl	801c9fc <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801ac10:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801ac14:	f000 fe25 	bl	801b862 <RadioRead>
 801ac18:	4603      	mov	r3, r0
 801ac1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801ac1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ac22:	f023 0310 	bic.w	r3, r3, #16
 801ac26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801ac2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ac2e:	4619      	mov	r1, r3
 801ac30:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801ac34:	f000 fe03 	bl	801b83e <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801ac38:	2104      	movs	r1, #4
 801ac3a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801ac3e:	f000 fdfe 	bl	801b83e <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801ac42:	f640 009b 	movw	r0, #2203	; 0x89b
 801ac46:	f000 fe0c 	bl	801b862 <RadioRead>
 801ac4a:	4603      	mov	r3, r0
 801ac4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801ac50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ac54:	f023 031c 	bic.w	r3, r3, #28
 801ac58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801ac5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ac60:	f043 0308 	orr.w	r3, r3, #8
 801ac64:	b2db      	uxtb	r3, r3
 801ac66:	4619      	mov	r1, r3
 801ac68:	f640 009b 	movw	r0, #2203	; 0x89b
 801ac6c:	f000 fde7 	bl	801b83e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801ac70:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801ac74:	f000 fdf5 	bl	801b862 <RadioRead>
 801ac78:	4603      	mov	r3, r0
 801ac7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801ac7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ac82:	f023 0318 	bic.w	r3, r3, #24
 801ac86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801ac8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ac8e:	f043 0318 	orr.w	r3, r3, #24
 801ac92:	b2db      	uxtb	r3, r3
 801ac94:	4619      	mov	r1, r3
 801ac96:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801ac9a:	f000 fdd0 	bl	801b83e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801ac9e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801aca2:	f000 fdde 	bl	801b862 <RadioRead>
 801aca6:	4603      	mov	r3, r0
 801aca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801acac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801acb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801acb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801acb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801acbc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801acc0:	b2db      	uxtb	r3, r3
 801acc2:	4619      	mov	r1, r3
 801acc4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801acc8:	f000 fdb9 	bl	801b83e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801accc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801acce:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801acd2:	fb02 f303 	mul.w	r3, r2, r3
 801acd6:	461a      	mov	r2, r3
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	fbb2 f3f3 	udiv	r3, r2, r3
 801acde:	4a4b      	ldr	r2, [pc, #300]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ace0:	6093      	str	r3, [r2, #8]
            break;
 801ace2:	e115      	b.n	801af10 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801ace4:	2000      	movs	r0, #0
 801ace6:	f002 f801 	bl	801ccec <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801acea:	4b48      	ldr	r3, [pc, #288]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801acec:	2200      	movs	r2, #0
 801acee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801acf2:	4a46      	ldr	r2, [pc, #280]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801acf8:	4b44      	ldr	r3, [pc, #272]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801acfa:	220b      	movs	r2, #11
 801acfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801ad00:	68b8      	ldr	r0, [r7, #8]
 801ad02:	f002 fec5 	bl	801da90 <SUBGRF_GetFskBandwidthRegValue>
 801ad06:	4603      	mov	r3, r0
 801ad08:	461a      	mov	r2, r3
 801ad0a:	4b40      	ldr	r3, [pc, #256]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ad0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ad10:	4b3e      	ldr	r3, [pc, #248]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ad12:	2200      	movs	r2, #0
 801ad14:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801ad16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ad18:	00db      	lsls	r3, r3, #3
 801ad1a:	b29a      	uxth	r2, r3
 801ad1c:	4b3b      	ldr	r3, [pc, #236]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ad1e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801ad20:	4b3a      	ldr	r3, [pc, #232]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ad22:	2204      	movs	r2, #4
 801ad24:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801ad26:	4b39      	ldr	r3, [pc, #228]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ad28:	2218      	movs	r2, #24
 801ad2a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801ad2c:	4b37      	ldr	r3, [pc, #220]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ad2e:	2200      	movs	r2, #0
 801ad30:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801ad32:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801ad36:	f083 0301 	eor.w	r3, r3, #1
 801ad3a:	b2db      	uxtb	r3, r3
 801ad3c:	461a      	mov	r2, r3
 801ad3e:	4b33      	ldr	r3, [pc, #204]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ad40:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801ad42:	4b33      	ldr	r3, [pc, #204]	; (801ae10 <RadioSetRxConfig+0x300>)
 801ad44:	781a      	ldrb	r2, [r3, #0]
 801ad46:	4b31      	ldr	r3, [pc, #196]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ad48:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801ad4a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d003      	beq.n	801ad5a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801ad52:	4b2e      	ldr	r3, [pc, #184]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ad54:	22f2      	movs	r2, #242	; 0xf2
 801ad56:	75da      	strb	r2, [r3, #23]
 801ad58:	e002      	b.n	801ad60 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801ad5a:	4b2c      	ldr	r3, [pc, #176]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ad5c:	2201      	movs	r2, #1
 801ad5e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801ad60:	4b2a      	ldr	r3, [pc, #168]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ad62:	2201      	movs	r2, #1
 801ad64:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801ad66:	f000 fc68 	bl	801b63a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801ad6a:	2000      	movs	r0, #0
 801ad6c:	f7ff fdfc 	bl	801a968 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ad70:	4828      	ldr	r0, [pc, #160]	; (801ae14 <RadioSetRxConfig+0x304>)
 801ad72:	f002 fa59 	bl	801d228 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ad76:	4828      	ldr	r0, [pc, #160]	; (801ae18 <RadioSetRxConfig+0x308>)
 801ad78:	f002 fb28 	bl	801d3cc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801ad7c:	4a28      	ldr	r2, [pc, #160]	; (801ae20 <RadioSetRxConfig+0x310>)
 801ad7e:	f107 0314 	add.w	r3, r7, #20
 801ad82:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ad86:	e883 0003 	stmia.w	r3, {r0, r1}
 801ad8a:	f107 0314 	add.w	r3, r7, #20
 801ad8e:	4618      	mov	r0, r3
 801ad90:	f001 fde5 	bl	801c95e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801ad94:	f240 10ff 	movw	r0, #511	; 0x1ff
 801ad98:	f001 fe30 	bl	801c9fc <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801ad9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801ad9e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801ada2:	fb02 f303 	mul.w	r3, r2, r3
 801ada6:	461a      	mov	r2, r3
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	fbb2 f3f3 	udiv	r3, r2, r3
 801adae:	4a17      	ldr	r2, [pc, #92]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801adb0:	6093      	str	r3, [r2, #8]
            break;
 801adb2:	e0ad      	b.n	801af10 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801adb4:	2000      	movs	r0, #0
 801adb6:	f001 ff99 	bl	801ccec <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801adba:	4b14      	ldr	r3, [pc, #80]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801adbc:	2201      	movs	r2, #1
 801adbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	b2da      	uxtb	r2, r3
 801adc6:	4b11      	ldr	r3, [pc, #68]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801adc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801adcc:	4a15      	ldr	r2, [pc, #84]	; (801ae24 <RadioSetRxConfig+0x314>)
 801adce:	68bb      	ldr	r3, [r7, #8]
 801add0:	4413      	add	r3, r2
 801add2:	781a      	ldrb	r2, [r3, #0]
 801add4:	4b0d      	ldr	r3, [pc, #52]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801add6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801adda:	4a0c      	ldr	r2, [pc, #48]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801addc:	7bbb      	ldrb	r3, [r7, #14]
 801adde:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801ade2:	68bb      	ldr	r3, [r7, #8]
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d105      	bne.n	801adf4 <RadioSetRxConfig+0x2e4>
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	2b0b      	cmp	r3, #11
 801adec:	d008      	beq.n	801ae00 <RadioSetRxConfig+0x2f0>
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	2b0c      	cmp	r3, #12
 801adf2:	d005      	beq.n	801ae00 <RadioSetRxConfig+0x2f0>
 801adf4:	68bb      	ldr	r3, [r7, #8]
 801adf6:	2b01      	cmp	r3, #1
 801adf8:	d116      	bne.n	801ae28 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	2b0c      	cmp	r3, #12
 801adfe:	d113      	bne.n	801ae28 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801ae00:	4b02      	ldr	r3, [pc, #8]	; (801ae0c <RadioSetRxConfig+0x2fc>)
 801ae02:	2201      	movs	r2, #1
 801ae04:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801ae08:	e012      	b.n	801ae30 <RadioSetRxConfig+0x320>
 801ae0a:	bf00      	nop
 801ae0c:	20001cf0 	.word	0x20001cf0
 801ae10:	20000134 	.word	0x20000134
 801ae14:	20001d28 	.word	0x20001d28
 801ae18:	20001cfe 	.word	0x20001cfe
 801ae1c:	0801fdf8 	.word	0x0801fdf8
 801ae20:	0801fe00 	.word	0x0801fe00
 801ae24:	080204b4 	.word	0x080204b4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801ae28:	4b3b      	ldr	r3, [pc, #236]	; (801af18 <RadioSetRxConfig+0x408>)
 801ae2a:	2200      	movs	r2, #0
 801ae2c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ae30:	4b39      	ldr	r3, [pc, #228]	; (801af18 <RadioSetRxConfig+0x408>)
 801ae32:	2201      	movs	r2, #1
 801ae34:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801ae36:	4b38      	ldr	r3, [pc, #224]	; (801af18 <RadioSetRxConfig+0x408>)
 801ae38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801ae3c:	2b05      	cmp	r3, #5
 801ae3e:	d004      	beq.n	801ae4a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801ae40:	4b35      	ldr	r3, [pc, #212]	; (801af18 <RadioSetRxConfig+0x408>)
 801ae42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801ae46:	2b06      	cmp	r3, #6
 801ae48:	d10a      	bne.n	801ae60 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801ae4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ae4c:	2b0b      	cmp	r3, #11
 801ae4e:	d803      	bhi.n	801ae58 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801ae50:	4b31      	ldr	r3, [pc, #196]	; (801af18 <RadioSetRxConfig+0x408>)
 801ae52:	220c      	movs	r2, #12
 801ae54:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801ae56:	e006      	b.n	801ae66 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801ae58:	4a2f      	ldr	r2, [pc, #188]	; (801af18 <RadioSetRxConfig+0x408>)
 801ae5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ae5c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801ae5e:	e002      	b.n	801ae66 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801ae60:	4a2d      	ldr	r2, [pc, #180]	; (801af18 <RadioSetRxConfig+0x408>)
 801ae62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ae64:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801ae66:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801ae6a:	4b2b      	ldr	r3, [pc, #172]	; (801af18 <RadioSetRxConfig+0x408>)
 801ae6c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801ae6e:	4b2b      	ldr	r3, [pc, #172]	; (801af1c <RadioSetRxConfig+0x40c>)
 801ae70:	781a      	ldrb	r2, [r3, #0]
 801ae72:	4b29      	ldr	r3, [pc, #164]	; (801af18 <RadioSetRxConfig+0x408>)
 801ae74:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801ae76:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801ae7a:	4b27      	ldr	r3, [pc, #156]	; (801af18 <RadioSetRxConfig+0x408>)
 801ae7c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801ae80:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801ae84:	4b24      	ldr	r3, [pc, #144]	; (801af18 <RadioSetRxConfig+0x408>)
 801ae86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801ae8a:	f000 fbd6 	bl	801b63a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801ae8e:	2001      	movs	r0, #1
 801ae90:	f7ff fd6a 	bl	801a968 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ae94:	4822      	ldr	r0, [pc, #136]	; (801af20 <RadioSetRxConfig+0x410>)
 801ae96:	f002 f9c7 	bl	801d228 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ae9a:	4822      	ldr	r0, [pc, #136]	; (801af24 <RadioSetRxConfig+0x414>)
 801ae9c:	f002 fa96 	bl	801d3cc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801aea0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801aea2:	b2db      	uxtb	r3, r3
 801aea4:	4618      	mov	r0, r3
 801aea6:	f001 ff30 	bl	801cd0a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801aeaa:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801aeae:	f002 fbe9 	bl	801d684 <SUBGRF_ReadRegister>
 801aeb2:	4603      	mov	r3, r0
 801aeb4:	f003 0301 	and.w	r3, r3, #1
 801aeb8:	b2db      	uxtb	r3, r3
 801aeba:	4619      	mov	r1, r3
 801aebc:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801aec0:	f002 fbcc 	bl	801d65c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801aec4:	4b14      	ldr	r3, [pc, #80]	; (801af18 <RadioSetRxConfig+0x408>)
 801aec6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801aeca:	2b01      	cmp	r3, #1
 801aecc:	d10d      	bne.n	801aeea <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801aece:	f240 7036 	movw	r0, #1846	; 0x736
 801aed2:	f002 fbd7 	bl	801d684 <SUBGRF_ReadRegister>
 801aed6:	4603      	mov	r3, r0
 801aed8:	f023 0304 	bic.w	r3, r3, #4
 801aedc:	b2db      	uxtb	r3, r3
 801aede:	4619      	mov	r1, r3
 801aee0:	f240 7036 	movw	r0, #1846	; 0x736
 801aee4:	f002 fbba 	bl	801d65c <SUBGRF_WriteRegister>
 801aee8:	e00c      	b.n	801af04 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801aeea:	f240 7036 	movw	r0, #1846	; 0x736
 801aeee:	f002 fbc9 	bl	801d684 <SUBGRF_ReadRegister>
 801aef2:	4603      	mov	r3, r0
 801aef4:	f043 0304 	orr.w	r3, r3, #4
 801aef8:	b2db      	uxtb	r3, r3
 801aefa:	4619      	mov	r1, r3
 801aefc:	f240 7036 	movw	r0, #1846	; 0x736
 801af00:	f002 fbac 	bl	801d65c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801af04:	4b04      	ldr	r3, [pc, #16]	; (801af18 <RadioSetRxConfig+0x408>)
 801af06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801af0a:	609a      	str	r2, [r3, #8]
            break;
 801af0c:	e000      	b.n	801af10 <RadioSetRxConfig+0x400>
            break;
 801af0e:	bf00      	nop
    }
}
 801af10:	bf00      	nop
 801af12:	3728      	adds	r7, #40	; 0x28
 801af14:	46bd      	mov	sp, r7
 801af16:	bd80      	pop	{r7, pc}
 801af18:	20001cf0 	.word	0x20001cf0
 801af1c:	20000134 	.word	0x20000134
 801af20:	20001d28 	.word	0x20001d28
 801af24:	20001cfe 	.word	0x20001cfe

0801af28 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801af28:	b580      	push	{r7, lr}
 801af2a:	b086      	sub	sp, #24
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	60ba      	str	r2, [r7, #8]
 801af30:	607b      	str	r3, [r7, #4]
 801af32:	4603      	mov	r3, r0
 801af34:	73fb      	strb	r3, [r7, #15]
 801af36:	460b      	mov	r3, r1
 801af38:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801af3a:	f002 fe76 	bl	801dc2a <RFW_DeInit>
    switch( modem )
 801af3e:	7bfb      	ldrb	r3, [r7, #15]
 801af40:	2b04      	cmp	r3, #4
 801af42:	f000 80c7 	beq.w	801b0d4 <RadioSetTxConfig+0x1ac>
 801af46:	2b04      	cmp	r3, #4
 801af48:	f300 80d6 	bgt.w	801b0f8 <RadioSetTxConfig+0x1d0>
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d002      	beq.n	801af56 <RadioSetTxConfig+0x2e>
 801af50:	2b01      	cmp	r3, #1
 801af52:	d059      	beq.n	801b008 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801af54:	e0d0      	b.n	801b0f8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801af56:	4b77      	ldr	r3, [pc, #476]	; (801b134 <RadioSetTxConfig+0x20c>)
 801af58:	2200      	movs	r2, #0
 801af5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801af5e:	4a75      	ldr	r2, [pc, #468]	; (801b134 <RadioSetTxConfig+0x20c>)
 801af60:	6a3b      	ldr	r3, [r7, #32]
 801af62:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801af64:	4b73      	ldr	r3, [pc, #460]	; (801b134 <RadioSetTxConfig+0x20c>)
 801af66:	220b      	movs	r2, #11
 801af68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801af6c:	6878      	ldr	r0, [r7, #4]
 801af6e:	f002 fd8f 	bl	801da90 <SUBGRF_GetFskBandwidthRegValue>
 801af72:	4603      	mov	r3, r0
 801af74:	461a      	mov	r2, r3
 801af76:	4b6f      	ldr	r3, [pc, #444]	; (801b134 <RadioSetTxConfig+0x20c>)
 801af78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801af7c:	4a6d      	ldr	r2, [pc, #436]	; (801b134 <RadioSetTxConfig+0x20c>)
 801af7e:	68bb      	ldr	r3, [r7, #8]
 801af80:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801af82:	4b6c      	ldr	r3, [pc, #432]	; (801b134 <RadioSetTxConfig+0x20c>)
 801af84:	2200      	movs	r2, #0
 801af86:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801af88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801af8a:	00db      	lsls	r3, r3, #3
 801af8c:	b29a      	uxth	r2, r3
 801af8e:	4b69      	ldr	r3, [pc, #420]	; (801b134 <RadioSetTxConfig+0x20c>)
 801af90:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801af92:	4b68      	ldr	r3, [pc, #416]	; (801b134 <RadioSetTxConfig+0x20c>)
 801af94:	2204      	movs	r2, #4
 801af96:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801af98:	4b66      	ldr	r3, [pc, #408]	; (801b134 <RadioSetTxConfig+0x20c>)
 801af9a:	2218      	movs	r2, #24
 801af9c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801af9e:	4b65      	ldr	r3, [pc, #404]	; (801b134 <RadioSetTxConfig+0x20c>)
 801afa0:	2200      	movs	r2, #0
 801afa2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801afa4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801afa8:	f083 0301 	eor.w	r3, r3, #1
 801afac:	b2db      	uxtb	r3, r3
 801afae:	461a      	mov	r2, r3
 801afb0:	4b60      	ldr	r3, [pc, #384]	; (801b134 <RadioSetTxConfig+0x20c>)
 801afb2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801afb4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d003      	beq.n	801afc4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801afbc:	4b5d      	ldr	r3, [pc, #372]	; (801b134 <RadioSetTxConfig+0x20c>)
 801afbe:	22f2      	movs	r2, #242	; 0xf2
 801afc0:	75da      	strb	r2, [r3, #23]
 801afc2:	e002      	b.n	801afca <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801afc4:	4b5b      	ldr	r3, [pc, #364]	; (801b134 <RadioSetTxConfig+0x20c>)
 801afc6:	2201      	movs	r2, #1
 801afc8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801afca:	4b5a      	ldr	r3, [pc, #360]	; (801b134 <RadioSetTxConfig+0x20c>)
 801afcc:	2201      	movs	r2, #1
 801afce:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801afd0:	f000 fb33 	bl	801b63a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801afd4:	2000      	movs	r0, #0
 801afd6:	f7ff fcc7 	bl	801a968 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801afda:	4857      	ldr	r0, [pc, #348]	; (801b138 <RadioSetTxConfig+0x210>)
 801afdc:	f002 f924 	bl	801d228 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801afe0:	4856      	ldr	r0, [pc, #344]	; (801b13c <RadioSetTxConfig+0x214>)
 801afe2:	f002 f9f3 	bl	801d3cc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801afe6:	4a56      	ldr	r2, [pc, #344]	; (801b140 <RadioSetTxConfig+0x218>)
 801afe8:	f107 0310 	add.w	r3, r7, #16
 801afec:	e892 0003 	ldmia.w	r2, {r0, r1}
 801aff0:	e883 0003 	stmia.w	r3, {r0, r1}
 801aff4:	f107 0310 	add.w	r3, r7, #16
 801aff8:	4618      	mov	r0, r3
 801affa:	f001 fcb0 	bl	801c95e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801affe:	f240 10ff 	movw	r0, #511	; 0x1ff
 801b002:	f001 fcfb 	bl	801c9fc <SUBGRF_SetWhiteningSeed>
            break;
 801b006:	e078      	b.n	801b0fa <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b008:	4b4a      	ldr	r3, [pc, #296]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b00a:	2201      	movs	r2, #1
 801b00c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801b010:	6a3b      	ldr	r3, [r7, #32]
 801b012:	b2da      	uxtb	r2, r3
 801b014:	4b47      	ldr	r3, [pc, #284]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801b01a:	4a4a      	ldr	r2, [pc, #296]	; (801b144 <RadioSetTxConfig+0x21c>)
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	4413      	add	r3, r2
 801b020:	781a      	ldrb	r2, [r3, #0]
 801b022:	4b44      	ldr	r3, [pc, #272]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801b028:	4a42      	ldr	r2, [pc, #264]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b02a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b02e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	2b00      	cmp	r3, #0
 801b036:	d105      	bne.n	801b044 <RadioSetTxConfig+0x11c>
 801b038:	6a3b      	ldr	r3, [r7, #32]
 801b03a:	2b0b      	cmp	r3, #11
 801b03c:	d008      	beq.n	801b050 <RadioSetTxConfig+0x128>
 801b03e:	6a3b      	ldr	r3, [r7, #32]
 801b040:	2b0c      	cmp	r3, #12
 801b042:	d005      	beq.n	801b050 <RadioSetTxConfig+0x128>
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	2b01      	cmp	r3, #1
 801b048:	d107      	bne.n	801b05a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801b04a:	6a3b      	ldr	r3, [r7, #32]
 801b04c:	2b0c      	cmp	r3, #12
 801b04e:	d104      	bne.n	801b05a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801b050:	4b38      	ldr	r3, [pc, #224]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b052:	2201      	movs	r2, #1
 801b054:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801b058:	e003      	b.n	801b062 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801b05a:	4b36      	ldr	r3, [pc, #216]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b05c:	2200      	movs	r2, #0
 801b05e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b062:	4b34      	ldr	r3, [pc, #208]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b064:	2201      	movs	r2, #1
 801b066:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801b068:	4b32      	ldr	r3, [pc, #200]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b06a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801b06e:	2b05      	cmp	r3, #5
 801b070:	d004      	beq.n	801b07c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801b072:	4b30      	ldr	r3, [pc, #192]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b074:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801b078:	2b06      	cmp	r3, #6
 801b07a:	d10a      	bne.n	801b092 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801b07c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801b07e:	2b0b      	cmp	r3, #11
 801b080:	d803      	bhi.n	801b08a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801b082:	4b2c      	ldr	r3, [pc, #176]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b084:	220c      	movs	r2, #12
 801b086:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801b088:	e006      	b.n	801b098 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801b08a:	4a2a      	ldr	r2, [pc, #168]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b08c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801b08e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801b090:	e002      	b.n	801b098 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801b092:	4a28      	ldr	r2, [pc, #160]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b094:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801b096:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801b098:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801b09c:	4b25      	ldr	r3, [pc, #148]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b09e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801b0a0:	4b29      	ldr	r3, [pc, #164]	; (801b148 <RadioSetTxConfig+0x220>)
 801b0a2:	781a      	ldrb	r2, [r3, #0]
 801b0a4:	4b23      	ldr	r3, [pc, #140]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b0a6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801b0a8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801b0ac:	4b21      	ldr	r3, [pc, #132]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b0ae:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801b0b2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801b0b6:	4b1f      	ldr	r3, [pc, #124]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b0b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801b0bc:	f000 fabd 	bl	801b63a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801b0c0:	2001      	movs	r0, #1
 801b0c2:	f7ff fc51 	bl	801a968 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b0c6:	481c      	ldr	r0, [pc, #112]	; (801b138 <RadioSetTxConfig+0x210>)
 801b0c8:	f002 f8ae 	bl	801d228 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b0cc:	481b      	ldr	r0, [pc, #108]	; (801b13c <RadioSetTxConfig+0x214>)
 801b0ce:	f002 f97d 	bl	801d3cc <SUBGRF_SetPacketParams>
            break;
 801b0d2:	e012      	b.n	801b0fa <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801b0d4:	2004      	movs	r0, #4
 801b0d6:	f7ff fc47 	bl	801a968 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801b0da:	4b16      	ldr	r3, [pc, #88]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b0dc:	2202      	movs	r2, #2
 801b0de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801b0e2:	4a14      	ldr	r2, [pc, #80]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b0e4:	6a3b      	ldr	r3, [r7, #32]
 801b0e6:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801b0e8:	4b12      	ldr	r3, [pc, #72]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b0ea:	2216      	movs	r2, #22
 801b0ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b0f0:	4811      	ldr	r0, [pc, #68]	; (801b138 <RadioSetTxConfig+0x210>)
 801b0f2:	f002 f899 	bl	801d228 <SUBGRF_SetModulationParams>
            break;
 801b0f6:	e000      	b.n	801b0fa <RadioSetTxConfig+0x1d2>
            break;
 801b0f8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801b0fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b0fe:	4618      	mov	r0, r3
 801b100:	f002 fbc8 	bl	801d894 <SUBGRF_SetRfTxPower>
 801b104:	4603      	mov	r3, r0
 801b106:	461a      	mov	r2, r3
 801b108:	4b0a      	ldr	r3, [pc, #40]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b10a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b10e:	210e      	movs	r1, #14
 801b110:	f640 101f 	movw	r0, #2335	; 0x91f
 801b114:	f002 faa2 	bl	801d65c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801b118:	4b06      	ldr	r3, [pc, #24]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b11a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b11e:	4618      	mov	r0, r3
 801b120:	f002 fd97 	bl	801dc52 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801b124:	4a03      	ldr	r2, [pc, #12]	; (801b134 <RadioSetTxConfig+0x20c>)
 801b126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b128:	6053      	str	r3, [r2, #4]
}
 801b12a:	bf00      	nop
 801b12c:	3718      	adds	r7, #24
 801b12e:	46bd      	mov	sp, r7
 801b130:	bd80      	pop	{r7, pc}
 801b132:	bf00      	nop
 801b134:	20001cf0 	.word	0x20001cf0
 801b138:	20001d28 	.word	0x20001d28
 801b13c:	20001cfe 	.word	0x20001cfe
 801b140:	0801fe00 	.word	0x0801fe00
 801b144:	080204b4 	.word	0x080204b4
 801b148:	20000134 	.word	0x20000134

0801b14c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801b14c:	b480      	push	{r7}
 801b14e:	b083      	sub	sp, #12
 801b150:	af00      	add	r7, sp, #0
 801b152:	6078      	str	r0, [r7, #4]
    return true;
 801b154:	2301      	movs	r3, #1
}
 801b156:	4618      	mov	r0, r3
 801b158:	370c      	adds	r7, #12
 801b15a:	46bd      	mov	sp, r7
 801b15c:	bc80      	pop	{r7}
 801b15e:	4770      	bx	lr

0801b160 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801b160:	b480      	push	{r7}
 801b162:	b085      	sub	sp, #20
 801b164:	af00      	add	r7, sp, #0
 801b166:	4603      	mov	r3, r0
 801b168:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801b16a:	2300      	movs	r3, #0
 801b16c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801b16e:	79fb      	ldrb	r3, [r7, #7]
 801b170:	2b0a      	cmp	r3, #10
 801b172:	d83e      	bhi.n	801b1f2 <RadioGetLoRaBandwidthInHz+0x92>
 801b174:	a201      	add	r2, pc, #4	; (adr r2, 801b17c <RadioGetLoRaBandwidthInHz+0x1c>)
 801b176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b17a:	bf00      	nop
 801b17c:	0801b1a9 	.word	0x0801b1a9
 801b180:	0801b1b9 	.word	0x0801b1b9
 801b184:	0801b1c9 	.word	0x0801b1c9
 801b188:	0801b1d9 	.word	0x0801b1d9
 801b18c:	0801b1e1 	.word	0x0801b1e1
 801b190:	0801b1e7 	.word	0x0801b1e7
 801b194:	0801b1ed 	.word	0x0801b1ed
 801b198:	0801b1f3 	.word	0x0801b1f3
 801b19c:	0801b1b1 	.word	0x0801b1b1
 801b1a0:	0801b1c1 	.word	0x0801b1c1
 801b1a4:	0801b1d1 	.word	0x0801b1d1
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801b1a8:	f641 6384 	movw	r3, #7812	; 0x1e84
 801b1ac:	60fb      	str	r3, [r7, #12]
        break;
 801b1ae:	e020      	b.n	801b1f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801b1b0:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801b1b4:	60fb      	str	r3, [r7, #12]
        break;
 801b1b6:	e01c      	b.n	801b1f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801b1b8:	f643 5309 	movw	r3, #15625	; 0x3d09
 801b1bc:	60fb      	str	r3, [r7, #12]
        break;
 801b1be:	e018      	b.n	801b1f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801b1c0:	f245 1361 	movw	r3, #20833	; 0x5161
 801b1c4:	60fb      	str	r3, [r7, #12]
        break;
 801b1c6:	e014      	b.n	801b1f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801b1c8:	f647 2312 	movw	r3, #31250	; 0x7a12
 801b1cc:	60fb      	str	r3, [r7, #12]
        break;
 801b1ce:	e010      	b.n	801b1f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801b1d0:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801b1d4:	60fb      	str	r3, [r7, #12]
        break;
 801b1d6:	e00c      	b.n	801b1f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801b1d8:	f24f 4324 	movw	r3, #62500	; 0xf424
 801b1dc:	60fb      	str	r3, [r7, #12]
        break;
 801b1de:	e008      	b.n	801b1f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801b1e0:	4b07      	ldr	r3, [pc, #28]	; (801b200 <RadioGetLoRaBandwidthInHz+0xa0>)
 801b1e2:	60fb      	str	r3, [r7, #12]
        break;
 801b1e4:	e005      	b.n	801b1f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801b1e6:	4b07      	ldr	r3, [pc, #28]	; (801b204 <RadioGetLoRaBandwidthInHz+0xa4>)
 801b1e8:	60fb      	str	r3, [r7, #12]
        break;
 801b1ea:	e002      	b.n	801b1f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801b1ec:	4b06      	ldr	r3, [pc, #24]	; (801b208 <RadioGetLoRaBandwidthInHz+0xa8>)
 801b1ee:	60fb      	str	r3, [r7, #12]
        break;
 801b1f0:	bf00      	nop
    }

    return bandwidthInHz;
 801b1f2:	68fb      	ldr	r3, [r7, #12]
}
 801b1f4:	4618      	mov	r0, r3
 801b1f6:	3714      	adds	r7, #20
 801b1f8:	46bd      	mov	sp, r7
 801b1fa:	bc80      	pop	{r7}
 801b1fc:	4770      	bx	lr
 801b1fe:	bf00      	nop
 801b200:	0001e848 	.word	0x0001e848
 801b204:	0003d090 	.word	0x0003d090
 801b208:	0007a120 	.word	0x0007a120

0801b20c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801b20c:	b480      	push	{r7}
 801b20e:	b083      	sub	sp, #12
 801b210:	af00      	add	r7, sp, #0
 801b212:	6078      	str	r0, [r7, #4]
 801b214:	4608      	mov	r0, r1
 801b216:	4611      	mov	r1, r2
 801b218:	461a      	mov	r2, r3
 801b21a:	4603      	mov	r3, r0
 801b21c:	70fb      	strb	r3, [r7, #3]
 801b21e:	460b      	mov	r3, r1
 801b220:	803b      	strh	r3, [r7, #0]
 801b222:	4613      	mov	r3, r2
 801b224:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801b226:	883b      	ldrh	r3, [r7, #0]
 801b228:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801b22a:	78ba      	ldrb	r2, [r7, #2]
 801b22c:	f082 0201 	eor.w	r2, r2, #1
 801b230:	b2d2      	uxtb	r2, r2
 801b232:	2a00      	cmp	r2, #0
 801b234:	d001      	beq.n	801b23a <RadioGetGfskTimeOnAirNumerator+0x2e>
 801b236:	2208      	movs	r2, #8
 801b238:	e000      	b.n	801b23c <RadioGetGfskTimeOnAirNumerator+0x30>
 801b23a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801b23c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801b23e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801b242:	7c3b      	ldrb	r3, [r7, #16]
 801b244:	7d39      	ldrb	r1, [r7, #20]
 801b246:	2900      	cmp	r1, #0
 801b248:	d001      	beq.n	801b24e <RadioGetGfskTimeOnAirNumerator+0x42>
 801b24a:	2102      	movs	r1, #2
 801b24c:	e000      	b.n	801b250 <RadioGetGfskTimeOnAirNumerator+0x44>
 801b24e:	2100      	movs	r1, #0
 801b250:	440b      	add	r3, r1
 801b252:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801b254:	4413      	add	r3, r2
}
 801b256:	4618      	mov	r0, r3
 801b258:	370c      	adds	r7, #12
 801b25a:	46bd      	mov	sp, r7
 801b25c:	bc80      	pop	{r7}
 801b25e:	4770      	bx	lr

0801b260 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801b260:	b480      	push	{r7}
 801b262:	b08b      	sub	sp, #44	; 0x2c
 801b264:	af00      	add	r7, sp, #0
 801b266:	60f8      	str	r0, [r7, #12]
 801b268:	60b9      	str	r1, [r7, #8]
 801b26a:	4611      	mov	r1, r2
 801b26c:	461a      	mov	r2, r3
 801b26e:	460b      	mov	r3, r1
 801b270:	71fb      	strb	r3, [r7, #7]
 801b272:	4613      	mov	r3, r2
 801b274:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801b276:	79fb      	ldrb	r3, [r7, #7]
 801b278:	3304      	adds	r3, #4
 801b27a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801b27c:	2300      	movs	r3, #0
 801b27e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801b282:	68bb      	ldr	r3, [r7, #8]
 801b284:	2b05      	cmp	r3, #5
 801b286:	d002      	beq.n	801b28e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801b288:	68bb      	ldr	r3, [r7, #8]
 801b28a:	2b06      	cmp	r3, #6
 801b28c:	d104      	bne.n	801b298 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801b28e:	88bb      	ldrh	r3, [r7, #4]
 801b290:	2b0b      	cmp	r3, #11
 801b292:	d801      	bhi.n	801b298 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801b294:	230c      	movs	r3, #12
 801b296:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d105      	bne.n	801b2aa <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801b29e:	68bb      	ldr	r3, [r7, #8]
 801b2a0:	2b0b      	cmp	r3, #11
 801b2a2:	d008      	beq.n	801b2b6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801b2a4:	68bb      	ldr	r3, [r7, #8]
 801b2a6:	2b0c      	cmp	r3, #12
 801b2a8:	d005      	beq.n	801b2b6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801b2aa:	68fb      	ldr	r3, [r7, #12]
 801b2ac:	2b01      	cmp	r3, #1
 801b2ae:	d105      	bne.n	801b2bc <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801b2b0:	68bb      	ldr	r3, [r7, #8]
 801b2b2:	2b0c      	cmp	r3, #12
 801b2b4:	d102      	bne.n	801b2bc <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801b2b6:	2301      	movs	r3, #1
 801b2b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b2bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801b2c0:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801b2c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801b2c6:	2a00      	cmp	r2, #0
 801b2c8:	d001      	beq.n	801b2ce <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801b2ca:	2210      	movs	r2, #16
 801b2cc:	e000      	b.n	801b2d0 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801b2ce:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b2d0:	4413      	add	r3, r2
 801b2d2:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801b2d4:	68bb      	ldr	r3, [r7, #8]
 801b2d6:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801b2d8:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801b2da:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801b2de:	2a00      	cmp	r2, #0
 801b2e0:	d001      	beq.n	801b2e6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801b2e2:	2200      	movs	r2, #0
 801b2e4:	e000      	b.n	801b2e8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801b2e6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801b2e8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b2ea:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801b2ec:	68bb      	ldr	r3, [r7, #8]
 801b2ee:	2b06      	cmp	r3, #6
 801b2f0:	d803      	bhi.n	801b2fa <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801b2f2:	68bb      	ldr	r3, [r7, #8]
 801b2f4:	009b      	lsls	r3, r3, #2
 801b2f6:	623b      	str	r3, [r7, #32]
 801b2f8:	e00e      	b.n	801b318 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801b2fa:	69fb      	ldr	r3, [r7, #28]
 801b2fc:	3308      	adds	r3, #8
 801b2fe:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801b300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b304:	2b00      	cmp	r3, #0
 801b306:	d004      	beq.n	801b312 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801b308:	68bb      	ldr	r3, [r7, #8]
 801b30a:	3b02      	subs	r3, #2
 801b30c:	009b      	lsls	r3, r3, #2
 801b30e:	623b      	str	r3, [r7, #32]
 801b310:	e002      	b.n	801b318 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801b312:	68bb      	ldr	r3, [r7, #8]
 801b314:	009b      	lsls	r3, r3, #2
 801b316:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801b318:	69fb      	ldr	r3, [r7, #28]
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	da01      	bge.n	801b322 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801b31e:	2300      	movs	r3, #0
 801b320:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801b322:	69fa      	ldr	r2, [r7, #28]
 801b324:	6a3b      	ldr	r3, [r7, #32]
 801b326:	4413      	add	r3, r2
 801b328:	1e5a      	subs	r2, r3, #1
 801b32a:	6a3b      	ldr	r3, [r7, #32]
 801b32c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b330:	697a      	ldr	r2, [r7, #20]
 801b332:	fb03 f202 	mul.w	r2, r3, r2
 801b336:	88bb      	ldrh	r3, [r7, #4]
 801b338:	4413      	add	r3, r2
    int32_t intermediate =
 801b33a:	330c      	adds	r3, #12
 801b33c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801b33e:	68bb      	ldr	r3, [r7, #8]
 801b340:	2b06      	cmp	r3, #6
 801b342:	d802      	bhi.n	801b34a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801b344:	69bb      	ldr	r3, [r7, #24]
 801b346:	3302      	adds	r3, #2
 801b348:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801b34a:	69bb      	ldr	r3, [r7, #24]
 801b34c:	009b      	lsls	r3, r3, #2
 801b34e:	1c5a      	adds	r2, r3, #1
 801b350:	68bb      	ldr	r3, [r7, #8]
 801b352:	3b02      	subs	r3, #2
 801b354:	fa02 f303 	lsl.w	r3, r2, r3
}
 801b358:	4618      	mov	r0, r3
 801b35a:	372c      	adds	r7, #44	; 0x2c
 801b35c:	46bd      	mov	sp, r7
 801b35e:	bc80      	pop	{r7}
 801b360:	4770      	bx	lr
	...

0801b364 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801b364:	b580      	push	{r7, lr}
 801b366:	b08a      	sub	sp, #40	; 0x28
 801b368:	af04      	add	r7, sp, #16
 801b36a:	60b9      	str	r1, [r7, #8]
 801b36c:	607a      	str	r2, [r7, #4]
 801b36e:	461a      	mov	r2, r3
 801b370:	4603      	mov	r3, r0
 801b372:	73fb      	strb	r3, [r7, #15]
 801b374:	4613      	mov	r3, r2
 801b376:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801b378:	2300      	movs	r3, #0
 801b37a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801b37c:	2301      	movs	r3, #1
 801b37e:	613b      	str	r3, [r7, #16]

    switch( modem )
 801b380:	7bfb      	ldrb	r3, [r7, #15]
 801b382:	2b00      	cmp	r3, #0
 801b384:	d002      	beq.n	801b38c <RadioTimeOnAir+0x28>
 801b386:	2b01      	cmp	r3, #1
 801b388:	d017      	beq.n	801b3ba <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801b38a:	e035      	b.n	801b3f8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801b38c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801b390:	8c3a      	ldrh	r2, [r7, #32]
 801b392:	7bb9      	ldrb	r1, [r7, #14]
 801b394:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801b398:	9301      	str	r3, [sp, #4]
 801b39a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b39e:	9300      	str	r3, [sp, #0]
 801b3a0:	4603      	mov	r3, r0
 801b3a2:	6878      	ldr	r0, [r7, #4]
 801b3a4:	f7ff ff32 	bl	801b20c <RadioGetGfskTimeOnAirNumerator>
 801b3a8:	4603      	mov	r3, r0
 801b3aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b3ae:	fb02 f303 	mul.w	r3, r2, r3
 801b3b2:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	613b      	str	r3, [r7, #16]
        break;
 801b3b8:	e01e      	b.n	801b3f8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801b3ba:	8c39      	ldrh	r1, [r7, #32]
 801b3bc:	7bba      	ldrb	r2, [r7, #14]
 801b3be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801b3c2:	9302      	str	r3, [sp, #8]
 801b3c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b3c8:	9301      	str	r3, [sp, #4]
 801b3ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b3ce:	9300      	str	r3, [sp, #0]
 801b3d0:	460b      	mov	r3, r1
 801b3d2:	6879      	ldr	r1, [r7, #4]
 801b3d4:	68b8      	ldr	r0, [r7, #8]
 801b3d6:	f7ff ff43 	bl	801b260 <RadioGetLoRaTimeOnAirNumerator>
 801b3da:	4603      	mov	r3, r0
 801b3dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b3e0:	fb02 f303 	mul.w	r3, r2, r3
 801b3e4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801b3e6:	4a0a      	ldr	r2, [pc, #40]	; (801b410 <RadioTimeOnAir+0xac>)
 801b3e8:	68bb      	ldr	r3, [r7, #8]
 801b3ea:	4413      	add	r3, r2
 801b3ec:	781b      	ldrb	r3, [r3, #0]
 801b3ee:	4618      	mov	r0, r3
 801b3f0:	f7ff feb6 	bl	801b160 <RadioGetLoRaBandwidthInHz>
 801b3f4:	6138      	str	r0, [r7, #16]
        break;
 801b3f6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801b3f8:	697a      	ldr	r2, [r7, #20]
 801b3fa:	693b      	ldr	r3, [r7, #16]
 801b3fc:	4413      	add	r3, r2
 801b3fe:	1e5a      	subs	r2, r3, #1
 801b400:	693b      	ldr	r3, [r7, #16]
 801b402:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801b406:	4618      	mov	r0, r3
 801b408:	3718      	adds	r7, #24
 801b40a:	46bd      	mov	sp, r7
 801b40c:	bd80      	pop	{r7, pc}
 801b40e:	bf00      	nop
 801b410:	080204b4 	.word	0x080204b4

0801b414 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801b414:	b580      	push	{r7, lr}
 801b416:	b084      	sub	sp, #16
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]
 801b41c:	460b      	mov	r3, r1
 801b41e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801b420:	2300      	movs	r3, #0
 801b422:	2200      	movs	r2, #0
 801b424:	f240 2101 	movw	r1, #513	; 0x201
 801b428:	f240 2001 	movw	r0, #513	; 0x201
 801b42c:	f001 fd66 	bl	801cefc <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801b430:	4b73      	ldr	r3, [pc, #460]	; (801b600 <RadioSend+0x1ec>)
 801b432:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b436:	2101      	movs	r1, #1
 801b438:	4618      	mov	r0, r3
 801b43a:	f002 fa03 	bl	801d844 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801b43e:	4b70      	ldr	r3, [pc, #448]	; (801b600 <RadioSend+0x1ec>)
 801b440:	781b      	ldrb	r3, [r3, #0]
 801b442:	2b01      	cmp	r3, #1
 801b444:	d112      	bne.n	801b46c <RadioSend+0x58>
 801b446:	4b6e      	ldr	r3, [pc, #440]	; (801b600 <RadioSend+0x1ec>)
 801b448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801b44c:	2b06      	cmp	r3, #6
 801b44e:	d10d      	bne.n	801b46c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801b450:	f640 0089 	movw	r0, #2185	; 0x889
 801b454:	f002 f916 	bl	801d684 <SUBGRF_ReadRegister>
 801b458:	4603      	mov	r3, r0
 801b45a:	f023 0304 	bic.w	r3, r3, #4
 801b45e:	b2db      	uxtb	r3, r3
 801b460:	4619      	mov	r1, r3
 801b462:	f640 0089 	movw	r0, #2185	; 0x889
 801b466:	f002 f8f9 	bl	801d65c <SUBGRF_WriteRegister>
 801b46a:	e00c      	b.n	801b486 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801b46c:	f640 0089 	movw	r0, #2185	; 0x889
 801b470:	f002 f908 	bl	801d684 <SUBGRF_ReadRegister>
 801b474:	4603      	mov	r3, r0
 801b476:	f043 0304 	orr.w	r3, r3, #4
 801b47a:	b2db      	uxtb	r3, r3
 801b47c:	4619      	mov	r1, r3
 801b47e:	f640 0089 	movw	r0, #2185	; 0x889
 801b482:	f002 f8eb 	bl	801d65c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801b486:	4b5e      	ldr	r3, [pc, #376]	; (801b600 <RadioSend+0x1ec>)
 801b488:	781b      	ldrb	r3, [r3, #0]
 801b48a:	2b04      	cmp	r3, #4
 801b48c:	f200 80a8 	bhi.w	801b5e0 <RadioSend+0x1cc>
 801b490:	a201      	add	r2, pc, #4	; (adr r2, 801b498 <RadioSend+0x84>)
 801b492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b496:	bf00      	nop
 801b498:	0801b4c7 	.word	0x0801b4c7
 801b49c:	0801b4ad 	.word	0x0801b4ad
 801b4a0:	0801b4c7 	.word	0x0801b4c7
 801b4a4:	0801b529 	.word	0x0801b529
 801b4a8:	0801b549 	.word	0x0801b549
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801b4ac:	4a54      	ldr	r2, [pc, #336]	; (801b600 <RadioSend+0x1ec>)
 801b4ae:	78fb      	ldrb	r3, [r7, #3]
 801b4b0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b4b2:	4854      	ldr	r0, [pc, #336]	; (801b604 <RadioSend+0x1f0>)
 801b4b4:	f001 ff8a 	bl	801d3cc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801b4b8:	78fb      	ldrb	r3, [r7, #3]
 801b4ba:	2200      	movs	r2, #0
 801b4bc:	4619      	mov	r1, r3
 801b4be:	6878      	ldr	r0, [r7, #4]
 801b4c0:	f001 fa3a 	bl	801c938 <SUBGRF_SendPayload>
            break;
 801b4c4:	e08d      	b.n	801b5e2 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801b4c6:	f002 fbb6 	bl	801dc36 <RFW_Is_Init>
 801b4ca:	4603      	mov	r3, r0
 801b4cc:	2b01      	cmp	r3, #1
 801b4ce:	d11e      	bne.n	801b50e <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801b4d0:	f107 020d 	add.w	r2, r7, #13
 801b4d4:	78fb      	ldrb	r3, [r7, #3]
 801b4d6:	4619      	mov	r1, r3
 801b4d8:	6878      	ldr	r0, [r7, #4]
 801b4da:	f002 fbc4 	bl	801dc66 <RFW_TransmitInit>
 801b4de:	4603      	mov	r3, r0
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d10c      	bne.n	801b4fe <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801b4e4:	7b7a      	ldrb	r2, [r7, #13]
 801b4e6:	4b46      	ldr	r3, [pc, #280]	; (801b600 <RadioSend+0x1ec>)
 801b4e8:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b4ea:	4846      	ldr	r0, [pc, #280]	; (801b604 <RadioSend+0x1f0>)
 801b4ec:	f001 ff6e 	bl	801d3cc <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801b4f0:	7b7b      	ldrb	r3, [r7, #13]
 801b4f2:	2200      	movs	r2, #0
 801b4f4:	4619      	mov	r1, r3
 801b4f6:	6878      	ldr	r0, [r7, #4]
 801b4f8:	f001 fa1e 	bl	801c938 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801b4fc:	e071      	b.n	801b5e2 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801b4fe:	4b42      	ldr	r3, [pc, #264]	; (801b608 <RadioSend+0x1f4>)
 801b500:	2201      	movs	r2, #1
 801b502:	2100      	movs	r1, #0
 801b504:	2002      	movs	r0, #2
 801b506:	f003 fccf 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801b50a:	2303      	movs	r3, #3
 801b50c:	e073      	b.n	801b5f6 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801b50e:	4a3c      	ldr	r2, [pc, #240]	; (801b600 <RadioSend+0x1ec>)
 801b510:	78fb      	ldrb	r3, [r7, #3]
 801b512:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b514:	483b      	ldr	r0, [pc, #236]	; (801b604 <RadioSend+0x1f0>)
 801b516:	f001 ff59 	bl	801d3cc <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801b51a:	78fb      	ldrb	r3, [r7, #3]
 801b51c:	2200      	movs	r2, #0
 801b51e:	4619      	mov	r1, r3
 801b520:	6878      	ldr	r0, [r7, #4]
 801b522:	f001 fa09 	bl	801c938 <SUBGRF_SendPayload>
            break;
 801b526:	e05c      	b.n	801b5e2 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801b528:	4b35      	ldr	r3, [pc, #212]	; (801b600 <RadioSend+0x1ec>)
 801b52a:	2202      	movs	r2, #2
 801b52c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801b52e:	4a34      	ldr	r2, [pc, #208]	; (801b600 <RadioSend+0x1ec>)
 801b530:	78fb      	ldrb	r3, [r7, #3]
 801b532:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b534:	4833      	ldr	r0, [pc, #204]	; (801b604 <RadioSend+0x1f0>)
 801b536:	f001 ff49 	bl	801d3cc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801b53a:	78fb      	ldrb	r3, [r7, #3]
 801b53c:	2200      	movs	r2, #0
 801b53e:	4619      	mov	r1, r3
 801b540:	6878      	ldr	r0, [r7, #4]
 801b542:	f001 f9f9 	bl	801c938 <SUBGRF_SendPayload>
            break;
 801b546:	e04c      	b.n	801b5e2 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801b548:	78fb      	ldrb	r3, [r7, #3]
 801b54a:	461a      	mov	r2, r3
 801b54c:	6879      	ldr	r1, [r7, #4]
 801b54e:	482f      	ldr	r0, [pc, #188]	; (801b60c <RadioSend+0x1f8>)
 801b550:	f000 fccc 	bl	801beec <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801b554:	4b2a      	ldr	r3, [pc, #168]	; (801b600 <RadioSend+0x1ec>)
 801b556:	2202      	movs	r2, #2
 801b558:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801b55a:	78fb      	ldrb	r3, [r7, #3]
 801b55c:	3301      	adds	r3, #1
 801b55e:	b2da      	uxtb	r2, r3
 801b560:	4b27      	ldr	r3, [pc, #156]	; (801b600 <RadioSend+0x1ec>)
 801b562:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b564:	4827      	ldr	r0, [pc, #156]	; (801b604 <RadioSend+0x1f0>)
 801b566:	f001 ff31 	bl	801d3cc <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801b56a:	2100      	movs	r1, #0
 801b56c:	20f1      	movs	r0, #241	; 0xf1
 801b56e:	f000 f966 	bl	801b83e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801b572:	2100      	movs	r1, #0
 801b574:	20f0      	movs	r0, #240	; 0xf0
 801b576:	f000 f962 	bl	801b83e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801b57a:	4b21      	ldr	r3, [pc, #132]	; (801b600 <RadioSend+0x1ec>)
 801b57c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b57e:	2b64      	cmp	r3, #100	; 0x64
 801b580:	d108      	bne.n	801b594 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801b582:	2170      	movs	r1, #112	; 0x70
 801b584:	20f3      	movs	r0, #243	; 0xf3
 801b586:	f000 f95a 	bl	801b83e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801b58a:	211d      	movs	r1, #29
 801b58c:	20f2      	movs	r0, #242	; 0xf2
 801b58e:	f000 f956 	bl	801b83e <RadioWrite>
 801b592:	e007      	b.n	801b5a4 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801b594:	21e1      	movs	r1, #225	; 0xe1
 801b596:	20f3      	movs	r0, #243	; 0xf3
 801b598:	f000 f951 	bl	801b83e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801b59c:	2104      	movs	r1, #4
 801b59e:	20f2      	movs	r0, #242	; 0xf2
 801b5a0:	f000 f94d 	bl	801b83e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801b5a4:	78fb      	ldrb	r3, [r7, #3]
 801b5a6:	b29b      	uxth	r3, r3
 801b5a8:	00db      	lsls	r3, r3, #3
 801b5aa:	b29b      	uxth	r3, r3
 801b5ac:	3302      	adds	r3, #2
 801b5ae:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801b5b0:	89fb      	ldrh	r3, [r7, #14]
 801b5b2:	0a1b      	lsrs	r3, r3, #8
 801b5b4:	b29b      	uxth	r3, r3
 801b5b6:	b2db      	uxtb	r3, r3
 801b5b8:	4619      	mov	r1, r3
 801b5ba:	20f4      	movs	r0, #244	; 0xf4
 801b5bc:	f000 f93f 	bl	801b83e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801b5c0:	89fb      	ldrh	r3, [r7, #14]
 801b5c2:	b2db      	uxtb	r3, r3
 801b5c4:	4619      	mov	r1, r3
 801b5c6:	20f5      	movs	r0, #245	; 0xf5
 801b5c8:	f000 f939 	bl	801b83e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801b5cc:	78fb      	ldrb	r3, [r7, #3]
 801b5ce:	3301      	adds	r3, #1
 801b5d0:	b2db      	uxtb	r3, r3
 801b5d2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801b5d6:	4619      	mov	r1, r3
 801b5d8:	480c      	ldr	r0, [pc, #48]	; (801b60c <RadioSend+0x1f8>)
 801b5da:	f001 f9ad 	bl	801c938 <SUBGRF_SendPayload>
            break;
 801b5de:	e000      	b.n	801b5e2 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801b5e0:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801b5e2:	4b07      	ldr	r3, [pc, #28]	; (801b600 <RadioSend+0x1ec>)
 801b5e4:	685b      	ldr	r3, [r3, #4]
 801b5e6:	4619      	mov	r1, r3
 801b5e8:	4809      	ldr	r0, [pc, #36]	; (801b610 <RadioSend+0x1fc>)
 801b5ea:	f003 fac3 	bl	801eb74 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801b5ee:	4808      	ldr	r0, [pc, #32]	; (801b610 <RadioSend+0x1fc>)
 801b5f0:	f003 f9e2 	bl	801e9b8 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801b5f4:	2300      	movs	r3, #0
}
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	3710      	adds	r7, #16
 801b5fa:	46bd      	mov	sp, r7
 801b5fc:	bd80      	pop	{r7, pc}
 801b5fe:	bf00      	nop
 801b600:	20001cf0 	.word	0x20001cf0
 801b604:	20001cfe 	.word	0x20001cfe
 801b608:	0801fe08 	.word	0x0801fe08
 801b60c:	20001bec 	.word	0x20001bec
 801b610:	20001d4c 	.word	0x20001d4c

0801b614 <RadioSleep>:

static void RadioSleep( void )
{
 801b614:	b580      	push	{r7, lr}
 801b616:	b082      	sub	sp, #8
 801b618:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801b61a:	2300      	movs	r3, #0
 801b61c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801b61e:	793b      	ldrb	r3, [r7, #4]
 801b620:	f043 0304 	orr.w	r3, r3, #4
 801b624:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801b626:	7938      	ldrb	r0, [r7, #4]
 801b628:	f001 fa62 	bl	801caf0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801b62c:	2002      	movs	r0, #2
 801b62e:	f7e7 f8ad 	bl	800278c <HAL_Delay>
}
 801b632:	bf00      	nop
 801b634:	3708      	adds	r7, #8
 801b636:	46bd      	mov	sp, r7
 801b638:	bd80      	pop	{r7, pc}

0801b63a <RadioStandby>:

static void RadioStandby( void )
{
 801b63a:	b580      	push	{r7, lr}
 801b63c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801b63e:	2000      	movs	r0, #0
 801b640:	f001 fa88 	bl	801cb54 <SUBGRF_SetStandby>
}
 801b644:	bf00      	nop
 801b646:	bd80      	pop	{r7, pc}

0801b648 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801b648:	b580      	push	{r7, lr}
 801b64a:	b082      	sub	sp, #8
 801b64c:	af00      	add	r7, sp, #0
 801b64e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801b650:	f002 faf1 	bl	801dc36 <RFW_Is_Init>
 801b654:	4603      	mov	r3, r0
 801b656:	2b01      	cmp	r3, #1
 801b658:	d102      	bne.n	801b660 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801b65a:	f002 fb14 	bl	801dc86 <RFW_ReceiveInit>
 801b65e:	e007      	b.n	801b670 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801b660:	2300      	movs	r3, #0
 801b662:	2200      	movs	r2, #0
 801b664:	f240 2162 	movw	r1, #610	; 0x262
 801b668:	f240 2062 	movw	r0, #610	; 0x262
 801b66c:	f001 fc46 	bl	801cefc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	2b00      	cmp	r3, #0
 801b674:	d006      	beq.n	801b684 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801b676:	6879      	ldr	r1, [r7, #4]
 801b678:	4811      	ldr	r0, [pc, #68]	; (801b6c0 <RadioRx+0x78>)
 801b67a:	f003 fa7b 	bl	801eb74 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801b67e:	4810      	ldr	r0, [pc, #64]	; (801b6c0 <RadioRx+0x78>)
 801b680:	f003 f99a 	bl	801e9b8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801b684:	4b0f      	ldr	r3, [pc, #60]	; (801b6c4 <RadioRx+0x7c>)
 801b686:	2200      	movs	r2, #0
 801b688:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801b68a:	4b0e      	ldr	r3, [pc, #56]	; (801b6c4 <RadioRx+0x7c>)
 801b68c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b690:	2100      	movs	r1, #0
 801b692:	4618      	mov	r0, r3
 801b694:	f002 f8d6 	bl	801d844 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801b698:	4b0a      	ldr	r3, [pc, #40]	; (801b6c4 <RadioRx+0x7c>)
 801b69a:	785b      	ldrb	r3, [r3, #1]
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d004      	beq.n	801b6aa <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801b6a0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801b6a4:	f001 fa92 	bl	801cbcc <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801b6a8:	e005      	b.n	801b6b6 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801b6aa:	4b06      	ldr	r3, [pc, #24]	; (801b6c4 <RadioRx+0x7c>)
 801b6ac:	689b      	ldr	r3, [r3, #8]
 801b6ae:	019b      	lsls	r3, r3, #6
 801b6b0:	4618      	mov	r0, r3
 801b6b2:	f001 fa8b 	bl	801cbcc <SUBGRF_SetRx>
}
 801b6b6:	bf00      	nop
 801b6b8:	3708      	adds	r7, #8
 801b6ba:	46bd      	mov	sp, r7
 801b6bc:	bd80      	pop	{r7, pc}
 801b6be:	bf00      	nop
 801b6c0:	20001d64 	.word	0x20001d64
 801b6c4:	20001cf0 	.word	0x20001cf0

0801b6c8 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801b6c8:	b580      	push	{r7, lr}
 801b6ca:	b082      	sub	sp, #8
 801b6cc:	af00      	add	r7, sp, #0
 801b6ce:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801b6d0:	f002 fab1 	bl	801dc36 <RFW_Is_Init>
 801b6d4:	4603      	mov	r3, r0
 801b6d6:	2b01      	cmp	r3, #1
 801b6d8:	d102      	bne.n	801b6e0 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801b6da:	f002 fad4 	bl	801dc86 <RFW_ReceiveInit>
 801b6de:	e007      	b.n	801b6f0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801b6e0:	2300      	movs	r3, #0
 801b6e2:	2200      	movs	r2, #0
 801b6e4:	f240 2162 	movw	r1, #610	; 0x262
 801b6e8:	f240 2062 	movw	r0, #610	; 0x262
 801b6ec:	f001 fc06 	bl	801cefc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d006      	beq.n	801b704 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801b6f6:	6879      	ldr	r1, [r7, #4]
 801b6f8:	4811      	ldr	r0, [pc, #68]	; (801b740 <RadioRxBoosted+0x78>)
 801b6fa:	f003 fa3b 	bl	801eb74 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801b6fe:	4810      	ldr	r0, [pc, #64]	; (801b740 <RadioRxBoosted+0x78>)
 801b700:	f003 f95a 	bl	801e9b8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801b704:	4b0f      	ldr	r3, [pc, #60]	; (801b744 <RadioRxBoosted+0x7c>)
 801b706:	2200      	movs	r2, #0
 801b708:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801b70a:	4b0e      	ldr	r3, [pc, #56]	; (801b744 <RadioRxBoosted+0x7c>)
 801b70c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b710:	2100      	movs	r1, #0
 801b712:	4618      	mov	r0, r3
 801b714:	f002 f896 	bl	801d844 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801b718:	4b0a      	ldr	r3, [pc, #40]	; (801b744 <RadioRxBoosted+0x7c>)
 801b71a:	785b      	ldrb	r3, [r3, #1]
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d004      	beq.n	801b72a <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801b720:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801b724:	f001 fa72 	bl	801cc0c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801b728:	e005      	b.n	801b736 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801b72a:	4b06      	ldr	r3, [pc, #24]	; (801b744 <RadioRxBoosted+0x7c>)
 801b72c:	689b      	ldr	r3, [r3, #8]
 801b72e:	019b      	lsls	r3, r3, #6
 801b730:	4618      	mov	r0, r3
 801b732:	f001 fa6b 	bl	801cc0c <SUBGRF_SetRxBoosted>
}
 801b736:	bf00      	nop
 801b738:	3708      	adds	r7, #8
 801b73a:	46bd      	mov	sp, r7
 801b73c:	bd80      	pop	{r7, pc}
 801b73e:	bf00      	nop
 801b740:	20001d64 	.word	0x20001d64
 801b744:	20001cf0 	.word	0x20001cf0

0801b748 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b748:	b580      	push	{r7, lr}
 801b74a:	b082      	sub	sp, #8
 801b74c:	af00      	add	r7, sp, #0
 801b74e:	6078      	str	r0, [r7, #4]
 801b750:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	005a      	lsls	r2, r3, #1
 801b756:	683b      	ldr	r3, [r7, #0]
 801b758:	4413      	add	r3, r2
 801b75a:	4a0c      	ldr	r2, [pc, #48]	; (801b78c <RadioSetRxDutyCycle+0x44>)
 801b75c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b75e:	2300      	movs	r3, #0
 801b760:	2200      	movs	r2, #0
 801b762:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b766:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b76a:	f001 fbc7 	bl	801cefc <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801b76e:	4b07      	ldr	r3, [pc, #28]	; (801b78c <RadioSetRxDutyCycle+0x44>)
 801b770:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b774:	2100      	movs	r1, #0
 801b776:	4618      	mov	r0, r3
 801b778:	f002 f864 	bl	801d844 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801b77c:	6839      	ldr	r1, [r7, #0]
 801b77e:	6878      	ldr	r0, [r7, #4]
 801b780:	f001 fa68 	bl	801cc54 <SUBGRF_SetRxDutyCycle>
}
 801b784:	bf00      	nop
 801b786:	3708      	adds	r7, #8
 801b788:	46bd      	mov	sp, r7
 801b78a:	bd80      	pop	{r7, pc}
 801b78c:	20001cf0 	.word	0x20001cf0

0801b790 <RadioStartCad>:

static void RadioStartCad( void )
{
 801b790:	b580      	push	{r7, lr}
 801b792:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801b794:	4b09      	ldr	r3, [pc, #36]	; (801b7bc <RadioStartCad+0x2c>)
 801b796:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b79a:	2100      	movs	r1, #0
 801b79c:	4618      	mov	r0, r3
 801b79e:	f002 f851 	bl	801d844 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801b7a2:	2300      	movs	r3, #0
 801b7a4:	2200      	movs	r2, #0
 801b7a6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801b7aa:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801b7ae:	f001 fba5 	bl	801cefc <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801b7b2:	f001 fa7b 	bl	801ccac <SUBGRF_SetCad>
}
 801b7b6:	bf00      	nop
 801b7b8:	bd80      	pop	{r7, pc}
 801b7ba:	bf00      	nop
 801b7bc:	20001cf0 	.word	0x20001cf0

0801b7c0 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801b7c0:	b580      	push	{r7, lr}
 801b7c2:	b084      	sub	sp, #16
 801b7c4:	af00      	add	r7, sp, #0
 801b7c6:	6078      	str	r0, [r7, #4]
 801b7c8:	460b      	mov	r3, r1
 801b7ca:	70fb      	strb	r3, [r7, #3]
 801b7cc:	4613      	mov	r3, r2
 801b7ce:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801b7d0:	883b      	ldrh	r3, [r7, #0]
 801b7d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b7d6:	fb02 f303 	mul.w	r3, r2, r3
 801b7da:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801b7dc:	6878      	ldr	r0, [r7, #4]
 801b7de:	f001 fbe9 	bl	801cfb4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801b7e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b7e6:	4618      	mov	r0, r3
 801b7e8:	f002 f854 	bl	801d894 <SUBGRF_SetRfTxPower>
 801b7ec:	4603      	mov	r3, r0
 801b7ee:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b7f0:	210e      	movs	r1, #14
 801b7f2:	f640 101f 	movw	r0, #2335	; 0x91f
 801b7f6:	f001 ff31 	bl	801d65c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801b7fa:	7afb      	ldrb	r3, [r7, #11]
 801b7fc:	2101      	movs	r1, #1
 801b7fe:	4618      	mov	r0, r3
 801b800:	f002 f820 	bl	801d844 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801b804:	f001 fa60 	bl	801ccc8 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801b808:	68f9      	ldr	r1, [r7, #12]
 801b80a:	4805      	ldr	r0, [pc, #20]	; (801b820 <RadioSetTxContinuousWave+0x60>)
 801b80c:	f003 f9b2 	bl	801eb74 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801b810:	4803      	ldr	r0, [pc, #12]	; (801b820 <RadioSetTxContinuousWave+0x60>)
 801b812:	f003 f8d1 	bl	801e9b8 <UTIL_TIMER_Start>
}
 801b816:	bf00      	nop
 801b818:	3710      	adds	r7, #16
 801b81a:	46bd      	mov	sp, r7
 801b81c:	bd80      	pop	{r7, pc}
 801b81e:	bf00      	nop
 801b820:	20001d4c 	.word	0x20001d4c

0801b824 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801b824:	b580      	push	{r7, lr}
 801b826:	b082      	sub	sp, #8
 801b828:	af00      	add	r7, sp, #0
 801b82a:	4603      	mov	r3, r0
 801b82c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801b82e:	f001 fe82 	bl	801d536 <SUBGRF_GetRssiInst>
 801b832:	4603      	mov	r3, r0
 801b834:	b21b      	sxth	r3, r3
}
 801b836:	4618      	mov	r0, r3
 801b838:	3708      	adds	r7, #8
 801b83a:	46bd      	mov	sp, r7
 801b83c:	bd80      	pop	{r7, pc}

0801b83e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801b83e:	b580      	push	{r7, lr}
 801b840:	b082      	sub	sp, #8
 801b842:	af00      	add	r7, sp, #0
 801b844:	4603      	mov	r3, r0
 801b846:	460a      	mov	r2, r1
 801b848:	80fb      	strh	r3, [r7, #6]
 801b84a:	4613      	mov	r3, r2
 801b84c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801b84e:	797a      	ldrb	r2, [r7, #5]
 801b850:	88fb      	ldrh	r3, [r7, #6]
 801b852:	4611      	mov	r1, r2
 801b854:	4618      	mov	r0, r3
 801b856:	f001 ff01 	bl	801d65c <SUBGRF_WriteRegister>
}
 801b85a:	bf00      	nop
 801b85c:	3708      	adds	r7, #8
 801b85e:	46bd      	mov	sp, r7
 801b860:	bd80      	pop	{r7, pc}

0801b862 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801b862:	b580      	push	{r7, lr}
 801b864:	b082      	sub	sp, #8
 801b866:	af00      	add	r7, sp, #0
 801b868:	4603      	mov	r3, r0
 801b86a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801b86c:	88fb      	ldrh	r3, [r7, #6]
 801b86e:	4618      	mov	r0, r3
 801b870:	f001 ff08 	bl	801d684 <SUBGRF_ReadRegister>
 801b874:	4603      	mov	r3, r0
}
 801b876:	4618      	mov	r0, r3
 801b878:	3708      	adds	r7, #8
 801b87a:	46bd      	mov	sp, r7
 801b87c:	bd80      	pop	{r7, pc}

0801b87e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801b87e:	b580      	push	{r7, lr}
 801b880:	b082      	sub	sp, #8
 801b882:	af00      	add	r7, sp, #0
 801b884:	4603      	mov	r3, r0
 801b886:	6039      	str	r1, [r7, #0]
 801b888:	80fb      	strh	r3, [r7, #6]
 801b88a:	4613      	mov	r3, r2
 801b88c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801b88e:	797b      	ldrb	r3, [r7, #5]
 801b890:	b29a      	uxth	r2, r3
 801b892:	88fb      	ldrh	r3, [r7, #6]
 801b894:	6839      	ldr	r1, [r7, #0]
 801b896:	4618      	mov	r0, r3
 801b898:	f001 ff08 	bl	801d6ac <SUBGRF_WriteRegisters>
}
 801b89c:	bf00      	nop
 801b89e:	3708      	adds	r7, #8
 801b8a0:	46bd      	mov	sp, r7
 801b8a2:	bd80      	pop	{r7, pc}

0801b8a4 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801b8a4:	b580      	push	{r7, lr}
 801b8a6:	b082      	sub	sp, #8
 801b8a8:	af00      	add	r7, sp, #0
 801b8aa:	4603      	mov	r3, r0
 801b8ac:	6039      	str	r1, [r7, #0]
 801b8ae:	80fb      	strh	r3, [r7, #6]
 801b8b0:	4613      	mov	r3, r2
 801b8b2:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801b8b4:	797b      	ldrb	r3, [r7, #5]
 801b8b6:	b29a      	uxth	r2, r3
 801b8b8:	88fb      	ldrh	r3, [r7, #6]
 801b8ba:	6839      	ldr	r1, [r7, #0]
 801b8bc:	4618      	mov	r0, r3
 801b8be:	f001 ff17 	bl	801d6f0 <SUBGRF_ReadRegisters>
}
 801b8c2:	bf00      	nop
 801b8c4:	3708      	adds	r7, #8
 801b8c6:	46bd      	mov	sp, r7
 801b8c8:	bd80      	pop	{r7, pc}
	...

0801b8cc <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801b8cc:	b580      	push	{r7, lr}
 801b8ce:	b082      	sub	sp, #8
 801b8d0:	af00      	add	r7, sp, #0
 801b8d2:	4603      	mov	r3, r0
 801b8d4:	460a      	mov	r2, r1
 801b8d6:	71fb      	strb	r3, [r7, #7]
 801b8d8:	4613      	mov	r3, r2
 801b8da:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801b8dc:	79fb      	ldrb	r3, [r7, #7]
 801b8de:	2b01      	cmp	r3, #1
 801b8e0:	d10a      	bne.n	801b8f8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801b8e2:	4a0e      	ldr	r2, [pc, #56]	; (801b91c <RadioSetMaxPayloadLength+0x50>)
 801b8e4:	79bb      	ldrb	r3, [r7, #6]
 801b8e6:	7013      	strb	r3, [r2, #0]
 801b8e8:	4b0c      	ldr	r3, [pc, #48]	; (801b91c <RadioSetMaxPayloadLength+0x50>)
 801b8ea:	781a      	ldrb	r2, [r3, #0]
 801b8ec:	4b0c      	ldr	r3, [pc, #48]	; (801b920 <RadioSetMaxPayloadLength+0x54>)
 801b8ee:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b8f0:	480c      	ldr	r0, [pc, #48]	; (801b924 <RadioSetMaxPayloadLength+0x58>)
 801b8f2:	f001 fd6b 	bl	801d3cc <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801b8f6:	e00d      	b.n	801b914 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801b8f8:	4b09      	ldr	r3, [pc, #36]	; (801b920 <RadioSetMaxPayloadLength+0x54>)
 801b8fa:	7d5b      	ldrb	r3, [r3, #21]
 801b8fc:	2b01      	cmp	r3, #1
 801b8fe:	d109      	bne.n	801b914 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801b900:	4a06      	ldr	r2, [pc, #24]	; (801b91c <RadioSetMaxPayloadLength+0x50>)
 801b902:	79bb      	ldrb	r3, [r7, #6]
 801b904:	7013      	strb	r3, [r2, #0]
 801b906:	4b05      	ldr	r3, [pc, #20]	; (801b91c <RadioSetMaxPayloadLength+0x50>)
 801b908:	781a      	ldrb	r2, [r3, #0]
 801b90a:	4b05      	ldr	r3, [pc, #20]	; (801b920 <RadioSetMaxPayloadLength+0x54>)
 801b90c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b90e:	4805      	ldr	r0, [pc, #20]	; (801b924 <RadioSetMaxPayloadLength+0x58>)
 801b910:	f001 fd5c 	bl	801d3cc <SUBGRF_SetPacketParams>
}
 801b914:	bf00      	nop
 801b916:	3708      	adds	r7, #8
 801b918:	46bd      	mov	sp, r7
 801b91a:	bd80      	pop	{r7, pc}
 801b91c:	20000134 	.word	0x20000134
 801b920:	20001cf0 	.word	0x20001cf0
 801b924:	20001cfe 	.word	0x20001cfe

0801b928 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801b928:	b580      	push	{r7, lr}
 801b92a:	b082      	sub	sp, #8
 801b92c:	af00      	add	r7, sp, #0
 801b92e:	4603      	mov	r3, r0
 801b930:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801b932:	4a13      	ldr	r2, [pc, #76]	; (801b980 <RadioSetPublicNetwork+0x58>)
 801b934:	79fb      	ldrb	r3, [r7, #7]
 801b936:	7313      	strb	r3, [r2, #12]
 801b938:	4b11      	ldr	r3, [pc, #68]	; (801b980 <RadioSetPublicNetwork+0x58>)
 801b93a:	7b1a      	ldrb	r2, [r3, #12]
 801b93c:	4b10      	ldr	r3, [pc, #64]	; (801b980 <RadioSetPublicNetwork+0x58>)
 801b93e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801b940:	2001      	movs	r0, #1
 801b942:	f7ff f811 	bl	801a968 <RadioSetModem>
    if( enable == true )
 801b946:	79fb      	ldrb	r3, [r7, #7]
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d00a      	beq.n	801b962 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801b94c:	2134      	movs	r1, #52	; 0x34
 801b94e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b952:	f001 fe83 	bl	801d65c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801b956:	2144      	movs	r1, #68	; 0x44
 801b958:	f240 7041 	movw	r0, #1857	; 0x741
 801b95c:	f001 fe7e 	bl	801d65c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801b960:	e009      	b.n	801b976 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801b962:	2114      	movs	r1, #20
 801b964:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b968:	f001 fe78 	bl	801d65c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801b96c:	2124      	movs	r1, #36	; 0x24
 801b96e:	f240 7041 	movw	r0, #1857	; 0x741
 801b972:	f001 fe73 	bl	801d65c <SUBGRF_WriteRegister>
}
 801b976:	bf00      	nop
 801b978:	3708      	adds	r7, #8
 801b97a:	46bd      	mov	sp, r7
 801b97c:	bd80      	pop	{r7, pc}
 801b97e:	bf00      	nop
 801b980:	20001cf0 	.word	0x20001cf0

0801b984 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801b984:	b580      	push	{r7, lr}
 801b986:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801b988:	f001 ffb8 	bl	801d8fc <SUBGRF_GetRadioWakeUpTime>
 801b98c:	4603      	mov	r3, r0
 801b98e:	3303      	adds	r3, #3
}
 801b990:	4618      	mov	r0, r3
 801b992:	bd80      	pop	{r7, pc}

0801b994 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801b994:	b580      	push	{r7, lr}
 801b996:	b082      	sub	sp, #8
 801b998:	af00      	add	r7, sp, #0
 801b99a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801b99c:	f000 f80e 	bl	801b9bc <RadioOnTxTimeoutProcess>
}
 801b9a0:	bf00      	nop
 801b9a2:	3708      	adds	r7, #8
 801b9a4:	46bd      	mov	sp, r7
 801b9a6:	bd80      	pop	{r7, pc}

0801b9a8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801b9a8:	b580      	push	{r7, lr}
 801b9aa:	b082      	sub	sp, #8
 801b9ac:	af00      	add	r7, sp, #0
 801b9ae:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801b9b0:	f000 f818 	bl	801b9e4 <RadioOnRxTimeoutProcess>
}
 801b9b4:	bf00      	nop
 801b9b6:	3708      	adds	r7, #8
 801b9b8:	46bd      	mov	sp, r7
 801b9ba:	bd80      	pop	{r7, pc}

0801b9bc <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801b9bc:	b580      	push	{r7, lr}
 801b9be:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b9c0:	4b07      	ldr	r3, [pc, #28]	; (801b9e0 <RadioOnTxTimeoutProcess+0x24>)
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d008      	beq.n	801b9da <RadioOnTxTimeoutProcess+0x1e>
 801b9c8:	4b05      	ldr	r3, [pc, #20]	; (801b9e0 <RadioOnTxTimeoutProcess+0x24>)
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	685b      	ldr	r3, [r3, #4]
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d003      	beq.n	801b9da <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801b9d2:	4b03      	ldr	r3, [pc, #12]	; (801b9e0 <RadioOnTxTimeoutProcess+0x24>)
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	685b      	ldr	r3, [r3, #4]
 801b9d8:	4798      	blx	r3
    }
}
 801b9da:	bf00      	nop
 801b9dc:	bd80      	pop	{r7, pc}
 801b9de:	bf00      	nop
 801b9e0:	20001cec 	.word	0x20001cec

0801b9e4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801b9e4:	b580      	push	{r7, lr}
 801b9e6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b9e8:	4b07      	ldr	r3, [pc, #28]	; (801ba08 <RadioOnRxTimeoutProcess+0x24>)
 801b9ea:	681b      	ldr	r3, [r3, #0]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d008      	beq.n	801ba02 <RadioOnRxTimeoutProcess+0x1e>
 801b9f0:	4b05      	ldr	r3, [pc, #20]	; (801ba08 <RadioOnRxTimeoutProcess+0x24>)
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	68db      	ldr	r3, [r3, #12]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d003      	beq.n	801ba02 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801b9fa:	4b03      	ldr	r3, [pc, #12]	; (801ba08 <RadioOnRxTimeoutProcess+0x24>)
 801b9fc:	681b      	ldr	r3, [r3, #0]
 801b9fe:	68db      	ldr	r3, [r3, #12]
 801ba00:	4798      	blx	r3
    }
}
 801ba02:	bf00      	nop
 801ba04:	bd80      	pop	{r7, pc}
 801ba06:	bf00      	nop
 801ba08:	20001cec 	.word	0x20001cec

0801ba0c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801ba0c:	b580      	push	{r7, lr}
 801ba0e:	b082      	sub	sp, #8
 801ba10:	af00      	add	r7, sp, #0
 801ba12:	4603      	mov	r3, r0
 801ba14:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801ba16:	4a05      	ldr	r2, [pc, #20]	; (801ba2c <RadioOnDioIrq+0x20>)
 801ba18:	88fb      	ldrh	r3, [r7, #6]
 801ba1a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801ba1e:	f000 f807 	bl	801ba30 <RadioIrqProcess>
}
 801ba22:	bf00      	nop
 801ba24:	3708      	adds	r7, #8
 801ba26:	46bd      	mov	sp, r7
 801ba28:	bd80      	pop	{r7, pc}
 801ba2a:	bf00      	nop
 801ba2c:	20001cf0 	.word	0x20001cf0

0801ba30 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801ba30:	b5b0      	push	{r4, r5, r7, lr}
 801ba32:	b082      	sub	sp, #8
 801ba34:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801ba36:	2300      	movs	r3, #0
 801ba38:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801ba3a:	2300      	movs	r3, #0
 801ba3c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801ba3e:	4ba8      	ldr	r3, [pc, #672]	; (801bce0 <RadioIrqProcess+0x2b0>)
 801ba40:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801ba44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ba48:	f000 810d 	beq.w	801bc66 <RadioIrqProcess+0x236>
 801ba4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ba50:	f300 81e8 	bgt.w	801be24 <RadioIrqProcess+0x3f4>
 801ba54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ba58:	f000 80f1 	beq.w	801bc3e <RadioIrqProcess+0x20e>
 801ba5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ba60:	f300 81e0 	bgt.w	801be24 <RadioIrqProcess+0x3f4>
 801ba64:	2b80      	cmp	r3, #128	; 0x80
 801ba66:	f000 80d6 	beq.w	801bc16 <RadioIrqProcess+0x1e6>
 801ba6a:	2b80      	cmp	r3, #128	; 0x80
 801ba6c:	f300 81da 	bgt.w	801be24 <RadioIrqProcess+0x3f4>
 801ba70:	2b20      	cmp	r3, #32
 801ba72:	dc49      	bgt.n	801bb08 <RadioIrqProcess+0xd8>
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	f340 81d5 	ble.w	801be24 <RadioIrqProcess+0x3f4>
 801ba7a:	3b01      	subs	r3, #1
 801ba7c:	2b1f      	cmp	r3, #31
 801ba7e:	f200 81d1 	bhi.w	801be24 <RadioIrqProcess+0x3f4>
 801ba82:	a201      	add	r2, pc, #4	; (adr r2, 801ba88 <RadioIrqProcess+0x58>)
 801ba84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba88:	0801bb11 	.word	0x0801bb11
 801ba8c:	0801bb4b 	.word	0x0801bb4b
 801ba90:	0801be25 	.word	0x0801be25
 801ba94:	0801bd01 	.word	0x0801bd01
 801ba98:	0801be25 	.word	0x0801be25
 801ba9c:	0801be25 	.word	0x0801be25
 801baa0:	0801be25 	.word	0x0801be25
 801baa4:	0801bd7d 	.word	0x0801bd7d
 801baa8:	0801be25 	.word	0x0801be25
 801baac:	0801be25 	.word	0x0801be25
 801bab0:	0801be25 	.word	0x0801be25
 801bab4:	0801be25 	.word	0x0801be25
 801bab8:	0801be25 	.word	0x0801be25
 801babc:	0801be25 	.word	0x0801be25
 801bac0:	0801be25 	.word	0x0801be25
 801bac4:	0801bd99 	.word	0x0801bd99
 801bac8:	0801be25 	.word	0x0801be25
 801bacc:	0801be25 	.word	0x0801be25
 801bad0:	0801be25 	.word	0x0801be25
 801bad4:	0801be25 	.word	0x0801be25
 801bad8:	0801be25 	.word	0x0801be25
 801badc:	0801be25 	.word	0x0801be25
 801bae0:	0801be25 	.word	0x0801be25
 801bae4:	0801be25 	.word	0x0801be25
 801bae8:	0801be25 	.word	0x0801be25
 801baec:	0801be25 	.word	0x0801be25
 801baf0:	0801be25 	.word	0x0801be25
 801baf4:	0801be25 	.word	0x0801be25
 801baf8:	0801be25 	.word	0x0801be25
 801bafc:	0801be25 	.word	0x0801be25
 801bb00:	0801be25 	.word	0x0801be25
 801bb04:	0801bda7 	.word	0x0801bda7
 801bb08:	2b40      	cmp	r3, #64	; 0x40
 801bb0a:	f000 816d 	beq.w	801bde8 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801bb0e:	e189      	b.n	801be24 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801bb10:	4874      	ldr	r0, [pc, #464]	; (801bce4 <RadioIrqProcess+0x2b4>)
 801bb12:	f002 ffbf 	bl	801ea94 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801bb16:	2000      	movs	r0, #0
 801bb18:	f001 f81c 	bl	801cb54 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801bb1c:	f002 f892 	bl	801dc44 <RFW_Is_LongPacketModeEnabled>
 801bb20:	4603      	mov	r3, r0
 801bb22:	2b01      	cmp	r3, #1
 801bb24:	d101      	bne.n	801bb2a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801bb26:	f002 f8b6 	bl	801dc96 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801bb2a:	4b6f      	ldr	r3, [pc, #444]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	f000 817a 	beq.w	801be28 <RadioIrqProcess+0x3f8>
 801bb34:	4b6c      	ldr	r3, [pc, #432]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	f000 8174 	beq.w	801be28 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801bb40:	4b69      	ldr	r3, [pc, #420]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	681b      	ldr	r3, [r3, #0]
 801bb46:	4798      	blx	r3
        break;
 801bb48:	e16e      	b.n	801be28 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801bb4a:	4868      	ldr	r0, [pc, #416]	; (801bcec <RadioIrqProcess+0x2bc>)
 801bb4c:	f002 ffa2 	bl	801ea94 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801bb50:	4b63      	ldr	r3, [pc, #396]	; (801bce0 <RadioIrqProcess+0x2b0>)
 801bb52:	785b      	ldrb	r3, [r3, #1]
 801bb54:	f083 0301 	eor.w	r3, r3, #1
 801bb58:	b2db      	uxtb	r3, r3
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	d014      	beq.n	801bb88 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801bb5e:	2000      	movs	r0, #0
 801bb60:	f000 fff8 	bl	801cb54 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801bb64:	2100      	movs	r1, #0
 801bb66:	f640 1002 	movw	r0, #2306	; 0x902
 801bb6a:	f001 fd77 	bl	801d65c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801bb6e:	f640 1044 	movw	r0, #2372	; 0x944
 801bb72:	f001 fd87 	bl	801d684 <SUBGRF_ReadRegister>
 801bb76:	4603      	mov	r3, r0
 801bb78:	f043 0302 	orr.w	r3, r3, #2
 801bb7c:	b2db      	uxtb	r3, r3
 801bb7e:	4619      	mov	r1, r3
 801bb80:	f640 1044 	movw	r0, #2372	; 0x944
 801bb84:	f001 fd6a 	bl	801d65c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801bb88:	1dfb      	adds	r3, r7, #7
 801bb8a:	22ff      	movs	r2, #255	; 0xff
 801bb8c:	4619      	mov	r1, r3
 801bb8e:	4858      	ldr	r0, [pc, #352]	; (801bcf0 <RadioIrqProcess+0x2c0>)
 801bb90:	f000 feb0 	bl	801c8f4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801bb94:	4857      	ldr	r0, [pc, #348]	; (801bcf4 <RadioIrqProcess+0x2c4>)
 801bb96:	f001 fd0f 	bl	801d5b8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801bb9a:	4b53      	ldr	r3, [pc, #332]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	f000 8144 	beq.w	801be2c <RadioIrqProcess+0x3fc>
 801bba4:	4b50      	ldr	r3, [pc, #320]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bba6:	681b      	ldr	r3, [r3, #0]
 801bba8:	689b      	ldr	r3, [r3, #8]
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	f000 813e 	beq.w	801be2c <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801bbb0:	4b4b      	ldr	r3, [pc, #300]	; (801bce0 <RadioIrqProcess+0x2b0>)
 801bbb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801bbb6:	2b01      	cmp	r3, #1
 801bbb8:	d10e      	bne.n	801bbd8 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801bbba:	4b4b      	ldr	r3, [pc, #300]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bbbc:	681b      	ldr	r3, [r3, #0]
 801bbbe:	689c      	ldr	r4, [r3, #8]
 801bbc0:	79fb      	ldrb	r3, [r7, #7]
 801bbc2:	b299      	uxth	r1, r3
 801bbc4:	4b46      	ldr	r3, [pc, #280]	; (801bce0 <RadioIrqProcess+0x2b0>)
 801bbc6:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801bbca:	b21a      	sxth	r2, r3
 801bbcc:	4b44      	ldr	r3, [pc, #272]	; (801bce0 <RadioIrqProcess+0x2b0>)
 801bbce:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801bbd2:	4847      	ldr	r0, [pc, #284]	; (801bcf0 <RadioIrqProcess+0x2c0>)
 801bbd4:	47a0      	blx	r4
                break;
 801bbd6:	e01d      	b.n	801bc14 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801bbd8:	4b41      	ldr	r3, [pc, #260]	; (801bce0 <RadioIrqProcess+0x2b0>)
 801bbda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bbdc:	463a      	mov	r2, r7
 801bbde:	4611      	mov	r1, r2
 801bbe0:	4618      	mov	r0, r3
 801bbe2:	f001 ff7d 	bl	801dae0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801bbe6:	4b40      	ldr	r3, [pc, #256]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	689c      	ldr	r4, [r3, #8]
 801bbec:	79fb      	ldrb	r3, [r7, #7]
 801bbee:	b299      	uxth	r1, r3
 801bbf0:	4b3b      	ldr	r3, [pc, #236]	; (801bce0 <RadioIrqProcess+0x2b0>)
 801bbf2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801bbf6:	b218      	sxth	r0, r3
 801bbf8:	683b      	ldr	r3, [r7, #0]
 801bbfa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801bbfe:	4a3e      	ldr	r2, [pc, #248]	; (801bcf8 <RadioIrqProcess+0x2c8>)
 801bc00:	fb82 5203 	smull	r5, r2, r2, r3
 801bc04:	1192      	asrs	r2, r2, #6
 801bc06:	17db      	asrs	r3, r3, #31
 801bc08:	1ad3      	subs	r3, r2, r3
 801bc0a:	b25b      	sxtb	r3, r3
 801bc0c:	4602      	mov	r2, r0
 801bc0e:	4838      	ldr	r0, [pc, #224]	; (801bcf0 <RadioIrqProcess+0x2c0>)
 801bc10:	47a0      	blx	r4
                break;
 801bc12:	bf00      	nop
        break;
 801bc14:	e10a      	b.n	801be2c <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801bc16:	2000      	movs	r0, #0
 801bc18:	f000 ff9c 	bl	801cb54 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801bc1c:	4b32      	ldr	r3, [pc, #200]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bc1e:	681b      	ldr	r3, [r3, #0]
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	f000 8105 	beq.w	801be30 <RadioIrqProcess+0x400>
 801bc26:	4b30      	ldr	r3, [pc, #192]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bc28:	681b      	ldr	r3, [r3, #0]
 801bc2a:	699b      	ldr	r3, [r3, #24]
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	f000 80ff 	beq.w	801be30 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801bc32:	4b2d      	ldr	r3, [pc, #180]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bc34:	681b      	ldr	r3, [r3, #0]
 801bc36:	699b      	ldr	r3, [r3, #24]
 801bc38:	2000      	movs	r0, #0
 801bc3a:	4798      	blx	r3
        break;
 801bc3c:	e0f8      	b.n	801be30 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801bc3e:	2000      	movs	r0, #0
 801bc40:	f000 ff88 	bl	801cb54 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801bc44:	4b28      	ldr	r3, [pc, #160]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bc46:	681b      	ldr	r3, [r3, #0]
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	f000 80f3 	beq.w	801be34 <RadioIrqProcess+0x404>
 801bc4e:	4b26      	ldr	r3, [pc, #152]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	699b      	ldr	r3, [r3, #24]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	f000 80ed 	beq.w	801be34 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801bc5a:	4b23      	ldr	r3, [pc, #140]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	699b      	ldr	r3, [r3, #24]
 801bc60:	2001      	movs	r0, #1
 801bc62:	4798      	blx	r3
        break;
 801bc64:	e0e6      	b.n	801be34 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801bc66:	4b25      	ldr	r3, [pc, #148]	; (801bcfc <RadioIrqProcess+0x2cc>)
 801bc68:	2201      	movs	r2, #1
 801bc6a:	2100      	movs	r1, #0
 801bc6c:	2002      	movs	r0, #2
 801bc6e:	f003 f91b 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801bc72:	f000 fe25 	bl	801c8c0 <SUBGRF_GetOperatingMode>
 801bc76:	4603      	mov	r3, r0
 801bc78:	2b04      	cmp	r3, #4
 801bc7a:	d115      	bne.n	801bca8 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801bc7c:	4819      	ldr	r0, [pc, #100]	; (801bce4 <RadioIrqProcess+0x2b4>)
 801bc7e:	f002 ff09 	bl	801ea94 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801bc82:	2000      	movs	r0, #0
 801bc84:	f000 ff66 	bl	801cb54 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801bc88:	4b17      	ldr	r3, [pc, #92]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	f000 80d3 	beq.w	801be38 <RadioIrqProcess+0x408>
 801bc92:	4b15      	ldr	r3, [pc, #84]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bc94:	681b      	ldr	r3, [r3, #0]
 801bc96:	685b      	ldr	r3, [r3, #4]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	f000 80cd 	beq.w	801be38 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801bc9e:	4b12      	ldr	r3, [pc, #72]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	685b      	ldr	r3, [r3, #4]
 801bca4:	4798      	blx	r3
        break;
 801bca6:	e0c7      	b.n	801be38 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801bca8:	f000 fe0a 	bl	801c8c0 <SUBGRF_GetOperatingMode>
 801bcac:	4603      	mov	r3, r0
 801bcae:	2b05      	cmp	r3, #5
 801bcb0:	f040 80c2 	bne.w	801be38 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801bcb4:	480d      	ldr	r0, [pc, #52]	; (801bcec <RadioIrqProcess+0x2bc>)
 801bcb6:	f002 feed 	bl	801ea94 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801bcba:	2000      	movs	r0, #0
 801bcbc:	f000 ff4a 	bl	801cb54 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801bcc0:	4b09      	ldr	r3, [pc, #36]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	f000 80b7 	beq.w	801be38 <RadioIrqProcess+0x408>
 801bcca:	4b07      	ldr	r3, [pc, #28]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bccc:	681b      	ldr	r3, [r3, #0]
 801bcce:	68db      	ldr	r3, [r3, #12]
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	f000 80b1 	beq.w	801be38 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801bcd6:	4b04      	ldr	r3, [pc, #16]	; (801bce8 <RadioIrqProcess+0x2b8>)
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	68db      	ldr	r3, [r3, #12]
 801bcdc:	4798      	blx	r3
        break;
 801bcde:	e0ab      	b.n	801be38 <RadioIrqProcess+0x408>
 801bce0:	20001cf0 	.word	0x20001cf0
 801bce4:	20001d4c 	.word	0x20001d4c
 801bce8:	20001cec 	.word	0x20001cec
 801bcec:	20001d64 	.word	0x20001d64
 801bcf0:	20001bec 	.word	0x20001bec
 801bcf4:	20001d14 	.word	0x20001d14
 801bcf8:	10624dd3 	.word	0x10624dd3
 801bcfc:	0801fe20 	.word	0x0801fe20
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801bd00:	4b54      	ldr	r3, [pc, #336]	; (801be54 <RadioIrqProcess+0x424>)
 801bd02:	2201      	movs	r2, #1
 801bd04:	2100      	movs	r1, #0
 801bd06:	2002      	movs	r0, #2
 801bd08:	f003 f8ce 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801bd0c:	4b52      	ldr	r3, [pc, #328]	; (801be58 <RadioIrqProcess+0x428>)
 801bd0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	f000 8093 	beq.w	801be3c <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801bd16:	4a51      	ldr	r2, [pc, #324]	; (801be5c <RadioIrqProcess+0x42c>)
 801bd18:	4b4f      	ldr	r3, [pc, #316]	; (801be58 <RadioIrqProcess+0x428>)
 801bd1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bd1c:	0c1b      	lsrs	r3, r3, #16
 801bd1e:	b2db      	uxtb	r3, r3
 801bd20:	4619      	mov	r1, r3
 801bd22:	f640 1003 	movw	r0, #2307	; 0x903
 801bd26:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801bd28:	4a4c      	ldr	r2, [pc, #304]	; (801be5c <RadioIrqProcess+0x42c>)
 801bd2a:	4b4b      	ldr	r3, [pc, #300]	; (801be58 <RadioIrqProcess+0x428>)
 801bd2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bd2e:	0a1b      	lsrs	r3, r3, #8
 801bd30:	b2db      	uxtb	r3, r3
 801bd32:	4619      	mov	r1, r3
 801bd34:	f640 1004 	movw	r0, #2308	; 0x904
 801bd38:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801bd3a:	4a48      	ldr	r2, [pc, #288]	; (801be5c <RadioIrqProcess+0x42c>)
 801bd3c:	4b46      	ldr	r3, [pc, #280]	; (801be58 <RadioIrqProcess+0x428>)
 801bd3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bd40:	b2db      	uxtb	r3, r3
 801bd42:	4619      	mov	r1, r3
 801bd44:	f640 1005 	movw	r0, #2309	; 0x905
 801bd48:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801bd4a:	4c44      	ldr	r4, [pc, #272]	; (801be5c <RadioIrqProcess+0x42c>)
 801bd4c:	4b44      	ldr	r3, [pc, #272]	; (801be60 <RadioIrqProcess+0x430>)
 801bd4e:	f640 1002 	movw	r0, #2306	; 0x902
 801bd52:	4798      	blx	r3
 801bd54:	4603      	mov	r3, r0
 801bd56:	f043 0301 	orr.w	r3, r3, #1
 801bd5a:	b2db      	uxtb	r3, r3
 801bd5c:	4619      	mov	r1, r3
 801bd5e:	f640 1002 	movw	r0, #2306	; 0x902
 801bd62:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801bd64:	4b3c      	ldr	r3, [pc, #240]	; (801be58 <RadioIrqProcess+0x428>)
 801bd66:	2200      	movs	r2, #0
 801bd68:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801bd6a:	2300      	movs	r3, #0
 801bd6c:	2200      	movs	r2, #0
 801bd6e:	f240 2162 	movw	r1, #610	; 0x262
 801bd72:	f240 2062 	movw	r0, #610	; 0x262
 801bd76:	f001 f8c1 	bl	801cefc <SUBGRF_SetDioIrqParams>
        break;
 801bd7a:	e05f      	b.n	801be3c <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801bd7c:	4b39      	ldr	r3, [pc, #228]	; (801be64 <RadioIrqProcess+0x434>)
 801bd7e:	2201      	movs	r2, #1
 801bd80:	2100      	movs	r1, #0
 801bd82:	2002      	movs	r0, #2
 801bd84:	f003 f890 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801bd88:	f001 ff55 	bl	801dc36 <RFW_Is_Init>
 801bd8c:	4603      	mov	r3, r0
 801bd8e:	2b01      	cmp	r3, #1
 801bd90:	d156      	bne.n	801be40 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801bd92:	f001 ff86 	bl	801dca2 <RFW_ReceivePayload>
        break;
 801bd96:	e053      	b.n	801be40 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801bd98:	4b33      	ldr	r3, [pc, #204]	; (801be68 <RadioIrqProcess+0x438>)
 801bd9a:	2201      	movs	r2, #1
 801bd9c:	2100      	movs	r1, #0
 801bd9e:	2002      	movs	r0, #2
 801bda0:	f003 f882 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801bda4:	e051      	b.n	801be4a <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801bda6:	4831      	ldr	r0, [pc, #196]	; (801be6c <RadioIrqProcess+0x43c>)
 801bda8:	f002 fe74 	bl	801ea94 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801bdac:	4b2a      	ldr	r3, [pc, #168]	; (801be58 <RadioIrqProcess+0x428>)
 801bdae:	785b      	ldrb	r3, [r3, #1]
 801bdb0:	f083 0301 	eor.w	r3, r3, #1
 801bdb4:	b2db      	uxtb	r3, r3
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d002      	beq.n	801bdc0 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801bdba:	2000      	movs	r0, #0
 801bdbc:	f000 feca 	bl	801cb54 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801bdc0:	4b2b      	ldr	r3, [pc, #172]	; (801be70 <RadioIrqProcess+0x440>)
 801bdc2:	681b      	ldr	r3, [r3, #0]
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d03d      	beq.n	801be44 <RadioIrqProcess+0x414>
 801bdc8:	4b29      	ldr	r3, [pc, #164]	; (801be70 <RadioIrqProcess+0x440>)
 801bdca:	681b      	ldr	r3, [r3, #0]
 801bdcc:	68db      	ldr	r3, [r3, #12]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d038      	beq.n	801be44 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801bdd2:	4b27      	ldr	r3, [pc, #156]	; (801be70 <RadioIrqProcess+0x440>)
 801bdd4:	681b      	ldr	r3, [r3, #0]
 801bdd6:	68db      	ldr	r3, [r3, #12]
 801bdd8:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801bdda:	4b26      	ldr	r3, [pc, #152]	; (801be74 <RadioIrqProcess+0x444>)
 801bddc:	2201      	movs	r2, #1
 801bdde:	2100      	movs	r1, #0
 801bde0:	2002      	movs	r0, #2
 801bde2:	f003 f861 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801bde6:	e02d      	b.n	801be44 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801bde8:	4b23      	ldr	r3, [pc, #140]	; (801be78 <RadioIrqProcess+0x448>)
 801bdea:	2201      	movs	r2, #1
 801bdec:	2100      	movs	r1, #0
 801bdee:	2002      	movs	r0, #2
 801bdf0:	f003 f85a 	bl	801eea8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801bdf4:	4b18      	ldr	r3, [pc, #96]	; (801be58 <RadioIrqProcess+0x428>)
 801bdf6:	785b      	ldrb	r3, [r3, #1]
 801bdf8:	f083 0301 	eor.w	r3, r3, #1
 801bdfc:	b2db      	uxtb	r3, r3
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d002      	beq.n	801be08 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801be02:	2000      	movs	r0, #0
 801be04:	f000 fea6 	bl	801cb54 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801be08:	4b19      	ldr	r3, [pc, #100]	; (801be70 <RadioIrqProcess+0x440>)
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d01b      	beq.n	801be48 <RadioIrqProcess+0x418>
 801be10:	4b17      	ldr	r3, [pc, #92]	; (801be70 <RadioIrqProcess+0x440>)
 801be12:	681b      	ldr	r3, [r3, #0]
 801be14:	691b      	ldr	r3, [r3, #16]
 801be16:	2b00      	cmp	r3, #0
 801be18:	d016      	beq.n	801be48 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801be1a:	4b15      	ldr	r3, [pc, #84]	; (801be70 <RadioIrqProcess+0x440>)
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	691b      	ldr	r3, [r3, #16]
 801be20:	4798      	blx	r3
        break;
 801be22:	e011      	b.n	801be48 <RadioIrqProcess+0x418>
        break;
 801be24:	bf00      	nop
 801be26:	e010      	b.n	801be4a <RadioIrqProcess+0x41a>
        break;
 801be28:	bf00      	nop
 801be2a:	e00e      	b.n	801be4a <RadioIrqProcess+0x41a>
        break;
 801be2c:	bf00      	nop
 801be2e:	e00c      	b.n	801be4a <RadioIrqProcess+0x41a>
        break;
 801be30:	bf00      	nop
 801be32:	e00a      	b.n	801be4a <RadioIrqProcess+0x41a>
        break;
 801be34:	bf00      	nop
 801be36:	e008      	b.n	801be4a <RadioIrqProcess+0x41a>
        break;
 801be38:	bf00      	nop
 801be3a:	e006      	b.n	801be4a <RadioIrqProcess+0x41a>
        break;
 801be3c:	bf00      	nop
 801be3e:	e004      	b.n	801be4a <RadioIrqProcess+0x41a>
        break;
 801be40:	bf00      	nop
 801be42:	e002      	b.n	801be4a <RadioIrqProcess+0x41a>
        break;
 801be44:	bf00      	nop
 801be46:	e000      	b.n	801be4a <RadioIrqProcess+0x41a>
        break;
 801be48:	bf00      	nop
    }
}
 801be4a:	bf00      	nop
 801be4c:	3708      	adds	r7, #8
 801be4e:	46bd      	mov	sp, r7
 801be50:	bdb0      	pop	{r4, r5, r7, pc}
 801be52:	bf00      	nop
 801be54:	0801fe34 	.word	0x0801fe34
 801be58:	20001cf0 	.word	0x20001cf0
 801be5c:	0801b83f 	.word	0x0801b83f
 801be60:	0801b863 	.word	0x0801b863
 801be64:	0801fe40 	.word	0x0801fe40
 801be68:	0801fe4c 	.word	0x0801fe4c
 801be6c:	20001d64 	.word	0x20001d64
 801be70:	20001cec 	.word	0x20001cec
 801be74:	0801fe58 	.word	0x0801fe58
 801be78:	0801fe64 	.word	0x0801fe64

0801be7c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801be7c:	b580      	push	{r7, lr}
 801be7e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801be80:	4b09      	ldr	r3, [pc, #36]	; (801bea8 <RadioTxPrbs+0x2c>)
 801be82:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801be86:	2101      	movs	r1, #1
 801be88:	4618      	mov	r0, r3
 801be8a:	f001 fcdb 	bl	801d844 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801be8e:	4b07      	ldr	r3, [pc, #28]	; (801beac <RadioTxPrbs+0x30>)
 801be90:	212d      	movs	r1, #45	; 0x2d
 801be92:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801be96:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801be98:	f000 ff1f 	bl	801ccda <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801be9c:	4804      	ldr	r0, [pc, #16]	; (801beb0 <RadioTxPrbs+0x34>)
 801be9e:	f000 fe75 	bl	801cb8c <SUBGRF_SetTx>
}
 801bea2:	bf00      	nop
 801bea4:	bd80      	pop	{r7, pc}
 801bea6:	bf00      	nop
 801bea8:	20001cf0 	.word	0x20001cf0
 801beac:	0801b83f 	.word	0x0801b83f
 801beb0:	000fffff 	.word	0x000fffff

0801beb4 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801beb4:	b580      	push	{r7, lr}
 801beb6:	b084      	sub	sp, #16
 801beb8:	af00      	add	r7, sp, #0
 801beba:	4603      	mov	r3, r0
 801bebc:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801bebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bec2:	4618      	mov	r0, r3
 801bec4:	f001 fce6 	bl	801d894 <SUBGRF_SetRfTxPower>
 801bec8:	4603      	mov	r3, r0
 801beca:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801becc:	210e      	movs	r1, #14
 801bece:	f640 101f 	movw	r0, #2335	; 0x91f
 801bed2:	f001 fbc3 	bl	801d65c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801bed6:	7bfb      	ldrb	r3, [r7, #15]
 801bed8:	2101      	movs	r1, #1
 801beda:	4618      	mov	r0, r3
 801bedc:	f001 fcb2 	bl	801d844 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801bee0:	f000 fef2 	bl	801ccc8 <SUBGRF_SetTxContinuousWave>
}
 801bee4:	bf00      	nop
 801bee6:	3710      	adds	r7, #16
 801bee8:	46bd      	mov	sp, r7
 801beea:	bd80      	pop	{r7, pc}

0801beec <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801beec:	b480      	push	{r7}
 801beee:	b089      	sub	sp, #36	; 0x24
 801bef0:	af00      	add	r7, sp, #0
 801bef2:	60f8      	str	r0, [r7, #12]
 801bef4:	60b9      	str	r1, [r7, #8]
 801bef6:	4613      	mov	r3, r2
 801bef8:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801befa:	2300      	movs	r3, #0
 801befc:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801befe:	2300      	movs	r3, #0
 801bf00:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801bf02:	2300      	movs	r3, #0
 801bf04:	61bb      	str	r3, [r7, #24]
 801bf06:	e011      	b.n	801bf2c <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801bf08:	69bb      	ldr	r3, [r7, #24]
 801bf0a:	68ba      	ldr	r2, [r7, #8]
 801bf0c:	4413      	add	r3, r2
 801bf0e:	781a      	ldrb	r2, [r3, #0]
 801bf10:	69bb      	ldr	r3, [r7, #24]
 801bf12:	68b9      	ldr	r1, [r7, #8]
 801bf14:	440b      	add	r3, r1
 801bf16:	43d2      	mvns	r2, r2
 801bf18:	b2d2      	uxtb	r2, r2
 801bf1a:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801bf1c:	69bb      	ldr	r3, [r7, #24]
 801bf1e:	68fa      	ldr	r2, [r7, #12]
 801bf20:	4413      	add	r3, r2
 801bf22:	2200      	movs	r2, #0
 801bf24:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801bf26:	69bb      	ldr	r3, [r7, #24]
 801bf28:	3301      	adds	r3, #1
 801bf2a:	61bb      	str	r3, [r7, #24]
 801bf2c:	79fb      	ldrb	r3, [r7, #7]
 801bf2e:	69ba      	ldr	r2, [r7, #24]
 801bf30:	429a      	cmp	r2, r3
 801bf32:	dbe9      	blt.n	801bf08 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801bf34:	2300      	movs	r3, #0
 801bf36:	61bb      	str	r3, [r7, #24]
 801bf38:	e049      	b.n	801bfce <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801bf3a:	69bb      	ldr	r3, [r7, #24]
 801bf3c:	425a      	negs	r2, r3
 801bf3e:	f003 0307 	and.w	r3, r3, #7
 801bf42:	f002 0207 	and.w	r2, r2, #7
 801bf46:	bf58      	it	pl
 801bf48:	4253      	negpl	r3, r2
 801bf4a:	b2db      	uxtb	r3, r3
 801bf4c:	f1c3 0307 	rsb	r3, r3, #7
 801bf50:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801bf52:	69bb      	ldr	r3, [r7, #24]
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	da00      	bge.n	801bf5a <payload_integration+0x6e>
 801bf58:	3307      	adds	r3, #7
 801bf5a:	10db      	asrs	r3, r3, #3
 801bf5c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801bf5e:	69bb      	ldr	r3, [r7, #24]
 801bf60:	3301      	adds	r3, #1
 801bf62:	425a      	negs	r2, r3
 801bf64:	f003 0307 	and.w	r3, r3, #7
 801bf68:	f002 0207 	and.w	r2, r2, #7
 801bf6c:	bf58      	it	pl
 801bf6e:	4253      	negpl	r3, r2
 801bf70:	b2db      	uxtb	r3, r3
 801bf72:	f1c3 0307 	rsb	r3, r3, #7
 801bf76:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801bf78:	69bb      	ldr	r3, [r7, #24]
 801bf7a:	3301      	adds	r3, #1
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	da00      	bge.n	801bf82 <payload_integration+0x96>
 801bf80:	3307      	adds	r3, #7
 801bf82:	10db      	asrs	r3, r3, #3
 801bf84:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801bf86:	7dbb      	ldrb	r3, [r7, #22]
 801bf88:	68ba      	ldr	r2, [r7, #8]
 801bf8a:	4413      	add	r3, r2
 801bf8c:	781b      	ldrb	r3, [r3, #0]
 801bf8e:	461a      	mov	r2, r3
 801bf90:	7dfb      	ldrb	r3, [r7, #23]
 801bf92:	fa42 f303 	asr.w	r3, r2, r3
 801bf96:	b2db      	uxtb	r3, r3
 801bf98:	f003 0301 	and.w	r3, r3, #1
 801bf9c:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801bf9e:	7ffa      	ldrb	r2, [r7, #31]
 801bfa0:	7cfb      	ldrb	r3, [r7, #19]
 801bfa2:	4053      	eors	r3, r2
 801bfa4:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801bfa6:	7d3b      	ldrb	r3, [r7, #20]
 801bfa8:	68fa      	ldr	r2, [r7, #12]
 801bfaa:	4413      	add	r3, r2
 801bfac:	781b      	ldrb	r3, [r3, #0]
 801bfae:	b25a      	sxtb	r2, r3
 801bfb0:	7ff9      	ldrb	r1, [r7, #31]
 801bfb2:	7d7b      	ldrb	r3, [r7, #21]
 801bfb4:	fa01 f303 	lsl.w	r3, r1, r3
 801bfb8:	b25b      	sxtb	r3, r3
 801bfba:	4313      	orrs	r3, r2
 801bfbc:	b259      	sxtb	r1, r3
 801bfbe:	7d3b      	ldrb	r3, [r7, #20]
 801bfc0:	68fa      	ldr	r2, [r7, #12]
 801bfc2:	4413      	add	r3, r2
 801bfc4:	b2ca      	uxtb	r2, r1
 801bfc6:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801bfc8:	69bb      	ldr	r3, [r7, #24]
 801bfca:	3301      	adds	r3, #1
 801bfcc:	61bb      	str	r3, [r7, #24]
 801bfce:	79fb      	ldrb	r3, [r7, #7]
 801bfd0:	00db      	lsls	r3, r3, #3
 801bfd2:	69ba      	ldr	r2, [r7, #24]
 801bfd4:	429a      	cmp	r2, r3
 801bfd6:	dbb0      	blt.n	801bf3a <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801bfd8:	7ffb      	ldrb	r3, [r7, #31]
 801bfda:	01db      	lsls	r3, r3, #7
 801bfdc:	b25a      	sxtb	r2, r3
 801bfde:	7ffb      	ldrb	r3, [r7, #31]
 801bfe0:	019b      	lsls	r3, r3, #6
 801bfe2:	b25b      	sxtb	r3, r3
 801bfe4:	4313      	orrs	r3, r2
 801bfe6:	b25b      	sxtb	r3, r3
 801bfe8:	7ffa      	ldrb	r2, [r7, #31]
 801bfea:	2a00      	cmp	r2, #0
 801bfec:	d101      	bne.n	801bff2 <payload_integration+0x106>
 801bfee:	2220      	movs	r2, #32
 801bff0:	e000      	b.n	801bff4 <payload_integration+0x108>
 801bff2:	2200      	movs	r2, #0
 801bff4:	4313      	orrs	r3, r2
 801bff6:	b259      	sxtb	r1, r3
 801bff8:	79fb      	ldrb	r3, [r7, #7]
 801bffa:	68fa      	ldr	r2, [r7, #12]
 801bffc:	4413      	add	r3, r2
 801bffe:	b2ca      	uxtb	r2, r1
 801c000:	701a      	strb	r2, [r3, #0]
}
 801c002:	bf00      	nop
 801c004:	3724      	adds	r7, #36	; 0x24
 801c006:	46bd      	mov	sp, r7
 801c008:	bc80      	pop	{r7}
 801c00a:	4770      	bx	lr

0801c00c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801c00c:	b580      	push	{r7, lr}
 801c00e:	b08c      	sub	sp, #48	; 0x30
 801c010:	af00      	add	r7, sp, #0
 801c012:	60b9      	str	r1, [r7, #8]
 801c014:	607a      	str	r2, [r7, #4]
 801c016:	603b      	str	r3, [r7, #0]
 801c018:	4603      	mov	r3, r0
 801c01a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801c01c:	2300      	movs	r3, #0
 801c01e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801c020:	2300      	movs	r3, #0
 801c022:	623b      	str	r3, [r7, #32]
 801c024:	2300      	movs	r3, #0
 801c026:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801c028:	f001 fdff 	bl	801dc2a <RFW_DeInit>

    if( rxContinuous != 0 )
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d001      	beq.n	801c036 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801c032:	2300      	movs	r3, #0
 801c034:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	2b00      	cmp	r3, #0
 801c03a:	bf14      	ite	ne
 801c03c:	2301      	movne	r3, #1
 801c03e:	2300      	moveq	r3, #0
 801c040:	b2da      	uxtb	r2, r3
 801c042:	4ba3      	ldr	r3, [pc, #652]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c044:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801c046:	7bfb      	ldrb	r3, [r7, #15]
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d003      	beq.n	801c054 <RadioSetRxGenericConfig+0x48>
 801c04c:	2b01      	cmp	r3, #1
 801c04e:	f000 80dc 	beq.w	801c20a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801c052:	e194      	b.n	801c37e <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801c054:	68bb      	ldr	r3, [r7, #8]
 801c056:	689b      	ldr	r3, [r3, #8]
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d003      	beq.n	801c064 <RadioSetRxGenericConfig+0x58>
 801c05c:	68bb      	ldr	r3, [r7, #8]
 801c05e:	68db      	ldr	r3, [r3, #12]
 801c060:	2b00      	cmp	r3, #0
 801c062:	d102      	bne.n	801c06a <RadioSetRxGenericConfig+0x5e>
            return -1;
 801c064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c068:	e18a      	b.n	801c380 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801c06a:	68bb      	ldr	r3, [r7, #8]
 801c06c:	7f9b      	ldrb	r3, [r3, #30]
 801c06e:	2b08      	cmp	r3, #8
 801c070:	d902      	bls.n	801c078 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801c072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c076:	e183      	b.n	801c380 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801c078:	68bb      	ldr	r3, [r7, #8]
 801c07a:	6919      	ldr	r1, [r3, #16]
 801c07c:	68bb      	ldr	r3, [r7, #8]
 801c07e:	7f9b      	ldrb	r3, [r3, #30]
 801c080:	b29a      	uxth	r2, r3
 801c082:	f107 0320 	add.w	r3, r7, #32
 801c086:	4618      	mov	r0, r3
 801c088:	f001 fec2 	bl	801de10 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801c08c:	68bb      	ldr	r3, [r7, #8]
 801c08e:	681b      	ldr	r3, [r3, #0]
 801c090:	2b00      	cmp	r3, #0
 801c092:	bf14      	ite	ne
 801c094:	2301      	movne	r3, #1
 801c096:	2300      	moveq	r3, #0
 801c098:	b2db      	uxtb	r3, r3
 801c09a:	4618      	mov	r0, r3
 801c09c:	f000 fe26 	bl	801ccec <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801c0a0:	4b8b      	ldr	r3, [pc, #556]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c0a2:	2200      	movs	r2, #0
 801c0a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801c0a8:	68bb      	ldr	r3, [r7, #8]
 801c0aa:	689b      	ldr	r3, [r3, #8]
 801c0ac:	4a88      	ldr	r2, [pc, #544]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c0ae:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801c0b0:	68bb      	ldr	r3, [r7, #8]
 801c0b2:	f893 2020 	ldrb.w	r2, [r3, #32]
 801c0b6:	4b86      	ldr	r3, [pc, #536]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c0b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801c0bc:	68bb      	ldr	r3, [r7, #8]
 801c0be:	685b      	ldr	r3, [r3, #4]
 801c0c0:	4618      	mov	r0, r3
 801c0c2:	f001 fce5 	bl	801da90 <SUBGRF_GetFskBandwidthRegValue>
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	461a      	mov	r2, r3
 801c0ca:	4b81      	ldr	r3, [pc, #516]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c0cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801c0d0:	4b7f      	ldr	r3, [pc, #508]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801c0d6:	68bb      	ldr	r3, [r7, #8]
 801c0d8:	68db      	ldr	r3, [r3, #12]
 801c0da:	b29b      	uxth	r3, r3
 801c0dc:	00db      	lsls	r3, r3, #3
 801c0de:	b29a      	uxth	r2, r3
 801c0e0:	4b7b      	ldr	r3, [pc, #492]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c0e2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801c0e4:	68bb      	ldr	r3, [r7, #8]
 801c0e6:	7fda      	ldrb	r2, [r3, #31]
 801c0e8:	4b79      	ldr	r3, [pc, #484]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c0ea:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801c0ec:	68bb      	ldr	r3, [r7, #8]
 801c0ee:	7f9b      	ldrb	r3, [r3, #30]
 801c0f0:	00db      	lsls	r3, r3, #3
 801c0f2:	b2da      	uxtb	r2, r3
 801c0f4:	4b76      	ldr	r3, [pc, #472]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c0f6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801c0f8:	68bb      	ldr	r3, [r7, #8]
 801c0fa:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801c0fe:	4b74      	ldr	r3, [pc, #464]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c100:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801c102:	68bb      	ldr	r3, [r7, #8]
 801c104:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801c108:	2b00      	cmp	r3, #0
 801c10a:	d105      	bne.n	801c118 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801c10c:	68bb      	ldr	r3, [r7, #8]
 801c10e:	695b      	ldr	r3, [r3, #20]
 801c110:	b2da      	uxtb	r2, r3
 801c112:	4b6f      	ldr	r3, [pc, #444]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c114:	759a      	strb	r2, [r3, #22]
 801c116:	e00b      	b.n	801c130 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801c118:	68bb      	ldr	r3, [r7, #8]
 801c11a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801c11e:	2b02      	cmp	r3, #2
 801c120:	d103      	bne.n	801c12a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801c122:	4b6b      	ldr	r3, [pc, #428]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c124:	22ff      	movs	r2, #255	; 0xff
 801c126:	759a      	strb	r2, [r3, #22]
 801c128:	e002      	b.n	801c130 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801c12a:	4b69      	ldr	r3, [pc, #420]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c12c:	22ff      	movs	r2, #255	; 0xff
 801c12e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801c130:	68bb      	ldr	r3, [r7, #8]
 801c132:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c136:	2b02      	cmp	r3, #2
 801c138:	d004      	beq.n	801c144 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801c13a:	68bb      	ldr	r3, [r7, #8]
 801c13c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801c140:	2b02      	cmp	r3, #2
 801c142:	d12d      	bne.n	801c1a0 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801c144:	68bb      	ldr	r3, [r7, #8]
 801c146:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801c14a:	2bf1      	cmp	r3, #241	; 0xf1
 801c14c:	d00c      	beq.n	801c168 <RadioSetRxGenericConfig+0x15c>
 801c14e:	68bb      	ldr	r3, [r7, #8]
 801c150:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801c154:	2bf2      	cmp	r3, #242	; 0xf2
 801c156:	d007      	beq.n	801c168 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801c158:	68bb      	ldr	r3, [r7, #8]
 801c15a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801c15e:	2b01      	cmp	r3, #1
 801c160:	d002      	beq.n	801c168 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801c162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c166:	e10b      	b.n	801c380 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801c168:	2300      	movs	r3, #0
 801c16a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801c16c:	68bb      	ldr	r3, [r7, #8]
 801c16e:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801c170:	4b58      	ldr	r3, [pc, #352]	; (801c2d4 <RadioSetRxGenericConfig+0x2c8>)
 801c172:	6819      	ldr	r1, [r3, #0]
 801c174:	f107 0314 	add.w	r3, r7, #20
 801c178:	4a57      	ldr	r2, [pc, #348]	; (801c2d8 <RadioSetRxGenericConfig+0x2cc>)
 801c17a:	4618      	mov	r0, r3
 801c17c:	f001 fd48 	bl	801dc10 <RFW_Init>
 801c180:	4603      	mov	r3, r0
 801c182:	2b00      	cmp	r3, #0
 801c184:	d002      	beq.n	801c18c <RadioSetRxGenericConfig+0x180>
                return -1;
 801c186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c18a:	e0f9      	b.n	801c380 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801c18c:	4b50      	ldr	r3, [pc, #320]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c18e:	2200      	movs	r2, #0
 801c190:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801c192:	4b4f      	ldr	r3, [pc, #316]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c194:	2201      	movs	r2, #1
 801c196:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801c198:	4b4d      	ldr	r3, [pc, #308]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c19a:	2200      	movs	r2, #0
 801c19c:	755a      	strb	r2, [r3, #21]
        {
 801c19e:	e00e      	b.n	801c1be <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801c1a0:	68bb      	ldr	r3, [r7, #8]
 801c1a2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801c1a6:	4b4a      	ldr	r3, [pc, #296]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c1a8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801c1aa:	68bb      	ldr	r3, [r7, #8]
 801c1ac:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801c1b0:	4b47      	ldr	r3, [pc, #284]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c1b2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801c1b4:	68bb      	ldr	r3, [r7, #8]
 801c1b6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801c1ba:	4b45      	ldr	r3, [pc, #276]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c1bc:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801c1be:	f7ff fa3c 	bl	801b63a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801c1c2:	2000      	movs	r0, #0
 801c1c4:	f7fe fbd0 	bl	801a968 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c1c8:	4844      	ldr	r0, [pc, #272]	; (801c2dc <RadioSetRxGenericConfig+0x2d0>)
 801c1ca:	f001 f82d 	bl	801d228 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c1ce:	4844      	ldr	r0, [pc, #272]	; (801c2e0 <RadioSetRxGenericConfig+0x2d4>)
 801c1d0:	f001 f8fc 	bl	801d3cc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801c1d4:	f107 0320 	add.w	r3, r7, #32
 801c1d8:	4618      	mov	r0, r3
 801c1da:	f000 fbc0 	bl	801c95e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801c1de:	68bb      	ldr	r3, [r7, #8]
 801c1e0:	8b9b      	ldrh	r3, [r3, #28]
 801c1e2:	4618      	mov	r0, r3
 801c1e4:	f000 fc0a 	bl	801c9fc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801c1e8:	68bb      	ldr	r3, [r7, #8]
 801c1ea:	8b1b      	ldrh	r3, [r3, #24]
 801c1ec:	4618      	mov	r0, r3
 801c1ee:	f000 fbe5 	bl	801c9bc <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801c1f2:	683b      	ldr	r3, [r7, #0]
 801c1f4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801c1f8:	fb03 f202 	mul.w	r2, r3, r2
 801c1fc:	68bb      	ldr	r3, [r7, #8]
 801c1fe:	689b      	ldr	r3, [r3, #8]
 801c200:	fbb2 f3f3 	udiv	r3, r2, r3
 801c204:	4a32      	ldr	r2, [pc, #200]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c206:	6093      	str	r3, [r2, #8]
        break;
 801c208:	e0b9      	b.n	801c37e <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801c20a:	68bb      	ldr	r3, [r7, #8]
 801c20c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d102      	bne.n	801c218 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801c212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c216:	e0b3      	b.n	801c380 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801c218:	68bb      	ldr	r3, [r7, #8]
 801c21a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801c21e:	2b01      	cmp	r3, #1
 801c220:	d104      	bne.n	801c22c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801c222:	68bb      	ldr	r3, [r7, #8]
 801c224:	695b      	ldr	r3, [r3, #20]
 801c226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801c22a:	e002      	b.n	801c232 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801c22c:	23ff      	movs	r3, #255	; 0xff
 801c22e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801c232:	68bb      	ldr	r3, [r7, #8]
 801c234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c236:	2b00      	cmp	r3, #0
 801c238:	bf14      	ite	ne
 801c23a:	2301      	movne	r3, #1
 801c23c:	2300      	moveq	r3, #0
 801c23e:	b2db      	uxtb	r3, r3
 801c240:	4618      	mov	r0, r3
 801c242:	f000 fd53 	bl	801ccec <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801c246:	683b      	ldr	r3, [r7, #0]
 801c248:	b2db      	uxtb	r3, r3
 801c24a:	4618      	mov	r0, r3
 801c24c:	f000 fd5d 	bl	801cd0a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801c250:	4b1f      	ldr	r3, [pc, #124]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c252:	2201      	movs	r2, #1
 801c254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801c258:	68bb      	ldr	r3, [r7, #8]
 801c25a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801c25e:	4b1c      	ldr	r3, [pc, #112]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801c264:	68bb      	ldr	r3, [r7, #8]
 801c266:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801c26a:	4b19      	ldr	r3, [pc, #100]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c26c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801c270:	68bb      	ldr	r3, [r7, #8]
 801c272:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801c276:	4b16      	ldr	r3, [pc, #88]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c278:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801c27c:	68bb      	ldr	r3, [r7, #8]
 801c27e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801c282:	2b02      	cmp	r3, #2
 801c284:	d010      	beq.n	801c2a8 <RadioSetRxGenericConfig+0x29c>
 801c286:	2b02      	cmp	r3, #2
 801c288:	dc2c      	bgt.n	801c2e4 <RadioSetRxGenericConfig+0x2d8>
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d002      	beq.n	801c294 <RadioSetRxGenericConfig+0x288>
 801c28e:	2b01      	cmp	r3, #1
 801c290:	d005      	beq.n	801c29e <RadioSetRxGenericConfig+0x292>
            break;
 801c292:	e027      	b.n	801c2e4 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801c294:	4b0e      	ldr	r3, [pc, #56]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c296:	2200      	movs	r2, #0
 801c298:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c29c:	e023      	b.n	801c2e6 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801c29e:	4b0c      	ldr	r3, [pc, #48]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c2a0:	2201      	movs	r2, #1
 801c2a2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c2a6:	e01e      	b.n	801c2e6 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801c2a8:	68bb      	ldr	r3, [r7, #8]
 801c2aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c2ae:	2b0b      	cmp	r3, #11
 801c2b0:	d004      	beq.n	801c2bc <RadioSetRxGenericConfig+0x2b0>
 801c2b2:	68bb      	ldr	r3, [r7, #8]
 801c2b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c2b8:	2b0c      	cmp	r3, #12
 801c2ba:	d104      	bne.n	801c2c6 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801c2bc:	4b04      	ldr	r3, [pc, #16]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c2be:	2201      	movs	r2, #1
 801c2c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c2c4:	e00f      	b.n	801c2e6 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801c2c6:	4b02      	ldr	r3, [pc, #8]	; (801c2d0 <RadioSetRxGenericConfig+0x2c4>)
 801c2c8:	2200      	movs	r2, #0
 801c2ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c2ce:	e00a      	b.n	801c2e6 <RadioSetRxGenericConfig+0x2da>
 801c2d0:	20001cf0 	.word	0x20001cf0
 801c2d4:	20001cec 	.word	0x20001cec
 801c2d8:	20001d64 	.word	0x20001d64
 801c2dc:	20001d28 	.word	0x20001d28
 801c2e0:	20001cfe 	.word	0x20001cfe
            break;
 801c2e4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801c2e6:	4b28      	ldr	r3, [pc, #160]	; (801c388 <RadioSetRxGenericConfig+0x37c>)
 801c2e8:	2201      	movs	r2, #1
 801c2ea:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801c2ec:	68bb      	ldr	r3, [r7, #8]
 801c2ee:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801c2f0:	4b25      	ldr	r3, [pc, #148]	; (801c388 <RadioSetRxGenericConfig+0x37c>)
 801c2f2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801c2f4:	68bb      	ldr	r3, [r7, #8]
 801c2f6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801c2fa:	4b23      	ldr	r3, [pc, #140]	; (801c388 <RadioSetRxGenericConfig+0x37c>)
 801c2fc:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801c2fe:	4a22      	ldr	r2, [pc, #136]	; (801c388 <RadioSetRxGenericConfig+0x37c>)
 801c300:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c304:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801c306:	68bb      	ldr	r3, [r7, #8]
 801c308:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801c30c:	4b1e      	ldr	r3, [pc, #120]	; (801c388 <RadioSetRxGenericConfig+0x37c>)
 801c30e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801c312:	68bb      	ldr	r3, [r7, #8]
 801c314:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801c318:	4b1b      	ldr	r3, [pc, #108]	; (801c388 <RadioSetRxGenericConfig+0x37c>)
 801c31a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801c31e:	f7ff f98c 	bl	801b63a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801c322:	2001      	movs	r0, #1
 801c324:	f7fe fb20 	bl	801a968 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c328:	4818      	ldr	r0, [pc, #96]	; (801c38c <RadioSetRxGenericConfig+0x380>)
 801c32a:	f000 ff7d 	bl	801d228 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c32e:	4818      	ldr	r0, [pc, #96]	; (801c390 <RadioSetRxGenericConfig+0x384>)
 801c330:	f001 f84c 	bl	801d3cc <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801c334:	4b14      	ldr	r3, [pc, #80]	; (801c388 <RadioSetRxGenericConfig+0x37c>)
 801c336:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801c33a:	2b01      	cmp	r3, #1
 801c33c:	d10d      	bne.n	801c35a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801c33e:	f240 7036 	movw	r0, #1846	; 0x736
 801c342:	f001 f99f 	bl	801d684 <SUBGRF_ReadRegister>
 801c346:	4603      	mov	r3, r0
 801c348:	f023 0304 	bic.w	r3, r3, #4
 801c34c:	b2db      	uxtb	r3, r3
 801c34e:	4619      	mov	r1, r3
 801c350:	f240 7036 	movw	r0, #1846	; 0x736
 801c354:	f001 f982 	bl	801d65c <SUBGRF_WriteRegister>
 801c358:	e00c      	b.n	801c374 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801c35a:	f240 7036 	movw	r0, #1846	; 0x736
 801c35e:	f001 f991 	bl	801d684 <SUBGRF_ReadRegister>
 801c362:	4603      	mov	r3, r0
 801c364:	f043 0304 	orr.w	r3, r3, #4
 801c368:	b2db      	uxtb	r3, r3
 801c36a:	4619      	mov	r1, r3
 801c36c:	f240 7036 	movw	r0, #1846	; 0x736
 801c370:	f001 f974 	bl	801d65c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801c374:	4b04      	ldr	r3, [pc, #16]	; (801c388 <RadioSetRxGenericConfig+0x37c>)
 801c376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c37a:	609a      	str	r2, [r3, #8]
        break;
 801c37c:	bf00      	nop
    }
    return status;
 801c37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801c380:	4618      	mov	r0, r3
 801c382:	3730      	adds	r7, #48	; 0x30
 801c384:	46bd      	mov	sp, r7
 801c386:	bd80      	pop	{r7, pc}
 801c388:	20001cf0 	.word	0x20001cf0
 801c38c:	20001d28 	.word	0x20001d28
 801c390:	20001cfe 	.word	0x20001cfe

0801c394 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801c394:	b580      	push	{r7, lr}
 801c396:	b08e      	sub	sp, #56	; 0x38
 801c398:	af00      	add	r7, sp, #0
 801c39a:	60b9      	str	r1, [r7, #8]
 801c39c:	607b      	str	r3, [r7, #4]
 801c39e:	4603      	mov	r3, r0
 801c3a0:	73fb      	strb	r3, [r7, #15]
 801c3a2:	4613      	mov	r3, r2
 801c3a4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801c3a6:	2300      	movs	r3, #0
 801c3a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c3aa:	2300      	movs	r3, #0
 801c3ac:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801c3ae:	f001 fc3c 	bl	801dc2a <RFW_DeInit>
    switch( modem )
 801c3b2:	7bfb      	ldrb	r3, [r7, #15]
 801c3b4:	2b03      	cmp	r3, #3
 801c3b6:	f200 8204 	bhi.w	801c7c2 <RadioSetTxGenericConfig+0x42e>
 801c3ba:	a201      	add	r2, pc, #4	; (adr r2, 801c3c0 <RadioSetTxGenericConfig+0x2c>)
 801c3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c3c0:	0801c545 	.word	0x0801c545
 801c3c4:	0801c68d 	.word	0x0801c68d
 801c3c8:	0801c785 	.word	0x0801c785
 801c3cc:	0801c3d1 	.word	0x0801c3d1
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801c3d0:	68bb      	ldr	r3, [r7, #8]
 801c3d2:	7c9b      	ldrb	r3, [r3, #18]
 801c3d4:	2b08      	cmp	r3, #8
 801c3d6:	d902      	bls.n	801c3de <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801c3d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c3dc:	e206      	b.n	801c7ec <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801c3de:	68bb      	ldr	r3, [r7, #8]
 801c3e0:	6899      	ldr	r1, [r3, #8]
 801c3e2:	68bb      	ldr	r3, [r7, #8]
 801c3e4:	7c9b      	ldrb	r3, [r3, #18]
 801c3e6:	b29a      	uxth	r2, r3
 801c3e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c3ec:	4618      	mov	r0, r3
 801c3ee:	f001 fd0f 	bl	801de10 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801c3f2:	68bb      	ldr	r3, [r7, #8]
 801c3f4:	681b      	ldr	r3, [r3, #0]
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d102      	bne.n	801c400 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801c3fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c3fe:	e1f5      	b.n	801c7ec <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801c400:	68bb      	ldr	r3, [r7, #8]
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	f242 7210 	movw	r2, #10000	; 0x2710
 801c408:	4293      	cmp	r3, r2
 801c40a:	d813      	bhi.n	801c434 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801c40c:	2302      	movs	r3, #2
 801c40e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801c412:	4b99      	ldr	r3, [pc, #612]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c414:	2203      	movs	r2, #3
 801c416:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801c418:	4b97      	ldr	r3, [pc, #604]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c41a:	2203      	movs	r2, #3
 801c41c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801c420:	68bb      	ldr	r3, [r7, #8]
 801c422:	681b      	ldr	r3, [r3, #0]
 801c424:	4a94      	ldr	r2, [pc, #592]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c426:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801c428:	68bb      	ldr	r3, [r7, #8]
 801c42a:	7cda      	ldrb	r2, [r3, #19]
 801c42c:	4b92      	ldr	r3, [pc, #584]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c42e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801c432:	e017      	b.n	801c464 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801c434:	2300      	movs	r3, #0
 801c436:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801c43a:	4b8f      	ldr	r3, [pc, #572]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c43c:	2200      	movs	r2, #0
 801c43e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801c440:	4b8d      	ldr	r3, [pc, #564]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c442:	2200      	movs	r2, #0
 801c444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801c448:	68bb      	ldr	r3, [r7, #8]
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	4a8a      	ldr	r2, [pc, #552]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c44e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801c450:	68bb      	ldr	r3, [r7, #8]
 801c452:	7cda      	ldrb	r2, [r3, #19]
 801c454:	4b88      	ldr	r3, [pc, #544]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801c45a:	68bb      	ldr	r3, [r7, #8]
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	089b      	lsrs	r3, r3, #2
 801c460:	4a85      	ldr	r2, [pc, #532]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c462:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801c464:	68bb      	ldr	r3, [r7, #8]
 801c466:	685b      	ldr	r3, [r3, #4]
 801c468:	b29b      	uxth	r3, r3
 801c46a:	00db      	lsls	r3, r3, #3
 801c46c:	b29a      	uxth	r2, r3
 801c46e:	4b82      	ldr	r3, [pc, #520]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c470:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801c472:	4b81      	ldr	r3, [pc, #516]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c474:	2204      	movs	r2, #4
 801c476:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801c478:	68bb      	ldr	r3, [r7, #8]
 801c47a:	7c9b      	ldrb	r3, [r3, #18]
 801c47c:	00db      	lsls	r3, r3, #3
 801c47e:	b2da      	uxtb	r2, r3
 801c480:	4b7d      	ldr	r3, [pc, #500]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c482:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801c484:	4b7c      	ldr	r3, [pc, #496]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c486:	2200      	movs	r2, #0
 801c488:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801c48a:	68bb      	ldr	r3, [r7, #8]
 801c48c:	7d9b      	ldrb	r3, [r3, #22]
 801c48e:	2b02      	cmp	r3, #2
 801c490:	d003      	beq.n	801c49a <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801c492:	68bb      	ldr	r3, [r7, #8]
 801c494:	7d1b      	ldrb	r3, [r3, #20]
 801c496:	2b02      	cmp	r3, #2
 801c498:	d12b      	bne.n	801c4f2 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801c49a:	68bb      	ldr	r3, [r7, #8]
 801c49c:	7d5b      	ldrb	r3, [r3, #21]
 801c49e:	2bf1      	cmp	r3, #241	; 0xf1
 801c4a0:	d00a      	beq.n	801c4b8 <RadioSetTxGenericConfig+0x124>
 801c4a2:	68bb      	ldr	r3, [r7, #8]
 801c4a4:	7d5b      	ldrb	r3, [r3, #21]
 801c4a6:	2bf2      	cmp	r3, #242	; 0xf2
 801c4a8:	d006      	beq.n	801c4b8 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801c4aa:	68bb      	ldr	r3, [r7, #8]
 801c4ac:	7d5b      	ldrb	r3, [r3, #21]
 801c4ae:	2b01      	cmp	r3, #1
 801c4b0:	d002      	beq.n	801c4b8 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801c4b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c4b6:	e199      	b.n	801c7ec <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801c4b8:	68bb      	ldr	r3, [r7, #8]
 801c4ba:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801c4bc:	2301      	movs	r3, #1
 801c4be:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801c4c2:	4b6e      	ldr	r3, [pc, #440]	; (801c67c <RadioSetTxGenericConfig+0x2e8>)
 801c4c4:	6819      	ldr	r1, [r3, #0]
 801c4c6:	f107 0320 	add.w	r3, r7, #32
 801c4ca:	4a6d      	ldr	r2, [pc, #436]	; (801c680 <RadioSetTxGenericConfig+0x2ec>)
 801c4cc:	4618      	mov	r0, r3
 801c4ce:	f001 fb9f 	bl	801dc10 <RFW_Init>
 801c4d2:	4603      	mov	r3, r0
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d002      	beq.n	801c4de <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801c4d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c4dc:	e186      	b.n	801c7ec <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801c4de:	4b66      	ldr	r3, [pc, #408]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c4e0:	2200      	movs	r2, #0
 801c4e2:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801c4e4:	4b64      	ldr	r3, [pc, #400]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c4e6:	2201      	movs	r2, #1
 801c4e8:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801c4ea:	4b63      	ldr	r3, [pc, #396]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c4ec:	2200      	movs	r2, #0
 801c4ee:	755a      	strb	r2, [r3, #21]
        {
 801c4f0:	e00b      	b.n	801c50a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801c4f2:	68bb      	ldr	r3, [r7, #8]
 801c4f4:	7d5a      	ldrb	r2, [r3, #21]
 801c4f6:	4b60      	ldr	r3, [pc, #384]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c4f8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801c4fa:	68bb      	ldr	r3, [r7, #8]
 801c4fc:	7d9a      	ldrb	r2, [r3, #22]
 801c4fe:	4b5e      	ldr	r3, [pc, #376]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c500:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801c502:	68bb      	ldr	r3, [r7, #8]
 801c504:	7d1a      	ldrb	r2, [r3, #20]
 801c506:	4b5c      	ldr	r3, [pc, #368]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c508:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801c50a:	f7ff f896 	bl	801b63a <RadioStandby>
        RadioSetModem( radio_modem );
 801c50e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c512:	4618      	mov	r0, r3
 801c514:	f7fe fa28 	bl	801a968 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c518:	485a      	ldr	r0, [pc, #360]	; (801c684 <RadioSetTxGenericConfig+0x2f0>)
 801c51a:	f000 fe85 	bl	801d228 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c51e:	485a      	ldr	r0, [pc, #360]	; (801c688 <RadioSetTxGenericConfig+0x2f4>)
 801c520:	f000 ff54 	bl	801d3cc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801c524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c528:	4618      	mov	r0, r3
 801c52a:	f000 fa18 	bl	801c95e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801c52e:	68bb      	ldr	r3, [r7, #8]
 801c530:	8a1b      	ldrh	r3, [r3, #16]
 801c532:	4618      	mov	r0, r3
 801c534:	f000 fa62 	bl	801c9fc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801c538:	68bb      	ldr	r3, [r7, #8]
 801c53a:	899b      	ldrh	r3, [r3, #12]
 801c53c:	4618      	mov	r0, r3
 801c53e:	f000 fa3d 	bl	801c9bc <SUBGRF_SetCrcPolynomial>
        break;
 801c542:	e13f      	b.n	801c7c4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801c544:	68bb      	ldr	r3, [r7, #8]
 801c546:	681b      	ldr	r3, [r3, #0]
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d102      	bne.n	801c552 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801c54c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c550:	e14c      	b.n	801c7ec <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801c552:	68bb      	ldr	r3, [r7, #8]
 801c554:	7c9b      	ldrb	r3, [r3, #18]
 801c556:	2b08      	cmp	r3, #8
 801c558:	d902      	bls.n	801c560 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801c55a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c55e:	e145      	b.n	801c7ec <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801c560:	68bb      	ldr	r3, [r7, #8]
 801c562:	6899      	ldr	r1, [r3, #8]
 801c564:	68bb      	ldr	r3, [r7, #8]
 801c566:	7c9b      	ldrb	r3, [r3, #18]
 801c568:	b29a      	uxth	r2, r3
 801c56a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c56e:	4618      	mov	r0, r3
 801c570:	f001 fc4e 	bl	801de10 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801c574:	4b40      	ldr	r3, [pc, #256]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c576:	2200      	movs	r2, #0
 801c578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801c57c:	68bb      	ldr	r3, [r7, #8]
 801c57e:	681b      	ldr	r3, [r3, #0]
 801c580:	4a3d      	ldr	r2, [pc, #244]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c582:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801c584:	68bb      	ldr	r3, [r7, #8]
 801c586:	7cda      	ldrb	r2, [r3, #19]
 801c588:	4b3b      	ldr	r3, [pc, #236]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c58a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801c58e:	68bb      	ldr	r3, [r7, #8]
 801c590:	699b      	ldr	r3, [r3, #24]
 801c592:	4a39      	ldr	r2, [pc, #228]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c594:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801c596:	4b38      	ldr	r3, [pc, #224]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c598:	2200      	movs	r2, #0
 801c59a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801c59c:	68bb      	ldr	r3, [r7, #8]
 801c59e:	685b      	ldr	r3, [r3, #4]
 801c5a0:	b29b      	uxth	r3, r3
 801c5a2:	00db      	lsls	r3, r3, #3
 801c5a4:	b29a      	uxth	r2, r3
 801c5a6:	4b34      	ldr	r3, [pc, #208]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c5a8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801c5aa:	4b33      	ldr	r3, [pc, #204]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c5ac:	2204      	movs	r2, #4
 801c5ae:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801c5b0:	68bb      	ldr	r3, [r7, #8]
 801c5b2:	7c9b      	ldrb	r3, [r3, #18]
 801c5b4:	00db      	lsls	r3, r3, #3
 801c5b6:	b2da      	uxtb	r2, r3
 801c5b8:	4b2f      	ldr	r3, [pc, #188]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c5ba:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801c5bc:	4b2e      	ldr	r3, [pc, #184]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c5be:	2200      	movs	r2, #0
 801c5c0:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801c5c2:	68bb      	ldr	r3, [r7, #8]
 801c5c4:	7d9b      	ldrb	r3, [r3, #22]
 801c5c6:	2b02      	cmp	r3, #2
 801c5c8:	d003      	beq.n	801c5d2 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801c5ca:	68bb      	ldr	r3, [r7, #8]
 801c5cc:	7d1b      	ldrb	r3, [r3, #20]
 801c5ce:	2b02      	cmp	r3, #2
 801c5d0:	d12a      	bne.n	801c628 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801c5d2:	68bb      	ldr	r3, [r7, #8]
 801c5d4:	7d5b      	ldrb	r3, [r3, #21]
 801c5d6:	2bf1      	cmp	r3, #241	; 0xf1
 801c5d8:	d00a      	beq.n	801c5f0 <RadioSetTxGenericConfig+0x25c>
 801c5da:	68bb      	ldr	r3, [r7, #8]
 801c5dc:	7d5b      	ldrb	r3, [r3, #21]
 801c5de:	2bf2      	cmp	r3, #242	; 0xf2
 801c5e0:	d006      	beq.n	801c5f0 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801c5e2:	68bb      	ldr	r3, [r7, #8]
 801c5e4:	7d5b      	ldrb	r3, [r3, #21]
 801c5e6:	2b01      	cmp	r3, #1
 801c5e8:	d002      	beq.n	801c5f0 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801c5ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c5ee:	e0fd      	b.n	801c7ec <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801c5f0:	2301      	movs	r3, #1
 801c5f2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801c5f4:	68bb      	ldr	r3, [r7, #8]
 801c5f6:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801c5f8:	4b20      	ldr	r3, [pc, #128]	; (801c67c <RadioSetTxGenericConfig+0x2e8>)
 801c5fa:	6819      	ldr	r1, [r3, #0]
 801c5fc:	f107 0314 	add.w	r3, r7, #20
 801c600:	4a1f      	ldr	r2, [pc, #124]	; (801c680 <RadioSetTxGenericConfig+0x2ec>)
 801c602:	4618      	mov	r0, r3
 801c604:	f001 fb04 	bl	801dc10 <RFW_Init>
 801c608:	4603      	mov	r3, r0
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d002      	beq.n	801c614 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801c60e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c612:	e0eb      	b.n	801c7ec <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801c614:	4b18      	ldr	r3, [pc, #96]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c616:	2200      	movs	r2, #0
 801c618:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801c61a:	4b17      	ldr	r3, [pc, #92]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c61c:	2201      	movs	r2, #1
 801c61e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801c620:	4b15      	ldr	r3, [pc, #84]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c622:	2200      	movs	r2, #0
 801c624:	755a      	strb	r2, [r3, #21]
        {
 801c626:	e00b      	b.n	801c640 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801c628:	68bb      	ldr	r3, [r7, #8]
 801c62a:	7d5a      	ldrb	r2, [r3, #21]
 801c62c:	4b12      	ldr	r3, [pc, #72]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c62e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801c630:	68bb      	ldr	r3, [r7, #8]
 801c632:	7d9a      	ldrb	r2, [r3, #22]
 801c634:	4b10      	ldr	r3, [pc, #64]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c636:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801c638:	68bb      	ldr	r3, [r7, #8]
 801c63a:	7d1a      	ldrb	r2, [r3, #20]
 801c63c:	4b0e      	ldr	r3, [pc, #56]	; (801c678 <RadioSetTxGenericConfig+0x2e4>)
 801c63e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801c640:	f7fe fffb 	bl	801b63a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801c644:	2000      	movs	r0, #0
 801c646:	f7fe f98f 	bl	801a968 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c64a:	480e      	ldr	r0, [pc, #56]	; (801c684 <RadioSetTxGenericConfig+0x2f0>)
 801c64c:	f000 fdec 	bl	801d228 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c650:	480d      	ldr	r0, [pc, #52]	; (801c688 <RadioSetTxGenericConfig+0x2f4>)
 801c652:	f000 febb 	bl	801d3cc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801c656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c65a:	4618      	mov	r0, r3
 801c65c:	f000 f97f 	bl	801c95e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801c660:	68bb      	ldr	r3, [r7, #8]
 801c662:	8a1b      	ldrh	r3, [r3, #16]
 801c664:	4618      	mov	r0, r3
 801c666:	f000 f9c9 	bl	801c9fc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801c66a:	68bb      	ldr	r3, [r7, #8]
 801c66c:	899b      	ldrh	r3, [r3, #12]
 801c66e:	4618      	mov	r0, r3
 801c670:	f000 f9a4 	bl	801c9bc <SUBGRF_SetCrcPolynomial>
        break;
 801c674:	e0a6      	b.n	801c7c4 <RadioSetTxGenericConfig+0x430>
 801c676:	bf00      	nop
 801c678:	20001cf0 	.word	0x20001cf0
 801c67c:	20001cec 	.word	0x20001cec
 801c680:	20001d4c 	.word	0x20001d4c
 801c684:	20001d28 	.word	0x20001d28
 801c688:	20001cfe 	.word	0x20001cfe
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801c68c:	4b59      	ldr	r3, [pc, #356]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c68e:	2201      	movs	r2, #1
 801c690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801c694:	68bb      	ldr	r3, [r7, #8]
 801c696:	781a      	ldrb	r2, [r3, #0]
 801c698:	4b56      	ldr	r3, [pc, #344]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c69a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801c69e:	68bb      	ldr	r3, [r7, #8]
 801c6a0:	785a      	ldrb	r2, [r3, #1]
 801c6a2:	4b54      	ldr	r3, [pc, #336]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c6a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801c6a8:	68bb      	ldr	r3, [r7, #8]
 801c6aa:	789a      	ldrb	r2, [r3, #2]
 801c6ac:	4b51      	ldr	r3, [pc, #324]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c6ae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801c6b2:	68bb      	ldr	r3, [r7, #8]
 801c6b4:	78db      	ldrb	r3, [r3, #3]
 801c6b6:	2b02      	cmp	r3, #2
 801c6b8:	d010      	beq.n	801c6dc <RadioSetTxGenericConfig+0x348>
 801c6ba:	2b02      	cmp	r3, #2
 801c6bc:	dc20      	bgt.n	801c700 <RadioSetTxGenericConfig+0x36c>
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d002      	beq.n	801c6c8 <RadioSetTxGenericConfig+0x334>
 801c6c2:	2b01      	cmp	r3, #1
 801c6c4:	d005      	beq.n	801c6d2 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801c6c6:	e01b      	b.n	801c700 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801c6c8:	4b4a      	ldr	r3, [pc, #296]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c6ca:	2200      	movs	r2, #0
 801c6cc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c6d0:	e017      	b.n	801c702 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801c6d2:	4b48      	ldr	r3, [pc, #288]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c6d4:	2201      	movs	r2, #1
 801c6d6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c6da:	e012      	b.n	801c702 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801c6dc:	68bb      	ldr	r3, [r7, #8]
 801c6de:	781b      	ldrb	r3, [r3, #0]
 801c6e0:	2b0b      	cmp	r3, #11
 801c6e2:	d003      	beq.n	801c6ec <RadioSetTxGenericConfig+0x358>
 801c6e4:	68bb      	ldr	r3, [r7, #8]
 801c6e6:	781b      	ldrb	r3, [r3, #0]
 801c6e8:	2b0c      	cmp	r3, #12
 801c6ea:	d104      	bne.n	801c6f6 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801c6ec:	4b41      	ldr	r3, [pc, #260]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c6ee:	2201      	movs	r2, #1
 801c6f0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c6f4:	e005      	b.n	801c702 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801c6f6:	4b3f      	ldr	r3, [pc, #252]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c6f8:	2200      	movs	r2, #0
 801c6fa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c6fe:	e000      	b.n	801c702 <RadioSetTxGenericConfig+0x36e>
            break;
 801c700:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801c702:	4b3c      	ldr	r3, [pc, #240]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c704:	2201      	movs	r2, #1
 801c706:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801c708:	68bb      	ldr	r3, [r7, #8]
 801c70a:	889a      	ldrh	r2, [r3, #4]
 801c70c:	4b39      	ldr	r3, [pc, #228]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c70e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801c710:	68bb      	ldr	r3, [r7, #8]
 801c712:	799a      	ldrb	r2, [r3, #6]
 801c714:	4b37      	ldr	r3, [pc, #220]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c716:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801c718:	68bb      	ldr	r3, [r7, #8]
 801c71a:	79da      	ldrb	r2, [r3, #7]
 801c71c:	4b35      	ldr	r3, [pc, #212]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c71e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801c722:	68bb      	ldr	r3, [r7, #8]
 801c724:	7a1a      	ldrb	r2, [r3, #8]
 801c726:	4b33      	ldr	r3, [pc, #204]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801c72c:	f7fe ff85 	bl	801b63a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801c730:	2001      	movs	r0, #1
 801c732:	f7fe f919 	bl	801a968 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c736:	4830      	ldr	r0, [pc, #192]	; (801c7f8 <RadioSetTxGenericConfig+0x464>)
 801c738:	f000 fd76 	bl	801d228 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c73c:	482f      	ldr	r0, [pc, #188]	; (801c7fc <RadioSetTxGenericConfig+0x468>)
 801c73e:	f000 fe45 	bl	801d3cc <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801c742:	4b2c      	ldr	r3, [pc, #176]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c744:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c748:	2b06      	cmp	r3, #6
 801c74a:	d10d      	bne.n	801c768 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801c74c:	f640 0089 	movw	r0, #2185	; 0x889
 801c750:	f000 ff98 	bl	801d684 <SUBGRF_ReadRegister>
 801c754:	4603      	mov	r3, r0
 801c756:	f023 0304 	bic.w	r3, r3, #4
 801c75a:	b2db      	uxtb	r3, r3
 801c75c:	4619      	mov	r1, r3
 801c75e:	f640 0089 	movw	r0, #2185	; 0x889
 801c762:	f000 ff7b 	bl	801d65c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801c766:	e02d      	b.n	801c7c4 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801c768:	f640 0089 	movw	r0, #2185	; 0x889
 801c76c:	f000 ff8a 	bl	801d684 <SUBGRF_ReadRegister>
 801c770:	4603      	mov	r3, r0
 801c772:	f043 0304 	orr.w	r3, r3, #4
 801c776:	b2db      	uxtb	r3, r3
 801c778:	4619      	mov	r1, r3
 801c77a:	f640 0089 	movw	r0, #2185	; 0x889
 801c77e:	f000 ff6d 	bl	801d65c <SUBGRF_WriteRegister>
        break;
 801c782:	e01f      	b.n	801c7c4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801c784:	68bb      	ldr	r3, [r7, #8]
 801c786:	681b      	ldr	r3, [r3, #0]
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d004      	beq.n	801c796 <RadioSetTxGenericConfig+0x402>
 801c78c:	68bb      	ldr	r3, [r7, #8]
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801c794:	d902      	bls.n	801c79c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801c796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c79a:	e027      	b.n	801c7ec <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801c79c:	2003      	movs	r0, #3
 801c79e:	f7fe f8e3 	bl	801a968 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801c7a2:	4b14      	ldr	r3, [pc, #80]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c7a4:	2202      	movs	r2, #2
 801c7a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801c7aa:	68bb      	ldr	r3, [r7, #8]
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	4a11      	ldr	r2, [pc, #68]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c7b0:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801c7b2:	4b10      	ldr	r3, [pc, #64]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c7b4:	2216      	movs	r2, #22
 801c7b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c7ba:	480f      	ldr	r0, [pc, #60]	; (801c7f8 <RadioSetTxGenericConfig+0x464>)
 801c7bc:	f000 fd34 	bl	801d228 <SUBGRF_SetModulationParams>
        break;
 801c7c0:	e000      	b.n	801c7c4 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801c7c2:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801c7c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c7c8:	4618      	mov	r0, r3
 801c7ca:	f001 f863 	bl	801d894 <SUBGRF_SetRfTxPower>
 801c7ce:	4603      	mov	r3, r0
 801c7d0:	461a      	mov	r2, r3
 801c7d2:	4b08      	ldr	r3, [pc, #32]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c7d4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801c7d8:	4b06      	ldr	r3, [pc, #24]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c7da:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c7de:	4618      	mov	r0, r3
 801c7e0:	f001 fa37 	bl	801dc52 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801c7e4:	4a03      	ldr	r2, [pc, #12]	; (801c7f4 <RadioSetTxGenericConfig+0x460>)
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	6053      	str	r3, [r2, #4]
    return 0;
 801c7ea:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801c7ec:	4618      	mov	r0, r3
 801c7ee:	3738      	adds	r7, #56	; 0x38
 801c7f0:	46bd      	mov	sp, r7
 801c7f2:	bd80      	pop	{r7, pc}
 801c7f4:	20001cf0 	.word	0x20001cf0
 801c7f8:	20001d28 	.word	0x20001d28
 801c7fc:	20001cfe 	.word	0x20001cfe

0801c800 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801c800:	b480      	push	{r7}
 801c802:	b085      	sub	sp, #20
 801c804:	af00      	add	r7, sp, #0
 801c806:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801c808:	2301      	movs	r3, #1
 801c80a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801c80c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c80e:	4618      	mov	r0, r3
 801c810:	3714      	adds	r7, #20
 801c812:	46bd      	mov	sp, r7
 801c814:	bc80      	pop	{r7}
 801c816:	4770      	bx	lr

0801c818 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801c818:	b480      	push	{r7}
 801c81a:	b083      	sub	sp, #12
 801c81c:	af00      	add	r7, sp, #0
 801c81e:	6078      	str	r0, [r7, #4]
 801c820:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801c822:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801c824:	4618      	mov	r0, r3
 801c826:	370c      	adds	r7, #12
 801c828:	46bd      	mov	sp, r7
 801c82a:	bc80      	pop	{r7}
 801c82c:	4770      	bx	lr
	...

0801c830 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801c830:	b580      	push	{r7, lr}
 801c832:	b084      	sub	sp, #16
 801c834:	af00      	add	r7, sp, #0
 801c836:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d002      	beq.n	801c844 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801c83e:	4a1d      	ldr	r2, [pc, #116]	; (801c8b4 <SUBGRF_Init+0x84>)
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801c844:	f7e5 fdd4 	bl	80023f0 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801c848:	2002      	movs	r0, #2
 801c84a:	f001 f8ff 	bl	801da4c <Radio_SMPS_Set>

    ImageCalibrated = false;
 801c84e:	4b1a      	ldr	r3, [pc, #104]	; (801c8b8 <SUBGRF_Init+0x88>)
 801c850:	2200      	movs	r2, #0
 801c852:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801c854:	2000      	movs	r0, #0
 801c856:	f000 f97d 	bl	801cb54 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801c85a:	f7f1 f9c1 	bl	800dbe0 <RBI_IsTCXO>
 801c85e:	4603      	mov	r3, r0
 801c860:	2b01      	cmp	r3, #1
 801c862:	d10e      	bne.n	801c882 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801c864:	2140      	movs	r1, #64	; 0x40
 801c866:	2001      	movs	r0, #1
 801c868:	f000 fb82 	bl	801cf70 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801c86c:	2100      	movs	r1, #0
 801c86e:	f640 1011 	movw	r0, #2321	; 0x911
 801c872:	f000 fef3 	bl	801d65c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801c876:	237f      	movs	r3, #127	; 0x7f
 801c878:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801c87a:	7b38      	ldrb	r0, [r7, #12]
 801c87c:	f000 fa8b 	bl	801cd96 <SUBGRF_Calibrate>
 801c880:	e009      	b.n	801c896 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801c882:	2120      	movs	r1, #32
 801c884:	f640 1011 	movw	r0, #2321	; 0x911
 801c888:	f000 fee8 	bl	801d65c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801c88c:	2120      	movs	r1, #32
 801c88e:	f640 1012 	movw	r0, #2322	; 0x912
 801c892:	f000 fee3 	bl	801d65c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801c896:	210e      	movs	r1, #14
 801c898:	f640 101f 	movw	r0, #2335	; 0x91f
 801c89c:	f000 fede 	bl	801d65c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801c8a0:	f7f1 f982 	bl	800dba8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801c8a4:	4b05      	ldr	r3, [pc, #20]	; (801c8bc <SUBGRF_Init+0x8c>)
 801c8a6:	2201      	movs	r2, #1
 801c8a8:	701a      	strb	r2, [r3, #0]
}
 801c8aa:	bf00      	nop
 801c8ac:	3710      	adds	r7, #16
 801c8ae:	46bd      	mov	sp, r7
 801c8b0:	bd80      	pop	{r7, pc}
 801c8b2:	bf00      	nop
 801c8b4:	20001d88 	.word	0x20001d88
 801c8b8:	20001d84 	.word	0x20001d84
 801c8bc:	20001d7c 	.word	0x20001d7c

0801c8c0 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801c8c0:	b480      	push	{r7}
 801c8c2:	af00      	add	r7, sp, #0
    return OperatingMode;
 801c8c4:	4b02      	ldr	r3, [pc, #8]	; (801c8d0 <SUBGRF_GetOperatingMode+0x10>)
 801c8c6:	781b      	ldrb	r3, [r3, #0]
}
 801c8c8:	4618      	mov	r0, r3
 801c8ca:	46bd      	mov	sp, r7
 801c8cc:	bc80      	pop	{r7}
 801c8ce:	4770      	bx	lr
 801c8d0:	20001d7c 	.word	0x20001d7c

0801c8d4 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801c8d4:	b580      	push	{r7, lr}
 801c8d6:	b082      	sub	sp, #8
 801c8d8:	af00      	add	r7, sp, #0
 801c8da:	6078      	str	r0, [r7, #4]
 801c8dc:	460b      	mov	r3, r1
 801c8de:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801c8e0:	78fb      	ldrb	r3, [r7, #3]
 801c8e2:	461a      	mov	r2, r3
 801c8e4:	6879      	ldr	r1, [r7, #4]
 801c8e6:	2000      	movs	r0, #0
 801c8e8:	f000 ff24 	bl	801d734 <SUBGRF_WriteBuffer>
}
 801c8ec:	bf00      	nop
 801c8ee:	3708      	adds	r7, #8
 801c8f0:	46bd      	mov	sp, r7
 801c8f2:	bd80      	pop	{r7, pc}

0801c8f4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801c8f4:	b580      	push	{r7, lr}
 801c8f6:	b086      	sub	sp, #24
 801c8f8:	af00      	add	r7, sp, #0
 801c8fa:	60f8      	str	r0, [r7, #12]
 801c8fc:	60b9      	str	r1, [r7, #8]
 801c8fe:	4613      	mov	r3, r2
 801c900:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801c902:	2300      	movs	r3, #0
 801c904:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801c906:	f107 0317 	add.w	r3, r7, #23
 801c90a:	4619      	mov	r1, r3
 801c90c:	68b8      	ldr	r0, [r7, #8]
 801c90e:	f000 fe27 	bl	801d560 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801c912:	68bb      	ldr	r3, [r7, #8]
 801c914:	781b      	ldrb	r3, [r3, #0]
 801c916:	79fa      	ldrb	r2, [r7, #7]
 801c918:	429a      	cmp	r2, r3
 801c91a:	d201      	bcs.n	801c920 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801c91c:	2301      	movs	r3, #1
 801c91e:	e007      	b.n	801c930 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801c920:	7df8      	ldrb	r0, [r7, #23]
 801c922:	68bb      	ldr	r3, [r7, #8]
 801c924:	781b      	ldrb	r3, [r3, #0]
 801c926:	461a      	mov	r2, r3
 801c928:	68f9      	ldr	r1, [r7, #12]
 801c92a:	f000 ff25 	bl	801d778 <SUBGRF_ReadBuffer>

    return 0;
 801c92e:	2300      	movs	r3, #0
}
 801c930:	4618      	mov	r0, r3
 801c932:	3718      	adds	r7, #24
 801c934:	46bd      	mov	sp, r7
 801c936:	bd80      	pop	{r7, pc}

0801c938 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801c938:	b580      	push	{r7, lr}
 801c93a:	b084      	sub	sp, #16
 801c93c:	af00      	add	r7, sp, #0
 801c93e:	60f8      	str	r0, [r7, #12]
 801c940:	460b      	mov	r3, r1
 801c942:	607a      	str	r2, [r7, #4]
 801c944:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801c946:	7afb      	ldrb	r3, [r7, #11]
 801c948:	4619      	mov	r1, r3
 801c94a:	68f8      	ldr	r0, [r7, #12]
 801c94c:	f7ff ffc2 	bl	801c8d4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801c950:	6878      	ldr	r0, [r7, #4]
 801c952:	f000 f91b 	bl	801cb8c <SUBGRF_SetTx>
}
 801c956:	bf00      	nop
 801c958:	3710      	adds	r7, #16
 801c95a:	46bd      	mov	sp, r7
 801c95c:	bd80      	pop	{r7, pc}

0801c95e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801c95e:	b580      	push	{r7, lr}
 801c960:	b082      	sub	sp, #8
 801c962:	af00      	add	r7, sp, #0
 801c964:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801c966:	2208      	movs	r2, #8
 801c968:	6879      	ldr	r1, [r7, #4]
 801c96a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801c96e:	f000 fe9d 	bl	801d6ac <SUBGRF_WriteRegisters>
    return 0;
 801c972:	2300      	movs	r3, #0
}
 801c974:	4618      	mov	r0, r3
 801c976:	3708      	adds	r7, #8
 801c978:	46bd      	mov	sp, r7
 801c97a:	bd80      	pop	{r7, pc}

0801c97c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801c97c:	b580      	push	{r7, lr}
 801c97e:	b084      	sub	sp, #16
 801c980:	af00      	add	r7, sp, #0
 801c982:	4603      	mov	r3, r0
 801c984:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801c986:	88fb      	ldrh	r3, [r7, #6]
 801c988:	0a1b      	lsrs	r3, r3, #8
 801c98a:	b29b      	uxth	r3, r3
 801c98c:	b2db      	uxtb	r3, r3
 801c98e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801c990:	88fb      	ldrh	r3, [r7, #6]
 801c992:	b2db      	uxtb	r3, r3
 801c994:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c996:	f000 fb6f 	bl	801d078 <SUBGRF_GetPacketType>
 801c99a:	4603      	mov	r3, r0
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d108      	bne.n	801c9b2 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801c9a0:	f107 030c 	add.w	r3, r7, #12
 801c9a4:	2202      	movs	r2, #2
 801c9a6:	4619      	mov	r1, r3
 801c9a8:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801c9ac:	f000 fe7e 	bl	801d6ac <SUBGRF_WriteRegisters>
            break;
 801c9b0:	e000      	b.n	801c9b4 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801c9b2:	bf00      	nop
    }
}
 801c9b4:	bf00      	nop
 801c9b6:	3710      	adds	r7, #16
 801c9b8:	46bd      	mov	sp, r7
 801c9ba:	bd80      	pop	{r7, pc}

0801c9bc <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801c9bc:	b580      	push	{r7, lr}
 801c9be:	b084      	sub	sp, #16
 801c9c0:	af00      	add	r7, sp, #0
 801c9c2:	4603      	mov	r3, r0
 801c9c4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801c9c6:	88fb      	ldrh	r3, [r7, #6]
 801c9c8:	0a1b      	lsrs	r3, r3, #8
 801c9ca:	b29b      	uxth	r3, r3
 801c9cc:	b2db      	uxtb	r3, r3
 801c9ce:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801c9d0:	88fb      	ldrh	r3, [r7, #6]
 801c9d2:	b2db      	uxtb	r3, r3
 801c9d4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c9d6:	f000 fb4f 	bl	801d078 <SUBGRF_GetPacketType>
 801c9da:	4603      	mov	r3, r0
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	d108      	bne.n	801c9f2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801c9e0:	f107 030c 	add.w	r3, r7, #12
 801c9e4:	2202      	movs	r2, #2
 801c9e6:	4619      	mov	r1, r3
 801c9e8:	f240 60be 	movw	r0, #1726	; 0x6be
 801c9ec:	f000 fe5e 	bl	801d6ac <SUBGRF_WriteRegisters>
            break;
 801c9f0:	e000      	b.n	801c9f4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801c9f2:	bf00      	nop
    }
}
 801c9f4:	bf00      	nop
 801c9f6:	3710      	adds	r7, #16
 801c9f8:	46bd      	mov	sp, r7
 801c9fa:	bd80      	pop	{r7, pc}

0801c9fc <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801c9fc:	b580      	push	{r7, lr}
 801c9fe:	b084      	sub	sp, #16
 801ca00:	af00      	add	r7, sp, #0
 801ca02:	4603      	mov	r3, r0
 801ca04:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801ca06:	2300      	movs	r3, #0
 801ca08:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801ca0a:	f000 fb35 	bl	801d078 <SUBGRF_GetPacketType>
 801ca0e:	4603      	mov	r3, r0
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d121      	bne.n	801ca58 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801ca14:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801ca18:	f000 fe34 	bl	801d684 <SUBGRF_ReadRegister>
 801ca1c:	4603      	mov	r3, r0
 801ca1e:	f023 0301 	bic.w	r3, r3, #1
 801ca22:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801ca24:	88fb      	ldrh	r3, [r7, #6]
 801ca26:	0a1b      	lsrs	r3, r3, #8
 801ca28:	b29b      	uxth	r3, r3
 801ca2a:	b25b      	sxtb	r3, r3
 801ca2c:	f003 0301 	and.w	r3, r3, #1
 801ca30:	b25a      	sxtb	r2, r3
 801ca32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ca36:	4313      	orrs	r3, r2
 801ca38:	b25b      	sxtb	r3, r3
 801ca3a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801ca3c:	7bfb      	ldrb	r3, [r7, #15]
 801ca3e:	4619      	mov	r1, r3
 801ca40:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801ca44:	f000 fe0a 	bl	801d65c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801ca48:	88fb      	ldrh	r3, [r7, #6]
 801ca4a:	b2db      	uxtb	r3, r3
 801ca4c:	4619      	mov	r1, r3
 801ca4e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801ca52:	f000 fe03 	bl	801d65c <SUBGRF_WriteRegister>
            break;
 801ca56:	e000      	b.n	801ca5a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801ca58:	bf00      	nop
    }
}
 801ca5a:	bf00      	nop
 801ca5c:	3710      	adds	r7, #16
 801ca5e:	46bd      	mov	sp, r7
 801ca60:	bd80      	pop	{r7, pc}

0801ca62 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801ca62:	b580      	push	{r7, lr}
 801ca64:	b082      	sub	sp, #8
 801ca66:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801ca68:	2300      	movs	r3, #0
 801ca6a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801ca6c:	2300      	movs	r3, #0
 801ca6e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801ca70:	2300      	movs	r3, #0
 801ca72:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801ca74:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801ca78:	f000 fe04 	bl	801d684 <SUBGRF_ReadRegister>
 801ca7c:	4603      	mov	r3, r0
 801ca7e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801ca80:	79fb      	ldrb	r3, [r7, #7]
 801ca82:	f023 0301 	bic.w	r3, r3, #1
 801ca86:	b2db      	uxtb	r3, r3
 801ca88:	4619      	mov	r1, r3
 801ca8a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801ca8e:	f000 fde5 	bl	801d65c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801ca92:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ca96:	f000 fdf5 	bl	801d684 <SUBGRF_ReadRegister>
 801ca9a:	4603      	mov	r3, r0
 801ca9c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801ca9e:	79bb      	ldrb	r3, [r7, #6]
 801caa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801caa4:	b2db      	uxtb	r3, r3
 801caa6:	4619      	mov	r1, r3
 801caa8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801caac:	f000 fdd6 	bl	801d65c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801cab0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801cab4:	f000 f88a 	bl	801cbcc <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801cab8:	463b      	mov	r3, r7
 801caba:	2204      	movs	r2, #4
 801cabc:	4619      	mov	r1, r3
 801cabe:	f640 0019 	movw	r0, #2073	; 0x819
 801cac2:	f000 fe15 	bl	801d6f0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801cac6:	2000      	movs	r0, #0
 801cac8:	f000 f844 	bl	801cb54 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801cacc:	79fb      	ldrb	r3, [r7, #7]
 801cace:	4619      	mov	r1, r3
 801cad0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801cad4:	f000 fdc2 	bl	801d65c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801cad8:	79bb      	ldrb	r3, [r7, #6]
 801cada:	4619      	mov	r1, r3
 801cadc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801cae0:	f000 fdbc 	bl	801d65c <SUBGRF_WriteRegister>

    return number;
 801cae4:	683b      	ldr	r3, [r7, #0]
}
 801cae6:	4618      	mov	r0, r3
 801cae8:	3708      	adds	r7, #8
 801caea:	46bd      	mov	sp, r7
 801caec:	bd80      	pop	{r7, pc}
	...

0801caf0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801caf0:	b580      	push	{r7, lr}
 801caf2:	b084      	sub	sp, #16
 801caf4:	af00      	add	r7, sp, #0
 801caf6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801caf8:	2000      	movs	r0, #0
 801cafa:	f7f1 f85c 	bl	800dbb6 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801cafe:	2002      	movs	r0, #2
 801cb00:	f000 ffa4 	bl	801da4c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801cb04:	793b      	ldrb	r3, [r7, #4]
 801cb06:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801cb0a:	b2db      	uxtb	r3, r3
 801cb0c:	009b      	lsls	r3, r3, #2
 801cb0e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801cb10:	793b      	ldrb	r3, [r7, #4]
 801cb12:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801cb16:	b2db      	uxtb	r3, r3
 801cb18:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801cb1a:	b25b      	sxtb	r3, r3
 801cb1c:	4313      	orrs	r3, r2
 801cb1e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801cb20:	793b      	ldrb	r3, [r7, #4]
 801cb22:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801cb26:	b2db      	uxtb	r3, r3
 801cb28:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801cb2a:	4313      	orrs	r3, r2
 801cb2c:	b25b      	sxtb	r3, r3
 801cb2e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801cb30:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801cb32:	f107 030f 	add.w	r3, r7, #15
 801cb36:	2201      	movs	r2, #1
 801cb38:	4619      	mov	r1, r3
 801cb3a:	2084      	movs	r0, #132	; 0x84
 801cb3c:	f000 fe3e 	bl	801d7bc <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801cb40:	4b03      	ldr	r3, [pc, #12]	; (801cb50 <SUBGRF_SetSleep+0x60>)
 801cb42:	2200      	movs	r2, #0
 801cb44:	701a      	strb	r2, [r3, #0]
}
 801cb46:	bf00      	nop
 801cb48:	3710      	adds	r7, #16
 801cb4a:	46bd      	mov	sp, r7
 801cb4c:	bd80      	pop	{r7, pc}
 801cb4e:	bf00      	nop
 801cb50:	20001d7c 	.word	0x20001d7c

0801cb54 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801cb54:	b580      	push	{r7, lr}
 801cb56:	b082      	sub	sp, #8
 801cb58:	af00      	add	r7, sp, #0
 801cb5a:	4603      	mov	r3, r0
 801cb5c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801cb5e:	1dfb      	adds	r3, r7, #7
 801cb60:	2201      	movs	r2, #1
 801cb62:	4619      	mov	r1, r3
 801cb64:	2080      	movs	r0, #128	; 0x80
 801cb66:	f000 fe29 	bl	801d7bc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801cb6a:	79fb      	ldrb	r3, [r7, #7]
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d103      	bne.n	801cb78 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801cb70:	4b05      	ldr	r3, [pc, #20]	; (801cb88 <SUBGRF_SetStandby+0x34>)
 801cb72:	2201      	movs	r2, #1
 801cb74:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801cb76:	e002      	b.n	801cb7e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801cb78:	4b03      	ldr	r3, [pc, #12]	; (801cb88 <SUBGRF_SetStandby+0x34>)
 801cb7a:	2202      	movs	r2, #2
 801cb7c:	701a      	strb	r2, [r3, #0]
}
 801cb7e:	bf00      	nop
 801cb80:	3708      	adds	r7, #8
 801cb82:	46bd      	mov	sp, r7
 801cb84:	bd80      	pop	{r7, pc}
 801cb86:	bf00      	nop
 801cb88:	20001d7c 	.word	0x20001d7c

0801cb8c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801cb8c:	b580      	push	{r7, lr}
 801cb8e:	b084      	sub	sp, #16
 801cb90:	af00      	add	r7, sp, #0
 801cb92:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801cb94:	4b0c      	ldr	r3, [pc, #48]	; (801cbc8 <SUBGRF_SetTx+0x3c>)
 801cb96:	2204      	movs	r2, #4
 801cb98:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	0c1b      	lsrs	r3, r3, #16
 801cb9e:	b2db      	uxtb	r3, r3
 801cba0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	0a1b      	lsrs	r3, r3, #8
 801cba6:	b2db      	uxtb	r3, r3
 801cba8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	b2db      	uxtb	r3, r3
 801cbae:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801cbb0:	f107 030c 	add.w	r3, r7, #12
 801cbb4:	2203      	movs	r2, #3
 801cbb6:	4619      	mov	r1, r3
 801cbb8:	2083      	movs	r0, #131	; 0x83
 801cbba:	f000 fdff 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801cbbe:	bf00      	nop
 801cbc0:	3710      	adds	r7, #16
 801cbc2:	46bd      	mov	sp, r7
 801cbc4:	bd80      	pop	{r7, pc}
 801cbc6:	bf00      	nop
 801cbc8:	20001d7c 	.word	0x20001d7c

0801cbcc <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801cbcc:	b580      	push	{r7, lr}
 801cbce:	b084      	sub	sp, #16
 801cbd0:	af00      	add	r7, sp, #0
 801cbd2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801cbd4:	4b0c      	ldr	r3, [pc, #48]	; (801cc08 <SUBGRF_SetRx+0x3c>)
 801cbd6:	2205      	movs	r2, #5
 801cbd8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	0c1b      	lsrs	r3, r3, #16
 801cbde:	b2db      	uxtb	r3, r3
 801cbe0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	0a1b      	lsrs	r3, r3, #8
 801cbe6:	b2db      	uxtb	r3, r3
 801cbe8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	b2db      	uxtb	r3, r3
 801cbee:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801cbf0:	f107 030c 	add.w	r3, r7, #12
 801cbf4:	2203      	movs	r2, #3
 801cbf6:	4619      	mov	r1, r3
 801cbf8:	2082      	movs	r0, #130	; 0x82
 801cbfa:	f000 fddf 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801cbfe:	bf00      	nop
 801cc00:	3710      	adds	r7, #16
 801cc02:	46bd      	mov	sp, r7
 801cc04:	bd80      	pop	{r7, pc}
 801cc06:	bf00      	nop
 801cc08:	20001d7c 	.word	0x20001d7c

0801cc0c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801cc0c:	b580      	push	{r7, lr}
 801cc0e:	b084      	sub	sp, #16
 801cc10:	af00      	add	r7, sp, #0
 801cc12:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801cc14:	4b0e      	ldr	r3, [pc, #56]	; (801cc50 <SUBGRF_SetRxBoosted+0x44>)
 801cc16:	2205      	movs	r2, #5
 801cc18:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801cc1a:	2197      	movs	r1, #151	; 0x97
 801cc1c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801cc20:	f000 fd1c 	bl	801d65c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801cc24:	687b      	ldr	r3, [r7, #4]
 801cc26:	0c1b      	lsrs	r3, r3, #16
 801cc28:	b2db      	uxtb	r3, r3
 801cc2a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	0a1b      	lsrs	r3, r3, #8
 801cc30:	b2db      	uxtb	r3, r3
 801cc32:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	b2db      	uxtb	r3, r3
 801cc38:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801cc3a:	f107 030c 	add.w	r3, r7, #12
 801cc3e:	2203      	movs	r2, #3
 801cc40:	4619      	mov	r1, r3
 801cc42:	2082      	movs	r0, #130	; 0x82
 801cc44:	f000 fdba 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801cc48:	bf00      	nop
 801cc4a:	3710      	adds	r7, #16
 801cc4c:	46bd      	mov	sp, r7
 801cc4e:	bd80      	pop	{r7, pc}
 801cc50:	20001d7c 	.word	0x20001d7c

0801cc54 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801cc54:	b580      	push	{r7, lr}
 801cc56:	b084      	sub	sp, #16
 801cc58:	af00      	add	r7, sp, #0
 801cc5a:	6078      	str	r0, [r7, #4]
 801cc5c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	0c1b      	lsrs	r3, r3, #16
 801cc62:	b2db      	uxtb	r3, r3
 801cc64:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	0a1b      	lsrs	r3, r3, #8
 801cc6a:	b2db      	uxtb	r3, r3
 801cc6c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	b2db      	uxtb	r3, r3
 801cc72:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801cc74:	683b      	ldr	r3, [r7, #0]
 801cc76:	0c1b      	lsrs	r3, r3, #16
 801cc78:	b2db      	uxtb	r3, r3
 801cc7a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801cc7c:	683b      	ldr	r3, [r7, #0]
 801cc7e:	0a1b      	lsrs	r3, r3, #8
 801cc80:	b2db      	uxtb	r3, r3
 801cc82:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801cc84:	683b      	ldr	r3, [r7, #0]
 801cc86:	b2db      	uxtb	r3, r3
 801cc88:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801cc8a:	f107 0308 	add.w	r3, r7, #8
 801cc8e:	2206      	movs	r2, #6
 801cc90:	4619      	mov	r1, r3
 801cc92:	2094      	movs	r0, #148	; 0x94
 801cc94:	f000 fd92 	bl	801d7bc <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801cc98:	4b03      	ldr	r3, [pc, #12]	; (801cca8 <SUBGRF_SetRxDutyCycle+0x54>)
 801cc9a:	2206      	movs	r2, #6
 801cc9c:	701a      	strb	r2, [r3, #0]
}
 801cc9e:	bf00      	nop
 801cca0:	3710      	adds	r7, #16
 801cca2:	46bd      	mov	sp, r7
 801cca4:	bd80      	pop	{r7, pc}
 801cca6:	bf00      	nop
 801cca8:	20001d7c 	.word	0x20001d7c

0801ccac <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801ccac:	b580      	push	{r7, lr}
 801ccae:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801ccb0:	2200      	movs	r2, #0
 801ccb2:	2100      	movs	r1, #0
 801ccb4:	20c5      	movs	r0, #197	; 0xc5
 801ccb6:	f000 fd81 	bl	801d7bc <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801ccba:	4b02      	ldr	r3, [pc, #8]	; (801ccc4 <SUBGRF_SetCad+0x18>)
 801ccbc:	2207      	movs	r2, #7
 801ccbe:	701a      	strb	r2, [r3, #0]
}
 801ccc0:	bf00      	nop
 801ccc2:	bd80      	pop	{r7, pc}
 801ccc4:	20001d7c 	.word	0x20001d7c

0801ccc8 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801ccc8:	b580      	push	{r7, lr}
 801ccca:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801cccc:	2200      	movs	r2, #0
 801ccce:	2100      	movs	r1, #0
 801ccd0:	20d1      	movs	r0, #209	; 0xd1
 801ccd2:	f000 fd73 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801ccd6:	bf00      	nop
 801ccd8:	bd80      	pop	{r7, pc}

0801ccda <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801ccda:	b580      	push	{r7, lr}
 801ccdc:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801ccde:	2200      	movs	r2, #0
 801cce0:	2100      	movs	r1, #0
 801cce2:	20d2      	movs	r0, #210	; 0xd2
 801cce4:	f000 fd6a 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801cce8:	bf00      	nop
 801ccea:	bd80      	pop	{r7, pc}

0801ccec <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801ccec:	b580      	push	{r7, lr}
 801ccee:	b082      	sub	sp, #8
 801ccf0:	af00      	add	r7, sp, #0
 801ccf2:	4603      	mov	r3, r0
 801ccf4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801ccf6:	1dfb      	adds	r3, r7, #7
 801ccf8:	2201      	movs	r2, #1
 801ccfa:	4619      	mov	r1, r3
 801ccfc:	209f      	movs	r0, #159	; 0x9f
 801ccfe:	f000 fd5d 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801cd02:	bf00      	nop
 801cd04:	3708      	adds	r7, #8
 801cd06:	46bd      	mov	sp, r7
 801cd08:	bd80      	pop	{r7, pc}

0801cd0a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801cd0a:	b580      	push	{r7, lr}
 801cd0c:	b084      	sub	sp, #16
 801cd0e:	af00      	add	r7, sp, #0
 801cd10:	4603      	mov	r3, r0
 801cd12:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801cd14:	1dfb      	adds	r3, r7, #7
 801cd16:	2201      	movs	r2, #1
 801cd18:	4619      	mov	r1, r3
 801cd1a:	20a0      	movs	r0, #160	; 0xa0
 801cd1c:	f000 fd4e 	bl	801d7bc <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801cd20:	79fb      	ldrb	r3, [r7, #7]
 801cd22:	2b3f      	cmp	r3, #63	; 0x3f
 801cd24:	d91c      	bls.n	801cd60 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801cd26:	79fb      	ldrb	r3, [r7, #7]
 801cd28:	085b      	lsrs	r3, r3, #1
 801cd2a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801cd2c:	2300      	movs	r3, #0
 801cd2e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801cd30:	2300      	movs	r3, #0
 801cd32:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801cd34:	e005      	b.n	801cd42 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801cd36:	7bfb      	ldrb	r3, [r7, #15]
 801cd38:	089b      	lsrs	r3, r3, #2
 801cd3a:	73fb      	strb	r3, [r7, #15]
            exp++;
 801cd3c:	7bbb      	ldrb	r3, [r7, #14]
 801cd3e:	3301      	adds	r3, #1
 801cd40:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801cd42:	7bfb      	ldrb	r3, [r7, #15]
 801cd44:	2b1f      	cmp	r3, #31
 801cd46:	d8f6      	bhi.n	801cd36 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801cd48:	7bfb      	ldrb	r3, [r7, #15]
 801cd4a:	00db      	lsls	r3, r3, #3
 801cd4c:	b2da      	uxtb	r2, r3
 801cd4e:	7bbb      	ldrb	r3, [r7, #14]
 801cd50:	4413      	add	r3, r2
 801cd52:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801cd54:	7b7b      	ldrb	r3, [r7, #13]
 801cd56:	4619      	mov	r1, r3
 801cd58:	f240 7006 	movw	r0, #1798	; 0x706
 801cd5c:	f000 fc7e 	bl	801d65c <SUBGRF_WriteRegister>
    }
}
 801cd60:	bf00      	nop
 801cd62:	3710      	adds	r7, #16
 801cd64:	46bd      	mov	sp, r7
 801cd66:	bd80      	pop	{r7, pc}

0801cd68 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801cd68:	b580      	push	{r7, lr}
 801cd6a:	b082      	sub	sp, #8
 801cd6c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801cd6e:	f7f0 ff3e 	bl	800dbee <RBI_IsDCDC>
 801cd72:	4603      	mov	r3, r0
 801cd74:	2b01      	cmp	r3, #1
 801cd76:	d102      	bne.n	801cd7e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801cd78:	2301      	movs	r3, #1
 801cd7a:	71fb      	strb	r3, [r7, #7]
 801cd7c:	e001      	b.n	801cd82 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801cd7e:	2300      	movs	r3, #0
 801cd80:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801cd82:	1dfb      	adds	r3, r7, #7
 801cd84:	2201      	movs	r2, #1
 801cd86:	4619      	mov	r1, r3
 801cd88:	2096      	movs	r0, #150	; 0x96
 801cd8a:	f000 fd17 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801cd8e:	bf00      	nop
 801cd90:	3708      	adds	r7, #8
 801cd92:	46bd      	mov	sp, r7
 801cd94:	bd80      	pop	{r7, pc}

0801cd96 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801cd96:	b580      	push	{r7, lr}
 801cd98:	b084      	sub	sp, #16
 801cd9a:	af00      	add	r7, sp, #0
 801cd9c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801cd9e:	793b      	ldrb	r3, [r7, #4]
 801cda0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801cda4:	b2db      	uxtb	r3, r3
 801cda6:	019b      	lsls	r3, r3, #6
 801cda8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801cdaa:	793b      	ldrb	r3, [r7, #4]
 801cdac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801cdb0:	b2db      	uxtb	r3, r3
 801cdb2:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801cdb4:	b25b      	sxtb	r3, r3
 801cdb6:	4313      	orrs	r3, r2
 801cdb8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801cdba:	793b      	ldrb	r3, [r7, #4]
 801cdbc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801cdc0:	b2db      	uxtb	r3, r3
 801cdc2:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801cdc4:	b25b      	sxtb	r3, r3
 801cdc6:	4313      	orrs	r3, r2
 801cdc8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801cdca:	793b      	ldrb	r3, [r7, #4]
 801cdcc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801cdd0:	b2db      	uxtb	r3, r3
 801cdd2:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801cdd4:	b25b      	sxtb	r3, r3
 801cdd6:	4313      	orrs	r3, r2
 801cdd8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801cdda:	793b      	ldrb	r3, [r7, #4]
 801cddc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801cde0:	b2db      	uxtb	r3, r3
 801cde2:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801cde4:	b25b      	sxtb	r3, r3
 801cde6:	4313      	orrs	r3, r2
 801cde8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801cdea:	793b      	ldrb	r3, [r7, #4]
 801cdec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801cdf0:	b2db      	uxtb	r3, r3
 801cdf2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801cdf4:	b25b      	sxtb	r3, r3
 801cdf6:	4313      	orrs	r3, r2
 801cdf8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801cdfa:	793b      	ldrb	r3, [r7, #4]
 801cdfc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801ce00:	b2db      	uxtb	r3, r3
 801ce02:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801ce04:	4313      	orrs	r3, r2
 801ce06:	b25b      	sxtb	r3, r3
 801ce08:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ce0a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801ce0c:	f107 030f 	add.w	r3, r7, #15
 801ce10:	2201      	movs	r2, #1
 801ce12:	4619      	mov	r1, r3
 801ce14:	2089      	movs	r0, #137	; 0x89
 801ce16:	f000 fcd1 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801ce1a:	bf00      	nop
 801ce1c:	3710      	adds	r7, #16
 801ce1e:	46bd      	mov	sp, r7
 801ce20:	bd80      	pop	{r7, pc}
	...

0801ce24 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801ce24:	b580      	push	{r7, lr}
 801ce26:	b084      	sub	sp, #16
 801ce28:	af00      	add	r7, sp, #0
 801ce2a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	4a1d      	ldr	r2, [pc, #116]	; (801cea4 <SUBGRF_CalibrateImage+0x80>)
 801ce30:	4293      	cmp	r3, r2
 801ce32:	d904      	bls.n	801ce3e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801ce34:	23e1      	movs	r3, #225	; 0xe1
 801ce36:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801ce38:	23e9      	movs	r3, #233	; 0xe9
 801ce3a:	737b      	strb	r3, [r7, #13]
 801ce3c:	e027      	b.n	801ce8e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	4a19      	ldr	r2, [pc, #100]	; (801cea8 <SUBGRF_CalibrateImage+0x84>)
 801ce42:	4293      	cmp	r3, r2
 801ce44:	d904      	bls.n	801ce50 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801ce46:	23d7      	movs	r3, #215	; 0xd7
 801ce48:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801ce4a:	23db      	movs	r3, #219	; 0xdb
 801ce4c:	737b      	strb	r3, [r7, #13]
 801ce4e:	e01e      	b.n	801ce8e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	4a16      	ldr	r2, [pc, #88]	; (801ceac <SUBGRF_CalibrateImage+0x88>)
 801ce54:	4293      	cmp	r3, r2
 801ce56:	d904      	bls.n	801ce62 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801ce58:	23c1      	movs	r3, #193	; 0xc1
 801ce5a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801ce5c:	23c5      	movs	r3, #197	; 0xc5
 801ce5e:	737b      	strb	r3, [r7, #13]
 801ce60:	e015      	b.n	801ce8e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	4a12      	ldr	r2, [pc, #72]	; (801ceb0 <SUBGRF_CalibrateImage+0x8c>)
 801ce66:	4293      	cmp	r3, r2
 801ce68:	d904      	bls.n	801ce74 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801ce6a:	2375      	movs	r3, #117	; 0x75
 801ce6c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801ce6e:	2381      	movs	r3, #129	; 0x81
 801ce70:	737b      	strb	r3, [r7, #13]
 801ce72:	e00c      	b.n	801ce8e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	4a0f      	ldr	r2, [pc, #60]	; (801ceb4 <SUBGRF_CalibrateImage+0x90>)
 801ce78:	4293      	cmp	r3, r2
 801ce7a:	d904      	bls.n	801ce86 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801ce7c:	236b      	movs	r3, #107	; 0x6b
 801ce7e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801ce80:	236f      	movs	r3, #111	; 0x6f
 801ce82:	737b      	strb	r3, [r7, #13]
 801ce84:	e003      	b.n	801ce8e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801ce86:	2329      	movs	r3, #41	; 0x29
 801ce88:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801ce8a:	232b      	movs	r3, #43	; 0x2b
 801ce8c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801ce8e:	f107 030c 	add.w	r3, r7, #12
 801ce92:	2202      	movs	r2, #2
 801ce94:	4619      	mov	r1, r3
 801ce96:	2098      	movs	r0, #152	; 0x98
 801ce98:	f000 fc90 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801ce9c:	bf00      	nop
 801ce9e:	3710      	adds	r7, #16
 801cea0:	46bd      	mov	sp, r7
 801cea2:	bd80      	pop	{r7, pc}
 801cea4:	35a4e900 	.word	0x35a4e900
 801cea8:	32a9f880 	.word	0x32a9f880
 801ceac:	2de54480 	.word	0x2de54480
 801ceb0:	1b6b0b00 	.word	0x1b6b0b00
 801ceb4:	1954fc40 	.word	0x1954fc40

0801ceb8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801ceb8:	b590      	push	{r4, r7, lr}
 801ceba:	b085      	sub	sp, #20
 801cebc:	af00      	add	r7, sp, #0
 801cebe:	4604      	mov	r4, r0
 801cec0:	4608      	mov	r0, r1
 801cec2:	4611      	mov	r1, r2
 801cec4:	461a      	mov	r2, r3
 801cec6:	4623      	mov	r3, r4
 801cec8:	71fb      	strb	r3, [r7, #7]
 801ceca:	4603      	mov	r3, r0
 801cecc:	71bb      	strb	r3, [r7, #6]
 801cece:	460b      	mov	r3, r1
 801ced0:	717b      	strb	r3, [r7, #5]
 801ced2:	4613      	mov	r3, r2
 801ced4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801ced6:	79fb      	ldrb	r3, [r7, #7]
 801ced8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801ceda:	79bb      	ldrb	r3, [r7, #6]
 801cedc:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801cede:	797b      	ldrb	r3, [r7, #5]
 801cee0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801cee2:	793b      	ldrb	r3, [r7, #4]
 801cee4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801cee6:	f107 030c 	add.w	r3, r7, #12
 801ceea:	2204      	movs	r2, #4
 801ceec:	4619      	mov	r1, r3
 801ceee:	2095      	movs	r0, #149	; 0x95
 801cef0:	f000 fc64 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801cef4:	bf00      	nop
 801cef6:	3714      	adds	r7, #20
 801cef8:	46bd      	mov	sp, r7
 801cefa:	bd90      	pop	{r4, r7, pc}

0801cefc <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801cefc:	b590      	push	{r4, r7, lr}
 801cefe:	b085      	sub	sp, #20
 801cf00:	af00      	add	r7, sp, #0
 801cf02:	4604      	mov	r4, r0
 801cf04:	4608      	mov	r0, r1
 801cf06:	4611      	mov	r1, r2
 801cf08:	461a      	mov	r2, r3
 801cf0a:	4623      	mov	r3, r4
 801cf0c:	80fb      	strh	r3, [r7, #6]
 801cf0e:	4603      	mov	r3, r0
 801cf10:	80bb      	strh	r3, [r7, #4]
 801cf12:	460b      	mov	r3, r1
 801cf14:	807b      	strh	r3, [r7, #2]
 801cf16:	4613      	mov	r3, r2
 801cf18:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801cf1a:	88fb      	ldrh	r3, [r7, #6]
 801cf1c:	0a1b      	lsrs	r3, r3, #8
 801cf1e:	b29b      	uxth	r3, r3
 801cf20:	b2db      	uxtb	r3, r3
 801cf22:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801cf24:	88fb      	ldrh	r3, [r7, #6]
 801cf26:	b2db      	uxtb	r3, r3
 801cf28:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801cf2a:	88bb      	ldrh	r3, [r7, #4]
 801cf2c:	0a1b      	lsrs	r3, r3, #8
 801cf2e:	b29b      	uxth	r3, r3
 801cf30:	b2db      	uxtb	r3, r3
 801cf32:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801cf34:	88bb      	ldrh	r3, [r7, #4]
 801cf36:	b2db      	uxtb	r3, r3
 801cf38:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801cf3a:	887b      	ldrh	r3, [r7, #2]
 801cf3c:	0a1b      	lsrs	r3, r3, #8
 801cf3e:	b29b      	uxth	r3, r3
 801cf40:	b2db      	uxtb	r3, r3
 801cf42:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801cf44:	887b      	ldrh	r3, [r7, #2]
 801cf46:	b2db      	uxtb	r3, r3
 801cf48:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801cf4a:	883b      	ldrh	r3, [r7, #0]
 801cf4c:	0a1b      	lsrs	r3, r3, #8
 801cf4e:	b29b      	uxth	r3, r3
 801cf50:	b2db      	uxtb	r3, r3
 801cf52:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801cf54:	883b      	ldrh	r3, [r7, #0]
 801cf56:	b2db      	uxtb	r3, r3
 801cf58:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801cf5a:	f107 0308 	add.w	r3, r7, #8
 801cf5e:	2208      	movs	r2, #8
 801cf60:	4619      	mov	r1, r3
 801cf62:	2008      	movs	r0, #8
 801cf64:	f000 fc2a 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801cf68:	bf00      	nop
 801cf6a:	3714      	adds	r7, #20
 801cf6c:	46bd      	mov	sp, r7
 801cf6e:	bd90      	pop	{r4, r7, pc}

0801cf70 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801cf70:	b580      	push	{r7, lr}
 801cf72:	b084      	sub	sp, #16
 801cf74:	af00      	add	r7, sp, #0
 801cf76:	4603      	mov	r3, r0
 801cf78:	6039      	str	r1, [r7, #0]
 801cf7a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801cf7c:	79fb      	ldrb	r3, [r7, #7]
 801cf7e:	f003 0307 	and.w	r3, r3, #7
 801cf82:	b2db      	uxtb	r3, r3
 801cf84:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801cf86:	683b      	ldr	r3, [r7, #0]
 801cf88:	0c1b      	lsrs	r3, r3, #16
 801cf8a:	b2db      	uxtb	r3, r3
 801cf8c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801cf8e:	683b      	ldr	r3, [r7, #0]
 801cf90:	0a1b      	lsrs	r3, r3, #8
 801cf92:	b2db      	uxtb	r3, r3
 801cf94:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801cf96:	683b      	ldr	r3, [r7, #0]
 801cf98:	b2db      	uxtb	r3, r3
 801cf9a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801cf9c:	f107 030c 	add.w	r3, r7, #12
 801cfa0:	2204      	movs	r2, #4
 801cfa2:	4619      	mov	r1, r3
 801cfa4:	2097      	movs	r0, #151	; 0x97
 801cfa6:	f000 fc09 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801cfaa:	bf00      	nop
 801cfac:	3710      	adds	r7, #16
 801cfae:	46bd      	mov	sp, r7
 801cfb0:	bd80      	pop	{r7, pc}
	...

0801cfb4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801cfb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801cfb8:	b084      	sub	sp, #16
 801cfba:	af00      	add	r7, sp, #0
 801cfbc:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801cfbe:	2300      	movs	r3, #0
 801cfc0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801cfc2:	4b1d      	ldr	r3, [pc, #116]	; (801d038 <SUBGRF_SetRfFrequency+0x84>)
 801cfc4:	781b      	ldrb	r3, [r3, #0]
 801cfc6:	f083 0301 	eor.w	r3, r3, #1
 801cfca:	b2db      	uxtb	r3, r3
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	d005      	beq.n	801cfdc <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801cfd0:	6878      	ldr	r0, [r7, #4]
 801cfd2:	f7ff ff27 	bl	801ce24 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801cfd6:	4b18      	ldr	r3, [pc, #96]	; (801d038 <SUBGRF_SetRfFrequency+0x84>)
 801cfd8:	2201      	movs	r2, #1
 801cfda:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	2200      	movs	r2, #0
 801cfe0:	461c      	mov	r4, r3
 801cfe2:	4615      	mov	r5, r2
 801cfe4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801cfe8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801cfec:	4a13      	ldr	r2, [pc, #76]	; (801d03c <SUBGRF_SetRfFrequency+0x88>)
 801cfee:	f04f 0300 	mov.w	r3, #0
 801cff2:	4640      	mov	r0, r8
 801cff4:	4649      	mov	r1, r9
 801cff6:	f7e4 f839 	bl	800106c <__aeabi_uldivmod>
 801cffa:	4602      	mov	r2, r0
 801cffc:	460b      	mov	r3, r1
 801cffe:	4613      	mov	r3, r2
 801d000:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801d002:	68fb      	ldr	r3, [r7, #12]
 801d004:	0e1b      	lsrs	r3, r3, #24
 801d006:	b2db      	uxtb	r3, r3
 801d008:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801d00a:	68fb      	ldr	r3, [r7, #12]
 801d00c:	0c1b      	lsrs	r3, r3, #16
 801d00e:	b2db      	uxtb	r3, r3
 801d010:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801d012:	68fb      	ldr	r3, [r7, #12]
 801d014:	0a1b      	lsrs	r3, r3, #8
 801d016:	b2db      	uxtb	r3, r3
 801d018:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	b2db      	uxtb	r3, r3
 801d01e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801d020:	f107 0308 	add.w	r3, r7, #8
 801d024:	2204      	movs	r2, #4
 801d026:	4619      	mov	r1, r3
 801d028:	2086      	movs	r0, #134	; 0x86
 801d02a:	f000 fbc7 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801d02e:	bf00      	nop
 801d030:	3710      	adds	r7, #16
 801d032:	46bd      	mov	sp, r7
 801d034:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801d038:	20001d84 	.word	0x20001d84
 801d03c:	01e84800 	.word	0x01e84800

0801d040 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801d040:	b580      	push	{r7, lr}
 801d042:	b082      	sub	sp, #8
 801d044:	af00      	add	r7, sp, #0
 801d046:	4603      	mov	r3, r0
 801d048:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801d04a:	79fa      	ldrb	r2, [r7, #7]
 801d04c:	4b09      	ldr	r3, [pc, #36]	; (801d074 <SUBGRF_SetPacketType+0x34>)
 801d04e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801d050:	79fb      	ldrb	r3, [r7, #7]
 801d052:	2b00      	cmp	r3, #0
 801d054:	d104      	bne.n	801d060 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801d056:	2100      	movs	r1, #0
 801d058:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801d05c:	f000 fafe 	bl	801d65c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801d060:	1dfb      	adds	r3, r7, #7
 801d062:	2201      	movs	r2, #1
 801d064:	4619      	mov	r1, r3
 801d066:	208a      	movs	r0, #138	; 0x8a
 801d068:	f000 fba8 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801d06c:	bf00      	nop
 801d06e:	3708      	adds	r7, #8
 801d070:	46bd      	mov	sp, r7
 801d072:	bd80      	pop	{r7, pc}
 801d074:	20001d7d 	.word	0x20001d7d

0801d078 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801d078:	b480      	push	{r7}
 801d07a:	af00      	add	r7, sp, #0
    return PacketType;
 801d07c:	4b02      	ldr	r3, [pc, #8]	; (801d088 <SUBGRF_GetPacketType+0x10>)
 801d07e:	781b      	ldrb	r3, [r3, #0]
}
 801d080:	4618      	mov	r0, r3
 801d082:	46bd      	mov	sp, r7
 801d084:	bc80      	pop	{r7}
 801d086:	4770      	bx	lr
 801d088:	20001d7d 	.word	0x20001d7d

0801d08c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801d08c:	b580      	push	{r7, lr}
 801d08e:	b084      	sub	sp, #16
 801d090:	af00      	add	r7, sp, #0
 801d092:	4603      	mov	r3, r0
 801d094:	71fb      	strb	r3, [r7, #7]
 801d096:	460b      	mov	r3, r1
 801d098:	71bb      	strb	r3, [r7, #6]
 801d09a:	4613      	mov	r3, r2
 801d09c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801d09e:	79fb      	ldrb	r3, [r7, #7]
 801d0a0:	2b01      	cmp	r3, #1
 801d0a2:	d149      	bne.n	801d138 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801d0a4:	2000      	movs	r0, #0
 801d0a6:	f7f0 fda9 	bl	800dbfc <RBI_GetRFOMaxPowerConfig>
 801d0aa:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801d0ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801d0b0:	68fa      	ldr	r2, [r7, #12]
 801d0b2:	429a      	cmp	r2, r3
 801d0b4:	da01      	bge.n	801d0ba <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801d0b6:	68fb      	ldr	r3, [r7, #12]
 801d0b8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801d0ba:	68fb      	ldr	r3, [r7, #12]
 801d0bc:	2b0e      	cmp	r3, #14
 801d0be:	d10e      	bne.n	801d0de <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801d0c0:	2301      	movs	r3, #1
 801d0c2:	2201      	movs	r2, #1
 801d0c4:	2100      	movs	r1, #0
 801d0c6:	2004      	movs	r0, #4
 801d0c8:	f7ff fef6 	bl	801ceb8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801d0cc:	79ba      	ldrb	r2, [r7, #6]
 801d0ce:	68fb      	ldr	r3, [r7, #12]
 801d0d0:	b2db      	uxtb	r3, r3
 801d0d2:	1ad3      	subs	r3, r2, r3
 801d0d4:	b2db      	uxtb	r3, r3
 801d0d6:	330e      	adds	r3, #14
 801d0d8:	b2db      	uxtb	r3, r3
 801d0da:	71bb      	strb	r3, [r7, #6]
 801d0dc:	e01f      	b.n	801d11e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801d0de:	68fb      	ldr	r3, [r7, #12]
 801d0e0:	2b0a      	cmp	r3, #10
 801d0e2:	d10e      	bne.n	801d102 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801d0e4:	2301      	movs	r3, #1
 801d0e6:	2201      	movs	r2, #1
 801d0e8:	2100      	movs	r1, #0
 801d0ea:	2001      	movs	r0, #1
 801d0ec:	f7ff fee4 	bl	801ceb8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801d0f0:	79ba      	ldrb	r2, [r7, #6]
 801d0f2:	68fb      	ldr	r3, [r7, #12]
 801d0f4:	b2db      	uxtb	r3, r3
 801d0f6:	1ad3      	subs	r3, r2, r3
 801d0f8:	b2db      	uxtb	r3, r3
 801d0fa:	330d      	adds	r3, #13
 801d0fc:	b2db      	uxtb	r3, r3
 801d0fe:	71bb      	strb	r3, [r7, #6]
 801d100:	e00d      	b.n	801d11e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801d102:	2301      	movs	r3, #1
 801d104:	2201      	movs	r2, #1
 801d106:	2100      	movs	r1, #0
 801d108:	2007      	movs	r0, #7
 801d10a:	f7ff fed5 	bl	801ceb8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801d10e:	79ba      	ldrb	r2, [r7, #6]
 801d110:	68fb      	ldr	r3, [r7, #12]
 801d112:	b2db      	uxtb	r3, r3
 801d114:	1ad3      	subs	r3, r2, r3
 801d116:	b2db      	uxtb	r3, r3
 801d118:	330e      	adds	r3, #14
 801d11a:	b2db      	uxtb	r3, r3
 801d11c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801d11e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801d122:	f113 0f11 	cmn.w	r3, #17
 801d126:	da01      	bge.n	801d12c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801d128:	23ef      	movs	r3, #239	; 0xef
 801d12a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801d12c:	2118      	movs	r1, #24
 801d12e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801d132:	f000 fa93 	bl	801d65c <SUBGRF_WriteRegister>
 801d136:	e067      	b.n	801d208 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801d138:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801d13c:	f000 faa2 	bl	801d684 <SUBGRF_ReadRegister>
 801d140:	4603      	mov	r3, r0
 801d142:	f043 031e 	orr.w	r3, r3, #30
 801d146:	b2db      	uxtb	r3, r3
 801d148:	4619      	mov	r1, r3
 801d14a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801d14e:	f000 fa85 	bl	801d65c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801d152:	2001      	movs	r0, #1
 801d154:	f7f0 fd52 	bl	800dbfc <RBI_GetRFOMaxPowerConfig>
 801d158:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801d15a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801d15e:	68fa      	ldr	r2, [r7, #12]
 801d160:	429a      	cmp	r2, r3
 801d162:	da01      	bge.n	801d168 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801d164:	68fb      	ldr	r3, [r7, #12]
 801d166:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801d168:	68fb      	ldr	r3, [r7, #12]
 801d16a:	2b14      	cmp	r3, #20
 801d16c:	d10e      	bne.n	801d18c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801d16e:	2301      	movs	r3, #1
 801d170:	2200      	movs	r2, #0
 801d172:	2105      	movs	r1, #5
 801d174:	2003      	movs	r0, #3
 801d176:	f7ff fe9f 	bl	801ceb8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801d17a:	79ba      	ldrb	r2, [r7, #6]
 801d17c:	68fb      	ldr	r3, [r7, #12]
 801d17e:	b2db      	uxtb	r3, r3
 801d180:	1ad3      	subs	r3, r2, r3
 801d182:	b2db      	uxtb	r3, r3
 801d184:	3316      	adds	r3, #22
 801d186:	b2db      	uxtb	r3, r3
 801d188:	71bb      	strb	r3, [r7, #6]
 801d18a:	e031      	b.n	801d1f0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801d18c:	68fb      	ldr	r3, [r7, #12]
 801d18e:	2b11      	cmp	r3, #17
 801d190:	d10e      	bne.n	801d1b0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801d192:	2301      	movs	r3, #1
 801d194:	2200      	movs	r2, #0
 801d196:	2103      	movs	r1, #3
 801d198:	2002      	movs	r0, #2
 801d19a:	f7ff fe8d 	bl	801ceb8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801d19e:	79ba      	ldrb	r2, [r7, #6]
 801d1a0:	68fb      	ldr	r3, [r7, #12]
 801d1a2:	b2db      	uxtb	r3, r3
 801d1a4:	1ad3      	subs	r3, r2, r3
 801d1a6:	b2db      	uxtb	r3, r3
 801d1a8:	3316      	adds	r3, #22
 801d1aa:	b2db      	uxtb	r3, r3
 801d1ac:	71bb      	strb	r3, [r7, #6]
 801d1ae:	e01f      	b.n	801d1f0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801d1b0:	68fb      	ldr	r3, [r7, #12]
 801d1b2:	2b0e      	cmp	r3, #14
 801d1b4:	d10e      	bne.n	801d1d4 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801d1b6:	2301      	movs	r3, #1
 801d1b8:	2200      	movs	r2, #0
 801d1ba:	2102      	movs	r1, #2
 801d1bc:	2002      	movs	r0, #2
 801d1be:	f7ff fe7b 	bl	801ceb8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801d1c2:	79ba      	ldrb	r2, [r7, #6]
 801d1c4:	68fb      	ldr	r3, [r7, #12]
 801d1c6:	b2db      	uxtb	r3, r3
 801d1c8:	1ad3      	subs	r3, r2, r3
 801d1ca:	b2db      	uxtb	r3, r3
 801d1cc:	330e      	adds	r3, #14
 801d1ce:	b2db      	uxtb	r3, r3
 801d1d0:	71bb      	strb	r3, [r7, #6]
 801d1d2:	e00d      	b.n	801d1f0 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801d1d4:	2301      	movs	r3, #1
 801d1d6:	2200      	movs	r2, #0
 801d1d8:	2107      	movs	r1, #7
 801d1da:	2004      	movs	r0, #4
 801d1dc:	f7ff fe6c 	bl	801ceb8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801d1e0:	79ba      	ldrb	r2, [r7, #6]
 801d1e2:	68fb      	ldr	r3, [r7, #12]
 801d1e4:	b2db      	uxtb	r3, r3
 801d1e6:	1ad3      	subs	r3, r2, r3
 801d1e8:	b2db      	uxtb	r3, r3
 801d1ea:	3316      	adds	r3, #22
 801d1ec:	b2db      	uxtb	r3, r3
 801d1ee:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801d1f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801d1f4:	f113 0f09 	cmn.w	r3, #9
 801d1f8:	da01      	bge.n	801d1fe <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801d1fa:	23f7      	movs	r3, #247	; 0xf7
 801d1fc:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801d1fe:	2138      	movs	r1, #56	; 0x38
 801d200:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801d204:	f000 fa2a 	bl	801d65c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801d208:	79bb      	ldrb	r3, [r7, #6]
 801d20a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801d20c:	797b      	ldrb	r3, [r7, #5]
 801d20e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801d210:	f107 0308 	add.w	r3, r7, #8
 801d214:	2202      	movs	r2, #2
 801d216:	4619      	mov	r1, r3
 801d218:	208e      	movs	r0, #142	; 0x8e
 801d21a:	f000 facf 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801d21e:	bf00      	nop
 801d220:	3710      	adds	r7, #16
 801d222:	46bd      	mov	sp, r7
 801d224:	bd80      	pop	{r7, pc}
	...

0801d228 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801d228:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801d22c:	b086      	sub	sp, #24
 801d22e:	af00      	add	r7, sp, #0
 801d230:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801d232:	2300      	movs	r3, #0
 801d234:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801d236:	4a61      	ldr	r2, [pc, #388]	; (801d3bc <SUBGRF_SetModulationParams+0x194>)
 801d238:	f107 0308 	add.w	r3, r7, #8
 801d23c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d240:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	781a      	ldrb	r2, [r3, #0]
 801d248:	4b5d      	ldr	r3, [pc, #372]	; (801d3c0 <SUBGRF_SetModulationParams+0x198>)
 801d24a:	781b      	ldrb	r3, [r3, #0]
 801d24c:	429a      	cmp	r2, r3
 801d24e:	d004      	beq.n	801d25a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	781b      	ldrb	r3, [r3, #0]
 801d254:	4618      	mov	r0, r3
 801d256:	f7ff fef3 	bl	801d040 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	781b      	ldrb	r3, [r3, #0]
 801d25e:	2b03      	cmp	r3, #3
 801d260:	f200 80a5 	bhi.w	801d3ae <SUBGRF_SetModulationParams+0x186>
 801d264:	a201      	add	r2, pc, #4	; (adr r2, 801d26c <SUBGRF_SetModulationParams+0x44>)
 801d266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d26a:	bf00      	nop
 801d26c:	0801d27d 	.word	0x0801d27d
 801d270:	0801d33d 	.word	0x0801d33d
 801d274:	0801d2ff 	.word	0x0801d2ff
 801d278:	0801d36b 	.word	0x0801d36b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801d27c:	2308      	movs	r3, #8
 801d27e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	685b      	ldr	r3, [r3, #4]
 801d284:	4a4f      	ldr	r2, [pc, #316]	; (801d3c4 <SUBGRF_SetModulationParams+0x19c>)
 801d286:	fbb2 f3f3 	udiv	r3, r2, r3
 801d28a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801d28c:	697b      	ldr	r3, [r7, #20]
 801d28e:	0c1b      	lsrs	r3, r3, #16
 801d290:	b2db      	uxtb	r3, r3
 801d292:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801d294:	697b      	ldr	r3, [r7, #20]
 801d296:	0a1b      	lsrs	r3, r3, #8
 801d298:	b2db      	uxtb	r3, r3
 801d29a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801d29c:	697b      	ldr	r3, [r7, #20]
 801d29e:	b2db      	uxtb	r3, r3
 801d2a0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	7b1b      	ldrb	r3, [r3, #12]
 801d2a6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	7b5b      	ldrb	r3, [r3, #13]
 801d2ac:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801d2ae:	687b      	ldr	r3, [r7, #4]
 801d2b0:	689b      	ldr	r3, [r3, #8]
 801d2b2:	2200      	movs	r2, #0
 801d2b4:	461c      	mov	r4, r3
 801d2b6:	4615      	mov	r5, r2
 801d2b8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801d2bc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801d2c0:	4a41      	ldr	r2, [pc, #260]	; (801d3c8 <SUBGRF_SetModulationParams+0x1a0>)
 801d2c2:	f04f 0300 	mov.w	r3, #0
 801d2c6:	4640      	mov	r0, r8
 801d2c8:	4649      	mov	r1, r9
 801d2ca:	f7e3 fecf 	bl	800106c <__aeabi_uldivmod>
 801d2ce:	4602      	mov	r2, r0
 801d2d0:	460b      	mov	r3, r1
 801d2d2:	4613      	mov	r3, r2
 801d2d4:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801d2d6:	697b      	ldr	r3, [r7, #20]
 801d2d8:	0c1b      	lsrs	r3, r3, #16
 801d2da:	b2db      	uxtb	r3, r3
 801d2dc:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801d2de:	697b      	ldr	r3, [r7, #20]
 801d2e0:	0a1b      	lsrs	r3, r3, #8
 801d2e2:	b2db      	uxtb	r3, r3
 801d2e4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801d2e6:	697b      	ldr	r3, [r7, #20]
 801d2e8:	b2db      	uxtb	r3, r3
 801d2ea:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801d2ec:	7cfb      	ldrb	r3, [r7, #19]
 801d2ee:	b29a      	uxth	r2, r3
 801d2f0:	f107 0308 	add.w	r3, r7, #8
 801d2f4:	4619      	mov	r1, r3
 801d2f6:	208b      	movs	r0, #139	; 0x8b
 801d2f8:	f000 fa60 	bl	801d7bc <SUBGRF_WriteCommand>
        break;
 801d2fc:	e058      	b.n	801d3b0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801d2fe:	2304      	movs	r3, #4
 801d300:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	691b      	ldr	r3, [r3, #16]
 801d306:	4a2f      	ldr	r2, [pc, #188]	; (801d3c4 <SUBGRF_SetModulationParams+0x19c>)
 801d308:	fbb2 f3f3 	udiv	r3, r2, r3
 801d30c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801d30e:	697b      	ldr	r3, [r7, #20]
 801d310:	0c1b      	lsrs	r3, r3, #16
 801d312:	b2db      	uxtb	r3, r3
 801d314:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801d316:	697b      	ldr	r3, [r7, #20]
 801d318:	0a1b      	lsrs	r3, r3, #8
 801d31a:	b2db      	uxtb	r3, r3
 801d31c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801d31e:	697b      	ldr	r3, [r7, #20]
 801d320:	b2db      	uxtb	r3, r3
 801d322:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801d324:	687b      	ldr	r3, [r7, #4]
 801d326:	7d1b      	ldrb	r3, [r3, #20]
 801d328:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801d32a:	7cfb      	ldrb	r3, [r7, #19]
 801d32c:	b29a      	uxth	r2, r3
 801d32e:	f107 0308 	add.w	r3, r7, #8
 801d332:	4619      	mov	r1, r3
 801d334:	208b      	movs	r0, #139	; 0x8b
 801d336:	f000 fa41 	bl	801d7bc <SUBGRF_WriteCommand>
        break;
 801d33a:	e039      	b.n	801d3b0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801d33c:	2304      	movs	r3, #4
 801d33e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	7e1b      	ldrb	r3, [r3, #24]
 801d344:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	7e5b      	ldrb	r3, [r3, #25]
 801d34a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	7e9b      	ldrb	r3, [r3, #26]
 801d350:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801d352:	687b      	ldr	r3, [r7, #4]
 801d354:	7edb      	ldrb	r3, [r3, #27]
 801d356:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801d358:	7cfb      	ldrb	r3, [r7, #19]
 801d35a:	b29a      	uxth	r2, r3
 801d35c:	f107 0308 	add.w	r3, r7, #8
 801d360:	4619      	mov	r1, r3
 801d362:	208b      	movs	r0, #139	; 0x8b
 801d364:	f000 fa2a 	bl	801d7bc <SUBGRF_WriteCommand>

        break;
 801d368:	e022      	b.n	801d3b0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801d36a:	2305      	movs	r3, #5
 801d36c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	685b      	ldr	r3, [r3, #4]
 801d372:	4a14      	ldr	r2, [pc, #80]	; (801d3c4 <SUBGRF_SetModulationParams+0x19c>)
 801d374:	fbb2 f3f3 	udiv	r3, r2, r3
 801d378:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801d37a:	697b      	ldr	r3, [r7, #20]
 801d37c:	0c1b      	lsrs	r3, r3, #16
 801d37e:	b2db      	uxtb	r3, r3
 801d380:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801d382:	697b      	ldr	r3, [r7, #20]
 801d384:	0a1b      	lsrs	r3, r3, #8
 801d386:	b2db      	uxtb	r3, r3
 801d388:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801d38a:	697b      	ldr	r3, [r7, #20]
 801d38c:	b2db      	uxtb	r3, r3
 801d38e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	7b1b      	ldrb	r3, [r3, #12]
 801d394:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	7b5b      	ldrb	r3, [r3, #13]
 801d39a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801d39c:	7cfb      	ldrb	r3, [r7, #19]
 801d39e:	b29a      	uxth	r2, r3
 801d3a0:	f107 0308 	add.w	r3, r7, #8
 801d3a4:	4619      	mov	r1, r3
 801d3a6:	208b      	movs	r0, #139	; 0x8b
 801d3a8:	f000 fa08 	bl	801d7bc <SUBGRF_WriteCommand>
        break;
 801d3ac:	e000      	b.n	801d3b0 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801d3ae:	bf00      	nop
    }
}
 801d3b0:	bf00      	nop
 801d3b2:	3718      	adds	r7, #24
 801d3b4:	46bd      	mov	sp, r7
 801d3b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801d3ba:	bf00      	nop
 801d3bc:	0801fe74 	.word	0x0801fe74
 801d3c0:	20001d7d 	.word	0x20001d7d
 801d3c4:	3d090000 	.word	0x3d090000
 801d3c8:	01e84800 	.word	0x01e84800

0801d3cc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801d3cc:	b580      	push	{r7, lr}
 801d3ce:	b086      	sub	sp, #24
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801d3d4:	2300      	movs	r3, #0
 801d3d6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801d3d8:	4a48      	ldr	r2, [pc, #288]	; (801d4fc <SUBGRF_SetPacketParams+0x130>)
 801d3da:	f107 030c 	add.w	r3, r7, #12
 801d3de:	ca07      	ldmia	r2, {r0, r1, r2}
 801d3e0:	c303      	stmia	r3!, {r0, r1}
 801d3e2:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	781a      	ldrb	r2, [r3, #0]
 801d3e8:	4b45      	ldr	r3, [pc, #276]	; (801d500 <SUBGRF_SetPacketParams+0x134>)
 801d3ea:	781b      	ldrb	r3, [r3, #0]
 801d3ec:	429a      	cmp	r2, r3
 801d3ee:	d004      	beq.n	801d3fa <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	781b      	ldrb	r3, [r3, #0]
 801d3f4:	4618      	mov	r0, r3
 801d3f6:	f7ff fe23 	bl	801d040 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	781b      	ldrb	r3, [r3, #0]
 801d3fe:	2b03      	cmp	r3, #3
 801d400:	d878      	bhi.n	801d4f4 <SUBGRF_SetPacketParams+0x128>
 801d402:	a201      	add	r2, pc, #4	; (adr r2, 801d408 <SUBGRF_SetPacketParams+0x3c>)
 801d404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d408:	0801d419 	.word	0x0801d419
 801d40c:	0801d4a9 	.word	0x0801d4a9
 801d410:	0801d49d 	.word	0x0801d49d
 801d414:	0801d419 	.word	0x0801d419
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	7a5b      	ldrb	r3, [r3, #9]
 801d41c:	2bf1      	cmp	r3, #241	; 0xf1
 801d41e:	d10a      	bne.n	801d436 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801d420:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801d424:	f7ff faaa 	bl	801c97c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801d428:	f248 0005 	movw	r0, #32773	; 0x8005
 801d42c:	f7ff fac6 	bl	801c9bc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801d430:	2302      	movs	r3, #2
 801d432:	75bb      	strb	r3, [r7, #22]
 801d434:	e011      	b.n	801d45a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	7a5b      	ldrb	r3, [r3, #9]
 801d43a:	2bf2      	cmp	r3, #242	; 0xf2
 801d43c:	d10a      	bne.n	801d454 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801d43e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801d442:	f7ff fa9b 	bl	801c97c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801d446:	f241 0021 	movw	r0, #4129	; 0x1021
 801d44a:	f7ff fab7 	bl	801c9bc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801d44e:	2306      	movs	r3, #6
 801d450:	75bb      	strb	r3, [r7, #22]
 801d452:	e002      	b.n	801d45a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	7a5b      	ldrb	r3, [r3, #9]
 801d458:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801d45a:	2309      	movs	r3, #9
 801d45c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	885b      	ldrh	r3, [r3, #2]
 801d462:	0a1b      	lsrs	r3, r3, #8
 801d464:	b29b      	uxth	r3, r3
 801d466:	b2db      	uxtb	r3, r3
 801d468:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801d46a:	687b      	ldr	r3, [r7, #4]
 801d46c:	885b      	ldrh	r3, [r3, #2]
 801d46e:	b2db      	uxtb	r3, r3
 801d470:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	791b      	ldrb	r3, [r3, #4]
 801d476:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	795b      	ldrb	r3, [r3, #5]
 801d47c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	799b      	ldrb	r3, [r3, #6]
 801d482:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	79db      	ldrb	r3, [r3, #7]
 801d488:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	7a1b      	ldrb	r3, [r3, #8]
 801d48e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801d490:	7dbb      	ldrb	r3, [r7, #22]
 801d492:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	7a9b      	ldrb	r3, [r3, #10]
 801d498:	753b      	strb	r3, [r7, #20]
        break;
 801d49a:	e022      	b.n	801d4e2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801d49c:	2301      	movs	r3, #1
 801d49e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801d4a0:	687b      	ldr	r3, [r7, #4]
 801d4a2:	7b1b      	ldrb	r3, [r3, #12]
 801d4a4:	733b      	strb	r3, [r7, #12]
        break;
 801d4a6:	e01c      	b.n	801d4e2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801d4a8:	2306      	movs	r3, #6
 801d4aa:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	89db      	ldrh	r3, [r3, #14]
 801d4b0:	0a1b      	lsrs	r3, r3, #8
 801d4b2:	b29b      	uxth	r3, r3
 801d4b4:	b2db      	uxtb	r3, r3
 801d4b6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801d4b8:	687b      	ldr	r3, [r7, #4]
 801d4ba:	89db      	ldrh	r3, [r3, #14]
 801d4bc:	b2db      	uxtb	r3, r3
 801d4be:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	7c1a      	ldrb	r2, [r3, #16]
 801d4c4:	4b0f      	ldr	r3, [pc, #60]	; (801d504 <SUBGRF_SetPacketParams+0x138>)
 801d4c6:	4611      	mov	r1, r2
 801d4c8:	7019      	strb	r1, [r3, #0]
 801d4ca:	4613      	mov	r3, r2
 801d4cc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	7c5b      	ldrb	r3, [r3, #17]
 801d4d2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	7c9b      	ldrb	r3, [r3, #18]
 801d4d8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801d4da:	687b      	ldr	r3, [r7, #4]
 801d4dc:	7cdb      	ldrb	r3, [r3, #19]
 801d4de:	747b      	strb	r3, [r7, #17]
        break;
 801d4e0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801d4e2:	7dfb      	ldrb	r3, [r7, #23]
 801d4e4:	b29a      	uxth	r2, r3
 801d4e6:	f107 030c 	add.w	r3, r7, #12
 801d4ea:	4619      	mov	r1, r3
 801d4ec:	208c      	movs	r0, #140	; 0x8c
 801d4ee:	f000 f965 	bl	801d7bc <SUBGRF_WriteCommand>
 801d4f2:	e000      	b.n	801d4f6 <SUBGRF_SetPacketParams+0x12a>
        return;
 801d4f4:	bf00      	nop
}
 801d4f6:	3718      	adds	r7, #24
 801d4f8:	46bd      	mov	sp, r7
 801d4fa:	bd80      	pop	{r7, pc}
 801d4fc:	0801fe7c 	.word	0x0801fe7c
 801d500:	20001d7d 	.word	0x20001d7d
 801d504:	20001d7e 	.word	0x20001d7e

0801d508 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801d508:	b580      	push	{r7, lr}
 801d50a:	b084      	sub	sp, #16
 801d50c:	af00      	add	r7, sp, #0
 801d50e:	4603      	mov	r3, r0
 801d510:	460a      	mov	r2, r1
 801d512:	71fb      	strb	r3, [r7, #7]
 801d514:	4613      	mov	r3, r2
 801d516:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801d518:	79fb      	ldrb	r3, [r7, #7]
 801d51a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801d51c:	79bb      	ldrb	r3, [r7, #6]
 801d51e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801d520:	f107 030c 	add.w	r3, r7, #12
 801d524:	2202      	movs	r2, #2
 801d526:	4619      	mov	r1, r3
 801d528:	208f      	movs	r0, #143	; 0x8f
 801d52a:	f000 f947 	bl	801d7bc <SUBGRF_WriteCommand>
}
 801d52e:	bf00      	nop
 801d530:	3710      	adds	r7, #16
 801d532:	46bd      	mov	sp, r7
 801d534:	bd80      	pop	{r7, pc}

0801d536 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801d536:	b580      	push	{r7, lr}
 801d538:	b082      	sub	sp, #8
 801d53a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801d53c:	2300      	movs	r3, #0
 801d53e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801d540:	1d3b      	adds	r3, r7, #4
 801d542:	2201      	movs	r2, #1
 801d544:	4619      	mov	r1, r3
 801d546:	2015      	movs	r0, #21
 801d548:	f000 f95a 	bl	801d800 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801d54c:	793b      	ldrb	r3, [r7, #4]
 801d54e:	425b      	negs	r3, r3
 801d550:	105b      	asrs	r3, r3, #1
 801d552:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801d554:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801d558:	4618      	mov	r0, r3
 801d55a:	3708      	adds	r7, #8
 801d55c:	46bd      	mov	sp, r7
 801d55e:	bd80      	pop	{r7, pc}

0801d560 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801d560:	b580      	push	{r7, lr}
 801d562:	b084      	sub	sp, #16
 801d564:	af00      	add	r7, sp, #0
 801d566:	6078      	str	r0, [r7, #4]
 801d568:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801d56a:	f107 030c 	add.w	r3, r7, #12
 801d56e:	2202      	movs	r2, #2
 801d570:	4619      	mov	r1, r3
 801d572:	2013      	movs	r0, #19
 801d574:	f000 f944 	bl	801d800 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801d578:	f7ff fd7e 	bl	801d078 <SUBGRF_GetPacketType>
 801d57c:	4603      	mov	r3, r0
 801d57e:	2b01      	cmp	r3, #1
 801d580:	d10d      	bne.n	801d59e <SUBGRF_GetRxBufferStatus+0x3e>
 801d582:	4b0c      	ldr	r3, [pc, #48]	; (801d5b4 <SUBGRF_GetRxBufferStatus+0x54>)
 801d584:	781b      	ldrb	r3, [r3, #0]
 801d586:	b2db      	uxtb	r3, r3
 801d588:	2b01      	cmp	r3, #1
 801d58a:	d108      	bne.n	801d59e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801d58c:	f240 7002 	movw	r0, #1794	; 0x702
 801d590:	f000 f878 	bl	801d684 <SUBGRF_ReadRegister>
 801d594:	4603      	mov	r3, r0
 801d596:	461a      	mov	r2, r3
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	701a      	strb	r2, [r3, #0]
 801d59c:	e002      	b.n	801d5a4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801d59e:	7b3a      	ldrb	r2, [r7, #12]
 801d5a0:	687b      	ldr	r3, [r7, #4]
 801d5a2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801d5a4:	7b7a      	ldrb	r2, [r7, #13]
 801d5a6:	683b      	ldr	r3, [r7, #0]
 801d5a8:	701a      	strb	r2, [r3, #0]
}
 801d5aa:	bf00      	nop
 801d5ac:	3710      	adds	r7, #16
 801d5ae:	46bd      	mov	sp, r7
 801d5b0:	bd80      	pop	{r7, pc}
 801d5b2:	bf00      	nop
 801d5b4:	20001d7e 	.word	0x20001d7e

0801d5b8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801d5b8:	b580      	push	{r7, lr}
 801d5ba:	b084      	sub	sp, #16
 801d5bc:	af00      	add	r7, sp, #0
 801d5be:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801d5c0:	f107 030c 	add.w	r3, r7, #12
 801d5c4:	2203      	movs	r2, #3
 801d5c6:	4619      	mov	r1, r3
 801d5c8:	2014      	movs	r0, #20
 801d5ca:	f000 f919 	bl	801d800 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801d5ce:	f7ff fd53 	bl	801d078 <SUBGRF_GetPacketType>
 801d5d2:	4603      	mov	r3, r0
 801d5d4:	461a      	mov	r2, r3
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	781b      	ldrb	r3, [r3, #0]
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	d002      	beq.n	801d5e8 <SUBGRF_GetPacketStatus+0x30>
 801d5e2:	2b01      	cmp	r3, #1
 801d5e4:	d013      	beq.n	801d60e <SUBGRF_GetPacketStatus+0x56>
 801d5e6:	e02a      	b.n	801d63e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801d5e8:	7b3a      	ldrb	r2, [r7, #12]
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801d5ee:	7b7b      	ldrb	r3, [r7, #13]
 801d5f0:	425b      	negs	r3, r3
 801d5f2:	105b      	asrs	r3, r3, #1
 801d5f4:	b25a      	sxtb	r2, r3
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801d5fa:	7bbb      	ldrb	r3, [r7, #14]
 801d5fc:	425b      	negs	r3, r3
 801d5fe:	105b      	asrs	r3, r3, #1
 801d600:	b25a      	sxtb	r2, r3
 801d602:	687b      	ldr	r3, [r7, #4]
 801d604:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	2200      	movs	r2, #0
 801d60a:	609a      	str	r2, [r3, #8]
            break;
 801d60c:	e020      	b.n	801d650 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801d60e:	7b3b      	ldrb	r3, [r7, #12]
 801d610:	425b      	negs	r3, r3
 801d612:	105b      	asrs	r3, r3, #1
 801d614:	b25a      	sxtb	r2, r3
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801d61a:	7b7b      	ldrb	r3, [r7, #13]
 801d61c:	b25b      	sxtb	r3, r3
 801d61e:	3302      	adds	r3, #2
 801d620:	109b      	asrs	r3, r3, #2
 801d622:	b25a      	sxtb	r2, r3
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801d628:	7bbb      	ldrb	r3, [r7, #14]
 801d62a:	425b      	negs	r3, r3
 801d62c:	105b      	asrs	r3, r3, #1
 801d62e:	b25a      	sxtb	r2, r3
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801d634:	4b08      	ldr	r3, [pc, #32]	; (801d658 <SUBGRF_GetPacketStatus+0xa0>)
 801d636:	681a      	ldr	r2, [r3, #0]
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	611a      	str	r2, [r3, #16]
            break;
 801d63c:	e008      	b.n	801d650 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801d63e:	2214      	movs	r2, #20
 801d640:	2100      	movs	r1, #0
 801d642:	6878      	ldr	r0, [r7, #4]
 801d644:	f000 fc03 	bl	801de4e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801d648:	687b      	ldr	r3, [r7, #4]
 801d64a:	220f      	movs	r2, #15
 801d64c:	701a      	strb	r2, [r3, #0]
            break;
 801d64e:	bf00      	nop
    }
}
 801d650:	bf00      	nop
 801d652:	3710      	adds	r7, #16
 801d654:	46bd      	mov	sp, r7
 801d656:	bd80      	pop	{r7, pc}
 801d658:	20001d80 	.word	0x20001d80

0801d65c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801d65c:	b580      	push	{r7, lr}
 801d65e:	b082      	sub	sp, #8
 801d660:	af00      	add	r7, sp, #0
 801d662:	4603      	mov	r3, r0
 801d664:	460a      	mov	r2, r1
 801d666:	80fb      	strh	r3, [r7, #6]
 801d668:	4613      	mov	r3, r2
 801d66a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801d66c:	1d7a      	adds	r2, r7, #5
 801d66e:	88f9      	ldrh	r1, [r7, #6]
 801d670:	2301      	movs	r3, #1
 801d672:	4803      	ldr	r0, [pc, #12]	; (801d680 <SUBGRF_WriteRegister+0x24>)
 801d674:	f7ec fe46 	bl	800a304 <HAL_SUBGHZ_WriteRegisters>
}
 801d678:	bf00      	nop
 801d67a:	3708      	adds	r7, #8
 801d67c:	46bd      	mov	sp, r7
 801d67e:	bd80      	pop	{r7, pc}
 801d680:	200003cc 	.word	0x200003cc

0801d684 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801d684:	b580      	push	{r7, lr}
 801d686:	b084      	sub	sp, #16
 801d688:	af00      	add	r7, sp, #0
 801d68a:	4603      	mov	r3, r0
 801d68c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801d68e:	f107 020f 	add.w	r2, r7, #15
 801d692:	88f9      	ldrh	r1, [r7, #6]
 801d694:	2301      	movs	r3, #1
 801d696:	4804      	ldr	r0, [pc, #16]	; (801d6a8 <SUBGRF_ReadRegister+0x24>)
 801d698:	f7ec fe93 	bl	800a3c2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801d69c:	7bfb      	ldrb	r3, [r7, #15]
}
 801d69e:	4618      	mov	r0, r3
 801d6a0:	3710      	adds	r7, #16
 801d6a2:	46bd      	mov	sp, r7
 801d6a4:	bd80      	pop	{r7, pc}
 801d6a6:	bf00      	nop
 801d6a8:	200003cc 	.word	0x200003cc

0801d6ac <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801d6ac:	b580      	push	{r7, lr}
 801d6ae:	b086      	sub	sp, #24
 801d6b0:	af00      	add	r7, sp, #0
 801d6b2:	4603      	mov	r3, r0
 801d6b4:	6039      	str	r1, [r7, #0]
 801d6b6:	80fb      	strh	r3, [r7, #6]
 801d6b8:	4613      	mov	r3, r2
 801d6ba:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d6bc:	f3ef 8310 	mrs	r3, PRIMASK
 801d6c0:	60fb      	str	r3, [r7, #12]
  return(result);
 801d6c2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d6c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d6c6:	b672      	cpsid	i
}
 801d6c8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801d6ca:	88bb      	ldrh	r3, [r7, #4]
 801d6cc:	88f9      	ldrh	r1, [r7, #6]
 801d6ce:	683a      	ldr	r2, [r7, #0]
 801d6d0:	4806      	ldr	r0, [pc, #24]	; (801d6ec <SUBGRF_WriteRegisters+0x40>)
 801d6d2:	f7ec fe17 	bl	800a304 <HAL_SUBGHZ_WriteRegisters>
 801d6d6:	697b      	ldr	r3, [r7, #20]
 801d6d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d6da:	693b      	ldr	r3, [r7, #16]
 801d6dc:	f383 8810 	msr	PRIMASK, r3
}
 801d6e0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d6e2:	bf00      	nop
 801d6e4:	3718      	adds	r7, #24
 801d6e6:	46bd      	mov	sp, r7
 801d6e8:	bd80      	pop	{r7, pc}
 801d6ea:	bf00      	nop
 801d6ec:	200003cc 	.word	0x200003cc

0801d6f0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801d6f0:	b580      	push	{r7, lr}
 801d6f2:	b086      	sub	sp, #24
 801d6f4:	af00      	add	r7, sp, #0
 801d6f6:	4603      	mov	r3, r0
 801d6f8:	6039      	str	r1, [r7, #0]
 801d6fa:	80fb      	strh	r3, [r7, #6]
 801d6fc:	4613      	mov	r3, r2
 801d6fe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d700:	f3ef 8310 	mrs	r3, PRIMASK
 801d704:	60fb      	str	r3, [r7, #12]
  return(result);
 801d706:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d708:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d70a:	b672      	cpsid	i
}
 801d70c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801d70e:	88bb      	ldrh	r3, [r7, #4]
 801d710:	88f9      	ldrh	r1, [r7, #6]
 801d712:	683a      	ldr	r2, [r7, #0]
 801d714:	4806      	ldr	r0, [pc, #24]	; (801d730 <SUBGRF_ReadRegisters+0x40>)
 801d716:	f7ec fe54 	bl	800a3c2 <HAL_SUBGHZ_ReadRegisters>
 801d71a:	697b      	ldr	r3, [r7, #20]
 801d71c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d71e:	693b      	ldr	r3, [r7, #16]
 801d720:	f383 8810 	msr	PRIMASK, r3
}
 801d724:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d726:	bf00      	nop
 801d728:	3718      	adds	r7, #24
 801d72a:	46bd      	mov	sp, r7
 801d72c:	bd80      	pop	{r7, pc}
 801d72e:	bf00      	nop
 801d730:	200003cc 	.word	0x200003cc

0801d734 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801d734:	b580      	push	{r7, lr}
 801d736:	b086      	sub	sp, #24
 801d738:	af00      	add	r7, sp, #0
 801d73a:	4603      	mov	r3, r0
 801d73c:	6039      	str	r1, [r7, #0]
 801d73e:	71fb      	strb	r3, [r7, #7]
 801d740:	4613      	mov	r3, r2
 801d742:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d744:	f3ef 8310 	mrs	r3, PRIMASK
 801d748:	60fb      	str	r3, [r7, #12]
  return(result);
 801d74a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d74c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d74e:	b672      	cpsid	i
}
 801d750:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801d752:	79bb      	ldrb	r3, [r7, #6]
 801d754:	b29b      	uxth	r3, r3
 801d756:	79f9      	ldrb	r1, [r7, #7]
 801d758:	683a      	ldr	r2, [r7, #0]
 801d75a:	4806      	ldr	r0, [pc, #24]	; (801d774 <SUBGRF_WriteBuffer+0x40>)
 801d75c:	f7ec ff45 	bl	800a5ea <HAL_SUBGHZ_WriteBuffer>
 801d760:	697b      	ldr	r3, [r7, #20]
 801d762:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d764:	693b      	ldr	r3, [r7, #16]
 801d766:	f383 8810 	msr	PRIMASK, r3
}
 801d76a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d76c:	bf00      	nop
 801d76e:	3718      	adds	r7, #24
 801d770:	46bd      	mov	sp, r7
 801d772:	bd80      	pop	{r7, pc}
 801d774:	200003cc 	.word	0x200003cc

0801d778 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801d778:	b580      	push	{r7, lr}
 801d77a:	b086      	sub	sp, #24
 801d77c:	af00      	add	r7, sp, #0
 801d77e:	4603      	mov	r3, r0
 801d780:	6039      	str	r1, [r7, #0]
 801d782:	71fb      	strb	r3, [r7, #7]
 801d784:	4613      	mov	r3, r2
 801d786:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d788:	f3ef 8310 	mrs	r3, PRIMASK
 801d78c:	60fb      	str	r3, [r7, #12]
  return(result);
 801d78e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d792:	b672      	cpsid	i
}
 801d794:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801d796:	79bb      	ldrb	r3, [r7, #6]
 801d798:	b29b      	uxth	r3, r3
 801d79a:	79f9      	ldrb	r1, [r7, #7]
 801d79c:	683a      	ldr	r2, [r7, #0]
 801d79e:	4806      	ldr	r0, [pc, #24]	; (801d7b8 <SUBGRF_ReadBuffer+0x40>)
 801d7a0:	f7ec ff76 	bl	800a690 <HAL_SUBGHZ_ReadBuffer>
 801d7a4:	697b      	ldr	r3, [r7, #20]
 801d7a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7a8:	693b      	ldr	r3, [r7, #16]
 801d7aa:	f383 8810 	msr	PRIMASK, r3
}
 801d7ae:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d7b0:	bf00      	nop
 801d7b2:	3718      	adds	r7, #24
 801d7b4:	46bd      	mov	sp, r7
 801d7b6:	bd80      	pop	{r7, pc}
 801d7b8:	200003cc 	.word	0x200003cc

0801d7bc <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801d7bc:	b580      	push	{r7, lr}
 801d7be:	b086      	sub	sp, #24
 801d7c0:	af00      	add	r7, sp, #0
 801d7c2:	4603      	mov	r3, r0
 801d7c4:	6039      	str	r1, [r7, #0]
 801d7c6:	71fb      	strb	r3, [r7, #7]
 801d7c8:	4613      	mov	r3, r2
 801d7ca:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7cc:	f3ef 8310 	mrs	r3, PRIMASK
 801d7d0:	60fb      	str	r3, [r7, #12]
  return(result);
 801d7d2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d7d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d7d6:	b672      	cpsid	i
}
 801d7d8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801d7da:	88bb      	ldrh	r3, [r7, #4]
 801d7dc:	79f9      	ldrb	r1, [r7, #7]
 801d7de:	683a      	ldr	r2, [r7, #0]
 801d7e0:	4806      	ldr	r0, [pc, #24]	; (801d7fc <SUBGRF_WriteCommand+0x40>)
 801d7e2:	f7ec fe4f 	bl	800a484 <HAL_SUBGHZ_ExecSetCmd>
 801d7e6:	697b      	ldr	r3, [r7, #20]
 801d7e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7ea:	693b      	ldr	r3, [r7, #16]
 801d7ec:	f383 8810 	msr	PRIMASK, r3
}
 801d7f0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d7f2:	bf00      	nop
 801d7f4:	3718      	adds	r7, #24
 801d7f6:	46bd      	mov	sp, r7
 801d7f8:	bd80      	pop	{r7, pc}
 801d7fa:	bf00      	nop
 801d7fc:	200003cc 	.word	0x200003cc

0801d800 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801d800:	b580      	push	{r7, lr}
 801d802:	b086      	sub	sp, #24
 801d804:	af00      	add	r7, sp, #0
 801d806:	4603      	mov	r3, r0
 801d808:	6039      	str	r1, [r7, #0]
 801d80a:	71fb      	strb	r3, [r7, #7]
 801d80c:	4613      	mov	r3, r2
 801d80e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d810:	f3ef 8310 	mrs	r3, PRIMASK
 801d814:	60fb      	str	r3, [r7, #12]
  return(result);
 801d816:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d818:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d81a:	b672      	cpsid	i
}
 801d81c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801d81e:	88bb      	ldrh	r3, [r7, #4]
 801d820:	79f9      	ldrb	r1, [r7, #7]
 801d822:	683a      	ldr	r2, [r7, #0]
 801d824:	4806      	ldr	r0, [pc, #24]	; (801d840 <SUBGRF_ReadCommand+0x40>)
 801d826:	f7ec fe8c 	bl	800a542 <HAL_SUBGHZ_ExecGetCmd>
 801d82a:	697b      	ldr	r3, [r7, #20]
 801d82c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d82e:	693b      	ldr	r3, [r7, #16]
 801d830:	f383 8810 	msr	PRIMASK, r3
}
 801d834:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d836:	bf00      	nop
 801d838:	3718      	adds	r7, #24
 801d83a:	46bd      	mov	sp, r7
 801d83c:	bd80      	pop	{r7, pc}
 801d83e:	bf00      	nop
 801d840:	200003cc 	.word	0x200003cc

0801d844 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801d844:	b580      	push	{r7, lr}
 801d846:	b084      	sub	sp, #16
 801d848:	af00      	add	r7, sp, #0
 801d84a:	4603      	mov	r3, r0
 801d84c:	460a      	mov	r2, r1
 801d84e:	71fb      	strb	r3, [r7, #7]
 801d850:	4613      	mov	r3, r2
 801d852:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801d854:	2301      	movs	r3, #1
 801d856:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801d858:	79bb      	ldrb	r3, [r7, #6]
 801d85a:	2b01      	cmp	r3, #1
 801d85c:	d10d      	bne.n	801d87a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801d85e:	79fb      	ldrb	r3, [r7, #7]
 801d860:	2b01      	cmp	r3, #1
 801d862:	d104      	bne.n	801d86e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801d864:	2302      	movs	r3, #2
 801d866:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801d868:	2004      	movs	r0, #4
 801d86a:	f000 f8ef 	bl	801da4c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801d86e:	79fb      	ldrb	r3, [r7, #7]
 801d870:	2b02      	cmp	r3, #2
 801d872:	d107      	bne.n	801d884 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801d874:	2303      	movs	r3, #3
 801d876:	73fb      	strb	r3, [r7, #15]
 801d878:	e004      	b.n	801d884 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801d87a:	79bb      	ldrb	r3, [r7, #6]
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	d101      	bne.n	801d884 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801d880:	2301      	movs	r3, #1
 801d882:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801d884:	7bfb      	ldrb	r3, [r7, #15]
 801d886:	4618      	mov	r0, r3
 801d888:	f7f0 f995 	bl	800dbb6 <RBI_ConfigRFSwitch>
}
 801d88c:	bf00      	nop
 801d88e:	3710      	adds	r7, #16
 801d890:	46bd      	mov	sp, r7
 801d892:	bd80      	pop	{r7, pc}

0801d894 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801d894:	b580      	push	{r7, lr}
 801d896:	b084      	sub	sp, #16
 801d898:	af00      	add	r7, sp, #0
 801d89a:	4603      	mov	r3, r0
 801d89c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801d89e:	2301      	movs	r3, #1
 801d8a0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801d8a2:	f7f0 f996 	bl	800dbd2 <RBI_GetTxConfig>
 801d8a6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801d8a8:	68bb      	ldr	r3, [r7, #8]
 801d8aa:	2b02      	cmp	r3, #2
 801d8ac:	d016      	beq.n	801d8dc <SUBGRF_SetRfTxPower+0x48>
 801d8ae:	68bb      	ldr	r3, [r7, #8]
 801d8b0:	2b02      	cmp	r3, #2
 801d8b2:	dc16      	bgt.n	801d8e2 <SUBGRF_SetRfTxPower+0x4e>
 801d8b4:	68bb      	ldr	r3, [r7, #8]
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d003      	beq.n	801d8c2 <SUBGRF_SetRfTxPower+0x2e>
 801d8ba:	68bb      	ldr	r3, [r7, #8]
 801d8bc:	2b01      	cmp	r3, #1
 801d8be:	d00a      	beq.n	801d8d6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801d8c0:	e00f      	b.n	801d8e2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801d8c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d8c6:	2b0f      	cmp	r3, #15
 801d8c8:	dd02      	ble.n	801d8d0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801d8ca:	2302      	movs	r3, #2
 801d8cc:	73fb      	strb	r3, [r7, #15]
            break;
 801d8ce:	e009      	b.n	801d8e4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801d8d0:	2301      	movs	r3, #1
 801d8d2:	73fb      	strb	r3, [r7, #15]
            break;
 801d8d4:	e006      	b.n	801d8e4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801d8d6:	2301      	movs	r3, #1
 801d8d8:	73fb      	strb	r3, [r7, #15]
            break;
 801d8da:	e003      	b.n	801d8e4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801d8dc:	2302      	movs	r3, #2
 801d8de:	73fb      	strb	r3, [r7, #15]
            break;
 801d8e0:	e000      	b.n	801d8e4 <SUBGRF_SetRfTxPower+0x50>
            break;
 801d8e2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801d8e4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801d8e8:	7bfb      	ldrb	r3, [r7, #15]
 801d8ea:	2202      	movs	r2, #2
 801d8ec:	4618      	mov	r0, r3
 801d8ee:	f7ff fbcd 	bl	801d08c <SUBGRF_SetTxParams>

    return paSelect;
 801d8f2:	7bfb      	ldrb	r3, [r7, #15]
}
 801d8f4:	4618      	mov	r0, r3
 801d8f6:	3710      	adds	r7, #16
 801d8f8:	46bd      	mov	sp, r7
 801d8fa:	bd80      	pop	{r7, pc}

0801d8fc <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801d8fc:	b480      	push	{r7}
 801d8fe:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801d900:	2301      	movs	r3, #1
}
 801d902:	4618      	mov	r0, r3
 801d904:	46bd      	mov	sp, r7
 801d906:	bc80      	pop	{r7}
 801d908:	4770      	bx	lr
	...

0801d90c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d90c:	b580      	push	{r7, lr}
 801d90e:	b082      	sub	sp, #8
 801d910:	af00      	add	r7, sp, #0
 801d912:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801d914:	4b03      	ldr	r3, [pc, #12]	; (801d924 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	2001      	movs	r0, #1
 801d91a:	4798      	blx	r3
}
 801d91c:	bf00      	nop
 801d91e:	3708      	adds	r7, #8
 801d920:	46bd      	mov	sp, r7
 801d922:	bd80      	pop	{r7, pc}
 801d924:	20001d88 	.word	0x20001d88

0801d928 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d928:	b580      	push	{r7, lr}
 801d92a:	b082      	sub	sp, #8
 801d92c:	af00      	add	r7, sp, #0
 801d92e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801d930:	4b03      	ldr	r3, [pc, #12]	; (801d940 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801d932:	681b      	ldr	r3, [r3, #0]
 801d934:	2002      	movs	r0, #2
 801d936:	4798      	blx	r3
}
 801d938:	bf00      	nop
 801d93a:	3708      	adds	r7, #8
 801d93c:	46bd      	mov	sp, r7
 801d93e:	bd80      	pop	{r7, pc}
 801d940:	20001d88 	.word	0x20001d88

0801d944 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801d944:	b580      	push	{r7, lr}
 801d946:	b082      	sub	sp, #8
 801d948:	af00      	add	r7, sp, #0
 801d94a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801d94c:	4b03      	ldr	r3, [pc, #12]	; (801d95c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801d94e:	681b      	ldr	r3, [r3, #0]
 801d950:	2040      	movs	r0, #64	; 0x40
 801d952:	4798      	blx	r3
}
 801d954:	bf00      	nop
 801d956:	3708      	adds	r7, #8
 801d958:	46bd      	mov	sp, r7
 801d95a:	bd80      	pop	{r7, pc}
 801d95c:	20001d88 	.word	0x20001d88

0801d960 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801d960:	b580      	push	{r7, lr}
 801d962:	b082      	sub	sp, #8
 801d964:	af00      	add	r7, sp, #0
 801d966:	6078      	str	r0, [r7, #4]
 801d968:	460b      	mov	r3, r1
 801d96a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801d96c:	78fb      	ldrb	r3, [r7, #3]
 801d96e:	2b00      	cmp	r3, #0
 801d970:	d002      	beq.n	801d978 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801d972:	2b01      	cmp	r3, #1
 801d974:	d005      	beq.n	801d982 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801d976:	e00a      	b.n	801d98e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801d978:	4b07      	ldr	r3, [pc, #28]	; (801d998 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d97a:	681b      	ldr	r3, [r3, #0]
 801d97c:	2080      	movs	r0, #128	; 0x80
 801d97e:	4798      	blx	r3
            break;
 801d980:	e005      	b.n	801d98e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801d982:	4b05      	ldr	r3, [pc, #20]	; (801d998 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d984:	681b      	ldr	r3, [r3, #0]
 801d986:	f44f 7080 	mov.w	r0, #256	; 0x100
 801d98a:	4798      	blx	r3
            break;
 801d98c:	bf00      	nop
    }
}
 801d98e:	bf00      	nop
 801d990:	3708      	adds	r7, #8
 801d992:	46bd      	mov	sp, r7
 801d994:	bd80      	pop	{r7, pc}
 801d996:	bf00      	nop
 801d998:	20001d88 	.word	0x20001d88

0801d99c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d99c:	b580      	push	{r7, lr}
 801d99e:	b082      	sub	sp, #8
 801d9a0:	af00      	add	r7, sp, #0
 801d9a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801d9a4:	4b04      	ldr	r3, [pc, #16]	; (801d9b8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801d9a6:	681b      	ldr	r3, [r3, #0]
 801d9a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 801d9ac:	4798      	blx	r3
}
 801d9ae:	bf00      	nop
 801d9b0:	3708      	adds	r7, #8
 801d9b2:	46bd      	mov	sp, r7
 801d9b4:	bd80      	pop	{r7, pc}
 801d9b6:	bf00      	nop
 801d9b8:	20001d88 	.word	0x20001d88

0801d9bc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d9bc:	b580      	push	{r7, lr}
 801d9be:	b082      	sub	sp, #8
 801d9c0:	af00      	add	r7, sp, #0
 801d9c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801d9c4:	4b03      	ldr	r3, [pc, #12]	; (801d9d4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801d9c6:	681b      	ldr	r3, [r3, #0]
 801d9c8:	2020      	movs	r0, #32
 801d9ca:	4798      	blx	r3
}
 801d9cc:	bf00      	nop
 801d9ce:	3708      	adds	r7, #8
 801d9d0:	46bd      	mov	sp, r7
 801d9d2:	bd80      	pop	{r7, pc}
 801d9d4:	20001d88 	.word	0x20001d88

0801d9d8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d9d8:	b580      	push	{r7, lr}
 801d9da:	b082      	sub	sp, #8
 801d9dc:	af00      	add	r7, sp, #0
 801d9de:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801d9e0:	4b03      	ldr	r3, [pc, #12]	; (801d9f0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801d9e2:	681b      	ldr	r3, [r3, #0]
 801d9e4:	2004      	movs	r0, #4
 801d9e6:	4798      	blx	r3
}
 801d9e8:	bf00      	nop
 801d9ea:	3708      	adds	r7, #8
 801d9ec:	46bd      	mov	sp, r7
 801d9ee:	bd80      	pop	{r7, pc}
 801d9f0:	20001d88 	.word	0x20001d88

0801d9f4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d9f4:	b580      	push	{r7, lr}
 801d9f6:	b082      	sub	sp, #8
 801d9f8:	af00      	add	r7, sp, #0
 801d9fa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801d9fc:	4b03      	ldr	r3, [pc, #12]	; (801da0c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801d9fe:	681b      	ldr	r3, [r3, #0]
 801da00:	2008      	movs	r0, #8
 801da02:	4798      	blx	r3
}
 801da04:	bf00      	nop
 801da06:	3708      	adds	r7, #8
 801da08:	46bd      	mov	sp, r7
 801da0a:	bd80      	pop	{r7, pc}
 801da0c:	20001d88 	.word	0x20001d88

0801da10 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801da10:	b580      	push	{r7, lr}
 801da12:	b082      	sub	sp, #8
 801da14:	af00      	add	r7, sp, #0
 801da16:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801da18:	4b03      	ldr	r3, [pc, #12]	; (801da28 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801da1a:	681b      	ldr	r3, [r3, #0]
 801da1c:	2010      	movs	r0, #16
 801da1e:	4798      	blx	r3
}
 801da20:	bf00      	nop
 801da22:	3708      	adds	r7, #8
 801da24:	46bd      	mov	sp, r7
 801da26:	bd80      	pop	{r7, pc}
 801da28:	20001d88 	.word	0x20001d88

0801da2c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801da2c:	b580      	push	{r7, lr}
 801da2e:	b082      	sub	sp, #8
 801da30:	af00      	add	r7, sp, #0
 801da32:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801da34:	4b04      	ldr	r3, [pc, #16]	; (801da48 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801da36:	681b      	ldr	r3, [r3, #0]
 801da38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801da3c:	4798      	blx	r3
}
 801da3e:	bf00      	nop
 801da40:	3708      	adds	r7, #8
 801da42:	46bd      	mov	sp, r7
 801da44:	bd80      	pop	{r7, pc}
 801da46:	bf00      	nop
 801da48:	20001d88 	.word	0x20001d88

0801da4c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801da4c:	b580      	push	{r7, lr}
 801da4e:	b084      	sub	sp, #16
 801da50:	af00      	add	r7, sp, #0
 801da52:	4603      	mov	r3, r0
 801da54:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801da56:	f7f0 f8ca 	bl	800dbee <RBI_IsDCDC>
 801da5a:	4603      	mov	r3, r0
 801da5c:	2b01      	cmp	r3, #1
 801da5e:	d112      	bne.n	801da86 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801da60:	f640 1023 	movw	r0, #2339	; 0x923
 801da64:	f7ff fe0e 	bl	801d684 <SUBGRF_ReadRegister>
 801da68:	4603      	mov	r3, r0
 801da6a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801da6c:	7bfb      	ldrb	r3, [r7, #15]
 801da6e:	f023 0306 	bic.w	r3, r3, #6
 801da72:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801da74:	7bfa      	ldrb	r2, [r7, #15]
 801da76:	79fb      	ldrb	r3, [r7, #7]
 801da78:	4313      	orrs	r3, r2
 801da7a:	b2db      	uxtb	r3, r3
 801da7c:	4619      	mov	r1, r3
 801da7e:	f640 1023 	movw	r0, #2339	; 0x923
 801da82:	f7ff fdeb 	bl	801d65c <SUBGRF_WriteRegister>
  }
}
 801da86:	bf00      	nop
 801da88:	3710      	adds	r7, #16
 801da8a:	46bd      	mov	sp, r7
 801da8c:	bd80      	pop	{r7, pc}
	...

0801da90 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801da90:	b480      	push	{r7}
 801da92:	b085      	sub	sp, #20
 801da94:	af00      	add	r7, sp, #0
 801da96:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d101      	bne.n	801daa2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801da9e:	231f      	movs	r3, #31
 801daa0:	e016      	b.n	801dad0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801daa2:	2300      	movs	r3, #0
 801daa4:	73fb      	strb	r3, [r7, #15]
 801daa6:	e00f      	b.n	801dac8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801daa8:	7bfb      	ldrb	r3, [r7, #15]
 801daaa:	4a0c      	ldr	r2, [pc, #48]	; (801dadc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801daac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801dab0:	687a      	ldr	r2, [r7, #4]
 801dab2:	429a      	cmp	r2, r3
 801dab4:	d205      	bcs.n	801dac2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801dab6:	7bfb      	ldrb	r3, [r7, #15]
 801dab8:	4a08      	ldr	r2, [pc, #32]	; (801dadc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801daba:	00db      	lsls	r3, r3, #3
 801dabc:	4413      	add	r3, r2
 801dabe:	791b      	ldrb	r3, [r3, #4]
 801dac0:	e006      	b.n	801dad0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801dac2:	7bfb      	ldrb	r3, [r7, #15]
 801dac4:	3301      	adds	r3, #1
 801dac6:	73fb      	strb	r3, [r7, #15]
 801dac8:	7bfb      	ldrb	r3, [r7, #15]
 801daca:	2b15      	cmp	r3, #21
 801dacc:	d9ec      	bls.n	801daa8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801dace:	e7fe      	b.n	801dace <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801dad0:	4618      	mov	r0, r3
 801dad2:	3714      	adds	r7, #20
 801dad4:	46bd      	mov	sp, r7
 801dad6:	bc80      	pop	{r7}
 801dad8:	4770      	bx	lr
 801dada:	bf00      	nop
 801dadc:	080204b8 	.word	0x080204b8

0801dae0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801dae0:	b580      	push	{r7, lr}
 801dae2:	b08a      	sub	sp, #40	; 0x28
 801dae4:	af00      	add	r7, sp, #0
 801dae6:	6078      	str	r0, [r7, #4]
 801dae8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801daea:	4b35      	ldr	r3, [pc, #212]	; (801dbc0 <SUBGRF_GetCFO+0xe0>)
 801daec:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801daee:	f640 0007 	movw	r0, #2055	; 0x807
 801daf2:	f7ff fdc7 	bl	801d684 <SUBGRF_ReadRegister>
 801daf6:	4603      	mov	r3, r0
 801daf8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801dafa:	7ffb      	ldrb	r3, [r7, #31]
 801dafc:	08db      	lsrs	r3, r3, #3
 801dafe:	b2db      	uxtb	r3, r3
 801db00:	f003 0303 	and.w	r3, r3, #3
 801db04:	3328      	adds	r3, #40	; 0x28
 801db06:	443b      	add	r3, r7
 801db08:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801db0c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801db0e:	7ffb      	ldrb	r3, [r7, #31]
 801db10:	f003 0307 	and.w	r3, r3, #7
 801db14:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801db16:	7fba      	ldrb	r2, [r7, #30]
 801db18:	7f7b      	ldrb	r3, [r7, #29]
 801db1a:	3301      	adds	r3, #1
 801db1c:	fa02 f303 	lsl.w	r3, r2, r3
 801db20:	461a      	mov	r2, r3
 801db22:	4b28      	ldr	r3, [pc, #160]	; (801dbc4 <SUBGRF_GetCFO+0xe4>)
 801db24:	fbb3 f3f2 	udiv	r3, r3, r2
 801db28:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801db2a:	69ba      	ldr	r2, [r7, #24]
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	fbb2 f3f3 	udiv	r3, r2, r3
 801db32:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801db34:	2301      	movs	r3, #1
 801db36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801db3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801db3e:	697a      	ldr	r2, [r7, #20]
 801db40:	fb02 f303 	mul.w	r3, r2, r3
 801db44:	2b07      	cmp	r3, #7
 801db46:	d802      	bhi.n	801db4e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801db48:	2302      	movs	r3, #2
 801db4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801db4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801db52:	697a      	ldr	r2, [r7, #20]
 801db54:	fb02 f303 	mul.w	r3, r2, r3
 801db58:	2b03      	cmp	r3, #3
 801db5a:	d802      	bhi.n	801db62 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801db5c:	2304      	movs	r3, #4
 801db5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801db62:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801db66:	69bb      	ldr	r3, [r7, #24]
 801db68:	fb02 f303 	mul.w	r3, r2, r3
 801db6c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801db6e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801db72:	f7ff fd87 	bl	801d684 <SUBGRF_ReadRegister>
 801db76:	4603      	mov	r3, r0
 801db78:	021b      	lsls	r3, r3, #8
 801db7a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801db7e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801db80:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801db84:	f7ff fd7e 	bl	801d684 <SUBGRF_ReadRegister>
 801db88:	4603      	mov	r3, r0
 801db8a:	461a      	mov	r2, r3
 801db8c:	6a3b      	ldr	r3, [r7, #32]
 801db8e:	4313      	orrs	r3, r2
 801db90:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801db92:	6a3b      	ldr	r3, [r7, #32]
 801db94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801db98:	2b00      	cmp	r3, #0
 801db9a:	d005      	beq.n	801dba8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801db9c:	6a3b      	ldr	r3, [r7, #32]
 801db9e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801dba2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801dba6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801dba8:	693b      	ldr	r3, [r7, #16]
 801dbaa:	095b      	lsrs	r3, r3, #5
 801dbac:	6a3a      	ldr	r2, [r7, #32]
 801dbae:	fb02 f303 	mul.w	r3, r2, r3
 801dbb2:	11da      	asrs	r2, r3, #7
 801dbb4:	683b      	ldr	r3, [r7, #0]
 801dbb6:	601a      	str	r2, [r3, #0]
}
 801dbb8:	bf00      	nop
 801dbba:	3728      	adds	r7, #40	; 0x28
 801dbbc:	46bd      	mov	sp, r7
 801dbbe:	bd80      	pop	{r7, pc}
 801dbc0:	0c0a0804 	.word	0x0c0a0804
 801dbc4:	01e84800 	.word	0x01e84800

0801dbc8 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801dbc8:	b480      	push	{r7}
 801dbca:	b087      	sub	sp, #28
 801dbcc:	af00      	add	r7, sp, #0
 801dbce:	4603      	mov	r3, r0
 801dbd0:	60b9      	str	r1, [r7, #8]
 801dbd2:	607a      	str	r2, [r7, #4]
 801dbd4:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801dbd6:	2300      	movs	r3, #0
 801dbd8:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801dbda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dbde:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801dbe0:	697b      	ldr	r3, [r7, #20]
}
 801dbe2:	4618      	mov	r0, r3
 801dbe4:	371c      	adds	r7, #28
 801dbe6:	46bd      	mov	sp, r7
 801dbe8:	bc80      	pop	{r7}
 801dbea:	4770      	bx	lr

0801dbec <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801dbec:	b480      	push	{r7}
 801dbee:	b087      	sub	sp, #28
 801dbf0:	af00      	add	r7, sp, #0
 801dbf2:	4603      	mov	r3, r0
 801dbf4:	60b9      	str	r1, [r7, #8]
 801dbf6:	607a      	str	r2, [r7, #4]
 801dbf8:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801dbfa:	2300      	movs	r3, #0
 801dbfc:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801dbfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dc02:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801dc04:	697b      	ldr	r3, [r7, #20]
}
 801dc06:	4618      	mov	r0, r3
 801dc08:	371c      	adds	r7, #28
 801dc0a:	46bd      	mov	sp, r7
 801dc0c:	bc80      	pop	{r7}
 801dc0e:	4770      	bx	lr

0801dc10 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801dc10:	b480      	push	{r7}
 801dc12:	b085      	sub	sp, #20
 801dc14:	af00      	add	r7, sp, #0
 801dc16:	60f8      	str	r0, [r7, #12]
 801dc18:	60b9      	str	r1, [r7, #8]
 801dc1a:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801dc1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801dc20:	4618      	mov	r0, r3
 801dc22:	3714      	adds	r7, #20
 801dc24:	46bd      	mov	sp, r7
 801dc26:	bc80      	pop	{r7}
 801dc28:	4770      	bx	lr

0801dc2a <RFW_DeInit>:

void RFW_DeInit( void )
{
 801dc2a:	b480      	push	{r7}
 801dc2c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801dc2e:	bf00      	nop
 801dc30:	46bd      	mov	sp, r7
 801dc32:	bc80      	pop	{r7}
 801dc34:	4770      	bx	lr

0801dc36 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801dc36:	b480      	push	{r7}
 801dc38:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801dc3a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801dc3c:	4618      	mov	r0, r3
 801dc3e:	46bd      	mov	sp, r7
 801dc40:	bc80      	pop	{r7}
 801dc42:	4770      	bx	lr

0801dc44 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801dc44:	b480      	push	{r7}
 801dc46:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801dc48:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801dc4a:	4618      	mov	r0, r3
 801dc4c:	46bd      	mov	sp, r7
 801dc4e:	bc80      	pop	{r7}
 801dc50:	4770      	bx	lr

0801dc52 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801dc52:	b480      	push	{r7}
 801dc54:	b083      	sub	sp, #12
 801dc56:	af00      	add	r7, sp, #0
 801dc58:	4603      	mov	r3, r0
 801dc5a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801dc5c:	bf00      	nop
 801dc5e:	370c      	adds	r7, #12
 801dc60:	46bd      	mov	sp, r7
 801dc62:	bc80      	pop	{r7}
 801dc64:	4770      	bx	lr

0801dc66 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801dc66:	b480      	push	{r7}
 801dc68:	b087      	sub	sp, #28
 801dc6a:	af00      	add	r7, sp, #0
 801dc6c:	60f8      	str	r0, [r7, #12]
 801dc6e:	460b      	mov	r3, r1
 801dc70:	607a      	str	r2, [r7, #4]
 801dc72:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801dc74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dc78:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801dc7a:	697b      	ldr	r3, [r7, #20]
}
 801dc7c:	4618      	mov	r0, r3
 801dc7e:	371c      	adds	r7, #28
 801dc80:	46bd      	mov	sp, r7
 801dc82:	bc80      	pop	{r7}
 801dc84:	4770      	bx	lr

0801dc86 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801dc86:	b480      	push	{r7}
 801dc88:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801dc8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801dc8e:	4618      	mov	r0, r3
 801dc90:	46bd      	mov	sp, r7
 801dc92:	bc80      	pop	{r7}
 801dc94:	4770      	bx	lr

0801dc96 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801dc96:	b480      	push	{r7}
 801dc98:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801dc9a:	bf00      	nop
 801dc9c:	46bd      	mov	sp, r7
 801dc9e:	bc80      	pop	{r7}
 801dca0:	4770      	bx	lr

0801dca2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801dca2:	b480      	push	{r7}
 801dca4:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801dca6:	bf00      	nop
 801dca8:	46bd      	mov	sp, r7
 801dcaa:	bc80      	pop	{r7}
 801dcac:	4770      	bx	lr

0801dcae <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801dcae:	b480      	push	{r7}
 801dcb0:	b083      	sub	sp, #12
 801dcb2:	af00      	add	r7, sp, #0
 801dcb4:	4603      	mov	r3, r0
 801dcb6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801dcb8:	bf00      	nop
 801dcba:	370c      	adds	r7, #12
 801dcbc:	46bd      	mov	sp, r7
 801dcbe:	bc80      	pop	{r7}
 801dcc0:	4770      	bx	lr
	...

0801dcc4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801dcc4:	b480      	push	{r7}
 801dcc6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801dcc8:	4b04      	ldr	r3, [pc, #16]	; (801dcdc <UTIL_LPM_Init+0x18>)
 801dcca:	2200      	movs	r2, #0
 801dccc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801dcce:	4b04      	ldr	r3, [pc, #16]	; (801dce0 <UTIL_LPM_Init+0x1c>)
 801dcd0:	2200      	movs	r2, #0
 801dcd2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801dcd4:	bf00      	nop
 801dcd6:	46bd      	mov	sp, r7
 801dcd8:	bc80      	pop	{r7}
 801dcda:	4770      	bx	lr
 801dcdc:	20001d8c 	.word	0x20001d8c
 801dce0:	20001d90 	.word	0x20001d90

0801dce4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801dce4:	b480      	push	{r7}
 801dce6:	b087      	sub	sp, #28
 801dce8:	af00      	add	r7, sp, #0
 801dcea:	6078      	str	r0, [r7, #4]
 801dcec:	460b      	mov	r3, r1
 801dcee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dcf0:	f3ef 8310 	mrs	r3, PRIMASK
 801dcf4:	613b      	str	r3, [r7, #16]
  return(result);
 801dcf6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801dcf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801dcfa:	b672      	cpsid	i
}
 801dcfc:	bf00      	nop
  
  switch( state )
 801dcfe:	78fb      	ldrb	r3, [r7, #3]
 801dd00:	2b00      	cmp	r3, #0
 801dd02:	d008      	beq.n	801dd16 <UTIL_LPM_SetStopMode+0x32>
 801dd04:	2b01      	cmp	r3, #1
 801dd06:	d10e      	bne.n	801dd26 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801dd08:	4b0d      	ldr	r3, [pc, #52]	; (801dd40 <UTIL_LPM_SetStopMode+0x5c>)
 801dd0a:	681a      	ldr	r2, [r3, #0]
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	4313      	orrs	r3, r2
 801dd10:	4a0b      	ldr	r2, [pc, #44]	; (801dd40 <UTIL_LPM_SetStopMode+0x5c>)
 801dd12:	6013      	str	r3, [r2, #0]
      break;
 801dd14:	e008      	b.n	801dd28 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801dd16:	687b      	ldr	r3, [r7, #4]
 801dd18:	43da      	mvns	r2, r3
 801dd1a:	4b09      	ldr	r3, [pc, #36]	; (801dd40 <UTIL_LPM_SetStopMode+0x5c>)
 801dd1c:	681b      	ldr	r3, [r3, #0]
 801dd1e:	4013      	ands	r3, r2
 801dd20:	4a07      	ldr	r2, [pc, #28]	; (801dd40 <UTIL_LPM_SetStopMode+0x5c>)
 801dd22:	6013      	str	r3, [r2, #0]
      break;
 801dd24:	e000      	b.n	801dd28 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801dd26:	bf00      	nop
 801dd28:	697b      	ldr	r3, [r7, #20]
 801dd2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd2c:	68fb      	ldr	r3, [r7, #12]
 801dd2e:	f383 8810 	msr	PRIMASK, r3
}
 801dd32:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801dd34:	bf00      	nop
 801dd36:	371c      	adds	r7, #28
 801dd38:	46bd      	mov	sp, r7
 801dd3a:	bc80      	pop	{r7}
 801dd3c:	4770      	bx	lr
 801dd3e:	bf00      	nop
 801dd40:	20001d8c 	.word	0x20001d8c

0801dd44 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801dd44:	b480      	push	{r7}
 801dd46:	b087      	sub	sp, #28
 801dd48:	af00      	add	r7, sp, #0
 801dd4a:	6078      	str	r0, [r7, #4]
 801dd4c:	460b      	mov	r3, r1
 801dd4e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd50:	f3ef 8310 	mrs	r3, PRIMASK
 801dd54:	613b      	str	r3, [r7, #16]
  return(result);
 801dd56:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801dd58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801dd5a:	b672      	cpsid	i
}
 801dd5c:	bf00      	nop
  
  switch(state)
 801dd5e:	78fb      	ldrb	r3, [r7, #3]
 801dd60:	2b00      	cmp	r3, #0
 801dd62:	d008      	beq.n	801dd76 <UTIL_LPM_SetOffMode+0x32>
 801dd64:	2b01      	cmp	r3, #1
 801dd66:	d10e      	bne.n	801dd86 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801dd68:	4b0d      	ldr	r3, [pc, #52]	; (801dda0 <UTIL_LPM_SetOffMode+0x5c>)
 801dd6a:	681a      	ldr	r2, [r3, #0]
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	4313      	orrs	r3, r2
 801dd70:	4a0b      	ldr	r2, [pc, #44]	; (801dda0 <UTIL_LPM_SetOffMode+0x5c>)
 801dd72:	6013      	str	r3, [r2, #0]
      break;
 801dd74:	e008      	b.n	801dd88 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801dd76:	687b      	ldr	r3, [r7, #4]
 801dd78:	43da      	mvns	r2, r3
 801dd7a:	4b09      	ldr	r3, [pc, #36]	; (801dda0 <UTIL_LPM_SetOffMode+0x5c>)
 801dd7c:	681b      	ldr	r3, [r3, #0]
 801dd7e:	4013      	ands	r3, r2
 801dd80:	4a07      	ldr	r2, [pc, #28]	; (801dda0 <UTIL_LPM_SetOffMode+0x5c>)
 801dd82:	6013      	str	r3, [r2, #0]
      break;
 801dd84:	e000      	b.n	801dd88 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801dd86:	bf00      	nop
 801dd88:	697b      	ldr	r3, [r7, #20]
 801dd8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd8c:	68fb      	ldr	r3, [r7, #12]
 801dd8e:	f383 8810 	msr	PRIMASK, r3
}
 801dd92:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801dd94:	bf00      	nop
 801dd96:	371c      	adds	r7, #28
 801dd98:	46bd      	mov	sp, r7
 801dd9a:	bc80      	pop	{r7}
 801dd9c:	4770      	bx	lr
 801dd9e:	bf00      	nop
 801dda0:	20001d90 	.word	0x20001d90

0801dda4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801dda4:	b580      	push	{r7, lr}
 801dda6:	b084      	sub	sp, #16
 801dda8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ddaa:	f3ef 8310 	mrs	r3, PRIMASK
 801ddae:	60bb      	str	r3, [r7, #8]
  return(result);
 801ddb0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801ddb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ddb4:	b672      	cpsid	i
}
 801ddb6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801ddb8:	4b12      	ldr	r3, [pc, #72]	; (801de04 <UTIL_LPM_EnterLowPower+0x60>)
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	2b00      	cmp	r3, #0
 801ddbe:	d006      	beq.n	801ddce <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801ddc0:	4b11      	ldr	r3, [pc, #68]	; (801de08 <UTIL_LPM_EnterLowPower+0x64>)
 801ddc2:	681b      	ldr	r3, [r3, #0]
 801ddc4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801ddc6:	4b10      	ldr	r3, [pc, #64]	; (801de08 <UTIL_LPM_EnterLowPower+0x64>)
 801ddc8:	685b      	ldr	r3, [r3, #4]
 801ddca:	4798      	blx	r3
 801ddcc:	e010      	b.n	801ddf0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801ddce:	4b0f      	ldr	r3, [pc, #60]	; (801de0c <UTIL_LPM_EnterLowPower+0x68>)
 801ddd0:	681b      	ldr	r3, [r3, #0]
 801ddd2:	2b00      	cmp	r3, #0
 801ddd4:	d006      	beq.n	801dde4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801ddd6:	4b0c      	ldr	r3, [pc, #48]	; (801de08 <UTIL_LPM_EnterLowPower+0x64>)
 801ddd8:	689b      	ldr	r3, [r3, #8]
 801ddda:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801dddc:	4b0a      	ldr	r3, [pc, #40]	; (801de08 <UTIL_LPM_EnterLowPower+0x64>)
 801ddde:	68db      	ldr	r3, [r3, #12]
 801dde0:	4798      	blx	r3
 801dde2:	e005      	b.n	801ddf0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801dde4:	4b08      	ldr	r3, [pc, #32]	; (801de08 <UTIL_LPM_EnterLowPower+0x64>)
 801dde6:	691b      	ldr	r3, [r3, #16]
 801dde8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801ddea:	4b07      	ldr	r3, [pc, #28]	; (801de08 <UTIL_LPM_EnterLowPower+0x64>)
 801ddec:	695b      	ldr	r3, [r3, #20]
 801ddee:	4798      	blx	r3
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddf4:	687b      	ldr	r3, [r7, #4]
 801ddf6:	f383 8810 	msr	PRIMASK, r3
}
 801ddfa:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801ddfc:	bf00      	nop
 801ddfe:	3710      	adds	r7, #16
 801de00:	46bd      	mov	sp, r7
 801de02:	bd80      	pop	{r7, pc}
 801de04:	20001d8c 	.word	0x20001d8c
 801de08:	0801fee0 	.word	0x0801fee0
 801de0c:	20001d90 	.word	0x20001d90

0801de10 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801de10:	b480      	push	{r7}
 801de12:	b087      	sub	sp, #28
 801de14:	af00      	add	r7, sp, #0
 801de16:	60f8      	str	r0, [r7, #12]
 801de18:	60b9      	str	r1, [r7, #8]
 801de1a:	4613      	mov	r3, r2
 801de1c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801de1e:	68fb      	ldr	r3, [r7, #12]
 801de20:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801de22:	68bb      	ldr	r3, [r7, #8]
 801de24:	613b      	str	r3, [r7, #16]

  while( size-- )
 801de26:	e007      	b.n	801de38 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801de28:	693a      	ldr	r2, [r7, #16]
 801de2a:	1c53      	adds	r3, r2, #1
 801de2c:	613b      	str	r3, [r7, #16]
 801de2e:	697b      	ldr	r3, [r7, #20]
 801de30:	1c59      	adds	r1, r3, #1
 801de32:	6179      	str	r1, [r7, #20]
 801de34:	7812      	ldrb	r2, [r2, #0]
 801de36:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801de38:	88fb      	ldrh	r3, [r7, #6]
 801de3a:	1e5a      	subs	r2, r3, #1
 801de3c:	80fa      	strh	r2, [r7, #6]
 801de3e:	2b00      	cmp	r3, #0
 801de40:	d1f2      	bne.n	801de28 <UTIL_MEM_cpy_8+0x18>
    }
}
 801de42:	bf00      	nop
 801de44:	bf00      	nop
 801de46:	371c      	adds	r7, #28
 801de48:	46bd      	mov	sp, r7
 801de4a:	bc80      	pop	{r7}
 801de4c:	4770      	bx	lr

0801de4e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801de4e:	b480      	push	{r7}
 801de50:	b085      	sub	sp, #20
 801de52:	af00      	add	r7, sp, #0
 801de54:	6078      	str	r0, [r7, #4]
 801de56:	460b      	mov	r3, r1
 801de58:	70fb      	strb	r3, [r7, #3]
 801de5a:	4613      	mov	r3, r2
 801de5c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801de5e:	687b      	ldr	r3, [r7, #4]
 801de60:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801de62:	e004      	b.n	801de6e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801de64:	68fb      	ldr	r3, [r7, #12]
 801de66:	1c5a      	adds	r2, r3, #1
 801de68:	60fa      	str	r2, [r7, #12]
 801de6a:	78fa      	ldrb	r2, [r7, #3]
 801de6c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801de6e:	883b      	ldrh	r3, [r7, #0]
 801de70:	1e5a      	subs	r2, r3, #1
 801de72:	803a      	strh	r2, [r7, #0]
 801de74:	2b00      	cmp	r3, #0
 801de76:	d1f5      	bne.n	801de64 <UTIL_MEM_set_8+0x16>
  }
}
 801de78:	bf00      	nop
 801de7a:	bf00      	nop
 801de7c:	3714      	adds	r7, #20
 801de7e:	46bd      	mov	sp, r7
 801de80:	bc80      	pop	{r7}
 801de82:	4770      	bx	lr

0801de84 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801de84:	b082      	sub	sp, #8
 801de86:	b480      	push	{r7}
 801de88:	b087      	sub	sp, #28
 801de8a:	af00      	add	r7, sp, #0
 801de8c:	60f8      	str	r0, [r7, #12]
 801de8e:	1d38      	adds	r0, r7, #4
 801de90:	e880 0006 	stmia.w	r0, {r1, r2}
 801de94:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801de96:	2300      	movs	r3, #0
 801de98:	613b      	str	r3, [r7, #16]
 801de9a:	2300      	movs	r3, #0
 801de9c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801de9e:	687a      	ldr	r2, [r7, #4]
 801dea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dea2:	4413      	add	r3, r2
 801dea4:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801dea6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801deaa:	b29a      	uxth	r2, r3
 801deac:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801deb0:	b29b      	uxth	r3, r3
 801deb2:	4413      	add	r3, r2
 801deb4:	b29b      	uxth	r3, r3
 801deb6:	b21b      	sxth	r3, r3
 801deb8:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801deba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801debe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801dec2:	db0a      	blt.n	801deda <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801dec4:	693b      	ldr	r3, [r7, #16]
 801dec6:	3301      	adds	r3, #1
 801dec8:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801deca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801dece:	b29b      	uxth	r3, r3
 801ded0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801ded4:	b29b      	uxth	r3, r3
 801ded6:	b21b      	sxth	r3, r3
 801ded8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801deda:	68fb      	ldr	r3, [r7, #12]
 801dedc:	461a      	mov	r2, r3
 801dede:	f107 0310 	add.w	r3, r7, #16
 801dee2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801dee6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801deea:	68f8      	ldr	r0, [r7, #12]
 801deec:	371c      	adds	r7, #28
 801deee:	46bd      	mov	sp, r7
 801def0:	bc80      	pop	{r7}
 801def2:	b002      	add	sp, #8
 801def4:	4770      	bx	lr

0801def6 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801def6:	b082      	sub	sp, #8
 801def8:	b480      	push	{r7}
 801defa:	b087      	sub	sp, #28
 801defc:	af00      	add	r7, sp, #0
 801defe:	60f8      	str	r0, [r7, #12]
 801df00:	1d38      	adds	r0, r7, #4
 801df02:	e880 0006 	stmia.w	r0, {r1, r2}
 801df06:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801df08:	2300      	movs	r3, #0
 801df0a:	613b      	str	r3, [r7, #16]
 801df0c:	2300      	movs	r3, #0
 801df0e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801df10:	687a      	ldr	r2, [r7, #4]
 801df12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df14:	1ad3      	subs	r3, r2, r3
 801df16:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801df18:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801df1c:	b29a      	uxth	r2, r3
 801df1e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801df22:	b29b      	uxth	r3, r3
 801df24:	1ad3      	subs	r3, r2, r3
 801df26:	b29b      	uxth	r3, r3
 801df28:	b21b      	sxth	r3, r3
 801df2a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801df2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801df30:	2b00      	cmp	r3, #0
 801df32:	da0a      	bge.n	801df4a <SysTimeSub+0x54>
  {
    c.Seconds--;
 801df34:	693b      	ldr	r3, [r7, #16]
 801df36:	3b01      	subs	r3, #1
 801df38:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801df3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801df3e:	b29b      	uxth	r3, r3
 801df40:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801df44:	b29b      	uxth	r3, r3
 801df46:	b21b      	sxth	r3, r3
 801df48:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801df4a:	68fb      	ldr	r3, [r7, #12]
 801df4c:	461a      	mov	r2, r3
 801df4e:	f107 0310 	add.w	r3, r7, #16
 801df52:	e893 0003 	ldmia.w	r3, {r0, r1}
 801df56:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801df5a:	68f8      	ldr	r0, [r7, #12]
 801df5c:	371c      	adds	r7, #28
 801df5e:	46bd      	mov	sp, r7
 801df60:	bc80      	pop	{r7}
 801df62:	b002      	add	sp, #8
 801df64:	4770      	bx	lr
	...

0801df68 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801df68:	b580      	push	{r7, lr}
 801df6a:	b088      	sub	sp, #32
 801df6c:	af02      	add	r7, sp, #8
 801df6e:	463b      	mov	r3, r7
 801df70:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801df74:	2300      	movs	r3, #0
 801df76:	60bb      	str	r3, [r7, #8]
 801df78:	2300      	movs	r3, #0
 801df7a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801df7c:	4b10      	ldr	r3, [pc, #64]	; (801dfc0 <SysTimeSet+0x58>)
 801df7e:	691b      	ldr	r3, [r3, #16]
 801df80:	f107 0208 	add.w	r2, r7, #8
 801df84:	3204      	adds	r2, #4
 801df86:	4610      	mov	r0, r2
 801df88:	4798      	blx	r3
 801df8a:	4603      	mov	r3, r0
 801df8c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801df8e:	f107 0010 	add.w	r0, r7, #16
 801df92:	68fb      	ldr	r3, [r7, #12]
 801df94:	9300      	str	r3, [sp, #0]
 801df96:	68bb      	ldr	r3, [r7, #8]
 801df98:	463a      	mov	r2, r7
 801df9a:	ca06      	ldmia	r2, {r1, r2}
 801df9c:	f7ff ffab 	bl	801def6 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801dfa0:	4b07      	ldr	r3, [pc, #28]	; (801dfc0 <SysTimeSet+0x58>)
 801dfa2:	681b      	ldr	r3, [r3, #0]
 801dfa4:	693a      	ldr	r2, [r7, #16]
 801dfa6:	4610      	mov	r0, r2
 801dfa8:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801dfaa:	4b05      	ldr	r3, [pc, #20]	; (801dfc0 <SysTimeSet+0x58>)
 801dfac:	689b      	ldr	r3, [r3, #8]
 801dfae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801dfb2:	4610      	mov	r0, r2
 801dfb4:	4798      	blx	r3
}
 801dfb6:	bf00      	nop
 801dfb8:	3718      	adds	r7, #24
 801dfba:	46bd      	mov	sp, r7
 801dfbc:	bd80      	pop	{r7, pc}
 801dfbe:	bf00      	nop
 801dfc0:	0801ffc4 	.word	0x0801ffc4

0801dfc4 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801dfc4:	b580      	push	{r7, lr}
 801dfc6:	b08a      	sub	sp, #40	; 0x28
 801dfc8:	af02      	add	r7, sp, #8
 801dfca:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801dfcc:	2300      	movs	r3, #0
 801dfce:	61bb      	str	r3, [r7, #24]
 801dfd0:	2300      	movs	r3, #0
 801dfd2:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801dfd4:	2300      	movs	r3, #0
 801dfd6:	613b      	str	r3, [r7, #16]
 801dfd8:	2300      	movs	r3, #0
 801dfda:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801dfdc:	4b14      	ldr	r3, [pc, #80]	; (801e030 <SysTimeGet+0x6c>)
 801dfde:	691b      	ldr	r3, [r3, #16]
 801dfe0:	f107 0218 	add.w	r2, r7, #24
 801dfe4:	3204      	adds	r2, #4
 801dfe6:	4610      	mov	r0, r2
 801dfe8:	4798      	blx	r3
 801dfea:	4603      	mov	r3, r0
 801dfec:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801dfee:	4b10      	ldr	r3, [pc, #64]	; (801e030 <SysTimeGet+0x6c>)
 801dff0:	68db      	ldr	r3, [r3, #12]
 801dff2:	4798      	blx	r3
 801dff4:	4603      	mov	r3, r0
 801dff6:	b21b      	sxth	r3, r3
 801dff8:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801dffa:	4b0d      	ldr	r3, [pc, #52]	; (801e030 <SysTimeGet+0x6c>)
 801dffc:	685b      	ldr	r3, [r3, #4]
 801dffe:	4798      	blx	r3
 801e000:	4603      	mov	r3, r0
 801e002:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801e004:	f107 0010 	add.w	r0, r7, #16
 801e008:	69fb      	ldr	r3, [r7, #28]
 801e00a:	9300      	str	r3, [sp, #0]
 801e00c:	69bb      	ldr	r3, [r7, #24]
 801e00e:	f107 0208 	add.w	r2, r7, #8
 801e012:	ca06      	ldmia	r2, {r1, r2}
 801e014:	f7ff ff36 	bl	801de84 <SysTimeAdd>

  return sysTime;
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	461a      	mov	r2, r3
 801e01c:	f107 0310 	add.w	r3, r7, #16
 801e020:	e893 0003 	ldmia.w	r3, {r0, r1}
 801e024:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801e028:	6878      	ldr	r0, [r7, #4]
 801e02a:	3720      	adds	r7, #32
 801e02c:	46bd      	mov	sp, r7
 801e02e:	bd80      	pop	{r7, pc}
 801e030:	0801ffc4 	.word	0x0801ffc4

0801e034 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801e034:	b580      	push	{r7, lr}
 801e036:	b084      	sub	sp, #16
 801e038:	af00      	add	r7, sp, #0
 801e03a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801e03c:	2300      	movs	r3, #0
 801e03e:	60bb      	str	r3, [r7, #8]
 801e040:	2300      	movs	r3, #0
 801e042:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801e044:	4b0a      	ldr	r3, [pc, #40]	; (801e070 <SysTimeGetMcuTime+0x3c>)
 801e046:	691b      	ldr	r3, [r3, #16]
 801e048:	f107 0208 	add.w	r2, r7, #8
 801e04c:	3204      	adds	r2, #4
 801e04e:	4610      	mov	r0, r2
 801e050:	4798      	blx	r3
 801e052:	4603      	mov	r3, r0
 801e054:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801e056:	687b      	ldr	r3, [r7, #4]
 801e058:	461a      	mov	r2, r3
 801e05a:	f107 0308 	add.w	r3, r7, #8
 801e05e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801e062:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801e066:	6878      	ldr	r0, [r7, #4]
 801e068:	3710      	adds	r7, #16
 801e06a:	46bd      	mov	sp, r7
 801e06c:	bd80      	pop	{r7, pc}
 801e06e:	bf00      	nop
 801e070:	0801ffc4 	.word	0x0801ffc4

0801e074 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801e074:	b580      	push	{r7, lr}
 801e076:	b088      	sub	sp, #32
 801e078:	af02      	add	r7, sp, #8
 801e07a:	463b      	mov	r3, r7
 801e07c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801e080:	4b0f      	ldr	r3, [pc, #60]	; (801e0c0 <SysTimeToMs+0x4c>)
 801e082:	68db      	ldr	r3, [r3, #12]
 801e084:	4798      	blx	r3
 801e086:	4603      	mov	r3, r0
 801e088:	b21b      	sxth	r3, r3
 801e08a:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801e08c:	4b0c      	ldr	r3, [pc, #48]	; (801e0c0 <SysTimeToMs+0x4c>)
 801e08e:	685b      	ldr	r3, [r3, #4]
 801e090:	4798      	blx	r3
 801e092:	4603      	mov	r3, r0
 801e094:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801e096:	f107 0008 	add.w	r0, r7, #8
 801e09a:	697b      	ldr	r3, [r7, #20]
 801e09c:	9300      	str	r3, [sp, #0]
 801e09e:	693b      	ldr	r3, [r7, #16]
 801e0a0:	463a      	mov	r2, r7
 801e0a2:	ca06      	ldmia	r2, {r1, r2}
 801e0a4:	f7ff ff27 	bl	801def6 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801e0a8:	68bb      	ldr	r3, [r7, #8]
 801e0aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e0ae:	fb02 f303 	mul.w	r3, r2, r3
 801e0b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801e0b6:	4413      	add	r3, r2
}
 801e0b8:	4618      	mov	r0, r3
 801e0ba:	3718      	adds	r7, #24
 801e0bc:	46bd      	mov	sp, r7
 801e0be:	bd80      	pop	{r7, pc}
 801e0c0:	0801ffc4 	.word	0x0801ffc4

0801e0c4 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801e0c4:	b580      	push	{r7, lr}
 801e0c6:	b08a      	sub	sp, #40	; 0x28
 801e0c8:	af02      	add	r7, sp, #8
 801e0ca:	6078      	str	r0, [r7, #4]
 801e0cc:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801e0ce:	683b      	ldr	r3, [r7, #0]
 801e0d0:	4a19      	ldr	r2, [pc, #100]	; (801e138 <SysTimeFromMs+0x74>)
 801e0d2:	fba2 2303 	umull	r2, r3, r2, r3
 801e0d6:	099b      	lsrs	r3, r3, #6
 801e0d8:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801e0da:	69fb      	ldr	r3, [r7, #28]
 801e0dc:	617b      	str	r3, [r7, #20]
 801e0de:	683b      	ldr	r3, [r7, #0]
 801e0e0:	b29a      	uxth	r2, r3
 801e0e2:	69fb      	ldr	r3, [r7, #28]
 801e0e4:	b29b      	uxth	r3, r3
 801e0e6:	4619      	mov	r1, r3
 801e0e8:	0149      	lsls	r1, r1, #5
 801e0ea:	1ac9      	subs	r1, r1, r3
 801e0ec:	0089      	lsls	r1, r1, #2
 801e0ee:	440b      	add	r3, r1
 801e0f0:	00db      	lsls	r3, r3, #3
 801e0f2:	b29b      	uxth	r3, r3
 801e0f4:	1ad3      	subs	r3, r2, r3
 801e0f6:	b29b      	uxth	r3, r3
 801e0f8:	b21b      	sxth	r3, r3
 801e0fa:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801e0fc:	f107 030c 	add.w	r3, r7, #12
 801e100:	2200      	movs	r2, #0
 801e102:	601a      	str	r2, [r3, #0]
 801e104:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801e106:	4b0d      	ldr	r3, [pc, #52]	; (801e13c <SysTimeFromMs+0x78>)
 801e108:	68db      	ldr	r3, [r3, #12]
 801e10a:	4798      	blx	r3
 801e10c:	4603      	mov	r3, r0
 801e10e:	b21b      	sxth	r3, r3
 801e110:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801e112:	4b0a      	ldr	r3, [pc, #40]	; (801e13c <SysTimeFromMs+0x78>)
 801e114:	685b      	ldr	r3, [r3, #4]
 801e116:	4798      	blx	r3
 801e118:	4603      	mov	r3, r0
 801e11a:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801e11c:	6878      	ldr	r0, [r7, #4]
 801e11e:	693b      	ldr	r3, [r7, #16]
 801e120:	9300      	str	r3, [sp, #0]
 801e122:	68fb      	ldr	r3, [r7, #12]
 801e124:	f107 0214 	add.w	r2, r7, #20
 801e128:	ca06      	ldmia	r2, {r1, r2}
 801e12a:	f7ff feab 	bl	801de84 <SysTimeAdd>
}
 801e12e:	6878      	ldr	r0, [r7, #4]
 801e130:	3720      	adds	r7, #32
 801e132:	46bd      	mov	sp, r7
 801e134:	bd80      	pop	{r7, pc}
 801e136:	bf00      	nop
 801e138:	10624dd3 	.word	0x10624dd3
 801e13c:	0801ffc4 	.word	0x0801ffc4

0801e140 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801e140:	b480      	push	{r7}
 801e142:	b085      	sub	sp, #20
 801e144:	af00      	add	r7, sp, #0
 801e146:	6078      	str	r0, [r7, #4]
  int i = 0;
 801e148:	2300      	movs	r3, #0
 801e14a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801e14c:	e00e      	b.n	801e16c <ee_skip_atoi+0x2c>
 801e14e:	68fa      	ldr	r2, [r7, #12]
 801e150:	4613      	mov	r3, r2
 801e152:	009b      	lsls	r3, r3, #2
 801e154:	4413      	add	r3, r2
 801e156:	005b      	lsls	r3, r3, #1
 801e158:	4618      	mov	r0, r3
 801e15a:	687b      	ldr	r3, [r7, #4]
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	1c59      	adds	r1, r3, #1
 801e160:	687a      	ldr	r2, [r7, #4]
 801e162:	6011      	str	r1, [r2, #0]
 801e164:	781b      	ldrb	r3, [r3, #0]
 801e166:	4403      	add	r3, r0
 801e168:	3b30      	subs	r3, #48	; 0x30
 801e16a:	60fb      	str	r3, [r7, #12]
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	681b      	ldr	r3, [r3, #0]
 801e170:	781b      	ldrb	r3, [r3, #0]
 801e172:	2b2f      	cmp	r3, #47	; 0x2f
 801e174:	d904      	bls.n	801e180 <ee_skip_atoi+0x40>
 801e176:	687b      	ldr	r3, [r7, #4]
 801e178:	681b      	ldr	r3, [r3, #0]
 801e17a:	781b      	ldrb	r3, [r3, #0]
 801e17c:	2b39      	cmp	r3, #57	; 0x39
 801e17e:	d9e6      	bls.n	801e14e <ee_skip_atoi+0xe>
  return i;
 801e180:	68fb      	ldr	r3, [r7, #12]
}
 801e182:	4618      	mov	r0, r3
 801e184:	3714      	adds	r7, #20
 801e186:	46bd      	mov	sp, r7
 801e188:	bc80      	pop	{r7}
 801e18a:	4770      	bx	lr

0801e18c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801e18c:	b480      	push	{r7}
 801e18e:	b099      	sub	sp, #100	; 0x64
 801e190:	af00      	add	r7, sp, #0
 801e192:	60f8      	str	r0, [r7, #12]
 801e194:	60b9      	str	r1, [r7, #8]
 801e196:	607a      	str	r2, [r7, #4]
 801e198:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801e19a:	4b71      	ldr	r3, [pc, #452]	; (801e360 <ee_number+0x1d4>)
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801e1a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e1a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e1a6:	2b00      	cmp	r3, #0
 801e1a8:	d002      	beq.n	801e1b0 <ee_number+0x24>
 801e1aa:	4b6e      	ldr	r3, [pc, #440]	; (801e364 <ee_number+0x1d8>)
 801e1ac:	681b      	ldr	r3, [r3, #0]
 801e1ae:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801e1b0:	683b      	ldr	r3, [r7, #0]
 801e1b2:	2b01      	cmp	r3, #1
 801e1b4:	dd02      	ble.n	801e1bc <ee_number+0x30>
 801e1b6:	683b      	ldr	r3, [r7, #0]
 801e1b8:	2b24      	cmp	r3, #36	; 0x24
 801e1ba:	dd01      	ble.n	801e1c0 <ee_number+0x34>
 801e1bc:	2300      	movs	r3, #0
 801e1be:	e0ca      	b.n	801e356 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801e1c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e1c2:	f003 0301 	and.w	r3, r3, #1
 801e1c6:	2b00      	cmp	r3, #0
 801e1c8:	d001      	beq.n	801e1ce <ee_number+0x42>
 801e1ca:	2330      	movs	r3, #48	; 0x30
 801e1cc:	e000      	b.n	801e1d0 <ee_number+0x44>
 801e1ce:	2320      	movs	r3, #32
 801e1d0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801e1d4:	2300      	movs	r3, #0
 801e1d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801e1da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e1dc:	f003 0302 	and.w	r3, r3, #2
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	d00b      	beq.n	801e1fc <ee_number+0x70>
  {
    if (num < 0)
 801e1e4:	687b      	ldr	r3, [r7, #4]
 801e1e6:	2b00      	cmp	r3, #0
 801e1e8:	da08      	bge.n	801e1fc <ee_number+0x70>
    {
      sign = '-';
 801e1ea:	232d      	movs	r3, #45	; 0x2d
 801e1ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	425b      	negs	r3, r3
 801e1f4:	607b      	str	r3, [r7, #4]
      size--;
 801e1f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e1f8:	3b01      	subs	r3, #1
 801e1fa:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801e1fc:	2300      	movs	r3, #0
 801e1fe:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	2b00      	cmp	r3, #0
 801e204:	d11e      	bne.n	801e244 <ee_number+0xb8>
    tmp[i++] = '0';
 801e206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e208:	1c5a      	adds	r2, r3, #1
 801e20a:	657a      	str	r2, [r7, #84]	; 0x54
 801e20c:	3360      	adds	r3, #96	; 0x60
 801e20e:	443b      	add	r3, r7
 801e210:	2230      	movs	r2, #48	; 0x30
 801e212:	f803 2c50 	strb.w	r2, [r3, #-80]
 801e216:	e018      	b.n	801e24a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	683a      	ldr	r2, [r7, #0]
 801e21c:	fbb3 f1f2 	udiv	r1, r3, r2
 801e220:	fb01 f202 	mul.w	r2, r1, r2
 801e224:	1a9b      	subs	r3, r3, r2
 801e226:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e228:	441a      	add	r2, r3
 801e22a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e22c:	1c59      	adds	r1, r3, #1
 801e22e:	6579      	str	r1, [r7, #84]	; 0x54
 801e230:	7812      	ldrb	r2, [r2, #0]
 801e232:	3360      	adds	r3, #96	; 0x60
 801e234:	443b      	add	r3, r7
 801e236:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801e23a:	687a      	ldr	r2, [r7, #4]
 801e23c:	683b      	ldr	r3, [r7, #0]
 801e23e:	fbb2 f3f3 	udiv	r3, r2, r3
 801e242:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	2b00      	cmp	r3, #0
 801e248:	d1e6      	bne.n	801e218 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801e24a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e24c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e24e:	429a      	cmp	r2, r3
 801e250:	dd01      	ble.n	801e256 <ee_number+0xca>
 801e252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e254:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801e256:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e25a:	1ad3      	subs	r3, r2, r3
 801e25c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801e25e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e260:	f003 0301 	and.w	r3, r3, #1
 801e264:	2b00      	cmp	r3, #0
 801e266:	d112      	bne.n	801e28e <ee_number+0x102>
 801e268:	e00c      	b.n	801e284 <ee_number+0xf8>
 801e26a:	68fb      	ldr	r3, [r7, #12]
 801e26c:	1c5a      	adds	r2, r3, #1
 801e26e:	60fa      	str	r2, [r7, #12]
 801e270:	2220      	movs	r2, #32
 801e272:	701a      	strb	r2, [r3, #0]
 801e274:	68bb      	ldr	r3, [r7, #8]
 801e276:	3b01      	subs	r3, #1
 801e278:	60bb      	str	r3, [r7, #8]
 801e27a:	68bb      	ldr	r3, [r7, #8]
 801e27c:	2b00      	cmp	r3, #0
 801e27e:	d101      	bne.n	801e284 <ee_number+0xf8>
 801e280:	68fb      	ldr	r3, [r7, #12]
 801e282:	e068      	b.n	801e356 <ee_number+0x1ca>
 801e284:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e286:	1e5a      	subs	r2, r3, #1
 801e288:	66ba      	str	r2, [r7, #104]	; 0x68
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	dced      	bgt.n	801e26a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801e28e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801e292:	2b00      	cmp	r3, #0
 801e294:	d01b      	beq.n	801e2ce <ee_number+0x142>
 801e296:	68fb      	ldr	r3, [r7, #12]
 801e298:	1c5a      	adds	r2, r3, #1
 801e29a:	60fa      	str	r2, [r7, #12]
 801e29c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801e2a0:	701a      	strb	r2, [r3, #0]
 801e2a2:	68bb      	ldr	r3, [r7, #8]
 801e2a4:	3b01      	subs	r3, #1
 801e2a6:	60bb      	str	r3, [r7, #8]
 801e2a8:	68bb      	ldr	r3, [r7, #8]
 801e2aa:	2b00      	cmp	r3, #0
 801e2ac:	d10f      	bne.n	801e2ce <ee_number+0x142>
 801e2ae:	68fb      	ldr	r3, [r7, #12]
 801e2b0:	e051      	b.n	801e356 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801e2b2:	68fb      	ldr	r3, [r7, #12]
 801e2b4:	1c5a      	adds	r2, r3, #1
 801e2b6:	60fa      	str	r2, [r7, #12]
 801e2b8:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801e2bc:	701a      	strb	r2, [r3, #0]
 801e2be:	68bb      	ldr	r3, [r7, #8]
 801e2c0:	3b01      	subs	r3, #1
 801e2c2:	60bb      	str	r3, [r7, #8]
 801e2c4:	68bb      	ldr	r3, [r7, #8]
 801e2c6:	2b00      	cmp	r3, #0
 801e2c8:	d101      	bne.n	801e2ce <ee_number+0x142>
 801e2ca:	68fb      	ldr	r3, [r7, #12]
 801e2cc:	e043      	b.n	801e356 <ee_number+0x1ca>
 801e2ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e2d0:	1e5a      	subs	r2, r3, #1
 801e2d2:	66ba      	str	r2, [r7, #104]	; 0x68
 801e2d4:	2b00      	cmp	r3, #0
 801e2d6:	dcec      	bgt.n	801e2b2 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801e2d8:	e00c      	b.n	801e2f4 <ee_number+0x168>
 801e2da:	68fb      	ldr	r3, [r7, #12]
 801e2dc:	1c5a      	adds	r2, r3, #1
 801e2de:	60fa      	str	r2, [r7, #12]
 801e2e0:	2230      	movs	r2, #48	; 0x30
 801e2e2:	701a      	strb	r2, [r3, #0]
 801e2e4:	68bb      	ldr	r3, [r7, #8]
 801e2e6:	3b01      	subs	r3, #1
 801e2e8:	60bb      	str	r3, [r7, #8]
 801e2ea:	68bb      	ldr	r3, [r7, #8]
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d101      	bne.n	801e2f4 <ee_number+0x168>
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	e030      	b.n	801e356 <ee_number+0x1ca>
 801e2f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e2f6:	1e5a      	subs	r2, r3, #1
 801e2f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 801e2fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e2fc:	429a      	cmp	r2, r3
 801e2fe:	dbec      	blt.n	801e2da <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801e300:	e010      	b.n	801e324 <ee_number+0x198>
 801e302:	68fb      	ldr	r3, [r7, #12]
 801e304:	1c5a      	adds	r2, r3, #1
 801e306:	60fa      	str	r2, [r7, #12]
 801e308:	f107 0110 	add.w	r1, r7, #16
 801e30c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e30e:	440a      	add	r2, r1
 801e310:	7812      	ldrb	r2, [r2, #0]
 801e312:	701a      	strb	r2, [r3, #0]
 801e314:	68bb      	ldr	r3, [r7, #8]
 801e316:	3b01      	subs	r3, #1
 801e318:	60bb      	str	r3, [r7, #8]
 801e31a:	68bb      	ldr	r3, [r7, #8]
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d101      	bne.n	801e324 <ee_number+0x198>
 801e320:	68fb      	ldr	r3, [r7, #12]
 801e322:	e018      	b.n	801e356 <ee_number+0x1ca>
 801e324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e326:	1e5a      	subs	r2, r3, #1
 801e328:	657a      	str	r2, [r7, #84]	; 0x54
 801e32a:	2b00      	cmp	r3, #0
 801e32c:	dce9      	bgt.n	801e302 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801e32e:	e00c      	b.n	801e34a <ee_number+0x1be>
 801e330:	68fb      	ldr	r3, [r7, #12]
 801e332:	1c5a      	adds	r2, r3, #1
 801e334:	60fa      	str	r2, [r7, #12]
 801e336:	2220      	movs	r2, #32
 801e338:	701a      	strb	r2, [r3, #0]
 801e33a:	68bb      	ldr	r3, [r7, #8]
 801e33c:	3b01      	subs	r3, #1
 801e33e:	60bb      	str	r3, [r7, #8]
 801e340:	68bb      	ldr	r3, [r7, #8]
 801e342:	2b00      	cmp	r3, #0
 801e344:	d101      	bne.n	801e34a <ee_number+0x1be>
 801e346:	68fb      	ldr	r3, [r7, #12]
 801e348:	e005      	b.n	801e356 <ee_number+0x1ca>
 801e34a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e34c:	1e5a      	subs	r2, r3, #1
 801e34e:	66ba      	str	r2, [r7, #104]	; 0x68
 801e350:	2b00      	cmp	r3, #0
 801e352:	dced      	bgt.n	801e330 <ee_number+0x1a4>

  return str;
 801e354:	68fb      	ldr	r3, [r7, #12]
}
 801e356:	4618      	mov	r0, r3
 801e358:	3764      	adds	r7, #100	; 0x64
 801e35a:	46bd      	mov	sp, r7
 801e35c:	bc80      	pop	{r7}
 801e35e:	4770      	bx	lr
 801e360:	20000138 	.word	0x20000138
 801e364:	2000013c 	.word	0x2000013c

0801e368 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801e368:	b580      	push	{r7, lr}
 801e36a:	b092      	sub	sp, #72	; 0x48
 801e36c:	af04      	add	r7, sp, #16
 801e36e:	60f8      	str	r0, [r7, #12]
 801e370:	60b9      	str	r1, [r7, #8]
 801e372:	607a      	str	r2, [r7, #4]
 801e374:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801e376:	68bb      	ldr	r3, [r7, #8]
 801e378:	2b00      	cmp	r3, #0
 801e37a:	dc01      	bgt.n	801e380 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801e37c:	2300      	movs	r3, #0
 801e37e:	e13e      	b.n	801e5fe <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801e380:	68fb      	ldr	r3, [r7, #12]
 801e382:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e384:	e128      	b.n	801e5d8 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801e386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e388:	68fb      	ldr	r3, [r7, #12]
 801e38a:	1ad2      	subs	r2, r2, r3
 801e38c:	68bb      	ldr	r3, [r7, #8]
 801e38e:	3b01      	subs	r3, #1
 801e390:	429a      	cmp	r2, r3
 801e392:	f280 812e 	bge.w	801e5f2 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	781b      	ldrb	r3, [r3, #0]
 801e39a:	2b25      	cmp	r3, #37	; 0x25
 801e39c:	d006      	beq.n	801e3ac <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801e39e:	687a      	ldr	r2, [r7, #4]
 801e3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e3a2:	1c59      	adds	r1, r3, #1
 801e3a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801e3a6:	7812      	ldrb	r2, [r2, #0]
 801e3a8:	701a      	strb	r2, [r3, #0]
      continue;
 801e3aa:	e112      	b.n	801e5d2 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801e3ac:	2300      	movs	r3, #0
 801e3ae:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	3301      	adds	r3, #1
 801e3b4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	781b      	ldrb	r3, [r3, #0]
 801e3ba:	2b30      	cmp	r3, #48	; 0x30
 801e3bc:	d103      	bne.n	801e3c6 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801e3be:	6a3b      	ldr	r3, [r7, #32]
 801e3c0:	f043 0301 	orr.w	r3, r3, #1
 801e3c4:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801e3c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e3ca:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	781b      	ldrb	r3, [r3, #0]
 801e3d0:	2b2f      	cmp	r3, #47	; 0x2f
 801e3d2:	d908      	bls.n	801e3e6 <tiny_vsnprintf_like+0x7e>
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	781b      	ldrb	r3, [r3, #0]
 801e3d8:	2b39      	cmp	r3, #57	; 0x39
 801e3da:	d804      	bhi.n	801e3e6 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801e3dc:	1d3b      	adds	r3, r7, #4
 801e3de:	4618      	mov	r0, r3
 801e3e0:	f7ff feae 	bl	801e140 <ee_skip_atoi>
 801e3e4:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801e3e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e3ea:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801e3ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e3f0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801e3f2:	230a      	movs	r3, #10
 801e3f4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	781b      	ldrb	r3, [r3, #0]
 801e3fa:	3b58      	subs	r3, #88	; 0x58
 801e3fc:	2b20      	cmp	r3, #32
 801e3fe:	f200 8094 	bhi.w	801e52a <tiny_vsnprintf_like+0x1c2>
 801e402:	a201      	add	r2, pc, #4	; (adr r2, 801e408 <tiny_vsnprintf_like+0xa0>)
 801e404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e408:	0801e513 	.word	0x0801e513
 801e40c:	0801e52b 	.word	0x0801e52b
 801e410:	0801e52b 	.word	0x0801e52b
 801e414:	0801e52b 	.word	0x0801e52b
 801e418:	0801e52b 	.word	0x0801e52b
 801e41c:	0801e52b 	.word	0x0801e52b
 801e420:	0801e52b 	.word	0x0801e52b
 801e424:	0801e52b 	.word	0x0801e52b
 801e428:	0801e52b 	.word	0x0801e52b
 801e42c:	0801e52b 	.word	0x0801e52b
 801e430:	0801e52b 	.word	0x0801e52b
 801e434:	0801e497 	.word	0x0801e497
 801e438:	0801e521 	.word	0x0801e521
 801e43c:	0801e52b 	.word	0x0801e52b
 801e440:	0801e52b 	.word	0x0801e52b
 801e444:	0801e52b 	.word	0x0801e52b
 801e448:	0801e52b 	.word	0x0801e52b
 801e44c:	0801e521 	.word	0x0801e521
 801e450:	0801e52b 	.word	0x0801e52b
 801e454:	0801e52b 	.word	0x0801e52b
 801e458:	0801e52b 	.word	0x0801e52b
 801e45c:	0801e52b 	.word	0x0801e52b
 801e460:	0801e52b 	.word	0x0801e52b
 801e464:	0801e52b 	.word	0x0801e52b
 801e468:	0801e52b 	.word	0x0801e52b
 801e46c:	0801e52b 	.word	0x0801e52b
 801e470:	0801e52b 	.word	0x0801e52b
 801e474:	0801e4b7 	.word	0x0801e4b7
 801e478:	0801e52b 	.word	0x0801e52b
 801e47c:	0801e577 	.word	0x0801e577
 801e480:	0801e52b 	.word	0x0801e52b
 801e484:	0801e52b 	.word	0x0801e52b
 801e488:	0801e51b 	.word	0x0801e51b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801e48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e48e:	1c5a      	adds	r2, r3, #1
 801e490:	62fa      	str	r2, [r7, #44]	; 0x2c
 801e492:	2220      	movs	r2, #32
 801e494:	701a      	strb	r2, [r3, #0]
 801e496:	69fb      	ldr	r3, [r7, #28]
 801e498:	3b01      	subs	r3, #1
 801e49a:	61fb      	str	r3, [r7, #28]
 801e49c:	69fb      	ldr	r3, [r7, #28]
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	dcf4      	bgt.n	801e48c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801e4a2:	683b      	ldr	r3, [r7, #0]
 801e4a4:	1d1a      	adds	r2, r3, #4
 801e4a6:	603a      	str	r2, [r7, #0]
 801e4a8:	6819      	ldr	r1, [r3, #0]
 801e4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4ac:	1c5a      	adds	r2, r3, #1
 801e4ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 801e4b0:	b2ca      	uxtb	r2, r1
 801e4b2:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801e4b4:	e08d      	b.n	801e5d2 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801e4b6:	683b      	ldr	r3, [r7, #0]
 801e4b8:	1d1a      	adds	r2, r3, #4
 801e4ba:	603a      	str	r2, [r7, #0]
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4c2:	2b00      	cmp	r3, #0
 801e4c4:	d101      	bne.n	801e4ca <tiny_vsnprintf_like+0x162>
 801e4c6:	4b50      	ldr	r3, [pc, #320]	; (801e608 <tiny_vsnprintf_like+0x2a0>)
 801e4c8:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801e4ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e4cc:	f7e1 fe54 	bl	8000178 <strlen>
 801e4d0:	4603      	mov	r3, r0
 801e4d2:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801e4d4:	e004      	b.n	801e4e0 <tiny_vsnprintf_like+0x178>
 801e4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4d8:	1c5a      	adds	r2, r3, #1
 801e4da:	62fa      	str	r2, [r7, #44]	; 0x2c
 801e4dc:	2220      	movs	r2, #32
 801e4de:	701a      	strb	r2, [r3, #0]
 801e4e0:	69fb      	ldr	r3, [r7, #28]
 801e4e2:	1e5a      	subs	r2, r3, #1
 801e4e4:	61fa      	str	r2, [r7, #28]
 801e4e6:	693a      	ldr	r2, [r7, #16]
 801e4e8:	429a      	cmp	r2, r3
 801e4ea:	dbf4      	blt.n	801e4d6 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801e4ec:	2300      	movs	r3, #0
 801e4ee:	62bb      	str	r3, [r7, #40]	; 0x28
 801e4f0:	e00a      	b.n	801e508 <tiny_vsnprintf_like+0x1a0>
 801e4f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e4f4:	1c53      	adds	r3, r2, #1
 801e4f6:	627b      	str	r3, [r7, #36]	; 0x24
 801e4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4fa:	1c59      	adds	r1, r3, #1
 801e4fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 801e4fe:	7812      	ldrb	r2, [r2, #0]
 801e500:	701a      	strb	r2, [r3, #0]
 801e502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e504:	3301      	adds	r3, #1
 801e506:	62bb      	str	r3, [r7, #40]	; 0x28
 801e508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e50a:	693b      	ldr	r3, [r7, #16]
 801e50c:	429a      	cmp	r2, r3
 801e50e:	dbf0      	blt.n	801e4f2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801e510:	e05f      	b.n	801e5d2 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801e512:	6a3b      	ldr	r3, [r7, #32]
 801e514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e518:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801e51a:	2310      	movs	r3, #16
 801e51c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801e51e:	e02b      	b.n	801e578 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801e520:	6a3b      	ldr	r3, [r7, #32]
 801e522:	f043 0302 	orr.w	r3, r3, #2
 801e526:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801e528:	e025      	b.n	801e576 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	781b      	ldrb	r3, [r3, #0]
 801e52e:	2b25      	cmp	r3, #37	; 0x25
 801e530:	d004      	beq.n	801e53c <tiny_vsnprintf_like+0x1d4>
 801e532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e534:	1c5a      	adds	r2, r3, #1
 801e536:	62fa      	str	r2, [r7, #44]	; 0x2c
 801e538:	2225      	movs	r2, #37	; 0x25
 801e53a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801e53c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e53e:	68fb      	ldr	r3, [r7, #12]
 801e540:	1ad2      	subs	r2, r2, r3
 801e542:	68bb      	ldr	r3, [r7, #8]
 801e544:	3b01      	subs	r3, #1
 801e546:	429a      	cmp	r2, r3
 801e548:	da16      	bge.n	801e578 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801e54a:	687b      	ldr	r3, [r7, #4]
 801e54c:	781b      	ldrb	r3, [r3, #0]
 801e54e:	2b00      	cmp	r3, #0
 801e550:	d006      	beq.n	801e560 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801e552:	687a      	ldr	r2, [r7, #4]
 801e554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e556:	1c59      	adds	r1, r3, #1
 801e558:	62f9      	str	r1, [r7, #44]	; 0x2c
 801e55a:	7812      	ldrb	r2, [r2, #0]
 801e55c:	701a      	strb	r2, [r3, #0]
 801e55e:	e002      	b.n	801e566 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801e560:	687b      	ldr	r3, [r7, #4]
 801e562:	3b01      	subs	r3, #1
 801e564:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801e566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e568:	68fb      	ldr	r3, [r7, #12]
 801e56a:	1ad2      	subs	r2, r2, r3
 801e56c:	68bb      	ldr	r3, [r7, #8]
 801e56e:	3b01      	subs	r3, #1
 801e570:	429a      	cmp	r2, r3
 801e572:	db2d      	blt.n	801e5d0 <tiny_vsnprintf_like+0x268>
 801e574:	e000      	b.n	801e578 <tiny_vsnprintf_like+0x210>
        break;
 801e576:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801e578:	697b      	ldr	r3, [r7, #20]
 801e57a:	2b6c      	cmp	r3, #108	; 0x6c
 801e57c:	d105      	bne.n	801e58a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801e57e:	683b      	ldr	r3, [r7, #0]
 801e580:	1d1a      	adds	r2, r3, #4
 801e582:	603a      	str	r2, [r7, #0]
 801e584:	681b      	ldr	r3, [r3, #0]
 801e586:	637b      	str	r3, [r7, #52]	; 0x34
 801e588:	e00f      	b.n	801e5aa <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801e58a:	6a3b      	ldr	r3, [r7, #32]
 801e58c:	f003 0302 	and.w	r3, r3, #2
 801e590:	2b00      	cmp	r3, #0
 801e592:	d005      	beq.n	801e5a0 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801e594:	683b      	ldr	r3, [r7, #0]
 801e596:	1d1a      	adds	r2, r3, #4
 801e598:	603a      	str	r2, [r7, #0]
 801e59a:	681b      	ldr	r3, [r3, #0]
 801e59c:	637b      	str	r3, [r7, #52]	; 0x34
 801e59e:	e004      	b.n	801e5aa <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801e5a0:	683b      	ldr	r3, [r7, #0]
 801e5a2:	1d1a      	adds	r2, r3, #4
 801e5a4:	603a      	str	r2, [r7, #0]
 801e5a6:	681b      	ldr	r3, [r3, #0]
 801e5a8:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801e5aa:	68bb      	ldr	r3, [r7, #8]
 801e5ac:	1e5a      	subs	r2, r3, #1
 801e5ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e5b0:	68fb      	ldr	r3, [r7, #12]
 801e5b2:	1acb      	subs	r3, r1, r3
 801e5b4:	1ad1      	subs	r1, r2, r3
 801e5b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e5b8:	6a3b      	ldr	r3, [r7, #32]
 801e5ba:	9302      	str	r3, [sp, #8]
 801e5bc:	69bb      	ldr	r3, [r7, #24]
 801e5be:	9301      	str	r3, [sp, #4]
 801e5c0:	69fb      	ldr	r3, [r7, #28]
 801e5c2:	9300      	str	r3, [sp, #0]
 801e5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e5c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e5c8:	f7ff fde0 	bl	801e18c <ee_number>
 801e5cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 801e5ce:	e000      	b.n	801e5d2 <tiny_vsnprintf_like+0x26a>
        continue;
 801e5d0:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	3301      	adds	r3, #1
 801e5d6:	607b      	str	r3, [r7, #4]
 801e5d8:	687b      	ldr	r3, [r7, #4]
 801e5da:	781b      	ldrb	r3, [r3, #0]
 801e5dc:	2b00      	cmp	r3, #0
 801e5de:	f47f aed2 	bne.w	801e386 <tiny_vsnprintf_like+0x1e>
 801e5e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e5e4:	68fb      	ldr	r3, [r7, #12]
 801e5e6:	1ad2      	subs	r2, r2, r3
 801e5e8:	68bb      	ldr	r3, [r7, #8]
 801e5ea:	3b01      	subs	r3, #1
 801e5ec:	429a      	cmp	r2, r3
 801e5ee:	f6bf aeca 	bge.w	801e386 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801e5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5f4:	2200      	movs	r2, #0
 801e5f6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801e5f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e5fa:	68fb      	ldr	r3, [r7, #12]
 801e5fc:	1ad3      	subs	r3, r2, r3
}
 801e5fe:	4618      	mov	r0, r3
 801e600:	3738      	adds	r7, #56	; 0x38
 801e602:	46bd      	mov	sp, r7
 801e604:	bd80      	pop	{r7, pc}
 801e606:	bf00      	nop
 801e608:	0801fed8 	.word	0x0801fed8

0801e60c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801e60c:	b580      	push	{r7, lr}
 801e60e:	b090      	sub	sp, #64	; 0x40
 801e610:	af00      	add	r7, sp, #0
 801e612:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801e614:	4b73      	ldr	r3, [pc, #460]	; (801e7e4 <UTIL_SEQ_Run+0x1d8>)
 801e616:	681b      	ldr	r3, [r3, #0]
 801e618:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801e61a:	4b72      	ldr	r3, [pc, #456]	; (801e7e4 <UTIL_SEQ_Run+0x1d8>)
 801e61c:	681a      	ldr	r2, [r3, #0]
 801e61e:	687b      	ldr	r3, [r7, #4]
 801e620:	4013      	ands	r3, r2
 801e622:	4a70      	ldr	r2, [pc, #448]	; (801e7e4 <UTIL_SEQ_Run+0x1d8>)
 801e624:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801e626:	4b70      	ldr	r3, [pc, #448]	; (801e7e8 <UTIL_SEQ_Run+0x1dc>)
 801e628:	681b      	ldr	r3, [r3, #0]
 801e62a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801e62c:	4b6f      	ldr	r3, [pc, #444]	; (801e7ec <UTIL_SEQ_Run+0x1e0>)
 801e62e:	681b      	ldr	r3, [r3, #0]
 801e630:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801e632:	4b6f      	ldr	r3, [pc, #444]	; (801e7f0 <UTIL_SEQ_Run+0x1e4>)
 801e634:	681b      	ldr	r3, [r3, #0]
 801e636:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801e638:	4b6e      	ldr	r3, [pc, #440]	; (801e7f4 <UTIL_SEQ_Run+0x1e8>)
 801e63a:	681b      	ldr	r3, [r3, #0]
 801e63c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801e63e:	e08d      	b.n	801e75c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801e640:	2300      	movs	r3, #0
 801e642:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801e644:	e002      	b.n	801e64c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801e646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e648:	3301      	adds	r3, #1
 801e64a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801e64c:	4a6a      	ldr	r2, [pc, #424]	; (801e7f8 <UTIL_SEQ_Run+0x1ec>)
 801e64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e650:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801e654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e656:	401a      	ands	r2, r3
 801e658:	4b62      	ldr	r3, [pc, #392]	; (801e7e4 <UTIL_SEQ_Run+0x1d8>)
 801e65a:	681b      	ldr	r3, [r3, #0]
 801e65c:	4013      	ands	r3, r2
 801e65e:	2b00      	cmp	r3, #0
 801e660:	d0f1      	beq.n	801e646 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801e662:	4a65      	ldr	r2, [pc, #404]	; (801e7f8 <UTIL_SEQ_Run+0x1ec>)
 801e664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e666:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801e66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e66c:	401a      	ands	r2, r3
 801e66e:	4b5d      	ldr	r3, [pc, #372]	; (801e7e4 <UTIL_SEQ_Run+0x1d8>)
 801e670:	681b      	ldr	r3, [r3, #0]
 801e672:	4013      	ands	r3, r2
 801e674:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801e676:	4a60      	ldr	r2, [pc, #384]	; (801e7f8 <UTIL_SEQ_Run+0x1ec>)
 801e678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e67a:	00db      	lsls	r3, r3, #3
 801e67c:	4413      	add	r3, r2
 801e67e:	685a      	ldr	r2, [r3, #4]
 801e680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e682:	4013      	ands	r3, r2
 801e684:	2b00      	cmp	r3, #0
 801e686:	d106      	bne.n	801e696 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801e688:	4a5b      	ldr	r2, [pc, #364]	; (801e7f8 <UTIL_SEQ_Run+0x1ec>)
 801e68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e68c:	00db      	lsls	r3, r3, #3
 801e68e:	4413      	add	r3, r2
 801e690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e694:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801e696:	4a58      	ldr	r2, [pc, #352]	; (801e7f8 <UTIL_SEQ_Run+0x1ec>)
 801e698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e69a:	00db      	lsls	r3, r3, #3
 801e69c:	4413      	add	r3, r2
 801e69e:	685a      	ldr	r2, [r3, #4]
 801e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6a2:	4013      	ands	r3, r2
 801e6a4:	4618      	mov	r0, r3
 801e6a6:	f000 f907 	bl	801e8b8 <SEQ_BitPosition>
 801e6aa:	4603      	mov	r3, r0
 801e6ac:	461a      	mov	r2, r3
 801e6ae:	4b53      	ldr	r3, [pc, #332]	; (801e7fc <UTIL_SEQ_Run+0x1f0>)
 801e6b0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801e6b2:	4a51      	ldr	r2, [pc, #324]	; (801e7f8 <UTIL_SEQ_Run+0x1ec>)
 801e6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e6b6:	00db      	lsls	r3, r3, #3
 801e6b8:	4413      	add	r3, r2
 801e6ba:	685a      	ldr	r2, [r3, #4]
 801e6bc:	4b4f      	ldr	r3, [pc, #316]	; (801e7fc <UTIL_SEQ_Run+0x1f0>)
 801e6be:	681b      	ldr	r3, [r3, #0]
 801e6c0:	2101      	movs	r1, #1
 801e6c2:	fa01 f303 	lsl.w	r3, r1, r3
 801e6c6:	43db      	mvns	r3, r3
 801e6c8:	401a      	ands	r2, r3
 801e6ca:	494b      	ldr	r1, [pc, #300]	; (801e7f8 <UTIL_SEQ_Run+0x1ec>)
 801e6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e6ce:	00db      	lsls	r3, r3, #3
 801e6d0:	440b      	add	r3, r1
 801e6d2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e6d4:	f3ef 8310 	mrs	r3, PRIMASK
 801e6d8:	61bb      	str	r3, [r7, #24]
  return(result);
 801e6da:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801e6dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801e6de:	b672      	cpsid	i
}
 801e6e0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801e6e2:	4b46      	ldr	r3, [pc, #280]	; (801e7fc <UTIL_SEQ_Run+0x1f0>)
 801e6e4:	681b      	ldr	r3, [r3, #0]
 801e6e6:	2201      	movs	r2, #1
 801e6e8:	fa02 f303 	lsl.w	r3, r2, r3
 801e6ec:	43da      	mvns	r2, r3
 801e6ee:	4b3e      	ldr	r3, [pc, #248]	; (801e7e8 <UTIL_SEQ_Run+0x1dc>)
 801e6f0:	681b      	ldr	r3, [r3, #0]
 801e6f2:	4013      	ands	r3, r2
 801e6f4:	4a3c      	ldr	r2, [pc, #240]	; (801e7e8 <UTIL_SEQ_Run+0x1dc>)
 801e6f6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801e6f8:	2301      	movs	r3, #1
 801e6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e6fc:	e013      	b.n	801e726 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801e6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e700:	3b01      	subs	r3, #1
 801e702:	4a3d      	ldr	r2, [pc, #244]	; (801e7f8 <UTIL_SEQ_Run+0x1ec>)
 801e704:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801e708:	4b3c      	ldr	r3, [pc, #240]	; (801e7fc <UTIL_SEQ_Run+0x1f0>)
 801e70a:	681b      	ldr	r3, [r3, #0]
 801e70c:	2201      	movs	r2, #1
 801e70e:	fa02 f303 	lsl.w	r3, r2, r3
 801e712:	43da      	mvns	r2, r3
 801e714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e716:	3b01      	subs	r3, #1
 801e718:	400a      	ands	r2, r1
 801e71a:	4937      	ldr	r1, [pc, #220]	; (801e7f8 <UTIL_SEQ_Run+0x1ec>)
 801e71c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801e720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e722:	3b01      	subs	r3, #1
 801e724:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e728:	2b00      	cmp	r3, #0
 801e72a:	d1e8      	bne.n	801e6fe <UTIL_SEQ_Run+0xf2>
 801e72c:	6a3b      	ldr	r3, [r7, #32]
 801e72e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e730:	697b      	ldr	r3, [r7, #20]
 801e732:	f383 8810 	msr	PRIMASK, r3
}
 801e736:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801e738:	4b30      	ldr	r3, [pc, #192]	; (801e7fc <UTIL_SEQ_Run+0x1f0>)
 801e73a:	681b      	ldr	r3, [r3, #0]
 801e73c:	4a30      	ldr	r2, [pc, #192]	; (801e800 <UTIL_SEQ_Run+0x1f4>)
 801e73e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e742:	4798      	blx	r3

    local_taskset = TaskSet;
 801e744:	4b28      	ldr	r3, [pc, #160]	; (801e7e8 <UTIL_SEQ_Run+0x1dc>)
 801e746:	681b      	ldr	r3, [r3, #0]
 801e748:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801e74a:	4b28      	ldr	r3, [pc, #160]	; (801e7ec <UTIL_SEQ_Run+0x1e0>)
 801e74c:	681b      	ldr	r3, [r3, #0]
 801e74e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801e750:	4b27      	ldr	r3, [pc, #156]	; (801e7f0 <UTIL_SEQ_Run+0x1e4>)
 801e752:	681b      	ldr	r3, [r3, #0]
 801e754:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801e756:	4b27      	ldr	r3, [pc, #156]	; (801e7f4 <UTIL_SEQ_Run+0x1e8>)
 801e758:	681b      	ldr	r3, [r3, #0]
 801e75a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801e75c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e760:	401a      	ands	r2, r3
 801e762:	4b20      	ldr	r3, [pc, #128]	; (801e7e4 <UTIL_SEQ_Run+0x1d8>)
 801e764:	681b      	ldr	r3, [r3, #0]
 801e766:	4013      	ands	r3, r2
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d005      	beq.n	801e778 <UTIL_SEQ_Run+0x16c>
 801e76c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e770:	4013      	ands	r3, r2
 801e772:	2b00      	cmp	r3, #0
 801e774:	f43f af64 	beq.w	801e640 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801e778:	4b20      	ldr	r3, [pc, #128]	; (801e7fc <UTIL_SEQ_Run+0x1f0>)
 801e77a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e77e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801e780:	f000 f88e 	bl	801e8a0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e784:	f3ef 8310 	mrs	r3, PRIMASK
 801e788:	613b      	str	r3, [r7, #16]
  return(result);
 801e78a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801e78c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e78e:	b672      	cpsid	i
}
 801e790:	bf00      	nop
  local_taskset = TaskSet;
 801e792:	4b15      	ldr	r3, [pc, #84]	; (801e7e8 <UTIL_SEQ_Run+0x1dc>)
 801e794:	681b      	ldr	r3, [r3, #0]
 801e796:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801e798:	4b14      	ldr	r3, [pc, #80]	; (801e7ec <UTIL_SEQ_Run+0x1e0>)
 801e79a:	681b      	ldr	r3, [r3, #0]
 801e79c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801e79e:	4b14      	ldr	r3, [pc, #80]	; (801e7f0 <UTIL_SEQ_Run+0x1e4>)
 801e7a0:	681b      	ldr	r3, [r3, #0]
 801e7a2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801e7a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e7a8:	401a      	ands	r2, r3
 801e7aa:	4b0e      	ldr	r3, [pc, #56]	; (801e7e4 <UTIL_SEQ_Run+0x1d8>)
 801e7ac:	681b      	ldr	r3, [r3, #0]
 801e7ae:	4013      	ands	r3, r2
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	d107      	bne.n	801e7c4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801e7b4:	4b0f      	ldr	r3, [pc, #60]	; (801e7f4 <UTIL_SEQ_Run+0x1e8>)
 801e7b6:	681a      	ldr	r2, [r3, #0]
 801e7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e7ba:	4013      	ands	r3, r2
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	d101      	bne.n	801e7c4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801e7c0:	f7e3 fe9a 	bl	80024f8 <UTIL_SEQ_Idle>
 801e7c4:	69fb      	ldr	r3, [r7, #28]
 801e7c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7c8:	68fb      	ldr	r3, [r7, #12]
 801e7ca:	f383 8810 	msr	PRIMASK, r3
}
 801e7ce:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801e7d0:	f000 f86c 	bl	801e8ac <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801e7d4:	4a03      	ldr	r2, [pc, #12]	; (801e7e4 <UTIL_SEQ_Run+0x1d8>)
 801e7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7d8:	6013      	str	r3, [r2, #0]

  return;
 801e7da:	bf00      	nop
}
 801e7dc:	3740      	adds	r7, #64	; 0x40
 801e7de:	46bd      	mov	sp, r7
 801e7e0:	bd80      	pop	{r7, pc}
 801e7e2:	bf00      	nop
 801e7e4:	20000144 	.word	0x20000144
 801e7e8:	20001d94 	.word	0x20001d94
 801e7ec:	20001d98 	.word	0x20001d98
 801e7f0:	20000140 	.word	0x20000140
 801e7f4:	20001d9c 	.word	0x20001d9c
 801e7f8:	20001db4 	.word	0x20001db4
 801e7fc:	20001da0 	.word	0x20001da0
 801e800:	20001da4 	.word	0x20001da4

0801e804 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801e804:	b580      	push	{r7, lr}
 801e806:	b088      	sub	sp, #32
 801e808:	af00      	add	r7, sp, #0
 801e80a:	60f8      	str	r0, [r7, #12]
 801e80c:	60b9      	str	r1, [r7, #8]
 801e80e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e810:	f3ef 8310 	mrs	r3, PRIMASK
 801e814:	617b      	str	r3, [r7, #20]
  return(result);
 801e816:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801e818:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e81a:	b672      	cpsid	i
}
 801e81c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801e81e:	68f8      	ldr	r0, [r7, #12]
 801e820:	f000 f84a 	bl	801e8b8 <SEQ_BitPosition>
 801e824:	4603      	mov	r3, r0
 801e826:	4619      	mov	r1, r3
 801e828:	4a06      	ldr	r2, [pc, #24]	; (801e844 <UTIL_SEQ_RegTask+0x40>)
 801e82a:	687b      	ldr	r3, [r7, #4]
 801e82c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801e830:	69fb      	ldr	r3, [r7, #28]
 801e832:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e834:	69bb      	ldr	r3, [r7, #24]
 801e836:	f383 8810 	msr	PRIMASK, r3
}
 801e83a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801e83c:	bf00      	nop
}
 801e83e:	3720      	adds	r7, #32
 801e840:	46bd      	mov	sp, r7
 801e842:	bd80      	pop	{r7, pc}
 801e844:	20001da4 	.word	0x20001da4

0801e848 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801e848:	b480      	push	{r7}
 801e84a:	b087      	sub	sp, #28
 801e84c:	af00      	add	r7, sp, #0
 801e84e:	6078      	str	r0, [r7, #4]
 801e850:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e852:	f3ef 8310 	mrs	r3, PRIMASK
 801e856:	60fb      	str	r3, [r7, #12]
  return(result);
 801e858:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801e85a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e85c:	b672      	cpsid	i
}
 801e85e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801e860:	4b0d      	ldr	r3, [pc, #52]	; (801e898 <UTIL_SEQ_SetTask+0x50>)
 801e862:	681a      	ldr	r2, [r3, #0]
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	4313      	orrs	r3, r2
 801e868:	4a0b      	ldr	r2, [pc, #44]	; (801e898 <UTIL_SEQ_SetTask+0x50>)
 801e86a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801e86c:	4a0b      	ldr	r2, [pc, #44]	; (801e89c <UTIL_SEQ_SetTask+0x54>)
 801e86e:	683b      	ldr	r3, [r7, #0]
 801e870:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	431a      	orrs	r2, r3
 801e878:	4908      	ldr	r1, [pc, #32]	; (801e89c <UTIL_SEQ_SetTask+0x54>)
 801e87a:	683b      	ldr	r3, [r7, #0]
 801e87c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801e880:	697b      	ldr	r3, [r7, #20]
 801e882:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e884:	693b      	ldr	r3, [r7, #16]
 801e886:	f383 8810 	msr	PRIMASK, r3
}
 801e88a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801e88c:	bf00      	nop
}
 801e88e:	371c      	adds	r7, #28
 801e890:	46bd      	mov	sp, r7
 801e892:	bc80      	pop	{r7}
 801e894:	4770      	bx	lr
 801e896:	bf00      	nop
 801e898:	20001d94 	.word	0x20001d94
 801e89c:	20001db4 	.word	0x20001db4

0801e8a0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801e8a0:	b480      	push	{r7}
 801e8a2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801e8a4:	bf00      	nop
}
 801e8a6:	46bd      	mov	sp, r7
 801e8a8:	bc80      	pop	{r7}
 801e8aa:	4770      	bx	lr

0801e8ac <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801e8ac:	b480      	push	{r7}
 801e8ae:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801e8b0:	bf00      	nop
}
 801e8b2:	46bd      	mov	sp, r7
 801e8b4:	bc80      	pop	{r7}
 801e8b6:	4770      	bx	lr

0801e8b8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801e8b8:	b480      	push	{r7}
 801e8ba:	b085      	sub	sp, #20
 801e8bc:	af00      	add	r7, sp, #0
 801e8be:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801e8c0:	2300      	movs	r3, #0
 801e8c2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801e8c8:	68bb      	ldr	r3, [r7, #8]
 801e8ca:	0c1b      	lsrs	r3, r3, #16
 801e8cc:	041b      	lsls	r3, r3, #16
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	d104      	bne.n	801e8dc <SEQ_BitPosition+0x24>
 801e8d2:	2310      	movs	r3, #16
 801e8d4:	73fb      	strb	r3, [r7, #15]
 801e8d6:	68bb      	ldr	r3, [r7, #8]
 801e8d8:	041b      	lsls	r3, r3, #16
 801e8da:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801e8dc:	68bb      	ldr	r3, [r7, #8]
 801e8de:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801e8e2:	2b00      	cmp	r3, #0
 801e8e4:	d105      	bne.n	801e8f2 <SEQ_BitPosition+0x3a>
 801e8e6:	7bfb      	ldrb	r3, [r7, #15]
 801e8e8:	3308      	adds	r3, #8
 801e8ea:	73fb      	strb	r3, [r7, #15]
 801e8ec:	68bb      	ldr	r3, [r7, #8]
 801e8ee:	021b      	lsls	r3, r3, #8
 801e8f0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801e8f2:	68bb      	ldr	r3, [r7, #8]
 801e8f4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801e8f8:	2b00      	cmp	r3, #0
 801e8fa:	d105      	bne.n	801e908 <SEQ_BitPosition+0x50>
 801e8fc:	7bfb      	ldrb	r3, [r7, #15]
 801e8fe:	3304      	adds	r3, #4
 801e900:	73fb      	strb	r3, [r7, #15]
 801e902:	68bb      	ldr	r3, [r7, #8]
 801e904:	011b      	lsls	r3, r3, #4
 801e906:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801e908:	68bb      	ldr	r3, [r7, #8]
 801e90a:	0f1b      	lsrs	r3, r3, #28
 801e90c:	4a06      	ldr	r2, [pc, #24]	; (801e928 <SEQ_BitPosition+0x70>)
 801e90e:	5cd2      	ldrb	r2, [r2, r3]
 801e910:	7bfb      	ldrb	r3, [r7, #15]
 801e912:	4413      	add	r3, r2
 801e914:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801e916:	7bfb      	ldrb	r3, [r7, #15]
 801e918:	f1c3 031f 	rsb	r3, r3, #31
 801e91c:	b2db      	uxtb	r3, r3
}
 801e91e:	4618      	mov	r0, r3
 801e920:	3714      	adds	r7, #20
 801e922:	46bd      	mov	sp, r7
 801e924:	bc80      	pop	{r7}
 801e926:	4770      	bx	lr
 801e928:	08020568 	.word	0x08020568

0801e92c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801e92c:	b580      	push	{r7, lr}
 801e92e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801e930:	4b04      	ldr	r3, [pc, #16]	; (801e944 <UTIL_TIMER_Init+0x18>)
 801e932:	2200      	movs	r2, #0
 801e934:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801e936:	4b04      	ldr	r3, [pc, #16]	; (801e948 <UTIL_TIMER_Init+0x1c>)
 801e938:	681b      	ldr	r3, [r3, #0]
 801e93a:	4798      	blx	r3
 801e93c:	4603      	mov	r3, r0
}
 801e93e:	4618      	mov	r0, r3
 801e940:	bd80      	pop	{r7, pc}
 801e942:	bf00      	nop
 801e944:	20001dbc 	.word	0x20001dbc
 801e948:	0801ff98 	.word	0x0801ff98

0801e94c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801e94c:	b580      	push	{r7, lr}
 801e94e:	b084      	sub	sp, #16
 801e950:	af00      	add	r7, sp, #0
 801e952:	60f8      	str	r0, [r7, #12]
 801e954:	60b9      	str	r1, [r7, #8]
 801e956:	603b      	str	r3, [r7, #0]
 801e958:	4613      	mov	r3, r2
 801e95a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801e95c:	68fb      	ldr	r3, [r7, #12]
 801e95e:	2b00      	cmp	r3, #0
 801e960:	d023      	beq.n	801e9aa <UTIL_TIMER_Create+0x5e>
 801e962:	683b      	ldr	r3, [r7, #0]
 801e964:	2b00      	cmp	r3, #0
 801e966:	d020      	beq.n	801e9aa <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801e968:	68fb      	ldr	r3, [r7, #12]
 801e96a:	2200      	movs	r2, #0
 801e96c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801e96e:	4b11      	ldr	r3, [pc, #68]	; (801e9b4 <UTIL_TIMER_Create+0x68>)
 801e970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e972:	68b8      	ldr	r0, [r7, #8]
 801e974:	4798      	blx	r3
 801e976:	4602      	mov	r2, r0
 801e978:	68fb      	ldr	r3, [r7, #12]
 801e97a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801e97c:	68fb      	ldr	r3, [r7, #12]
 801e97e:	2200      	movs	r2, #0
 801e980:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801e982:	68fb      	ldr	r3, [r7, #12]
 801e984:	2200      	movs	r2, #0
 801e986:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e988:	68fb      	ldr	r3, [r7, #12]
 801e98a:	2200      	movs	r2, #0
 801e98c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801e98e:	68fb      	ldr	r3, [r7, #12]
 801e990:	683a      	ldr	r2, [r7, #0]
 801e992:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801e994:	68fb      	ldr	r3, [r7, #12]
 801e996:	69ba      	ldr	r2, [r7, #24]
 801e998:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801e99a:	68fb      	ldr	r3, [r7, #12]
 801e99c:	79fa      	ldrb	r2, [r7, #7]
 801e99e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801e9a0:	68fb      	ldr	r3, [r7, #12]
 801e9a2:	2200      	movs	r2, #0
 801e9a4:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801e9a6:	2300      	movs	r3, #0
 801e9a8:	e000      	b.n	801e9ac <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801e9aa:	2301      	movs	r3, #1
  }
}
 801e9ac:	4618      	mov	r0, r3
 801e9ae:	3710      	adds	r7, #16
 801e9b0:	46bd      	mov	sp, r7
 801e9b2:	bd80      	pop	{r7, pc}
 801e9b4:	0801ff98 	.word	0x0801ff98

0801e9b8 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801e9b8:	b580      	push	{r7, lr}
 801e9ba:	b08a      	sub	sp, #40	; 0x28
 801e9bc:	af00      	add	r7, sp, #0
 801e9be:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e9c0:	2300      	movs	r3, #0
 801e9c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801e9c6:	687b      	ldr	r3, [r7, #4]
 801e9c8:	2b00      	cmp	r3, #0
 801e9ca:	d056      	beq.n	801ea7a <UTIL_TIMER_Start+0xc2>
 801e9cc:	6878      	ldr	r0, [r7, #4]
 801e9ce:	f000 f9a9 	bl	801ed24 <TimerExists>
 801e9d2:	4603      	mov	r3, r0
 801e9d4:	f083 0301 	eor.w	r3, r3, #1
 801e9d8:	b2db      	uxtb	r3, r3
 801e9da:	2b00      	cmp	r3, #0
 801e9dc:	d04d      	beq.n	801ea7a <UTIL_TIMER_Start+0xc2>
 801e9de:	687b      	ldr	r3, [r7, #4]
 801e9e0:	7a5b      	ldrb	r3, [r3, #9]
 801e9e2:	2b00      	cmp	r3, #0
 801e9e4:	d149      	bne.n	801ea7a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9e6:	f3ef 8310 	mrs	r3, PRIMASK
 801e9ea:	613b      	str	r3, [r7, #16]
  return(result);
 801e9ec:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e9ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e9f0:	b672      	cpsid	i
}
 801e9f2:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801e9f4:	687b      	ldr	r3, [r7, #4]
 801e9f6:	685b      	ldr	r3, [r3, #4]
 801e9f8:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801e9fa:	4b24      	ldr	r3, [pc, #144]	; (801ea8c <UTIL_TIMER_Start+0xd4>)
 801e9fc:	6a1b      	ldr	r3, [r3, #32]
 801e9fe:	4798      	blx	r3
 801ea00:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801ea02:	6a3a      	ldr	r2, [r7, #32]
 801ea04:	69bb      	ldr	r3, [r7, #24]
 801ea06:	429a      	cmp	r2, r3
 801ea08:	d201      	bcs.n	801ea0e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801ea0a:	69bb      	ldr	r3, [r7, #24]
 801ea0c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	6a3a      	ldr	r2, [r7, #32]
 801ea12:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801ea14:	687b      	ldr	r3, [r7, #4]
 801ea16:	2200      	movs	r2, #0
 801ea18:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801ea1a:	687b      	ldr	r3, [r7, #4]
 801ea1c:	2201      	movs	r2, #1
 801ea1e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	2200      	movs	r2, #0
 801ea24:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801ea26:	4b1a      	ldr	r3, [pc, #104]	; (801ea90 <UTIL_TIMER_Start+0xd8>)
 801ea28:	681b      	ldr	r3, [r3, #0]
 801ea2a:	2b00      	cmp	r3, #0
 801ea2c:	d106      	bne.n	801ea3c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801ea2e:	4b17      	ldr	r3, [pc, #92]	; (801ea8c <UTIL_TIMER_Start+0xd4>)
 801ea30:	691b      	ldr	r3, [r3, #16]
 801ea32:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801ea34:	6878      	ldr	r0, [r7, #4]
 801ea36:	f000 f9eb 	bl	801ee10 <TimerInsertNewHeadTimer>
 801ea3a:	e017      	b.n	801ea6c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801ea3c:	4b13      	ldr	r3, [pc, #76]	; (801ea8c <UTIL_TIMER_Start+0xd4>)
 801ea3e:	699b      	ldr	r3, [r3, #24]
 801ea40:	4798      	blx	r3
 801ea42:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801ea44:	687b      	ldr	r3, [r7, #4]
 801ea46:	681a      	ldr	r2, [r3, #0]
 801ea48:	697b      	ldr	r3, [r7, #20]
 801ea4a:	441a      	add	r2, r3
 801ea4c:	687b      	ldr	r3, [r7, #4]
 801ea4e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801ea50:	687b      	ldr	r3, [r7, #4]
 801ea52:	681a      	ldr	r2, [r3, #0]
 801ea54:	4b0e      	ldr	r3, [pc, #56]	; (801ea90 <UTIL_TIMER_Start+0xd8>)
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	681b      	ldr	r3, [r3, #0]
 801ea5a:	429a      	cmp	r2, r3
 801ea5c:	d203      	bcs.n	801ea66 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801ea5e:	6878      	ldr	r0, [r7, #4]
 801ea60:	f000 f9d6 	bl	801ee10 <TimerInsertNewHeadTimer>
 801ea64:	e002      	b.n	801ea6c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801ea66:	6878      	ldr	r0, [r7, #4]
 801ea68:	f000 f9a2 	bl	801edb0 <TimerInsertTimer>
 801ea6c:	69fb      	ldr	r3, [r7, #28]
 801ea6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea70:	68fb      	ldr	r3, [r7, #12]
 801ea72:	f383 8810 	msr	PRIMASK, r3
}
 801ea76:	bf00      	nop
  {
 801ea78:	e002      	b.n	801ea80 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801ea7a:	2301      	movs	r3, #1
 801ea7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801ea80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801ea84:	4618      	mov	r0, r3
 801ea86:	3728      	adds	r7, #40	; 0x28
 801ea88:	46bd      	mov	sp, r7
 801ea8a:	bd80      	pop	{r7, pc}
 801ea8c:	0801ff98 	.word	0x0801ff98
 801ea90:	20001dbc 	.word	0x20001dbc

0801ea94 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801ea94:	b580      	push	{r7, lr}
 801ea96:	b088      	sub	sp, #32
 801ea98:	af00      	add	r7, sp, #0
 801ea9a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ea9c:	2300      	movs	r3, #0
 801ea9e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	2b00      	cmp	r3, #0
 801eaa4:	d05b      	beq.n	801eb5e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eaa6:	f3ef 8310 	mrs	r3, PRIMASK
 801eaaa:	60fb      	str	r3, [r7, #12]
  return(result);
 801eaac:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801eaae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801eab0:	b672      	cpsid	i
}
 801eab2:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801eab4:	4b2d      	ldr	r3, [pc, #180]	; (801eb6c <UTIL_TIMER_Stop+0xd8>)
 801eab6:	681b      	ldr	r3, [r3, #0]
 801eab8:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801eaba:	4b2c      	ldr	r3, [pc, #176]	; (801eb6c <UTIL_TIMER_Stop+0xd8>)
 801eabc:	681b      	ldr	r3, [r3, #0]
 801eabe:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801eac0:	687b      	ldr	r3, [r7, #4]
 801eac2:	2201      	movs	r2, #1
 801eac4:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801eac6:	4b29      	ldr	r3, [pc, #164]	; (801eb6c <UTIL_TIMER_Stop+0xd8>)
 801eac8:	681b      	ldr	r3, [r3, #0]
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	d041      	beq.n	801eb52 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801eace:	687b      	ldr	r3, [r7, #4]
 801ead0:	2200      	movs	r2, #0
 801ead2:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801ead4:	4b25      	ldr	r3, [pc, #148]	; (801eb6c <UTIL_TIMER_Stop+0xd8>)
 801ead6:	681b      	ldr	r3, [r3, #0]
 801ead8:	687a      	ldr	r2, [r7, #4]
 801eada:	429a      	cmp	r2, r3
 801eadc:	d134      	bne.n	801eb48 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801eade:	4b23      	ldr	r3, [pc, #140]	; (801eb6c <UTIL_TIMER_Stop+0xd8>)
 801eae0:	681b      	ldr	r3, [r3, #0]
 801eae2:	2200      	movs	r2, #0
 801eae4:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801eae6:	4b21      	ldr	r3, [pc, #132]	; (801eb6c <UTIL_TIMER_Stop+0xd8>)
 801eae8:	681b      	ldr	r3, [r3, #0]
 801eaea:	695b      	ldr	r3, [r3, #20]
 801eaec:	2b00      	cmp	r3, #0
 801eaee:	d00a      	beq.n	801eb06 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801eaf0:	4b1e      	ldr	r3, [pc, #120]	; (801eb6c <UTIL_TIMER_Stop+0xd8>)
 801eaf2:	681b      	ldr	r3, [r3, #0]
 801eaf4:	695b      	ldr	r3, [r3, #20]
 801eaf6:	4a1d      	ldr	r2, [pc, #116]	; (801eb6c <UTIL_TIMER_Stop+0xd8>)
 801eaf8:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801eafa:	4b1c      	ldr	r3, [pc, #112]	; (801eb6c <UTIL_TIMER_Stop+0xd8>)
 801eafc:	681b      	ldr	r3, [r3, #0]
 801eafe:	4618      	mov	r0, r3
 801eb00:	f000 f92c 	bl	801ed5c <TimerSetTimeout>
 801eb04:	e023      	b.n	801eb4e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801eb06:	4b1a      	ldr	r3, [pc, #104]	; (801eb70 <UTIL_TIMER_Stop+0xdc>)
 801eb08:	68db      	ldr	r3, [r3, #12]
 801eb0a:	4798      	blx	r3
            TimerListHead = NULL;
 801eb0c:	4b17      	ldr	r3, [pc, #92]	; (801eb6c <UTIL_TIMER_Stop+0xd8>)
 801eb0e:	2200      	movs	r2, #0
 801eb10:	601a      	str	r2, [r3, #0]
 801eb12:	e01c      	b.n	801eb4e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801eb14:	697a      	ldr	r2, [r7, #20]
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	429a      	cmp	r2, r3
 801eb1a:	d110      	bne.n	801eb3e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801eb1c:	697b      	ldr	r3, [r7, #20]
 801eb1e:	695b      	ldr	r3, [r3, #20]
 801eb20:	2b00      	cmp	r3, #0
 801eb22:	d006      	beq.n	801eb32 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801eb24:	697b      	ldr	r3, [r7, #20]
 801eb26:	695b      	ldr	r3, [r3, #20]
 801eb28:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801eb2a:	69bb      	ldr	r3, [r7, #24]
 801eb2c:	697a      	ldr	r2, [r7, #20]
 801eb2e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801eb30:	e00d      	b.n	801eb4e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801eb32:	2300      	movs	r3, #0
 801eb34:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801eb36:	69bb      	ldr	r3, [r7, #24]
 801eb38:	697a      	ldr	r2, [r7, #20]
 801eb3a:	615a      	str	r2, [r3, #20]
            break;
 801eb3c:	e007      	b.n	801eb4e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801eb3e:	697b      	ldr	r3, [r7, #20]
 801eb40:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801eb42:	697b      	ldr	r3, [r7, #20]
 801eb44:	695b      	ldr	r3, [r3, #20]
 801eb46:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801eb48:	697b      	ldr	r3, [r7, #20]
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	d1e2      	bne.n	801eb14 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801eb4e:	2300      	movs	r3, #0
 801eb50:	77fb      	strb	r3, [r7, #31]
 801eb52:	693b      	ldr	r3, [r7, #16]
 801eb54:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb56:	68bb      	ldr	r3, [r7, #8]
 801eb58:	f383 8810 	msr	PRIMASK, r3
}
 801eb5c:	e001      	b.n	801eb62 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801eb5e:	2301      	movs	r3, #1
 801eb60:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801eb62:	7ffb      	ldrb	r3, [r7, #31]
}
 801eb64:	4618      	mov	r0, r3
 801eb66:	3720      	adds	r7, #32
 801eb68:	46bd      	mov	sp, r7
 801eb6a:	bd80      	pop	{r7, pc}
 801eb6c:	20001dbc 	.word	0x20001dbc
 801eb70:	0801ff98 	.word	0x0801ff98

0801eb74 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801eb74:	b580      	push	{r7, lr}
 801eb76:	b084      	sub	sp, #16
 801eb78:	af00      	add	r7, sp, #0
 801eb7a:	6078      	str	r0, [r7, #4]
 801eb7c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801eb7e:	2300      	movs	r3, #0
 801eb80:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801eb82:	687b      	ldr	r3, [r7, #4]
 801eb84:	2b00      	cmp	r3, #0
 801eb86:	d102      	bne.n	801eb8e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801eb88:	2301      	movs	r3, #1
 801eb8a:	73fb      	strb	r3, [r7, #15]
 801eb8c:	e014      	b.n	801ebb8 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801eb8e:	4b0d      	ldr	r3, [pc, #52]	; (801ebc4 <UTIL_TIMER_SetPeriod+0x50>)
 801eb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb92:	6838      	ldr	r0, [r7, #0]
 801eb94:	4798      	blx	r3
 801eb96:	4602      	mov	r2, r0
 801eb98:	687b      	ldr	r3, [r7, #4]
 801eb9a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801eb9c:	6878      	ldr	r0, [r7, #4]
 801eb9e:	f000 f8c1 	bl	801ed24 <TimerExists>
 801eba2:	4603      	mov	r3, r0
 801eba4:	2b00      	cmp	r3, #0
 801eba6:	d007      	beq.n	801ebb8 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801eba8:	6878      	ldr	r0, [r7, #4]
 801ebaa:	f7ff ff73 	bl	801ea94 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801ebae:	6878      	ldr	r0, [r7, #4]
 801ebb0:	f7ff ff02 	bl	801e9b8 <UTIL_TIMER_Start>
 801ebb4:	4603      	mov	r3, r0
 801ebb6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801ebb8:	7bfb      	ldrb	r3, [r7, #15]
}
 801ebba:	4618      	mov	r0, r3
 801ebbc:	3710      	adds	r7, #16
 801ebbe:	46bd      	mov	sp, r7
 801ebc0:	bd80      	pop	{r7, pc}
 801ebc2:	bf00      	nop
 801ebc4:	0801ff98 	.word	0x0801ff98

0801ebc8 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801ebc8:	b590      	push	{r4, r7, lr}
 801ebca:	b089      	sub	sp, #36	; 0x24
 801ebcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ebce:	f3ef 8310 	mrs	r3, PRIMASK
 801ebd2:	60bb      	str	r3, [r7, #8]
  return(result);
 801ebd4:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ebd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ebd8:	b672      	cpsid	i
}
 801ebda:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801ebdc:	4b38      	ldr	r3, [pc, #224]	; (801ecc0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ebde:	695b      	ldr	r3, [r3, #20]
 801ebe0:	4798      	blx	r3
 801ebe2:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801ebe4:	4b36      	ldr	r3, [pc, #216]	; (801ecc0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ebe6:	691b      	ldr	r3, [r3, #16]
 801ebe8:	4798      	blx	r3
 801ebea:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801ebec:	693a      	ldr	r2, [r7, #16]
 801ebee:	697b      	ldr	r3, [r7, #20]
 801ebf0:	1ad3      	subs	r3, r2, r3
 801ebf2:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801ebf4:	4b33      	ldr	r3, [pc, #204]	; (801ecc4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ebf6:	681b      	ldr	r3, [r3, #0]
 801ebf8:	2b00      	cmp	r3, #0
 801ebfa:	d037      	beq.n	801ec6c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801ebfc:	4b31      	ldr	r3, [pc, #196]	; (801ecc4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ebfe:	681b      	ldr	r3, [r3, #0]
 801ec00:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801ec02:	69fb      	ldr	r3, [r7, #28]
 801ec04:	681b      	ldr	r3, [r3, #0]
 801ec06:	68fa      	ldr	r2, [r7, #12]
 801ec08:	429a      	cmp	r2, r3
 801ec0a:	d206      	bcs.n	801ec1a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801ec0c:	69fb      	ldr	r3, [r7, #28]
 801ec0e:	681a      	ldr	r2, [r3, #0]
 801ec10:	68fb      	ldr	r3, [r7, #12]
 801ec12:	1ad2      	subs	r2, r2, r3
 801ec14:	69fb      	ldr	r3, [r7, #28]
 801ec16:	601a      	str	r2, [r3, #0]
 801ec18:	e002      	b.n	801ec20 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801ec1a:	69fb      	ldr	r3, [r7, #28]
 801ec1c:	2200      	movs	r2, #0
 801ec1e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801ec20:	69fb      	ldr	r3, [r7, #28]
 801ec22:	695b      	ldr	r3, [r3, #20]
 801ec24:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801ec26:	69fb      	ldr	r3, [r7, #28]
 801ec28:	2b00      	cmp	r3, #0
 801ec2a:	d1ea      	bne.n	801ec02 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ec2c:	e01e      	b.n	801ec6c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801ec2e:	4b25      	ldr	r3, [pc, #148]	; (801ecc4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ec30:	681b      	ldr	r3, [r3, #0]
 801ec32:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801ec34:	4b23      	ldr	r3, [pc, #140]	; (801ecc4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ec36:	681b      	ldr	r3, [r3, #0]
 801ec38:	695b      	ldr	r3, [r3, #20]
 801ec3a:	4a22      	ldr	r2, [pc, #136]	; (801ecc4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ec3c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801ec3e:	69fb      	ldr	r3, [r7, #28]
 801ec40:	2200      	movs	r2, #0
 801ec42:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801ec44:	69fb      	ldr	r3, [r7, #28]
 801ec46:	2200      	movs	r2, #0
 801ec48:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801ec4a:	69fb      	ldr	r3, [r7, #28]
 801ec4c:	68db      	ldr	r3, [r3, #12]
 801ec4e:	69fa      	ldr	r2, [r7, #28]
 801ec50:	6912      	ldr	r2, [r2, #16]
 801ec52:	4610      	mov	r0, r2
 801ec54:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801ec56:	69fb      	ldr	r3, [r7, #28]
 801ec58:	7adb      	ldrb	r3, [r3, #11]
 801ec5a:	2b01      	cmp	r3, #1
 801ec5c:	d106      	bne.n	801ec6c <UTIL_TIMER_IRQ_Handler+0xa4>
 801ec5e:	69fb      	ldr	r3, [r7, #28]
 801ec60:	7a9b      	ldrb	r3, [r3, #10]
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	d102      	bne.n	801ec6c <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801ec66:	69f8      	ldr	r0, [r7, #28]
 801ec68:	f7ff fea6 	bl	801e9b8 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ec6c:	4b15      	ldr	r3, [pc, #84]	; (801ecc4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ec6e:	681b      	ldr	r3, [r3, #0]
 801ec70:	2b00      	cmp	r3, #0
 801ec72:	d00d      	beq.n	801ec90 <UTIL_TIMER_IRQ_Handler+0xc8>
 801ec74:	4b13      	ldr	r3, [pc, #76]	; (801ecc4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ec76:	681b      	ldr	r3, [r3, #0]
 801ec78:	681b      	ldr	r3, [r3, #0]
 801ec7a:	2b00      	cmp	r3, #0
 801ec7c:	d0d7      	beq.n	801ec2e <UTIL_TIMER_IRQ_Handler+0x66>
 801ec7e:	4b11      	ldr	r3, [pc, #68]	; (801ecc4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ec80:	681b      	ldr	r3, [r3, #0]
 801ec82:	681c      	ldr	r4, [r3, #0]
 801ec84:	4b0e      	ldr	r3, [pc, #56]	; (801ecc0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ec86:	699b      	ldr	r3, [r3, #24]
 801ec88:	4798      	blx	r3
 801ec8a:	4603      	mov	r3, r0
 801ec8c:	429c      	cmp	r4, r3
 801ec8e:	d3ce      	bcc.n	801ec2e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801ec90:	4b0c      	ldr	r3, [pc, #48]	; (801ecc4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ec92:	681b      	ldr	r3, [r3, #0]
 801ec94:	2b00      	cmp	r3, #0
 801ec96:	d009      	beq.n	801ecac <UTIL_TIMER_IRQ_Handler+0xe4>
 801ec98:	4b0a      	ldr	r3, [pc, #40]	; (801ecc4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ec9a:	681b      	ldr	r3, [r3, #0]
 801ec9c:	7a1b      	ldrb	r3, [r3, #8]
 801ec9e:	2b00      	cmp	r3, #0
 801eca0:	d104      	bne.n	801ecac <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801eca2:	4b08      	ldr	r3, [pc, #32]	; (801ecc4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801eca4:	681b      	ldr	r3, [r3, #0]
 801eca6:	4618      	mov	r0, r3
 801eca8:	f000 f858 	bl	801ed5c <TimerSetTimeout>
 801ecac:	69bb      	ldr	r3, [r7, #24]
 801ecae:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecb0:	687b      	ldr	r3, [r7, #4]
 801ecb2:	f383 8810 	msr	PRIMASK, r3
}
 801ecb6:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801ecb8:	bf00      	nop
 801ecba:	3724      	adds	r7, #36	; 0x24
 801ecbc:	46bd      	mov	sp, r7
 801ecbe:	bd90      	pop	{r4, r7, pc}
 801ecc0:	0801ff98 	.word	0x0801ff98
 801ecc4:	20001dbc 	.word	0x20001dbc

0801ecc8 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801ecc8:	b580      	push	{r7, lr}
 801ecca:	b082      	sub	sp, #8
 801eccc:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801ecce:	4b06      	ldr	r3, [pc, #24]	; (801ece8 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ecd0:	69db      	ldr	r3, [r3, #28]
 801ecd2:	4798      	blx	r3
 801ecd4:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801ecd6:	4b04      	ldr	r3, [pc, #16]	; (801ece8 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ecd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ecda:	6878      	ldr	r0, [r7, #4]
 801ecdc:	4798      	blx	r3
 801ecde:	4603      	mov	r3, r0
}
 801ece0:	4618      	mov	r0, r3
 801ece2:	3708      	adds	r7, #8
 801ece4:	46bd      	mov	sp, r7
 801ece6:	bd80      	pop	{r7, pc}
 801ece8:	0801ff98 	.word	0x0801ff98

0801ecec <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801ecec:	b580      	push	{r7, lr}
 801ecee:	b084      	sub	sp, #16
 801ecf0:	af00      	add	r7, sp, #0
 801ecf2:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801ecf4:	4b0a      	ldr	r3, [pc, #40]	; (801ed20 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ecf6:	69db      	ldr	r3, [r3, #28]
 801ecf8:	4798      	blx	r3
 801ecfa:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801ecfc:	4b08      	ldr	r3, [pc, #32]	; (801ed20 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ecfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed00:	6878      	ldr	r0, [r7, #4]
 801ed02:	4798      	blx	r3
 801ed04:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801ed06:	4b06      	ldr	r3, [pc, #24]	; (801ed20 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ed08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ed0a:	68f9      	ldr	r1, [r7, #12]
 801ed0c:	68ba      	ldr	r2, [r7, #8]
 801ed0e:	1a8a      	subs	r2, r1, r2
 801ed10:	4610      	mov	r0, r2
 801ed12:	4798      	blx	r3
 801ed14:	4603      	mov	r3, r0
}
 801ed16:	4618      	mov	r0, r3
 801ed18:	3710      	adds	r7, #16
 801ed1a:	46bd      	mov	sp, r7
 801ed1c:	bd80      	pop	{r7, pc}
 801ed1e:	bf00      	nop
 801ed20:	0801ff98 	.word	0x0801ff98

0801ed24 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801ed24:	b480      	push	{r7}
 801ed26:	b085      	sub	sp, #20
 801ed28:	af00      	add	r7, sp, #0
 801ed2a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ed2c:	4b0a      	ldr	r3, [pc, #40]	; (801ed58 <TimerExists+0x34>)
 801ed2e:	681b      	ldr	r3, [r3, #0]
 801ed30:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801ed32:	e008      	b.n	801ed46 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801ed34:	68fa      	ldr	r2, [r7, #12]
 801ed36:	687b      	ldr	r3, [r7, #4]
 801ed38:	429a      	cmp	r2, r3
 801ed3a:	d101      	bne.n	801ed40 <TimerExists+0x1c>
    {
      return true;
 801ed3c:	2301      	movs	r3, #1
 801ed3e:	e006      	b.n	801ed4e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801ed40:	68fb      	ldr	r3, [r7, #12]
 801ed42:	695b      	ldr	r3, [r3, #20]
 801ed44:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801ed46:	68fb      	ldr	r3, [r7, #12]
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	d1f3      	bne.n	801ed34 <TimerExists+0x10>
  }
  return false;
 801ed4c:	2300      	movs	r3, #0
}
 801ed4e:	4618      	mov	r0, r3
 801ed50:	3714      	adds	r7, #20
 801ed52:	46bd      	mov	sp, r7
 801ed54:	bc80      	pop	{r7}
 801ed56:	4770      	bx	lr
 801ed58:	20001dbc 	.word	0x20001dbc

0801ed5c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801ed5c:	b590      	push	{r4, r7, lr}
 801ed5e:	b085      	sub	sp, #20
 801ed60:	af00      	add	r7, sp, #0
 801ed62:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801ed64:	4b11      	ldr	r3, [pc, #68]	; (801edac <TimerSetTimeout+0x50>)
 801ed66:	6a1b      	ldr	r3, [r3, #32]
 801ed68:	4798      	blx	r3
 801ed6a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801ed6c:	687b      	ldr	r3, [r7, #4]
 801ed6e:	2201      	movs	r2, #1
 801ed70:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801ed72:	687b      	ldr	r3, [r7, #4]
 801ed74:	681c      	ldr	r4, [r3, #0]
 801ed76:	4b0d      	ldr	r3, [pc, #52]	; (801edac <TimerSetTimeout+0x50>)
 801ed78:	699b      	ldr	r3, [r3, #24]
 801ed7a:	4798      	blx	r3
 801ed7c:	4602      	mov	r2, r0
 801ed7e:	68fb      	ldr	r3, [r7, #12]
 801ed80:	4413      	add	r3, r2
 801ed82:	429c      	cmp	r4, r3
 801ed84:	d207      	bcs.n	801ed96 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801ed86:	4b09      	ldr	r3, [pc, #36]	; (801edac <TimerSetTimeout+0x50>)
 801ed88:	699b      	ldr	r3, [r3, #24]
 801ed8a:	4798      	blx	r3
 801ed8c:	4602      	mov	r2, r0
 801ed8e:	68fb      	ldr	r3, [r7, #12]
 801ed90:	441a      	add	r2, r3
 801ed92:	687b      	ldr	r3, [r7, #4]
 801ed94:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801ed96:	4b05      	ldr	r3, [pc, #20]	; (801edac <TimerSetTimeout+0x50>)
 801ed98:	689b      	ldr	r3, [r3, #8]
 801ed9a:	687a      	ldr	r2, [r7, #4]
 801ed9c:	6812      	ldr	r2, [r2, #0]
 801ed9e:	4610      	mov	r0, r2
 801eda0:	4798      	blx	r3
}
 801eda2:	bf00      	nop
 801eda4:	3714      	adds	r7, #20
 801eda6:	46bd      	mov	sp, r7
 801eda8:	bd90      	pop	{r4, r7, pc}
 801edaa:	bf00      	nop
 801edac:	0801ff98 	.word	0x0801ff98

0801edb0 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801edb0:	b480      	push	{r7}
 801edb2:	b085      	sub	sp, #20
 801edb4:	af00      	add	r7, sp, #0
 801edb6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801edb8:	4b14      	ldr	r3, [pc, #80]	; (801ee0c <TimerInsertTimer+0x5c>)
 801edba:	681b      	ldr	r3, [r3, #0]
 801edbc:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801edbe:	4b13      	ldr	r3, [pc, #76]	; (801ee0c <TimerInsertTimer+0x5c>)
 801edc0:	681b      	ldr	r3, [r3, #0]
 801edc2:	695b      	ldr	r3, [r3, #20]
 801edc4:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801edc6:	e012      	b.n	801edee <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	681a      	ldr	r2, [r3, #0]
 801edcc:	68bb      	ldr	r3, [r7, #8]
 801edce:	681b      	ldr	r3, [r3, #0]
 801edd0:	429a      	cmp	r2, r3
 801edd2:	d905      	bls.n	801ede0 <TimerInsertTimer+0x30>
    {
        cur = next;
 801edd4:	68bb      	ldr	r3, [r7, #8]
 801edd6:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801edd8:	68bb      	ldr	r3, [r7, #8]
 801edda:	695b      	ldr	r3, [r3, #20]
 801eddc:	60bb      	str	r3, [r7, #8]
 801edde:	e006      	b.n	801edee <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801ede0:	68fb      	ldr	r3, [r7, #12]
 801ede2:	687a      	ldr	r2, [r7, #4]
 801ede4:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801ede6:	687b      	ldr	r3, [r7, #4]
 801ede8:	68ba      	ldr	r2, [r7, #8]
 801edea:	615a      	str	r2, [r3, #20]
        return;
 801edec:	e009      	b.n	801ee02 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801edee:	68fb      	ldr	r3, [r7, #12]
 801edf0:	695b      	ldr	r3, [r3, #20]
 801edf2:	2b00      	cmp	r3, #0
 801edf4:	d1e8      	bne.n	801edc8 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801edf6:	68fb      	ldr	r3, [r7, #12]
 801edf8:	687a      	ldr	r2, [r7, #4]
 801edfa:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	2200      	movs	r2, #0
 801ee00:	615a      	str	r2, [r3, #20]
}
 801ee02:	3714      	adds	r7, #20
 801ee04:	46bd      	mov	sp, r7
 801ee06:	bc80      	pop	{r7}
 801ee08:	4770      	bx	lr
 801ee0a:	bf00      	nop
 801ee0c:	20001dbc 	.word	0x20001dbc

0801ee10 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801ee10:	b580      	push	{r7, lr}
 801ee12:	b084      	sub	sp, #16
 801ee14:	af00      	add	r7, sp, #0
 801ee16:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ee18:	4b0b      	ldr	r3, [pc, #44]	; (801ee48 <TimerInsertNewHeadTimer+0x38>)
 801ee1a:	681b      	ldr	r3, [r3, #0]
 801ee1c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801ee1e:	68fb      	ldr	r3, [r7, #12]
 801ee20:	2b00      	cmp	r3, #0
 801ee22:	d002      	beq.n	801ee2a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801ee24:	68fb      	ldr	r3, [r7, #12]
 801ee26:	2200      	movs	r2, #0
 801ee28:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801ee2a:	687b      	ldr	r3, [r7, #4]
 801ee2c:	68fa      	ldr	r2, [r7, #12]
 801ee2e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801ee30:	4a05      	ldr	r2, [pc, #20]	; (801ee48 <TimerInsertNewHeadTimer+0x38>)
 801ee32:	687b      	ldr	r3, [r7, #4]
 801ee34:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801ee36:	4b04      	ldr	r3, [pc, #16]	; (801ee48 <TimerInsertNewHeadTimer+0x38>)
 801ee38:	681b      	ldr	r3, [r3, #0]
 801ee3a:	4618      	mov	r0, r3
 801ee3c:	f7ff ff8e 	bl	801ed5c <TimerSetTimeout>
}
 801ee40:	bf00      	nop
 801ee42:	3710      	adds	r7, #16
 801ee44:	46bd      	mov	sp, r7
 801ee46:	bd80      	pop	{r7, pc}
 801ee48:	20001dbc 	.word	0x20001dbc

0801ee4c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801ee4c:	b580      	push	{r7, lr}
 801ee4e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801ee50:	2218      	movs	r2, #24
 801ee52:	2100      	movs	r1, #0
 801ee54:	4807      	ldr	r0, [pc, #28]	; (801ee74 <UTIL_ADV_TRACE_Init+0x28>)
 801ee56:	f7fe fffa 	bl	801de4e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801ee5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ee5e:	2100      	movs	r1, #0
 801ee60:	4805      	ldr	r0, [pc, #20]	; (801ee78 <UTIL_ADV_TRACE_Init+0x2c>)
 801ee62:	f7fe fff4 	bl	801de4e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801ee66:	4b05      	ldr	r3, [pc, #20]	; (801ee7c <UTIL_ADV_TRACE_Init+0x30>)
 801ee68:	681b      	ldr	r3, [r3, #0]
 801ee6a:	4805      	ldr	r0, [pc, #20]	; (801ee80 <UTIL_ADV_TRACE_Init+0x34>)
 801ee6c:	4798      	blx	r3
 801ee6e:	4603      	mov	r3, r0
}
 801ee70:	4618      	mov	r0, r3
 801ee72:	bd80      	pop	{r7, pc}
 801ee74:	20001dc0 	.word	0x20001dc0
 801ee78:	20001dd8 	.word	0x20001dd8
 801ee7c:	0801ffd8 	.word	0x0801ffd8
 801ee80:	0801f0ed 	.word	0x0801f0ed

0801ee84 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801ee84:	b480      	push	{r7}
 801ee86:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801ee88:	4b06      	ldr	r3, [pc, #24]	; (801eea4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ee8a:	8a5a      	ldrh	r2, [r3, #18]
 801ee8c:	4b05      	ldr	r3, [pc, #20]	; (801eea4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ee8e:	8a1b      	ldrh	r3, [r3, #16]
 801ee90:	429a      	cmp	r2, r3
 801ee92:	d101      	bne.n	801ee98 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801ee94:	2301      	movs	r3, #1
 801ee96:	e000      	b.n	801ee9a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801ee98:	2300      	movs	r3, #0
}
 801ee9a:	4618      	mov	r0, r3
 801ee9c:	46bd      	mov	sp, r7
 801ee9e:	bc80      	pop	{r7}
 801eea0:	4770      	bx	lr
 801eea2:	bf00      	nop
 801eea4:	20001dc0 	.word	0x20001dc0

0801eea8 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801eea8:	b408      	push	{r3}
 801eeaa:	b580      	push	{r7, lr}
 801eeac:	b08d      	sub	sp, #52	; 0x34
 801eeae:	af00      	add	r7, sp, #0
 801eeb0:	60f8      	str	r0, [r7, #12]
 801eeb2:	60b9      	str	r1, [r7, #8]
 801eeb4:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801eeb6:	2300      	movs	r3, #0
 801eeb8:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801eeba:	2300      	movs	r3, #0
 801eebc:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801eebe:	4b37      	ldr	r3, [pc, #220]	; (801ef9c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801eec0:	7a1b      	ldrb	r3, [r3, #8]
 801eec2:	461a      	mov	r2, r3
 801eec4:	68fb      	ldr	r3, [r7, #12]
 801eec6:	4293      	cmp	r3, r2
 801eec8:	d902      	bls.n	801eed0 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801eeca:	f06f 0304 	mvn.w	r3, #4
 801eece:	e05e      	b.n	801ef8e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801eed0:	4b32      	ldr	r3, [pc, #200]	; (801ef9c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801eed2:	68da      	ldr	r2, [r3, #12]
 801eed4:	68bb      	ldr	r3, [r7, #8]
 801eed6:	4013      	ands	r3, r2
 801eed8:	68ba      	ldr	r2, [r7, #8]
 801eeda:	429a      	cmp	r2, r3
 801eedc:	d002      	beq.n	801eee4 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801eede:	f06f 0305 	mvn.w	r3, #5
 801eee2:	e054      	b.n	801ef8e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801eee4:	4b2d      	ldr	r3, [pc, #180]	; (801ef9c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801eee6:	685b      	ldr	r3, [r3, #4]
 801eee8:	2b00      	cmp	r3, #0
 801eeea:	d00a      	beq.n	801ef02 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801eeec:	687b      	ldr	r3, [r7, #4]
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d007      	beq.n	801ef02 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801eef2:	4b2a      	ldr	r3, [pc, #168]	; (801ef9c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801eef4:	685b      	ldr	r3, [r3, #4]
 801eef6:	f107 0116 	add.w	r1, r7, #22
 801eefa:	f107 0218 	add.w	r2, r7, #24
 801eefe:	4610      	mov	r0, r2
 801ef00:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801ef02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ef06:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ef08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ef0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ef10:	4823      	ldr	r0, [pc, #140]	; (801efa0 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801ef12:	f7ff fa29 	bl	801e368 <tiny_vsnprintf_like>
 801ef16:	4603      	mov	r3, r0
 801ef18:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801ef1a:	f000 f9f1 	bl	801f300 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801ef1e:	8afa      	ldrh	r2, [r7, #22]
 801ef20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ef22:	4413      	add	r3, r2
 801ef24:	b29b      	uxth	r3, r3
 801ef26:	f107 0214 	add.w	r2, r7, #20
 801ef2a:	4611      	mov	r1, r2
 801ef2c:	4618      	mov	r0, r3
 801ef2e:	f000 f969 	bl	801f204 <TRACE_AllocateBufer>
 801ef32:	4603      	mov	r3, r0
 801ef34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ef38:	d025      	beq.n	801ef86 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801ef3a:	2300      	movs	r3, #0
 801ef3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ef3e:	e00e      	b.n	801ef5e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801ef40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ef42:	8aba      	ldrh	r2, [r7, #20]
 801ef44:	3330      	adds	r3, #48	; 0x30
 801ef46:	443b      	add	r3, r7
 801ef48:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801ef4c:	4b15      	ldr	r3, [pc, #84]	; (801efa4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801ef4e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801ef50:	8abb      	ldrh	r3, [r7, #20]
 801ef52:	3301      	adds	r3, #1
 801ef54:	b29b      	uxth	r3, r3
 801ef56:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801ef58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ef5a:	3301      	adds	r3, #1
 801ef5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ef5e:	8afb      	ldrh	r3, [r7, #22]
 801ef60:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ef62:	429a      	cmp	r2, r3
 801ef64:	d3ec      	bcc.n	801ef40 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ef66:	8abb      	ldrh	r3, [r7, #20]
 801ef68:	461a      	mov	r2, r3
 801ef6a:	4b0e      	ldr	r3, [pc, #56]	; (801efa4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801ef6c:	18d0      	adds	r0, r2, r3
 801ef6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ef72:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ef76:	f7ff f9f7 	bl	801e368 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801ef7a:	f000 f9df 	bl	801f33c <TRACE_UnLock>

    return TRACE_Send();
 801ef7e:	f000 f831 	bl	801efe4 <TRACE_Send>
 801ef82:	4603      	mov	r3, r0
 801ef84:	e003      	b.n	801ef8e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801ef86:	f000 f9d9 	bl	801f33c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801ef8a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801ef8e:	4618      	mov	r0, r3
 801ef90:	3734      	adds	r7, #52	; 0x34
 801ef92:	46bd      	mov	sp, r7
 801ef94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ef98:	b001      	add	sp, #4
 801ef9a:	4770      	bx	lr
 801ef9c:	20001dc0 	.word	0x20001dc0
 801efa0:	200021d8 	.word	0x200021d8
 801efa4:	20001dd8 	.word	0x20001dd8

0801efa8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801efa8:	b480      	push	{r7}
 801efaa:	b083      	sub	sp, #12
 801efac:	af00      	add	r7, sp, #0
 801efae:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801efb0:	4a03      	ldr	r2, [pc, #12]	; (801efc0 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	6053      	str	r3, [r2, #4]
}
 801efb6:	bf00      	nop
 801efb8:	370c      	adds	r7, #12
 801efba:	46bd      	mov	sp, r7
 801efbc:	bc80      	pop	{r7}
 801efbe:	4770      	bx	lr
 801efc0:	20001dc0 	.word	0x20001dc0

0801efc4 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801efc4:	b480      	push	{r7}
 801efc6:	b083      	sub	sp, #12
 801efc8:	af00      	add	r7, sp, #0
 801efca:	4603      	mov	r3, r0
 801efcc:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801efce:	4a04      	ldr	r2, [pc, #16]	; (801efe0 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801efd0:	79fb      	ldrb	r3, [r7, #7]
 801efd2:	7213      	strb	r3, [r2, #8]
}
 801efd4:	bf00      	nop
 801efd6:	370c      	adds	r7, #12
 801efd8:	46bd      	mov	sp, r7
 801efda:	bc80      	pop	{r7}
 801efdc:	4770      	bx	lr
 801efde:	bf00      	nop
 801efe0:	20001dc0 	.word	0x20001dc0

0801efe4 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801efe4:	b580      	push	{r7, lr}
 801efe6:	b088      	sub	sp, #32
 801efe8:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801efea:	2300      	movs	r3, #0
 801efec:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801efee:	2300      	movs	r3, #0
 801eff0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eff2:	f3ef 8310 	mrs	r3, PRIMASK
 801eff6:	613b      	str	r3, [r7, #16]
  return(result);
 801eff8:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801effa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801effc:	b672      	cpsid	i
}
 801effe:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801f000:	f000 f9ba 	bl	801f378 <TRACE_IsLocked>
 801f004:	4603      	mov	r3, r0
 801f006:	2b00      	cmp	r3, #0
 801f008:	d15d      	bne.n	801f0c6 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801f00a:	f000 f979 	bl	801f300 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801f00e:	4b34      	ldr	r3, [pc, #208]	; (801f0e0 <TRACE_Send+0xfc>)
 801f010:	8a1a      	ldrh	r2, [r3, #16]
 801f012:	4b33      	ldr	r3, [pc, #204]	; (801f0e0 <TRACE_Send+0xfc>)
 801f014:	8a5b      	ldrh	r3, [r3, #18]
 801f016:	429a      	cmp	r2, r3
 801f018:	d04d      	beq.n	801f0b6 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801f01a:	4b31      	ldr	r3, [pc, #196]	; (801f0e0 <TRACE_Send+0xfc>)
 801f01c:	789b      	ldrb	r3, [r3, #2]
 801f01e:	2b01      	cmp	r3, #1
 801f020:	d117      	bne.n	801f052 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801f022:	4b2f      	ldr	r3, [pc, #188]	; (801f0e0 <TRACE_Send+0xfc>)
 801f024:	881a      	ldrh	r2, [r3, #0]
 801f026:	4b2e      	ldr	r3, [pc, #184]	; (801f0e0 <TRACE_Send+0xfc>)
 801f028:	8a1b      	ldrh	r3, [r3, #16]
 801f02a:	1ad3      	subs	r3, r2, r3
 801f02c:	b29a      	uxth	r2, r3
 801f02e:	4b2c      	ldr	r3, [pc, #176]	; (801f0e0 <TRACE_Send+0xfc>)
 801f030:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801f032:	4b2b      	ldr	r3, [pc, #172]	; (801f0e0 <TRACE_Send+0xfc>)
 801f034:	2202      	movs	r2, #2
 801f036:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801f038:	4b29      	ldr	r3, [pc, #164]	; (801f0e0 <TRACE_Send+0xfc>)
 801f03a:	2200      	movs	r2, #0
 801f03c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801f03e:	4b28      	ldr	r3, [pc, #160]	; (801f0e0 <TRACE_Send+0xfc>)
 801f040:	8a9b      	ldrh	r3, [r3, #20]
 801f042:	2b00      	cmp	r3, #0
 801f044:	d105      	bne.n	801f052 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801f046:	4b26      	ldr	r3, [pc, #152]	; (801f0e0 <TRACE_Send+0xfc>)
 801f048:	2200      	movs	r2, #0
 801f04a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801f04c:	4b24      	ldr	r3, [pc, #144]	; (801f0e0 <TRACE_Send+0xfc>)
 801f04e:	2200      	movs	r2, #0
 801f050:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801f052:	4b23      	ldr	r3, [pc, #140]	; (801f0e0 <TRACE_Send+0xfc>)
 801f054:	789b      	ldrb	r3, [r3, #2]
 801f056:	2b00      	cmp	r3, #0
 801f058:	d115      	bne.n	801f086 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801f05a:	4b21      	ldr	r3, [pc, #132]	; (801f0e0 <TRACE_Send+0xfc>)
 801f05c:	8a5a      	ldrh	r2, [r3, #18]
 801f05e:	4b20      	ldr	r3, [pc, #128]	; (801f0e0 <TRACE_Send+0xfc>)
 801f060:	8a1b      	ldrh	r3, [r3, #16]
 801f062:	429a      	cmp	r2, r3
 801f064:	d908      	bls.n	801f078 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801f066:	4b1e      	ldr	r3, [pc, #120]	; (801f0e0 <TRACE_Send+0xfc>)
 801f068:	8a5a      	ldrh	r2, [r3, #18]
 801f06a:	4b1d      	ldr	r3, [pc, #116]	; (801f0e0 <TRACE_Send+0xfc>)
 801f06c:	8a1b      	ldrh	r3, [r3, #16]
 801f06e:	1ad3      	subs	r3, r2, r3
 801f070:	b29a      	uxth	r2, r3
 801f072:	4b1b      	ldr	r3, [pc, #108]	; (801f0e0 <TRACE_Send+0xfc>)
 801f074:	829a      	strh	r2, [r3, #20]
 801f076:	e006      	b.n	801f086 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801f078:	4b19      	ldr	r3, [pc, #100]	; (801f0e0 <TRACE_Send+0xfc>)
 801f07a:	8a1b      	ldrh	r3, [r3, #16]
 801f07c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801f080:	b29a      	uxth	r2, r3
 801f082:	4b17      	ldr	r3, [pc, #92]	; (801f0e0 <TRACE_Send+0xfc>)
 801f084:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801f086:	4b16      	ldr	r3, [pc, #88]	; (801f0e0 <TRACE_Send+0xfc>)
 801f088:	8a1b      	ldrh	r3, [r3, #16]
 801f08a:	461a      	mov	r2, r3
 801f08c:	4b15      	ldr	r3, [pc, #84]	; (801f0e4 <TRACE_Send+0x100>)
 801f08e:	4413      	add	r3, r2
 801f090:	61bb      	str	r3, [r7, #24]
 801f092:	697b      	ldr	r3, [r7, #20]
 801f094:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f096:	68fb      	ldr	r3, [r7, #12]
 801f098:	f383 8810 	msr	PRIMASK, r3
}
 801f09c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801f09e:	f7e3 fb31 	bl	8002704 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801f0a2:	4b11      	ldr	r3, [pc, #68]	; (801f0e8 <TRACE_Send+0x104>)
 801f0a4:	68db      	ldr	r3, [r3, #12]
 801f0a6:	4a0e      	ldr	r2, [pc, #56]	; (801f0e0 <TRACE_Send+0xfc>)
 801f0a8:	8a92      	ldrh	r2, [r2, #20]
 801f0aa:	4611      	mov	r1, r2
 801f0ac:	69b8      	ldr	r0, [r7, #24]
 801f0ae:	4798      	blx	r3
 801f0b0:	4603      	mov	r3, r0
 801f0b2:	77fb      	strb	r3, [r7, #31]
 801f0b4:	e00d      	b.n	801f0d2 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801f0b6:	f000 f941 	bl	801f33c <TRACE_UnLock>
 801f0ba:	697b      	ldr	r3, [r7, #20]
 801f0bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f0be:	68bb      	ldr	r3, [r7, #8]
 801f0c0:	f383 8810 	msr	PRIMASK, r3
}
 801f0c4:	e005      	b.n	801f0d2 <TRACE_Send+0xee>
 801f0c6:	697b      	ldr	r3, [r7, #20]
 801f0c8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f0ca:	687b      	ldr	r3, [r7, #4]
 801f0cc:	f383 8810 	msr	PRIMASK, r3
}
 801f0d0:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801f0d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801f0d6:	4618      	mov	r0, r3
 801f0d8:	3720      	adds	r7, #32
 801f0da:	46bd      	mov	sp, r7
 801f0dc:	bd80      	pop	{r7, pc}
 801f0de:	bf00      	nop
 801f0e0:	20001dc0 	.word	0x20001dc0
 801f0e4:	20001dd8 	.word	0x20001dd8
 801f0e8:	0801ffd8 	.word	0x0801ffd8

0801f0ec <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801f0ec:	b580      	push	{r7, lr}
 801f0ee:	b088      	sub	sp, #32
 801f0f0:	af00      	add	r7, sp, #0
 801f0f2:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801f0f4:	2300      	movs	r3, #0
 801f0f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f0f8:	f3ef 8310 	mrs	r3, PRIMASK
 801f0fc:	617b      	str	r3, [r7, #20]
  return(result);
 801f0fe:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801f100:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801f102:	b672      	cpsid	i
}
 801f104:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801f106:	4b3c      	ldr	r3, [pc, #240]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f108:	789b      	ldrb	r3, [r3, #2]
 801f10a:	2b02      	cmp	r3, #2
 801f10c:	d106      	bne.n	801f11c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801f10e:	4b3a      	ldr	r3, [pc, #232]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f110:	2200      	movs	r2, #0
 801f112:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801f114:	4b38      	ldr	r3, [pc, #224]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f116:	2200      	movs	r2, #0
 801f118:	821a      	strh	r2, [r3, #16]
 801f11a:	e00a      	b.n	801f132 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801f11c:	4b36      	ldr	r3, [pc, #216]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f11e:	8a1a      	ldrh	r2, [r3, #16]
 801f120:	4b35      	ldr	r3, [pc, #212]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f122:	8a9b      	ldrh	r3, [r3, #20]
 801f124:	4413      	add	r3, r2
 801f126:	b29b      	uxth	r3, r3
 801f128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801f12c:	b29a      	uxth	r2, r3
 801f12e:	4b32      	ldr	r3, [pc, #200]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f130:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801f132:	4b31      	ldr	r3, [pc, #196]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f134:	8a1a      	ldrh	r2, [r3, #16]
 801f136:	4b30      	ldr	r3, [pc, #192]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f138:	8a5b      	ldrh	r3, [r3, #18]
 801f13a:	429a      	cmp	r2, r3
 801f13c:	d04d      	beq.n	801f1da <TRACE_TxCpltCallback+0xee>
 801f13e:	4b2e      	ldr	r3, [pc, #184]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f140:	8adb      	ldrh	r3, [r3, #22]
 801f142:	2b01      	cmp	r3, #1
 801f144:	d149      	bne.n	801f1da <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801f146:	4b2c      	ldr	r3, [pc, #176]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f148:	789b      	ldrb	r3, [r3, #2]
 801f14a:	2b01      	cmp	r3, #1
 801f14c:	d117      	bne.n	801f17e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801f14e:	4b2a      	ldr	r3, [pc, #168]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f150:	881a      	ldrh	r2, [r3, #0]
 801f152:	4b29      	ldr	r3, [pc, #164]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f154:	8a1b      	ldrh	r3, [r3, #16]
 801f156:	1ad3      	subs	r3, r2, r3
 801f158:	b29a      	uxth	r2, r3
 801f15a:	4b27      	ldr	r3, [pc, #156]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f15c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801f15e:	4b26      	ldr	r3, [pc, #152]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f160:	2202      	movs	r2, #2
 801f162:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801f164:	4b24      	ldr	r3, [pc, #144]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f166:	2200      	movs	r2, #0
 801f168:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801f16a:	4b23      	ldr	r3, [pc, #140]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f16c:	8a9b      	ldrh	r3, [r3, #20]
 801f16e:	2b00      	cmp	r3, #0
 801f170:	d105      	bne.n	801f17e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801f172:	4b21      	ldr	r3, [pc, #132]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f174:	2200      	movs	r2, #0
 801f176:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801f178:	4b1f      	ldr	r3, [pc, #124]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f17a:	2200      	movs	r2, #0
 801f17c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801f17e:	4b1e      	ldr	r3, [pc, #120]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f180:	789b      	ldrb	r3, [r3, #2]
 801f182:	2b00      	cmp	r3, #0
 801f184:	d115      	bne.n	801f1b2 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801f186:	4b1c      	ldr	r3, [pc, #112]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f188:	8a5a      	ldrh	r2, [r3, #18]
 801f18a:	4b1b      	ldr	r3, [pc, #108]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f18c:	8a1b      	ldrh	r3, [r3, #16]
 801f18e:	429a      	cmp	r2, r3
 801f190:	d908      	bls.n	801f1a4 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801f192:	4b19      	ldr	r3, [pc, #100]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f194:	8a5a      	ldrh	r2, [r3, #18]
 801f196:	4b18      	ldr	r3, [pc, #96]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f198:	8a1b      	ldrh	r3, [r3, #16]
 801f19a:	1ad3      	subs	r3, r2, r3
 801f19c:	b29a      	uxth	r2, r3
 801f19e:	4b16      	ldr	r3, [pc, #88]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f1a0:	829a      	strh	r2, [r3, #20]
 801f1a2:	e006      	b.n	801f1b2 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801f1a4:	4b14      	ldr	r3, [pc, #80]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f1a6:	8a1b      	ldrh	r3, [r3, #16]
 801f1a8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801f1ac:	b29a      	uxth	r2, r3
 801f1ae:	4b12      	ldr	r3, [pc, #72]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f1b0:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801f1b2:	4b11      	ldr	r3, [pc, #68]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f1b4:	8a1b      	ldrh	r3, [r3, #16]
 801f1b6:	461a      	mov	r2, r3
 801f1b8:	4b10      	ldr	r3, [pc, #64]	; (801f1fc <TRACE_TxCpltCallback+0x110>)
 801f1ba:	4413      	add	r3, r2
 801f1bc:	61fb      	str	r3, [r7, #28]
 801f1be:	69bb      	ldr	r3, [r7, #24]
 801f1c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1c2:	693b      	ldr	r3, [r7, #16]
 801f1c4:	f383 8810 	msr	PRIMASK, r3
}
 801f1c8:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801f1ca:	4b0d      	ldr	r3, [pc, #52]	; (801f200 <TRACE_TxCpltCallback+0x114>)
 801f1cc:	68db      	ldr	r3, [r3, #12]
 801f1ce:	4a0a      	ldr	r2, [pc, #40]	; (801f1f8 <TRACE_TxCpltCallback+0x10c>)
 801f1d0:	8a92      	ldrh	r2, [r2, #20]
 801f1d2:	4611      	mov	r1, r2
 801f1d4:	69f8      	ldr	r0, [r7, #28]
 801f1d6:	4798      	blx	r3
 801f1d8:	e00a      	b.n	801f1f0 <TRACE_TxCpltCallback+0x104>
 801f1da:	69bb      	ldr	r3, [r7, #24]
 801f1dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1de:	68fb      	ldr	r3, [r7, #12]
 801f1e0:	f383 8810 	msr	PRIMASK, r3
}
 801f1e4:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801f1e6:	f7e3 fa95 	bl	8002714 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801f1ea:	f000 f8a7 	bl	801f33c <TRACE_UnLock>
  }
}
 801f1ee:	bf00      	nop
 801f1f0:	bf00      	nop
 801f1f2:	3720      	adds	r7, #32
 801f1f4:	46bd      	mov	sp, r7
 801f1f6:	bd80      	pop	{r7, pc}
 801f1f8:	20001dc0 	.word	0x20001dc0
 801f1fc:	20001dd8 	.word	0x20001dd8
 801f200:	0801ffd8 	.word	0x0801ffd8

0801f204 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801f204:	b480      	push	{r7}
 801f206:	b087      	sub	sp, #28
 801f208:	af00      	add	r7, sp, #0
 801f20a:	4603      	mov	r3, r0
 801f20c:	6039      	str	r1, [r7, #0]
 801f20e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801f210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f214:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f216:	f3ef 8310 	mrs	r3, PRIMASK
 801f21a:	60fb      	str	r3, [r7, #12]
  return(result);
 801f21c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801f21e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801f220:	b672      	cpsid	i
}
 801f222:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801f224:	4b35      	ldr	r3, [pc, #212]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f226:	8a5a      	ldrh	r2, [r3, #18]
 801f228:	4b34      	ldr	r3, [pc, #208]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f22a:	8a1b      	ldrh	r3, [r3, #16]
 801f22c:	429a      	cmp	r2, r3
 801f22e:	d11b      	bne.n	801f268 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801f230:	4b32      	ldr	r3, [pc, #200]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f232:	8a5b      	ldrh	r3, [r3, #18]
 801f234:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801f238:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801f23a:	88fa      	ldrh	r2, [r7, #6]
 801f23c:	8afb      	ldrh	r3, [r7, #22]
 801f23e:	429a      	cmp	r2, r3
 801f240:	d33a      	bcc.n	801f2b8 <TRACE_AllocateBufer+0xb4>
 801f242:	4b2e      	ldr	r3, [pc, #184]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f244:	8a1b      	ldrh	r3, [r3, #16]
 801f246:	88fa      	ldrh	r2, [r7, #6]
 801f248:	429a      	cmp	r2, r3
 801f24a:	d235      	bcs.n	801f2b8 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801f24c:	4b2b      	ldr	r3, [pc, #172]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f24e:	2201      	movs	r2, #1
 801f250:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801f252:	4b2a      	ldr	r3, [pc, #168]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f254:	8a5a      	ldrh	r2, [r3, #18]
 801f256:	4b29      	ldr	r3, [pc, #164]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f258:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801f25a:	4b28      	ldr	r3, [pc, #160]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f25c:	8a1b      	ldrh	r3, [r3, #16]
 801f25e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801f260:	4b26      	ldr	r3, [pc, #152]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f262:	2200      	movs	r2, #0
 801f264:	825a      	strh	r2, [r3, #18]
 801f266:	e027      	b.n	801f2b8 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801f268:	4b24      	ldr	r3, [pc, #144]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f26a:	8a5a      	ldrh	r2, [r3, #18]
 801f26c:	4b23      	ldr	r3, [pc, #140]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f26e:	8a1b      	ldrh	r3, [r3, #16]
 801f270:	429a      	cmp	r2, r3
 801f272:	d91b      	bls.n	801f2ac <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801f274:	4b21      	ldr	r3, [pc, #132]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f276:	8a5b      	ldrh	r3, [r3, #18]
 801f278:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801f27c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801f27e:	88fa      	ldrh	r2, [r7, #6]
 801f280:	8afb      	ldrh	r3, [r7, #22]
 801f282:	429a      	cmp	r2, r3
 801f284:	d318      	bcc.n	801f2b8 <TRACE_AllocateBufer+0xb4>
 801f286:	4b1d      	ldr	r3, [pc, #116]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f288:	8a1b      	ldrh	r3, [r3, #16]
 801f28a:	88fa      	ldrh	r2, [r7, #6]
 801f28c:	429a      	cmp	r2, r3
 801f28e:	d213      	bcs.n	801f2b8 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801f290:	4b1a      	ldr	r3, [pc, #104]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f292:	2201      	movs	r2, #1
 801f294:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801f296:	4b19      	ldr	r3, [pc, #100]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f298:	8a5a      	ldrh	r2, [r3, #18]
 801f29a:	4b18      	ldr	r3, [pc, #96]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f29c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801f29e:	4b17      	ldr	r3, [pc, #92]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f2a0:	8a1b      	ldrh	r3, [r3, #16]
 801f2a2:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801f2a4:	4b15      	ldr	r3, [pc, #84]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f2a6:	2200      	movs	r2, #0
 801f2a8:	825a      	strh	r2, [r3, #18]
 801f2aa:	e005      	b.n	801f2b8 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801f2ac:	4b13      	ldr	r3, [pc, #76]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f2ae:	8a1a      	ldrh	r2, [r3, #16]
 801f2b0:	4b12      	ldr	r3, [pc, #72]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f2b2:	8a5b      	ldrh	r3, [r3, #18]
 801f2b4:	1ad3      	subs	r3, r2, r3
 801f2b6:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801f2b8:	8afa      	ldrh	r2, [r7, #22]
 801f2ba:	88fb      	ldrh	r3, [r7, #6]
 801f2bc:	429a      	cmp	r2, r3
 801f2be:	d90f      	bls.n	801f2e0 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801f2c0:	4b0e      	ldr	r3, [pc, #56]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f2c2:	8a5a      	ldrh	r2, [r3, #18]
 801f2c4:	683b      	ldr	r3, [r7, #0]
 801f2c6:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801f2c8:	4b0c      	ldr	r3, [pc, #48]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f2ca:	8a5a      	ldrh	r2, [r3, #18]
 801f2cc:	88fb      	ldrh	r3, [r7, #6]
 801f2ce:	4413      	add	r3, r2
 801f2d0:	b29b      	uxth	r3, r3
 801f2d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801f2d6:	b29a      	uxth	r2, r3
 801f2d8:	4b08      	ldr	r3, [pc, #32]	; (801f2fc <TRACE_AllocateBufer+0xf8>)
 801f2da:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801f2dc:	2300      	movs	r3, #0
 801f2de:	82bb      	strh	r3, [r7, #20]
 801f2e0:	693b      	ldr	r3, [r7, #16]
 801f2e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2e4:	68bb      	ldr	r3, [r7, #8]
 801f2e6:	f383 8810 	msr	PRIMASK, r3
}
 801f2ea:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801f2ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801f2f0:	4618      	mov	r0, r3
 801f2f2:	371c      	adds	r7, #28
 801f2f4:	46bd      	mov	sp, r7
 801f2f6:	bc80      	pop	{r7}
 801f2f8:	4770      	bx	lr
 801f2fa:	bf00      	nop
 801f2fc:	20001dc0 	.word	0x20001dc0

0801f300 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801f300:	b480      	push	{r7}
 801f302:	b085      	sub	sp, #20
 801f304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f306:	f3ef 8310 	mrs	r3, PRIMASK
 801f30a:	607b      	str	r3, [r7, #4]
  return(result);
 801f30c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801f30e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801f310:	b672      	cpsid	i
}
 801f312:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801f314:	4b08      	ldr	r3, [pc, #32]	; (801f338 <TRACE_Lock+0x38>)
 801f316:	8adb      	ldrh	r3, [r3, #22]
 801f318:	3301      	adds	r3, #1
 801f31a:	b29a      	uxth	r2, r3
 801f31c:	4b06      	ldr	r3, [pc, #24]	; (801f338 <TRACE_Lock+0x38>)
 801f31e:	82da      	strh	r2, [r3, #22]
 801f320:	68fb      	ldr	r3, [r7, #12]
 801f322:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f324:	68bb      	ldr	r3, [r7, #8]
 801f326:	f383 8810 	msr	PRIMASK, r3
}
 801f32a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801f32c:	bf00      	nop
 801f32e:	3714      	adds	r7, #20
 801f330:	46bd      	mov	sp, r7
 801f332:	bc80      	pop	{r7}
 801f334:	4770      	bx	lr
 801f336:	bf00      	nop
 801f338:	20001dc0 	.word	0x20001dc0

0801f33c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801f33c:	b480      	push	{r7}
 801f33e:	b085      	sub	sp, #20
 801f340:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f342:	f3ef 8310 	mrs	r3, PRIMASK
 801f346:	607b      	str	r3, [r7, #4]
  return(result);
 801f348:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801f34a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801f34c:	b672      	cpsid	i
}
 801f34e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801f350:	4b08      	ldr	r3, [pc, #32]	; (801f374 <TRACE_UnLock+0x38>)
 801f352:	8adb      	ldrh	r3, [r3, #22]
 801f354:	3b01      	subs	r3, #1
 801f356:	b29a      	uxth	r2, r3
 801f358:	4b06      	ldr	r3, [pc, #24]	; (801f374 <TRACE_UnLock+0x38>)
 801f35a:	82da      	strh	r2, [r3, #22]
 801f35c:	68fb      	ldr	r3, [r7, #12]
 801f35e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f360:	68bb      	ldr	r3, [r7, #8]
 801f362:	f383 8810 	msr	PRIMASK, r3
}
 801f366:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801f368:	bf00      	nop
 801f36a:	3714      	adds	r7, #20
 801f36c:	46bd      	mov	sp, r7
 801f36e:	bc80      	pop	{r7}
 801f370:	4770      	bx	lr
 801f372:	bf00      	nop
 801f374:	20001dc0 	.word	0x20001dc0

0801f378 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801f378:	b480      	push	{r7}
 801f37a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801f37c:	4b05      	ldr	r3, [pc, #20]	; (801f394 <TRACE_IsLocked+0x1c>)
 801f37e:	8adb      	ldrh	r3, [r3, #22]
 801f380:	2b00      	cmp	r3, #0
 801f382:	bf14      	ite	ne
 801f384:	2301      	movne	r3, #1
 801f386:	2300      	moveq	r3, #0
 801f388:	b2db      	uxtb	r3, r3
}
 801f38a:	4618      	mov	r0, r3
 801f38c:	46bd      	mov	sp, r7
 801f38e:	bc80      	pop	{r7}
 801f390:	4770      	bx	lr
 801f392:	bf00      	nop
 801f394:	20001dc0 	.word	0x20001dc0

0801f398 <floor>:
 801f398:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f3a0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801f3a4:	2e13      	cmp	r6, #19
 801f3a6:	460b      	mov	r3, r1
 801f3a8:	4607      	mov	r7, r0
 801f3aa:	460c      	mov	r4, r1
 801f3ac:	4605      	mov	r5, r0
 801f3ae:	dc32      	bgt.n	801f416 <floor+0x7e>
 801f3b0:	2e00      	cmp	r6, #0
 801f3b2:	da14      	bge.n	801f3de <floor+0x46>
 801f3b4:	a334      	add	r3, pc, #208	; (adr r3, 801f488 <floor+0xf0>)
 801f3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3ba:	f7e0 feeb 	bl	8000194 <__adddf3>
 801f3be:	2200      	movs	r2, #0
 801f3c0:	2300      	movs	r3, #0
 801f3c2:	f7e1 fb2d 	bl	8000a20 <__aeabi_dcmpgt>
 801f3c6:	b138      	cbz	r0, 801f3d8 <floor+0x40>
 801f3c8:	2c00      	cmp	r4, #0
 801f3ca:	da56      	bge.n	801f47a <floor+0xe2>
 801f3cc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801f3d0:	4325      	orrs	r5, r4
 801f3d2:	d055      	beq.n	801f480 <floor+0xe8>
 801f3d4:	4c2e      	ldr	r4, [pc, #184]	; (801f490 <floor+0xf8>)
 801f3d6:	2500      	movs	r5, #0
 801f3d8:	4623      	mov	r3, r4
 801f3da:	462f      	mov	r7, r5
 801f3dc:	e025      	b.n	801f42a <floor+0x92>
 801f3de:	4a2d      	ldr	r2, [pc, #180]	; (801f494 <floor+0xfc>)
 801f3e0:	fa42 f806 	asr.w	r8, r2, r6
 801f3e4:	ea01 0208 	and.w	r2, r1, r8
 801f3e8:	4302      	orrs	r2, r0
 801f3ea:	d01e      	beq.n	801f42a <floor+0x92>
 801f3ec:	a326      	add	r3, pc, #152	; (adr r3, 801f488 <floor+0xf0>)
 801f3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3f2:	f7e0 fecf 	bl	8000194 <__adddf3>
 801f3f6:	2200      	movs	r2, #0
 801f3f8:	2300      	movs	r3, #0
 801f3fa:	f7e1 fb11 	bl	8000a20 <__aeabi_dcmpgt>
 801f3fe:	2800      	cmp	r0, #0
 801f400:	d0ea      	beq.n	801f3d8 <floor+0x40>
 801f402:	2c00      	cmp	r4, #0
 801f404:	bfbe      	ittt	lt
 801f406:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801f40a:	4133      	asrlt	r3, r6
 801f40c:	18e4      	addlt	r4, r4, r3
 801f40e:	ea24 0408 	bic.w	r4, r4, r8
 801f412:	2500      	movs	r5, #0
 801f414:	e7e0      	b.n	801f3d8 <floor+0x40>
 801f416:	2e33      	cmp	r6, #51	; 0x33
 801f418:	dd0b      	ble.n	801f432 <floor+0x9a>
 801f41a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801f41e:	d104      	bne.n	801f42a <floor+0x92>
 801f420:	4602      	mov	r2, r0
 801f422:	f7e0 feb7 	bl	8000194 <__adddf3>
 801f426:	4607      	mov	r7, r0
 801f428:	460b      	mov	r3, r1
 801f42a:	4638      	mov	r0, r7
 801f42c:	4619      	mov	r1, r3
 801f42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f432:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801f436:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801f43a:	fa28 f802 	lsr.w	r8, r8, r2
 801f43e:	ea10 0f08 	tst.w	r0, r8
 801f442:	d0f2      	beq.n	801f42a <floor+0x92>
 801f444:	a310      	add	r3, pc, #64	; (adr r3, 801f488 <floor+0xf0>)
 801f446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f44a:	f7e0 fea3 	bl	8000194 <__adddf3>
 801f44e:	2200      	movs	r2, #0
 801f450:	2300      	movs	r3, #0
 801f452:	f7e1 fae5 	bl	8000a20 <__aeabi_dcmpgt>
 801f456:	2800      	cmp	r0, #0
 801f458:	d0be      	beq.n	801f3d8 <floor+0x40>
 801f45a:	2c00      	cmp	r4, #0
 801f45c:	da0a      	bge.n	801f474 <floor+0xdc>
 801f45e:	2e14      	cmp	r6, #20
 801f460:	d101      	bne.n	801f466 <floor+0xce>
 801f462:	3401      	adds	r4, #1
 801f464:	e006      	b.n	801f474 <floor+0xdc>
 801f466:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801f46a:	2301      	movs	r3, #1
 801f46c:	40b3      	lsls	r3, r6
 801f46e:	441d      	add	r5, r3
 801f470:	42af      	cmp	r7, r5
 801f472:	d8f6      	bhi.n	801f462 <floor+0xca>
 801f474:	ea25 0508 	bic.w	r5, r5, r8
 801f478:	e7ae      	b.n	801f3d8 <floor+0x40>
 801f47a:	2500      	movs	r5, #0
 801f47c:	462c      	mov	r4, r5
 801f47e:	e7ab      	b.n	801f3d8 <floor+0x40>
 801f480:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801f484:	e7a8      	b.n	801f3d8 <floor+0x40>
 801f486:	bf00      	nop
 801f488:	8800759c 	.word	0x8800759c
 801f48c:	7e37e43c 	.word	0x7e37e43c
 801f490:	bff00000 	.word	0xbff00000
 801f494:	000fffff 	.word	0x000fffff

0801f498 <memset>:
 801f498:	4402      	add	r2, r0
 801f49a:	4603      	mov	r3, r0
 801f49c:	4293      	cmp	r3, r2
 801f49e:	d100      	bne.n	801f4a2 <memset+0xa>
 801f4a0:	4770      	bx	lr
 801f4a2:	f803 1b01 	strb.w	r1, [r3], #1
 801f4a6:	e7f9      	b.n	801f49c <memset+0x4>

0801f4a8 <__libc_init_array>:
 801f4a8:	b570      	push	{r4, r5, r6, lr}
 801f4aa:	4d0d      	ldr	r5, [pc, #52]	; (801f4e0 <__libc_init_array+0x38>)
 801f4ac:	4c0d      	ldr	r4, [pc, #52]	; (801f4e4 <__libc_init_array+0x3c>)
 801f4ae:	1b64      	subs	r4, r4, r5
 801f4b0:	10a4      	asrs	r4, r4, #2
 801f4b2:	2600      	movs	r6, #0
 801f4b4:	42a6      	cmp	r6, r4
 801f4b6:	d109      	bne.n	801f4cc <__libc_init_array+0x24>
 801f4b8:	4d0b      	ldr	r5, [pc, #44]	; (801f4e8 <__libc_init_array+0x40>)
 801f4ba:	4c0c      	ldr	r4, [pc, #48]	; (801f4ec <__libc_init_array+0x44>)
 801f4bc:	f000 f826 	bl	801f50c <_init>
 801f4c0:	1b64      	subs	r4, r4, r5
 801f4c2:	10a4      	asrs	r4, r4, #2
 801f4c4:	2600      	movs	r6, #0
 801f4c6:	42a6      	cmp	r6, r4
 801f4c8:	d105      	bne.n	801f4d6 <__libc_init_array+0x2e>
 801f4ca:	bd70      	pop	{r4, r5, r6, pc}
 801f4cc:	f855 3b04 	ldr.w	r3, [r5], #4
 801f4d0:	4798      	blx	r3
 801f4d2:	3601      	adds	r6, #1
 801f4d4:	e7ee      	b.n	801f4b4 <__libc_init_array+0xc>
 801f4d6:	f855 3b04 	ldr.w	r3, [r5], #4
 801f4da:	4798      	blx	r3
 801f4dc:	3601      	adds	r6, #1
 801f4de:	e7f2      	b.n	801f4c6 <__libc_init_array+0x1e>
 801f4e0:	08020658 	.word	0x08020658
 801f4e4:	08020658 	.word	0x08020658
 801f4e8:	08020658 	.word	0x08020658
 801f4ec:	08020660 	.word	0x08020660

0801f4f0 <memcpy>:
 801f4f0:	440a      	add	r2, r1
 801f4f2:	4291      	cmp	r1, r2
 801f4f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801f4f8:	d100      	bne.n	801f4fc <memcpy+0xc>
 801f4fa:	4770      	bx	lr
 801f4fc:	b510      	push	{r4, lr}
 801f4fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f502:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f506:	4291      	cmp	r1, r2
 801f508:	d1f9      	bne.n	801f4fe <memcpy+0xe>
 801f50a:	bd10      	pop	{r4, pc}

0801f50c <_init>:
 801f50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f50e:	bf00      	nop
 801f510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f512:	bc08      	pop	{r3}
 801f514:	469e      	mov	lr, r3
 801f516:	4770      	bx	lr

0801f518 <_fini>:
 801f518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f51a:	bf00      	nop
 801f51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f51e:	bc08      	pop	{r3}
 801f520:	469e      	mov	lr, r3
 801f522:	4770      	bx	lr
