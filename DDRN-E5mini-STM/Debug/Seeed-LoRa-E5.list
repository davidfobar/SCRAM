
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ccf0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f6c  0801ce28  0801ce28  0002ce28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801dd94  0801dd94  0002dd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801de54  0801de54  00030158  2**0
                  CONTENTS
  5 .ARM          00000008  0801de54  0801de54  0002de54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801de5c  0801de5c  00030158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801de5c  0801de5c  0002de5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801de60  0801de60  0002de60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000158  20000000  0801de64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000202c  20000158  0801dfbc  00030158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002184  0801dfbc  00032184  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030182  2**0
                  CONTENTS, READONLY
 14 .debug_info   00041131  00000000  00000000  000301c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a49d  00000000  00000000  000712f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000032c0  00000000  00000000  0007b798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002657  00000000  00000000  0007ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000281ff  00000000  00000000  000810af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003bc16  00000000  00000000  000a92ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cab11  00000000  00000000  000e4ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000d054  00000000  00000000  001af9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001bca2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000158 	.word	0x20000158
 8000154:	00000000 	.word	0x00000000
 8000158:	0801ce10 	.word	0x0801ce10

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000015c 	.word	0x2000015c
 8000174:	0801ce10 	.word	0x0801ce10

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811b 	bcs.w	8000e66 <__udivmoddi4+0x28e>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8118 	bls.w	8000e66 <__udivmoddi4+0x28e>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8106 	bcs.w	8000e6a <__udivmoddi4+0x292>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8103 	bls.w	8000e6a <__udivmoddi4+0x292>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ec 	beq.w	8000e60 <__udivmoddi4+0x288>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f7 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 808f 	bne.w	8000de6 <__udivmoddi4+0x20e>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80ca 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80ba 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fa00 f901 	lsl.w	r9, r0, r1
 8000d4e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fbb5 f8f0 	udiv	r8, r5, r0
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	fb00 5518 	mls	r5, r0, r8, r5
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb08 f50e 	mul.w	r5, r8, lr
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d90:	fb00 4413 	mls	r4, r0, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000db6:	fba0 8302 	umull	r8, r3, r0, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	429c      	cmp	r4, r3
 8000dc0:	46c6      	mov	lr, r8
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	d355      	bcc.n	8000e72 <__udivmoddi4+0x29a>
 8000dc6:	d052      	beq.n	8000e6e <__udivmoddi4+0x296>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb9 030e 	subs.w	r3, r9, lr
 8000dce:	eb64 0405 	sbc.w	r4, r4, r5
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40cb      	lsrs	r3, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	431f      	orrs	r7, r3
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	2100      	movs	r1, #0
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	f1c3 0120 	rsb	r1, r3, #32
 8000dea:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dee:	fa20 f201 	lsr.w	r2, r0, r1
 8000df2:	fa25 f101 	lsr.w	r1, r5, r1
 8000df6:	409d      	lsls	r5, r3
 8000df8:	432a      	orrs	r2, r5
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e06:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0a:	0c11      	lsrs	r1, r2, #16
 8000e0c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e10:	fb00 f50e 	mul.w	r5, r0, lr
 8000e14:	428d      	cmp	r5, r1
 8000e16:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428d      	cmp	r5, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1b49      	subs	r1, r1, r5
 8000e30:	b292      	uxth	r2, r2
 8000e32:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e36:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3e:	fb05 f10e 	mul.w	r1, r5, lr
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x280>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4e:	d216      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e50:	4291      	cmp	r1, r2
 8000e52:	d914      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e54:	3d02      	subs	r5, #2
 8000e56:	4462      	add	r2, ip
 8000e58:	1a52      	subs	r2, r2, r1
 8000e5a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5e:	e739      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e60:	4631      	mov	r1, r6
 8000e62:	4630      	mov	r0, r6
 8000e64:	e709      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e66:	4639      	mov	r1, r7
 8000e68:	e6e7      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	e6fc      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e6e:	45c1      	cmp	r9, r8
 8000e70:	d2aa      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e72:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e76:	eb63 050c 	sbc.w	r5, r3, ip
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4645      	mov	r5, r8
 8000e80:	e7ea      	b.n	8000e58 <__udivmoddi4+0x280>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4640      	mov	r0, r8
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	46d0      	mov	r8, sl
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3d02      	subs	r5, #2
 8000e90:	4462      	add	r2, ip
 8000e92:	e733      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70b      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e98:	4464      	add	r4, ip
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	e743      	b.n	8000d26 <__udivmoddi4+0x14e>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eea:	4013      	ands	r3, r2
 8000eec:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <MX_ADC_Init+0x94>)
 8000efe:	4a24      	ldr	r2, [pc, #144]	; (8000f90 <MX_ADC_Init+0x98>)
 8000f00:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f02:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f08:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f5c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f66:	2207      	movs	r2, #7
 8000f68:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f7a:	f001 fedd 	bl	8002d38 <HAL_ADC_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000f84:	f000 fb80 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000174 	.word	0x20000174
 8000f90:	40012400 	.word	0x40012400

08000f94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <HAL_ADC_MspInit+0x24>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d103      	bne.n	8000fae <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fa6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000faa:	f7ff ff7b 	bl	8000ea4 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40012400 	.word	0x40012400

08000fbc <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <HAL_ADC_MspDeInit+0x24>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d103      	bne.n	8000fd6 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000fce:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fd2:	f7ff ff7f 	bl	8000ed4 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40012400 	.word	0x40012400

08000fe4 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <SYS_InitMeasurement+0x14>)
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <SYS_InitMeasurement+0x18>)
 8000fec:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000174 	.word	0x20000174
 8000ffc:	40012400 	.word	0x40012400

08001000 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800100e:	4813      	ldr	r0, [pc, #76]	; (800105c <SYS_GetBatteryLevel+0x5c>)
 8001010:	f000 f82a 	bl	8001068 <ADC_ReadChannels>
 8001014:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	80fb      	strh	r3, [r7, #6]
 8001020:	e016      	b.n	8001050 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <SYS_GetBatteryLevel+0x60>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800102a:	4293      	cmp	r3, r2
 800102c:	d00b      	beq.n	8001046 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <SYS_GetBatteryLevel+0x60>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001038:	fb03 f202 	mul.w	r2, r3, r2
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	80fb      	strh	r3, [r7, #6]
 8001044:	e004      	b.n	8001050 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <SYS_GetBatteryLevel+0x64>)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001050:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	b4002000 	.word	0xb4002000
 8001060:	1fff75aa 	.word	0x1fff75aa
 8001064:	004c08d8 	.word	0x004c08d8

08001068 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001080:	f7ff ff3a 	bl	8000ef8 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001084:	481a      	ldr	r0, [pc, #104]	; (80010f0 <ADC_ReadChannels+0x88>)
 8001086:	f002 fc86 	bl	8003996 <HAL_ADCEx_Calibration_Start>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001090:	f000 fafa 	bl	8001688 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	4619      	mov	r1, r3
 80010a6:	4812      	ldr	r0, [pc, #72]	; (80010f0 <ADC_ReadChannels+0x88>)
 80010a8:	f002 f992 	bl	80033d0 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80010b2:	f000 fae9 	bl	8001688 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <ADC_ReadChannels+0x88>)
 80010b8:	f002 f86e 	bl	8003198 <HAL_ADC_Start>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80010c2:	f000 fae1 	bl	8001688 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80010c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010ca:	4809      	ldr	r0, [pc, #36]	; (80010f0 <ADC_ReadChannels+0x88>)
 80010cc:	f002 f8dc 	bl	8003288 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80010d0:	4807      	ldr	r0, [pc, #28]	; (80010f0 <ADC_ReadChannels+0x88>)
 80010d2:	f002 f8a7 	bl	8003224 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <ADC_ReadChannels+0x88>)
 80010d8:	f002 f96d 	bl	80033b6 <HAL_ADC_GetValue>
 80010dc:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80010de:	4804      	ldr	r0, [pc, #16]	; (80010f0 <ADC_ReadChannels+0x88>)
 80010e0:	f001 ffde 	bl	80030a0 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80010e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000174 	.word	0x20000174

080010f4 <LL_AHB1_GRP1_EnableClock>:
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001100:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4313      	orrs	r3, r2
 800110a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800110c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001110:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001118:	68fb      	ldr	r3, [r7, #12]
}
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001128:	2004      	movs	r0, #4
 800112a:	f7ff ffe3 	bl	80010f4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800112e:	2001      	movs	r0, #1
 8001130:	f7ff ffe0 	bl	80010f4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2102      	movs	r1, #2
 8001138:	200b      	movs	r0, #11
 800113a:	f002 fdd2 	bl	8003ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800113e:	200b      	movs	r0, #11
 8001140:	f002 fde9 	bl	8003d16 <HAL_NVIC_EnableIRQ>

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001154:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001158:	d101      	bne.n	800115e <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 800115e:	2300      	movs	r3, #0
#endif
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	58004000 	.word	0x58004000

0800116c <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001184:	4b56      	ldr	r3, [pc, #344]	; (80012e0 <FLASH_IF_Write+0x174>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	0299      	lsls	r1, r3, #10
 800118a:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <FLASH_IF_Write+0x178>)
 800118c:	400b      	ands	r3, r1
 800118e:	fbb2 f1f3 	udiv	r1, r2, r3
 8001192:	fb01 f303 	mul.w	r3, r1, r3
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	0adb      	lsrs	r3, r3, #11
 800119a:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80011a6:	3b01      	subs	r3, #1
 80011a8:	4a4d      	ldr	r2, [pc, #308]	; (80012e0 <FLASH_IF_Write+0x174>)
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	0291      	lsls	r1, r2, #10
 80011ae:	4a4d      	ldr	r2, [pc, #308]	; (80012e4 <FLASH_IF_Write+0x178>)
 80011b0:	400a      	ands	r2, r1
 80011b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80011b6:	fb01 f202 	mul.w	r2, r1, r2
 80011ba:	1a9b      	subs	r3, r3, r2
 80011bc:	0adb      	lsrs	r3, r3, #11
 80011be:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d009      	beq.n	80011e6 <FLASH_IF_Write+0x7a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d104      	bne.n	80011e6 <FLASH_IF_Write+0x7a>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 80011e6:	f06f 0304 	mvn.w	r3, #4
 80011ea:	e074      	b.n	80012d6 <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80011ec:	4b3e      	ldr	r3, [pc, #248]	; (80012e8 <FLASH_IF_Write+0x17c>)
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	da02      	bge.n	80011fa <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 80011f4:	f06f 0303 	mvn.w	r3, #3
 80011f8:	e06d      	b.n	80012d6 <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d005      	beq.n	800120e <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001208:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	e05b      	b.n	80012cc <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f8f8 	bl	800140e <FLASH_IF_IsEmpty>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d037      	beq.n	8001294 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 800122a:	f06f 0304 	mvn.w	r3, #4
 800122e:	e052      	b.n	80012d6 <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001236:	02db      	lsls	r3, r3, #11
 8001238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800123c:	4619      	mov	r1, r3
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f01a fa74 	bl	801b72c <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	4413      	add	r3, r2
 800124e:	6a39      	ldr	r1, [r7, #32]
 8001250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001252:	b292      	uxth	r2, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f01a fa69 	bl	801b72c <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 800125a:	2200      	movs	r2, #0
 800125c:	2101      	movs	r1, #1
 800125e:	69f8      	ldr	r0, [r7, #28]
 8001260:	f000 f865 	bl	800132e <FLASH_IF_EraseByPages>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 800126a:	f06f 0301 	mvn.w	r3, #1
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001270:	e030      	b.n	80012d4 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001278:	02db      	lsls	r3, r3, #11
 800127a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800127e:	6839      	ldr	r1, [r7, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f88a 	bl	800139a <FLASH_IF_Write_Buffer>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d010      	beq.n	80012ae <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 800128c:	f06f 0302 	mvn.w	r3, #2
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 8001292:	e01f      	b.n	80012d4 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001298:	4619      	mov	r1, r3
 800129a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800129c:	f000 f87d 	bl	800139a <FLASH_IF_Write_Buffer>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80012a6:	f06f 0302 	mvn.w	r3, #2
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80012ac:	e012      	b.n	80012d4 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80012ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	4413      	add	r3, r2
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 80012b6:	6a3a      	ldr	r2, [r7, #32]
 80012b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ba:	4413      	add	r3, r2
 80012bc:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3301      	adds	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d99f      	bls.n	8001214 <FLASH_IF_Write+0xa8>
  }

  return status;
 80012d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3730      	adds	r7, #48	; 0x30
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	1fff75e0 	.word	0x1fff75e0
 80012e4:	03fffc00 	.word	0x03fffc00
 80012e8:	58004000 	.word	0x58004000

080012ec <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 80012f8:	e00b      	b.n	8001312 <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 80012fa:	bf00      	nop
 80012fc:	f7ff ff24 	bl	8001148 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1fa      	bne.n	80012fc <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8001306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800130a:	68f9      	ldr	r1, [r7, #12]
 800130c:	2001      	movs	r0, #1
 800130e:	f003 f909 	bl	8004524 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800131c:	4299      	cmp	r1, r3
 800131e:	bf08      	it	eq
 8001320:	4290      	cmpeq	r0, r2
 8001322:	d1ea      	bne.n	80012fa <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001324:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b08a      	sub	sp, #40	; 0x28
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	460b      	mov	r3, r1
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 800133c:	2302      	movs	r3, #2
 800133e:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001344:	897b      	ldrh	r3, [r7, #10]
 8001346:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d008      	beq.n	8001360 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fa84 	bl	8004860 <HAL_FLASHEx_Erase_IT>
 8001358:	4603      	mov	r3, r0
 800135a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800135e:	e00a      	b.n	8001376 <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001360:	f107 0214 	add.w	r2, r7, #20
 8001364:	f107 0318 	add.w	r3, r7, #24
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f003 fa20 	bl	80047b0 <HAL_FLASHEx_Erase>
 8001370:	4603      	mov	r3, r0
 8001372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800137a:	2b00      	cmp	r3, #0
 800137c:	d008      	beq.n	8001390 <FLASH_IF_EraseByPages+0x62>
 800137e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001382:	2b02      	cmp	r3, #2
 8001384:	d101      	bne.n	800138a <FLASH_IF_EraseByPages+0x5c>
 8001386:	2301      	movs	r3, #1
 8001388:	e003      	b.n	8001392 <FLASH_IF_EraseByPages+0x64>
 800138a:	f06f 0301 	mvn.w	r3, #1
 800138e:	e000      	b.n	8001392 <FLASH_IF_EraseByPages+0x64>
 8001390:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8001392:	4618      	mov	r0, r3
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b08a      	sub	sp, #40	; 0x28
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e020      	b.n	80013f6 <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	2208      	movs	r2, #8
 80013ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013bc:	4618      	mov	r0, r3
 80013be:	f01a f9b5 	bl	801b72c <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80013c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013ca:	bf08      	it	eq
 80013cc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80013d0:	d005      	beq.n	80013de <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80013d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f7ff ff88 	bl	80012ec <FLASH_IF_Write64>
 80013dc:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	3308      	adds	r3, #8
 80013e2:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	3308      	adds	r3, #8
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d108      	bne.n	8001402 <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	3301      	adds	r3, #1
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	69fa      	ldr	r2, [r7, #28]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d3d9      	bcc.n	80013b4 <FLASH_IF_Write_Buffer+0x1a>
 8001400:	e000      	b.n	8001404 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 8001402:	bf00      	nop
    }
  }

  return status;
 8001404:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 8001406:	4618      	mov	r0, r3
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 800140e:	b480      	push	{r7}
 8001410:	b085      	sub	sp, #20
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001418:	e00a      	b.n	8001430 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2bff      	cmp	r3, #255	; 0xff
 8001424:	d001      	beq.n	800142a <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001426:	2301      	movs	r3, #1
 8001428:	e039      	b.n	800149e <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	3b01      	subs	r3, #1
 800142e:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ef      	bne.n	800141a <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	e010      	b.n	8001466 <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f103 0208 	add.w	r2, r3, #8
 800144a:	60fa      	str	r2, [r7, #12]
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001454:	bf08      	it	eq
 8001456:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800145a:	d001      	beq.n	8001460 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 800145c:	2301      	movs	r3, #1
 800145e:	e01e      	b.n	800149e <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	3301      	adds	r3, #1
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	08db      	lsrs	r3, r3, #3
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	429a      	cmp	r2, r3
 800146e:	d3e9      	bcc.n	8001444 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	607b      	str	r3, [r7, #4]
  while (size != 0)
 800147e:	e00a      	b.n	8001496 <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2bff      	cmp	r3, #255	; 0xff
 800148a:	d001      	beq.n	8001490 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 800148c:	2301      	movs	r3, #1
 800148e:	e006      	b.n	800149e <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	3b01      	subs	r3, #1
 8001494:	603b      	str	r3, [r7, #0]
  while (size != 0)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f1      	bne.n	8001480 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 800149c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <LL_AHB2_GRP1_EnableClock>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4313      	orrs	r3, r2
 80014be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4013      	ands	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014cc:	68fb      	ldr	r3, [r7, #12]
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ec:	2004      	movs	r0, #4
 80014ee:	f7ff ffdb 	bl	80014a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2002      	movs	r0, #2
 80014f4:	f7ff ffd8 	bl	80014a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	2001      	movs	r0, #1
 80014fa:	f7ff ffd5 	bl	80014a8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001504:	4821      	ldr	r0, [pc, #132]	; (800158c <MX_GPIO_Init+0xb4>)
 8001506:	f003 fc9d 	bl	8004e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2120      	movs	r1, #32
 800150e:	481f      	ldr	r0, [pc, #124]	; (800158c <MX_GPIO_Init+0xb4>)
 8001510:	f003 fc98 	bl	8004e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2131      	movs	r1, #49	; 0x31
 8001518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151c:	f003 fc92 	bl	8004e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001520:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001524:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	4619      	mov	r1, r3
 8001536:	4815      	ldr	r0, [pc, #84]	; (800158c <MX_GPIO_Init+0xb4>)
 8001538:	f003 fa56 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 800153c:	2331      	movs	r3, #49	; 0x31
 800153e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f003 fa48 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800155e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001564:	2301      	movs	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4619      	mov	r1, r3
 800156c:	4807      	ldr	r0, [pc, #28]	; (800158c <MX_GPIO_Init+0xb4>)
 800156e:	f003 fa3b 	bl	80049e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2029      	movs	r0, #41	; 0x29
 8001578:	f002 fbb3 	bl	8003ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800157c:	2029      	movs	r0, #41	; 0x29
 800157e:	f002 fbca 	bl	8003d16 <HAL_NVIC_EnableIRQ>

}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	48000400 	.word	0x48000400

08001590 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a0:	f023 0218 	bic.w	r2, r3, #24
 80015a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015be:	f001 f9cd 	bl	800295c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c2:	f000 f807 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c6:	f7ff ff87 	bl	80014d8 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80015ca:	f008 f9cb 	bl	8009964 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80015ce:	f008 f9d1 	bl	8009974 <MX_LoRaWAN_Process>
 80015d2:	e7fc      	b.n	80015ce <main+0x14>

080015d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b09a      	sub	sp, #104	; 0x68
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	f107 0320 	add.w	r3, r7, #32
 80015de:	2248      	movs	r2, #72	; 0x48
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f01b fbe8 	bl	801cdb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
 80015f8:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015fa:	f003 fc53 	bl	8004ea4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff ffc6 	bl	8001590 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <SystemClock_Config+0xb0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800160c:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <SystemClock_Config+0xb0>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <SystemClock_Config+0xb0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001620:	2324      	movs	r3, #36	; 0x24
 8001622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001624:	2381      	movs	r3, #129	; 0x81
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001628:	2301      	movs	r3, #1
 800162a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800162c:	2300      	movs	r3, #0
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001630:	23b0      	movs	r3, #176	; 0xb0
 8001632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001634:	2300      	movs	r3, #0
 8001636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	4618      	mov	r0, r3
 800163e:	f003 ff7d 	bl	800553c <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001648:	f000 f81e 	bl	8001688 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800164c:	234f      	movs	r3, #79	; 0x4f
 800164e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	2102      	movs	r1, #2
 800166a:	4618      	mov	r0, r3
 800166c:	f004 fb02 	bl	8005c74 <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001676:	f000 f807 	bl	8001688 <Error_Handler>
  }
}
 800167a:	bf00      	nop
 800167c:	3768      	adds	r7, #104	; 0x68
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	58000400 	.word	0x58000400

08001688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001690:	e7fe      	b.n	8001690 <Error_Handler+0x8>

08001692 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <LL_APB1_GRP1_EnableClock>:
{
 80016b2:	b480      	push	{r7}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4013      	ands	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
	...

080016e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	; 0x30
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	222c      	movs	r2, #44	; 0x2c
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f01b fb61 	bl	801cdb8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <MX_RTC_Init+0x9c>)
 80016f8:	4a22      	ldr	r2, [pc, #136]	; (8001784 <MX_RTC_Init+0xa0>)
 80016fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80016fc:	4b20      	ldr	r3, [pc, #128]	; (8001780 <MX_RTC_Init+0x9c>)
 80016fe:	221f      	movs	r2, #31
 8001700:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001702:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <MX_RTC_Init+0x9c>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_RTC_Init+0x9c>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <MX_RTC_Init+0x9c>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_RTC_Init+0x9c>)
 8001716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MX_RTC_Init+0x9c>)
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <MX_RTC_Init+0x9c>)
 8001724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800172a:	4815      	ldr	r0, [pc, #84]	; (8001780 <MX_RTC_Init+0x9c>)
 800172c:	f004 ff5e 	bl	80065ec <HAL_RTC_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001736:	f7ff ffa7 	bl	8001688 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800173a:	4811      	ldr	r0, [pc, #68]	; (8001780 <MX_RTC_Init+0x9c>)
 800173c:	f005 fa4c 	bl	8006bd8 <HAL_RTCEx_SetSSRU_IT>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001746:	f7ff ff9f 	bl	8001688 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001756:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800175a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800175c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2200      	movs	r2, #0
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_RTC_Init+0x9c>)
 800176a:	f004 ffb9 	bl	80066e0 <HAL_RTC_SetAlarm_IT>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001774:	f7ff ff88 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	3730      	adds	r7, #48	; 0x30
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200001d8 	.word	0x200001d8
 8001784:	40002800 	.word	0x40002800

08001788 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b090      	sub	sp, #64	; 0x40
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	2238      	movs	r2, #56	; 0x38
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f01b fb0d 	bl	801cdb8 <memset>
  if(rtcHandle->Instance==RTC)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a16      	ldr	r2, [pc, #88]	; (80017fc <HAL_RTC_MspInit+0x74>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d125      	bne.n	80017f4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ac:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 fdfd 	bl	80063b8 <HAL_RCCEx_PeriphCLKConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80017c4:	f7ff ff60 	bl	8001688 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017c8:	f7ff ff63 	bl	8001692 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80017cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017d0:	f7ff ff6f 	bl	80016b2 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	2002      	movs	r0, #2
 80017da:	f002 fa82 	bl	8003ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80017de:	2002      	movs	r0, #2
 80017e0:	f002 fa99 	bl	8003d16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2100      	movs	r1, #0
 80017e8:	202a      	movs	r0, #42	; 0x2a
 80017ea:	f002 fa7a 	bl	8003ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80017ee:	202a      	movs	r0, #42	; 0x2a
 80017f0:	f002 fa91 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017f4:	bf00      	nop
 80017f6:	3740      	adds	r7, #64	; 0x40
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40002800 	.word	0x40002800

08001800 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001806:	2201      	movs	r2, #1
 8001808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	58000400 	.word	0x58000400

08001818 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001834:	f001 f8b2 	bl	800299c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001838:	f7ff ffe2 	bl	8001800 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800183c:	2001      	movs	r0, #1
 800183e:	f003 fbc3 	bl	8004fc8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}

08001846 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800184a:	f001 f8b5 	bl	80029b8 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800184e:	f000 ff35 	bl	80026bc <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}

08001856 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800185a:	f001 f89f 	bl	800299c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800185e:	2101      	movs	r1, #1
 8001860:	2000      	movs	r0, #0
 8001862:	f003 fb2d 	bl	8004ec0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}

0800186a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800186e:	f001 f8a3 	bl	80029b8 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <NMI_Handler+0x4>

08001888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <HardFault_Handler+0x4>

0800188e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <MemManage_Handler+0x4>

08001894 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <BusFault_Handler+0x4>

0800189a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189e:	e7fe      	b.n	800189e <UsageFault_Handler+0x4>

080018a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80018d6:	f005 f9bb 	bl	8006c50 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200001d8 	.word	0x200001d8

080018e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <DMA1_Channel1_IRQHandler+0x10>)
 80018ea:	f002 fcab 	bl	8004244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200002b4 	.word	0x200002b4

080018f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <USART1_IRQHandler+0x10>)
 80018fe:	f005 ffff 	bl	8007900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000224 	.word	0x20000224

0800190c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001910:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001914:	f003 faae 	bl	8004e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <RTC_Alarm_IRQHandler+0x10>)
 8001922:	f005 f845 	bl	80069b0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200001d8 	.word	0x200001d8

08001930 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001936:	f005 fcf3 	bl	8007320 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000210 	.word	0x20000210

08001944 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800194c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001950:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001952:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4313      	orrs	r3, r2
 800195a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001960:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001968:	68fb      	ldr	r3, [r7, #12]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_SUBGHZ_Init+0x20>)
 800197a:	2208      	movs	r2, #8
 800197c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_SUBGHZ_Init+0x20>)
 8001980:	f005 fa52 	bl	8006e28 <HAL_SUBGHZ_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800198a:	f7ff fe7d 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000210 	.word	0x20000210

08001998 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80019a0:	2001      	movs	r0, #1
 80019a2:	f7ff ffcf 	bl	8001944 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2032      	movs	r0, #50	; 0x32
 80019ac:	f002 f999 	bl	8003ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80019b0:	2032      	movs	r0, #50	; 0x32
 80019b2:	f002 f9b0 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <LL_RCC_SetClkAfterWakeFromStop>:
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80019d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80019e8:	4b02      	ldr	r3, [pc, #8]	; (80019f4 <LL_FLASH_GetUDN+0x10>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	1fff7580 	.word	0x1fff7580

080019f8 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <LL_FLASH_GetDeviceID+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	1fff7584 	.word	0x1fff7584

08001a10 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <LL_FLASH_GetSTCompanyID+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	0a1b      	lsrs	r3, r3, #8
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	1fff7584 	.word	0x1fff7584

08001a28 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff ffc6 	bl	80019be <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001a32:	f01a fc09 	bl	801c248 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <SystemApp_Init+0x48>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001a3c:	f000 f988 	bl	8001d50 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001a40:	f01a fe92 	bl	801c768 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001a44:	480b      	ldr	r0, [pc, #44]	; (8001a74 <SystemApp_Init+0x4c>)
 8001a46:	f01a ff3d 	bl	801c8c4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <SystemApp_Init+0x50>)
 8001a4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a50:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001a52:	2002      	movs	r0, #2
 8001a54:	f01a ff44 	bl	801c8e0 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001a58:	f7ff fac4 	bl	8000fe4 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001a5c:	f000 f9fe 	bl	8001e5c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001a60:	f019 fdbe 	bl	801b5e0 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001a64:	2101      	movs	r1, #1
 8001a66:	2001      	movs	r0, #1
 8001a68:	f019 fdfa 	bl	801b660 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	2000021c 	.word	0x2000021c
 8001a74:	08001c41 	.word	0x08001c41
 8001a78:	58004000 	.word	0x58004000

08001a7c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001a80:	f019 fe1e 	bl	801b6c0 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001a92:	f7ff fab5 	bl	8001000 <SYS_GetBatteryLevel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001a9a:	88bb      	ldrh	r3, [r7, #4]
 8001a9c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d902      	bls.n	8001aaa <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001aa4:	23fe      	movs	r3, #254	; 0xfe
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	e014      	b.n	8001ad4 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001aaa:	88bb      	ldrh	r3, [r7, #4]
 8001aac:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001ab0:	d202      	bcs.n	8001ab8 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	71fb      	strb	r3, [r7, #7]
 8001ab6:	e00d      	b.n	8001ad4 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001ab8:	88bb      	ldrh	r3, [r7, #4]
 8001aba:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	01db      	lsls	r3, r3, #7
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <GetBatteryLevel+0x58>)
 8001acc:	fba3 2302 	umull	r2, r3, r3, r2
 8001ad0:	09db      	lsrs	r3, r3, #7
 8001ad2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	1b4e81b5 	.word	0x1b4e81b5

08001ae4 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 f989 	bl	8001e08 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f80f 	bl	8000b1c <__aeabi_f2iz>
 8001afe:	4603      	mov	r3, r0
 8001b00:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001b02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001b0e:	b590      	push	{r4, r7, lr}
 8001b10:	b087      	sub	sp, #28
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001b1a:	f7ff ff63 	bl	80019e4 <LL_FLASH_GetUDN>
 8001b1e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b26:	d138      	bne.n	8001b9a <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001b28:	f000 ff54 	bl	80029d4 <HAL_GetUIDw0>
 8001b2c:	4604      	mov	r4, r0
 8001b2e:	f000 ff65 	bl	80029fc <HAL_GetUIDw2>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4423      	add	r3, r4
 8001b36:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001b38:	f000 ff56 	bl	80029e8 <HAL_GetUIDw1>
 8001b3c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	0e1a      	lsrs	r2, r3, #24
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3307      	adds	r3, #7
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	0c1a      	lsrs	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3306      	adds	r3, #6
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	0a1a      	lsrs	r2, r3, #8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3305      	adds	r3, #5
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3304      	adds	r3, #4
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	0e1a      	lsrs	r2, r3, #24
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3303      	adds	r3, #3
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	0c1a      	lsrs	r2, r3, #16
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3302      	adds	r3, #2
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	0a1a      	lsrs	r2, r3, #8
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001b98:	e031      	b.n	8001bfe <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3307      	adds	r3, #7
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	0a1a      	lsrs	r2, r3, #8
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3306      	adds	r3, #6
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	0c1a      	lsrs	r2, r3, #16
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3305      	adds	r3, #5
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	0e1a      	lsrs	r2, r3, #24
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001bc8:	f7ff ff16 	bl	80019f8 <LL_FLASH_GetDeviceID>
 8001bcc:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3303      	adds	r3, #3
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001bd8:	f7ff ff1a 	bl	8001a10 <LL_FLASH_GetSTCompanyID>
 8001bdc:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3302      	adds	r3, #2
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	0a1a      	lsrs	r2, r3, #8
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	0c1b      	lsrs	r3, r3, #16
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	701a      	strb	r2, [r3, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd90      	pop	{r4, r7, pc}

08001c06 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001c06:	b590      	push	{r4, r7, lr}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001c10:	f7ff fee8 	bl	80019e4 <LL_FLASH_GetUDN>
 8001c14:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c1c:	d10b      	bne.n	8001c36 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001c1e:	f000 fed9 	bl	80029d4 <HAL_GetUIDw0>
 8001c22:	4604      	mov	r4, r0
 8001c24:	f000 fee0 	bl	80029e8 <HAL_GetUIDw1>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	405c      	eors	r4, r3
 8001c2c:	f000 fee6 	bl	80029fc <HAL_GetUIDw2>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4063      	eors	r3, r4
 8001c34:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001c36:	687b      	ldr	r3, [r7, #4]

}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}

08001c40 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f019 fe46 	bl	801b8e0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c5a:	9200      	str	r2, [sp, #0]
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <TimestampNow+0x3c>)
 8001c5e:	2110      	movs	r1, #16
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f81d 	bl	8001ca0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe fa86 	bl	8000178 <strlen>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	0801ce28 	.word	0x0801ce28

08001c80 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001c84:	2101      	movs	r1, #1
 8001c86:	2002      	movs	r0, #2
 8001c88:	f019 fcba 	bl	801b600 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001c94:	2100      	movs	r1, #0
 8001c96:	2002      	movs	r0, #2
 8001c98:	f019 fcb2 	bl	801b600 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001ca0:	b40c      	push	{r2, r3}
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001cac:	f107 031c 	add.w	r3, r7, #28
 8001cb0:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001cb2:	6839      	ldr	r1, [r7, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f019 ffe3 	bl	801bc84 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cc8:	b002      	add	sp, #8
 8001cca:	4770      	bx	lr

08001ccc <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_GetTick+0x24>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001cf2:	f000 f97f 	bl	8001ff4 <TIMER_IF_GetTimerValue>
 8001cf6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001cf8:	687b      	ldr	r3, [r7, #4]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000021c 	.word	0x2000021c

08001d08 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f9f5 	bl	8002102 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <LL_AHB2_GRP1_EnableClock>:
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d44:	68fb      	ldr	r3, [r7, #12]
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001d56:	f000 fe5b 	bl	8002a10 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001d5a:	f000 fe5f 	bl	8002a1c <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001d5e:	f000 fe63 	bl	8002a28 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff ffcf 	bl	8001d20 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001d82:	2002      	movs	r0, #2
 8001d84:	f7ff ffcc 	bl	8001d20 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001d88:	2002      	movs	r0, #2
 8001d8a:	f7ff ffc9 	bl	8001d20 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001d8e:	2002      	movs	r0, #2
 8001d90:	f7ff ffc6 	bl	8001d20 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001d94:	2301      	movs	r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da0:	f002 fe22 	bl	80049e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4815      	ldr	r0, [pc, #84]	; (8001e04 <DBG_Init+0xb4>)
 8001db0:	f002 fe1a 	bl	80049e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001db4:	2308      	movs	r3, #8
 8001db6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4811      	ldr	r0, [pc, #68]	; (8001e04 <DBG_Init+0xb4>)
 8001dbe:	f002 fe13 	bl	80049e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001dc2:	2310      	movs	r3, #16
 8001dc4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480e      	ldr	r0, [pc, #56]	; (8001e04 <DBG_Init+0xb4>)
 8001dcc:	f002 fe0c 	bl	80049e8 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd8:	f003 f834 	bl	8004e44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de2:	4808      	ldr	r0, [pc, #32]	; (8001e04 <DBG_Init+0xb4>)
 8001de4:	f003 f82e 	bl	8004e44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2108      	movs	r1, #8
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <DBG_Init+0xb4>)
 8001dee:	f003 f829 	bl	8004e44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2110      	movs	r1, #16
 8001df6:	4803      	ldr	r0, [pc, #12]	; (8001e04 <DBG_Init+0xb4>)
 8001df8:	f003 f824 	bl	8004e44 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001dfc:	bf00      	nop
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	48000400 	.word	0x48000400

08001e08 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <EnvSensors_Read+0x40>)
 8001e12:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <EnvSensors_Read+0x44>)
 8001e16:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <EnvSensors_Read+0x48>)
 8001e1a:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <EnvSensors_Read+0x4c>)
 8001e32:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <EnvSensors_Read+0x50>)
 8001e38:	611a      	str	r2, [r3, #16]

  return 0;
 8001e3a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	42480000 	.word	0x42480000
 8001e4c:	41900000 	.word	0x41900000
 8001e50:	447a0000 	.word	0x447a0000
 8001e54:	003e090d 	.word	0x003e090d
 8001e58:	000503ab 	.word	0x000503ab

08001e5c <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001e66:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <TIMER_IF_Init+0x5c>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	f083 0301 	eor.w	r3, r3, #1
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01b      	beq.n	8001ee4 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <TIMER_IF_Init+0x60>)
 8001eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001eb4:	f7ff fc16 	bl	80016e4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001eb8:	f000 f856 	bl	8001f68 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec0:	480c      	ldr	r0, [pc, #48]	; (8001ef4 <TIMER_IF_Init+0x60>)
 8001ec2:	f004 fd19 	bl	80068f8 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <TIMER_IF_Init+0x60>)
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ecc:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001ece:	4809      	ldr	r0, [pc, #36]	; (8001ef4 <TIMER_IF_Init+0x60>)
 8001ed0:	f004 fe50 	bl	8006b74 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f000 f9d3 	bl	8002280 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001eda:	f000 f85f 	bl	8001f9c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001ede:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <TIMER_IF_Init+0x5c>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000021d 	.word	0x2000021d
 8001ef4:	200001d8 	.word	0x200001d8

08001ef8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08e      	sub	sp, #56	; 0x38
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	222c      	movs	r2, #44	; 0x2c
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f01a ff52 	bl	801cdb8 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001f14:	f000 f828 	bl	8001f68 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <TIMER_IF_StartTimer+0x68>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001f30:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f34:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001f3c:	f107 0308 	add.w	r3, r7, #8
 8001f40:	2201      	movs	r2, #1
 8001f42:	4619      	mov	r1, r3
 8001f44:	4807      	ldr	r0, [pc, #28]	; (8001f64 <TIMER_IF_StartTimer+0x6c>)
 8001f46:	f004 fbcb 	bl	80066e0 <HAL_RTC_SetAlarm_IT>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001f50:	f7ff fb9a 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001f54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3738      	adds	r7, #56	; 0x38
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000220 	.word	0x20000220
 8001f64:	200001d8 	.word	0x200001d8

08001f68 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <TIMER_IF_StopTimer+0x2c>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f7c:	4806      	ldr	r0, [pc, #24]	; (8001f98 <TIMER_IF_StopTimer+0x30>)
 8001f7e:	f004 fcbb 	bl	80068f8 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <TIMER_IF_StopTimer+0x30>)
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40002800 	.word	0x40002800
 8001f98:	200001d8 	.word	0x200001d8

08001f9c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001fa0:	f000 f98e 	bl	80022c0 <GetTimerTicks>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4a03      	ldr	r2, [pc, #12]	; (8001fb4 <TIMER_IF_SetTimerContext+0x18>)
 8001fa8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001faa:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <TIMER_IF_SetTimerContext+0x18>)
 8001fac:	681b      	ldr	r3, [r3, #0]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000220 	.word	0x20000220

08001fb8 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001fbc:	4b02      	ldr	r3, [pc, #8]	; (8001fc8 <TIMER_IF_GetTimerContext+0x10>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	20000220 	.word	0x20000220

08001fcc <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001fd6:	f000 f973 	bl	80022c0 <GetTimerTicks>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001fe4:	687b      	ldr	r3, [r7, #4]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000220 	.word	0x20000220

08001ff4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <TIMER_IF_GetTimerValue+0x24>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002006:	f000 f95b 	bl	80022c0 <GetTimerTicks>
 800200a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 800200c:	687b      	ldr	r3, [r7, #4]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2000021d 	.word	0x2000021d

0800201c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002026:	2303      	movs	r3, #3
 8002028:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800202a:	687b      	ldr	r3, [r7, #4]
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002036:	b5b0      	push	{r4, r5, r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800203e:	2100      	movs	r1, #0
 8002040:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	2000      	movs	r0, #0
 8002046:	460a      	mov	r2, r1
 8002048:	4603      	mov	r3, r0
 800204a:	0d95      	lsrs	r5, r2, #22
 800204c:	0294      	lsls	r4, r2, #10
 800204e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	4620      	mov	r0, r4
 8002058:	4629      	mov	r1, r5
 800205a:	f7fe fda5 	bl	8000ba8 <__aeabi_uldivmod>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4613      	mov	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bdb0      	pop	{r4, r5, r7, pc}

08002070 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002070:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002074:	b085      	sub	sp, #20
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800207a:	2100      	movs	r1, #0
 800207c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	2000      	movs	r0, #0
 8002082:	460c      	mov	r4, r1
 8002084:	4605      	mov	r5, r0
 8002086:	4620      	mov	r0, r4
 8002088:	4629      	mov	r1, r5
 800208a:	f04f 0a00 	mov.w	sl, #0
 800208e:	f04f 0b00 	mov.w	fp, #0
 8002092:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002096:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800209a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800209e:	4650      	mov	r0, sl
 80020a0:	4659      	mov	r1, fp
 80020a2:	1b02      	subs	r2, r0, r4
 80020a4:	eb61 0305 	sbc.w	r3, r1, r5
 80020a8:	f04f 0000 	mov.w	r0, #0
 80020ac:	f04f 0100 	mov.w	r1, #0
 80020b0:	0099      	lsls	r1, r3, #2
 80020b2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80020b6:	0090      	lsls	r0, r2, #2
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	eb12 0804 	adds.w	r8, r2, r4
 80020c0:	eb43 0905 	adc.w	r9, r3, r5
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020d8:	4690      	mov	r8, r2
 80020da:	4699      	mov	r9, r3
 80020dc:	4640      	mov	r0, r8
 80020de:	4649      	mov	r1, r9
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	0a82      	lsrs	r2, r0, #10
 80020ea:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80020ee:	0a8b      	lsrs	r3, r1, #10
 80020f0:	4613      	mov	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80020f4:	68fb      	ldr	r3, [r7, #12]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002100:	4770      	bx	lr

08002102 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ff93 	bl	8002036 <TIMER_IF_Convert_ms2Tick>
 8002110:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002112:	f000 f8d5 	bl	80022c0 <GetTimerTicks>
 8002116:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002118:	e000      	b.n	800211c <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800211a:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800211c:	f000 f8d0 	bl	80022c0 <GetTimerTicks>
 8002120:	4602      	mov	r2, r0
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	429a      	cmp	r2, r3
 800212a:	d8f6      	bhi.n	800211a <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800213e:	f01a f9d1 	bl	801c4e4 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002152:	f000 f8a5 	bl	80022a0 <TIMER_IF_BkUp_Read_MSBticks>
 8002156:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3301      	adds	r3, #1
 800215c:	4618      	mov	r0, r3
 800215e:	f000 f88f 	bl	8002280 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800216a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800216e:	b08c      	sub	sp, #48	; 0x30
 8002170:	af00      	add	r7, sp, #0
 8002172:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002178:	f000 f8a2 	bl	80022c0 <GetTimerTicks>
 800217c:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800217e:	f000 f88f 	bl	80022a0 <TIMER_IF_BkUp_Read_MSBticks>
 8002182:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	2200      	movs	r2, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	60fa      	str	r2, [r7, #12]
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	000b      	movs	r3, r1
 8002198:	2200      	movs	r2, #0
 800219a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800219c:	2000      	movs	r0, #0
 800219e:	460c      	mov	r4, r1
 80021a0:	4605      	mov	r5, r0
 80021a2:	eb12 0804 	adds.w	r8, r2, r4
 80021a6:	eb43 0905 	adc.w	r9, r3, r5
 80021aa:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80021ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	0a82      	lsrs	r2, r0, #10
 80021bc:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80021c0:	0a8b      	lsrs	r3, r1, #10
 80021c2:	4613      	mov	r3, r2
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2200      	movs	r2, #0
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80021d4:	f04f 0b00 	mov.w	fp, #0
 80021d8:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff46 	bl	8002070 <TIMER_IF_Convert_Tick2ms>
 80021e4:	4603      	mov	r3, r0
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80021ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3730      	adds	r7, #48	; 0x30
 80021f2:	46bd      	mov	sp, r7
 80021f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080021f8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	2100      	movs	r1, #0
 8002204:	4803      	ldr	r0, [pc, #12]	; (8002214 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002206:	f004 fd47 	bl	8006c98 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200001d8 	.word	0x200001d8

08002218 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	2101      	movs	r1, #1
 8002224:	4803      	ldr	r0, [pc, #12]	; (8002234 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002226:	f004 fd37 	bl	8006c98 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200001d8 	.word	0x200001d8

08002238 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002242:	2100      	movs	r1, #0
 8002244:	4804      	ldr	r0, [pc, #16]	; (8002258 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002246:	f004 fd3f 	bl	8006cc8 <HAL_RTCEx_BKUPRead>
 800224a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 800224c:	687b      	ldr	r3, [r7, #4]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200001d8 	.word	0x200001d8

0800225c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002266:	2101      	movs	r1, #1
 8002268:	4804      	ldr	r0, [pc, #16]	; (800227c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800226a:	f004 fd2d 	bl	8006cc8 <HAL_RTCEx_BKUPRead>
 800226e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002270:	687b      	ldr	r3, [r7, #4]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200001d8 	.word	0x200001d8

08002280 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	2102      	movs	r1, #2
 800228c:	4803      	ldr	r0, [pc, #12]	; (800229c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800228e:	f004 fd03 	bl	8006c98 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200001d8 	.word	0x200001d8

080022a0 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80022a6:	2102      	movs	r1, #2
 80022a8:	4804      	ldr	r0, [pc, #16]	; (80022bc <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80022aa:	f004 fd0d 	bl	8006cc8 <HAL_RTCEx_BKUPRead>
 80022ae:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80022b0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200001d8 	.word	0x200001d8

080022c0 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80022c6:	480b      	ldr	r0, [pc, #44]	; (80022f4 <GetTimerTicks+0x34>)
 80022c8:	f7ff fdd9 	bl	8001e7e <LL_RTC_TIME_GetSubSecond>
 80022cc:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80022ce:	e003      	b.n	80022d8 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80022d0:	4808      	ldr	r0, [pc, #32]	; (80022f4 <GetTimerTicks+0x34>)
 80022d2:	f7ff fdd4 	bl	8001e7e <LL_RTC_TIME_GetSubSecond>
 80022d6:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80022d8:	4806      	ldr	r0, [pc, #24]	; (80022f4 <GetTimerTicks+0x34>)
 80022da:	f7ff fdd0 	bl	8001e7e <LL_RTC_TIME_GetSubSecond>
 80022de:	4602      	mov	r2, r0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d1f4      	bne.n	80022d0 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40002800 	.word	0x40002800

080022f8 <LL_AHB2_GRP1_EnableClock>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002304:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4313      	orrs	r3, r2
 800230e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002314:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4013      	ands	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800231c:	68fb      	ldr	r3, [r7, #12]
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <LL_APB2_GRP1_EnableClock>:
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002334:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4313      	orrs	r3, r2
 800233e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800234c:	68fb      	ldr	r3, [r7, #12]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <LL_APB2_GRP1_DisableClock>:
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002364:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	43db      	mvns	r3, r3
 800236a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800236e:	4013      	ands	r3, r2
 8002370:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002380:	4b22      	ldr	r3, [pc, #136]	; (800240c <MX_USART1_UART_Init+0x90>)
 8002382:	4a23      	ldr	r2, [pc, #140]	; (8002410 <MX_USART1_UART_Init+0x94>)
 8002384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002386:	4b21      	ldr	r3, [pc, #132]	; (800240c <MX_USART1_UART_Init+0x90>)
 8002388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800238c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800238e:	4b1f      	ldr	r3, [pc, #124]	; (800240c <MX_USART1_UART_Init+0x90>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <MX_USART1_UART_Init+0x90>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <MX_USART1_UART_Init+0x90>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023a2:	220c      	movs	r2, #12
 80023a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023c4:	4811      	ldr	r0, [pc, #68]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023c6:	f005 f962 	bl	800768e <HAL_UART_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80023d0:	f7ff f95a 	bl	8001688 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023d4:	2100      	movs	r1, #0
 80023d6:	480d      	ldr	r0, [pc, #52]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023d8:	f007 f9d9 	bl	800978e <HAL_UARTEx_SetTxFifoThreshold>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80023e2:	f7ff f951 	bl	8001688 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023e6:	2100      	movs	r1, #0
 80023e8:	4808      	ldr	r0, [pc, #32]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023ea:	f007 fa0e 	bl	800980a <HAL_UARTEx_SetRxFifoThreshold>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80023f4:	f7ff f948 	bl	8001688 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80023f8:	4804      	ldr	r0, [pc, #16]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023fa:	f007 f98d 	bl	8009718 <HAL_UARTEx_EnableFifoMode>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002404:	f7ff f940 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000224 	.word	0x20000224
 8002410:	40013800 	.word	0x40013800

08002414 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b096      	sub	sp, #88	; 0x58
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	2238      	movs	r2, #56	; 0x38
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f01a fcbf 	bl	801cdb8 <memset>
  if(uartHandle->Instance==USART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a2f      	ldr	r2, [pc, #188]	; (80024fc <HAL_UART_MspInit+0xe8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d156      	bne.n	80024f2 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002444:	2301      	movs	r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002448:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800244c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	4618      	mov	r0, r3
 8002454:	f003 ffb0 	bl	80063b8 <HAL_RCCEx_PeriphCLKConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800245e:	f7ff f913 	bl	8001688 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002462:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002466:	f7ff ff5f 	bl	8002328 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246a:	2002      	movs	r0, #2
 800246c:	f7ff ff44 	bl	80022f8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002470:	23c0      	movs	r3, #192	; 0xc0
 8002472:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	2303      	movs	r3, #3
 800247e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002480:	2307      	movs	r3, #7
 8002482:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002484:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002488:	4619      	mov	r1, r3
 800248a:	481d      	ldr	r0, [pc, #116]	; (8002500 <HAL_UART_MspInit+0xec>)
 800248c:	f002 faac 	bl	80049e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <HAL_UART_MspInit+0xf0>)
 8002492:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <HAL_UART_MspInit+0xf4>)
 8002494:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_UART_MspInit+0xf0>)
 8002498:	2212      	movs	r2, #18
 800249a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_UART_MspInit+0xf0>)
 800249e:	2210      	movs	r2, #16
 80024a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024aa:	2280      	movs	r2, #128	; 0x80
 80024ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024c0:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80024c6:	480f      	ldr	r0, [pc, #60]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024c8:	f001 fc42 	bl	8003d50 <HAL_DMA_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80024d2:	f7ff f8d9 	bl	8001688 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024da:	679a      	str	r2, [r3, #120]	; 0x78
 80024dc:	4a09      	ldr	r2, [pc, #36]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2102      	movs	r1, #2
 80024e6:	2024      	movs	r0, #36	; 0x24
 80024e8:	f001 fbfb 	bl	8003ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024ec:	2024      	movs	r0, #36	; 0x24
 80024ee:	f001 fc12 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024f2:	bf00      	nop
 80024f4:	3758      	adds	r7, #88	; 0x58
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40013800 	.word	0x40013800
 8002500:	48000400 	.word	0x48000400
 8002504:	200002b4 	.word	0x200002b4
 8002508:	40020008 	.word	0x40020008

0800250c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <HAL_UART_MspDeInit+0x3c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d10f      	bne.n	800253e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800251e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002522:	f7ff ff19 	bl	8002358 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002526:	21c0      	movs	r1, #192	; 0xc0
 8002528:	4808      	ldr	r0, [pc, #32]	; (800254c <HAL_UART_MspDeInit+0x40>)
 800252a:	f002 fbbd 	bl	8004ca8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002532:	4618      	mov	r0, r3
 8002534:	f001 fcb4 	bl	8003ea0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002538:	2024      	movs	r0, #36	; 0x24
 800253a:	f001 fbfa 	bl	8003d32 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40013800 	.word	0x40013800
 800254c:	48000400 	.word	0x48000400

08002550 <LL_APB2_GRP1_ForceReset>:
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800255e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4313      	orrs	r3, r2
 8002566:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <LL_APB2_GRP1_ReleaseReset>:
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800257a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	43db      	mvns	r3, r3
 8002584:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002588:	4013      	ands	r3, r2
 800258a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
	...

08002598 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <LL_EXTI_EnableIT_0_31+0x24>)
 80025a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80025a6:	4905      	ldr	r1, [pc, #20]	; (80025bc <LL_EXTI_EnableIT_0_31+0x24>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	58000800 	.word	0x58000800

080025c0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <vcom_Init+0x28>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80025ce:	f7fe fda9 	bl	8001124 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80025d2:	f7ff fed3 	bl	800237c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80025d6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80025da:	f7ff ffdd 	bl	8002598 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80025de:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000318 	.word	0x20000318

080025ec <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80025f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025f4:	f7ff ffac 	bl	8002550 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80025f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025fc:	f7ff ffb9 	bl	8002572 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002600:	4804      	ldr	r0, [pc, #16]	; (8002614 <vcom_DeInit+0x28>)
 8002602:	f7ff ff83 	bl	800250c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002606:	200f      	movs	r0, #15
 8002608:	f001 fb93 	bl	8003d32 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800260c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800260e:	4618      	mov	r0, r3
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000224 	.word	0x20000224

08002618 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002624:	887b      	ldrh	r3, [r7, #2]
 8002626:	461a      	mov	r2, r3
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4804      	ldr	r0, [pc, #16]	; (800263c <vcom_Trace_DMA+0x24>)
 800262c:	f005 f8d6 	bl	80077dc <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002630:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000224 	.word	0x20000224

08002640 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002648:	4a19      	ldr	r2, [pc, #100]	; (80026b0 <vcom_ReceiveInit+0x70>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800264e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002652:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002654:	f107 0308 	add.w	r3, r7, #8
 8002658:	e893 0006 	ldmia.w	r3, {r1, r2}
 800265c:	4815      	ldr	r0, [pc, #84]	; (80026b4 <vcom_ReceiveInit+0x74>)
 800265e:	f006 ffce 	bl	80095fe <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002662:	bf00      	nop
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <vcom_ReceiveInit+0x74>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002672:	d0f7      	beq.n	8002664 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002674:	bf00      	nop
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <vcom_ReceiveInit+0x74>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002684:	d1f7      	bne.n	8002676 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <vcom_ReceiveInit+0x74>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <vcom_ReceiveInit+0x74>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002694:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002696:	4807      	ldr	r0, [pc, #28]	; (80026b4 <vcom_ReceiveInit+0x74>)
 8002698:	f007 f80c 	bl	80096b4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800269c:	2201      	movs	r2, #1
 800269e:	4906      	ldr	r1, [pc, #24]	; (80026b8 <vcom_ReceiveInit+0x78>)
 80026a0:	4804      	ldr	r0, [pc, #16]	; (80026b4 <vcom_ReceiveInit+0x74>)
 80026a2:	f005 f845 	bl	8007730 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80026a6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	2000031c 	.word	0x2000031c
 80026b4:	20000224 	.word	0x20000224
 80026b8:	20000314 	.word	0x20000314

080026bc <vcom_Resume>:

void vcom_Resume(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026c0:	4808      	ldr	r0, [pc, #32]	; (80026e4 <vcom_Resume+0x28>)
 80026c2:	f004 ffe4 	bl	800768e <HAL_UART_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <vcom_Resume+0x14>
  {
    Error_Handler();
 80026cc:	f7fe ffdc 	bl	8001688 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80026d0:	4805      	ldr	r0, [pc, #20]	; (80026e8 <vcom_Resume+0x2c>)
 80026d2:	f001 fb3d 	bl	8003d50 <HAL_DMA_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <vcom_Resume+0x24>
  {
    Error_Handler();
 80026dc:	f7fe ffd4 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000224 	.word	0x20000224
 80026e8:	200002b4 	.word	0x200002b4

080026ec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a05      	ldr	r2, [pc, #20]	; (8002710 <HAL_UART_TxCpltCallback+0x24>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d103      	bne.n	8002706 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_UART_TxCpltCallback+0x28>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2000      	movs	r0, #0
 8002704:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40013800 	.word	0x40013800
 8002714:	20000318 	.word	0x20000318

08002718 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0d      	ldr	r2, [pc, #52]	; (800275c <HAL_UART_RxCpltCallback+0x44>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d113      	bne.n	8002752 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <HAL_UART_RxCpltCallback+0x48>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_UART_RxCpltCallback+0x30>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_UART_RxCpltCallback+0x48>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	2101      	movs	r1, #1
 8002744:	4807      	ldr	r0, [pc, #28]	; (8002764 <HAL_UART_RxCpltCallback+0x4c>)
 8002746:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002748:	2201      	movs	r2, #1
 800274a:	4906      	ldr	r1, [pc, #24]	; (8002764 <HAL_UART_RxCpltCallback+0x4c>)
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f004 ffef 	bl	8007730 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40013800 	.word	0x40013800
 8002760:	2000031c 	.word	0x2000031c
 8002764:	20000314 	.word	0x20000314

08002768 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002768:	480d      	ldr	r0, [pc, #52]	; (80027a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800276a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800276c:	f7ff fb81 	bl	8001e72 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002770:	480c      	ldr	r0, [pc, #48]	; (80027a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002772:	490d      	ldr	r1, [pc, #52]	; (80027a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002774:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <LoopForever+0xe>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002778:	e002      	b.n	8002780 <LoopCopyDataInit>

0800277a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800277a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800277c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800277e:	3304      	adds	r3, #4

08002780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002784:	d3f9      	bcc.n	800277a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002788:	4c0a      	ldr	r4, [pc, #40]	; (80027b4 <LoopForever+0x16>)
  movs r3, #0
 800278a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800278c:	e001      	b.n	8002792 <LoopFillZerobss>

0800278e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800278e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002790:	3204      	adds	r2, #4

08002792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002794:	d3fb      	bcc.n	800278e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002796:	f01a fb17 	bl	801cdc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800279a:	f7fe ff0e 	bl	80015ba <main>

0800279e <LoopForever>:

LoopForever:
    b LoopForever
 800279e:	e7fe      	b.n	800279e <LoopForever>
  ldr   r0, =_estack
 80027a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80027a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027a8:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80027ac:	0801de64 	.word	0x0801de64
  ldr r2, =_sbss
 80027b0:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80027b4:	20002184 	.word	0x20002184

080027b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027b8:	e7fe      	b.n	80027b8 <ADC_IRQHandler>

080027ba <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80027c0:	1d3b      	adds	r3, r7, #4
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	60da      	str	r2, [r3, #12]
 80027cc:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80027ce:	2310      	movs	r3, #16
 80027d0:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80027d2:	2301      	movs	r3, #1
 80027d4:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	4619      	mov	r1, r3
 80027e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e6:	f002 f8ff 	bl	80049e8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80027ea:	2320      	movs	r3, #32
 80027ec:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	4619      	mov	r1, r3
 80027f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f6:	f002 f8f7 	bl	80049e8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80027fa:	2200      	movs	r2, #0
 80027fc:	2120      	movs	r1, #32
 80027fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002802:	f002 fb1f 	bl	8004e44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002806:	2200      	movs	r2, #0
 8002808:	2110      	movs	r1, #16
 800280a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800280e:	f002 fb19 	bl	8004e44 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d83f      	bhi.n	80028ac <BSP_RADIO_ConfigRFSwitch+0x90>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002845 	.word	0x08002845
 8002838:	0800285f 	.word	0x0800285f
 800283c:	08002879 	.word	0x08002879
 8002840:	08002893 	.word	0x08002893
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002844:	2200      	movs	r2, #0
 8002846:	2110      	movs	r1, #16
 8002848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800284c:	f002 fafa 	bl	8004e44 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002850:	2200      	movs	r2, #0
 8002852:	2120      	movs	r1, #32
 8002854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002858:	f002 faf4 	bl	8004e44 <HAL_GPIO_WritePin>
      break;      
 800285c:	e027      	b.n	80028ae <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800285e:	2201      	movs	r2, #1
 8002860:	2110      	movs	r1, #16
 8002862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002866:	f002 faed 	bl	8004e44 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800286a:	2200      	movs	r2, #0
 800286c:	2120      	movs	r1, #32
 800286e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002872:	f002 fae7 	bl	8004e44 <HAL_GPIO_WritePin>
      break;
 8002876:	e01a      	b.n	80028ae <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002878:	2201      	movs	r2, #1
 800287a:	2110      	movs	r1, #16
 800287c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002880:	f002 fae0 	bl	8004e44 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002884:	2201      	movs	r2, #1
 8002886:	2120      	movs	r1, #32
 8002888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800288c:	f002 fada 	bl	8004e44 <HAL_GPIO_WritePin>
      break;
 8002890:	e00d      	b.n	80028ae <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002892:	2200      	movs	r2, #0
 8002894:	2110      	movs	r1, #16
 8002896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289a:	f002 fad3 	bl	8004e44 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800289e:	2201      	movs	r2, #1
 80028a0:	2120      	movs	r1, #32
 80028a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a6:	f002 facd 	bl	8004e44 <HAL_GPIO_WritePin>
      break;
 80028aa:	e000      	b.n	80028ae <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80028ac:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80028bc:	2302      	movs	r3, #2
}
 80028be:	4618      	mov	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80028d8:	2301      	movs	r3, #1
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80028f2:	230f      	movs	r3, #15
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	e001      	b.n	80028fc <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80028f8:	2316      	movs	r3, #22
 80028fa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80028fc:	68fb      	ldr	r3, [r7, #12]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4a03      	ldr	r2, [pc, #12]	; (8002920 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	6053      	str	r3, [r2, #4]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	e0042000 	.word	0xe0042000

08002924 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a03      	ldr	r2, [pc, #12]	; (800293c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800292e:	f023 0302 	bic.w	r3, r3, #2
 8002932:	6053      	str	r3, [r2, #4]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	e0042000 	.word	0xe0042000

08002940 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a03      	ldr	r2, [pc, #12]	; (8002958 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800294a:	f023 0304 	bic.w	r3, r3, #4
 800294e:	6053      	str	r3, [r2, #4]
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	e0042000 	.word	0xe0042000

0800295c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002966:	2003      	movs	r0, #3
 8002968:	f001 f9b0 	bl	8003ccc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800296c:	f003 fb46 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 8002970:	4603      	mov	r3, r0
 8002972:	4a09      	ldr	r2, [pc, #36]	; (8002998 <HAL_Init+0x3c>)
 8002974:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002976:	200f      	movs	r0, #15
 8002978:	f7ff f9a8 	bl	8001ccc <HAL_InitTick>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	71fb      	strb	r3, [r7, #7]
 8002986:	e001      	b.n	800298c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002988:	f7fe ff75 	bl	8001876 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800298c:	79fb      	ldrb	r3, [r7, #7]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000000 	.word	0x20000000

0800299c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <HAL_SuspendTick+0x18>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a03      	ldr	r2, [pc, #12]	; (80029b4 <HAL_SuspendTick+0x18>)
 80029a6:	f023 0302 	bic.w	r3, r3, #2
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <HAL_ResumeTick+0x18>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a03      	ldr	r2, [pc, #12]	; (80029d0 <HAL_ResumeTick+0x18>)
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	6013      	str	r3, [r2, #0]
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	e000e010 	.word	0xe000e010

080029d4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80029d8:	4b02      	ldr	r3, [pc, #8]	; (80029e4 <HAL_GetUIDw0+0x10>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	1fff7590 	.word	0x1fff7590

080029e8 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80029ec:	4b02      	ldr	r3, [pc, #8]	; (80029f8 <HAL_GetUIDw1+0x10>)
 80029ee:	681b      	ldr	r3, [r3, #0]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	1fff7594 	.word	0x1fff7594

080029fc <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002a00:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <HAL_GetUIDw2+0x10>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	1fff7598 	.word	0x1fff7598

08002a10 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002a14:	f7ff ff78 	bl	8002908 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002a20:	f7ff ff80 	bl	8002924 <LL_DBGMCU_DisableDBGStopMode>
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002a2c:	f7ff ff88 	bl	8002940 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	601a      	str	r2, [r3, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2107      	movs	r1, #7
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	401a      	ands	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2107      	movs	r1, #7
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	210f      	movs	r1, #15
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	401a      	ands	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	f003 010f 	and.w	r1, r3, #15
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	431a      	orrs	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	401a      	ands	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	0219      	lsls	r1, r3, #8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	400b      	ands	r3, r1
 8002bae:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002bb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002bd6:	f023 0317 	bic.w	r3, r3, #23
 8002bda:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002bfc:	f023 0317 	bic.w	r3, r3, #23
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6093      	str	r3, [r2, #8]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c22:	d101      	bne.n	8002c28 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c44:	f023 0317 	bic.w	r3, r3, #23
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c6a:	f023 0317 	bic.w	r3, r3, #23
 8002c6e:	f043 0202 	orr.w	r2, r3, #2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <LL_ADC_IsEnabled+0x18>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <LL_ADC_IsEnabled+0x1a>
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d101      	bne.n	8002cbc <LL_ADC_IsDisableOngoing+0x18>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <LL_ADC_IsDisableOngoing+0x1a>
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cd8:	f023 0317 	bic.w	r3, r3, #23
 8002cdc:	f043 0204 	orr.w	r2, r3, #4
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cfe:	f023 0317 	bic.w	r3, r3, #23
 8002d02:	f043 0210 	orr.w	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d101      	bne.n	8002d2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e19e      	b.n	8003098 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7fe f913 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff44 	bl	8002c0e <LL_ADC_IsInternalRegulatorEnabled>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d115      	bne.n	8002db8 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff18 	bl	8002bc6 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d96:	4b99      	ldr	r3, [pc, #612]	; (8002ffc <HAL_ADC_Init+0x2c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	099b      	lsrs	r3, r3, #6
 8002d9c:	4a98      	ldr	r2, [pc, #608]	; (8003000 <HAL_ADC_Init+0x2c8>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	3301      	adds	r3, #1
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002daa:	e002      	b.n	8002db2 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f9      	bne.n	8002dac <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff26 	bl	8002c0e <LL_ADC_IsInternalRegulatorEnabled>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10d      	bne.n	8002de4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dcc:	f043 0210 	orr.w	r2, r3, #16
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff93 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8002dee:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f040 8144 	bne.w	8003086 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f040 8140 	bne.w	8003086 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e0e:	f043 0202 	orr.w	r2, r3, #2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff ff30 	bl	8002c80 <LL_ADC_IsEnabled>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 80a7 	bne.w	8002f76 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7e1b      	ldrb	r3, [r3, #24]
 8002e30:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e32:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	7e5b      	ldrb	r3, [r3, #25]
 8002e38:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e3a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	7e9b      	ldrb	r3, [r3, #26]
 8002e40:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e42:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e48:	2a00      	cmp	r2, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_ADC_Init+0x11a>
 8002e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e50:	e000      	b.n	8002e54 <HAL_ADC_Init+0x11c>
 8002e52:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e54:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e5a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	da04      	bge.n	8002e6e <HAL_ADC_Init+0x136>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e6c:	e001      	b.n	8002e72 <HAL_ADC_Init+0x13a>
 8002e6e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002e72:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002e7a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e7c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d114      	bne.n	8002eb8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	7e9b      	ldrb	r3, [r3, #26]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d104      	bne.n	8002ea0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	e00b      	b.n	8002eb8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	f043 0201 	orr.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d009      	beq.n	8002ed4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002ede:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	69b9      	ldr	r1, [r7, #24]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d111      	bne.n	8002f2e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f16:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002f1c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002f22:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	4b33      	ldr	r3, [pc, #204]	; (8003004 <HAL_ADC_Init+0x2cc>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	6979      	ldr	r1, [r7, #20]
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002f4a:	d014      	beq.n	8002f76 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f54:	d00f      	beq.n	8002f76 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f5e:	d00a      	beq.n	8002f76 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002f60:	4b29      	ldr	r3, [pc, #164]	; (8003008 <HAL_ADC_Init+0x2d0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f70:	4925      	ldr	r1, [pc, #148]	; (8003008 <HAL_ADC_Init+0x2d0>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2100      	movs	r1, #0
 8002f82:	f7ff fd76 	bl	8002a72 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	461a      	mov	r2, r3
 8002f90:	491e      	ldr	r1, [pc, #120]	; (800300c <HAL_ADC_Init+0x2d4>)
 8002f92:	f7ff fd6e 	bl	8002a72 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d108      	bne.n	8002fb0 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f062 020f 	orn	r2, r2, #15
 8002fac:	629a      	str	r2, [r3, #40]	; 0x28
 8002fae:	e042      	b.n	8003036 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fb8:	d13d      	bne.n	8003036 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	e00c      	b.n	8002fda <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	2b0f      	cmp	r3, #15
 8002fd2:	d006      	beq.n	8002fe2 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b07      	cmp	r3, #7
 8002fde:	d9ef      	bls.n	8002fc0 <HAL_ADC_Init+0x288>
 8002fe0:	e000      	b.n	8002fe4 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8002fe2:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d112      	bne.n	8003010 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f062 020f 	orn	r2, r2, #15
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28
 8002ffa:	e01c      	b.n	8003036 <HAL_ADC_Init+0x2fe>
 8002ffc:	20000000 	.word	0x20000000
 8003000:	053e2d63 	.word	0x053e2d63
 8003004:	1ffffc02 	.word	0x1ffffc02
 8003008:	40012708 	.word	0x40012708
 800300c:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	3b01      	subs	r3, #1
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	f003 031c 	and.w	r3, r3, #28
 8003022:	f06f 020f 	mvn.w	r2, #15
 8003026:	fa02 f103 	lsl.w	r1, r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fd36 	bl	8002aae <LL_ADC_GetSamplingTimeCommonChannels>
 8003042:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003048:	429a      	cmp	r2, r3
 800304a:	d10b      	bne.n	8003064 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003062:	e018      	b.n	8003096 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003068:	f023 0312 	bic.w	r3, r3, #18
 800306c:	f043 0210 	orr.w	r2, r3, #16
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	f043 0201 	orr.w	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003084:	e007      	b.n	8003096 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	f043 0210 	orr.w	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003096:	7ffb      	ldrb	r3, [r7, #31]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3720      	adds	r7, #32
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e06a      	b.n	8003188 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b6:	f043 0202 	orr.w	r2, r3, #2
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fabe 	bl	8003640 <ADC_ConversionStop>
 80030c4:	4603      	mov	r3, r0
 80030c6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10f      	bne.n	80030ee <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fb82 	bl	80037d8 <ADC_Disable>
 80030d4:	4603      	mov	r3, r0
 80030d6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fd7f 	bl	8002bec <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80030fc:	f023 0303 	bic.w	r3, r3, #3
 8003100:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f240 329f 	movw	r2, #927	; 0x39f
 800310a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68d9      	ldr	r1, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <HAL_ADC_DeInit+0xf0>)
 8003118:	400b      	ands	r3, r1
 800311a:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800312a:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0207 	bic.w	r2, r2, #7
 800313a:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6a1a      	ldr	r2, [r3, #32]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800314a:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2200      	movs	r2, #0
 8003158:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800315a:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <HAL_ADC_DeInit+0xf4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a0d      	ldr	r2, [pc, #52]	; (8003194 <HAL_ADC_DeInit+0xf4>)
 8003160:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003164:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd ff28 	bl	8000fbc <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	833e0200 	.word	0x833e0200
 8003194:	40012708 	.word	0x40012708

08003198 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fdb5 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d132      	bne.n	8003216 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_ADC_Start+0x26>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e02e      	b.n	800321c <HAL_ADC_Start+0x84>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fa80 	bl	80036cc <ADC_Enable>
 80031cc:	4603      	mov	r3, r0
 80031ce:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d11a      	bne.n	800320c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031de:	f023 0301 	bic.w	r3, r3, #1
 80031e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	221c      	movs	r2, #28
 80031f6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fd5f 	bl	8002cc8 <LL_ADC_REG_StartConversion>
 800320a:	e006      	b.n	800321a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003214:	e001      	b.n	800321a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003216:	2302      	movs	r3, #2
 8003218:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800321a:	7bfb      	ldrb	r3, [r7, #15]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_ADC_Stop+0x16>
 8003236:	2302      	movs	r3, #2
 8003238:	e022      	b.n	8003280 <HAL_ADC_Stop+0x5c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f9fc 	bl	8003640 <ADC_ConversionStop>
 8003248:	4603      	mov	r3, r0
 800324a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d111      	bne.n	8003276 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fac0 	bl	80037d8 <ADC_Disable>
 8003258:	4603      	mov	r3, r0
 800325a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	f043 0201 	orr.w	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	2b08      	cmp	r3, #8
 8003298:	d102      	bne.n	80032a0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800329a:	2308      	movs	r3, #8
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	e010      	b.n	80032c2 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b2:	f043 0220 	orr.w	r2, r3, #32
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e077      	b.n	80033ae <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80032be:	2304      	movs	r3, #4
 80032c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80032c2:	f7fe fd0d 	bl	8001ce0 <HAL_GetTick>
 80032c6:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032c8:	e021      	b.n	800330e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032d0:	d01d      	beq.n	800330e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032d2:	f7fe fd05 	bl	8001ce0 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d302      	bcc.n	80032e8 <HAL_ADC_PollForConversion+0x60>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d112      	bne.n	800330e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	f043 0204 	orr.w	r2, r3, #4
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e04f      	b.n	80033ae <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0d6      	beq.n	80032ca <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fbd6 	bl	8002ade <LL_ADC_REG_IsTriggerSourceSWStart>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d031      	beq.n	800339c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	7e9b      	ldrb	r3, [r3, #26]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d12d      	bne.n	800339c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b08      	cmp	r3, #8
 800334c:	d126      	bne.n	800339c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fcde 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d112      	bne.n	8003384 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 020c 	bic.w	r2, r2, #12
 800336c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003376:	f023 0301 	bic.w	r3, r3, #1
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	659a      	str	r2, [r3, #88]	; 0x58
 8003382:	e00b      	b.n	800339c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	f043 0220 	orr.w	r2, r3, #32
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003394:	f043 0201 	orr.w	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	7e1b      	ldrb	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d103      	bne.n	80033ac <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	220c      	movs	r2, #12
 80033aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x28>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e110      	b.n	800361a <HAL_ADC_ConfigChannel+0x24a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fc85 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	f040 80f7 	bne.w	8003600 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b02      	cmp	r3, #2
 8003418:	f000 80b1 	beq.w	800357e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003424:	d004      	beq.n	8003430 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800342a:	4a7e      	ldr	r2, [pc, #504]	; (8003624 <HAL_ADC_ConfigChannel+0x254>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d108      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4619      	mov	r1, r3
 800343a:	4610      	mov	r0, r2
 800343c:	f7ff fb82 	bl	8002b44 <LL_ADC_REG_SetSequencerChAdd>
 8003440:	e041      	b.n	80034c6 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	210f      	movs	r1, #15
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	401a      	ands	r2, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <HAL_ADC_ConfigChannel+0xa0>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	0e9b      	lsrs	r3, r3, #26
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	e011      	b.n	8003494 <HAL_ADC_ConfigChannel+0xc4>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	fa93 f3a3 	rbit	r3, r3
 800347c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003488:	2320      	movs	r3, #32
 800348a:	e003      	b.n	8003494 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	6839      	ldr	r1, [r7, #0]
 8003496:	6849      	ldr	r1, [r1, #4]
 8003498:	f001 011f 	and.w	r1, r1, #31
 800349c:	408b      	lsls	r3, r1
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	089b      	lsrs	r3, r3, #2
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d808      	bhi.n	80034c6 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	f7ff fb1e 	bl	8002b02 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6819      	ldr	r1, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	461a      	mov	r2, r3
 80034d4:	f7ff fb5b 	bl	8002b8e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f280 8097 	bge.w	8003610 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034e2:	4851      	ldr	r0, [pc, #324]	; (8003628 <HAL_ADC_ConfigChannel+0x258>)
 80034e4:	f7ff fab8 	bl	8002a58 <LL_ADC_GetCommonPathInternalCh>
 80034e8:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a4f      	ldr	r2, [pc, #316]	; (800362c <HAL_ADC_ConfigChannel+0x25c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d120      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d11b      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003504:	4619      	mov	r1, r3
 8003506:	4848      	ldr	r0, [pc, #288]	; (8003628 <HAL_ADC_ConfigChannel+0x258>)
 8003508:	f7ff fa94 	bl	8002a34 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800350c:	4b48      	ldr	r3, [pc, #288]	; (8003630 <HAL_ADC_ConfigChannel+0x260>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	099b      	lsrs	r3, r3, #6
 8003512:	4a48      	ldr	r2, [pc, #288]	; (8003634 <HAL_ADC_ConfigChannel+0x264>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	099b      	lsrs	r3, r3, #6
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	4613      	mov	r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003526:	e002      	b.n	800352e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	3b01      	subs	r3, #1
 800352c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f9      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003534:	e06c      	b.n	8003610 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a3f      	ldr	r2, [pc, #252]	; (8003638 <HAL_ADC_ConfigChannel+0x268>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d10c      	bne.n	800355a <HAL_ADC_ConfigChannel+0x18a>
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d107      	bne.n	800355a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003550:	4619      	mov	r1, r3
 8003552:	4835      	ldr	r0, [pc, #212]	; (8003628 <HAL_ADC_ConfigChannel+0x258>)
 8003554:	f7ff fa6e 	bl	8002a34 <LL_ADC_SetCommonPathInternalCh>
 8003558:	e05a      	b.n	8003610 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a37      	ldr	r2, [pc, #220]	; (800363c <HAL_ADC_ConfigChannel+0x26c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d155      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800356a:	2b00      	cmp	r3, #0
 800356c:	d150      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003574:	4619      	mov	r1, r3
 8003576:	482c      	ldr	r0, [pc, #176]	; (8003628 <HAL_ADC_ConfigChannel+0x258>)
 8003578:	f7ff fa5c 	bl	8002a34 <LL_ADC_SetCommonPathInternalCh>
 800357c:	e048      	b.n	8003610 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003586:	d004      	beq.n	8003592 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800358c:	4a25      	ldr	r2, [pc, #148]	; (8003624 <HAL_ADC_ConfigChannel+0x254>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d107      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4619      	mov	r1, r3
 800359c:	4610      	mov	r0, r2
 800359e:	f7ff fae3 	bl	8002b68 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	da32      	bge.n	8003610 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035aa:	481f      	ldr	r0, [pc, #124]	; (8003628 <HAL_ADC_ConfigChannel+0x258>)
 80035ac:	f7ff fa54 	bl	8002a58 <LL_ADC_GetCommonPathInternalCh>
 80035b0:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1d      	ldr	r2, [pc, #116]	; (800362c <HAL_ADC_ConfigChannel+0x25c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d107      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035c2:	4619      	mov	r1, r3
 80035c4:	4818      	ldr	r0, [pc, #96]	; (8003628 <HAL_ADC_ConfigChannel+0x258>)
 80035c6:	f7ff fa35 	bl	8002a34 <LL_ADC_SetCommonPathInternalCh>
 80035ca:	e021      	b.n	8003610 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_ADC_ConfigChannel+0x268>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d107      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035dc:	4619      	mov	r1, r3
 80035de:	4812      	ldr	r0, [pc, #72]	; (8003628 <HAL_ADC_ConfigChannel+0x258>)
 80035e0:	f7ff fa28 	bl	8002a34 <LL_ADC_SetCommonPathInternalCh>
 80035e4:	e014      	b.n	8003610 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a14      	ldr	r2, [pc, #80]	; (800363c <HAL_ADC_ConfigChannel+0x26c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d10f      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80035f6:	4619      	mov	r1, r3
 80035f8:	480b      	ldr	r0, [pc, #44]	; (8003628 <HAL_ADC_ConfigChannel+0x258>)
 80035fa:	f7ff fa1b 	bl	8002a34 <LL_ADC_SetCommonPathInternalCh>
 80035fe:	e007      	b.n	8003610 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003618:	7ffb      	ldrb	r3, [r7, #31]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	80000004 	.word	0x80000004
 8003628:	40012708 	.word	0x40012708
 800362c:	b0001000 	.word	0xb0001000
 8003630:	20000000 	.word	0x20000000
 8003634:	053e2d63 	.word	0x053e2d63
 8003638:	b8004000 	.word	0xb8004000
 800363c:	b4002000 	.word	0xb4002000

08003640 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fb61 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d033      	beq.n	80036c0 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fb21 	bl	8002ca4 <LL_ADC_IsDisableOngoing>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d104      	bne.n	8003672 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fb3e 	bl	8002cee <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003672:	f7fe fb35 	bl	8001ce0 <HAL_GetTick>
 8003676:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003678:	e01b      	b.n	80036b2 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800367a:	f7fe fb31 	bl	8001ce0 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d914      	bls.n	80036b2 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369a:	f043 0210 	orr.w	r2, r3, #16
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a6:	f043 0201 	orr.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e007      	b.n	80036c2 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1dc      	bne.n	800367a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff facf 	bl	8002c80 <LL_ADC_IsEnabled>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d169      	bne.n	80037bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	4b36      	ldr	r3, [pc, #216]	; (80037c8 <ADC_Enable+0xfc>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	f043 0210 	orr.w	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e055      	b.n	80037be <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fa8c 	bl	8002c34 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800371c:	482b      	ldr	r0, [pc, #172]	; (80037cc <ADC_Enable+0x100>)
 800371e:	f7ff f99b 	bl	8002a58 <LL_ADC_GetCommonPathInternalCh>
 8003722:	4603      	mov	r3, r0
 8003724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00f      	beq.n	800374c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800372c:	4b28      	ldr	r3, [pc, #160]	; (80037d0 <ADC_Enable+0x104>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	099b      	lsrs	r3, r3, #6
 8003732:	4a28      	ldr	r2, [pc, #160]	; (80037d4 <ADC_Enable+0x108>)
 8003734:	fba2 2303 	umull	r2, r3, r2, r3
 8003738:	099b      	lsrs	r3, r3, #6
 800373a:	3301      	adds	r3, #1
 800373c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800373e:	e002      	b.n	8003746 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	3b01      	subs	r3, #1
 8003744:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f9      	bne.n	8003740 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	7e5b      	ldrb	r3, [r3, #25]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d033      	beq.n	80037bc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003754:	f7fe fac4 	bl	8001ce0 <HAL_GetTick>
 8003758:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800375a:	e028      	b.n	80037ae <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fa8d 	bl	8002c80 <LL_ADC_IsEnabled>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fa5f 	bl	8002c34 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003776:	f7fe fab3 	bl	8001ce0 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d914      	bls.n	80037ae <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b01      	cmp	r3, #1
 8003790:	d00d      	beq.n	80037ae <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003796:	f043 0210 	orr.w	r2, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a2:	f043 0201 	orr.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e007      	b.n	80037be <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d1cf      	bne.n	800375c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	80000017 	.word	0x80000017
 80037cc:	40012708 	.word	0x40012708
 80037d0:	20000000 	.word	0x20000000
 80037d4:	053e2d63 	.word	0x053e2d63

080037d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fa5d 	bl	8002ca4 <LL_ADC_IsDisableOngoing>
 80037ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fa45 	bl	8002c80 <LL_ADC_IsEnabled>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d047      	beq.n	800388c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d144      	bne.n	800388c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0305 	and.w	r3, r3, #5
 800380c:	2b01      	cmp	r3, #1
 800380e:	d10c      	bne.n	800382a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fa20 	bl	8002c5a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2203      	movs	r2, #3
 8003820:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003822:	f7fe fa5d 	bl	8001ce0 <HAL_GetTick>
 8003826:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003828:	e029      	b.n	800387e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382e:	f043 0210 	orr.w	r2, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e023      	b.n	800388e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003846:	f7fe fa4b 	bl	8001ce0 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d914      	bls.n	800387e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00d      	beq.n	800387e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	f043 0210 	orr.w	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e007      	b.n	800388e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1dc      	bne.n	8003846 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <LL_ADC_SetCalibrationFactor>:
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038a6:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr

080038be <LL_ADC_GetCalibrationFactor>:
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr

080038da <LL_ADC_Enable>:
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038ea:	f023 0317 	bic.w	r3, r3, #23
 80038ee:	f043 0201 	orr.w	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	609a      	str	r2, [r3, #8]
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <LL_ADC_Disable>:
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003910:	f023 0317 	bic.w	r3, r3, #23
 8003914:	f043 0202 	orr.w	r2, r3, #2
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <LL_ADC_IsEnabled>:
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <LL_ADC_IsEnabled+0x18>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <LL_ADC_IsEnabled+0x1a>
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <LL_ADC_StartCalibration>:
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800395a:	f023 0317 	bic.w	r3, r3, #23
 800395e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	609a      	str	r2, [r3, #8]
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <LL_ADC_IsCalibrationOnGoing>:
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003980:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003984:	d101      	bne.n	800398a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr

08003996 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b088      	sub	sp, #32
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800399e:	2300      	movs	r3, #0
 80039a0:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_ADCEx_Calibration_Start+0x1e>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e0b9      	b.n	8003b28 <HAL_ADCEx_Calibration_Start+0x192>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ff0b 	bl	80037d8 <ADC_Disable>
 80039c2:	4603      	mov	r3, r0
 80039c4:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ffab 	bl	8003926 <LL_ADC_IsEnabled>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f040 809d 	bne.w	8003b12 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039e0:	f043 0202 	orr.w	r2, r3, #2
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	f248 0303 	movw	r3, #32771	; 0x8003
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a04:	f023 0303 	bic.w	r3, r3, #3
 8003a08:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	e02e      	b.n	8003a6e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff98 	bl	800394a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a1a:	e014      	b.n	8003a46 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003a28:	d30d      	bcc.n	8003a46 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	f023 0312 	bic.w	r3, r3, #18
 8003a32:	f043 0210 	orr.w	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e070      	b.n	8003b28 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ff90 	bl	8003970 <LL_ADC_IsCalibrationOnGoing>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e2      	bne.n	8003a1c <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff ff2f 	bl	80038be <LL_ADC_GetCalibrationFactor>
 8003a60:	4602      	mov	r2, r0
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	4413      	add	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2b07      	cmp	r3, #7
 8003a72:	d9cd      	bls.n	8003a10 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff ff29 	bl	80038da <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69b9      	ldr	r1, [r7, #24]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff ff01 	bl	8003896 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ff31 	bl	8003900 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a9e:	f7fe f91f 	bl	8001ce0 <HAL_GetTick>
 8003aa2:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003aa4:	e01c      	b.n	8003ae0 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003aa6:	f7fe f91b 	bl	8001ce0 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d915      	bls.n	8003ae0 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ff34 	bl	8003926 <LL_ADC_IsEnabled>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	f043 0210 	orr.w	r2, r3, #16
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad4:	f043 0201 	orr.w	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e023      	b.n	8003b28 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff1e 	bl	8003926 <LL_ADC_IsEnabled>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1da      	bne.n	8003aa6 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68d9      	ldr	r1, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	f023 0303 	bic.w	r3, r3, #3
 8003b08:	f043 0201 	orr.w	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	659a      	str	r2, [r3, #88]	; 0x58
 8003b10:	e005      	b.n	8003b1e <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b16:	f043 0210 	orr.w	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <__NVIC_SetPriorityGrouping+0x44>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b62:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <__NVIC_SetPriorityGrouping+0x44>)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	60d3      	str	r3, [r2, #12]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e000ed00 	.word	0xe000ed00

08003b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b7c:	4b04      	ldr	r3, [pc, #16]	; (8003b90 <__NVIC_GetPriorityGrouping+0x18>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	f003 0307 	and.w	r3, r3, #7
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	e000ed00 	.word	0xe000ed00

08003b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	db0b      	blt.n	8003bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	f003 021f 	and.w	r2, r3, #31
 8003bac:	4906      	ldr	r1, [pc, #24]	; (8003bc8 <__NVIC_EnableIRQ+0x34>)
 8003bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	e000e100 	.word	0xe000e100

08003bcc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	db12      	blt.n	8003c04 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	f003 021f 	and.w	r2, r3, #31
 8003be4:	490a      	ldr	r1, [pc, #40]	; (8003c10 <__NVIC_DisableIRQ+0x44>)
 8003be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	2001      	movs	r0, #1
 8003bee:	fa00 f202 	lsl.w	r2, r0, r2
 8003bf2:	3320      	adds	r3, #32
 8003bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003bf8:	f3bf 8f4f 	dsb	sy
}
 8003bfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bfe:	f3bf 8f6f 	isb	sy
}
 8003c02:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	e000e100 	.word	0xe000e100

08003c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	6039      	str	r1, [r7, #0]
 8003c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	db0a      	blt.n	8003c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	490c      	ldr	r1, [pc, #48]	; (8003c60 <__NVIC_SetPriority+0x4c>)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	440b      	add	r3, r1
 8003c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c3c:	e00a      	b.n	8003c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4908      	ldr	r1, [pc, #32]	; (8003c64 <__NVIC_SetPriority+0x50>)
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	3b04      	subs	r3, #4
 8003c4c:	0112      	lsls	r2, r2, #4
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	440b      	add	r3, r1
 8003c52:	761a      	strb	r2, [r3, #24]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000e100 	.word	0xe000e100
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b089      	sub	sp, #36	; 0x24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f1c3 0307 	rsb	r3, r3, #7
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	bf28      	it	cs
 8003c86:	2304      	movcs	r3, #4
 8003c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2b06      	cmp	r3, #6
 8003c90:	d902      	bls.n	8003c98 <NVIC_EncodePriority+0x30>
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3b03      	subs	r3, #3
 8003c96:	e000      	b.n	8003c9a <NVIC_EncodePriority+0x32>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	401a      	ands	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	43d9      	mvns	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc0:	4313      	orrs	r3, r2
         );
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3724      	adds	r7, #36	; 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff ff2b 	bl	8003b30 <__NVIC_SetPriorityGrouping>
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b086      	sub	sp, #24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	4603      	mov	r3, r0
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cf0:	f7ff ff42 	bl	8003b78 <__NVIC_GetPriorityGrouping>
 8003cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	6978      	ldr	r0, [r7, #20]
 8003cfc:	f7ff ffb4 	bl	8003c68 <NVIC_EncodePriority>
 8003d00:	4602      	mov	r2, r0
 8003d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff ff83 	bl	8003c14 <__NVIC_SetPriority>
}
 8003d0e:	bf00      	nop
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ff35 	bl	8003b94 <__NVIC_EnableIRQ>
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	4603      	mov	r3, r0
 8003d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff ff43 	bl	8003bcc <__NVIC_DisableIRQ>
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e08e      	b.n	8003e80 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	4b47      	ldr	r3, [pc, #284]	; (8003e88 <HAL_DMA_Init+0x138>)
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d80f      	bhi.n	8003d8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	4b45      	ldr	r3, [pc, #276]	; (8003e8c <HAL_DMA_Init+0x13c>)
 8003d76:	4413      	add	r3, r2
 8003d78:	4a45      	ldr	r2, [pc, #276]	; (8003e90 <HAL_DMA_Init+0x140>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	009a      	lsls	r2, r3, #2
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a42      	ldr	r2, [pc, #264]	; (8003e94 <HAL_DMA_Init+0x144>)
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40
 8003d8c:	e00e      	b.n	8003dac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	4b40      	ldr	r3, [pc, #256]	; (8003e98 <HAL_DMA_Init+0x148>)
 8003d96:	4413      	add	r3, r2
 8003d98:	4a3d      	ldr	r2, [pc, #244]	; (8003e90 <HAL_DMA_Init+0x140>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	009a      	lsls	r2, r3, #2
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a3c      	ldr	r2, [pc, #240]	; (8003e9c <HAL_DMA_Init+0x14c>)
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fb24 	bl	800444c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e0c:	d102      	bne.n	8003e14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e20:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e2a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d010      	beq.n	8003e56 <HAL_DMA_Init+0x106>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d80c      	bhi.n	8003e56 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fb4d 	bl	80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e52:	605a      	str	r2, [r3, #4]
 8003e54:	e008      	b.n	8003e68 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40020407 	.word	0x40020407
 8003e8c:	bffdfff8 	.word	0xbffdfff8
 8003e90:	cccccccd 	.word	0xcccccccd
 8003e94:	40020000 	.word	0x40020000
 8003e98:	bffdfbf8 	.word	0xbffdfbf8
 8003e9c:	40020400 	.word	0x40020400

08003ea0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e07b      	b.n	8003faa <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0201 	bic.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4b3a      	ldr	r3, [pc, #232]	; (8003fb4 <HAL_DMA_DeInit+0x114>)
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d80f      	bhi.n	8003eee <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4b38      	ldr	r3, [pc, #224]	; (8003fb8 <HAL_DMA_DeInit+0x118>)
 8003ed6:	4413      	add	r3, r2
 8003ed8:	4a38      	ldr	r2, [pc, #224]	; (8003fbc <HAL_DMA_DeInit+0x11c>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	009a      	lsls	r2, r3, #2
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a35      	ldr	r2, [pc, #212]	; (8003fc0 <HAL_DMA_DeInit+0x120>)
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40
 8003eec:	e00e      	b.n	8003f0c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4b33      	ldr	r3, [pc, #204]	; (8003fc4 <HAL_DMA_DeInit+0x124>)
 8003ef6:	4413      	add	r3, r2
 8003ef8:	4a30      	ldr	r2, [pc, #192]	; (8003fbc <HAL_DMA_DeInit+0x11c>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	009a      	lsls	r2, r3, #2
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2f      	ldr	r2, [pc, #188]	; (8003fc8 <HAL_DMA_DeInit+0x128>)
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	f003 021c 	and.w	r2, r3, #28
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	2101      	movs	r1, #1
 8003f22:	fa01 f202 	lsl.w	r2, r1, r2
 8003f26:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fa8f 	bl	800444c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f3e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00f      	beq.n	8003f68 <HAL_DMA_DeInit+0xc8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d80b      	bhi.n	8003f68 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fac3 	bl	80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f66:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40020407 	.word	0x40020407
 8003fb8:	bffdfff8 	.word	0xbffdfff8
 8003fbc:	cccccccd 	.word	0xcccccccd
 8003fc0:	40020000 	.word	0x40020000
 8003fc4:	bffdfbf8 	.word	0xbffdfbf8
 8003fc8:	40020400 	.word	0x40020400

08003fcc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_DMA_Start_IT+0x20>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e069      	b.n	80040c0 <HAL_DMA_Start_IT+0xf4>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d155      	bne.n	80040ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f9d3 	bl	80043d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 020e 	orr.w	r2, r2, #14
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e00f      	b.n	8004064 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0204 	bic.w	r2, r2, #4
 8004052:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 020a 	orr.w	r2, r2, #10
 8004062:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004080:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004098:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e008      	b.n	80040be <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2280      	movs	r2, #128	; 0x80
 80040b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80040be:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e04f      	b.n	800417a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d008      	beq.n	80040f8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2204      	movs	r2, #4
 80040ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e040      	b.n	800417a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 020e 	bic.w	r2, r2, #14
 8004106:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004116:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	f003 021c 	and.w	r2, r3, #28
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	2101      	movs	r1, #1
 8004136:	fa01 f202 	lsl.w	r2, r1, r2
 800413a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004144:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800415c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004166:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d005      	beq.n	80041a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2204      	movs	r2, #4
 80041a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
 80041a6:	e047      	b.n	8004238 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 020e 	bic.w	r2, r2, #14
 80041b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	f003 021c 	and.w	r2, r3, #28
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00c      	beq.n	8004218 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800420c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004216:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	4798      	blx	r3
    }
  }
  return status;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004260:	f003 031c 	and.w	r3, r3, #28
 8004264:	2204      	movs	r2, #4
 8004266:	409a      	lsls	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d027      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x7c>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d022      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d107      	bne.n	8004298 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0204 	bic.w	r2, r2, #4
 8004296:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429c:	f003 021c 	and.w	r2, r3, #28
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	2104      	movs	r1, #4
 80042a6:	fa01 f202 	lsl.w	r2, r1, r2
 80042aa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8081 	beq.w	80043b8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80042be:	e07b      	b.n	80043b8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c4:	f003 031c 	and.w	r3, r3, #28
 80042c8:	2202      	movs	r2, #2
 80042ca:	409a      	lsls	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d03d      	beq.n	8004350 <HAL_DMA_IRQHandler+0x10c>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d038      	beq.n	8004350 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 020a 	bic.w	r2, r2, #10
 80042fa:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <HAL_DMA_IRQHandler+0x180>)
 800430c:	429a      	cmp	r2, r3
 800430e:	d909      	bls.n	8004324 <HAL_DMA_IRQHandler+0xe0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	f003 031c 	and.w	r3, r3, #28
 8004318:	4a2b      	ldr	r2, [pc, #172]	; (80043c8 <HAL_DMA_IRQHandler+0x184>)
 800431a:	2102      	movs	r1, #2
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	6053      	str	r3, [r2, #4]
 8004322:	e008      	b.n	8004336 <HAL_DMA_IRQHandler+0xf2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	f003 031c 	and.w	r3, r3, #28
 800432c:	4a27      	ldr	r2, [pc, #156]	; (80043cc <HAL_DMA_IRQHandler+0x188>)
 800432e:	2102      	movs	r1, #2
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d038      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800434e:	e033      	b.n	80043b8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004354:	f003 031c 	and.w	r3, r3, #28
 8004358:	2208      	movs	r2, #8
 800435a:	409a      	lsls	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d02a      	beq.n	80043ba <HAL_DMA_IRQHandler+0x176>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d025      	beq.n	80043ba <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 020e 	bic.w	r2, r2, #14
 800437c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	f003 021c 	and.w	r2, r3, #28
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2101      	movs	r1, #1
 800438c:	fa01 f202 	lsl.w	r2, r1, r2
 8004390:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
}
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40020080 	.word	0x40020080
 80043c8:	40020400 	.word	0x40020400
 80043cc:	40020000 	.word	0x40020000

080043d0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f003 021c 	and.w	r2, r3, #28
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	2101      	movs	r1, #1
 8004408:	fa01 f202 	lsl.w	r2, r1, r2
 800440c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b10      	cmp	r3, #16
 800441c:	d108      	bne.n	8004430 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800442e:	e007      	b.n	8004440 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	60da      	str	r2, [r3, #12]
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr
	...

0800444c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	4b1c      	ldr	r3, [pc, #112]	; (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800445c:	429a      	cmp	r2, r3
 800445e:	d813      	bhi.n	8004488 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004464:	089b      	lsrs	r3, r3, #2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800446c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	3b08      	subs	r3, #8
 800447c:	4a14      	ldr	r2, [pc, #80]	; (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e011      	b.n	80044ac <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	089b      	lsrs	r3, r3, #2
 800448e:	009a      	lsls	r2, r3, #2
 8004490:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004492:	4413      	add	r3, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	3b08      	subs	r3, #8
 80044a0:	4a0b      	ldr	r2, [pc, #44]	; (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	091b      	lsrs	r3, r3, #4
 80044a8:	3307      	adds	r3, #7
 80044aa:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a0a      	ldr	r2, [pc, #40]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80044b0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 031f 	and.w	r3, r3, #31
 80044b8:	2201      	movs	r2, #1
 80044ba:	409a      	lsls	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40020407 	.word	0x40020407
 80044d0:	cccccccd 	.word	0xcccccccd
 80044d4:	4002081c 	.word	0x4002081c
 80044d8:	40020880 	.word	0x40020880

080044dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044ec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4b0a      	ldr	r3, [pc, #40]	; (800451c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	461a      	mov	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a08      	ldr	r2, [pc, #32]	; (8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004500:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3b01      	subs	r3, #1
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2201      	movs	r2, #1
 800450c:	409a      	lsls	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr
 800451c:	1000823f 	.word	0x1000823f
 8004520:	40020940 	.word	0x40020940

08004524 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004532:	4b1c      	ldr	r3, [pc, #112]	; (80045a4 <HAL_FLASH_Program+0x80>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_FLASH_Program+0x1a>
 800453a:	2302      	movs	r3, #2
 800453c:	e02d      	b.n	800459a <HAL_FLASH_Program+0x76>
 800453e:	4b19      	ldr	r3, [pc, #100]	; (80045a4 <HAL_FLASH_Program+0x80>)
 8004540:	2201      	movs	r2, #1
 8004542:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004544:	4b17      	ldr	r3, [pc, #92]	; (80045a4 <HAL_FLASH_Program+0x80>)
 8004546:	2200      	movs	r2, #0
 8004548:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800454a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800454e:	f000 f869 	bl	8004624 <FLASH_WaitForLastOperation>
 8004552:	4603      	mov	r3, r0
 8004554:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d11a      	bne.n	8004592 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d105      	bne.n	800456e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004566:	68b8      	ldr	r0, [r7, #8]
 8004568:	f000 f8be 	bl	80046e8 <FLASH_Program_DoubleWord>
 800456c:	e004      	b.n	8004578 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	4619      	mov	r1, r3
 8004572:	68b8      	ldr	r0, [r7, #8]
 8004574:	f000 f8de 	bl	8004734 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800457c:	f000 f852 	bl	8004624 <FLASH_WaitForLastOperation>
 8004580:	4603      	mov	r3, r0
 8004582:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004584:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <HAL_FLASH_Program+0x84>)
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	43db      	mvns	r3, r3
 800458c:	4906      	ldr	r1, [pc, #24]	; (80045a8 <HAL_FLASH_Program+0x84>)
 800458e:	4013      	ands	r3, r2
 8004590:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004592:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <HAL_FLASH_Program+0x80>)
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004598:	7dfb      	ldrb	r3, [r7, #23]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000320 	.word	0x20000320
 80045a8:	58004000 	.word	0x58004000

080045ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_FLASH_Unlock+0x38>)
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	da0b      	bge.n	80045d6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80045be:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <HAL_FLASH_Unlock+0x38>)
 80045c0:	4a09      	ldr	r2, [pc, #36]	; (80045e8 <HAL_FLASH_Unlock+0x3c>)
 80045c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80045c4:	4b07      	ldr	r3, [pc, #28]	; (80045e4 <HAL_FLASH_Unlock+0x38>)
 80045c6:	4a09      	ldr	r2, [pc, #36]	; (80045ec <HAL_FLASH_Unlock+0x40>)
 80045c8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_FLASH_Unlock+0x38>)
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	da01      	bge.n	80045d6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80045d6:	79fb      	ldrb	r3, [r7, #7]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	58004000 	.word	0x58004000
 80045e8:	45670123 	.word	0x45670123
 80045ec:	cdef89ab 	.word	0xcdef89ab

080045f0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_FLASH_Lock+0x30>)
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	4a08      	ldr	r2, [pc, #32]	; (8004620 <HAL_FLASH_Lock+0x30>)
 8004600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004604:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004606:	4b06      	ldr	r3, [pc, #24]	; (8004620 <HAL_FLASH_Lock+0x30>)
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	db01      	blt.n	8004612 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004612:	79fb      	ldrb	r3, [r7, #7]
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	58004000 	.word	0x58004000

08004624 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800462c:	f7fd fb58 	bl	8001ce0 <HAL_GetTick>
 8004630:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004632:	e009      	b.n	8004648 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004634:	f7fd fb54 	bl	8001ce0 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d801      	bhi.n	8004648 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e047      	b.n	80046d8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004648:	4b25      	ldr	r3, [pc, #148]	; (80046e0 <FLASH_WaitForLastOperation+0xbc>)
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d0ee      	beq.n	8004634 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004656:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <FLASH_WaitForLastOperation+0xbc>)
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004666:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <FLASH_WaitForLastOperation+0xbc>)
 8004668:	2201      	movs	r2, #1
 800466a:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004672:	4013      	ands	r3, r2
 8004674:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d007      	beq.n	8004690 <FLASH_WaitForLastOperation+0x6c>
 8004680:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <FLASH_WaitForLastOperation+0xbc>)
 8004682:	699a      	ldr	r2, [r3, #24]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800468a:	4915      	ldr	r1, [pc, #84]	; (80046e0 <FLASH_WaitForLastOperation+0xbc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	618b      	str	r3, [r1, #24]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d004      	beq.n	80046a4 <FLASH_WaitForLastOperation+0x80>
 800469a:	4a11      	ldr	r2, [pc, #68]	; (80046e0 <FLASH_WaitForLastOperation+0xbc>)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80046a2:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00e      	beq.n	80046c8 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80046aa:	4a0e      	ldr	r2, [pc, #56]	; (80046e4 <FLASH_WaitForLastOperation+0xc0>)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e011      	b.n	80046d8 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80046b4:	f7fd fb14 	bl	8001ce0 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d801      	bhi.n	80046c8 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e007      	b.n	80046d8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <FLASH_WaitForLastOperation+0xbc>)
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046d4:	d0ee      	beq.n	80046b4 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	58004000 	.word	0x58004000
 80046e4:	20000320 	.word	0x20000320

080046e8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80046f4:	4b0e      	ldr	r3, [pc, #56]	; (8004730 <FLASH_Program_DoubleWord+0x48>)
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	4a0d      	ldr	r2, [pc, #52]	; (8004730 <FLASH_Program_DoubleWord+0x48>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004706:	f3bf 8f6f 	isb	sy
}
 800470a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800470c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	000a      	movs	r2, r1
 800471a:	2300      	movs	r3, #0
 800471c:	68f9      	ldr	r1, [r7, #12]
 800471e:	3104      	adds	r1, #4
 8004720:	4613      	mov	r3, r2
 8004722:	600b      	str	r3, [r1, #0]
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	58004000 	.word	0x58004000

08004734 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	; 0x24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800473e:	2340      	movs	r3, #64	; 0x40
 8004740:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800474a:	4b18      	ldr	r3, [pc, #96]	; (80047ac <FLASH_Program_Fast+0x78>)
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	4a17      	ldr	r2, [pc, #92]	; (80047ac <FLASH_Program_Fast+0x78>)
 8004750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004754:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004756:	f3ef 8310 	mrs	r3, PRIMASK
 800475a:	60fb      	str	r3, [r7, #12]
  return(result);
 800475c:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800475e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004760:	b672      	cpsid	i
}
 8004762:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	3304      	adds	r3, #4
 8004770:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	3304      	adds	r3, #4
 8004776:	617b      	str	r3, [r7, #20]
    row_index--;
 8004778:	7ffb      	ldrb	r3, [r7, #31]
 800477a:	3b01      	subs	r3, #1
 800477c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800477e:	7ffb      	ldrb	r3, [r7, #31]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1ef      	bne.n	8004764 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004784:	bf00      	nop
 8004786:	4b09      	ldr	r3, [pc, #36]	; (80047ac <FLASH_Program_Fast+0x78>)
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800478e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004792:	d0f8      	beq.n	8004786 <FLASH_Program_Fast+0x52>
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f383 8810 	msr	PRIMASK, r3
}
 800479e:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80047a0:	bf00      	nop
 80047a2:	3724      	adds	r7, #36	; 0x24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	58004000 	.word	0x58004000

080047b0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80047ba:	4b28      	ldr	r3, [pc, #160]	; (800485c <HAL_FLASHEx_Erase+0xac>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_FLASHEx_Erase+0x16>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e046      	b.n	8004854 <HAL_FLASHEx_Erase+0xa4>
 80047c6:	4b25      	ldr	r3, [pc, #148]	; (800485c <HAL_FLASHEx_Erase+0xac>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80047cc:	4b23      	ldr	r3, [pc, #140]	; (800485c <HAL_FLASHEx_Erase+0xac>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80047d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047d6:	f7ff ff25 	bl	8004624 <FLASH_WaitForLastOperation>
 80047da:	4603      	mov	r3, r0
 80047dc:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d133      	bne.n	800484c <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d108      	bne.n	80047fe <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80047ec:	f000 f880 	bl	80048f0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80047f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047f4:	f7ff ff16 	bl	8004624 <FLASH_WaitForLastOperation>
 80047f8:	4603      	mov	r3, r0
 80047fa:	73fb      	strb	r3, [r7, #15]
 80047fc:	e024      	b.n	8004848 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004804:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	e012      	b.n	8004834 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800480e:	68b8      	ldr	r0, [r7, #8]
 8004810:	f000 f87e 	bl	8004910 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004814:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004818:	f7ff ff04 	bl	8004624 <FLASH_WaitForLastOperation>
 800481c:	4603      	mov	r3, r0
 800481e:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	601a      	str	r2, [r3, #0]
          break;
 800482c:	e00a      	b.n	8004844 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	3301      	adds	r3, #1
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	4413      	add	r3, r2
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	429a      	cmp	r2, r3
 8004842:	d3e4      	bcc.n	800480e <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004844:	f000 f8c0 	bl	80049c8 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004848:	f000 f87a 	bl	8004940 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800484c:	4b03      	ldr	r3, [pc, #12]	; (800485c <HAL_FLASHEx_Erase+0xac>)
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]

  return status;
 8004852:	7bfb      	ldrb	r3, [r7, #15]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20000320 	.word	0x20000320

08004860 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004868:	4b1f      	ldr	r3, [pc, #124]	; (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_FLASHEx_Erase_IT+0x14>
 8004870:	2302      	movs	r3, #2
 8004872:	e034      	b.n	80048de <HAL_FLASHEx_Erase_IT+0x7e>
 8004874:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800487a:	4b1b      	ldr	r3, [pc, #108]	; (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 800487c:	2200      	movs	r2, #0
 800487e:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a18      	ldr	r2, [pc, #96]	; (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 8004886:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800488c:	f7ff feca 	bl	8004624 <FLASH_WaitForLastOperation>
 8004890:	4603      	mov	r3, r0
 8004892:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8004894:	7bfb      	ldrb	r3, [r7, #15]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800489a:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 800489c:	2200      	movs	r2, #0
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	e01c      	b.n	80048dc <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80048a2:	4b12      	ldr	r3, [pc, #72]	; (80048ec <HAL_FLASHEx_Erase_IT+0x8c>)
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	4a11      	ldr	r2, [pc, #68]	; (80048ec <HAL_FLASHEx_Erase_IT+0x8c>)
 80048a8:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80048ac:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d105      	bne.n	80048c2 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 80048b6:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80048bc:	f000 f818 	bl	80048f0 <FLASH_MassErase>
 80048c0:	e00c      	b.n	80048dc <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	4a08      	ldr	r2, [pc, #32]	; (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 80048c8:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	4a06      	ldr	r2, [pc, #24]	; (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 80048d0:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 f81a 	bl	8004910 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000320 	.word	0x20000320
 80048ec:	58004000 	.word	0x58004000

080048f0 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <FLASH_MassErase+0x1c>)
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	4a04      	ldr	r2, [pc, #16]	; (800490c <FLASH_MassErase+0x1c>)
 80048fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fe:	f043 0304 	orr.w	r3, r3, #4
 8004902:	6153      	str	r3, [r2, #20]
#endif
}
 8004904:	bf00      	nop
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr
 800490c:	58004000 	.word	0x58004000

08004910 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004918:	4b08      	ldr	r3, [pc, #32]	; (800493c <FLASH_PageErase+0x2c>)
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4313      	orrs	r3, r2
 8004926:	4a05      	ldr	r2, [pc, #20]	; (800493c <FLASH_PageErase+0x2c>)
 8004928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492c:	f043 0302 	orr.w	r3, r3, #2
 8004930:	6153      	str	r3, [r2, #20]
#endif
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr
 800493c:	58004000 	.word	0x58004000

08004940 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004944:	4b1f      	ldr	r3, [pc, #124]	; (80049c4 <FLASH_FlushCaches+0x84>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494c:	2b01      	cmp	r3, #1
 800494e:	d117      	bne.n	8004980 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004950:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <FLASH_FlushCaches+0x84>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1b      	ldr	r2, [pc, #108]	; (80049c4 <FLASH_FlushCaches+0x84>)
 8004956:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800495a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800495c:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <FLASH_FlushCaches+0x84>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a18      	ldr	r2, [pc, #96]	; (80049c4 <FLASH_FlushCaches+0x84>)
 8004962:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <FLASH_FlushCaches+0x84>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <FLASH_FlushCaches+0x84>)
 800496e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004972:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004974:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <FLASH_FlushCaches+0x84>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a12      	ldr	r2, [pc, #72]	; (80049c4 <FLASH_FlushCaches+0x84>)
 800497a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800497e:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004980:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <FLASH_FlushCaches+0x84>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004988:	2b01      	cmp	r3, #1
 800498a:	d117      	bne.n	80049bc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800498c:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <FLASH_FlushCaches+0x84>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a0c      	ldr	r2, [pc, #48]	; (80049c4 <FLASH_FlushCaches+0x84>)
 8004992:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004996:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <FLASH_FlushCaches+0x84>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a09      	ldr	r2, [pc, #36]	; (80049c4 <FLASH_FlushCaches+0x84>)
 800499e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <FLASH_FlushCaches+0x84>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a06      	ldr	r2, [pc, #24]	; (80049c4 <FLASH_FlushCaches+0x84>)
 80049aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80049b0:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <FLASH_FlushCaches+0x84>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a03      	ldr	r2, [pc, #12]	; (80049c4 <FLASH_FlushCaches+0x84>)
 80049b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049ba:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80049bc:	bf00      	nop
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr
 80049c4:	58004000 	.word	0x58004000

080049c8 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <FLASH_AcknowledgePageErase+0x1c>)
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	4a04      	ldr	r2, [pc, #16]	; (80049e4 <FLASH_AcknowledgePageErase+0x1c>)
 80049d2:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80049d6:	f023 0302 	bic.w	r3, r3, #2
 80049da:	6153      	str	r3, [r2, #20]
#endif
}
 80049dc:	bf00      	nop
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	58004000 	.word	0x58004000

080049e8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049f6:	e140      	b.n	8004c7a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	2101      	movs	r1, #1
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	fa01 f303 	lsl.w	r3, r1, r3
 8004a04:	4013      	ands	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 8132 	beq.w	8004c74 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d005      	beq.n	8004a28 <HAL_GPIO_Init+0x40>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d130      	bne.n	8004a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	2203      	movs	r2, #3
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a5e:	2201      	movs	r2, #1
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	091b      	lsrs	r3, r3, #4
 8004a74:	f003 0201 	and.w	r2, r3, #1
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d017      	beq.n	8004ac6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d123      	bne.n	8004b1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	08da      	lsrs	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3208      	adds	r2, #8
 8004ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	220f      	movs	r2, #15
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	43db      	mvns	r3, r3
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4013      	ands	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	08da      	lsrs	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3208      	adds	r2, #8
 8004b14:	6939      	ldr	r1, [r7, #16]
 8004b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	2203      	movs	r2, #3
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f003 0203 	and.w	r2, r3, #3
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 808c 	beq.w	8004c74 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004b5c:	4a4e      	ldr	r2, [pc, #312]	; (8004c98 <HAL_GPIO_Init+0x2b0>)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	089b      	lsrs	r3, r3, #2
 8004b62:	3302      	adds	r3, #2
 8004b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	2207      	movs	r2, #7
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b86:	d00d      	beq.n	8004ba4 <HAL_GPIO_Init+0x1bc>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a44      	ldr	r2, [pc, #272]	; (8004c9c <HAL_GPIO_Init+0x2b4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <HAL_GPIO_Init+0x1b8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a43      	ldr	r2, [pc, #268]	; (8004ca0 <HAL_GPIO_Init+0x2b8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d101      	bne.n	8004b9c <HAL_GPIO_Init+0x1b4>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e004      	b.n	8004ba6 <HAL_GPIO_Init+0x1be>
 8004b9c:	2307      	movs	r3, #7
 8004b9e:	e002      	b.n	8004ba6 <HAL_GPIO_Init+0x1be>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <HAL_GPIO_Init+0x1be>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	f002 0203 	and.w	r2, r2, #3
 8004bac:	0092      	lsls	r2, r2, #2
 8004bae:	4093      	lsls	r3, r2
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004bb6:	4938      	ldr	r1, [pc, #224]	; (8004c98 <HAL_GPIO_Init+0x2b0>)
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	089b      	lsrs	r3, r3, #2
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bc4:	4b37      	ldr	r3, [pc, #220]	; (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004be8:	4a2e      	ldr	r2, [pc, #184]	; (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004bee:	4b2d      	ldr	r3, [pc, #180]	; (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c12:	4a24      	ldr	r2, [pc, #144]	; (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004c18:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c1e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	43db      	mvns	r3, r3
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4013      	ands	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004c3e:	4a19      	ldr	r2, [pc, #100]	; (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004c46:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4013      	ands	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004c6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	3301      	adds	r3, #1
 8004c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	fa22 f303 	lsr.w	r3, r2, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f47f aeb7 	bne.w	80049f8 <HAL_GPIO_Init+0x10>
  }
}
 8004c8a:	bf00      	nop
 8004c8c:	bf00      	nop
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40010000 	.word	0x40010000
 8004c9c:	48000400 	.word	0x48000400
 8004ca0:	48000800 	.word	0x48000800
 8004ca4:	58000800 	.word	0x58000800

08004ca8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004cb6:	e0af      	b.n	8004e18 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004cb8:	2201      	movs	r2, #1
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80a2 	beq.w	8004e12 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004cce:	4a59      	ldr	r2, [pc, #356]	; (8004e34 <HAL_GPIO_DeInit+0x18c>)
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	3302      	adds	r3, #2
 8004cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cda:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	2207      	movs	r2, #7
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4013      	ands	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004cf6:	d00d      	beq.n	8004d14 <HAL_GPIO_DeInit+0x6c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a4f      	ldr	r2, [pc, #316]	; (8004e38 <HAL_GPIO_DeInit+0x190>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d007      	beq.n	8004d10 <HAL_GPIO_DeInit+0x68>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a4e      	ldr	r2, [pc, #312]	; (8004e3c <HAL_GPIO_DeInit+0x194>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d101      	bne.n	8004d0c <HAL_GPIO_DeInit+0x64>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e004      	b.n	8004d16 <HAL_GPIO_DeInit+0x6e>
 8004d0c:	2307      	movs	r3, #7
 8004d0e:	e002      	b.n	8004d16 <HAL_GPIO_DeInit+0x6e>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <HAL_GPIO_DeInit+0x6e>
 8004d14:	2300      	movs	r3, #0
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	f002 0203 	and.w	r2, r2, #3
 8004d1c:	0092      	lsls	r2, r2, #2
 8004d1e:	4093      	lsls	r3, r2
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d136      	bne.n	8004d94 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004d26:	4b46      	ldr	r3, [pc, #280]	; (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d28:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	4943      	ldr	r1, [pc, #268]	; (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004d38:	4b41      	ldr	r3, [pc, #260]	; (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d3a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	493f      	ldr	r1, [pc, #252]	; (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004d4a:	4b3d      	ldr	r3, [pc, #244]	; (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	43db      	mvns	r3, r3
 8004d52:	493b      	ldr	r1, [pc, #236]	; (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004d58:	4b39      	ldr	r3, [pc, #228]	; (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	4937      	ldr	r1, [pc, #220]	; (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	2207      	movs	r2, #7
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004d76:	4a2f      	ldr	r2, [pc, #188]	; (8004e34 <HAL_GPIO_DeInit+0x18c>)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	43da      	mvns	r2, r3
 8004d86:	482b      	ldr	r0, [pc, #172]	; (8004e34 <HAL_GPIO_DeInit+0x18c>)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	089b      	lsrs	r3, r3, #2
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	3302      	adds	r3, #2
 8004d90:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	2103      	movs	r1, #3
 8004d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	08da      	lsrs	r2, r3, #3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3208      	adds	r2, #8
 8004db0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	220f      	movs	r2, #15
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	08d2      	lsrs	r2, r2, #3
 8004dc8:	4019      	ands	r1, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3208      	adds	r2, #8
 8004dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	2103      	movs	r1, #3
 8004ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	401a      	ands	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	2101      	movs	r1, #1
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	fa01 f303 	lsl.w	r3, r1, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	401a      	ands	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	2103      	movs	r1, #3
 8004e06:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	401a      	ands	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	3301      	adds	r3, #1
 8004e16:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f47f af49 	bne.w	8004cb8 <HAL_GPIO_DeInit+0x10>
  }
}
 8004e26:	bf00      	nop
 8004e28:	bf00      	nop
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40010000 	.word	0x40010000
 8004e38:	48000400 	.word	0x48000400
 8004e3c:	48000800 	.word	0x48000800
 8004e40:	58000800 	.word	0x58000800

08004e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	807b      	strh	r3, [r7, #2]
 8004e50:	4613      	mov	r3, r2
 8004e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e54:	787b      	ldrb	r3, [r7, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e5a:	887a      	ldrh	r2, [r7, #2]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e60:	e002      	b.n	8004e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e62:	887a      	ldrh	r2, [r7, #2]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
	...

08004e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	4013      	ands	r3, r2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d006      	beq.n	8004e98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e8a:	4a05      	ldr	r2, [pc, #20]	; (8004ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f004 fe7e 	bl	8009b94 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e98:	bf00      	nop
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	58000800 	.word	0x58000800

08004ea4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea8:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <HAL_PWR_EnableBkUpAccess+0x18>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a03      	ldr	r2, [pc, #12]	; (8004ebc <HAL_PWR_EnableBkUpAccess+0x18>)
 8004eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb2:	6013      	str	r3, [r2, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	58000400 	.word	0x58000400

08004ec0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10c      	bne.n	8004eec <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004ed2:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ede:	d10d      	bne.n	8004efc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004ee0:	f000 f83c 	bl	8004f5c <HAL_PWREx_DisableLowPowerRunMode>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d008      	beq.n	8004efc <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004eea:	e015      	b.n	8004f18 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004eec:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004ef8:	f000 f822 	bl	8004f40 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004efc:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	4a08      	ldr	r2, [pc, #32]	; (8004f24 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004f02:	f023 0304 	bic.w	r3, r3, #4
 8004f06:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004f08:	78fb      	ldrb	r3, [r7, #3]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004f0e:	bf30      	wfi
 8004f10:	e002      	b.n	8004f18 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004f12:	bf40      	sev
    __WFE();
 8004f14:	bf20      	wfe
    __WFE();
 8004f16:	bf20      	wfe
  }
}
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	58000400 	.word	0x58000400
 8004f24:	e000ed00 	.word	0xe000ed00

08004f28 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <HAL_PWREx_GetVoltageRange+0x14>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr
 8004f3c:	58000400 	.word	0x58000400

08004f40 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004f44:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a03      	ldr	r2, [pc, #12]	; (8004f58 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f4e:	6013      	str	r3, [r2, #0]
}
 8004f50:	bf00      	nop
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr
 8004f58:	58000400 	.word	0x58000400

08004f5c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004f62:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f6c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004f6e:	4b14      	ldr	r3, [pc, #80]	; (8004fc0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2232      	movs	r2, #50	; 0x32
 8004f74:	fb02 f303 	mul.w	r3, r2, r3
 8004f78:	4a12      	ldr	r2, [pc, #72]	; (8004fc4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	0c9b      	lsrs	r3, r3, #18
 8004f80:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004f82:	e002      	b.n	8004f8a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004f8a:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f96:	d102      	bne.n	8004f9e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f2      	bne.n	8004f84 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004f9e:	4b07      	ldr	r3, [pc, #28]	; (8004fbc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004faa:	d101      	bne.n	8004fb0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e000      	b.n	8004fb2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr
 8004fbc:	58000400 	.word	0x58000400
 8004fc0:	20000000 	.word	0x20000000
 8004fc4:	431bde83 	.word	0x431bde83

08004fc8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004fd2:	4b10      	ldr	r3, [pc, #64]	; (8005014 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f023 0307 	bic.w	r3, r3, #7
 8004fda:	4a0e      	ldr	r2, [pc, #56]	; (8005014 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004fdc:	f043 0302 	orr.w	r3, r3, #2
 8004fe0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	4a0c      	ldr	r2, [pc, #48]	; (8005018 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004fe8:	f043 0304 	orr.w	r3, r3, #4
 8004fec:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004ff4:	bf30      	wfi
 8004ff6:	e002      	b.n	8004ffe <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004ff8:	bf40      	sev
    __WFE();
 8004ffa:	bf20      	wfe
    __WFE();
 8004ffc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ffe:	4b06      	ldr	r3, [pc, #24]	; (8005018 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	4a05      	ldr	r2, [pc, #20]	; (8005018 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005004:	f023 0304 	bic.w	r3, r3, #4
 8005008:	6113      	str	r3, [r2, #16]
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr
 8005014:	58000400 	.word	0x58000400
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <LL_PWR_IsEnabledBkUpAccess>:
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005020:	4b06      	ldr	r3, [pc, #24]	; (800503c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800502c:	d101      	bne.n	8005032 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr
 800503c:	58000400 	.word	0x58000400

08005040 <LL_RCC_HSE_EnableTcxo>:
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800504e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005052:	6013      	str	r3, [r2, #0]
}
 8005054:	bf00      	nop
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr

0800505c <LL_RCC_HSE_DisableTcxo>:
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800506a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800506e:	6013      	str	r3, [r2, #0]
}
 8005070:	bf00      	nop
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800507c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800508a:	d101      	bne.n	8005090 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <LL_RCC_HSE_Enable>:
{
 800509a:	b480      	push	{r7}
 800509c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800509e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
}
 80050ae:	bf00      	nop
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr

080050b6 <LL_RCC_HSE_Disable>:
{
 80050b6:	b480      	push	{r7}
 80050b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80050ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050c8:	6013      	str	r3, [r2, #0]
}
 80050ca:	bf00      	nop
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr

080050d2 <LL_RCC_HSE_IsReady>:
{
 80050d2:	b480      	push	{r7}
 80050d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80050d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050e4:	d101      	bne.n	80050ea <LL_RCC_HSE_IsReady+0x18>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <LL_RCC_HSE_IsReady+0x1a>
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <LL_RCC_HSI_Enable>:
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80050f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005106:	6013      	str	r3, [r2, #0]
}
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <LL_RCC_HSI_Disable>:
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800511e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005122:	6013      	str	r3, [r2, #0]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr

0800512c <LL_RCC_HSI_IsReady>:
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513e:	d101      	bne.n	8005144 <LL_RCC_HSI_IsReady+0x18>
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <LL_RCC_HSI_IsReady+0x1a>
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr

0800514e <LL_RCC_HSI_SetCalibTrimming>:
{
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	061b      	lsls	r3, r3, #24
 8005164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005168:	4313      	orrs	r3, r2
 800516a:	604b      	str	r3, [r1, #4]
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr

08005176 <LL_RCC_LSE_IsReady>:
{
 8005176:	b480      	push	{r7}
 8005178:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b02      	cmp	r3, #2
 8005188:	d101      	bne.n	800518e <LL_RCC_LSE_IsReady+0x18>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <LL_RCC_LSE_IsReady+0x1a>
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <LL_RCC_LSI_Enable>:
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800519c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr

080051b8 <LL_RCC_LSI_Disable>:
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80051bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80051d0:	bf00      	nop
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr

080051d8 <LL_RCC_LSI_IsReady>:
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d101      	bne.n	80051f0 <LL_RCC_LSI_IsReady+0x18>
 80051ec:	2301      	movs	r3, #1
 80051ee:	e000      	b.n	80051f2 <LL_RCC_LSI_IsReady+0x1a>
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <LL_RCC_MSI_Enable>:
{
 80051fa:	b480      	push	{r7}
 80051fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80051fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005208:	f043 0301 	orr.w	r3, r3, #1
 800520c:	6013      	str	r3, [r2, #0]
}
 800520e:	bf00      	nop
 8005210:	46bd      	mov	sp, r7
 8005212:	bc80      	pop	{r7}
 8005214:	4770      	bx	lr

08005216 <LL_RCC_MSI_Disable>:
{
 8005216:	b480      	push	{r7}
 8005218:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800521a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	6013      	str	r3, [r2, #0]
}
 800522a:	bf00      	nop
 800522c:	46bd      	mov	sp, r7
 800522e:	bc80      	pop	{r7}
 8005230:	4770      	bx	lr

08005232 <LL_RCC_MSI_IsReady>:
{
 8005232:	b480      	push	{r7}
 8005234:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b02      	cmp	r3, #2
 8005242:	d101      	bne.n	8005248 <LL_RCC_MSI_IsReady+0x16>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <LL_RCC_MSI_IsReady+0x18>
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr

08005252 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005252:	b480      	push	{r7}
 8005254:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b08      	cmp	r3, #8
 8005262:	d101      	bne.n	8005268 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr

08005272 <LL_RCC_MSI_GetRange>:
{
 8005272:	b480      	push	{r7}
 8005274:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005280:	4618      	mov	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800528c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005294:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005298:	4618      	mov	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80052a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052ba:	4313      	orrs	r3, r2
 80052bc:	604b      	str	r3, [r1, #4]
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr

080052c8 <LL_RCC_SetSysClkSource>:
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80052d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f023 0203 	bic.w	r2, r3, #3
 80052da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	608b      	str	r3, [r1, #8]
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr

080052ee <LL_RCC_GetSysClkSource>:
{
 80052ee:	b480      	push	{r7}
 80052f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80052f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 030c 	and.w	r3, r3, #12
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <LL_RCC_SetAHBPrescaler>:
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800530c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4313      	orrs	r3, r2
 800531e:	608b      	str	r3, [r1, #8]
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr

0800532a <LL_RCC_SetAHB3Prescaler>:
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005336:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800533a:	f023 020f 	bic.w	r2, r3, #15
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	091b      	lsrs	r3, r3, #4
 8005342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr

08005356 <LL_RCC_SetAPB1Prescaler>:
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800535e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4313      	orrs	r3, r2
 8005370:	608b      	str	r3, [r1, #8]
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <LL_RCC_SetAPB2Prescaler>:
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800538e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4313      	orrs	r3, r2
 8005396:	608b      	str	r3, [r1, #8]
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <LL_RCC_GetAHBPrescaler>:
{
 80053a2:	b480      	push	{r7}
 80053a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80053a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr

080053b8 <LL_RCC_GetAHB3Prescaler>:
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80053bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <LL_RCC_GetAPB1Prescaler>:
{
 80053d2:	b480      	push	{r7}
 80053d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80053d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr

080053e8 <LL_RCC_GetAPB2Prescaler>:
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80053ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr

080053fe <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80053fe:	b480      	push	{r7}
 8005400:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800540c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005410:	6013      	str	r3, [r2, #0]
}
 8005412:	bf00      	nop
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr

0800541a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800541a:	b480      	push	{r7}
 800541c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800541e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005428:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800542c:	6013      	str	r3, [r2, #0]
}
 800542e:	bf00      	nop
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr

08005436 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005436:	b480      	push	{r7}
 8005438:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800543a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005444:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005448:	d101      	bne.n	800544e <LL_RCC_PLL_IsReady+0x18>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <LL_RCC_PLL_IsReady+0x1a>
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr

08005458 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800545c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	0a1b      	lsrs	r3, r3, #8
 8005464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005468:	4618      	mov	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr

08005470 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800547e:	4618      	mov	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005486:	b480      	push	{r7}
 8005488:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800548a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005494:	4618      	mov	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80054a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f003 0303 	and.w	r3, r3, #3
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr

080054b2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80054b2:	b480      	push	{r7}
 80054b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80054b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c4:	d101      	bne.n	80054ca <LL_RCC_IsActiveFlag_HPRE+0x18>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80054d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80054e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e8:	d101      	bne.n	80054ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80054fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800550a:	d101      	bne.n	8005510 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800551a:	b480      	push	{r7}
 800551c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800551e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005528:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800552c:	d101      	bne.n	8005532 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e38b      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800554e:	f7ff fece 	bl	80052ee <LL_RCC_GetSysClkSource>
 8005552:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005554:	f7ff ffa2 	bl	800549c <LL_RCC_PLL_GetMainSource>
 8005558:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 80c9 	beq.w	80056fa <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <HAL_RCC_OscConfig+0x3e>
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	2b0c      	cmp	r3, #12
 8005572:	d17b      	bne.n	800566c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d178      	bne.n	800566c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800557a:	f7ff fe5a 	bl	8005232 <LL_RCC_MSI_IsReady>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d005      	beq.n	8005590 <HAL_RCC_OscConfig+0x54>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e36a      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <HAL_RCC_OscConfig+0x72>
 80055a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ac:	e006      	b.n	80055bc <HAL_RCC_OscConfig+0x80>
 80055ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b6:	091b      	lsrs	r3, r3, #4
 80055b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055bc:	4293      	cmp	r3, r2
 80055be:	d222      	bcs.n	8005606 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 fd51 	bl	800606c <RCC_SetFlashLatencyFromMSIRange>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e348      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055de:	f043 0308 	orr.w	r3, r3, #8
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055f6:	4313      	orrs	r3, r2
 80055f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff fe4e 	bl	80052a0 <LL_RCC_MSI_SetCalibTrimming>
 8005604:	e021      	b.n	800564a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005610:	f043 0308 	orr.w	r3, r3, #8
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005628:	4313      	orrs	r3, r2
 800562a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fe35 	bl	80052a0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fd16 	bl	800606c <RCC_SetFlashLatencyFromMSIRange>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e30d      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800564a:	f000 fcd7 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 800564e:	4603      	mov	r3, r0
 8005650:	4aa1      	ldr	r2, [pc, #644]	; (80058d8 <HAL_RCC_OscConfig+0x39c>)
 8005652:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005654:	4ba1      	ldr	r3, [pc, #644]	; (80058dc <HAL_RCC_OscConfig+0x3a0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f7fc fb37 	bl	8001ccc <HAL_InitTick>
 800565e:	4603      	mov	r3, r0
 8005660:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005662:	7cfb      	ldrb	r3, [r7, #19]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d047      	beq.n	80056f8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005668:	7cfb      	ldrb	r3, [r7, #19]
 800566a:	e2fc      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d02c      	beq.n	80056ce <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005674:	f7ff fdc1 	bl	80051fa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005678:	f7fc fb32 	bl	8001ce0 <HAL_GetTick>
 800567c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005680:	f7fc fb2e 	bl	8001ce0 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e2e9      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005692:	f7ff fdce 	bl	8005232 <LL_RCC_MSI_IsReady>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f1      	beq.n	8005680 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800569c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056a6:	f043 0308 	orr.w	r3, r3, #8
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056be:	4313      	orrs	r3, r2
 80056c0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff fdea 	bl	80052a0 <LL_RCC_MSI_SetCalibTrimming>
 80056cc:	e015      	b.n	80056fa <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056ce:	f7ff fda2 	bl	8005216 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056d2:	f7fc fb05 	bl	8001ce0 <HAL_GetTick>
 80056d6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80056d8:	e008      	b.n	80056ec <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056da:	f7fc fb01 	bl	8001ce0 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e2bc      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80056ec:	f7ff fda1 	bl	8005232 <LL_RCC_MSI_IsReady>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f1      	bne.n	80056da <HAL_RCC_OscConfig+0x19e>
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056f8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d05f      	beq.n	80057c6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d005      	beq.n	8005718 <HAL_RCC_OscConfig+0x1dc>
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	2b0c      	cmp	r3, #12
 8005710:	d10d      	bne.n	800572e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d10a      	bne.n	800572e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005718:	f7ff fcdb 	bl	80050d2 <LL_RCC_HSE_IsReady>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d050      	beq.n	80057c4 <HAL_RCC_OscConfig+0x288>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d14c      	bne.n	80057c4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e29b      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800572e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005740:	4313      	orrs	r3, r2
 8005742:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800574c:	d102      	bne.n	8005754 <HAL_RCC_OscConfig+0x218>
 800574e:	f7ff fca4 	bl	800509a <LL_RCC_HSE_Enable>
 8005752:	e00d      	b.n	8005770 <HAL_RCC_OscConfig+0x234>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800575c:	d104      	bne.n	8005768 <HAL_RCC_OscConfig+0x22c>
 800575e:	f7ff fc6f 	bl	8005040 <LL_RCC_HSE_EnableTcxo>
 8005762:	f7ff fc9a 	bl	800509a <LL_RCC_HSE_Enable>
 8005766:	e003      	b.n	8005770 <HAL_RCC_OscConfig+0x234>
 8005768:	f7ff fca5 	bl	80050b6 <LL_RCC_HSE_Disable>
 800576c:	f7ff fc76 	bl	800505c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d012      	beq.n	800579e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fc fab2 	bl	8001ce0 <HAL_GetTick>
 800577c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005780:	f7fc faae 	bl	8001ce0 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b64      	cmp	r3, #100	; 0x64
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e269      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005792:	f7ff fc9e 	bl	80050d2 <LL_RCC_HSE_IsReady>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f1      	beq.n	8005780 <HAL_RCC_OscConfig+0x244>
 800579c:	e013      	b.n	80057c6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fc fa9f 	bl	8001ce0 <HAL_GetTick>
 80057a2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057a6:	f7fc fa9b 	bl	8001ce0 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b64      	cmp	r3, #100	; 0x64
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e256      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80057b8:	f7ff fc8b 	bl	80050d2 <LL_RCC_HSE_IsReady>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1f1      	bne.n	80057a6 <HAL_RCC_OscConfig+0x26a>
 80057c2:	e000      	b.n	80057c6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d04b      	beq.n	800586a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d005      	beq.n	80057e4 <HAL_RCC_OscConfig+0x2a8>
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	2b0c      	cmp	r3, #12
 80057dc:	d113      	bne.n	8005806 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d110      	bne.n	8005806 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057e4:	f7ff fca2 	bl	800512c <LL_RCC_HSI_IsReady>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d005      	beq.n	80057fa <HAL_RCC_OscConfig+0x2be>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e235      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fca5 	bl	800514e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005804:	e031      	b.n	800586a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d019      	beq.n	8005842 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800580e:	f7ff fc71 	bl	80050f4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005812:	f7fc fa65 	bl	8001ce0 <HAL_GetTick>
 8005816:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800581a:	f7fc fa61 	bl	8001ce0 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e21c      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 800582c:	f7ff fc7e 	bl	800512c <LL_RCC_HSI_IsReady>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0f1      	beq.n	800581a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff fc87 	bl	800514e <LL_RCC_HSI_SetCalibTrimming>
 8005840:	e013      	b.n	800586a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005842:	f7ff fc65 	bl	8005110 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005846:	f7fc fa4b 	bl	8001ce0 <HAL_GetTick>
 800584a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800584e:	f7fc fa47 	bl	8001ce0 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e202      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005860:	f7ff fc64 	bl	800512c <LL_RCC_HSI_IsReady>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f1      	bne.n	800584e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d06f      	beq.n	8005956 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d057      	beq.n	800592e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800587e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005886:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	429a      	cmp	r2, r3
 8005894:	d036      	beq.n	8005904 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d006      	beq.n	80058ae <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e1db      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d018      	beq.n	80058ea <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80058b8:	f7ff fc7e 	bl	80051b8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058bc:	f7fc fa10 	bl	8001ce0 <HAL_GetTick>
 80058c0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80058c2:	e00d      	b.n	80058e0 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058c4:	f7fc fa0c 	bl	8001ce0 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b11      	cmp	r3, #17
 80058d0:	d906      	bls.n	80058e0 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e1c7      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
 80058d6:	bf00      	nop
 80058d8:	20000000 	.word	0x20000000
 80058dc:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80058e0:	f7ff fc7a 	bl	80051d8 <LL_RCC_LSI_IsReady>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1ec      	bne.n	80058c4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80058ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058f2:	f023 0210 	bic.w	r2, r3, #16
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005904:	f7ff fc48 	bl	8005198 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005908:	f7fc f9ea 	bl	8001ce0 <HAL_GetTick>
 800590c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005910:	f7fc f9e6 	bl	8001ce0 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b11      	cmp	r3, #17
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e1a1      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005922:	f7ff fc59 	bl	80051d8 <LL_RCC_LSI_IsReady>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0f1      	beq.n	8005910 <HAL_RCC_OscConfig+0x3d4>
 800592c:	e013      	b.n	8005956 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800592e:	f7ff fc43 	bl	80051b8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005932:	f7fc f9d5 	bl	8001ce0 <HAL_GetTick>
 8005936:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800593a:	f7fc f9d1 	bl	8001ce0 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b11      	cmp	r3, #17
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e18c      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 800594c:	f7ff fc44 	bl	80051d8 <LL_RCC_LSI_IsReady>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f1      	bne.n	800593a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 80d8 	beq.w	8005b14 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005964:	f7ff fb5a 	bl	800501c <LL_PWR_IsEnabledBkUpAccess>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d113      	bne.n	8005996 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800596e:	f7ff fa99 	bl	8004ea4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005972:	f7fc f9b5 	bl	8001ce0 <HAL_GetTick>
 8005976:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597a:	f7fc f9b1 	bl	8001ce0 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e16c      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800598c:	f7ff fb46 	bl	800501c <LL_PWR_IsEnabledBkUpAccess>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f1      	beq.n	800597a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d07b      	beq.n	8005a96 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	2b85      	cmp	r3, #133	; 0x85
 80059a4:	d003      	beq.n	80059ae <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	2b05      	cmp	r3, #5
 80059ac:	d109      	bne.n	80059c2 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80059ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ba:	f043 0304 	orr.w	r3, r3, #4
 80059be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c2:	f7fc f98d 	bl	8001ce0 <HAL_GetTick>
 80059c6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80059c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80059dc:	e00a      	b.n	80059f4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059de:	f7fc f97f 	bl	8001ce0 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e138      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80059f4:	f7ff fbbf 	bl	8005176 <LL_RCC_LSE_IsReady>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0ef      	beq.n	80059de <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	2b81      	cmp	r3, #129	; 0x81
 8005a04:	d003      	beq.n	8005a0e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	2b85      	cmp	r3, #133	; 0x85
 8005a0c:	d121      	bne.n	8005a52 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0e:	f7fc f967 	bl	8001ce0 <HAL_GetTick>
 8005a12:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005a28:	e00a      	b.n	8005a40 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a2a:	f7fc f959 	bl	8001ce0 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e112      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0ec      	beq.n	8005a2a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005a50:	e060      	b.n	8005b14 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a52:	f7fc f945 	bl	8001ce0 <HAL_GetTick>
 8005a56:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a6c:	e00a      	b.n	8005a84 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a6e:	f7fc f937 	bl	8001ce0 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e0f0      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1ec      	bne.n	8005a6e <HAL_RCC_OscConfig+0x532>
 8005a94:	e03e      	b.n	8005b14 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a96:	f7fc f923 	bl	8001ce0 <HAL_GetTick>
 8005a9a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ab0:	e00a      	b.n	8005ac8 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab2:	f7fc f915 	bl	8001ce0 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e0ce      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1ec      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fc f902 	bl	8001ce0 <HAL_GetTick>
 8005adc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aea:	f023 0301 	bic.w	r3, r3, #1
 8005aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005af2:	e00a      	b.n	8005b0a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005af4:	f7fc f8f4 	bl	8001ce0 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e0ad      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005b0a:	f7ff fb34 	bl	8005176 <LL_RCC_LSE_IsReady>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1ef      	bne.n	8005af4 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80a3 	beq.w	8005c64 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	d076      	beq.n	8005c12 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d14b      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2c:	f7ff fc75 	bl	800541a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b30:	f7fc f8d6 	bl	8001ce0 <HAL_GetTick>
 8005b34:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b38:	f7fc f8d2 	bl	8001ce0 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b0a      	cmp	r3, #10
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e08d      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005b4a:	f7ff fc74 	bl	8005436 <LL_RCC_PLL_IsReady>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1f1      	bne.n	8005b38 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	4b45      	ldr	r3, [pc, #276]	; (8005c70 <HAL_RCC_OscConfig+0x734>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b66:	4311      	orrs	r1, r2
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b6c:	0212      	lsls	r2, r2, #8
 8005b6e:	4311      	orrs	r1, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b74:	4311      	orrs	r1, r2
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b7a:	4311      	orrs	r1, r2
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005b80:	430a      	orrs	r2, r1
 8005b82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b8a:	f7ff fc38 	bl	80053fe <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b9c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9e:	f7fc f89f 	bl	8001ce0 <HAL_GetTick>
 8005ba2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba6:	f7fc f89b 	bl	8001ce0 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b0a      	cmp	r3, #10
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e056      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005bb8:	f7ff fc3d 	bl	8005436 <LL_RCC_PLL_IsReady>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f1      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x66a>
 8005bc2:	e04f      	b.n	8005c64 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc4:	f7ff fc29 	bl	800541a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005be2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bea:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fc f878 	bl	8001ce0 <HAL_GetTick>
 8005bf0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf4:	f7fc f874 	bl	8001ce0 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b0a      	cmp	r3, #10
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e02f      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005c06:	f7ff fc16 	bl	8005436 <LL_RCC_PLL_IsReady>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1f1      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x6b8>
 8005c10:	e028      	b.n	8005c64 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e023      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f003 0203 	and.w	r2, r3, #3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d115      	bne.n	8005c60 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d10e      	bne.n	8005c60 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d106      	bne.n	8005c60 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d001      	beq.n	8005c64 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3720      	adds	r7, #32
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	11c1808c 	.word	0x11c1808c

08005c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e10f      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c88:	4b89      	ldr	r3, [pc, #548]	; (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d91b      	bls.n	8005cce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c96:	4b86      	ldr	r3, [pc, #536]	; (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f023 0207 	bic.w	r2, r3, #7
 8005c9e:	4984      	ldr	r1, [pc, #528]	; (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca6:	f7fc f81b 	bl	8001ce0 <HAL_GetTick>
 8005caa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005cae:	f7fc f817 	bl	8001ce0 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e0f3      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc0:	4b7b      	ldr	r3, [pc, #492]	; (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d1ef      	bne.n	8005cae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d016      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff fb10 	bl	8005304 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ce4:	f7fb fffc 	bl	8001ce0 <HAL_GetTick>
 8005ce8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005cec:	f7fb fff8 	bl	8001ce0 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e0d4      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005cfe:	f7ff fbd8 	bl	80054b2 <LL_RCC_IsActiveFlag_HPRE>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0f1      	beq.n	8005cec <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d016      	beq.n	8005d42 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fb06 	bl	800532a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d1e:	f7fb ffdf 	bl	8001ce0 <HAL_GetTick>
 8005d22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d26:	f7fb ffdb 	bl	8001ce0 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e0b7      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005d38:	f7ff fbcc 	bl	80054d4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f1      	beq.n	8005d26 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d016      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff faff 	bl	8005356 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d58:	f7fb ffc2 	bl	8001ce0 <HAL_GetTick>
 8005d5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d60:	f7fb ffbe 	bl	8001ce0 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e09a      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005d72:	f7ff fbc1 	bl	80054f8 <LL_RCC_IsActiveFlag_PPRE1>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0f1      	beq.n	8005d60 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0308 	and.w	r3, r3, #8
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d017      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff faf4 	bl	800537c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d94:	f7fb ffa4 	bl	8001ce0 <HAL_GetTick>
 8005d98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d9c:	f7fb ffa0 	bl	8001ce0 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e07c      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005dae:	f7ff fbb4 	bl	800551a <LL_RCC_IsActiveFlag_PPRE2>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0f1      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d043      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d106      	bne.n	8005dda <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005dcc:	f7ff f981 	bl	80050d2 <LL_RCC_HSE_IsReady>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d11e      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e066      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d106      	bne.n	8005df0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005de2:	f7ff fb28 	bl	8005436 <LL_RCC_PLL_IsReady>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d113      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e05b      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d106      	bne.n	8005e06 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005df8:	f7ff fa1b 	bl	8005232 <LL_RCC_MSI_IsReady>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d108      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e050      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005e06:	f7ff f991 	bl	800512c <LL_RCC_HSI_IsReady>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e049      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff fa55 	bl	80052c8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e1e:	f7fb ff5f 	bl	8001ce0 <HAL_GetTick>
 8005e22:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e24:	e00a      	b.n	8005e3c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e26:	f7fb ff5b 	bl	8001ce0 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e035      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e3c:	f7ff fa57 	bl	80052ee <LL_RCC_GetSysClkSource>
 8005e40:	4602      	mov	r2, r0
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d1ec      	bne.n	8005e26 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e4c:	4b18      	ldr	r3, [pc, #96]	; (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d21b      	bcs.n	8005e92 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e5a:	4b15      	ldr	r3, [pc, #84]	; (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f023 0207 	bic.w	r2, r3, #7
 8005e62:	4913      	ldr	r1, [pc, #76]	; (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e6a:	f7fb ff39 	bl	8001ce0 <HAL_GetTick>
 8005e6e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e72:	f7fb ff35 	bl	8001ce0 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e011      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e84:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d1ef      	bne.n	8005e72 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005e92:	f000 f8b3 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 8005e96:	4603      	mov	r3, r0
 8005e98:	4a06      	ldr	r2, [pc, #24]	; (8005eb4 <HAL_RCC_ClockConfig+0x240>)
 8005e9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fb ff13 	bl	8001ccc <HAL_InitTick>
 8005ea6:	4603      	mov	r3, r0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	58004000 	.word	0x58004000
 8005eb4:	20000000 	.word	0x20000000
 8005eb8:	20000004 	.word	0x20000004

08005ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ebc:	b590      	push	{r4, r7, lr}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eca:	f7ff fa10 	bl	80052ee <LL_RCC_GetSysClkSource>
 8005ece:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ed0:	f7ff fae4 	bl	800549c <LL_RCC_PLL_GetMainSource>
 8005ed4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x2c>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b0c      	cmp	r3, #12
 8005ee0:	d139      	bne.n	8005f56 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d136      	bne.n	8005f56 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005ee8:	f7ff f9b3 	bl	8005252 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d115      	bne.n	8005f1e <HAL_RCC_GetSysClockFreq+0x62>
 8005ef2:	f7ff f9ae 	bl	8005252 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d106      	bne.n	8005f0a <HAL_RCC_GetSysClockFreq+0x4e>
 8005efc:	f7ff f9b9 	bl	8005272 <LL_RCC_MSI_GetRange>
 8005f00:	4603      	mov	r3, r0
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	e005      	b.n	8005f16 <HAL_RCC_GetSysClockFreq+0x5a>
 8005f0a:	f7ff f9bd 	bl	8005288 <LL_RCC_MSI_GetRangeAfterStandby>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	0a1b      	lsrs	r3, r3, #8
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	4a36      	ldr	r2, [pc, #216]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1c:	e014      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0x8c>
 8005f1e:	f7ff f998 	bl	8005252 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d106      	bne.n	8005f36 <HAL_RCC_GetSysClockFreq+0x7a>
 8005f28:	f7ff f9a3 	bl	8005272 <LL_RCC_MSI_GetRange>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	091b      	lsrs	r3, r3, #4
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	e005      	b.n	8005f42 <HAL_RCC_GetSysClockFreq+0x86>
 8005f36:	f7ff f9a7 	bl	8005288 <LL_RCC_MSI_GetRangeAfterStandby>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	091b      	lsrs	r3, r3, #4
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	4a2b      	ldr	r2, [pc, #172]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f48:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d115      	bne.n	8005f7c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f54:	e012      	b.n	8005f7c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d102      	bne.n	8005f62 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f5c:	4b25      	ldr	r3, [pc, #148]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	e00c      	b.n	8005f7c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d109      	bne.n	8005f7c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005f68:	f7ff f886 	bl	8005078 <LL_RCC_HSE_IsEnabledDiv2>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d102      	bne.n	8005f78 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005f72:	4b20      	ldr	r3, [pc, #128]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	e001      	b.n	8005f7c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005f78:	4b1f      	ldr	r3, [pc, #124]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005f7a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f7c:	f7ff f9b7 	bl	80052ee <LL_RCC_GetSysClkSource>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b0c      	cmp	r3, #12
 8005f84:	d12f      	bne.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005f86:	f7ff fa89 	bl	800549c <LL_RCC_PLL_GetMainSource>
 8005f8a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d003      	beq.n	8005f9a <HAL_RCC_GetSysClockFreq+0xde>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d003      	beq.n	8005fa0 <HAL_RCC_GetSysClockFreq+0xe4>
 8005f98:	e00d      	b.n	8005fb6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005f9a:	4b16      	ldr	r3, [pc, #88]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005f9c:	60fb      	str	r3, [r7, #12]
        break;
 8005f9e:	e00d      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005fa0:	f7ff f86a 	bl	8005078 <LL_RCC_HSE_IsEnabledDiv2>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d102      	bne.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005faa:	4b12      	ldr	r3, [pc, #72]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005fac:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005fae:	e005      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005fb0:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005fb2:	60fb      	str	r3, [r7, #12]
        break;
 8005fb4:	e002      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	60fb      	str	r3, [r7, #12]
        break;
 8005fba:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005fbc:	f7ff fa4c 	bl	8005458 <LL_RCC_PLL_GetN>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	fb03 f402 	mul.w	r4, r3, r2
 8005fc8:	f7ff fa5d 	bl	8005486 <LL_RCC_PLL_GetDivider>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	091b      	lsrs	r3, r3, #4
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	fbb4 f4f3 	udiv	r4, r4, r3
 8005fd6:	f7ff fa4b 	bl	8005470 <LL_RCC_PLL_GetR>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	0f5b      	lsrs	r3, r3, #29
 8005fde:	3301      	adds	r3, #1
 8005fe0:	fbb4 f3f3 	udiv	r3, r4, r3
 8005fe4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005fe6:	697b      	ldr	r3, [r7, #20]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd90      	pop	{r4, r7, pc}
 8005ff0:	0801d7c8 	.word	0x0801d7c8
 8005ff4:	00f42400 	.word	0x00f42400
 8005ff8:	01e84800 	.word	0x01e84800

08005ffc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ffc:	b598      	push	{r3, r4, r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006000:	f7ff ff5c 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 8006004:	4604      	mov	r4, r0
 8006006:	f7ff f9cc 	bl	80053a2 <LL_RCC_GetAHBPrescaler>
 800600a:	4603      	mov	r3, r0
 800600c:	091b      	lsrs	r3, r3, #4
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	4a03      	ldr	r2, [pc, #12]	; (8006020 <HAL_RCC_GetHCLKFreq+0x24>)
 8006014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006018:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800601c:	4618      	mov	r0, r3
 800601e:	bd98      	pop	{r3, r4, r7, pc}
 8006020:	0801d768 	.word	0x0801d768

08006024 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006024:	b598      	push	{r3, r4, r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006028:	f7ff ffe8 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 800602c:	4604      	mov	r4, r0
 800602e:	f7ff f9d0 	bl	80053d2 <LL_RCC_GetAPB1Prescaler>
 8006032:	4603      	mov	r3, r0
 8006034:	0a1b      	lsrs	r3, r3, #8
 8006036:	4a03      	ldr	r2, [pc, #12]	; (8006044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800603c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006040:	4618      	mov	r0, r3
 8006042:	bd98      	pop	{r3, r4, r7, pc}
 8006044:	0801d7a8 	.word	0x0801d7a8

08006048 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006048:	b598      	push	{r3, r4, r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800604c:	f7ff ffd6 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 8006050:	4604      	mov	r4, r0
 8006052:	f7ff f9c9 	bl	80053e8 <LL_RCC_GetAPB2Prescaler>
 8006056:	4603      	mov	r3, r0
 8006058:	0adb      	lsrs	r3, r3, #11
 800605a:	4a03      	ldr	r2, [pc, #12]	; (8006068 <HAL_RCC_GetPCLK2Freq+0x20>)
 800605c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006060:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006064:	4618      	mov	r0, r3
 8006066:	bd98      	pop	{r3, r4, r7, pc}
 8006068:	0801d7a8 	.word	0x0801d7a8

0800606c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800606c:	b590      	push	{r4, r7, lr}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	091b      	lsrs	r3, r3, #4
 8006078:	f003 030f 	and.w	r3, r3, #15
 800607c:	4a10      	ldr	r2, [pc, #64]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800607e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006082:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006084:	f7ff f998 	bl	80053b8 <LL_RCC_GetAHB3Prescaler>
 8006088:	4603      	mov	r3, r0
 800608a:	091b      	lsrs	r3, r3, #4
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	4a0c      	ldr	r2, [pc, #48]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	fbb2 f3f3 	udiv	r3, r2, r3
 800609c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	4a09      	ldr	r2, [pc, #36]	; (80060c8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80060a2:	fba2 2303 	umull	r2, r3, r2, r3
 80060a6:	0c9c      	lsrs	r4, r3, #18
 80060a8:	f7fe ff3e 	bl	8004f28 <HAL_PWREx_GetVoltageRange>
 80060ac:	4603      	mov	r3, r0
 80060ae:	4619      	mov	r1, r3
 80060b0:	4620      	mov	r0, r4
 80060b2:	f000 f80b 	bl	80060cc <RCC_SetFlashLatency>
 80060b6:	4603      	mov	r3, r0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd90      	pop	{r4, r7, pc}
 80060c0:	0801d7c8 	.word	0x0801d7c8
 80060c4:	0801d768 	.word	0x0801d768
 80060c8:	431bde83 	.word	0x431bde83

080060cc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08e      	sub	sp, #56	; 0x38
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80060d6:	4a3a      	ldr	r2, [pc, #232]	; (80061c0 <RCC_SetFlashLatency+0xf4>)
 80060d8:	f107 0320 	add.w	r3, r7, #32
 80060dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060e0:	6018      	str	r0, [r3, #0]
 80060e2:	3304      	adds	r3, #4
 80060e4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80060e6:	4a37      	ldr	r2, [pc, #220]	; (80061c4 <RCC_SetFlashLatency+0xf8>)
 80060e8:	f107 0318 	add.w	r3, r7, #24
 80060ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060f0:	6018      	str	r0, [r3, #0]
 80060f2:	3304      	adds	r3, #4
 80060f4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80060f6:	4a34      	ldr	r2, [pc, #208]	; (80061c8 <RCC_SetFlashLatency+0xfc>)
 80060f8:	f107 030c 	add.w	r3, r7, #12
 80060fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80060fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006102:	2300      	movs	r3, #0
 8006104:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800610c:	d11b      	bne.n	8006146 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800610e:	2300      	movs	r3, #0
 8006110:	633b      	str	r3, [r7, #48]	; 0x30
 8006112:	e014      	b.n	800613e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	3338      	adds	r3, #56	; 0x38
 800611a:	443b      	add	r3, r7
 800611c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006120:	461a      	mov	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4293      	cmp	r3, r2
 8006126:	d807      	bhi.n	8006138 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	3338      	adds	r3, #56	; 0x38
 800612e:	443b      	add	r3, r7
 8006130:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006134:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006136:	e021      	b.n	800617c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613a:	3301      	adds	r3, #1
 800613c:	633b      	str	r3, [r7, #48]	; 0x30
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	2b02      	cmp	r3, #2
 8006142:	d9e7      	bls.n	8006114 <RCC_SetFlashLatency+0x48>
 8006144:	e01a      	b.n	800617c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006146:	2300      	movs	r3, #0
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800614a:	e014      	b.n	8006176 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	3338      	adds	r3, #56	; 0x38
 8006152:	443b      	add	r3, r7
 8006154:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006158:	461a      	mov	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4293      	cmp	r3, r2
 800615e:	d807      	bhi.n	8006170 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	3338      	adds	r3, #56	; 0x38
 8006166:	443b      	add	r3, r7
 8006168:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800616c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800616e:	e005      	b.n	800617c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006172:	3301      	adds	r3, #1
 8006174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006178:	2b02      	cmp	r3, #2
 800617a:	d9e7      	bls.n	800614c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800617c:	4b13      	ldr	r3, [pc, #76]	; (80061cc <RCC_SetFlashLatency+0x100>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f023 0207 	bic.w	r2, r3, #7
 8006184:	4911      	ldr	r1, [pc, #68]	; (80061cc <RCC_SetFlashLatency+0x100>)
 8006186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006188:	4313      	orrs	r3, r2
 800618a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800618c:	f7fb fda8 	bl	8001ce0 <HAL_GetTick>
 8006190:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006192:	e008      	b.n	80061a6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006194:	f7fb fda4 	bl	8001ce0 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e007      	b.n	80061b6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80061a6:	4b09      	ldr	r3, [pc, #36]	; (80061cc <RCC_SetFlashLatency+0x100>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d1ef      	bne.n	8006194 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3738      	adds	r7, #56	; 0x38
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	0801ce34 	.word	0x0801ce34
 80061c4:	0801ce3c 	.word	0x0801ce3c
 80061c8:	0801ce44 	.word	0x0801ce44
 80061cc:	58004000 	.word	0x58004000

080061d0 <LL_RCC_LSE_IsReady>:
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80061d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d101      	bne.n	80061e8 <LL_RCC_LSE_IsReady+0x18>
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <LL_RCC_LSE_IsReady+0x1a>
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr

080061f2 <LL_RCC_SetUSARTClockSource>:
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80061fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	43db      	mvns	r3, r3
 8006208:	401a      	ands	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	b29b      	uxth	r3, r3
 800620e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006212:	4313      	orrs	r3, r2
 8006214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr

08006222 <LL_RCC_SetI2SClockSource>:
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800622a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800622e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006232:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006236:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr

0800624c <LL_RCC_SetLPUARTClockSource>:
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	bc80      	pop	{r7}
 8006274:	4770      	bx	lr

08006276 <LL_RCC_SetI2CClockSource>:
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800627e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006282:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	091b      	lsrs	r3, r3, #4
 800628a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800628e:	43db      	mvns	r3, r3
 8006290:	401a      	ands	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800629a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr

080062ae <LL_RCC_SetLPTIMClockSource>:
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80062b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	0c1b      	lsrs	r3, r3, #16
 80062c2:	041b      	lsls	r3, r3, #16
 80062c4:	43db      	mvns	r3, r3
 80062c6:	401a      	ands	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	041b      	lsls	r3, r3, #16
 80062cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	bc80      	pop	{r7}
 80062de:	4770      	bx	lr

080062e0 <LL_RCC_SetRNGClockSource>:
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80062e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80062f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	bc80      	pop	{r7}
 8006308:	4770      	bx	lr

0800630a <LL_RCC_SetADCClockSource>:
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800631e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4313      	orrs	r3, r2
 8006326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr

08006334 <LL_RCC_SetRTCClockSource>:
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800633c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006348:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4313      	orrs	r3, r2
 8006350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr

0800635e <LL_RCC_GetRTCClockSource>:
{
 800635e:	b480      	push	{r7}
 8006360:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800636e:	4618      	mov	r0, r3
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr

08006376 <LL_RCC_ForceBackupDomainReset>:
{
 8006376:	b480      	push	{r7}
 8006378:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800637a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800638a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800638e:	bf00      	nop
 8006390:	46bd      	mov	sp, r7
 8006392:	bc80      	pop	{r7}
 8006394:	4770      	bx	lr

08006396 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006396:	b480      	push	{r7}
 8006398:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800639a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80063ae:	bf00      	nop
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr
	...

080063b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80063c4:	2300      	movs	r3, #0
 80063c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80063c8:	2300      	movs	r3, #0
 80063ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d058      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80063d8:	f7fe fd64 	bl	8004ea4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063dc:	f7fb fc80 	bl	8001ce0 <HAL_GetTick>
 80063e0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80063e2:	e009      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063e4:	f7fb fc7c 	bl	8001ce0 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d902      	bls.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	74fb      	strb	r3, [r7, #19]
        break;
 80063f6:	e006      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80063f8:	4b7b      	ldr	r3, [pc, #492]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006404:	d1ee      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006406:	7cfb      	ldrb	r3, [r7, #19]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d13c      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800640c:	f7ff ffa7 	bl	800635e <LL_RCC_GetRTCClockSource>
 8006410:	4602      	mov	r2, r0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006416:	429a      	cmp	r2, r3
 8006418:	d00f      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800641a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800641e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006426:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006428:	f7ff ffa5 	bl	8006376 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800642c:	f7ff ffb3 	bl	8006396 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d014      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006444:	f7fb fc4c 	bl	8001ce0 <HAL_GetTick>
 8006448:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800644a:	e00b      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800644c:	f7fb fc48 	bl	8001ce0 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	f241 3288 	movw	r2, #5000	; 0x1388
 800645a:	4293      	cmp	r3, r2
 800645c:	d902      	bls.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	74fb      	strb	r3, [r7, #19]
            break;
 8006462:	e004      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006464:	f7ff feb4 	bl	80061d0 <LL_RCC_LSE_IsReady>
 8006468:	4603      	mov	r3, r0
 800646a:	2b01      	cmp	r3, #1
 800646c:	d1ee      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800646e:	7cfb      	ldrb	r3, [r7, #19]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d105      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff ff5b 	bl	8006334 <LL_RCC_SetRTCClockSource>
 800647e:	e004      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006480:	7cfb      	ldrb	r3, [r7, #19]
 8006482:	74bb      	strb	r3, [r7, #18]
 8006484:	e001      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006486:	7cfb      	ldrb	r3, [r7, #19]
 8006488:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d004      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fea9 	bl	80061f2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d004      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff fe9e 	bl	80061f2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d004      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7ff fec0 	bl	800624c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d004      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff fee6 	bl	80062ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d004      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff fedb 	bl	80062ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006500:	2b00      	cmp	r3, #0
 8006502:	d004      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff fed0 	bl	80062ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff fea9 	bl	8006276 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652c:	2b00      	cmp	r3, #0
 800652e:	d004      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff fe9e 	bl	8006276 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006542:	2b00      	cmp	r3, #0
 8006544:	d004      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff fe93 	bl	8006276 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b00      	cmp	r3, #0
 800655a:	d011      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	4618      	mov	r0, r3
 8006562:	f7ff fe5e 	bl	8006222 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800656e:	d107      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800657a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800657e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d010      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff fea5 	bl	80062e0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	2b00      	cmp	r3, #0
 800659c:	d107      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800659e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065ac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d011      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff fea3 	bl	800630a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065cc:	d107      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065dc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80065de:	7cbb      	ldrb	r3, [r7, #18]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	58000400 	.word	0x58000400

080065ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d068      	beq.n	80066d0 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fb f8b8 	bl	8001788 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006620:	4b2e      	ldr	r3, [pc, #184]	; (80066dc <HAL_RTC_Init+0xf0>)
 8006622:	22ca      	movs	r2, #202	; 0xca
 8006624:	625a      	str	r2, [r3, #36]	; 0x24
 8006626:	4b2d      	ldr	r3, [pc, #180]	; (80066dc <HAL_RTC_Init+0xf0>)
 8006628:	2253      	movs	r2, #83	; 0x53
 800662a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fa0f 	bl	8006a50 <RTC_EnterInitMode>
 8006632:	4603      	mov	r3, r0
 8006634:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d13f      	bne.n	80066bc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800663c:	4b27      	ldr	r3, [pc, #156]	; (80066dc <HAL_RTC_Init+0xf0>)
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	4a26      	ldr	r2, [pc, #152]	; (80066dc <HAL_RTC_Init+0xf0>)
 8006642:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800664c:	4b23      	ldr	r3, [pc, #140]	; (80066dc <HAL_RTC_Init+0xf0>)
 800664e:	699a      	ldr	r2, [r3, #24]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6859      	ldr	r1, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	4319      	orrs	r1, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	430b      	orrs	r3, r1
 8006660:	491e      	ldr	r1, [pc, #120]	; (80066dc <HAL_RTC_Init+0xf0>)
 8006662:	4313      	orrs	r3, r2
 8006664:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	491a      	ldr	r1, [pc, #104]	; (80066dc <HAL_RTC_Init+0xf0>)
 8006672:	4313      	orrs	r3, r2
 8006674:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006676:	4b19      	ldr	r3, [pc, #100]	; (80066dc <HAL_RTC_Init+0xf0>)
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	430b      	orrs	r3, r1
 8006688:	4914      	ldr	r1, [pc, #80]	; (80066dc <HAL_RTC_Init+0xf0>)
 800668a:	4313      	orrs	r3, r2
 800668c:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fa12 	bl	8006ab8 <RTC_ExitInitMode>
 8006694:	4603      	mov	r3, r0
 8006696:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10e      	bne.n	80066bc <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800669e:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <HAL_RTC_Init+0xf0>)
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a19      	ldr	r1, [r3, #32]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	4319      	orrs	r1, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	430b      	orrs	r3, r1
 80066b6:	4909      	ldr	r1, [pc, #36]	; (80066dc <HAL_RTC_Init+0xf0>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066bc:	4b07      	ldr	r3, [pc, #28]	; (80066dc <HAL_RTC_Init+0xf0>)
 80066be:	22ff      	movs	r2, #255	; 0xff
 80066c0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d103      	bne.n	80066d0 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40002800 	.word	0x40002800

080066e0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80066e0:	b590      	push	{r4, r7, lr}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d101      	bne.n	80066fe <HAL_RTC_SetAlarm_IT+0x1e>
 80066fa:	2302      	movs	r3, #2
 80066fc:	e0f3      	b.n	80068e6 <HAL_RTC_SetAlarm_IT+0x206>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2202      	movs	r2, #2
 800670a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800670e:	4b78      	ldr	r3, [pc, #480]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006716:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800671e:	d06a      	beq.n	80067f6 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d13a      	bne.n	800679c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006726:	4b72      	ldr	r3, [pc, #456]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2200      	movs	r2, #0
 8006736:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	4618      	mov	r0, r3
 8006746:	f000 f9f5 	bl	8006b34 <RTC_ByteToBcd2>
 800674a:	4603      	mov	r3, r0
 800674c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	785b      	ldrb	r3, [r3, #1]
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f9ee 	bl	8006b34 <RTC_ByteToBcd2>
 8006758:	4603      	mov	r3, r0
 800675a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800675c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	789b      	ldrb	r3, [r3, #2]
 8006762:	4618      	mov	r0, r3
 8006764:	f000 f9e6 	bl	8006b34 <RTC_ByteToBcd2>
 8006768:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800676a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	78db      	ldrb	r3, [r3, #3]
 8006772:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006774:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800677e:	4618      	mov	r0, r3
 8006780:	f000 f9d8 	bl	8006b34 <RTC_ByteToBcd2>
 8006784:	4603      	mov	r3, r0
 8006786:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006788:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006790:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	e02c      	b.n	80067f6 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80067a4:	d00d      	beq.n	80067c2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067ae:	d008      	beq.n	80067c2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80067b0:	4b4f      	ldr	r3, [pc, #316]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d102      	bne.n	80067c2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2200      	movs	r2, #0
 80067c0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	785b      	ldrb	r3, [r3, #1]
 80067cc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067ce:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067d4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	78db      	ldrb	r3, [r3, #3]
 80067da:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067dc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067e4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067e6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067ec:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067f6:	4b3e      	ldr	r3, [pc, #248]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80067f8:	22ca      	movs	r2, #202	; 0xca
 80067fa:	625a      	str	r2, [r3, #36]	; 0x24
 80067fc:	4b3c      	ldr	r3, [pc, #240]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80067fe:	2253      	movs	r2, #83	; 0x53
 8006800:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800680a:	d12c      	bne.n	8006866 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800680c:	4b38      	ldr	r3, [pc, #224]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	4a37      	ldr	r2, [pc, #220]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006812:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006816:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006818:	4b35      	ldr	r3, [pc, #212]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800681a:	2201      	movs	r2, #1
 800681c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006824:	d107      	bne.n	8006836 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	699a      	ldr	r2, [r3, #24]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	4930      	ldr	r1, [pc, #192]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006830:	4313      	orrs	r3, r2
 8006832:	644b      	str	r3, [r1, #68]	; 0x44
 8006834:	e006      	b.n	8006844 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006836:	4a2e      	ldr	r2, [pc, #184]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800683c:	4a2c      	ldr	r2, [pc, #176]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006844:	4a2a      	ldr	r2, [pc, #168]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	f043 0201 	orr.w	r2, r3, #1
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006858:	4b25      	ldr	r3, [pc, #148]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	4a24      	ldr	r2, [pc, #144]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800685e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006862:	6193      	str	r3, [r2, #24]
 8006864:	e02b      	b.n	80068be <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006866:	4b22      	ldr	r3, [pc, #136]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	4a21      	ldr	r2, [pc, #132]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800686c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006870:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006872:	4b1f      	ldr	r3, [pc, #124]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006874:	2202      	movs	r2, #2
 8006876:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687e:	d107      	bne.n	8006890 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	699a      	ldr	r2, [r3, #24]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	4919      	ldr	r1, [pc, #100]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800688a:	4313      	orrs	r3, r2
 800688c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800688e:	e006      	b.n	800689e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006890:	4a17      	ldr	r2, [pc, #92]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006896:	4a16      	ldr	r2, [pc, #88]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800689e:	4a14      	ldr	r2, [pc, #80]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068aa:	f043 0202 	orr.w	r2, r3, #2
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80068b2:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	4a0e      	ldr	r2, [pc, #56]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80068b8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80068bc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80068be:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <HAL_RTC_SetAlarm_IT+0x214>)
 80068c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068c4:	4a0b      	ldr	r2, [pc, #44]	; (80068f4 <HAL_RTC_SetAlarm_IT+0x214>)
 80068c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068ce:	4b08      	ldr	r3, [pc, #32]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80068d0:	22ff      	movs	r2, #255	; 0xff
 80068d2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd90      	pop	{r4, r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40002800 	.word	0x40002800
 80068f4:	58000800 	.word	0x58000800

080068f8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_RTC_DeactivateAlarm+0x18>
 800690c:	2302      	movs	r3, #2
 800690e:	e048      	b.n	80069a2 <HAL_RTC_DeactivateAlarm+0xaa>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006920:	4b22      	ldr	r3, [pc, #136]	; (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006922:	22ca      	movs	r2, #202	; 0xca
 8006924:	625a      	str	r2, [r3, #36]	; 0x24
 8006926:	4b21      	ldr	r3, [pc, #132]	; (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006928:	2253      	movs	r2, #83	; 0x53
 800692a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006932:	d115      	bne.n	8006960 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006934:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	4a1c      	ldr	r2, [pc, #112]	; (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800693a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800693e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006940:	4b1a      	ldr	r3, [pc, #104]	; (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006944:	4a19      	ldr	r2, [pc, #100]	; (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006946:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800694a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006950:	f023 0201 	bic.w	r2, r3, #1
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006958:	4b14      	ldr	r3, [pc, #80]	; (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800695a:	2201      	movs	r2, #1
 800695c:	65da      	str	r2, [r3, #92]	; 0x5c
 800695e:	e014      	b.n	800698a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006960:	4b12      	ldr	r3, [pc, #72]	; (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	4a11      	ldr	r2, [pc, #68]	; (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006966:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800696a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800696c:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800696e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006970:	4a0e      	ldr	r2, [pc, #56]	; (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006972:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006976:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697c:	f023 0202 	bic.w	r2, r3, #2
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006984:	4b09      	ldr	r3, [pc, #36]	; (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006986:	2202      	movs	r2, #2
 8006988:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800698a:	4b08      	ldr	r3, [pc, #32]	; (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800698c:	22ff      	movs	r2, #255	; 0xff
 800698e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr
 80069ac:	40002800 	.word	0x40002800

080069b0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80069b8:	4b11      	ldr	r3, [pc, #68]	; (8006a00 <HAL_RTC_AlarmIRQHandler+0x50>)
 80069ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c0:	4013      	ands	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d005      	beq.n	80069da <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80069ce:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <HAL_RTC_AlarmIRQHandler+0x50>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fb fbae 	bl	8002136 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80069e4:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <HAL_RTC_AlarmIRQHandler+0x50>)
 80069e6:	2202      	movs	r2, #2
 80069e8:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f94a 	bl	8006c84 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80069f8:	bf00      	nop
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40002800 	.word	0x40002800

08006a04 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <HAL_RTC_WaitForSynchro+0x48>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	4a0e      	ldr	r2, [pc, #56]	; (8006a4c <HAL_RTC_WaitForSynchro+0x48>)
 8006a12:	f023 0320 	bic.w	r3, r3, #32
 8006a16:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006a18:	f7fb f962 	bl	8001ce0 <HAL_GetTick>
 8006a1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006a1e:	e009      	b.n	8006a34 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a20:	f7fb f95e 	bl	8001ce0 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a2e:	d901      	bls.n	8006a34 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e006      	b.n	8006a42 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006a34:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <HAL_RTC_WaitForSynchro+0x48>)
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0ef      	beq.n	8006a20 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	40002800 	.word	0x40002800

08006a50 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006a5c:	4b15      	ldr	r3, [pc, #84]	; (8006ab4 <RTC_EnterInitMode+0x64>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d120      	bne.n	8006aaa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006a68:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <RTC_EnterInitMode+0x64>)
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	4a11      	ldr	r2, [pc, #68]	; (8006ab4 <RTC_EnterInitMode+0x64>)
 8006a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a72:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006a74:	f7fb f934 	bl	8001ce0 <HAL_GetTick>
 8006a78:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a7a:	e00d      	b.n	8006a98 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a7c:	f7fb f930 	bl	8001ce0 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a8a:	d905      	bls.n	8006a98 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2203      	movs	r2, #3
 8006a94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a98:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <RTC_EnterInitMode+0x64>)
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <RTC_EnterInitMode+0x5a>
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d1e8      	bne.n	8006a7c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	40002800 	.word	0x40002800

08006ab8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006ac4:	4b1a      	ldr	r3, [pc, #104]	; (8006b30 <RTC_ExitInitMode+0x78>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	4a19      	ldr	r2, [pc, #100]	; (8006b30 <RTC_ExitInitMode+0x78>)
 8006aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ace:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006ad0:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <RTC_ExitInitMode+0x78>)
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10c      	bne.n	8006af6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff ff91 	bl	8006a04 <HAL_RTC_WaitForSynchro>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01e      	beq.n	8006b26 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2203      	movs	r2, #3
 8006aec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	73fb      	strb	r3, [r7, #15]
 8006af4:	e017      	b.n	8006b26 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006af6:	4b0e      	ldr	r3, [pc, #56]	; (8006b30 <RTC_ExitInitMode+0x78>)
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	4a0d      	ldr	r2, [pc, #52]	; (8006b30 <RTC_ExitInitMode+0x78>)
 8006afc:	f023 0320 	bic.w	r3, r3, #32
 8006b00:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff ff7e 	bl	8006a04 <HAL_RTC_WaitForSynchro>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d005      	beq.n	8006b1a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2203      	movs	r2, #3
 8006b12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b1a:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <RTC_ExitInitMode+0x78>)
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	4a04      	ldr	r2, [pc, #16]	; (8006b30 <RTC_ExitInitMode+0x78>)
 8006b20:	f043 0320 	orr.w	r3, r3, #32
 8006b24:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	40002800 	.word	0x40002800

08006b34 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006b46:	e005      	b.n	8006b54 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006b4e:	7afb      	ldrb	r3, [r7, #11]
 8006b50:	3b0a      	subs	r3, #10
 8006b52:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006b54:	7afb      	ldrb	r3, [r7, #11]
 8006b56:	2b09      	cmp	r3, #9
 8006b58:	d8f6      	bhi.n	8006b48 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	7afb      	ldrb	r3, [r7, #11]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	b2db      	uxtb	r3, r3
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr
	...

08006b74 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_RTCEx_EnableBypassShadow+0x16>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e01f      	b.n	8006bca <HAL_RTCEx_EnableBypassShadow+0x56>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2202      	movs	r2, #2
 8006b96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b9a:	4b0e      	ldr	r3, [pc, #56]	; (8006bd4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006b9c:	22ca      	movs	r2, #202	; 0xca
 8006b9e:	625a      	str	r2, [r3, #36]	; 0x24
 8006ba0:	4b0c      	ldr	r3, [pc, #48]	; (8006bd4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006ba2:	2253      	movs	r2, #83	; 0x53
 8006ba4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ba6:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	4a0a      	ldr	r2, [pc, #40]	; (8006bd4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006bac:	f043 0320 	orr.w	r3, r3, #32
 8006bb0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bb2:	4b08      	ldr	r3, [pc, #32]	; (8006bd4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006bb4:	22ff      	movs	r2, #255	; 0xff
 8006bb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bc80      	pop	{r7}
 8006bd2:	4770      	bx	lr
 8006bd4:	40002800 	.word	0x40002800

08006bd8 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_RTCEx_SetSSRU_IT+0x16>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e027      	b.n	8006c3e <HAL_RTCEx_SetSSRU_IT+0x66>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bfe:	4b12      	ldr	r3, [pc, #72]	; (8006c48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c00:	22ca      	movs	r2, #202	; 0xca
 8006c02:	625a      	str	r2, [r3, #36]	; 0x24
 8006c04:	4b10      	ldr	r3, [pc, #64]	; (8006c48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c06:	2253      	movs	r2, #83	; 0x53
 8006c08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006c0a:	4b0f      	ldr	r3, [pc, #60]	; (8006c48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	4a0e      	ldr	r2, [pc, #56]	; (8006c48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c14:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006c16:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c1c:	4a0b      	ldr	r2, [pc, #44]	; (8006c4c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c26:	4b08      	ldr	r3, [pc, #32]	; (8006c48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c28:	22ff      	movs	r2, #255	; 0xff
 8006c2a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr
 8006c48:	40002800 	.word	0x40002800
 8006c4c:	58000800 	.word	0x58000800

08006c50 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006c58:	4b09      	ldr	r3, [pc, #36]	; (8006c80 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006c64:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006c66:	2240      	movs	r2, #64	; 0x40
 8006c68:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fb fa6d 	bl	800214a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006c78:	bf00      	nop
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	40002800 	.word	0x40002800

08006c84 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bc80      	pop	{r7}
 8006c94:	4770      	bx	lr
	...

08006c98 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006ca4:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <HAL_RTCEx_BKUPWrite+0x2c>)
 8006ca6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4413      	add	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	601a      	str	r2, [r3, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bc80      	pop	{r7}
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	4000b100 	.word	0x4000b100

08006cc8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006cd2:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <HAL_RTCEx_BKUPRead+0x28>)
 8006cd4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4413      	add	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	4000b100 	.word	0x4000b100

08006cf4 <LL_PWR_SetRadioBusyTrigger>:
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006cfc:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d04:	4904      	ldr	r1, [pc, #16]	; (8006d18 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	608b      	str	r3, [r1, #8]
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	58000400 	.word	0x58000400

08006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d20:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d26:	4a04      	ldr	r2, [pc, #16]	; (8006d38 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006d30:	bf00      	nop
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr
 8006d38:	58000400 	.word	0x58000400

08006d3c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d40:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d46:	4a04      	ldr	r2, [pc, #16]	; (8006d58 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006d48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006d50:	bf00      	nop
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr
 8006d58:	58000400 	.word	0x58000400

08006d5c <LL_PWR_ClearFlag_RFBUSY>:
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006d60:	4b03      	ldr	r3, [pc, #12]	; (8006d70 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d66:	619a      	str	r2, [r3, #24]
}
 8006d68:	bf00      	nop
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bc80      	pop	{r7}
 8006d6e:	4770      	bx	lr
 8006d70:	58000400 	.word	0x58000400

08006d74 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006d78:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d101      	bne.n	8006d88 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006d84:	2301      	movs	r3, #1
 8006d86:	e000      	b.n	8006d8a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bc80      	pop	{r7}
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	58000400 	.word	0x58000400

08006d98 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006d9c:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d101      	bne.n	8006dac <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e000      	b.n	8006dae <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	58000400 	.word	0x58000400

08006dbc <LL_RCC_RF_DisableReset>:
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006dd4:	bf00      	nop
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <LL_RCC_IsRFUnderReset>:
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006df0:	d101      	bne.n	8006df6 <LL_RCC_IsRFUnderReset+0x1a>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e000      	b.n	8006df8 <LL_RCC_IsRFUnderReset+0x1c>
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr

08006e00 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006e08:	4b06      	ldr	r3, [pc, #24]	; (8006e24 <LL_EXTI_EnableIT_32_63+0x24>)
 8006e0a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006e0e:	4905      	ldr	r1, [pc, #20]	; (8006e24 <LL_EXTI_EnableIT_32_63+0x24>)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	58000800 	.word	0x58000800

08006e28 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d103      	bne.n	8006e3e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	73fb      	strb	r3, [r7, #15]
    return status;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	e04b      	b.n	8006ed6 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	799b      	ldrb	r3, [r3, #6]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d105      	bne.n	8006e58 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fa fda0 	bl	8001998 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8006e5e:	f7ff ffad 	bl	8006dbc <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006e62:	4b1f      	ldr	r3, [pc, #124]	; (8006ee0 <HAL_SUBGHZ_Init+0xb8>)
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4613      	mov	r3, r2
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	0cdb      	lsrs	r3, r3, #19
 8006e70:	2264      	movs	r2, #100	; 0x64
 8006e72:	fb02 f303 	mul.w	r3, r2, r3
 8006e76:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d105      	bne.n	8006e8a <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	609a      	str	r2, [r3, #8]
      break;
 8006e88:	e007      	b.n	8006e9a <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006e90:	f7ff ffa4 	bl	8006ddc <LL_RCC_IsRFUnderReset>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1ee      	bne.n	8006e78 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8006e9a:	f7ff ff3f 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006e9e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006ea2:	f7ff ffad 	bl	8006e00 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006ea6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006eaa:	f7ff ff23 	bl	8006cf4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006eae:	f7ff ff55 	bl	8006d5c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 faa5 	bl	800740c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	719a      	strb	r2, [r3, #6]

  return status;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20000000 	.word	0x20000000

08006ee4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	607a      	str	r2, [r7, #4]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	817b      	strh	r3, [r7, #10]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	799b      	ldrb	r3, [r3, #6]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d14a      	bne.n	8006f98 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	795b      	ldrb	r3, [r3, #5]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d101      	bne.n	8006f0e <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	e045      	b.n	8006f9a <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2201      	movs	r2, #1
 8006f12:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2202      	movs	r2, #2
 8006f18:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 fb44 	bl	80075a8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f20:	f7ff ff0c 	bl	8006d3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006f24:	210d      	movs	r1, #13
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 fa90 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006f2c:	897b      	ldrh	r3, [r7, #10]
 8006f2e:	0a1b      	lsrs	r3, r3, #8
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	4619      	mov	r1, r3
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 fa88 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006f3c:	897b      	ldrh	r3, [r7, #10]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	4619      	mov	r1, r3
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 fa82 	bl	800744c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f48:	2300      	movs	r3, #0
 8006f4a:	82bb      	strh	r3, [r7, #20]
 8006f4c:	e00a      	b.n	8006f64 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006f4e:	8abb      	ldrh	r3, [r7, #20]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	4413      	add	r3, r2
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	4619      	mov	r1, r3
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 fa77 	bl	800744c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006f5e:	8abb      	ldrh	r3, [r7, #20]
 8006f60:	3301      	adds	r3, #1
 8006f62:	82bb      	strh	r3, [r7, #20]
 8006f64:	8aba      	ldrh	r2, [r7, #20]
 8006f66:	893b      	ldrh	r3, [r7, #8]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d3f0      	bcc.n	8006f4e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f6c:	f7ff fed6 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 fb3d 	bl	80075f0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	75fb      	strb	r3, [r7, #23]
 8006f82:	e001      	b.n	8006f88 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	715a      	strb	r2, [r3, #5]

    return status;
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	e000      	b.n	8006f9a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006f98:	2302      	movs	r3, #2
  }
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b088      	sub	sp, #32
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	461a      	mov	r2, r3
 8006fae:	460b      	mov	r3, r1
 8006fb0:	817b      	strh	r3, [r7, #10]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	799b      	ldrb	r3, [r3, #6]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d14a      	bne.n	800705a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	795b      	ldrb	r3, [r3, #5]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e045      	b.n	800705c <HAL_SUBGHZ_ReadRegisters+0xba>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 fae6 	bl	80075a8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006fdc:	f7ff feae 	bl	8006d3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006fe0:	211d      	movs	r1, #29
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 fa32 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006fe8:	897b      	ldrh	r3, [r7, #10]
 8006fea:	0a1b      	lsrs	r3, r3, #8
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 fa2a 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006ff8:	897b      	ldrh	r3, [r7, #10]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fa24 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007004:	2100      	movs	r1, #0
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fa20 	bl	800744c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800700c:	2300      	movs	r3, #0
 800700e:	82fb      	strh	r3, [r7, #22]
 8007010:	e009      	b.n	8007026 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007012:	69b9      	ldr	r1, [r7, #24]
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 fa6f 	bl	80074f8 <SUBGHZSPI_Receive>
      pData++;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	3301      	adds	r3, #1
 800701e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007020:	8afb      	ldrh	r3, [r7, #22]
 8007022:	3301      	adds	r3, #1
 8007024:	82fb      	strh	r3, [r7, #22]
 8007026:	8afa      	ldrh	r2, [r7, #22]
 8007028:	893b      	ldrh	r3, [r7, #8]
 800702a:	429a      	cmp	r2, r3
 800702c:	d3f1      	bcc.n	8007012 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800702e:	f7ff fe75 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fadc 	bl	80075f0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	77fb      	strb	r3, [r7, #31]
 8007044:	e001      	b.n	800704a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	715a      	strb	r2, [r3, #5]

    return status;
 8007056:	7ffb      	ldrb	r3, [r7, #31]
 8007058:	e000      	b.n	800705c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800705a:	2302      	movs	r3, #2
  }
}
 800705c:	4618      	mov	r0, r3
 800705e:	3720      	adds	r7, #32
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	607a      	str	r2, [r7, #4]
 800706e:	461a      	mov	r2, r3
 8007070:	460b      	mov	r3, r1
 8007072:	72fb      	strb	r3, [r7, #11]
 8007074:	4613      	mov	r3, r2
 8007076:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	799b      	ldrb	r3, [r3, #6]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b01      	cmp	r3, #1
 8007080:	d14a      	bne.n	8007118 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	795b      	ldrb	r3, [r3, #5]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800708a:	2302      	movs	r3, #2
 800708c:	e045      	b.n	800711a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 fa87 	bl	80075a8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800709a:	7afb      	ldrb	r3, [r7, #11]
 800709c:	2b84      	cmp	r3, #132	; 0x84
 800709e:	d002      	beq.n	80070a6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80070a0:	7afb      	ldrb	r3, [r7, #11]
 80070a2:	2b94      	cmp	r3, #148	; 0x94
 80070a4:	d103      	bne.n	80070ae <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	711a      	strb	r2, [r3, #4]
 80070ac:	e002      	b.n	80070b4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80070b4:	f7ff fe42 	bl	8006d3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80070b8:	7afb      	ldrb	r3, [r7, #11]
 80070ba:	4619      	mov	r1, r3
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 f9c5 	bl	800744c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80070c2:	2300      	movs	r3, #0
 80070c4:	82bb      	strh	r3, [r7, #20]
 80070c6:	e00a      	b.n	80070de <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80070c8:	8abb      	ldrh	r3, [r7, #20]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	4413      	add	r3, r2
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	4619      	mov	r1, r3
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 f9ba 	bl	800744c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070d8:	8abb      	ldrh	r3, [r7, #20]
 80070da:	3301      	adds	r3, #1
 80070dc:	82bb      	strh	r3, [r7, #20]
 80070de:	8aba      	ldrh	r2, [r7, #20]
 80070e0:	893b      	ldrh	r3, [r7, #8]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d3f0      	bcc.n	80070c8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80070e6:	f7ff fe19 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80070ea:	7afb      	ldrb	r3, [r7, #11]
 80070ec:	2b84      	cmp	r3, #132	; 0x84
 80070ee:	d002      	beq.n	80070f6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 fa7d 	bl	80075f0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	75fb      	strb	r3, [r7, #23]
 8007102:	e001      	b.n	8007108 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	715a      	strb	r2, [r3, #5]

    return status;
 8007114:	7dfb      	ldrb	r3, [r7, #23]
 8007116:	e000      	b.n	800711a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007118:	2302      	movs	r3, #2
  }
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b088      	sub	sp, #32
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	461a      	mov	r2, r3
 800712e:	460b      	mov	r3, r1
 8007130:	72fb      	strb	r3, [r7, #11]
 8007132:	4613      	mov	r3, r2
 8007134:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	799b      	ldrb	r3, [r3, #6]
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b01      	cmp	r3, #1
 8007142:	d13d      	bne.n	80071c0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	795b      	ldrb	r3, [r3, #5]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800714c:	2302      	movs	r3, #2
 800714e:	e038      	b.n	80071c2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2201      	movs	r2, #1
 8007154:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 fa26 	bl	80075a8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800715c:	f7ff fdee 	bl	8006d3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007160:	7afb      	ldrb	r3, [r7, #11]
 8007162:	4619      	mov	r1, r3
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f971 	bl	800744c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800716a:	2100      	movs	r1, #0
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f96d 	bl	800744c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007172:	2300      	movs	r3, #0
 8007174:	82fb      	strh	r3, [r7, #22]
 8007176:	e009      	b.n	800718c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007178:	69b9      	ldr	r1, [r7, #24]
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 f9bc 	bl	80074f8 <SUBGHZSPI_Receive>
      pData++;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	3301      	adds	r3, #1
 8007184:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007186:	8afb      	ldrh	r3, [r7, #22]
 8007188:	3301      	adds	r3, #1
 800718a:	82fb      	strh	r3, [r7, #22]
 800718c:	8afa      	ldrh	r2, [r7, #22]
 800718e:	893b      	ldrh	r3, [r7, #8]
 8007190:	429a      	cmp	r2, r3
 8007192:	d3f1      	bcc.n	8007178 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007194:	f7ff fdc2 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fa29 	bl	80075f0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	77fb      	strb	r3, [r7, #31]
 80071aa:	e001      	b.n	80071b0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	715a      	strb	r2, [r3, #5]

    return status;
 80071bc:	7ffb      	ldrb	r3, [r7, #31]
 80071be:	e000      	b.n	80071c2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80071c0:	2302      	movs	r3, #2
  }
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3720      	adds	r7, #32
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b086      	sub	sp, #24
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	461a      	mov	r2, r3
 80071d6:	460b      	mov	r3, r1
 80071d8:	72fb      	strb	r3, [r7, #11]
 80071da:	4613      	mov	r3, r2
 80071dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	799b      	ldrb	r3, [r3, #6]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d13e      	bne.n	8007266 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	795b      	ldrb	r3, [r3, #5]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e039      	b.n	8007268 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2201      	movs	r2, #1
 80071f8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 f9d4 	bl	80075a8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007200:	f7ff fd9c 	bl	8006d3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007204:	210e      	movs	r1, #14
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 f920 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800720c:	7afb      	ldrb	r3, [r7, #11]
 800720e:	4619      	mov	r1, r3
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 f91b 	bl	800744c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007216:	2300      	movs	r3, #0
 8007218:	82bb      	strh	r3, [r7, #20]
 800721a:	e00a      	b.n	8007232 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800721c:	8abb      	ldrh	r3, [r7, #20]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	4413      	add	r3, r2
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	4619      	mov	r1, r3
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 f910 	bl	800744c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800722c:	8abb      	ldrh	r3, [r7, #20]
 800722e:	3301      	adds	r3, #1
 8007230:	82bb      	strh	r3, [r7, #20]
 8007232:	8aba      	ldrh	r2, [r7, #20]
 8007234:	893b      	ldrh	r3, [r7, #8]
 8007236:	429a      	cmp	r2, r3
 8007238:	d3f0      	bcc.n	800721c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800723a:	f7ff fd6f 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 f9d6 	bl	80075f0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	75fb      	strb	r3, [r7, #23]
 8007250:	e001      	b.n	8007256 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2201      	movs	r2, #1
 800725a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	715a      	strb	r2, [r3, #5]

    return status;
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	e000      	b.n	8007268 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007266:	2302      	movs	r3, #2
  }
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	607a      	str	r2, [r7, #4]
 800727a:	461a      	mov	r2, r3
 800727c:	460b      	mov	r3, r1
 800727e:	72fb      	strb	r3, [r7, #11]
 8007280:	4613      	mov	r3, r2
 8007282:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	799b      	ldrb	r3, [r3, #6]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b01      	cmp	r3, #1
 8007290:	d141      	bne.n	8007316 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	795b      	ldrb	r3, [r3, #5]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800729a:	2302      	movs	r3, #2
 800729c:	e03c      	b.n	8007318 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f97f 	bl	80075a8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80072aa:	f7ff fd47 	bl	8006d3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80072ae:	211e      	movs	r1, #30
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 f8cb 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80072b6:	7afb      	ldrb	r3, [r7, #11]
 80072b8:	4619      	mov	r1, r3
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 f8c6 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80072c0:	2100      	movs	r1, #0
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f8c2 	bl	800744c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80072c8:	2300      	movs	r3, #0
 80072ca:	82fb      	strh	r3, [r7, #22]
 80072cc:	e009      	b.n	80072e2 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80072ce:	69b9      	ldr	r1, [r7, #24]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f911 	bl	80074f8 <SUBGHZSPI_Receive>
      pData++;
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	3301      	adds	r3, #1
 80072da:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80072dc:	8afb      	ldrh	r3, [r7, #22]
 80072de:	3301      	adds	r3, #1
 80072e0:	82fb      	strh	r3, [r7, #22]
 80072e2:	8afa      	ldrh	r2, [r7, #22]
 80072e4:	893b      	ldrh	r3, [r7, #8]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d3f1      	bcc.n	80072ce <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80072ea:	f7ff fd17 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 f97e 	bl	80075f0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	77fb      	strb	r3, [r7, #31]
 8007300:	e001      	b.n	8007306 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	715a      	strb	r2, [r3, #5]

    return status;
 8007312:	7ffb      	ldrb	r3, [r7, #31]
 8007314:	e000      	b.n	8007318 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007316:	2302      	movs	r3, #2
  }
}
 8007318:	4618      	mov	r0, r3
 800731a:	3720      	adds	r7, #32
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007328:	2300      	movs	r3, #0
 800732a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800732c:	f107 020c 	add.w	r2, r7, #12
 8007330:	2302      	movs	r3, #2
 8007332:	2112      	movs	r1, #18
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff fef4 	bl	8007122 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800733a:	7b3b      	ldrb	r3, [r7, #12]
 800733c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800733e:	89fb      	ldrh	r3, [r7, #14]
 8007340:	021b      	lsls	r3, r3, #8
 8007342:	b21a      	sxth	r2, r3
 8007344:	7b7b      	ldrb	r3, [r7, #13]
 8007346:	b21b      	sxth	r3, r3
 8007348:	4313      	orrs	r3, r2
 800734a:	b21b      	sxth	r3, r3
 800734c:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800734e:	89fb      	ldrh	r3, [r7, #14]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f013 ff75 	bl	801b248 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800735e:	89fb      	ldrh	r3, [r7, #14]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f013 ff7b 	bl	801b264 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800736e:	89fb      	ldrh	r3, [r7, #14]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f013 ffcb 	bl	801b314 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800737e:	89fb      	ldrh	r3, [r7, #14]
 8007380:	f003 0308 	and.w	r3, r3, #8
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <HAL_SUBGHZ_IRQHandler+0x6e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f013 ffd1 	bl	801b330 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800738e:	89fb      	ldrh	r3, [r7, #14]
 8007390:	f003 0310 	and.w	r3, r3, #16
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f013 ffd7 	bl	801b34c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800739e:	89fb      	ldrh	r3, [r7, #14]
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <HAL_SUBGHZ_IRQHandler+0x8e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f013 ffa5 	bl	801b2f8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80073ae:	89fb      	ldrh	r3, [r7, #14]
 80073b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <HAL_SUBGHZ_IRQHandler+0x9e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f013 ff61 	bl	801b280 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80073be:	89fb      	ldrh	r3, [r7, #14]
 80073c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00d      	beq.n	80073e4 <HAL_SUBGHZ_IRQHandler+0xc4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80073c8:	89fb      	ldrh	r3, [r7, #14]
 80073ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d004      	beq.n	80073dc <HAL_SUBGHZ_IRQHandler+0xbc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80073d2:	2101      	movs	r1, #1
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f013 ff61 	bl	801b29c <HAL_SUBGHZ_CADStatusCallback>
 80073da:	e003      	b.n	80073e4 <HAL_SUBGHZ_IRQHandler+0xc4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80073dc:	2100      	movs	r1, #0
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f013 ff5c 	bl	801b29c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80073e4:	89fb      	ldrh	r3, [r7, #14]
 80073e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <HAL_SUBGHZ_IRQHandler+0xd4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f013 ff72 	bl	801b2d8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80073f4:	f107 020c 	add.w	r2, r7, #12
 80073f8:	2302      	movs	r3, #2
 80073fa:	2102      	movs	r1, #2
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff fe31 	bl	8007064 <HAL_SUBGHZ_ExecSetCmd>
}
 8007402:	bf00      	nop
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007414:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <SUBGHZSPI_Init+0x3c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a0b      	ldr	r2, [pc, #44]	; (8007448 <SUBGHZSPI_Init+0x3c>)
 800741a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800741e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007420:	4a09      	ldr	r2, [pc, #36]	; (8007448 <SUBGHZSPI_Init+0x3c>)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007428:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800742a:	4b07      	ldr	r3, [pc, #28]	; (8007448 <SUBGHZSPI_Init+0x3c>)
 800742c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007430:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007432:	4b05      	ldr	r3, [pc, #20]	; (8007448 <SUBGHZSPI_Init+0x3c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a04      	ldr	r2, [pc, #16]	; (8007448 <SUBGHZSPI_Init+0x3c>)
 8007438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800743c:	6013      	str	r3, [r2, #0]
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	bc80      	pop	{r7}
 8007446:	4770      	bx	lr
 8007448:	58010000 	.word	0x58010000

0800744c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800745c:	4b23      	ldr	r3, [pc, #140]	; (80074ec <SUBGHZSPI_Transmit+0xa0>)
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	4613      	mov	r3, r2
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	1a9b      	subs	r3, r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	0cdb      	lsrs	r3, r3, #19
 800746a:	2264      	movs	r2, #100	; 0x64
 800746c:	fb02 f303 	mul.w	r3, r2, r3
 8007470:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d105      	bne.n	8007484 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	609a      	str	r2, [r3, #8]
      break;
 8007482:	e008      	b.n	8007496 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3b01      	subs	r3, #1
 8007488:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800748a:	4b19      	ldr	r3, [pc, #100]	; (80074f0 <SUBGHZSPI_Transmit+0xa4>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b02      	cmp	r3, #2
 8007494:	d1ed      	bne.n	8007472 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007496:	4b17      	ldr	r3, [pc, #92]	; (80074f4 <SUBGHZSPI_Transmit+0xa8>)
 8007498:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	78fa      	ldrb	r2, [r7, #3]
 800749e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80074a0:	4b12      	ldr	r3, [pc, #72]	; (80074ec <SUBGHZSPI_Transmit+0xa0>)
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	4613      	mov	r3, r2
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	1a9b      	subs	r3, r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	0cdb      	lsrs	r3, r3, #19
 80074ae:	2264      	movs	r2, #100	; 0x64
 80074b0:	fb02 f303 	mul.w	r3, r2, r3
 80074b4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	609a      	str	r2, [r3, #8]
      break;
 80074c6:	e008      	b.n	80074da <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80074ce:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <SUBGHZSPI_Transmit+0xa4>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d1ed      	bne.n	80074b6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80074da:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <SUBGHZSPI_Transmit+0xa4>)
 80074dc:	68db      	ldr	r3, [r3, #12]

  return status;
 80074de:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	371c      	adds	r7, #28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	20000000 	.word	0x20000000
 80074f0:	58010000 	.word	0x58010000
 80074f4:	5801000c 	.word	0x5801000c

080074f8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007506:	4b25      	ldr	r3, [pc, #148]	; (800759c <SUBGHZSPI_Receive+0xa4>)
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	4613      	mov	r3, r2
 800750c:	00db      	lsls	r3, r3, #3
 800750e:	1a9b      	subs	r3, r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	0cdb      	lsrs	r3, r3, #19
 8007514:	2264      	movs	r2, #100	; 0x64
 8007516:	fb02 f303 	mul.w	r3, r2, r3
 800751a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d105      	bne.n	800752e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	609a      	str	r2, [r3, #8]
      break;
 800752c:	e008      	b.n	8007540 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3b01      	subs	r3, #1
 8007532:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007534:	4b1a      	ldr	r3, [pc, #104]	; (80075a0 <SUBGHZSPI_Receive+0xa8>)
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b02      	cmp	r3, #2
 800753e:	d1ed      	bne.n	800751c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007540:	4b18      	ldr	r3, [pc, #96]	; (80075a4 <SUBGHZSPI_Receive+0xac>)
 8007542:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	22ff      	movs	r2, #255	; 0xff
 8007548:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800754a:	4b14      	ldr	r3, [pc, #80]	; (800759c <SUBGHZSPI_Receive+0xa4>)
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	4613      	mov	r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	1a9b      	subs	r3, r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	0cdb      	lsrs	r3, r3, #19
 8007558:	2264      	movs	r2, #100	; 0x64
 800755a:	fb02 f303 	mul.w	r3, r2, r3
 800755e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d105      	bne.n	8007572 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	609a      	str	r2, [r3, #8]
      break;
 8007570:	e008      	b.n	8007584 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3b01      	subs	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007578:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <SUBGHZSPI_Receive+0xa8>)
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b01      	cmp	r3, #1
 8007582:	d1ed      	bne.n	8007560 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007584:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <SUBGHZSPI_Receive+0xa8>)
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	b2da      	uxtb	r2, r3
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	701a      	strb	r2, [r3, #0]

  return status;
 800758e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007590:	4618      	mov	r0, r3
 8007592:	371c      	adds	r7, #28
 8007594:	46bd      	mov	sp, r7
 8007596:	bc80      	pop	{r7}
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	20000000 	.word	0x20000000
 80075a0:	58010000 	.word	0x58010000
 80075a4:	5801000c 	.word	0x5801000c

080075a8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	791b      	ldrb	r3, [r3, #4]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d111      	bne.n	80075dc <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80075b8:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <SUBGHZ_CheckDeviceReady+0x44>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	4613      	mov	r3, r2
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	4413      	add	r3, r2
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	0c1b      	lsrs	r3, r3, #16
 80075c6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80075c8:	f7ff fbb8 	bl	8006d3c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f9      	bne.n	80075cc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80075d8:	f7ff fba0 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f807 	bl	80075f0 <SUBGHZ_WaitOnBusy>
 80075e2:	4603      	mov	r3, r0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20000000 	.word	0x20000000

080075f0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80075fc:	4b12      	ldr	r3, [pc, #72]	; (8007648 <SUBGHZ_WaitOnBusy+0x58>)
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	4613      	mov	r3, r2
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	4413      	add	r3, r2
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	0d1b      	lsrs	r3, r3, #20
 800760a:	2264      	movs	r2, #100	; 0x64
 800760c:	fb02 f303 	mul.w	r3, r2, r3
 8007610:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007612:	f7ff fbc1 	bl	8006d98 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007616:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d105      	bne.n	800762a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2202      	movs	r2, #2
 8007626:	609a      	str	r2, [r3, #8]
      break;
 8007628:	e009      	b.n	800763e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3b01      	subs	r3, #1
 800762e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007630:	f7ff fba0 	bl	8006d74 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007634:	4602      	mov	r2, r0
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	4013      	ands	r3, r2
 800763a:	2b01      	cmp	r3, #1
 800763c:	d0e9      	beq.n	8007612 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800763e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20000000 	.word	0x20000000

0800764c <LL_RCC_GetUSARTClockSource>:
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007658:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	401a      	ands	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	041b      	lsls	r3, r3, #16
 8007664:	4313      	orrs	r3, r2
}
 8007666:	4618      	mov	r0, r3
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr

08007670 <LL_RCC_GetLPUARTClockSource>:
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800767c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4013      	ands	r3, r2
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr

0800768e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e042      	b.n	8007726 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d106      	bne.n	80076b8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7fa feae 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2224      	movs	r2, #36	; 0x24
 80076bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0201 	bic.w	r2, r2, #1
 80076ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fc4b 	bl	8007f6c <UART_SetConfig>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d101      	bne.n	80076e0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e022      	b.n	8007726 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 feb3 	bl	8008454 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800770c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f042 0201 	orr.w	r2, r2, #1
 800771c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 ff39 	bl	8008596 <UART_CheckIdleState>
 8007724:	4603      	mov	r3, r0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08a      	sub	sp, #40	; 0x28
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	4613      	mov	r3, r2
 800773c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007744:	2b20      	cmp	r3, #32
 8007746:	d142      	bne.n	80077ce <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <HAL_UART_Receive_IT+0x24>
 800774e:	88fb      	ldrh	r3, [r7, #6]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e03b      	b.n	80077d0 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800775e:	2b01      	cmp	r3, #1
 8007760:	d101      	bne.n	8007766 <HAL_UART_Receive_IT+0x36>
 8007762:	2302      	movs	r3, #2
 8007764:	e034      	b.n	80077d0 <HAL_UART_Receive_IT+0xa0>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a17      	ldr	r2, [pc, #92]	; (80077d8 <HAL_UART_Receive_IT+0xa8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d01f      	beq.n	80077be <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d018      	beq.n	80077be <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	613b      	str	r3, [r7, #16]
   return(result);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077a0:	627b      	str	r3, [r7, #36]	; 0x24
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	623b      	str	r3, [r7, #32]
 80077ac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	69f9      	ldr	r1, [r7, #28]
 80077b0:	6a3a      	ldr	r2, [r7, #32]
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e6      	bne.n	800778c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80077be:	88fb      	ldrh	r3, [r7, #6]
 80077c0:	461a      	mov	r2, r3
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 fff9 	bl	80087bc <UART_Start_Receive_IT>
 80077ca:	4603      	mov	r3, r0
 80077cc:	e000      	b.n	80077d0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80077ce:	2302      	movs	r3, #2
  }
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3728      	adds	r7, #40	; 0x28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	40008000 	.word	0x40008000

080077dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	; 0x28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	d17a      	bne.n	80078ea <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <HAL_UART_Transmit_DMA+0x24>
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e073      	b.n	80078ec <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_UART_Transmit_DMA+0x36>
 800780e:	2302      	movs	r3, #2
 8007810:	e06c      	b.n	80078ec <HAL_UART_Transmit_DMA+0x110>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	88fa      	ldrh	r2, [r7, #6]
 8007824:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	88fa      	ldrh	r2, [r7, #6]
 800782c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2221      	movs	r2, #33	; 0x21
 800783c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007844:	2b00      	cmp	r3, #0
 8007846:	d02c      	beq.n	80078a2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800784c:	4a29      	ldr	r2, [pc, #164]	; (80078f4 <HAL_UART_Transmit_DMA+0x118>)
 800784e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007854:	4a28      	ldr	r2, [pc, #160]	; (80078f8 <HAL_UART_Transmit_DMA+0x11c>)
 8007856:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800785c:	4a27      	ldr	r2, [pc, #156]	; (80078fc <HAL_UART_Transmit_DMA+0x120>)
 800785e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007864:	2200      	movs	r2, #0
 8007866:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007870:	4619      	mov	r1, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3328      	adds	r3, #40	; 0x28
 8007878:	461a      	mov	r2, r3
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	f7fc fba6 	bl	8003fcc <HAL_DMA_Start_IT>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00d      	beq.n	80078a2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2210      	movs	r2, #16
 800788a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2220      	movs	r2, #32
 800789a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e024      	b.n	80078ec <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2240      	movs	r2, #64	; 0x40
 80078a8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3308      	adds	r3, #8
 80078b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	613b      	str	r3, [r7, #16]
   return(result);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3308      	adds	r3, #8
 80078d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d2:	623a      	str	r2, [r7, #32]
 80078d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	69f9      	ldr	r1, [r7, #28]
 80078d8:	6a3a      	ldr	r2, [r7, #32]
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	61bb      	str	r3, [r7, #24]
   return(result);
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e5      	bne.n	80078b2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e000      	b.n	80078ec <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80078ea:	2302      	movs	r3, #2
  }
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3728      	adds	r7, #40	; 0x28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	08008b57 	.word	0x08008b57
 80078f8:	08008bf1 	.word	0x08008bf1
 80078fc:	08008c0d 	.word	0x08008c0d

08007900 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b0ba      	sub	sp, #232	; 0xe8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007926:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800792a:	f640 030f 	movw	r3, #2063	; 0x80f
 800792e:	4013      	ands	r3, r2
 8007930:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007938:	2b00      	cmp	r3, #0
 800793a:	d11b      	bne.n	8007974 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800793c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b00      	cmp	r3, #0
 8007946:	d015      	beq.n	8007974 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800794c:	f003 0320 	and.w	r3, r3, #32
 8007950:	2b00      	cmp	r3, #0
 8007952:	d105      	bne.n	8007960 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d009      	beq.n	8007974 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 82d6 	beq.w	8007f16 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	4798      	blx	r3
      }
      return;
 8007972:	e2d0      	b.n	8007f16 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 811f 	beq.w	8007bbc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800797e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007982:	4b8b      	ldr	r3, [pc, #556]	; (8007bb0 <HAL_UART_IRQHandler+0x2b0>)
 8007984:	4013      	ands	r3, r2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d106      	bne.n	8007998 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800798a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800798e:	4b89      	ldr	r3, [pc, #548]	; (8007bb4 <HAL_UART_IRQHandler+0x2b4>)
 8007990:	4013      	ands	r3, r2
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 8112 	beq.w	8007bbc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d011      	beq.n	80079c8 <HAL_UART_IRQHandler+0xc8>
 80079a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2201      	movs	r2, #1
 80079b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079be:	f043 0201 	orr.w	r2, r3, #1
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d011      	beq.n	80079f8 <HAL_UART_IRQHandler+0xf8>
 80079d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2202      	movs	r2, #2
 80079e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079ee:	f043 0204 	orr.w	r2, r3, #4
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d011      	beq.n	8007a28 <HAL_UART_IRQHandler+0x128>
 8007a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00b      	beq.n	8007a28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2204      	movs	r2, #4
 8007a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a1e:	f043 0202 	orr.w	r2, r3, #2
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2c:	f003 0308 	and.w	r3, r3, #8
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d017      	beq.n	8007a64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d105      	bne.n	8007a4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a44:	4b5a      	ldr	r3, [pc, #360]	; (8007bb0 <HAL_UART_IRQHandler+0x2b0>)
 8007a46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00b      	beq.n	8007a64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2208      	movs	r2, #8
 8007a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a5a:	f043 0208 	orr.w	r2, r3, #8
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d012      	beq.n	8007a96 <HAL_UART_IRQHandler+0x196>
 8007a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00c      	beq.n	8007a96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a8c:	f043 0220 	orr.w	r2, r3, #32
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 823c 	beq.w	8007f1a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d013      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d105      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d007      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007adc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aea:	2b40      	cmp	r3, #64	; 0x40
 8007aec:	d005      	beq.n	8007afa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007af2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d04f      	beq.n	8007b9a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 ffc6 	bl	8008a8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0a:	2b40      	cmp	r3, #64	; 0x40
 8007b0c:	d141      	bne.n	8007b92 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3308      	adds	r3, #8
 8007b14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b1c:	e853 3f00 	ldrex	r3, [r3]
 8007b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3308      	adds	r3, #8
 8007b36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b4a:	e841 2300 	strex	r3, r2, [r1]
 8007b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1d9      	bne.n	8007b0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d013      	beq.n	8007b8a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b66:	4a14      	ldr	r2, [pc, #80]	; (8007bb8 <HAL_UART_IRQHandler+0x2b8>)
 8007b68:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fc fb08 	bl	8004184 <HAL_DMA_Abort_IT>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d017      	beq.n	8007baa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007b84:	4610      	mov	r0, r2
 8007b86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b88:	e00f      	b.n	8007baa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f9d9 	bl	8007f42 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b90:	e00b      	b.n	8007baa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f9d5 	bl	8007f42 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b98:	e007      	b.n	8007baa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f9d1 	bl	8007f42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007ba8:	e1b7      	b.n	8007f1a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007baa:	bf00      	nop
    return;
 8007bac:	e1b5      	b.n	8007f1a <HAL_UART_IRQHandler+0x61a>
 8007bae:	bf00      	nop
 8007bb0:	10000001 	.word	0x10000001
 8007bb4:	04000120 	.word	0x04000120
 8007bb8:	08008c8d 	.word	0x08008c8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	f040 814a 	bne.w	8007e5a <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bca:	f003 0310 	and.w	r3, r3, #16
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 8143 	beq.w	8007e5a <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bd8:	f003 0310 	and.w	r3, r3, #16
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 813c 	beq.w	8007e5a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2210      	movs	r2, #16
 8007be8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf4:	2b40      	cmp	r3, #64	; 0x40
 8007bf6:	f040 80b5 	bne.w	8007d64 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007c06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 8187 	beq.w	8007f1e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	f080 817f 	bcs.w	8007f1e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0320 	and.w	r3, r3, #32
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f040 8086 	bne.w	8007d48 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	461a      	mov	r2, r3
 8007c62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1da      	bne.n	8007c3c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3308      	adds	r3, #8
 8007c8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c98:	f023 0301 	bic.w	r3, r3, #1
 8007c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007caa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e1      	bne.n	8007c86 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ce6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ce8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e3      	bne.n	8007cc2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d18:	f023 0310 	bic.w	r3, r3, #16
 8007d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	461a      	mov	r2, r3
 8007d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e4      	bne.n	8007d08 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fc f9c0 	bl	80040c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f8f9 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d62:	e0dc      	b.n	8007f1e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 80ce 	beq.w	8007f22 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 80c9 	beq.w	8007f22 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
 8007dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007db2:	647b      	str	r3, [r7, #68]	; 0x44
 8007db4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e4      	bne.n	8007d90 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3308      	adds	r3, #8
 8007dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ddc:	f023 0301 	bic.w	r3, r3, #1
 8007de0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007dee:	633a      	str	r2, [r7, #48]	; 0x30
 8007df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e1      	bne.n	8007dc6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0310 	bic.w	r3, r3, #16
 8007e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e38:	61fb      	str	r3, [r7, #28]
 8007e3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	69b9      	ldr	r1, [r7, #24]
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	617b      	str	r3, [r7, #20]
   return(result);
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e4      	bne.n	8007e16 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f87e 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007e58:	e063      	b.n	8007f22 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00e      	beq.n	8007e84 <HAL_UART_IRQHandler+0x584>
 8007e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d008      	beq.n	8007e84 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 fba3 	bl	80095c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e82:	e051      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d014      	beq.n	8007eba <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d105      	bne.n	8007ea8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d008      	beq.n	8007eba <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d03a      	beq.n	8007f26 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	4798      	blx	r3
    }
    return;
 8007eb8:	e035      	b.n	8007f26 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d009      	beq.n	8007eda <HAL_UART_IRQHandler+0x5da>
 8007ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fef0 	bl	8008cb8 <UART_EndTransmit_IT>
    return;
 8007ed8:	e026      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <HAL_UART_IRQHandler+0x5fa>
 8007ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f001 fb7a 	bl	80095ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ef8:	e016      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d010      	beq.n	8007f28 <HAL_UART_IRQHandler+0x628>
 8007f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	da0c      	bge.n	8007f28 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 fb63 	bl	80095da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f14:	e008      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
      return;
 8007f16:	bf00      	nop
 8007f18:	e006      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
    return;
 8007f1a:	bf00      	nop
 8007f1c:	e004      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
      return;
 8007f1e:	bf00      	nop
 8007f20:	e002      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
      return;
 8007f22:	bf00      	nop
 8007f24:	e000      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
    return;
 8007f26:	bf00      	nop
  }
}
 8007f28:	37e8      	adds	r7, #232	; 0xe8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop

08007f30 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr

08007f42 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bc80      	pop	{r7}
 8007f52:	4770      	bx	lr

08007f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bc80      	pop	{r7}
 8007f68:	4770      	bx	lr
	...

08007f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f70:	b08c      	sub	sp, #48	; 0x30
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	431a      	orrs	r2, r3
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	4b94      	ldr	r3, [pc, #592]	; (80081ec <UART_SetConfig+0x280>)
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	6812      	ldr	r2, [r2, #0]
 8007fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a89      	ldr	r2, [pc, #548]	; (80081f0 <UART_SetConfig+0x284>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d004      	beq.n	8007fd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007fe2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	6812      	ldr	r2, [r2, #0]
 8007fea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fec:	430b      	orrs	r3, r1
 8007fee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff6:	f023 010f 	bic.w	r1, r3, #15
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a7a      	ldr	r2, [pc, #488]	; (80081f4 <UART_SetConfig+0x288>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d127      	bne.n	8008060 <UART_SetConfig+0xf4>
 8008010:	2003      	movs	r0, #3
 8008012:	f7ff fb1b 	bl	800764c <LL_RCC_GetUSARTClockSource>
 8008016:	4603      	mov	r3, r0
 8008018:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800801c:	2b03      	cmp	r3, #3
 800801e:	d81b      	bhi.n	8008058 <UART_SetConfig+0xec>
 8008020:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <UART_SetConfig+0xbc>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	08008039 	.word	0x08008039
 800802c:	08008049 	.word	0x08008049
 8008030:	08008041 	.word	0x08008041
 8008034:	08008051 	.word	0x08008051
 8008038:	2301      	movs	r3, #1
 800803a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800803e:	e080      	b.n	8008142 <UART_SetConfig+0x1d6>
 8008040:	2302      	movs	r3, #2
 8008042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008046:	e07c      	b.n	8008142 <UART_SetConfig+0x1d6>
 8008048:	2304      	movs	r3, #4
 800804a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800804e:	e078      	b.n	8008142 <UART_SetConfig+0x1d6>
 8008050:	2308      	movs	r3, #8
 8008052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008056:	e074      	b.n	8008142 <UART_SetConfig+0x1d6>
 8008058:	2310      	movs	r3, #16
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800805e:	e070      	b.n	8008142 <UART_SetConfig+0x1d6>
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a64      	ldr	r2, [pc, #400]	; (80081f8 <UART_SetConfig+0x28c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d138      	bne.n	80080dc <UART_SetConfig+0x170>
 800806a:	200c      	movs	r0, #12
 800806c:	f7ff faee 	bl	800764c <LL_RCC_GetUSARTClockSource>
 8008070:	4603      	mov	r3, r0
 8008072:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8008076:	2b0c      	cmp	r3, #12
 8008078:	d82c      	bhi.n	80080d4 <UART_SetConfig+0x168>
 800807a:	a201      	add	r2, pc, #4	; (adr r2, 8008080 <UART_SetConfig+0x114>)
 800807c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008080:	080080b5 	.word	0x080080b5
 8008084:	080080d5 	.word	0x080080d5
 8008088:	080080d5 	.word	0x080080d5
 800808c:	080080d5 	.word	0x080080d5
 8008090:	080080c5 	.word	0x080080c5
 8008094:	080080d5 	.word	0x080080d5
 8008098:	080080d5 	.word	0x080080d5
 800809c:	080080d5 	.word	0x080080d5
 80080a0:	080080bd 	.word	0x080080bd
 80080a4:	080080d5 	.word	0x080080d5
 80080a8:	080080d5 	.word	0x080080d5
 80080ac:	080080d5 	.word	0x080080d5
 80080b0:	080080cd 	.word	0x080080cd
 80080b4:	2300      	movs	r3, #0
 80080b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ba:	e042      	b.n	8008142 <UART_SetConfig+0x1d6>
 80080bc:	2302      	movs	r3, #2
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c2:	e03e      	b.n	8008142 <UART_SetConfig+0x1d6>
 80080c4:	2304      	movs	r3, #4
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ca:	e03a      	b.n	8008142 <UART_SetConfig+0x1d6>
 80080cc:	2308      	movs	r3, #8
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d2:	e036      	b.n	8008142 <UART_SetConfig+0x1d6>
 80080d4:	2310      	movs	r3, #16
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080da:	e032      	b.n	8008142 <UART_SetConfig+0x1d6>
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a43      	ldr	r2, [pc, #268]	; (80081f0 <UART_SetConfig+0x284>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d12a      	bne.n	800813c <UART_SetConfig+0x1d0>
 80080e6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80080ea:	f7ff fac1 	bl	8007670 <LL_RCC_GetLPUARTClockSource>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080f4:	d01a      	beq.n	800812c <UART_SetConfig+0x1c0>
 80080f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080fa:	d81b      	bhi.n	8008134 <UART_SetConfig+0x1c8>
 80080fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008100:	d00c      	beq.n	800811c <UART_SetConfig+0x1b0>
 8008102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008106:	d815      	bhi.n	8008134 <UART_SetConfig+0x1c8>
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <UART_SetConfig+0x1a8>
 800810c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008110:	d008      	beq.n	8008124 <UART_SetConfig+0x1b8>
 8008112:	e00f      	b.n	8008134 <UART_SetConfig+0x1c8>
 8008114:	2300      	movs	r3, #0
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800811a:	e012      	b.n	8008142 <UART_SetConfig+0x1d6>
 800811c:	2302      	movs	r3, #2
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008122:	e00e      	b.n	8008142 <UART_SetConfig+0x1d6>
 8008124:	2304      	movs	r3, #4
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800812a:	e00a      	b.n	8008142 <UART_SetConfig+0x1d6>
 800812c:	2308      	movs	r3, #8
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008132:	e006      	b.n	8008142 <UART_SetConfig+0x1d6>
 8008134:	2310      	movs	r3, #16
 8008136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800813a:	e002      	b.n	8008142 <UART_SetConfig+0x1d6>
 800813c:	2310      	movs	r3, #16
 800813e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a2a      	ldr	r2, [pc, #168]	; (80081f0 <UART_SetConfig+0x284>)
 8008148:	4293      	cmp	r3, r2
 800814a:	f040 80a4 	bne.w	8008296 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800814e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008152:	2b08      	cmp	r3, #8
 8008154:	d823      	bhi.n	800819e <UART_SetConfig+0x232>
 8008156:	a201      	add	r2, pc, #4	; (adr r2, 800815c <UART_SetConfig+0x1f0>)
 8008158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815c:	08008181 	.word	0x08008181
 8008160:	0800819f 	.word	0x0800819f
 8008164:	08008189 	.word	0x08008189
 8008168:	0800819f 	.word	0x0800819f
 800816c:	0800818f 	.word	0x0800818f
 8008170:	0800819f 	.word	0x0800819f
 8008174:	0800819f 	.word	0x0800819f
 8008178:	0800819f 	.word	0x0800819f
 800817c:	08008197 	.word	0x08008197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008180:	f7fd ff50 	bl	8006024 <HAL_RCC_GetPCLK1Freq>
 8008184:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008186:	e010      	b.n	80081aa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008188:	4b1c      	ldr	r3, [pc, #112]	; (80081fc <UART_SetConfig+0x290>)
 800818a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800818c:	e00d      	b.n	80081aa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800818e:	f7fd fe95 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 8008192:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008194:	e009      	b.n	80081aa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800819a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800819c:	e005      	b.n	80081aa <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 8137 	beq.w	8008420 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	4a12      	ldr	r2, [pc, #72]	; (8008200 <UART_SetConfig+0x294>)
 80081b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081bc:	461a      	mov	r2, r3
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80081c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	4613      	mov	r3, r2
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	4413      	add	r3, r2
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d305      	bcc.n	80081e2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d910      	bls.n	8008204 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80081e8:	e11a      	b.n	8008420 <UART_SetConfig+0x4b4>
 80081ea:	bf00      	nop
 80081ec:	cfff69f3 	.word	0xcfff69f3
 80081f0:	40008000 	.word	0x40008000
 80081f4:	40013800 	.word	0x40013800
 80081f8:	40004400 	.word	0x40004400
 80081fc:	00f42400 	.word	0x00f42400
 8008200:	0801d858 	.word	0x0801d858
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	2200      	movs	r2, #0
 8008208:	60bb      	str	r3, [r7, #8]
 800820a:	60fa      	str	r2, [r7, #12]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	4a8e      	ldr	r2, [pc, #568]	; (800844c <UART_SetConfig+0x4e0>)
 8008212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008216:	b29b      	uxth	r3, r3
 8008218:	2200      	movs	r2, #0
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	607a      	str	r2, [r7, #4]
 800821e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008222:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008226:	f7f8 fcbf 	bl	8000ba8 <__aeabi_uldivmod>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4610      	mov	r0, r2
 8008230:	4619      	mov	r1, r3
 8008232:	f04f 0200 	mov.w	r2, #0
 8008236:	f04f 0300 	mov.w	r3, #0
 800823a:	020b      	lsls	r3, r1, #8
 800823c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008240:	0202      	lsls	r2, r0, #8
 8008242:	6979      	ldr	r1, [r7, #20]
 8008244:	6849      	ldr	r1, [r1, #4]
 8008246:	0849      	lsrs	r1, r1, #1
 8008248:	2000      	movs	r0, #0
 800824a:	460c      	mov	r4, r1
 800824c:	4605      	mov	r5, r0
 800824e:	eb12 0804 	adds.w	r8, r2, r4
 8008252:	eb43 0905 	adc.w	r9, r3, r5
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	469a      	mov	sl, r3
 800825e:	4693      	mov	fp, r2
 8008260:	4652      	mov	r2, sl
 8008262:	465b      	mov	r3, fp
 8008264:	4640      	mov	r0, r8
 8008266:	4649      	mov	r1, r9
 8008268:	f7f8 fc9e 	bl	8000ba8 <__aeabi_uldivmod>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4613      	mov	r3, r2
 8008272:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800827a:	d308      	bcc.n	800828e <UART_SetConfig+0x322>
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008282:	d204      	bcs.n	800828e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6a3a      	ldr	r2, [r7, #32]
 800828a:	60da      	str	r2, [r3, #12]
 800828c:	e0c8      	b.n	8008420 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008294:	e0c4      	b.n	8008420 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800829e:	d168      	bne.n	8008372 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80082a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082a4:	2b08      	cmp	r3, #8
 80082a6:	d828      	bhi.n	80082fa <UART_SetConfig+0x38e>
 80082a8:	a201      	add	r2, pc, #4	; (adr r2, 80082b0 <UART_SetConfig+0x344>)
 80082aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ae:	bf00      	nop
 80082b0:	080082d5 	.word	0x080082d5
 80082b4:	080082dd 	.word	0x080082dd
 80082b8:	080082e5 	.word	0x080082e5
 80082bc:	080082fb 	.word	0x080082fb
 80082c0:	080082eb 	.word	0x080082eb
 80082c4:	080082fb 	.word	0x080082fb
 80082c8:	080082fb 	.word	0x080082fb
 80082cc:	080082fb 	.word	0x080082fb
 80082d0:	080082f3 	.word	0x080082f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082d4:	f7fd fea6 	bl	8006024 <HAL_RCC_GetPCLK1Freq>
 80082d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082da:	e014      	b.n	8008306 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082dc:	f7fd feb4 	bl	8006048 <HAL_RCC_GetPCLK2Freq>
 80082e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082e2:	e010      	b.n	8008306 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082e4:	4b5a      	ldr	r3, [pc, #360]	; (8008450 <UART_SetConfig+0x4e4>)
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082e8:	e00d      	b.n	8008306 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ea:	f7fd fde7 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 80082ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082f0:	e009      	b.n	8008306 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082f8:	e005      	b.n	8008306 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80082fa:	2300      	movs	r3, #0
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008304:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 8089 	beq.w	8008420 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	4a4e      	ldr	r2, [pc, #312]	; (800844c <UART_SetConfig+0x4e0>)
 8008314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008318:	461a      	mov	r2, r3
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008320:	005a      	lsls	r2, r3, #1
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	085b      	lsrs	r3, r3, #1
 8008328:	441a      	add	r2, r3
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008332:	b29b      	uxth	r3, r3
 8008334:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	2b0f      	cmp	r3, #15
 800833a:	d916      	bls.n	800836a <UART_SetConfig+0x3fe>
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008342:	d212      	bcs.n	800836a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	b29b      	uxth	r3, r3
 8008348:	f023 030f 	bic.w	r3, r3, #15
 800834c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	085b      	lsrs	r3, r3, #1
 8008352:	b29b      	uxth	r3, r3
 8008354:	f003 0307 	and.w	r3, r3, #7
 8008358:	b29a      	uxth	r2, r3
 800835a:	8bfb      	ldrh	r3, [r7, #30]
 800835c:	4313      	orrs	r3, r2
 800835e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	8bfa      	ldrh	r2, [r7, #30]
 8008366:	60da      	str	r2, [r3, #12]
 8008368:	e05a      	b.n	8008420 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008370:	e056      	b.n	8008420 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008372:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008376:	2b08      	cmp	r3, #8
 8008378:	d827      	bhi.n	80083ca <UART_SetConfig+0x45e>
 800837a:	a201      	add	r2, pc, #4	; (adr r2, 8008380 <UART_SetConfig+0x414>)
 800837c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008380:	080083a5 	.word	0x080083a5
 8008384:	080083ad 	.word	0x080083ad
 8008388:	080083b5 	.word	0x080083b5
 800838c:	080083cb 	.word	0x080083cb
 8008390:	080083bb 	.word	0x080083bb
 8008394:	080083cb 	.word	0x080083cb
 8008398:	080083cb 	.word	0x080083cb
 800839c:	080083cb 	.word	0x080083cb
 80083a0:	080083c3 	.word	0x080083c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083a4:	f7fd fe3e 	bl	8006024 <HAL_RCC_GetPCLK1Freq>
 80083a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083aa:	e014      	b.n	80083d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083ac:	f7fd fe4c 	bl	8006048 <HAL_RCC_GetPCLK2Freq>
 80083b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083b2:	e010      	b.n	80083d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083b4:	4b26      	ldr	r3, [pc, #152]	; (8008450 <UART_SetConfig+0x4e4>)
 80083b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083b8:	e00d      	b.n	80083d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ba:	f7fd fd7f 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 80083be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083c0:	e009      	b.n	80083d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083c8:	e005      	b.n	80083d6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80083d4:	bf00      	nop
    }

    if (pclk != 0U)
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d021      	beq.n	8008420 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	4a1a      	ldr	r2, [pc, #104]	; (800844c <UART_SetConfig+0x4e0>)
 80083e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083e6:	461a      	mov	r2, r3
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	085b      	lsrs	r3, r3, #1
 80083f4:	441a      	add	r2, r3
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fe:	b29b      	uxth	r3, r3
 8008400:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	2b0f      	cmp	r3, #15
 8008406:	d908      	bls.n	800841a <UART_SetConfig+0x4ae>
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800840e:	d204      	bcs.n	800841a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6a3a      	ldr	r2, [r7, #32]
 8008416:	60da      	str	r2, [r3, #12]
 8008418:	e002      	b.n	8008420 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2201      	movs	r2, #1
 8008424:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2201      	movs	r2, #1
 800842c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2200      	movs	r2, #0
 8008434:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2200      	movs	r2, #0
 800843a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800843c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008440:	4618      	mov	r0, r3
 8008442:	3730      	adds	r7, #48	; 0x30
 8008444:	46bd      	mov	sp, r7
 8008446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800844a:	bf00      	nop
 800844c:	0801d858 	.word	0x0801d858
 8008450:	00f42400 	.word	0x00f42400

08008454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00a      	beq.n	800847e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	430a      	orrs	r2, r1
 800849e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00a      	beq.n	80084c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	430a      	orrs	r2, r1
 80084c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c6:	f003 0308 	and.w	r3, r3, #8
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	430a      	orrs	r2, r1
 80084e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e8:	f003 0310 	and.w	r3, r3, #16
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00a      	beq.n	8008506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850a:	f003 0320 	and.w	r3, r3, #32
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00a      	beq.n	8008528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008530:	2b00      	cmp	r3, #0
 8008532:	d01a      	beq.n	800856a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	430a      	orrs	r2, r1
 8008548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008552:	d10a      	bne.n	800856a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00a      	beq.n	800858c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	430a      	orrs	r2, r1
 800858a:	605a      	str	r2, [r3, #4]
  }
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	bc80      	pop	{r7}
 8008594:	4770      	bx	lr

08008596 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b086      	sub	sp, #24
 800859a:	af02      	add	r7, sp, #8
 800859c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085a6:	f7f9 fb9b 	bl	8001ce0 <HAL_GetTick>
 80085aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0308 	and.w	r3, r3, #8
 80085b6:	2b08      	cmp	r3, #8
 80085b8:	d10e      	bne.n	80085d8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f82f 	bl	800862c <UART_WaitOnFlagUntilTimeout>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e025      	b.n	8008624 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0304 	and.w	r3, r3, #4
 80085e2:	2b04      	cmp	r3, #4
 80085e4:	d10e      	bne.n	8008604 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f819 	bl	800862c <UART_WaitOnFlagUntilTimeout>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e00f      	b.n	8008624 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2220      	movs	r2, #32
 8008610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b09c      	sub	sp, #112	; 0x70
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	603b      	str	r3, [r7, #0]
 8008638:	4613      	mov	r3, r2
 800863a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800863c:	e0a9      	b.n	8008792 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800863e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008644:	f000 80a5 	beq.w	8008792 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008648:	f7f9 fb4a 	bl	8001ce0 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008654:	429a      	cmp	r2, r3
 8008656:	d302      	bcc.n	800865e <UART_WaitOnFlagUntilTimeout+0x32>
 8008658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800865a:	2b00      	cmp	r3, #0
 800865c:	d140      	bne.n	80086e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800866c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800866e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008672:	667b      	str	r3, [r7, #100]	; 0x64
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800867c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800867e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008682:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800868a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e6      	bne.n	800865e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3308      	adds	r3, #8
 8008696:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	f023 0301 	bic.w	r3, r3, #1
 80086a6:	663b      	str	r3, [r7, #96]	; 0x60
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3308      	adds	r3, #8
 80086ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80086b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e5      	bne.n	8008690 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2220      	movs	r2, #32
 80086d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e069      	b.n	80087b4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d051      	beq.n	8008792 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	69db      	ldr	r3, [r3, #28]
 80086f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086fc:	d149      	bne.n	8008792 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008706:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800871c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008726:	637b      	str	r3, [r7, #52]	; 0x34
 8008728:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800872c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e6      	bne.n	8008708 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3308      	adds	r3, #8
 8008740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	613b      	str	r3, [r7, #16]
   return(result);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	f023 0301 	bic.w	r3, r3, #1
 8008750:	66bb      	str	r3, [r7, #104]	; 0x68
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800875a:	623a      	str	r2, [r7, #32]
 800875c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	69f9      	ldr	r1, [r7, #28]
 8008760:	6a3a      	ldr	r2, [r7, #32]
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	61bb      	str	r3, [r7, #24]
   return(result);
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e5      	bne.n	800873a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2220      	movs	r2, #32
 8008772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2220      	movs	r2, #32
 800877a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2220      	movs	r2, #32
 8008782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e010      	b.n	80087b4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	69da      	ldr	r2, [r3, #28]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	4013      	ands	r3, r2
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	429a      	cmp	r2, r3
 80087a0:	bf0c      	ite	eq
 80087a2:	2301      	moveq	r3, #1
 80087a4:	2300      	movne	r3, #0
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	461a      	mov	r2, r3
 80087aa:	79fb      	ldrb	r3, [r7, #7]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	f43f af46 	beq.w	800863e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3770      	adds	r7, #112	; 0x70
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087bc:	b480      	push	{r7}
 80087be:	b0a3      	sub	sp, #140	; 0x8c
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	4613      	mov	r3, r2
 80087c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	88fa      	ldrh	r2, [r7, #6]
 80087d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	88fa      	ldrh	r2, [r7, #6]
 80087dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ee:	d10e      	bne.n	800880e <UART_Start_Receive_IT+0x52>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d105      	bne.n	8008804 <UART_Start_Receive_IT+0x48>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80087fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008802:	e02d      	b.n	8008860 <UART_Start_Receive_IT+0xa4>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	22ff      	movs	r2, #255	; 0xff
 8008808:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800880c:	e028      	b.n	8008860 <UART_Start_Receive_IT+0xa4>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10d      	bne.n	8008832 <UART_Start_Receive_IT+0x76>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d104      	bne.n	8008828 <UART_Start_Receive_IT+0x6c>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	22ff      	movs	r2, #255	; 0xff
 8008822:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008826:	e01b      	b.n	8008860 <UART_Start_Receive_IT+0xa4>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	227f      	movs	r2, #127	; 0x7f
 800882c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008830:	e016      	b.n	8008860 <UART_Start_Receive_IT+0xa4>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800883a:	d10d      	bne.n	8008858 <UART_Start_Receive_IT+0x9c>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d104      	bne.n	800884e <UART_Start_Receive_IT+0x92>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	227f      	movs	r2, #127	; 0x7f
 8008848:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800884c:	e008      	b.n	8008860 <UART_Start_Receive_IT+0xa4>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	223f      	movs	r2, #63	; 0x3f
 8008852:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008856:	e003      	b.n	8008860 <UART_Start_Receive_IT+0xa4>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2222      	movs	r2, #34	; 0x22
 800886c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3308      	adds	r3, #8
 8008876:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800887a:	e853 3f00 	ldrex	r3, [r3]
 800887e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008882:	f043 0301 	orr.w	r3, r3, #1
 8008886:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3308      	adds	r3, #8
 8008890:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008894:	673a      	str	r2, [r7, #112]	; 0x70
 8008896:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008898:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800889a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800889c:	e841 2300 	strex	r3, r2, [r1]
 80088a0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80088a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e3      	bne.n	8008870 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088b0:	d153      	bne.n	800895a <UART_Start_Receive_IT+0x19e>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80088b8:	88fa      	ldrh	r2, [r7, #6]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d34d      	bcc.n	800895a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088c6:	d107      	bne.n	80088d8 <UART_Start_Receive_IT+0x11c>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d103      	bne.n	80088d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4a4a      	ldr	r2, [pc, #296]	; (80089fc <UART_Start_Receive_IT+0x240>)
 80088d4:	671a      	str	r2, [r3, #112]	; 0x70
 80088d6:	e002      	b.n	80088de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4a49      	ldr	r2, [pc, #292]	; (8008a00 <UART_Start_Receive_IT+0x244>)
 80088dc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d01a      	beq.n	8008924 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088f6:	e853 3f00 	ldrex	r3, [r3]
 80088fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80088fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008902:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008910:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008912:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008916:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800891e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e4      	bne.n	80088ee <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3308      	adds	r3, #8
 800892a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800892e:	e853 3f00 	ldrex	r3, [r3]
 8008932:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800893a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3308      	adds	r3, #8
 8008942:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008944:	64ba      	str	r2, [r7, #72]	; 0x48
 8008946:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008948:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800894a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800894c:	e841 2300 	strex	r3, r2, [r1]
 8008950:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1e5      	bne.n	8008924 <UART_Start_Receive_IT+0x168>
 8008958:	e04a      	b.n	80089f0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008962:	d107      	bne.n	8008974 <UART_Start_Receive_IT+0x1b8>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d103      	bne.n	8008974 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	4a25      	ldr	r2, [pc, #148]	; (8008a04 <UART_Start_Receive_IT+0x248>)
 8008970:	671a      	str	r2, [r3, #112]	; 0x70
 8008972:	e002      	b.n	800897a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4a24      	ldr	r2, [pc, #144]	; (8008a08 <UART_Start_Receive_IT+0x24c>)
 8008978:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d019      	beq.n	80089be <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800899e:	677b      	str	r3, [r7, #116]	; 0x74
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089a8:	637b      	str	r3, [r7, #52]	; 0x34
 80089aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e6      	bne.n	800898a <UART_Start_Receive_IT+0x1ce>
 80089bc:	e018      	b.n	80089f0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	613b      	str	r3, [r7, #16]
   return(result);
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f043 0320 	orr.w	r3, r3, #32
 80089d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	461a      	mov	r2, r3
 80089da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089dc:	623b      	str	r3, [r7, #32]
 80089de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e0:	69f9      	ldr	r1, [r7, #28]
 80089e2:	6a3a      	ldr	r2, [r7, #32]
 80089e4:	e841 2300 	strex	r3, r2, [r1]
 80089e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1e6      	bne.n	80089be <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	378c      	adds	r7, #140	; 0x8c
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bc80      	pop	{r7}
 80089fa:	4770      	bx	lr
 80089fc:	080092c9 	.word	0x080092c9
 8008a00:	08008fd1 	.word	0x08008fd1
 8008a04:	08008e6f 	.word	0x08008e6f
 8008a08:	08008d0f 	.word	0x08008d0f

08008a0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b08f      	sub	sp, #60	; 0x3c
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a28:	637b      	str	r3, [r7, #52]	; 0x34
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a34:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e6      	bne.n	8008a14 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3308      	adds	r3, #8
 8008a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a66:	61ba      	str	r2, [r7, #24]
 8008a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6979      	ldr	r1, [r7, #20]
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	613b      	str	r3, [r7, #16]
   return(result);
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e5      	bne.n	8008a46 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008a82:	bf00      	nop
 8008a84:	373c      	adds	r7, #60	; 0x3c
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr

08008a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b095      	sub	sp, #84	; 0x54
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ab2:	643b      	str	r3, [r7, #64]	; 0x40
 8008ab4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008aba:	e841 2300 	strex	r3, r2, [r1]
 8008abe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1e6      	bne.n	8008a94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3308      	adds	r3, #8
 8008acc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	e853 3f00 	ldrex	r3, [r3]
 8008ad4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008adc:	f023 0301 	bic.w	r3, r3, #1
 8008ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008aec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e3      	bne.n	8008ac6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d118      	bne.n	8008b38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	e853 3f00 	ldrex	r3, [r3]
 8008b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	f023 0310 	bic.w	r3, r3, #16
 8008b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	461a      	mov	r2, r3
 8008b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b24:	61bb      	str	r3, [r7, #24]
 8008b26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b28:	6979      	ldr	r1, [r7, #20]
 8008b2a:	69ba      	ldr	r2, [r7, #24]
 8008b2c:	e841 2300 	strex	r3, r2, [r1]
 8008b30:	613b      	str	r3, [r7, #16]
   return(result);
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1e6      	bne.n	8008b06 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008b4c:	bf00      	nop
 8008b4e:	3754      	adds	r7, #84	; 0x54
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr

08008b56 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b090      	sub	sp, #64	; 0x40
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b62:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0320 	and.w	r3, r3, #32
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d137      	bne.n	8008be2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3308      	adds	r3, #8
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	e853 3f00 	ldrex	r3, [r3]
 8008b88:	623b      	str	r3, [r7, #32]
   return(result);
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b90:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3308      	adds	r3, #8
 8008b98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b9a:	633a      	str	r2, [r7, #48]	; 0x30
 8008b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e5      	bne.n	8008b7a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bcc:	61fb      	str	r3, [r7, #28]
 8008bce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	69b9      	ldr	r1, [r7, #24]
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e6      	bne.n	8008bae <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008be0:	e002      	b.n	8008be8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008be2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008be4:	f7f9 fd82 	bl	80026ec <HAL_UART_TxCpltCallback>
}
 8008be8:	bf00      	nop
 8008bea:	3740      	adds	r7, #64	; 0x40
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7ff f996 	bl	8007f30 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c20:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c28:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c34:	2b80      	cmp	r3, #128	; 0x80
 8008c36:	d109      	bne.n	8008c4c <UART_DMAError+0x40>
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	2b21      	cmp	r3, #33	; 0x21
 8008c3c:	d106      	bne.n	8008c4c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008c46:	6978      	ldr	r0, [r7, #20]
 8008c48:	f7ff fee0 	bl	8008a0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c56:	2b40      	cmp	r3, #64	; 0x40
 8008c58:	d109      	bne.n	8008c6e <UART_DMAError+0x62>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b22      	cmp	r3, #34	; 0x22
 8008c5e:	d106      	bne.n	8008c6e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008c68:	6978      	ldr	r0, [r7, #20]
 8008c6a:	f7ff ff0f 	bl	8008a8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c74:	f043 0210 	orr.w	r2, r3, #16
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c7e:	6978      	ldr	r0, [r7, #20]
 8008c80:	f7ff f95f 	bl	8007f42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c84:	bf00      	nop
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f7ff f949 	bl	8007f42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cb0:	bf00      	nop
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b088      	sub	sp, #32
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cd4:	61fb      	str	r3, [r7, #28]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	61bb      	str	r3, [r7, #24]
 8008ce0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	6979      	ldr	r1, [r7, #20]
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	613b      	str	r3, [r7, #16]
   return(result);
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e6      	bne.n	8008cc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7f9 fcf3 	bl	80026ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d06:	bf00      	nop
 8008d08:	3720      	adds	r7, #32
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b096      	sub	sp, #88	; 0x58
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d26:	2b22      	cmp	r3, #34	; 0x22
 8008d28:	f040 8095 	bne.w	8008e56 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d36:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008d3a:	b2d9      	uxtb	r1, r3
 8008d3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d46:	400a      	ands	r2, r1
 8008d48:	b2d2      	uxtb	r2, r2
 8008d4a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d178      	bne.n	8008e66 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7c:	e853 3f00 	ldrex	r3, [r3]
 8008d80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d88:	653b      	str	r3, [r7, #80]	; 0x50
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d92:	647b      	str	r3, [r7, #68]	; 0x44
 8008d94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d9a:	e841 2300 	strex	r3, r2, [r1]
 8008d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1e6      	bne.n	8008d74 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	3308      	adds	r3, #8
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	e853 3f00 	ldrex	r3, [r3]
 8008db4:	623b      	str	r3, [r7, #32]
   return(result);
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	f023 0301 	bic.w	r3, r3, #1
 8008dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008dc6:	633a      	str	r2, [r7, #48]	; 0x30
 8008dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dce:	e841 2300 	strex	r3, r2, [r1]
 8008dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1e5      	bne.n	8008da6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d12e      	bne.n	8008e4e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	e853 3f00 	ldrex	r3, [r3]
 8008e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f023 0310 	bic.w	r3, r3, #16
 8008e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	461a      	mov	r2, r3
 8008e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e14:	61fb      	str	r3, [r7, #28]
 8008e16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	69b9      	ldr	r1, [r7, #24]
 8008e1a:	69fa      	ldr	r2, [r7, #28]
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	617b      	str	r3, [r7, #20]
   return(result);
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e6      	bne.n	8008df6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	f003 0310 	and.w	r3, r3, #16
 8008e32:	2b10      	cmp	r3, #16
 8008e34:	d103      	bne.n	8008e3e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2210      	movs	r2, #16
 8008e3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7ff f884 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e4c:	e00b      	b.n	8008e66 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7f9 fc62 	bl	8002718 <HAL_UART_RxCpltCallback>
}
 8008e54:	e007      	b.n	8008e66 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	699a      	ldr	r2, [r3, #24]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f042 0208 	orr.w	r2, r2, #8
 8008e64:	619a      	str	r2, [r3, #24]
}
 8008e66:	bf00      	nop
 8008e68:	3758      	adds	r7, #88	; 0x58
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b096      	sub	sp, #88	; 0x58
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e7c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e86:	2b22      	cmp	r3, #34	; 0x22
 8008e88:	f040 8095 	bne.w	8008fb6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e92:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e9a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e9c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008ea0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eaa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb0:	1c9a      	adds	r2, r3, #2
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d178      	bne.n	8008fc6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef2:	643b      	str	r3, [r7, #64]	; 0x40
 8008ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ef8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008efa:	e841 2300 	strex	r3, r2, [r1]
 8008efe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e6      	bne.n	8008ed4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3308      	adds	r3, #8
 8008f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	f023 0301 	bic.w	r3, r3, #1
 8008f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3308      	adds	r3, #8
 8008f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f2e:	e841 2300 	strex	r3, r2, [r1]
 8008f32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1e5      	bne.n	8008f06 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d12e      	bne.n	8008fae <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	e853 3f00 	ldrex	r3, [r3]
 8008f62:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f023 0310 	bic.w	r3, r3, #16
 8008f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	461a      	mov	r2, r3
 8008f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f74:	61bb      	str	r3, [r7, #24]
 8008f76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f78:	6979      	ldr	r1, [r7, #20]
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	e841 2300 	strex	r3, r2, [r1]
 8008f80:	613b      	str	r3, [r7, #16]
   return(result);
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1e6      	bne.n	8008f56 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	f003 0310 	and.w	r3, r3, #16
 8008f92:	2b10      	cmp	r3, #16
 8008f94:	d103      	bne.n	8008f9e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2210      	movs	r2, #16
 8008f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7fe ffd4 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fac:	e00b      	b.n	8008fc6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7f9 fbb2 	bl	8002718 <HAL_UART_RxCpltCallback>
}
 8008fb4:	e007      	b.n	8008fc6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	699a      	ldr	r2, [r3, #24]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f042 0208 	orr.w	r2, r2, #8
 8008fc4:	619a      	str	r2, [r3, #24]
}
 8008fc6:	bf00      	nop
 8008fc8:	3758      	adds	r7, #88	; 0x58
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
	...

08008fd0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b0a6      	sub	sp, #152	; 0x98
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008fde:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009006:	2b22      	cmp	r3, #34	; 0x22
 8009008:	f040 814f 	bne.w	80092aa <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009012:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009016:	e0f6      	b.n	8009206 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009022:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009026:	b2d9      	uxtb	r1, r3
 8009028:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800902c:	b2da      	uxtb	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009032:	400a      	ands	r2, r1
 8009034:	b2d2      	uxtb	r2, r2
 8009036:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009048:	b29b      	uxth	r3, r3
 800904a:	3b01      	subs	r3, #1
 800904c:	b29a      	uxth	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800905e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	2b00      	cmp	r3, #0
 8009068:	d053      	beq.n	8009112 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800906a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d011      	beq.n	800909a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800907a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00b      	beq.n	800909a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2201      	movs	r2, #1
 8009088:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009090:	f043 0201 	orr.w	r2, r3, #1
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800909a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d011      	beq.n	80090ca <UART_RxISR_8BIT_FIFOEN+0xfa>
 80090a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00b      	beq.n	80090ca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2202      	movs	r2, #2
 80090b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090c0:	f043 0204 	orr.w	r2, r3, #4
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80090ce:	f003 0304 	and.w	r3, r3, #4
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d011      	beq.n	80090fa <UART_RxISR_8BIT_FIFOEN+0x12a>
 80090d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00b      	beq.n	80090fa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2204      	movs	r2, #4
 80090e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f0:	f043 0202 	orr.w	r2, r3, #2
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009100:	2b00      	cmp	r3, #0
 8009102:	d006      	beq.n	8009112 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f7fe ff1c 	bl	8007f42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009118:	b29b      	uxth	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d173      	bne.n	8009206 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009126:	e853 3f00 	ldrex	r3, [r3]
 800912a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800912c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800912e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009132:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009140:	66bb      	str	r3, [r7, #104]	; 0x68
 8009142:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009144:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009146:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009148:	e841 2300 	strex	r3, r2, [r1]
 800914c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800914e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1e4      	bne.n	800911e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3308      	adds	r3, #8
 800915a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800915e:	e853 3f00 	ldrex	r3, [r3]
 8009162:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800916a:	f023 0301 	bic.w	r3, r3, #1
 800916e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3308      	adds	r3, #8
 8009176:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009178:	657a      	str	r2, [r7, #84]	; 0x54
 800917a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800917e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009180:	e841 2300 	strex	r3, r2, [r1]
 8009184:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1e3      	bne.n	8009154 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2220      	movs	r2, #32
 8009190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d12e      	bne.n	8009200 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b8:	f023 0310 	bic.w	r3, r3, #16
 80091bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	461a      	mov	r2, r3
 80091c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091c6:	643b      	str	r3, [r7, #64]	; 0x40
 80091c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e6      	bne.n	80091a8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	69db      	ldr	r3, [r3, #28]
 80091e0:	f003 0310 	and.w	r3, r3, #16
 80091e4:	2b10      	cmp	r3, #16
 80091e6:	d103      	bne.n	80091f0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2210      	movs	r2, #16
 80091ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7fe feab 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
 80091fe:	e002      	b.n	8009206 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7f9 fa89 	bl	8002718 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009206:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800920a:	2b00      	cmp	r3, #0
 800920c:	d006      	beq.n	800921c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800920e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009212:	f003 0320 	and.w	r3, r3, #32
 8009216:	2b00      	cmp	r3, #0
 8009218:	f47f aefe 	bne.w	8009018 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009222:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009226:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800922a:	2b00      	cmp	r3, #0
 800922c:	d045      	beq.n	80092ba <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009234:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009238:	429a      	cmp	r2, r3
 800923a:	d23e      	bcs.n	80092ba <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3308      	adds	r3, #8
 8009242:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	61fb      	str	r3, [r7, #28]
   return(result);
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009252:	673b      	str	r3, [r7, #112]	; 0x70
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3308      	adds	r3, #8
 800925a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800925c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800925e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009264:	e841 2300 	strex	r3, r2, [r1]
 8009268:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e5      	bne.n	800923c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a14      	ldr	r2, [pc, #80]	; (80092c4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009274:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	e853 3f00 	ldrex	r3, [r3]
 8009282:	60bb      	str	r3, [r7, #8]
   return(result);
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f043 0320 	orr.w	r3, r3, #32
 800928a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	461a      	mov	r2, r3
 8009292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009294:	61bb      	str	r3, [r7, #24]
 8009296:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009298:	6979      	ldr	r1, [r7, #20]
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	e841 2300 	strex	r3, r2, [r1]
 80092a0:	613b      	str	r3, [r7, #16]
   return(result);
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1e6      	bne.n	8009276 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092a8:	e007      	b.n	80092ba <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	699a      	ldr	r2, [r3, #24]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f042 0208 	orr.w	r2, r2, #8
 80092b8:	619a      	str	r2, [r3, #24]
}
 80092ba:	bf00      	nop
 80092bc:	3798      	adds	r7, #152	; 0x98
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	08008d0f 	.word	0x08008d0f

080092c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b0a8      	sub	sp, #160	; 0xa0
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092d6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69db      	ldr	r3, [r3, #28]
 80092e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092fe:	2b22      	cmp	r3, #34	; 0x22
 8009300:	f040 8153 	bne.w	80095aa <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800930a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800930e:	e0fa      	b.n	8009506 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009316:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800931e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009322:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009326:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800932a:	4013      	ands	r3, r2
 800932c:	b29a      	uxth	r2, r3
 800932e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009332:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009338:	1c9a      	adds	r2, r3, #2
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009344:	b29b      	uxth	r3, r3
 8009346:	3b01      	subs	r3, #1
 8009348:	b29a      	uxth	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800935a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800935e:	f003 0307 	and.w	r3, r3, #7
 8009362:	2b00      	cmp	r3, #0
 8009364:	d053      	beq.n	800940e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009366:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d011      	beq.n	8009396 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009372:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00b      	beq.n	8009396 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2201      	movs	r2, #1
 8009384:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800938c:	f043 0201 	orr.w	r2, r3, #1
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009396:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800939a:	f003 0302 	and.w	r3, r3, #2
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d011      	beq.n	80093c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80093a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00b      	beq.n	80093c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2202      	movs	r2, #2
 80093b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093bc:	f043 0204 	orr.w	r2, r3, #4
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093ca:	f003 0304 	and.w	r3, r3, #4
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d011      	beq.n	80093f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80093d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093d6:	f003 0301 	and.w	r3, r3, #1
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00b      	beq.n	80093f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2204      	movs	r2, #4
 80093e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ec:	f043 0202 	orr.w	r2, r3, #2
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d006      	beq.n	800940e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7fe fd9e 	bl	8007f42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009414:	b29b      	uxth	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d175      	bne.n	8009506 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009422:	e853 3f00 	ldrex	r3, [r3]
 8009426:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800942a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800942e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800943c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800943e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009440:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009442:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009444:	e841 2300 	strex	r3, r2, [r1]
 8009448:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800944a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e4      	bne.n	800941a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3308      	adds	r3, #8
 8009456:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800945a:	e853 3f00 	ldrex	r3, [r3]
 800945e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009466:	f023 0301 	bic.w	r3, r3, #1
 800946a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3308      	adds	r3, #8
 8009474:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009478:	65ba      	str	r2, [r7, #88]	; 0x58
 800947a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800947e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e1      	bne.n	8009450 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2220      	movs	r2, #32
 8009490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d12e      	bne.n	8009500 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b8:	f023 0310 	bic.w	r3, r3, #16
 80094bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	461a      	mov	r2, r3
 80094c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094c6:	647b      	str	r3, [r7, #68]	; 0x44
 80094c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1e6      	bne.n	80094a8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	69db      	ldr	r3, [r3, #28]
 80094e0:	f003 0310 	and.w	r3, r3, #16
 80094e4:	2b10      	cmp	r3, #16
 80094e6:	d103      	bne.n	80094f0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2210      	movs	r2, #16
 80094ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f7fe fd2b 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
 80094fe:	e002      	b.n	8009506 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7f9 f909 	bl	8002718 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009506:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800950a:	2b00      	cmp	r3, #0
 800950c:	d006      	beq.n	800951c <UART_RxISR_16BIT_FIFOEN+0x254>
 800950e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	f47f aefa 	bne.w	8009310 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009522:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009526:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800952a:	2b00      	cmp	r3, #0
 800952c:	d045      	beq.n	80095ba <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009534:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009538:	429a      	cmp	r2, r3
 800953a:	d23e      	bcs.n	80095ba <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3308      	adds	r3, #8
 8009542:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009546:	e853 3f00 	ldrex	r3, [r3]
 800954a:	623b      	str	r3, [r7, #32]
   return(result);
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009552:	677b      	str	r3, [r7, #116]	; 0x74
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	3308      	adds	r3, #8
 800955a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800955c:	633a      	str	r2, [r7, #48]	; 0x30
 800955e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009560:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009564:	e841 2300 	strex	r3, r2, [r1]
 8009568:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1e5      	bne.n	800953c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a14      	ldr	r2, [pc, #80]	; (80095c4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009574:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	e853 3f00 	ldrex	r3, [r3]
 8009582:	60fb      	str	r3, [r7, #12]
   return(result);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f043 0320 	orr.w	r3, r3, #32
 800958a:	673b      	str	r3, [r7, #112]	; 0x70
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	461a      	mov	r2, r3
 8009592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009594:	61fb      	str	r3, [r7, #28]
 8009596:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009598:	69b9      	ldr	r1, [r7, #24]
 800959a:	69fa      	ldr	r2, [r7, #28]
 800959c:	e841 2300 	strex	r3, r2, [r1]
 80095a0:	617b      	str	r3, [r7, #20]
   return(result);
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1e6      	bne.n	8009576 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095a8:	e007      	b.n	80095ba <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	699a      	ldr	r2, [r3, #24]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f042 0208 	orr.w	r2, r2, #8
 80095b8:	619a      	str	r2, [r3, #24]
}
 80095ba:	bf00      	nop
 80095bc:	37a0      	adds	r7, #160	; 0xa0
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	08008e6f 	.word	0x08008e6f

080095c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bc80      	pop	{r7}
 80095d8:	4770      	bx	lr

080095da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80095e2:	bf00      	nop
 80095e4:	370c      	adds	r7, #12
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bc80      	pop	{r7}
 80095ea:	4770      	bx	lr

080095ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bc80      	pop	{r7}
 80095fc:	4770      	bx	lr

080095fe <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b088      	sub	sp, #32
 8009602:	af02      	add	r7, sp, #8
 8009604:	60f8      	str	r0, [r7, #12]
 8009606:	1d3b      	adds	r3, r7, #4
 8009608:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009616:	2b01      	cmp	r3, #1
 8009618:	d101      	bne.n	800961e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800961a:	2302      	movs	r3, #2
 800961c:	e046      	b.n	80096ac <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2224      	movs	r2, #36	; 0x24
 800962a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f022 0201 	bic.w	r2, r2, #1
 800963c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d105      	bne.n	8009664 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009658:	1d3b      	adds	r3, r7, #4
 800965a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 f911 	bl	8009886 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f042 0201 	orr.w	r2, r2, #1
 8009672:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009674:	f7f8 fb34 	bl	8001ce0 <HAL_GetTick>
 8009678:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800967a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	2200      	movs	r2, #0
 8009684:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f7fe ffcf 	bl	800862c <UART_WaitOnFlagUntilTimeout>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009694:	2303      	movs	r3, #3
 8009696:	75fb      	strb	r3, [r7, #23]
 8009698:	e003      	b.n	80096a2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2220      	movs	r2, #32
 800969e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 80096aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3718      	adds	r7, #24
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b089      	sub	sp, #36	; 0x24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d101      	bne.n	80096ca <HAL_UARTEx_EnableStopMode+0x16>
 80096c6:	2302      	movs	r3, #2
 80096c8:	e021      	b.n	800970e <HAL_UARTEx_EnableStopMode+0x5a>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	e853 3f00 	ldrex	r3, [r3]
 80096de:	60bb      	str	r3, [r7, #8]
   return(result);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	f043 0302 	orr.w	r3, r3, #2
 80096e6:	61fb      	str	r3, [r7, #28]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	461a      	mov	r2, r3
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	61bb      	str	r3, [r7, #24]
 80096f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f4:	6979      	ldr	r1, [r7, #20]
 80096f6:	69ba      	ldr	r2, [r7, #24]
 80096f8:	e841 2300 	strex	r3, r2, [r1]
 80096fc:	613b      	str	r3, [r7, #16]
   return(result);
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e6      	bne.n	80096d2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3724      	adds	r7, #36	; 0x24
 8009712:	46bd      	mov	sp, r7
 8009714:	bc80      	pop	{r7}
 8009716:	4770      	bx	lr

08009718 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009726:	2b01      	cmp	r3, #1
 8009728:	d101      	bne.n	800972e <HAL_UARTEx_EnableFifoMode+0x16>
 800972a:	2302      	movs	r3, #2
 800972c:	e02b      	b.n	8009786 <HAL_UARTEx_EnableFifoMode+0x6e>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2224      	movs	r2, #36	; 0x24
 800973a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f022 0201 	bic.w	r2, r2, #1
 8009754:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800975c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009764:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f8ac 	bl	80098cc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2220      	movs	r2, #32
 8009778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b084      	sub	sp, #16
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d101      	bne.n	80097a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097a2:	2302      	movs	r3, #2
 80097a4:	e02d      	b.n	8009802 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2224      	movs	r2, #36	; 0x24
 80097b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f022 0201 	bic.w	r2, r2, #1
 80097cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	683a      	ldr	r2, [r7, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f872 	bl	80098cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2220      	movs	r2, #32
 80097f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800981a:	2b01      	cmp	r3, #1
 800981c:	d101      	bne.n	8009822 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800981e:	2302      	movs	r3, #2
 8009820:	e02d      	b.n	800987e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2224      	movs	r2, #36	; 0x24
 800982e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f022 0201 	bic.w	r2, r2, #1
 8009848:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	430a      	orrs	r2, r1
 800985c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f834 	bl	80098cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2220      	movs	r2, #32
 8009870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009886:	b480      	push	{r7}
 8009888:	b085      	sub	sp, #20
 800988a:	af00      	add	r7, sp, #0
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	1d3b      	adds	r3, r7, #4
 8009890:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f023 0210 	bic.w	r2, r3, #16
 800989e:	893b      	ldrh	r3, [r7, #8]
 80098a0:	4619      	mov	r1, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 80098b4:	7abb      	ldrb	r3, [r7, #10]
 80098b6:	061a      	lsls	r2, r3, #24
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	430a      	orrs	r2, r1
 80098be:	605a      	str	r2, [r3, #4]
}
 80098c0:	bf00      	nop
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bc80      	pop	{r7}
 80098c8:	4770      	bx	lr
	...

080098cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d108      	bne.n	80098ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098ec:	e031      	b.n	8009952 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098ee:	2308      	movs	r3, #8
 80098f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098f2:	2308      	movs	r3, #8
 80098f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	0e5b      	lsrs	r3, r3, #25
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	f003 0307 	and.w	r3, r3, #7
 8009904:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	0f5b      	lsrs	r3, r3, #29
 800990e:	b2db      	uxtb	r3, r3
 8009910:	f003 0307 	and.w	r3, r3, #7
 8009914:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009916:	7bbb      	ldrb	r3, [r7, #14]
 8009918:	7b3a      	ldrb	r2, [r7, #12]
 800991a:	4910      	ldr	r1, [pc, #64]	; (800995c <UARTEx_SetNbDataToProcess+0x90>)
 800991c:	5c8a      	ldrb	r2, [r1, r2]
 800991e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009922:	7b3a      	ldrb	r2, [r7, #12]
 8009924:	490e      	ldr	r1, [pc, #56]	; (8009960 <UARTEx_SetNbDataToProcess+0x94>)
 8009926:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009928:	fb93 f3f2 	sdiv	r3, r3, r2
 800992c:	b29a      	uxth	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	7b7a      	ldrb	r2, [r7, #13]
 8009938:	4908      	ldr	r1, [pc, #32]	; (800995c <UARTEx_SetNbDataToProcess+0x90>)
 800993a:	5c8a      	ldrb	r2, [r1, r2]
 800993c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009940:	7b7a      	ldrb	r2, [r7, #13]
 8009942:	4907      	ldr	r1, [pc, #28]	; (8009960 <UARTEx_SetNbDataToProcess+0x94>)
 8009944:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009946:	fb93 f3f2 	sdiv	r3, r3, r2
 800994a:	b29a      	uxth	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009952:	bf00      	nop
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	bc80      	pop	{r7}
 800995a:	4770      	bx	lr
 800995c:	0801d870 	.word	0x0801d870
 8009960:	0801d878 	.word	0x0801d878

08009964 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009968:	f7f8 f85e 	bl	8001a28 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800996c:	f000 f820 	bl	80099b0 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009970:	bf00      	nop
 8009972:	bd80      	pop	{r7, pc}

08009974 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800997c:	f012 fad4 	bl	801bf28 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8009980:	bf00      	nop
 8009982:	bd80      	pop	{r7, pc}

08009984 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009984:	b480      	push	{r7}
 8009986:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009988:	f3bf 8f4f 	dsb	sy
}
 800998c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800998e:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <__NVIC_SystemReset+0x24>)
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009996:	4904      	ldr	r1, [pc, #16]	; (80099a8 <__NVIC_SystemReset+0x24>)
 8009998:	4b04      	ldr	r3, [pc, #16]	; (80099ac <__NVIC_SystemReset+0x28>)
 800999a:	4313      	orrs	r3, r2
 800999c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800999e:	f3bf 8f4f 	dsb	sy
}
 80099a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80099a4:	bf00      	nop
 80099a6:	e7fd      	b.n	80099a4 <__NVIC_SystemReset+0x20>
 80099a8:	e000ed00 	.word	0xe000ed00
 80099ac:	05fa0004 	.word	0x05fa0004

080099b0 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 80099ba:	2300      	movs	r3, #0
 80099bc:	9302      	str	r3, [sp, #8]
 80099be:	2302      	movs	r3, #2
 80099c0:	9301      	str	r3, [sp, #4]
 80099c2:	2301      	movs	r3, #1
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	4b5a      	ldr	r3, [pc, #360]	; (8009b30 <LoRaWAN_Init+0x180>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	2100      	movs	r1, #0
 80099cc:	2002      	movs	r0, #2
 80099ce:	f012 fef9 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 80099d2:	2300      	movs	r3, #0
 80099d4:	9302      	str	r3, [sp, #8]
 80099d6:	2304      	movs	r3, #4
 80099d8:	9301      	str	r3, [sp, #4]
 80099da:	2302      	movs	r3, #2
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	4b55      	ldr	r3, [pc, #340]	; (8009b34 <LoRaWAN_Init+0x184>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	2100      	movs	r1, #0
 80099e4:	2002      	movs	r0, #2
 80099e6:	f012 feed 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 80099ea:	2300      	movs	r3, #0
 80099ec:	9302      	str	r3, [sp, #8]
 80099ee:	2302      	movs	r3, #2
 80099f0:	9301      	str	r3, [sp, #4]
 80099f2:	2301      	movs	r3, #1
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	4b50      	ldr	r3, [pc, #320]	; (8009b38 <LoRaWAN_Init+0x188>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	2100      	movs	r1, #0
 80099fc:	2002      	movs	r0, #2
 80099fe:	f012 fee1 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8009a02:	1d3b      	adds	r3, r7, #4
 8009a04:	4619      	mov	r1, r3
 8009a06:	2000      	movs	r0, #0
 8009a08:	f003 f982 	bl	800cd10 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	0e1b      	lsrs	r3, r3, #24
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	461a      	mov	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	0c1b      	lsrs	r3, r3, #16
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	0a1b      	lsrs	r3, r3, #8
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	9302      	str	r3, [sp, #8]
 8009a24:	9101      	str	r1, [sp, #4]
 8009a26:	9200      	str	r2, [sp, #0]
 8009a28:	4b44      	ldr	r3, [pc, #272]	; (8009b3c <LoRaWAN_Init+0x18c>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	2002      	movs	r0, #2
 8009a30:	f012 fec8 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8009a34:	1d3b      	adds	r3, r7, #4
 8009a36:	4619      	mov	r1, r3
 8009a38:	2001      	movs	r0, #1
 8009a3a:	f003 f969 	bl	800cd10 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	0e1b      	lsrs	r3, r3, #24
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	461a      	mov	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	0c1b      	lsrs	r3, r3, #16
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	0a1b      	lsrs	r3, r3, #8
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	b2c0      	uxtb	r0, r0
 8009a58:	9003      	str	r0, [sp, #12]
 8009a5a:	9302      	str	r3, [sp, #8]
 8009a5c:	9101      	str	r1, [sp, #4]
 8009a5e:	9200      	str	r2, [sp, #0]
 8009a60:	4b37      	ldr	r3, [pc, #220]	; (8009b40 <LoRaWAN_Init+0x190>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	2100      	movs	r1, #0
 8009a66:	2002      	movs	r0, #2
 8009a68:	f012 feac 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	4b34      	ldr	r3, [pc, #208]	; (8009b44 <LoRaWAN_Init+0x194>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009a78:	4833      	ldr	r0, [pc, #204]	; (8009b48 <LoRaWAN_Init+0x198>)
 8009a7a:	f012 fbf5 	bl	801c268 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8009a7e:	2300      	movs	r3, #0
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	4b32      	ldr	r3, [pc, #200]	; (8009b4c <LoRaWAN_Init+0x19c>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009a8a:	4831      	ldr	r0, [pc, #196]	; (8009b50 <LoRaWAN_Init+0x1a0>)
 8009a8c:	f012 fbec 	bl	801c268 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8009a90:	2300      	movs	r3, #0
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	4b2f      	ldr	r3, [pc, #188]	; (8009b54 <LoRaWAN_Init+0x1a4>)
 8009a96:	2201      	movs	r2, #1
 8009a98:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009a9c:	482e      	ldr	r0, [pc, #184]	; (8009b58 <LoRaWAN_Init+0x1a8>)
 8009a9e:	f012 fbe3 	bl	801c268 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	4b2d      	ldr	r3, [pc, #180]	; (8009b5c <LoRaWAN_Init+0x1ac>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009aae:	482c      	ldr	r0, [pc, #176]	; (8009b60 <LoRaWAN_Init+0x1b0>)
 8009ab0:	f012 fbda 	bl	801c268 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009ab4:	4a2b      	ldr	r2, [pc, #172]	; (8009b64 <LoRaWAN_Init+0x1b4>)
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	2001      	movs	r0, #1
 8009aba:	f012 fb31 	bl	801c120 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009abe:	4a2a      	ldr	r2, [pc, #168]	; (8009b68 <LoRaWAN_Init+0x1b8>)
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	2002      	movs	r0, #2
 8009ac4:	f012 fb2c 	bl	801c120 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8009ac8:	4a28      	ldr	r2, [pc, #160]	; (8009b6c <LoRaWAN_Init+0x1bc>)
 8009aca:	2100      	movs	r1, #0
 8009acc:	2004      	movs	r0, #4
 8009ace:	f012 fb27 	bl	801c120 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8009ad2:	4a27      	ldr	r2, [pc, #156]	; (8009b70 <LoRaWAN_Init+0x1c0>)
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	2008      	movs	r0, #8
 8009ad8:	f012 fb22 	bl	801c120 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009adc:	f000 fd38 	bl	800a550 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8009ae0:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 8009ae4:	4823      	ldr	r0, [pc, #140]	; (8009b74 <LoRaWAN_Init+0x1c4>)
 8009ae6:	f002 f9fb 	bl	800bee0 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009aea:	4823      	ldr	r0, [pc, #140]	; (8009b78 <LoRaWAN_Init+0x1c8>)
 8009aec:	f002 fa56 	bl	800bf9c <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 8009af0:	4819      	ldr	r0, [pc, #100]	; (8009b58 <LoRaWAN_Init+0x1a8>)
 8009af2:	f012 fbef 	bl	801c2d4 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 8009af6:	4b21      	ldr	r3, [pc, #132]	; (8009b7c <LoRaWAN_Init+0x1cc>)
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	4a21      	ldr	r2, [pc, #132]	; (8009b80 <LoRaWAN_Init+0x1d0>)
 8009afc:	7812      	ldrb	r2, [r2, #0]
 8009afe:	4611      	mov	r1, r2
 8009b00:	4618      	mov	r0, r3
 8009b02:	f002 fbc5 	bl	800c290 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009b06:	4b1f      	ldr	r3, [pc, #124]	; (8009b84 <LoRaWAN_Init+0x1d4>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10b      	bne.n	8009b26 <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009b0e:	4b1e      	ldr	r3, [pc, #120]	; (8009b88 <LoRaWAN_Init+0x1d8>)
 8009b10:	6819      	ldr	r1, [r3, #0]
 8009b12:	2300      	movs	r3, #0
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	4b1d      	ldr	r3, [pc, #116]	; (8009b8c <LoRaWAN_Init+0x1dc>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	481d      	ldr	r0, [pc, #116]	; (8009b90 <LoRaWAN_Init+0x1e0>)
 8009b1c:	f012 fba4 	bl	801c268 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8009b20:	481b      	ldr	r0, [pc, #108]	; (8009b90 <LoRaWAN_Init+0x1e0>)
 8009b22:	f012 fbd7 	bl	801c2d4 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8009b26:	bf00      	nop
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	0801ce70 	.word	0x0801ce70
 8009b34:	0801ce94 	.word	0x0801ce94
 8009b38:	0801ceb8 	.word	0x0801ceb8
 8009b3c:	0801cedc 	.word	0x0801cedc
 8009b40:	0801cf00 	.word	0x0801cf00
 8009b44:	0800a045 	.word	0x0800a045
 8009b48:	20000460 	.word	0x20000460
 8009b4c:	0800a057 	.word	0x0800a057
 8009b50:	20000478 	.word	0x20000478
 8009b54:	0800a069 	.word	0x0800a069
 8009b58:	20000490 	.word	0x20000490
 8009b5c:	0800a419 	.word	0x0800a419
 8009b60:	20000354 	.word	0x20000354
 8009b64:	0800c225 	.word	0x0800c225
 8009b68:	08009d05 	.word	0x08009d05
 8009b6c:	0800a43d 	.word	0x0800a43d
 8009b70:	0800a399 	.word	0x0800a399
 8009b74:	20000024 	.word	0x20000024
 8009b78:	20000070 	.word	0x20000070
 8009b7c:	20000020 	.word	0x20000020
 8009b80:	20000021 	.word	0x20000021
 8009b84:	20000338 	.word	0x20000338
 8009b88:	20000084 	.word	0x20000084
 8009b8c:	0800a021 	.word	0x0800a021
 8009b90:	2000033c 	.word	0x2000033c

08009b94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8009b9e:	88fb      	ldrh	r3, [r7, #6]
 8009ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ba4:	d104      	bne.n	8009bb0 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	2002      	movs	r0, #2
 8009baa:	f012 fadb 	bl	801c164 <UTIL_SEQ_SetTask>
      }
      break;
 8009bae:	e000      	b.n	8009bb2 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 8009bb0:	bf00      	nop
  }
}
 8009bb2:	bf00      	nop
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009bbc:	b5b0      	push	{r4, r5, r7, lr}
 8009bbe:	b08a      	sub	sp, #40	; 0x28
 8009bc0:	af06      	add	r7, sp, #24
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 8086 	beq.w	8009cde <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 8009bd2:	4845      	ldr	r0, [pc, #276]	; (8009ce8 <OnRxData+0x12c>)
 8009bd4:	f012 fb7e 	bl	801c2d4 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d05a      	beq.n	8009c96 <OnRxData+0xda>
    {
      if (appData != NULL)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d057      	beq.n	8009c96 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d050      	beq.n	8009c96 <OnRxData+0xda>
        {
          switch (appData->Port)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d01f      	beq.n	8009c3c <OnRxData+0x80>
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d145      	bne.n	8009c8c <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	785b      	ldrb	r3, [r3, #1]
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d143      	bne.n	8009c90 <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d00e      	beq.n	8009c30 <OnRxData+0x74>
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	dc10      	bgt.n	8009c38 <OnRxData+0x7c>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d002      	beq.n	8009c20 <OnRxData+0x64>
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d004      	beq.n	8009c28 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 8009c1e:	e00b      	b.n	8009c38 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 8009c20:	2000      	movs	r0, #0
 8009c22:	f002 fcc1 	bl	800c5a8 <LmHandlerRequestClass>
                    break;
 8009c26:	e008      	b.n	8009c3a <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 8009c28:	2001      	movs	r0, #1
 8009c2a:	f002 fcbd 	bl	800c5a8 <LmHandlerRequestClass>
                    break;
 8009c2e:	e004      	b.n	8009c3a <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 8009c30:	2002      	movs	r0, #2
 8009c32:	f002 fcb9 	bl	800c5a8 <LmHandlerRequestClass>
                    break;
 8009c36:	e000      	b.n	8009c3a <OnRxData+0x7e>
                    break;
 8009c38:	bf00      	nop
                }
              }
              break;
 8009c3a:	e029      	b.n	8009c90 <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	785b      	ldrb	r3, [r3, #1]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d127      	bne.n	8009c94 <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	4b26      	ldr	r3, [pc, #152]	; (8009cec <OnRxData+0x130>)
 8009c52:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 8009c54:	4b25      	ldr	r3, [pc, #148]	; (8009cec <OnRxData+0x130>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10b      	bne.n	8009c74 <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8009c5c:	4b24      	ldr	r3, [pc, #144]	; (8009cf0 <OnRxData+0x134>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2100      	movs	r1, #0
 8009c62:	2003      	movs	r0, #3
 8009c64:	f012 fdae 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 8009c68:	2201      	movs	r2, #1
 8009c6a:	2120      	movs	r1, #32
 8009c6c:	4821      	ldr	r0, [pc, #132]	; (8009cf4 <OnRxData+0x138>)
 8009c6e:	f7fb f8e9 	bl	8004e44 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 8009c72:	e00f      	b.n	8009c94 <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8009c74:	4b20      	ldr	r3, [pc, #128]	; (8009cf8 <OnRxData+0x13c>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	2100      	movs	r1, #0
 8009c7a:	2003      	movs	r0, #3
 8009c7c:	f012 fda2 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 8009c80:	2200      	movs	r2, #0
 8009c82:	2120      	movs	r1, #32
 8009c84:	481b      	ldr	r0, [pc, #108]	; (8009cf4 <OnRxData+0x138>)
 8009c86:	f7fb f8dd 	bl	8004e44 <HAL_GPIO_WritePin>
              break;
 8009c8a:	e003      	b.n	8009c94 <OnRxData+0xd8>

            default:

              break;
 8009c8c:	bf00      	nop
 8009c8e:	e002      	b.n	8009c96 <OnRxData+0xda>
              break;
 8009c90:	bf00      	nop
 8009c92:	e000      	b.n	8009c96 <OnRxData+0xda>
              break;
 8009c94:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	7c1b      	ldrb	r3, [r3, #16]
 8009c9a:	2b05      	cmp	r3, #5
 8009c9c:	d81f      	bhi.n	8009cde <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	7bfa      	ldrb	r2, [r7, #15]
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	f991 1008 	ldrsb.w	r1, [r1, #8]
 8009caa:	460c      	mov	r4, r1
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	7c09      	ldrb	r1, [r1, #16]
 8009cb0:	4608      	mov	r0, r1
 8009cb2:	4912      	ldr	r1, [pc, #72]	; (8009cfc <OnRxData+0x140>)
 8009cb4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009cb8:	6838      	ldr	r0, [r7, #0]
 8009cba:	f990 0009 	ldrsb.w	r0, [r0, #9]
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	6838      	ldr	r0, [r7, #0]
 8009cc2:	f990 000a 	ldrsb.w	r0, [r0, #10]
 8009cc6:	9005      	str	r0, [sp, #20]
 8009cc8:	9504      	str	r5, [sp, #16]
 8009cca:	9103      	str	r1, [sp, #12]
 8009ccc:	9402      	str	r4, [sp, #8]
 8009cce:	9201      	str	r2, [sp, #4]
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	4b0b      	ldr	r3, [pc, #44]	; (8009d00 <OnRxData+0x144>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	2003      	movs	r0, #3
 8009cda:	f012 fd73 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 8009cde:	bf00      	nop
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20000478 	.word	0x20000478
 8009cec:	2000045e 	.word	0x2000045e
 8009cf0:	0801cf24 	.word	0x0801cf24
 8009cf4:	48000400 	.word	0x48000400
 8009cf8:	0801cf30 	.word	0x0801cf30
 8009cfc:	20000008 	.word	0x20000008
 8009d00:	0801cf3c 	.word	0x0801cf3c

08009d04 <SendTxData>:

static void SendTxData(void)
{
 8009d04:	b590      	push	{r4, r7, lr}
 8009d06:	b091      	sub	sp, #68	; 0x44
 8009d08:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 8009d0a:	23ff      	movs	r3, #255	; 0xff
 8009d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 8009d10:	f7f7 feba 	bl	8001a88 <GetBatteryLevel>
 8009d14:	4603      	mov	r3, r0
 8009d16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 8009d26:	2300      	movs	r3, #0
 8009d28:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 8009d3a:	1d3b      	adds	r3, r7, #4
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7f8 f863 	bl	8001e08 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8009d42:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	4b8f      	ldr	r3, [pc, #572]	; (8009f88 <SendTxData+0x284>)
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	2002      	movs	r0, #2
 8009d50:	f012 fd38 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7f6 fee0 	bl	8000b1c <__aeabi_f2iz>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	b21b      	sxth	r3, r3
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	4b8a      	ldr	r3, [pc, #552]	; (8009f8c <SendTxData+0x288>)
 8009d64:	2201      	movs	r2, #1
 8009d66:	2100      	movs	r1, #0
 8009d68:	2002      	movs	r0, #2
 8009d6a:	f012 fd2b 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 8009d6e:	4b88      	ldr	r3, [pc, #544]	; (8009f90 <SendTxData+0x28c>)
 8009d70:	2202      	movs	r2, #2
 8009d72:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4987      	ldr	r1, [pc, #540]	; (8009f94 <SendTxData+0x290>)
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7f6 fd7f 	bl	800087c <__aeabi_fmul>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7f6 fef1 	bl	8000b68 <__aeabi_f2uiz>
 8009d86:	4603      	mov	r3, r0
 8009d88:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7f6 fec5 	bl	8000b1c <__aeabi_f2iz>
 8009d92:	4603      	mov	r3, r0
 8009d94:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	497f      	ldr	r1, [pc, #508]	; (8009f98 <SendTxData+0x294>)
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7f6 fd6e 	bl	800087c <__aeabi_fmul>
 8009da0:	4603      	mov	r3, r0
 8009da2:	497c      	ldr	r1, [pc, #496]	; (8009f94 <SendTxData+0x290>)
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7f6 fe1d 	bl	80009e4 <__aeabi_fdiv>
 8009daa:	4603      	mov	r3, r0
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7f6 fedb 	bl	8000b68 <__aeabi_f2uiz>
 8009db2:	4603      	mov	r3, r0
 8009db4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 8009db6:	4b76      	ldr	r3, [pc, #472]	; (8009f90 <SendTxData+0x28c>)
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbc:	1c59      	adds	r1, r3, #1
 8009dbe:	6339      	str	r1, [r7, #48]	; 0x30
 8009dc0:	4413      	add	r3, r2
 8009dc2:	4a76      	ldr	r2, [pc, #472]	; (8009f9c <SendTxData+0x298>)
 8009dc4:	7812      	ldrb	r2, [r2, #0]
 8009dc6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8009dc8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009dca:	0a1b      	lsrs	r3, r3, #8
 8009dcc:	b298      	uxth	r0, r3
 8009dce:	4b70      	ldr	r3, [pc, #448]	; (8009f90 <SendTxData+0x28c>)
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	1c59      	adds	r1, r3, #1
 8009dd6:	6339      	str	r1, [r7, #48]	; 0x30
 8009dd8:	4413      	add	r3, r2
 8009dda:	b2c2      	uxtb	r2, r0
 8009ddc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8009dde:	4b6c      	ldr	r3, [pc, #432]	; (8009f90 <SendTxData+0x28c>)
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de4:	1c59      	adds	r1, r3, #1
 8009de6:	6339      	str	r1, [r7, #48]	; 0x30
 8009de8:	4413      	add	r3, r2
 8009dea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009dec:	b2d2      	uxtb	r2, r2
 8009dee:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8009df0:	4b67      	ldr	r3, [pc, #412]	; (8009f90 <SendTxData+0x28c>)
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df6:	1c59      	adds	r1, r3, #1
 8009df8:	6339      	str	r1, [r7, #48]	; 0x30
 8009dfa:	4413      	add	r3, r2
 8009dfc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8009dfe:	b2d2      	uxtb	r2, r2
 8009e00:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8009e02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009e04:	0a1b      	lsrs	r3, r3, #8
 8009e06:	b298      	uxth	r0, r3
 8009e08:	4b61      	ldr	r3, [pc, #388]	; (8009f90 <SendTxData+0x28c>)
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0e:	1c59      	adds	r1, r3, #1
 8009e10:	6339      	str	r1, [r7, #48]	; 0x30
 8009e12:	4413      	add	r3, r2
 8009e14:	b2c2      	uxtb	r2, r0
 8009e16:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8009e18:	4b5d      	ldr	r3, [pc, #372]	; (8009f90 <SendTxData+0x28c>)
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1e:	1c59      	adds	r1, r3, #1
 8009e20:	6339      	str	r1, [r7, #48]	; 0x30
 8009e22:	4413      	add	r3, r2
 8009e24:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009e26:	b2d2      	uxtb	r2, r2
 8009e28:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8009e2a:	4b5d      	ldr	r3, [pc, #372]	; (8009fa0 <SendTxData+0x29c>)
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	2b08      	cmp	r3, #8
 8009e30:	d007      	beq.n	8009e42 <SendTxData+0x13e>
 8009e32:	4b5b      	ldr	r3, [pc, #364]	; (8009fa0 <SendTxData+0x29c>)
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d003      	beq.n	8009e42 <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8009e3a:	4b59      	ldr	r3, [pc, #356]	; (8009fa0 <SendTxData+0x29c>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d120      	bne.n	8009e84 <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 8009e42:	4b53      	ldr	r3, [pc, #332]	; (8009f90 <SendTxData+0x28c>)
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e48:	1c59      	adds	r1, r3, #1
 8009e4a:	6339      	str	r1, [r7, #48]	; 0x30
 8009e4c:	4413      	add	r3, r2
 8009e4e:	2200      	movs	r2, #0
 8009e50:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009e52:	4b4f      	ldr	r3, [pc, #316]	; (8009f90 <SendTxData+0x28c>)
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e58:	1c59      	adds	r1, r3, #1
 8009e5a:	6339      	str	r1, [r7, #48]	; 0x30
 8009e5c:	4413      	add	r3, r2
 8009e5e:	2200      	movs	r2, #0
 8009e60:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009e62:	4b4b      	ldr	r3, [pc, #300]	; (8009f90 <SendTxData+0x28c>)
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e68:	1c59      	adds	r1, r3, #1
 8009e6a:	6339      	str	r1, [r7, #48]	; 0x30
 8009e6c:	4413      	add	r3, r2
 8009e6e:	2200      	movs	r2, #0
 8009e70:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009e72:	4b47      	ldr	r3, [pc, #284]	; (8009f90 <SendTxData+0x28c>)
 8009e74:	685a      	ldr	r2, [r3, #4]
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	1c59      	adds	r1, r3, #1
 8009e7a:	6339      	str	r1, [r7, #48]	; 0x30
 8009e7c:	4413      	add	r3, r2
 8009e7e:	2200      	movs	r2, #0
 8009e80:	701a      	strb	r2, [r3, #0]
 8009e82:	e05b      	b.n	8009f3c <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8009e8c:	4b40      	ldr	r3, [pc, #256]	; (8009f90 <SendTxData+0x28c>)
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e92:	1c59      	adds	r1, r3, #1
 8009e94:	6339      	str	r1, [r7, #48]	; 0x30
 8009e96:	18d4      	adds	r4, r2, r3
 8009e98:	f7f7 fdf6 	bl	8001a88 <GetBatteryLevel>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	1418      	asrs	r0, r3, #16
 8009ea4:	4b3a      	ldr	r3, [pc, #232]	; (8009f90 <SendTxData+0x28c>)
 8009ea6:	685a      	ldr	r2, [r3, #4]
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eaa:	1c59      	adds	r1, r3, #1
 8009eac:	6339      	str	r1, [r7, #48]	; 0x30
 8009eae:	4413      	add	r3, r2
 8009eb0:	b2c2      	uxtb	r2, r0
 8009eb2:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	1218      	asrs	r0, r3, #8
 8009eb8:	4b35      	ldr	r3, [pc, #212]	; (8009f90 <SendTxData+0x28c>)
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebe:	1c59      	adds	r1, r3, #1
 8009ec0:	6339      	str	r1, [r7, #48]	; 0x30
 8009ec2:	4413      	add	r3, r2
 8009ec4:	b2c2      	uxtb	r2, r0
 8009ec6:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8009ec8:	4b31      	ldr	r3, [pc, #196]	; (8009f90 <SendTxData+0x28c>)
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	1c59      	adds	r1, r3, #1
 8009ed0:	6339      	str	r1, [r7, #48]	; 0x30
 8009ed2:	4413      	add	r3, r2
 8009ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed6:	b2d2      	uxtb	r2, r2
 8009ed8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	1418      	asrs	r0, r3, #16
 8009ede:	4b2c      	ldr	r3, [pc, #176]	; (8009f90 <SendTxData+0x28c>)
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee4:	1c59      	adds	r1, r3, #1
 8009ee6:	6339      	str	r1, [r7, #48]	; 0x30
 8009ee8:	4413      	add	r3, r2
 8009eea:	b2c2      	uxtb	r2, r0
 8009eec:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8009eee:	6a3b      	ldr	r3, [r7, #32]
 8009ef0:	1218      	asrs	r0, r3, #8
 8009ef2:	4b27      	ldr	r3, [pc, #156]	; (8009f90 <SendTxData+0x28c>)
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef8:	1c59      	adds	r1, r3, #1
 8009efa:	6339      	str	r1, [r7, #48]	; 0x30
 8009efc:	4413      	add	r3, r2
 8009efe:	b2c2      	uxtb	r2, r0
 8009f00:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8009f02:	4b23      	ldr	r3, [pc, #140]	; (8009f90 <SendTxData+0x28c>)
 8009f04:	685a      	ldr	r2, [r3, #4]
 8009f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f08:	1c59      	adds	r1, r3, #1
 8009f0a:	6339      	str	r1, [r7, #48]	; 0x30
 8009f0c:	4413      	add	r3, r2
 8009f0e:	6a3a      	ldr	r2, [r7, #32]
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8009f14:	8bfb      	ldrh	r3, [r7, #30]
 8009f16:	0a1b      	lsrs	r3, r3, #8
 8009f18:	b298      	uxth	r0, r3
 8009f1a:	4b1d      	ldr	r3, [pc, #116]	; (8009f90 <SendTxData+0x28c>)
 8009f1c:	685a      	ldr	r2, [r3, #4]
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f20:	1c59      	adds	r1, r3, #1
 8009f22:	6339      	str	r1, [r7, #48]	; 0x30
 8009f24:	4413      	add	r3, r2
 8009f26:	b2c2      	uxtb	r2, r0
 8009f28:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8009f2a:	4b19      	ldr	r3, [pc, #100]	; (8009f90 <SendTxData+0x28c>)
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f30:	1c59      	adds	r1, r3, #1
 8009f32:	6339      	str	r1, [r7, #48]	; 0x30
 8009f34:	4413      	add	r3, r2
 8009f36:	8bfa      	ldrh	r2, [r7, #30]
 8009f38:	b2d2      	uxtb	r2, r2
 8009f3a:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	4b13      	ldr	r3, [pc, #76]	; (8009f90 <SendTxData+0x28c>)
 8009f42:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8009f44:	4b17      	ldr	r3, [pc, #92]	; (8009fa4 <SendTxData+0x2a0>)
 8009f46:	7a5b      	ldrb	r3, [r3, #9]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d007      	beq.n	8009f5c <SendTxData+0x258>
 8009f4c:	f002 fa22 	bl	800c394 <LmHandlerJoinStatus>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d102      	bne.n	8009f5c <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 8009f56:	4813      	ldr	r0, [pc, #76]	; (8009fa4 <SendTxData+0x2a0>)
 8009f58:	f012 fa2a 	bl	801c3b0 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8009f5c:	4b10      	ldr	r3, [pc, #64]	; (8009fa0 <SendTxData+0x29c>)
 8009f5e:	78db      	ldrb	r3, [r3, #3]
 8009f60:	2200      	movs	r2, #0
 8009f62:	4619      	mov	r1, r3
 8009f64:	480a      	ldr	r0, [pc, #40]	; (8009f90 <SendTxData+0x28c>)
 8009f66:	f002 fa31 	bl	800c3cc <LmHandlerSend>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 8009f70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d119      	bne.n	8009fac <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8009f78:	4b0b      	ldr	r3, [pc, #44]	; (8009fa8 <SendTxData+0x2a4>)
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	2001      	movs	r0, #1
 8009f80:	f012 fc20 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
 8009f84:	e029      	b.n	8009fda <SendTxData+0x2d6>
 8009f86:	bf00      	nop
 8009f88:	0801cf84 	.word	0x0801cf84
 8009f8c:	0801cf90 	.word	0x0801cf90
 8009f90:	20000088 	.word	0x20000088
 8009f94:	41200000 	.word	0x41200000
 8009f98:	42c80000 	.word	0x42c80000
 8009f9c:	2000045e 	.word	0x2000045e
 8009fa0:	20000070 	.word	0x20000070
 8009fa4:	20000490 	.word	0x20000490
 8009fa8:	0801cf9c 	.word	0x0801cf9c
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8009fac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009fb0:	f113 0f06 	cmn.w	r3, #6
 8009fb4:	d111      	bne.n	8009fda <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8009fb6:	f002 f961 	bl	800c27c <LmHandlerGetDutyCycleWaitTime>
 8009fba:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 8009fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00b      	beq.n	8009fda <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8009fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc4:	4a11      	ldr	r2, [pc, #68]	; (800a00c <SendTxData+0x308>)
 8009fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009fca:	099b      	lsrs	r3, r3, #6
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	4b10      	ldr	r3, [pc, #64]	; (800a010 <SendTxData+0x30c>)
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	2001      	movs	r0, #1
 8009fd6:	f012 fbf5 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 8009fda:	4b0e      	ldr	r3, [pc, #56]	; (800a014 <SendTxData+0x310>)
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10f      	bne.n	800a002 <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 8009fe2:	480d      	ldr	r0, [pc, #52]	; (800a018 <SendTxData+0x314>)
 8009fe4:	f012 f9e4 	bl	801c3b0 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8009fe8:	4b0c      	ldr	r3, [pc, #48]	; (800a01c <SendTxData+0x318>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	bf38      	it	cc
 8009ff2:	4613      	movcc	r3, r2
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4808      	ldr	r0, [pc, #32]	; (800a018 <SendTxData+0x314>)
 8009ff8:	f012 fa4a 	bl	801c490 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8009ffc:	4806      	ldr	r0, [pc, #24]	; (800a018 <SendTxData+0x314>)
 8009ffe:	f012 f969 	bl	801c2d4 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a002:	bf00      	nop
 800a004:	373c      	adds	r7, #60	; 0x3c
 800a006:	46bd      	mov	sp, r7
 800a008:	bd90      	pop	{r4, r7, pc}
 800a00a:	bf00      	nop
 800a00c:	10624dd3 	.word	0x10624dd3
 800a010:	0801cfac 	.word	0x0801cfac
 800a014:	20000338 	.word	0x20000338
 800a018:	2000033c 	.word	0x2000033c
 800a01c:	20000084 	.word	0x20000084

0800a020 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a028:	2100      	movs	r1, #0
 800a02a:	2002      	movs	r0, #2
 800a02c:	f012 f89a 	bl	801c164 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a030:	4803      	ldr	r0, [pc, #12]	; (800a040 <OnTxTimerEvent+0x20>)
 800a032:	f012 f94f 	bl	801c2d4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a036:	bf00      	nop
 800a038:	3708      	adds	r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	2000033c 	.word	0x2000033c

0800a044 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	bc80      	pop	{r7}
 800a054:	4770      	bx	lr

0800a056 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a056:	b480      	push	{r7}
 800a058:	b083      	sub	sp, #12
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a05e:	bf00      	nop
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	bc80      	pop	{r7}
 800a066:	4770      	bx	lr

0800a068 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	bc80      	pop	{r7}
 800a078:	4770      	bx	lr
	...

0800a07c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af04      	add	r7, sp, #16
 800a082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d041      	beq.n	800a10e <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d03d      	beq.n	800a10e <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a092:	4821      	ldr	r0, [pc, #132]	; (800a118 <OnTxData+0x9c>)
 800a094:	f012 f91e 	bl	801c2d4 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a098:	4b20      	ldr	r3, [pc, #128]	; (800a11c <OnTxData+0xa0>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	2100      	movs	r1, #0
 800a09e:	2002      	movs	r0, #2
 800a0a0:	f012 fb90 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	7c12      	ldrb	r2, [r2, #16]
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800a0bc:	9203      	str	r2, [sp, #12]
 800a0be:	9002      	str	r0, [sp, #8]
 800a0c0:	9101      	str	r1, [sp, #4]
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	4b16      	ldr	r3, [pc, #88]	; (800a120 <OnTxData+0xa4>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	2003      	movs	r0, #3
 800a0cc:	f012 fb7a 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a0d0:	4b14      	ldr	r3, [pc, #80]	; (800a124 <OnTxData+0xa8>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	2003      	movs	r0, #3
 800a0d8:	f012 fb74 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	7a1b      	ldrb	r3, [r3, #8]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d10e      	bne.n	800a102 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7a5b      	ldrb	r3, [r3, #9]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d001      	beq.n	800a0f0 <OnTxData+0x74>
 800a0ec:	4b0e      	ldr	r3, [pc, #56]	; (800a128 <OnTxData+0xac>)
 800a0ee:	e000      	b.n	800a0f2 <OnTxData+0x76>
 800a0f0:	4b0e      	ldr	r3, [pc, #56]	; (800a12c <OnTxData+0xb0>)
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	4b0e      	ldr	r3, [pc, #56]	; (800a130 <OnTxData+0xb4>)
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	2003      	movs	r0, #3
 800a0fc:	f012 fb62 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a100:	e005      	b.n	800a10e <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a102:	4b0c      	ldr	r3, [pc, #48]	; (800a134 <OnTxData+0xb8>)
 800a104:	2200      	movs	r2, #0
 800a106:	2100      	movs	r1, #0
 800a108:	2003      	movs	r0, #3
 800a10a:	f012 fb5b 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800a10e:	bf00      	nop
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	20000460 	.word	0x20000460
 800a11c:	0801cfcc 	.word	0x0801cfcc
 800a120:	0801d000 	.word	0x0801d000
 800a124:	0801d034 	.word	0x0801d034
 800a128:	0801d044 	.word	0x0801d044
 800a12c:	0801d048 	.word	0x0801d048
 800a130:	0801d050 	.word	0x0801d050
 800a134:	0801d064 	.word	0x0801d064

0800a138 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d039      	beq.n	800a1ba <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d11e      	bne.n	800a18e <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800a150:	2100      	movs	r1, #0
 800a152:	2004      	movs	r0, #4
 800a154:	f012 f806 	bl	801c164 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800a158:	481a      	ldr	r0, [pc, #104]	; (800a1c4 <OnJoinRequest+0x8c>)
 800a15a:	f012 f929 	bl	801c3b0 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a15e:	4b1a      	ldr	r3, [pc, #104]	; (800a1c8 <OnJoinRequest+0x90>)
 800a160:	2200      	movs	r2, #0
 800a162:	2100      	movs	r1, #0
 800a164:	2002      	movs	r0, #2
 800a166:	f012 fb2d 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	799b      	ldrb	r3, [r3, #6]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d106      	bne.n	800a180 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a172:	4b16      	ldr	r3, [pc, #88]	; (800a1cc <OnJoinRequest+0x94>)
 800a174:	2200      	movs	r2, #0
 800a176:	2100      	movs	r1, #0
 800a178:	2002      	movs	r0, #2
 800a17a:	f012 fb23 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a17e:	e01c      	b.n	800a1ba <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a180:	4b13      	ldr	r3, [pc, #76]	; (800a1d0 <OnJoinRequest+0x98>)
 800a182:	2200      	movs	r2, #0
 800a184:	2100      	movs	r1, #0
 800a186:	2002      	movs	r0, #2
 800a188:	f012 fb1c 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800a18c:	e015      	b.n	800a1ba <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a18e:	4b11      	ldr	r3, [pc, #68]	; (800a1d4 <OnJoinRequest+0x9c>)
 800a190:	2200      	movs	r2, #0
 800a192:	2100      	movs	r1, #0
 800a194:	2002      	movs	r0, #2
 800a196:	f012 fb15 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	799b      	ldrb	r3, [r3, #6]
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d10b      	bne.n	800a1ba <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800a1a2:	4b0d      	ldr	r3, [pc, #52]	; (800a1d8 <OnJoinRequest+0xa0>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	2002      	movs	r0, #2
 800a1aa:	f012 fb0b 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800a1ae:	4b0b      	ldr	r3, [pc, #44]	; (800a1dc <OnJoinRequest+0xa4>)
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	2101      	movs	r1, #1
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f002 f86b 	bl	800c290 <LmHandlerJoin>
}
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20000490 	.word	0x20000490
 800a1c8:	0801d074 	.word	0x0801d074
 800a1cc:	0801d08c 	.word	0x0801d08c
 800a1d0:	0801d0ac 	.word	0x0801d0ac
 800a1d4:	0801d0cc 	.word	0x0801d0cc
 800a1d8:	0801d0e8 	.word	0x0801d0e8
 800a1dc:	20000020 	.word	0x20000020

0800a1e0 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1e2:	b093      	sub	sp, #76	; 0x4c
 800a1e4:	af0c      	add	r7, sp, #48	; 0x30
 800a1e6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d056      	beq.n	800a29c <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	785b      	ldrb	r3, [r3, #1]
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d008      	beq.n	800a208 <OnBeaconStatusChange+0x28>
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	d049      	beq.n	800a28e <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800a1fa:	4b2a      	ldr	r3, [pc, #168]	; (800a2a4 <OnBeaconStatusChange+0xc4>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	2100      	movs	r1, #0
 800a200:	2002      	movs	r0, #2
 800a202:	f012 fadf 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a206:	e049      	b.n	800a29c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	7c1b      	ldrb	r3, [r3, #16]
 800a20c:	4618      	mov	r0, r3
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a214:	461c      	mov	r4, r3
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800a21c:	461d      	mov	r5, r3
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	6852      	ldr	r2, [r2, #4]
 800a226:	6979      	ldr	r1, [r7, #20]
 800a228:	7d89      	ldrb	r1, [r1, #22]
 800a22a:	460e      	mov	r6, r1
 800a22c:	6979      	ldr	r1, [r7, #20]
 800a22e:	7dc9      	ldrb	r1, [r1, #23]
 800a230:	6139      	str	r1, [r7, #16]
 800a232:	6979      	ldr	r1, [r7, #20]
 800a234:	7e09      	ldrb	r1, [r1, #24]
 800a236:	60f9      	str	r1, [r7, #12]
 800a238:	6979      	ldr	r1, [r7, #20]
 800a23a:	7e49      	ldrb	r1, [r1, #25]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	6979      	ldr	r1, [r7, #20]
 800a240:	7e89      	ldrb	r1, [r1, #26]
 800a242:	6079      	str	r1, [r7, #4]
 800a244:	6979      	ldr	r1, [r7, #20]
 800a246:	7ec9      	ldrb	r1, [r1, #27]
 800a248:	6039      	str	r1, [r7, #0]
 800a24a:	6979      	ldr	r1, [r7, #20]
 800a24c:	7f09      	ldrb	r1, [r1, #28]
 800a24e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a250:	f8d7 c000 	ldr.w	ip, [r7]
 800a254:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800a258:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a25c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800a260:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800a264:	f8cd c020 	str.w	ip, [sp, #32]
 800a268:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a26c:	f8cd c01c 	str.w	ip, [sp, #28]
 800a270:	6939      	ldr	r1, [r7, #16]
 800a272:	9106      	str	r1, [sp, #24]
 800a274:	9605      	str	r6, [sp, #20]
 800a276:	9204      	str	r2, [sp, #16]
 800a278:	9303      	str	r3, [sp, #12]
 800a27a:	9502      	str	r5, [sp, #8]
 800a27c:	9401      	str	r4, [sp, #4]
 800a27e:	9000      	str	r0, [sp, #0]
 800a280:	4b09      	ldr	r3, [pc, #36]	; (800a2a8 <OnBeaconStatusChange+0xc8>)
 800a282:	2200      	movs	r2, #0
 800a284:	2100      	movs	r1, #0
 800a286:	2002      	movs	r0, #2
 800a288:	f012 fa9c 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800a28c:	e006      	b.n	800a29c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800a28e:	4b07      	ldr	r3, [pc, #28]	; (800a2ac <OnBeaconStatusChange+0xcc>)
 800a290:	2200      	movs	r2, #0
 800a292:	2100      	movs	r1, #0
 800a294:	2002      	movs	r0, #2
 800a296:	f012 fa95 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a29a:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a29c:	bf00      	nop
 800a29e:	371c      	adds	r7, #28
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a4:	0801d10c 	.word	0x0801d10c
 800a2a8:	0801d124 	.word	0x0801d124
 800a2ac:	0801d198 	.word	0x0801d198

0800a2b0 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af02      	add	r7, sp, #8
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800a2ba:	79fb      	ldrb	r3, [r7, #7]
 800a2bc:	4a06      	ldr	r2, [pc, #24]	; (800a2d8 <OnClassChange+0x28>)
 800a2be:	5cd3      	ldrb	r3, [r2, r3]
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	4b06      	ldr	r3, [pc, #24]	; (800a2dc <OnClassChange+0x2c>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	2002      	movs	r0, #2
 800a2ca:	f012 fa7b 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	0801d1d4 	.word	0x0801d1d4
 800a2dc:	0801d1b8 	.word	0x0801d1b8

0800a2e0 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	2001      	movs	r0, #1
 800a2e8:	f011 ff3c 	bl	801c164 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a2ec:	bf00      	nop
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a2f8:	4a0d      	ldr	r2, [pc, #52]	; (800a330 <OnTxPeriodicityChanged+0x40>)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a2fe:	4b0c      	ldr	r3, [pc, #48]	; (800a330 <OnTxPeriodicityChanged+0x40>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d103      	bne.n	800a30e <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a306:	4b0a      	ldr	r3, [pc, #40]	; (800a330 <OnTxPeriodicityChanged+0x40>)
 800a308:	f242 7210 	movw	r2, #10000	; 0x2710
 800a30c:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a30e:	4809      	ldr	r0, [pc, #36]	; (800a334 <OnTxPeriodicityChanged+0x44>)
 800a310:	f012 f84e 	bl	801c3b0 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a314:	4b06      	ldr	r3, [pc, #24]	; (800a330 <OnTxPeriodicityChanged+0x40>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4619      	mov	r1, r3
 800a31a:	4806      	ldr	r0, [pc, #24]	; (800a334 <OnTxPeriodicityChanged+0x44>)
 800a31c:	f012 f8b8 	bl	801c490 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a320:	4804      	ldr	r0, [pc, #16]	; (800a334 <OnTxPeriodicityChanged+0x44>)
 800a322:	f011 ffd7 	bl	801c2d4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a326:	bf00      	nop
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	20000084 	.word	0x20000084
 800a334:	2000033c 	.word	0x2000033c

0800a338 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	4603      	mov	r3, r0
 800a340:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a342:	4a04      	ldr	r2, [pc, #16]	; (800a354 <OnTxFrameCtrlChanged+0x1c>)
 800a344:	79fb      	ldrb	r3, [r7, #7]
 800a346:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bc80      	pop	{r7}
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	20000070 	.word	0x20000070

0800a358 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	4603      	mov	r3, r0
 800a360:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a362:	4a04      	ldr	r2, [pc, #16]	; (800a374 <OnPingSlotPeriodicityChanged+0x1c>)
 800a364:	79fb      	ldrb	r3, [r7, #7]
 800a366:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bc80      	pop	{r7}
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	20000070 	.word	0x20000070

0800a378 <OnSystemReset>:

static void OnSystemReset(void)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a37c:	f002 fcf9 	bl	800cd72 <LmHandlerHalt>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d106      	bne.n	800a394 <OnSystemReset+0x1c>
 800a386:	f002 f805 	bl	800c394 <LmHandlerJoinStatus>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d101      	bne.n	800a394 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a390:	f7ff faf8 	bl	8009984 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a394:	bf00      	nop
 800a396:	bd80      	pop	{r7, pc}

0800a398 <StopJoin>:

static void StopJoin(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a39c:	4817      	ldr	r0, [pc, #92]	; (800a3fc <StopJoin+0x64>)
 800a39e:	f012 f807 	bl	801c3b0 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a3a2:	f002 fcd9 	bl	800cd58 <LmHandlerStop>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d006      	beq.n	800a3ba <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800a3ac:	4b14      	ldr	r3, [pc, #80]	; (800a400 <StopJoin+0x68>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	2002      	movs	r0, #2
 800a3b4:	f012 fa06 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
 800a3b8:	e01a      	b.n	800a3f0 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800a3ba:	4b12      	ldr	r3, [pc, #72]	; (800a404 <StopJoin+0x6c>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2100      	movs	r1, #0
 800a3c0:	2002      	movs	r0, #2
 800a3c2:	f012 f9ff 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800a3c6:	4b10      	ldr	r3, [pc, #64]	; (800a408 <StopJoin+0x70>)
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800a3cc:	4b0f      	ldr	r3, [pc, #60]	; (800a40c <StopJoin+0x74>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	2002      	movs	r0, #2
 800a3d4:	f012 f9f6 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800a3d8:	480d      	ldr	r0, [pc, #52]	; (800a410 <StopJoin+0x78>)
 800a3da:	f001 fddf 	bl	800bf9c <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800a3de:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <StopJoin+0x70>)
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f001 ff53 	bl	800c290 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800a3ea:	4804      	ldr	r0, [pc, #16]	; (800a3fc <StopJoin+0x64>)
 800a3ec:	f011 ff72 	bl	801c2d4 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800a3f0:	4808      	ldr	r0, [pc, #32]	; (800a414 <StopJoin+0x7c>)
 800a3f2:	f011 ff6f 	bl	801c2d4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800a3f6:	bf00      	nop
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	2000033c 	.word	0x2000033c
 800a400:	0801d1d8 	.word	0x0801d1d8
 800a404:	0801d1f8 	.word	0x0801d1f8
 800a408:	20000020 	.word	0x20000020
 800a40c:	0801d20c 	.word	0x0801d20c
 800a410:	20000070 	.word	0x20000070
 800a414:	20000354 	.word	0x20000354

0800a418 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800a420:	4b05      	ldr	r3, [pc, #20]	; (800a438 <OnStopJoinTimerEvent+0x20>)
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	2b02      	cmp	r3, #2
 800a426:	d103      	bne.n	800a430 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800a428:	2100      	movs	r1, #0
 800a42a:	2008      	movs	r0, #8
 800a42c:	f011 fe9a 	bl	801c164 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800a430:	bf00      	nop
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20000020 	.word	0x20000020

0800a43c <StoreContext>:

static void StoreContext(void)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a442:	23ff      	movs	r3, #255	; 0xff
 800a444:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800a446:	f002 fca1 	bl	800cd8c <LmHandlerNvmDataStore>
 800a44a:	4603      	mov	r3, r0
 800a44c:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800a44e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a452:	f113 0f08 	cmn.w	r3, #8
 800a456:	d106      	bne.n	800a466 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800a458:	4b0a      	ldr	r3, [pc, #40]	; (800a484 <StoreContext+0x48>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	2100      	movs	r1, #0
 800a45e:	2002      	movs	r0, #2
 800a460:	f012 f9b0 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800a464:	e00a      	b.n	800a47c <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800a466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a46a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a46e:	d105      	bne.n	800a47c <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800a470:	4b05      	ldr	r3, [pc, #20]	; (800a488 <StoreContext+0x4c>)
 800a472:	2200      	movs	r2, #0
 800a474:	2100      	movs	r1, #0
 800a476:	2002      	movs	r0, #2
 800a478:	f012 f9a4 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800a47c:	bf00      	nop
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	0801d22c 	.word	0x0801d22c
 800a488:	0801d244 	.word	0x0801d244

0800a48c <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	4603      	mov	r3, r0
 800a494:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800a496:	79fb      	ldrb	r3, [r7, #7]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d106      	bne.n	800a4aa <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800a49c:	4b08      	ldr	r3, [pc, #32]	; (800a4c0 <OnNvmDataChange+0x34>)
 800a49e:	2200      	movs	r2, #0
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	2002      	movs	r0, #2
 800a4a4:	f012 f98e 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800a4a8:	e005      	b.n	800a4b6 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800a4aa:	4b06      	ldr	r3, [pc, #24]	; (800a4c4 <OnNvmDataChange+0x38>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	2002      	movs	r0, #2
 800a4b2:	f012 f987 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800a4b6:	bf00      	nop
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	0801d25c 	.word	0x0801d25c
 800a4c4:	0801d270 	.word	0x0801d270

0800a4c8 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800a4d2:	f7fa f86b 	bl	80045ac <HAL_FLASH_Unlock>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d11c      	bne.n	800a516 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800a4dc:	4b10      	ldr	r3, [pc, #64]	; (800a520 <OnStoreContextRequest+0x58>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	029a      	lsls	r2, r3, #10
 800a4e2:	4b10      	ldr	r3, [pc, #64]	; (800a524 <OnStoreContextRequest+0x5c>)
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800a4ea:	fbb2 f1f3 	udiv	r1, r2, r3
 800a4ee:	fb01 f303 	mul.w	r3, r1, r3
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	0adb      	lsrs	r3, r3, #11
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	2101      	movs	r1, #1
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7f6 ff17 	bl	800132e <FLASH_IF_EraseByPages>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d105      	bne.n	800a512 <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800a506:	2300      	movs	r3, #0
 800a508:	683a      	ldr	r2, [r7, #0]
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	4806      	ldr	r0, [pc, #24]	; (800a528 <OnStoreContextRequest+0x60>)
 800a50e:	f7f6 fe2d 	bl	800116c <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800a512:	f7fa f86d 	bl	80045f0 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800a516:	bf00      	nop
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	1fff75e0 	.word	0x1fff75e0
 800a524:	03fffc00 	.word	0x03fffc00
 800a528:	0803f000 	.word	0x0803f000

0800a52c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	461a      	mov	r2, r3
 800a53c:	4903      	ldr	r1, [pc, #12]	; (800a54c <OnRestoreContextRequest+0x20>)
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f011 f8f4 	bl	801b72c <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	0803f000 	.word	0x0803f000

0800a550 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a554:	4b18      	ldr	r3, [pc, #96]	; (800a5b8 <LoraInfo_Init+0x68>)
 800a556:	2200      	movs	r2, #0
 800a558:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a55a:	4b17      	ldr	r3, [pc, #92]	; (800a5b8 <LoraInfo_Init+0x68>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a560:	4b15      	ldr	r3, [pc, #84]	; (800a5b8 <LoraInfo_Init+0x68>)
 800a562:	2200      	movs	r2, #0
 800a564:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a566:	4b14      	ldr	r3, [pc, #80]	; (800a5b8 <LoraInfo_Init+0x68>)
 800a568:	2200      	movs	r2, #0
 800a56a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800a56c:	4b12      	ldr	r3, [pc, #72]	; (800a5b8 <LoraInfo_Init+0x68>)
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	f043 0320 	orr.w	r3, r3, #32
 800a574:	4a10      	ldr	r2, [pc, #64]	; (800a5b8 <LoraInfo_Init+0x68>)
 800a576:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800a578:	4b0f      	ldr	r3, [pc, #60]	; (800a5b8 <LoraInfo_Init+0x68>)
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a580:	4a0d      	ldr	r2, [pc, #52]	; (800a5b8 <LoraInfo_Init+0x68>)
 800a582:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a584:	4b0c      	ldr	r3, [pc, #48]	; (800a5b8 <LoraInfo_Init+0x68>)
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10c      	bne.n	800a5a6 <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a58c:	4b0b      	ldr	r3, [pc, #44]	; (800a5bc <LoraInfo_Init+0x6c>)
 800a58e:	2200      	movs	r2, #0
 800a590:	2100      	movs	r1, #0
 800a592:	2000      	movs	r0, #0
 800a594:	f012 f916 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a598:	bf00      	nop
 800a59a:	f012 f901 	bl	801c7a0 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d1fa      	bne.n	800a59a <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a5a4:	e7fe      	b.n	800a5a4 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a5a6:	4b04      	ldr	r3, [pc, #16]	; (800a5b8 <LoraInfo_Init+0x68>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a5ac:	4b02      	ldr	r3, [pc, #8]	; (800a5b8 <LoraInfo_Init+0x68>)
 800a5ae:	2203      	movs	r2, #3
 800a5b0:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a5b2:	bf00      	nop
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	200004a8 	.word	0x200004a8
 800a5bc:	0801d284 	.word	0x0801d284

0800a5c0 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a5c4:	4b02      	ldr	r3, [pc, #8]	; (800a5d0 <LoraInfo_GetPtr+0x10>)
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bc80      	pop	{r7}
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	200004a8 	.word	0x200004a8

0800a5d4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800a5d8:	f7f8 f8ef 	bl	80027ba <BSP_RADIO_Init>
 800a5dc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b082      	sub	sp, #8
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a5ec:	79fb      	ldrb	r3, [r7, #7]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7f8 f914 	bl	800281c <BSP_RADIO_ConfigRFSwitch>
 800a5f4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800a602:	f7f8 f959 	bl	80028b8 <BSP_RADIO_GetTxConfig>
 800a606:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a608:	4618      	mov	r0, r3
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800a610:	f7f8 f959 	bl	80028c6 <BSP_RADIO_IsTCXO>
 800a614:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a616:	4618      	mov	r0, r3
 800a618:	bd80      	pop	{r7, pc}

0800a61a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800a61e:	f7f8 f959 	bl	80028d4 <BSP_RADIO_IsDCDC>
 800a622:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a624:	4618      	mov	r0, r3
 800a626:	bd80      	pop	{r7, pc}

0800a628 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	4603      	mov	r3, r0
 800a630:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800a632:	79fb      	ldrb	r3, [r7, #7]
 800a634:	4618      	mov	r0, r3
 800a636:	f7f8 f954 	bl	80028e2 <BSP_RADIO_GetRFOMaxPowerConfig>
 800a63a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	33f1      	adds	r3, #241	; 0xf1
 800a650:	2210      	movs	r2, #16
 800a652:	2100      	movs	r1, #0
 800a654:	4618      	mov	r0, r3
 800a656:	f00d fd9d 	bl	8018194 <memset1>
    ctx->M_n = 0;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	22f0      	movs	r2, #240	; 0xf0
 800a666:	2100      	movs	r1, #0
 800a668:	4618      	mov	r0, r3
 800a66a:	f00d fd93 	bl	8018194 <memset1>
}
 800a66e:	bf00      	nop
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b082      	sub	sp, #8
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
 800a67e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	461a      	mov	r2, r3
 800a684:	2110      	movs	r1, #16
 800a686:	6838      	ldr	r0, [r7, #0]
 800a688:	f000 fe5c 	bl	800b344 <lorawan_aes_set_key>
}
 800a68c:	bf00      	nop
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b08c      	sub	sp, #48	; 0x30
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 80a1 	beq.w	800a7ee <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a6b2:	f1c3 0310 	rsb	r3, r3, #16
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	bf28      	it	cs
 800a6bc:	4613      	movcs	r3, r2
 800a6be:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f203 1201 	addw	r2, r3, #257	; 0x101
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a6cc:	4413      	add	r3, r2
 800a6ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6d0:	b292      	uxth	r2, r2
 800a6d2:	68b9      	ldr	r1, [r7, #8]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f00d fd22 	bl	801811e <memcpy1>
        ctx->M_n += mlen;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	441a      	add	r2, r3
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a6f0:	2b0f      	cmp	r3, #15
 800a6f2:	f240 808d 	bls.w	800a810 <AES_CMAC_Update+0x17c>
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	f000 8088 	beq.w	800a810 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800a700:	2300      	movs	r3, #0
 800a702:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a704:	e015      	b.n	800a732 <AES_CMAC_Update+0x9e>
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70a:	4413      	add	r3, r2
 800a70c:	33f1      	adds	r3, #241	; 0xf1
 800a70e:	781a      	ldrb	r2, [r3, #0]
 800a710:	68f9      	ldr	r1, [r7, #12]
 800a712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a714:	440b      	add	r3, r1
 800a716:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	4053      	eors	r3, r2
 800a71e:	b2d9      	uxtb	r1, r3
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a724:	4413      	add	r3, r2
 800a726:	33f1      	adds	r3, #241	; 0xf1
 800a728:	460a      	mov	r2, r1
 800a72a:	701a      	strb	r2, [r3, #0]
 800a72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72e:	3301      	adds	r3, #1
 800a730:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	2b0f      	cmp	r3, #15
 800a736:	dde6      	ble.n	800a706 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800a73e:	f107 0314 	add.w	r3, r7, #20
 800a742:	2210      	movs	r2, #16
 800a744:	4618      	mov	r0, r3
 800a746:	f00d fcea 	bl	801811e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	f107 0114 	add.w	r1, r7, #20
 800a750:	f107 0314 	add.w	r3, r7, #20
 800a754:	4618      	mov	r0, r3
 800a756:	f000 fed3 	bl	800b500 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	33f1      	adds	r3, #241	; 0xf1
 800a75e:	f107 0114 	add.w	r1, r7, #20
 800a762:	2210      	movs	r2, #16
 800a764:	4618      	mov	r0, r3
 800a766:	f00d fcda 	bl	801811e <memcpy1>

        data += mlen;
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	4413      	add	r3, r2
 800a770:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800a77a:	e038      	b.n	800a7ee <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800a77c:	2300      	movs	r3, #0
 800a77e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a780:	e013      	b.n	800a7aa <AES_CMAC_Update+0x116>
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a786:	4413      	add	r3, r2
 800a788:	33f1      	adds	r3, #241	; 0xf1
 800a78a:	781a      	ldrb	r2, [r3, #0]
 800a78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78e:	68b9      	ldr	r1, [r7, #8]
 800a790:	440b      	add	r3, r1
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	4053      	eors	r3, r2
 800a796:	b2d9      	uxtb	r1, r3
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79c:	4413      	add	r3, r2
 800a79e:	33f1      	adds	r3, #241	; 0xf1
 800a7a0:	460a      	mov	r2, r1
 800a7a2:	701a      	strb	r2, [r3, #0]
 800a7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	2b0f      	cmp	r3, #15
 800a7ae:	dde8      	ble.n	800a782 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800a7b6:	f107 0314 	add.w	r3, r7, #20
 800a7ba:	2210      	movs	r2, #16
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f00d fcae 	bl	801811e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	f107 0114 	add.w	r1, r7, #20
 800a7c8:	f107 0314 	add.w	r3, r7, #20
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 fe97 	bl	800b500 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	33f1      	adds	r3, #241	; 0xf1
 800a7d6:	f107 0114 	add.w	r1, r7, #20
 800a7da:	2210      	movs	r2, #16
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f00d fc9e 	bl	801811e <memcpy1>

        data += 16;
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	3310      	adds	r3, #16
 800a7e6:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	3b10      	subs	r3, #16
 800a7ec:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2b10      	cmp	r3, #16
 800a7f2:	d8c3      	bhi.n	800a77c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	b292      	uxth	r2, r2
 800a7fe:	68b9      	ldr	r1, [r7, #8]
 800a800:	4618      	mov	r0, r3
 800a802:	f00d fc8c 	bl	801811e <memcpy1>
    ctx->M_n = len;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800a80e:	e000      	b.n	800a812 <AES_CMAC_Update+0x17e>
            return;
 800a810:	bf00      	nop
}
 800a812:	3730      	adds	r7, #48	; 0x30
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b092      	sub	sp, #72	; 0x48
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800a822:	f107 031c 	add.w	r3, r7, #28
 800a826:	2210      	movs	r2, #16
 800a828:	2100      	movs	r1, #0
 800a82a:	4618      	mov	r0, r3
 800a82c:	f00d fcb2 	bl	8018194 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	f107 011c 	add.w	r1, r7, #28
 800a836:	f107 031c 	add.w	r3, r7, #28
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 fe60 	bl	800b500 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800a840:	7f3b      	ldrb	r3, [r7, #28]
 800a842:	b25b      	sxtb	r3, r3
 800a844:	2b00      	cmp	r3, #0
 800a846:	da30      	bge.n	800a8aa <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800a848:	2300      	movs	r3, #0
 800a84a:	647b      	str	r3, [r7, #68]	; 0x44
 800a84c:	e01b      	b.n	800a886 <AES_CMAC_Final+0x6e>
 800a84e:	f107 021c 	add.w	r2, r7, #28
 800a852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a854:	4413      	add	r3, r2
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	005b      	lsls	r3, r3, #1
 800a85a:	b25a      	sxtb	r2, r3
 800a85c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a85e:	3301      	adds	r3, #1
 800a860:	3348      	adds	r3, #72	; 0x48
 800a862:	443b      	add	r3, r7
 800a864:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a868:	09db      	lsrs	r3, r3, #7
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	b25b      	sxtb	r3, r3
 800a86e:	4313      	orrs	r3, r2
 800a870:	b25b      	sxtb	r3, r3
 800a872:	b2d9      	uxtb	r1, r3
 800a874:	f107 021c 	add.w	r2, r7, #28
 800a878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a87a:	4413      	add	r3, r2
 800a87c:	460a      	mov	r2, r1
 800a87e:	701a      	strb	r2, [r3, #0]
 800a880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a882:	3301      	adds	r3, #1
 800a884:	647b      	str	r3, [r7, #68]	; 0x44
 800a886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a888:	2b0e      	cmp	r3, #14
 800a88a:	dde0      	ble.n	800a84e <AES_CMAC_Final+0x36>
 800a88c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a890:	005b      	lsls	r3, r3, #1
 800a892:	b2db      	uxtb	r3, r3
 800a894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800a898:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a89c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800a8a0:	43db      	mvns	r3, r3
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8a8:	e027      	b.n	800a8fa <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	643b      	str	r3, [r7, #64]	; 0x40
 800a8ae:	e01b      	b.n	800a8e8 <AES_CMAC_Final+0xd0>
 800a8b0:	f107 021c 	add.w	r2, r7, #28
 800a8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8b6:	4413      	add	r3, r2
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	005b      	lsls	r3, r3, #1
 800a8bc:	b25a      	sxtb	r2, r3
 800a8be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	3348      	adds	r3, #72	; 0x48
 800a8c4:	443b      	add	r3, r7
 800a8c6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a8ca:	09db      	lsrs	r3, r3, #7
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	b25b      	sxtb	r3, r3
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	b25b      	sxtb	r3, r3
 800a8d4:	b2d9      	uxtb	r1, r3
 800a8d6:	f107 021c 	add.w	r2, r7, #28
 800a8da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8dc:	4413      	add	r3, r2
 800a8de:	460a      	mov	r2, r1
 800a8e0:	701a      	strb	r2, [r3, #0]
 800a8e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	643b      	str	r3, [r7, #64]	; 0x40
 800a8e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8ea:	2b0e      	cmp	r3, #14
 800a8ec:	dde0      	ble.n	800a8b0 <AES_CMAC_Final+0x98>
 800a8ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8f2:	005b      	lsls	r3, r3, #1
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a900:	2b10      	cmp	r3, #16
 800a902:	d11d      	bne.n	800a940 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800a904:	2300      	movs	r3, #0
 800a906:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a908:	e016      	b.n	800a938 <AES_CMAC_Final+0x120>
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a90e:	4413      	add	r3, r2
 800a910:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a914:	781a      	ldrb	r2, [r3, #0]
 800a916:	f107 011c 	add.w	r1, r7, #28
 800a91a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a91c:	440b      	add	r3, r1
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	4053      	eors	r3, r2
 800a922:	b2d9      	uxtb	r1, r3
 800a924:	683a      	ldr	r2, [r7, #0]
 800a926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a928:	4413      	add	r3, r2
 800a92a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a92e:	460a      	mov	r2, r1
 800a930:	701a      	strb	r2, [r3, #0]
 800a932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a934:	3301      	adds	r3, #1
 800a936:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a93a:	2b0f      	cmp	r3, #15
 800a93c:	dde5      	ble.n	800a90a <AES_CMAC_Final+0xf2>
 800a93e:	e096      	b.n	800aa6e <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800a940:	7f3b      	ldrb	r3, [r7, #28]
 800a942:	b25b      	sxtb	r3, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	da30      	bge.n	800a9aa <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800a948:	2300      	movs	r3, #0
 800a94a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a94c:	e01b      	b.n	800a986 <AES_CMAC_Final+0x16e>
 800a94e:	f107 021c 	add.w	r2, r7, #28
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	4413      	add	r3, r2
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	005b      	lsls	r3, r3, #1
 800a95a:	b25a      	sxtb	r2, r3
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	3301      	adds	r3, #1
 800a960:	3348      	adds	r3, #72	; 0x48
 800a962:	443b      	add	r3, r7
 800a964:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a968:	09db      	lsrs	r3, r3, #7
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	b25b      	sxtb	r3, r3
 800a96e:	4313      	orrs	r3, r2
 800a970:	b25b      	sxtb	r3, r3
 800a972:	b2d9      	uxtb	r1, r3
 800a974:	f107 021c 	add.w	r2, r7, #28
 800a978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97a:	4413      	add	r3, r2
 800a97c:	460a      	mov	r2, r1
 800a97e:	701a      	strb	r2, [r3, #0]
 800a980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a982:	3301      	adds	r3, #1
 800a984:	63bb      	str	r3, [r7, #56]	; 0x38
 800a986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a988:	2b0e      	cmp	r3, #14
 800a98a:	dde0      	ble.n	800a94e <AES_CMAC_Final+0x136>
 800a98c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a990:	005b      	lsls	r3, r3, #1
 800a992:	b2db      	uxtb	r3, r3
 800a994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800a998:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a99c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800a9a0:	43db      	mvns	r3, r3
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9a8:	e027      	b.n	800a9fa <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	637b      	str	r3, [r7, #52]	; 0x34
 800a9ae:	e01b      	b.n	800a9e8 <AES_CMAC_Final+0x1d0>
 800a9b0:	f107 021c 	add.w	r2, r7, #28
 800a9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b6:	4413      	add	r3, r2
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	005b      	lsls	r3, r3, #1
 800a9bc:	b25a      	sxtb	r2, r3
 800a9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	3348      	adds	r3, #72	; 0x48
 800a9c4:	443b      	add	r3, r7
 800a9c6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a9ca:	09db      	lsrs	r3, r3, #7
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	b25b      	sxtb	r3, r3
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	b25b      	sxtb	r3, r3
 800a9d4:	b2d9      	uxtb	r1, r3
 800a9d6:	f107 021c 	add.w	r2, r7, #28
 800a9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9dc:	4413      	add	r3, r2
 800a9de:	460a      	mov	r2, r1
 800a9e0:	701a      	strb	r2, [r3, #0]
 800a9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ea:	2b0e      	cmp	r3, #14
 800a9ec:	dde0      	ble.n	800a9b0 <AES_CMAC_Final+0x198>
 800a9ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a9f2:	005b      	lsls	r3, r3, #1
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa00:	683a      	ldr	r2, [r7, #0]
 800aa02:	4413      	add	r3, r2
 800aa04:	2280      	movs	r2, #128	; 0x80
 800aa06:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800aa0a:	e007      	b.n	800aa1c <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	4413      	add	r3, r2
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa22:	1c5a      	adds	r2, r3, #1
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa30:	2b0f      	cmp	r3, #15
 800aa32:	d9eb      	bls.n	800aa0c <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800aa34:	2300      	movs	r3, #0
 800aa36:	633b      	str	r3, [r7, #48]	; 0x30
 800aa38:	e016      	b.n	800aa68 <AES_CMAC_Final+0x250>
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3e:	4413      	add	r3, r2
 800aa40:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aa44:	781a      	ldrb	r2, [r3, #0]
 800aa46:	f107 011c 	add.w	r1, r7, #28
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4c:	440b      	add	r3, r1
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	4053      	eors	r3, r2
 800aa52:	b2d9      	uxtb	r1, r3
 800aa54:	683a      	ldr	r2, [r7, #0]
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	4413      	add	r3, r2
 800aa5a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aa5e:	460a      	mov	r2, r1
 800aa60:	701a      	strb	r2, [r3, #0]
 800aa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa64:	3301      	adds	r3, #1
 800aa66:	633b      	str	r3, [r7, #48]	; 0x30
 800aa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6a:	2b0f      	cmp	r3, #15
 800aa6c:	dde5      	ble.n	800aa3a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800aa6e:	2300      	movs	r3, #0
 800aa70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa72:	e015      	b.n	800aaa0 <AES_CMAC_Final+0x288>
 800aa74:	683a      	ldr	r2, [r7, #0]
 800aa76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa78:	4413      	add	r3, r2
 800aa7a:	33f1      	adds	r3, #241	; 0xf1
 800aa7c:	781a      	ldrb	r2, [r3, #0]
 800aa7e:	6839      	ldr	r1, [r7, #0]
 800aa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa82:	440b      	add	r3, r1
 800aa84:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	4053      	eors	r3, r2
 800aa8c:	b2d9      	uxtb	r1, r3
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa92:	4413      	add	r3, r2
 800aa94:	33f1      	adds	r3, #241	; 0xf1
 800aa96:	460a      	mov	r2, r1
 800aa98:	701a      	strb	r2, [r3, #0]
 800aa9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa2:	2b0f      	cmp	r3, #15
 800aaa4:	dde6      	ble.n	800aa74 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800aaac:	f107 030c 	add.w	r3, r7, #12
 800aab0:	2210      	movs	r2, #16
 800aab2:	4618      	mov	r0, r3
 800aab4:	f00d fb33 	bl	801811e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800aab8:	683a      	ldr	r2, [r7, #0]
 800aaba:	f107 030c 	add.w	r3, r7, #12
 800aabe:	6879      	ldr	r1, [r7, #4]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 fd1d 	bl	800b500 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800aac6:	f107 031c 	add.w	r3, r7, #28
 800aaca:	2210      	movs	r2, #16
 800aacc:	2100      	movs	r1, #0
 800aace:	4618      	mov	r0, r3
 800aad0:	f00d fb60 	bl	8018194 <memset1>
}
 800aad4:	bf00      	nop
 800aad6:	3748      	adds	r7, #72	; 0x48
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	781a      	ldrb	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	7852      	ldrb	r2, [r2, #1]
 800aaf6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	3302      	adds	r3, #2
 800aafc:	683a      	ldr	r2, [r7, #0]
 800aafe:	7892      	ldrb	r2, [r2, #2]
 800ab00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	3303      	adds	r3, #3
 800ab06:	683a      	ldr	r2, [r7, #0]
 800ab08:	78d2      	ldrb	r2, [r2, #3]
 800ab0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	3304      	adds	r3, #4
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	7912      	ldrb	r2, [r2, #4]
 800ab14:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	3305      	adds	r3, #5
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	7952      	ldrb	r2, [r2, #5]
 800ab1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	3306      	adds	r3, #6
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	7992      	ldrb	r2, [r2, #6]
 800ab28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	3307      	adds	r3, #7
 800ab2e:	683a      	ldr	r2, [r7, #0]
 800ab30:	79d2      	ldrb	r2, [r2, #7]
 800ab32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	3308      	adds	r3, #8
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	7a12      	ldrb	r2, [r2, #8]
 800ab3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	3309      	adds	r3, #9
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	7a52      	ldrb	r2, [r2, #9]
 800ab46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	330a      	adds	r3, #10
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	7a92      	ldrb	r2, [r2, #10]
 800ab50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	330b      	adds	r3, #11
 800ab56:	683a      	ldr	r2, [r7, #0]
 800ab58:	7ad2      	ldrb	r2, [r2, #11]
 800ab5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	330c      	adds	r3, #12
 800ab60:	683a      	ldr	r2, [r7, #0]
 800ab62:	7b12      	ldrb	r2, [r2, #12]
 800ab64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	330d      	adds	r3, #13
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	7b52      	ldrb	r2, [r2, #13]
 800ab6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	330e      	adds	r3, #14
 800ab74:	683a      	ldr	r2, [r7, #0]
 800ab76:	7b92      	ldrb	r2, [r2, #14]
 800ab78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	330f      	adds	r3, #15
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	7bd2      	ldrb	r2, [r2, #15]
 800ab82:	701a      	strb	r2, [r3, #0]
#endif
}
 800ab84:	bf00      	nop
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bc80      	pop	{r7}
 800ab8c:	4770      	bx	lr

0800ab8e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b085      	sub	sp, #20
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	60f8      	str	r0, [r7, #12]
 800ab96:	60b9      	str	r1, [r7, #8]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800ab9c:	e007      	b.n	800abae <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	1c53      	adds	r3, r2, #1
 800aba2:	60bb      	str	r3, [r7, #8]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	1c59      	adds	r1, r3, #1
 800aba8:	60f9      	str	r1, [r7, #12]
 800abaa:	7812      	ldrb	r2, [r2, #0]
 800abac:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800abae:	79fb      	ldrb	r3, [r7, #7]
 800abb0:	1e5a      	subs	r2, r3, #1
 800abb2:	71fa      	strb	r2, [r7, #7]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1f2      	bne.n	800ab9e <copy_block_nn+0x10>
}
 800abb8:	bf00      	nop
 800abba:	bf00      	nop
 800abbc:	3714      	adds	r7, #20
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bc80      	pop	{r7}
 800abc2:	4770      	bx	lr

0800abc4 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	781a      	ldrb	r2, [r3, #0]
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	4053      	eors	r3, r2
 800abd8:	b2da      	uxtb	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	3301      	adds	r3, #1
 800abe2:	7819      	ldrb	r1, [r3, #0]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	3301      	adds	r3, #1
 800abe8:	781a      	ldrb	r2, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	3301      	adds	r3, #1
 800abee:	404a      	eors	r2, r1
 800abf0:	b2d2      	uxtb	r2, r2
 800abf2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	3302      	adds	r3, #2
 800abf8:	7819      	ldrb	r1, [r3, #0]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	3302      	adds	r3, #2
 800abfe:	781a      	ldrb	r2, [r3, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	3302      	adds	r3, #2
 800ac04:	404a      	eors	r2, r1
 800ac06:	b2d2      	uxtb	r2, r2
 800ac08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3303      	adds	r3, #3
 800ac0e:	7819      	ldrb	r1, [r3, #0]
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	3303      	adds	r3, #3
 800ac14:	781a      	ldrb	r2, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	3303      	adds	r3, #3
 800ac1a:	404a      	eors	r2, r1
 800ac1c:	b2d2      	uxtb	r2, r2
 800ac1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	3304      	adds	r3, #4
 800ac24:	7819      	ldrb	r1, [r3, #0]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	3304      	adds	r3, #4
 800ac2a:	781a      	ldrb	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	3304      	adds	r3, #4
 800ac30:	404a      	eors	r2, r1
 800ac32:	b2d2      	uxtb	r2, r2
 800ac34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3305      	adds	r3, #5
 800ac3a:	7819      	ldrb	r1, [r3, #0]
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	3305      	adds	r3, #5
 800ac40:	781a      	ldrb	r2, [r3, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	3305      	adds	r3, #5
 800ac46:	404a      	eors	r2, r1
 800ac48:	b2d2      	uxtb	r2, r2
 800ac4a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3306      	adds	r3, #6
 800ac50:	7819      	ldrb	r1, [r3, #0]
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	3306      	adds	r3, #6
 800ac56:	781a      	ldrb	r2, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	3306      	adds	r3, #6
 800ac5c:	404a      	eors	r2, r1
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	3307      	adds	r3, #7
 800ac66:	7819      	ldrb	r1, [r3, #0]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	3307      	adds	r3, #7
 800ac6c:	781a      	ldrb	r2, [r3, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	3307      	adds	r3, #7
 800ac72:	404a      	eors	r2, r1
 800ac74:	b2d2      	uxtb	r2, r2
 800ac76:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3308      	adds	r3, #8
 800ac7c:	7819      	ldrb	r1, [r3, #0]
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	3308      	adds	r3, #8
 800ac82:	781a      	ldrb	r2, [r3, #0]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	3308      	adds	r3, #8
 800ac88:	404a      	eors	r2, r1
 800ac8a:	b2d2      	uxtb	r2, r2
 800ac8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	3309      	adds	r3, #9
 800ac92:	7819      	ldrb	r1, [r3, #0]
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	3309      	adds	r3, #9
 800ac98:	781a      	ldrb	r2, [r3, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	3309      	adds	r3, #9
 800ac9e:	404a      	eors	r2, r1
 800aca0:	b2d2      	uxtb	r2, r2
 800aca2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	330a      	adds	r3, #10
 800aca8:	7819      	ldrb	r1, [r3, #0]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	330a      	adds	r3, #10
 800acae:	781a      	ldrb	r2, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	330a      	adds	r3, #10
 800acb4:	404a      	eors	r2, r1
 800acb6:	b2d2      	uxtb	r2, r2
 800acb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	330b      	adds	r3, #11
 800acbe:	7819      	ldrb	r1, [r3, #0]
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	330b      	adds	r3, #11
 800acc4:	781a      	ldrb	r2, [r3, #0]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	330b      	adds	r3, #11
 800acca:	404a      	eors	r2, r1
 800accc:	b2d2      	uxtb	r2, r2
 800acce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	330c      	adds	r3, #12
 800acd4:	7819      	ldrb	r1, [r3, #0]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	330c      	adds	r3, #12
 800acda:	781a      	ldrb	r2, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	330c      	adds	r3, #12
 800ace0:	404a      	eors	r2, r1
 800ace2:	b2d2      	uxtb	r2, r2
 800ace4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	330d      	adds	r3, #13
 800acea:	7819      	ldrb	r1, [r3, #0]
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	330d      	adds	r3, #13
 800acf0:	781a      	ldrb	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	330d      	adds	r3, #13
 800acf6:	404a      	eors	r2, r1
 800acf8:	b2d2      	uxtb	r2, r2
 800acfa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	330e      	adds	r3, #14
 800ad00:	7819      	ldrb	r1, [r3, #0]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	330e      	adds	r3, #14
 800ad06:	781a      	ldrb	r2, [r3, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	330e      	adds	r3, #14
 800ad0c:	404a      	eors	r2, r1
 800ad0e:	b2d2      	uxtb	r2, r2
 800ad10:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	330f      	adds	r3, #15
 800ad16:	7819      	ldrb	r1, [r3, #0]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	330f      	adds	r3, #15
 800ad1c:	781a      	ldrb	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	330f      	adds	r3, #15
 800ad22:	404a      	eors	r2, r1
 800ad24:	b2d2      	uxtb	r2, r2
 800ad26:	701a      	strb	r2, [r3, #0]
#endif
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bc80      	pop	{r7}
 800ad30:	4770      	bx	lr

0800ad32 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800ad32:	b480      	push	{r7}
 800ad34:	b085      	sub	sp, #20
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	60f8      	str	r0, [r7, #12]
 800ad3a:	60b9      	str	r1, [r7, #8]
 800ad3c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	781a      	ldrb	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	4053      	eors	r3, r2
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	3301      	adds	r3, #1
 800ad52:	7819      	ldrb	r1, [r3, #0]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	3301      	adds	r3, #1
 800ad58:	781a      	ldrb	r2, [r3, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	404a      	eors	r2, r1
 800ad60:	b2d2      	uxtb	r2, r2
 800ad62:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	3302      	adds	r3, #2
 800ad68:	7819      	ldrb	r1, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	3302      	adds	r3, #2
 800ad6e:	781a      	ldrb	r2, [r3, #0]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	3302      	adds	r3, #2
 800ad74:	404a      	eors	r2, r1
 800ad76:	b2d2      	uxtb	r2, r2
 800ad78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	3303      	adds	r3, #3
 800ad7e:	7819      	ldrb	r1, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	3303      	adds	r3, #3
 800ad84:	781a      	ldrb	r2, [r3, #0]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	3303      	adds	r3, #3
 800ad8a:	404a      	eors	r2, r1
 800ad8c:	b2d2      	uxtb	r2, r2
 800ad8e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	3304      	adds	r3, #4
 800ad94:	7819      	ldrb	r1, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	3304      	adds	r3, #4
 800ad9a:	781a      	ldrb	r2, [r3, #0]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	3304      	adds	r3, #4
 800ada0:	404a      	eors	r2, r1
 800ada2:	b2d2      	uxtb	r2, r2
 800ada4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	3305      	adds	r3, #5
 800adaa:	7819      	ldrb	r1, [r3, #0]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	3305      	adds	r3, #5
 800adb0:	781a      	ldrb	r2, [r3, #0]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	3305      	adds	r3, #5
 800adb6:	404a      	eors	r2, r1
 800adb8:	b2d2      	uxtb	r2, r2
 800adba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	3306      	adds	r3, #6
 800adc0:	7819      	ldrb	r1, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	3306      	adds	r3, #6
 800adc6:	781a      	ldrb	r2, [r3, #0]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	3306      	adds	r3, #6
 800adcc:	404a      	eors	r2, r1
 800adce:	b2d2      	uxtb	r2, r2
 800add0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	3307      	adds	r3, #7
 800add6:	7819      	ldrb	r1, [r3, #0]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3307      	adds	r3, #7
 800addc:	781a      	ldrb	r2, [r3, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3307      	adds	r3, #7
 800ade2:	404a      	eors	r2, r1
 800ade4:	b2d2      	uxtb	r2, r2
 800ade6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	3308      	adds	r3, #8
 800adec:	7819      	ldrb	r1, [r3, #0]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	3308      	adds	r3, #8
 800adf2:	781a      	ldrb	r2, [r3, #0]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	3308      	adds	r3, #8
 800adf8:	404a      	eors	r2, r1
 800adfa:	b2d2      	uxtb	r2, r2
 800adfc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	3309      	adds	r3, #9
 800ae02:	7819      	ldrb	r1, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	3309      	adds	r3, #9
 800ae08:	781a      	ldrb	r2, [r3, #0]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	3309      	adds	r3, #9
 800ae0e:	404a      	eors	r2, r1
 800ae10:	b2d2      	uxtb	r2, r2
 800ae12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	330a      	adds	r3, #10
 800ae18:	7819      	ldrb	r1, [r3, #0]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	330a      	adds	r3, #10
 800ae1e:	781a      	ldrb	r2, [r3, #0]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	330a      	adds	r3, #10
 800ae24:	404a      	eors	r2, r1
 800ae26:	b2d2      	uxtb	r2, r2
 800ae28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	330b      	adds	r3, #11
 800ae2e:	7819      	ldrb	r1, [r3, #0]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	330b      	adds	r3, #11
 800ae34:	781a      	ldrb	r2, [r3, #0]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	330b      	adds	r3, #11
 800ae3a:	404a      	eors	r2, r1
 800ae3c:	b2d2      	uxtb	r2, r2
 800ae3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	330c      	adds	r3, #12
 800ae44:	7819      	ldrb	r1, [r3, #0]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	330c      	adds	r3, #12
 800ae4a:	781a      	ldrb	r2, [r3, #0]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	330c      	adds	r3, #12
 800ae50:	404a      	eors	r2, r1
 800ae52:	b2d2      	uxtb	r2, r2
 800ae54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	330d      	adds	r3, #13
 800ae5a:	7819      	ldrb	r1, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	330d      	adds	r3, #13
 800ae60:	781a      	ldrb	r2, [r3, #0]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	330d      	adds	r3, #13
 800ae66:	404a      	eors	r2, r1
 800ae68:	b2d2      	uxtb	r2, r2
 800ae6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	330e      	adds	r3, #14
 800ae70:	7819      	ldrb	r1, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	330e      	adds	r3, #14
 800ae76:	781a      	ldrb	r2, [r3, #0]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	330e      	adds	r3, #14
 800ae7c:	404a      	eors	r2, r1
 800ae7e:	b2d2      	uxtb	r2, r2
 800ae80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	330f      	adds	r3, #15
 800ae86:	7819      	ldrb	r1, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	330f      	adds	r3, #15
 800ae8c:	781a      	ldrb	r2, [r3, #0]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	330f      	adds	r3, #15
 800ae92:	404a      	eors	r2, r1
 800ae94:	b2d2      	uxtb	r2, r2
 800ae96:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800ae98:	bf00      	nop
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bc80      	pop	{r7}
 800aea0:	4770      	bx	lr

0800aea2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b082      	sub	sp, #8
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7ff fe88 	bl	800abc4 <xor_block>
}
 800aeb4:	bf00      	nop
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	461a      	mov	r2, r3
 800aeca:	4b48      	ldr	r3, [pc, #288]	; (800afec <shift_sub_rows+0x130>)
 800aecc:	5c9a      	ldrb	r2, [r3, r2]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	701a      	strb	r2, [r3, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	3304      	adds	r3, #4
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	4619      	mov	r1, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	3304      	adds	r3, #4
 800aede:	4a43      	ldr	r2, [pc, #268]	; (800afec <shift_sub_rows+0x130>)
 800aee0:	5c52      	ldrb	r2, [r2, r1]
 800aee2:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	3308      	adds	r3, #8
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	4619      	mov	r1, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	3308      	adds	r3, #8
 800aef0:	4a3e      	ldr	r2, [pc, #248]	; (800afec <shift_sub_rows+0x130>)
 800aef2:	5c52      	ldrb	r2, [r2, r1]
 800aef4:	701a      	strb	r2, [r3, #0]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	330c      	adds	r3, #12
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	4619      	mov	r1, r3
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	330c      	adds	r3, #12
 800af02:	4a3a      	ldr	r2, [pc, #232]	; (800afec <shift_sub_rows+0x130>)
 800af04:	5c52      	ldrb	r2, [r2, r1]
 800af06:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	785b      	ldrb	r3, [r3, #1]
 800af0c:	73fb      	strb	r3, [r7, #15]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	3305      	adds	r3, #5
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	4619      	mov	r1, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	3301      	adds	r3, #1
 800af1a:	4a34      	ldr	r2, [pc, #208]	; (800afec <shift_sub_rows+0x130>)
 800af1c:	5c52      	ldrb	r2, [r2, r1]
 800af1e:	701a      	strb	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	3309      	adds	r3, #9
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	4619      	mov	r1, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	3305      	adds	r3, #5
 800af2c:	4a2f      	ldr	r2, [pc, #188]	; (800afec <shift_sub_rows+0x130>)
 800af2e:	5c52      	ldrb	r2, [r2, r1]
 800af30:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	330d      	adds	r3, #13
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	4619      	mov	r1, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3309      	adds	r3, #9
 800af3e:	4a2b      	ldr	r2, [pc, #172]	; (800afec <shift_sub_rows+0x130>)
 800af40:	5c52      	ldrb	r2, [r2, r1]
 800af42:	701a      	strb	r2, [r3, #0]
 800af44:	7bfa      	ldrb	r2, [r7, #15]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	330d      	adds	r3, #13
 800af4a:	4928      	ldr	r1, [pc, #160]	; (800afec <shift_sub_rows+0x130>)
 800af4c:	5c8a      	ldrb	r2, [r1, r2]
 800af4e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	789b      	ldrb	r3, [r3, #2]
 800af54:	73fb      	strb	r3, [r7, #15]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	330a      	adds	r3, #10
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	4619      	mov	r1, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	3302      	adds	r3, #2
 800af62:	4a22      	ldr	r2, [pc, #136]	; (800afec <shift_sub_rows+0x130>)
 800af64:	5c52      	ldrb	r2, [r2, r1]
 800af66:	701a      	strb	r2, [r3, #0]
 800af68:	7bfa      	ldrb	r2, [r7, #15]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	330a      	adds	r3, #10
 800af6e:	491f      	ldr	r1, [pc, #124]	; (800afec <shift_sub_rows+0x130>)
 800af70:	5c8a      	ldrb	r2, [r1, r2]
 800af72:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	799b      	ldrb	r3, [r3, #6]
 800af78:	73fb      	strb	r3, [r7, #15]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	330e      	adds	r3, #14
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	4619      	mov	r1, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	3306      	adds	r3, #6
 800af86:	4a19      	ldr	r2, [pc, #100]	; (800afec <shift_sub_rows+0x130>)
 800af88:	5c52      	ldrb	r2, [r2, r1]
 800af8a:	701a      	strb	r2, [r3, #0]
 800af8c:	7bfa      	ldrb	r2, [r7, #15]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	330e      	adds	r3, #14
 800af92:	4916      	ldr	r1, [pc, #88]	; (800afec <shift_sub_rows+0x130>)
 800af94:	5c8a      	ldrb	r2, [r1, r2]
 800af96:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	7bdb      	ldrb	r3, [r3, #15]
 800af9c:	73fb      	strb	r3, [r7, #15]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	330b      	adds	r3, #11
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	4619      	mov	r1, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	330f      	adds	r3, #15
 800afaa:	4a10      	ldr	r2, [pc, #64]	; (800afec <shift_sub_rows+0x130>)
 800afac:	5c52      	ldrb	r2, [r2, r1]
 800afae:	701a      	strb	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	3307      	adds	r3, #7
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	4619      	mov	r1, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	330b      	adds	r3, #11
 800afbc:	4a0b      	ldr	r2, [pc, #44]	; (800afec <shift_sub_rows+0x130>)
 800afbe:	5c52      	ldrb	r2, [r2, r1]
 800afc0:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	3303      	adds	r3, #3
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	4619      	mov	r1, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	3307      	adds	r3, #7
 800afce:	4a07      	ldr	r2, [pc, #28]	; (800afec <shift_sub_rows+0x130>)
 800afd0:	5c52      	ldrb	r2, [r2, r1]
 800afd2:	701a      	strb	r2, [r3, #0]
 800afd4:	7bfa      	ldrb	r2, [r7, #15]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	3303      	adds	r3, #3
 800afda:	4904      	ldr	r1, [pc, #16]	; (800afec <shift_sub_rows+0x130>)
 800afdc:	5c8a      	ldrb	r2, [r1, r2]
 800afde:	701a      	strb	r2, [r3, #0]
}
 800afe0:	bf00      	nop
 800afe2:	3714      	adds	r7, #20
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bc80      	pop	{r7}
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	0801d880 	.word	0x0801d880

0800aff0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800aff8:	f107 0308 	add.w	r3, r7, #8
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	4618      	mov	r0, r3
 800b000:	f7ff fd6c 	bl	800aadc <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b004:	7a3b      	ldrb	r3, [r7, #8]
 800b006:	461a      	mov	r2, r3
 800b008:	4b9a      	ldr	r3, [pc, #616]	; (800b274 <mix_sub_columns+0x284>)
 800b00a:	5c9a      	ldrb	r2, [r3, r2]
 800b00c:	7b7b      	ldrb	r3, [r7, #13]
 800b00e:	4619      	mov	r1, r3
 800b010:	4b99      	ldr	r3, [pc, #612]	; (800b278 <mix_sub_columns+0x288>)
 800b012:	5c5b      	ldrb	r3, [r3, r1]
 800b014:	4053      	eors	r3, r2
 800b016:	b2da      	uxtb	r2, r3
 800b018:	7cbb      	ldrb	r3, [r7, #18]
 800b01a:	4619      	mov	r1, r3
 800b01c:	4b97      	ldr	r3, [pc, #604]	; (800b27c <mix_sub_columns+0x28c>)
 800b01e:	5c5b      	ldrb	r3, [r3, r1]
 800b020:	4053      	eors	r3, r2
 800b022:	b2da      	uxtb	r2, r3
 800b024:	7dfb      	ldrb	r3, [r7, #23]
 800b026:	4619      	mov	r1, r3
 800b028:	4b94      	ldr	r3, [pc, #592]	; (800b27c <mix_sub_columns+0x28c>)
 800b02a:	5c5b      	ldrb	r3, [r3, r1]
 800b02c:	4053      	eors	r3, r2
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b034:	7a3b      	ldrb	r3, [r7, #8]
 800b036:	461a      	mov	r2, r3
 800b038:	4b90      	ldr	r3, [pc, #576]	; (800b27c <mix_sub_columns+0x28c>)
 800b03a:	5c9a      	ldrb	r2, [r3, r2]
 800b03c:	7b7b      	ldrb	r3, [r7, #13]
 800b03e:	4619      	mov	r1, r3
 800b040:	4b8c      	ldr	r3, [pc, #560]	; (800b274 <mix_sub_columns+0x284>)
 800b042:	5c5b      	ldrb	r3, [r3, r1]
 800b044:	4053      	eors	r3, r2
 800b046:	b2da      	uxtb	r2, r3
 800b048:	7cbb      	ldrb	r3, [r7, #18]
 800b04a:	4619      	mov	r1, r3
 800b04c:	4b8a      	ldr	r3, [pc, #552]	; (800b278 <mix_sub_columns+0x288>)
 800b04e:	5c5b      	ldrb	r3, [r3, r1]
 800b050:	4053      	eors	r3, r2
 800b052:	b2d9      	uxtb	r1, r3
 800b054:	7dfb      	ldrb	r3, [r7, #23]
 800b056:	461a      	mov	r2, r3
 800b058:	4b88      	ldr	r3, [pc, #544]	; (800b27c <mix_sub_columns+0x28c>)
 800b05a:	5c9a      	ldrb	r2, [r3, r2]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	3301      	adds	r3, #1
 800b060:	404a      	eors	r2, r1
 800b062:	b2d2      	uxtb	r2, r2
 800b064:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b066:	7a3b      	ldrb	r3, [r7, #8]
 800b068:	461a      	mov	r2, r3
 800b06a:	4b84      	ldr	r3, [pc, #528]	; (800b27c <mix_sub_columns+0x28c>)
 800b06c:	5c9a      	ldrb	r2, [r3, r2]
 800b06e:	7b7b      	ldrb	r3, [r7, #13]
 800b070:	4619      	mov	r1, r3
 800b072:	4b82      	ldr	r3, [pc, #520]	; (800b27c <mix_sub_columns+0x28c>)
 800b074:	5c5b      	ldrb	r3, [r3, r1]
 800b076:	4053      	eors	r3, r2
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	7cbb      	ldrb	r3, [r7, #18]
 800b07c:	4619      	mov	r1, r3
 800b07e:	4b7d      	ldr	r3, [pc, #500]	; (800b274 <mix_sub_columns+0x284>)
 800b080:	5c5b      	ldrb	r3, [r3, r1]
 800b082:	4053      	eors	r3, r2
 800b084:	b2d9      	uxtb	r1, r3
 800b086:	7dfb      	ldrb	r3, [r7, #23]
 800b088:	461a      	mov	r2, r3
 800b08a:	4b7b      	ldr	r3, [pc, #492]	; (800b278 <mix_sub_columns+0x288>)
 800b08c:	5c9a      	ldrb	r2, [r3, r2]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	3302      	adds	r3, #2
 800b092:	404a      	eors	r2, r1
 800b094:	b2d2      	uxtb	r2, r2
 800b096:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b098:	7a3b      	ldrb	r3, [r7, #8]
 800b09a:	461a      	mov	r2, r3
 800b09c:	4b76      	ldr	r3, [pc, #472]	; (800b278 <mix_sub_columns+0x288>)
 800b09e:	5c9a      	ldrb	r2, [r3, r2]
 800b0a0:	7b7b      	ldrb	r3, [r7, #13]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	4b75      	ldr	r3, [pc, #468]	; (800b27c <mix_sub_columns+0x28c>)
 800b0a6:	5c5b      	ldrb	r3, [r3, r1]
 800b0a8:	4053      	eors	r3, r2
 800b0aa:	b2da      	uxtb	r2, r3
 800b0ac:	7cbb      	ldrb	r3, [r7, #18]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4b72      	ldr	r3, [pc, #456]	; (800b27c <mix_sub_columns+0x28c>)
 800b0b2:	5c5b      	ldrb	r3, [r3, r1]
 800b0b4:	4053      	eors	r3, r2
 800b0b6:	b2d9      	uxtb	r1, r3
 800b0b8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	4b6d      	ldr	r3, [pc, #436]	; (800b274 <mix_sub_columns+0x284>)
 800b0be:	5c9a      	ldrb	r2, [r3, r2]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	3303      	adds	r3, #3
 800b0c4:	404a      	eors	r2, r1
 800b0c6:	b2d2      	uxtb	r2, r2
 800b0c8:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b0ca:	7b3b      	ldrb	r3, [r7, #12]
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	4b69      	ldr	r3, [pc, #420]	; (800b274 <mix_sub_columns+0x284>)
 800b0d0:	5c9a      	ldrb	r2, [r3, r2]
 800b0d2:	7c7b      	ldrb	r3, [r7, #17]
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	4b68      	ldr	r3, [pc, #416]	; (800b278 <mix_sub_columns+0x288>)
 800b0d8:	5c5b      	ldrb	r3, [r3, r1]
 800b0da:	4053      	eors	r3, r2
 800b0dc:	b2da      	uxtb	r2, r3
 800b0de:	7dbb      	ldrb	r3, [r7, #22]
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	4b66      	ldr	r3, [pc, #408]	; (800b27c <mix_sub_columns+0x28c>)
 800b0e4:	5c5b      	ldrb	r3, [r3, r1]
 800b0e6:	4053      	eors	r3, r2
 800b0e8:	b2d9      	uxtb	r1, r3
 800b0ea:	7afb      	ldrb	r3, [r7, #11]
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	4b63      	ldr	r3, [pc, #396]	; (800b27c <mix_sub_columns+0x28c>)
 800b0f0:	5c9a      	ldrb	r2, [r3, r2]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	404a      	eors	r2, r1
 800b0f8:	b2d2      	uxtb	r2, r2
 800b0fa:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b0fc:	7b3b      	ldrb	r3, [r7, #12]
 800b0fe:	461a      	mov	r2, r3
 800b100:	4b5e      	ldr	r3, [pc, #376]	; (800b27c <mix_sub_columns+0x28c>)
 800b102:	5c9a      	ldrb	r2, [r3, r2]
 800b104:	7c7b      	ldrb	r3, [r7, #17]
 800b106:	4619      	mov	r1, r3
 800b108:	4b5a      	ldr	r3, [pc, #360]	; (800b274 <mix_sub_columns+0x284>)
 800b10a:	5c5b      	ldrb	r3, [r3, r1]
 800b10c:	4053      	eors	r3, r2
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	7dbb      	ldrb	r3, [r7, #22]
 800b112:	4619      	mov	r1, r3
 800b114:	4b58      	ldr	r3, [pc, #352]	; (800b278 <mix_sub_columns+0x288>)
 800b116:	5c5b      	ldrb	r3, [r3, r1]
 800b118:	4053      	eors	r3, r2
 800b11a:	b2d9      	uxtb	r1, r3
 800b11c:	7afb      	ldrb	r3, [r7, #11]
 800b11e:	461a      	mov	r2, r3
 800b120:	4b56      	ldr	r3, [pc, #344]	; (800b27c <mix_sub_columns+0x28c>)
 800b122:	5c9a      	ldrb	r2, [r3, r2]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	3305      	adds	r3, #5
 800b128:	404a      	eors	r2, r1
 800b12a:	b2d2      	uxtb	r2, r2
 800b12c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b12e:	7b3b      	ldrb	r3, [r7, #12]
 800b130:	461a      	mov	r2, r3
 800b132:	4b52      	ldr	r3, [pc, #328]	; (800b27c <mix_sub_columns+0x28c>)
 800b134:	5c9a      	ldrb	r2, [r3, r2]
 800b136:	7c7b      	ldrb	r3, [r7, #17]
 800b138:	4619      	mov	r1, r3
 800b13a:	4b50      	ldr	r3, [pc, #320]	; (800b27c <mix_sub_columns+0x28c>)
 800b13c:	5c5b      	ldrb	r3, [r3, r1]
 800b13e:	4053      	eors	r3, r2
 800b140:	b2da      	uxtb	r2, r3
 800b142:	7dbb      	ldrb	r3, [r7, #22]
 800b144:	4619      	mov	r1, r3
 800b146:	4b4b      	ldr	r3, [pc, #300]	; (800b274 <mix_sub_columns+0x284>)
 800b148:	5c5b      	ldrb	r3, [r3, r1]
 800b14a:	4053      	eors	r3, r2
 800b14c:	b2d9      	uxtb	r1, r3
 800b14e:	7afb      	ldrb	r3, [r7, #11]
 800b150:	461a      	mov	r2, r3
 800b152:	4b49      	ldr	r3, [pc, #292]	; (800b278 <mix_sub_columns+0x288>)
 800b154:	5c9a      	ldrb	r2, [r3, r2]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	3306      	adds	r3, #6
 800b15a:	404a      	eors	r2, r1
 800b15c:	b2d2      	uxtb	r2, r2
 800b15e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b160:	7b3b      	ldrb	r3, [r7, #12]
 800b162:	461a      	mov	r2, r3
 800b164:	4b44      	ldr	r3, [pc, #272]	; (800b278 <mix_sub_columns+0x288>)
 800b166:	5c9a      	ldrb	r2, [r3, r2]
 800b168:	7c7b      	ldrb	r3, [r7, #17]
 800b16a:	4619      	mov	r1, r3
 800b16c:	4b43      	ldr	r3, [pc, #268]	; (800b27c <mix_sub_columns+0x28c>)
 800b16e:	5c5b      	ldrb	r3, [r3, r1]
 800b170:	4053      	eors	r3, r2
 800b172:	b2da      	uxtb	r2, r3
 800b174:	7dbb      	ldrb	r3, [r7, #22]
 800b176:	4619      	mov	r1, r3
 800b178:	4b40      	ldr	r3, [pc, #256]	; (800b27c <mix_sub_columns+0x28c>)
 800b17a:	5c5b      	ldrb	r3, [r3, r1]
 800b17c:	4053      	eors	r3, r2
 800b17e:	b2d9      	uxtb	r1, r3
 800b180:	7afb      	ldrb	r3, [r7, #11]
 800b182:	461a      	mov	r2, r3
 800b184:	4b3b      	ldr	r3, [pc, #236]	; (800b274 <mix_sub_columns+0x284>)
 800b186:	5c9a      	ldrb	r2, [r3, r2]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3307      	adds	r3, #7
 800b18c:	404a      	eors	r2, r1
 800b18e:	b2d2      	uxtb	r2, r2
 800b190:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b192:	7c3b      	ldrb	r3, [r7, #16]
 800b194:	461a      	mov	r2, r3
 800b196:	4b37      	ldr	r3, [pc, #220]	; (800b274 <mix_sub_columns+0x284>)
 800b198:	5c9a      	ldrb	r2, [r3, r2]
 800b19a:	7d7b      	ldrb	r3, [r7, #21]
 800b19c:	4619      	mov	r1, r3
 800b19e:	4b36      	ldr	r3, [pc, #216]	; (800b278 <mix_sub_columns+0x288>)
 800b1a0:	5c5b      	ldrb	r3, [r3, r1]
 800b1a2:	4053      	eors	r3, r2
 800b1a4:	b2da      	uxtb	r2, r3
 800b1a6:	7abb      	ldrb	r3, [r7, #10]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	4b34      	ldr	r3, [pc, #208]	; (800b27c <mix_sub_columns+0x28c>)
 800b1ac:	5c5b      	ldrb	r3, [r3, r1]
 800b1ae:	4053      	eors	r3, r2
 800b1b0:	b2d9      	uxtb	r1, r3
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	4b31      	ldr	r3, [pc, #196]	; (800b27c <mix_sub_columns+0x28c>)
 800b1b8:	5c9a      	ldrb	r2, [r3, r2]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	3308      	adds	r3, #8
 800b1be:	404a      	eors	r2, r1
 800b1c0:	b2d2      	uxtb	r2, r2
 800b1c2:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b1c4:	7c3b      	ldrb	r3, [r7, #16]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	4b2c      	ldr	r3, [pc, #176]	; (800b27c <mix_sub_columns+0x28c>)
 800b1ca:	5c9a      	ldrb	r2, [r3, r2]
 800b1cc:	7d7b      	ldrb	r3, [r7, #21]
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	4b28      	ldr	r3, [pc, #160]	; (800b274 <mix_sub_columns+0x284>)
 800b1d2:	5c5b      	ldrb	r3, [r3, r1]
 800b1d4:	4053      	eors	r3, r2
 800b1d6:	b2da      	uxtb	r2, r3
 800b1d8:	7abb      	ldrb	r3, [r7, #10]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	4b26      	ldr	r3, [pc, #152]	; (800b278 <mix_sub_columns+0x288>)
 800b1de:	5c5b      	ldrb	r3, [r3, r1]
 800b1e0:	4053      	eors	r3, r2
 800b1e2:	b2d9      	uxtb	r1, r3
 800b1e4:	7bfb      	ldrb	r3, [r7, #15]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	4b24      	ldr	r3, [pc, #144]	; (800b27c <mix_sub_columns+0x28c>)
 800b1ea:	5c9a      	ldrb	r2, [r3, r2]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	3309      	adds	r3, #9
 800b1f0:	404a      	eors	r2, r1
 800b1f2:	b2d2      	uxtb	r2, r2
 800b1f4:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b1f6:	7c3b      	ldrb	r3, [r7, #16]
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	4b20      	ldr	r3, [pc, #128]	; (800b27c <mix_sub_columns+0x28c>)
 800b1fc:	5c9a      	ldrb	r2, [r3, r2]
 800b1fe:	7d7b      	ldrb	r3, [r7, #21]
 800b200:	4619      	mov	r1, r3
 800b202:	4b1e      	ldr	r3, [pc, #120]	; (800b27c <mix_sub_columns+0x28c>)
 800b204:	5c5b      	ldrb	r3, [r3, r1]
 800b206:	4053      	eors	r3, r2
 800b208:	b2da      	uxtb	r2, r3
 800b20a:	7abb      	ldrb	r3, [r7, #10]
 800b20c:	4619      	mov	r1, r3
 800b20e:	4b19      	ldr	r3, [pc, #100]	; (800b274 <mix_sub_columns+0x284>)
 800b210:	5c5b      	ldrb	r3, [r3, r1]
 800b212:	4053      	eors	r3, r2
 800b214:	b2d9      	uxtb	r1, r3
 800b216:	7bfb      	ldrb	r3, [r7, #15]
 800b218:	461a      	mov	r2, r3
 800b21a:	4b17      	ldr	r3, [pc, #92]	; (800b278 <mix_sub_columns+0x288>)
 800b21c:	5c9a      	ldrb	r2, [r3, r2]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	330a      	adds	r3, #10
 800b222:	404a      	eors	r2, r1
 800b224:	b2d2      	uxtb	r2, r2
 800b226:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b228:	7c3b      	ldrb	r3, [r7, #16]
 800b22a:	461a      	mov	r2, r3
 800b22c:	4b12      	ldr	r3, [pc, #72]	; (800b278 <mix_sub_columns+0x288>)
 800b22e:	5c9a      	ldrb	r2, [r3, r2]
 800b230:	7d7b      	ldrb	r3, [r7, #21]
 800b232:	4619      	mov	r1, r3
 800b234:	4b11      	ldr	r3, [pc, #68]	; (800b27c <mix_sub_columns+0x28c>)
 800b236:	5c5b      	ldrb	r3, [r3, r1]
 800b238:	4053      	eors	r3, r2
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	7abb      	ldrb	r3, [r7, #10]
 800b23e:	4619      	mov	r1, r3
 800b240:	4b0e      	ldr	r3, [pc, #56]	; (800b27c <mix_sub_columns+0x28c>)
 800b242:	5c5b      	ldrb	r3, [r3, r1]
 800b244:	4053      	eors	r3, r2
 800b246:	b2d9      	uxtb	r1, r3
 800b248:	7bfb      	ldrb	r3, [r7, #15]
 800b24a:	461a      	mov	r2, r3
 800b24c:	4b09      	ldr	r3, [pc, #36]	; (800b274 <mix_sub_columns+0x284>)
 800b24e:	5c9a      	ldrb	r2, [r3, r2]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	330b      	adds	r3, #11
 800b254:	404a      	eors	r2, r1
 800b256:	b2d2      	uxtb	r2, r2
 800b258:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b25a:	7d3b      	ldrb	r3, [r7, #20]
 800b25c:	461a      	mov	r2, r3
 800b25e:	4b05      	ldr	r3, [pc, #20]	; (800b274 <mix_sub_columns+0x284>)
 800b260:	5c9a      	ldrb	r2, [r3, r2]
 800b262:	7a7b      	ldrb	r3, [r7, #9]
 800b264:	4619      	mov	r1, r3
 800b266:	4b04      	ldr	r3, [pc, #16]	; (800b278 <mix_sub_columns+0x288>)
 800b268:	5c5b      	ldrb	r3, [r3, r1]
 800b26a:	4053      	eors	r3, r2
 800b26c:	b2da      	uxtb	r2, r3
 800b26e:	7bbb      	ldrb	r3, [r7, #14]
 800b270:	4619      	mov	r1, r3
 800b272:	e005      	b.n	800b280 <mix_sub_columns+0x290>
 800b274:	0801d980 	.word	0x0801d980
 800b278:	0801da80 	.word	0x0801da80
 800b27c:	0801d880 	.word	0x0801d880
 800b280:	4b2d      	ldr	r3, [pc, #180]	; (800b338 <mix_sub_columns+0x348>)
 800b282:	5c5b      	ldrb	r3, [r3, r1]
 800b284:	4053      	eors	r3, r2
 800b286:	b2d9      	uxtb	r1, r3
 800b288:	7cfb      	ldrb	r3, [r7, #19]
 800b28a:	461a      	mov	r2, r3
 800b28c:	4b2a      	ldr	r3, [pc, #168]	; (800b338 <mix_sub_columns+0x348>)
 800b28e:	5c9a      	ldrb	r2, [r3, r2]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	330c      	adds	r3, #12
 800b294:	404a      	eors	r2, r1
 800b296:	b2d2      	uxtb	r2, r2
 800b298:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b29a:	7d3b      	ldrb	r3, [r7, #20]
 800b29c:	461a      	mov	r2, r3
 800b29e:	4b26      	ldr	r3, [pc, #152]	; (800b338 <mix_sub_columns+0x348>)
 800b2a0:	5c9a      	ldrb	r2, [r3, r2]
 800b2a2:	7a7b      	ldrb	r3, [r7, #9]
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4b25      	ldr	r3, [pc, #148]	; (800b33c <mix_sub_columns+0x34c>)
 800b2a8:	5c5b      	ldrb	r3, [r3, r1]
 800b2aa:	4053      	eors	r3, r2
 800b2ac:	b2da      	uxtb	r2, r3
 800b2ae:	7bbb      	ldrb	r3, [r7, #14]
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	4b23      	ldr	r3, [pc, #140]	; (800b340 <mix_sub_columns+0x350>)
 800b2b4:	5c5b      	ldrb	r3, [r3, r1]
 800b2b6:	4053      	eors	r3, r2
 800b2b8:	b2d9      	uxtb	r1, r3
 800b2ba:	7cfb      	ldrb	r3, [r7, #19]
 800b2bc:	461a      	mov	r2, r3
 800b2be:	4b1e      	ldr	r3, [pc, #120]	; (800b338 <mix_sub_columns+0x348>)
 800b2c0:	5c9a      	ldrb	r2, [r3, r2]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	330d      	adds	r3, #13
 800b2c6:	404a      	eors	r2, r1
 800b2c8:	b2d2      	uxtb	r2, r2
 800b2ca:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b2cc:	7d3b      	ldrb	r3, [r7, #20]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	4b19      	ldr	r3, [pc, #100]	; (800b338 <mix_sub_columns+0x348>)
 800b2d2:	5c9a      	ldrb	r2, [r3, r2]
 800b2d4:	7a7b      	ldrb	r3, [r7, #9]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	4b17      	ldr	r3, [pc, #92]	; (800b338 <mix_sub_columns+0x348>)
 800b2da:	5c5b      	ldrb	r3, [r3, r1]
 800b2dc:	4053      	eors	r3, r2
 800b2de:	b2da      	uxtb	r2, r3
 800b2e0:	7bbb      	ldrb	r3, [r7, #14]
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	4b15      	ldr	r3, [pc, #84]	; (800b33c <mix_sub_columns+0x34c>)
 800b2e6:	5c5b      	ldrb	r3, [r3, r1]
 800b2e8:	4053      	eors	r3, r2
 800b2ea:	b2d9      	uxtb	r1, r3
 800b2ec:	7cfb      	ldrb	r3, [r7, #19]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	4b13      	ldr	r3, [pc, #76]	; (800b340 <mix_sub_columns+0x350>)
 800b2f2:	5c9a      	ldrb	r2, [r3, r2]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	330e      	adds	r3, #14
 800b2f8:	404a      	eors	r2, r1
 800b2fa:	b2d2      	uxtb	r2, r2
 800b2fc:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b2fe:	7d3b      	ldrb	r3, [r7, #20]
 800b300:	461a      	mov	r2, r3
 800b302:	4b0f      	ldr	r3, [pc, #60]	; (800b340 <mix_sub_columns+0x350>)
 800b304:	5c9a      	ldrb	r2, [r3, r2]
 800b306:	7a7b      	ldrb	r3, [r7, #9]
 800b308:	4619      	mov	r1, r3
 800b30a:	4b0b      	ldr	r3, [pc, #44]	; (800b338 <mix_sub_columns+0x348>)
 800b30c:	5c5b      	ldrb	r3, [r3, r1]
 800b30e:	4053      	eors	r3, r2
 800b310:	b2da      	uxtb	r2, r3
 800b312:	7bbb      	ldrb	r3, [r7, #14]
 800b314:	4619      	mov	r1, r3
 800b316:	4b08      	ldr	r3, [pc, #32]	; (800b338 <mix_sub_columns+0x348>)
 800b318:	5c5b      	ldrb	r3, [r3, r1]
 800b31a:	4053      	eors	r3, r2
 800b31c:	b2d9      	uxtb	r1, r3
 800b31e:	7cfb      	ldrb	r3, [r7, #19]
 800b320:	461a      	mov	r2, r3
 800b322:	4b06      	ldr	r3, [pc, #24]	; (800b33c <mix_sub_columns+0x34c>)
 800b324:	5c9a      	ldrb	r2, [r3, r2]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	330f      	adds	r3, #15
 800b32a:	404a      	eors	r2, r1
 800b32c:	b2d2      	uxtb	r2, r2
 800b32e:	701a      	strb	r2, [r3, #0]
  }
 800b330:	bf00      	nop
 800b332:	3718      	adds	r7, #24
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	0801d880 	.word	0x0801d880
 800b33c:	0801d980 	.word	0x0801d980
 800b340:	0801da80 	.word	0x0801da80

0800b344 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	460b      	mov	r3, r1
 800b34e:	607a      	str	r2, [r7, #4]
 800b350:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b352:	7afb      	ldrb	r3, [r7, #11]
 800b354:	3b10      	subs	r3, #16
 800b356:	2b10      	cmp	r3, #16
 800b358:	bf8c      	ite	hi
 800b35a:	2201      	movhi	r2, #1
 800b35c:	2200      	movls	r2, #0
 800b35e:	b2d2      	uxtb	r2, r2
 800b360:	2a00      	cmp	r2, #0
 800b362:	d10b      	bne.n	800b37c <lorawan_aes_set_key+0x38>
 800b364:	4a64      	ldr	r2, [pc, #400]	; (800b4f8 <lorawan_aes_set_key+0x1b4>)
 800b366:	fa22 f303 	lsr.w	r3, r2, r3
 800b36a:	f003 0301 	and.w	r3, r3, #1
 800b36e:	2b00      	cmp	r3, #0
 800b370:	bf14      	ite	ne
 800b372:	2301      	movne	r3, #1
 800b374:	2300      	moveq	r3, #0
 800b376:	b2db      	uxtb	r3, r3
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d105      	bne.n	800b388 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b384:	23ff      	movs	r3, #255	; 0xff
 800b386:	e0b2      	b.n	800b4ee <lorawan_aes_set_key+0x1aa>
        break;
 800b388:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	7afa      	ldrb	r2, [r7, #11]
 800b38e:	68f9      	ldr	r1, [r7, #12]
 800b390:	4618      	mov	r0, r3
 800b392:	f7ff fbfc 	bl	800ab8e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b396:	7afb      	ldrb	r3, [r7, #11]
 800b398:	331c      	adds	r3, #28
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b3a0:	7c7b      	ldrb	r3, [r7, #17]
 800b3a2:	091b      	lsrs	r3, r3, #4
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b3b0:	7afb      	ldrb	r3, [r7, #11]
 800b3b2:	75fb      	strb	r3, [r7, #23]
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	75bb      	strb	r3, [r7, #22]
 800b3b8:	e093      	b.n	800b4e2 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b3ba:	7dfb      	ldrb	r3, [r7, #23]
 800b3bc:	3b04      	subs	r3, #4
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	5cd3      	ldrb	r3, [r2, r3]
 800b3c2:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b3c4:	7dfb      	ldrb	r3, [r7, #23]
 800b3c6:	3b03      	subs	r3, #3
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	5cd3      	ldrb	r3, [r2, r3]
 800b3cc:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b3ce:	7dfb      	ldrb	r3, [r7, #23]
 800b3d0:	3b02      	subs	r3, #2
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	5cd3      	ldrb	r3, [r2, r3]
 800b3d6:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b3d8:	7dfb      	ldrb	r3, [r7, #23]
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	5cd3      	ldrb	r3, [r2, r3]
 800b3e0:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b3e2:	7dfb      	ldrb	r3, [r7, #23]
 800b3e4:	7afa      	ldrb	r2, [r7, #11]
 800b3e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3ea:	fb01 f202 	mul.w	r2, r1, r2
 800b3ee:	1a9b      	subs	r3, r3, r2
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d127      	bne.n	800b446 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800b3f6:	7d7b      	ldrb	r3, [r7, #21]
 800b3f8:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b3fa:	7d3b      	ldrb	r3, [r7, #20]
 800b3fc:	4a3f      	ldr	r2, [pc, #252]	; (800b4fc <lorawan_aes_set_key+0x1b8>)
 800b3fe:	5cd2      	ldrb	r2, [r2, r3]
 800b400:	7dbb      	ldrb	r3, [r7, #22]
 800b402:	4053      	eors	r3, r2
 800b404:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b406:	7cfb      	ldrb	r3, [r7, #19]
 800b408:	4a3c      	ldr	r2, [pc, #240]	; (800b4fc <lorawan_aes_set_key+0x1b8>)
 800b40a:	5cd3      	ldrb	r3, [r2, r3]
 800b40c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b40e:	7cbb      	ldrb	r3, [r7, #18]
 800b410:	4a3a      	ldr	r2, [pc, #232]	; (800b4fc <lorawan_aes_set_key+0x1b8>)
 800b412:	5cd3      	ldrb	r3, [r2, r3]
 800b414:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b416:	7c3b      	ldrb	r3, [r7, #16]
 800b418:	4a38      	ldr	r2, [pc, #224]	; (800b4fc <lorawan_aes_set_key+0x1b8>)
 800b41a:	5cd3      	ldrb	r3, [r2, r3]
 800b41c:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b41e:	7dbb      	ldrb	r3, [r7, #22]
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	b25a      	sxtb	r2, r3
 800b424:	7dbb      	ldrb	r3, [r7, #22]
 800b426:	09db      	lsrs	r3, r3, #7
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	4619      	mov	r1, r3
 800b42c:	0049      	lsls	r1, r1, #1
 800b42e:	440b      	add	r3, r1
 800b430:	4619      	mov	r1, r3
 800b432:	00c8      	lsls	r0, r1, #3
 800b434:	4619      	mov	r1, r3
 800b436:	4603      	mov	r3, r0
 800b438:	440b      	add	r3, r1
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	b25b      	sxtb	r3, r3
 800b43e:	4053      	eors	r3, r2
 800b440:	b25b      	sxtb	r3, r3
 800b442:	75bb      	strb	r3, [r7, #22]
 800b444:	e01c      	b.n	800b480 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b446:	7afb      	ldrb	r3, [r7, #11]
 800b448:	2b18      	cmp	r3, #24
 800b44a:	d919      	bls.n	800b480 <lorawan_aes_set_key+0x13c>
 800b44c:	7dfb      	ldrb	r3, [r7, #23]
 800b44e:	7afa      	ldrb	r2, [r7, #11]
 800b450:	fbb3 f1f2 	udiv	r1, r3, r2
 800b454:	fb01 f202 	mul.w	r2, r1, r2
 800b458:	1a9b      	subs	r3, r3, r2
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	2b10      	cmp	r3, #16
 800b45e:	d10f      	bne.n	800b480 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800b460:	7d7b      	ldrb	r3, [r7, #21]
 800b462:	4a26      	ldr	r2, [pc, #152]	; (800b4fc <lorawan_aes_set_key+0x1b8>)
 800b464:	5cd3      	ldrb	r3, [r2, r3]
 800b466:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b468:	7d3b      	ldrb	r3, [r7, #20]
 800b46a:	4a24      	ldr	r2, [pc, #144]	; (800b4fc <lorawan_aes_set_key+0x1b8>)
 800b46c:	5cd3      	ldrb	r3, [r2, r3]
 800b46e:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b470:	7cfb      	ldrb	r3, [r7, #19]
 800b472:	4a22      	ldr	r2, [pc, #136]	; (800b4fc <lorawan_aes_set_key+0x1b8>)
 800b474:	5cd3      	ldrb	r3, [r2, r3]
 800b476:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b478:	7cbb      	ldrb	r3, [r7, #18]
 800b47a:	4a20      	ldr	r2, [pc, #128]	; (800b4fc <lorawan_aes_set_key+0x1b8>)
 800b47c:	5cd3      	ldrb	r3, [r2, r3]
 800b47e:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b480:	7dfa      	ldrb	r2, [r7, #23]
 800b482:	7afb      	ldrb	r3, [r7, #11]
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b488:	7c3b      	ldrb	r3, [r7, #16]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	5cd1      	ldrb	r1, [r2, r3]
 800b48e:	7dfb      	ldrb	r3, [r7, #23]
 800b490:	7d7a      	ldrb	r2, [r7, #21]
 800b492:	404a      	eors	r2, r1
 800b494:	b2d1      	uxtb	r1, r2
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b49a:	7c3b      	ldrb	r3, [r7, #16]
 800b49c:	3301      	adds	r3, #1
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	5cd1      	ldrb	r1, [r2, r3]
 800b4a2:	7dfb      	ldrb	r3, [r7, #23]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	7d3a      	ldrb	r2, [r7, #20]
 800b4a8:	404a      	eors	r2, r1
 800b4aa:	b2d1      	uxtb	r1, r2
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b4b0:	7c3b      	ldrb	r3, [r7, #16]
 800b4b2:	3302      	adds	r3, #2
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	5cd1      	ldrb	r1, [r2, r3]
 800b4b8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ba:	3302      	adds	r3, #2
 800b4bc:	7cfa      	ldrb	r2, [r7, #19]
 800b4be:	404a      	eors	r2, r1
 800b4c0:	b2d1      	uxtb	r1, r2
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b4c6:	7c3b      	ldrb	r3, [r7, #16]
 800b4c8:	3303      	adds	r3, #3
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	5cd1      	ldrb	r1, [r2, r3]
 800b4ce:	7dfb      	ldrb	r3, [r7, #23]
 800b4d0:	3303      	adds	r3, #3
 800b4d2:	7cba      	ldrb	r2, [r7, #18]
 800b4d4:	404a      	eors	r2, r1
 800b4d6:	b2d1      	uxtb	r1, r2
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b4dc:	7dfb      	ldrb	r3, [r7, #23]
 800b4de:	3304      	adds	r3, #4
 800b4e0:	75fb      	strb	r3, [r7, #23]
 800b4e2:	7dfa      	ldrb	r2, [r7, #23]
 800b4e4:	7c7b      	ldrb	r3, [r7, #17]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	f4ff af67 	bcc.w	800b3ba <lorawan_aes_set_key+0x76>
    }
    return 0;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	00010101 	.word	0x00010101
 800b4fc:	0801d880 	.word	0x0801d880

0800b500 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b08a      	sub	sp, #40	; 0x28
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d038      	beq.n	800b588 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	f107 0314 	add.w	r3, r7, #20
 800b51c:	68f9      	ldr	r1, [r7, #12]
 800b51e:	4618      	mov	r0, r3
 800b520:	f7ff fc07 	bl	800ad32 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b524:	2301      	movs	r3, #1
 800b526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b52a:	e014      	b.n	800b556 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b52c:	f107 0314 	add.w	r3, r7, #20
 800b530:	4618      	mov	r0, r3
 800b532:	f7ff fd5d 	bl	800aff0 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b53c:	0112      	lsls	r2, r2, #4
 800b53e:	441a      	add	r2, r3
 800b540:	f107 0314 	add.w	r3, r7, #20
 800b544:	4611      	mov	r1, r2
 800b546:	4618      	mov	r0, r3
 800b548:	f7ff fcab 	bl	800aea2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b54c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b550:	3301      	adds	r3, #1
 800b552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b55c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b560:	429a      	cmp	r2, r3
 800b562:	d3e3      	bcc.n	800b52c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b564:	f107 0314 	add.w	r3, r7, #20
 800b568:	4618      	mov	r0, r3
 800b56a:	f7ff fca7 	bl	800aebc <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b574:	0112      	lsls	r2, r2, #4
 800b576:	441a      	add	r2, r3
 800b578:	f107 0314 	add.w	r3, r7, #20
 800b57c:	4619      	mov	r1, r3
 800b57e:	68b8      	ldr	r0, [r7, #8]
 800b580:	f7ff fbd7 	bl	800ad32 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b584:	2300      	movs	r3, #0
 800b586:	e000      	b.n	800b58a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b588:	23ff      	movs	r3, #255	; 0xff
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3728      	adds	r7, #40	; 0x28
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
	...

0800b594 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800b594:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b596:	b09d      	sub	sp, #116	; 0x74
 800b598:	af10      	add	r7, sp, #64	; 0x40
 800b59a:	4603      	mov	r3, r0
 800b59c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b5a0:	2306      	movs	r3, #6
 800b5a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800b5a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b5aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5ae:	4611      	mov	r1, r2
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f000 f9af 	bl	800b914 <SecureElementGetKeyByID>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800b5bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f040 80b0 	bne.w	800b726 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800b5c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d106      	bne.n	800b5dc <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800b5ce:	4b58      	ldr	r3, [pc, #352]	; (800b730 <PrintKey+0x19c>)
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	2002      	movs	r0, #2
 800b5d6:	f011 f8f5 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
 800b5da:	e056      	b.n	800b68a <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800b5dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d106      	bne.n	800b5f2 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800b5e4:	4b53      	ldr	r3, [pc, #332]	; (800b734 <PrintKey+0x1a0>)
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	2002      	movs	r0, #2
 800b5ec:	f011 f8ea 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
 800b5f0:	e04b      	b.n	800b68a <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800b5f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5f6:	2b03      	cmp	r3, #3
 800b5f8:	d106      	bne.n	800b608 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800b5fa:	4b4f      	ldr	r3, [pc, #316]	; (800b738 <PrintKey+0x1a4>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	2100      	movs	r1, #0
 800b600:	2002      	movs	r0, #2
 800b602:	f011 f8df 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
 800b606:	e040      	b.n	800b68a <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800b608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	d106      	bne.n	800b61e <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800b610:	4b4a      	ldr	r3, [pc, #296]	; (800b73c <PrintKey+0x1a8>)
 800b612:	2200      	movs	r2, #0
 800b614:	2100      	movs	r1, #0
 800b616:	2002      	movs	r0, #2
 800b618:	f011 f8d4 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
 800b61c:	e035      	b.n	800b68a <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800b61e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b622:	2b04      	cmp	r3, #4
 800b624:	d106      	bne.n	800b634 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800b626:	4b46      	ldr	r3, [pc, #280]	; (800b740 <PrintKey+0x1ac>)
 800b628:	2200      	movs	r2, #0
 800b62a:	2100      	movs	r1, #0
 800b62c:	2002      	movs	r0, #2
 800b62e:	f011 f8c9 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
 800b632:	e02a      	b.n	800b68a <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800b634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b638:	2b7f      	cmp	r3, #127	; 0x7f
 800b63a:	d106      	bne.n	800b64a <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800b63c:	4b41      	ldr	r3, [pc, #260]	; (800b744 <PrintKey+0x1b0>)
 800b63e:	2200      	movs	r2, #0
 800b640:	2100      	movs	r1, #0
 800b642:	2002      	movs	r0, #2
 800b644:	f011 f8be 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
 800b648:	e01f      	b.n	800b68a <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800b64a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b64e:	2b80      	cmp	r3, #128	; 0x80
 800b650:	d106      	bne.n	800b660 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800b652:	4b3d      	ldr	r3, [pc, #244]	; (800b748 <PrintKey+0x1b4>)
 800b654:	2200      	movs	r2, #0
 800b656:	2100      	movs	r1, #0
 800b658:	2002      	movs	r0, #2
 800b65a:	f011 f8b3 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
 800b65e:	e014      	b.n	800b68a <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800b660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b664:	2b81      	cmp	r3, #129	; 0x81
 800b666:	d106      	bne.n	800b676 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800b668:	4b38      	ldr	r3, [pc, #224]	; (800b74c <PrintKey+0x1b8>)
 800b66a:	2200      	movs	r2, #0
 800b66c:	2100      	movs	r1, #0
 800b66e:	2002      	movs	r0, #2
 800b670:	f011 f8a8 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
 800b674:	e009      	b.n	800b68a <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800b676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b67a:	2b82      	cmp	r3, #130	; 0x82
 800b67c:	d105      	bne.n	800b68a <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800b67e:	4b34      	ldr	r3, [pc, #208]	; (800b750 <PrintKey+0x1bc>)
 800b680:	2200      	movs	r2, #0
 800b682:	2100      	movs	r1, #0
 800b684:	2002      	movs	r0, #2
 800b686:	f011 f89d 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68c:	785b      	ldrb	r3, [r3, #1]
 800b68e:	4618      	mov	r0, r3
 800b690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b692:	789b      	ldrb	r3, [r3, #2]
 800b694:	461c      	mov	r4, r3
 800b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b698:	78db      	ldrb	r3, [r3, #3]
 800b69a:	461d      	mov	r5, r3
 800b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69e:	791b      	ldrb	r3, [r3, #4]
 800b6a0:	461e      	mov	r6, r3
 800b6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a4:	795b      	ldrb	r3, [r3, #5]
 800b6a6:	623b      	str	r3, [r7, #32]
 800b6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6aa:	799b      	ldrb	r3, [r3, #6]
 800b6ac:	61fb      	str	r3, [r7, #28]
 800b6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b0:	79db      	ldrb	r3, [r3, #7]
 800b6b2:	61bb      	str	r3, [r7, #24]
 800b6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b6:	7a1b      	ldrb	r3, [r3, #8]
 800b6b8:	617b      	str	r3, [r7, #20]
 800b6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6bc:	7a5b      	ldrb	r3, [r3, #9]
 800b6be:	613b      	str	r3, [r7, #16]
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	7a9b      	ldrb	r3, [r3, #10]
 800b6c4:	60fb      	str	r3, [r7, #12]
 800b6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c8:	7adb      	ldrb	r3, [r3, #11]
 800b6ca:	60bb      	str	r3, [r7, #8]
 800b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ce:	7b1b      	ldrb	r3, [r3, #12]
 800b6d0:	607b      	str	r3, [r7, #4]
 800b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d4:	7b5b      	ldrb	r3, [r3, #13]
 800b6d6:	603b      	str	r3, [r7, #0]
 800b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6da:	7b9b      	ldrb	r3, [r3, #14]
 800b6dc:	4619      	mov	r1, r3
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	7bdb      	ldrb	r3, [r3, #15]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e6:	7c1b      	ldrb	r3, [r3, #16]
 800b6e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6ea:	920e      	str	r2, [sp, #56]	; 0x38
 800b6ec:	910d      	str	r1, [sp, #52]	; 0x34
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	920c      	str	r2, [sp, #48]	; 0x30
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	920b      	str	r2, [sp, #44]	; 0x2c
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	920a      	str	r2, [sp, #40]	; 0x28
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	9209      	str	r2, [sp, #36]	; 0x24
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	9208      	str	r2, [sp, #32]
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	9207      	str	r2, [sp, #28]
 800b706:	69ba      	ldr	r2, [r7, #24]
 800b708:	9206      	str	r2, [sp, #24]
 800b70a:	69fa      	ldr	r2, [r7, #28]
 800b70c:	9205      	str	r2, [sp, #20]
 800b70e:	6a3b      	ldr	r3, [r7, #32]
 800b710:	9304      	str	r3, [sp, #16]
 800b712:	9603      	str	r6, [sp, #12]
 800b714:	9502      	str	r5, [sp, #8]
 800b716:	9401      	str	r4, [sp, #4]
 800b718:	9000      	str	r0, [sp, #0]
 800b71a:	4b0e      	ldr	r3, [pc, #56]	; (800b754 <PrintKey+0x1c0>)
 800b71c:	2200      	movs	r2, #0
 800b71e:	2100      	movs	r1, #0
 800b720:	2002      	movs	r0, #2
 800b722:	f011 f84f 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800b726:	bf00      	nop
 800b728:	3734      	adds	r7, #52	; 0x34
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b72e:	bf00      	nop
 800b730:	0801d2d4 	.word	0x0801d2d4
 800b734:	0801d2ec 	.word	0x0801d2ec
 800b738:	0801d304 	.word	0x0801d304
 800b73c:	0801d31c 	.word	0x0801d31c
 800b740:	0801d334 	.word	0x0801d334
 800b744:	0801d34c 	.word	0x0801d34c
 800b748:	0801d364 	.word	0x0801d364
 800b74c:	0801d37c 	.word	0x0801d37c
 800b750:	0801d394 	.word	0x0801d394
 800b754:	0801d3ac 	.word	0x0801d3ac

0800b758 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	4603      	mov	r3, r0
 800b760:	6039      	str	r1, [r7, #0]
 800b762:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b764:	2300      	movs	r3, #0
 800b766:	73fb      	strb	r3, [r7, #15]
 800b768:	e01a      	b.n	800b7a0 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b76a:	4b12      	ldr	r3, [pc, #72]	; (800b7b4 <GetKeyByID+0x5c>)
 800b76c:	6819      	ldr	r1, [r3, #0]
 800b76e:	7bfa      	ldrb	r2, [r7, #15]
 800b770:	4613      	mov	r3, r2
 800b772:	011b      	lsls	r3, r3, #4
 800b774:	4413      	add	r3, r2
 800b776:	440b      	add	r3, r1
 800b778:	3310      	adds	r3, #16
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	79fa      	ldrb	r2, [r7, #7]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d10b      	bne.n	800b79a <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b782:	4b0c      	ldr	r3, [pc, #48]	; (800b7b4 <GetKeyByID+0x5c>)
 800b784:	6819      	ldr	r1, [r3, #0]
 800b786:	7bfa      	ldrb	r2, [r7, #15]
 800b788:	4613      	mov	r3, r2
 800b78a:	011b      	lsls	r3, r3, #4
 800b78c:	4413      	add	r3, r2
 800b78e:	3310      	adds	r3, #16
 800b790:	18ca      	adds	r2, r1, r3
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b796:	2300      	movs	r3, #0
 800b798:	e006      	b.n	800b7a8 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
 800b79c:	3301      	adds	r3, #1
 800b79e:	73fb      	strb	r3, [r7, #15]
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
 800b7a2:	2b09      	cmp	r3, #9
 800b7a4:	d9e1      	bls.n	800b76a <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b7a6:	2303      	movs	r3, #3
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3714      	adds	r7, #20
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bc80      	pop	{r7}
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	200004b8 	.word	0x200004b8

0800b7b8 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800b7b8:	b590      	push	{r4, r7, lr}
 800b7ba:	b0d1      	sub	sp, #324	; 0x144
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800b7c2:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800b7c6:	6020      	str	r0, [r4, #0]
 800b7c8:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800b7cc:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800b7d0:	6001      	str	r1, [r0, #0]
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b7d8:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b7dc:	801a      	strh	r2, [r3, #0]
 800b7de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b7e2:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800b7e6:	460a      	mov	r2, r1
 800b7e8:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800b7ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b7ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d003      	beq.n	800b800 <ComputeCmac+0x48>
 800b7f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d101      	bne.n	800b804 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b800:	2302      	movs	r3, #2
 800b802:	e05c      	b.n	800b8be <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800b804:	f107 0314 	add.w	r3, r7, #20
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fe ff1b 	bl	800a644 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800b80e:	f107 0210 	add.w	r2, r7, #16
 800b812:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b816:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	4611      	mov	r1, r2
 800b81e:	4618      	mov	r0, r3
 800b820:	f7ff ff9a 	bl	800b758 <GetKeyByID>
 800b824:	4603      	mov	r3, r0
 800b826:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b82a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d143      	bne.n	800b8ba <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800b832:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	f107 0314 	add.w	r3, r7, #20
 800b842:	4611      	mov	r1, r2
 800b844:	4618      	mov	r0, r3
 800b846:	f7fe ff16 	bl	800a676 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800b84a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b84e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d009      	beq.n	800b86c <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800b858:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b85c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b860:	f107 0014 	add.w	r0, r7, #20
 800b864:	2210      	movs	r2, #16
 800b866:	6819      	ldr	r1, [r3, #0]
 800b868:	f7fe ff14 	bl	800a694 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800b86c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b870:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b874:	881a      	ldrh	r2, [r3, #0]
 800b876:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b87a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b87e:	f107 0014 	add.w	r0, r7, #20
 800b882:	6819      	ldr	r1, [r3, #0]
 800b884:	f7fe ff06 	bl	800a694 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800b888:	f107 0214 	add.w	r2, r7, #20
 800b88c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800b890:	4611      	mov	r1, r2
 800b892:	4618      	mov	r0, r3
 800b894:	f7fe ffc0 	bl	800a818 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b898:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800b89c:	061a      	lsls	r2, r3, #24
 800b89e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800b8a2:	041b      	lsls	r3, r3, #16
 800b8a4:	431a      	orrs	r2, r3
 800b8a6:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800b8aa:	021b      	lsls	r3, r3, #8
 800b8ac:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800b8ae:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b8b2:	431a      	orrs	r2, r3
 800b8b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800b8b8:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800b8ba:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd90      	pop	{r4, r7, pc}

0800b8c8 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b8d8:	2302      	movs	r3, #2
 800b8da:	e013      	b.n	800b904 <SecureElementInit+0x3c>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800b8dc:	4a0b      	ldr	r2, [pc, #44]	; (800b90c <SecureElementInit+0x44>)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800b8e2:	4b0a      	ldr	r3, [pc, #40]	; (800b90c <SecureElementInit+0x44>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	22c0      	movs	r2, #192	; 0xc0
 800b8e8:	4909      	ldr	r1, [pc, #36]	; (800b910 <SecureElementInit+0x48>)
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f00c fc17 	bl	801811e <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d005      	beq.n	800b902 <SecureElementInit+0x3a>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 800b8f6:	4b05      	ldr	r3, [pc, #20]	; (800b90c <SecureElementInit+0x44>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	4610      	mov	r0, r2
 800b900:	4798      	blx	r3
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	3708      	adds	r7, #8
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	200004b8 	.word	0x200004b8
 800b910:	0801dd94 	.word	0x0801dd94

0800b914 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	4603      	mov	r3, r0
 800b91c:	6039      	str	r1, [r7, #0]
 800b91e:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800b920:	2300      	movs	r3, #0
 800b922:	73fb      	strb	r3, [r7, #15]
 800b924:	e01a      	b.n	800b95c <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800b926:	4b12      	ldr	r3, [pc, #72]	; (800b970 <SecureElementGetKeyByID+0x5c>)
 800b928:	6819      	ldr	r1, [r3, #0]
 800b92a:	7bfa      	ldrb	r2, [r7, #15]
 800b92c:	4613      	mov	r3, r2
 800b92e:	011b      	lsls	r3, r3, #4
 800b930:	4413      	add	r3, r2
 800b932:	440b      	add	r3, r1
 800b934:	3310      	adds	r3, #16
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	79fa      	ldrb	r2, [r7, #7]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d10b      	bne.n	800b956 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800b93e:	4b0c      	ldr	r3, [pc, #48]	; (800b970 <SecureElementGetKeyByID+0x5c>)
 800b940:	6819      	ldr	r1, [r3, #0]
 800b942:	7bfa      	ldrb	r2, [r7, #15]
 800b944:	4613      	mov	r3, r2
 800b946:	011b      	lsls	r3, r3, #4
 800b948:	4413      	add	r3, r2
 800b94a:	3310      	adds	r3, #16
 800b94c:	18ca      	adds	r2, r1, r3
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b952:	2300      	movs	r3, #0
 800b954:	e006      	b.n	800b964 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800b956:	7bfb      	ldrb	r3, [r7, #15]
 800b958:	3301      	adds	r3, #1
 800b95a:	73fb      	strb	r3, [r7, #15]
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
 800b95e:	2b09      	cmp	r3, #9
 800b960:	d9e1      	bls.n	800b926 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b962:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800b964:	4618      	mov	r0, r3
 800b966:	3714      	adds	r7, #20
 800b968:	46bd      	mov	sp, r7
 800b96a:	bc80      	pop	{r7}
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	200004b8 	.word	0x200004b8

0800b974 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800b974:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b976:	b08b      	sub	sp, #44	; 0x2c
 800b978:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800b97a:	4b3f      	ldr	r3, [pc, #252]	; (800ba78 <SecureElementPrintKeys+0x104>)
 800b97c:	2200      	movs	r2, #0
 800b97e:	2100      	movs	r1, #0
 800b980:	2002      	movs	r0, #2
 800b982:	f010 ff1f 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800b986:	2000      	movs	r0, #0
 800b988:	f7ff fe04 	bl	800b594 <PrintKey>
    PrintKey(NWK_KEY);
 800b98c:	2001      	movs	r0, #1
 800b98e:	f7ff fe01 	bl	800b594 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800b992:	4b3a      	ldr	r3, [pc, #232]	; (800ba7c <SecureElementPrintKeys+0x108>)
 800b994:	2200      	movs	r2, #0
 800b996:	2100      	movs	r1, #0
 800b998:	2002      	movs	r0, #2
 800b99a:	f010 ff13 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800b99e:	2003      	movs	r0, #3
 800b9a0:	f7ff fdf8 	bl	800b594 <PrintKey>
    PrintKey(NWK_S_KEY);
 800b9a4:	2002      	movs	r0, #2
 800b9a6:	f7ff fdf5 	bl	800b594 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800b9aa:	4b35      	ldr	r3, [pc, #212]	; (800ba80 <SecureElementPrintKeys+0x10c>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	2002      	movs	r0, #2
 800b9b2:	f010 ff07 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b9b6:	4b33      	ldr	r3, [pc, #204]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	461a      	mov	r2, r3
 800b9be:	4b31      	ldr	r3, [pc, #196]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	785b      	ldrb	r3, [r3, #1]
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	4b2f      	ldr	r3, [pc, #188]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	789b      	ldrb	r3, [r3, #2]
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	4b2d      	ldr	r3, [pc, #180]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	78db      	ldrb	r3, [r3, #3]
 800b9d4:	461c      	mov	r4, r3
 800b9d6:	4b2b      	ldr	r3, [pc, #172]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	791b      	ldrb	r3, [r3, #4]
 800b9dc:	461d      	mov	r5, r3
 800b9de:	4b29      	ldr	r3, [pc, #164]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	795b      	ldrb	r3, [r3, #5]
 800b9e4:	461e      	mov	r6, r3
 800b9e6:	4b27      	ldr	r3, [pc, #156]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	799b      	ldrb	r3, [r3, #6]
 800b9ec:	607b      	str	r3, [r7, #4]
 800b9ee:	4b25      	ldr	r3, [pc, #148]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	79db      	ldrb	r3, [r3, #7]
 800b9f4:	9307      	str	r3, [sp, #28]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	9306      	str	r3, [sp, #24]
 800b9fa:	9605      	str	r6, [sp, #20]
 800b9fc:	9504      	str	r5, [sp, #16]
 800b9fe:	9403      	str	r4, [sp, #12]
 800ba00:	9002      	str	r0, [sp, #8]
 800ba02:	9101      	str	r1, [sp, #4]
 800ba04:	9200      	str	r2, [sp, #0]
 800ba06:	4b20      	ldr	r3, [pc, #128]	; (800ba88 <SecureElementPrintKeys+0x114>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	2002      	movs	r0, #2
 800ba0e:	f010 fed9 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ba12:	4b1c      	ldr	r3, [pc, #112]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	7a1b      	ldrb	r3, [r3, #8]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	4b1a      	ldr	r3, [pc, #104]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	7a5b      	ldrb	r3, [r3, #9]
 800ba20:	4619      	mov	r1, r3
 800ba22:	4b18      	ldr	r3, [pc, #96]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	7a9b      	ldrb	r3, [r3, #10]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	4b16      	ldr	r3, [pc, #88]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	7adb      	ldrb	r3, [r3, #11]
 800ba30:	461c      	mov	r4, r3
 800ba32:	4b14      	ldr	r3, [pc, #80]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	7b1b      	ldrb	r3, [r3, #12]
 800ba38:	461d      	mov	r5, r3
 800ba3a:	4b12      	ldr	r3, [pc, #72]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	7b5b      	ldrb	r3, [r3, #13]
 800ba40:	461e      	mov	r6, r3
 800ba42:	4b10      	ldr	r3, [pc, #64]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	7b9b      	ldrb	r3, [r3, #14]
 800ba48:	607b      	str	r3, [r7, #4]
 800ba4a:	4b0e      	ldr	r3, [pc, #56]	; (800ba84 <SecureElementPrintKeys+0x110>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	7bdb      	ldrb	r3, [r3, #15]
 800ba50:	9307      	str	r3, [sp, #28]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	9306      	str	r3, [sp, #24]
 800ba56:	9605      	str	r6, [sp, #20]
 800ba58:	9504      	str	r5, [sp, #16]
 800ba5a:	9403      	str	r4, [sp, #12]
 800ba5c:	9002      	str	r0, [sp, #8]
 800ba5e:	9101      	str	r1, [sp, #4]
 800ba60:	9200      	str	r2, [sp, #0]
 800ba62:	4b0a      	ldr	r3, [pc, #40]	; (800ba8c <SecureElementPrintKeys+0x118>)
 800ba64:	2200      	movs	r2, #0
 800ba66:	2100      	movs	r1, #0
 800ba68:	2002      	movs	r0, #2
 800ba6a:	f010 feab 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba78:	0801d400 	.word	0x0801d400
 800ba7c:	0801d418 	.word	0x0801d418
 800ba80:	0801d430 	.word	0x0801d430
 800ba84:	200004b8 	.word	0x200004b8
 800ba88:	0801d448 	.word	0x0801d448
 800ba8c:	0801d488 	.word	0x0801d488

0800ba90 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800ba94:	2004      	movs	r0, #4
 800ba96:	f7ff fd7d 	bl	800b594 <PrintKey>
    PrintKey(MC_KE_KEY);
 800ba9a:	207f      	movs	r0, #127	; 0x7f
 800ba9c:	f7ff fd7a 	bl	800b594 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800baa0:	2002      	movs	r0, #2
 800baa2:	f7ff fd77 	bl	800b594 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800baa6:	2003      	movs	r0, #3
 800baa8:	f7ff fd74 	bl	800b594 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	bd80      	pop	{r7, pc}
	...

0800bab4 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b088      	sub	sp, #32
 800bab8:	af00      	add	r7, sp, #0
 800baba:	4603      	mov	r3, r0
 800babc:	6039      	str	r1, [r7, #0]
 800babe:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d101      	bne.n	800baca <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bac6:	2302      	movs	r3, #2
 800bac8:	e04c      	b.n	800bb64 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800baca:	2300      	movs	r3, #0
 800bacc:	77fb      	strb	r3, [r7, #31]
 800bace:	e045      	b.n	800bb5c <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bad0:	4b26      	ldr	r3, [pc, #152]	; (800bb6c <SecureElementSetKey+0xb8>)
 800bad2:	6819      	ldr	r1, [r3, #0]
 800bad4:	7ffa      	ldrb	r2, [r7, #31]
 800bad6:	4613      	mov	r3, r2
 800bad8:	011b      	lsls	r3, r3, #4
 800bada:	4413      	add	r3, r2
 800badc:	440b      	add	r3, r1
 800bade:	3310      	adds	r3, #16
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	79fa      	ldrb	r2, [r7, #7]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d136      	bne.n	800bb56 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800bae8:	79fb      	ldrb	r3, [r7, #7]
 800baea:	2b80      	cmp	r3, #128	; 0x80
 800baec:	d123      	bne.n	800bb36 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800baee:	2306      	movs	r3, #6
 800baf0:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800baf2:	2300      	movs	r3, #0
 800baf4:	60fb      	str	r3, [r7, #12]
 800baf6:	f107 0310 	add.w	r3, r7, #16
 800bafa:	2200      	movs	r2, #0
 800bafc:	601a      	str	r2, [r3, #0]
 800bafe:	605a      	str	r2, [r3, #4]
 800bb00:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800bb02:	f107 030c 	add.w	r3, r7, #12
 800bb06:	227f      	movs	r2, #127	; 0x7f
 800bb08:	2110      	movs	r1, #16
 800bb0a:	6838      	ldr	r0, [r7, #0]
 800bb0c:	f000 f87d 	bl	800bc0a <SecureElementAesEncrypt>
 800bb10:	4603      	mov	r3, r0
 800bb12:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800bb14:	4b15      	ldr	r3, [pc, #84]	; (800bb6c <SecureElementSetKey+0xb8>)
 800bb16:	6819      	ldr	r1, [r3, #0]
 800bb18:	7ffa      	ldrb	r2, [r7, #31]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	011b      	lsls	r3, r3, #4
 800bb1e:	4413      	add	r3, r2
 800bb20:	3310      	adds	r3, #16
 800bb22:	440b      	add	r3, r1
 800bb24:	3301      	adds	r3, #1
 800bb26:	f107 010c 	add.w	r1, r7, #12
 800bb2a:	2210      	movs	r2, #16
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f00c faf6 	bl	801811e <memcpy1>
                return retval;
 800bb32:	7fbb      	ldrb	r3, [r7, #30]
 800bb34:	e016      	b.n	800bb64 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800bb36:	4b0d      	ldr	r3, [pc, #52]	; (800bb6c <SecureElementSetKey+0xb8>)
 800bb38:	6819      	ldr	r1, [r3, #0]
 800bb3a:	7ffa      	ldrb	r2, [r7, #31]
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	011b      	lsls	r3, r3, #4
 800bb40:	4413      	add	r3, r2
 800bb42:	3310      	adds	r3, #16
 800bb44:	440b      	add	r3, r1
 800bb46:	3301      	adds	r3, #1
 800bb48:	2210      	movs	r2, #16
 800bb4a:	6839      	ldr	r1, [r7, #0]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f00c fae6 	bl	801811e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800bb52:	2300      	movs	r3, #0
 800bb54:	e006      	b.n	800bb64 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bb56:	7ffb      	ldrb	r3, [r7, #31]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	77fb      	strb	r3, [r7, #31]
 800bb5c:	7ffb      	ldrb	r3, [r7, #31]
 800bb5e:	2b09      	cmp	r3, #9
 800bb60:	d9b6      	bls.n	800bad0 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bb62:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3720      	adds	r7, #32
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	200004b8 	.word	0x200004b8

0800bb70 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af02      	add	r7, sp, #8
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	460b      	mov	r3, r1
 800bb80:	80fb      	strh	r3, [r7, #6]
 800bb82:	4613      	mov	r3, r2
 800bb84:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800bb86:	797b      	ldrb	r3, [r7, #5]
 800bb88:	2b7e      	cmp	r3, #126	; 0x7e
 800bb8a:	d901      	bls.n	800bb90 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bb8c:	2303      	movs	r3, #3
 800bb8e:	e009      	b.n	800bba4 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800bb90:	7979      	ldrb	r1, [r7, #5]
 800bb92:	88fa      	ldrh	r2, [r7, #6]
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	68b9      	ldr	r1, [r7, #8]
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f7ff fe0b 	bl	800b7b8 <ComputeCmac>
 800bba2:	4603      	mov	r3, r0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b088      	sub	sp, #32
 800bbb0:	af02      	add	r7, sp, #8
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	607a      	str	r2, [r7, #4]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	460b      	mov	r3, r1
 800bbba:	817b      	strh	r3, [r7, #10]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d101      	bne.n	800bbca <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bbc6:	2302      	movs	r3, #2
 800bbc8:	e01b      	b.n	800bc02 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800bbca:	2306      	movs	r3, #6
 800bbcc:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800bbd2:	7a79      	ldrb	r1, [r7, #9]
 800bbd4:	897a      	ldrh	r2, [r7, #10]
 800bbd6:	f107 0310 	add.w	r3, r7, #16
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	460b      	mov	r3, r1
 800bbde:	68f9      	ldr	r1, [r7, #12]
 800bbe0:	2000      	movs	r0, #0
 800bbe2:	f7ff fde9 	bl	800b7b8 <ComputeCmac>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d001      	beq.n	800bbf4 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800bbf0:	7dfb      	ldrb	r3, [r7, #23]
 800bbf2:	e006      	b.n	800bc02 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d001      	beq.n	800bc00 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800bc00:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3718      	adds	r7, #24
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b0c2      	sub	sp, #264	; 0x108
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	60f8      	str	r0, [r7, #12]
 800bc12:	4608      	mov	r0, r1
 800bc14:	4611      	mov	r1, r2
 800bc16:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800bc1a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800bc1e:	6013      	str	r3, [r2, #0]
 800bc20:	4603      	mov	r3, r0
 800bc22:	817b      	strh	r3, [r7, #10]
 800bc24:	460b      	mov	r3, r1
 800bc26:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d006      	beq.n	800bc3c <SecureElementAesEncrypt+0x32>
 800bc2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d101      	bne.n	800bc40 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bc3c:	2302      	movs	r3, #2
 800bc3e:	e046      	b.n	800bcce <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800bc40:	897b      	ldrh	r3, [r7, #10]
 800bc42:	f003 030f 	and.w	r3, r3, #15
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bc4c:	2305      	movs	r3, #5
 800bc4e:	e03e      	b.n	800bcce <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bc50:	f107 0314 	add.w	r3, r7, #20
 800bc54:	22f0      	movs	r2, #240	; 0xf0
 800bc56:	2100      	movs	r1, #0
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f00c fa9b 	bl	8018194 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800bc5e:	f107 0210 	add.w	r2, r7, #16
 800bc62:	7a7b      	ldrb	r3, [r7, #9]
 800bc64:	4611      	mov	r1, r2
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7ff fd76 	bl	800b758 <GetKeyByID>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bc72:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d127      	bne.n	800bcca <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	f107 0214 	add.w	r2, r7, #20
 800bc82:	2110      	movs	r1, #16
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7ff fb5d 	bl	800b344 <lorawan_aes_set_key>

        uint8_t block = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800bc90:	e018      	b.n	800bcc4 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800bc92:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	18d0      	adds	r0, r2, r3
 800bc9a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bc9e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800bca2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800bca6:	6812      	ldr	r2, [r2, #0]
 800bca8:	4413      	add	r3, r2
 800bcaa:	f107 0214 	add.w	r2, r7, #20
 800bcae:	4619      	mov	r1, r3
 800bcb0:	f7ff fc26 	bl	800b500 <lorawan_aes_encrypt>
            block = block + 16;
 800bcb4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bcb8:	3310      	adds	r3, #16
 800bcba:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800bcbe:	897b      	ldrh	r3, [r7, #10]
 800bcc0:	3b10      	subs	r3, #16
 800bcc2:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800bcc4:	897b      	ldrh	r3, [r7, #10]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1e3      	bne.n	800bc92 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800bcca:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b088      	sub	sp, #32
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	460b      	mov	r3, r1
 800bce2:	70fb      	strb	r3, [r7, #3]
 800bce4:	4613      	mov	r3, r2
 800bce6:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d101      	bne.n	800bcf2 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bcee:	2302      	movs	r3, #2
 800bcf0:	e02e      	b.n	800bd50 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800bcf2:	2306      	movs	r3, #6
 800bcf4:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800bcf6:	78bb      	ldrb	r3, [r7, #2]
 800bcf8:	2b7f      	cmp	r3, #127	; 0x7f
 800bcfa:	d104      	bne.n	800bd06 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800bcfc:	78fb      	ldrb	r3, [r7, #3]
 800bcfe:	2b04      	cmp	r3, #4
 800bd00:	d001      	beq.n	800bd06 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bd02:	2303      	movs	r3, #3
 800bd04:	e024      	b.n	800bd50 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800bd06:	2300      	movs	r3, #0
 800bd08:	60fb      	str	r3, [r7, #12]
 800bd0a:	f107 0310 	add.w	r3, r7, #16
 800bd0e:	2200      	movs	r2, #0
 800bd10:	601a      	str	r2, [r3, #0]
 800bd12:	605a      	str	r2, [r3, #4]
 800bd14:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800bd16:	f107 030c 	add.w	r3, r7, #12
 800bd1a:	78fa      	ldrb	r2, [r7, #3]
 800bd1c:	2110      	movs	r1, #16
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f7ff ff73 	bl	800bc0a <SecureElementAesEncrypt>
 800bd24:	4603      	mov	r3, r0
 800bd26:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bd28:	7ffb      	ldrb	r3, [r7, #31]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800bd2e:	7ffb      	ldrb	r3, [r7, #31]
 800bd30:	e00e      	b.n	800bd50 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800bd32:	f107 020c 	add.w	r2, r7, #12
 800bd36:	78bb      	ldrb	r3, [r7, #2]
 800bd38:	4611      	mov	r1, r2
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7ff feba 	bl	800bab4 <SecureElementSetKey>
 800bd40:	4603      	mov	r3, r0
 800bd42:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bd44:	7ffb      	ldrb	r3, [r7, #31]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d001      	beq.n	800bd4e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800bd4a:	7ffb      	ldrb	r3, [r7, #31]
 800bd4c:	e000      	b.n	800bd50 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bd4e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3720      	adds	r7, #32
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60b9      	str	r1, [r7, #8]
 800bd60:	607b      	str	r3, [r7, #4]
 800bd62:	4603      	mov	r3, r0
 800bd64:	73fb      	strb	r3, [r7, #15]
 800bd66:	4613      	mov	r3, r2
 800bd68:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d005      	beq.n	800bd7c <SecureElementProcessJoinAccept+0x24>
 800bd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d002      	beq.n	800bd7c <SecureElementProcessJoinAccept+0x24>
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bd7c:	2302      	movs	r3, #2
 800bd7e:	e064      	b.n	800be4a <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800bd80:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd84:	2b21      	cmp	r3, #33	; 0x21
 800bd86:	d901      	bls.n	800bd8c <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bd88:	2305      	movs	r3, #5
 800bd8a:	e05e      	b.n	800be4a <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800bd90:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	461a      	mov	r2, r3
 800bd98:	6879      	ldr	r1, [r7, #4]
 800bd9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd9c:	f00c f9bf 	bl	801811e <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	1c58      	adds	r0, r3, #1
 800bda4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	b299      	uxth	r1, r3
 800bdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	7dfa      	ldrb	r2, [r7, #23]
 800bdb4:	f7ff ff29 	bl	800bc0a <SecureElementAesEncrypt>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d001      	beq.n	800bdc2 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800bdbe:	2307      	movs	r3, #7
 800bdc0:	e043      	b.n	800be4a <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc4:	330b      	adds	r3, #11
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	09db      	lsrs	r3, r3, #7
 800bdca:	b2da      	uxtb	r2, r3
 800bdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdce:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800bdd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdd8:	3b04      	subs	r3, #4
 800bdda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bddc:	4413      	add	r3, r2
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800bde2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bde6:	3b03      	subs	r3, #3
 800bde8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdea:	4413      	add	r3, r2
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	021b      	lsls	r3, r3, #8
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800bdf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdfa:	3b02      	subs	r3, #2
 800bdfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdfe:	4413      	add	r3, r2
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	041b      	lsls	r3, r3, #16
 800be04:	693a      	ldr	r2, [r7, #16]
 800be06:	4313      	orrs	r3, r2
 800be08:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800be0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be0e:	3b01      	subs	r3, #1
 800be10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be12:	4413      	add	r3, r2
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	061b      	lsls	r3, r3, #24
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800be1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10e      	bne.n	800be44 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800be26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	3b04      	subs	r3, #4
 800be2e:	b299      	uxth	r1, r3
 800be30:	2301      	movs	r3, #1
 800be32:	693a      	ldr	r2, [r7, #16]
 800be34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be36:	f7ff feb9 	bl	800bbac <SecureElementVerifyAesCmac>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d003      	beq.n	800be48 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800be40:	2301      	movs	r3, #1
 800be42:	e002      	b.n	800be4a <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800be44:	2304      	movs	r3, #4
 800be46:	e000      	b.n	800be4a <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
	...

0800be54 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d101      	bne.n	800be66 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be62:	2302      	movs	r3, #2
 800be64:	e007      	b.n	800be76 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800be66:	4b06      	ldr	r3, [pc, #24]	; (800be80 <SecureElementSetDevEui+0x2c>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2208      	movs	r2, #8
 800be6c:	6879      	ldr	r1, [r7, #4]
 800be6e:	4618      	mov	r0, r3
 800be70:	f00c f955 	bl	801811e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	200004b8 	.word	0x200004b8

0800be84 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800be84:	b480      	push	{r7}
 800be86:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800be88:	4b02      	ldr	r3, [pc, #8]	; (800be94 <SecureElementGetDevEui+0x10>)
 800be8a:	681b      	ldr	r3, [r3, #0]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	46bd      	mov	sp, r7
 800be90:	bc80      	pop	{r7}
 800be92:	4770      	bx	lr
 800be94:	200004b8 	.word	0x200004b8

0800be98 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d101      	bne.n	800beaa <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bea6:	2302      	movs	r3, #2
 800bea8:	e008      	b.n	800bebc <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800beaa:	4b06      	ldr	r3, [pc, #24]	; (800bec4 <SecureElementSetJoinEui+0x2c>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	3308      	adds	r3, #8
 800beb0:	2208      	movs	r2, #8
 800beb2:	6879      	ldr	r1, [r7, #4]
 800beb4:	4618      	mov	r0, r3
 800beb6:	f00c f932 	bl	801811e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	200004b8 	.word	0x200004b8

0800bec8 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800bec8:	b480      	push	{r7}
 800beca:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800becc:	4b03      	ldr	r3, [pc, #12]	; (800bedc <SecureElementGetJoinEui+0x14>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	3308      	adds	r3, #8
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bc80      	pop	{r7}
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	200004b8 	.word	0x200004b8

0800bee0 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800beea:	4a23      	ldr	r2, [pc, #140]	; (800bf78 <LmHandlerInit+0x98>)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800bef0:	4b22      	ldr	r3, [pc, #136]	; (800bf7c <LmHandlerInit+0x9c>)
 800bef2:	4a23      	ldr	r2, [pc, #140]	; (800bf80 <LmHandlerInit+0xa0>)
 800bef4:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800bef6:	4b21      	ldr	r3, [pc, #132]	; (800bf7c <LmHandlerInit+0x9c>)
 800bef8:	4a22      	ldr	r2, [pc, #136]	; (800bf84 <LmHandlerInit+0xa4>)
 800befa:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800befc:	4b1f      	ldr	r3, [pc, #124]	; (800bf7c <LmHandlerInit+0x9c>)
 800befe:	4a22      	ldr	r2, [pc, #136]	; (800bf88 <LmHandlerInit+0xa8>)
 800bf00:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800bf02:	4b1e      	ldr	r3, [pc, #120]	; (800bf7c <LmHandlerInit+0x9c>)
 800bf04:	4a21      	ldr	r2, [pc, #132]	; (800bf8c <LmHandlerInit+0xac>)
 800bf06:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800bf08:	4b1b      	ldr	r3, [pc, #108]	; (800bf78 <LmHandlerInit+0x98>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a20      	ldr	r2, [pc, #128]	; (800bf90 <LmHandlerInit+0xb0>)
 800bf10:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800bf12:	4b19      	ldr	r3, [pc, #100]	; (800bf78 <LmHandlerInit+0x98>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	4a1d      	ldr	r2, [pc, #116]	; (800bf90 <LmHandlerInit+0xb0>)
 800bf1a:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800bf1c:	4b16      	ldr	r3, [pc, #88]	; (800bf78 <LmHandlerInit+0x98>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	4a1b      	ldr	r2, [pc, #108]	; (800bf90 <LmHandlerInit+0xb0>)
 800bf24:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800bf26:	4b1a      	ldr	r3, [pc, #104]	; (800bf90 <LmHandlerInit+0xb0>)
 800bf28:	4a1a      	ldr	r2, [pc, #104]	; (800bf94 <LmHandlerInit+0xb4>)
 800bf2a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800bf2c:	4b12      	ldr	r3, [pc, #72]	; (800bf78 <LmHandlerInit+0x98>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	699b      	ldr	r3, [r3, #24]
 800bf32:	4a17      	ldr	r2, [pc, #92]	; (800bf90 <LmHandlerInit+0xb0>)
 800bf34:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800bf36:	4a18      	ldr	r2, [pc, #96]	; (800bf98 <LmHandlerInit+0xb8>)
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800bf3c:	4b0e      	ldr	r3, [pc, #56]	; (800bf78 <LmHandlerInit+0x98>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf42:	4a15      	ldr	r2, [pc, #84]	; (800bf98 <LmHandlerInit+0xb8>)
 800bf44:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800bf46:	4b0c      	ldr	r3, [pc, #48]	; (800bf78 <LmHandlerInit+0x98>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4c:	4a12      	ldr	r2, [pc, #72]	; (800bf98 <LmHandlerInit+0xb8>)
 800bf4e:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800bf50:	4b09      	ldr	r3, [pc, #36]	; (800bf78 <LmHandlerInit+0x98>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf56:	4a10      	ldr	r2, [pc, #64]	; (800bf98 <LmHandlerInit+0xb8>)
 800bf58:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800bf5a:	490f      	ldr	r1, [pc, #60]	; (800bf98 <LmHandlerInit+0xb8>)
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	f000 fd85 	bl	800ca6c <LmHandlerPackageRegister>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d002      	beq.n	800bf6e <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800bf68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf6c:	e000      	b.n	800bf70 <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800bf6e:	2300      	movs	r3, #0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	200004f4 	.word	0x200004f4
 800bf7c:	200004f8 	.word	0x200004f8
 800bf80:	0800c779 	.word	0x0800c779
 800bf84:	0800c7e1 	.word	0x0800c7e1
 800bf88:	0800c8ad 	.word	0x0800c8ad
 800bf8c:	0800c9c5 	.word	0x0800c9c5
 800bf90:	20000508 	.word	0x20000508
 800bf94:	0800ce3d 	.word	0x0800ce3d
 800bf98:	200004bc 	.word	0x200004bc

0800bf9c <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b094      	sub	sp, #80	; 0x50
 800bfa0:	af04      	add	r7, sp, #16
 800bfa2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800bfa4:	2214      	movs	r2, #20
 800bfa6:	6879      	ldr	r1, [r7, #4]
 800bfa8:	4890      	ldr	r0, [pc, #576]	; (800c1ec <LmHandlerConfigure+0x250>)
 800bfaa:	f00f fbbf 	bl	801b72c <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800bfae:	4b90      	ldr	r3, [pc, #576]	; (800c1f0 <LmHandlerConfigure+0x254>)
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800bfb4:	f7fe fb04 	bl	800a5c0 <LoraInfo_GetPtr>
 800bfb8:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800bfba:	4b8c      	ldr	r3, [pc, #560]	; (800c1ec <LmHandlerConfigure+0x250>)
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	4093      	lsls	r3, r2
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	4013      	ands	r3, r2
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d106      	bne.n	800bfde <LmHandlerConfigure+0x42>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800bfd0:	4b88      	ldr	r3, [pc, #544]	; (800c1f4 <LmHandlerConfigure+0x258>)
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	2100      	movs	r1, #0
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	f010 fbf4 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800bfdc:	e7fe      	b.n	800bfdc <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800bfde:	4b83      	ldr	r3, [pc, #524]	; (800c1ec <LmHandlerConfigure+0x250>)
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	4984      	ldr	r1, [pc, #528]	; (800c1f8 <LmHandlerConfigure+0x25c>)
 800bfe6:	4885      	ldr	r0, [pc, #532]	; (800c1fc <LmHandlerConfigure+0x260>)
 800bfe8:	f004 fe88 	bl	8010cfc <LoRaMacInitialization>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d002      	beq.n	800bff8 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800bff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bff6:	e0f5      	b.n	800c1e4 <LmHandlerConfigure+0x248>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800bff8:	2327      	movs	r3, #39	; 0x27
 800bffa:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800bffc:	f107 0318 	add.w	r3, r7, #24
 800c000:	4618      	mov	r0, r3
 800c002:	f005 fbcb 	bl	801179c <LoRaMacMibSetRequestConfirm>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d103      	bne.n	800c014 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800c00c:	4b7c      	ldr	r3, [pc, #496]	; (800c200 <LmHandlerConfigure+0x264>)
 800c00e:	2201      	movs	r2, #1
 800c010:	701a      	strb	r2, [r3, #0]
 800c012:	e02a      	b.n	800c06a <LmHandlerConfigure+0xce>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c014:	2328      	movs	r3, #40	; 0x28
 800c016:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800c018:	4b7a      	ldr	r3, [pc, #488]	; (800c204 <LmHandlerConfigure+0x268>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00c      	beq.n	800c03c <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c022:	f107 0318 	add.w	r3, r7, #24
 800c026:	4618      	mov	r0, r3
 800c028:	f005 fa12 	bl	8011450 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800c02c:	4b75      	ldr	r3, [pc, #468]	; (800c204 <LmHandlerConfigure+0x268>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	69fa      	ldr	r2, [r7, #28]
 800c034:	f240 518c 	movw	r1, #1420	; 0x58c
 800c038:	4610      	mov	r0, r2
 800c03a:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800c03c:	2327      	movs	r3, #39	; 0x27
 800c03e:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c040:	f107 0318 	add.w	r3, r7, #24
 800c044:	4618      	mov	r0, r3
 800c046:	f005 fba9 	bl	801179c <LoRaMacMibSetRequestConfirm>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10c      	bne.n	800c06a <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c050:	2301      	movs	r3, #1
 800c052:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c054:	f107 0318 	add.w	r3, r7, #24
 800c058:	4618      	mov	r0, r3
 800c05a:	f005 f9f9 	bl	8011450 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800c05e:	7f3b      	ldrb	r3, [r7, #28]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d002      	beq.n	800c06a <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800c064:	4b66      	ldr	r3, [pc, #408]	; (800c200 <LmHandlerConfigure+0x264>)
 800c066:	2201      	movs	r2, #1
 800c068:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800c06a:	4b65      	ldr	r3, [pc, #404]	; (800c200 <LmHandlerConfigure+0x264>)
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d02a      	beq.n	800c0c8 <LmHandlerConfigure+0x12c>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c072:	4b64      	ldr	r3, [pc, #400]	; (800c204 <LmHandlerConfigure+0x268>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	69db      	ldr	r3, [r3, #28]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d004      	beq.n	800c086 <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c07c:	4b61      	ldr	r3, [pc, #388]	; (800c204 <LmHandlerConfigure+0x268>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	69db      	ldr	r3, [r3, #28]
 800c082:	2000      	movs	r0, #0
 800c084:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800c086:	2306      	movs	r3, #6
 800c088:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c08a:	f107 0318 	add.w	r3, r7, #24
 800c08e:	4618      	mov	r0, r3
 800c090:	f005 f9de 	bl	8011450 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	4a5c      	ldr	r2, [pc, #368]	; (800c208 <LmHandlerConfigure+0x26c>)
 800c098:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800c09a:	2327      	movs	r3, #39	; 0x27
 800c09c:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c09e:	f107 0318 	add.w	r3, r7, #24
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f005 f9d4 	bl	8011450 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c0ae:	4b4f      	ldr	r3, [pc, #316]	; (800c1ec <LmHandlerConfigure+0x250>)
 800c0b0:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800c0b2:	69fb      	ldr	r3, [r7, #28]
 800c0b4:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800c0b8:	4b4c      	ldr	r3, [pc, #304]	; (800c1ec <LmHandlerConfigure+0x250>)
 800c0ba:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800c0c2:	4b4a      	ldr	r3, [pc, #296]	; (800c1ec <LmHandlerConfigure+0x250>)
 800c0c4:	709a      	strb	r2, [r3, #2]
 800c0c6:	e019      	b.n	800c0fc <LmHandlerConfigure+0x160>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800c0c8:	2305      	movs	r3, #5
 800c0ca:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c0d0:	f107 0318 	add.w	r3, r7, #24
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f005 fb61 	bl	801179c <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c0da:	4b4a      	ldr	r3, [pc, #296]	; (800c204 <LmHandlerConfigure+0x268>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	4798      	blx	r3
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	4a48      	ldr	r2, [pc, #288]	; (800c208 <LmHandlerConfigure+0x26c>)
 800c0e6:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800c0e8:	2306      	movs	r3, #6
 800c0ea:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c0ec:	4b46      	ldr	r3, [pc, #280]	; (800c208 <LmHandlerConfigure+0x26c>)
 800c0ee:	695b      	ldr	r3, [r3, #20]
 800c0f0:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c0f2:	f107 0318 	add.w	r3, r7, #24
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f005 fb50 	bl	801179c <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c0fc:	2302      	movs	r3, #2
 800c0fe:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c100:	f107 0318 	add.w	r3, r7, #24
 800c104:	4618      	mov	r0, r3
 800c106:	f005 f9a3 	bl	8011450 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	2208      	movs	r2, #8
 800c10e:	4619      	mov	r1, r3
 800c110:	483d      	ldr	r0, [pc, #244]	; (800c208 <LmHandlerConfigure+0x26c>)
 800c112:	f00c f804 	bl	801811e <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c116:	2303      	movs	r3, #3
 800c118:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c11a:	f107 0318 	add.w	r3, r7, #24
 800c11e:	4618      	mov	r0, r3
 800c120:	f005 f996 	bl	8011450 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	2208      	movs	r2, #8
 800c128:	4619      	mov	r1, r3
 800c12a:	4838      	ldr	r0, [pc, #224]	; (800c20c <LmHandlerConfigure+0x270>)
 800c12c:	f00b fff7 	bl	801811e <memcpy1>

    SecureElementPrintKeys();
 800c130:	f7ff fc20 	bl	800b974 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800c134:	4b36      	ldr	r3, [pc, #216]	; (800c210 <LmHandlerConfigure+0x274>)
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	461a      	mov	r2, r3
 800c13a:	4b36      	ldr	r3, [pc, #216]	; (800c214 <LmHandlerConfigure+0x278>)
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	4619      	mov	r1, r3
 800c140:	4b35      	ldr	r3, [pc, #212]	; (800c218 <LmHandlerConfigure+0x27c>)
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	4618      	mov	r0, r3
 800c146:	4b35      	ldr	r3, [pc, #212]	; (800c21c <LmHandlerConfigure+0x280>)
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	9303      	str	r3, [sp, #12]
 800c14c:	9002      	str	r0, [sp, #8]
 800c14e:	9101      	str	r1, [sp, #4]
 800c150:	9200      	str	r2, [sp, #0]
 800c152:	4b33      	ldr	r3, [pc, #204]	; (800c220 <LmHandlerConfigure+0x284>)
 800c154:	2200      	movs	r2, #0
 800c156:	2100      	movs	r1, #0
 800c158:	2002      	movs	r0, #2
 800c15a:	f010 fb33 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c15e:	230f      	movs	r3, #15
 800c160:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c162:	2301      	movs	r3, #1
 800c164:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c166:	f107 0318 	add.w	r3, r7, #24
 800c16a:	4618      	mov	r0, r3
 800c16c:	f005 fb16 	bl	801179c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c170:	2310      	movs	r3, #16
 800c172:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c174:	2300      	movs	r3, #0
 800c176:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c178:	f107 0318 	add.w	r3, r7, #24
 800c17c:	4618      	mov	r0, r3
 800c17e:	f005 fb0d 	bl	801179c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c182:	2304      	movs	r3, #4
 800c184:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c186:	4b19      	ldr	r3, [pc, #100]	; (800c1ec <LmHandlerConfigure+0x250>)
 800c188:	789b      	ldrb	r3, [r3, #2]
 800c18a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c18c:	f107 0318 	add.w	r3, r7, #24
 800c190:	4618      	mov	r0, r3
 800c192:	f005 fb03 	bl	801179c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c196:	2338      	movs	r3, #56	; 0x38
 800c198:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c19a:	4b14      	ldr	r3, [pc, #80]	; (800c1ec <LmHandlerConfigure+0x250>)
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c1a0:	f107 0318 	add.w	r3, r7, #24
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f005 faf9 	bl	801179c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c1aa:	230f      	movs	r3, #15
 800c1ac:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c1ae:	4b0f      	ldr	r3, [pc, #60]	; (800c1ec <LmHandlerConfigure+0x250>)
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	f107 0210 	add.w	r2, r7, #16
 800c1b6:	4611      	mov	r1, r2
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f008 f9b6 	bl	801452a <RegionGetPhyParam>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	bf14      	ite	ne
 800c1c8:	2301      	movne	r3, #1
 800c1ca:	2300      	moveq	r3, #0
 800c1cc:	b2da      	uxtb	r2, r3
 800c1ce:	4b07      	ldr	r3, [pc, #28]	; (800c1ec <LmHandlerConfigure+0x250>)
 800c1d0:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800c1d2:	2014      	movs	r0, #20
 800c1d4:	f000 fab8 	bl	800c748 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c1d8:	4b04      	ldr	r3, [pc, #16]	; (800c1ec <LmHandlerConfigure+0x250>)
 800c1da:	799b      	ldrb	r3, [r3, #6]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f006 f90b 	bl	80123f8 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c1e2:	2300      	movs	r3, #0
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3740      	adds	r7, #64	; 0x40
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	200004e0 	.word	0x200004e0
 800c1f0:	20000520 	.word	0x20000520
 800c1f4:	0801d4c8 	.word	0x0801d4c8
 800c1f8:	20000508 	.word	0x20000508
 800c1fc:	200004f8 	.word	0x200004f8
 800c200:	20000616 	.word	0x20000616
 800c204:	200004f4 	.word	0x200004f4
 800c208:	20000090 	.word	0x20000090
 800c20c:	20000098 	.word	0x20000098
 800c210:	200000a7 	.word	0x200000a7
 800c214:	200000a6 	.word	0x200000a6
 800c218:	200000a5 	.word	0x200000a5
 800c21c:	200000a4 	.word	0x200000a4
 800c220:	0801d514 	.word	0x0801d514

0800c224 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c22a:	f002 fd45 	bl	800ecb8 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c22e:	f000 fd3b 	bl	800cca8 <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800c232:	f000 fd0f 	bl	800cc54 <LmHandlerPackageIsTxPending>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d117      	bne.n	800c26c <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800c23c:	4b0d      	ldr	r3, [pc, #52]	; (800c274 <LmHandlerProcess+0x50>)
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d014      	beq.n	800c26e <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800c244:	2300      	movs	r3, #0
 800c246:	703b      	strb	r3, [r7, #0]
 800c248:	2300      	movs	r3, #0
 800c24a:	707b      	strb	r3, [r7, #1]
 800c24c:	2300      	movs	r3, #0
 800c24e:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800c250:	4b09      	ldr	r3, [pc, #36]	; (800c278 <LmHandlerProcess+0x54>)
 800c252:	78d9      	ldrb	r1, [r3, #3]
 800c254:	463b      	mov	r3, r7
 800c256:	2200      	movs	r2, #0
 800c258:	4618      	mov	r0, r3
 800c25a:	f000 f8b7 	bl	800c3cc <LmHandlerSend>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d104      	bne.n	800c26e <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800c264:	4b03      	ldr	r3, [pc, #12]	; (800c274 <LmHandlerProcess+0x50>)
 800c266:	2200      	movs	r2, #0
 800c268:	701a      	strb	r2, [r3, #0]
 800c26a:	e000      	b.n	800c26e <LmHandlerProcess+0x4a>
        return;
 800c26c:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c26e:	3708      	adds	r7, #8
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	20000520 	.word	0x20000520
 800c278:	200004e0 	.word	0x200004e0

0800c27c <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800c27c:	b480      	push	{r7}
 800c27e:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800c280:	4b02      	ldr	r3, [pc, #8]	; (800c28c <LmHandlerGetDutyCycleWaitTime+0x10>)
 800c282:	681b      	ldr	r3, [r3, #0]
}
 800c284:	4618      	mov	r0, r3
 800c286:	46bd      	mov	sp, r7
 800c288:	bc80      	pop	{r7}
 800c28a:	4770      	bx	lr
 800c28c:	2000051c 	.word	0x2000051c

0800c290 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b090      	sub	sp, #64	; 0x40
 800c294:	af00      	add	r7, sp, #0
 800c296:	4603      	mov	r3, r0
 800c298:	460a      	mov	r2, r1
 800c29a:	71fb      	strb	r3, [r7, #7]
 800c29c:	4613      	mov	r3, r2
 800c29e:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c2a6:	4b36      	ldr	r3, [pc, #216]	; (800c380 <LmHandlerJoin+0xf0>)
 800c2a8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c2b2:	79fb      	ldrb	r3, [r7, #7]
 800c2b4:	2b02      	cmp	r3, #2
 800c2b6:	d10b      	bne.n	800c2d0 <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c2b8:	2302      	movs	r3, #2
 800c2ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c2be:	4b31      	ldr	r3, [pc, #196]	; (800c384 <LmHandlerJoin+0xf4>)
 800c2c0:	2202      	movs	r2, #2
 800c2c2:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c2c4:	4a2f      	ldr	r2, [pc, #188]	; (800c384 <LmHandlerJoin+0xf4>)
 800c2c6:	79bb      	ldrb	r3, [r7, #6]
 800c2c8:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800c2ca:	f004 ffcf 	bl	801126c <LoRaMacStart>
 800c2ce:	e041      	b.n	800c354 <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c2d6:	4b2b      	ldr	r3, [pc, #172]	; (800c384 <LmHandlerJoin+0xf4>)
 800c2d8:	2201      	movs	r2, #1
 800c2da:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c2dc:	4b28      	ldr	r3, [pc, #160]	; (800c380 <LmHandlerJoin+0xf0>)
 800c2de:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c2e2:	4b28      	ldr	r3, [pc, #160]	; (800c384 <LmHandlerJoin+0xf4>)
 800c2e4:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c2e6:	4b27      	ldr	r3, [pc, #156]	; (800c384 <LmHandlerJoin+0xf4>)
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800c2ec:	4a25      	ldr	r2, [pc, #148]	; (800c384 <LmHandlerJoin+0xf4>)
 800c2ee:	79bb      	ldrb	r3, [r7, #6]
 800c2f0:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800c2f2:	4b25      	ldr	r3, [pc, #148]	; (800c388 <LmHandlerJoin+0xf8>)
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	f083 0301 	eor.w	r3, r3, #1
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d01e      	beq.n	800c33e <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c300:	231f      	movs	r3, #31
 800c302:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c304:	4b1e      	ldr	r3, [pc, #120]	; (800c380 <LmHandlerJoin+0xf0>)
 800c306:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c30a:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c30c:	f107 0308 	add.w	r3, r7, #8
 800c310:	4618      	mov	r0, r3
 800c312:	f005 fa43 	bl	801179c <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c316:	2320      	movs	r3, #32
 800c318:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c31a:	4b19      	ldr	r3, [pc, #100]	; (800c380 <LmHandlerJoin+0xf0>)
 800c31c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c320:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c322:	f107 0308 	add.w	r3, r7, #8
 800c326:	4618      	mov	r0, r3
 800c328:	f005 fa38 	bl	801179c <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c32c:	2329      	movs	r3, #41	; 0x29
 800c32e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c330:	4b16      	ldr	r3, [pc, #88]	; (800c38c <LmHandlerJoin+0xfc>)
 800c332:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c334:	f107 0308 	add.w	r3, r7, #8
 800c338:	4618      	mov	r0, r3
 800c33a:	f005 fa2f 	bl	801179c <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800c33e:	f004 ff95 	bl	801126c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c342:	2301      	movs	r3, #1
 800c344:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c346:	2301      	movs	r3, #1
 800c348:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c34a:	f107 0308 	add.w	r3, r7, #8
 800c34e:	4618      	mov	r0, r3
 800c350:	f005 fa24 	bl	801179c <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800c354:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <LmHandlerJoin+0xf8>)
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	f083 0301 	eor.w	r3, r3, #1
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d102      	bne.n	800c368 <LmHandlerJoin+0xd8>
 800c362:	79bb      	ldrb	r3, [r7, #6]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d004      	beq.n	800c372 <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c36c:	4618      	mov	r0, r3
 800c36e:	f005 fd85 	bl	8011e7c <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c374:	4a06      	ldr	r2, [pc, #24]	; (800c390 <LmHandlerJoin+0x100>)
 800c376:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800c378:	bf00      	nop
 800c37a:	3740      	adds	r7, #64	; 0x40
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	200004e0 	.word	0x200004e0
 800c384:	200000a8 	.word	0x200000a8
 800c388:	20000616 	.word	0x20000616
 800c38c:	01000400 	.word	0x01000400
 800c390:	2000051c 	.word	0x2000051c

0800c394 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b08a      	sub	sp, #40	; 0x28
 800c398:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c39a:	2301      	movs	r3, #1
 800c39c:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c39e:	463b      	mov	r3, r7
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f005 f855 	bl	8011450 <LoRaMacMibGetRequestConfirm>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c3ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d106      	bne.n	800c3c2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c3b4:	793b      	ldrb	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d101      	bne.n	800c3be <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	e002      	b.n	800c3c4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e000      	b.n	800c3c4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c3c2:	2300      	movs	r3, #0
    }
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3728      	adds	r7, #40	; 0x28
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08a      	sub	sp, #40	; 0x28
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	70fb      	strb	r3, [r7, #3]
 800c3d8:	4613      	mov	r3, r2
 800c3da:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c3dc:	23ff      	movs	r3, #255	; 0xff
 800c3de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c3e2:	f002 f9c9 	bl	800e778 <LoRaMacIsBusy>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d002      	beq.n	800c3f2 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c3ec:	f06f 0301 	mvn.w	r3, #1
 800c3f0:	e0a3      	b.n	800c53a <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c3f2:	f7ff ffcf 	bl	800c394 <LmHandlerJoinStatus>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d00a      	beq.n	800c412 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800c3fc:	4b51      	ldr	r3, [pc, #324]	; (800c544 <LmHandlerSend+0x178>)
 800c3fe:	799b      	ldrb	r3, [r3, #6]
 800c400:	4a50      	ldr	r2, [pc, #320]	; (800c544 <LmHandlerSend+0x178>)
 800c402:	79d2      	ldrb	r2, [r2, #7]
 800c404:	4611      	mov	r1, r2
 800c406:	4618      	mov	r0, r3
 800c408:	f7ff ff42 	bl	800c290 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c40c:	f06f 0302 	mvn.w	r3, #2
 800c410:	e093      	b.n	800c53a <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800c412:	4a4d      	ldr	r2, [pc, #308]	; (800c548 <LmHandlerSend+0x17c>)
 800c414:	78fb      	ldrb	r3, [r7, #3]
 800c416:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800c418:	78fb      	ldrb	r3, [r7, #3]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	bf14      	ite	ne
 800c41e:	2301      	movne	r3, #1
 800c420:	2300      	moveq	r3, #0
 800c422:	b2db      	uxtb	r3, r3
 800c424:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c426:	4b49      	ldr	r3, [pc, #292]	; (800c54c <LmHandlerSend+0x180>)
 800c428:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c42c:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	785b      	ldrb	r3, [r3, #1]
 800c432:	f107 020c 	add.w	r2, r7, #12
 800c436:	4611      	mov	r1, r2
 800c438:	4618      	mov	r0, r3
 800c43a:	f004 ff79 	bl	8011330 <LoRaMacQueryTxPossible>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d009      	beq.n	800c458 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c444:	2300      	movs	r3, #0
 800c446:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c448:	2300      	movs	r3, #0
 800c44a:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c44c:	2300      	movs	r3, #0
 800c44e:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800c450:	23f9      	movs	r3, #249	; 0xf9
 800c452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c456:	e009      	b.n	800c46c <LmHandlerSend+0xa0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	785b      	ldrb	r3, [r3, #1]
 800c462:	b29b      	uxth	r3, r3
 800c464:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800c46c:	4b36      	ldr	r3, [pc, #216]	; (800c548 <LmHandlerSend+0x17c>)
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	3310      	adds	r3, #16
 800c472:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c476:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c47a:	4b34      	ldr	r3, [pc, #208]	; (800c54c <LmHandlerSend+0x180>)
 800c47c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c480:	4b31      	ldr	r3, [pc, #196]	; (800c548 <LmHandlerSend+0x17c>)
 800c482:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c484:	78ba      	ldrb	r2, [r7, #2]
 800c486:	f107 0310 	add.w	r3, r7, #16
 800c48a:	4611      	mov	r1, r2
 800c48c:	4618      	mov	r0, r3
 800c48e:	f005 fe7b 	bl	8012188 <LoRaMacMcpsRequest>
 800c492:	4603      	mov	r3, r0
 800c494:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c498:	6a3b      	ldr	r3, [r7, #32]
 800c49a:	4a2d      	ldr	r2, [pc, #180]	; (800c550 <LmHandlerSend+0x184>)
 800c49c:	6013      	str	r3, [r2, #0]

    switch (status)
 800c49e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4a2:	2b11      	cmp	r3, #17
 800c4a4:	d842      	bhi.n	800c52c <LmHandlerSend+0x160>
 800c4a6:	a201      	add	r2, pc, #4	; (adr r2, 800c4ac <LmHandlerSend+0xe0>)
 800c4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ac:	0800c4f5 	.word	0x0800c4f5
 800c4b0:	0800c50d 	.word	0x0800c50d
 800c4b4:	0800c52d 	.word	0x0800c52d
 800c4b8:	0800c52d 	.word	0x0800c52d
 800c4bc:	0800c52d 	.word	0x0800c52d
 800c4c0:	0800c52d 	.word	0x0800c52d
 800c4c4:	0800c52d 	.word	0x0800c52d
 800c4c8:	0800c515 	.word	0x0800c515
 800c4cc:	0800c52d 	.word	0x0800c52d
 800c4d0:	0800c52d 	.word	0x0800c52d
 800c4d4:	0800c52d 	.word	0x0800c52d
 800c4d8:	0800c525 	.word	0x0800c525
 800c4dc:	0800c52d 	.word	0x0800c52d
 800c4e0:	0800c52d 	.word	0x0800c52d
 800c4e4:	0800c50d 	.word	0x0800c50d
 800c4e8:	0800c50d 	.word	0x0800c50d
 800c4ec:	0800c50d 	.word	0x0800c50d
 800c4f0:	0800c51d 	.word	0x0800c51d
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800c4f4:	4b17      	ldr	r3, [pc, #92]	; (800c554 <LmHandlerSend+0x188>)
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800c4fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c4fe:	f113 0f07 	cmn.w	r3, #7
 800c502:	d017      	beq.n	800c534 <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c504:	2300      	movs	r3, #0
 800c506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800c50a:	e013      	b.n	800c534 <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c50c:	23fe      	movs	r3, #254	; 0xfe
 800c50e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c512:	e010      	b.n	800c536 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c514:	23fd      	movs	r3, #253	; 0xfd
 800c516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c51a:	e00c      	b.n	800c536 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c51c:	23fb      	movs	r3, #251	; 0xfb
 800c51e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c522:	e008      	b.n	800c536 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c524:	23fa      	movs	r3, #250	; 0xfa
 800c526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c52a:	e004      	b.n	800c536 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c52c:	23ff      	movs	r3, #255	; 0xff
 800c52e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c532:	e000      	b.n	800c536 <LmHandlerSend+0x16a>
            break;
 800c534:	bf00      	nop
    }

    return lmhStatus;
 800c536:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3728      	adds	r7, #40	; 0x28
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	200000a8 	.word	0x200000a8
 800c548:	200000b0 	.word	0x200000b0
 800c54c:	200004e0 	.word	0x200004e0
 800c550:	2000051c 	.word	0x2000051c
 800c554:	20000520 	.word	0x20000520

0800c558 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b086      	sub	sp, #24
 800c55c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c55e:	2309      	movs	r3, #9
 800c560:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c562:	463b      	mov	r3, r7
 800c564:	4618      	mov	r0, r3
 800c566:	f005 fc89 	bl	8011e7c <LoRaMacMlmeRequest>
 800c56a:	4603      	mov	r3, r0
 800c56c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	4a06      	ldr	r2, [pc, #24]	; (800c58c <LmHandlerDeviceTimeReq+0x34>)
 800c572:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800c574:	7dfb      	ldrb	r3, [r7, #23]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d101      	bne.n	800c57e <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c57a:	2300      	movs	r3, #0
 800c57c:	e001      	b.n	800c582 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c57e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800c582:	4618      	mov	r0, r3
 800c584:	3718      	adds	r7, #24
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	2000051c 	.word	0x2000051c

0800c590 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	4603      	mov	r3, r0
 800c598:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800c59a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bc80      	pop	{r7}
 800c5a6:	4770      	bx	lr

0800c5a8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b08c      	sub	sp, #48	; 0x30
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800c5b8:	f002 f8de 	bl	800e778 <LoRaMacIsBusy>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d002      	beq.n	800c5c8 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c5c2:	f06f 0301 	mvn.w	r3, #1
 800c5c6:	e071      	b.n	800c6ac <LmHandlerRequestClass+0x104>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800c5c8:	f7ff fee4 	bl	800c394 <LmHandlerJoinStatus>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d002      	beq.n	800c5d8 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c5d2:	f06f 0302 	mvn.w	r3, #2
 800c5d6:	e069      	b.n	800c6ac <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c5dc:	f107 0308 	add.w	r3, r7, #8
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f004 ff35 	bl	8011450 <LoRaMacMibGetRequestConfirm>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d002      	beq.n	800c5f2 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c5ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5f0:	e05c      	b.n	800c6ac <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800c5f2:	7b3b      	ldrb	r3, [r7, #12]
 800c5f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800c5f8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c5fc:	79fb      	ldrb	r3, [r7, #7]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d052      	beq.n	800c6a8 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800c602:	79fb      	ldrb	r3, [r7, #7]
 800c604:	2b02      	cmp	r3, #2
 800c606:	d028      	beq.n	800c65a <LmHandlerRequestClass+0xb2>
 800c608:	2b02      	cmp	r3, #2
 800c60a:	dc48      	bgt.n	800c69e <LmHandlerRequestClass+0xf6>
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d002      	beq.n	800c616 <LmHandlerRequestClass+0x6e>
 800c610:	2b01      	cmp	r3, #1
 800c612:	d01e      	beq.n	800c652 <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800c614:	e043      	b.n	800c69e <LmHandlerRequestClass+0xf6>
                if( currentClass != CLASS_A )
 800c616:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d041      	beq.n	800c6a2 <LmHandlerRequestClass+0xfa>
                    mibReq.Param.Class = newClass;
 800c61e:	79fb      	ldrb	r3, [r7, #7]
 800c620:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c622:	f107 0308 	add.w	r3, r7, #8
 800c626:	4618      	mov	r0, r3
 800c628:	f005 f8b8 	bl	801179c <LoRaMacMibSetRequestConfirm>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10b      	bne.n	800c64a <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c632:	4b20      	ldr	r3, [pc, #128]	; (800c6b4 <LmHandlerRequestClass+0x10c>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d032      	beq.n	800c6a2 <LmHandlerRequestClass+0xfa>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c63c:	4b1d      	ldr	r3, [pc, #116]	; (800c6b4 <LmHandlerRequestClass+0x10c>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c642:	79fa      	ldrb	r2, [r7, #7]
 800c644:	4610      	mov	r0, r2
 800c646:	4798      	blx	r3
            break;
 800c648:	e02b      	b.n	800c6a2 <LmHandlerRequestClass+0xfa>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c64a:	23ff      	movs	r3, #255	; 0xff
 800c64c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c650:	e027      	b.n	800c6a2 <LmHandlerRequestClass+0xfa>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800c652:	23ff      	movs	r3, #255	; 0xff
 800c654:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c658:	e026      	b.n	800c6a8 <LmHandlerRequestClass+0x100>
                if( currentClass != CLASS_A )
 800c65a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d003      	beq.n	800c66a <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c662:	23ff      	movs	r3, #255	; 0xff
 800c664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c668:	e01d      	b.n	800c6a6 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800c66a:	79fb      	ldrb	r3, [r7, #7]
 800c66c:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c66e:	f107 0308 	add.w	r3, r7, #8
 800c672:	4618      	mov	r0, r3
 800c674:	f005 f892 	bl	801179c <LoRaMacMibSetRequestConfirm>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d10b      	bne.n	800c696 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c67e:	4b0d      	ldr	r3, [pc, #52]	; (800c6b4 <LmHandlerRequestClass+0x10c>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00e      	beq.n	800c6a6 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c688:	4b0a      	ldr	r3, [pc, #40]	; (800c6b4 <LmHandlerRequestClass+0x10c>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c68e:	79fa      	ldrb	r2, [r7, #7]
 800c690:	4610      	mov	r0, r2
 800c692:	4798      	blx	r3
            break;
 800c694:	e007      	b.n	800c6a6 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c696:	23ff      	movs	r3, #255	; 0xff
 800c698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c69c:	e003      	b.n	800c6a6 <LmHandlerRequestClass+0xfe>
            break;
 800c69e:	bf00      	nop
 800c6a0:	e002      	b.n	800c6a8 <LmHandlerRequestClass+0x100>
            break;
 800c6a2:	bf00      	nop
 800c6a4:	e000      	b.n	800c6a8 <LmHandlerRequestClass+0x100>
            break;
 800c6a6:	bf00      	nop
        }
    }
    return errorStatus;
 800c6a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3730      	adds	r7, #48	; 0x30
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	200004f4 	.word	0x200004f4

0800c6b8 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b08c      	sub	sp, #48	; 0x30
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d102      	bne.n	800c6cc <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c6c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6ca:	e010      	b.n	800c6ee <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800c6d0:	f107 030c 	add.w	r3, r7, #12
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f004 febb 	bl	8011450 <LoRaMacMibGetRequestConfirm>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d002      	beq.n	800c6e6 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c6e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6e4:	e003      	b.n	800c6ee <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c6e6:	7c3a      	ldrb	r2, [r7, #16]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3730      	adds	r7, #48	; 0x30
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
	...

0800c6f8 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b08c      	sub	sp, #48	; 0x30
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d102      	bne.n	800c70c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c70a:	e016      	b.n	800c73a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c70c:	2320      	movs	r3, #32
 800c70e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800c710:	f107 030c 	add.w	r3, r7, #12
 800c714:	4618      	mov	r0, r3
 800c716:	f004 fe9b 	bl	8011450 <LoRaMacMibGetRequestConfirm>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d002      	beq.n	800c726 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c724:	e009      	b.n	800c73a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c726:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f993 2000 	ldrsb.w	r2, [r3]
 800c734:	4b03      	ldr	r3, [pc, #12]	; (800c744 <LmHandlerGetTxDatarate+0x4c>)
 800c736:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3730      	adds	r7, #48	; 0x30
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	200004e0 	.word	0x200004e0

0800c748 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b08c      	sub	sp, #48	; 0x30
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c750:	2323      	movs	r3, #35	; 0x23
 800c752:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c758:	f107 030c 	add.w	r3, r7, #12
 800c75c:	4618      	mov	r0, r3
 800c75e:	f005 f81d 	bl	801179c <LoRaMacMibSetRequestConfirm>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d002      	beq.n	800c76e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c76c:	e000      	b.n	800c770 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	3730      	adds	r7, #48	; 0x30
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c780:	4b15      	ldr	r3, [pc, #84]	; (800c7d8 <McpsConfirm+0x60>)
 800c782:	2201      	movs	r2, #1
 800c784:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	785a      	ldrb	r2, [r3, #1]
 800c78a:	4b13      	ldr	r3, [pc, #76]	; (800c7d8 <McpsConfirm+0x60>)
 800c78c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	789b      	ldrb	r3, [r3, #2]
 800c792:	b25a      	sxtb	r2, r3
 800c794:	4b10      	ldr	r3, [pc, #64]	; (800c7d8 <McpsConfirm+0x60>)
 800c796:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	4a0e      	ldr	r2, [pc, #56]	; (800c7d8 <McpsConfirm+0x60>)
 800c79e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c7a6:	4b0c      	ldr	r3, [pc, #48]	; (800c7d8 <McpsConfirm+0x60>)
 800c7a8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	691b      	ldr	r3, [r3, #16]
 800c7ae:	b2da      	uxtb	r2, r3
 800c7b0:	4b09      	ldr	r3, [pc, #36]	; (800c7d8 <McpsConfirm+0x60>)
 800c7b2:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	791b      	ldrb	r3, [r3, #4]
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	4b07      	ldr	r3, [pc, #28]	; (800c7d8 <McpsConfirm+0x60>)
 800c7bc:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800c7be:	4b07      	ldr	r3, [pc, #28]	; (800c7dc <McpsConfirm+0x64>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7c4:	4804      	ldr	r0, [pc, #16]	; (800c7d8 <McpsConfirm+0x60>)
 800c7c6:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c7c8:	6879      	ldr	r1, [r7, #4]
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	f000 f9c6 	bl	800cb5c <LmHandlerPackagesNotify>
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	200000b0 	.word	0x200000b0
 800c7dc:	200004f4 	.word	0x200004f4

0800c7e0 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800c7ee:	4b2c      	ldr	r3, [pc, #176]	; (800c8a0 <McpsIndication+0xc0>)
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	785a      	ldrb	r2, [r3, #1]
 800c7f8:	4b29      	ldr	r3, [pc, #164]	; (800c8a0 <McpsIndication+0xc0>)
 800c7fa:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c7fc:	4b28      	ldr	r3, [pc, #160]	; (800c8a0 <McpsIndication+0xc0>)
 800c7fe:	785b      	ldrb	r3, [r3, #1]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d149      	bne.n	800c898 <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	791b      	ldrb	r3, [r3, #4]
 800c808:	b25a      	sxtb	r2, r3
 800c80a:	4b25      	ldr	r3, [pc, #148]	; (800c8a0 <McpsIndication+0xc0>)
 800c80c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c814:	b25a      	sxtb	r2, r3
 800c816:	4b22      	ldr	r3, [pc, #136]	; (800c8a0 <McpsIndication+0xc0>)
 800c818:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c820:	4b1f      	ldr	r3, [pc, #124]	; (800c8a0 <McpsIndication+0xc0>)
 800c822:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	78da      	ldrb	r2, [r3, #3]
 800c828:	4b1d      	ldr	r3, [pc, #116]	; (800c8a0 <McpsIndication+0xc0>)
 800c82a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	691b      	ldr	r3, [r3, #16]
 800c830:	4a1b      	ldr	r2, [pc, #108]	; (800c8a0 <McpsIndication+0xc0>)
 800c832:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	78db      	ldrb	r3, [r3, #3]
 800c838:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	7b1b      	ldrb	r3, [r3, #12]
 800c83e:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800c846:	4b17      	ldr	r3, [pc, #92]	; (800c8a4 <McpsIndication+0xc4>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84c:	f107 0210 	add.w	r2, r7, #16
 800c850:	4913      	ldr	r1, [pc, #76]	; (800c8a0 <McpsIndication+0xc0>)
 800c852:	4610      	mov	r0, r2
 800c854:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800c856:	4b13      	ldr	r3, [pc, #76]	; (800c8a4 <McpsIndication+0xc4>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d007      	beq.n	800c870 <McpsIndication+0x90>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	7e1b      	ldrb	r3, [r3, #24]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d003      	beq.n	800c870 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800c868:	4b0e      	ldr	r3, [pc, #56]	; (800c8a4 <McpsIndication+0xc4>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86e:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800c870:	6879      	ldr	r1, [r7, #4]
 800c872:	2001      	movs	r0, #1
 800c874:	f000 f972 	bl	800cb5c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800c878:	f107 030f 	add.w	r3, r7, #15
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7ff ff1b 	bl	800c6b8 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	795b      	ldrb	r3, [r3, #5]
 800c886:	2b01      	cmp	r3, #1
 800c888:	d107      	bne.n	800c89a <McpsIndication+0xba>
 800c88a:	7bfb      	ldrb	r3, [r7, #15]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d104      	bne.n	800c89a <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800c890:	4b05      	ldr	r3, [pc, #20]	; (800c8a8 <McpsIndication+0xc8>)
 800c892:	2201      	movs	r2, #1
 800c894:	701a      	strb	r2, [r3, #0]
 800c896:	e000      	b.n	800c89a <McpsIndication+0xba>
        return;
 800c898:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	200000cc 	.word	0x200000cc
 800c8a4:	200004f4 	.word	0x200004f4
 800c8a8:	20000520 	.word	0x20000520

0800c8ac <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b08c      	sub	sp, #48	; 0x30
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800c8b4:	4b3c      	ldr	r3, [pc, #240]	; (800c9a8 <MlmeConfirm+0xfc>)
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	785a      	ldrb	r2, [r3, #1]
 800c8be:	4b3a      	ldr	r3, [pc, #232]	; (800c9a8 <MlmeConfirm+0xfc>)
 800c8c0:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800c8c2:	4b3a      	ldr	r3, [pc, #232]	; (800c9ac <MlmeConfirm+0x100>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c8:	4837      	ldr	r0, [pc, #220]	; (800c9a8 <MlmeConfirm+0xfc>)
 800c8ca:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800c8cc:	6879      	ldr	r1, [r7, #4]
 800c8ce:	2002      	movs	r0, #2
 800c8d0:	f000 f944 	bl	800cb5c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	2b0b      	cmp	r3, #11
 800c8dc:	d85c      	bhi.n	800c998 <MlmeConfirm+0xec>
 800c8de:	a201      	add	r2, pc, #4	; (adr r2, 800c8e4 <MlmeConfirm+0x38>)
 800c8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e4:	0800c915 	.word	0x0800c915
 800c8e8:	0800c999 	.word	0x0800c999
 800c8ec:	0800c999 	.word	0x0800c999
 800c8f0:	0800c967 	.word	0x0800c967
 800c8f4:	0800c999 	.word	0x0800c999
 800c8f8:	0800c999 	.word	0x0800c999
 800c8fc:	0800c999 	.word	0x0800c999
 800c900:	0800c999 	.word	0x0800c999
 800c904:	0800c999 	.word	0x0800c999
 800c908:	0800c999 	.word	0x0800c999
 800c90c:	0800c97f 	.word	0x0800c97f
 800c910:	0800c999 	.word	0x0800c999
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800c914:	2306      	movs	r3, #6
 800c916:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c918:	f107 030c 	add.w	r3, r7, #12
 800c91c:	4618      	mov	r0, r3
 800c91e:	f004 fd97 	bl	8011450 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	4a22      	ldr	r2, [pc, #136]	; (800c9b0 <MlmeConfirm+0x104>)
 800c926:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800c928:	4822      	ldr	r0, [pc, #136]	; (800c9b4 <MlmeConfirm+0x108>)
 800c92a:	f7ff fee5 	bl	800c6f8 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	785b      	ldrb	r3, [r3, #1]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d108      	bne.n	800c948 <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c936:	4b20      	ldr	r3, [pc, #128]	; (800c9b8 <MlmeConfirm+0x10c>)
 800c938:	2200      	movs	r2, #0
 800c93a:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c93c:	4b1f      	ldr	r3, [pc, #124]	; (800c9bc <MlmeConfirm+0x110>)
 800c93e:	785b      	ldrb	r3, [r3, #1]
 800c940:	4618      	mov	r0, r3
 800c942:	f7ff fe31 	bl	800c5a8 <LmHandlerRequestClass>
 800c946:	e002      	b.n	800c94e <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800c948:	4b1b      	ldr	r3, [pc, #108]	; (800c9b8 <MlmeConfirm+0x10c>)
 800c94a:	22ff      	movs	r2, #255	; 0xff
 800c94c:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c94e:	4b17      	ldr	r3, [pc, #92]	; (800c9ac <MlmeConfirm+0x100>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c954:	4818      	ldr	r0, [pc, #96]	; (800c9b8 <MlmeConfirm+0x10c>)
 800c956:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	785b      	ldrb	r3, [r3, #1]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d11d      	bne.n	800c99c <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800c960:	f7ff f896 	bl	800ba90 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800c964:	e01a      	b.n	800c99c <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800c966:	4b16      	ldr	r3, [pc, #88]	; (800c9c0 <MlmeConfirm+0x114>)
 800c968:	2201      	movs	r2, #1
 800c96a:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	7a1a      	ldrb	r2, [r3, #8]
 800c970:	4b13      	ldr	r3, [pc, #76]	; (800c9c0 <MlmeConfirm+0x114>)
 800c972:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	7a5a      	ldrb	r2, [r3, #9]
 800c978:	4b11      	ldr	r3, [pc, #68]	; (800c9c0 <MlmeConfirm+0x114>)
 800c97a:	74da      	strb	r2, [r3, #19]
        }
        break;
 800c97c:	e00f      	b.n	800c99e <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	785b      	ldrb	r3, [r3, #1]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d105      	bne.n	800c992 <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800c986:	4b0d      	ldr	r3, [pc, #52]	; (800c9bc <MlmeConfirm+0x110>)
 800c988:	7b1b      	ldrb	r3, [r3, #12]
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7ff fe00 	bl	800c590 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800c990:	e005      	b.n	800c99e <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800c992:	f7ff fde1 	bl	800c558 <LmHandlerDeviceTimeReq>
        break;
 800c996:	e002      	b.n	800c99e <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800c998:	bf00      	nop
 800c99a:	e000      	b.n	800c99e <MlmeConfirm+0xf2>
        break;
 800c99c:	bf00      	nop
    }
}
 800c99e:	bf00      	nop
 800c9a0:	3730      	adds	r7, #48	; 0x30
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	200000b0 	.word	0x200000b0
 800c9ac:	200004f4 	.word	0x200004f4
 800c9b0:	20000090 	.word	0x20000090
 800c9b4:	200000ac 	.word	0x200000ac
 800c9b8:	200000a8 	.word	0x200000a8
 800c9bc:	200004e0 	.word	0x200004e0
 800c9c0:	200000cc 	.word	0x200000cc

0800c9c4 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800c9ce:	4b24      	ldr	r3, [pc, #144]	; (800ca60 <MlmeIndication+0x9c>)
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	785a      	ldrb	r2, [r3, #1]
 800c9d8:	4b21      	ldr	r3, [pc, #132]	; (800ca60 <MlmeIndication+0x9c>)
 800c9da:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	789b      	ldrb	r3, [r3, #2]
 800c9e0:	b25a      	sxtb	r2, r3
 800c9e2:	4b1f      	ldr	r3, [pc, #124]	; (800ca60 <MlmeIndication+0x9c>)
 800c9e4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9ec:	b25a      	sxtb	r2, r3
 800c9ee:	4b1c      	ldr	r3, [pc, #112]	; (800ca60 <MlmeIndication+0x9c>)
 800c9f0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c9f8:	4b19      	ldr	r3, [pc, #100]	; (800ca60 <MlmeIndication+0x9c>)
 800c9fa:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	78da      	ldrb	r2, [r3, #3]
 800ca00:	4b17      	ldr	r3, [pc, #92]	; (800ca60 <MlmeIndication+0x9c>)
 800ca02:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	4a15      	ldr	r2, [pc, #84]	; (800ca60 <MlmeIndication+0x9c>)
 800ca0a:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	2b0a      	cmp	r3, #10
 800ca12:	d009      	beq.n	800ca28 <MlmeIndication+0x64>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	2b0e      	cmp	r3, #14
 800ca1a:	d005      	beq.n	800ca28 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800ca1c:	4b11      	ldr	r3, [pc, #68]	; (800ca64 <MlmeIndication+0xa0>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca22:	490f      	ldr	r1, [pc, #60]	; (800ca60 <MlmeIndication+0x9c>)
 800ca24:	2000      	movs	r0, #0
 800ca26:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800ca28:	6879      	ldr	r1, [r7, #4]
 800ca2a:	2003      	movs	r0, #3
 800ca2c:	f000 f896 	bl	800cb5c <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	2b0e      	cmp	r3, #14
 800ca36:	d00a      	beq.n	800ca4e <MlmeIndication+0x8a>
 800ca38:	2b0e      	cmp	r3, #14
 800ca3a:	dc0a      	bgt.n	800ca52 <MlmeIndication+0x8e>
 800ca3c:	2b06      	cmp	r3, #6
 800ca3e:	d002      	beq.n	800ca46 <MlmeIndication+0x82>
 800ca40:	2b0a      	cmp	r3, #10
 800ca42:	d008      	beq.n	800ca56 <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800ca44:	e005      	b.n	800ca52 <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800ca46:	4b08      	ldr	r3, [pc, #32]	; (800ca68 <MlmeIndication+0xa4>)
 800ca48:	2201      	movs	r2, #1
 800ca4a:	701a      	strb	r2, [r3, #0]
        break;
 800ca4c:	e004      	b.n	800ca58 <MlmeIndication+0x94>
        break;
 800ca4e:	bf00      	nop
 800ca50:	e002      	b.n	800ca58 <MlmeIndication+0x94>
        break;
 800ca52:	bf00      	nop
 800ca54:	e000      	b.n	800ca58 <MlmeIndication+0x94>
        break;
 800ca56:	bf00      	nop
    }
}
 800ca58:	bf00      	nop
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	200000cc 	.word	0x200000cc
 800ca64:	200004f4 	.word	0x200004f4
 800ca68:	20000520 	.word	0x20000520

0800ca6c <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	4603      	mov	r3, r0
 800ca74:	6039      	str	r1, [r7, #0]
 800ca76:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	60fb      	str	r3, [r7, #12]
    switch( id )
 800ca7c:	79fb      	ldrb	r3, [r7, #7]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d103      	bne.n	800ca8a <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800ca82:	f000 fa1d 	bl	800cec0 <LmhpCompliancePackageFactory>
 800ca86:	60f8      	str	r0, [r7, #12]
            break;
 800ca88:	e000      	b.n	800ca8c <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800ca8a:	bf00      	nop
        }
    }
    if( package != NULL )
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d035      	beq.n	800cafe <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800ca92:	79fb      	ldrb	r3, [r7, #7]
 800ca94:	491d      	ldr	r1, [pc, #116]	; (800cb0c <LmHandlerPackageRegister+0xa0>)
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800ca9c:	79fb      	ldrb	r3, [r7, #7]
 800ca9e:	4a1b      	ldr	r2, [pc, #108]	; (800cb0c <LmHandlerPackageRegister+0xa0>)
 800caa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caa4:	4a1a      	ldr	r2, [pc, #104]	; (800cb10 <LmHandlerPackageRegister+0xa4>)
 800caa6:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800caa8:	4b1a      	ldr	r3, [pc, #104]	; (800cb14 <LmHandlerPackageRegister+0xa8>)
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	79fb      	ldrb	r3, [r7, #7]
 800caae:	4917      	ldr	r1, [pc, #92]	; (800cb0c <LmHandlerPackageRegister+0xa0>)
 800cab0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cab4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cab6:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800cab8:	4b16      	ldr	r3, [pc, #88]	; (800cb14 <LmHandlerPackageRegister+0xa8>)
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	79fb      	ldrb	r3, [r7, #7]
 800cabe:	4913      	ldr	r1, [pc, #76]	; (800cb0c <LmHandlerPackageRegister+0xa0>)
 800cac0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cac4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cac6:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cac8:	79fb      	ldrb	r3, [r7, #7]
 800caca:	4a10      	ldr	r2, [pc, #64]	; (800cb0c <LmHandlerPackageRegister+0xa0>)
 800cacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cad0:	4a11      	ldr	r2, [pc, #68]	; (800cb18 <LmHandlerPackageRegister+0xac>)
 800cad2:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cad4:	4b0f      	ldr	r3, [pc, #60]	; (800cb14 <LmHandlerPackageRegister+0xa8>)
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	79fb      	ldrb	r3, [r7, #7]
 800cada:	490c      	ldr	r1, [pc, #48]	; (800cb0c <LmHandlerPackageRegister+0xa0>)
 800cadc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cae0:	6992      	ldr	r2, [r2, #24]
 800cae2:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cae4:	79fb      	ldrb	r3, [r7, #7]
 800cae6:	4a09      	ldr	r2, [pc, #36]	; (800cb0c <LmHandlerPackageRegister+0xa0>)
 800cae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	4a0b      	ldr	r2, [pc, #44]	; (800cb1c <LmHandlerPackageRegister+0xb0>)
 800caf0:	6851      	ldr	r1, [r2, #4]
 800caf2:	4a0a      	ldr	r2, [pc, #40]	; (800cb1c <LmHandlerPackageRegister+0xb0>)
 800caf4:	7852      	ldrb	r2, [r2, #1]
 800caf6:	6838      	ldr	r0, [r7, #0]
 800caf8:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cafa:	2300      	movs	r3, #0
 800cafc:	e001      	b.n	800cb02 <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cafe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	bf00      	nop
 800cb0c:	200004cc 	.word	0x200004cc
 800cb10:	0800c291 	.word	0x0800c291
 800cb14:	200004f4 	.word	0x200004f4
 800cb18:	0800c559 	.word	0x0800c559
 800cb1c:	200000e0 	.word	0x200000e0

0800cb20 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	4603      	mov	r3, r0
 800cb28:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800cb2a:	79fb      	ldrb	r3, [r7, #7]
 800cb2c:	2b04      	cmp	r3, #4
 800cb2e:	d80e      	bhi.n	800cb4e <LmHandlerPackageIsInitialized+0x2e>
 800cb30:	79fb      	ldrb	r3, [r7, #7]
 800cb32:	4a09      	ldr	r2, [pc, #36]	; (800cb58 <LmHandlerPackageIsInitialized+0x38>)
 800cb34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d007      	beq.n	800cb4e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cb3e:	79fb      	ldrb	r3, [r7, #7]
 800cb40:	4a05      	ldr	r2, [pc, #20]	; (800cb58 <LmHandlerPackageIsInitialized+0x38>)
 800cb42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb46:	689b      	ldr	r3, [r3, #8]
 800cb48:	4798      	blx	r3
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	e000      	b.n	800cb50 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cb4e:	2300      	movs	r3, #0
    }
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	200004cc 	.word	0x200004cc

0800cb5c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	4603      	mov	r3, r0
 800cb64:	6039      	str	r1, [r7, #0]
 800cb66:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cb68:	2300      	movs	r3, #0
 800cb6a:	73fb      	strb	r3, [r7, #15]
 800cb6c:	e067      	b.n	800cc3e <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800cb6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb72:	4a37      	ldr	r2, [pc, #220]	; (800cc50 <LmHandlerPackagesNotify+0xf4>)
 800cb74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d05a      	beq.n	800cc32 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800cb7c:	79fb      	ldrb	r3, [r7, #7]
 800cb7e:	2b03      	cmp	r3, #3
 800cb80:	d84e      	bhi.n	800cc20 <LmHandlerPackagesNotify+0xc4>
 800cb82:	a201      	add	r2, pc, #4	; (adr r2, 800cb88 <LmHandlerPackagesNotify+0x2c>)
 800cb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb88:	0800cb99 	.word	0x0800cb99
 800cb8c:	0800cbbb 	.word	0x0800cbbb
 800cb90:	0800cbdd 	.word	0x0800cbdd
 800cb94:	0800cbff 	.word	0x0800cbff
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800cb98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb9c:	4a2c      	ldr	r2, [pc, #176]	; (800cc50 <LmHandlerPackagesNotify+0xf4>)
 800cb9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cba2:	699b      	ldr	r3, [r3, #24]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d03d      	beq.n	800cc24 <LmHandlerPackagesNotify+0xc8>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800cba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbac:	4a28      	ldr	r2, [pc, #160]	; (800cc50 <LmHandlerPackagesNotify+0xf4>)
 800cbae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbb2:	699b      	ldr	r3, [r3, #24]
 800cbb4:	6838      	ldr	r0, [r7, #0]
 800cbb6:	4798      	blx	r3
                    }
                    break;
 800cbb8:	e034      	b.n	800cc24 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800cbba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbbe:	4a24      	ldr	r2, [pc, #144]	; (800cc50 <LmHandlerPackagesNotify+0xf4>)
 800cbc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbc4:	69db      	ldr	r3, [r3, #28]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d02e      	beq.n	800cc28 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800cbca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbce:	4a20      	ldr	r2, [pc, #128]	; (800cc50 <LmHandlerPackagesNotify+0xf4>)
 800cbd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbd4:	69db      	ldr	r3, [r3, #28]
 800cbd6:	6838      	ldr	r0, [r7, #0]
 800cbd8:	4798      	blx	r3
                    }
                    break;
 800cbda:	e025      	b.n	800cc28 <LmHandlerPackagesNotify+0xcc>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800cbdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbe0:	4a1b      	ldr	r2, [pc, #108]	; (800cc50 <LmHandlerPackagesNotify+0xf4>)
 800cbe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbe6:	6a1b      	ldr	r3, [r3, #32]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d01f      	beq.n	800cc2c <LmHandlerPackagesNotify+0xd0>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800cbec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbf0:	4a17      	ldr	r2, [pc, #92]	; (800cc50 <LmHandlerPackagesNotify+0xf4>)
 800cbf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbf6:	6a1b      	ldr	r3, [r3, #32]
 800cbf8:	6838      	ldr	r0, [r7, #0]
 800cbfa:	4798      	blx	r3
                    }
                    break;
 800cbfc:	e016      	b.n	800cc2c <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800cbfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc02:	4a13      	ldr	r2, [pc, #76]	; (800cc50 <LmHandlerPackagesNotify+0xf4>)
 800cc04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d010      	beq.n	800cc30 <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800cc0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc12:	4a0f      	ldr	r2, [pc, #60]	; (800cc50 <LmHandlerPackagesNotify+0xf4>)
 800cc14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1a:	6838      	ldr	r0, [r7, #0]
 800cc1c:	4798      	blx	r3
                    }
                    break;
 800cc1e:	e007      	b.n	800cc30 <LmHandlerPackagesNotify+0xd4>
                }
                default:
                {
                    break;
 800cc20:	bf00      	nop
 800cc22:	e006      	b.n	800cc32 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cc24:	bf00      	nop
 800cc26:	e004      	b.n	800cc32 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cc28:	bf00      	nop
 800cc2a:	e002      	b.n	800cc32 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cc2c:	bf00      	nop
 800cc2e:	e000      	b.n	800cc32 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cc30:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	3301      	adds	r3, #1
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	73fb      	strb	r3, [r7, #15]
 800cc3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc42:	2b04      	cmp	r3, #4
 800cc44:	dd93      	ble.n	800cb6e <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800cc46:	bf00      	nop
 800cc48:	bf00      	nop
 800cc4a:	3710      	adds	r7, #16
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	200004cc 	.word	0x200004cc

0800cc54 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	71fb      	strb	r3, [r7, #7]
 800cc5e:	e018      	b.n	800cc92 <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800cc60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc64:	4a0f      	ldr	r2, [pc, #60]	; (800cca4 <LmHandlerPackageIsTxPending+0x50>)
 800cc66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00b      	beq.n	800cc86 <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800cc6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc72:	4a0c      	ldr	r2, [pc, #48]	; (800cca4 <LmHandlerPackageIsTxPending+0x50>)
 800cc74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	4798      	blx	r3
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d001      	beq.n	800cc86 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800cc82:	2301      	movs	r3, #1
 800cc84:	e00a      	b.n	800cc9c <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	71fb      	strb	r3, [r7, #7]
 800cc92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc96:	2b04      	cmp	r3, #4
 800cc98:	dde2      	ble.n	800cc60 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	200004cc 	.word	0x200004cc

0800cca8 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ccae:	2300      	movs	r3, #0
 800ccb0:	71fb      	strb	r3, [r7, #7]
 800ccb2:	e022      	b.n	800ccfa <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ccb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccb8:	4a14      	ldr	r2, [pc, #80]	; (800cd0c <LmHandlerPackagesProcess+0x64>)
 800ccba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d015      	beq.n	800ccee <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ccc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccc6:	4a11      	ldr	r2, [pc, #68]	; (800cd0c <LmHandlerPackagesProcess+0x64>)
 800ccc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cccc:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00d      	beq.n	800ccee <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ccd2:	79fb      	ldrb	r3, [r7, #7]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7ff ff23 	bl	800cb20 <LmHandlerPackageIsInitialized>
 800ccda:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d006      	beq.n	800ccee <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800cce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cce4:	4a09      	ldr	r2, [pc, #36]	; (800cd0c <LmHandlerPackagesProcess+0x64>)
 800cce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccea:	691b      	ldr	r3, [r3, #16]
 800ccec:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ccee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	71fb      	strb	r3, [r7, #7]
 800ccfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccfe:	2b04      	cmp	r3, #4
 800cd00:	ddd8      	ble.n	800ccb4 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800cd02:	bf00      	nop
 800cd04:	bf00      	nop
 800cd06:	3708      	adds	r7, #8
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	200004cc 	.word	0x200004cc

0800cd10 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	4603      	mov	r3, r0
 800cd18:	6039      	str	r1, [r7, #0]
 800cd1a:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d102      	bne.n	800cd28 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800cd22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd26:	e00e      	b.n	800cd46 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800cd28:	79fb      	ldrb	r3, [r7, #7]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d002      	beq.n	800cd34 <LmHandlerGetVersion+0x24>
 800cd2e:	2b01      	cmp	r3, #1
 800cd30:	d004      	beq.n	800cd3c <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800cd32:	e007      	b.n	800cd44 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	4a06      	ldr	r2, [pc, #24]	; (800cd50 <LmHandlerGetVersion+0x40>)
 800cd38:	601a      	str	r2, [r3, #0]
            break;
 800cd3a:	e003      	b.n	800cd44 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	4a05      	ldr	r2, [pc, #20]	; (800cd54 <LmHandlerGetVersion+0x44>)
 800cd40:	601a      	str	r2, [r3, #0]
            break;
 800cd42:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	370c      	adds	r7, #12
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bc80      	pop	{r7}
 800cd4e:	4770      	bx	lr
 800cd50:	01000400 	.word	0x01000400
 800cd54:	02010001 	.word	0x02010001

0800cd58 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800cd5c:	f005 fb6a 	bl	8012434 <LoRaMacDeInitialization>
 800cd60:	4603      	mov	r3, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cd66:	2300      	movs	r3, #0
 800cd68:	e001      	b.n	800cd6e <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cd6a:	f06f 0301 	mvn.w	r3, #1
    }
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800cd76:	f004 faa3 	bl	80112c0 <LoRaMacHalt>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d101      	bne.n	800cd84 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cd80:	2300      	movs	r3, #0
 800cd82:	e001      	b.n	800cd88 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cd84:	f06f 0301 	mvn.w	r3, #1
    }
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08e      	sub	sp, #56	; 0x38
 800cd90:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800cd92:	2300      	movs	r3, #0
 800cd94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800cd9c:	f7ff ffe9 	bl	800cd72 <LmHandlerHalt>
 800cda0:	4603      	mov	r3, r0
 800cda2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800cda6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d12f      	bne.n	800ce0e <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800cdae:	f000 f859 	bl	800ce64 <NvmDataMgmtStoreBegin>
 800cdb2:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb6:	f113 0f02 	cmn.w	r3, #2
 800cdba:	d103      	bne.n	800cdc4 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800cdbc:	23f8      	movs	r3, #248	; 0xf8
 800cdbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cdc2:	e01c      	b.n	800cdfe <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d104      	bne.n	800cdd4 <LmHandlerNvmDataStore+0x48>
 800cdca:	4b1b      	ldr	r3, [pc, #108]	; (800ce38 <LmHandlerNvmDataStore+0xac>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	695b      	ldr	r3, [r3, #20]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d103      	bne.n	800cddc <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cdd4:	23ff      	movs	r3, #255	; 0xff
 800cdd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cdda:	e010      	b.n	800cdfe <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800cddc:	2327      	movs	r3, #39	; 0x27
 800cdde:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800cde0:	1d3b      	adds	r3, r7, #4
 800cde2:	4618      	mov	r0, r3
 800cde4:	f004 fb34 	bl	8011450 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800cdec:	f44f 63b2 	mov.w	r3, #1424	; 0x590
 800cdf0:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800cdf2:	4b11      	ldr	r3, [pc, #68]	; (800ce38 <LmHandlerNvmDataStore+0xac>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdfc:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800cdfe:	f000 f847 	bl	800ce90 <NvmDataMgmtStoreEnd>
 800ce02:	4603      	mov	r3, r0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d002      	beq.n	800ce0e <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ce08:	23ff      	movs	r3, #255	; 0xff
 800ce0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800ce0e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d109      	bne.n	800ce2a <LmHandlerNvmDataStore+0x9e>
 800ce16:	4b08      	ldr	r3, [pc, #32]	; (800ce38 <LmHandlerNvmDataStore+0xac>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	69db      	ldr	r3, [r3, #28]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d004      	beq.n	800ce2a <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800ce20:	4b05      	ldr	r3, [pc, #20]	; (800ce38 <LmHandlerNvmDataStore+0xac>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	69db      	ldr	r3, [r3, #28]
 800ce26:	2001      	movs	r0, #1
 800ce28:	4798      	blx	r3
    }

    return lmhStatus;
 800ce2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3738      	adds	r7, #56	; 0x38
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	200004f4 	.word	0x200004f4

0800ce3c <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b083      	sub	sp, #12
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	4603      	mov	r3, r0
 800ce44:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800ce46:	4b06      	ldr	r3, [pc, #24]	; (800ce60 <NvmDataMgmtEvent+0x24>)
 800ce48:	881a      	ldrh	r2, [r3, #0]
 800ce4a:	88fb      	ldrh	r3, [r7, #6]
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	b29a      	uxth	r2, r3
 800ce50:	4b03      	ldr	r3, [pc, #12]	; (800ce60 <NvmDataMgmtEvent+0x24>)
 800ce52:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800ce54:	bf00      	nop
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bc80      	pop	{r7}
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	20000618 	.word	0x20000618

0800ce64 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800ce68:	4b08      	ldr	r3, [pc, #32]	; (800ce8c <NvmDataMgmtStoreBegin+0x28>)
 800ce6a:	881b      	ldrh	r3, [r3, #0]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d102      	bne.n	800ce76 <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800ce70:	f06f 0301 	mvn.w	r3, #1
 800ce74:	e008      	b.n	800ce88 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800ce76:	f004 fa07 	bl	8011288 <LoRaMacStop>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d002      	beq.n	800ce86 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800ce80:	f06f 0302 	mvn.w	r3, #2
 800ce84:	e000      	b.n	800ce88 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800ce86:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	20000618 	.word	0x20000618

0800ce90 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800ce94:	4b03      	ldr	r3, [pc, #12]	; (800cea4 <NvmDataMgmtStoreEnd+0x14>)
 800ce96:	2200      	movs	r2, #0
 800ce98:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800ce9a:	f004 f9e7 	bl	801126c <LoRaMacStart>
    return NVM_DATA_OK;
 800ce9e:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	20000618 	.word	0x20000618

0800cea8 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800ceac:	2220      	movs	r2, #32
 800ceae:	2100      	movs	r1, #0
 800ceb0:	4802      	ldr	r0, [pc, #8]	; (800cebc <ClassBStatusReset+0x14>)
 800ceb2:	f00b f96f 	bl	8018194 <memset1>
}
 800ceb6:	bf00      	nop
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop
 800cebc:	20000630 	.word	0x20000630

0800cec0 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800cec0:	b480      	push	{r7}
 800cec2:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800cec4:	4b02      	ldr	r3, [pc, #8]	; (800ced0 <LmhpCompliancePackageFactory+0x10>)
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bc80      	pop	{r7}
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop
 800ced0:	200000e8 	.word	0x200000e8

0800ced4 <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af02      	add	r7, sp, #8
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	4613      	mov	r3, r2
 800cee0:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d018      	beq.n	800cf1a <LmhpComplianceInit+0x46>
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d015      	beq.n	800cf1a <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800ceee:	4a19      	ldr	r2, [pc, #100]	; (800cf54 <LmhpComplianceInit+0x80>)
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800cef4:	4a18      	ldr	r2, [pc, #96]	; (800cf58 <LmhpComplianceInit+0x84>)
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800cefa:	4a17      	ldr	r2, [pc, #92]	; (800cf58 <LmhpComplianceInit+0x84>)
 800cefc:	79fb      	ldrb	r3, [r7, #7]
 800cefe:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800cf00:	4b15      	ldr	r3, [pc, #84]	; (800cf58 <LmhpComplianceInit+0x84>)
 800cf02:	2201      	movs	r2, #1
 800cf04:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800cf06:	2300      	movs	r3, #0
 800cf08:	9300      	str	r3, [sp, #0]
 800cf0a:	4b14      	ldr	r3, [pc, #80]	; (800cf5c <LmhpComplianceInit+0x88>)
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cf12:	4813      	ldr	r0, [pc, #76]	; (800cf60 <LmhpComplianceInit+0x8c>)
 800cf14:	f00f f9a8 	bl	801c268 <UTIL_TIMER_Create>
 800cf18:	e005      	b.n	800cf26 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800cf1a:	4b0e      	ldr	r3, [pc, #56]	; (800cf54 <LmhpComplianceInit+0x80>)
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800cf20:	4b0d      	ldr	r3, [pc, #52]	; (800cf58 <LmhpComplianceInit+0x84>)
 800cf22:	2200      	movs	r2, #0
 800cf24:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800cf26:	4b0c      	ldr	r3, [pc, #48]	; (800cf58 <LmhpComplianceInit+0x84>)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800cf2c:	f7ff ffbc 	bl	800cea8 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800cf30:	4b09      	ldr	r3, [pc, #36]	; (800cf58 <LmhpComplianceInit+0x84>)
 800cf32:	2200      	movs	r2, #0
 800cf34:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800cf36:	4b08      	ldr	r3, [pc, #32]	; (800cf58 <LmhpComplianceInit+0x84>)
 800cf38:	2200      	movs	r2, #0
 800cf3a:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800cf3c:	4b06      	ldr	r3, [pc, #24]	; (800cf58 <LmhpComplianceInit+0x84>)
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800cf44:	4b04      	ldr	r3, [pc, #16]	; (800cf58 <LmhpComplianceInit+0x84>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800cf4c:	bf00      	nop
 800cf4e:	3710      	adds	r7, #16
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	20000654 	.word	0x20000654
 800cf58:	2000061c 	.word	0x2000061c
 800cf5c:	0800d849 	.word	0x0800d849
 800cf60:	20000658 	.word	0x20000658

0800cf64 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800cf64:	b480      	push	{r7}
 800cf66:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800cf68:	4b02      	ldr	r3, [pc, #8]	; (800cf74 <LmhpComplianceIsInitialized+0x10>)
 800cf6a:	781b      	ldrb	r3, [r3, #0]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bc80      	pop	{r7}
 800cf72:	4770      	bx	lr
 800cf74:	2000061c 	.word	0x2000061c

0800cf78 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800cf78:	b480      	push	{r7}
 800cf7a:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800cf7c:	4b02      	ldr	r3, [pc, #8]	; (800cf88 <LmhpComplianceIsTxPending+0x10>)
 800cf7e:	785b      	ldrb	r3, [r3, #1]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bc80      	pop	{r7}
 800cf86:	4770      	bx	lr
 800cf88:	2000061c 	.word	0x2000061c

0800cf8c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800cf8c:	b590      	push	{r4, r7, lr}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800cf92:	4b33      	ldr	r3, [pc, #204]	; (800d060 <LmhpComplianceProcess+0xd4>)
 800cf94:	785b      	ldrb	r3, [r3, #1]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d03f      	beq.n	800d01a <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800cf9a:	f00f fb23 	bl	801c5e4 <UTIL_TIMER_GetCurrentTime>
 800cf9e:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800cfa0:	4b2f      	ldr	r3, [pc, #188]	; (800d060 <LmhpComplianceProcess+0xd4>)
 800cfa2:	685c      	ldr	r4, [r3, #4]
 800cfa4:	f7ff f96a 	bl	800c27c <LmHandlerGetDutyCycleWaitTime>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	4423      	add	r3, r4
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d942      	bls.n	800d038 <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800cfb2:	4b2b      	ldr	r3, [pc, #172]	; (800d060 <LmhpComplianceProcess+0xd4>)
 800cfb4:	7a9b      	ldrb	r3, [r3, #10]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d03e      	beq.n	800d038 <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800cfba:	23e0      	movs	r3, #224	; 0xe0
 800cfbc:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800cfbe:	4b28      	ldr	r3, [pc, #160]	; (800d060 <LmhpComplianceProcess+0xd4>)
 800cfc0:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800cfc2:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800cfc4:	4b26      	ldr	r3, [pc, #152]	; (800d060 <LmhpComplianceProcess+0xd4>)
 800cfc6:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800cfc8:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800cfca:	23ff      	movs	r3, #255	; 0xff
 800cfcc:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800cfce:	4b24      	ldr	r3, [pc, #144]	; (800d060 <LmhpComplianceProcess+0xd4>)
 800cfd0:	7a19      	ldrb	r1, [r3, #8]
 800cfd2:	463b      	mov	r3, r7
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7ff f9f8 	bl	800c3cc <LmHandlerSend>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800cfe0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cfe4:	f113 0f02 	cmn.w	r3, #2
 800cfe8:	d004      	beq.n	800cff4 <LmhpComplianceProcess+0x68>
 800cfea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cfee:	f113 0f06 	cmn.w	r3, #6
 800cff2:	d108      	bne.n	800d006 <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800cff4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cff8:	481a      	ldr	r0, [pc, #104]	; (800d064 <LmhpComplianceProcess+0xd8>)
 800cffa:	f00f fa49 	bl	801c490 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800cffe:	4819      	ldr	r0, [pc, #100]	; (800d064 <LmhpComplianceProcess+0xd8>)
 800d000:	f00f f968 	bl	801c2d4 <UTIL_TIMER_Start>
 800d004:	e005      	b.n	800d012 <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800d006:	4b16      	ldr	r3, [pc, #88]	; (800d060 <LmhpComplianceProcess+0xd4>)
 800d008:	2200      	movs	r2, #0
 800d00a:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800d00c:	4b14      	ldr	r3, [pc, #80]	; (800d060 <LmhpComplianceProcess+0xd4>)
 800d00e:	2200      	movs	r2, #0
 800d010:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800d012:	4a13      	ldr	r2, [pc, #76]	; (800d060 <LmhpComplianceProcess+0xd4>)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	6053      	str	r3, [r2, #4]
 800d018:	e00e      	b.n	800d038 <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800d01a:	4b11      	ldr	r3, [pc, #68]	; (800d060 <LmhpComplianceProcess+0xd4>)
 800d01c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d020:	2b00      	cmp	r3, #0
 800d022:	d009      	beq.n	800d038 <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800d024:	4b0e      	ldr	r3, [pc, #56]	; (800d060 <LmhpComplianceProcess+0xd4>)
 800d026:	2200      	movs	r2, #0
 800d028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800d02c:	4b0c      	ldr	r3, [pc, #48]	; (800d060 <LmhpComplianceProcess+0xd4>)
 800d02e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d032:	4618      	mov	r0, r3
 800d034:	f7ff fab8 	bl	800c5a8 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800d038:	4b09      	ldr	r3, [pc, #36]	; (800d060 <LmhpComplianceProcess+0xd4>)
 800d03a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d00a      	beq.n	800d058 <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800d042:	4b07      	ldr	r3, [pc, #28]	; (800d060 <LmhpComplianceProcess+0xd4>)
 800d044:	2200      	movs	r2, #0
 800d046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800d04a:	4b07      	ldr	r3, [pc, #28]	; (800d068 <LmhpComplianceProcess+0xdc>)
 800d04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d002      	beq.n	800d058 <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800d052:	4b05      	ldr	r3, [pc, #20]	; (800d068 <LmhpComplianceProcess+0xdc>)
 800d054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d056:	4798      	blx	r3
        }
    }
}
 800d058:	bf00      	nop
 800d05a:	3714      	adds	r7, #20
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd90      	pop	{r4, r7, pc}
 800d060:	2000061c 	.word	0x2000061c
 800d064:	20000658 	.word	0x20000658
 800d068:	200000e8 	.word	0x200000e8

0800d06c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d06c:	b5b0      	push	{r4, r5, r7, lr}
 800d06e:	b0a4      	sub	sp, #144	; 0x90
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800d074:	2300      	movs	r3, #0
 800d076:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800d07a:	4bce      	ldr	r3, [pc, #824]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	f083 0301 	eor.w	r3, r3, #1
 800d082:	b2db      	uxtb	r3, r3
 800d084:	2b00      	cmp	r3, #0
 800d086:	f040 83b5 	bne.w	800d7f4 <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	78db      	ldrb	r3, [r3, #3]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d103      	bne.n	800d09a <LmhpComplianceOnMcpsIndication+0x2e>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	7b9b      	ldrb	r3, [r3, #14]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d005      	beq.n	800d0a6 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800d09a:	4bc6      	ldr	r3, [pc, #792]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d09c:	8a1b      	ldrh	r3, [r3, #16]
 800d09e:	3301      	adds	r3, #1
 800d0a0:	b29a      	uxth	r2, r3
 800d0a2:	4bc4      	ldr	r3, [pc, #784]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d0a4:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	7b5b      	ldrb	r3, [r3, #13]
 800d0aa:	f083 0301 	eor.w	r3, r3, #1
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	f040 83a1 	bne.w	800d7f8 <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	78db      	ldrb	r3, [r3, #3]
 800d0ba:	2be0      	cmp	r3, #224	; 0xe0
 800d0bc:	f040 839e 	bne.w	800d7fc <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800d0c0:	4bbc      	ldr	r3, [pc, #752]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	689a      	ldr	r2, [r3, #8]
 800d0ca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d0ce:	1c59      	adds	r1, r3, #1
 800d0d0:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d0d4:	4413      	add	r3, r2
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	2b7f      	cmp	r3, #127	; 0x7f
 800d0da:	f200 836e 	bhi.w	800d7ba <LmhpComplianceOnMcpsIndication+0x74e>
 800d0de:	a201      	add	r2, pc, #4	; (adr r2, 800d0e4 <LmhpComplianceOnMcpsIndication+0x78>)
 800d0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e4:	0800d2e5 	.word	0x0800d2e5
 800d0e8:	0800d329 	.word	0x0800d329
 800d0ec:	0800d333 	.word	0x0800d333
 800d0f0:	0800d33f 	.word	0x0800d33f
 800d0f4:	0800d361 	.word	0x0800d361
 800d0f8:	0800d38f 	.word	0x0800d38f
 800d0fc:	0800d3bd 	.word	0x0800d3bd
 800d100:	0800d41b 	.word	0x0800d41b
 800d104:	0800d473 	.word	0x0800d473
 800d108:	0800d4df 	.word	0x0800d4df
 800d10c:	0800d52f 	.word	0x0800d52f
 800d110:	0800d7bb 	.word	0x0800d7bb
 800d114:	0800d7bb 	.word	0x0800d7bb
 800d118:	0800d7bb 	.word	0x0800d7bb
 800d11c:	0800d7bb 	.word	0x0800d7bb
 800d120:	0800d7bb 	.word	0x0800d7bb
 800d124:	0800d7bb 	.word	0x0800d7bb
 800d128:	0800d7bb 	.word	0x0800d7bb
 800d12c:	0800d7bb 	.word	0x0800d7bb
 800d130:	0800d7bb 	.word	0x0800d7bb
 800d134:	0800d7bb 	.word	0x0800d7bb
 800d138:	0800d7bb 	.word	0x0800d7bb
 800d13c:	0800d7bb 	.word	0x0800d7bb
 800d140:	0800d7bb 	.word	0x0800d7bb
 800d144:	0800d7bb 	.word	0x0800d7bb
 800d148:	0800d7bb 	.word	0x0800d7bb
 800d14c:	0800d7bb 	.word	0x0800d7bb
 800d150:	0800d7bb 	.word	0x0800d7bb
 800d154:	0800d7bb 	.word	0x0800d7bb
 800d158:	0800d7bb 	.word	0x0800d7bb
 800d15c:	0800d7bb 	.word	0x0800d7bb
 800d160:	0800d7bb 	.word	0x0800d7bb
 800d164:	0800d537 	.word	0x0800d537
 800d168:	0800d549 	.word	0x0800d549
 800d16c:	0800d551 	.word	0x0800d551
 800d170:	0800d7bb 	.word	0x0800d7bb
 800d174:	0800d7bb 	.word	0x0800d7bb
 800d178:	0800d7bb 	.word	0x0800d7bb
 800d17c:	0800d7bb 	.word	0x0800d7bb
 800d180:	0800d7bb 	.word	0x0800d7bb
 800d184:	0800d7bb 	.word	0x0800d7bb
 800d188:	0800d7bb 	.word	0x0800d7bb
 800d18c:	0800d7bb 	.word	0x0800d7bb
 800d190:	0800d7bb 	.word	0x0800d7bb
 800d194:	0800d7bb 	.word	0x0800d7bb
 800d198:	0800d7bb 	.word	0x0800d7bb
 800d19c:	0800d7bb 	.word	0x0800d7bb
 800d1a0:	0800d7bb 	.word	0x0800d7bb
 800d1a4:	0800d7bb 	.word	0x0800d7bb
 800d1a8:	0800d7bb 	.word	0x0800d7bb
 800d1ac:	0800d7bb 	.word	0x0800d7bb
 800d1b0:	0800d7bb 	.word	0x0800d7bb
 800d1b4:	0800d7bb 	.word	0x0800d7bb
 800d1b8:	0800d7bb 	.word	0x0800d7bb
 800d1bc:	0800d7bb 	.word	0x0800d7bb
 800d1c0:	0800d7bb 	.word	0x0800d7bb
 800d1c4:	0800d7bb 	.word	0x0800d7bb
 800d1c8:	0800d7bb 	.word	0x0800d7bb
 800d1cc:	0800d7bb 	.word	0x0800d7bb
 800d1d0:	0800d7bb 	.word	0x0800d7bb
 800d1d4:	0800d7bb 	.word	0x0800d7bb
 800d1d8:	0800d7bb 	.word	0x0800d7bb
 800d1dc:	0800d7bb 	.word	0x0800d7bb
 800d1e0:	0800d7bb 	.word	0x0800d7bb
 800d1e4:	0800d7bb 	.word	0x0800d7bb
 800d1e8:	0800d7bb 	.word	0x0800d7bb
 800d1ec:	0800d7bb 	.word	0x0800d7bb
 800d1f0:	0800d7bb 	.word	0x0800d7bb
 800d1f4:	0800d7bb 	.word	0x0800d7bb
 800d1f8:	0800d7bb 	.word	0x0800d7bb
 800d1fc:	0800d7bb 	.word	0x0800d7bb
 800d200:	0800d7bb 	.word	0x0800d7bb
 800d204:	0800d7bb 	.word	0x0800d7bb
 800d208:	0800d7bb 	.word	0x0800d7bb
 800d20c:	0800d7bb 	.word	0x0800d7bb
 800d210:	0800d7bb 	.word	0x0800d7bb
 800d214:	0800d7bb 	.word	0x0800d7bb
 800d218:	0800d7bb 	.word	0x0800d7bb
 800d21c:	0800d7bb 	.word	0x0800d7bb
 800d220:	0800d7bb 	.word	0x0800d7bb
 800d224:	0800d7bb 	.word	0x0800d7bb
 800d228:	0800d7bb 	.word	0x0800d7bb
 800d22c:	0800d7bb 	.word	0x0800d7bb
 800d230:	0800d7bb 	.word	0x0800d7bb
 800d234:	0800d7bb 	.word	0x0800d7bb
 800d238:	0800d7bb 	.word	0x0800d7bb
 800d23c:	0800d7bb 	.word	0x0800d7bb
 800d240:	0800d7bb 	.word	0x0800d7bb
 800d244:	0800d7bb 	.word	0x0800d7bb
 800d248:	0800d7bb 	.word	0x0800d7bb
 800d24c:	0800d7bb 	.word	0x0800d7bb
 800d250:	0800d7bb 	.word	0x0800d7bb
 800d254:	0800d7bb 	.word	0x0800d7bb
 800d258:	0800d7bb 	.word	0x0800d7bb
 800d25c:	0800d7bb 	.word	0x0800d7bb
 800d260:	0800d7bb 	.word	0x0800d7bb
 800d264:	0800d7bb 	.word	0x0800d7bb
 800d268:	0800d7bb 	.word	0x0800d7bb
 800d26c:	0800d7bb 	.word	0x0800d7bb
 800d270:	0800d7bb 	.word	0x0800d7bb
 800d274:	0800d7bb 	.word	0x0800d7bb
 800d278:	0800d7bb 	.word	0x0800d7bb
 800d27c:	0800d7bb 	.word	0x0800d7bb
 800d280:	0800d7bb 	.word	0x0800d7bb
 800d284:	0800d7bb 	.word	0x0800d7bb
 800d288:	0800d7bb 	.word	0x0800d7bb
 800d28c:	0800d7bb 	.word	0x0800d7bb
 800d290:	0800d7bb 	.word	0x0800d7bb
 800d294:	0800d7bb 	.word	0x0800d7bb
 800d298:	0800d7bb 	.word	0x0800d7bb
 800d29c:	0800d7bb 	.word	0x0800d7bb
 800d2a0:	0800d7bb 	.word	0x0800d7bb
 800d2a4:	0800d7bb 	.word	0x0800d7bb
 800d2a8:	0800d7bb 	.word	0x0800d7bb
 800d2ac:	0800d7bb 	.word	0x0800d7bb
 800d2b0:	0800d7bb 	.word	0x0800d7bb
 800d2b4:	0800d7bb 	.word	0x0800d7bb
 800d2b8:	0800d7bb 	.word	0x0800d7bb
 800d2bc:	0800d7bb 	.word	0x0800d7bb
 800d2c0:	0800d7bb 	.word	0x0800d7bb
 800d2c4:	0800d7bb 	.word	0x0800d7bb
 800d2c8:	0800d7bb 	.word	0x0800d7bb
 800d2cc:	0800d7bb 	.word	0x0800d7bb
 800d2d0:	0800d7bb 	.word	0x0800d7bb
 800d2d4:	0800d7bb 	.word	0x0800d7bb
 800d2d8:	0800d583 	.word	0x0800d583
 800d2dc:	0800d633 	.word	0x0800d633
 800d2e0:	0800d665 	.word	0x0800d665
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800d2e4:	4b33      	ldr	r3, [pc, #204]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d2e6:	68da      	ldr	r2, [r3, #12]
 800d2e8:	4b32      	ldr	r3, [pc, #200]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d2ea:	7a9b      	ldrb	r3, [r3, #10]
 800d2ec:	1c59      	adds	r1, r3, #1
 800d2ee:	b2c8      	uxtb	r0, r1
 800d2f0:	4930      	ldr	r1, [pc, #192]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d2f2:	7288      	strb	r0, [r1, #10]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800d2fa:	4b2e      	ldr	r3, [pc, #184]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d2fc:	68da      	ldr	r2, [r3, #12]
 800d2fe:	4b2d      	ldr	r3, [pc, #180]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d300:	7a9b      	ldrb	r3, [r3, #10]
 800d302:	1c59      	adds	r1, r3, #1
 800d304:	b2c8      	uxtb	r0, r1
 800d306:	492b      	ldr	r1, [pc, #172]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d308:	7288      	strb	r0, [r1, #10]
 800d30a:	4413      	add	r3, r2
 800d30c:	2206      	movs	r2, #6
 800d30e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800d310:	4b28      	ldr	r3, [pc, #160]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d312:	68da      	ldr	r2, [r3, #12]
 800d314:	4b27      	ldr	r3, [pc, #156]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d316:	7a9b      	ldrb	r3, [r3, #10]
 800d318:	1c59      	adds	r1, r3, #1
 800d31a:	b2c8      	uxtb	r0, r1
 800d31c:	4925      	ldr	r1, [pc, #148]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d31e:	7288      	strb	r0, [r1, #10]
 800d320:	4413      	add	r3, r2
 800d322:	2201      	movs	r2, #1
 800d324:	701a      	strb	r2, [r3, #0]
        break;
 800d326:	e251      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800d328:	4b22      	ldr	r3, [pc, #136]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d32a:	2201      	movs	r2, #1
 800d32c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800d330:	e24c      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d332:	4b21      	ldr	r3, [pc, #132]	; (800d3b8 <LmhpComplianceOnMcpsIndication+0x34c>)
 800d334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d336:	2101      	movs	r1, #1
 800d338:	2002      	movs	r0, #2
 800d33a:	4798      	blx	r3
        break;
 800d33c:	e246      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	689a      	ldr	r2, [r3, #8]
 800d342:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d346:	1c59      	adds	r1, r3, #1
 800d348:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d34c:	4413      	add	r3, r2
 800d34e:	781a      	ldrb	r2, [r3, #0]
 800d350:	4b18      	ldr	r3, [pc, #96]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d352:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800d356:	4b17      	ldr	r3, [pc, #92]	; (800d3b4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d358:	2201      	movs	r2, #1
 800d35a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 800d35e:	e235      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800d360:	2304      	movs	r3, #4
 800d362:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	689a      	ldr	r2, [r3, #8]
 800d368:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d36c:	1c59      	adds	r1, r3, #1
 800d36e:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d372:	4413      	add	r3, r2
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	bf14      	ite	ne
 800d37a:	2301      	movne	r3, #1
 800d37c:	2300      	moveq	r3, #0
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800d382:	f107 030c 	add.w	r3, r7, #12
 800d386:	4618      	mov	r0, r3
 800d388:	f004 fa08 	bl	801179c <LoRaMacMibSetRequestConfirm>
        break;
 800d38c:	e21e      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	689a      	ldr	r2, [r3, #8]
 800d392:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d396:	1c59      	adds	r1, r3, #1
 800d398:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d39c:	4413      	add	r3, r2
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	bf14      	ite	ne
 800d3a4:	2301      	movne	r3, #1
 800d3a6:	2300      	moveq	r3, #0
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f005 f824 	bl	80123f8 <LoRaMacTestSetDutyCycleOn>
        break;
 800d3b0:	e20c      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
 800d3b2:	bf00      	nop
 800d3b4:	2000061c 	.word	0x2000061c
 800d3b8:	200000e8 	.word	0x200000e8
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800d3bc:	4ba5      	ldr	r3, [pc, #660]	; (800d654 <LmhpComplianceOnMcpsIndication+0x5e8>)
 800d3be:	f107 040c 	add.w	r4, r7, #12
 800d3c2:	461d      	mov	r5, r3
 800d3c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d3d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	689a      	ldr	r2, [r3, #8]
 800d3d8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d3dc:	1c59      	adds	r1, r3, #1
 800d3de:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d3e2:	4413      	add	r3, r2
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800d3ea:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800d3ee:	2b0a      	cmp	r3, #10
 800d3f0:	f200 81e5 	bhi.w	800d7be <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800d3f4:	4b98      	ldr	r3, [pc, #608]	; (800d658 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f000 81df 	beq.w	800d7be <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800d400:	4b95      	ldr	r3, [pc, #596]	; (800d658 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	685a      	ldr	r2, [r3, #4]
 800d406:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800d40a:	009b      	lsls	r3, r3, #2
 800d40c:	3390      	adds	r3, #144	; 0x90
 800d40e:	443b      	add	r3, r7
 800d410:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800d414:	4618      	mov	r0, r3
 800d416:	4790      	blx	r2
            }
        }
        break;
 800d418:	e1d1      	b.n	800d7be <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	689a      	ldr	r2, [r3, #8]
 800d41e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d422:	1c59      	adds	r1, r3, #1
 800d424:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d428:	4413      	add	r3, r2
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800d430:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800d434:	2b01      	cmp	r3, #1
 800d436:	d004      	beq.n	800d442 <LmhpComplianceOnMcpsIndication+0x3d6>
 800d438:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800d43c:	2b02      	cmp	r3, #2
 800d43e:	f040 81c0 	bne.w	800d7c2 <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d442:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800d446:	2b01      	cmp	r3, #1
 800d448:	bf14      	ite	ne
 800d44a:	2301      	movne	r3, #1
 800d44c:	2300      	moveq	r3, #0
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	461a      	mov	r2, r3
 800d452:	4b82      	ldr	r3, [pc, #520]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d454:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800d456:	4b80      	ldr	r3, [pc, #512]	; (800d658 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	689b      	ldr	r3, [r3, #8]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f000 81b0 	beq.w	800d7c2 <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800d462:	4b7d      	ldr	r3, [pc, #500]	; (800d658 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	4a7c      	ldr	r2, [pc, #496]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d46a:	7a12      	ldrb	r2, [r2, #8]
 800d46c:	4610      	mov	r0, r2
 800d46e:	4798      	blx	r3
            }
        }
        break;
 800d470:	e1a7      	b.n	800d7c2 <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800d472:	4b7a      	ldr	r3, [pc, #488]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d474:	68da      	ldr	r2, [r3, #12]
 800d476:	4b79      	ldr	r3, [pc, #484]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d478:	7a9b      	ldrb	r3, [r3, #10]
 800d47a:	1c59      	adds	r1, r3, #1
 800d47c:	b2c8      	uxtb	r0, r1
 800d47e:	4977      	ldr	r1, [pc, #476]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d480:	7288      	strb	r0, [r1, #10]
 800d482:	4413      	add	r3, r2
 800d484:	2208      	movs	r2, #8
 800d486:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d488:	2301      	movs	r3, #1
 800d48a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800d48e:	e019      	b.n	800d4c4 <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	689a      	ldr	r2, [r3, #8]
 800d494:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d498:	1c59      	adds	r1, r3, #1
 800d49a:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d49e:	4413      	add	r3, r2
 800d4a0:	781a      	ldrb	r2, [r3, #0]
 800d4a2:	4b6e      	ldr	r3, [pc, #440]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4a4:	68d9      	ldr	r1, [r3, #12]
 800d4a6:	4b6d      	ldr	r3, [pc, #436]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4a8:	7a9b      	ldrb	r3, [r3, #10]
 800d4aa:	1c58      	adds	r0, r3, #1
 800d4ac:	b2c4      	uxtb	r4, r0
 800d4ae:	486b      	ldr	r0, [pc, #428]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4b0:	7284      	strb	r4, [r0, #10]
 800d4b2:	440b      	add	r3, r1
 800d4b4:	3201      	adds	r2, #1
 800d4b6:	b2d2      	uxtb	r2, r2
 800d4b8:	701a      	strb	r2, [r3, #0]
             i++ )
 800d4ba:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800d4be:	3301      	adds	r3, #1
 800d4c0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d4c4:	4b65      	ldr	r3, [pc, #404]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4c6:	7a5a      	ldrb	r2, [r3, #9]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	7b1b      	ldrb	r3, [r3, #12]
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	bf28      	it	cs
 800d4d0:	4613      	movcs	r3, r2
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d3d9      	bcc.n	800d490 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800d4dc:	e176      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800d4de:	4b5f      	ldr	r3, [pc, #380]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4e0:	68da      	ldr	r2, [r3, #12]
 800d4e2:	4b5e      	ldr	r3, [pc, #376]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4e4:	7a9b      	ldrb	r3, [r3, #10]
 800d4e6:	1c59      	adds	r1, r3, #1
 800d4e8:	b2c8      	uxtb	r0, r1
 800d4ea:	495c      	ldr	r1, [pc, #368]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4ec:	7288      	strb	r0, [r1, #10]
 800d4ee:	4413      	add	r3, r2
 800d4f0:	2209      	movs	r2, #9
 800d4f2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800d4f4:	4b59      	ldr	r3, [pc, #356]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4f6:	8a18      	ldrh	r0, [r3, #16]
 800d4f8:	4b58      	ldr	r3, [pc, #352]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4fa:	68da      	ldr	r2, [r3, #12]
 800d4fc:	4b57      	ldr	r3, [pc, #348]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4fe:	7a9b      	ldrb	r3, [r3, #10]
 800d500:	1c59      	adds	r1, r3, #1
 800d502:	b2cc      	uxtb	r4, r1
 800d504:	4955      	ldr	r1, [pc, #340]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d506:	728c      	strb	r4, [r1, #10]
 800d508:	4413      	add	r3, r2
 800d50a:	b2c2      	uxtb	r2, r0
 800d50c:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800d50e:	4b53      	ldr	r3, [pc, #332]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d510:	8a1b      	ldrh	r3, [r3, #16]
 800d512:	0a1b      	lsrs	r3, r3, #8
 800d514:	b298      	uxth	r0, r3
 800d516:	4b51      	ldr	r3, [pc, #324]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d518:	68da      	ldr	r2, [r3, #12]
 800d51a:	4b50      	ldr	r3, [pc, #320]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d51c:	7a9b      	ldrb	r3, [r3, #10]
 800d51e:	1c59      	adds	r1, r3, #1
 800d520:	b2cc      	uxtb	r4, r1
 800d522:	494e      	ldr	r1, [pc, #312]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d524:	728c      	strb	r4, [r1, #10]
 800d526:	4413      	add	r3, r2
 800d528:	b2c2      	uxtb	r2, r0
 800d52a:	701a      	strb	r2, [r3, #0]
        break;
 800d52c:	e14e      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800d52e:	4b4b      	ldr	r3, [pc, #300]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d530:	2200      	movs	r2, #0
 800d532:	821a      	strh	r2, [r3, #16]
        break;
 800d534:	e14a      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800d536:	2304      	movs	r3, #4
 800d538:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800d53c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d540:	4618      	mov	r0, r3
 800d542:	f004 fc9b 	bl	8011e7c <LoRaMacMlmeRequest>
        break;
 800d546:	e141      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800d548:	4b45      	ldr	r3, [pc, #276]	; (800d660 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54c:	4798      	blx	r3
        break;
 800d54e:	e13d      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	689a      	ldr	r2, [r3, #8]
 800d554:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d558:	1c59      	adds	r1, r3, #1
 800d55a:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d55e:	4413      	add	r3, r2
 800d560:	781a      	ldrb	r2, [r3, #0]
 800d562:	4b3e      	ldr	r3, [pc, #248]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d564:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800d566:	4b3c      	ldr	r3, [pc, #240]	; (800d658 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 812a 	beq.w	800d7c6 <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800d572:	4b39      	ldr	r3, [pc, #228]	; (800d658 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	4a38      	ldr	r2, [pc, #224]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d57a:	7d52      	ldrb	r2, [r2, #21]
 800d57c:	4610      	mov	r0, r2
 800d57e:	4798      	blx	r3
        }
        break;
 800d580:	e121      	b.n	800d7c6 <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	7b1b      	ldrb	r3, [r3, #12]
 800d586:	2b07      	cmp	r3, #7
 800d588:	f040 811f 	bne.w	800d7ca <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800d58c:	2305      	movs	r3, #5
 800d58e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	689a      	ldr	r2, [r3, #8]
 800d596:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d59a:	4413      	add	r3, r2
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	b21a      	sxth	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6899      	ldr	r1, [r3, #8]
 800d5a4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	440b      	add	r3, r1
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	021b      	lsls	r3, r3, #8
 800d5b0:	b21b      	sxth	r3, r3
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	b21b      	sxth	r3, r3
 800d5b6:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800d5b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cmdIndex += 2;
 800d5bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d5c0:	3302      	adds	r3, #2
 800d5c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	689a      	ldr	r2, [r3, #8]
 800d5ca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d5ce:	4413      	add	r3, r2
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	689a      	ldr	r2, [r3, #8]
 800d5d8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d5dc:	3301      	adds	r3, #1
 800d5de:	4413      	add	r3, r2
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	021b      	lsls	r3, r3, #8
 800d5e4:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6899      	ldr	r1, [r3, #8]
 800d5ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d5f0:	3302      	adds	r3, #2
 800d5f2:	440b      	add	r3, r1
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d5fc:	2364      	movs	r3, #100	; 0x64
 800d5fe:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800d602:	64bb      	str	r3, [r7, #72]	; 0x48
                100;
            cmdIndex += 3;
 800d604:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d608:	3303      	adds	r3, #3
 800d60a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	689a      	ldr	r2, [r3, #8]
 800d612:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d616:	1c59      	adds	r1, r3, #1
 800d618:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d61c:	4413      	add	r3, r2
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	b25b      	sxtb	r3, r3
 800d622:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800d626:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d62a:	4618      	mov	r0, r3
 800d62c:	f004 fc26 	bl	8011e7c <LoRaMacMlmeRequest>
        }
        break;
 800d630:	e0cb      	b.n	800d7ca <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800d632:	2339      	movs	r3, #57	; 0x39
 800d634:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        mibReq.Param.IsCertPortOn = false;
 800d638:	2300      	movs	r3, #0
 800d63a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d63e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d642:	4618      	mov	r0, r3
 800d644:	f004 f8aa 	bl	801179c <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800d648:	4b04      	ldr	r3, [pc, #16]	; (800d65c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d64a:	2201      	movs	r2, #1
 800d64c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800d650:	e0bc      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
 800d652:	bf00      	nop
 800d654:	0801d540 	.word	0x0801d540
 800d658:	20000654 	.word	0x20000654
 800d65c:	2000061c 	.word	0x2000061c
 800d660:	200000e8 	.word	0x200000e8
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800d664:	232a      	movs	r3, #42	; 0x2a
 800d666:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800d668:	f107 030c 	add.w	r3, r7, #12
 800d66c:	4618      	mov	r0, r3
 800d66e:	f003 feef 	bl	8011450 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	63fb      	str	r3, [r7, #60]	; 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	63bb      	str	r3, [r7, #56]	; 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800d67a:	4b62      	ldr	r3, [pc, #392]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d67c:	68da      	ldr	r2, [r3, #12]
 800d67e:	4b61      	ldr	r3, [pc, #388]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d680:	7a9b      	ldrb	r3, [r3, #10]
 800d682:	1c59      	adds	r1, r3, #1
 800d684:	b2c8      	uxtb	r0, r1
 800d686:	495f      	ldr	r1, [pc, #380]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d688:	7288      	strb	r0, [r1, #10]
 800d68a:	4413      	add	r3, r2
 800d68c:	227f      	movs	r2, #127	; 0x7f
 800d68e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800d690:	4b5d      	ldr	r3, [pc, #372]	; (800d808 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	4b5b      	ldr	r3, [pc, #364]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d696:	68d9      	ldr	r1, [r3, #12]
 800d698:	4b5a      	ldr	r3, [pc, #360]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d69a:	7a9b      	ldrb	r3, [r3, #10]
 800d69c:	1c58      	adds	r0, r3, #1
 800d69e:	b2c4      	uxtb	r4, r0
 800d6a0:	4858      	ldr	r0, [pc, #352]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6a2:	7284      	strb	r4, [r0, #10]
 800d6a4:	440b      	add	r3, r1
 800d6a6:	78d2      	ldrb	r2, [r2, #3]
 800d6a8:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800d6aa:	4b57      	ldr	r3, [pc, #348]	; (800d808 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	4b55      	ldr	r3, [pc, #340]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6b0:	68d9      	ldr	r1, [r3, #12]
 800d6b2:	4b54      	ldr	r3, [pc, #336]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6b4:	7a9b      	ldrb	r3, [r3, #10]
 800d6b6:	1c58      	adds	r0, r3, #1
 800d6b8:	b2c4      	uxtb	r4, r0
 800d6ba:	4852      	ldr	r0, [pc, #328]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6bc:	7284      	strb	r4, [r0, #10]
 800d6be:	440b      	add	r3, r1
 800d6c0:	7892      	ldrb	r2, [r2, #2]
 800d6c2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800d6c4:	4b50      	ldr	r3, [pc, #320]	; (800d808 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	4b4e      	ldr	r3, [pc, #312]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6ca:	68d9      	ldr	r1, [r3, #12]
 800d6cc:	4b4d      	ldr	r3, [pc, #308]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6ce:	7a9b      	ldrb	r3, [r3, #10]
 800d6d0:	1c58      	adds	r0, r3, #1
 800d6d2:	b2c4      	uxtb	r4, r0
 800d6d4:	484b      	ldr	r0, [pc, #300]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6d6:	7284      	strb	r4, [r0, #10]
 800d6d8:	440b      	add	r3, r1
 800d6da:	7852      	ldrb	r2, [r2, #1]
 800d6dc:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800d6de:	4b4a      	ldr	r3, [pc, #296]	; (800d808 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	4b48      	ldr	r3, [pc, #288]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6e4:	68d9      	ldr	r1, [r3, #12]
 800d6e6:	4b47      	ldr	r3, [pc, #284]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6e8:	7a9b      	ldrb	r3, [r3, #10]
 800d6ea:	1c58      	adds	r0, r3, #1
 800d6ec:	b2c4      	uxtb	r4, r0
 800d6ee:	4845      	ldr	r0, [pc, #276]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6f0:	7284      	strb	r4, [r0, #10]
 800d6f2:	440b      	add	r3, r1
 800d6f4:	7812      	ldrb	r2, [r2, #0]
 800d6f6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800d6f8:	4b42      	ldr	r3, [pc, #264]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6fa:	68da      	ldr	r2, [r3, #12]
 800d6fc:	4b41      	ldr	r3, [pc, #260]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6fe:	7a9b      	ldrb	r3, [r3, #10]
 800d700:	1c59      	adds	r1, r3, #1
 800d702:	b2c8      	uxtb	r0, r1
 800d704:	493f      	ldr	r1, [pc, #252]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d706:	7288      	strb	r0, [r1, #10]
 800d708:	4413      	add	r3, r2
 800d70a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d70e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800d710:	4b3c      	ldr	r3, [pc, #240]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d712:	68da      	ldr	r2, [r3, #12]
 800d714:	4b3b      	ldr	r3, [pc, #236]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d716:	7a9b      	ldrb	r3, [r3, #10]
 800d718:	1c59      	adds	r1, r3, #1
 800d71a:	b2c8      	uxtb	r0, r1
 800d71c:	4939      	ldr	r1, [pc, #228]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d71e:	7288      	strb	r0, [r1, #10]
 800d720:	4413      	add	r3, r2
 800d722:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800d726:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800d728:	4b36      	ldr	r3, [pc, #216]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d72a:	68da      	ldr	r2, [r3, #12]
 800d72c:	4b35      	ldr	r3, [pc, #212]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d72e:	7a9b      	ldrb	r3, [r3, #10]
 800d730:	1c59      	adds	r1, r3, #1
 800d732:	b2c8      	uxtb	r0, r1
 800d734:	4933      	ldr	r1, [pc, #204]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d736:	7288      	strb	r0, [r1, #10]
 800d738:	4413      	add	r3, r2
 800d73a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800d73e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800d740:	4b30      	ldr	r3, [pc, #192]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d742:	68da      	ldr	r2, [r3, #12]
 800d744:	4b2f      	ldr	r3, [pc, #188]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d746:	7a9b      	ldrb	r3, [r3, #10]
 800d748:	1c59      	adds	r1, r3, #1
 800d74a:	b2c8      	uxtb	r0, r1
 800d74c:	492d      	ldr	r1, [pc, #180]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d74e:	7288      	strb	r0, [r1, #10]
 800d750:	4413      	add	r3, r2
 800d752:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800d756:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800d758:	4b2a      	ldr	r3, [pc, #168]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d75a:	68da      	ldr	r2, [r3, #12]
 800d75c:	4b29      	ldr	r3, [pc, #164]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d75e:	7a9b      	ldrb	r3, [r3, #10]
 800d760:	1c59      	adds	r1, r3, #1
 800d762:	b2c8      	uxtb	r0, r1
 800d764:	4927      	ldr	r1, [pc, #156]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d766:	7288      	strb	r0, [r1, #10]
 800d768:	4413      	add	r3, r2
 800d76a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800d76e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800d770:	4b24      	ldr	r3, [pc, #144]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d772:	68da      	ldr	r2, [r3, #12]
 800d774:	4b23      	ldr	r3, [pc, #140]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d776:	7a9b      	ldrb	r3, [r3, #10]
 800d778:	1c59      	adds	r1, r3, #1
 800d77a:	b2c8      	uxtb	r0, r1
 800d77c:	4921      	ldr	r1, [pc, #132]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d77e:	7288      	strb	r0, [r1, #10]
 800d780:	4413      	add	r3, r2
 800d782:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800d786:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800d788:	4b1e      	ldr	r3, [pc, #120]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d78a:	68da      	ldr	r2, [r3, #12]
 800d78c:	4b1d      	ldr	r3, [pc, #116]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d78e:	7a9b      	ldrb	r3, [r3, #10]
 800d790:	1c59      	adds	r1, r3, #1
 800d792:	b2c8      	uxtb	r0, r1
 800d794:	491b      	ldr	r1, [pc, #108]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d796:	7288      	strb	r0, [r1, #10]
 800d798:	4413      	add	r3, r2
 800d79a:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800d79e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800d7a0:	4b18      	ldr	r3, [pc, #96]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d7a2:	68da      	ldr	r2, [r3, #12]
 800d7a4:	4b17      	ldr	r3, [pc, #92]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d7a6:	7a9b      	ldrb	r3, [r3, #10]
 800d7a8:	1c59      	adds	r1, r3, #1
 800d7aa:	b2c8      	uxtb	r0, r1
 800d7ac:	4915      	ldr	r1, [pc, #84]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d7ae:	7288      	strb	r0, [r1, #10]
 800d7b0:	4413      	add	r3, r2
 800d7b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d7b6:	701a      	strb	r2, [r3, #0]
        break;
 800d7b8:	e008      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800d7ba:	bf00      	nop
 800d7bc:	e006      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d7be:	bf00      	nop
 800d7c0:	e004      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d7c2:	bf00      	nop
 800d7c4:	e002      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d7c6:	bf00      	nop
 800d7c8:	e000      	b.n	800d7cc <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d7ca:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800d7cc:	4b0d      	ldr	r3, [pc, #52]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d7ce:	7a9b      	ldrb	r3, [r3, #10]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d008      	beq.n	800d7e6 <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800d7d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d7d8:	480c      	ldr	r0, [pc, #48]	; (800d80c <LmhpComplianceOnMcpsIndication+0x7a0>)
 800d7da:	f00e fe59 	bl	801c490 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800d7de:	480b      	ldr	r0, [pc, #44]	; (800d80c <LmhpComplianceOnMcpsIndication+0x7a0>)
 800d7e0:	f00e fd78 	bl	801c2d4 <UTIL_TIMER_Start>
 800d7e4:	e00b      	b.n	800d7fe <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800d7e6:	4809      	ldr	r0, [pc, #36]	; (800d80c <LmhpComplianceOnMcpsIndication+0x7a0>)
 800d7e8:	f00e fde2 	bl	801c3b0 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800d7ec:	4b05      	ldr	r3, [pc, #20]	; (800d804 <LmhpComplianceOnMcpsIndication+0x798>)
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	705a      	strb	r2, [r3, #1]
 800d7f2:	e004      	b.n	800d7fe <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800d7f4:	bf00      	nop
 800d7f6:	e002      	b.n	800d7fe <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800d7f8:	bf00      	nop
 800d7fa:	e000      	b.n	800d7fe <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800d7fc:	bf00      	nop
    }
}
 800d7fe:	3790      	adds	r7, #144	; 0x90
 800d800:	46bd      	mov	sp, r7
 800d802:	bdb0      	pop	{r4, r5, r7, pc}
 800d804:	2000061c 	.word	0x2000061c
 800d808:	20000654 	.word	0x20000654
 800d80c:	20000658 	.word	0x20000658

0800d810 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800d818:	bf00      	nop
    }
}
 800d81a:	bf00      	nop
 800d81c:	370c      	adds	r7, #12
 800d81e:	46bd      	mov	sp, r7
 800d820:	bc80      	pop	{r7}
 800d822:	4770      	bx	lr

0800d824 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800d824:	b480      	push	{r7}
 800d826:	b083      	sub	sp, #12
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d82c:	4b05      	ldr	r3, [pc, #20]	; (800d844 <LmhpComplianceOnMlmeIndication+0x20>)
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	f083 0301 	eor.w	r3, r3, #1
 800d834:	b2db      	uxtb	r3, r3
 800d836:	2b00      	cmp	r3, #0
    {
        return;
 800d838:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bc80      	pop	{r7}
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	2000061c 	.word	0x2000061c

0800d848 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800d850:	4b04      	ldr	r3, [pc, #16]	; (800d864 <OnProcessTimer+0x1c>)
 800d852:	2201      	movs	r2, #1
 800d854:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800d856:	4b04      	ldr	r3, [pc, #16]	; (800d868 <OnProcessTimer+0x20>)
 800d858:	695b      	ldr	r3, [r3, #20]
 800d85a:	4798      	blx	r3
}
 800d85c:	bf00      	nop
 800d85e:	3708      	adds	r7, #8
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	2000061c 	.word	0x2000061c
 800d868:	200000e8 	.word	0x200000e8

0800d86c <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d86c:	b590      	push	{r4, r7, lr}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d872:	f00e feb7 	bl	801c5e4 <UTIL_TIMER_GetCurrentTime>
 800d876:	4603      	mov	r3, r0
 800d878:	4a16      	ldr	r2, [pc, #88]	; (800d8d4 <OnRadioTxDone+0x68>)
 800d87a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d87c:	4c16      	ldr	r4, [pc, #88]	; (800d8d8 <OnRadioTxDone+0x6c>)
 800d87e:	463b      	mov	r3, r7
 800d880:	4618      	mov	r0, r3
 800d882:	f00e f82d 	bl	801b8e0 <SysTimeGet>
 800d886:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800d88a:	463a      	mov	r2, r7
 800d88c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d890:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d894:	4a11      	ldr	r2, [pc, #68]	; (800d8dc <OnRadioTxDone+0x70>)
 800d896:	7813      	ldrb	r3, [r2, #0]
 800d898:	f043 0320 	orr.w	r3, r3, #32
 800d89c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d89e:	4b0e      	ldr	r3, [pc, #56]	; (800d8d8 <OnRadioTxDone+0x6c>)
 800d8a0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00a      	beq.n	800d8be <OnRadioTxDone+0x52>
 800d8a8:	4b0b      	ldr	r3, [pc, #44]	; (800d8d8 <OnRadioTxDone+0x6c>)
 800d8aa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8ae:	691b      	ldr	r3, [r3, #16]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d004      	beq.n	800d8be <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d8b4:	4b08      	ldr	r3, [pc, #32]	; (800d8d8 <OnRadioTxDone+0x6c>)
 800d8b6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8ba:	691b      	ldr	r3, [r3, #16]
 800d8bc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d8be:	4b08      	ldr	r3, [pc, #32]	; (800d8e0 <OnRadioTxDone+0x74>)
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	2002      	movs	r0, #2
 800d8c6:	f00e ff7d 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800d8ca:	bf00      	nop
 800d8cc:	370c      	adds	r7, #12
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd90      	pop	{r4, r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	2000173c 	.word	0x2000173c
 800d8d8:	20000670 	.word	0x20000670
 800d8dc:	20001738 	.word	0x20001738
 800d8e0:	0801d56c 	.word	0x0801d56c

0800d8e4 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	4608      	mov	r0, r1
 800d8ee:	4611      	mov	r1, r2
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	817b      	strh	r3, [r7, #10]
 800d8f6:	460b      	mov	r3, r1
 800d8f8:	813b      	strh	r3, [r7, #8]
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d8fe:	f00e fe71 	bl	801c5e4 <UTIL_TIMER_GetCurrentTime>
 800d902:	4603      	mov	r3, r0
 800d904:	4a18      	ldr	r2, [pc, #96]	; (800d968 <OnRadioRxDone+0x84>)
 800d906:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d908:	4a17      	ldr	r2, [pc, #92]	; (800d968 <OnRadioRxDone+0x84>)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d90e:	4a16      	ldr	r2, [pc, #88]	; (800d968 <OnRadioRxDone+0x84>)
 800d910:	897b      	ldrh	r3, [r7, #10]
 800d912:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d914:	4a14      	ldr	r2, [pc, #80]	; (800d968 <OnRadioRxDone+0x84>)
 800d916:	893b      	ldrh	r3, [r7, #8]
 800d918:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d91a:	4a13      	ldr	r2, [pc, #76]	; (800d968 <OnRadioRxDone+0x84>)
 800d91c:	79fb      	ldrb	r3, [r7, #7]
 800d91e:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d920:	4a12      	ldr	r2, [pc, #72]	; (800d96c <OnRadioRxDone+0x88>)
 800d922:	7813      	ldrb	r3, [r2, #0]
 800d924:	f043 0310 	orr.w	r3, r3, #16
 800d928:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800d92a:	4a10      	ldr	r2, [pc, #64]	; (800d96c <OnRadioRxDone+0x88>)
 800d92c:	7813      	ldrb	r3, [r2, #0]
 800d92e:	f043 0301 	orr.w	r3, r3, #1
 800d932:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d934:	4b0e      	ldr	r3, [pc, #56]	; (800d970 <OnRadioRxDone+0x8c>)
 800d936:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d00a      	beq.n	800d954 <OnRadioRxDone+0x70>
 800d93e:	4b0c      	ldr	r3, [pc, #48]	; (800d970 <OnRadioRxDone+0x8c>)
 800d940:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d944:	691b      	ldr	r3, [r3, #16]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d004      	beq.n	800d954 <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d94a:	4b09      	ldr	r3, [pc, #36]	; (800d970 <OnRadioRxDone+0x8c>)
 800d94c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d950:	691b      	ldr	r3, [r3, #16]
 800d952:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d954:	4b07      	ldr	r3, [pc, #28]	; (800d974 <OnRadioRxDone+0x90>)
 800d956:	2201      	movs	r2, #1
 800d958:	2100      	movs	r1, #0
 800d95a:	2002      	movs	r0, #2
 800d95c:	f00e ff32 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800d960:	bf00      	nop
 800d962:	3710      	adds	r7, #16
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	20001740 	.word	0x20001740
 800d96c:	20001738 	.word	0x20001738
 800d970:	20000670 	.word	0x20000670
 800d974:	0801d57c 	.word	0x0801d57c

0800d978 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d97c:	4a0e      	ldr	r2, [pc, #56]	; (800d9b8 <OnRadioTxTimeout+0x40>)
 800d97e:	7813      	ldrb	r3, [r2, #0]
 800d980:	f043 0308 	orr.w	r3, r3, #8
 800d984:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d986:	4b0d      	ldr	r3, [pc, #52]	; (800d9bc <OnRadioTxTimeout+0x44>)
 800d988:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00a      	beq.n	800d9a6 <OnRadioTxTimeout+0x2e>
 800d990:	4b0a      	ldr	r3, [pc, #40]	; (800d9bc <OnRadioTxTimeout+0x44>)
 800d992:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d996:	691b      	ldr	r3, [r3, #16]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d004      	beq.n	800d9a6 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d99c:	4b07      	ldr	r3, [pc, #28]	; (800d9bc <OnRadioTxTimeout+0x44>)
 800d99e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d9a2:	691b      	ldr	r3, [r3, #16]
 800d9a4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d9a6:	4b06      	ldr	r3, [pc, #24]	; (800d9c0 <OnRadioTxTimeout+0x48>)
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	2100      	movs	r1, #0
 800d9ac:	2002      	movs	r0, #2
 800d9ae:	f00e ff09 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800d9b2:	bf00      	nop
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	20001738 	.word	0x20001738
 800d9bc:	20000670 	.word	0x20000670
 800d9c0:	0801d58c 	.word	0x0801d58c

0800d9c4 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d9c8:	4a0b      	ldr	r2, [pc, #44]	; (800d9f8 <OnRadioRxError+0x34>)
 800d9ca:	7813      	ldrb	r3, [r2, #0]
 800d9cc:	f043 0304 	orr.w	r3, r3, #4
 800d9d0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d9d2:	4b0a      	ldr	r3, [pc, #40]	; (800d9fc <OnRadioRxError+0x38>)
 800d9d4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00a      	beq.n	800d9f2 <OnRadioRxError+0x2e>
 800d9dc:	4b07      	ldr	r3, [pc, #28]	; (800d9fc <OnRadioRxError+0x38>)
 800d9de:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d9e2:	691b      	ldr	r3, [r3, #16]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d004      	beq.n	800d9f2 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d9e8:	4b04      	ldr	r3, [pc, #16]	; (800d9fc <OnRadioRxError+0x38>)
 800d9ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d9ee:	691b      	ldr	r3, [r3, #16]
 800d9f0:	4798      	blx	r3
    }
}
 800d9f2:	bf00      	nop
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	20001738 	.word	0x20001738
 800d9fc:	20000670 	.word	0x20000670

0800da00 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800da00:	b580      	push	{r7, lr}
 800da02:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800da04:	4a0e      	ldr	r2, [pc, #56]	; (800da40 <OnRadioRxTimeout+0x40>)
 800da06:	7813      	ldrb	r3, [r2, #0]
 800da08:	f043 0302 	orr.w	r3, r3, #2
 800da0c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800da0e:	4b0d      	ldr	r3, [pc, #52]	; (800da44 <OnRadioRxTimeout+0x44>)
 800da10:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00a      	beq.n	800da2e <OnRadioRxTimeout+0x2e>
 800da18:	4b0a      	ldr	r3, [pc, #40]	; (800da44 <OnRadioRxTimeout+0x44>)
 800da1a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800da1e:	691b      	ldr	r3, [r3, #16]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d004      	beq.n	800da2e <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800da24:	4b07      	ldr	r3, [pc, #28]	; (800da44 <OnRadioRxTimeout+0x44>)
 800da26:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800da2a:	691b      	ldr	r3, [r3, #16]
 800da2c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800da2e:	4b06      	ldr	r3, [pc, #24]	; (800da48 <OnRadioRxTimeout+0x48>)
 800da30:	2201      	movs	r2, #1
 800da32:	2100      	movs	r1, #0
 800da34:	2002      	movs	r0, #2
 800da36:	f00e fec5 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800da3a:	bf00      	nop
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	20001738 	.word	0x20001738
 800da44:	20000670 	.word	0x20000670
 800da48:	0801d59c 	.word	0x0801d59c

0800da4c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800da4c:	b480      	push	{r7}
 800da4e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800da50:	4b08      	ldr	r3, [pc, #32]	; (800da74 <UpdateRxSlotIdleState+0x28>)
 800da52:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800da56:	2b02      	cmp	r3, #2
 800da58:	d004      	beq.n	800da64 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800da5a:	4b07      	ldr	r3, [pc, #28]	; (800da78 <UpdateRxSlotIdleState+0x2c>)
 800da5c:	2206      	movs	r2, #6
 800da5e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800da62:	e003      	b.n	800da6c <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800da64:	4b04      	ldr	r3, [pc, #16]	; (800da78 <UpdateRxSlotIdleState+0x2c>)
 800da66:	2202      	movs	r2, #2
 800da68:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
}
 800da6c:	bf00      	nop
 800da6e:	46bd      	mov	sp, r7
 800da70:	bc80      	pop	{r7}
 800da72:	4770      	bx	lr
 800da74:	20000b90 	.word	0x20000b90
 800da78:	20000670 	.word	0x20000670

0800da7c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b08e      	sub	sp, #56	; 0x38
 800da80:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800da82:	4b3e      	ldr	r3, [pc, #248]	; (800db7c <ProcessRadioTxDone+0x100>)
 800da84:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800da88:	2b02      	cmp	r3, #2
 800da8a:	d002      	beq.n	800da92 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800da8c:	4b3c      	ldr	r3, [pc, #240]	; (800db80 <ProcessRadioTxDone+0x104>)
 800da8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da90:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800da92:	4b3c      	ldr	r3, [pc, #240]	; (800db84 <ProcessRadioTxDone+0x108>)
 800da94:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800da98:	4619      	mov	r1, r3
 800da9a:	483b      	ldr	r0, [pc, #236]	; (800db88 <ProcessRadioTxDone+0x10c>)
 800da9c:	f00e fcf8 	bl	801c490 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800daa0:	4839      	ldr	r0, [pc, #228]	; (800db88 <ProcessRadioTxDone+0x10c>)
 800daa2:	f00e fc17 	bl	801c2d4 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800daa6:	4b37      	ldr	r3, [pc, #220]	; (800db84 <ProcessRadioTxDone+0x108>)
 800daa8:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800daac:	4619      	mov	r1, r3
 800daae:	4837      	ldr	r0, [pc, #220]	; (800db8c <ProcessRadioTxDone+0x110>)
 800dab0:	f00e fcee 	bl	801c490 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800dab4:	4835      	ldr	r0, [pc, #212]	; (800db8c <ProcessRadioTxDone+0x110>)
 800dab6:	f00e fc0d 	bl	801c2d4 <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800daba:	4b32      	ldr	r3, [pc, #200]	; (800db84 <ProcessRadioTxDone+0x108>)
 800dabc:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d01a      	beq.n	800dafa <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800dac4:	2315      	movs	r3, #21
 800dac6:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800daca:	4b2c      	ldr	r3, [pc, #176]	; (800db7c <ProcessRadioTxDone+0x100>)
 800dacc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dad0:	f107 0220 	add.w	r2, r7, #32
 800dad4:	4611      	mov	r1, r2
 800dad6:	4618      	mov	r0, r3
 800dad8:	f006 fd27 	bl	801452a <RegionGetPhyParam>
 800dadc:	4603      	mov	r3, r0
 800dade:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800dae0:	4b28      	ldr	r3, [pc, #160]	; (800db84 <ProcessRadioTxDone+0x108>)
 800dae2:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	4413      	add	r3, r2
 800daea:	4619      	mov	r1, r3
 800daec:	4828      	ldr	r0, [pc, #160]	; (800db90 <ProcessRadioTxDone+0x114>)
 800daee:	f00e fccf 	bl	801c490 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800daf2:	4827      	ldr	r0, [pc, #156]	; (800db90 <ProcessRadioTxDone+0x114>)
 800daf4:	f00e fbee 	bl	801c2d4 <UTIL_TIMER_Start>
 800daf8:	e003      	b.n	800db02 <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dafa:	4b22      	ldr	r3, [pc, #136]	; (800db84 <ProcessRadioTxDone+0x108>)
 800dafc:	2200      	movs	r2, #0
 800dafe:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800db02:	4b24      	ldr	r3, [pc, #144]	; (800db94 <ProcessRadioTxDone+0x118>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a1d      	ldr	r2, [pc, #116]	; (800db7c <ProcessRadioTxDone+0x100>)
 800db08:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800db0a:	4b1e      	ldr	r3, [pc, #120]	; (800db84 <ProcessRadioTxDone+0x108>)
 800db0c:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800db10:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800db12:	4b20      	ldr	r3, [pc, #128]	; (800db94 <ProcessRadioTxDone+0x118>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800db18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db1c:	4618      	mov	r0, r3
 800db1e:	f00d ff17 	bl	801b950 <SysTimeGetMcuTime>
 800db22:	4638      	mov	r0, r7
 800db24:	4b15      	ldr	r3, [pc, #84]	; (800db7c <ProcessRadioTxDone+0x100>)
 800db26:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800db2a:	9200      	str	r2, [sp, #0]
 800db2c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800db30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800db34:	ca06      	ldmia	r2, {r1, r2}
 800db36:	f00d fe6c 	bl	801b812 <SysTimeSub>
 800db3a:	f107 0314 	add.w	r3, r7, #20
 800db3e:	463a      	mov	r2, r7
 800db40:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db44:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800db48:	4b0e      	ldr	r3, [pc, #56]	; (800db84 <ProcessRadioTxDone+0x108>)
 800db4a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800db4e:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800db50:	2301      	movs	r3, #1
 800db52:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800db54:	4b09      	ldr	r3, [pc, #36]	; (800db7c <ProcessRadioTxDone+0x100>)
 800db56:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d101      	bne.n	800db62 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800db5e:	2300      	movs	r3, #0
 800db60:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800db62:	4b06      	ldr	r3, [pc, #24]	; (800db7c <ProcessRadioTxDone+0x100>)
 800db64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800db68:	f107 0208 	add.w	r2, r7, #8
 800db6c:	4611      	mov	r1, r2
 800db6e:	4618      	mov	r0, r3
 800db70:	f006 fcfc 	bl	801456c <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800db74:	bf00      	nop
 800db76:	3730      	adds	r7, #48	; 0x30
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	20000b90 	.word	0x20000b90
 800db80:	0801dc4c 	.word	0x0801dc4c
 800db84:	20000670 	.word	0x20000670
 800db88:	200009f0 	.word	0x200009f0
 800db8c:	20000a08 	.word	0x20000a08
 800db90:	20000a74 	.word	0x20000a74
 800db94:	2000173c 	.word	0x2000173c

0800db98 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800db9c:	4b10      	ldr	r3, [pc, #64]	; (800dbe0 <PrepareRxDoneAbort+0x48>)
 800db9e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dba6:	4a0e      	ldr	r2, [pc, #56]	; (800dbe0 <PrepareRxDoneAbort+0x48>)
 800dba8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800dbac:	4b0c      	ldr	r3, [pc, #48]	; (800dbe0 <PrepareRxDoneAbort+0x48>)
 800dbae:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d002      	beq.n	800dbbc <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800dbb6:	2000      	movs	r0, #0
 800dbb8:	f001 f99c 	bl	800eef4 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800dbbc:	4a08      	ldr	r2, [pc, #32]	; (800dbe0 <PrepareRxDoneAbort+0x48>)
 800dbbe:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800dbc2:	f043 0302 	orr.w	r3, r3, #2
 800dbc6:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800dbca:	4a05      	ldr	r2, [pc, #20]	; (800dbe0 <PrepareRxDoneAbort+0x48>)
 800dbcc:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800dbd0:	f043 0320 	orr.w	r3, r3, #32
 800dbd4:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495

    UpdateRxSlotIdleState( );
 800dbd8:	f7ff ff38 	bl	800da4c <UpdateRxSlotIdleState>
}
 800dbdc:	bf00      	nop
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	20000670 	.word	0x20000670

0800dbe4 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800dbe4:	b590      	push	{r4, r7, lr}
 800dbe6:	b0a7      	sub	sp, #156	; 0x9c
 800dbe8:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800dbea:	2312      	movs	r3, #18
 800dbec:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800dbf0:	4bbd      	ldr	r3, [pc, #756]	; (800dee8 <ProcessRadioRxDone+0x304>)
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint16_t size = RxDoneParams.Size;
 800dbf8:	4bbb      	ldr	r3, [pc, #748]	; (800dee8 <ProcessRadioRxDone+0x304>)
 800dbfa:	891b      	ldrh	r3, [r3, #8]
 800dbfc:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800dc00:	4bb9      	ldr	r3, [pc, #740]	; (800dee8 <ProcessRadioRxDone+0x304>)
 800dc02:	895b      	ldrh	r3, [r3, #10]
 800dc04:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    int8_t snr = RxDoneParams.Snr;
 800dc08:	4bb7      	ldr	r3, [pc, #732]	; (800dee8 <ProcessRadioRxDone+0x304>)
 800dc0a:	7b1b      	ldrb	r3, [r3, #12]
 800dc0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    uint8_t pktHeaderLen = 0;
 800dc10:	2300      	movs	r3, #0
 800dc12:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

    uint32_t downLinkCounter = 0;
 800dc16:	2300      	movs	r3, #0
 800dc18:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800dc1a:	4bb4      	ldr	r3, [pc, #720]	; (800deec <ProcessRadioRxDone+0x308>)
 800dc1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800dc20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t multicast = 0;
 800dc24:	2300      	movs	r3, #0
 800dc26:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800dc30:	4aaf      	ldr	r2, [pc, #700]	; (800def0 <ProcessRadioRxDone+0x30c>)
 800dc32:	7813      	ldrb	r3, [r2, #0]
 800dc34:	f36f 0300 	bfc	r3, #0, #1
 800dc38:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800dc3a:	4bae      	ldr	r3, [pc, #696]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800dc42:	4aac      	ldr	r2, [pc, #688]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dc44:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800dc48:	f8a2 3490 	strh.w	r3, [r2, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 800dc4c:	4aa9      	ldr	r2, [pc, #676]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dc4e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dc52:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800dc56:	4ba7      	ldr	r3, [pc, #668]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dc58:	f893 2494 	ldrb.w	r2, [r3, #1172]	; 0x494
 800dc5c:	4ba5      	ldr	r3, [pc, #660]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dc5e:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 800dc62:	4ba4      	ldr	r3, [pc, #656]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800dc6a:	4ba2      	ldr	r3, [pc, #648]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800dc72:	4ba0      	ldr	r3, [pc, #640]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800dc7a:	4b9e      	ldr	r3, [pc, #632]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800dc82:	4b9c      	ldr	r3, [pc, #624]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dc84:	2200      	movs	r2, #0
 800dc86:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 800dc8a:	4b9a      	ldr	r3, [pc, #616]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800dc92:	4b98      	ldr	r3, [pc, #608]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800dc9a:	4b96      	ldr	r3, [pc, #600]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800dca2:	4b94      	ldr	r3, [pc, #592]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dca4:	2200      	movs	r2, #0
 800dca6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800dcaa:	4b92      	ldr	r3, [pc, #584]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dcac:	2200      	movs	r2, #0
 800dcae:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800dcb2:	4b90      	ldr	r3, [pc, #576]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800dcba:	4b8e      	ldr	r3, [pc, #568]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800dcc2:	4b8d      	ldr	r3, [pc, #564]	; (800def8 <ProcessRadioRxDone+0x314>)
 800dcc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc6:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800dcc8:	4b8a      	ldr	r3, [pc, #552]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dcca:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d102      	bne.n	800dcd8 <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800dcd2:	488a      	ldr	r0, [pc, #552]	; (800defc <ProcessRadioRxDone+0x318>)
 800dcd4:	f00e fb6c 	bl	801c3b0 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800dcd8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800dcdc:	4619      	mov	r1, r3
 800dcde:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800dce2:	f004 fccf 	bl	8012684 <LoRaMacClassBRxBeacon>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d00b      	beq.n	800dd04 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800dcec:	4a81      	ldr	r2, [pc, #516]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dcee:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800dcf2:	f8a2 3482 	strh.w	r3, [r2, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800dcf6:	4a7f      	ldr	r2, [pc, #508]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dcf8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dcfc:	f882 3484 	strb.w	r3, [r2, #1156]	; 0x484
        return;
 800dd00:	f000 bc22 	b.w	800e548 <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dd04:	4b79      	ldr	r3, [pc, #484]	; (800deec <ProcessRadioRxDone+0x308>)
 800dd06:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d11e      	bne.n	800dd4c <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800dd0e:	f004 fccc 	bl	80126aa <LoRaMacClassBIsPingExpected>
 800dd12:	4603      	mov	r3, r0
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d00a      	beq.n	800dd2e <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dd18:	2000      	movs	r0, #0
 800dd1a:	f004 fc7d 	bl	8012618 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800dd1e:	2000      	movs	r0, #0
 800dd20:	f004 fc9e 	bl	8012660 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800dd24:	4b73      	ldr	r3, [pc, #460]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dd26:	2204      	movs	r2, #4
 800dd28:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800dd2c:	e00e      	b.n	800dd4c <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dd2e:	f004 fcc3 	bl	80126b8 <LoRaMacClassBIsMulticastExpected>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d009      	beq.n	800dd4c <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dd38:	2000      	movs	r0, #0
 800dd3a:	f004 fc77 	bl	801262c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800dd3e:	2000      	movs	r0, #0
 800dd40:	f004 fc97 	bl	8012672 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800dd44:	4b6b      	ldr	r3, [pc, #428]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dd46:	2205      	movs	r2, #5
 800dd48:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800dd4c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800dd50:	1c5a      	adds	r2, r3, #1
 800dd52:	f887 207e 	strb.w	r2, [r7, #126]	; 0x7e
 800dd56:	461a      	mov	r2, r3
 800dd58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd5c:	4413      	add	r3, r2
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

    switch( macHdr.Bits.MType )
 800dd64:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800dd68:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	2b06      	cmp	r3, #6
 800dd72:	f200 83bd 	bhi.w	800e4f0 <ProcessRadioRxDone+0x90c>
 800dd76:	a201      	add	r2, pc, #4	; (adr r2, 800dd7c <ProcessRadioRxDone+0x198>)
 800dd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd7c:	0800dd99 	.word	0x0800dd99
 800dd80:	0800e4f1 	.word	0x0800e4f1
 800dd84:	0800df2d 	.word	0x0800df2d
 800dd88:	0800e4f1 	.word	0x0800e4f1
 800dd8c:	0800df25 	.word	0x0800df25
 800dd90:	0800e4f1 	.word	0x0800e4f1
 800dd94:	0800e483 	.word	0x0800e483
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800dd98:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800dd9c:	2b10      	cmp	r3, #16
 800dd9e:	d806      	bhi.n	800ddae <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dda0:	4b54      	ldr	r3, [pc, #336]	; (800def4 <ProcessRadioRxDone+0x310>)
 800dda2:	2201      	movs	r2, #1
 800dda4:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800dda8:	f7ff fef6 	bl	800db98 <PrepareRxDoneAbort>
                return;
 800ddac:	e3cc      	b.n	800e548 <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800ddae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ddb2:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800ddb4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ddbc:	4b4b      	ldr	r3, [pc, #300]	; (800deec <ProcessRadioRxDone+0x308>)
 800ddbe:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d006      	beq.n	800ddd4 <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ddc6:	4b4b      	ldr	r3, [pc, #300]	; (800def4 <ProcessRadioRxDone+0x310>)
 800ddc8:	2201      	movs	r2, #1
 800ddca:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800ddce:	f7ff fee3 	bl	800db98 <PrepareRxDoneAbort>
                return;
 800ddd2:	e3b9      	b.n	800e548 <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800ddd4:	f7fe f878 	bl	800bec8 <SecureElementGetJoinEui>
 800ddd8:	4601      	mov	r1, r0
 800ddda:	f107 030c 	add.w	r3, r7, #12
 800ddde:	461a      	mov	r2, r3
 800dde0:	20ff      	movs	r0, #255	; 0xff
 800dde2:	f005 fe21 	bl	8013a28 <LoRaMacCryptoHandleJoinAccept>
 800dde6:	4603      	mov	r3, r0
 800dde8:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800ddec:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	f040 8085 	bne.w	800df00 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ddf6:	7d7b      	ldrb	r3, [r7, #21]
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	4b3c      	ldr	r3, [pc, #240]	; (800deec <ProcessRadioRxDone+0x308>)
 800ddfc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800de00:	4b3a      	ldr	r3, [pc, #232]	; (800deec <ProcessRadioRxDone+0x308>)
 800de02:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800de06:	7dbb      	ldrb	r3, [r7, #22]
 800de08:	021b      	lsls	r3, r3, #8
 800de0a:	4313      	orrs	r3, r2
 800de0c:	4a37      	ldr	r2, [pc, #220]	; (800deec <ProcessRadioRxDone+0x308>)
 800de0e:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800de12:	4b36      	ldr	r3, [pc, #216]	; (800deec <ProcessRadioRxDone+0x308>)
 800de14:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800de18:	7dfb      	ldrb	r3, [r7, #23]
 800de1a:	041b      	lsls	r3, r3, #16
 800de1c:	4313      	orrs	r3, r2
 800de1e:	4a33      	ldr	r2, [pc, #204]	; (800deec <ProcessRadioRxDone+0x308>)
 800de20:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	4a31      	ldr	r2, [pc, #196]	; (800deec <ProcessRadioRxDone+0x308>)
 800de28:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800de2c:	7f3b      	ldrb	r3, [r7, #28]
 800de2e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800de32:	b2db      	uxtb	r3, r3
 800de34:	461a      	mov	r2, r3
 800de36:	4b2d      	ldr	r3, [pc, #180]	; (800deec <ProcessRadioRxDone+0x308>)
 800de38:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800de3c:	7f3b      	ldrb	r3, [r7, #28]
 800de3e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800de42:	b2db      	uxtb	r3, r3
 800de44:	461a      	mov	r2, r3
 800de46:	4b29      	ldr	r3, [pc, #164]	; (800deec <ProcessRadioRxDone+0x308>)
 800de48:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800de4c:	7f3b      	ldrb	r3, [r7, #28]
 800de4e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800de52:	b2db      	uxtb	r3, r3
 800de54:	461a      	mov	r2, r3
 800de56:	4b25      	ldr	r3, [pc, #148]	; (800deec <ProcessRadioRxDone+0x308>)
 800de58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800de5c:	7f7b      	ldrb	r3, [r7, #29]
 800de5e:	461a      	mov	r2, r3
 800de60:	4b22      	ldr	r3, [pc, #136]	; (800deec <ProcessRadioRxDone+0x308>)
 800de62:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800de64:	4b21      	ldr	r3, [pc, #132]	; (800deec <ProcessRadioRxDone+0x308>)
 800de66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d102      	bne.n	800de72 <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800de6c:	4b1f      	ldr	r3, [pc, #124]	; (800deec <ProcessRadioRxDone+0x308>)
 800de6e:	2201      	movs	r2, #1
 800de70:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800de72:	4b1e      	ldr	r3, [pc, #120]	; (800deec <ProcessRadioRxDone+0x308>)
 800de74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800de7a:	fb02 f303 	mul.w	r3, r2, r3
 800de7e:	4a1b      	ldr	r2, [pc, #108]	; (800deec <ProcessRadioRxDone+0x308>)
 800de80:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800de82:	4b1a      	ldr	r3, [pc, #104]	; (800deec <ProcessRadioRxDone+0x308>)
 800de84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de86:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800de8a:	4a18      	ldr	r2, [pc, #96]	; (800deec <ProcessRadioRxDone+0x308>)
 800de8c:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800de8e:	4b17      	ldr	r3, [pc, #92]	; (800deec <ProcessRadioRxDone+0x308>)
 800de90:	2200      	movs	r2, #0
 800de92:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800de96:	f107 030c 	add.w	r3, r7, #12
 800de9a:	3312      	adds	r3, #18
 800de9c:	677b      	str	r3, [r7, #116]	; 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800de9e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	3b11      	subs	r3, #17
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800deac:	4b11      	ldr	r3, [pc, #68]	; (800def4 <ProcessRadioRxDone+0x310>)
 800deae:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800deb2:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800deb6:	4b0d      	ldr	r3, [pc, #52]	; (800deec <ProcessRadioRxDone+0x308>)
 800deb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800debc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800dec0:	4611      	mov	r1, r2
 800dec2:	4618      	mov	r0, r3
 800dec4:	f006 fba0 	bl	8014608 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800dec8:	4b08      	ldr	r3, [pc, #32]	; (800deec <ProcessRadioRxDone+0x308>)
 800deca:	2202      	movs	r2, #2
 800decc:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ded0:	2001      	movs	r0, #1
 800ded2:	f005 f8d1 	bl	8013078 <LoRaMacConfirmQueueIsCmdActive>
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d01b      	beq.n	800df14 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800dedc:	2101      	movs	r1, #1
 800dede:	2000      	movs	r0, #0
 800dee0:	f005 f83e 	bl	8012f60 <LoRaMacConfirmQueueSetStatus>
 800dee4:	e016      	b.n	800df14 <ProcessRadioRxDone+0x330>
 800dee6:	bf00      	nop
 800dee8:	20001740 	.word	0x20001740
 800deec:	20000b90 	.word	0x20000b90
 800def0:	20001738 	.word	0x20001738
 800def4:	20000670 	.word	0x20000670
 800def8:	0801dc4c 	.word	0x0801dc4c
 800defc:	20000a08 	.word	0x20000a08
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800df00:	2001      	movs	r0, #1
 800df02:	f005 f8b9 	bl	8013078 <LoRaMacConfirmQueueIsCmdActive>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d003      	beq.n	800df14 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800df0c:	2101      	movs	r1, #1
 800df0e:	2007      	movs	r0, #7
 800df10:	f005 f826 	bl	8012f60 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800df14:	4ab9      	ldr	r2, [pc, #740]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800df16:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800df1a:	f043 0308 	orr.w	r3, r3, #8
 800df1e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800df22:	e2ec      	b.n	800e4fe <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800df24:	4bb5      	ldr	r3, [pc, #724]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800df26:	2201      	movs	r2, #1
 800df28:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800df2c:	4bb4      	ldr	r3, [pc, #720]	; (800e200 <ProcessRadioRxDone+0x61c>)
 800df2e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800df32:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800df36:	4bb1      	ldr	r3, [pc, #708]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800df38:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800df3c:	b25b      	sxtb	r3, r3
 800df3e:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800df42:	230d      	movs	r3, #13
 800df44:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800df48:	4bad      	ldr	r3, [pc, #692]	; (800e200 <ProcessRadioRxDone+0x61c>)
 800df4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d002      	beq.n	800df58 <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800df52:	230e      	movs	r3, #14
 800df54:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800df58:	4ba9      	ldr	r3, [pc, #676]	; (800e200 <ProcessRadioRxDone+0x61c>)
 800df5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800df5e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800df62:	4611      	mov	r1, r2
 800df64:	4618      	mov	r0, r3
 800df66:	f006 fae0 	bl	801452a <RegionGetPhyParam>
 800df6a:	4603      	mov	r3, r0
 800df6c:	667b      	str	r3, [r7, #100]	; 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800df6e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800df72:	3b0d      	subs	r3, #13
 800df74:	b29b      	uxth	r3, r3
 800df76:	b21b      	sxth	r3, r3
 800df78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800df7c:	b21a      	sxth	r2, r3
 800df7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df80:	b21b      	sxth	r3, r3
 800df82:	429a      	cmp	r2, r3
 800df84:	dc03      	bgt.n	800df8e <ProcessRadioRxDone+0x3aa>
 800df86:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800df8a:	2b0b      	cmp	r3, #11
 800df8c:	d806      	bhi.n	800df9c <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800df8e:	4b9b      	ldr	r3, [pc, #620]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800df90:	2201      	movs	r2, #1
 800df92:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800df96:	f7ff fdff 	bl	800db98 <PrepareRxDoneAbort>
                return;
 800df9a:	e2d5      	b.n	800e548 <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800df9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dfa0:	637b      	str	r3, [r7, #52]	; 0x34
            macMsgData.BufSize = size;
 800dfa2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800dfac:	4b95      	ldr	r3, [pc, #596]	; (800e204 <ProcessRadioRxDone+0x620>)
 800dfae:	65bb      	str	r3, [r7, #88]	; 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800dfb0:	23ff      	movs	r3, #255	; 0xff
 800dfb2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800dfb6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f006 f833 	bl	8014026 <LoRaMacParserData>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d006      	beq.n	800dfd4 <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dfc6:	4b8d      	ldr	r3, [pc, #564]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800dfce:	f7ff fde3 	bl	800db98 <PrepareRxDoneAbort>
                return;
 800dfd2:	e2b9      	b.n	800e548 <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dfd4:	4b8a      	ldr	r3, [pc, #552]	; (800e200 <ProcessRadioRxDone+0x61c>)
 800dfd6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d132      	bne.n	800e044 <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800dfde:	f004 fb64 	bl	80126aa <LoRaMacClassBIsPingExpected>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d014      	beq.n	800e012 <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dfe8:	2000      	movs	r0, #0
 800dfea:	f004 fb15 	bl	8012618 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800dfee:	2000      	movs	r0, #0
 800dff0:	f004 fb36 	bl	8012660 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800dff4:	4b81      	ldr	r3, [pc, #516]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800dff6:	2204      	movs	r2, #4
 800dff8:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800dffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dffe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e002:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e006:	b2db      	uxtb	r3, r3
 800e008:	4619      	mov	r1, r3
 800e00a:	4610      	mov	r0, r2
 800e00c:	f004 fbd6 	bl	80127bc <LoRaMacClassBSetFPendingBit>
 800e010:	e018      	b.n	800e044 <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e012:	f004 fb51 	bl	80126b8 <LoRaMacClassBIsMulticastExpected>
 800e016:	4603      	mov	r3, r0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d013      	beq.n	800e044 <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e01c:	2000      	movs	r0, #0
 800e01e:	f004 fb05 	bl	801262c <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e022:	2000      	movs	r0, #0
 800e024:	f004 fb25 	bl	8012672 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e028:	4b74      	ldr	r3, [pc, #464]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800e02a:	2205      	movs	r2, #5
 800e02c:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e032:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e036:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	4619      	mov	r1, r3
 800e03e:	4610      	mov	r0, r2
 800e040:	f004 fbbc 	bl	80127bc <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e046:	4a6d      	ldr	r2, [pc, #436]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800e048:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e04c:	1dba      	adds	r2, r7, #6
 800e04e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e052:	4611      	mov	r1, r2
 800e054:	4618      	mov	r0, r3
 800e056:	f002 fd13 	bl	8010a80 <DetermineFrameType>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d006      	beq.n	800e06e <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e060:	4b66      	ldr	r3, [pc, #408]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800e062:	2201      	movs	r2, #1
 800e064:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800e068:	f7ff fd96 	bl	800db98 <PrepareRxDoneAbort>
                return;
 800e06c:	e26c      	b.n	800e548 <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800e06e:	2300      	movs	r3, #0
 800e070:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
            downLinkCounter = 0;
 800e074:	2300      	movs	r3, #0
 800e076:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e078:	2300      	movs	r3, #0
 800e07a:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800e07e:	e049      	b.n	800e114 <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e080:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e084:	4a5e      	ldr	r2, [pc, #376]	; (800e200 <ProcessRadioRxDone+0x61c>)
 800e086:	212c      	movs	r1, #44	; 0x2c
 800e088:	fb01 f303 	mul.w	r3, r1, r3
 800e08c:	4413      	add	r3, r2
 800e08e:	33dc      	adds	r3, #220	; 0xdc
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e094:	429a      	cmp	r2, r3
 800e096:	d138      	bne.n	800e10a <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e098:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e09c:	4a58      	ldr	r2, [pc, #352]	; (800e200 <ProcessRadioRxDone+0x61c>)
 800e09e:	212c      	movs	r1, #44	; 0x2c
 800e0a0:	fb01 f303 	mul.w	r3, r1, r3
 800e0a4:	4413      	add	r3, r2
 800e0a6:	33da      	adds	r3, #218	; 0xda
 800e0a8:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d02d      	beq.n	800e10a <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800e0b4:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e0b8:	4a51      	ldr	r2, [pc, #324]	; (800e200 <ProcessRadioRxDone+0x61c>)
 800e0ba:	212c      	movs	r1, #44	; 0x2c
 800e0bc:	fb01 f303 	mul.w	r3, r1, r3
 800e0c0:	4413      	add	r3, r2
 800e0c2:	33db      	adds	r3, #219	; 0xdb
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800e0ca:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e0ce:	4a4c      	ldr	r2, [pc, #304]	; (800e200 <ProcessRadioRxDone+0x61c>)
 800e0d0:	212c      	movs	r1, #44	; 0x2c
 800e0d2:	fb01 f303 	mul.w	r3, r1, r3
 800e0d6:	4413      	add	r3, r2
 800e0d8:	33f8      	adds	r3, #248	; 0xf8
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e0e0:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e0e4:	4a46      	ldr	r2, [pc, #280]	; (800e200 <ProcessRadioRxDone+0x61c>)
 800e0e6:	212c      	movs	r1, #44	; 0x2c
 800e0e8:	fb01 f303 	mul.w	r3, r1, r3
 800e0ec:	4413      	add	r3, r2
 800e0ee:	33dc      	adds	r3, #220	; 0xdc
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e0f6:	4b42      	ldr	r3, [pc, #264]	; (800e200 <ProcessRadioRxDone+0x61c>)
 800e0f8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e0fc:	2b02      	cmp	r3, #2
 800e0fe:	d10e      	bne.n	800e11e <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e100:	4b3e      	ldr	r3, [pc, #248]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800e102:	2203      	movs	r2, #3
 800e104:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    }
                    break;
 800e108:	e009      	b.n	800e11e <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e10a:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e10e:	3301      	adds	r3, #1
 800e110:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800e114:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d0b1      	beq.n	800e080 <ProcessRadioRxDone+0x49c>
 800e11c:	e000      	b.n	800e120 <ProcessRadioRxDone+0x53c>
                    break;
 800e11e:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e120:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e124:	2b01      	cmp	r3, #1
 800e126:	d117      	bne.n	800e158 <ProcessRadioRxDone+0x574>
 800e128:	79bb      	ldrb	r3, [r7, #6]
 800e12a:	2b03      	cmp	r3, #3
 800e12c:	d10d      	bne.n	800e14a <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e12e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e132:	f003 0320 	and.w	r3, r3, #32
 800e136:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d106      	bne.n	800e14a <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800e13c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e144:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e146:	2b00      	cmp	r3, #0
 800e148:	d006      	beq.n	800e158 <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e14a:	4b2c      	ldr	r3, [pc, #176]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800e14c:	2201      	movs	r2, #1
 800e14e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800e152:	f7ff fd21 	bl	800db98 <PrepareRxDoneAbort>
                return;
 800e156:	e1f7      	b.n	800e548 <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800e158:	79b9      	ldrb	r1, [r7, #6]
 800e15a:	4c29      	ldr	r4, [pc, #164]	; (800e200 <ProcessRadioRxDone+0x61c>)
 800e15c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e160:	f897 008a 	ldrb.w	r0, [r7, #138]	; 0x8a
 800e164:	f107 0308 	add.w	r3, r7, #8
 800e168:	9301      	str	r3, [sp, #4]
 800e16a:	1dfb      	adds	r3, r7, #7
 800e16c:	9300      	str	r3, [sp, #0]
 800e16e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800e172:	f000 fee7 	bl	800ef44 <GetFCntDown>
 800e176:	4603      	mov	r3, r0
 800e178:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e17c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e180:	2b00      	cmp	r3, #0
 800e182:	d017      	beq.n	800e1b4 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e184:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e188:	2b07      	cmp	r3, #7
 800e18a:	d104      	bne.n	800e196 <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e18c:	4b1b      	ldr	r3, [pc, #108]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800e18e:	2208      	movs	r2, #8
 800e190:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800e194:	e003      	b.n	800e19e <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e196:	4b19      	ldr	r3, [pc, #100]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800e198:	2201      	movs	r2, #1
 800e19a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	4a16      	ldr	r2, [pc, #88]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800e1a2:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	4a14      	ldr	r2, [pc, #80]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800e1aa:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
                PrepareRxDoneAbort( );
 800e1ae:	f7ff fcf3 	bl	800db98 <PrepareRxDoneAbort>
                return;
 800e1b2:	e1c9      	b.n	800e548 <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e1b4:	79fa      	ldrb	r2, [r7, #7]
 800e1b6:	68b9      	ldr	r1, [r7, #8]
 800e1b8:	f897 008a 	ldrb.w	r0, [r7, #138]	; 0x8a
 800e1bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e1c8:	f005 fd7a 	bl	8013cc0 <LoRaMacCryptoUnsecureMessage>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e1d2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d016      	beq.n	800e208 <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e1da:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e1de:	2b02      	cmp	r3, #2
 800e1e0:	d104      	bne.n	800e1ec <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e1e2:	4b06      	ldr	r3, [pc, #24]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800e1e4:	220a      	movs	r2, #10
 800e1e6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800e1ea:	e003      	b.n	800e1f4 <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e1ec:	4b03      	ldr	r3, [pc, #12]	; (800e1fc <ProcessRadioRxDone+0x618>)
 800e1ee:	220b      	movs	r2, #11
 800e1f0:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                }
                PrepareRxDoneAbort( );
 800e1f4:	f7ff fcd0 	bl	800db98 <PrepareRxDoneAbort>
                return;
 800e1f8:	e1a6      	b.n	800e548 <ProcessRadioRxDone+0x964>
 800e1fa:	bf00      	nop
 800e1fc:	20000670 	.word	0x20000670
 800e200:	20000b90 	.word	0x20000b90
 800e204:	200008a8 	.word	0x200008a8
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e208:	4bb5      	ldr	r3, [pc, #724]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e20a:	2200      	movs	r2, #0
 800e20c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800e210:	4ab3      	ldr	r2, [pc, #716]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e212:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e216:	f882 3426 	strb.w	r3, [r2, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e21a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e21e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e222:	b2db      	uxtb	r3, r3
 800e224:	461a      	mov	r2, r3
 800e226:	4bae      	ldr	r3, [pc, #696]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e228:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800e22c:	4bac      	ldr	r3, [pc, #688]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e22e:	2200      	movs	r2, #0
 800e230:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800e234:	4baa      	ldr	r3, [pc, #680]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e236:	2200      	movs	r2, #0
 800e238:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	4aa8      	ldr	r2, [pc, #672]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e240:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	4aa6      	ldr	r2, [pc, #664]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e248:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e24c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e250:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e254:	b2db      	uxtb	r3, r3
 800e256:	2b00      	cmp	r3, #0
 800e258:	bf14      	ite	ne
 800e25a:	2301      	movne	r3, #1
 800e25c:	2300      	moveq	r3, #0
 800e25e:	b2da      	uxtb	r2, r3
 800e260:	4b9f      	ldr	r3, [pc, #636]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e262:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e266:	4b9e      	ldr	r3, [pc, #632]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e268:	2200      	movs	r2, #0
 800e26a:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e26e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e272:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e276:	b2db      	uxtb	r3, r3
 800e278:	2b00      	cmp	r3, #0
 800e27a:	bf14      	ite	ne
 800e27c:	2301      	movne	r3, #1
 800e27e:	2300      	moveq	r3, #0
 800e280:	b2da      	uxtb	r2, r3
 800e282:	4b97      	ldr	r3, [pc, #604]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e284:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e288:	4b95      	ldr	r3, [pc, #596]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e28a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d004      	beq.n	800e29c <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e292:	4b93      	ldr	r3, [pc, #588]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e294:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d106      	bne.n	800e2aa <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e29c:	4b91      	ldr	r3, [pc, #580]	; (800e4e4 <ProcessRadioRxDone+0x900>)
 800e29e:	2200      	movs	r2, #0
 800e2a0:	629a      	str	r2, [r3, #40]	; 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800e2a2:	4b90      	ldr	r3, [pc, #576]	; (800e4e4 <ProcessRadioRxDone+0x900>)
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e2aa:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d104      	bne.n	800e2bc <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e2b2:	4b8b      	ldr	r3, [pc, #556]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e2b4:	2202      	movs	r2, #2
 800e2b6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800e2ba:	e034      	b.n	800e326 <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e2bc:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800e2c0:	f023 031f 	bic.w	r3, r3, #31
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	2ba0      	cmp	r3, #160	; 0xa0
 800e2c8:	d125      	bne.n	800e316 <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e2ca:	4b86      	ldr	r3, [pc, #536]	; (800e4e4 <ProcessRadioRxDone+0x900>)
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e2d2:	4b84      	ldr	r3, [pc, #528]	; (800e4e4 <ProcessRadioRxDone+0x900>)
 800e2d4:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d102      	bne.n	800e2e2 <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e2dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2de:	4a81      	ldr	r2, [pc, #516]	; (800e4e4 <ProcessRadioRxDone+0x900>)
 800e2e0:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e2e2:	4b7f      	ldr	r3, [pc, #508]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e2ea:	4b7d      	ldr	r3, [pc, #500]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e2ec:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d018      	beq.n	800e326 <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800e2f4:	4b7a      	ldr	r3, [pc, #488]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e2f6:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d013      	beq.n	800e326 <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e2fe:	4b79      	ldr	r3, [pc, #484]	; (800e4e4 <ProcessRadioRxDone+0x900>)
 800e300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e304:	4a76      	ldr	r2, [pc, #472]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e306:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800e30a:	4b77      	ldr	r3, [pc, #476]	; (800e4e8 <ProcessRadioRxDone+0x904>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	4a74      	ldr	r2, [pc, #464]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e310:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
 800e314:	e007      	b.n	800e326 <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e316:	4b73      	ldr	r3, [pc, #460]	; (800e4e4 <ProcessRadioRxDone+0x900>)
 800e318:	2200      	movs	r2, #0
 800e31a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e31e:	4b70      	ldr	r3, [pc, #448]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e320:	2200      	movs	r2, #0
 800e322:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e326:	4b6e      	ldr	r3, [pc, #440]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e328:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e32c:	4a6c      	ldr	r2, [pc, #432]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e32e:	f892 2444 	ldrb.w	r2, [r2, #1092]	; 0x444
 800e332:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 800e336:	4618      	mov	r0, r3
 800e338:	f001 ff88 	bl	801024c <RemoveMacCommands>

            switch( fType )
 800e33c:	79bb      	ldrb	r3, [r7, #6]
 800e33e:	2b03      	cmp	r3, #3
 800e340:	d873      	bhi.n	800e42a <ProcessRadioRxDone+0x846>
 800e342:	a201      	add	r2, pc, #4	; (adr r2, 800e348 <ProcessRadioRxDone+0x764>)
 800e344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e348:	0800e359 	.word	0x0800e359
 800e34c:	0800e3a9 	.word	0x0800e3a9
 800e350:	0800e3df 	.word	0x0800e3df
 800e354:	0800e405 	.word	0x0800e405
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e358:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e35c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e360:	b2db      	uxtb	r3, r3
 800e362:	461c      	mov	r4, r3
 800e364:	4b5e      	ldr	r3, [pc, #376]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e366:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e36a:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800e36e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e372:	f102 0010 	add.w	r0, r2, #16
 800e376:	9300      	str	r3, [sp, #0]
 800e378:	460b      	mov	r3, r1
 800e37a:	4622      	mov	r2, r4
 800e37c:	2100      	movs	r1, #0
 800e37e:	f000 ff45 	bl	800f20c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e382:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e386:	4b56      	ldr	r3, [pc, #344]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e388:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e38c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e38e:	4a54      	ldr	r2, [pc, #336]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e390:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e394:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800e398:	4b51      	ldr	r3, [pc, #324]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e39a:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e39e:	4b50      	ldr	r3, [pc, #320]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e3a0:	2201      	movs	r2, #1
 800e3a2:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800e3a6:	e047      	b.n	800e438 <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e3a8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e3ac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	461c      	mov	r4, r3
 800e3b4:	4b4a      	ldr	r3, [pc, #296]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e3b6:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e3ba:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800e3be:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e3c2:	f102 0010 	add.w	r0, r2, #16
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	4622      	mov	r2, r4
 800e3cc:	2100      	movs	r1, #0
 800e3ce:	f000 ff1d 	bl	800f20c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e3d2:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e3d6:	4b42      	ldr	r3, [pc, #264]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e3d8:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    break;
 800e3dc:	e02c      	b.n	800e438 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e3de:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e3e0:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800e3e4:	4b3e      	ldr	r3, [pc, #248]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e3e6:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e3ea:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800e3ee:	9300      	str	r3, [sp, #0]
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	2100      	movs	r1, #0
 800e3f4:	f000 ff0a 	bl	800f20c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e3f8:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e3fc:	4b38      	ldr	r3, [pc, #224]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e3fe:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    break;
 800e402:	e019      	b.n	800e438 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e404:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e408:	4b35      	ldr	r3, [pc, #212]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e40a:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e40e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e410:	4a33      	ldr	r2, [pc, #204]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e412:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e416:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800e41a:	4b31      	ldr	r3, [pc, #196]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e41c:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e420:	4b2f      	ldr	r3, [pc, #188]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e422:	2201      	movs	r2, #1
 800e424:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800e428:	e006      	b.n	800e438 <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e42a:	4b2d      	ldr	r3, [pc, #180]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e42c:	2201      	movs	r2, #1
 800e42e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 800e432:	f7ff fbb1 	bl	800db98 <PrepareRxDoneAbort>
                    break;
 800e436:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800e438:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800e43c:	2be0      	cmp	r3, #224	; 0xe0
 800e43e:	d118      	bne.n	800e472 <ProcessRadioRxDone+0x88e>
 800e440:	4b28      	ldr	r3, [pc, #160]	; (800e4e4 <ProcessRadioRxDone+0x900>)
 800e442:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800e446:	f083 0301 	eor.w	r3, r3, #1
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d010      	beq.n	800e472 <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e450:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e454:	4b22      	ldr	r3, [pc, #136]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e456:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800e45a:	4b21      	ldr	r3, [pc, #132]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e45c:	2200      	movs	r2, #0
 800e45e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800e462:	4b1f      	ldr	r3, [pc, #124]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e464:	2200      	movs	r2, #0
 800e466:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 800e46a:	4b1d      	ldr	r3, [pc, #116]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e46c:	2200      	movs	r2, #0
 800e46e:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e472:	4a1b      	ldr	r2, [pc, #108]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e474:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e478:	f043 0302 	orr.w	r3, r3, #2
 800e47c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495

            break;
 800e480:	e03d      	b.n	800e4fe <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e482:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800e486:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e48a:	18d1      	adds	r1, r2, r3
 800e48c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800e490:	b29b      	uxth	r3, r3
 800e492:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 800e496:	1ad3      	subs	r3, r2, r3
 800e498:	b29b      	uxth	r3, r3
 800e49a:	461a      	mov	r2, r3
 800e49c:	4813      	ldr	r0, [pc, #76]	; (800e4ec <ProcessRadioRxDone+0x908>)
 800e49e:	f009 fe3e 	bl	801811e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e4a2:	4b0f      	ldr	r3, [pc, #60]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e4a4:	2203      	movs	r2, #3
 800e4a6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e4aa:	4b0d      	ldr	r3, [pc, #52]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e4b2:	4b0b      	ldr	r3, [pc, #44]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e4b4:	4a0d      	ldr	r2, [pc, #52]	; (800e4ec <ProcessRadioRxDone+0x908>)
 800e4b6:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e4ba:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e4be:	b2da      	uxtb	r2, r3
 800e4c0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800e4c4:	1ad3      	subs	r3, r2, r3
 800e4c6:	b2da      	uxtb	r2, r3
 800e4c8:	4b05      	ldr	r3, [pc, #20]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e4ca:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e4ce:	4a04      	ldr	r2, [pc, #16]	; (800e4e0 <ProcessRadioRxDone+0x8fc>)
 800e4d0:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e4d4:	f043 0302 	orr.w	r3, r3, #2
 800e4d8:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800e4dc:	e00f      	b.n	800e4fe <ProcessRadioRxDone+0x91a>
 800e4de:	bf00      	nop
 800e4e0:	20000670 	.word	0x20000670
 800e4e4:	20000b90 	.word	0x20000b90
 800e4e8:	20001740 	.word	0x20001740
 800e4ec:	200008a8 	.word	0x200008a8
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e4f0:	4b17      	ldr	r3, [pc, #92]	; (800e550 <ProcessRadioRxDone+0x96c>)
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 800e4f8:	f7ff fb4e 	bl	800db98 <PrepareRxDoneAbort>
            break;
 800e4fc:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e4fe:	4b14      	ldr	r3, [pc, #80]	; (800e550 <ProcessRadioRxDone+0x96c>)
 800e500:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e504:	2b00      	cmp	r3, #0
 800e506:	d004      	beq.n	800e512 <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e508:	4b11      	ldr	r3, [pc, #68]	; (800e550 <ProcessRadioRxDone+0x96c>)
 800e50a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d10c      	bne.n	800e52c <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800e512:	4b0f      	ldr	r3, [pc, #60]	; (800e550 <ProcessRadioRxDone+0x96c>)
 800e514:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d007      	beq.n	800e52c <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800e51c:	4b0c      	ldr	r3, [pc, #48]	; (800e550 <ProcessRadioRxDone+0x96c>)
 800e51e:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 800e522:	2b00      	cmp	r3, #0
 800e524:	d002      	beq.n	800e52c <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800e526:	2000      	movs	r0, #0
 800e528:	f000 fce4 	bl	800eef4 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800e52c:	4b08      	ldr	r3, [pc, #32]	; (800e550 <ProcessRadioRxDone+0x96c>)
 800e52e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e532:	2b02      	cmp	r3, #2
 800e534:	d006      	beq.n	800e544 <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e536:	4a06      	ldr	r2, [pc, #24]	; (800e550 <ProcessRadioRxDone+0x96c>)
 800e538:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e53c:	f043 0320 	orr.w	r3, r3, #32
 800e540:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800e544:	f7ff fa82 	bl	800da4c <UpdateRxSlotIdleState>
}
 800e548:	3794      	adds	r7, #148	; 0x94
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd90      	pop	{r4, r7, pc}
 800e54e:	bf00      	nop
 800e550:	20000670 	.word	0x20000670

0800e554 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e554:	b580      	push	{r7, lr}
 800e556:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e558:	4b11      	ldr	r3, [pc, #68]	; (800e5a0 <ProcessRadioTxTimeout+0x4c>)
 800e55a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e55e:	2b02      	cmp	r3, #2
 800e560:	d002      	beq.n	800e568 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e562:	4b10      	ldr	r3, [pc, #64]	; (800e5a4 <ProcessRadioTxTimeout+0x50>)
 800e564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e566:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e568:	f7ff fa70 	bl	800da4c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e56c:	4b0e      	ldr	r3, [pc, #56]	; (800e5a8 <ProcessRadioTxTimeout+0x54>)
 800e56e:	2202      	movs	r2, #2
 800e570:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e574:	2002      	movs	r0, #2
 800e576:	f004 fd4b 	bl	8013010 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e57a:	4b0b      	ldr	r3, [pc, #44]	; (800e5a8 <ProcessRadioTxTimeout+0x54>)
 800e57c:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800e580:	2b00      	cmp	r3, #0
 800e582:	d003      	beq.n	800e58c <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800e584:	4b08      	ldr	r3, [pc, #32]	; (800e5a8 <ProcessRadioTxTimeout+0x54>)
 800e586:	2201      	movs	r2, #1
 800e588:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e58c:	4a06      	ldr	r2, [pc, #24]	; (800e5a8 <ProcessRadioTxTimeout+0x54>)
 800e58e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e592:	f043 0320 	orr.w	r3, r3, #32
 800e596:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 800e59a:	bf00      	nop
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	20000b90 	.word	0x20000b90
 800e5a4:	0801dc4c 	.word	0x0801dc4c
 800e5a8:	20000670 	.word	0x20000670

0800e5ac <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	460a      	mov	r2, r1
 800e5b6:	71fb      	strb	r3, [r7, #7]
 800e5b8:	4613      	mov	r3, r2
 800e5ba:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e5c0:	4b3d      	ldr	r3, [pc, #244]	; (800e6b8 <HandleRadioRxErrorTimeout+0x10c>)
 800e5c2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e5c6:	2b02      	cmp	r3, #2
 800e5c8:	d002      	beq.n	800e5d0 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e5ca:	4b3c      	ldr	r3, [pc, #240]	; (800e6bc <HandleRadioRxErrorTimeout+0x110>)
 800e5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ce:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e5d0:	f004 f864 	bl	801269c <LoRaMacClassBIsBeaconExpected>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d007      	beq.n	800e5ea <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e5da:	2002      	movs	r0, #2
 800e5dc:	f004 f812 	bl	8012604 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e5e0:	2000      	movs	r0, #0
 800e5e2:	f004 f834 	bl	801264e <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e5ea:	4b33      	ldr	r3, [pc, #204]	; (800e6b8 <HandleRadioRxErrorTimeout+0x10c>)
 800e5ec:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d119      	bne.n	800e628 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e5f4:	f004 f859 	bl	80126aa <LoRaMacClassBIsPingExpected>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d007      	beq.n	800e60e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e5fe:	2000      	movs	r0, #0
 800e600:	f004 f80a 	bl	8012618 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e604:	2000      	movs	r0, #0
 800e606:	f004 f82b 	bl	8012660 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e60a:	2301      	movs	r3, #1
 800e60c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e60e:	f004 f853 	bl	80126b8 <LoRaMacClassBIsMulticastExpected>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	d007      	beq.n	800e628 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e618:	2000      	movs	r0, #0
 800e61a:	f004 f807 	bl	801262c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e61e:	2000      	movs	r0, #0
 800e620:	f004 f827 	bl	8012672 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e624:	2301      	movs	r3, #1
 800e626:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e628:	7bfb      	ldrb	r3, [r7, #15]
 800e62a:	f083 0301 	eor.w	r3, r3, #1
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	2b00      	cmp	r3, #0
 800e632:	d03b      	beq.n	800e6ac <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e634:	4b22      	ldr	r3, [pc, #136]	; (800e6c0 <HandleRadioRxErrorTimeout+0x114>)
 800e636:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d122      	bne.n	800e684 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e63e:	4b20      	ldr	r3, [pc, #128]	; (800e6c0 <HandleRadioRxErrorTimeout+0x114>)
 800e640:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800e644:	2b00      	cmp	r3, #0
 800e646:	d003      	beq.n	800e650 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e648:	4a1d      	ldr	r2, [pc, #116]	; (800e6c0 <HandleRadioRxErrorTimeout+0x114>)
 800e64a:	79fb      	ldrb	r3, [r7, #7]
 800e64c:	f882 3445 	strb.w	r3, [r2, #1093]	; 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e650:	79fb      	ldrb	r3, [r7, #7]
 800e652:	4618      	mov	r0, r3
 800e654:	f004 fcdc 	bl	8013010 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e658:	4b17      	ldr	r3, [pc, #92]	; (800e6b8 <HandleRadioRxErrorTimeout+0x10c>)
 800e65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e65c:	4618      	mov	r0, r3
 800e65e:	f00d ffd3 	bl	801c608 <UTIL_TIMER_GetElapsedTime>
 800e662:	4602      	mov	r2, r0
 800e664:	4b16      	ldr	r3, [pc, #88]	; (800e6c0 <HandleRadioRxErrorTimeout+0x114>)
 800e666:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d31e      	bcc.n	800e6ac <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e66e:	4815      	ldr	r0, [pc, #84]	; (800e6c4 <HandleRadioRxErrorTimeout+0x118>)
 800e670:	f00d fe9e 	bl	801c3b0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e674:	4a12      	ldr	r2, [pc, #72]	; (800e6c0 <HandleRadioRxErrorTimeout+0x114>)
 800e676:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e67a:	f043 0320 	orr.w	r3, r3, #32
 800e67e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800e682:	e013      	b.n	800e6ac <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e684:	4b0e      	ldr	r3, [pc, #56]	; (800e6c0 <HandleRadioRxErrorTimeout+0x114>)
 800e686:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d003      	beq.n	800e696 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e68e:	4a0c      	ldr	r2, [pc, #48]	; (800e6c0 <HandleRadioRxErrorTimeout+0x114>)
 800e690:	79bb      	ldrb	r3, [r7, #6]
 800e692:	f882 3445 	strb.w	r3, [r2, #1093]	; 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e696:	79bb      	ldrb	r3, [r7, #6]
 800e698:	4618      	mov	r0, r3
 800e69a:	f004 fcb9 	bl	8013010 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800e69e:	4a08      	ldr	r2, [pc, #32]	; (800e6c0 <HandleRadioRxErrorTimeout+0x114>)
 800e6a0:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e6a4:	f043 0320 	orr.w	r3, r3, #32
 800e6a8:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800e6ac:	f7ff f9ce 	bl	800da4c <UpdateRxSlotIdleState>
}
 800e6b0:	bf00      	nop
 800e6b2:	3710      	adds	r7, #16
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	20000b90 	.word	0x20000b90
 800e6bc:	0801dc4c 	.word	0x0801dc4c
 800e6c0:	20000670 	.word	0x20000670
 800e6c4:	20000a08 	.word	0x20000a08

0800e6c8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e6cc:	2106      	movs	r1, #6
 800e6ce:	2005      	movs	r0, #5
 800e6d0:	f7ff ff6c 	bl	800e5ac <HandleRadioRxErrorTimeout>
}
 800e6d4:	bf00      	nop
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e6dc:	2104      	movs	r1, #4
 800e6de:	2003      	movs	r0, #3
 800e6e0:	f7ff ff64 	bl	800e5ac <HandleRadioRxErrorTimeout>
}
 800e6e4:	bf00      	nop
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b084      	sub	sp, #16
 800e6ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6ee:	f3ef 8310 	mrs	r3, PRIMASK
 800e6f2:	607b      	str	r3, [r7, #4]
  return(result);
 800e6f4:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e6f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e6f8:	b672      	cpsid	i
}
 800e6fa:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e6fc:	4b1d      	ldr	r3, [pc, #116]	; (800e774 <LoRaMacHandleIrqEvents+0x8c>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e702:	4b1c      	ldr	r3, [pc, #112]	; (800e774 <LoRaMacHandleIrqEvents+0x8c>)
 800e704:	2200      	movs	r2, #0
 800e706:	601a      	str	r2, [r3, #0]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	f383 8810 	msr	PRIMASK, r3
}
 800e712:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d027      	beq.n	800e76a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e71a:	783b      	ldrb	r3, [r7, #0]
 800e71c:	f003 0320 	and.w	r3, r3, #32
 800e720:	b2db      	uxtb	r3, r3
 800e722:	2b00      	cmp	r3, #0
 800e724:	d001      	beq.n	800e72a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e726:	f7ff f9a9 	bl	800da7c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e72a:	783b      	ldrb	r3, [r7, #0]
 800e72c:	f003 0310 	and.w	r3, r3, #16
 800e730:	b2db      	uxtb	r3, r3
 800e732:	2b00      	cmp	r3, #0
 800e734:	d001      	beq.n	800e73a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e736:	f7ff fa55 	bl	800dbe4 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e73a:	783b      	ldrb	r3, [r7, #0]
 800e73c:	f003 0308 	and.w	r3, r3, #8
 800e740:	b2db      	uxtb	r3, r3
 800e742:	2b00      	cmp	r3, #0
 800e744:	d001      	beq.n	800e74a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e746:	f7ff ff05 	bl	800e554 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e74a:	783b      	ldrb	r3, [r7, #0]
 800e74c:	f003 0304 	and.w	r3, r3, #4
 800e750:	b2db      	uxtb	r3, r3
 800e752:	2b00      	cmp	r3, #0
 800e754:	d001      	beq.n	800e75a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e756:	f7ff ffb7 	bl	800e6c8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e75a:	783b      	ldrb	r3, [r7, #0]
 800e75c:	f003 0302 	and.w	r3, r3, #2
 800e760:	b2db      	uxtb	r3, r3
 800e762:	2b00      	cmp	r3, #0
 800e764:	d001      	beq.n	800e76a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e766:	f7ff ffb7 	bl	800e6d8 <ProcessRadioRxTimeout>
        }
    }
}
 800e76a:	bf00      	nop
 800e76c:	3710      	adds	r7, #16
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	20001738 	.word	0x20001738

0800e778 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e778:	b480      	push	{r7}
 800e77a:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800e77c:	4b0c      	ldr	r3, [pc, #48]	; (800e7b0 <LoRaMacIsBusy+0x38>)
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	f003 0301 	and.w	r3, r3, #1
 800e784:	b2db      	uxtb	r3, r3
 800e786:	2b00      	cmp	r3, #0
 800e788:	d001      	beq.n	800e78e <LoRaMacIsBusy+0x16>
    {
        return true;
 800e78a:	2301      	movs	r3, #1
 800e78c:	e00c      	b.n	800e7a8 <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e78e:	4b09      	ldr	r3, [pc, #36]	; (800e7b4 <LoRaMacIsBusy+0x3c>)
 800e790:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e794:	2b00      	cmp	r3, #0
 800e796:	d106      	bne.n	800e7a6 <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e798:	4b06      	ldr	r3, [pc, #24]	; (800e7b4 <LoRaMacIsBusy+0x3c>)
 800e79a:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e79e:	2b01      	cmp	r3, #1
 800e7a0:	d101      	bne.n	800e7a6 <LoRaMacIsBusy+0x2e>
    {
        return false;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	e000      	b.n	800e7a8 <LoRaMacIsBusy+0x30>
    }
    return true;
 800e7a6:	2301      	movs	r3, #1
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bc80      	pop	{r7}
 800e7ae:	4770      	bx	lr
 800e7b0:	20001738 	.word	0x20001738
 800e7b4:	20000670 	.word	0x20000670

0800e7b8 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	4603      	mov	r3, r0
 800e7c0:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e7c2:	4a04      	ldr	r2, [pc, #16]	; (800e7d4 <LoRaMacEnableRequests+0x1c>)
 800e7c4:	79fb      	ldrb	r3, [r7, #7]
 800e7c6:	f882 3496 	strb.w	r3, [r2, #1174]	; 0x496
}
 800e7ca:	bf00      	nop
 800e7cc:	370c      	adds	r7, #12
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bc80      	pop	{r7}
 800e7d2:	4770      	bx	lr
 800e7d4:	20000670 	.word	0x20000670

0800e7d8 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e7de:	4b2c      	ldr	r3, [pc, #176]	; (800e890 <LoRaMacHandleRequestEvents+0xb8>)
 800e7e0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e7e4:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e7e6:	4b2a      	ldr	r3, [pc, #168]	; (800e890 <LoRaMacHandleRequestEvents+0xb8>)
 800e7e8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d14a      	bne.n	800e886 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e7f0:	4b27      	ldr	r3, [pc, #156]	; (800e890 <LoRaMacHandleRequestEvents+0xb8>)
 800e7f2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e7f6:	f003 0301 	and.w	r3, r3, #1
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d006      	beq.n	800e80e <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e800:	4a23      	ldr	r2, [pc, #140]	; (800e890 <LoRaMacHandleRequestEvents+0xb8>)
 800e802:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e806:	f36f 0300 	bfc	r3, #0, #1
 800e80a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e80e:	4b20      	ldr	r3, [pc, #128]	; (800e890 <LoRaMacHandleRequestEvents+0xb8>)
 800e810:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e814:	f003 0304 	and.w	r3, r3, #4
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d006      	beq.n	800e82c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e81e:	4a1c      	ldr	r2, [pc, #112]	; (800e890 <LoRaMacHandleRequestEvents+0xb8>)
 800e820:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e824:	f36f 0382 	bfc	r3, #2, #1
 800e828:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e82c:	2001      	movs	r0, #1
 800e82e:	f7ff ffc3 	bl	800e7b8 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e832:	793b      	ldrb	r3, [r7, #4]
 800e834:	f003 0301 	and.w	r3, r3, #1
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d005      	beq.n	800e84a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e83e:	4b14      	ldr	r3, [pc, #80]	; (800e890 <LoRaMacHandleRequestEvents+0xb8>)
 800e840:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4813      	ldr	r0, [pc, #76]	; (800e894 <LoRaMacHandleRequestEvents+0xbc>)
 800e848:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e84a:	793b      	ldrb	r3, [r7, #4]
 800e84c:	f003 0304 	and.w	r3, r3, #4
 800e850:	b2db      	uxtb	r3, r3
 800e852:	2b00      	cmp	r3, #0
 800e854:	d00e      	beq.n	800e874 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e856:	4810      	ldr	r0, [pc, #64]	; (800e898 <LoRaMacHandleRequestEvents+0xc0>)
 800e858:	f004 fc28 	bl	80130ac <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e85c:	f004 fc72 	bl	8013144 <LoRaMacConfirmQueueGetCnt>
 800e860:	4603      	mov	r3, r0
 800e862:	2b00      	cmp	r3, #0
 800e864:	d006      	beq.n	800e874 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e866:	4a0a      	ldr	r2, [pc, #40]	; (800e890 <LoRaMacHandleRequestEvents+0xb8>)
 800e868:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e86c:	f043 0304 	orr.w	r3, r3, #4
 800e870:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e874:	f003 ff3e 	bl	80126f4 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e878:	4a05      	ldr	r2, [pc, #20]	; (800e890 <LoRaMacHandleRequestEvents+0xb8>)
 800e87a:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e87e:	f36f 1345 	bfc	r3, #5, #1
 800e882:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
}
 800e886:	bf00      	nop
 800e888:	3708      	adds	r7, #8
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	20000670 	.word	0x20000670
 800e894:	20000ab4 	.word	0x20000ab4
 800e898:	20000ac8 	.word	0x20000ac8

0800e89c <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e8a2:	4b07      	ldr	r3, [pc, #28]	; (800e8c0 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800e8a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d105      	bne.n	800e8b8 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e8b0:	1dfb      	adds	r3, r7, #7
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f004 f9e0 	bl	8012c78 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800e8b8:	bf00      	nop
 800e8ba:	3708      	adds	r7, #8
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	20000670 	.word	0x20000670

0800e8c4 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e8c8:	4b16      	ldr	r3, [pc, #88]	; (800e924 <LoRaMacHandleIndicationEvents+0x60>)
 800e8ca:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e8ce:	f003 0308 	and.w	r3, r3, #8
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d00d      	beq.n	800e8f4 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e8d8:	4a12      	ldr	r2, [pc, #72]	; (800e924 <LoRaMacHandleIndicationEvents+0x60>)
 800e8da:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e8de:	f36f 03c3 	bfc	r3, #3, #1
 800e8e2:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e8e6:	4b0f      	ldr	r3, [pc, #60]	; (800e924 <LoRaMacHandleIndicationEvents+0x60>)
 800e8e8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e8ec:	68db      	ldr	r3, [r3, #12]
 800e8ee:	490e      	ldr	r1, [pc, #56]	; (800e928 <LoRaMacHandleIndicationEvents+0x64>)
 800e8f0:	480e      	ldr	r0, [pc, #56]	; (800e92c <LoRaMacHandleIndicationEvents+0x68>)
 800e8f2:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e8f4:	4b0b      	ldr	r3, [pc, #44]	; (800e924 <LoRaMacHandleIndicationEvents+0x60>)
 800e8f6:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e8fa:	f003 0302 	and.w	r3, r3, #2
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00d      	beq.n	800e920 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e904:	4a07      	ldr	r2, [pc, #28]	; (800e924 <LoRaMacHandleIndicationEvents+0x60>)
 800e906:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e90a:	f36f 0341 	bfc	r3, #1, #1
 800e90e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e912:	4b04      	ldr	r3, [pc, #16]	; (800e924 <LoRaMacHandleIndicationEvents+0x60>)
 800e914:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	4903      	ldr	r1, [pc, #12]	; (800e928 <LoRaMacHandleIndicationEvents+0x64>)
 800e91c:	4804      	ldr	r0, [pc, #16]	; (800e930 <LoRaMacHandleIndicationEvents+0x6c>)
 800e91e:	4798      	blx	r3
    }
}
 800e920:	bf00      	nop
 800e922:	bd80      	pop	{r7, pc}
 800e924:	20000670 	.word	0x20000670
 800e928:	20000b00 	.word	0x20000b00
 800e92c:	20000adc 	.word	0x20000adc
 800e930:	20000a94 	.word	0x20000a94

0800e934 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e93a:	4b2a      	ldr	r3, [pc, #168]	; (800e9e4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e93c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e940:	f003 0301 	and.w	r3, r3, #1
 800e944:	b2db      	uxtb	r3, r3
 800e946:	2b00      	cmp	r3, #0
 800e948:	d048      	beq.n	800e9dc <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800e94a:	2300      	movs	r3, #0
 800e94c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e94e:	2300      	movs	r3, #0
 800e950:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e952:	4b24      	ldr	r3, [pc, #144]	; (800e9e4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e954:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d004      	beq.n	800e966 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e95c:	4b21      	ldr	r3, [pc, #132]	; (800e9e4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e95e:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e962:	2b03      	cmp	r3, #3
 800e964:	d104      	bne.n	800e970 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e966:	f002 f8ed 	bl	8010b44 <CheckRetransUnconfirmedUplink>
 800e96a:	4603      	mov	r3, r0
 800e96c:	71fb      	strb	r3, [r7, #7]
 800e96e:	e010      	b.n	800e992 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e970:	4b1c      	ldr	r3, [pc, #112]	; (800e9e4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e972:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800e976:	2b01      	cmp	r3, #1
 800e978:	d10b      	bne.n	800e992 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800e97a:	4b1a      	ldr	r3, [pc, #104]	; (800e9e4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e97c:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800e980:	2b00      	cmp	r3, #0
 800e982:	d004      	beq.n	800e98e <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e984:	f002 f90a 	bl	8010b9c <CheckRetransConfirmedUplink>
 800e988:	4603      	mov	r3, r0
 800e98a:	71fb      	strb	r3, [r7, #7]
 800e98c:	e001      	b.n	800e992 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800e98e:	2301      	movs	r3, #1
 800e990:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800e992:	79fb      	ldrb	r3, [r7, #7]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00d      	beq.n	800e9b4 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e998:	4813      	ldr	r0, [pc, #76]	; (800e9e8 <LoRaMacHandleMcpsRequest+0xb4>)
 800e99a:	f00d fd09 	bl	801c3b0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e99e:	4b11      	ldr	r3, [pc, #68]	; (800e9e4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e9a0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e9a4:	f023 0320 	bic.w	r3, r3, #32
 800e9a8:	4a0e      	ldr	r2, [pc, #56]	; (800e9e4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e9aa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800e9ae:	f002 f92f 	bl	8010c10 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e9b2:	e013      	b.n	800e9dc <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800e9b4:	79bb      	ldrb	r3, [r7, #6]
 800e9b6:	f083 0301 	eor.w	r3, r3, #1
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00d      	beq.n	800e9dc <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e9c0:	4a08      	ldr	r2, [pc, #32]	; (800e9e4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e9c2:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e9c6:	f36f 1345 	bfc	r3, #5, #1
 800e9ca:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800e9ce:	4b05      	ldr	r3, [pc, #20]	; (800e9e4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 800e9d6:	2000      	movs	r0, #0
 800e9d8:	f000 f9c8 	bl	800ed6c <OnTxDelayedTimerEvent>
}
 800e9dc:	bf00      	nop
 800e9de:	3708      	adds	r7, #8
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	20000670 	.word	0x20000670
 800e9e8:	200009d8 	.word	0x200009d8

0800e9ec <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e9f0:	4b18      	ldr	r3, [pc, #96]	; (800ea54 <LoRaMacHandleMlmeRequest+0x68>)
 800e9f2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e9f6:	f003 0304 	and.w	r3, r3, #4
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d026      	beq.n	800ea4e <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ea00:	2001      	movs	r0, #1
 800ea02:	f004 fb39 	bl	8013078 <LoRaMacConfirmQueueIsCmdActive>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d012      	beq.n	800ea32 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800ea0c:	2001      	movs	r0, #1
 800ea0e:	f004 fad5 	bl	8012fbc <LoRaMacConfirmQueueGetStatus>
 800ea12:	4603      	mov	r3, r0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d103      	bne.n	800ea20 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800ea18:	4b0e      	ldr	r3, [pc, #56]	; (800ea54 <LoRaMacHandleMlmeRequest+0x68>)
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ea20:	4b0c      	ldr	r3, [pc, #48]	; (800ea54 <LoRaMacHandleMlmeRequest+0x68>)
 800ea22:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ea26:	f023 0302 	bic.w	r3, r3, #2
 800ea2a:	4a0a      	ldr	r2, [pc, #40]	; (800ea54 <LoRaMacHandleMlmeRequest+0x68>)
 800ea2c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800ea30:	e00d      	b.n	800ea4e <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800ea32:	2005      	movs	r0, #5
 800ea34:	f004 fb20 	bl	8013078 <LoRaMacConfirmQueueIsCmdActive>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d007      	beq.n	800ea4e <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ea3e:	4b05      	ldr	r3, [pc, #20]	; (800ea54 <LoRaMacHandleMlmeRequest+0x68>)
 800ea40:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ea44:	f023 0302 	bic.w	r3, r3, #2
 800ea48:	4a02      	ldr	r2, [pc, #8]	; (800ea54 <LoRaMacHandleMlmeRequest+0x68>)
 800ea4a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800ea4e:	bf00      	nop
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	20000670 	.word	0x20000670

0800ea58 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ea5c:	200b      	movs	r0, #11
 800ea5e:	f004 fb0b 	bl	8013078 <LoRaMacConfirmQueueIsCmdActive>
 800ea62:	4603      	mov	r3, r0
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d019      	beq.n	800ea9c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800ea68:	4b0e      	ldr	r3, [pc, #56]	; (800eaa4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ea6a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ea6e:	f003 0301 	and.w	r3, r3, #1
 800ea72:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d111      	bne.n	800ea9c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ea78:	4b0a      	ldr	r3, [pc, #40]	; (800eaa4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ea7a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ea7e:	f003 0304 	and.w	r3, r3, #4
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d009      	beq.n	800ea9c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ea88:	4b06      	ldr	r3, [pc, #24]	; (800eaa4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ea8a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ea8e:	f023 0302 	bic.w	r3, r3, #2
 800ea92:	4a04      	ldr	r2, [pc, #16]	; (800eaa4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ea94:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	e000      	b.n	800ea9e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800ea9c:	2300      	movs	r3, #0
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	20000670 	.word	0x20000670

0800eaa8 <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	4603      	mov	r3, r0
 800eab0:	71fb      	strb	r3, [r7, #7]
 800eab2:	460b      	mov	r3, r1
 800eab4:	71bb      	strb	r3, [r7, #6]
 800eab6:	4613      	mov	r3, r2
 800eab8:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800eaba:	79fb      	ldrb	r3, [r7, #7]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d00a      	beq.n	800ead6 <CheckForMinimumAbpDatarate+0x2e>
 800eac0:	79bb      	ldrb	r3, [r7, #6]
 800eac2:	2b01      	cmp	r3, #1
 800eac4:	d107      	bne.n	800ead6 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800eac6:	797b      	ldrb	r3, [r7, #5]
 800eac8:	f083 0301 	eor.w	r3, r3, #1
 800eacc:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d001      	beq.n	800ead6 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800ead2:	2301      	movs	r3, #1
 800ead4:	e000      	b.n	800ead8 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800ead6:	2300      	movs	r3, #0
}
 800ead8:	4618      	mov	r0, r3
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	bc80      	pop	{r7}
 800eae0:	4770      	bx	lr
	...

0800eae4 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800eae4:	b480      	push	{r7}
 800eae6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800eae8:	4b0d      	ldr	r3, [pc, #52]	; (800eb20 <LoRaMacCheckForRxAbort+0x3c>)
 800eaea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eaee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d00f      	beq.n	800eb16 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800eaf6:	4b0a      	ldr	r3, [pc, #40]	; (800eb20 <LoRaMacCheckForRxAbort+0x3c>)
 800eaf8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eafc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb00:	4a07      	ldr	r2, [pc, #28]	; (800eb20 <LoRaMacCheckForRxAbort+0x3c>)
 800eb02:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800eb06:	4b06      	ldr	r3, [pc, #24]	; (800eb20 <LoRaMacCheckForRxAbort+0x3c>)
 800eb08:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eb0c:	f023 0302 	bic.w	r3, r3, #2
 800eb10:	4a03      	ldr	r2, [pc, #12]	; (800eb20 <LoRaMacCheckForRxAbort+0x3c>)
 800eb12:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800eb16:	bf00      	nop
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bc80      	pop	{r7}
 800eb1c:	4770      	bx	lr
 800eb1e:	bf00      	nop
 800eb20:	20000670 	.word	0x20000670

0800eb24 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800eb30:	2300      	movs	r3, #0
 800eb32:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800eb34:	4b50      	ldr	r3, [pc, #320]	; (800ec78 <LoRaMacHandleNvm+0x154>)
 800eb36:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	f040 8098 	bne.w	800ec70 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2124      	movs	r1, #36	; 0x24
 800eb44:	4618      	mov	r0, r3
 800eb46:	f009 fb3f 	bl	80181c8 <Crc32>
 800eb4a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb50:	68ba      	ldr	r2, [r7, #8]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d006      	beq.n	800eb64 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	68ba      	ldr	r2, [r7, #8]
 800eb5a:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800eb5c:	89fb      	ldrh	r3, [r7, #14]
 800eb5e:	f043 0301 	orr.w	r3, r3, #1
 800eb62:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	3328      	adds	r3, #40	; 0x28
 800eb68:	2114      	movs	r1, #20
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f009 fb2c 	bl	80181c8 <Crc32>
 800eb70:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb76:	68ba      	ldr	r2, [r7, #8]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d006      	beq.n	800eb8a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	68ba      	ldr	r2, [r7, #8]
 800eb80:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800eb82:	89fb      	ldrh	r3, [r7, #14]
 800eb84:	f043 0302 	orr.w	r3, r3, #2
 800eb88:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	3340      	adds	r3, #64	; 0x40
 800eb8e:	21e0      	movs	r1, #224	; 0xe0
 800eb90:	4618      	mov	r0, r3
 800eb92:	f009 fb19 	bl	80181c8 <Crc32>
 800eb96:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800eb9e:	68ba      	ldr	r2, [r7, #8]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d007      	beq.n	800ebb4 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	68ba      	ldr	r2, [r7, #8]
 800eba8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ebac:	89fb      	ldrh	r3, [r7, #14]
 800ebae:	f043 0304 	orr.w	r3, r3, #4
 800ebb2:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ebba:	21bc      	movs	r1, #188	; 0xbc
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f009 fb03 	bl	80181c8 <Crc32>
 800ebc2:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800ebca:	68ba      	ldr	r2, [r7, #8]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d007      	beq.n	800ebe0 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	68ba      	ldr	r2, [r7, #8]
 800ebd4:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ebd8:	89fb      	ldrh	r3, [r7, #14]
 800ebda:	f043 0308 	orr.w	r3, r3, #8
 800ebde:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ebe6:	2110      	movs	r1, #16
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f009 faed 	bl	80181c8 <Crc32>
 800ebee:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800ebf6:	68ba      	ldr	r2, [r7, #8]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d007      	beq.n	800ec0c <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	68ba      	ldr	r2, [r7, #8]
 800ec00:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800ec04:	89fb      	ldrh	r3, [r7, #14]
 800ec06:	f043 0310 	orr.w	r3, r3, #16
 800ec0a:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ec12:	f44f 715e 	mov.w	r1, #888	; 0x378
 800ec16:	4618      	mov	r0, r3
 800ec18:	f009 fad6 	bl	80181c8 <Crc32>
 800ec1c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f8d3 3570 	ldr.w	r3, [r3, #1392]	; 0x570
 800ec24:	68ba      	ldr	r2, [r7, #8]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d007      	beq.n	800ec3a <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	68ba      	ldr	r2, [r7, #8]
 800ec2e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800ec32:	89fb      	ldrh	r3, [r7, #14]
 800ec34:	f043 0320 	orr.w	r3, r3, #32
 800ec38:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f203 5374 	addw	r3, r3, #1396	; 0x574
 800ec40:	2114      	movs	r1, #20
 800ec42:	4618      	mov	r0, r3
 800ec44:	f009 fac0 	bl	80181c8 <Crc32>
 800ec48:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
 800ec50:	68ba      	ldr	r2, [r7, #8]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d007      	beq.n	800ec66 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	68ba      	ldr	r2, [r7, #8]
 800ec5a:	f8c3 2588 	str.w	r2, [r3, #1416]	; 0x588
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800ec5e:	89fb      	ldrh	r3, [r7, #14]
 800ec60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec64:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800ec66:	89fb      	ldrh	r3, [r7, #14]
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f002 f80d 	bl	8010c88 <CallNvmDataChangeCallback>
 800ec6e:	e000      	b.n	800ec72 <LoRaMacHandleNvm+0x14e>
        return;
 800ec70:	bf00      	nop
}
 800ec72:	3710      	adds	r7, #16
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	20000670 	.word	0x20000670

0800ec7c <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d00d      	beq.n	800eca8 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800ec8c:	6838      	ldr	r0, [r7, #0]
 800ec8e:	f00d fcbb 	bl	801c608 <UTIL_TIMER_GetElapsedTime>
 800ec92:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800ec94:	68fa      	ldr	r2, [r7, #12]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d905      	bls.n	800eca8 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800ec9c:	4b05      	ldr	r3, [pc, #20]	; (800ecb4 <LoRaMacHandleResponseTimeout+0x38>)
 800ec9e:	2200      	movs	r2, #0
 800eca0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800eca4:	2301      	movs	r3, #1
 800eca6:	e000      	b.n	800ecaa <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800eca8:	2300      	movs	r3, #0
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3710      	adds	r7, #16
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	bf00      	nop
 800ecb4:	20000b90 	.word	0x20000b90

0800ecb8 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800ecc2:	f7ff fd11 	bl	800e6e8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800ecc6:	f003 fd84 	bl	80127d2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800ecca:	4b26      	ldr	r3, [pc, #152]	; (800ed64 <LoRaMacProcess+0xac>)
 800eccc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ecd0:	f003 0320 	and.w	r3, r3, #32
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d025      	beq.n	800ed26 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800ecda:	2000      	movs	r0, #0
 800ecdc:	f7ff fd6c 	bl	800e7b8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800ece0:	f7ff ff00 	bl	800eae4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800ece4:	f001 ffee 	bl	8010cc4 <IsRequestPending>
 800ece8:	4603      	mov	r3, r0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d006      	beq.n	800ecfc <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800ecee:	f7ff feb3 	bl	800ea58 <LoRaMacCheckForBeaconAcquisition>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	79fb      	ldrb	r3, [r7, #7]
 800ecf8:	4313      	orrs	r3, r2
 800ecfa:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800ecfc:	79fb      	ldrb	r3, [r7, #7]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d103      	bne.n	800ed0a <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800ed02:	f7ff fe73 	bl	800e9ec <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800ed06:	f7ff fe15 	bl	800e934 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800ed0a:	f7ff fd65 	bl	800e7d8 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800ed0e:	f7ff fdc5 	bl	800e89c <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ed12:	2001      	movs	r0, #1
 800ed14:	f7ff fd50 	bl	800e7b8 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800ed18:	4a12      	ldr	r2, [pc, #72]	; (800ed64 <LoRaMacProcess+0xac>)
 800ed1a:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ed1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed22:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
    LoRaMacHandleIndicationEvents( );
 800ed26:	f7ff fdcd 	bl	800e8c4 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800ed2a:	4b0e      	ldr	r3, [pc, #56]	; (800ed64 <LoRaMacProcess+0xac>)
 800ed2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800ed30:	2b02      	cmp	r3, #2
 800ed32:	d101      	bne.n	800ed38 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800ed34:	f001 fbe0 	bl	80104f8 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800ed38:	4b0a      	ldr	r3, [pc, #40]	; (800ed64 <LoRaMacProcess+0xac>)
 800ed3a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ed3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d009      	beq.n	800ed5c <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800ed48:	4a06      	ldr	r2, [pc, #24]	; (800ed64 <LoRaMacProcess+0xac>)
 800ed4a:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ed4e:	f36f 1386 	bfc	r3, #6, #1
 800ed52:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 800ed56:	4804      	ldr	r0, [pc, #16]	; (800ed68 <LoRaMacProcess+0xb0>)
 800ed58:	f7ff fee4 	bl	800eb24 <LoRaMacHandleNvm>
    }
}
 800ed5c:	bf00      	nop
 800ed5e:	3708      	adds	r7, #8
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	20000670 	.word	0x20000670
 800ed68:	20000b90 	.word	0x20000b90

0800ed6c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ed74:	481e      	ldr	r0, [pc, #120]	; (800edf0 <OnTxDelayedTimerEvent+0x84>)
 800ed76:	f00d fb1b 	bl	801c3b0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ed7a:	4b1e      	ldr	r3, [pc, #120]	; (800edf4 <OnTxDelayedTimerEvent+0x88>)
 800ed7c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ed80:	f023 0320 	bic.w	r3, r3, #32
 800ed84:	4a1b      	ldr	r2, [pc, #108]	; (800edf4 <OnTxDelayedTimerEvent+0x88>)
 800ed86:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800ed8a:	4b1b      	ldr	r3, [pc, #108]	; (800edf8 <OnTxDelayedTimerEvent+0x8c>)
 800ed8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed90:	4a18      	ldr	r2, [pc, #96]	; (800edf4 <OnTxDelayedTimerEvent+0x88>)
 800ed92:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
 800ed96:	4611      	mov	r1, r2
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7ff ff6f 	bl	800ec7c <LoRaMacHandleResponseTimeout>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d11e      	bne.n	800ede2 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800eda4:	2001      	movs	r0, #1
 800eda6:	f001 f92d 	bl	8010004 <ScheduleTx>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b00      	cmp	r3, #0
 800edae:	d01a      	beq.n	800ede6 <OnTxDelayedTimerEvent+0x7a>
 800edb0:	2b0b      	cmp	r3, #11
 800edb2:	d018      	beq.n	800ede6 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800edb4:	4b10      	ldr	r3, [pc, #64]	; (800edf8 <OnTxDelayedTimerEvent+0x8c>)
 800edb6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800edba:	b2da      	uxtb	r2, r3
 800edbc:	4b0d      	ldr	r3, [pc, #52]	; (800edf4 <OnTxDelayedTimerEvent+0x88>)
 800edbe:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800edc2:	4b0c      	ldr	r3, [pc, #48]	; (800edf4 <OnTxDelayedTimerEvent+0x88>)
 800edc4:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800edc8:	4b0a      	ldr	r3, [pc, #40]	; (800edf4 <OnTxDelayedTimerEvent+0x88>)
 800edca:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800edce:	4b09      	ldr	r3, [pc, #36]	; (800edf4 <OnTxDelayedTimerEvent+0x88>)
 800edd0:	2209      	movs	r2, #9
 800edd2:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800edd6:	2009      	movs	r0, #9
 800edd8:	f004 f91a 	bl	8013010 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800eddc:	f001 ff18 	bl	8010c10 <StopRetransmission>
            break;
 800ede0:	e002      	b.n	800ede8 <OnTxDelayedTimerEvent+0x7c>
        return;
 800ede2:	bf00      	nop
 800ede4:	e000      	b.n	800ede8 <OnTxDelayedTimerEvent+0x7c>
            break;
 800ede6:	bf00      	nop
        }
    }
}
 800ede8:	3708      	adds	r7, #8
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
 800edee:	bf00      	nop
 800edf0:	200009d8 	.word	0x200009d8
 800edf4:	20000670 	.word	0x20000670
 800edf8:	20000b90 	.word	0x20000b90

0800edfc <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800ee04:	4b17      	ldr	r3, [pc, #92]	; (800ee64 <OnRxWindow1TimerEvent+0x68>)
 800ee06:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800ee0a:	4b16      	ldr	r3, [pc, #88]	; (800ee64 <OnRxWindow1TimerEvent+0x68>)
 800ee0c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800ee10:	4b15      	ldr	r3, [pc, #84]	; (800ee68 <OnRxWindow1TimerEvent+0x6c>)
 800ee12:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ee16:	b25a      	sxtb	r2, r3
 800ee18:	4b12      	ldr	r3, [pc, #72]	; (800ee64 <OnRxWindow1TimerEvent+0x68>)
 800ee1a:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ee1e:	4b12      	ldr	r3, [pc, #72]	; (800ee68 <OnRxWindow1TimerEvent+0x6c>)
 800ee20:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ee24:	4b0f      	ldr	r3, [pc, #60]	; (800ee64 <OnRxWindow1TimerEvent+0x68>)
 800ee26:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ee2a:	4b0f      	ldr	r3, [pc, #60]	; (800ee68 <OnRxWindow1TimerEvent+0x6c>)
 800ee2c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ee30:	4b0c      	ldr	r3, [pc, #48]	; (800ee64 <OnRxWindow1TimerEvent+0x68>)
 800ee32:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ee36:	4b0b      	ldr	r3, [pc, #44]	; (800ee64 <OnRxWindow1TimerEvent+0x68>)
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ee3e:	4b09      	ldr	r3, [pc, #36]	; (800ee64 <OnRxWindow1TimerEvent+0x68>)
 800ee40:	2200      	movs	r2, #0
 800ee42:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ee46:	4b08      	ldr	r3, [pc, #32]	; (800ee68 <OnRxWindow1TimerEvent+0x6c>)
 800ee48:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 800ee4c:	4b05      	ldr	r3, [pc, #20]	; (800ee64 <OnRxWindow1TimerEvent+0x68>)
 800ee4e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ee52:	4906      	ldr	r1, [pc, #24]	; (800ee6c <OnRxWindow1TimerEvent+0x70>)
 800ee54:	4806      	ldr	r0, [pc, #24]	; (800ee70 <OnRxWindow1TimerEvent+0x74>)
 800ee56:	f001 fb1b 	bl	8010490 <RxWindowSetup>
}
 800ee5a:	bf00      	nop
 800ee5c:	3708      	adds	r7, #8
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	20000670 	.word	0x20000670
 800ee68:	20000b90 	.word	0x20000b90
 800ee6c:	20000a28 	.word	0x20000a28
 800ee70:	200009f0 	.word	0x200009f0

0800ee74 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ee7c:	4b19      	ldr	r3, [pc, #100]	; (800eee4 <OnRxWindow2TimerEvent+0x70>)
 800ee7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d029      	beq.n	800eeda <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ee86:	4b17      	ldr	r3, [pc, #92]	; (800eee4 <OnRxWindow2TimerEvent+0x70>)
 800ee88:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800ee8c:	4b15      	ldr	r3, [pc, #84]	; (800eee4 <OnRxWindow2TimerEvent+0x70>)
 800ee8e:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ee92:	4b15      	ldr	r3, [pc, #84]	; (800eee8 <OnRxWindow2TimerEvent+0x74>)
 800ee94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee96:	4a13      	ldr	r2, [pc, #76]	; (800eee4 <OnRxWindow2TimerEvent+0x70>)
 800ee98:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ee9c:	4b12      	ldr	r3, [pc, #72]	; (800eee8 <OnRxWindow2TimerEvent+0x74>)
 800ee9e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800eea2:	4b10      	ldr	r3, [pc, #64]	; (800eee4 <OnRxWindow2TimerEvent+0x70>)
 800eea4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800eea8:	4b0f      	ldr	r3, [pc, #60]	; (800eee8 <OnRxWindow2TimerEvent+0x74>)
 800eeaa:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800eeae:	4b0d      	ldr	r3, [pc, #52]	; (800eee4 <OnRxWindow2TimerEvent+0x70>)
 800eeb0:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800eeb4:	4b0b      	ldr	r3, [pc, #44]	; (800eee4 <OnRxWindow2TimerEvent+0x70>)
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800eebc:	4b09      	ldr	r3, [pc, #36]	; (800eee4 <OnRxWindow2TimerEvent+0x70>)
 800eebe:	2201      	movs	r2, #1
 800eec0:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800eec4:	4b08      	ldr	r3, [pc, #32]	; (800eee8 <OnRxWindow2TimerEvent+0x74>)
 800eec6:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 800eeca:	4b06      	ldr	r3, [pc, #24]	; (800eee4 <OnRxWindow2TimerEvent+0x70>)
 800eecc:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800eed0:	4906      	ldr	r1, [pc, #24]	; (800eeec <OnRxWindow2TimerEvent+0x78>)
 800eed2:	4807      	ldr	r0, [pc, #28]	; (800eef0 <OnRxWindow2TimerEvent+0x7c>)
 800eed4:	f001 fadc 	bl	8010490 <RxWindowSetup>
 800eed8:	e000      	b.n	800eedc <OnRxWindow2TimerEvent+0x68>
        return;
 800eeda:	bf00      	nop
}
 800eedc:	3708      	adds	r7, #8
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	20000670 	.word	0x20000670
 800eee8:	20000b90 	.word	0x20000b90
 800eeec:	20000a40 	.word	0x20000a40
 800eef0:	20000a08 	.word	0x20000a08

0800eef4 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800eefc:	480f      	ldr	r0, [pc, #60]	; (800ef3c <OnRetransmitTimeoutTimerEvent+0x48>)
 800eefe:	f00d fa57 	bl	801c3b0 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800ef02:	4b0f      	ldr	r3, [pc, #60]	; (800ef40 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800ef04:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d003      	beq.n	800ef14 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800ef0c:	4b0c      	ldr	r3, [pc, #48]	; (800ef40 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ef14:	4b0a      	ldr	r3, [pc, #40]	; (800ef40 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800ef16:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00a      	beq.n	800ef34 <OnRetransmitTimeoutTimerEvent+0x40>
 800ef1e:	4b08      	ldr	r3, [pc, #32]	; (800ef40 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800ef20:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ef24:	691b      	ldr	r3, [r3, #16]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d004      	beq.n	800ef34 <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ef2a:	4b05      	ldr	r3, [pc, #20]	; (800ef40 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800ef2c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ef30:	691b      	ldr	r3, [r3, #16]
 800ef32:	4798      	blx	r3
    }
}
 800ef34:	bf00      	nop
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}
 800ef3c:	20000a74 	.word	0x20000a74
 800ef40:	20000670 	.word	0x20000670

0800ef44 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b084      	sub	sp, #16
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	60ba      	str	r2, [r7, #8]
 800ef4c:	607b      	str	r3, [r7, #4]
 800ef4e:	4603      	mov	r3, r0
 800ef50:	73fb      	strb	r3, [r7, #15]
 800ef52:	460b      	mov	r3, r1
 800ef54:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d005      	beq.n	800ef68 <GetFCntDown+0x24>
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d002      	beq.n	800ef68 <GetFCntDown+0x24>
 800ef62:	69fb      	ldr	r3, [r7, #28]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d101      	bne.n	800ef6c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ef68:	2309      	movs	r3, #9
 800ef6a:	e028      	b.n	800efbe <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800ef6c:	7bfb      	ldrb	r3, [r7, #15]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d016      	beq.n	800efa0 <GetFCntDown+0x5c>
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d118      	bne.n	800efa8 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800ef76:	79bb      	ldrb	r3, [r7, #6]
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d10d      	bne.n	800ef98 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800ef7c:	7bbb      	ldrb	r3, [r7, #14]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d002      	beq.n	800ef88 <GetFCntDown+0x44>
 800ef82:	7bbb      	ldrb	r3, [r7, #14]
 800ef84:	2b03      	cmp	r3, #3
 800ef86:	d103      	bne.n	800ef90 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	2202      	movs	r2, #2
 800ef8c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800ef8e:	e00d      	b.n	800efac <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	2201      	movs	r2, #1
 800ef94:	701a      	strb	r2, [r3, #0]
            break;
 800ef96:	e009      	b.n	800efac <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	2203      	movs	r2, #3
 800ef9c:	701a      	strb	r2, [r3, #0]
            break;
 800ef9e:	e005      	b.n	800efac <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800efa0:	69bb      	ldr	r3, [r7, #24]
 800efa2:	2204      	movs	r2, #4
 800efa4:	701a      	strb	r2, [r3, #0]
            break;
 800efa6:	e001      	b.n	800efac <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800efa8:	2305      	movs	r3, #5
 800efaa:	e008      	b.n	800efbe <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	7818      	ldrb	r0, [r3, #0]
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	89db      	ldrh	r3, [r3, #14]
 800efb4:	69fa      	ldr	r2, [r7, #28]
 800efb6:	4619      	mov	r1, r3
 800efb8:	f004 fc54 	bl	8013864 <LoRaMacCryptoGetFCntDown>
 800efbc:	4603      	mov	r3, r0
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3710      	adds	r7, #16
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
	...

0800efc8 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800efc8:	b5b0      	push	{r4, r5, r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	4603      	mov	r3, r0
 800efd0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800efd2:	2303      	movs	r3, #3
 800efd4:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800efd6:	4b62      	ldr	r3, [pc, #392]	; (800f160 <SwitchClass+0x198>)
 800efd8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800efdc:	2b02      	cmp	r3, #2
 800efde:	f000 80a7 	beq.w	800f130 <SwitchClass+0x168>
 800efe2:	2b02      	cmp	r3, #2
 800efe4:	f300 80b6 	bgt.w	800f154 <SwitchClass+0x18c>
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d003      	beq.n	800eff4 <SwitchClass+0x2c>
 800efec:	2b01      	cmp	r3, #1
 800efee:	f000 8091 	beq.w	800f114 <SwitchClass+0x14c>
 800eff2:	e0af      	b.n	800f154 <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800eff4:	79fb      	ldrb	r3, [r7, #7]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d107      	bne.n	800f00a <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800effa:	4b59      	ldr	r3, [pc, #356]	; (800f160 <SwitchClass+0x198>)
 800effc:	4a58      	ldr	r2, [pc, #352]	; (800f160 <SwitchClass+0x198>)
 800effe:	336c      	adds	r3, #108	; 0x6c
 800f000:	3264      	adds	r2, #100	; 0x64
 800f002:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f006:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800f00a:	79fb      	ldrb	r3, [r7, #7]
 800f00c:	2b01      	cmp	r3, #1
 800f00e:	d10c      	bne.n	800f02a <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f010:	79fb      	ldrb	r3, [r7, #7]
 800f012:	4618      	mov	r0, r3
 800f014:	f003 fb74 	bl	8012700 <LoRaMacClassBSwitchClass>
 800f018:	4603      	mov	r3, r0
 800f01a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800f01c:	7bfb      	ldrb	r3, [r7, #15]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d103      	bne.n	800f02a <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800f022:	4a4f      	ldr	r2, [pc, #316]	; (800f160 <SwitchClass+0x198>)
 800f024:	79fb      	ldrb	r3, [r7, #7]
 800f026:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800f02a:	79fb      	ldrb	r3, [r7, #7]
 800f02c:	2b02      	cmp	r3, #2
 800f02e:	f040 808c 	bne.w	800f14a <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f032:	4a4b      	ldr	r2, [pc, #300]	; (800f160 <SwitchClass+0x198>)
 800f034:	79fb      	ldrb	r3, [r7, #7]
 800f036:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f03a:	4a4a      	ldr	r2, [pc, #296]	; (800f164 <SwitchClass+0x19c>)
 800f03c:	4b49      	ldr	r3, [pc, #292]	; (800f164 <SwitchClass+0x19c>)
 800f03e:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 800f042:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 800f046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f04a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f04e:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f052:	4b44      	ldr	r3, [pc, #272]	; (800f164 <SwitchClass+0x19c>)
 800f054:	2202      	movs	r2, #2
 800f056:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f05a:	2300      	movs	r3, #0
 800f05c:	73bb      	strb	r3, [r7, #14]
 800f05e:	e049      	b.n	800f0f4 <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800f060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f064:	4a3e      	ldr	r2, [pc, #248]	; (800f160 <SwitchClass+0x198>)
 800f066:	212c      	movs	r1, #44	; 0x2c
 800f068:	fb01 f303 	mul.w	r3, r1, r3
 800f06c:	4413      	add	r3, r2
 800f06e:	33da      	adds	r3, #218	; 0xda
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d038      	beq.n	800f0e8 <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800f076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f07a:	4a39      	ldr	r2, [pc, #228]	; (800f160 <SwitchClass+0x198>)
 800f07c:	212c      	movs	r1, #44	; 0x2c
 800f07e:	fb01 f303 	mul.w	r3, r1, r3
 800f082:	4413      	add	r3, r2
 800f084:	33f0      	adds	r3, #240	; 0xf0
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4a35      	ldr	r2, [pc, #212]	; (800f160 <SwitchClass+0x198>)
 800f08a:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800f08c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f090:	4a33      	ldr	r2, [pc, #204]	; (800f160 <SwitchClass+0x198>)
 800f092:	212c      	movs	r1, #44	; 0x2c
 800f094:	fb01 f303 	mul.w	r3, r1, r3
 800f098:	4413      	add	r3, r2
 800f09a:	33f4      	adds	r3, #244	; 0xf4
 800f09c:	f993 3000 	ldrsb.w	r3, [r3]
 800f0a0:	b2da      	uxtb	r2, r3
 800f0a2:	4b2f      	ldr	r3, [pc, #188]	; (800f160 <SwitchClass+0x198>)
 800f0a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f0a8:	4b2e      	ldr	r3, [pc, #184]	; (800f164 <SwitchClass+0x19c>)
 800f0aa:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800f0ae:	4b2d      	ldr	r3, [pc, #180]	; (800f164 <SwitchClass+0x19c>)
 800f0b0:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f0b4:	4b2a      	ldr	r3, [pc, #168]	; (800f160 <SwitchClass+0x198>)
 800f0b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0b8:	4a2a      	ldr	r2, [pc, #168]	; (800f164 <SwitchClass+0x19c>)
 800f0ba:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f0be:	4b28      	ldr	r3, [pc, #160]	; (800f160 <SwitchClass+0x198>)
 800f0c0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800f0c4:	4b27      	ldr	r3, [pc, #156]	; (800f164 <SwitchClass+0x19c>)
 800f0c6:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f0ca:	4b25      	ldr	r3, [pc, #148]	; (800f160 <SwitchClass+0x198>)
 800f0cc:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800f0d0:	4b24      	ldr	r3, [pc, #144]	; (800f164 <SwitchClass+0x19c>)
 800f0d2:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f0d6:	4b23      	ldr	r3, [pc, #140]	; (800f164 <SwitchClass+0x19c>)
 800f0d8:	2203      	movs	r2, #3
 800f0da:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f0de:	4b21      	ldr	r3, [pc, #132]	; (800f164 <SwitchClass+0x19c>)
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800f0e6:	e009      	b.n	800f0fc <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f0e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	73bb      	strb	r3, [r7, #14]
 800f0f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	ddb1      	ble.n	800f060 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800f0fc:	4b19      	ldr	r3, [pc, #100]	; (800f164 <SwitchClass+0x19c>)
 800f0fe:	2200      	movs	r2, #0
 800f100:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f104:	4b18      	ldr	r3, [pc, #96]	; (800f168 <SwitchClass+0x1a0>)
 800f106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f108:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800f10a:	f001 f9f5 	bl	80104f8 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800f10e:	2300      	movs	r3, #0
 800f110:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f112:	e01a      	b.n	800f14a <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f114:	79fb      	ldrb	r3, [r7, #7]
 800f116:	4618      	mov	r0, r3
 800f118:	f003 faf2 	bl	8012700 <LoRaMacClassBSwitchClass>
 800f11c:	4603      	mov	r3, r0
 800f11e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800f120:	7bfb      	ldrb	r3, [r7, #15]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d113      	bne.n	800f14e <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f126:	4a0e      	ldr	r2, [pc, #56]	; (800f160 <SwitchClass+0x198>)
 800f128:	79fb      	ldrb	r3, [r7, #7]
 800f12a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 800f12e:	e00e      	b.n	800f14e <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f130:	79fb      	ldrb	r3, [r7, #7]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d10d      	bne.n	800f152 <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f136:	4a0a      	ldr	r2, [pc, #40]	; (800f160 <SwitchClass+0x198>)
 800f138:	79fb      	ldrb	r3, [r7, #7]
 800f13a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f13e:	4b0a      	ldr	r3, [pc, #40]	; (800f168 <SwitchClass+0x1a0>)
 800f140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f142:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f144:	2300      	movs	r3, #0
 800f146:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f148:	e003      	b.n	800f152 <SwitchClass+0x18a>
            break;
 800f14a:	bf00      	nop
 800f14c:	e002      	b.n	800f154 <SwitchClass+0x18c>
            break;
 800f14e:	bf00      	nop
 800f150:	e000      	b.n	800f154 <SwitchClass+0x18c>
            break;
 800f152:	bf00      	nop
        }
    }

    return status;
 800f154:	7bfb      	ldrb	r3, [r7, #15]
}
 800f156:	4618      	mov	r0, r3
 800f158:	3710      	adds	r7, #16
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bdb0      	pop	{r4, r5, r7, pc}
 800f15e:	bf00      	nop
 800f160:	20000b90 	.word	0x20000b90
 800f164:	20000670 	.word	0x20000670
 800f168:	0801dc4c 	.word	0x0801dc4c

0800f16c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b086      	sub	sp, #24
 800f170:	af00      	add	r7, sp, #0
 800f172:	4603      	mov	r3, r0
 800f174:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f176:	4b10      	ldr	r3, [pc, #64]	; (800f1b8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f178:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f17c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800f17e:	79fb      	ldrb	r3, [r7, #7]
 800f180:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f182:	230d      	movs	r3, #13
 800f184:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f186:	4b0c      	ldr	r3, [pc, #48]	; (800f1b8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f188:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d001      	beq.n	800f194 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f190:	230e      	movs	r3, #14
 800f192:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f194:	4b08      	ldr	r3, [pc, #32]	; (800f1b8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f19a:	f107 0210 	add.w	r2, r7, #16
 800f19e:	4611      	mov	r1, r2
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f005 f9c2 	bl	801452a <RegionGetPhyParam>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	b2db      	uxtb	r3, r3
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3718      	adds	r7, #24
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}
 800f1b6:	bf00      	nop
 800f1b8:	20000b90 	.word	0x20000b90

0800f1bc <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	71fb      	strb	r3, [r7, #7]
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	71bb      	strb	r3, [r7, #6]
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f1d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7ff ffc6 	bl	800f16c <GetMaxAppPayloadWithoutFOptsLength>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f1e4:	79fb      	ldrb	r3, [r7, #7]
 800f1e6:	b29a      	uxth	r2, r3
 800f1e8:	797b      	ldrb	r3, [r7, #5]
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	4413      	add	r3, r2
 800f1ee:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f1f0:	89ba      	ldrh	r2, [r7, #12]
 800f1f2:	89fb      	ldrh	r3, [r7, #14]
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d804      	bhi.n	800f202 <ValidatePayloadLength+0x46>
 800f1f8:	89bb      	ldrh	r3, [r7, #12]
 800f1fa:	2bff      	cmp	r3, #255	; 0xff
 800f1fc:	d801      	bhi.n	800f202 <ValidatePayloadLength+0x46>
    {
        return true;
 800f1fe:	2301      	movs	r3, #1
 800f200:	e000      	b.n	800f204 <ValidatePayloadLength+0x48>
    }
    return false;
 800f202:	2300      	movs	r3, #0
}
 800f204:	4618      	mov	r0, r3
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f20c:	b590      	push	{r4, r7, lr}
 800f20e:	b0a5      	sub	sp, #148	; 0x94
 800f210:	af02      	add	r7, sp, #8
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	4608      	mov	r0, r1
 800f216:	4611      	mov	r1, r2
 800f218:	461a      	mov	r2, r3
 800f21a:	4603      	mov	r3, r0
 800f21c:	70fb      	strb	r3, [r7, #3]
 800f21e:	460b      	mov	r3, r1
 800f220:	70bb      	strb	r3, [r7, #2]
 800f222:	4613      	mov	r3, r2
 800f224:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f226:	2300      	movs	r3, #0
 800f228:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800f22c:	2300      	movs	r3, #0
 800f22e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f232:	2300      	movs	r3, #0
 800f234:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800f238:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f000 84ab 	beq.w	800fb98 <ProcessMacCommands+0x98c>
 800f242:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800f246:	2b01      	cmp	r3, #1
 800f248:	f040 84ac 	bne.w	800fba4 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f24c:	f000 bca4 	b.w	800fb98 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f250:	78fb      	ldrb	r3, [r7, #3]
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	4413      	add	r3, r2
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	4618      	mov	r0, r3
 800f25a:	f003 fd35 	bl	8012cc8 <LoRaMacCommandsGetCmdSize>
 800f25e:	4603      	mov	r3, r0
 800f260:	461a      	mov	r2, r3
 800f262:	78fb      	ldrb	r3, [r7, #3]
 800f264:	441a      	add	r2, r3
 800f266:	78bb      	ldrb	r3, [r7, #2]
 800f268:	429a      	cmp	r2, r3
 800f26a:	f300 849d 	bgt.w	800fba8 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f26e:	78fb      	ldrb	r3, [r7, #3]
 800f270:	1c5a      	adds	r2, r3, #1
 800f272:	70fa      	strb	r2, [r7, #3]
 800f274:	461a      	mov	r2, r3
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	4413      	add	r3, r2
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	3b02      	subs	r3, #2
 800f27e:	2b11      	cmp	r3, #17
 800f280:	f200 8494 	bhi.w	800fbac <ProcessMacCommands+0x9a0>
 800f284:	a201      	add	r2, pc, #4	; (adr r2, 800f28c <ProcessMacCommands+0x80>)
 800f286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f28a:	bf00      	nop
 800f28c:	0800f2d5 	.word	0x0800f2d5
 800f290:	0800f317 	.word	0x0800f317
 800f294:	0800f493 	.word	0x0800f493
 800f298:	0800f4d1 	.word	0x0800f4d1
 800f29c:	0800f5c9 	.word	0x0800f5c9
 800f2a0:	0800f619 	.word	0x0800f619
 800f2a4:	0800f6d5 	.word	0x0800f6d5
 800f2a8:	0800f72b 	.word	0x0800f72b
 800f2ac:	0800f80f 	.word	0x0800f80f
 800f2b0:	0800fbad 	.word	0x0800fbad
 800f2b4:	0800fbad 	.word	0x0800fbad
 800f2b8:	0800f8b9 	.word	0x0800f8b9
 800f2bc:	0800fbad 	.word	0x0800fbad
 800f2c0:	0800fbad 	.word	0x0800fbad
 800f2c4:	0800f9d9 	.word	0x0800f9d9
 800f2c8:	0800fa0d 	.word	0x0800fa0d
 800f2cc:	0800fa9d 	.word	0x0800fa9d
 800f2d0:	0800fb13 	.word	0x0800fb13
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f2d4:	2004      	movs	r0, #4
 800f2d6:	f003 fecf 	bl	8013078 <LoRaMacConfirmQueueIsCmdActive>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f000 845b 	beq.w	800fb98 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f2e2:	2104      	movs	r1, #4
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	f003 fe3b 	bl	8012f60 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f2ea:	78fb      	ldrb	r3, [r7, #3]
 800f2ec:	1c5a      	adds	r2, r3, #1
 800f2ee:	70fa      	strb	r2, [r7, #3]
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	781a      	ldrb	r2, [r3, #0]
 800f2f8:	4bb0      	ldr	r3, [pc, #704]	; (800f5bc <ProcessMacCommands+0x3b0>)
 800f2fa:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f2fe:	78fb      	ldrb	r3, [r7, #3]
 800f300:	1c5a      	adds	r2, r3, #1
 800f302:	70fa      	strb	r2, [r7, #3]
 800f304:	461a      	mov	r2, r3
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4413      	add	r3, r2
 800f30a:	781a      	ldrb	r2, [r3, #0]
 800f30c:	4bab      	ldr	r3, [pc, #684]	; (800f5bc <ProcessMacCommands+0x3b0>)
 800f30e:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
                }
                break;
 800f312:	f000 bc41 	b.w	800fb98 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f316:	2300      	movs	r3, #0
 800f318:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f31c:	2300      	movs	r3, #0
 800f31e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800f322:	2300      	movs	r3, #0
 800f324:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f328:	2300      	movs	r3, #0
 800f32a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 800f32e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f332:	f083 0301 	eor.w	r3, r3, #1
 800f336:	b2db      	uxtb	r3, r3
 800f338:	2b00      	cmp	r3, #0
 800f33a:	f000 80a5 	beq.w	800f488 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 800f33e:	2301      	movs	r3, #1
 800f340:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800f344:	78fb      	ldrb	r3, [r7, #3]
 800f346:	3b01      	subs	r3, #1
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	4413      	add	r3, r2
 800f34c:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f34e:	4b9c      	ldr	r3, [pc, #624]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f350:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800f354:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f358:	4b99      	ldr	r3, [pc, #612]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f35a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f35e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f362:	4b97      	ldr	r3, [pc, #604]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f364:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f368:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f36c:	4b94      	ldr	r3, [pc, #592]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f36e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f372:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f376:	4b92      	ldr	r3, [pc, #584]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f378:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800f37c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f380:	4b8f      	ldr	r3, [pc, #572]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f382:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800f386:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800f388:	4b8d      	ldr	r3, [pc, #564]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f38a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d008      	beq.n	800f3a4 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f392:	78ba      	ldrb	r2, [r7, #2]
 800f394:	78fb      	ldrb	r3, [r7, #3]
 800f396:	1ad3      	subs	r3, r2, r3
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	3301      	adds	r3, #1
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800f3a2:	e002      	b.n	800f3aa <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800f3a4:	2305      	movs	r3, #5
 800f3a6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f3aa:	4b85      	ldr	r3, [pc, #532]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f3ac:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f3b0:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800f3b4:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800f3b8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f3bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f3c0:	9301      	str	r3, [sp, #4]
 800f3c2:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800f3c6:	9300      	str	r3, [sp, #0]
 800f3c8:	4623      	mov	r3, r4
 800f3ca:	f005 f9b1 	bl	8014730 <RegionLinkAdrReq>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800f3d4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f3d8:	f003 0307 	and.w	r3, r3, #7
 800f3dc:	2b07      	cmp	r3, #7
 800f3de:	d119      	bne.n	800f414 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800f3e0:	4b77      	ldr	r3, [pc, #476]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f3e2:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800f3e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	da03      	bge.n	800f3f6 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800f3ee:	4b74      	ldr	r3, [pc, #464]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f3f6:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800f3fa:	4b71      	ldr	r3, [pc, #452]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f3fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f400:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800f404:	4b6e      	ldr	r3, [pc, #440]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f40a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800f40e:	4b6c      	ldr	r3, [pc, #432]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f410:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f414:	2300      	movs	r3, #0
 800f416:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f41a:	e00b      	b.n	800f434 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f41c:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800f420:	2201      	movs	r2, #1
 800f422:	4619      	mov	r1, r3
 800f424:	2003      	movs	r0, #3
 800f426:	f003 faff 	bl	8012a28 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f42a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800f42e:	3301      	adds	r3, #1
 800f430:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f434:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800f438:	4a62      	ldr	r2, [pc, #392]	; (800f5c4 <ProcessMacCommands+0x3b8>)
 800f43a:	fba2 2303 	umull	r2, r3, r2, r3
 800f43e:	089b      	lsrs	r3, r3, #2
 800f440:	b2db      	uxtb	r3, r3
 800f442:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800f446:	429a      	cmp	r2, r3
 800f448:	d3e8      	bcc.n	800f41c <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800f44a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f44e:	78fb      	ldrb	r3, [r7, #3]
 800f450:	4413      	add	r3, r2
 800f452:	b2db      	uxtb	r3, r3
 800f454:	3b01      	subs	r3, #1
 800f456:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800f458:	78fa      	ldrb	r2, [r7, #3]
 800f45a:	78bb      	ldrb	r3, [r7, #2]
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d20a      	bcs.n	800f476 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800f460:	78fb      	ldrb	r3, [r7, #3]
 800f462:	1c5a      	adds	r2, r3, #1
 800f464:	70fa      	strb	r2, [r7, #3]
 800f466:	461a      	mov	r2, r3
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	4413      	add	r3, r2
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	2b03      	cmp	r3, #3
 800f470:	f43f af68 	beq.w	800f344 <ProcessMacCommands+0x138>
 800f474:	e000      	b.n	800f478 <ProcessMacCommands+0x26c>
                            break;
 800f476:	bf00      	nop

                    if( macIndex < commandsSize )
 800f478:	78fa      	ldrb	r2, [r7, #3]
 800f47a:	78bb      	ldrb	r3, [r7, #2]
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d206      	bcs.n	800f48e <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800f480:	78fb      	ldrb	r3, [r7, #3]
 800f482:	3b01      	subs	r3, #1
 800f484:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800f486:	e002      	b.n	800f48e <ProcessMacCommands+0x282>
                    macIndex += 4;
 800f488:	78fb      	ldrb	r3, [r7, #3]
 800f48a:	3304      	adds	r3, #4
 800f48c:	70fb      	strb	r3, [r7, #3]
                break;
 800f48e:	bf00      	nop
 800f490:	e382      	b.n	800fb98 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f492:	78fb      	ldrb	r3, [r7, #3]
 800f494:	1c5a      	adds	r2, r3, #1
 800f496:	70fa      	strb	r2, [r7, #3]
 800f498:	461a      	mov	r2, r3
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4413      	add	r3, r2
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	f003 030f 	and.w	r3, r3, #15
 800f4a4:	b2da      	uxtb	r2, r3
 800f4a6:	4b46      	ldr	r3, [pc, #280]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f4a8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f4ac:	4b44      	ldr	r3, [pc, #272]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f4ae:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	4093      	lsls	r3, r2
 800f4b8:	b29a      	uxth	r2, r3
 800f4ba:	4b41      	ldr	r3, [pc, #260]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f4bc:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f4c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	2004      	movs	r0, #4
 800f4ca:	f003 faad 	bl	8012a28 <LoRaMacCommandsAddCmd>
                break;
 800f4ce:	e363      	b.n	800fb98 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f4d0:	2307      	movs	r3, #7
 800f4d2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f4d6:	78fb      	ldrb	r3, [r7, #3]
 800f4d8:	687a      	ldr	r2, [r7, #4]
 800f4da:	4413      	add	r3, r2
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	091b      	lsrs	r3, r3, #4
 800f4e0:	b2db      	uxtb	r3, r3
 800f4e2:	b25b      	sxtb	r3, r3
 800f4e4:	f003 0307 	and.w	r3, r3, #7
 800f4e8:	b25b      	sxtb	r3, r3
 800f4ea:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f4ee:	78fb      	ldrb	r3, [r7, #3]
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	4413      	add	r3, r2
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	b25b      	sxtb	r3, r3
 800f4f8:	f003 030f 	and.w	r3, r3, #15
 800f4fc:	b25b      	sxtb	r3, r3
 800f4fe:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800f502:	78fb      	ldrb	r3, [r7, #3]
 800f504:	3301      	adds	r3, #1
 800f506:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f508:	78fb      	ldrb	r3, [r7, #3]
 800f50a:	1c5a      	adds	r2, r3, #1
 800f50c:	70fa      	strb	r2, [r7, #3]
 800f50e:	461a      	mov	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	4413      	add	r3, r2
 800f514:	781b      	ldrb	r3, [r3, #0]
 800f516:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f518:	78fb      	ldrb	r3, [r7, #3]
 800f51a:	1c5a      	adds	r2, r3, #1
 800f51c:	70fa      	strb	r2, [r7, #3]
 800f51e:	461a      	mov	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4413      	add	r3, r2
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	021a      	lsls	r2, r3, #8
 800f528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f52a:	4313      	orrs	r3, r2
 800f52c:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f52e:	78fb      	ldrb	r3, [r7, #3]
 800f530:	1c5a      	adds	r2, r3, #1
 800f532:	70fa      	strb	r2, [r7, #3]
 800f534:	461a      	mov	r2, r3
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4413      	add	r3, r2
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	041a      	lsls	r2, r3, #16
 800f53e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f540:	4313      	orrs	r3, r2
 800f542:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800f544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f546:	2264      	movs	r2, #100	; 0x64
 800f548:	fb02 f303 	mul.w	r3, r2, r3
 800f54c:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f54e:	4b1c      	ldr	r3, [pc, #112]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f550:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f554:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f558:	4611      	mov	r1, r2
 800f55a:	4618      	mov	r0, r3
 800f55c:	f005 f90f 	bl	801477e <RegionRxParamSetupReq>
 800f560:	4603      	mov	r3, r0
 800f562:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f566:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f56a:	f003 0307 	and.w	r3, r3, #7
 800f56e:	2b07      	cmp	r3, #7
 800f570:	d117      	bne.n	800f5a2 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f572:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f576:	b2da      	uxtb	r2, r3
 800f578:	4b11      	ldr	r3, [pc, #68]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f57a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f57e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f582:	b2da      	uxtb	r2, r3
 800f584:	4b0e      	ldr	r3, [pc, #56]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f586:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f58a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f58c:	4a0c      	ldr	r2, [pc, #48]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f58e:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f592:	4a0b      	ldr	r2, [pc, #44]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f594:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f596:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800f59a:	b2da      	uxtb	r2, r3
 800f59c:	4b08      	ldr	r3, [pc, #32]	; (800f5c0 <ProcessMacCommands+0x3b4>)
 800f59e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800f5a2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f5a6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f5aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	2005      	movs	r0, #5
 800f5b4:	f003 fa38 	bl	8012a28 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800f5b8:	bf00      	nop
 800f5ba:	e2ed      	b.n	800fb98 <ProcessMacCommands+0x98c>
 800f5bc:	20000670 	.word	0x20000670
 800f5c0:	20000b90 	.word	0x20000b90
 800f5c4:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f5c8:	23ff      	movs	r3, #255	; 0xff
 800f5ca:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f5ce:	4bb7      	ldr	r3, [pc, #732]	; (800f8ac <ProcessMacCommands+0x6a0>)
 800f5d0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d00d      	beq.n	800f5f4 <ProcessMacCommands+0x3e8>
 800f5d8:	4bb4      	ldr	r3, [pc, #720]	; (800f8ac <ProcessMacCommands+0x6a0>)
 800f5da:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d007      	beq.n	800f5f4 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f5e4:	4bb1      	ldr	r3, [pc, #708]	; (800f8ac <ProcessMacCommands+0x6a0>)
 800f5e6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4798      	blx	r3
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f5f4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800f5f8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f5fc:	787b      	ldrb	r3, [r7, #1]
 800f5fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f602:	b2db      	uxtb	r3, r3
 800f604:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f608:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f60c:	2202      	movs	r2, #2
 800f60e:	4619      	mov	r1, r3
 800f610:	2006      	movs	r0, #6
 800f612:	f003 fa09 	bl	8012a28 <LoRaMacCommandsAddCmd>
                break;
 800f616:	e2bf      	b.n	800fb98 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f618:	2303      	movs	r3, #3
 800f61a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f61e:	78fb      	ldrb	r3, [r7, #3]
 800f620:	1c5a      	adds	r2, r3, #1
 800f622:	70fa      	strb	r2, [r7, #3]
 800f624:	461a      	mov	r2, r3
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	4413      	add	r3, r2
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	b25b      	sxtb	r3, r3
 800f62e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800f632:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f636:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f638:	78fb      	ldrb	r3, [r7, #3]
 800f63a:	1c5a      	adds	r2, r3, #1
 800f63c:	70fa      	strb	r2, [r7, #3]
 800f63e:	461a      	mov	r2, r3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	4413      	add	r3, r2
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f648:	78fb      	ldrb	r3, [r7, #3]
 800f64a:	1c5a      	adds	r2, r3, #1
 800f64c:	70fa      	strb	r2, [r7, #3]
 800f64e:	461a      	mov	r2, r3
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4413      	add	r3, r2
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	021a      	lsls	r2, r3, #8
 800f658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65a:	4313      	orrs	r3, r2
 800f65c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f65e:	78fb      	ldrb	r3, [r7, #3]
 800f660:	1c5a      	adds	r2, r3, #1
 800f662:	70fa      	strb	r2, [r7, #3]
 800f664:	461a      	mov	r2, r3
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	4413      	add	r3, r2
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	041a      	lsls	r2, r3, #16
 800f66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f670:	4313      	orrs	r3, r2
 800f672:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f676:	2264      	movs	r2, #100	; 0x64
 800f678:	fb02 f303 	mul.w	r3, r2, r3
 800f67c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f67e:	2300      	movs	r3, #0
 800f680:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f682:	78fb      	ldrb	r3, [r7, #3]
 800f684:	1c5a      	adds	r2, r3, #1
 800f686:	70fa      	strb	r2, [r7, #3]
 800f688:	461a      	mov	r2, r3
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4413      	add	r3, r2
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	b25b      	sxtb	r3, r3
 800f692:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f696:	4b86      	ldr	r3, [pc, #536]	; (800f8b0 <ProcessMacCommands+0x6a4>)
 800f698:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f69c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f6a0:	4611      	mov	r1, r2
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f005 f886 	bl	80147b4 <RegionNewChannelReq>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	b2db      	uxtb	r3, r3
 800f6ac:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f6b0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f6b4:	b25b      	sxtb	r3, r3
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	db0a      	blt.n	800f6d0 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 800f6ba:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f6be:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f6c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f6c6:	2201      	movs	r2, #1
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	2007      	movs	r0, #7
 800f6cc:	f003 f9ac 	bl	8012a28 <LoRaMacCommandsAddCmd>
                }
                break;
 800f6d0:	bf00      	nop
 800f6d2:	e261      	b.n	800fb98 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f6d4:	78fb      	ldrb	r3, [r7, #3]
 800f6d6:	1c5a      	adds	r2, r3, #1
 800f6d8:	70fa      	strb	r2, [r7, #3]
 800f6da:	461a      	mov	r2, r3
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4413      	add	r3, r2
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	f003 030f 	and.w	r3, r3, #15
 800f6e6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f6ea:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d104      	bne.n	800f6fc <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800f6f2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f6fc:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f704:	fb02 f303 	mul.w	r3, r2, r3
 800f708:	461a      	mov	r2, r3
 800f70a:	4b69      	ldr	r3, [pc, #420]	; (800f8b0 <ProcessMacCommands+0x6a4>)
 800f70c:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f70e:	4b68      	ldr	r3, [pc, #416]	; (800f8b0 <ProcessMacCommands+0x6a4>)
 800f710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f712:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f716:	4a66      	ldr	r2, [pc, #408]	; (800f8b0 <ProcessMacCommands+0x6a4>)
 800f718:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f71a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f71e:	2200      	movs	r2, #0
 800f720:	4619      	mov	r1, r3
 800f722:	2008      	movs	r0, #8
 800f724:	f003 f980 	bl	8012a28 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800f728:	e236      	b.n	800fb98 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f72a:	78fb      	ldrb	r3, [r7, #3]
 800f72c:	1c5a      	adds	r2, r3, #1
 800f72e:	70fa      	strb	r2, [r7, #3]
 800f730:	461a      	mov	r2, r3
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	4413      	add	r3, r2
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f73c:	2300      	movs	r3, #0
 800f73e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f742:	2300      	movs	r3, #0
 800f744:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f748:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f74c:	f003 0320 	and.w	r3, r3, #32
 800f750:	2b00      	cmp	r3, #0
 800f752:	d002      	beq.n	800f75a <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f754:	2301      	movs	r3, #1
 800f756:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f75a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f75e:	f003 0310 	and.w	r3, r3, #16
 800f762:	2b00      	cmp	r3, #0
 800f764:	d002      	beq.n	800f76c <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f766:	2301      	movs	r3, #1
 800f768:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f76c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f770:	f003 030f 	and.w	r3, r3, #15
 800f774:	b2db      	uxtb	r3, r3
 800f776:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f77a:	4b4d      	ldr	r3, [pc, #308]	; (800f8b0 <ProcessMacCommands+0x6a4>)
 800f77c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f780:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f784:	4611      	mov	r1, r2
 800f786:	4618      	mov	r0, r3
 800f788:	f005 f82f 	bl	80147ea <RegionTxParamSetupReq>
 800f78c:	4603      	mov	r3, r0
 800f78e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f792:	d03a      	beq.n	800f80a <ProcessMacCommands+0x5fe>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f794:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f798:	4b45      	ldr	r3, [pc, #276]	; (800f8b0 <ProcessMacCommands+0x6a4>)
 800f79a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f79e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f7a2:	4b43      	ldr	r3, [pc, #268]	; (800f8b0 <ProcessMacCommands+0x6a4>)
 800f7a4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f7a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	4b41      	ldr	r3, [pc, #260]	; (800f8b4 <ProcessMacCommands+0x6a8>)
 800f7b0:	5c9b      	ldrb	r3, [r3, r2]
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7f1 f80a 	bl	80007cc <__aeabi_ui2f>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	4a3d      	ldr	r2, [pc, #244]	; (800f8b0 <ProcessMacCommands+0x6a4>)
 800f7bc:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f7be:	2302      	movs	r3, #2
 800f7c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f7c4:	4b3a      	ldr	r3, [pc, #232]	; (800f8b0 <ProcessMacCommands+0x6a4>)
 800f7c6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f7ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f7ce:	4b38      	ldr	r3, [pc, #224]	; (800f8b0 <ProcessMacCommands+0x6a4>)
 800f7d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f7d4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f7d8:	4611      	mov	r1, r2
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f004 fea5 	bl	801452a <RegionGetPhyParam>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e6:	b25a      	sxtb	r2, r3
 800f7e8:	4b31      	ldr	r3, [pc, #196]	; (800f8b0 <ProcessMacCommands+0x6a4>)
 800f7ea:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	bfb8      	it	lt
 800f7f2:	4613      	movlt	r3, r2
 800f7f4:	b25a      	sxtb	r2, r3
 800f7f6:	4b2e      	ldr	r3, [pc, #184]	; (800f8b0 <ProcessMacCommands+0x6a4>)
 800f7f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f7fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f800:	2200      	movs	r2, #0
 800f802:	4619      	mov	r1, r3
 800f804:	2009      	movs	r0, #9
 800f806:	f003 f90f 	bl	8012a28 <LoRaMacCommandsAddCmd>
                }
                break;
 800f80a:	bf00      	nop
 800f80c:	e1c4      	b.n	800fb98 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f80e:	2303      	movs	r3, #3
 800f810:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f814:	78fb      	ldrb	r3, [r7, #3]
 800f816:	1c5a      	adds	r2, r3, #1
 800f818:	70fa      	strb	r2, [r7, #3]
 800f81a:	461a      	mov	r2, r3
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	4413      	add	r3, r2
 800f820:	781b      	ldrb	r3, [r3, #0]
 800f822:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f826:	78fb      	ldrb	r3, [r7, #3]
 800f828:	1c5a      	adds	r2, r3, #1
 800f82a:	70fa      	strb	r2, [r7, #3]
 800f82c:	461a      	mov	r2, r3
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4413      	add	r3, r2
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f836:	78fb      	ldrb	r3, [r7, #3]
 800f838:	1c5a      	adds	r2, r3, #1
 800f83a:	70fa      	strb	r2, [r7, #3]
 800f83c:	461a      	mov	r2, r3
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4413      	add	r3, r2
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	021a      	lsls	r2, r3, #8
 800f846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f848:	4313      	orrs	r3, r2
 800f84a:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f84c:	78fb      	ldrb	r3, [r7, #3]
 800f84e:	1c5a      	adds	r2, r3, #1
 800f850:	70fa      	strb	r2, [r7, #3]
 800f852:	461a      	mov	r2, r3
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	4413      	add	r3, r2
 800f858:	781b      	ldrb	r3, [r3, #0]
 800f85a:	041a      	lsls	r2, r3, #16
 800f85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85e:	4313      	orrs	r3, r2
 800f860:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f864:	2264      	movs	r2, #100	; 0x64
 800f866:	fb02 f303 	mul.w	r3, r2, r3
 800f86a:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f86c:	4b10      	ldr	r3, [pc, #64]	; (800f8b0 <ProcessMacCommands+0x6a4>)
 800f86e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f872:	f107 0220 	add.w	r2, r7, #32
 800f876:	4611      	mov	r1, r2
 800f878:	4618      	mov	r0, r3
 800f87a:	f004 ffd1 	bl	8014820 <RegionDlChannelReq>
 800f87e:	4603      	mov	r3, r0
 800f880:	b2db      	uxtb	r3, r3
 800f882:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f886:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f88a:	b25b      	sxtb	r3, r3
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	db0a      	blt.n	800f8a6 <ProcessMacCommands+0x69a>
                {
                    macCmdPayload[0] = status;
 800f890:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f894:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f898:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f89c:	2201      	movs	r2, #1
 800f89e:	4619      	mov	r1, r3
 800f8a0:	200a      	movs	r0, #10
 800f8a2:	f003 f8c1 	bl	8012a28 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 800f8a6:	bf00      	nop
 800f8a8:	e176      	b.n	800fb98 <ProcessMacCommands+0x98c>
 800f8aa:	bf00      	nop
 800f8ac:	20000670 	.word	0x20000670
 800f8b0:	20000b90 	.word	0x20000b90
 800f8b4:	0801db80 	.word	0x0801db80
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f8b8:	2009      	movs	r0, #9
 800f8ba:	f003 fbdd 	bl	8013078 <LoRaMacConfirmQueueIsCmdActive>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f000 8084 	beq.w	800f9ce <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f8c6:	2109      	movs	r1, #9
 800f8c8:	2000      	movs	r0, #0
 800f8ca:	f003 fb49 	bl	8012f60 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800f8ce:	f107 0318 	add.w	r3, r7, #24
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	601a      	str	r2, [r3, #0]
 800f8d6:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f8d8:	f107 0310 	add.w	r3, r7, #16
 800f8dc:	2200      	movs	r2, #0
 800f8de:	601a      	str	r2, [r3, #0]
 800f8e0:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f8e2:	f107 0308 	add.w	r3, r7, #8
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	601a      	str	r2, [r3, #0]
 800f8ea:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f8ec:	78fb      	ldrb	r3, [r7, #3]
 800f8ee:	1c5a      	adds	r2, r3, #1
 800f8f0:	70fa      	strb	r2, [r7, #3]
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f8fc:	78fb      	ldrb	r3, [r7, #3]
 800f8fe:	1c5a      	adds	r2, r3, #1
 800f900:	70fa      	strb	r2, [r7, #3]
 800f902:	461a      	mov	r2, r3
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	4413      	add	r3, r2
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	021a      	lsls	r2, r3, #8
 800f90c:	69bb      	ldr	r3, [r7, #24]
 800f90e:	4313      	orrs	r3, r2
 800f910:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f912:	78fb      	ldrb	r3, [r7, #3]
 800f914:	1c5a      	adds	r2, r3, #1
 800f916:	70fa      	strb	r2, [r7, #3]
 800f918:	461a      	mov	r2, r3
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	4413      	add	r3, r2
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	041a      	lsls	r2, r3, #16
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	4313      	orrs	r3, r2
 800f926:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f928:	78fb      	ldrb	r3, [r7, #3]
 800f92a:	1c5a      	adds	r2, r3, #1
 800f92c:	70fa      	strb	r2, [r7, #3]
 800f92e:	461a      	mov	r2, r3
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	4413      	add	r3, r2
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	061a      	lsls	r2, r3, #24
 800f938:	69bb      	ldr	r3, [r7, #24]
 800f93a:	4313      	orrs	r3, r2
 800f93c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f93e:	78fb      	ldrb	r3, [r7, #3]
 800f940:	1c5a      	adds	r2, r3, #1
 800f942:	70fa      	strb	r2, [r7, #3]
 800f944:	461a      	mov	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	4413      	add	r3, r2
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	b21b      	sxth	r3, r3
 800f94e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f950:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f954:	461a      	mov	r2, r3
 800f956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f95a:	fb02 f303 	mul.w	r3, r2, r3
 800f95e:	121b      	asrs	r3, r3, #8
 800f960:	b21b      	sxth	r3, r3
 800f962:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f964:	f107 0310 	add.w	r3, r7, #16
 800f968:	f107 0218 	add.w	r2, r7, #24
 800f96c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f970:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f974:	693a      	ldr	r2, [r7, #16]
 800f976:	4b8f      	ldr	r3, [pc, #572]	; (800fbb4 <ProcessMacCommands+0x9a8>)
 800f978:	4413      	add	r3, r2
 800f97a:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f97c:	f107 0308 	add.w	r3, r7, #8
 800f980:	4618      	mov	r0, r3
 800f982:	f00b ffad 	bl	801b8e0 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f986:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800f98a:	4b8b      	ldr	r3, [pc, #556]	; (800fbb8 <ProcessMacCommands+0x9ac>)
 800f98c:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f990:	9200      	str	r2, [sp, #0]
 800f992:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800f996:	f107 0210 	add.w	r2, r7, #16
 800f99a:	ca06      	ldmia	r2, {r1, r2}
 800f99c:	f00b ff39 	bl	801b812 <SysTimeSub>
 800f9a0:	f107 0010 	add.w	r0, r7, #16
 800f9a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f9a6:	9300      	str	r3, [sp, #0]
 800f9a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9aa:	f107 0208 	add.w	r2, r7, #8
 800f9ae:	ca06      	ldmia	r2, {r1, r2}
 800f9b0:	f00b fef6 	bl	801b7a0 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f9b4:	f107 0310 	add.w	r3, r7, #16
 800f9b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f9bc:	f00b ff62 	bl	801b884 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f9c0:	f002 fedc 	bl	801277c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f9c4:	4b7c      	ldr	r3, [pc, #496]	; (800fbb8 <ProcessMacCommands+0x9ac>)
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 800f9cc:	e0e4      	b.n	800fb98 <ProcessMacCommands+0x98c>
                }
                else
                {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f9ce:	4b7a      	ldr	r3, [pc, #488]	; (800fbb8 <ProcessMacCommands+0x9ac>)
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */
                }
                break;
 800f9d6:	e0df      	b.n	800fb98 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f9d8:	200c      	movs	r0, #12
 800f9da:	f003 fb4d 	bl	8013078 <LoRaMacConfirmQueueIsCmdActive>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	f000 80d9 	beq.w	800fb98 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f9e6:	210c      	movs	r1, #12
 800f9e8:	2000      	movs	r0, #0
 800f9ea:	f003 fab9 	bl	8012f60 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f9ee:	4b72      	ldr	r3, [pc, #456]	; (800fbb8 <ProcessMacCommands+0x9ac>)
 800f9f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800f9f4:	2b04      	cmp	r3, #4
 800f9f6:	f000 80cf 	beq.w	800fb98 <ProcessMacCommands+0x98c>
 800f9fa:	4b6f      	ldr	r3, [pc, #444]	; (800fbb8 <ProcessMacCommands+0x9ac>)
 800f9fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800fa00:	2b05      	cmp	r3, #5
 800fa02:	f000 80c9 	beq.w	800fb98 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800fa06:	f002 fe9a 	bl	801273e <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800fa0a:	e0c5      	b.n	800fb98 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800fa0c:	2303      	movs	r3, #3
 800fa0e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800fa12:	2300      	movs	r3, #0
 800fa14:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800fa16:	78fb      	ldrb	r3, [r7, #3]
 800fa18:	1c5a      	adds	r2, r3, #1
 800fa1a:	70fa      	strb	r2, [r7, #3]
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4413      	add	r3, r2
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800fa26:	78fb      	ldrb	r3, [r7, #3]
 800fa28:	1c5a      	adds	r2, r3, #1
 800fa2a:	70fa      	strb	r2, [r7, #3]
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	4413      	add	r3, r2
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	021b      	lsls	r3, r3, #8
 800fa36:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800fa3c:	78fb      	ldrb	r3, [r7, #3]
 800fa3e:	1c5a      	adds	r2, r3, #1
 800fa40:	70fa      	strb	r2, [r7, #3]
 800fa42:	461a      	mov	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	4413      	add	r3, r2
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	041b      	lsls	r3, r3, #16
 800fa4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fa4e:	4313      	orrs	r3, r2
 800fa50:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800fa52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa54:	2264      	movs	r2, #100	; 0x64
 800fa56:	fb02 f303 	mul.w	r3, r2, r3
 800fa5a:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800fa5c:	78fb      	ldrb	r3, [r7, #3]
 800fa5e:	1c5a      	adds	r2, r3, #1
 800fa60:	70fa      	strb	r2, [r7, #3]
 800fa62:	461a      	mov	r2, r3
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	4413      	add	r3, r2
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	f003 030f 	and.w	r3, r3, #15
 800fa6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800fa72:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fa76:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f002 fe66 	bl	801274a <LoRaMacClassBPingSlotChannelReq>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800fa84:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800fa88:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800fa8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fa90:	2201      	movs	r2, #1
 800fa92:	4619      	mov	r1, r3
 800fa94:	2011      	movs	r0, #17
 800fa96:	f002 ffc7 	bl	8012a28 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 800fa9a:	e07d      	b.n	800fb98 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800fa9c:	200d      	movs	r0, #13
 800fa9e:	f003 faeb 	bl	8013078 <LoRaMacConfirmQueueIsCmdActive>
 800faa2:	4603      	mov	r3, r0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d077      	beq.n	800fb98 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800faa8:	210d      	movs	r1, #13
 800faaa:	2000      	movs	r0, #0
 800faac:	f003 fa58 	bl	8012f60 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800fab0:	2300      	movs	r3, #0
 800fab2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800fab6:	2300      	movs	r3, #0
 800fab8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800fabc:	78fb      	ldrb	r3, [r7, #3]
 800fabe:	1c5a      	adds	r2, r3, #1
 800fac0:	70fa      	strb	r2, [r7, #3]
 800fac2:	461a      	mov	r2, r3
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	4413      	add	r3, r2
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800face:	78fb      	ldrb	r3, [r7, #3]
 800fad0:	1c5a      	adds	r2, r3, #1
 800fad2:	70fa      	strb	r2, [r7, #3]
 800fad4:	461a      	mov	r2, r3
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4413      	add	r3, r2
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	021b      	lsls	r3, r3, #8
 800fade:	b21a      	sxth	r2, r3
 800fae0:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800fae4:	4313      	orrs	r3, r2
 800fae6:	b21b      	sxth	r3, r3
 800fae8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800faec:	78fb      	ldrb	r3, [r7, #3]
 800faee:	1c5a      	adds	r2, r3, #1
 800faf0:	70fa      	strb	r2, [r7, #3]
 800faf2:	461a      	mov	r2, r3
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	4413      	add	r3, r2
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800fafe:	4b2f      	ldr	r3, [pc, #188]	; (800fbbc <ProcessMacCommands+0x9b0>)
 800fb00:	681a      	ldr	r2, [r3, #0]
 800fb02:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800fb06:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f002 fe29 	bl	8012762 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800fb10:	e042      	b.n	800fb98 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800fb12:	2300      	movs	r3, #0
 800fb14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800fb18:	78fb      	ldrb	r3, [r7, #3]
 800fb1a:	1c5a      	adds	r2, r3, #1
 800fb1c:	70fa      	strb	r2, [r7, #3]
 800fb1e:	461a      	mov	r2, r3
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4413      	add	r3, r2
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800fb2a:	78fb      	ldrb	r3, [r7, #3]
 800fb2c:	1c5a      	adds	r2, r3, #1
 800fb2e:	70fa      	strb	r2, [r7, #3]
 800fb30:	461a      	mov	r2, r3
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	4413      	add	r3, r2
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	021b      	lsls	r3, r3, #8
 800fb3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fb3e:	4313      	orrs	r3, r2
 800fb40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800fb44:	78fb      	ldrb	r3, [r7, #3]
 800fb46:	1c5a      	adds	r2, r3, #1
 800fb48:	70fa      	strb	r2, [r7, #3]
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4413      	add	r3, r2
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	041b      	lsls	r3, r3, #16
 800fb54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800fb5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb62:	2264      	movs	r2, #100	; 0x64
 800fb64:	fb02 f303 	mul.w	r3, r2, r3
 800fb68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800fb6c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800fb70:	f002 fe0a 	bl	8012788 <LoRaMacClassBBeaconFreqReq>
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d003      	beq.n	800fb82 <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800fb80:	e002      	b.n	800fb88 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800fb82:	2300      	movs	r3, #0
 800fb84:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800fb88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fb8c:	2201      	movs	r2, #1
 800fb8e:	4619      	mov	r1, r3
 800fb90:	2013      	movs	r0, #19
 800fb92:	f002 ff49 	bl	8012a28 <LoRaMacCommandsAddCmd>
                }
                break;
 800fb96:	bf00      	nop
    while( macIndex < commandsSize )
 800fb98:	78fa      	ldrb	r2, [r7, #3]
 800fb9a:	78bb      	ldrb	r3, [r7, #2]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	f4ff ab57 	bcc.w	800f250 <ProcessMacCommands+0x44>
 800fba2:	e004      	b.n	800fbae <ProcessMacCommands+0x9a2>
        return;
 800fba4:	bf00      	nop
 800fba6:	e002      	b.n	800fbae <ProcessMacCommands+0x9a2>
            return;
 800fba8:	bf00      	nop
 800fbaa:	e000      	b.n	800fbae <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800fbac:	bf00      	nop
        }
    }
}
 800fbae:	378c      	adds	r7, #140	; 0x8c
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd90      	pop	{r4, r7, pc}
 800fbb4:	12d53d80 	.word	0x12d53d80
 800fbb8:	20000670 	.word	0x20000670
 800fbbc:	20001740 	.word	0x20001740

0800fbc0 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b08e      	sub	sp, #56	; 0x38
 800fbc4:	af02      	add	r7, sp, #8
 800fbc6:	60f8      	str	r0, [r7, #12]
 800fbc8:	607a      	str	r2, [r7, #4]
 800fbca:	461a      	mov	r2, r3
 800fbcc:	460b      	mov	r3, r1
 800fbce:	72fb      	strb	r3, [r7, #11]
 800fbd0:	4613      	mov	r3, r2
 800fbd2:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fbd4:	2303      	movs	r3, #3
 800fbd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fbda:	4b66      	ldr	r3, [pc, #408]	; (800fd74 <Send+0x1b4>)
 800fbdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fbe0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800fbe4:	4b63      	ldr	r3, [pc, #396]	; (800fd74 <Send+0x1b4>)
 800fbe6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fbea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fbee:	4b61      	ldr	r3, [pc, #388]	; (800fd74 <Send+0x1b4>)
 800fbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbf2:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fbf4:	4b5f      	ldr	r3, [pc, #380]	; (800fd74 <Send+0x1b4>)
 800fbf6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d101      	bne.n	800fc02 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800fbfe:	2307      	movs	r3, #7
 800fc00:	e0b4      	b.n	800fd6c <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800fc02:	4b5c      	ldr	r3, [pc, #368]	; (800fd74 <Send+0x1b4>)
 800fc04:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d102      	bne.n	800fc12 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800fc0c:	4b59      	ldr	r3, [pc, #356]	; (800fd74 <Send+0x1b4>)
 800fc0e:	2200      	movs	r2, #0
 800fc10:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800fc12:	2300      	movs	r3, #0
 800fc14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800fc18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fc1c:	f36f 0303 	bfc	r3, #0, #4
 800fc20:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800fc24:	4b53      	ldr	r3, [pc, #332]	; (800fd74 <Send+0x1b4>)
 800fc26:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800fc2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fc2e:	f362 13c7 	bfi	r3, r2, #7, #1
 800fc32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fc36:	4b4f      	ldr	r3, [pc, #316]	; (800fd74 <Send+0x1b4>)
 800fc38:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d106      	bne.n	800fc4e <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800fc40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fc44:	f043 0310 	orr.w	r3, r3, #16
 800fc48:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800fc4c:	e005      	b.n	800fc5a <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800fc4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fc52:	f36f 1304 	bfc	r3, #4, #1
 800fc56:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800fc5a:	4b46      	ldr	r3, [pc, #280]	; (800fd74 <Send+0x1b4>)
 800fc5c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d005      	beq.n	800fc70 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800fc64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fc68:	f043 0320 	orr.w	r3, r3, #32
 800fc6c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 800fc70:	2301      	movs	r3, #1
 800fc72:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800fc74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fc78:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fc7c:	b2db      	uxtb	r3, r3
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	bf14      	ite	ne
 800fc82:	2301      	movne	r3, #1
 800fc84:	2300      	moveq	r3, #0
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fc8a:	4b3a      	ldr	r3, [pc, #232]	; (800fd74 <Send+0x1b4>)
 800fc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc8e:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800fc90:	4b39      	ldr	r3, [pc, #228]	; (800fd78 <Send+0x1b8>)
 800fc92:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800fc96:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800fc98:	4b37      	ldr	r3, [pc, #220]	; (800fd78 <Send+0x1b8>)
 800fc9a:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800fc9e:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fca0:	4b34      	ldr	r3, [pc, #208]	; (800fd74 <Send+0x1b4>)
 800fca2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fca6:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fcaa:	4b32      	ldr	r3, [pc, #200]	; (800fd74 <Send+0x1b4>)
 800fcac:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800fcb0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800fcb4:	4b2f      	ldr	r3, [pc, #188]	; (800fd74 <Send+0x1b4>)
 800fcb6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800fcba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fcbe:	4b2d      	ldr	r3, [pc, #180]	; (800fd74 <Send+0x1b4>)
 800fcc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fcc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800fcc8:	4b2a      	ldr	r3, [pc, #168]	; (800fd74 <Send+0x1b4>)
 800fcca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fcce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800fcd2:	f107 0014 	add.w	r0, r7, #20
 800fcd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fcda:	9300      	str	r3, [sp, #0]
 800fcdc:	4b27      	ldr	r3, [pc, #156]	; (800fd7c <Send+0x1bc>)
 800fcde:	4a28      	ldr	r2, [pc, #160]	; (800fd80 <Send+0x1c0>)
 800fce0:	4928      	ldr	r1, [pc, #160]	; (800fd84 <Send+0x1c4>)
 800fce2:	f002 fbcb 	bl	801247c <LoRaMacAdrCalcNext>
 800fce6:	4603      	mov	r3, r0
 800fce8:	461a      	mov	r2, r3
 800fcea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fcee:	f362 1386 	bfi	r3, r2, #6, #1
 800fcf2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800fcf6:	7afa      	ldrb	r2, [r7, #11]
 800fcf8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800fcfc:	893b      	ldrh	r3, [r7, #8]
 800fcfe:	9300      	str	r3, [sp, #0]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	68f8      	ldr	r0, [r7, #12]
 800fd04:	f000 fc42 	bl	801058c <PrepareFrame>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800fd0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d003      	beq.n	800fd1e <Send+0x15e>
 800fd16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd1a:	2b0a      	cmp	r3, #10
 800fd1c:	d107      	bne.n	800fd2e <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800fd1e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fd22:	4618      	mov	r0, r3
 800fd24:	f000 f96e 	bl	8010004 <ScheduleTx>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800fd2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d00a      	beq.n	800fd4c <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800fd36:	4a0f      	ldr	r2, [pc, #60]	; (800fd74 <Send+0x1b4>)
 800fd38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fd3c:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800fd40:	4a0c      	ldr	r2, [pc, #48]	; (800fd74 <Send+0x1b4>)
 800fd42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fd46:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800fd4a:	e00d      	b.n	800fd68 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800fd4c:	4b09      	ldr	r3, [pc, #36]	; (800fd74 <Send+0x1b4>)
 800fd4e:	2200      	movs	r2, #0
 800fd50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800fd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd56:	4a07      	ldr	r2, [pc, #28]	; (800fd74 <Send+0x1b4>)
 800fd58:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800fd5a:	f002 fedd 	bl	8012b18 <LoRaMacCommandsRemoveNoneStickyCmds>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d001      	beq.n	800fd68 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fd64:	2313      	movs	r3, #19
 800fd66:	e001      	b.n	800fd6c <Send+0x1ac>
        }
    }
    return status;
 800fd68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3730      	adds	r7, #48	; 0x30
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}
 800fd74:	20000b90 	.word	0x20000b90
 800fd78:	20000670 	.word	0x20000670
 800fd7c:	20000bf0 	.word	0x20000bf0
 800fd80:	20000bc8 	.word	0x20000bc8
 800fd84:	20000bc9 	.word	0x20000bc9

0800fd88 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	4603      	mov	r3, r0
 800fd90:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800fd92:	2300      	movs	r3, #0
 800fd94:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800fd96:	2300      	movs	r3, #0
 800fd98:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800fd9e:	79fb      	ldrb	r3, [r7, #7]
 800fda0:	2bff      	cmp	r3, #255	; 0xff
 800fda2:	d129      	bne.n	800fdf8 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800fda4:	2000      	movs	r0, #0
 800fda6:	f7ff f90f 	bl	800efc8 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fdaa:	4b1a      	ldr	r3, [pc, #104]	; (800fe14 <SendReJoinReq+0x8c>)
 800fdac:	2200      	movs	r2, #0
 800fdae:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fdb2:	4b18      	ldr	r3, [pc, #96]	; (800fe14 <SendReJoinReq+0x8c>)
 800fdb4:	4a18      	ldr	r2, [pc, #96]	; (800fe18 <SendReJoinReq+0x90>)
 800fdb6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800fdba:	4b16      	ldr	r3, [pc, #88]	; (800fe14 <SendReJoinReq+0x8c>)
 800fdbc:	22ff      	movs	r2, #255	; 0xff
 800fdbe:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800fdc2:	7b3b      	ldrb	r3, [r7, #12]
 800fdc4:	f36f 1347 	bfc	r3, #5, #3
 800fdc8:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800fdca:	7b3a      	ldrb	r2, [r7, #12]
 800fdcc:	4b11      	ldr	r3, [pc, #68]	; (800fe14 <SendReJoinReq+0x8c>)
 800fdce:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fdd2:	f7fc f879 	bl	800bec8 <SecureElementGetJoinEui>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	2208      	movs	r2, #8
 800fdda:	4619      	mov	r1, r3
 800fddc:	480f      	ldr	r0, [pc, #60]	; (800fe1c <SendReJoinReq+0x94>)
 800fdde:	f008 f99e 	bl	801811e <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800fde2:	f7fc f84f 	bl	800be84 <SecureElementGetDevEui>
 800fde6:	4603      	mov	r3, r0
 800fde8:	2208      	movs	r2, #8
 800fdea:	4619      	mov	r1, r3
 800fdec:	480c      	ldr	r0, [pc, #48]	; (800fe20 <SendReJoinReq+0x98>)
 800fdee:	f008 f996 	bl	801811e <memcpy1>

            allowDelayedTx = false;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	73fb      	strb	r3, [r7, #15]

            break;
 800fdf6:	e002      	b.n	800fdfe <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fdf8:	2302      	movs	r3, #2
 800fdfa:	73bb      	strb	r3, [r7, #14]
            break;
 800fdfc:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800fdfe:	7bfb      	ldrb	r3, [r7, #15]
 800fe00:	4618      	mov	r0, r3
 800fe02:	f000 f8ff 	bl	8010004 <ScheduleTx>
 800fe06:	4603      	mov	r3, r0
 800fe08:	73bb      	strb	r3, [r7, #14]
    return status;
 800fe0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3710      	adds	r7, #16
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	20000670 	.word	0x20000670
 800fe18:	20000672 	.word	0x20000672
 800fe1c:	2000077e 	.word	0x2000077e
 800fe20:	20000786 	.word	0x20000786

0800fe24 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fe28:	f002 fc38 	bl	801269c <LoRaMacClassBIsBeaconExpected>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d001      	beq.n	800fe36 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800fe32:	230e      	movs	r3, #14
 800fe34:	e013      	b.n	800fe5e <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fe36:	4b0b      	ldr	r3, [pc, #44]	; (800fe64 <CheckForClassBCollision+0x40>)
 800fe38:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fe3c:	2b01      	cmp	r3, #1
 800fe3e:	d10d      	bne.n	800fe5c <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fe40:	f002 fc33 	bl	80126aa <LoRaMacClassBIsPingExpected>
 800fe44:	4603      	mov	r3, r0
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d001      	beq.n	800fe4e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fe4a:	230f      	movs	r3, #15
 800fe4c:	e007      	b.n	800fe5e <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fe4e:	f002 fc33 	bl	80126b8 <LoRaMacClassBIsMulticastExpected>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d001      	beq.n	800fe5c <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fe58:	230f      	movs	r3, #15
 800fe5a:	e000      	b.n	800fe5e <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800fe5c:	2300      	movs	r3, #0
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	20000b90 	.word	0x20000b90

0800fe68 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800fe68:	b590      	push	{r4, r7, lr}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fe6e:	4b2d      	ldr	r3, [pc, #180]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800fe70:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fe74:	4b2b      	ldr	r3, [pc, #172]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800fe76:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fe7a:	4b2a      	ldr	r3, [pc, #168]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800fe7c:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800fe80:	4b28      	ldr	r3, [pc, #160]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800fe82:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800fe86:	4b27      	ldr	r3, [pc, #156]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800fe88:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fe8c:	b25b      	sxtb	r3, r3
 800fe8e:	f004 fd2b 	bl	80148e8 <RegionApplyDrOffset>
 800fe92:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fe94:	b259      	sxtb	r1, r3
 800fe96:	4b23      	ldr	r3, [pc, #140]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800fe98:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fe9c:	4b21      	ldr	r3, [pc, #132]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800fe9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fea0:	4821      	ldr	r0, [pc, #132]	; (800ff28 <ComputeRxWindowParameters+0xc0>)
 800fea2:	9000      	str	r0, [sp, #0]
 800fea4:	4620      	mov	r0, r4
 800fea6:	f004 fbe1 	bl	801466c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800feaa:	4b1e      	ldr	r3, [pc, #120]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800feac:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800feb0:	4b1c      	ldr	r3, [pc, #112]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800feb2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800feb6:	b259      	sxtb	r1, r3
 800feb8:	4b1a      	ldr	r3, [pc, #104]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800feba:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800febe:	4b19      	ldr	r3, [pc, #100]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800fec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fec2:	4c1a      	ldr	r4, [pc, #104]	; (800ff2c <ComputeRxWindowParameters+0xc4>)
 800fec4:	9400      	str	r4, [sp, #0]
 800fec6:	f004 fbd1 	bl	801466c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800feca:	4b16      	ldr	r3, [pc, #88]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800fecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fece:	4a18      	ldr	r2, [pc, #96]	; (800ff30 <ComputeRxWindowParameters+0xc8>)
 800fed0:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fed4:	4413      	add	r3, r2
 800fed6:	4a16      	ldr	r2, [pc, #88]	; (800ff30 <ComputeRxWindowParameters+0xc8>)
 800fed8:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fedc:	4b11      	ldr	r3, [pc, #68]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800fede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fee0:	4a13      	ldr	r2, [pc, #76]	; (800ff30 <ComputeRxWindowParameters+0xc8>)
 800fee2:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 800fee6:	4413      	add	r3, r2
 800fee8:	4a11      	ldr	r2, [pc, #68]	; (800ff30 <ComputeRxWindowParameters+0xc8>)
 800feea:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800feee:	4b0d      	ldr	r3, [pc, #52]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800fef0:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d111      	bne.n	800ff1c <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fef8:	4b0a      	ldr	r3, [pc, #40]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800fefa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fefc:	4a0c      	ldr	r2, [pc, #48]	; (800ff30 <ComputeRxWindowParameters+0xc8>)
 800fefe:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800ff02:	4413      	add	r3, r2
 800ff04:	4a0a      	ldr	r2, [pc, #40]	; (800ff30 <ComputeRxWindowParameters+0xc8>)
 800ff06:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ff0a:	4b06      	ldr	r3, [pc, #24]	; (800ff24 <ComputeRxWindowParameters+0xbc>)
 800ff0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff0e:	4a08      	ldr	r2, [pc, #32]	; (800ff30 <ComputeRxWindowParameters+0xc8>)
 800ff10:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 800ff14:	4413      	add	r3, r2
 800ff16:	4a06      	ldr	r2, [pc, #24]	; (800ff30 <ComputeRxWindowParameters+0xc8>)
 800ff18:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800ff1c:	bf00      	nop
 800ff1e:	3704      	adds	r7, #4
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd90      	pop	{r4, r7, pc}
 800ff24:	20000b90 	.word	0x20000b90
 800ff28:	20000a28 	.word	0x20000a28
 800ff2c:	20000a40 	.word	0x20000a40
 800ff30:	20000670 	.word	0x20000670

0800ff34 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ff3e:	4b13      	ldr	r3, [pc, #76]	; (800ff8c <VerifyTxFrame+0x58>)
 800ff40:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d01b      	beq.n	800ff80 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ff48:	1d3b      	adds	r3, r7, #4
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f002 fe2a 	bl	8012ba4 <LoRaMacCommandsGetSizeSerializedCmds>
 800ff50:	4603      	mov	r3, r0
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d001      	beq.n	800ff5a <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ff56:	2313      	movs	r3, #19
 800ff58:	e013      	b.n	800ff82 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800ff5a:	4b0d      	ldr	r3, [pc, #52]	; (800ff90 <VerifyTxFrame+0x5c>)
 800ff5c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800ff60:	4a0a      	ldr	r2, [pc, #40]	; (800ff8c <VerifyTxFrame+0x58>)
 800ff62:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800ff66:	687a      	ldr	r2, [r7, #4]
 800ff68:	b2d2      	uxtb	r2, r2
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7ff f926 	bl	800f1bc <ValidatePayloadLength>
 800ff70:	4603      	mov	r3, r0
 800ff72:	f083 0301 	eor.w	r3, r3, #1
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d001      	beq.n	800ff80 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800ff7c:	2308      	movs	r3, #8
 800ff7e:	e000      	b.n	800ff82 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800ff80:	2300      	movs	r3, #0
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3708      	adds	r7, #8
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	20000b90 	.word	0x20000b90
 800ff90:	20000670 	.word	0x20000670

0800ff94 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800ff9a:	4b18      	ldr	r3, [pc, #96]	; (800fffc <SerializeTxFrame+0x68>)
 800ff9c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d002      	beq.n	800ffaa <SerializeTxFrame+0x16>
 800ffa4:	2b04      	cmp	r3, #4
 800ffa6:	d011      	beq.n	800ffcc <SerializeTxFrame+0x38>
 800ffa8:	e021      	b.n	800ffee <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ffaa:	4815      	ldr	r0, [pc, #84]	; (8010000 <SerializeTxFrame+0x6c>)
 800ffac:	f004 f92f 	bl	801420e <LoRaMacSerializerJoinRequest>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ffb4:	79fb      	ldrb	r3, [r7, #7]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d001      	beq.n	800ffbe <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ffba:	2311      	movs	r3, #17
 800ffbc:	e01a      	b.n	800fff4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ffbe:	4b0f      	ldr	r3, [pc, #60]	; (800fffc <SerializeTxFrame+0x68>)
 800ffc0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ffc4:	b29a      	uxth	r2, r3
 800ffc6:	4b0d      	ldr	r3, [pc, #52]	; (800fffc <SerializeTxFrame+0x68>)
 800ffc8:	801a      	strh	r2, [r3, #0]
            break;
 800ffca:	e012      	b.n	800fff2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800ffcc:	480c      	ldr	r0, [pc, #48]	; (8010000 <SerializeTxFrame+0x6c>)
 800ffce:	f004 f9a0 	bl	8014312 <LoRaMacSerializerData>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ffd6:	79fb      	ldrb	r3, [r7, #7]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d001      	beq.n	800ffe0 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ffdc:	2311      	movs	r3, #17
 800ffde:	e009      	b.n	800fff4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ffe0:	4b06      	ldr	r3, [pc, #24]	; (800fffc <SerializeTxFrame+0x68>)
 800ffe2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ffe6:	b29a      	uxth	r2, r3
 800ffe8:	4b04      	ldr	r3, [pc, #16]	; (800fffc <SerializeTxFrame+0x68>)
 800ffea:	801a      	strh	r2, [r3, #0]
            break;
 800ffec:	e001      	b.n	800fff2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ffee:	2303      	movs	r3, #3
 800fff0:	e000      	b.n	800fff4 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800fff2:	2300      	movs	r3, #0
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3708      	adds	r7, #8
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	20000670 	.word	0x20000670
 8010000:	20000778 	.word	0x20000778

08010004 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b090      	sub	sp, #64	; 0x40
 8010008:	af02      	add	r7, sp, #8
 801000a:	4603      	mov	r3, r0
 801000c:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801000e:	2303      	movs	r3, #3
 8010010:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010014:	f7ff ff06 	bl	800fe24 <CheckForClassBCollision>
 8010018:	4603      	mov	r3, r0
 801001a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801001e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010022:	2b00      	cmp	r3, #0
 8010024:	d002      	beq.n	801002c <ScheduleTx+0x28>
    {
        return status;
 8010026:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801002a:	e08f      	b.n	801014c <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 801002c:	f000 f8f4 	bl	8010218 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010030:	f7ff ffb0 	bl	800ff94 <SerializeTxFrame>
 8010034:	4603      	mov	r3, r0
 8010036:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801003a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801003e:	2b00      	cmp	r3, #0
 8010040:	d002      	beq.n	8010048 <ScheduleTx+0x44>
    {
        return status;
 8010042:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010046:	e081      	b.n	801014c <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010048:	4b42      	ldr	r3, [pc, #264]	; (8010154 <ScheduleTx+0x150>)
 801004a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801004c:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801004e:	4b41      	ldr	r3, [pc, #260]	; (8010154 <ScheduleTx+0x150>)
 8010050:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010054:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010056:	4b3f      	ldr	r3, [pc, #252]	; (8010154 <ScheduleTx+0x150>)
 8010058:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 801005c:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 801005e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010062:	4618      	mov	r0, r3
 8010064:	f00b fc74 	bl	801b950 <SysTimeGetMcuTime>
 8010068:	4638      	mov	r0, r7
 801006a:	4b3a      	ldr	r3, [pc, #232]	; (8010154 <ScheduleTx+0x150>)
 801006c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8010070:	9200      	str	r2, [sp, #0]
 8010072:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8010076:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801007a:	ca06      	ldmia	r2, {r1, r2}
 801007c:	f00b fbc9 	bl	801b812 <SysTimeSub>
 8010080:	f107 0320 	add.w	r3, r7, #32
 8010084:	463a      	mov	r2, r7
 8010086:	e892 0003 	ldmia.w	r2, {r0, r1}
 801008a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 801008e:	4b31      	ldr	r3, [pc, #196]	; (8010154 <ScheduleTx+0x150>)
 8010090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010092:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010094:	2300      	movs	r3, #0
 8010096:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 801009a:	2301      	movs	r3, #1
 801009c:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 801009e:	4b2e      	ldr	r3, [pc, #184]	; (8010158 <ScheduleTx+0x154>)
 80100a0:	881b      	ldrh	r3, [r3, #0]
 80100a2:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80100a4:	4b2b      	ldr	r3, [pc, #172]	; (8010154 <ScheduleTx+0x150>)
 80100a6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d104      	bne.n	80100b8 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80100ae:	2301      	movs	r3, #1
 80100b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 80100b4:	2300      	movs	r3, #0
 80100b6:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80100b8:	4b26      	ldr	r3, [pc, #152]	; (8010154 <ScheduleTx+0x150>)
 80100ba:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80100be:	f107 0114 	add.w	r1, r7, #20
 80100c2:	4b26      	ldr	r3, [pc, #152]	; (801015c <ScheduleTx+0x158>)
 80100c4:	9300      	str	r3, [sp, #0]
 80100c6:	4b26      	ldr	r3, [pc, #152]	; (8010160 <ScheduleTx+0x15c>)
 80100c8:	4a26      	ldr	r2, [pc, #152]	; (8010164 <ScheduleTx+0x160>)
 80100ca:	f004 fbea 	bl	80148a2 <RegionNextChannel>
 80100ce:	4603      	mov	r3, r0
 80100d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 80100d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d022      	beq.n	8010122 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80100dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100e0:	2b0b      	cmp	r3, #11
 80100e2:	d11b      	bne.n	801011c <ScheduleTx+0x118>
 80100e4:	7bfb      	ldrb	r3, [r7, #15]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d018      	beq.n	801011c <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 80100ea:	4b1b      	ldr	r3, [pc, #108]	; (8010158 <ScheduleTx+0x154>)
 80100ec:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d011      	beq.n	8010118 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80100f4:	4b18      	ldr	r3, [pc, #96]	; (8010158 <ScheduleTx+0x154>)
 80100f6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80100fa:	f043 0320 	orr.w	r3, r3, #32
 80100fe:	4a16      	ldr	r2, [pc, #88]	; (8010158 <ScheduleTx+0x154>)
 8010100:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010104:	4b14      	ldr	r3, [pc, #80]	; (8010158 <ScheduleTx+0x154>)
 8010106:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 801010a:	4619      	mov	r1, r3
 801010c:	4816      	ldr	r0, [pc, #88]	; (8010168 <ScheduleTx+0x164>)
 801010e:	f00c f9bf 	bl	801c490 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8010112:	4815      	ldr	r0, [pc, #84]	; (8010168 <ScheduleTx+0x164>)
 8010114:	f00c f8de 	bl	801c2d4 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8010118:	2300      	movs	r3, #0
 801011a:	e017      	b.n	801014c <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 801011c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010120:	e014      	b.n	801014c <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010122:	f7ff fea1 	bl	800fe68 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010126:	f7ff ff05 	bl	800ff34 <VerifyTxFrame>
 801012a:	4603      	mov	r3, r0
 801012c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010130:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010134:	2b00      	cmp	r3, #0
 8010136:	d002      	beq.n	801013e <ScheduleTx+0x13a>
    {
        return status;
 8010138:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801013c:	e006      	b.n	801014c <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801013e:	4b06      	ldr	r3, [pc, #24]	; (8010158 <ScheduleTx+0x154>)
 8010140:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 8010144:	4618      	mov	r0, r3
 8010146:	f000 fb3d 	bl	80107c4 <SendFrameOnChannel>
 801014a:	4603      	mov	r3, r0
}
 801014c:	4618      	mov	r0, r3
 801014e:	3738      	adds	r7, #56	; 0x38
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	20000b90 	.word	0x20000b90
 8010158:	20000670 	.word	0x20000670
 801015c:	20000bc0 	.word	0x20000bc0
 8010160:	20000b08 	.word	0x20000b08
 8010164:	20000a8f 	.word	0x20000a8f
 8010168:	200009d8 	.word	0x200009d8

0801016c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b084      	sub	sp, #16
 8010170:	af00      	add	r7, sp, #0
 8010172:	4603      	mov	r3, r0
 8010174:	460a      	mov	r2, r1
 8010176:	71fb      	strb	r3, [r7, #7]
 8010178:	4613      	mov	r3, r2
 801017a:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 801017c:	2312      	movs	r3, #18
 801017e:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010180:	2300      	movs	r3, #0
 8010182:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010184:	4b22      	ldr	r3, [pc, #136]	; (8010210 <SecureFrame+0xa4>)
 8010186:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801018a:	2b00      	cmp	r3, #0
 801018c:	d002      	beq.n	8010194 <SecureFrame+0x28>
 801018e:	2b04      	cmp	r3, #4
 8010190:	d011      	beq.n	80101b6 <SecureFrame+0x4a>
 8010192:	e036      	b.n	8010202 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010194:	481f      	ldr	r0, [pc, #124]	; (8010214 <SecureFrame+0xa8>)
 8010196:	f003 fc09 	bl	80139ac <LoRaMacCryptoPrepareJoinRequest>
 801019a:	4603      	mov	r3, r0
 801019c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801019e:	7bfb      	ldrb	r3, [r7, #15]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d001      	beq.n	80101a8 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80101a4:	2311      	movs	r3, #17
 80101a6:	e02f      	b.n	8010208 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80101a8:	4b19      	ldr	r3, [pc, #100]	; (8010210 <SecureFrame+0xa4>)
 80101aa:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80101ae:	b29a      	uxth	r2, r3
 80101b0:	4b17      	ldr	r3, [pc, #92]	; (8010210 <SecureFrame+0xa4>)
 80101b2:	801a      	strh	r2, [r3, #0]
            break;
 80101b4:	e027      	b.n	8010206 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80101b6:	f107 0308 	add.w	r3, r7, #8
 80101ba:	4618      	mov	r0, r3
 80101bc:	f003 fb3a 	bl	8013834 <LoRaMacCryptoGetFCntUp>
 80101c0:	4603      	mov	r3, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d001      	beq.n	80101ca <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80101c6:	2312      	movs	r3, #18
 80101c8:	e01e      	b.n	8010208 <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80101ca:	4b11      	ldr	r3, [pc, #68]	; (8010210 <SecureFrame+0xa4>)
 80101cc:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d002      	beq.n	80101da <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	3b01      	subs	r3, #1
 80101d8:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80101da:	68b8      	ldr	r0, [r7, #8]
 80101dc:	79ba      	ldrb	r2, [r7, #6]
 80101de:	79f9      	ldrb	r1, [r7, #7]
 80101e0:	4b0c      	ldr	r3, [pc, #48]	; (8010214 <SecureFrame+0xa8>)
 80101e2:	f003 fcf5 	bl	8013bd0 <LoRaMacCryptoSecureMessage>
 80101e6:	4603      	mov	r3, r0
 80101e8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80101ea:	7bfb      	ldrb	r3, [r7, #15]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d001      	beq.n	80101f4 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80101f0:	2311      	movs	r3, #17
 80101f2:	e009      	b.n	8010208 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80101f4:	4b06      	ldr	r3, [pc, #24]	; (8010210 <SecureFrame+0xa4>)
 80101f6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80101fa:	b29a      	uxth	r2, r3
 80101fc:	4b04      	ldr	r3, [pc, #16]	; (8010210 <SecureFrame+0xa4>)
 80101fe:	801a      	strh	r2, [r3, #0]
            break;
 8010200:	e001      	b.n	8010206 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010202:	2303      	movs	r3, #3
 8010204:	e000      	b.n	8010208 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8010206:	2300      	movs	r3, #0
}
 8010208:	4618      	mov	r0, r3
 801020a:	3710      	adds	r7, #16
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}
 8010210:	20000670 	.word	0x20000670
 8010214:	20000778 	.word	0x20000778

08010218 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010218:	b480      	push	{r7}
 801021a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 801021c:	4b09      	ldr	r3, [pc, #36]	; (8010244 <CalculateBackOff+0x2c>)
 801021e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010220:	2b00      	cmp	r3, #0
 8010222:	d10a      	bne.n	801023a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010224:	4b07      	ldr	r3, [pc, #28]	; (8010244 <CalculateBackOff+0x2c>)
 8010226:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 801022a:	3b01      	subs	r3, #1
 801022c:	4a06      	ldr	r2, [pc, #24]	; (8010248 <CalculateBackOff+0x30>)
 801022e:	f8d2 2420 	ldr.w	r2, [r2, #1056]	; 0x420
 8010232:	fb02 f303 	mul.w	r3, r2, r3
 8010236:	4a03      	ldr	r2, [pc, #12]	; (8010244 <CalculateBackOff+0x2c>)
 8010238:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 801023a:	bf00      	nop
 801023c:	46bd      	mov	sp, r7
 801023e:	bc80      	pop	{r7}
 8010240:	4770      	bx	lr
 8010242:	bf00      	nop
 8010244:	20000b90 	.word	0x20000b90
 8010248:	20000670 	.word	0x20000670

0801024c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	af00      	add	r7, sp, #0
 8010252:	4603      	mov	r3, r0
 8010254:	7139      	strb	r1, [r7, #4]
 8010256:	71fb      	strb	r3, [r7, #7]
 8010258:	4613      	mov	r3, r2
 801025a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 801025c:	79fb      	ldrb	r3, [r7, #7]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d002      	beq.n	8010268 <RemoveMacCommands+0x1c>
 8010262:	79fb      	ldrb	r3, [r7, #7]
 8010264:	2b01      	cmp	r3, #1
 8010266:	d10d      	bne.n	8010284 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010268:	79bb      	ldrb	r3, [r7, #6]
 801026a:	2b01      	cmp	r3, #1
 801026c:	d108      	bne.n	8010280 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801026e:	793b      	ldrb	r3, [r7, #4]
 8010270:	f003 0320 	and.w	r3, r3, #32
 8010274:	b2db      	uxtb	r3, r3
 8010276:	2b00      	cmp	r3, #0
 8010278:	d004      	beq.n	8010284 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801027a:	f002 fc71 	bl	8012b60 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801027e:	e001      	b.n	8010284 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010280:	f002 fc6e 	bl	8012b60 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010284:	bf00      	nop
 8010286:	3708      	adds	r7, #8
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <ResetMacParameters>:

static void ResetMacParameters( void )
{
 801028c:	b5b0      	push	{r4, r5, r7, lr}
 801028e:	b090      	sub	sp, #64	; 0x40
 8010290:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010292:	4b70      	ldr	r3, [pc, #448]	; (8010454 <ResetMacParameters+0x1c8>)
 8010294:	2200      	movs	r2, #0
 8010296:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 801029a:	4b6e      	ldr	r3, [pc, #440]	; (8010454 <ResetMacParameters+0x1c8>)
 801029c:	2200      	movs	r2, #0
 801029e:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80102a0:	4b6d      	ldr	r3, [pc, #436]	; (8010458 <ResetMacParameters+0x1cc>)
 80102a2:	2200      	movs	r2, #0
 80102a4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80102a8:	4b6b      	ldr	r3, [pc, #428]	; (8010458 <ResetMacParameters+0x1cc>)
 80102aa:	2200      	movs	r2, #0
 80102ac:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 80102b0:	4b69      	ldr	r3, [pc, #420]	; (8010458 <ResetMacParameters+0x1cc>)
 80102b2:	2200      	movs	r2, #0
 80102b4:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80102b8:	4b66      	ldr	r3, [pc, #408]	; (8010454 <ResetMacParameters+0x1c8>)
 80102ba:	2200      	movs	r2, #0
 80102bc:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80102c0:	4b64      	ldr	r3, [pc, #400]	; (8010454 <ResetMacParameters+0x1c8>)
 80102c2:	2201      	movs	r2, #1
 80102c4:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80102c8:	4b62      	ldr	r3, [pc, #392]	; (8010454 <ResetMacParameters+0x1c8>)
 80102ca:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 80102ce:	4b61      	ldr	r3, [pc, #388]	; (8010454 <ResetMacParameters+0x1c8>)
 80102d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80102d4:	4b5f      	ldr	r3, [pc, #380]	; (8010454 <ResetMacParameters+0x1c8>)
 80102d6:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 80102da:	4b5e      	ldr	r3, [pc, #376]	; (8010454 <ResetMacParameters+0x1c8>)
 80102dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80102e0:	4b5c      	ldr	r3, [pc, #368]	; (8010454 <ResetMacParameters+0x1c8>)
 80102e2:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 80102e6:	4b5b      	ldr	r3, [pc, #364]	; (8010454 <ResetMacParameters+0x1c8>)
 80102e8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80102ec:	4b59      	ldr	r3, [pc, #356]	; (8010454 <ResetMacParameters+0x1c8>)
 80102ee:	4a59      	ldr	r2, [pc, #356]	; (8010454 <ResetMacParameters+0x1c8>)
 80102f0:	3364      	adds	r3, #100	; 0x64
 80102f2:	32a8      	adds	r2, #168	; 0xa8
 80102f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102f8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80102fc:	4b55      	ldr	r3, [pc, #340]	; (8010454 <ResetMacParameters+0x1c8>)
 80102fe:	4a55      	ldr	r2, [pc, #340]	; (8010454 <ResetMacParameters+0x1c8>)
 8010300:	336c      	adds	r3, #108	; 0x6c
 8010302:	32b0      	adds	r2, #176	; 0xb0
 8010304:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010308:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 801030c:	4b51      	ldr	r3, [pc, #324]	; (8010454 <ResetMacParameters+0x1c8>)
 801030e:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8010312:	4b50      	ldr	r3, [pc, #320]	; (8010454 <ResetMacParameters+0x1c8>)
 8010314:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010318:	4b4e      	ldr	r3, [pc, #312]	; (8010454 <ResetMacParameters+0x1c8>)
 801031a:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 801031e:	4b4d      	ldr	r3, [pc, #308]	; (8010454 <ResetMacParameters+0x1c8>)
 8010320:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010324:	4b4b      	ldr	r3, [pc, #300]	; (8010454 <ResetMacParameters+0x1c8>)
 8010326:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801032a:	4a4a      	ldr	r2, [pc, #296]	; (8010454 <ResetMacParameters+0x1c8>)
 801032c:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801032e:	4b49      	ldr	r3, [pc, #292]	; (8010454 <ResetMacParameters+0x1c8>)
 8010330:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8010334:	4a47      	ldr	r2, [pc, #284]	; (8010454 <ResetMacParameters+0x1c8>)
 8010336:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 8010338:	4b47      	ldr	r3, [pc, #284]	; (8010458 <ResetMacParameters+0x1cc>)
 801033a:	2200      	movs	r2, #0
 801033c:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8010340:	4b44      	ldr	r3, [pc, #272]	; (8010454 <ResetMacParameters+0x1c8>)
 8010342:	2200      	movs	r2, #0
 8010344:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010348:	4b42      	ldr	r3, [pc, #264]	; (8010454 <ResetMacParameters+0x1c8>)
 801034a:	2200      	movs	r2, #0
 801034c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 8010350:	4b40      	ldr	r3, [pc, #256]	; (8010454 <ResetMacParameters+0x1c8>)
 8010352:	2200      	movs	r2, #0
 8010354:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010358:	2301      	movs	r3, #1
 801035a:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801035c:	4b3f      	ldr	r3, [pc, #252]	; (801045c <ResetMacParameters+0x1d0>)
 801035e:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010360:	4b3f      	ldr	r3, [pc, #252]	; (8010460 <ResetMacParameters+0x1d4>)
 8010362:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 8010364:	4b3f      	ldr	r3, [pc, #252]	; (8010464 <ResetMacParameters+0x1d8>)
 8010366:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010368:	4b3a      	ldr	r3, [pc, #232]	; (8010454 <ResetMacParameters+0x1c8>)
 801036a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801036e:	1d3a      	adds	r2, r7, #4
 8010370:	4611      	mov	r1, r2
 8010372:	4618      	mov	r0, r3
 8010374:	f004 f910 	bl	8014598 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010378:	4b37      	ldr	r3, [pc, #220]	; (8010458 <ResetMacParameters+0x1cc>)
 801037a:	2200      	movs	r2, #0
 801037c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010380:	4b35      	ldr	r3, [pc, #212]	; (8010458 <ResetMacParameters+0x1cc>)
 8010382:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 8010386:	4b34      	ldr	r3, [pc, #208]	; (8010458 <ResetMacParameters+0x1cc>)
 8010388:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801038c:	4b31      	ldr	r3, [pc, #196]	; (8010454 <ResetMacParameters+0x1c8>)
 801038e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010390:	4a31      	ldr	r2, [pc, #196]	; (8010458 <ResetMacParameters+0x1cc>)
 8010392:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010396:	4b2f      	ldr	r3, [pc, #188]	; (8010454 <ResetMacParameters+0x1c8>)
 8010398:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 801039c:	4b2e      	ldr	r3, [pc, #184]	; (8010458 <ResetMacParameters+0x1cc>)
 801039e:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80103a2:	4b2c      	ldr	r3, [pc, #176]	; (8010454 <ResetMacParameters+0x1c8>)
 80103a4:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80103a8:	4b2b      	ldr	r3, [pc, #172]	; (8010458 <ResetMacParameters+0x1cc>)
 80103aa:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80103ae:	4b2a      	ldr	r3, [pc, #168]	; (8010458 <ResetMacParameters+0x1cc>)
 80103b0:	2200      	movs	r2, #0
 80103b2:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80103b6:	4b28      	ldr	r3, [pc, #160]	; (8010458 <ResetMacParameters+0x1cc>)
 80103b8:	2201      	movs	r2, #1
 80103ba:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80103be:	4b25      	ldr	r3, [pc, #148]	; (8010454 <ResetMacParameters+0x1c8>)
 80103c0:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 80103c4:	4b24      	ldr	r3, [pc, #144]	; (8010458 <ResetMacParameters+0x1cc>)
 80103c6:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80103ca:	4a23      	ldr	r2, [pc, #140]	; (8010458 <ResetMacParameters+0x1cc>)
 80103cc:	4b22      	ldr	r3, [pc, #136]	; (8010458 <ResetMacParameters+0x1cc>)
 80103ce:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 80103d2:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 80103d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80103de:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80103e2:	4b1d      	ldr	r3, [pc, #116]	; (8010458 <ResetMacParameters+0x1cc>)
 80103e4:	2201      	movs	r2, #1
 80103e6:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80103ea:	4b1b      	ldr	r3, [pc, #108]	; (8010458 <ResetMacParameters+0x1cc>)
 80103ec:	2202      	movs	r2, #2
 80103ee:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80103f2:	2300      	movs	r3, #0
 80103f4:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 80103f6:	2300      	movs	r3, #0
 80103f8:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 80103fa:	4b17      	ldr	r3, [pc, #92]	; (8010458 <ResetMacParameters+0x1cc>)
 80103fc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010400:	2b00      	cmp	r3, #0
 8010402:	d009      	beq.n	8010418 <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8010404:	4b14      	ldr	r3, [pc, #80]	; (8010458 <ResetMacParameters+0x1cc>)
 8010406:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801040a:	685b      	ldr	r3, [r3, #4]
 801040c:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 801040e:	4b12      	ldr	r3, [pc, #72]	; (8010458 <ResetMacParameters+0x1cc>)
 8010410:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010414:	691b      	ldr	r3, [r3, #16]
 8010416:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010418:	4b13      	ldr	r3, [pc, #76]	; (8010468 <ResetMacParameters+0x1dc>)
 801041a:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 801041c:	4b13      	ldr	r3, [pc, #76]	; (801046c <ResetMacParameters+0x1e0>)
 801041e:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010420:	4b13      	ldr	r3, [pc, #76]	; (8010470 <ResetMacParameters+0x1e4>)
 8010422:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8010424:	4b13      	ldr	r3, [pc, #76]	; (8010474 <ResetMacParameters+0x1e8>)
 8010426:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8010428:	4b13      	ldr	r3, [pc, #76]	; (8010478 <ResetMacParameters+0x1ec>)
 801042a:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 801042c:	4b13      	ldr	r3, [pc, #76]	; (801047c <ResetMacParameters+0x1f0>)
 801042e:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8010430:	4b13      	ldr	r3, [pc, #76]	; (8010480 <ResetMacParameters+0x1f4>)
 8010432:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8010434:	4b13      	ldr	r3, [pc, #76]	; (8010484 <ResetMacParameters+0x1f8>)
 8010436:	633b      	str	r3, [r7, #48]	; 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8010438:	4b13      	ldr	r3, [pc, #76]	; (8010488 <ResetMacParameters+0x1fc>)
 801043a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 801043c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8010440:	f107 0314 	add.w	r3, r7, #20
 8010444:	4a11      	ldr	r2, [pc, #68]	; (801048c <ResetMacParameters+0x200>)
 8010446:	4618      	mov	r0, r3
 8010448:	f002 f8d1 	bl	80125ee <LoRaMacClassBInit>
}
 801044c:	bf00      	nop
 801044e:	3740      	adds	r7, #64	; 0x40
 8010450:	46bd      	mov	sp, r7
 8010452:	bdb0      	pop	{r4, r5, r7, pc}
 8010454:	20000b90 	.word	0x20000b90
 8010458:	20000670 	.word	0x20000670
 801045c:	20000d74 	.word	0x20000d74
 8010460:	20000d88 	.word	0x20000d88
 8010464:	200016a8 	.word	0x200016a8
 8010468:	20000adc 	.word	0x20000adc
 801046c:	20000a94 	.word	0x20000a94
 8010470:	20000ac8 	.word	0x20000ac8
 8010474:	20000b05 	.word	0x20000b05
 8010478:	20000c64 	.word	0x20000c64
 801047c:	20000bd0 	.word	0x20000bd0
 8010480:	20000bd4 	.word	0x20000bd4
 8010484:	20000c68 	.word	0x20000c68
 8010488:	20000cac 	.word	0x20000cac
 801048c:	20001104 	.word	0x20001104

08010490 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b082      	sub	sp, #8
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f00b ff88 	bl	801c3b0 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80104a0:	4b11      	ldr	r3, [pc, #68]	; (80104e8 <RxWindowSetup+0x58>)
 80104a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104a4:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80104a6:	4b11      	ldr	r3, [pc, #68]	; (80104ec <RxWindowSetup+0x5c>)
 80104a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80104ac:	4a10      	ldr	r2, [pc, #64]	; (80104f0 <RxWindowSetup+0x60>)
 80104ae:	6839      	ldr	r1, [r7, #0]
 80104b0:	4618      	mov	r0, r3
 80104b2:	f004 f8fe 	bl	80146b2 <RegionRxConfig>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d010      	beq.n	80104de <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80104bc:	4b0d      	ldr	r3, [pc, #52]	; (80104f4 <RxWindowSetup+0x64>)
 80104be:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
 80104c2:	4b0c      	ldr	r3, [pc, #48]	; (80104f4 <RxWindowSetup+0x64>)
 80104c4:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80104c8:	4b07      	ldr	r3, [pc, #28]	; (80104e8 <RxWindowSetup+0x58>)
 80104ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104cc:	4a07      	ldr	r2, [pc, #28]	; (80104ec <RxWindowSetup+0x5c>)
 80104ce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80104d0:	4610      	mov	r0, r2
 80104d2:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	7cda      	ldrb	r2, [r3, #19]
 80104d8:	4b06      	ldr	r3, [pc, #24]	; (80104f4 <RxWindowSetup+0x64>)
 80104da:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 80104de:	bf00      	nop
 80104e0:	3708      	adds	r7, #8
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	0801dc4c 	.word	0x0801dc4c
 80104ec:	20000b90 	.word	0x20000b90
 80104f0:	20000a98 	.word	0x20000a98
 80104f4:	20000670 	.word	0x20000670

080104f8 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80104f8:	b590      	push	{r4, r7, lr}
 80104fa:	b083      	sub	sp, #12
 80104fc:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80104fe:	4b1e      	ldr	r3, [pc, #120]	; (8010578 <OpenContinuousRxCWindow+0x80>)
 8010500:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010504:	4b1c      	ldr	r3, [pc, #112]	; (8010578 <OpenContinuousRxCWindow+0x80>)
 8010506:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801050a:	b259      	sxtb	r1, r3
 801050c:	4b1a      	ldr	r3, [pc, #104]	; (8010578 <OpenContinuousRxCWindow+0x80>)
 801050e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010512:	4b19      	ldr	r3, [pc, #100]	; (8010578 <OpenContinuousRxCWindow+0x80>)
 8010514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010516:	4c19      	ldr	r4, [pc, #100]	; (801057c <OpenContinuousRxCWindow+0x84>)
 8010518:	9400      	str	r4, [sp, #0]
 801051a:	f004 f8a7 	bl	801466c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801051e:	4b18      	ldr	r3, [pc, #96]	; (8010580 <OpenContinuousRxCWindow+0x88>)
 8010520:	2202      	movs	r2, #2
 8010522:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010526:	4b14      	ldr	r3, [pc, #80]	; (8010578 <OpenContinuousRxCWindow+0x80>)
 8010528:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 801052c:	4b14      	ldr	r3, [pc, #80]	; (8010580 <OpenContinuousRxCWindow+0x88>)
 801052e:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010532:	4b13      	ldr	r3, [pc, #76]	; (8010580 <OpenContinuousRxCWindow+0x88>)
 8010534:	2201      	movs	r2, #1
 8010536:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801053a:	4b0f      	ldr	r3, [pc, #60]	; (8010578 <OpenContinuousRxCWindow+0x80>)
 801053c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010540:	4a10      	ldr	r2, [pc, #64]	; (8010584 <OpenContinuousRxCWindow+0x8c>)
 8010542:	490e      	ldr	r1, [pc, #56]	; (801057c <OpenContinuousRxCWindow+0x84>)
 8010544:	4618      	mov	r0, r3
 8010546:	f004 f8b4 	bl	80146b2 <RegionRxConfig>
 801054a:	4603      	mov	r3, r0
 801054c:	2b00      	cmp	r3, #0
 801054e:	d00f      	beq.n	8010570 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010550:	4b0b      	ldr	r3, [pc, #44]	; (8010580 <OpenContinuousRxCWindow+0x88>)
 8010552:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
 8010556:	4b0a      	ldr	r3, [pc, #40]	; (8010580 <OpenContinuousRxCWindow+0x88>)
 8010558:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 801055c:	4b0a      	ldr	r3, [pc, #40]	; (8010588 <OpenContinuousRxCWindow+0x90>)
 801055e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010560:	2000      	movs	r0, #0
 8010562:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010564:	4b06      	ldr	r3, [pc, #24]	; (8010580 <OpenContinuousRxCWindow+0x88>)
 8010566:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 801056a:	4b05      	ldr	r3, [pc, #20]	; (8010580 <OpenContinuousRxCWindow+0x88>)
 801056c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 8010570:	bf00      	nop
 8010572:	3704      	adds	r7, #4
 8010574:	46bd      	mov	sp, r7
 8010576:	bd90      	pop	{r4, r7, pc}
 8010578:	20000b90 	.word	0x20000b90
 801057c:	20000a58 	.word	0x20000a58
 8010580:	20000670 	.word	0x20000670
 8010584:	20000a98 	.word	0x20000a98
 8010588:	0801dc4c 	.word	0x0801dc4c

0801058c <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b088      	sub	sp, #32
 8010590:	af00      	add	r7, sp, #0
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	60b9      	str	r1, [r7, #8]
 8010596:	603b      	str	r3, [r7, #0]
 8010598:	4613      	mov	r3, r2
 801059a:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 801059c:	4b82      	ldr	r3, [pc, #520]	; (80107a8 <PrepareFrame+0x21c>)
 801059e:	2200      	movs	r2, #0
 80105a0:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80105a2:	4b81      	ldr	r3, [pc, #516]	; (80107a8 <PrepareFrame+0x21c>)
 80105a4:	2200      	movs	r2, #0
 80105a6:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 80105aa:	2300      	movs	r3, #0
 80105ac:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80105ae:	2300      	movs	r3, #0
 80105b0:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80105b2:	2300      	movs	r3, #0
 80105b4:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d101      	bne.n	80105c0 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80105bc:	2300      	movs	r3, #0
 80105be:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80105c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80105c2:	461a      	mov	r2, r3
 80105c4:	6839      	ldr	r1, [r7, #0]
 80105c6:	4879      	ldr	r0, [pc, #484]	; (80107ac <PrepareFrame+0x220>)
 80105c8:	f007 fda9 	bl	801811e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80105cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80105ce:	b2da      	uxtb	r2, r3
 80105d0:	4b75      	ldr	r3, [pc, #468]	; (80107a8 <PrepareFrame+0x21c>)
 80105d2:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	781a      	ldrb	r2, [r3, #0]
 80105da:	4b73      	ldr	r3, [pc, #460]	; (80107a8 <PrepareFrame+0x21c>)
 80105dc:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80105e6:	b2db      	uxtb	r3, r3
 80105e8:	2b07      	cmp	r3, #7
 80105ea:	f000 80b9 	beq.w	8010760 <PrepareFrame+0x1d4>
 80105ee:	2b07      	cmp	r3, #7
 80105f0:	f300 80d0 	bgt.w	8010794 <PrepareFrame+0x208>
 80105f4:	2b02      	cmp	r3, #2
 80105f6:	d006      	beq.n	8010606 <PrepareFrame+0x7a>
 80105f8:	2b04      	cmp	r3, #4
 80105fa:	f040 80cb 	bne.w	8010794 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80105fe:	4b6a      	ldr	r3, [pc, #424]	; (80107a8 <PrepareFrame+0x21c>)
 8010600:	2201      	movs	r2, #1
 8010602:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010606:	4b68      	ldr	r3, [pc, #416]	; (80107a8 <PrepareFrame+0x21c>)
 8010608:	2204      	movs	r2, #4
 801060a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801060e:	4b66      	ldr	r3, [pc, #408]	; (80107a8 <PrepareFrame+0x21c>)
 8010610:	4a67      	ldr	r2, [pc, #412]	; (80107b0 <PrepareFrame+0x224>)
 8010612:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010616:	4b64      	ldr	r3, [pc, #400]	; (80107a8 <PrepareFrame+0x21c>)
 8010618:	22ff      	movs	r2, #255	; 0xff
 801061a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	781a      	ldrb	r2, [r3, #0]
 8010622:	4b61      	ldr	r3, [pc, #388]	; (80107a8 <PrepareFrame+0x21c>)
 8010624:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010628:	4a5f      	ldr	r2, [pc, #380]	; (80107a8 <PrepareFrame+0x21c>)
 801062a:	79fb      	ldrb	r3, [r7, #7]
 801062c:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010630:	4b60      	ldr	r3, [pc, #384]	; (80107b4 <PrepareFrame+0x228>)
 8010632:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010636:	4a5c      	ldr	r2, [pc, #368]	; (80107a8 <PrepareFrame+0x21c>)
 8010638:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	781a      	ldrb	r2, [r3, #0]
 8010640:	4b59      	ldr	r3, [pc, #356]	; (80107a8 <PrepareFrame+0x21c>)
 8010642:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010646:	4b58      	ldr	r3, [pc, #352]	; (80107a8 <PrepareFrame+0x21c>)
 8010648:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 801064c:	4b56      	ldr	r3, [pc, #344]	; (80107a8 <PrepareFrame+0x21c>)
 801064e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8010652:	4b55      	ldr	r3, [pc, #340]	; (80107a8 <PrepareFrame+0x21c>)
 8010654:	4a55      	ldr	r2, [pc, #340]	; (80107ac <PrepareFrame+0x220>)
 8010656:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801065a:	f107 0318 	add.w	r3, r7, #24
 801065e:	4618      	mov	r0, r3
 8010660:	f003 f8e8 	bl	8013834 <LoRaMacCryptoGetFCntUp>
 8010664:	4603      	mov	r3, r0
 8010666:	2b00      	cmp	r3, #0
 8010668:	d001      	beq.n	801066e <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801066a:	2312      	movs	r3, #18
 801066c:	e098      	b.n	80107a0 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801066e:	69bb      	ldr	r3, [r7, #24]
 8010670:	b29a      	uxth	r2, r3
 8010672:	4b4d      	ldr	r3, [pc, #308]	; (80107a8 <PrepareFrame+0x21c>)
 8010674:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 8010678:	4b4b      	ldr	r3, [pc, #300]	; (80107a8 <PrepareFrame+0x21c>)
 801067a:	2200      	movs	r2, #0
 801067c:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8010680:	4b49      	ldr	r3, [pc, #292]	; (80107a8 <PrepareFrame+0x21c>)
 8010682:	2200      	movs	r2, #0
 8010684:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010688:	69bb      	ldr	r3, [r7, #24]
 801068a:	4a47      	ldr	r2, [pc, #284]	; (80107a8 <PrepareFrame+0x21c>)
 801068c:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010690:	f107 0314 	add.w	r3, r7, #20
 8010694:	4618      	mov	r0, r3
 8010696:	f002 fa85 	bl	8012ba4 <LoRaMacCommandsGetSizeSerializedCmds>
 801069a:	4603      	mov	r3, r0
 801069c:	2b00      	cmp	r3, #0
 801069e:	d001      	beq.n	80106a4 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80106a0:	2313      	movs	r3, #19
 80106a2:	e07d      	b.n	80107a0 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d076      	beq.n	8010798 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80106aa:	4b42      	ldr	r3, [pc, #264]	; (80107b4 <PrepareFrame+0x228>)
 80106ac:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7fe fd5b 	bl	800f16c <GetMaxAppPayloadWithoutFOptsLength>
 80106b6:	4603      	mov	r3, r0
 80106b8:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80106ba:	4b3b      	ldr	r3, [pc, #236]	; (80107a8 <PrepareFrame+0x21c>)
 80106bc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d01d      	beq.n	8010700 <PrepareFrame+0x174>
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	2b0f      	cmp	r3, #15
 80106c8:	d81a      	bhi.n	8010700 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80106ca:	f107 0314 	add.w	r3, r7, #20
 80106ce:	4a3a      	ldr	r2, [pc, #232]	; (80107b8 <PrepareFrame+0x22c>)
 80106d0:	4619      	mov	r1, r3
 80106d2:	200f      	movs	r0, #15
 80106d4:	f002 fa7c 	bl	8012bd0 <LoRaMacCommandsSerializeCmds>
 80106d8:	4603      	mov	r3, r0
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d001      	beq.n	80106e2 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80106de:	2313      	movs	r3, #19
 80106e0:	e05e      	b.n	80107a0 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	f003 030f 	and.w	r3, r3, #15
 80106e8:	b2d9      	uxtb	r1, r3
 80106ea:	68ba      	ldr	r2, [r7, #8]
 80106ec:	7813      	ldrb	r3, [r2, #0]
 80106ee:	f361 0303 	bfi	r3, r1, #0, #4
 80106f2:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	781a      	ldrb	r2, [r3, #0]
 80106f8:	4b2b      	ldr	r3, [pc, #172]	; (80107a8 <PrepareFrame+0x21c>)
 80106fa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80106fe:	e04b      	b.n	8010798 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010700:	4b29      	ldr	r3, [pc, #164]	; (80107a8 <PrepareFrame+0x21c>)
 8010702:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010706:	2b00      	cmp	r3, #0
 8010708:	d010      	beq.n	801072c <PrepareFrame+0x1a0>
 801070a:	697b      	ldr	r3, [r7, #20]
 801070c:	2b0f      	cmp	r3, #15
 801070e:	d90d      	bls.n	801072c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010710:	7ffb      	ldrb	r3, [r7, #31]
 8010712:	f107 0114 	add.w	r1, r7, #20
 8010716:	4a29      	ldr	r2, [pc, #164]	; (80107bc <PrepareFrame+0x230>)
 8010718:	4618      	mov	r0, r3
 801071a:	f002 fa59 	bl	8012bd0 <LoRaMacCommandsSerializeCmds>
 801071e:	4603      	mov	r3, r0
 8010720:	2b00      	cmp	r3, #0
 8010722:	d001      	beq.n	8010728 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010724:	2313      	movs	r3, #19
 8010726:	e03b      	b.n	80107a0 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010728:	230a      	movs	r3, #10
 801072a:	e039      	b.n	80107a0 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801072c:	7ffb      	ldrb	r3, [r7, #31]
 801072e:	f107 0114 	add.w	r1, r7, #20
 8010732:	4a22      	ldr	r2, [pc, #136]	; (80107bc <PrepareFrame+0x230>)
 8010734:	4618      	mov	r0, r3
 8010736:	f002 fa4b 	bl	8012bd0 <LoRaMacCommandsSerializeCmds>
 801073a:	4603      	mov	r3, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	d001      	beq.n	8010744 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010740:	2313      	movs	r3, #19
 8010742:	e02d      	b.n	80107a0 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010744:	4b18      	ldr	r3, [pc, #96]	; (80107a8 <PrepareFrame+0x21c>)
 8010746:	2200      	movs	r2, #0
 8010748:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 801074c:	4b16      	ldr	r3, [pc, #88]	; (80107a8 <PrepareFrame+0x21c>)
 801074e:	4a1b      	ldr	r2, [pc, #108]	; (80107bc <PrepareFrame+0x230>)
 8010750:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	b2da      	uxtb	r2, r3
 8010758:	4b13      	ldr	r3, [pc, #76]	; (80107a8 <PrepareFrame+0x21c>)
 801075a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 801075e:	e01b      	b.n	8010798 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d01a      	beq.n	801079c <PrepareFrame+0x210>
 8010766:	4b10      	ldr	r3, [pc, #64]	; (80107a8 <PrepareFrame+0x21c>)
 8010768:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801076c:	2b00      	cmp	r3, #0
 801076e:	d015      	beq.n	801079c <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010770:	4813      	ldr	r0, [pc, #76]	; (80107c0 <PrepareFrame+0x234>)
 8010772:	4b0d      	ldr	r3, [pc, #52]	; (80107a8 <PrepareFrame+0x21c>)
 8010774:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010778:	b29b      	uxth	r3, r3
 801077a:	461a      	mov	r2, r3
 801077c:	6839      	ldr	r1, [r7, #0]
 801077e:	f007 fcce 	bl	801811e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010782:	4b09      	ldr	r3, [pc, #36]	; (80107a8 <PrepareFrame+0x21c>)
 8010784:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010788:	b29b      	uxth	r3, r3
 801078a:	3301      	adds	r3, #1
 801078c:	b29a      	uxth	r2, r3
 801078e:	4b06      	ldr	r3, [pc, #24]	; (80107a8 <PrepareFrame+0x21c>)
 8010790:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010792:	e003      	b.n	801079c <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010794:	2302      	movs	r3, #2
 8010796:	e003      	b.n	80107a0 <PrepareFrame+0x214>
            break;
 8010798:	bf00      	nop
 801079a:	e000      	b.n	801079e <PrepareFrame+0x212>
            break;
 801079c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801079e:	2300      	movs	r3, #0
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3720      	adds	r7, #32
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	20000670 	.word	0x20000670
 80107ac:	200007a8 	.word	0x200007a8
 80107b0:	20000672 	.word	0x20000672
 80107b4:	20000b90 	.word	0x20000b90
 80107b8:	20000788 	.word	0x20000788
 80107bc:	20000b10 	.word	0x20000b10
 80107c0:	20000673 	.word	0x20000673

080107c4 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b08a      	sub	sp, #40	; 0x28
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	4603      	mov	r3, r0
 80107cc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80107ce:	2303      	movs	r3, #3
 80107d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80107d4:	2300      	movs	r3, #0
 80107d6:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80107d8:	79fb      	ldrb	r3, [r7, #7]
 80107da:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80107dc:	4b4a      	ldr	r3, [pc, #296]	; (8010908 <SendFrameOnChannel+0x144>)
 80107de:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80107e2:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80107e4:	4b48      	ldr	r3, [pc, #288]	; (8010908 <SendFrameOnChannel+0x144>)
 80107e6:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80107ea:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80107ec:	4b46      	ldr	r3, [pc, #280]	; (8010908 <SendFrameOnChannel+0x144>)
 80107ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107f0:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80107f2:	4b45      	ldr	r3, [pc, #276]	; (8010908 <SendFrameOnChannel+0x144>)
 80107f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80107f6:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80107f8:	4b44      	ldr	r3, [pc, #272]	; (801090c <SendFrameOnChannel+0x148>)
 80107fa:	881b      	ldrh	r3, [r3, #0]
 80107fc:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80107fe:	4b42      	ldr	r3, [pc, #264]	; (8010908 <SendFrameOnChannel+0x144>)
 8010800:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8010804:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010806:	4b40      	ldr	r3, [pc, #256]	; (8010908 <SendFrameOnChannel+0x144>)
 8010808:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801080c:	f107 020f 	add.w	r2, r7, #15
 8010810:	f107 0110 	add.w	r1, r7, #16
 8010814:	4b3e      	ldr	r3, [pc, #248]	; (8010910 <SendFrameOnChannel+0x14c>)
 8010816:	f003 ff6a 	bl	80146ee <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801081a:	4b3c      	ldr	r3, [pc, #240]	; (801090c <SendFrameOnChannel+0x148>)
 801081c:	2201      	movs	r2, #1
 801081e:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010822:	4b39      	ldr	r3, [pc, #228]	; (8010908 <SendFrameOnChannel+0x144>)
 8010824:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010828:	b2da      	uxtb	r2, r3
 801082a:	4b38      	ldr	r3, [pc, #224]	; (801090c <SendFrameOnChannel+0x148>)
 801082c:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8010830:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010834:	4b35      	ldr	r3, [pc, #212]	; (801090c <SendFrameOnChannel+0x148>)
 8010836:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 801083a:	79fb      	ldrb	r3, [r7, #7]
 801083c:	4a33      	ldr	r2, [pc, #204]	; (801090c <SendFrameOnChannel+0x148>)
 801083e:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010842:	4b32      	ldr	r3, [pc, #200]	; (801090c <SendFrameOnChannel+0x148>)
 8010844:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8010848:	4a30      	ldr	r2, [pc, #192]	; (801090c <SendFrameOnChannel+0x148>)
 801084a:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801084e:	4b2f      	ldr	r3, [pc, #188]	; (801090c <SendFrameOnChannel+0x148>)
 8010850:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8010854:	4a2d      	ldr	r2, [pc, #180]	; (801090c <SendFrameOnChannel+0x148>)
 8010856:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801085a:	f001 ff34 	bl	80126c6 <LoRaMacClassBIsBeaconModeActive>
 801085e:	4603      	mov	r3, r0
 8010860:	2b00      	cmp	r3, #0
 8010862:	d00b      	beq.n	801087c <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010864:	4b29      	ldr	r3, [pc, #164]	; (801090c <SendFrameOnChannel+0x148>)
 8010866:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 801086a:	4618      	mov	r0, r3
 801086c:	f001 ff96 	bl	801279c <LoRaMacClassBIsUplinkCollision>
 8010870:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8010872:	6a3b      	ldr	r3, [r7, #32]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d001      	beq.n	801087c <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010878:	2310      	movs	r3, #16
 801087a:	e040      	b.n	80108fe <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801087c:	4b22      	ldr	r3, [pc, #136]	; (8010908 <SendFrameOnChannel+0x144>)
 801087e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010882:	2b01      	cmp	r3, #1
 8010884:	d101      	bne.n	801088a <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8010886:	f001 ff93 	bl	80127b0 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801088a:	f001 ff2d 	bl	80126e8 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801088e:	4b1e      	ldr	r3, [pc, #120]	; (8010908 <SendFrameOnChannel+0x144>)
 8010890:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010894:	b2db      	uxtb	r3, r3
 8010896:	4a1d      	ldr	r2, [pc, #116]	; (801090c <SendFrameOnChannel+0x148>)
 8010898:	f892 241f 	ldrb.w	r2, [r2, #1055]	; 0x41f
 801089c:	4611      	mov	r1, r2
 801089e:	4618      	mov	r0, r3
 80108a0:	f7ff fc64 	bl	801016c <SecureFrame>
 80108a4:	4603      	mov	r3, r0
 80108a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80108aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d002      	beq.n	80108b8 <SendFrameOnChannel+0xf4>
    {
        return status;
 80108b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108b6:	e022      	b.n	80108fe <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80108b8:	4b14      	ldr	r3, [pc, #80]	; (801090c <SendFrameOnChannel+0x148>)
 80108ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80108be:	f043 0302 	orr.w	r3, r3, #2
 80108c2:	4a12      	ldr	r2, [pc, #72]	; (801090c <SendFrameOnChannel+0x148>)
 80108c4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 80108c8:	4b10      	ldr	r3, [pc, #64]	; (801090c <SendFrameOnChannel+0x148>)
 80108ca:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80108ce:	3301      	adds	r3, #1
 80108d0:	b2da      	uxtb	r2, r3
 80108d2:	4b0e      	ldr	r3, [pc, #56]	; (801090c <SendFrameOnChannel+0x148>)
 80108d4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80108d8:	4b0c      	ldr	r3, [pc, #48]	; (801090c <SendFrameOnChannel+0x148>)
 80108da:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 80108de:	4b0b      	ldr	r3, [pc, #44]	; (801090c <SendFrameOnChannel+0x148>)
 80108e0:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 80108e4:	4b09      	ldr	r3, [pc, #36]	; (801090c <SendFrameOnChannel+0x148>)
 80108e6:	2200      	movs	r2, #0
 80108e8:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80108ec:	4b09      	ldr	r3, [pc, #36]	; (8010914 <SendFrameOnChannel+0x150>)
 80108ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108f0:	4a06      	ldr	r2, [pc, #24]	; (801090c <SendFrameOnChannel+0x148>)
 80108f2:	8812      	ldrh	r2, [r2, #0]
 80108f4:	b2d2      	uxtb	r2, r2
 80108f6:	4611      	mov	r1, r2
 80108f8:	4807      	ldr	r0, [pc, #28]	; (8010918 <SendFrameOnChannel+0x154>)
 80108fa:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80108fc:	2300      	movs	r3, #0
}
 80108fe:	4618      	mov	r0, r3
 8010900:	3728      	adds	r7, #40	; 0x28
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
 8010906:	bf00      	nop
 8010908:	20000b90 	.word	0x20000b90
 801090c:	20000670 	.word	0x20000670
 8010910:	20000a90 	.word	0x20000a90
 8010914:	0801dc4c 	.word	0x0801dc4c
 8010918:	20000672 	.word	0x20000672

0801091c <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af00      	add	r7, sp, #0
 8010922:	4603      	mov	r3, r0
 8010924:	6039      	str	r1, [r7, #0]
 8010926:	80fb      	strh	r3, [r7, #6]
 8010928:	4613      	mov	r3, r2
 801092a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 801092c:	4b09      	ldr	r3, [pc, #36]	; (8010954 <SetTxContinuousWave+0x38>)
 801092e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010930:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010934:	88fa      	ldrh	r2, [r7, #6]
 8010936:	6838      	ldr	r0, [r7, #0]
 8010938:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801093a:	4b07      	ldr	r3, [pc, #28]	; (8010958 <SetTxContinuousWave+0x3c>)
 801093c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010940:	f043 0302 	orr.w	r3, r3, #2
 8010944:	4a04      	ldr	r2, [pc, #16]	; (8010958 <SetTxContinuousWave+0x3c>)
 8010946:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801094a:	2300      	movs	r3, #0
}
 801094c:	4618      	mov	r0, r3
 801094e:	3708      	adds	r7, #8
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}
 8010954:	0801dc4c 	.word	0x0801dc4c
 8010958:	20000670 	.word	0x20000670

0801095c <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b082      	sub	sp, #8
 8010960:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8010962:	2300      	movs	r3, #0
 8010964:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010966:	4b3e      	ldr	r3, [pc, #248]	; (8010a60 <RestoreNvmData+0x104>)
 8010968:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801096c:	2b01      	cmp	r3, #1
 801096e:	d001      	beq.n	8010974 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8010970:	2301      	movs	r3, #1
 8010972:	e071      	b.n	8010a58 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8010974:	2124      	movs	r1, #36	; 0x24
 8010976:	483b      	ldr	r0, [pc, #236]	; (8010a64 <RestoreNvmData+0x108>)
 8010978:	f007 fc26 	bl	80181c8 <Crc32>
 801097c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801097e:	4b39      	ldr	r3, [pc, #228]	; (8010a64 <RestoreNvmData+0x108>)
 8010980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010982:	687a      	ldr	r2, [r7, #4]
 8010984:	429a      	cmp	r2, r3
 8010986:	d001      	beq.n	801098c <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010988:	2317      	movs	r3, #23
 801098a:	e065      	b.n	8010a58 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 801098c:	2114      	movs	r1, #20
 801098e:	4836      	ldr	r0, [pc, #216]	; (8010a68 <RestoreNvmData+0x10c>)
 8010990:	f007 fc1a 	bl	80181c8 <Crc32>
 8010994:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8010996:	4b33      	ldr	r3, [pc, #204]	; (8010a64 <RestoreNvmData+0x108>)
 8010998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801099a:	687a      	ldr	r2, [r7, #4]
 801099c:	429a      	cmp	r2, r3
 801099e:	d001      	beq.n	80109a4 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80109a0:	2317      	movs	r3, #23
 80109a2:	e059      	b.n	8010a58 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80109a4:	21e0      	movs	r1, #224	; 0xe0
 80109a6:	4831      	ldr	r0, [pc, #196]	; (8010a6c <RestoreNvmData+0x110>)
 80109a8:	f007 fc0e 	bl	80181c8 <Crc32>
 80109ac:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80109ae:	4b2d      	ldr	r3, [pc, #180]	; (8010a64 <RestoreNvmData+0x108>)
 80109b0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	429a      	cmp	r2, r3
 80109b8:	d001      	beq.n	80109be <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80109ba:	2317      	movs	r3, #23
 80109bc:	e04c      	b.n	8010a58 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 80109be:	21bc      	movs	r1, #188	; 0xbc
 80109c0:	482b      	ldr	r0, [pc, #172]	; (8010a70 <RestoreNvmData+0x114>)
 80109c2:	f007 fc01 	bl	80181c8 <Crc32>
 80109c6:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80109c8:	4b26      	ldr	r3, [pc, #152]	; (8010a64 <RestoreNvmData+0x108>)
 80109ca:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80109ce:	687a      	ldr	r2, [r7, #4]
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d001      	beq.n	80109d8 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80109d4:	2317      	movs	r3, #23
 80109d6:	e03f      	b.n	8010a58 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80109d8:	2110      	movs	r1, #16
 80109da:	4826      	ldr	r0, [pc, #152]	; (8010a74 <RestoreNvmData+0x118>)
 80109dc:	f007 fbf4 	bl	80181c8 <Crc32>
 80109e0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80109e2:	4b20      	ldr	r3, [pc, #128]	; (8010a64 <RestoreNvmData+0x108>)
 80109e4:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80109e8:	687a      	ldr	r2, [r7, #4]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d001      	beq.n	80109f2 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80109ee:	2317      	movs	r3, #23
 80109f0:	e032      	b.n	8010a58 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80109f2:	2114      	movs	r1, #20
 80109f4:	4820      	ldr	r0, [pc, #128]	; (8010a78 <RestoreNvmData+0x11c>)
 80109f6:	f007 fbe7 	bl	80181c8 <Crc32>
 80109fa:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80109fc:	4b19      	ldr	r3, [pc, #100]	; (8010a64 <RestoreNvmData+0x108>)
 80109fe:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
 8010a02:	687a      	ldr	r2, [r7, #4]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d001      	beq.n	8010a0c <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010a08:	2317      	movs	r3, #23
 8010a0a:	e025      	b.n	8010a58 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8010a0c:	f240 528c 	movw	r2, #1420	; 0x58c
 8010a10:	4914      	ldr	r1, [pc, #80]	; (8010a64 <RestoreNvmData+0x108>)
 8010a12:	481a      	ldr	r0, [pc, #104]	; (8010a7c <RestoreNvmData+0x120>)
 8010a14:	f007 fb83 	bl	801811e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8010a18:	f240 528c 	movw	r2, #1420	; 0x58c
 8010a1c:	2100      	movs	r1, #0
 8010a1e:	4811      	ldr	r0, [pc, #68]	; (8010a64 <RestoreNvmData+0x108>)
 8010a20:	f007 fbb8 	bl	8018194 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010a24:	4b0e      	ldr	r3, [pc, #56]	; (8010a60 <RestoreNvmData+0x104>)
 8010a26:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 8010a2a:	4b0d      	ldr	r3, [pc, #52]	; (8010a60 <RestoreNvmData+0x104>)
 8010a2c:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010a30:	4b12      	ldr	r3, [pc, #72]	; (8010a7c <RestoreNvmData+0x120>)
 8010a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a34:	4a0a      	ldr	r2, [pc, #40]	; (8010a60 <RestoreNvmData+0x104>)
 8010a36:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010a3a:	4b10      	ldr	r3, [pc, #64]	; (8010a7c <RestoreNvmData+0x120>)
 8010a3c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010a40:	4b07      	ldr	r3, [pc, #28]	; (8010a60 <RestoreNvmData+0x104>)
 8010a42:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010a46:	4b06      	ldr	r3, [pc, #24]	; (8010a60 <RestoreNvmData+0x104>)
 8010a48:	2201      	movs	r2, #1
 8010a4a:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010a4e:	4b04      	ldr	r3, [pc, #16]	; (8010a60 <RestoreNvmData+0x104>)
 8010a50:	2202      	movs	r2, #2
 8010a52:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    return LORAMAC_STATUS_OK;
 8010a56:	2300      	movs	r3, #0
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3708      	adds	r7, #8
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}
 8010a60:	20000670 	.word	0x20000670
 8010a64:	2000111c 	.word	0x2000111c
 8010a68:	20001144 	.word	0x20001144
 8010a6c:	2000115c 	.word	0x2000115c
 8010a70:	20001240 	.word	0x20001240
 8010a74:	20001300 	.word	0x20001300
 8010a78:	20001690 	.word	0x20001690
 8010a7c:	20000b90 	.word	0x20000b90

08010a80 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8010a80:	b480      	push	{r7}
 8010a82:	b083      	sub	sp, #12
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d002      	beq.n	8010a96 <DetermineFrameType+0x16>
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d101      	bne.n	8010a9a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010a96:	2303      	movs	r3, #3
 8010a98:	e03b      	b.n	8010b12 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	7b1b      	ldrb	r3, [r3, #12]
 8010a9e:	f003 030f 	and.w	r3, r3, #15
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d008      	beq.n	8010aba <DetermineFrameType+0x3a>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d003      	beq.n	8010aba <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	701a      	strb	r2, [r3, #0]
 8010ab8:	e02a      	b.n	8010b10 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d103      	bne.n	8010acc <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	2201      	movs	r2, #1
 8010ac8:	701a      	strb	r2, [r3, #0]
 8010aca:	e021      	b.n	8010b10 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	7b1b      	ldrb	r3, [r3, #12]
 8010ad0:	f003 030f 	and.w	r3, r3, #15
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d108      	bne.n	8010aec <DetermineFrameType+0x6c>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d103      	bne.n	8010aec <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	2202      	movs	r2, #2
 8010ae8:	701a      	strb	r2, [r3, #0]
 8010aea:	e011      	b.n	8010b10 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	7b1b      	ldrb	r3, [r3, #12]
 8010af0:	f003 030f 	and.w	r3, r3, #15
 8010af4:	b2db      	uxtb	r3, r3
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d108      	bne.n	8010b0c <DetermineFrameType+0x8c>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d003      	beq.n	8010b0c <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	2203      	movs	r2, #3
 8010b08:	701a      	strb	r2, [r3, #0]
 8010b0a:	e001      	b.n	8010b10 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8010b0c:	2318      	movs	r3, #24
 8010b0e:	e000      	b.n	8010b12 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010b10:	2300      	movs	r3, #0
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	370c      	adds	r7, #12
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bc80      	pop	{r7}
 8010b1a:	4770      	bx	lr

08010b1c <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b083      	sub	sp, #12
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	4603      	mov	r3, r0
 8010b24:	460a      	mov	r2, r1
 8010b26:	71fb      	strb	r3, [r7, #7]
 8010b28:	4613      	mov	r3, r2
 8010b2a:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8010b2c:	79fa      	ldrb	r2, [r7, #7]
 8010b2e:	79bb      	ldrb	r3, [r7, #6]
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d301      	bcc.n	8010b38 <CheckRetrans+0x1c>
    {
        return true;
 8010b34:	2301      	movs	r3, #1
 8010b36:	e000      	b.n	8010b3a <CheckRetrans+0x1e>
    }
    return false;
 8010b38:	2300      	movs	r3, #0
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	370c      	adds	r7, #12
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bc80      	pop	{r7}
 8010b42:	4770      	bx	lr

08010b44 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8010b48:	4b12      	ldr	r3, [pc, #72]	; (8010b94 <CheckRetransUnconfirmedUplink+0x50>)
 8010b4a:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8010b4e:	4a12      	ldr	r2, [pc, #72]	; (8010b98 <CheckRetransUnconfirmedUplink+0x54>)
 8010b50:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8010b54:	4611      	mov	r1, r2
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7ff ffe0 	bl	8010b1c <CheckRetrans>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d001      	beq.n	8010b66 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8010b62:	2301      	movs	r3, #1
 8010b64:	e014      	b.n	8010b90 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010b66:	4b0b      	ldr	r3, [pc, #44]	; (8010b94 <CheckRetransUnconfirmedUplink+0x50>)
 8010b68:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010b6c:	f003 0302 	and.w	r3, r3, #2
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d00b      	beq.n	8010b8e <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010b76:	4b07      	ldr	r3, [pc, #28]	; (8010b94 <CheckRetransUnconfirmedUplink+0x50>)
 8010b78:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d004      	beq.n	8010b8a <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010b80:	4b04      	ldr	r3, [pc, #16]	; (8010b94 <CheckRetransUnconfirmedUplink+0x50>)
 8010b82:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d101      	bne.n	8010b8e <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	e000      	b.n	8010b90 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8010b8e:	2300      	movs	r3, #0
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	bd80      	pop	{r7, pc}
 8010b94:	20000670 	.word	0x20000670
 8010b98:	20000b90 	.word	0x20000b90

08010b9c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8010ba0:	4b10      	ldr	r3, [pc, #64]	; (8010be4 <CheckRetransConfirmedUplink+0x48>)
 8010ba2:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8010ba6:	4a10      	ldr	r2, [pc, #64]	; (8010be8 <CheckRetransConfirmedUplink+0x4c>)
 8010ba8:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8010bac:	4611      	mov	r1, r2
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7ff ffb4 	bl	8010b1c <CheckRetrans>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d001      	beq.n	8010bbe <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8010bba:	2301      	movs	r3, #1
 8010bbc:	e00f      	b.n	8010bde <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010bbe:	4b09      	ldr	r3, [pc, #36]	; (8010be4 <CheckRetransConfirmedUplink+0x48>)
 8010bc0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010bc4:	f003 0302 	and.w	r3, r3, #2
 8010bc8:	b2db      	uxtb	r3, r3
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d006      	beq.n	8010bdc <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010bce:	4b05      	ldr	r3, [pc, #20]	; (8010be4 <CheckRetransConfirmedUplink+0x48>)
 8010bd0:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d001      	beq.n	8010bdc <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8010bd8:	2301      	movs	r3, #1
 8010bda:	e000      	b.n	8010bde <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8010bdc:	2300      	movs	r3, #0
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	bd80      	pop	{r7, pc}
 8010be2:	bf00      	nop
 8010be4:	20000670 	.word	0x20000670
 8010be8:	20000b90 	.word	0x20000b90

08010bec <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8010bec:	b480      	push	{r7}
 8010bee:	b083      	sub	sp, #12
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010bfa:	d002      	beq.n	8010c02 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	3301      	adds	r3, #1
 8010c00:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8010c02:	687b      	ldr	r3, [r7, #4]
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	370c      	adds	r7, #12
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bc80      	pop	{r7}
 8010c0c:	4770      	bx	lr
	...

08010c10 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010c14:	4b1a      	ldr	r3, [pc, #104]	; (8010c80 <StopRetransmission+0x70>)
 8010c16:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010c1a:	f003 0302 	and.w	r3, r3, #2
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d009      	beq.n	8010c38 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010c24:	4b16      	ldr	r3, [pc, #88]	; (8010c80 <StopRetransmission+0x70>)
 8010c26:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d011      	beq.n	8010c52 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8010c2e:	4b14      	ldr	r3, [pc, #80]	; (8010c80 <StopRetransmission+0x70>)
 8010c30:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010c34:	2b01      	cmp	r3, #1
 8010c36:	d00c      	beq.n	8010c52 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010c38:	4b12      	ldr	r3, [pc, #72]	; (8010c84 <StopRetransmission+0x74>)
 8010c3a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d007      	beq.n	8010c52 <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8010c42:	4b10      	ldr	r3, [pc, #64]	; (8010c84 <StopRetransmission+0x74>)
 8010c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7ff ffd0 	bl	8010bec <IncreaseAdrAckCounter>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	4a0d      	ldr	r2, [pc, #52]	; (8010c84 <StopRetransmission+0x74>)
 8010c50:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010c52:	4b0b      	ldr	r3, [pc, #44]	; (8010c80 <StopRetransmission+0x70>)
 8010c54:	2200      	movs	r2, #0
 8010c56:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 8010c5a:	4b09      	ldr	r3, [pc, #36]	; (8010c80 <StopRetransmission+0x70>)
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8010c62:	4b07      	ldr	r3, [pc, #28]	; (8010c80 <StopRetransmission+0x70>)
 8010c64:	2200      	movs	r2, #0
 8010c66:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010c6a:	4b05      	ldr	r3, [pc, #20]	; (8010c80 <StopRetransmission+0x70>)
 8010c6c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010c70:	f023 0302 	bic.w	r3, r3, #2
 8010c74:	4a02      	ldr	r2, [pc, #8]	; (8010c80 <StopRetransmission+0x70>)
 8010c76:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8010c7a:	2301      	movs	r3, #1
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	20000670 	.word	0x20000670
 8010c84:	20000b90 	.word	0x20000b90

08010c88 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	4603      	mov	r3, r0
 8010c90:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010c92:	4b0b      	ldr	r3, [pc, #44]	; (8010cc0 <CallNvmDataChangeCallback+0x38>)
 8010c94:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d00c      	beq.n	8010cb6 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8010c9c:	4b08      	ldr	r3, [pc, #32]	; (8010cc0 <CallNvmDataChangeCallback+0x38>)
 8010c9e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010ca2:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d006      	beq.n	8010cb6 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010ca8:	4b05      	ldr	r3, [pc, #20]	; (8010cc0 <CallNvmDataChangeCallback+0x38>)
 8010caa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	88fa      	ldrh	r2, [r7, #6]
 8010cb2:	4610      	mov	r0, r2
 8010cb4:	4798      	blx	r3
    }
}
 8010cb6:	bf00      	nop
 8010cb8:	3708      	adds	r7, #8
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}
 8010cbe:	bf00      	nop
 8010cc0:	20000670 	.word	0x20000670

08010cc4 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8010cc4:	b480      	push	{r7}
 8010cc6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010cc8:	4b0b      	ldr	r3, [pc, #44]	; (8010cf8 <IsRequestPending+0x34>)
 8010cca:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010cce:	f003 0304 	and.w	r3, r3, #4
 8010cd2:	b2db      	uxtb	r3, r3
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d107      	bne.n	8010ce8 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010cd8:	4b07      	ldr	r3, [pc, #28]	; (8010cf8 <IsRequestPending+0x34>)
 8010cda:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010cde:	f003 0301 	and.w	r3, r3, #1
 8010ce2:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d001      	beq.n	8010cec <IsRequestPending+0x28>
    {
        return 1;
 8010ce8:	2301      	movs	r3, #1
 8010cea:	e000      	b.n	8010cee <IsRequestPending+0x2a>
    }
    return 0;
 8010cec:	2300      	movs	r3, #0
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bc80      	pop	{r7}
 8010cf4:	4770      	bx	lr
 8010cf6:	bf00      	nop
 8010cf8:	20000670 	.word	0x20000670

08010cfc <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010cfc:	b590      	push	{r4, r7, lr}
 8010cfe:	b091      	sub	sp, #68	; 0x44
 8010d00:	af02      	add	r7, sp, #8
 8010d02:	6178      	str	r0, [r7, #20]
 8010d04:	6139      	str	r1, [r7, #16]
 8010d06:	4613      	mov	r3, r2
 8010d08:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d002      	beq.n	8010d16 <LoRaMacInitialization+0x1a>
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d101      	bne.n	8010d1a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010d16:	2303      	movs	r3, #3
 8010d18:	e27c      	b.n	8011214 <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d00b      	beq.n	8010d3a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d007      	beq.n	8010d3a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d003      	beq.n	8010d3a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d101      	bne.n	8010d3e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010d3a:	2303      	movs	r3, #3
 8010d3c:	e26a      	b.n	8011214 <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010d3e:	7bfb      	ldrb	r3, [r7, #15]
 8010d40:	4618      	mov	r0, r3
 8010d42:	f003 fbdd 	bl	8014500 <RegionIsActive>
 8010d46:	4603      	mov	r3, r0
 8010d48:	f083 0301 	eor.w	r3, r3, #1
 8010d4c:	b2db      	uxtb	r3, r3
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d001      	beq.n	8010d56 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010d52:	2309      	movs	r3, #9
 8010d54:	e25e      	b.n	8011214 <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010d56:	6978      	ldr	r0, [r7, #20]
 8010d58:	f002 f884 	bl	8012e64 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010d5c:	f240 528c 	movw	r2, #1420	; 0x58c
 8010d60:	2100      	movs	r1, #0
 8010d62:	48c7      	ldr	r0, [pc, #796]	; (8011080 <LoRaMacInitialization+0x384>)
 8010d64:	f007 fa16 	bl	8018194 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010d68:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8010d6c:	2100      	movs	r1, #0
 8010d6e:	48c5      	ldr	r0, [pc, #788]	; (8011084 <LoRaMacInitialization+0x388>)
 8010d70:	f007 fa10 	bl	8018194 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8010d74:	4ac2      	ldr	r2, [pc, #776]	; (8011080 <LoRaMacInitialization+0x384>)
 8010d76:	7bfb      	ldrb	r3, [r7, #15]
 8010d78:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010d7c:	4bc0      	ldr	r3, [pc, #768]	; (8011080 <LoRaMacInitialization+0x384>)
 8010d7e:	2200      	movs	r2, #0
 8010d80:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010d84:	4bbe      	ldr	r3, [pc, #760]	; (8011080 <LoRaMacInitialization+0x384>)
 8010d86:	2200      	movs	r2, #0
 8010d88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010d8c:	4bbc      	ldr	r3, [pc, #752]	; (8011080 <LoRaMacInitialization+0x384>)
 8010d8e:	4abe      	ldr	r2, [pc, #760]	; (8011088 <LoRaMacInitialization+0x38c>)
 8010d90:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010d94:	2300      	movs	r3, #0
 8010d96:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010d9a:	4bbc      	ldr	r3, [pc, #752]	; (801108c <LoRaMacInitialization+0x390>)
 8010d9c:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010d9e:	4bbc      	ldr	r3, [pc, #752]	; (8011090 <LoRaMacInitialization+0x394>)
 8010da0:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8010da2:	4bbc      	ldr	r3, [pc, #752]	; (8011094 <LoRaMacInitialization+0x398>)
 8010da4:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010da6:	4bb6      	ldr	r3, [pc, #728]	; (8011080 <LoRaMacInitialization+0x384>)
 8010da8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dac:	f107 021c 	add.w	r2, r7, #28
 8010db0:	4611      	mov	r1, r2
 8010db2:	4618      	mov	r0, r3
 8010db4:	f003 fbf0 	bl	8014598 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010db8:	230f      	movs	r3, #15
 8010dba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dbe:	4bb0      	ldr	r3, [pc, #704]	; (8011080 <LoRaMacInitialization+0x384>)
 8010dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dc4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010dc8:	4611      	mov	r1, r2
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f003 fbad 	bl	801452a <RegionGetPhyParam>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	bf14      	ite	ne
 8010dda:	2301      	movne	r3, #1
 8010ddc:	2300      	moveq	r3, #0
 8010dde:	b2da      	uxtb	r2, r3
 8010de0:	4ba7      	ldr	r3, [pc, #668]	; (8011080 <LoRaMacInitialization+0x384>)
 8010de2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010de6:	230a      	movs	r3, #10
 8010de8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dec:	4ba4      	ldr	r3, [pc, #656]	; (8011080 <LoRaMacInitialization+0x384>)
 8010dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010df2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010df6:	4611      	mov	r1, r2
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f003 fb96 	bl	801452a <RegionGetPhyParam>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e04:	b25a      	sxtb	r2, r3
 8010e06:	4b9e      	ldr	r3, [pc, #632]	; (8011080 <LoRaMacInitialization+0x384>)
 8010e08:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010e0c:	2306      	movs	r3, #6
 8010e0e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e12:	4b9b      	ldr	r3, [pc, #620]	; (8011080 <LoRaMacInitialization+0x384>)
 8010e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010e1c:	4611      	mov	r1, r2
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f003 fb83 	bl	801452a <RegionGetPhyParam>
 8010e24:	4603      	mov	r3, r0
 8010e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e2a:	b25a      	sxtb	r2, r3
 8010e2c:	4b94      	ldr	r3, [pc, #592]	; (8011080 <LoRaMacInitialization+0x384>)
 8010e2e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010e32:	2310      	movs	r3, #16
 8010e34:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e38:	4b91      	ldr	r3, [pc, #580]	; (8011080 <LoRaMacInitialization+0x384>)
 8010e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e3e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010e42:	4611      	mov	r1, r2
 8010e44:	4618      	mov	r0, r3
 8010e46:	f003 fb70 	bl	801452a <RegionGetPhyParam>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e50:	4a8b      	ldr	r2, [pc, #556]	; (8011080 <LoRaMacInitialization+0x384>)
 8010e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010e56:	2311      	movs	r3, #17
 8010e58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e5c:	4b88      	ldr	r3, [pc, #544]	; (8011080 <LoRaMacInitialization+0x384>)
 8010e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e62:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010e66:	4611      	mov	r1, r2
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f003 fb5e 	bl	801452a <RegionGetPhyParam>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e74:	4a82      	ldr	r2, [pc, #520]	; (8011080 <LoRaMacInitialization+0x384>)
 8010e76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010e7a:	2312      	movs	r3, #18
 8010e7c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e80:	4b7f      	ldr	r3, [pc, #508]	; (8011080 <LoRaMacInitialization+0x384>)
 8010e82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010e8a:	4611      	mov	r1, r2
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f003 fb4c 	bl	801452a <RegionGetPhyParam>
 8010e92:	4603      	mov	r3, r0
 8010e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e98:	4a79      	ldr	r2, [pc, #484]	; (8011080 <LoRaMacInitialization+0x384>)
 8010e9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010e9e:	2313      	movs	r3, #19
 8010ea0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ea4:	4b76      	ldr	r3, [pc, #472]	; (8011080 <LoRaMacInitialization+0x384>)
 8010ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010eaa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010eae:	4611      	mov	r1, r2
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f003 fb3a 	bl	801452a <RegionGetPhyParam>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ebc:	4a70      	ldr	r2, [pc, #448]	; (8011080 <LoRaMacInitialization+0x384>)
 8010ebe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010ec2:	2314      	movs	r3, #20
 8010ec4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ec8:	4b6d      	ldr	r3, [pc, #436]	; (8011080 <LoRaMacInitialization+0x384>)
 8010eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ece:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010ed2:	4611      	mov	r1, r2
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f003 fb28 	bl	801452a <RegionGetPhyParam>
 8010eda:	4603      	mov	r3, r0
 8010edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee0:	4a67      	ldr	r2, [pc, #412]	; (8011080 <LoRaMacInitialization+0x384>)
 8010ee2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010ee6:	2316      	movs	r3, #22
 8010ee8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010eec:	4b64      	ldr	r3, [pc, #400]	; (8011080 <LoRaMacInitialization+0x384>)
 8010eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ef2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010ef6:	4611      	mov	r1, r2
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f003 fb16 	bl	801452a <RegionGetPhyParam>
 8010efe:	4603      	mov	r3, r0
 8010f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f04:	b2da      	uxtb	r2, r3
 8010f06:	4b5e      	ldr	r3, [pc, #376]	; (8011080 <LoRaMacInitialization+0x384>)
 8010f08:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010f0c:	2317      	movs	r3, #23
 8010f0e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f12:	4b5b      	ldr	r3, [pc, #364]	; (8011080 <LoRaMacInitialization+0x384>)
 8010f14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010f1c:	4611      	mov	r1, r2
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f003 fb03 	bl	801452a <RegionGetPhyParam>
 8010f24:	4603      	mov	r3, r0
 8010f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f2a:	4a55      	ldr	r2, [pc, #340]	; (8011080 <LoRaMacInitialization+0x384>)
 8010f2c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f32:	4a53      	ldr	r2, [pc, #332]	; (8011080 <LoRaMacInitialization+0x384>)
 8010f34:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010f38:	2318      	movs	r3, #24
 8010f3a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f3e:	4b50      	ldr	r3, [pc, #320]	; (8011080 <LoRaMacInitialization+0x384>)
 8010f40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010f48:	4611      	mov	r1, r2
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f003 faed 	bl	801452a <RegionGetPhyParam>
 8010f50:	4603      	mov	r3, r0
 8010f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f56:	b2da      	uxtb	r2, r3
 8010f58:	4b49      	ldr	r3, [pc, #292]	; (8011080 <LoRaMacInitialization+0x384>)
 8010f5a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f60:	b2da      	uxtb	r2, r3
 8010f62:	4b47      	ldr	r3, [pc, #284]	; (8011080 <LoRaMacInitialization+0x384>)
 8010f64:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010f68:	231d      	movs	r3, #29
 8010f6a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f6e:	4b44      	ldr	r3, [pc, #272]	; (8011080 <LoRaMacInitialization+0x384>)
 8010f70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f74:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010f78:	4611      	mov	r1, r2
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f003 fad5 	bl	801452a <RegionGetPhyParam>
 8010f80:	4603      	mov	r3, r0
 8010f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f86:	b2da      	uxtb	r2, r3
 8010f88:	4b3d      	ldr	r3, [pc, #244]	; (8011080 <LoRaMacInitialization+0x384>)
 8010f8a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010f8e:	231e      	movs	r3, #30
 8010f90:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f94:	4b3a      	ldr	r3, [pc, #232]	; (8011080 <LoRaMacInitialization+0x384>)
 8010f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010f9e:	4611      	mov	r1, r2
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f003 fac2 	bl	801452a <RegionGetPhyParam>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fac:	b2da      	uxtb	r2, r3
 8010fae:	4b34      	ldr	r3, [pc, #208]	; (8011080 <LoRaMacInitialization+0x384>)
 8010fb0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010fb4:	231f      	movs	r3, #31
 8010fb6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fba:	4b31      	ldr	r3, [pc, #196]	; (8011080 <LoRaMacInitialization+0x384>)
 8010fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fc0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010fc4:	4611      	mov	r1, r2
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f003 faaf 	bl	801452a <RegionGetPhyParam>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd2:	4a2b      	ldr	r2, [pc, #172]	; (8011080 <LoRaMacInitialization+0x384>)
 8010fd4:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010fd8:	2320      	movs	r3, #32
 8010fda:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fde:	4b28      	ldr	r3, [pc, #160]	; (8011080 <LoRaMacInitialization+0x384>)
 8010fe0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fe4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010fe8:	4611      	mov	r1, r2
 8010fea:	4618      	mov	r0, r3
 8010fec:	f003 fa9d 	bl	801452a <RegionGetPhyParam>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff6:	4a22      	ldr	r2, [pc, #136]	; (8011080 <LoRaMacInitialization+0x384>)
 8010ff8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010ffc:	230b      	movs	r3, #11
 8010ffe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011002:	4b1f      	ldr	r3, [pc, #124]	; (8011080 <LoRaMacInitialization+0x384>)
 8011004:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011008:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801100c:	4611      	mov	r1, r2
 801100e:	4618      	mov	r0, r3
 8011010:	f003 fa8b 	bl	801452a <RegionGetPhyParam>
 8011014:	4603      	mov	r3, r0
 8011016:	62fb      	str	r3, [r7, #44]	; 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 8011018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101a:	b29a      	uxth	r2, r3
 801101c:	4b19      	ldr	r3, [pc, #100]	; (8011084 <LoRaMacInitialization+0x388>)
 801101e:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011022:	230c      	movs	r3, #12
 8011024:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011028:	4b15      	ldr	r3, [pc, #84]	; (8011080 <LoRaMacInitialization+0x384>)
 801102a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801102e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011032:	4611      	mov	r1, r2
 8011034:	4618      	mov	r0, r3
 8011036:	f003 fa78 	bl	801452a <RegionGetPhyParam>
 801103a:	4603      	mov	r3, r0
 801103c:	62fb      	str	r3, [r7, #44]	; 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 801103e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011040:	b29a      	uxth	r2, r3
 8011042:	4b10      	ldr	r3, [pc, #64]	; (8011084 <LoRaMacInitialization+0x388>)
 8011044:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011048:	4b0d      	ldr	r3, [pc, #52]	; (8011080 <LoRaMacInitialization+0x384>)
 801104a:	2201      	movs	r2, #1
 801104c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011050:	4b0b      	ldr	r3, [pc, #44]	; (8011080 <LoRaMacInitialization+0x384>)
 8011052:	220a      	movs	r2, #10
 8011054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011058:	4b09      	ldr	r3, [pc, #36]	; (8011080 <LoRaMacInitialization+0x384>)
 801105a:	2206      	movs	r2, #6
 801105c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011060:	4b07      	ldr	r3, [pc, #28]	; (8011080 <LoRaMacInitialization+0x384>)
 8011062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011066:	4a06      	ldr	r2, [pc, #24]	; (8011080 <LoRaMacInitialization+0x384>)
 8011068:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801106a:	4b05      	ldr	r3, [pc, #20]	; (8011080 <LoRaMacInitialization+0x384>)
 801106c:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011070:	4b03      	ldr	r3, [pc, #12]	; (8011080 <LoRaMacInitialization+0x384>)
 8011072:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011076:	4b02      	ldr	r3, [pc, #8]	; (8011080 <LoRaMacInitialization+0x384>)
 8011078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801107c:	e00c      	b.n	8011098 <LoRaMacInitialization+0x39c>
 801107e:	bf00      	nop
 8011080:	20000b90 	.word	0x20000b90
 8011084:	20000670 	.word	0x20000670
 8011088:	01000400 	.word	0x01000400
 801108c:	20000d74 	.word	0x20000d74
 8011090:	20000d88 	.word	0x20000d88
 8011094:	200016a8 	.word	0x200016a8
 8011098:	4a60      	ldr	r2, [pc, #384]	; (801121c <LoRaMacInitialization+0x520>)
 801109a:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 801109c:	4b5f      	ldr	r3, [pc, #380]	; (801121c <LoRaMacInitialization+0x520>)
 801109e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80110a2:	4a5e      	ldr	r2, [pc, #376]	; (801121c <LoRaMacInitialization+0x520>)
 80110a4:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80110a6:	4b5d      	ldr	r3, [pc, #372]	; (801121c <LoRaMacInitialization+0x520>)
 80110a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80110ac:	4a5b      	ldr	r2, [pc, #364]	; (801121c <LoRaMacInitialization+0x520>)
 80110ae:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80110b0:	4b5a      	ldr	r3, [pc, #360]	; (801121c <LoRaMacInitialization+0x520>)
 80110b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80110b6:	4a59      	ldr	r2, [pc, #356]	; (801121c <LoRaMacInitialization+0x520>)
 80110b8:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80110ba:	4b58      	ldr	r3, [pc, #352]	; (801121c <LoRaMacInitialization+0x520>)
 80110bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80110c0:	4a56      	ldr	r2, [pc, #344]	; (801121c <LoRaMacInitialization+0x520>)
 80110c2:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80110c4:	4b55      	ldr	r3, [pc, #340]	; (801121c <LoRaMacInitialization+0x520>)
 80110c6:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 80110ca:	4b54      	ldr	r3, [pc, #336]	; (801121c <LoRaMacInitialization+0x520>)
 80110cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 80110d0:	4b52      	ldr	r3, [pc, #328]	; (801121c <LoRaMacInitialization+0x520>)
 80110d2:	2201      	movs	r2, #1
 80110d4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80110d8:	4a51      	ldr	r2, [pc, #324]	; (8011220 <LoRaMacInitialization+0x524>)
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 80110e0:	f7ff f8d4 	bl	801028c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80110e4:	4b4d      	ldr	r3, [pc, #308]	; (801121c <LoRaMacInitialization+0x520>)
 80110e6:	2201      	movs	r2, #1
 80110e8:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 80110ec:	4a4c      	ldr	r2, [pc, #304]	; (8011220 <LoRaMacInitialization+0x524>)
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 80110f4:	4b4a      	ldr	r3, [pc, #296]	; (8011220 <LoRaMacInitialization+0x524>)
 80110f6:	2200      	movs	r2, #0
 80110f8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 80110fc:	4b48      	ldr	r3, [pc, #288]	; (8011220 <LoRaMacInitialization+0x524>)
 80110fe:	2201      	movs	r2, #1
 8011100:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8011104:	4b45      	ldr	r3, [pc, #276]	; (801121c <LoRaMacInitialization+0x520>)
 8011106:	2200      	movs	r2, #0
 8011108:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 801110a:	4b44      	ldr	r3, [pc, #272]	; (801121c <LoRaMacInitialization+0x520>)
 801110c:	2200      	movs	r2, #0
 801110e:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011110:	2300      	movs	r3, #0
 8011112:	9300      	str	r3, [sp, #0]
 8011114:	4b43      	ldr	r3, [pc, #268]	; (8011224 <LoRaMacInitialization+0x528>)
 8011116:	2200      	movs	r2, #0
 8011118:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801111c:	4842      	ldr	r0, [pc, #264]	; (8011228 <LoRaMacInitialization+0x52c>)
 801111e:	f00b f8a3 	bl	801c268 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011122:	2300      	movs	r3, #0
 8011124:	9300      	str	r3, [sp, #0]
 8011126:	4b41      	ldr	r3, [pc, #260]	; (801122c <LoRaMacInitialization+0x530>)
 8011128:	2200      	movs	r2, #0
 801112a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801112e:	4840      	ldr	r0, [pc, #256]	; (8011230 <LoRaMacInitialization+0x534>)
 8011130:	f00b f89a 	bl	801c268 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011134:	2300      	movs	r3, #0
 8011136:	9300      	str	r3, [sp, #0]
 8011138:	4b3e      	ldr	r3, [pc, #248]	; (8011234 <LoRaMacInitialization+0x538>)
 801113a:	2200      	movs	r2, #0
 801113c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011140:	483d      	ldr	r0, [pc, #244]	; (8011238 <LoRaMacInitialization+0x53c>)
 8011142:	f00b f891 	bl	801c268 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8011146:	2300      	movs	r3, #0
 8011148:	9300      	str	r3, [sp, #0]
 801114a:	4b3c      	ldr	r3, [pc, #240]	; (801123c <LoRaMacInitialization+0x540>)
 801114c:	2200      	movs	r2, #0
 801114e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011152:	483b      	ldr	r0, [pc, #236]	; (8011240 <LoRaMacInitialization+0x544>)
 8011154:	f00b f888 	bl	801c268 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011158:	4c30      	ldr	r4, [pc, #192]	; (801121c <LoRaMacInitialization+0x520>)
 801115a:	463b      	mov	r3, r7
 801115c:	4618      	mov	r0, r3
 801115e:	f00a fbf7 	bl	801b950 <SysTimeGetMcuTime>
 8011162:	f504 7388 	add.w	r3, r4, #272	; 0x110
 8011166:	463a      	mov	r2, r7
 8011168:	e892 0003 	ldmia.w	r2, {r0, r1}
 801116c:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8011170:	4b34      	ldr	r3, [pc, #208]	; (8011244 <LoRaMacInitialization+0x548>)
 8011172:	2200      	movs	r2, #0
 8011174:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011176:	4b2a      	ldr	r3, [pc, #168]	; (8011220 <LoRaMacInitialization+0x524>)
 8011178:	4a33      	ldr	r2, [pc, #204]	; (8011248 <LoRaMacInitialization+0x54c>)
 801117a:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 801117e:	4b28      	ldr	r3, [pc, #160]	; (8011220 <LoRaMacInitialization+0x524>)
 8011180:	4a32      	ldr	r2, [pc, #200]	; (801124c <LoRaMacInitialization+0x550>)
 8011182:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011186:	4b26      	ldr	r3, [pc, #152]	; (8011220 <LoRaMacInitialization+0x524>)
 8011188:	4a31      	ldr	r2, [pc, #196]	; (8011250 <LoRaMacInitialization+0x554>)
 801118a:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 801118e:	4b24      	ldr	r3, [pc, #144]	; (8011220 <LoRaMacInitialization+0x524>)
 8011190:	4a30      	ldr	r2, [pc, #192]	; (8011254 <LoRaMacInitialization+0x558>)
 8011192:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011196:	4b22      	ldr	r3, [pc, #136]	; (8011220 <LoRaMacInitialization+0x524>)
 8011198:	4a2f      	ldr	r2, [pc, #188]	; (8011258 <LoRaMacInitialization+0x55c>)
 801119a:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 801119e:	4b2f      	ldr	r3, [pc, #188]	; (801125c <LoRaMacInitialization+0x560>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	482f      	ldr	r0, [pc, #188]	; (8011260 <LoRaMacInitialization+0x564>)
 80111a4:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	689b      	ldr	r3, [r3, #8]
 80111aa:	4619      	mov	r1, r3
 80111ac:	482d      	ldr	r0, [pc, #180]	; (8011264 <LoRaMacInitialization+0x568>)
 80111ae:	f7fa fb8b 	bl	800b8c8 <SecureElementInit>
 80111b2:	4603      	mov	r3, r0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d001      	beq.n	80111bc <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80111b8:	2311      	movs	r3, #17
 80111ba:	e02b      	b.n	8011214 <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80111bc:	4817      	ldr	r0, [pc, #92]	; (801121c <LoRaMacInitialization+0x520>)
 80111be:	f002 fafd 	bl	80137bc <LoRaMacCryptoInit>
 80111c2:	4603      	mov	r3, r0
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d001      	beq.n	80111cc <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80111c8:	2311      	movs	r3, #17
 80111ca:	e023      	b.n	8011214 <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80111cc:	f001 fc1c 	bl	8012a08 <LoRaMacCommandsInit>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d001      	beq.n	80111da <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80111d6:	2313      	movs	r3, #19
 80111d8:	e01c      	b.n	8011214 <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80111da:	4823      	ldr	r0, [pc, #140]	; (8011268 <LoRaMacInitialization+0x56c>)
 80111dc:	f002 fb8e 	bl	80138fc <LoRaMacCryptoSetMulticastReference>
 80111e0:	4603      	mov	r3, r0
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d001      	beq.n	80111ea <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80111e6:	2311      	movs	r3, #17
 80111e8:	e014      	b.n	8011214 <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80111ea:	4b1c      	ldr	r3, [pc, #112]	; (801125c <LoRaMacInitialization+0x560>)
 80111ec:	695b      	ldr	r3, [r3, #20]
 80111ee:	4798      	blx	r3
 80111f0:	4603      	mov	r3, r0
 80111f2:	4618      	mov	r0, r3
 80111f4:	f006 ff6e 	bl	80180d4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80111f8:	4b18      	ldr	r3, [pc, #96]	; (801125c <LoRaMacInitialization+0x560>)
 80111fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80111fc:	4a07      	ldr	r2, [pc, #28]	; (801121c <LoRaMacInitialization+0x520>)
 80111fe:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8011202:	4610      	mov	r0, r2
 8011204:	4798      	blx	r3
    Radio.Sleep( );
 8011206:	4b15      	ldr	r3, [pc, #84]	; (801125c <LoRaMacInitialization+0x560>)
 8011208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801120a:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801120c:	2001      	movs	r0, #1
 801120e:	f7fd fad3 	bl	800e7b8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8011212:	2300      	movs	r3, #0
}
 8011214:	4618      	mov	r0, r3
 8011216:	373c      	adds	r7, #60	; 0x3c
 8011218:	46bd      	mov	sp, r7
 801121a:	bd90      	pop	{r4, r7, pc}
 801121c:	20000b90 	.word	0x20000b90
 8011220:	20000670 	.word	0x20000670
 8011224:	0800ed6d 	.word	0x0800ed6d
 8011228:	200009d8 	.word	0x200009d8
 801122c:	0800edfd 	.word	0x0800edfd
 8011230:	200009f0 	.word	0x200009f0
 8011234:	0800ee75 	.word	0x0800ee75
 8011238:	20000a08 	.word	0x20000a08
 801123c:	0800eef5 	.word	0x0800eef5
 8011240:	20000a74 	.word	0x20000a74
 8011244:	20001738 	.word	0x20001738
 8011248:	0800d86d 	.word	0x0800d86d
 801124c:	0800d8e5 	.word	0x0800d8e5
 8011250:	0800d9c5 	.word	0x0800d9c5
 8011254:	0800d979 	.word	0x0800d979
 8011258:	0800da01 	.word	0x0800da01
 801125c:	0801dc4c 	.word	0x0801dc4c
 8011260:	200009bc 	.word	0x200009bc
 8011264:	20000cb4 	.word	0x20000cb4
 8011268:	20000c68 	.word	0x20000c68

0801126c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 801126c:	b480      	push	{r7}
 801126e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011270:	4b04      	ldr	r3, [pc, #16]	; (8011284 <LoRaMacStart+0x18>)
 8011272:	2200      	movs	r2, #0
 8011274:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8011278:	2300      	movs	r3, #0
}
 801127a:	4618      	mov	r0, r3
 801127c:	46bd      	mov	sp, r7
 801127e:	bc80      	pop	{r7}
 8011280:	4770      	bx	lr
 8011282:	bf00      	nop
 8011284:	20000670 	.word	0x20000670

08011288 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8011288:	b580      	push	{r7, lr}
 801128a:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 801128c:	f7fd fa74 	bl	800e778 <LoRaMacIsBusy>
 8011290:	4603      	mov	r3, r0
 8011292:	f083 0301 	eor.w	r3, r3, #1
 8011296:	b2db      	uxtb	r3, r3
 8011298:	2b00      	cmp	r3, #0
 801129a:	d005      	beq.n	80112a8 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 801129c:	4b07      	ldr	r3, [pc, #28]	; (80112bc <LoRaMacStop+0x34>)
 801129e:	2201      	movs	r2, #1
 80112a0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 80112a4:	2300      	movs	r3, #0
 80112a6:	e007      	b.n	80112b8 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80112a8:	4b04      	ldr	r3, [pc, #16]	; (80112bc <LoRaMacStop+0x34>)
 80112aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	d101      	bne.n	80112b6 <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 80112b2:	2300      	movs	r3, #0
 80112b4:	e000      	b.n	80112b8 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 80112b6:	2301      	movs	r3, #1
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	bd80      	pop	{r7, pc}
 80112bc:	20000670 	.word	0x20000670

080112c0 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80112c4:	4812      	ldr	r0, [pc, #72]	; (8011310 <LoRaMacHalt+0x50>)
 80112c6:	f00b f873 	bl	801c3b0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80112ca:	4812      	ldr	r0, [pc, #72]	; (8011314 <LoRaMacHalt+0x54>)
 80112cc:	f00b f870 	bl	801c3b0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80112d0:	4811      	ldr	r0, [pc, #68]	; (8011318 <LoRaMacHalt+0x58>)
 80112d2:	f00b f86d 	bl	801c3b0 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80112d6:	4811      	ldr	r0, [pc, #68]	; (801131c <LoRaMacHalt+0x5c>)
 80112d8:	f00b f86a 	bl	801c3b0 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80112dc:	f001 fa04 	bl	80126e8 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80112e0:	4b0f      	ldr	r3, [pc, #60]	; (8011320 <LoRaMacHalt+0x60>)
 80112e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80112e6:	4b0f      	ldr	r3, [pc, #60]	; (8011324 <LoRaMacHalt+0x64>)
 80112e8:	2200      	movs	r2, #0
 80112ea:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 80112ee:	480e      	ldr	r0, [pc, #56]	; (8011328 <LoRaMacHalt+0x68>)
 80112f0:	f7fd fc18 	bl	800eb24 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80112f4:	f240 528c 	movw	r2, #1420	; 0x58c
 80112f8:	490b      	ldr	r1, [pc, #44]	; (8011328 <LoRaMacHalt+0x68>)
 80112fa:	480c      	ldr	r0, [pc, #48]	; (801132c <LoRaMacHalt+0x6c>)
 80112fc:	f006 ff0f 	bl	801811e <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8011300:	4b08      	ldr	r3, [pc, #32]	; (8011324 <LoRaMacHalt+0x64>)
 8011302:	2201      	movs	r2, #1
 8011304:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8011308:	2300      	movs	r3, #0
}
 801130a:	4618      	mov	r0, r3
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	200009d8 	.word	0x200009d8
 8011314:	200009f0 	.word	0x200009f0
 8011318:	20000a08 	.word	0x20000a08
 801131c:	20000a74 	.word	0x20000a74
 8011320:	0801dc4c 	.word	0x0801dc4c
 8011324:	20000670 	.word	0x20000670
 8011328:	20000b90 	.word	0x20000b90
 801132c:	2000111c 	.word	0x2000111c

08011330 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011330:	b590      	push	{r4, r7, lr}
 8011332:	b08d      	sub	sp, #52	; 0x34
 8011334:	af02      	add	r7, sp, #8
 8011336:	4603      	mov	r3, r0
 8011338:	6039      	str	r1, [r7, #0]
 801133a:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801133c:	4b42      	ldr	r3, [pc, #264]	; (8011448 <LoRaMacQueryTxPossible+0x118>)
 801133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011340:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011342:	4b41      	ldr	r3, [pc, #260]	; (8011448 <LoRaMacQueryTxPossible+0x118>)
 8011344:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8011348:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801134a:	4b3f      	ldr	r3, [pc, #252]	; (8011448 <LoRaMacQueryTxPossible+0x118>)
 801134c:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8011350:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8011352:	4b3e      	ldr	r3, [pc, #248]	; (801144c <LoRaMacQueryTxPossible+0x11c>)
 8011354:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8011358:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801135a:	2300      	movs	r3, #0
 801135c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d101      	bne.n	8011368 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011364:	2303      	movs	r3, #3
 8011366:	e06b      	b.n	8011440 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8011368:	2300      	movs	r3, #0
 801136a:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801136c:	4b36      	ldr	r3, [pc, #216]	; (8011448 <LoRaMacQueryTxPossible+0x118>)
 801136e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8011372:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011374:	4b34      	ldr	r3, [pc, #208]	; (8011448 <LoRaMacQueryTxPossible+0x118>)
 8011376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011378:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801137a:	4b34      	ldr	r3, [pc, #208]	; (801144c <LoRaMacQueryTxPossible+0x11c>)
 801137c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8011380:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011382:	4b32      	ldr	r3, [pc, #200]	; (801144c <LoRaMacQueryTxPossible+0x11c>)
 8011384:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8011388:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801138a:	4b2f      	ldr	r3, [pc, #188]	; (8011448 <LoRaMacQueryTxPossible+0x118>)
 801138c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011390:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011394:	4b2c      	ldr	r3, [pc, #176]	; (8011448 <LoRaMacQueryTxPossible+0x118>)
 8011396:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801139a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 801139e:	4b2b      	ldr	r3, [pc, #172]	; (801144c <LoRaMacQueryTxPossible+0x11c>)
 80113a0:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80113a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80113a8:	4b27      	ldr	r3, [pc, #156]	; (8011448 <LoRaMacQueryTxPossible+0x118>)
 80113aa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80113ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80113b2:	4b25      	ldr	r3, [pc, #148]	; (8011448 <LoRaMacQueryTxPossible+0x118>)
 80113b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80113bc:	f107 040d 	add.w	r4, r7, #13
 80113c0:	f107 020e 	add.w	r2, r7, #14
 80113c4:	f107 010f 	add.w	r1, r7, #15
 80113c8:	f107 0014 	add.w	r0, r7, #20
 80113cc:	f107 0310 	add.w	r3, r7, #16
 80113d0:	9300      	str	r3, [sp, #0]
 80113d2:	4623      	mov	r3, r4
 80113d4:	f001 f852 	bl	801247c <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80113d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113dc:	4618      	mov	r0, r3
 80113de:	f7fd fec5 	bl	800f16c <GetMaxAppPayloadWithoutFOptsLength>
 80113e2:	4603      	mov	r3, r0
 80113e4:	461a      	mov	r2, r3
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80113ea:	f107 0308 	add.w	r3, r7, #8
 80113ee:	4618      	mov	r0, r3
 80113f0:	f001 fbd8 	bl	8012ba4 <LoRaMacCommandsGetSizeSerializedCmds>
 80113f4:	4603      	mov	r3, r0
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d001      	beq.n	80113fe <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80113fa:	2313      	movs	r3, #19
 80113fc:	e020      	b.n	8011440 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	2b0f      	cmp	r3, #15
 8011402:	d819      	bhi.n	8011438 <LoRaMacQueryTxPossible+0x108>
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	785b      	ldrb	r3, [r3, #1]
 8011408:	461a      	mov	r2, r3
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	429a      	cmp	r2, r3
 801140e:	d313      	bcc.n	8011438 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	785a      	ldrb	r2, [r3, #1]
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	b2db      	uxtb	r3, r3
 8011418:	1ad3      	subs	r3, r2, r3
 801141a:	b2da      	uxtb	r2, r3
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	785b      	ldrb	r3, [r3, #1]
 8011424:	4619      	mov	r1, r3
 8011426:	79fa      	ldrb	r2, [r7, #7]
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	4413      	add	r3, r2
 801142c:	4299      	cmp	r1, r3
 801142e:	d301      	bcc.n	8011434 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8011430:	2300      	movs	r3, #0
 8011432:	e005      	b.n	8011440 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8011434:	2308      	movs	r3, #8
 8011436:	e003      	b.n	8011440 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	2200      	movs	r2, #0
 801143c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801143e:	2308      	movs	r3, #8
    }
}
 8011440:	4618      	mov	r0, r3
 8011442:	372c      	adds	r7, #44	; 0x2c
 8011444:	46bd      	mov	sp, r7
 8011446:	bd90      	pop	{r4, r7, pc}
 8011448:	20000b90 	.word	0x20000b90
 801144c:	20000670 	.word	0x20000670

08011450 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011450:	b590      	push	{r4, r7, lr}
 8011452:	b087      	sub	sp, #28
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011458:	2300      	movs	r3, #0
 801145a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d101      	bne.n	8011466 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011462:	2303      	movs	r3, #3
 8011464:	e191      	b.n	801178a <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	2b39      	cmp	r3, #57	; 0x39
 801146c:	f200 8186 	bhi.w	801177c <LoRaMacMibGetRequestConfirm+0x32c>
 8011470:	a201      	add	r2, pc, #4	; (adr r2, 8011478 <LoRaMacMibGetRequestConfirm+0x28>)
 8011472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011476:	bf00      	nop
 8011478:	08011561 	.word	0x08011561
 801147c:	0801156d 	.word	0x0801156d
 8011480:	08011579 	.word	0x08011579
 8011484:	08011585 	.word	0x08011585
 8011488:	08011591 	.word	0x08011591
 801148c:	0801159d 	.word	0x0801159d
 8011490:	080115a9 	.word	0x080115a9
 8011494:	0801177d 	.word	0x0801177d
 8011498:	0801177d 	.word	0x0801177d
 801149c:	0801177d 	.word	0x0801177d
 80114a0:	0801177d 	.word	0x0801177d
 80114a4:	0801177d 	.word	0x0801177d
 80114a8:	0801177d 	.word	0x0801177d
 80114ac:	0801177d 	.word	0x0801177d
 80114b0:	0801177d 	.word	0x0801177d
 80114b4:	080115b5 	.word	0x080115b5
 80114b8:	080115c1 	.word	0x080115c1
 80114bc:	080115cd 	.word	0x080115cd
 80114c0:	080115ef 	.word	0x080115ef
 80114c4:	08011601 	.word	0x08011601
 80114c8:	08011613 	.word	0x08011613
 80114cc:	08011625 	.word	0x08011625
 80114d0:	08011659 	.word	0x08011659
 80114d4:	08011637 	.word	0x08011637
 80114d8:	0801167b 	.word	0x0801167b
 80114dc:	08011687 	.word	0x08011687
 80114e0:	08011691 	.word	0x08011691
 80114e4:	0801169b 	.word	0x0801169b
 80114e8:	080116a5 	.word	0x080116a5
 80114ec:	080116af 	.word	0x080116af
 80114f0:	080116b9 	.word	0x080116b9
 80114f4:	080116e5 	.word	0x080116e5
 80114f8:	080116f1 	.word	0x080116f1
 80114fc:	08011709 	.word	0x08011709
 8011500:	080116fd 	.word	0x080116fd
 8011504:	08011715 	.word	0x08011715
 8011508:	0801171f 	.word	0x0801171f
 801150c:	0801172b 	.word	0x0801172b
 8011510:	08011745 	.word	0x08011745
 8011514:	08011735 	.word	0x08011735
 8011518:	0801173d 	.word	0x0801173d
 801151c:	0801177d 	.word	0x0801177d
 8011520:	08011751 	.word	0x08011751
 8011524:	0801177d 	.word	0x0801177d
 8011528:	0801177d 	.word	0x0801177d
 801152c:	0801177d 	.word	0x0801177d
 8011530:	0801177d 	.word	0x0801177d
 8011534:	0801177d 	.word	0x0801177d
 8011538:	0801177d 	.word	0x0801177d
 801153c:	0801177d 	.word	0x0801177d
 8011540:	0801177d 	.word	0x0801177d
 8011544:	0801177d 	.word	0x0801177d
 8011548:	0801177d 	.word	0x0801177d
 801154c:	0801177d 	.word	0x0801177d
 8011550:	0801177d 	.word	0x0801177d
 8011554:	0801177d 	.word	0x0801177d
 8011558:	08011765 	.word	0x08011765
 801155c:	08011771 	.word	0x08011771
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011560:	4b8c      	ldr	r3, [pc, #560]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 8011562:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	711a      	strb	r2, [r3, #4]
            break;
 801156a:	e10d      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801156c:	4b89      	ldr	r3, [pc, #548]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 801156e:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	711a      	strb	r2, [r3, #4]
            break;
 8011576:	e107      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011578:	f7fa fc84 	bl	800be84 <SecureElementGetDevEui>
 801157c:	4602      	mov	r2, r0
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	605a      	str	r2, [r3, #4]
            break;
 8011582:	e101      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8011584:	f7fa fca0 	bl	800bec8 <SecureElementGetJoinEui>
 8011588:	4602      	mov	r2, r0
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	605a      	str	r2, [r3, #4]
            break;
 801158e:	e0fb      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011590:	4b80      	ldr	r3, [pc, #512]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 8011592:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	711a      	strb	r2, [r3, #4]
            break;
 801159a:	e0f5      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 801159c:	4b7d      	ldr	r3, [pc, #500]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 801159e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	605a      	str	r2, [r3, #4]
            break;
 80115a6:	e0ef      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80115a8:	4b7a      	ldr	r3, [pc, #488]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 80115aa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	605a      	str	r2, [r3, #4]
            break;
 80115b2:	e0e9      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80115b4:	4b77      	ldr	r3, [pc, #476]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 80115b6:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	711a      	strb	r2, [r3, #4]
            break;
 80115be:	e0e3      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80115c0:	4b74      	ldr	r3, [pc, #464]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 80115c2:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	711a      	strb	r2, [r3, #4]
            break;
 80115ca:	e0dd      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80115cc:	231c      	movs	r3, #28
 80115ce:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80115d0:	4b70      	ldr	r3, [pc, #448]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 80115d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80115d6:	f107 0210 	add.w	r2, r7, #16
 80115da:	4611      	mov	r1, r2
 80115dc:	4618      	mov	r0, r3
 80115de:	f002 ffa4 	bl	801452a <RegionGetPhyParam>
 80115e2:	4603      	mov	r3, r0
 80115e4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80115e6:	68fa      	ldr	r2, [r7, #12]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	605a      	str	r2, [r3, #4]
            break;
 80115ec:	e0cc      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	4a68      	ldr	r2, [pc, #416]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 80115f2:	3304      	adds	r3, #4
 80115f4:	3264      	adds	r2, #100	; 0x64
 80115f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115fa:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80115fe:	e0c3      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	4a64      	ldr	r2, [pc, #400]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 8011604:	3304      	adds	r3, #4
 8011606:	32a8      	adds	r2, #168	; 0xa8
 8011608:	e892 0003 	ldmia.w	r2, {r0, r1}
 801160c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011610:	e0ba      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	4a5f      	ldr	r2, [pc, #380]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 8011616:	3304      	adds	r3, #4
 8011618:	326c      	adds	r2, #108	; 0x6c
 801161a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801161e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011622:	e0b1      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	4a5b      	ldr	r2, [pc, #364]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 8011628:	3304      	adds	r3, #4
 801162a:	32b0      	adds	r2, #176	; 0xb0
 801162c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011630:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011634:	e0a8      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011636:	231a      	movs	r3, #26
 8011638:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801163a:	4b56      	ldr	r3, [pc, #344]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 801163c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011640:	f107 0210 	add.w	r2, r7, #16
 8011644:	4611      	mov	r1, r2
 8011646:	4618      	mov	r0, r3
 8011648:	f002 ff6f 	bl	801452a <RegionGetPhyParam>
 801164c:	4603      	mov	r3, r0
 801164e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011650:	68fa      	ldr	r2, [r7, #12]
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	605a      	str	r2, [r3, #4]
            break;
 8011656:	e097      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011658:	2319      	movs	r3, #25
 801165a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801165c:	4b4d      	ldr	r3, [pc, #308]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 801165e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011662:	f107 0210 	add.w	r2, r7, #16
 8011666:	4611      	mov	r1, r2
 8011668:	4618      	mov	r0, r3
 801166a:	f002 ff5e 	bl	801452a <RegionGetPhyParam>
 801166e:	4603      	mov	r3, r0
 8011670:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011672:	68fa      	ldr	r2, [r7, #12]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	605a      	str	r2, [r3, #4]
            break;
 8011678:	e086      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801167a:	4b46      	ldr	r3, [pc, #280]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 801167c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	711a      	strb	r2, [r3, #4]
            break;
 8011684:	e080      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011686:	4b43      	ldr	r3, [pc, #268]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 8011688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	605a      	str	r2, [r3, #4]
            break;
 801168e:	e07b      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011690:	4b40      	ldr	r3, [pc, #256]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 8011692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	605a      	str	r2, [r3, #4]
            break;
 8011698:	e076      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801169a:	4b3e      	ldr	r3, [pc, #248]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 801169c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	605a      	str	r2, [r3, #4]
            break;
 80116a2:	e071      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80116a4:	4b3b      	ldr	r3, [pc, #236]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 80116a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	605a      	str	r2, [r3, #4]
            break;
 80116ac:	e06c      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80116ae:	4b39      	ldr	r3, [pc, #228]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 80116b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	605a      	str	r2, [r3, #4]
            break;
 80116b6:	e067      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 80116b8:	2302      	movs	r3, #2
 80116ba:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80116bc:	4b35      	ldr	r3, [pc, #212]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 80116be:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80116c2:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80116c4:	4b33      	ldr	r3, [pc, #204]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 80116c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80116ca:	f107 0210 	add.w	r2, r7, #16
 80116ce:	4611      	mov	r1, r2
 80116d0:	4618      	mov	r0, r3
 80116d2:	f002 ff2a 	bl	801452a <RegionGetPhyParam>
 80116d6:	4603      	mov	r3, r0
 80116d8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	b25a      	sxtb	r2, r3
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	711a      	strb	r2, [r3, #4]
            break;
 80116e2:	e051      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80116e4:	4b2b      	ldr	r3, [pc, #172]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 80116e6:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	711a      	strb	r2, [r3, #4]
            break;
 80116ee:	e04b      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80116f0:	4b28      	ldr	r3, [pc, #160]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 80116f2:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	711a      	strb	r2, [r3, #4]
            break;
 80116fa:	e045      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80116fc:	4b25      	ldr	r3, [pc, #148]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 80116fe:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	711a      	strb	r2, [r3, #4]
            break;
 8011706:	e03f      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011708:	4b22      	ldr	r3, [pc, #136]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 801170a:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	711a      	strb	r2, [r3, #4]
            break;
 8011712:	e039      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011714:	4b1f      	ldr	r3, [pc, #124]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 8011716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	605a      	str	r2, [r3, #4]
            break;
 801171c:	e034      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801171e:	4b1d      	ldr	r3, [pc, #116]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 8011720:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	711a      	strb	r2, [r3, #4]
            break;
 8011728:	e02e      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801172a:	4b1a      	ldr	r3, [pc, #104]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 801172c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	605a      	str	r2, [r3, #4]
            break;
 8011732:	e029      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	4a17      	ldr	r2, [pc, #92]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 8011738:	605a      	str	r2, [r3, #4]
            break;
 801173a:	e025      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	4a16      	ldr	r2, [pc, #88]	; (8011798 <LoRaMacMibGetRequestConfirm+0x348>)
 8011740:	605a      	str	r2, [r3, #4]
            break;
 8011742:	e021      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011744:	4b13      	ldr	r3, [pc, #76]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 8011746:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	605a      	str	r2, [r3, #4]
            break;
 801174e:	e01b      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	4a10      	ldr	r2, [pc, #64]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 8011754:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8011758:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 801175a:	687c      	ldr	r4, [r7, #4]
 801175c:	f003 f8f2 	bl	8014944 <RegionGetVersion>
 8011760:	60a0      	str	r0, [r4, #8]
            break;
 8011762:	e011      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8011764:	4b0b      	ldr	r3, [pc, #44]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 8011766:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	605a      	str	r2, [r3, #4]
            break;
 801176e:	e00b      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8011770:	4b08      	ldr	r3, [pc, #32]	; (8011794 <LoRaMacMibGetRequestConfirm+0x344>)
 8011772:	f893 210b 	ldrb.w	r2, [r3, #267]	; 0x10b
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	711a      	strb	r2, [r3, #4]
            break;
 801177a:	e005      	b.n	8011788 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f000 ffca 	bl	8012716 <LoRaMacClassBMibGetRequestConfirm>
 8011782:	4603      	mov	r3, r0
 8011784:	75fb      	strb	r3, [r7, #23]
            break;
 8011786:	bf00      	nop
        }
    }
    return status;
 8011788:	7dfb      	ldrb	r3, [r7, #23]
}
 801178a:	4618      	mov	r0, r3
 801178c:	371c      	adds	r7, #28
 801178e:	46bd      	mov	sp, r7
 8011790:	bd90      	pop	{r4, r7, pc}
 8011792:	bf00      	nop
 8011794:	20000b90 	.word	0x20000b90
 8011798:	2000111c 	.word	0x2000111c

0801179c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b086      	sub	sp, #24
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80117a4:	2300      	movs	r3, #0
 80117a6:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d101      	bne.n	80117b2 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80117ae:	2303      	movs	r3, #3
 80117b0:	e35c      	b.n	8011e6c <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80117b2:	4bb9      	ldr	r3, [pc, #740]	; (8011a98 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80117b4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80117b8:	f003 0302 	and.w	r3, r3, #2
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d001      	beq.n	80117c4 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80117c0:	2301      	movs	r3, #1
 80117c2:	e353      	b.n	8011e6c <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	2b39      	cmp	r3, #57	; 0x39
 80117ca:	f200 8323 	bhi.w	8011e14 <LoRaMacMibSetRequestConfirm+0x678>
 80117ce:	a201      	add	r2, pc, #4	; (adr r2, 80117d4 <LoRaMacMibSetRequestConfirm+0x38>)
 80117d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117d4:	080118bd 	.word	0x080118bd
 80117d8:	080118cd 	.word	0x080118cd
 80117dc:	080118e7 	.word	0x080118e7
 80117e0:	080118ff 	.word	0x080118ff
 80117e4:	08011917 	.word	0x08011917
 80117e8:	08011923 	.word	0x08011923
 80117ec:	0801192f 	.word	0x0801192f
 80117f0:	0801193b 	.word	0x0801193b
 80117f4:	08011961 	.word	0x08011961
 80117f8:	08011987 	.word	0x08011987
 80117fc:	080119ad 	.word	0x080119ad
 8011800:	080119d3 	.word	0x080119d3
 8011804:	080119f9 	.word	0x080119f9
 8011808:	08011a1f 	.word	0x08011a1f
 801180c:	08011a45 	.word	0x08011a45
 8011810:	08011a6b 	.word	0x08011a6b
 8011814:	08011a8b 	.word	0x08011a8b
 8011818:	08011e15 	.word	0x08011e15
 801181c:	08011aa5 	.word	0x08011aa5
 8011820:	08011b15 	.word	0x08011b15
 8011824:	08011b55 	.word	0x08011b55
 8011828:	08011bb7 	.word	0x08011bb7
 801182c:	08011c27 	.word	0x08011c27
 8011830:	08011bf7 	.word	0x08011bf7
 8011834:	08011c57 	.word	0x08011c57
 8011838:	08011c79 	.word	0x08011c79
 801183c:	08011c83 	.word	0x08011c83
 8011840:	08011c8d 	.word	0x08011c8d
 8011844:	08011c97 	.word	0x08011c97
 8011848:	08011ca1 	.word	0x08011ca1
 801184c:	08011e15 	.word	0x08011e15
 8011850:	08011cab 	.word	0x08011cab
 8011854:	08011cdd 	.word	0x08011cdd
 8011858:	08011d49 	.word	0x08011d49
 801185c:	08011d17 	.word	0x08011d17
 8011860:	08011d85 	.word	0x08011d85
 8011864:	08011d9b 	.word	0x08011d9b
 8011868:	08011db3 	.word	0x08011db3
 801186c:	08011dbd 	.word	0x08011dbd
 8011870:	08011dc9 	.word	0x08011dc9
 8011874:	08011e15 	.word	0x08011e15
 8011878:	08011dd3 	.word	0x08011dd3
 801187c:	08011e15 	.word	0x08011e15
 8011880:	08011e15 	.word	0x08011e15
 8011884:	08011e15 	.word	0x08011e15
 8011888:	08011e15 	.word	0x08011e15
 801188c:	08011e15 	.word	0x08011e15
 8011890:	08011e15 	.word	0x08011e15
 8011894:	08011e15 	.word	0x08011e15
 8011898:	08011e15 	.word	0x08011e15
 801189c:	08011e15 	.word	0x08011e15
 80118a0:	08011e15 	.word	0x08011e15
 80118a4:	08011e15 	.word	0x08011e15
 80118a8:	08011e15 	.word	0x08011e15
 80118ac:	08011e15 	.word	0x08011e15
 80118b0:	08011e15 	.word	0x08011e15
 80118b4:	08011dfd 	.word	0x08011dfd
 80118b8:	08011e09 	.word	0x08011e09
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	791b      	ldrb	r3, [r3, #4]
 80118c0:	4618      	mov	r0, r3
 80118c2:	f7fd fb81 	bl	800efc8 <SwitchClass>
 80118c6:	4603      	mov	r3, r0
 80118c8:	75fb      	strb	r3, [r7, #23]
            break;
 80118ca:	e2c4      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	791b      	ldrb	r3, [r3, #4]
 80118d0:	2b02      	cmp	r3, #2
 80118d2:	d005      	beq.n	80118e0 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	791a      	ldrb	r2, [r3, #4]
 80118d8:	4b70      	ldr	r3, [pc, #448]	; (8011a9c <LoRaMacMibSetRequestConfirm+0x300>)
 80118da:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80118de:	e2ba      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118e0:	2303      	movs	r3, #3
 80118e2:	75fb      	strb	r3, [r7, #23]
            break;
 80118e4:	e2b7      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	685b      	ldr	r3, [r3, #4]
 80118ea:	4618      	mov	r0, r3
 80118ec:	f7fa fab2 	bl	800be54 <SecureElementSetDevEui>
 80118f0:	4603      	mov	r3, r0
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	f000 8294 	beq.w	8011e20 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118f8:	2303      	movs	r3, #3
 80118fa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80118fc:	e290      	b.n	8011e20 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	685b      	ldr	r3, [r3, #4]
 8011902:	4618      	mov	r0, r3
 8011904:	f7fa fac8 	bl	800be98 <SecureElementSetJoinEui>
 8011908:	4603      	mov	r3, r0
 801190a:	2b00      	cmp	r3, #0
 801190c:	f000 828a 	beq.w	8011e24 <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011910:	2303      	movs	r3, #3
 8011912:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011914:	e286      	b.n	8011e24 <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	791a      	ldrb	r2, [r3, #4]
 801191a:	4b60      	ldr	r3, [pc, #384]	; (8011a9c <LoRaMacMibSetRequestConfirm+0x300>)
 801191c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8011920:	e299      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	685b      	ldr	r3, [r3, #4]
 8011926:	4a5d      	ldr	r2, [pc, #372]	; (8011a9c <LoRaMacMibSetRequestConfirm+0x300>)
 8011928:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 801192c:	e293      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	4a5a      	ldr	r2, [pc, #360]	; (8011a9c <LoRaMacMibSetRequestConfirm+0x300>)
 8011934:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8011938:	e28d      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d00b      	beq.n	801195a <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	685b      	ldr	r3, [r3, #4]
 8011946:	4619      	mov	r1, r3
 8011948:	2000      	movs	r0, #0
 801194a:	f001 ffff 	bl	801394c <LoRaMacCryptoSetKey>
 801194e:	4603      	mov	r3, r0
 8011950:	2b00      	cmp	r3, #0
 8011952:	f000 8269 	beq.w	8011e28 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011956:	2311      	movs	r3, #17
 8011958:	e288      	b.n	8011e6c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801195a:	2303      	movs	r3, #3
 801195c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801195e:	e263      	b.n	8011e28 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d00b      	beq.n	8011980 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	685b      	ldr	r3, [r3, #4]
 801196c:	4619      	mov	r1, r3
 801196e:	2001      	movs	r0, #1
 8011970:	f001 ffec 	bl	801394c <LoRaMacCryptoSetKey>
 8011974:	4603      	mov	r3, r0
 8011976:	2b00      	cmp	r3, #0
 8011978:	f000 8258 	beq.w	8011e2c <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801197c:	2311      	movs	r3, #17
 801197e:	e275      	b.n	8011e6c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011980:	2303      	movs	r3, #3
 8011982:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011984:	e252      	b.n	8011e2c <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	685b      	ldr	r3, [r3, #4]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d00b      	beq.n	80119a6 <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	685b      	ldr	r3, [r3, #4]
 8011992:	4619      	mov	r1, r3
 8011994:	2002      	movs	r0, #2
 8011996:	f001 ffd9 	bl	801394c <LoRaMacCryptoSetKey>
 801199a:	4603      	mov	r3, r0
 801199c:	2b00      	cmp	r3, #0
 801199e:	f000 8247 	beq.w	8011e30 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80119a2:	2311      	movs	r3, #17
 80119a4:	e262      	b.n	8011e6c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119a6:	2303      	movs	r3, #3
 80119a8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80119aa:	e241      	b.n	8011e30 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	685b      	ldr	r3, [r3, #4]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d00b      	beq.n	80119cc <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	4619      	mov	r1, r3
 80119ba:	2003      	movs	r0, #3
 80119bc:	f001 ffc6 	bl	801394c <LoRaMacCryptoSetKey>
 80119c0:	4603      	mov	r3, r0
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	f000 8236 	beq.w	8011e34 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80119c8:	2311      	movs	r3, #17
 80119ca:	e24f      	b.n	8011e6c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119cc:	2303      	movs	r3, #3
 80119ce:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80119d0:	e230      	b.n	8011e34 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d00b      	beq.n	80119f2 <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	4619      	mov	r1, r3
 80119e0:	207f      	movs	r0, #127	; 0x7f
 80119e2:	f001 ffb3 	bl	801394c <LoRaMacCryptoSetKey>
 80119e6:	4603      	mov	r3, r0
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	f000 8225 	beq.w	8011e38 <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80119ee:	2311      	movs	r3, #17
 80119f0:	e23c      	b.n	8011e6c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119f2:	2303      	movs	r3, #3
 80119f4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80119f6:	e21f      	b.n	8011e38 <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	685b      	ldr	r3, [r3, #4]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d00b      	beq.n	8011a18 <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	4619      	mov	r1, r3
 8011a06:	2080      	movs	r0, #128	; 0x80
 8011a08:	f001 ffa0 	bl	801394c <LoRaMacCryptoSetKey>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	f000 8214 	beq.w	8011e3c <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a14:	2311      	movs	r3, #17
 8011a16:	e229      	b.n	8011e6c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a18:	2303      	movs	r3, #3
 8011a1a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a1c:	e20e      	b.n	8011e3c <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d00b      	beq.n	8011a3e <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	685b      	ldr	r3, [r3, #4]
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	2081      	movs	r0, #129	; 0x81
 8011a2e:	f001 ff8d 	bl	801394c <LoRaMacCryptoSetKey>
 8011a32:	4603      	mov	r3, r0
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	f000 8203 	beq.w	8011e40 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a3a:	2311      	movs	r3, #17
 8011a3c:	e216      	b.n	8011e6c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a3e:	2303      	movs	r3, #3
 8011a40:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a42:	e1fd      	b.n	8011e40 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d00b      	beq.n	8011a64 <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	4619      	mov	r1, r3
 8011a52:	2082      	movs	r0, #130	; 0x82
 8011a54:	f001 ff7a 	bl	801394c <LoRaMacCryptoSetKey>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	f000 81f2 	beq.w	8011e44 <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a60:	2311      	movs	r3, #17
 8011a62:	e203      	b.n	8011e6c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a64:	2303      	movs	r3, #3
 8011a66:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a68:	e1ec      	b.n	8011e44 <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	791a      	ldrb	r2, [r3, #4]
 8011a6e:	4b0b      	ldr	r3, [pc, #44]	; (8011a9c <LoRaMacMibSetRequestConfirm+0x300>)
 8011a70:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011a74:	4b0a      	ldr	r3, [pc, #40]	; (8011aa0 <LoRaMacMibSetRequestConfirm+0x304>)
 8011a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a78:	4a08      	ldr	r2, [pc, #32]	; (8011a9c <LoRaMacMibSetRequestConfirm+0x300>)
 8011a7a:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8011a7e:	4610      	mov	r0, r2
 8011a80:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8011a82:	4b07      	ldr	r3, [pc, #28]	; (8011aa0 <LoRaMacMibSetRequestConfirm+0x304>)
 8011a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a86:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8011a88:	e1e5      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	791a      	ldrb	r2, [r3, #4]
 8011a8e:	4b03      	ldr	r3, [pc, #12]	; (8011a9c <LoRaMacMibSetRequestConfirm+0x300>)
 8011a90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8011a94:	e1df      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
 8011a96:	bf00      	nop
 8011a98:	20000670 	.word	0x20000670
 8011a9c:	20000b90 	.word	0x20000b90
 8011aa0:	0801dc4c 	.word	0x0801dc4c
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	7a1b      	ldrb	r3, [r3, #8]
 8011aa8:	b25b      	sxtb	r3, r3
 8011aaa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011aac:	4bb3      	ldr	r3, [pc, #716]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011aae:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011ab2:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8011ab4:	4bb1      	ldr	r3, [pc, #708]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011aba:	f107 0108 	add.w	r1, r7, #8
 8011abe:	2207      	movs	r2, #7
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f002 fd80 	bl	80145c6 <RegionVerify>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	f083 0301 	eor.w	r3, r3, #1
 8011acc:	b2db      	uxtb	r3, r3
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d002      	beq.n	8011ad8 <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ad2:	2303      	movs	r3, #3
 8011ad4:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8011ad6:	e1be      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011ade:	4ba7      	ldr	r3, [pc, #668]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011ae0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ae4:	f107 0108 	add.w	r1, r7, #8
 8011ae8:	2200      	movs	r2, #0
 8011aea:	4618      	mov	r0, r3
 8011aec:	f002 fd6b 	bl	80145c6 <RegionVerify>
 8011af0:	4603      	mov	r3, r0
 8011af2:	f083 0301 	eor.w	r3, r3, #1
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d002      	beq.n	8011b02 <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011afc:	2303      	movs	r3, #3
 8011afe:	75fb      	strb	r3, [r7, #23]
            break;
 8011b00:	e1a9      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011b02:	4b9e      	ldr	r3, [pc, #632]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b04:	687a      	ldr	r2, [r7, #4]
 8011b06:	3364      	adds	r3, #100	; 0x64
 8011b08:	3204      	adds	r2, #4
 8011b0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b0e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011b12:	e1a0      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	7a1b      	ldrb	r3, [r3, #8]
 8011b18:	b25b      	sxtb	r3, r3
 8011b1a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011b1c:	4b97      	ldr	r3, [pc, #604]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b1e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011b22:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011b24:	4b95      	ldr	r3, [pc, #596]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b2a:	f107 0108 	add.w	r1, r7, #8
 8011b2e:	2207      	movs	r2, #7
 8011b30:	4618      	mov	r0, r3
 8011b32:	f002 fd48 	bl	80145c6 <RegionVerify>
 8011b36:	4603      	mov	r3, r0
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d008      	beq.n	8011b4e <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8011b3c:	4b8f      	ldr	r3, [pc, #572]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b3e:	687a      	ldr	r2, [r7, #4]
 8011b40:	33a8      	adds	r3, #168	; 0xa8
 8011b42:	3204      	adds	r2, #4
 8011b44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b48:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011b4c:	e183      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b4e:	2303      	movs	r3, #3
 8011b50:	75fb      	strb	r3, [r7, #23]
            break;
 8011b52:	e180      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	7a1b      	ldrb	r3, [r3, #8]
 8011b58:	b25b      	sxtb	r3, r3
 8011b5a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011b5c:	4b87      	ldr	r3, [pc, #540]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b5e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011b62:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011b64:	4b85      	ldr	r3, [pc, #532]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b6a:	f107 0108 	add.w	r1, r7, #8
 8011b6e:	2207      	movs	r2, #7
 8011b70:	4618      	mov	r0, r3
 8011b72:	f002 fd28 	bl	80145c6 <RegionVerify>
 8011b76:	4603      	mov	r3, r0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d019      	beq.n	8011bb0 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8011b7c:	4b7f      	ldr	r3, [pc, #508]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b7e:	687a      	ldr	r2, [r7, #4]
 8011b80:	336c      	adds	r3, #108	; 0x6c
 8011b82:	3204      	adds	r2, #4
 8011b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b88:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8011b8c:	4b7b      	ldr	r3, [pc, #492]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b8e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011b92:	2b02      	cmp	r3, #2
 8011b94:	f040 8158 	bne.w	8011e48 <LoRaMacMibSetRequestConfirm+0x6ac>
 8011b98:	4b78      	ldr	r3, [pc, #480]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b9a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	f000 8152 	beq.w	8011e48 <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8011ba4:	4b76      	ldr	r3, [pc, #472]	; (8011d80 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ba8:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8011baa:	f7fe fca5 	bl	80104f8 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011bae:	e14b      	b.n	8011e48 <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011bb0:	2303      	movs	r3, #3
 8011bb2:	75fb      	strb	r3, [r7, #23]
            break;
 8011bb4:	e148      	b.n	8011e48 <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	7a1b      	ldrb	r3, [r3, #8]
 8011bba:	b25b      	sxtb	r3, r3
 8011bbc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011bbe:	4b6f      	ldr	r3, [pc, #444]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011bc0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011bc4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011bc6:	4b6d      	ldr	r3, [pc, #436]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011bcc:	f107 0108 	add.w	r1, r7, #8
 8011bd0:	2207      	movs	r2, #7
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f002 fcf7 	bl	80145c6 <RegionVerify>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d008      	beq.n	8011bf0 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011bde:	4b67      	ldr	r3, [pc, #412]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011be0:	687a      	ldr	r2, [r7, #4]
 8011be2:	33b0      	adds	r3, #176	; 0xb0
 8011be4:	3204      	adds	r2, #4
 8011be6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011bea:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011bee:	e132      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011bf0:	2303      	movs	r3, #3
 8011bf2:	75fb      	strb	r3, [r7, #23]
            break;
 8011bf4:	e12f      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	685b      	ldr	r3, [r3, #4]
 8011bfa:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011c00:	4b5e      	ldr	r3, [pc, #376]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c06:	f107 020c 	add.w	r2, r7, #12
 8011c0a:	4611      	mov	r1, r2
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f002 fd12 	bl	8014636 <RegionChanMaskSet>
 8011c12:	4603      	mov	r3, r0
 8011c14:	f083 0301 	eor.w	r3, r3, #1
 8011c18:	b2db      	uxtb	r3, r3
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	f000 8116 	beq.w	8011e4c <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c20:	2303      	movs	r3, #3
 8011c22:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011c24:	e112      	b.n	8011e4c <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011c30:	4b52      	ldr	r3, [pc, #328]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c36:	f107 020c 	add.w	r2, r7, #12
 8011c3a:	4611      	mov	r1, r2
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f002 fcfa 	bl	8014636 <RegionChanMaskSet>
 8011c42:	4603      	mov	r3, r0
 8011c44:	f083 0301 	eor.w	r3, r3, #1
 8011c48:	b2db      	uxtb	r3, r3
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	f000 8100 	beq.w	8011e50 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c50:	2303      	movs	r3, #3
 8011c52:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011c54:	e0fc      	b.n	8011e50 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	791b      	ldrb	r3, [r3, #4]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d009      	beq.n	8011c72 <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011c62:	2b0f      	cmp	r3, #15
 8011c64:	d805      	bhi.n	8011c72 <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	791a      	ldrb	r2, [r3, #4]
 8011c6a:	4b44      	ldr	r3, [pc, #272]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c6c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011c70:	e0f1      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c72:	2303      	movs	r3, #3
 8011c74:	75fb      	strb	r3, [r7, #23]
            break;
 8011c76:	e0ee      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	4a3f      	ldr	r2, [pc, #252]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8011c80:	e0e9      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	4a3d      	ldr	r2, [pc, #244]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c88:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8011c8a:	e0e4      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	4a3a      	ldr	r2, [pc, #232]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c92:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8011c94:	e0df      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	685b      	ldr	r3, [r3, #4]
 8011c9a:	4a38      	ldr	r2, [pc, #224]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c9c:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8011c9e:	e0da      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	685b      	ldr	r3, [r3, #4]
 8011ca4:	4a35      	ldr	r2, [pc, #212]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011ca6:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8011ca8:	e0d5      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011cb0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8011cb2:	4b32      	ldr	r3, [pc, #200]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011cb8:	f107 0108 	add.w	r1, r7, #8
 8011cbc:	2206      	movs	r2, #6
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f002 fc81 	bl	80145c6 <RegionVerify>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d005      	beq.n	8011cd6 <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8011cca:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011cce:	4b2b      	ldr	r3, [pc, #172]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cd0:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011cd4:	e0bf      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011cd6:	2303      	movs	r3, #3
 8011cd8:	75fb      	strb	r3, [r7, #23]
            break;
 8011cda:	e0bc      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011ce2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011ce4:	4b25      	ldr	r3, [pc, #148]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011ce6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011cea:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011cec:	4b23      	ldr	r3, [pc, #140]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011cf2:	f107 0108 	add.w	r1, r7, #8
 8011cf6:	2205      	movs	r2, #5
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f002 fc64 	bl	80145c6 <RegionVerify>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d005      	beq.n	8011d10 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011d04:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011d08:	4b1c      	ldr	r3, [pc, #112]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011d0e:	e0a2      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d10:	2303      	movs	r3, #3
 8011d12:	75fb      	strb	r3, [r7, #23]
            break;
 8011d14:	e09f      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011d1c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011d1e:	4b17      	ldr	r3, [pc, #92]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d24:	f107 0108 	add.w	r1, r7, #8
 8011d28:	220a      	movs	r2, #10
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f002 fc4b 	bl	80145c6 <RegionVerify>
 8011d30:	4603      	mov	r3, r0
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d005      	beq.n	8011d42 <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011d36:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011d3a:	4b10      	ldr	r3, [pc, #64]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d3c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011d40:	e089      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d42:	2303      	movs	r3, #3
 8011d44:	75fb      	strb	r3, [r7, #23]
            break;
 8011d46:	e086      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011d4e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011d50:	4b0a      	ldr	r3, [pc, #40]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d56:	f107 0108 	add.w	r1, r7, #8
 8011d5a:	2209      	movs	r2, #9
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f002 fc32 	bl	80145c6 <RegionVerify>
 8011d62:	4603      	mov	r3, r0
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d005      	beq.n	8011d74 <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011d68:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011d6c:	4b03      	ldr	r3, [pc, #12]	; (8011d7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011d72:	e070      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d74:	2303      	movs	r3, #3
 8011d76:	75fb      	strb	r3, [r7, #23]
            break;
 8011d78:	e06d      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
 8011d7a:	bf00      	nop
 8011d7c:	20000b90 	.word	0x20000b90
 8011d80:	0801dc4c 	.word	0x0801dc4c
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	4a3a      	ldr	r2, [pc, #232]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011d8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8011d8e:	4b39      	ldr	r3, [pc, #228]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d94:	4a37      	ldr	r2, [pc, #220]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011d96:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8011d98:	e05d      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	791a      	ldrb	r2, [r3, #4]
 8011d9e:	4b35      	ldr	r3, [pc, #212]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011da0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8011da4:	4b33      	ldr	r3, [pc, #204]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011da6:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011daa:	4b32      	ldr	r3, [pc, #200]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8011db0:	e051      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	685b      	ldr	r3, [r3, #4]
 8011db6:	4a2f      	ldr	r2, [pc, #188]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011db8:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8011dba:	e04c      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	4a2c      	ldr	r2, [pc, #176]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011dc2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 8011dc6:	e046      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8011dc8:	f7fe fdc8 	bl	801095c <RestoreNvmData>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	75fb      	strb	r3, [r7, #23]
            break;
 8011dd0:	e041      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	799b      	ldrb	r3, [r3, #6]
 8011dd6:	2b01      	cmp	r3, #1
 8011dd8:	d80d      	bhi.n	8011df6 <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011dda:	4a26      	ldr	r2, [pc, #152]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6858      	ldr	r0, [r3, #4]
 8011de8:	f001 fd14 	bl	8013814 <LoRaMacCryptoSetLrWanVersion>
 8011dec:	4603      	mov	r3, r0
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d030      	beq.n	8011e54 <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011df2:	2311      	movs	r3, #17
 8011df4:	e03a      	b.n	8011e6c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011df6:	2303      	movs	r3, #3
 8011df8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011dfa:	e02b      	b.n	8011e54 <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	685b      	ldr	r3, [r3, #4]
 8011e00:	4a1c      	ldr	r2, [pc, #112]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011e02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8011e06:	e026      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	791a      	ldrb	r2, [r3, #4]
 8011e0c:	4b19      	ldr	r3, [pc, #100]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011e0e:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
            break;
 8011e12:	e020      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f000 fc88 	bl	801272a <LoRaMacMibClassBSetRequestConfirm>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	75fb      	strb	r3, [r7, #23]
            break;
 8011e1e:	e01a      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e20:	bf00      	nop
 8011e22:	e018      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e24:	bf00      	nop
 8011e26:	e016      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e28:	bf00      	nop
 8011e2a:	e014      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e2c:	bf00      	nop
 8011e2e:	e012      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e30:	bf00      	nop
 8011e32:	e010      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e34:	bf00      	nop
 8011e36:	e00e      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e38:	bf00      	nop
 8011e3a:	e00c      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e3c:	bf00      	nop
 8011e3e:	e00a      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e40:	bf00      	nop
 8011e42:	e008      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e44:	bf00      	nop
 8011e46:	e006      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e48:	bf00      	nop
 8011e4a:	e004      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e4c:	bf00      	nop
 8011e4e:	e002      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e50:	bf00      	nop
 8011e52:	e000      	b.n	8011e56 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e54:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 8011e56:	7dfb      	ldrb	r3, [r7, #23]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d106      	bne.n	8011e6a <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011e5c:	4a06      	ldr	r2, [pc, #24]	; (8011e78 <LoRaMacMibSetRequestConfirm+0x6dc>)
 8011e5e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8011e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e66:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 8011e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3718      	adds	r7, #24
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	20000b90 	.word	0x20000b90
 8011e78:	20000670 	.word	0x20000670

08011e7c <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b08a      	sub	sp, #40	; 0x28
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011e84:	2302      	movs	r3, #2
 8011e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d101      	bne.n	8011e98 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e94:	2303      	movs	r3, #3
 8011e96:	e16c      	b.n	8012172 <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8011e9e:	f7fc fc6b 	bl	800e778 <LoRaMacIsBusy>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d001      	beq.n	8011eac <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	e162      	b.n	8012172 <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011eac:	f001 f956 	bl	801315c <LoRaMacConfirmQueueIsFull>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d001      	beq.n	8011eba <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	e15b      	b.n	8012172 <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011eba:	f001 f943 	bl	8013144 <LoRaMacConfirmQueueGetCnt>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d104      	bne.n	8011ece <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011ec4:	2214      	movs	r2, #20
 8011ec6:	2100      	movs	r1, #0
 8011ec8:	48ac      	ldr	r0, [pc, #688]	; (801217c <LoRaMacMlmeRequest+0x300>)
 8011eca:	f006 f963 	bl	8018194 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011ece:	4bac      	ldr	r3, [pc, #688]	; (8012180 <LoRaMacMlmeRequest+0x304>)
 8011ed0:	2201      	movs	r2, #1
 8011ed2:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011ed6:	4aaa      	ldr	r2, [pc, #680]	; (8012180 <LoRaMacMlmeRequest+0x304>)
 8011ed8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8011edc:	f043 0304 	orr.w	r3, r3, #4
 8011ee0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011eec:	2301      	movs	r3, #1
 8011eee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	3b01      	subs	r3, #1
 8011f04:	2b0c      	cmp	r3, #12
 8011f06:	f200 8108 	bhi.w	801211a <LoRaMacMlmeRequest+0x29e>
 8011f0a:	a201      	add	r2, pc, #4	; (adr r2, 8011f10 <LoRaMacMlmeRequest+0x94>)
 8011f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f10:	08011f45 	.word	0x08011f45
 8011f14:	0801211b 	.word	0x0801211b
 8011f18:	0801211b 	.word	0x0801211b
 8011f1c:	0801201b 	.word	0x0801201b
 8011f20:	0801203d 	.word	0x0801203d
 8011f24:	0801211b 	.word	0x0801211b
 8011f28:	0801211b 	.word	0x0801211b
 8011f2c:	0801211b 	.word	0x0801211b
 8011f30:	0801205b 	.word	0x0801205b
 8011f34:	0801211b 	.word	0x0801211b
 8011f38:	080120e9 	.word	0x080120e9
 8011f3c:	0801207d 	.word	0x0801207d
 8011f40:	080120c7 	.word	0x080120c7
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011f44:	4b8e      	ldr	r3, [pc, #568]	; (8012180 <LoRaMacMlmeRequest+0x304>)
 8011f46:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011f4a:	f003 0320 	and.w	r3, r3, #32
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d001      	beq.n	8011f56 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8011f52:	2301      	movs	r3, #1
 8011f54:	e10d      	b.n	8012172 <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	791b      	ldrb	r3, [r3, #4]
 8011f5a:	2b02      	cmp	r3, #2
 8011f5c:	d12e      	bne.n	8011fbc <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 8011f5e:	f7fe f995 	bl	801028c <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011f62:	4b88      	ldr	r3, [pc, #544]	; (8012184 <LoRaMacMlmeRequest+0x308>)
 8011f64:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	795b      	ldrb	r3, [r3, #5]
 8011f6c:	b25b      	sxtb	r3, r3
 8011f6e:	2200      	movs	r2, #0
 8011f70:	4619      	mov	r1, r3
 8011f72:	f002 fc70 	bl	8014856 <RegionAlternateDr>
 8011f76:	4603      	mov	r3, r0
 8011f78:	461a      	mov	r2, r3
 8011f7a:	4b82      	ldr	r3, [pc, #520]	; (8012184 <LoRaMacMlmeRequest+0x308>)
 8011f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011f80:	2307      	movs	r3, #7
 8011f82:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 8011f86:	20ff      	movs	r0, #255	; 0xff
 8011f88:	f7fd fefe 	bl	800fd88 <SendReJoinReq>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8011f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	f000 80c1 	beq.w	801211e <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011f9c:	4b79      	ldr	r3, [pc, #484]	; (8012184 <LoRaMacMlmeRequest+0x308>)
 8011f9e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	795b      	ldrb	r3, [r3, #5]
 8011fa6:	b25b      	sxtb	r3, r3
 8011fa8:	2201      	movs	r2, #1
 8011faa:	4619      	mov	r1, r3
 8011fac:	f002 fc53 	bl	8014856 <RegionAlternateDr>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	461a      	mov	r2, r3
 8011fb4:	4b73      	ldr	r3, [pc, #460]	; (8012184 <LoRaMacMlmeRequest+0x308>)
 8011fb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8011fba:	e0b0      	b.n	801211e <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	791b      	ldrb	r3, [r3, #4]
 8011fc0:	2b01      	cmp	r3, #1
 8011fc2:	f040 80ac 	bne.w	801211e <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8011fc6:	4b6f      	ldr	r3, [pc, #444]	; (8012184 <LoRaMacMlmeRequest+0x308>)
 8011fc8:	2200      	movs	r2, #0
 8011fca:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011fce:	2302      	movs	r3, #2
 8011fd0:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011fd2:	4b6c      	ldr	r3, [pc, #432]	; (8012184 <LoRaMacMlmeRequest+0x308>)
 8011fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011fd8:	f107 020c 	add.w	r2, r7, #12
 8011fdc:	4611      	mov	r1, r2
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f002 fada 	bl	8014598 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	791a      	ldrb	r2, [r3, #4]
 8011fe8:	4b66      	ldr	r3, [pc, #408]	; (8012184 <LoRaMacMlmeRequest+0x308>)
 8011fea:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 8011ffa:	4b61      	ldr	r3, [pc, #388]	; (8012180 <LoRaMacMlmeRequest+0x304>)
 8011ffc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012000:	691b      	ldr	r3, [r3, #16]
 8012002:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012004:	4a5e      	ldr	r2, [pc, #376]	; (8012180 <LoRaMacMlmeRequest+0x304>)
 8012006:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 801200a:	f043 0320 	orr.w	r3, r3, #32
 801200e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 8012012:	2300      	movs	r3, #0
 8012014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012018:	e081      	b.n	801211e <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801201a:	2300      	movs	r3, #0
 801201c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012020:	f107 031c 	add.w	r3, r7, #28
 8012024:	2200      	movs	r2, #0
 8012026:	4619      	mov	r1, r3
 8012028:	2002      	movs	r0, #2
 801202a:	f000 fcfd 	bl	8012a28 <LoRaMacCommandsAddCmd>
 801202e:	4603      	mov	r3, r0
 8012030:	2b00      	cmp	r3, #0
 8012032:	d076      	beq.n	8012122 <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012034:	2313      	movs	r3, #19
 8012036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 801203a:	e072      	b.n	8012122 <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	8898      	ldrh	r0, [r3, #4]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6899      	ldr	r1, [r3, #8]
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801204a:	b2db      	uxtb	r3, r3
 801204c:	461a      	mov	r2, r3
 801204e:	f7fe fc65 	bl	801091c <SetTxContinuousWave>
 8012052:	4603      	mov	r3, r0
 8012054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012058:	e06a      	b.n	8012130 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801205a:	2300      	movs	r3, #0
 801205c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012060:	f107 031c 	add.w	r3, r7, #28
 8012064:	2200      	movs	r2, #0
 8012066:	4619      	mov	r1, r3
 8012068:	200d      	movs	r0, #13
 801206a:	f000 fcdd 	bl	8012a28 <LoRaMacCommandsAddCmd>
 801206e:	4603      	mov	r3, r0
 8012070:	2b00      	cmp	r3, #0
 8012072:	d058      	beq.n	8012126 <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012074:	2313      	movs	r3, #19
 8012076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 801207a:	e054      	b.n	8012126 <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801207c:	4b41      	ldr	r3, [pc, #260]	; (8012184 <LoRaMacMlmeRequest+0x308>)
 801207e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012082:	2b00      	cmp	r3, #0
 8012084:	d151      	bne.n	801212a <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	791b      	ldrb	r3, [r3, #4]
 801208a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	791b      	ldrb	r3, [r3, #4]
 8012092:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012096:	b2db      	uxtb	r3, r3
 8012098:	4618      	mov	r0, r3
 801209a:	f000 fb1b 	bl	80126d4 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801209e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80120a2:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 80120a4:	2300      	movs	r3, #0
 80120a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80120aa:	f107 031c 	add.w	r3, r7, #28
 80120ae:	2201      	movs	r2, #1
 80120b0:	4619      	mov	r1, r3
 80120b2:	2010      	movs	r0, #16
 80120b4:	f000 fcb8 	bl	8012a28 <LoRaMacCommandsAddCmd>
 80120b8:	4603      	mov	r3, r0
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d035      	beq.n	801212a <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80120be:	2313      	movs	r3, #19
 80120c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 80120c4:	e031      	b.n	801212a <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80120c6:	2300      	movs	r3, #0
 80120c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80120cc:	f107 031c 	add.w	r3, r7, #28
 80120d0:	2200      	movs	r2, #0
 80120d2:	4619      	mov	r1, r3
 80120d4:	2012      	movs	r0, #18
 80120d6:	f000 fca7 	bl	8012a28 <LoRaMacCommandsAddCmd>
 80120da:	4603      	mov	r3, r0
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d026      	beq.n	801212e <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80120e0:	2313      	movs	r3, #19
 80120e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80120e6:	e022      	b.n	801212e <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80120e8:	2301      	movs	r3, #1
 80120ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80120ee:	f000 faa7 	bl	8012640 <LoRaMacClassBIsAcquisitionInProgress>
 80120f2:	4603      	mov	r3, r0
 80120f4:	f083 0301 	eor.w	r3, r3, #1
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d009      	beq.n	8012112 <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80120fe:	2000      	movs	r0, #0
 8012100:	f000 fa80 	bl	8012604 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8012104:	2000      	movs	r0, #0
 8012106:	f000 faa2 	bl	801264e <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 801210a:	2300      	movs	r3, #0
 801210c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012110:	e00e      	b.n	8012130 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 8012112:	2301      	movs	r3, #1
 8012114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012118:	e00a      	b.n	8012130 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 801211a:	bf00      	nop
 801211c:	e008      	b.n	8012130 <LoRaMacMlmeRequest+0x2b4>
            break;
 801211e:	bf00      	nop
 8012120:	e006      	b.n	8012130 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012122:	bf00      	nop
 8012124:	e004      	b.n	8012130 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012126:	bf00      	nop
 8012128:	e002      	b.n	8012130 <LoRaMacMlmeRequest+0x2b4>
            break;
 801212a:	bf00      	nop
 801212c:	e000      	b.n	8012130 <LoRaMacMlmeRequest+0x2b4>
            break;
 801212e:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012130:	4b13      	ldr	r3, [pc, #76]	; (8012180 <LoRaMacMlmeRequest+0x304>)
 8012132:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 801213a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801213e:	2b00      	cmp	r3, #0
 8012140:	d010      	beq.n	8012164 <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012142:	f000 ffff 	bl	8013144 <LoRaMacConfirmQueueGetCnt>
 8012146:	4603      	mov	r3, r0
 8012148:	2b00      	cmp	r3, #0
 801214a:	d110      	bne.n	801216e <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 801214c:	4b0c      	ldr	r3, [pc, #48]	; (8012180 <LoRaMacMlmeRequest+0x304>)
 801214e:	2200      	movs	r2, #0
 8012150:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012154:	4a0a      	ldr	r2, [pc, #40]	; (8012180 <LoRaMacMlmeRequest+0x304>)
 8012156:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 801215a:	f36f 0382 	bfc	r3, #2, #1
 801215e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 8012162:	e004      	b.n	801216e <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012164:	f107 0320 	add.w	r3, r7, #32
 8012168:	4618      	mov	r0, r3
 801216a:	f000 fe9d 	bl	8012ea8 <LoRaMacConfirmQueueAdd>
    }
    return status;
 801216e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012172:	4618      	mov	r0, r3
 8012174:	3728      	adds	r7, #40	; 0x28
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}
 801217a:	bf00      	nop
 801217c:	20000ac8 	.word	0x20000ac8
 8012180:	20000670 	.word	0x20000670
 8012184:	20000b90 	.word	0x20000b90

08012188 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012188:	b5b0      	push	{r4, r5, r7, lr}
 801218a:	b092      	sub	sp, #72	; 0x48
 801218c:	af02      	add	r7, sp, #8
 801218e:	6078      	str	r0, [r7, #4]
 8012190:	460b      	mov	r3, r1
 8012192:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012194:	2302      	movs	r3, #2
 8012196:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801219a:	2300      	movs	r3, #0
 801219c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 80121a0:	2300      	movs	r3, #0
 80121a2:	63bb      	str	r3, [r7, #56]	; 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80121a4:	2300      	movs	r3, #0
 80121a6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 80121aa:	2300      	movs	r3, #0
 80121ac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d101      	bne.n	80121ba <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80121b6:	2303      	movs	r3, #3
 80121b8:	e113      	b.n	80123e2 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2200      	movs	r2, #0
 80121be:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80121c0:	f7fc fada 	bl	800e778 <LoRaMacIsBusy>
 80121c4:	4603      	mov	r3, r0
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d001      	beq.n	80121ce <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80121ca:	2301      	movs	r3, #1
 80121cc:	e109      	b.n	80123e2 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	f107 040c 	add.w	r4, r7, #12
 80121d4:	461d      	mov	r5, r3
 80121d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80121da:	682b      	ldr	r3, [r5, #0]
 80121dc:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80121de:	2300      	movs	r3, #0
 80121e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80121e4:	2214      	movs	r2, #20
 80121e6:	2100      	movs	r1, #0
 80121e8:	4880      	ldr	r0, [pc, #512]	; (80123ec <LoRaMacMcpsRequest+0x264>)
 80121ea:	f005 ffd3 	bl	8018194 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80121ee:	4b80      	ldr	r3, [pc, #512]	; (80123f0 <LoRaMacMcpsRequest+0x268>)
 80121f0:	2201      	movs	r2, #1
 80121f2:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80121f6:	4b7f      	ldr	r3, [pc, #508]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 80121f8:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80121fc:	2b02      	cmp	r3, #2
 80121fe:	d111      	bne.n	8012224 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012200:	4b7c      	ldr	r3, [pc, #496]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 8012202:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8012206:	2b02      	cmp	r3, #2
 8012208:	d10c      	bne.n	8012224 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801220a:	4b7a      	ldr	r3, [pc, #488]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 801220c:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8012210:	f083 0301 	eor.w	r3, r3, #1
 8012214:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012216:	2b00      	cmp	r3, #0
 8012218:	d004      	beq.n	8012224 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801221a:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801221c:	2b00      	cmp	r3, #0
 801221e:	d101      	bne.n	8012224 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8012220:	2301      	movs	r3, #1
 8012222:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8012224:	7b3b      	ldrb	r3, [r7, #12]
 8012226:	2b03      	cmp	r3, #3
 8012228:	d030      	beq.n	801228c <LoRaMacMcpsRequest+0x104>
 801222a:	2b03      	cmp	r3, #3
 801222c:	dc3f      	bgt.n	80122ae <LoRaMacMcpsRequest+0x126>
 801222e:	2b00      	cmp	r3, #0
 8012230:	d002      	beq.n	8012238 <LoRaMacMcpsRequest+0xb0>
 8012232:	2b01      	cmp	r3, #1
 8012234:	d015      	beq.n	8012262 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8012236:	e03a      	b.n	80122ae <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8012238:	2301      	movs	r3, #1
 801223a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 801223e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012242:	2202      	movs	r2, #2
 8012244:	f362 1347 	bfi	r3, r2, #5, #3
 8012248:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 801224c:	7c3b      	ldrb	r3, [r7, #16]
 801224e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8012256:	8b3b      	ldrh	r3, [r7, #24]
 8012258:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 801225a:	7ebb      	ldrb	r3, [r7, #26]
 801225c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8012260:	e026      	b.n	80122b0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012262:	2301      	movs	r3, #1
 8012264:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012268:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801226c:	2204      	movs	r2, #4
 801226e:	f362 1347 	bfi	r3, r2, #5, #3
 8012272:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8012276:	7c3b      	ldrb	r3, [r7, #16]
 8012278:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8012280:	8b3b      	ldrh	r3, [r7, #24]
 8012282:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8012284:	7ebb      	ldrb	r3, [r7, #26]
 8012286:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801228a:	e011      	b.n	80122b0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801228c:	2301      	movs	r3, #1
 801228e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8012292:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012296:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 801229a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 801229e:	693b      	ldr	r3, [r7, #16]
 80122a0:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80122a2:	8abb      	ldrh	r3, [r7, #20]
 80122a4:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 80122a6:	7dbb      	ldrb	r3, [r7, #22]
 80122a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80122ac:	e000      	b.n	80122b0 <LoRaMacMcpsRequest+0x128>
            break;
 80122ae:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80122b0:	2302      	movs	r3, #2
 80122b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80122b6:	4b4f      	ldr	r3, [pc, #316]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 80122b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80122bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80122c0:	4b4c      	ldr	r3, [pc, #304]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 80122c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80122c6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80122ca:	4611      	mov	r1, r2
 80122cc:	4618      	mov	r0, r3
 80122ce:	f002 f92c 	bl	801452a <RegionGetPhyParam>
 80122d2:	4603      	mov	r3, r0
 80122d4:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80122d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d8:	b25b      	sxtb	r3, r3
 80122da:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 80122de:	4293      	cmp	r3, r2
 80122e0:	bfb8      	it	lt
 80122e2:	4613      	movlt	r3, r2
 80122e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80122e8:	4b42      	ldr	r3, [pc, #264]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 80122ea:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80122ee:	4a41      	ldr	r2, [pc, #260]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 80122f0:	f892 111c 	ldrb.w	r1, [r2, #284]	; 0x11c
 80122f4:	4a3f      	ldr	r2, [pc, #252]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 80122f6:	f892 2109 	ldrb.w	r2, [r2, #265]	; 0x109
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7fc fbd4 	bl	800eaa8 <CheckForMinimumAbpDatarate>
 8012300:	4603      	mov	r3, r0
 8012302:	2b00      	cmp	r3, #0
 8012304:	d002      	beq.n	801230c <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8012306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012308:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 801230c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8012310:	2b00      	cmp	r3, #0
 8012312:	d05f      	beq.n	80123d4 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012314:	4b37      	ldr	r3, [pc, #220]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 8012316:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801231a:	f083 0301 	eor.w	r3, r3, #1
 801231e:	b2db      	uxtb	r3, r3
 8012320:	2b00      	cmp	r3, #0
 8012322:	d10e      	bne.n	8012342 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012324:	4b33      	ldr	r3, [pc, #204]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 8012326:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801232a:	4a32      	ldr	r2, [pc, #200]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 801232c:	f892 111c 	ldrb.w	r1, [r2, #284]	; 0x11c
 8012330:	4a30      	ldr	r2, [pc, #192]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 8012332:	f892 2109 	ldrb.w	r2, [r2, #265]	; 0x109
 8012336:	4618      	mov	r0, r3
 8012338:	f7fc fbb6 	bl	800eaa8 <CheckForMinimumAbpDatarate>
 801233c:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801233e:	2b00      	cmp	r3, #0
 8012340:	d01c      	beq.n	801237c <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8012342:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012346:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801234a:	4b2a      	ldr	r3, [pc, #168]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 801234c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012350:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012354:	4b27      	ldr	r3, [pc, #156]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 8012356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801235a:	f107 0120 	add.w	r1, r7, #32
 801235e:	2205      	movs	r2, #5
 8012360:	4618      	mov	r0, r3
 8012362:	f002 f930 	bl	80145c6 <RegionVerify>
 8012366:	4603      	mov	r3, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	d005      	beq.n	8012378 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801236c:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8012370:	4b20      	ldr	r3, [pc, #128]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 8012372:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8012376:	e001      	b.n	801237c <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8012378:	2303      	movs	r3, #3
 801237a:	e032      	b.n	80123e2 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 801237c:	4b1d      	ldr	r3, [pc, #116]	; (80123f4 <LoRaMacMcpsRequest+0x26c>)
 801237e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012382:	4a1b      	ldr	r2, [pc, #108]	; (80123f0 <LoRaMacMcpsRequest+0x268>)
 8012384:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
 8012388:	4611      	mov	r1, r2
 801238a:	4618      	mov	r0, r3
 801238c:	f7fc fc76 	bl	800ec7c <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8012390:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012392:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8012396:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801239a:	78fb      	ldrb	r3, [r7, #3]
 801239c:	9300      	str	r3, [sp, #0]
 801239e:	4613      	mov	r3, r2
 80123a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123a2:	f7fd fc0d 	bl	800fbc0 <Send>
 80123a6:	4603      	mov	r3, r0
 80123a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 80123ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d10b      	bne.n	80123cc <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80123b4:	7b3a      	ldrb	r2, [r7, #12]
 80123b6:	4b0e      	ldr	r3, [pc, #56]	; (80123f0 <LoRaMacMcpsRequest+0x268>)
 80123b8:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80123bc:	4a0c      	ldr	r2, [pc, #48]	; (80123f0 <LoRaMacMcpsRequest+0x268>)
 80123be:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80123c2:	f043 0301 	orr.w	r3, r3, #1
 80123c6:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 80123ca:	e003      	b.n	80123d4 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80123cc:	4b08      	ldr	r3, [pc, #32]	; (80123f0 <LoRaMacMcpsRequest+0x268>)
 80123ce:	2200      	movs	r2, #0
 80123d0:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80123d4:	4b06      	ldr	r3, [pc, #24]	; (80123f0 <LoRaMacMcpsRequest+0x268>)
 80123d6:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	611a      	str	r2, [r3, #16]

    return status;
 80123de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80123e2:	4618      	mov	r0, r3
 80123e4:	3740      	adds	r7, #64	; 0x40
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bdb0      	pop	{r4, r5, r7, pc}
 80123ea:	bf00      	nop
 80123ec:	20000ab4 	.word	0x20000ab4
 80123f0:	20000670 	.word	0x20000670
 80123f4:	20000b90 	.word	0x20000b90

080123f8 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b084      	sub	sp, #16
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	4603      	mov	r3, r0
 8012400:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012402:	79fb      	ldrb	r3, [r7, #7]
 8012404:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8012406:	4b0a      	ldr	r3, [pc, #40]	; (8012430 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012408:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801240c:	f107 010c 	add.w	r1, r7, #12
 8012410:	220f      	movs	r2, #15
 8012412:	4618      	mov	r0, r3
 8012414:	f002 f8d7 	bl	80145c6 <RegionVerify>
 8012418:	4603      	mov	r3, r0
 801241a:	2b00      	cmp	r3, #0
 801241c:	d003      	beq.n	8012426 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801241e:	4a04      	ldr	r2, [pc, #16]	; (8012430 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012420:	79fb      	ldrb	r3, [r7, #7]
 8012422:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 8012426:	bf00      	nop
 8012428:	3710      	adds	r7, #16
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}
 801242e:	bf00      	nop
 8012430:	20000b90 	.word	0x20000b90

08012434 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8012434:	b580      	push	{r7, lr}
 8012436:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8012438:	f7fe ff26 	bl	8011288 <LoRaMacStop>
 801243c:	4603      	mov	r3, r0
 801243e:	2b00      	cmp	r3, #0
 8012440:	d111      	bne.n	8012466 <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8012442:	480a      	ldr	r0, [pc, #40]	; (801246c <LoRaMacDeInitialization+0x38>)
 8012444:	f009 ffb4 	bl	801c3b0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8012448:	4809      	ldr	r0, [pc, #36]	; (8012470 <LoRaMacDeInitialization+0x3c>)
 801244a:	f009 ffb1 	bl	801c3b0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801244e:	4809      	ldr	r0, [pc, #36]	; (8012474 <LoRaMacDeInitialization+0x40>)
 8012450:	f009 ffae 	bl	801c3b0 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8012454:	f000 f948 	bl	80126e8 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8012458:	f7fd ff18 	bl	801028c <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801245c:	4b06      	ldr	r3, [pc, #24]	; (8012478 <LoRaMacDeInitialization+0x44>)
 801245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012460:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8012462:	2300      	movs	r3, #0
 8012464:	e000      	b.n	8012468 <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8012466:	2301      	movs	r3, #1
    }
}
 8012468:	4618      	mov	r0, r3
 801246a:	bd80      	pop	{r7, pc}
 801246c:	200009d8 	.word	0x200009d8
 8012470:	200009f0 	.word	0x200009f0
 8012474:	20000a08 	.word	0x20000a08
 8012478:	0801dc4c 	.word	0x0801dc4c

0801247c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b08c      	sub	sp, #48	; 0x30
 8012480:	af00      	add	r7, sp, #0
 8012482:	60f8      	str	r0, [r7, #12]
 8012484:	60b9      	str	r1, [r7, #8]
 8012486:	607a      	str	r2, [r7, #4]
 8012488:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801248a:	2300      	movs	r3, #0
 801248c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	7b1b      	ldrb	r3, [r3, #12]
 8012494:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	7b5b      	ldrb	r3, [r3, #13]
 801249c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	7b9b      	ldrb	r3, [r3, #14]
 80124a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	685a      	ldr	r2, [r3, #4]
 80124ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ae:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	785b      	ldrb	r3, [r3, #1]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	f000 8088 	beq.w	80125ca <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80124ba:	2302      	movs	r3, #2
 80124bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	7bdb      	ldrb	r3, [r3, #15]
 80124c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	7c1b      	ldrb	r3, [r3, #16]
 80124cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80124d0:	4611      	mov	r1, r2
 80124d2:	4618      	mov	r0, r3
 80124d4:	f002 f829 	bl	801452a <RegionGetPhyParam>
 80124d8:	4603      	mov	r3, r0
 80124da:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80124dc:	6a3b      	ldr	r3, [r7, #32]
 80124de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 80124e2:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 80124e6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80124ea:	4293      	cmp	r3, r2
 80124ec:	bfb8      	it	lt
 80124ee:	4613      	movlt	r3, r2
 80124f0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	685b      	ldr	r3, [r3, #4]
 80124f8:	68fa      	ldr	r2, [r7, #12]
 80124fa:	8912      	ldrh	r2, [r2, #8]
 80124fc:	4293      	cmp	r3, r2
 80124fe:	d302      	bcc.n	8012506 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8012500:	2301      	movs	r3, #1
 8012502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	685b      	ldr	r3, [r3, #4]
 801250a:	68fa      	ldr	r2, [r7, #12]
 801250c:	8912      	ldrh	r2, [r2, #8]
 801250e:	4611      	mov	r1, r2
 8012510:	68fa      	ldr	r2, [r7, #12]
 8012512:	8952      	ldrh	r2, [r2, #10]
 8012514:	440a      	add	r2, r1
 8012516:	4293      	cmp	r3, r2
 8012518:	d30f      	bcc.n	801253a <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 801251a:	230a      	movs	r3, #10
 801251c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	7c1b      	ldrb	r3, [r3, #16]
 8012524:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012528:	4611      	mov	r1, r2
 801252a:	4618      	mov	r0, r3
 801252c:	f001 fffd 	bl	801452a <RegionGetPhyParam>
 8012530:	4603      	mov	r3, r0
 8012532:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8012534:	6a3b      	ldr	r3, [r7, #32]
 8012536:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	68fa      	ldr	r2, [r7, #12]
 8012540:	8912      	ldrh	r2, [r2, #8]
 8012542:	4611      	mov	r1, r2
 8012544:	68fa      	ldr	r2, [r7, #12]
 8012546:	8952      	ldrh	r2, [r2, #10]
 8012548:	0052      	lsls	r2, r2, #1
 801254a:	440a      	add	r2, r1
 801254c:	4293      	cmp	r3, r2
 801254e:	d33c      	bcc.n	80125ca <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	68fa      	ldr	r2, [r7, #12]
 8012556:	8912      	ldrh	r2, [r2, #8]
 8012558:	1a9b      	subs	r3, r3, r2
 801255a:	68fa      	ldr	r2, [r7, #12]
 801255c:	8952      	ldrh	r2, [r2, #10]
 801255e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012562:	fb01 f202 	mul.w	r2, r1, r2
 8012566:	1a9b      	subs	r3, r3, r2
 8012568:	2b00      	cmp	r3, #0
 801256a:	d12e      	bne.n	80125ca <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 801256c:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8012570:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012574:	429a      	cmp	r2, r3
 8012576:	d110      	bne.n	801259a <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	781b      	ldrb	r3, [r3, #0]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d009      	beq.n	8012594 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012580:	2302      	movs	r3, #2
 8012582:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	7c1b      	ldrb	r3, [r3, #16]
 8012588:	f107 0210 	add.w	r2, r7, #16
 801258c:	4611      	mov	r1, r2
 801258e:	4618      	mov	r0, r3
 8012590:	f002 f802 	bl	8014598 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8012594:	2301      	movs	r3, #1
 8012596:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801259a:	2321      	movs	r3, #33	; 0x21
 801259c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 80125a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80125a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	7bdb      	ldrb	r3, [r3, #15]
 80125ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	7c1b      	ldrb	r3, [r3, #16]
 80125b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80125b8:	4611      	mov	r1, r2
 80125ba:	4618      	mov	r0, r3
 80125bc:	f001 ffb5 	bl	801452a <RegionGetPhyParam>
 80125c0:	4603      	mov	r3, r0
 80125c2:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80125c4:	6a3b      	ldr	r3, [r7, #32]
 80125c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80125d0:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80125d8:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80125e0:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80125e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3730      	adds	r7, #48	; 0x30
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}

080125ee <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80125ee:	b480      	push	{r7}
 80125f0:	b085      	sub	sp, #20
 80125f2:	af00      	add	r7, sp, #0
 80125f4:	60f8      	str	r0, [r7, #12]
 80125f6:	60b9      	str	r1, [r7, #8]
 80125f8:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80125fa:	bf00      	nop
 80125fc:	3714      	adds	r7, #20
 80125fe:	46bd      	mov	sp, r7
 8012600:	bc80      	pop	{r7}
 8012602:	4770      	bx	lr

08012604 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8012604:	b480      	push	{r7}
 8012606:	b083      	sub	sp, #12
 8012608:	af00      	add	r7, sp, #0
 801260a:	4603      	mov	r3, r0
 801260c:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801260e:	bf00      	nop
 8012610:	370c      	adds	r7, #12
 8012612:	46bd      	mov	sp, r7
 8012614:	bc80      	pop	{r7}
 8012616:	4770      	bx	lr

08012618 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8012618:	b480      	push	{r7}
 801261a:	b083      	sub	sp, #12
 801261c:	af00      	add	r7, sp, #0
 801261e:	4603      	mov	r3, r0
 8012620:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012622:	bf00      	nop
 8012624:	370c      	adds	r7, #12
 8012626:	46bd      	mov	sp, r7
 8012628:	bc80      	pop	{r7}
 801262a:	4770      	bx	lr

0801262c <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801262c:	b480      	push	{r7}
 801262e:	b083      	sub	sp, #12
 8012630:	af00      	add	r7, sp, #0
 8012632:	4603      	mov	r3, r0
 8012634:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012636:	bf00      	nop
 8012638:	370c      	adds	r7, #12
 801263a:	46bd      	mov	sp, r7
 801263c:	bc80      	pop	{r7}
 801263e:	4770      	bx	lr

08012640 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012640:	b480      	push	{r7}
 8012642:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8012644:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012646:	4618      	mov	r0, r3
 8012648:	46bd      	mov	sp, r7
 801264a:	bc80      	pop	{r7}
 801264c:	4770      	bx	lr

0801264e <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801264e:	b480      	push	{r7}
 8012650:	b083      	sub	sp, #12
 8012652:	af00      	add	r7, sp, #0
 8012654:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012656:	bf00      	nop
 8012658:	370c      	adds	r7, #12
 801265a:	46bd      	mov	sp, r7
 801265c:	bc80      	pop	{r7}
 801265e:	4770      	bx	lr

08012660 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012660:	b480      	push	{r7}
 8012662:	b083      	sub	sp, #12
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012668:	bf00      	nop
 801266a:	370c      	adds	r7, #12
 801266c:	46bd      	mov	sp, r7
 801266e:	bc80      	pop	{r7}
 8012670:	4770      	bx	lr

08012672 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012672:	b480      	push	{r7}
 8012674:	b083      	sub	sp, #12
 8012676:	af00      	add	r7, sp, #0
 8012678:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801267a:	bf00      	nop
 801267c:	370c      	adds	r7, #12
 801267e:	46bd      	mov	sp, r7
 8012680:	bc80      	pop	{r7}
 8012682:	4770      	bx	lr

08012684 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8012684:	b480      	push	{r7}
 8012686:	b083      	sub	sp, #12
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	460b      	mov	r3, r1
 801268e:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012690:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012692:	4618      	mov	r0, r3
 8012694:	370c      	adds	r7, #12
 8012696:	46bd      	mov	sp, r7
 8012698:	bc80      	pop	{r7}
 801269a:	4770      	bx	lr

0801269c <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801269c:	b480      	push	{r7}
 801269e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80126a0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bc80      	pop	{r7}
 80126a8:	4770      	bx	lr

080126aa <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80126aa:	b480      	push	{r7}
 80126ac:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80126ae:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bc80      	pop	{r7}
 80126b6:	4770      	bx	lr

080126b8 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80126b8:	b480      	push	{r7}
 80126ba:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80126bc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126be:	4618      	mov	r0, r3
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bc80      	pop	{r7}
 80126c4:	4770      	bx	lr

080126c6 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80126c6:	b480      	push	{r7}
 80126c8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80126ca:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bc80      	pop	{r7}
 80126d2:	4770      	bx	lr

080126d4 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80126d4:	b480      	push	{r7}
 80126d6:	b083      	sub	sp, #12
 80126d8:	af00      	add	r7, sp, #0
 80126da:	4603      	mov	r3, r0
 80126dc:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126de:	bf00      	nop
 80126e0:	370c      	adds	r7, #12
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bc80      	pop	{r7}
 80126e6:	4770      	bx	lr

080126e8 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80126e8:	b480      	push	{r7}
 80126ea:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126ec:	bf00      	nop
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bc80      	pop	{r7}
 80126f2:	4770      	bx	lr

080126f4 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80126f4:	b480      	push	{r7}
 80126f6:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126f8:	bf00      	nop
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bc80      	pop	{r7}
 80126fe:	4770      	bx	lr

08012700 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012700:	b480      	push	{r7}
 8012702:	b083      	sub	sp, #12
 8012704:	af00      	add	r7, sp, #0
 8012706:	4603      	mov	r3, r0
 8012708:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801270a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801270c:	4618      	mov	r0, r3
 801270e:	370c      	adds	r7, #12
 8012710:	46bd      	mov	sp, r7
 8012712:	bc80      	pop	{r7}
 8012714:	4770      	bx	lr

08012716 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012716:	b480      	push	{r7}
 8012718:	b083      	sub	sp, #12
 801271a:	af00      	add	r7, sp, #0
 801271c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801271e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012720:	4618      	mov	r0, r3
 8012722:	370c      	adds	r7, #12
 8012724:	46bd      	mov	sp, r7
 8012726:	bc80      	pop	{r7}
 8012728:	4770      	bx	lr

0801272a <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801272a:	b480      	push	{r7}
 801272c:	b083      	sub	sp, #12
 801272e:	af00      	add	r7, sp, #0
 8012730:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012732:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012734:	4618      	mov	r0, r3
 8012736:	370c      	adds	r7, #12
 8012738:	46bd      	mov	sp, r7
 801273a:	bc80      	pop	{r7}
 801273c:	4770      	bx	lr

0801273e <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801273e:	b480      	push	{r7}
 8012740:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012742:	bf00      	nop
 8012744:	46bd      	mov	sp, r7
 8012746:	bc80      	pop	{r7}
 8012748:	4770      	bx	lr

0801274a <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801274a:	b480      	push	{r7}
 801274c:	b083      	sub	sp, #12
 801274e:	af00      	add	r7, sp, #0
 8012750:	4603      	mov	r3, r0
 8012752:	6039      	str	r1, [r7, #0]
 8012754:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012756:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012758:	4618      	mov	r0, r3
 801275a:	370c      	adds	r7, #12
 801275c:	46bd      	mov	sp, r7
 801275e:	bc80      	pop	{r7}
 8012760:	4770      	bx	lr

08012762 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012762:	b480      	push	{r7}
 8012764:	b083      	sub	sp, #12
 8012766:	af00      	add	r7, sp, #0
 8012768:	4603      	mov	r3, r0
 801276a:	603a      	str	r2, [r7, #0]
 801276c:	80fb      	strh	r3, [r7, #6]
 801276e:	460b      	mov	r3, r1
 8012770:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012772:	bf00      	nop
 8012774:	370c      	adds	r7, #12
 8012776:	46bd      	mov	sp, r7
 8012778:	bc80      	pop	{r7}
 801277a:	4770      	bx	lr

0801277c <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801277c:	b480      	push	{r7}
 801277e:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012780:	bf00      	nop
 8012782:	46bd      	mov	sp, r7
 8012784:	bc80      	pop	{r7}
 8012786:	4770      	bx	lr

08012788 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012788:	b480      	push	{r7}
 801278a:	b083      	sub	sp, #12
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012790:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012792:	4618      	mov	r0, r3
 8012794:	370c      	adds	r7, #12
 8012796:	46bd      	mov	sp, r7
 8012798:	bc80      	pop	{r7}
 801279a:	4770      	bx	lr

0801279c <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801279c:	b480      	push	{r7}
 801279e:	b083      	sub	sp, #12
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80127a4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	370c      	adds	r7, #12
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bc80      	pop	{r7}
 80127ae:	4770      	bx	lr

080127b0 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80127b0:	b480      	push	{r7}
 80127b2:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127b4:	bf00      	nop
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bc80      	pop	{r7}
 80127ba:	4770      	bx	lr

080127bc <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80127bc:	b480      	push	{r7}
 80127be:	b083      	sub	sp, #12
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	460b      	mov	r3, r1
 80127c6:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127c8:	bf00      	nop
 80127ca:	370c      	adds	r7, #12
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bc80      	pop	{r7}
 80127d0:	4770      	bx	lr

080127d2 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80127d2:	b480      	push	{r7}
 80127d4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127d6:	bf00      	nop
 80127d8:	46bd      	mov	sp, r7
 80127da:	bc80      	pop	{r7}
 80127dc:	4770      	bx	lr

080127de <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80127de:	b480      	push	{r7}
 80127e0:	b085      	sub	sp, #20
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80127ea:	2300      	movs	r3, #0
 80127ec:	81fb      	strh	r3, [r7, #14]
 80127ee:	e00a      	b.n	8012806 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80127f0:	89fb      	ldrh	r3, [r7, #14]
 80127f2:	68ba      	ldr	r2, [r7, #8]
 80127f4:	4413      	add	r3, r2
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d001      	beq.n	8012800 <IsSlotFree+0x22>
        {
            return false;
 80127fc:	2300      	movs	r3, #0
 80127fe:	e006      	b.n	801280e <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012800:	89fb      	ldrh	r3, [r7, #14]
 8012802:	3301      	adds	r3, #1
 8012804:	81fb      	strh	r3, [r7, #14]
 8012806:	89fb      	ldrh	r3, [r7, #14]
 8012808:	2b0f      	cmp	r3, #15
 801280a:	d9f1      	bls.n	80127f0 <IsSlotFree+0x12>
        }
    }
    return true;
 801280c:	2301      	movs	r3, #1
}
 801280e:	4618      	mov	r0, r3
 8012810:	3714      	adds	r7, #20
 8012812:	46bd      	mov	sp, r7
 8012814:	bc80      	pop	{r7}
 8012816:	4770      	bx	lr

08012818 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b082      	sub	sp, #8
 801281c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801281e:	2300      	movs	r3, #0
 8012820:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012822:	e007      	b.n	8012834 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012824:	79fb      	ldrb	r3, [r7, #7]
 8012826:	3301      	adds	r3, #1
 8012828:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801282a:	79fb      	ldrb	r3, [r7, #7]
 801282c:	2b20      	cmp	r3, #32
 801282e:	d101      	bne.n	8012834 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012830:	2300      	movs	r3, #0
 8012832:	e012      	b.n	801285a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012834:	79fb      	ldrb	r3, [r7, #7]
 8012836:	011b      	lsls	r3, r3, #4
 8012838:	3308      	adds	r3, #8
 801283a:	4a0a      	ldr	r2, [pc, #40]	; (8012864 <MallocNewMacCommandSlot+0x4c>)
 801283c:	4413      	add	r3, r2
 801283e:	4618      	mov	r0, r3
 8012840:	f7ff ffcd 	bl	80127de <IsSlotFree>
 8012844:	4603      	mov	r3, r0
 8012846:	f083 0301 	eor.w	r3, r3, #1
 801284a:	b2db      	uxtb	r3, r3
 801284c:	2b00      	cmp	r3, #0
 801284e:	d1e9      	bne.n	8012824 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012850:	79fb      	ldrb	r3, [r7, #7]
 8012852:	011b      	lsls	r3, r3, #4
 8012854:	3308      	adds	r3, #8
 8012856:	4a03      	ldr	r2, [pc, #12]	; (8012864 <MallocNewMacCommandSlot+0x4c>)
 8012858:	4413      	add	r3, r2
}
 801285a:	4618      	mov	r0, r3
 801285c:	3708      	adds	r7, #8
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}
 8012862:	bf00      	nop
 8012864:	20001750 	.word	0x20001750

08012868 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d101      	bne.n	801287a <FreeMacCommandSlot+0x12>
    {
        return false;
 8012876:	2300      	movs	r3, #0
 8012878:	e005      	b.n	8012886 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801287a:	2210      	movs	r2, #16
 801287c:	2100      	movs	r1, #0
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f005 fc88 	bl	8018194 <memset1>

    return true;
 8012884:	2301      	movs	r3, #1
}
 8012886:	4618      	mov	r0, r3
 8012888:	3708      	adds	r7, #8
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}

0801288e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801288e:	b480      	push	{r7}
 8012890:	b083      	sub	sp, #12
 8012892:	af00      	add	r7, sp, #0
 8012894:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d101      	bne.n	80128a0 <LinkedListInit+0x12>
    {
        return false;
 801289c:	2300      	movs	r3, #0
 801289e:	e006      	b.n	80128ae <LinkedListInit+0x20>
    }

    list->First = NULL;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2200      	movs	r2, #0
 80128a4:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	2200      	movs	r2, #0
 80128aa:	605a      	str	r2, [r3, #4]

    return true;
 80128ac:	2301      	movs	r3, #1
}
 80128ae:	4618      	mov	r0, r3
 80128b0:	370c      	adds	r7, #12
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bc80      	pop	{r7}
 80128b6:	4770      	bx	lr

080128b8 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80128b8:	b480      	push	{r7}
 80128ba:	b083      	sub	sp, #12
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
 80128c0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d002      	beq.n	80128ce <LinkedListAdd+0x16>
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d101      	bne.n	80128d2 <LinkedListAdd+0x1a>
    {
        return false;
 80128ce:	2300      	movs	r3, #0
 80128d0:	e015      	b.n	80128fe <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d102      	bne.n	80128e0 <LinkedListAdd+0x28>
    {
        list->First = element;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	683a      	ldr	r2, [r7, #0]
 80128de:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	685b      	ldr	r3, [r3, #4]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d003      	beq.n	80128f0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	685b      	ldr	r3, [r3, #4]
 80128ec:	683a      	ldr	r2, [r7, #0]
 80128ee:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	2200      	movs	r2, #0
 80128f4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	683a      	ldr	r2, [r7, #0]
 80128fa:	605a      	str	r2, [r3, #4]

    return true;
 80128fc:	2301      	movs	r3, #1
}
 80128fe:	4618      	mov	r0, r3
 8012900:	370c      	adds	r7, #12
 8012902:	46bd      	mov	sp, r7
 8012904:	bc80      	pop	{r7}
 8012906:	4770      	bx	lr

08012908 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012908:	b480      	push	{r7}
 801290a:	b085      	sub	sp, #20
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d002      	beq.n	801291e <LinkedListGetPrevious+0x16>
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d101      	bne.n	8012922 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801291e:	2300      	movs	r3, #0
 8012920:	e016      	b.n	8012950 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012928:	683a      	ldr	r2, [r7, #0]
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	429a      	cmp	r2, r3
 801292e:	d00c      	beq.n	801294a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012930:	e002      	b.n	8012938 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d007      	beq.n	801294e <LinkedListGetPrevious+0x46>
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	683a      	ldr	r2, [r7, #0]
 8012944:	429a      	cmp	r2, r3
 8012946:	d1f4      	bne.n	8012932 <LinkedListGetPrevious+0x2a>
 8012948:	e001      	b.n	801294e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801294a:	2300      	movs	r3, #0
 801294c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801294e:	68fb      	ldr	r3, [r7, #12]
}
 8012950:	4618      	mov	r0, r3
 8012952:	3714      	adds	r7, #20
 8012954:	46bd      	mov	sp, r7
 8012956:	bc80      	pop	{r7}
 8012958:	4770      	bx	lr

0801295a <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801295a:	b580      	push	{r7, lr}
 801295c:	b084      	sub	sp, #16
 801295e:	af00      	add	r7, sp, #0
 8012960:	6078      	str	r0, [r7, #4]
 8012962:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d002      	beq.n	8012970 <LinkedListRemove+0x16>
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d101      	bne.n	8012974 <LinkedListRemove+0x1a>
    {
        return false;
 8012970:	2300      	movs	r3, #0
 8012972:	e020      	b.n	80129b6 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012974:	6839      	ldr	r1, [r7, #0]
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f7ff ffc6 	bl	8012908 <LinkedListGetPrevious>
 801297c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	683a      	ldr	r2, [r7, #0]
 8012984:	429a      	cmp	r2, r3
 8012986:	d103      	bne.n	8012990 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	685b      	ldr	r3, [r3, #4]
 8012994:	683a      	ldr	r2, [r7, #0]
 8012996:	429a      	cmp	r2, r3
 8012998:	d102      	bne.n	80129a0 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	68fa      	ldr	r2, [r7, #12]
 801299e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d003      	beq.n	80129ae <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	681a      	ldr	r2, [r3, #0]
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	2200      	movs	r2, #0
 80129b2:	601a      	str	r2, [r3, #0]

    return true;
 80129b4:	2301      	movs	r3, #1
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	3710      	adds	r7, #16
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}
	...

080129c0 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80129c0:	b480      	push	{r7}
 80129c2:	b083      	sub	sp, #12
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	4603      	mov	r3, r0
 80129c8:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80129ca:	79fb      	ldrb	r3, [r7, #7]
 80129cc:	2b11      	cmp	r3, #17
 80129ce:	bf8c      	ite	hi
 80129d0:	2201      	movhi	r2, #1
 80129d2:	2200      	movls	r2, #0
 80129d4:	b2d2      	uxtb	r2, r2
 80129d6:	2a00      	cmp	r2, #0
 80129d8:	d10d      	bne.n	80129f6 <IsSticky+0x36>
 80129da:	4a0a      	ldr	r2, [pc, #40]	; (8012a04 <IsSticky+0x44>)
 80129dc:	fa22 f303 	lsr.w	r3, r2, r3
 80129e0:	f003 0301 	and.w	r3, r3, #1
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	bf14      	ite	ne
 80129e8:	2301      	movne	r3, #1
 80129ea:	2300      	moveq	r3, #0
 80129ec:	b2db      	uxtb	r3, r3
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d001      	beq.n	80129f6 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80129f2:	2301      	movs	r3, #1
 80129f4:	e000      	b.n	80129f8 <IsSticky+0x38>
        default:
            return false;
 80129f6:	2300      	movs	r3, #0
    }
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	370c      	adds	r7, #12
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bc80      	pop	{r7}
 8012a00:	4770      	bx	lr
 8012a02:	bf00      	nop
 8012a04:	00020720 	.word	0x00020720

08012a08 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8012a0c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8012a10:	2100      	movs	r1, #0
 8012a12:	4804      	ldr	r0, [pc, #16]	; (8012a24 <LoRaMacCommandsInit+0x1c>)
 8012a14:	f005 fbbe 	bl	8018194 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8012a18:	4802      	ldr	r0, [pc, #8]	; (8012a24 <LoRaMacCommandsInit+0x1c>)
 8012a1a:	f7ff ff38 	bl	801288e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012a1e:	2300      	movs	r3, #0
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	20001750 	.word	0x20001750

08012a28 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b086      	sub	sp, #24
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	4603      	mov	r3, r0
 8012a30:	60b9      	str	r1, [r7, #8]
 8012a32:	607a      	str	r2, [r7, #4]
 8012a34:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8012a36:	68bb      	ldr	r3, [r7, #8]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d101      	bne.n	8012a40 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	e033      	b.n	8012aa8 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8012a40:	f7ff feea 	bl	8012818 <MallocNewMacCommandSlot>
 8012a44:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d101      	bne.n	8012a50 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8012a4c:	2302      	movs	r3, #2
 8012a4e:	e02b      	b.n	8012aa8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8012a50:	6979      	ldr	r1, [r7, #20]
 8012a52:	4817      	ldr	r0, [pc, #92]	; (8012ab0 <LoRaMacCommandsAddCmd+0x88>)
 8012a54:	f7ff ff30 	bl	80128b8 <LinkedListAdd>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	f083 0301 	eor.w	r3, r3, #1
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d001      	beq.n	8012a68 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012a64:	2305      	movs	r3, #5
 8012a66:	e01f      	b.n	8012aa8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	7bfa      	ldrb	r2, [r7, #15]
 8012a6c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	687a      	ldr	r2, [r7, #4]
 8012a72:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	3305      	adds	r3, #5
 8012a78:	687a      	ldr	r2, [r7, #4]
 8012a7a:	b292      	uxth	r2, r2
 8012a7c:	68b9      	ldr	r1, [r7, #8]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f005 fb4d 	bl	801811e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8012a84:	7bfb      	ldrb	r3, [r7, #15]
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7ff ff9a 	bl	80129c0 <IsSticky>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	461a      	mov	r2, r3
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8012a94:	4b06      	ldr	r3, [pc, #24]	; (8012ab0 <LoRaMacCommandsAddCmd+0x88>)
 8012a96:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	4413      	add	r3, r2
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	4a03      	ldr	r2, [pc, #12]	; (8012ab0 <LoRaMacCommandsAddCmd+0x88>)
 8012aa2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8012aa6:	2300      	movs	r3, #0
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3718      	adds	r7, #24
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	20001750 	.word	0x20001750

08012ab4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d101      	bne.n	8012ac6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	e021      	b.n	8012b0a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012ac6:	6879      	ldr	r1, [r7, #4]
 8012ac8:	4812      	ldr	r0, [pc, #72]	; (8012b14 <LoRaMacCommandsRemoveCmd+0x60>)
 8012aca:	f7ff ff46 	bl	801295a <LinkedListRemove>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	f083 0301 	eor.w	r3, r3, #1
 8012ad4:	b2db      	uxtb	r3, r3
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d001      	beq.n	8012ade <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012ada:	2303      	movs	r3, #3
 8012adc:	e015      	b.n	8012b0a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8012ade:	4b0d      	ldr	r3, [pc, #52]	; (8012b14 <LoRaMacCommandsRemoveCmd+0x60>)
 8012ae0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	689b      	ldr	r3, [r3, #8]
 8012ae8:	1ad3      	subs	r3, r2, r3
 8012aea:	3b01      	subs	r3, #1
 8012aec:	4a09      	ldr	r2, [pc, #36]	; (8012b14 <LoRaMacCommandsRemoveCmd+0x60>)
 8012aee:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f7ff feb8 	bl	8012868 <FreeMacCommandSlot>
 8012af8:	4603      	mov	r3, r0
 8012afa:	f083 0301 	eor.w	r3, r3, #1
 8012afe:	b2db      	uxtb	r3, r3
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d001      	beq.n	8012b08 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012b04:	2305      	movs	r3, #5
 8012b06:	e000      	b.n	8012b0a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012b08:	2300      	movs	r3, #0
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3708      	adds	r7, #8
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	20001750 	.word	0x20001750

08012b18 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b082      	sub	sp, #8
 8012b1c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012b1e:	4b0f      	ldr	r3, [pc, #60]	; (8012b5c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012b24:	e012      	b.n	8012b4c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	7b1b      	ldrb	r3, [r3, #12]
 8012b2a:	f083 0301 	eor.w	r3, r3, #1
 8012b2e:	b2db      	uxtb	r3, r3
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d008      	beq.n	8012b46 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	f7ff ffba 	bl	8012ab4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	607b      	str	r3, [r7, #4]
 8012b44:	e002      	b.n	8012b4c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d1e9      	bne.n	8012b26 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012b52:	2300      	movs	r3, #0
}
 8012b54:	4618      	mov	r0, r3
 8012b56:	3708      	adds	r7, #8
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bd80      	pop	{r7, pc}
 8012b5c:	20001750 	.word	0x20001750

08012b60 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012b66:	4b0e      	ldr	r3, [pc, #56]	; (8012ba0 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012b6c:	e00f      	b.n	8012b8e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	791b      	ldrb	r3, [r3, #4]
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7ff ff21 	bl	80129c0 <IsSticky>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d002      	beq.n	8012b8a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f7ff ff95 	bl	8012ab4 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d1ec      	bne.n	8012b6e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012b94:	2300      	movs	r3, #0
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3708      	adds	r7, #8
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}
 8012b9e:	bf00      	nop
 8012ba0:	20001750 	.word	0x20001750

08012ba4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d101      	bne.n	8012bb6 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	e005      	b.n	8012bc2 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8012bb6:	4b05      	ldr	r3, [pc, #20]	; (8012bcc <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012bb8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012bc0:	2300      	movs	r3, #0
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	370c      	adds	r7, #12
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bc80      	pop	{r7}
 8012bca:	4770      	bx	lr
 8012bcc:	20001750 	.word	0x20001750

08012bd0 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b088      	sub	sp, #32
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	60f8      	str	r0, [r7, #12]
 8012bd8:	60b9      	str	r1, [r7, #8]
 8012bda:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012bdc:	4b25      	ldr	r3, [pc, #148]	; (8012c74 <LoRaMacCommandsSerializeCmds+0xa4>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8012be2:	2300      	movs	r3, #0
 8012be4:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d002      	beq.n	8012bf2 <LoRaMacCommandsSerializeCmds+0x22>
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d126      	bne.n	8012c40 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	e039      	b.n	8012c6a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8012bf6:	7efb      	ldrb	r3, [r7, #27]
 8012bf8:	68fa      	ldr	r2, [r7, #12]
 8012bfa:	1ad2      	subs	r2, r2, r3
 8012bfc:	69fb      	ldr	r3, [r7, #28]
 8012bfe:	689b      	ldr	r3, [r3, #8]
 8012c00:	3301      	adds	r3, #1
 8012c02:	429a      	cmp	r2, r3
 8012c04:	d320      	bcc.n	8012c48 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8012c06:	7efb      	ldrb	r3, [r7, #27]
 8012c08:	1c5a      	adds	r2, r3, #1
 8012c0a:	76fa      	strb	r2, [r7, #27]
 8012c0c:	461a      	mov	r2, r3
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	4413      	add	r3, r2
 8012c12:	69fa      	ldr	r2, [r7, #28]
 8012c14:	7912      	ldrb	r2, [r2, #4]
 8012c16:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8012c18:	7efb      	ldrb	r3, [r7, #27]
 8012c1a:	687a      	ldr	r2, [r7, #4]
 8012c1c:	18d0      	adds	r0, r2, r3
 8012c1e:	69fb      	ldr	r3, [r7, #28]
 8012c20:	1d59      	adds	r1, r3, #5
 8012c22:	69fb      	ldr	r3, [r7, #28]
 8012c24:	689b      	ldr	r3, [r3, #8]
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	461a      	mov	r2, r3
 8012c2a:	f005 fa78 	bl	801811e <memcpy1>
            itr += curElement->PayloadSize;
 8012c2e:	69fb      	ldr	r3, [r7, #28]
 8012c30:	689b      	ldr	r3, [r3, #8]
 8012c32:	b2da      	uxtb	r2, r3
 8012c34:	7efb      	ldrb	r3, [r7, #27]
 8012c36:	4413      	add	r3, r2
 8012c38:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8012c3a:	69fb      	ldr	r3, [r7, #28]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012c40:	69fb      	ldr	r3, [r7, #28]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d1d7      	bne.n	8012bf6 <LoRaMacCommandsSerializeCmds+0x26>
 8012c46:	e009      	b.n	8012c5c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8012c48:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8012c4a:	e007      	b.n	8012c5c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8012c4c:	69fb      	ldr	r3, [r7, #28]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8012c52:	69f8      	ldr	r0, [r7, #28]
 8012c54:	f7ff ff2e 	bl	8012ab4 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012c58:	697b      	ldr	r3, [r7, #20]
 8012c5a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012c5c:	69fb      	ldr	r3, [r7, #28]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d1f4      	bne.n	8012c4c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8012c62:	68b8      	ldr	r0, [r7, #8]
 8012c64:	f7ff ff9e 	bl	8012ba4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012c68:	2300      	movs	r3, #0
}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	3720      	adds	r7, #32
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	bf00      	nop
 8012c74:	20001750 	.word	0x20001750

08012c78 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8012c78:	b480      	push	{r7}
 8012c7a:	b085      	sub	sp, #20
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d101      	bne.n	8012c8a <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012c86:	2301      	movs	r3, #1
 8012c88:	e016      	b.n	8012cb8 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8012c8a:	4b0e      	ldr	r3, [pc, #56]	; (8012cc4 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2200      	movs	r2, #0
 8012c94:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8012c96:	e00b      	b.n	8012cb0 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	7b1b      	ldrb	r3, [r3, #12]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d004      	beq.n	8012caa <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2201      	movs	r2, #1
 8012ca4:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	e006      	b.n	8012cb8 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d1f0      	bne.n	8012c98 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012cb6:	2300      	movs	r3, #0
}
 8012cb8:	4618      	mov	r0, r3
 8012cba:	3714      	adds	r7, #20
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bc80      	pop	{r7}
 8012cc0:	4770      	bx	lr
 8012cc2:	bf00      	nop
 8012cc4:	20001750 	.word	0x20001750

08012cc8 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012cc8:	b480      	push	{r7}
 8012cca:	b085      	sub	sp, #20
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	4603      	mov	r3, r0
 8012cd0:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012cd6:	79fb      	ldrb	r3, [r7, #7]
 8012cd8:	3b02      	subs	r3, #2
 8012cda:	2b11      	cmp	r3, #17
 8012cdc:	d850      	bhi.n	8012d80 <LoRaMacCommandsGetCmdSize+0xb8>
 8012cde:	a201      	add	r2, pc, #4	; (adr r2, 8012ce4 <LoRaMacCommandsGetCmdSize+0x1c>)
 8012ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ce4:	08012d2d 	.word	0x08012d2d
 8012ce8:	08012d33 	.word	0x08012d33
 8012cec:	08012d39 	.word	0x08012d39
 8012cf0:	08012d3f 	.word	0x08012d3f
 8012cf4:	08012d45 	.word	0x08012d45
 8012cf8:	08012d4b 	.word	0x08012d4b
 8012cfc:	08012d51 	.word	0x08012d51
 8012d00:	08012d57 	.word	0x08012d57
 8012d04:	08012d5d 	.word	0x08012d5d
 8012d08:	08012d81 	.word	0x08012d81
 8012d0c:	08012d81 	.word	0x08012d81
 8012d10:	08012d63 	.word	0x08012d63
 8012d14:	08012d81 	.word	0x08012d81
 8012d18:	08012d81 	.word	0x08012d81
 8012d1c:	08012d69 	.word	0x08012d69
 8012d20:	08012d6f 	.word	0x08012d6f
 8012d24:	08012d75 	.word	0x08012d75
 8012d28:	08012d7b 	.word	0x08012d7b
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8012d2c:	2303      	movs	r3, #3
 8012d2e:	73fb      	strb	r3, [r7, #15]
            break;
 8012d30:	e027      	b.n	8012d82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8012d32:	2305      	movs	r3, #5
 8012d34:	73fb      	strb	r3, [r7, #15]
            break;
 8012d36:	e024      	b.n	8012d82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8012d38:	2302      	movs	r3, #2
 8012d3a:	73fb      	strb	r3, [r7, #15]
            break;
 8012d3c:	e021      	b.n	8012d82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8012d3e:	2305      	movs	r3, #5
 8012d40:	73fb      	strb	r3, [r7, #15]
            break;
 8012d42:	e01e      	b.n	8012d82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8012d44:	2301      	movs	r3, #1
 8012d46:	73fb      	strb	r3, [r7, #15]
            break;
 8012d48:	e01b      	b.n	8012d82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8012d4a:	2306      	movs	r3, #6
 8012d4c:	73fb      	strb	r3, [r7, #15]
            break;
 8012d4e:	e018      	b.n	8012d82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8012d50:	2302      	movs	r3, #2
 8012d52:	73fb      	strb	r3, [r7, #15]
            break;
 8012d54:	e015      	b.n	8012d82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8012d56:	2302      	movs	r3, #2
 8012d58:	73fb      	strb	r3, [r7, #15]
            break;
 8012d5a:	e012      	b.n	8012d82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8012d5c:	2305      	movs	r3, #5
 8012d5e:	73fb      	strb	r3, [r7, #15]
            break;
 8012d60:	e00f      	b.n	8012d82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8012d62:	2306      	movs	r3, #6
 8012d64:	73fb      	strb	r3, [r7, #15]
            break;
 8012d66:	e00c      	b.n	8012d82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012d68:	2301      	movs	r3, #1
 8012d6a:	73fb      	strb	r3, [r7, #15]
            break;
 8012d6c:	e009      	b.n	8012d82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8012d6e:	2305      	movs	r3, #5
 8012d70:	73fb      	strb	r3, [r7, #15]
            break;
 8012d72:	e006      	b.n	8012d82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012d74:	2304      	movs	r3, #4
 8012d76:	73fb      	strb	r3, [r7, #15]
            break;
 8012d78:	e003      	b.n	8012d82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8012d7a:	2304      	movs	r3, #4
 8012d7c:	73fb      	strb	r3, [r7, #15]
            break;
 8012d7e:	e000      	b.n	8012d82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012d80:	bf00      	nop
        }
    }
    return cidSize;
 8012d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	3714      	adds	r7, #20
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bc80      	pop	{r7}
 8012d8c:	4770      	bx	lr
 8012d8e:	bf00      	nop

08012d90 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012d90:	b480      	push	{r7}
 8012d92:	b083      	sub	sp, #12
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	4a07      	ldr	r2, [pc, #28]	; (8012db8 <IncreaseBufferPointer+0x28>)
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	d102      	bne.n	8012da6 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012da0:	4b06      	ldr	r3, [pc, #24]	; (8012dbc <IncreaseBufferPointer+0x2c>)
 8012da2:	607b      	str	r3, [r7, #4]
 8012da4:	e002      	b.n	8012dac <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	3304      	adds	r3, #4
 8012daa:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012dac:	687b      	ldr	r3, [r7, #4]
}
 8012dae:	4618      	mov	r0, r3
 8012db0:	370c      	adds	r7, #12
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bc80      	pop	{r7}
 8012db6:	4770      	bx	lr
 8012db8:	20001978 	.word	0x20001978
 8012dbc:	20001968 	.word	0x20001968

08012dc0 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012dc0:	b480      	push	{r7}
 8012dc2:	b083      	sub	sp, #12
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8012dca:	79fb      	ldrb	r3, [r7, #7]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d101      	bne.n	8012dd4 <IsListEmpty+0x14>
    {
        return true;
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	e000      	b.n	8012dd6 <IsListEmpty+0x16>
    }
    return false;
 8012dd4:	2300      	movs	r3, #0
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	370c      	adds	r7, #12
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bc80      	pop	{r7}
 8012dde:	4770      	bx	lr

08012de0 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012de0:	b480      	push	{r7}
 8012de2:	b083      	sub	sp, #12
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	4603      	mov	r3, r0
 8012de8:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012dea:	79fb      	ldrb	r3, [r7, #7]
 8012dec:	2b04      	cmp	r3, #4
 8012dee:	d901      	bls.n	8012df4 <IsListFull+0x14>
    {
        return true;
 8012df0:	2301      	movs	r3, #1
 8012df2:	e000      	b.n	8012df6 <IsListFull+0x16>
    }
    return false;
 8012df4:	2300      	movs	r3, #0
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	370c      	adds	r7, #12
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bc80      	pop	{r7}
 8012dfe:	4770      	bx	lr

08012e00 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b086      	sub	sp, #24
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	4603      	mov	r3, r0
 8012e08:	60b9      	str	r1, [r7, #8]
 8012e0a:	607a      	str	r2, [r7, #4]
 8012e0c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012e12:	4b13      	ldr	r3, [pc, #76]	; (8012e60 <GetElement+0x60>)
 8012e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7ff ffd1 	bl	8012dc0 <IsListEmpty>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d001      	beq.n	8012e28 <GetElement+0x28>
    {
        return NULL;
 8012e24:	2300      	movs	r3, #0
 8012e26:	e017      	b.n	8012e58 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012e28:	2300      	movs	r3, #0
 8012e2a:	74fb      	strb	r3, [r7, #19]
 8012e2c:	e00d      	b.n	8012e4a <GetElement+0x4a>
    {
        if( element->Request == request )
 8012e2e:	697b      	ldr	r3, [r7, #20]
 8012e30:	781b      	ldrb	r3, [r3, #0]
 8012e32:	7bfa      	ldrb	r2, [r7, #15]
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d101      	bne.n	8012e3c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012e38:	697b      	ldr	r3, [r7, #20]
 8012e3a:	e00d      	b.n	8012e58 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8012e3c:	6978      	ldr	r0, [r7, #20]
 8012e3e:	f7ff ffa7 	bl	8012d90 <IncreaseBufferPointer>
 8012e42:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012e44:	7cfb      	ldrb	r3, [r7, #19]
 8012e46:	3301      	adds	r3, #1
 8012e48:	74fb      	strb	r3, [r7, #19]
 8012e4a:	4b05      	ldr	r3, [pc, #20]	; (8012e60 <GetElement+0x60>)
 8012e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e50:	7cfa      	ldrb	r2, [r7, #19]
 8012e52:	429a      	cmp	r2, r3
 8012e54:	d3eb      	bcc.n	8012e2e <GetElement+0x2e>
    }

    return NULL;
 8012e56:	2300      	movs	r3, #0
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3718      	adds	r7, #24
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}
 8012e60:	2000195c 	.word	0x2000195c

08012e64 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b082      	sub	sp, #8
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012e6c:	4a0c      	ldr	r2, [pc, #48]	; (8012ea0 <LoRaMacConfirmQueueInit+0x3c>)
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012e72:	4b0b      	ldr	r3, [pc, #44]	; (8012ea0 <LoRaMacConfirmQueueInit+0x3c>)
 8012e74:	2200      	movs	r2, #0
 8012e76:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012e7a:	4b09      	ldr	r3, [pc, #36]	; (8012ea0 <LoRaMacConfirmQueueInit+0x3c>)
 8012e7c:	4a09      	ldr	r2, [pc, #36]	; (8012ea4 <LoRaMacConfirmQueueInit+0x40>)
 8012e7e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012e80:	4b07      	ldr	r3, [pc, #28]	; (8012ea0 <LoRaMacConfirmQueueInit+0x3c>)
 8012e82:	4a08      	ldr	r2, [pc, #32]	; (8012ea4 <LoRaMacConfirmQueueInit+0x40>)
 8012e84:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8012e86:	2214      	movs	r2, #20
 8012e88:	21ff      	movs	r1, #255	; 0xff
 8012e8a:	4806      	ldr	r0, [pc, #24]	; (8012ea4 <LoRaMacConfirmQueueInit+0x40>)
 8012e8c:	f005 f982 	bl	8018194 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012e90:	4b03      	ldr	r3, [pc, #12]	; (8012ea0 <LoRaMacConfirmQueueInit+0x3c>)
 8012e92:	2201      	movs	r2, #1
 8012e94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8012e98:	bf00      	nop
 8012e9a:	3708      	adds	r7, #8
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd80      	pop	{r7, pc}
 8012ea0:	2000195c 	.word	0x2000195c
 8012ea4:	20001968 	.word	0x20001968

08012ea8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b082      	sub	sp, #8
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012eb0:	4b19      	ldr	r3, [pc, #100]	; (8012f18 <LoRaMacConfirmQueueAdd+0x70>)
 8012eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7ff ff92 	bl	8012de0 <IsListFull>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d001      	beq.n	8012ec6 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	e024      	b.n	8012f10 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012ec6:	4b14      	ldr	r3, [pc, #80]	; (8012f18 <LoRaMacConfirmQueueAdd+0x70>)
 8012ec8:	689b      	ldr	r3, [r3, #8]
 8012eca:	687a      	ldr	r2, [r7, #4]
 8012ecc:	7812      	ldrb	r2, [r2, #0]
 8012ece:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012ed0:	4b11      	ldr	r3, [pc, #68]	; (8012f18 <LoRaMacConfirmQueueAdd+0x70>)
 8012ed2:	689b      	ldr	r3, [r3, #8]
 8012ed4:	687a      	ldr	r2, [r7, #4]
 8012ed6:	7852      	ldrb	r2, [r2, #1]
 8012ed8:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012eda:	4b0f      	ldr	r3, [pc, #60]	; (8012f18 <LoRaMacConfirmQueueAdd+0x70>)
 8012edc:	689b      	ldr	r3, [r3, #8]
 8012ede:	687a      	ldr	r2, [r7, #4]
 8012ee0:	78d2      	ldrb	r2, [r2, #3]
 8012ee2:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8012ee4:	4b0c      	ldr	r3, [pc, #48]	; (8012f18 <LoRaMacConfirmQueueAdd+0x70>)
 8012ee6:	689b      	ldr	r3, [r3, #8]
 8012ee8:	687a      	ldr	r2, [r7, #4]
 8012eea:	7892      	ldrb	r2, [r2, #2]
 8012eec:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012eee:	4b0a      	ldr	r3, [pc, #40]	; (8012f18 <LoRaMacConfirmQueueAdd+0x70>)
 8012ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ef4:	3301      	adds	r3, #1
 8012ef6:	b2da      	uxtb	r2, r3
 8012ef8:	4b07      	ldr	r3, [pc, #28]	; (8012f18 <LoRaMacConfirmQueueAdd+0x70>)
 8012efa:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012efe:	4b06      	ldr	r3, [pc, #24]	; (8012f18 <LoRaMacConfirmQueueAdd+0x70>)
 8012f00:	689b      	ldr	r3, [r3, #8]
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7ff ff44 	bl	8012d90 <IncreaseBufferPointer>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	4a03      	ldr	r2, [pc, #12]	; (8012f18 <LoRaMacConfirmQueueAdd+0x70>)
 8012f0c:	6093      	str	r3, [r2, #8]

    return true;
 8012f0e:	2301      	movs	r3, #1
}
 8012f10:	4618      	mov	r0, r3
 8012f12:	3708      	adds	r7, #8
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	2000195c 	.word	0x2000195c

08012f1c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012f20:	4b0e      	ldr	r3, [pc, #56]	; (8012f5c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7ff ff4a 	bl	8012dc0 <IsListEmpty>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d001      	beq.n	8012f36 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012f32:	2300      	movs	r3, #0
 8012f34:	e010      	b.n	8012f58 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012f36:	4b09      	ldr	r3, [pc, #36]	; (8012f5c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f3c:	3b01      	subs	r3, #1
 8012f3e:	b2da      	uxtb	r2, r3
 8012f40:	4b06      	ldr	r3, [pc, #24]	; (8012f5c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012f42:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012f46:	4b05      	ldr	r3, [pc, #20]	; (8012f5c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012f48:	685b      	ldr	r3, [r3, #4]
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7ff ff20 	bl	8012d90 <IncreaseBufferPointer>
 8012f50:	4603      	mov	r3, r0
 8012f52:	4a02      	ldr	r2, [pc, #8]	; (8012f5c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012f54:	6053      	str	r3, [r2, #4]

    return true;
 8012f56:	2301      	movs	r3, #1
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	bd80      	pop	{r7, pc}
 8012f5c:	2000195c 	.word	0x2000195c

08012f60 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b084      	sub	sp, #16
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	4603      	mov	r3, r0
 8012f68:	460a      	mov	r2, r1
 8012f6a:	71fb      	strb	r3, [r7, #7]
 8012f6c:	4613      	mov	r3, r2
 8012f6e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012f70:	2300      	movs	r3, #0
 8012f72:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012f74:	4b10      	ldr	r3, [pc, #64]	; (8012fb8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f7ff ff20 	bl	8012dc0 <IsListEmpty>
 8012f80:	4603      	mov	r3, r0
 8012f82:	f083 0301 	eor.w	r3, r3, #1
 8012f86:	b2db      	uxtb	r3, r3
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d011      	beq.n	8012fb0 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012f8c:	4b0a      	ldr	r3, [pc, #40]	; (8012fb8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012f8e:	6859      	ldr	r1, [r3, #4]
 8012f90:	4b09      	ldr	r3, [pc, #36]	; (8012fb8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012f92:	689a      	ldr	r2, [r3, #8]
 8012f94:	79bb      	ldrb	r3, [r7, #6]
 8012f96:	4618      	mov	r0, r3
 8012f98:	f7ff ff32 	bl	8012e00 <GetElement>
 8012f9c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d005      	beq.n	8012fb0 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	79fa      	ldrb	r2, [r7, #7]
 8012fa8:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	2201      	movs	r2, #1
 8012fae:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012fb0:	bf00      	nop
 8012fb2:	3710      	adds	r7, #16
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}
 8012fb8:	2000195c 	.word	0x2000195c

08012fbc <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b084      	sub	sp, #16
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012fca:	4b10      	ldr	r3, [pc, #64]	; (801300c <LoRaMacConfirmQueueGetStatus+0x50>)
 8012fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7ff fef5 	bl	8012dc0 <IsListEmpty>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	f083 0301 	eor.w	r3, r3, #1
 8012fdc:	b2db      	uxtb	r3, r3
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d00e      	beq.n	8013000 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012fe2:	4b0a      	ldr	r3, [pc, #40]	; (801300c <LoRaMacConfirmQueueGetStatus+0x50>)
 8012fe4:	6859      	ldr	r1, [r3, #4]
 8012fe6:	4b09      	ldr	r3, [pc, #36]	; (801300c <LoRaMacConfirmQueueGetStatus+0x50>)
 8012fe8:	689a      	ldr	r2, [r3, #8]
 8012fea:	79fb      	ldrb	r3, [r7, #7]
 8012fec:	4618      	mov	r0, r3
 8012fee:	f7ff ff07 	bl	8012e00 <GetElement>
 8012ff2:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d002      	beq.n	8013000 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	785b      	ldrb	r3, [r3, #1]
 8012ffe:	e000      	b.n	8013002 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013000:	2301      	movs	r3, #1
}
 8013002:	4618      	mov	r0, r3
 8013004:	3710      	adds	r7, #16
 8013006:	46bd      	mov	sp, r7
 8013008:	bd80      	pop	{r7, pc}
 801300a:	bf00      	nop
 801300c:	2000195c 	.word	0x2000195c

08013010 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b084      	sub	sp, #16
 8013014:	af00      	add	r7, sp, #0
 8013016:	4603      	mov	r3, r0
 8013018:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801301a:	4b16      	ldr	r3, [pc, #88]	; (8013074 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801301c:	685b      	ldr	r3, [r3, #4]
 801301e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013020:	4a14      	ldr	r2, [pc, #80]	; (8013074 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013022:	79fb      	ldrb	r3, [r7, #7]
 8013024:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013028:	4b12      	ldr	r3, [pc, #72]	; (8013074 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801302a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801302e:	4618      	mov	r0, r3
 8013030:	f7ff fec6 	bl	8012dc0 <IsListEmpty>
 8013034:	4603      	mov	r3, r0
 8013036:	f083 0301 	eor.w	r3, r3, #1
 801303a:	b2db      	uxtb	r3, r3
 801303c:	2b00      	cmp	r3, #0
 801303e:	d015      	beq.n	801306c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	79fa      	ldrb	r2, [r7, #7]
 8013044:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	78db      	ldrb	r3, [r3, #3]
 801304a:	f083 0301 	eor.w	r3, r3, #1
 801304e:	b2db      	uxtb	r3, r3
 8013050:	2b00      	cmp	r3, #0
 8013052:	d002      	beq.n	801305a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	2201      	movs	r2, #1
 8013058:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801305a:	68f8      	ldr	r0, [r7, #12]
 801305c:	f7ff fe98 	bl	8012d90 <IncreaseBufferPointer>
 8013060:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013062:	4b04      	ldr	r3, [pc, #16]	; (8013074 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013064:	689b      	ldr	r3, [r3, #8]
 8013066:	68fa      	ldr	r2, [r7, #12]
 8013068:	429a      	cmp	r2, r3
 801306a:	d1e9      	bne.n	8013040 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 801306c:	bf00      	nop
 801306e:	3710      	adds	r7, #16
 8013070:	46bd      	mov	sp, r7
 8013072:	bd80      	pop	{r7, pc}
 8013074:	2000195c 	.word	0x2000195c

08013078 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b082      	sub	sp, #8
 801307c:	af00      	add	r7, sp, #0
 801307e:	4603      	mov	r3, r0
 8013080:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013082:	4b09      	ldr	r3, [pc, #36]	; (80130a8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013084:	6859      	ldr	r1, [r3, #4]
 8013086:	4b08      	ldr	r3, [pc, #32]	; (80130a8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013088:	689a      	ldr	r2, [r3, #8]
 801308a:	79fb      	ldrb	r3, [r7, #7]
 801308c:	4618      	mov	r0, r3
 801308e:	f7ff feb7 	bl	8012e00 <GetElement>
 8013092:	4603      	mov	r3, r0
 8013094:	2b00      	cmp	r3, #0
 8013096:	d001      	beq.n	801309c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013098:	2301      	movs	r3, #1
 801309a:	e000      	b.n	801309e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 801309c:	2300      	movs	r3, #0
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3708      	adds	r7, #8
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	2000195c 	.word	0x2000195c

080130ac <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b084      	sub	sp, #16
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80130b4:	4b22      	ldr	r3, [pc, #136]	; (8013140 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80130ba:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80130bc:	2300      	movs	r3, #0
 80130be:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80130c0:	2300      	movs	r3, #0
 80130c2:	73fb      	strb	r3, [r7, #15]
 80130c4:	e032      	b.n	801312c <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80130c6:	4b1e      	ldr	r3, [pc, #120]	; (8013140 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130c8:	685b      	ldr	r3, [r3, #4]
 80130ca:	781a      	ldrb	r2, [r3, #0]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80130d0:	4b1b      	ldr	r3, [pc, #108]	; (8013140 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130d2:	685b      	ldr	r3, [r3, #4]
 80130d4:	785a      	ldrb	r2, [r3, #1]
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80130da:	4b19      	ldr	r3, [pc, #100]	; (8013140 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130dc:	685b      	ldr	r3, [r3, #4]
 80130de:	789b      	ldrb	r3, [r3, #2]
 80130e0:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80130e2:	7b7b      	ldrb	r3, [r7, #13]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d005      	beq.n	80130f4 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80130e8:	4b15      	ldr	r3, [pc, #84]	; (8013140 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	689b      	ldr	r3, [r3, #8]
 80130ee:	6878      	ldr	r0, [r7, #4]
 80130f0:	4798      	blx	r3
 80130f2:	e00b      	b.n	801310c <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80130f4:	4b12      	ldr	r3, [pc, #72]	; (8013140 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130f6:	685b      	ldr	r3, [r3, #4]
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80130fc:	4b10      	ldr	r3, [pc, #64]	; (8013140 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130fe:	685b      	ldr	r3, [r3, #4]
 8013100:	785b      	ldrb	r3, [r3, #1]
 8013102:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013104:	4b0e      	ldr	r3, [pc, #56]	; (8013140 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	78db      	ldrb	r3, [r3, #3]
 801310a:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801310c:	f7ff ff06 	bl	8012f1c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013110:	7b7b      	ldrb	r3, [r7, #13]
 8013112:	f083 0301 	eor.w	r3, r3, #1
 8013116:	b2db      	uxtb	r3, r3
 8013118:	2b00      	cmp	r3, #0
 801311a:	d004      	beq.n	8013126 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801311c:	f107 0308 	add.w	r3, r7, #8
 8013120:	4618      	mov	r0, r3
 8013122:	f7ff fec1 	bl	8012ea8 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013126:	7bfb      	ldrb	r3, [r7, #15]
 8013128:	3301      	adds	r3, #1
 801312a:	73fb      	strb	r3, [r7, #15]
 801312c:	7bfa      	ldrb	r2, [r7, #15]
 801312e:	7bbb      	ldrb	r3, [r7, #14]
 8013130:	429a      	cmp	r2, r3
 8013132:	d3c8      	bcc.n	80130c6 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8013134:	bf00      	nop
 8013136:	bf00      	nop
 8013138:	3710      	adds	r7, #16
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}
 801313e:	bf00      	nop
 8013140:	2000195c 	.word	0x2000195c

08013144 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013144:	b480      	push	{r7}
 8013146:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013148:	4b03      	ldr	r3, [pc, #12]	; (8013158 <LoRaMacConfirmQueueGetCnt+0x14>)
 801314a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801314e:	4618      	mov	r0, r3
 8013150:	46bd      	mov	sp, r7
 8013152:	bc80      	pop	{r7}
 8013154:	4770      	bx	lr
 8013156:	bf00      	nop
 8013158:	2000195c 	.word	0x2000195c

0801315c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 801315c:	b580      	push	{r7, lr}
 801315e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013160:	4b06      	ldr	r3, [pc, #24]	; (801317c <LoRaMacConfirmQueueIsFull+0x20>)
 8013162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013166:	4618      	mov	r0, r3
 8013168:	f7ff fe3a 	bl	8012de0 <IsListFull>
 801316c:	4603      	mov	r3, r0
 801316e:	2b00      	cmp	r3, #0
 8013170:	d001      	beq.n	8013176 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013172:	2301      	movs	r3, #1
 8013174:	e000      	b.n	8013178 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013176:	2300      	movs	r3, #0
    }
}
 8013178:	4618      	mov	r0, r3
 801317a:	bd80      	pop	{r7, pc}
 801317c:	2000195c 	.word	0x2000195c

08013180 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b08e      	sub	sp, #56	; 0x38
 8013184:	af00      	add	r7, sp, #0
 8013186:	60f8      	str	r0, [r7, #12]
 8013188:	607b      	str	r3, [r7, #4]
 801318a:	460b      	mov	r3, r1
 801318c:	817b      	strh	r3, [r7, #10]
 801318e:	4613      	mov	r3, r2
 8013190:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d101      	bne.n	801319c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013198:	2309      	movs	r3, #9
 801319a:	e086      	b.n	80132aa <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 801319c:	2300      	movs	r3, #0
 801319e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80131a2:	2301      	movs	r3, #1
 80131a4:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80131a6:	2300      	movs	r3, #0
 80131a8:	623b      	str	r3, [r7, #32]
 80131aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80131ae:	2200      	movs	r2, #0
 80131b0:	601a      	str	r2, [r3, #0]
 80131b2:	605a      	str	r2, [r3, #4]
 80131b4:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80131b6:	2300      	movs	r3, #0
 80131b8:	613b      	str	r3, [r7, #16]
 80131ba:	f107 0314 	add.w	r3, r7, #20
 80131be:	2200      	movs	r2, #0
 80131c0:	601a      	str	r2, [r3, #0]
 80131c2:	605a      	str	r2, [r3, #4]
 80131c4:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80131c6:	2301      	movs	r3, #1
 80131c8:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80131ca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80131ce:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	b2db      	uxtb	r3, r3
 80131d4:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	0a1b      	lsrs	r3, r3, #8
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	0c1b      	lsrs	r3, r3, #16
 80131e2:	b2db      	uxtb	r3, r3
 80131e4:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	0e1b      	lsrs	r3, r3, #24
 80131ea:	b2db      	uxtb	r3, r3
 80131ec:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80131ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131f0:	b2db      	uxtb	r3, r3
 80131f2:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80131f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131f6:	0a1b      	lsrs	r3, r3, #8
 80131f8:	b2db      	uxtb	r3, r3
 80131fa:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80131fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131fe:	0c1b      	lsrs	r3, r3, #16
 8013200:	b2db      	uxtb	r3, r3
 8013202:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013206:	0e1b      	lsrs	r3, r3, #24
 8013208:	b2db      	uxtb	r3, r3
 801320a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 801320c:	e048      	b.n	80132a0 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801320e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013210:	b2db      	uxtb	r3, r3
 8013212:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013214:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013216:	3301      	adds	r3, #1
 8013218:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801321a:	f107 0320 	add.w	r3, r7, #32
 801321e:	7a7a      	ldrb	r2, [r7, #9]
 8013220:	f107 0010 	add.w	r0, r7, #16
 8013224:	2110      	movs	r1, #16
 8013226:	f7f8 fcf0 	bl	800bc0a <SecureElementAesEncrypt>
 801322a:	4603      	mov	r3, r0
 801322c:	2b00      	cmp	r3, #0
 801322e:	d001      	beq.n	8013234 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013230:	230e      	movs	r3, #14
 8013232:	e03a      	b.n	80132aa <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013234:	2300      	movs	r3, #0
 8013236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801323a:	e01e      	b.n	801327a <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801323c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013240:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013244:	4413      	add	r3, r2
 8013246:	461a      	mov	r2, r3
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	4413      	add	r3, r2
 801324c:	7819      	ldrb	r1, [r3, #0]
 801324e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013252:	3338      	adds	r3, #56	; 0x38
 8013254:	443b      	add	r3, r7
 8013256:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801325a:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 801325e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013262:	4403      	add	r3, r0
 8013264:	4618      	mov	r0, r3
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	4403      	add	r3, r0
 801326a:	404a      	eors	r2, r1
 801326c:	b2d2      	uxtb	r2, r2
 801326e:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013270:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013274:	3301      	adds	r3, #1
 8013276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801327a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801327e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013282:	2a10      	cmp	r2, #16
 8013284:	bfa8      	it	ge
 8013286:	2210      	movge	r2, #16
 8013288:	b212      	sxth	r2, r2
 801328a:	4293      	cmp	r3, r2
 801328c:	dbd6      	blt.n	801323c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 801328e:	897b      	ldrh	r3, [r7, #10]
 8013290:	3b10      	subs	r3, #16
 8013292:	b29b      	uxth	r3, r3
 8013294:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8013296:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801329a:	3310      	adds	r3, #16
 801329c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80132a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	dcb2      	bgt.n	801320e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80132a8:	2300      	movs	r3, #0
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	3738      	adds	r7, #56	; 0x38
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}

080132b2 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80132b2:	b490      	push	{r4, r7}
 80132b4:	b082      	sub	sp, #8
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	4604      	mov	r4, r0
 80132ba:	4608      	mov	r0, r1
 80132bc:	4611      	mov	r1, r2
 80132be:	461a      	mov	r2, r3
 80132c0:	4623      	mov	r3, r4
 80132c2:	80fb      	strh	r3, [r7, #6]
 80132c4:	4603      	mov	r3, r0
 80132c6:	717b      	strb	r3, [r7, #5]
 80132c8:	460b      	mov	r3, r1
 80132ca:	713b      	strb	r3, [r7, #4]
 80132cc:	4613      	mov	r3, r2
 80132ce:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80132d0:	69bb      	ldr	r3, [r7, #24]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d101      	bne.n	80132da <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80132d6:	2309      	movs	r3, #9
 80132d8:	e04e      	b.n	8013378 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80132da:	69bb      	ldr	r3, [r7, #24]
 80132dc:	2249      	movs	r2, #73	; 0x49
 80132de:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80132e0:	69bb      	ldr	r3, [r7, #24]
 80132e2:	3301      	adds	r3, #1
 80132e4:	2200      	movs	r2, #0
 80132e6:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80132e8:	69bb      	ldr	r3, [r7, #24]
 80132ea:	3302      	adds	r3, #2
 80132ec:	2200      	movs	r2, #0
 80132ee:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80132f0:	69bb      	ldr	r3, [r7, #24]
 80132f2:	3303      	adds	r3, #3
 80132f4:	2200      	movs	r2, #0
 80132f6:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80132f8:	69bb      	ldr	r3, [r7, #24]
 80132fa:	3304      	adds	r3, #4
 80132fc:	2200      	movs	r2, #0
 80132fe:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8013300:	69bb      	ldr	r3, [r7, #24]
 8013302:	3305      	adds	r3, #5
 8013304:	78fa      	ldrb	r2, [r7, #3]
 8013306:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8013308:	69bb      	ldr	r3, [r7, #24]
 801330a:	3306      	adds	r3, #6
 801330c:	693a      	ldr	r2, [r7, #16]
 801330e:	b2d2      	uxtb	r2, r2
 8013310:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	0a1a      	lsrs	r2, r3, #8
 8013316:	69bb      	ldr	r3, [r7, #24]
 8013318:	3307      	adds	r3, #7
 801331a:	b2d2      	uxtb	r2, r2
 801331c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801331e:	693b      	ldr	r3, [r7, #16]
 8013320:	0c1a      	lsrs	r2, r3, #16
 8013322:	69bb      	ldr	r3, [r7, #24]
 8013324:	3308      	adds	r3, #8
 8013326:	b2d2      	uxtb	r2, r2
 8013328:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	0e1a      	lsrs	r2, r3, #24
 801332e:	69bb      	ldr	r3, [r7, #24]
 8013330:	3309      	adds	r3, #9
 8013332:	b2d2      	uxtb	r2, r2
 8013334:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8013336:	69bb      	ldr	r3, [r7, #24]
 8013338:	330a      	adds	r3, #10
 801333a:	697a      	ldr	r2, [r7, #20]
 801333c:	b2d2      	uxtb	r2, r2
 801333e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	0a1a      	lsrs	r2, r3, #8
 8013344:	69bb      	ldr	r3, [r7, #24]
 8013346:	330b      	adds	r3, #11
 8013348:	b2d2      	uxtb	r2, r2
 801334a:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	0c1a      	lsrs	r2, r3, #16
 8013350:	69bb      	ldr	r3, [r7, #24]
 8013352:	330c      	adds	r3, #12
 8013354:	b2d2      	uxtb	r2, r2
 8013356:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	0e1a      	lsrs	r2, r3, #24
 801335c:	69bb      	ldr	r3, [r7, #24]
 801335e:	330d      	adds	r3, #13
 8013360:	b2d2      	uxtb	r2, r2
 8013362:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8013364:	69bb      	ldr	r3, [r7, #24]
 8013366:	330e      	adds	r3, #14
 8013368:	2200      	movs	r2, #0
 801336a:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 801336c:	69bb      	ldr	r3, [r7, #24]
 801336e:	330f      	adds	r3, #15
 8013370:	88fa      	ldrh	r2, [r7, #6]
 8013372:	b2d2      	uxtb	r2, r2
 8013374:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013376:	2300      	movs	r3, #0
}
 8013378:	4618      	mov	r0, r3
 801337a:	3708      	adds	r7, #8
 801337c:	46bd      	mov	sp, r7
 801337e:	bc90      	pop	{r4, r7}
 8013380:	4770      	bx	lr

08013382 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8013382:	b590      	push	{r4, r7, lr}
 8013384:	b08b      	sub	sp, #44	; 0x2c
 8013386:	af04      	add	r7, sp, #16
 8013388:	6078      	str	r0, [r7, #4]
 801338a:	4608      	mov	r0, r1
 801338c:	4611      	mov	r1, r2
 801338e:	461a      	mov	r2, r3
 8013390:	4603      	mov	r3, r0
 8013392:	807b      	strh	r3, [r7, #2]
 8013394:	460b      	mov	r3, r1
 8013396:	707b      	strb	r3, [r7, #1]
 8013398:	4613      	mov	r3, r2
 801339a:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d002      	beq.n	80133a8 <ComputeCmacB0+0x26>
 80133a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d101      	bne.n	80133ac <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80133a8:	2309      	movs	r3, #9
 80133aa:	e024      	b.n	80133f6 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80133ac:	887b      	ldrh	r3, [r7, #2]
 80133ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80133b2:	d901      	bls.n	80133b8 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80133b4:	230d      	movs	r3, #13
 80133b6:	e01e      	b.n	80133f6 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80133b8:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80133bc:	783a      	ldrb	r2, [r7, #0]
 80133be:	7879      	ldrb	r1, [r7, #1]
 80133c0:	8878      	ldrh	r0, [r7, #2]
 80133c2:	f107 0308 	add.w	r3, r7, #8
 80133c6:	9302      	str	r3, [sp, #8]
 80133c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ca:	9301      	str	r3, [sp, #4]
 80133cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ce:	9300      	str	r3, [sp, #0]
 80133d0:	4623      	mov	r3, r4
 80133d2:	f7ff ff6e 	bl	80132b2 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80133d6:	7879      	ldrb	r1, [r7, #1]
 80133d8:	887a      	ldrh	r2, [r7, #2]
 80133da:	f107 0008 	add.w	r0, r7, #8
 80133de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133e0:	9300      	str	r3, [sp, #0]
 80133e2:	460b      	mov	r3, r1
 80133e4:	6879      	ldr	r1, [r7, #4]
 80133e6:	f7f8 fbc3 	bl	800bb70 <SecureElementComputeAesCmac>
 80133ea:	4603      	mov	r3, r0
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d001      	beq.n	80133f4 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80133f0:	230e      	movs	r3, #14
 80133f2:	e000      	b.n	80133f6 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80133f4:	2300      	movs	r3, #0
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	371c      	adds	r7, #28
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd90      	pop	{r4, r7, pc}

080133fe <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80133fe:	b590      	push	{r4, r7, lr}
 8013400:	b0cd      	sub	sp, #308	; 0x134
 8013402:	af04      	add	r7, sp, #16
 8013404:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8013408:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 801340c:	6020      	str	r0, [r4, #0]
 801340e:	460c      	mov	r4, r1
 8013410:	4610      	mov	r0, r2
 8013412:	4619      	mov	r1, r3
 8013414:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013418:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801341c:	4622      	mov	r2, r4
 801341e:	801a      	strh	r2, [r3, #0]
 8013420:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013424:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8013428:	4602      	mov	r2, r0
 801342a:	701a      	strb	r2, [r3, #0]
 801342c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013430:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013434:	460a      	mov	r2, r1
 8013436:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013438:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801343c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d101      	bne.n	801344a <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013446:	2309      	movs	r3, #9
 8013448:	e063      	b.n	8013512 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801344a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801344e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8013452:	881b      	ldrh	r3, [r3, #0]
 8013454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013458:	d901      	bls.n	801345e <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801345a:	230d      	movs	r3, #13
 801345c:	e059      	b.n	8013512 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801345e:	f107 030c 	add.w	r3, r7, #12
 8013462:	f44f 7288 	mov.w	r2, #272	; 0x110
 8013466:	2100      	movs	r1, #0
 8013468:	4618      	mov	r0, r3
 801346a:	f004 fe93 	bl	8018194 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801346e:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8013472:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013476:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801347a:	781a      	ldrb	r2, [r3, #0]
 801347c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013480:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8013484:	7819      	ldrb	r1, [r3, #0]
 8013486:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801348a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801348e:	8818      	ldrh	r0, [r3, #0]
 8013490:	f107 030c 	add.w	r3, r7, #12
 8013494:	9302      	str	r3, [sp, #8]
 8013496:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801349a:	9301      	str	r3, [sp, #4]
 801349c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80134a0:	9300      	str	r3, [sp, #0]
 80134a2:	4623      	mov	r3, r4
 80134a4:	f7ff ff05 	bl	80132b2 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80134a8:	f107 030c 	add.w	r3, r7, #12
 80134ac:	3310      	adds	r3, #16
 80134ae:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80134b2:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80134b6:	8812      	ldrh	r2, [r2, #0]
 80134b8:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80134bc:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80134c0:	6809      	ldr	r1, [r1, #0]
 80134c2:	4618      	mov	r0, r3
 80134c4:	f004 fe2b 	bl	801811e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80134c8:	2306      	movs	r3, #6
 80134ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80134ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134d2:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80134d6:	881b      	ldrh	r3, [r3, #0]
 80134d8:	3310      	adds	r3, #16
 80134da:	b299      	uxth	r1, r3
 80134dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134e0:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80134e4:	781b      	ldrb	r3, [r3, #0]
 80134e6:	f107 000c 	add.w	r0, r7, #12
 80134ea:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80134ee:	f7f8 fb5d 	bl	800bbac <SecureElementVerifyAesCmac>
 80134f2:	4603      	mov	r3, r0
 80134f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80134f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d101      	bne.n	8013504 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013500:	2300      	movs	r3, #0
 8013502:	e006      	b.n	8013512 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013504:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013508:	2b01      	cmp	r3, #1
 801350a:	d101      	bne.n	8013510 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 801350c:	2301      	movs	r3, #1
 801350e:	e000      	b.n	8013512 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013510:	230e      	movs	r3, #14
}
 8013512:	4618      	mov	r0, r3
 8013514:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8013518:	46bd      	mov	sp, r7
 801351a:	bd90      	pop	{r4, r7, pc}

0801351c <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 801351c:	b480      	push	{r7}
 801351e:	b085      	sub	sp, #20
 8013520:	af00      	add	r7, sp, #0
 8013522:	4603      	mov	r3, r0
 8013524:	6039      	str	r1, [r7, #0]
 8013526:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013528:	2300      	movs	r3, #0
 801352a:	73fb      	strb	r3, [r7, #15]
 801352c:	e011      	b.n	8013552 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801352e:	7bfb      	ldrb	r3, [r7, #15]
 8013530:	4a0c      	ldr	r2, [pc, #48]	; (8013564 <GetKeyAddrItem+0x48>)
 8013532:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8013536:	79fa      	ldrb	r2, [r7, #7]
 8013538:	429a      	cmp	r2, r3
 801353a:	d107      	bne.n	801354c <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 801353c:	7bfb      	ldrb	r3, [r7, #15]
 801353e:	009b      	lsls	r3, r3, #2
 8013540:	4a08      	ldr	r2, [pc, #32]	; (8013564 <GetKeyAddrItem+0x48>)
 8013542:	441a      	add	r2, r3
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8013548:	2300      	movs	r3, #0
 801354a:	e006      	b.n	801355a <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801354c:	7bfb      	ldrb	r3, [r7, #15]
 801354e:	3301      	adds	r3, #1
 8013550:	73fb      	strb	r3, [r7, #15]
 8013552:	7bfb      	ldrb	r3, [r7, #15]
 8013554:	2b01      	cmp	r3, #1
 8013556:	d9ea      	bls.n	801352e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8013558:	230b      	movs	r3, #11
}
 801355a:	4618      	mov	r0, r3
 801355c:	3714      	adds	r7, #20
 801355e:	46bd      	mov	sp, r7
 8013560:	bc80      	pop	{r7}
 8013562:	4770      	bx	lr
 8013564:	20000120 	.word	0x20000120

08013568 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b088      	sub	sp, #32
 801356c:	af00      	add	r7, sp, #0
 801356e:	60b9      	str	r1, [r7, #8]
 8013570:	607a      	str	r2, [r7, #4]
 8013572:	461a      	mov	r2, r3
 8013574:	4603      	mov	r3, r0
 8013576:	73fb      	strb	r3, [r7, #15]
 8013578:	4613      	mov	r3, r2
 801357a:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 801357c:	2300      	movs	r3, #0
 801357e:	613b      	str	r3, [r7, #16]
 8013580:	f107 0314 	add.w	r3, r7, #20
 8013584:	2200      	movs	r2, #0
 8013586:	601a      	str	r2, [r3, #0]
 8013588:	605a      	str	r2, [r3, #4]
 801358a:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 801358c:	7bfb      	ldrb	r3, [r7, #15]
 801358e:	2b02      	cmp	r3, #2
 8013590:	d002      	beq.n	8013598 <DeriveSessionKey10x+0x30>
 8013592:	2b03      	cmp	r3, #3
 8013594:	d003      	beq.n	801359e <DeriveSessionKey10x+0x36>
 8013596:	e005      	b.n	80135a4 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8013598:	2301      	movs	r3, #1
 801359a:	743b      	strb	r3, [r7, #16]
            break;
 801359c:	e004      	b.n	80135a8 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801359e:	2302      	movs	r3, #2
 80135a0:	743b      	strb	r3, [r7, #16]
            break;
 80135a2:	e001      	b.n	80135a8 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80135a4:	230a      	movs	r3, #10
 80135a6:	e02a      	b.n	80135fe <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	b2db      	uxtb	r3, r3
 80135ac:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	0a1b      	lsrs	r3, r3, #8
 80135b2:	b2db      	uxtb	r3, r3
 80135b4:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	0c1b      	lsrs	r3, r3, #16
 80135ba:	b2db      	uxtb	r3, r3
 80135bc:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	b2db      	uxtb	r3, r3
 80135c2:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	0a1b      	lsrs	r3, r3, #8
 80135c8:	b2db      	uxtb	r3, r3
 80135ca:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	0c1b      	lsrs	r3, r3, #16
 80135d0:	b2db      	uxtb	r3, r3
 80135d2:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80135d4:	89bb      	ldrh	r3, [r7, #12]
 80135d6:	b2db      	uxtb	r3, r3
 80135d8:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80135da:	89bb      	ldrh	r3, [r7, #12]
 80135dc:	0a1b      	lsrs	r3, r3, #8
 80135de:	b29b      	uxth	r3, r3
 80135e0:	b2db      	uxtb	r3, r3
 80135e2:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80135e4:	7bfa      	ldrb	r2, [r7, #15]
 80135e6:	f107 0310 	add.w	r3, r7, #16
 80135ea:	2101      	movs	r1, #1
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7f8 fb73 	bl	800bcd8 <SecureElementDeriveAndStoreKey>
 80135f2:	4603      	mov	r3, r0
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d001      	beq.n	80135fc <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80135f8:	230e      	movs	r3, #14
 80135fa:	e000      	b.n	80135fe <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80135fc:	2300      	movs	r3, #0
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3720      	adds	r7, #32
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
	...

08013608 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013608:	b480      	push	{r7}
 801360a:	b083      	sub	sp, #12
 801360c:	af00      	add	r7, sp, #0
 801360e:	4603      	mov	r3, r0
 8013610:	6039      	str	r1, [r7, #0]
 8013612:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d101      	bne.n	801361e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801361a:	2309      	movs	r3, #9
 801361c:	e03b      	b.n	8013696 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 801361e:	79fb      	ldrb	r3, [r7, #7]
 8013620:	3b01      	subs	r3, #1
 8013622:	2b03      	cmp	r3, #3
 8013624:	d834      	bhi.n	8013690 <GetLastFcntDown+0x88>
 8013626:	a201      	add	r2, pc, #4	; (adr r2, 801362c <GetLastFcntDown+0x24>)
 8013628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801362c:	0801363d 	.word	0x0801363d
 8013630:	08013655 	.word	0x08013655
 8013634:	0801366d 	.word	0x0801366d
 8013638:	08013685 	.word	0x08013685
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 801363c:	4b18      	ldr	r3, [pc, #96]	; (80136a0 <GetLastFcntDown+0x98>)
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	691a      	ldr	r2, [r3, #16]
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8013646:	4b16      	ldr	r3, [pc, #88]	; (80136a0 <GetLastFcntDown+0x98>)
 8013648:	681a      	ldr	r2, [r3, #0]
 801364a:	4b15      	ldr	r3, [pc, #84]	; (80136a0 <GetLastFcntDown+0x98>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	6912      	ldr	r2, [r2, #16]
 8013650:	621a      	str	r2, [r3, #32]
            break;
 8013652:	e01f      	b.n	8013694 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8013654:	4b12      	ldr	r3, [pc, #72]	; (80136a0 <GetLastFcntDown+0x98>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	695a      	ldr	r2, [r3, #20]
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 801365e:	4b10      	ldr	r3, [pc, #64]	; (80136a0 <GetLastFcntDown+0x98>)
 8013660:	681a      	ldr	r2, [r3, #0]
 8013662:	4b0f      	ldr	r3, [pc, #60]	; (80136a0 <GetLastFcntDown+0x98>)
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	6952      	ldr	r2, [r2, #20]
 8013668:	621a      	str	r2, [r3, #32]
            break;
 801366a:	e013      	b.n	8013694 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 801366c:	4b0c      	ldr	r3, [pc, #48]	; (80136a0 <GetLastFcntDown+0x98>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	699a      	ldr	r2, [r3, #24]
 8013672:	683b      	ldr	r3, [r7, #0]
 8013674:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013676:	4b0a      	ldr	r3, [pc, #40]	; (80136a0 <GetLastFcntDown+0x98>)
 8013678:	681a      	ldr	r2, [r3, #0]
 801367a:	4b09      	ldr	r3, [pc, #36]	; (80136a0 <GetLastFcntDown+0x98>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	6992      	ldr	r2, [r2, #24]
 8013680:	621a      	str	r2, [r3, #32]
            break;
 8013682:	e007      	b.n	8013694 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8013684:	4b06      	ldr	r3, [pc, #24]	; (80136a0 <GetLastFcntDown+0x98>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	69da      	ldr	r2, [r3, #28]
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	601a      	str	r2, [r3, #0]
            break;
 801368e:	e001      	b.n	8013694 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013690:	2305      	movs	r3, #5
 8013692:	e000      	b.n	8013696 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013694:	2300      	movs	r3, #0
}
 8013696:	4618      	mov	r0, r3
 8013698:	370c      	adds	r7, #12
 801369a:	46bd      	mov	sp, r7
 801369c:	bc80      	pop	{r7}
 801369e:	4770      	bx	lr
 80136a0:	20001980 	.word	0x20001980

080136a4 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b084      	sub	sp, #16
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	4603      	mov	r3, r0
 80136ac:	6039      	str	r1, [r7, #0]
 80136ae:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80136b0:	2300      	movs	r3, #0
 80136b2:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80136b4:	f107 020c 	add.w	r2, r7, #12
 80136b8:	79fb      	ldrb	r3, [r7, #7]
 80136ba:	4611      	mov	r1, r2
 80136bc:	4618      	mov	r0, r3
 80136be:	f7ff ffa3 	bl	8013608 <GetLastFcntDown>
 80136c2:	4603      	mov	r3, r0
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d001      	beq.n	80136cc <CheckFCntDown+0x28>
    {
        return false;
 80136c8:	2300      	movs	r3, #0
 80136ca:	e00a      	b.n	80136e2 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	683a      	ldr	r2, [r7, #0]
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d803      	bhi.n	80136dc <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 80136d4:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80136d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80136da:	d101      	bne.n	80136e0 <CheckFCntDown+0x3c>
    {
        return true;
 80136dc:	2301      	movs	r3, #1
 80136de:	e000      	b.n	80136e2 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80136e0:	2300      	movs	r3, #0
    }
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3710      	adds	r7, #16
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
	...

080136ec <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80136ec:	b480      	push	{r7}
 80136ee:	b083      	sub	sp, #12
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	4603      	mov	r3, r0
 80136f4:	6039      	str	r1, [r7, #0]
 80136f6:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80136f8:	79fb      	ldrb	r3, [r7, #7]
 80136fa:	3b01      	subs	r3, #1
 80136fc:	2b03      	cmp	r3, #3
 80136fe:	d81f      	bhi.n	8013740 <UpdateFCntDown+0x54>
 8013700:	a201      	add	r2, pc, #4	; (adr r2, 8013708 <UpdateFCntDown+0x1c>)
 8013702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013706:	bf00      	nop
 8013708:	08013719 	.word	0x08013719
 801370c:	08013723 	.word	0x08013723
 8013710:	0801372d 	.word	0x0801372d
 8013714:	08013737 	.word	0x08013737
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013718:	4b0c      	ldr	r3, [pc, #48]	; (801374c <UpdateFCntDown+0x60>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	683a      	ldr	r2, [r7, #0]
 801371e:	611a      	str	r2, [r3, #16]
            break;
 8013720:	e00f      	b.n	8013742 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013722:	4b0a      	ldr	r3, [pc, #40]	; (801374c <UpdateFCntDown+0x60>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	683a      	ldr	r2, [r7, #0]
 8013728:	615a      	str	r2, [r3, #20]
            break;
 801372a:	e00a      	b.n	8013742 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 801372c:	4b07      	ldr	r3, [pc, #28]	; (801374c <UpdateFCntDown+0x60>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	683a      	ldr	r2, [r7, #0]
 8013732:	619a      	str	r2, [r3, #24]
            break;
 8013734:	e005      	b.n	8013742 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8013736:	4b05      	ldr	r3, [pc, #20]	; (801374c <UpdateFCntDown+0x60>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	683a      	ldr	r2, [r7, #0]
 801373c:	61da      	str	r2, [r3, #28]
            break;
 801373e:	e000      	b.n	8013742 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013740:	bf00      	nop
    }
}
 8013742:	bf00      	nop
 8013744:	370c      	adds	r7, #12
 8013746:	46bd      	mov	sp, r7
 8013748:	bc80      	pop	{r7}
 801374a:	4770      	bx	lr
 801374c:	20001980 	.word	0x20001980

08013750 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013750:	b480      	push	{r7}
 8013752:	b083      	sub	sp, #12
 8013754:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8013756:	4b18      	ldr	r3, [pc, #96]	; (80137b8 <ResetFCnts+0x68>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	2200      	movs	r2, #0
 801375c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801375e:	4b16      	ldr	r3, [pc, #88]	; (80137b8 <ResetFCnts+0x68>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013766:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013768:	4b13      	ldr	r3, [pc, #76]	; (80137b8 <ResetFCnts+0x68>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013770:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013772:	4b11      	ldr	r3, [pc, #68]	; (80137b8 <ResetFCnts+0x68>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801377a:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801377c:	4b0e      	ldr	r3, [pc, #56]	; (80137b8 <ResetFCnts+0x68>)
 801377e:	681a      	ldr	r2, [r3, #0]
 8013780:	4b0d      	ldr	r3, [pc, #52]	; (80137b8 <ResetFCnts+0x68>)
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	6992      	ldr	r2, [r2, #24]
 8013786:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013788:	2300      	movs	r3, #0
 801378a:	607b      	str	r3, [r7, #4]
 801378c:	e00b      	b.n	80137a6 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 801378e:	4b0a      	ldr	r3, [pc, #40]	; (80137b8 <ResetFCnts+0x68>)
 8013790:	681a      	ldr	r2, [r3, #0]
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	3306      	adds	r3, #6
 8013796:	009b      	lsls	r3, r3, #2
 8013798:	4413      	add	r3, r2
 801379a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801379e:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	3301      	adds	r3, #1
 80137a4:	607b      	str	r3, [r7, #4]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	ddf0      	ble.n	801378e <ResetFCnts+0x3e>
    }
}
 80137ac:	bf00      	nop
 80137ae:	bf00      	nop
 80137b0:	370c      	adds	r7, #12
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bc80      	pop	{r7}
 80137b6:	4770      	bx	lr
 80137b8:	20001980 	.word	0x20001980

080137bc <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b082      	sub	sp, #8
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d101      	bne.n	80137ce <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80137ca:	2308      	movs	r3, #8
 80137cc:	e01c      	b.n	8013808 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80137ce:	4a10      	ldr	r2, [pc, #64]	; (8013810 <LoRaMacCryptoInit+0x54>)
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80137d4:	4b0e      	ldr	r3, [pc, #56]	; (8013810 <LoRaMacCryptoInit+0x54>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	2228      	movs	r2, #40	; 0x28
 80137da:	2100      	movs	r1, #0
 80137dc:	4618      	mov	r0, r3
 80137de:	f004 fcd9 	bl	8018194 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80137e2:	4b0b      	ldr	r3, [pc, #44]	; (8013810 <LoRaMacCryptoInit+0x54>)
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	2201      	movs	r2, #1
 80137e8:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80137ea:	4b09      	ldr	r3, [pc, #36]	; (8013810 <LoRaMacCryptoInit+0x54>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	2201      	movs	r2, #1
 80137f0:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80137f2:	4b07      	ldr	r3, [pc, #28]	; (8013810 <LoRaMacCryptoInit+0x54>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	2201      	movs	r2, #1
 80137f8:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80137fa:	4b05      	ldr	r3, [pc, #20]	; (8013810 <LoRaMacCryptoInit+0x54>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	2200      	movs	r2, #0
 8013800:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013802:	f7ff ffa5 	bl	8013750 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8013806:	2300      	movs	r3, #0
}
 8013808:	4618      	mov	r0, r3
 801380a:	3708      	adds	r7, #8
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}
 8013810:	20001980 	.word	0x20001980

08013814 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013814:	b480      	push	{r7}
 8013816:	b083      	sub	sp, #12
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 801381c:	4b04      	ldr	r3, [pc, #16]	; (8013830 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	687a      	ldr	r2, [r7, #4]
 8013822:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013824:	2300      	movs	r3, #0
}
 8013826:	4618      	mov	r0, r3
 8013828:	370c      	adds	r7, #12
 801382a:	46bd      	mov	sp, r7
 801382c:	bc80      	pop	{r7}
 801382e:	4770      	bx	lr
 8013830:	20001980 	.word	0x20001980

08013834 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013834:	b480      	push	{r7}
 8013836:	b083      	sub	sp, #12
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d101      	bne.n	8013846 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013842:	2309      	movs	r3, #9
 8013844:	e006      	b.n	8013854 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8013846:	4b06      	ldr	r3, [pc, #24]	; (8013860 <LoRaMacCryptoGetFCntUp+0x2c>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	68db      	ldr	r3, [r3, #12]
 801384c:	1c5a      	adds	r2, r3, #1
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013852:	2300      	movs	r3, #0
}
 8013854:	4618      	mov	r0, r3
 8013856:	370c      	adds	r7, #12
 8013858:	46bd      	mov	sp, r7
 801385a:	bc80      	pop	{r7}
 801385c:	4770      	bx	lr
 801385e:	bf00      	nop
 8013860:	20001980 	.word	0x20001980

08013864 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b088      	sub	sp, #32
 8013868:	af00      	add	r7, sp, #0
 801386a:	4603      	mov	r3, r0
 801386c:	60b9      	str	r1, [r7, #8]
 801386e:	607a      	str	r2, [r7, #4]
 8013870:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8013872:	2300      	movs	r3, #0
 8013874:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8013876:	2300      	movs	r3, #0
 8013878:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801387a:	2312      	movs	r3, #18
 801387c:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d101      	bne.n	8013888 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013884:	2309      	movs	r3, #9
 8013886:	e035      	b.n	80138f4 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013888:	f107 0214 	add.w	r2, r7, #20
 801388c:	7bfb      	ldrb	r3, [r7, #15]
 801388e:	4611      	mov	r1, r2
 8013890:	4618      	mov	r0, r3
 8013892:	f7ff feb9 	bl	8013608 <GetLastFcntDown>
 8013896:	4603      	mov	r3, r0
 8013898:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801389a:	7efb      	ldrb	r3, [r7, #27]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d001      	beq.n	80138a4 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 80138a0:	7efb      	ldrb	r3, [r7, #27]
 80138a2:	e027      	b.n	80138f4 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80138a4:	697b      	ldr	r3, [r7, #20]
 80138a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80138aa:	d103      	bne.n	80138b4 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	68ba      	ldr	r2, [r7, #8]
 80138b0:	601a      	str	r2, [r3, #0]
 80138b2:	e01e      	b.n	80138f2 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	b29b      	uxth	r3, r3
 80138b8:	68ba      	ldr	r2, [r7, #8]
 80138ba:	1ad3      	subs	r3, r2, r3
 80138bc:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80138be:	69fb      	ldr	r3, [r7, #28]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	dd05      	ble.n	80138d0 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80138c4:	697a      	ldr	r2, [r7, #20]
 80138c6:	69fb      	ldr	r3, [r7, #28]
 80138c8:	441a      	add	r2, r3
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	601a      	str	r2, [r3, #0]
 80138ce:	e010      	b.n	80138f2 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 80138d0:	69fb      	ldr	r3, [r7, #28]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d104      	bne.n	80138e0 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80138d6:	697a      	ldr	r2, [r7, #20]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80138dc:	2307      	movs	r3, #7
 80138de:	e009      	b.n	80138f4 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80138e0:	697b      	ldr	r3, [r7, #20]
 80138e2:	0c1b      	lsrs	r3, r3, #16
 80138e4:	041b      	lsls	r3, r3, #16
 80138e6:	68ba      	ldr	r2, [r7, #8]
 80138e8:	4413      	add	r3, r2
 80138ea:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80138f2:	2300      	movs	r3, #0
}
 80138f4:	4618      	mov	r0, r3
 80138f6:	3720      	adds	r7, #32
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}

080138fc <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80138fc:	b480      	push	{r7}
 80138fe:	b085      	sub	sp, #20
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d101      	bne.n	801390e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801390a:	2309      	movs	r3, #9
 801390c:	e017      	b.n	801393e <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801390e:	2300      	movs	r3, #0
 8013910:	60fb      	str	r3, [r7, #12]
 8013912:	e010      	b.n	8013936 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013914:	4b0c      	ldr	r3, [pc, #48]	; (8013948 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8013916:	6819      	ldr	r1, [r3, #0]
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	222c      	movs	r2, #44	; 0x2c
 801391c:	fb02 f303 	mul.w	r3, r2, r3
 8013920:	687a      	ldr	r2, [r7, #4]
 8013922:	4413      	add	r3, r2
 8013924:	68fa      	ldr	r2, [r7, #12]
 8013926:	3206      	adds	r2, #6
 8013928:	0092      	lsls	r2, r2, #2
 801392a:	440a      	add	r2, r1
 801392c:	3204      	adds	r2, #4
 801392e:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	3301      	adds	r3, #1
 8013934:	60fb      	str	r3, [r7, #12]
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	2b00      	cmp	r3, #0
 801393a:	ddeb      	ble.n	8013914 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801393c:	2300      	movs	r3, #0
}
 801393e:	4618      	mov	r0, r3
 8013940:	3714      	adds	r7, #20
 8013942:	46bd      	mov	sp, r7
 8013944:	bc80      	pop	{r7}
 8013946:	4770      	bx	lr
 8013948:	20001980 	.word	0x20001980

0801394c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b082      	sub	sp, #8
 8013950:	af00      	add	r7, sp, #0
 8013952:	4603      	mov	r3, r0
 8013954:	6039      	str	r1, [r7, #0]
 8013956:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013958:	79fb      	ldrb	r3, [r7, #7]
 801395a:	6839      	ldr	r1, [r7, #0]
 801395c:	4618      	mov	r0, r3
 801395e:	f7f8 f8a9 	bl	800bab4 <SecureElementSetKey>
 8013962:	4603      	mov	r3, r0
 8013964:	2b00      	cmp	r3, #0
 8013966:	d001      	beq.n	801396c <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013968:	230e      	movs	r3, #14
 801396a:	e018      	b.n	801399e <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 801396c:	79fb      	ldrb	r3, [r7, #7]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d114      	bne.n	801399c <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8013972:	4b0d      	ldr	r3, [pc, #52]	; (80139a8 <LoRaMacCryptoSetKey+0x5c>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	789b      	ldrb	r3, [r3, #2]
 8013978:	79fa      	ldrb	r2, [r7, #7]
 801397a:	4611      	mov	r1, r2
 801397c:	4618      	mov	r0, r3
 801397e:	f000 fa39 	bl	8013df4 <LoRaMacCryptoDeriveMcRootKey>
 8013982:	4603      	mov	r3, r0
 8013984:	2b00      	cmp	r3, #0
 8013986:	d001      	beq.n	801398c <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013988:	230e      	movs	r3, #14
 801398a:	e008      	b.n	801399e <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801398c:	2004      	movs	r0, #4
 801398e:	f000 fa5c 	bl	8013e4a <LoRaMacCryptoDeriveMcKEKey>
 8013992:	4603      	mov	r3, r0
 8013994:	2b00      	cmp	r3, #0
 8013996:	d001      	beq.n	801399c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013998:	230e      	movs	r3, #14
 801399a:	e000      	b.n	801399e <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801399c:	2300      	movs	r3, #0
}
 801399e:	4618      	mov	r0, r3
 80139a0:	3708      	adds	r7, #8
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}
 80139a6:	bf00      	nop
 80139a8:	20001980 	.word	0x20001980

080139ac <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b086      	sub	sp, #24
 80139b0:	af02      	add	r7, sp, #8
 80139b2:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d101      	bne.n	80139be <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80139ba:	2309      	movs	r3, #9
 80139bc:	e02d      	b.n	8013a1a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80139be:	2301      	movs	r3, #1
 80139c0:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 80139c2:	4b18      	ldr	r3, [pc, #96]	; (8013a24 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	889a      	ldrh	r2, [r3, #4]
 80139c8:	3201      	adds	r2, #1
 80139ca:	b292      	uxth	r2, r2
 80139cc:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80139ce:	4b15      	ldr	r3, [pc, #84]	; (8013a24 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	889a      	ldrh	r2, [r3, #4]
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f000 fc18 	bl	801420e <LoRaMacSerializerJoinRequest>
 80139de:	4603      	mov	r3, r0
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d001      	beq.n	80139e8 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80139e4:	2310      	movs	r3, #16
 80139e6:	e018      	b.n	8013a1a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	6819      	ldr	r1, [r3, #0]
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	3318      	adds	r3, #24
 80139f0:	7bfa      	ldrb	r2, [r7, #15]
 80139f2:	9300      	str	r3, [sp, #0]
 80139f4:	4613      	mov	r3, r2
 80139f6:	2213      	movs	r2, #19
 80139f8:	2000      	movs	r0, #0
 80139fa:	f7f8 f8b9 	bl	800bb70 <SecureElementComputeAesCmac>
 80139fe:	4603      	mov	r3, r0
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d001      	beq.n	8013a08 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a04:	230e      	movs	r3, #14
 8013a06:	e008      	b.n	8013a1a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	f000 fc00 	bl	801420e <LoRaMacSerializerJoinRequest>
 8013a0e:	4603      	mov	r3, r0
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d001      	beq.n	8013a18 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013a14:	2310      	movs	r3, #16
 8013a16:	e000      	b.n	8013a1a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013a18:	2300      	movs	r3, #0
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3710      	adds	r7, #16
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}
 8013a22:	bf00      	nop
 8013a24:	20001980 	.word	0x20001980

08013a28 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8013a28:	b590      	push	{r4, r7, lr}
 8013a2a:	b097      	sub	sp, #92	; 0x5c
 8013a2c:	af04      	add	r7, sp, #16
 8013a2e:	4603      	mov	r3, r0
 8013a30:	60b9      	str	r1, [r7, #8]
 8013a32:	607a      	str	r2, [r7, #4]
 8013a34:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d002      	beq.n	8013a42 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d101      	bne.n	8013a46 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013a42:	2309      	movs	r3, #9
 8013a44:	e0bd      	b.n	8013bc2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013a46:	2312      	movs	r3, #18
 8013a48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	61bb      	str	r3, [r7, #24]
 8013a50:	f107 031c 	add.w	r3, r7, #28
 8013a54:	221d      	movs	r2, #29
 8013a56:	2100      	movs	r1, #0
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f009 f9ad 	bl	801cdb8 <memset>
    uint8_t versionMinor         = 0;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8013a62:	4b5a      	ldr	r3, [pc, #360]	; (8013bcc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	889b      	ldrh	r3, [r3, #4]
 8013a68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681c      	ldr	r4, [r3, #0]
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	791b      	ldrb	r3, [r3, #4]
 8013a74:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8013a78:	7bf8      	ldrb	r0, [r7, #15]
 8013a7a:	f107 0217 	add.w	r2, r7, #23
 8013a7e:	9202      	str	r2, [sp, #8]
 8013a80:	f107 0218 	add.w	r2, r7, #24
 8013a84:	9201      	str	r2, [sp, #4]
 8013a86:	9300      	str	r3, [sp, #0]
 8013a88:	4623      	mov	r3, r4
 8013a8a:	460a      	mov	r2, r1
 8013a8c:	68b9      	ldr	r1, [r7, #8]
 8013a8e:	f7f8 f963 	bl	800bd58 <SecureElementProcessJoinAccept>
 8013a92:	4603      	mov	r3, r0
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d001      	beq.n	8013a9c <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a98:	230e      	movs	r3, #14
 8013a9a:	e092      	b.n	8013bc2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	6818      	ldr	r0, [r3, #0]
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	791b      	ldrb	r3, [r3, #4]
 8013aa4:	b29a      	uxth	r2, r3
 8013aa6:	f107 0318 	add.w	r3, r7, #24
 8013aaa:	4619      	mov	r1, r3
 8013aac:	f004 fb37 	bl	801811e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f000 f9ed 	bl	8013e90 <LoRaMacParserJoinAccept>
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d001      	beq.n	8013ac0 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013abc:	230f      	movs	r3, #15
 8013abe:	e080      	b.n	8013bc2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	799b      	ldrb	r3, [r3, #6]
 8013ac4:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	79db      	ldrb	r3, [r3, #7]
 8013aca:	021b      	lsls	r3, r3, #8
 8013acc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013ace:	4313      	orrs	r3, r2
 8013ad0:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	7a1b      	ldrb	r3, [r3, #8]
 8013ad6:	041b      	lsls	r3, r3, #16
 8013ad8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013ada:	4313      	orrs	r3, r2
 8013adc:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8013ade:	4b3b      	ldr	r3, [pc, #236]	; (8013bcc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	689b      	ldr	r3, [r3, #8]
 8013ae4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	d010      	beq.n	8013b0c <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8013aea:	4b38      	ldr	r3, [pc, #224]	; (8013bcc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013af0:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8013af2:	7dfb      	ldrb	r3, [r7, #23]
 8013af4:	2100      	movs	r1, #0
 8013af6:	4618      	mov	r0, r3
 8013af8:	f000 f97c 	bl	8013df4 <LoRaMacCryptoDeriveMcRootKey>
 8013afc:	4603      	mov	r3, r0
 8013afe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d005      	beq.n	8013b16 <LoRaMacCryptoHandleJoinAccept+0xee>
 8013b0a:	e001      	b.n	8013b10 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8013b0c:	2303      	movs	r3, #3
 8013b0e:	e058      	b.n	8013bc2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8013b10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013b14:	e055      	b.n	8013bc2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8013b16:	2004      	movs	r0, #4
 8013b18:	f000 f997 	bl	8013e4a <LoRaMacCryptoDeriveMcKEKey>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d002      	beq.n	8013b30 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8013b2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013b2e:	e048      	b.n	8013bc2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	7a5b      	ldrb	r3, [r3, #9]
 8013b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	7a9b      	ldrb	r3, [r3, #10]
 8013b3a:	021b      	lsls	r3, r3, #8
 8013b3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b3e:	4313      	orrs	r3, r2
 8013b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	7adb      	ldrb	r3, [r3, #11]
 8013b46:	041b      	lsls	r3, r3, #16
 8013b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b4a:	4313      	orrs	r3, r2
 8013b4c:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8013b4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013b56:	2003      	movs	r0, #3
 8013b58:	f7ff fd06 	bl	8013568 <DeriveSessionKey10x>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b62:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d002      	beq.n	8013b70 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8013b6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013b6e:	e028      	b.n	8013bc2 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8013b70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013b78:	2002      	movs	r0, #2
 8013b7a:	f7ff fcf5 	bl	8013568 <DeriveSessionKey10x>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d002      	beq.n	8013b92 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8013b8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013b90:	e017      	b.n	8013bc2 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8013b92:	4b0e      	ldr	r3, [pc, #56]	; (8013bcc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	7dfa      	ldrb	r2, [r7, #23]
 8013b98:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8013b9a:	4b0c      	ldr	r3, [pc, #48]	; (8013bcc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013ba2:	4b0a      	ldr	r3, [pc, #40]	; (8013bcc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013baa:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013bac:	4b07      	ldr	r3, [pc, #28]	; (8013bcc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013bb4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013bb6:	4b05      	ldr	r3, [pc, #20]	; (8013bcc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013bbe:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013bc0:	2300      	movs	r3, #0
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	374c      	adds	r7, #76	; 0x4c
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd90      	pop	{r4, r7, pc}
 8013bca:	bf00      	nop
 8013bcc:	20001980 	.word	0x20001980

08013bd0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013bd0:	b590      	push	{r4, r7, lr}
 8013bd2:	b08b      	sub	sp, #44	; 0x2c
 8013bd4:	af04      	add	r7, sp, #16
 8013bd6:	60f8      	str	r0, [r7, #12]
 8013bd8:	607b      	str	r3, [r7, #4]
 8013bda:	460b      	mov	r3, r1
 8013bdc:	72fb      	strb	r3, [r7, #11]
 8013bde:	4613      	mov	r3, r2
 8013be0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013be2:	2312      	movs	r3, #18
 8013be4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013be6:	2303      	movs	r3, #3
 8013be8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d101      	bne.n	8013bf4 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013bf0:	2309      	movs	r3, #9
 8013bf2:	e05f      	b.n	8013cb4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013bf4:	4b31      	ldr	r3, [pc, #196]	; (8013cbc <LoRaMacCryptoSecureMessage+0xec>)
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	68db      	ldr	r3, [r3, #12]
 8013bfa:	68fa      	ldr	r2, [r7, #12]
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d201      	bcs.n	8013c04 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013c00:	2306      	movs	r3, #6
 8013c02:	e057      	b.n	8013cb4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d101      	bne.n	8013c12 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013c0e:	2302      	movs	r3, #2
 8013c10:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8013c12:	4b2a      	ldr	r3, [pc, #168]	; (8013cbc <LoRaMacCryptoSecureMessage+0xec>)
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	68db      	ldr	r3, [r3, #12]
 8013c18:	68fa      	ldr	r2, [r7, #12]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d916      	bls.n	8013c4c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c28:	b219      	sxth	r1, r3
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	689c      	ldr	r4, [r3, #8]
 8013c2e:	7dfa      	ldrb	r2, [r7, #23]
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	9301      	str	r3, [sp, #4]
 8013c34:	2300      	movs	r3, #0
 8013c36:	9300      	str	r3, [sp, #0]
 8013c38:	4623      	mov	r3, r4
 8013c3a:	f7ff faa1 	bl	8013180 <PayloadEncrypt>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013c42:	7dbb      	ldrb	r3, [r7, #22]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d001      	beq.n	8013c4c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8013c48:	7dbb      	ldrb	r3, [r7, #22]
 8013c4a:	e033      	b.n	8013cb4 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013c4c:	6878      	ldr	r0, [r7, #4]
 8013c4e:	f000 fb60 	bl	8014312 <LoRaMacSerializerData>
 8013c52:	4603      	mov	r3, r0
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d001      	beq.n	8013c5c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013c58:	2310      	movs	r3, #16
 8013c5a:	e02b      	b.n	8013cb4 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013c5c:	2302      	movs	r3, #2
 8013c5e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	6818      	ldr	r0, [r3, #0]
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	791b      	ldrb	r3, [r3, #4]
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	3b04      	subs	r3, #4
 8013c6c:	b299      	uxth	r1, r3
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	689b      	ldr	r3, [r3, #8]
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	322c      	adds	r2, #44	; 0x2c
 8013c76:	7dfc      	ldrb	r4, [r7, #23]
 8013c78:	9203      	str	r2, [sp, #12]
 8013c7a:	68fa      	ldr	r2, [r7, #12]
 8013c7c:	9202      	str	r2, [sp, #8]
 8013c7e:	9301      	str	r3, [sp, #4]
 8013c80:	2300      	movs	r3, #0
 8013c82:	9300      	str	r3, [sp, #0]
 8013c84:	2300      	movs	r3, #0
 8013c86:	4622      	mov	r2, r4
 8013c88:	f7ff fb7b 	bl	8013382 <ComputeCmacB0>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013c90:	7dbb      	ldrb	r3, [r7, #22]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d001      	beq.n	8013c9a <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8013c96:	7dbb      	ldrb	r3, [r7, #22]
 8013c98:	e00c      	b.n	8013cb4 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f000 fb39 	bl	8014312 <LoRaMacSerializerData>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d001      	beq.n	8013caa <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013ca6:	2310      	movs	r3, #16
 8013ca8:	e004      	b.n	8013cb4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8013caa:	4b04      	ldr	r3, [pc, #16]	; (8013cbc <LoRaMacCryptoSecureMessage+0xec>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	68fa      	ldr	r2, [r7, #12]
 8013cb0:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8013cb2:	2300      	movs	r3, #0
}
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	371c      	adds	r7, #28
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd90      	pop	{r4, r7, pc}
 8013cbc:	20001980 	.word	0x20001980

08013cc0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013cc0:	b590      	push	{r4, r7, lr}
 8013cc2:	b08b      	sub	sp, #44	; 0x2c
 8013cc4:	af04      	add	r7, sp, #16
 8013cc6:	60b9      	str	r1, [r7, #8]
 8013cc8:	607b      	str	r3, [r7, #4]
 8013cca:	4603      	mov	r3, r0
 8013ccc:	73fb      	strb	r3, [r7, #15]
 8013cce:	4613      	mov	r3, r2
 8013cd0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8013cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d101      	bne.n	8013cdc <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013cd8:	2309      	movs	r3, #9
 8013cda:	e084      	b.n	8013de6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013cdc:	7bbb      	ldrb	r3, [r7, #14]
 8013cde:	6879      	ldr	r1, [r7, #4]
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7ff fcdf 	bl	80136a4 <CheckFCntDown>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	f083 0301 	eor.w	r3, r3, #1
 8013cec:	b2db      	uxtb	r3, r3
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d001      	beq.n	8013cf6 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013cf2:	2306      	movs	r3, #6
 8013cf4:	e077      	b.n	8013de6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013cf6:	2312      	movs	r3, #18
 8013cf8:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013cfa:	2303      	movs	r3, #3
 8013cfc:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8013cfe:	2302      	movs	r3, #2
 8013d00:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d04:	f000 f98f 	bl	8014026 <LoRaMacParserData>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d001      	beq.n	8013d12 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013d0e:	230f      	movs	r3, #15
 8013d10:	e069      	b.n	8013de6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8013d12:	f107 0210 	add.w	r2, r7, #16
 8013d16:	7bfb      	ldrb	r3, [r7, #15]
 8013d18:	4611      	mov	r1, r2
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7ff fbfe 	bl	801351c <GetKeyAddrItem>
 8013d20:	4603      	mov	r3, r0
 8013d22:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013d24:	7d7b      	ldrb	r3, [r7, #21]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d001      	beq.n	8013d2e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8013d2a:	7d7b      	ldrb	r3, [r7, #21]
 8013d2c:	e05b      	b.n	8013de6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8013d2e:	693b      	ldr	r3, [r7, #16]
 8013d30:	785b      	ldrb	r3, [r3, #1]
 8013d32:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8013d34:	693b      	ldr	r3, [r7, #16]
 8013d36:	789b      	ldrb	r3, [r3, #2]
 8013d38:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8013d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d3c:	689b      	ldr	r3, [r3, #8]
 8013d3e:	68ba      	ldr	r2, [r7, #8]
 8013d40:	429a      	cmp	r2, r3
 8013d42:	d001      	beq.n	8013d48 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013d44:	2302      	movs	r3, #2
 8013d46:	e04e      	b.n	8013de6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d4a:	7b1b      	ldrb	r3, [r3, #12]
 8013d4c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013d50:	b2db      	uxtb	r3, r3
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	bf14      	ite	ne
 8013d56:	2301      	movne	r3, #1
 8013d58:	2300      	moveq	r3, #0
 8013d5a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013d5c:	4b24      	ldr	r3, [pc, #144]	; (8013df0 <LoRaMacCryptoUnsecureMessage+0x130>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	789b      	ldrb	r3, [r3, #2]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d101      	bne.n	8013d6a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8013d66:	2300      	movs	r3, #0
 8013d68:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8013d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d6c:	6818      	ldr	r0, [r3, #0]
 8013d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d70:	791b      	ldrb	r3, [r3, #4]
 8013d72:	b29b      	uxth	r3, r3
 8013d74:	3b04      	subs	r3, #4
 8013d76:	b299      	uxth	r1, r3
 8013d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d7c:	7dbc      	ldrb	r4, [r7, #22]
 8013d7e:	7d3a      	ldrb	r2, [r7, #20]
 8013d80:	9303      	str	r3, [sp, #12]
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	9302      	str	r3, [sp, #8]
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	9301      	str	r3, [sp, #4]
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	9300      	str	r3, [sp, #0]
 8013d8e:	4623      	mov	r3, r4
 8013d90:	f7ff fb35 	bl	80133fe <VerifyCmacB0>
 8013d94:	4603      	mov	r3, r0
 8013d96:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013d98:	7d7b      	ldrb	r3, [r7, #21]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d001      	beq.n	8013da2 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8013d9e:	7d7b      	ldrb	r3, [r7, #21]
 8013da0:	e021      	b.n	8013de6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8013da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d101      	bne.n	8013db0 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013dac:	2302      	movs	r3, #2
 8013dae:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8013db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013dba:	b219      	sxth	r1, r3
 8013dbc:	7dfa      	ldrb	r2, [r7, #23]
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	9301      	str	r3, [sp, #4]
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	9300      	str	r3, [sp, #0]
 8013dc6:	68bb      	ldr	r3, [r7, #8]
 8013dc8:	f7ff f9da 	bl	8013180 <PayloadEncrypt>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013dd0:	7d7b      	ldrb	r3, [r7, #21]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d001      	beq.n	8013dda <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8013dd6:	7d7b      	ldrb	r3, [r7, #21]
 8013dd8:	e005      	b.n	8013de6 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8013dda:	7bbb      	ldrb	r3, [r7, #14]
 8013ddc:	6879      	ldr	r1, [r7, #4]
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7ff fc84 	bl	80136ec <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013de4:	2300      	movs	r3, #0
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	371c      	adds	r7, #28
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd90      	pop	{r4, r7, pc}
 8013dee:	bf00      	nop
 8013df0:	20001980 	.word	0x20001980

08013df4 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b086      	sub	sp, #24
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	460a      	mov	r2, r1
 8013dfe:	71fb      	strb	r3, [r7, #7]
 8013e00:	4613      	mov	r3, r2
 8013e02:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8013e04:	79bb      	ldrb	r3, [r7, #6]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d001      	beq.n	8013e0e <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013e0a:	230a      	movs	r3, #10
 8013e0c:	e019      	b.n	8013e42 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8013e0e:	2300      	movs	r3, #0
 8013e10:	60bb      	str	r3, [r7, #8]
 8013e12:	f107 030c 	add.w	r3, r7, #12
 8013e16:	2200      	movs	r2, #0
 8013e18:	601a      	str	r2, [r3, #0]
 8013e1a:	605a      	str	r2, [r3, #4]
 8013e1c:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8013e1e:	79fb      	ldrb	r3, [r7, #7]
 8013e20:	2b01      	cmp	r3, #1
 8013e22:	d101      	bne.n	8013e28 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8013e24:	2320      	movs	r3, #32
 8013e26:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013e28:	79b9      	ldrb	r1, [r7, #6]
 8013e2a:	f107 0308 	add.w	r3, r7, #8
 8013e2e:	2204      	movs	r2, #4
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7f7 ff51 	bl	800bcd8 <SecureElementDeriveAndStoreKey>
 8013e36:	4603      	mov	r3, r0
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d001      	beq.n	8013e40 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e3c:	230e      	movs	r3, #14
 8013e3e:	e000      	b.n	8013e42 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013e40:	2300      	movs	r3, #0
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	3718      	adds	r7, #24
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}

08013e4a <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8013e4a:	b580      	push	{r7, lr}
 8013e4c:	b086      	sub	sp, #24
 8013e4e:	af00      	add	r7, sp, #0
 8013e50:	4603      	mov	r3, r0
 8013e52:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8013e54:	79fb      	ldrb	r3, [r7, #7]
 8013e56:	2b04      	cmp	r3, #4
 8013e58:	d001      	beq.n	8013e5e <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013e5a:	230a      	movs	r3, #10
 8013e5c:	e014      	b.n	8013e88 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8013e5e:	2300      	movs	r3, #0
 8013e60:	60bb      	str	r3, [r7, #8]
 8013e62:	f107 030c 	add.w	r3, r7, #12
 8013e66:	2200      	movs	r2, #0
 8013e68:	601a      	str	r2, [r3, #0]
 8013e6a:	605a      	str	r2, [r3, #4]
 8013e6c:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013e6e:	79f9      	ldrb	r1, [r7, #7]
 8013e70:	f107 0308 	add.w	r3, r7, #8
 8013e74:	227f      	movs	r2, #127	; 0x7f
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7f7 ff2e 	bl	800bcd8 <SecureElementDeriveAndStoreKey>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d001      	beq.n	8013e86 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e82:	230e      	movs	r3, #14
 8013e84:	e000      	b.n	8013e88 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013e86:	2300      	movs	r3, #0
}
 8013e88:	4618      	mov	r0, r3
 8013e8a:	3718      	adds	r7, #24
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}

08013e90 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b084      	sub	sp, #16
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d003      	beq.n	8013ea6 <LoRaMacParserJoinAccept+0x16>
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d101      	bne.n	8013eaa <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013ea6:	2302      	movs	r3, #2
 8013ea8:	e0b9      	b.n	801401e <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	681a      	ldr	r2, [r3, #0]
 8013eb2:	89fb      	ldrh	r3, [r7, #14]
 8013eb4:	1c59      	adds	r1, r3, #1
 8013eb6:	81f9      	strh	r1, [r7, #14]
 8013eb8:	4413      	add	r3, r2
 8013eba:	781a      	ldrb	r2, [r3, #0]
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	1d98      	adds	r0, r3, #6
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	681a      	ldr	r2, [r3, #0]
 8013ec8:	89fb      	ldrh	r3, [r7, #14]
 8013eca:	4413      	add	r3, r2
 8013ecc:	2203      	movs	r2, #3
 8013ece:	4619      	mov	r1, r3
 8013ed0:	f004 f925 	bl	801811e <memcpy1>
    bufItr = bufItr + 3;
 8013ed4:	89fb      	ldrh	r3, [r7, #14]
 8013ed6:	3303      	adds	r3, #3
 8013ed8:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f103 0009 	add.w	r0, r3, #9
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681a      	ldr	r2, [r3, #0]
 8013ee4:	89fb      	ldrh	r3, [r7, #14]
 8013ee6:	4413      	add	r3, r2
 8013ee8:	2203      	movs	r2, #3
 8013eea:	4619      	mov	r1, r3
 8013eec:	f004 f917 	bl	801811e <memcpy1>
    bufItr = bufItr + 3;
 8013ef0:	89fb      	ldrh	r3, [r7, #14]
 8013ef2:	3303      	adds	r3, #3
 8013ef4:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	681a      	ldr	r2, [r3, #0]
 8013efa:	89fb      	ldrh	r3, [r7, #14]
 8013efc:	1c59      	adds	r1, r3, #1
 8013efe:	81f9      	strh	r1, [r7, #14]
 8013f00:	4413      	add	r3, r2
 8013f02:	781b      	ldrb	r3, [r3, #0]
 8013f04:	461a      	mov	r2, r3
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681a      	ldr	r2, [r3, #0]
 8013f0e:	89fb      	ldrh	r3, [r7, #14]
 8013f10:	1c59      	adds	r1, r3, #1
 8013f12:	81f9      	strh	r1, [r7, #14]
 8013f14:	4413      	add	r3, r2
 8013f16:	781b      	ldrb	r3, [r3, #0]
 8013f18:	021a      	lsls	r2, r3, #8
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	68db      	ldr	r3, [r3, #12]
 8013f1e:	431a      	orrs	r2, r3
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	681a      	ldr	r2, [r3, #0]
 8013f28:	89fb      	ldrh	r3, [r7, #14]
 8013f2a:	1c59      	adds	r1, r3, #1
 8013f2c:	81f9      	strh	r1, [r7, #14]
 8013f2e:	4413      	add	r3, r2
 8013f30:	781b      	ldrb	r3, [r3, #0]
 8013f32:	041a      	lsls	r2, r3, #16
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	68db      	ldr	r3, [r3, #12]
 8013f38:	431a      	orrs	r2, r3
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	681a      	ldr	r2, [r3, #0]
 8013f42:	89fb      	ldrh	r3, [r7, #14]
 8013f44:	1c59      	adds	r1, r3, #1
 8013f46:	81f9      	strh	r1, [r7, #14]
 8013f48:	4413      	add	r3, r2
 8013f4a:	781b      	ldrb	r3, [r3, #0]
 8013f4c:	061a      	lsls	r2, r3, #24
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	68db      	ldr	r3, [r3, #12]
 8013f52:	431a      	orrs	r2, r3
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	681a      	ldr	r2, [r3, #0]
 8013f5c:	89fb      	ldrh	r3, [r7, #14]
 8013f5e:	1c59      	adds	r1, r3, #1
 8013f60:	81f9      	strh	r1, [r7, #14]
 8013f62:	4413      	add	r3, r2
 8013f64:	781a      	ldrb	r2, [r3, #0]
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	681a      	ldr	r2, [r3, #0]
 8013f6e:	89fb      	ldrh	r3, [r7, #14]
 8013f70:	1c59      	adds	r1, r3, #1
 8013f72:	81f9      	strh	r1, [r7, #14]
 8013f74:	4413      	add	r3, r2
 8013f76:	781a      	ldrb	r2, [r3, #0]
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	791b      	ldrb	r3, [r3, #4]
 8013f80:	1f1a      	subs	r2, r3, #4
 8013f82:	89fb      	ldrh	r3, [r7, #14]
 8013f84:	1ad3      	subs	r3, r2, r3
 8013f86:	2b10      	cmp	r3, #16
 8013f88:	d10e      	bne.n	8013fa8 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f103 0012 	add.w	r0, r3, #18
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681a      	ldr	r2, [r3, #0]
 8013f94:	89fb      	ldrh	r3, [r7, #14]
 8013f96:	4413      	add	r3, r2
 8013f98:	2210      	movs	r2, #16
 8013f9a:	4619      	mov	r1, r3
 8013f9c:	f004 f8bf 	bl	801811e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013fa0:	89fb      	ldrh	r3, [r7, #14]
 8013fa2:	3310      	adds	r3, #16
 8013fa4:	81fb      	strh	r3, [r7, #14]
 8013fa6:	e008      	b.n	8013fba <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	791b      	ldrb	r3, [r3, #4]
 8013fac:	1f1a      	subs	r2, r3, #4
 8013fae:	89fb      	ldrh	r3, [r7, #14]
 8013fb0:	1ad3      	subs	r3, r2, r3
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	dd01      	ble.n	8013fba <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	e031      	b.n	801401e <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	681a      	ldr	r2, [r3, #0]
 8013fbe:	89fb      	ldrh	r3, [r7, #14]
 8013fc0:	1c59      	adds	r1, r3, #1
 8013fc2:	81f9      	strh	r1, [r7, #14]
 8013fc4:	4413      	add	r3, r2
 8013fc6:	781b      	ldrb	r3, [r3, #0]
 8013fc8:	461a      	mov	r2, r3
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	681a      	ldr	r2, [r3, #0]
 8013fd2:	89fb      	ldrh	r3, [r7, #14]
 8013fd4:	1c59      	adds	r1, r3, #1
 8013fd6:	81f9      	strh	r1, [r7, #14]
 8013fd8:	4413      	add	r3, r2
 8013fda:	781b      	ldrb	r3, [r3, #0]
 8013fdc:	021a      	lsls	r2, r3, #8
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fe2:	431a      	orrs	r2, r3
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	681a      	ldr	r2, [r3, #0]
 8013fec:	89fb      	ldrh	r3, [r7, #14]
 8013fee:	1c59      	adds	r1, r3, #1
 8013ff0:	81f9      	strh	r1, [r7, #14]
 8013ff2:	4413      	add	r3, r2
 8013ff4:	781b      	ldrb	r3, [r3, #0]
 8013ff6:	041a      	lsls	r2, r3, #16
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ffc:	431a      	orrs	r2, r3
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	681a      	ldr	r2, [r3, #0]
 8014006:	89fb      	ldrh	r3, [r7, #14]
 8014008:	1c59      	adds	r1, r3, #1
 801400a:	81f9      	strh	r1, [r7, #14]
 801400c:	4413      	add	r3, r2
 801400e:	781b      	ldrb	r3, [r3, #0]
 8014010:	061a      	lsls	r2, r3, #24
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014016:	431a      	orrs	r2, r3
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801401c:	2300      	movs	r3, #0
}
 801401e:	4618      	mov	r0, r3
 8014020:	3710      	adds	r7, #16
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}

08014026 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014026:	b580      	push	{r7, lr}
 8014028:	b084      	sub	sp, #16
 801402a:	af00      	add	r7, sp, #0
 801402c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d003      	beq.n	801403c <LoRaMacParserData+0x16>
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d101      	bne.n	8014040 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801403c:	2302      	movs	r3, #2
 801403e:	e0e2      	b.n	8014206 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8014040:	2300      	movs	r3, #0
 8014042:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	681a      	ldr	r2, [r3, #0]
 8014048:	89fb      	ldrh	r3, [r7, #14]
 801404a:	1c59      	adds	r1, r3, #1
 801404c:	81f9      	strh	r1, [r7, #14]
 801404e:	4413      	add	r3, r2
 8014050:	781a      	ldrb	r2, [r3, #0]
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681a      	ldr	r2, [r3, #0]
 801405a:	89fb      	ldrh	r3, [r7, #14]
 801405c:	1c59      	adds	r1, r3, #1
 801405e:	81f9      	strh	r1, [r7, #14]
 8014060:	4413      	add	r3, r2
 8014062:	781b      	ldrb	r3, [r3, #0]
 8014064:	461a      	mov	r2, r3
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681a      	ldr	r2, [r3, #0]
 801406e:	89fb      	ldrh	r3, [r7, #14]
 8014070:	1c59      	adds	r1, r3, #1
 8014072:	81f9      	strh	r1, [r7, #14]
 8014074:	4413      	add	r3, r2
 8014076:	781b      	ldrb	r3, [r3, #0]
 8014078:	021a      	lsls	r2, r3, #8
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	689b      	ldr	r3, [r3, #8]
 801407e:	431a      	orrs	r2, r3
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681a      	ldr	r2, [r3, #0]
 8014088:	89fb      	ldrh	r3, [r7, #14]
 801408a:	1c59      	adds	r1, r3, #1
 801408c:	81f9      	strh	r1, [r7, #14]
 801408e:	4413      	add	r3, r2
 8014090:	781b      	ldrb	r3, [r3, #0]
 8014092:	041a      	lsls	r2, r3, #16
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	689b      	ldr	r3, [r3, #8]
 8014098:	431a      	orrs	r2, r3
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	681a      	ldr	r2, [r3, #0]
 80140a2:	89fb      	ldrh	r3, [r7, #14]
 80140a4:	1c59      	adds	r1, r3, #1
 80140a6:	81f9      	strh	r1, [r7, #14]
 80140a8:	4413      	add	r3, r2
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	061a      	lsls	r2, r3, #24
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	689b      	ldr	r3, [r3, #8]
 80140b2:	431a      	orrs	r2, r3
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	681a      	ldr	r2, [r3, #0]
 80140bc:	89fb      	ldrh	r3, [r7, #14]
 80140be:	1c59      	adds	r1, r3, #1
 80140c0:	81f9      	strh	r1, [r7, #14]
 80140c2:	4413      	add	r3, r2
 80140c4:	781a      	ldrb	r2, [r3, #0]
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	681a      	ldr	r2, [r3, #0]
 80140ce:	89fb      	ldrh	r3, [r7, #14]
 80140d0:	1c59      	adds	r1, r3, #1
 80140d2:	81f9      	strh	r1, [r7, #14]
 80140d4:	4413      	add	r3, r2
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	b29a      	uxth	r2, r3
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	681a      	ldr	r2, [r3, #0]
 80140e2:	89fb      	ldrh	r3, [r7, #14]
 80140e4:	1c59      	adds	r1, r3, #1
 80140e6:	81f9      	strh	r1, [r7, #14]
 80140e8:	4413      	add	r3, r2
 80140ea:	781b      	ldrb	r3, [r3, #0]
 80140ec:	0219      	lsls	r1, r3, #8
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	89db      	ldrh	r3, [r3, #14]
 80140f2:	b21a      	sxth	r2, r3
 80140f4:	b20b      	sxth	r3, r1
 80140f6:	4313      	orrs	r3, r2
 80140f8:	b21b      	sxth	r3, r3
 80140fa:	b29a      	uxth	r2, r3
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	f103 0010 	add.w	r0, r3, #16
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681a      	ldr	r2, [r3, #0]
 801410a:	89fb      	ldrh	r3, [r7, #14]
 801410c:	18d1      	adds	r1, r2, r3
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	7b1b      	ldrb	r3, [r3, #12]
 8014112:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014116:	b2db      	uxtb	r3, r3
 8014118:	b29b      	uxth	r3, r3
 801411a:	461a      	mov	r2, r3
 801411c:	f003 ffff 	bl	801811e <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	7b1b      	ldrb	r3, [r3, #12]
 8014124:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014128:	b2db      	uxtb	r3, r3
 801412a:	b29a      	uxth	r2, r3
 801412c:	89fb      	ldrh	r3, [r7, #14]
 801412e:	4413      	add	r3, r2
 8014130:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	2200      	movs	r2, #0
 8014136:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	2200      	movs	r2, #0
 801413e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	791b      	ldrb	r3, [r3, #4]
 8014146:	461a      	mov	r2, r3
 8014148:	89fb      	ldrh	r3, [r7, #14]
 801414a:	1ad3      	subs	r3, r2, r3
 801414c:	2b04      	cmp	r3, #4
 801414e:	dd28      	ble.n	80141a2 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	681a      	ldr	r2, [r3, #0]
 8014154:	89fb      	ldrh	r3, [r7, #14]
 8014156:	1c59      	adds	r1, r3, #1
 8014158:	81f9      	strh	r1, [r7, #14]
 801415a:	4413      	add	r3, r2
 801415c:	781a      	ldrb	r2, [r3, #0]
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	791a      	ldrb	r2, [r3, #4]
 8014168:	89fb      	ldrh	r3, [r7, #14]
 801416a:	b2db      	uxtb	r3, r3
 801416c:	1ad3      	subs	r3, r2, r3
 801416e:	b2db      	uxtb	r3, r3
 8014170:	3b04      	subs	r3, #4
 8014172:	b2da      	uxtb	r2, r3
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	681a      	ldr	r2, [r3, #0]
 8014182:	89fb      	ldrh	r3, [r7, #14]
 8014184:	18d1      	adds	r1, r2, r3
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801418c:	b29b      	uxth	r3, r3
 801418e:	461a      	mov	r2, r3
 8014190:	f003 ffc5 	bl	801811e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801419a:	b29a      	uxth	r2, r3
 801419c:	89fb      	ldrh	r3, [r7, #14]
 801419e:	4413      	add	r3, r2
 80141a0:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681a      	ldr	r2, [r3, #0]
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	791b      	ldrb	r3, [r3, #4]
 80141aa:	3b04      	subs	r3, #4
 80141ac:	4413      	add	r3, r2
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	461a      	mov	r2, r3
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	6819      	ldr	r1, [r3, #0]
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	791b      	ldrb	r3, [r3, #4]
 80141c2:	3b03      	subs	r3, #3
 80141c4:	440b      	add	r3, r1
 80141c6:	781b      	ldrb	r3, [r3, #0]
 80141c8:	021b      	lsls	r3, r3, #8
 80141ca:	431a      	orrs	r2, r3
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	6819      	ldr	r1, [r3, #0]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	791b      	ldrb	r3, [r3, #4]
 80141dc:	3b02      	subs	r3, #2
 80141de:	440b      	add	r3, r1
 80141e0:	781b      	ldrb	r3, [r3, #0]
 80141e2:	041b      	lsls	r3, r3, #16
 80141e4:	431a      	orrs	r2, r3
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	6819      	ldr	r1, [r3, #0]
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	791b      	ldrb	r3, [r3, #4]
 80141f6:	3b01      	subs	r3, #1
 80141f8:	440b      	add	r3, r1
 80141fa:	781b      	ldrb	r3, [r3, #0]
 80141fc:	061b      	lsls	r3, r3, #24
 80141fe:	431a      	orrs	r2, r3
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8014204:	2300      	movs	r3, #0
}
 8014206:	4618      	mov	r0, r3
 8014208:	3710      	adds	r7, #16
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}

0801420e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801420e:	b580      	push	{r7, lr}
 8014210:	b084      	sub	sp, #16
 8014212:	af00      	add	r7, sp, #0
 8014214:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d003      	beq.n	8014224 <LoRaMacSerializerJoinRequest+0x16>
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d101      	bne.n	8014228 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014224:	2301      	movs	r3, #1
 8014226:	e070      	b.n	801430a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014228:	2300      	movs	r3, #0
 801422a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	791b      	ldrb	r3, [r3, #4]
 8014230:	2b16      	cmp	r3, #22
 8014232:	d801      	bhi.n	8014238 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014234:	2302      	movs	r3, #2
 8014236:	e068      	b.n	801430a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681a      	ldr	r2, [r3, #0]
 801423c:	89fb      	ldrh	r3, [r7, #14]
 801423e:	1c59      	adds	r1, r3, #1
 8014240:	81f9      	strh	r1, [r7, #14]
 8014242:	4413      	add	r3, r2
 8014244:	687a      	ldr	r2, [r7, #4]
 8014246:	7952      	ldrb	r2, [r2, #5]
 8014248:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	681a      	ldr	r2, [r3, #0]
 801424e:	89fb      	ldrh	r3, [r7, #14]
 8014250:	18d0      	adds	r0, r2, r3
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	3306      	adds	r3, #6
 8014256:	2208      	movs	r2, #8
 8014258:	4619      	mov	r1, r3
 801425a:	f003 ff7b 	bl	8018154 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801425e:	89fb      	ldrh	r3, [r7, #14]
 8014260:	3308      	adds	r3, #8
 8014262:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681a      	ldr	r2, [r3, #0]
 8014268:	89fb      	ldrh	r3, [r7, #14]
 801426a:	18d0      	adds	r0, r2, r3
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	330e      	adds	r3, #14
 8014270:	2208      	movs	r2, #8
 8014272:	4619      	mov	r1, r3
 8014274:	f003 ff6e 	bl	8018154 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8014278:	89fb      	ldrh	r3, [r7, #14]
 801427a:	3308      	adds	r3, #8
 801427c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	8ad9      	ldrh	r1, [r3, #22]
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681a      	ldr	r2, [r3, #0]
 8014286:	89fb      	ldrh	r3, [r7, #14]
 8014288:	1c58      	adds	r0, r3, #1
 801428a:	81f8      	strh	r0, [r7, #14]
 801428c:	4413      	add	r3, r2
 801428e:	b2ca      	uxtb	r2, r1
 8014290:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	8adb      	ldrh	r3, [r3, #22]
 8014296:	0a1b      	lsrs	r3, r3, #8
 8014298:	b299      	uxth	r1, r3
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	681a      	ldr	r2, [r3, #0]
 801429e:	89fb      	ldrh	r3, [r7, #14]
 80142a0:	1c58      	adds	r0, r3, #1
 80142a2:	81f8      	strh	r0, [r7, #14]
 80142a4:	4413      	add	r3, r2
 80142a6:	b2ca      	uxtb	r2, r1
 80142a8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6999      	ldr	r1, [r3, #24]
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	681a      	ldr	r2, [r3, #0]
 80142b2:	89fb      	ldrh	r3, [r7, #14]
 80142b4:	1c58      	adds	r0, r3, #1
 80142b6:	81f8      	strh	r0, [r7, #14]
 80142b8:	4413      	add	r3, r2
 80142ba:	b2ca      	uxtb	r2, r1
 80142bc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	699b      	ldr	r3, [r3, #24]
 80142c2:	0a19      	lsrs	r1, r3, #8
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681a      	ldr	r2, [r3, #0]
 80142c8:	89fb      	ldrh	r3, [r7, #14]
 80142ca:	1c58      	adds	r0, r3, #1
 80142cc:	81f8      	strh	r0, [r7, #14]
 80142ce:	4413      	add	r3, r2
 80142d0:	b2ca      	uxtb	r2, r1
 80142d2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	699b      	ldr	r3, [r3, #24]
 80142d8:	0c19      	lsrs	r1, r3, #16
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681a      	ldr	r2, [r3, #0]
 80142de:	89fb      	ldrh	r3, [r7, #14]
 80142e0:	1c58      	adds	r0, r3, #1
 80142e2:	81f8      	strh	r0, [r7, #14]
 80142e4:	4413      	add	r3, r2
 80142e6:	b2ca      	uxtb	r2, r1
 80142e8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	699b      	ldr	r3, [r3, #24]
 80142ee:	0e19      	lsrs	r1, r3, #24
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	681a      	ldr	r2, [r3, #0]
 80142f4:	89fb      	ldrh	r3, [r7, #14]
 80142f6:	1c58      	adds	r0, r3, #1
 80142f8:	81f8      	strh	r0, [r7, #14]
 80142fa:	4413      	add	r3, r2
 80142fc:	b2ca      	uxtb	r2, r1
 80142fe:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014300:	89fb      	ldrh	r3, [r7, #14]
 8014302:	b2da      	uxtb	r2, r3
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014308:	2300      	movs	r3, #0
}
 801430a:	4618      	mov	r0, r3
 801430c:	3710      	adds	r7, #16
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}

08014312 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8014312:	b580      	push	{r7, lr}
 8014314:	b084      	sub	sp, #16
 8014316:	af00      	add	r7, sp, #0
 8014318:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d003      	beq.n	8014328 <LoRaMacSerializerData+0x16>
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d101      	bne.n	801432c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014328:	2301      	movs	r3, #1
 801432a:	e0e5      	b.n	80144f8 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 801432c:	2300      	movs	r3, #0
 801432e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8014330:	2308      	movs	r3, #8
 8014332:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	7b1b      	ldrb	r3, [r3, #12]
 8014338:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801433c:	b2db      	uxtb	r3, r3
 801433e:	b29a      	uxth	r2, r3
 8014340:	89bb      	ldrh	r3, [r7, #12]
 8014342:	4413      	add	r3, r2
 8014344:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801434c:	2b00      	cmp	r3, #0
 801434e:	d002      	beq.n	8014356 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8014350:	89bb      	ldrh	r3, [r7, #12]
 8014352:	3301      	adds	r3, #1
 8014354:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801435c:	b29a      	uxth	r2, r3
 801435e:	89bb      	ldrh	r3, [r7, #12]
 8014360:	4413      	add	r3, r2
 8014362:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8014364:	89bb      	ldrh	r3, [r7, #12]
 8014366:	3304      	adds	r3, #4
 8014368:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	791b      	ldrb	r3, [r3, #4]
 801436e:	b29b      	uxth	r3, r3
 8014370:	89ba      	ldrh	r2, [r7, #12]
 8014372:	429a      	cmp	r2, r3
 8014374:	d901      	bls.n	801437a <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014376:	2302      	movs	r3, #2
 8014378:	e0be      	b.n	80144f8 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	681a      	ldr	r2, [r3, #0]
 801437e:	89fb      	ldrh	r3, [r7, #14]
 8014380:	1c59      	adds	r1, r3, #1
 8014382:	81f9      	strh	r1, [r7, #14]
 8014384:	4413      	add	r3, r2
 8014386:	687a      	ldr	r2, [r7, #4]
 8014388:	7952      	ldrb	r2, [r2, #5]
 801438a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	6899      	ldr	r1, [r3, #8]
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681a      	ldr	r2, [r3, #0]
 8014394:	89fb      	ldrh	r3, [r7, #14]
 8014396:	1c58      	adds	r0, r3, #1
 8014398:	81f8      	strh	r0, [r7, #14]
 801439a:	4413      	add	r3, r2
 801439c:	b2ca      	uxtb	r2, r1
 801439e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	689b      	ldr	r3, [r3, #8]
 80143a4:	0a19      	lsrs	r1, r3, #8
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	681a      	ldr	r2, [r3, #0]
 80143aa:	89fb      	ldrh	r3, [r7, #14]
 80143ac:	1c58      	adds	r0, r3, #1
 80143ae:	81f8      	strh	r0, [r7, #14]
 80143b0:	4413      	add	r3, r2
 80143b2:	b2ca      	uxtb	r2, r1
 80143b4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	689b      	ldr	r3, [r3, #8]
 80143ba:	0c19      	lsrs	r1, r3, #16
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681a      	ldr	r2, [r3, #0]
 80143c0:	89fb      	ldrh	r3, [r7, #14]
 80143c2:	1c58      	adds	r0, r3, #1
 80143c4:	81f8      	strh	r0, [r7, #14]
 80143c6:	4413      	add	r3, r2
 80143c8:	b2ca      	uxtb	r2, r1
 80143ca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	689b      	ldr	r3, [r3, #8]
 80143d0:	0e19      	lsrs	r1, r3, #24
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	681a      	ldr	r2, [r3, #0]
 80143d6:	89fb      	ldrh	r3, [r7, #14]
 80143d8:	1c58      	adds	r0, r3, #1
 80143da:	81f8      	strh	r0, [r7, #14]
 80143dc:	4413      	add	r3, r2
 80143de:	b2ca      	uxtb	r2, r1
 80143e0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681a      	ldr	r2, [r3, #0]
 80143e6:	89fb      	ldrh	r3, [r7, #14]
 80143e8:	1c59      	adds	r1, r3, #1
 80143ea:	81f9      	strh	r1, [r7, #14]
 80143ec:	4413      	add	r3, r2
 80143ee:	687a      	ldr	r2, [r7, #4]
 80143f0:	7b12      	ldrb	r2, [r2, #12]
 80143f2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	89d9      	ldrh	r1, [r3, #14]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681a      	ldr	r2, [r3, #0]
 80143fc:	89fb      	ldrh	r3, [r7, #14]
 80143fe:	1c58      	adds	r0, r3, #1
 8014400:	81f8      	strh	r0, [r7, #14]
 8014402:	4413      	add	r3, r2
 8014404:	b2ca      	uxtb	r2, r1
 8014406:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	89db      	ldrh	r3, [r3, #14]
 801440c:	0a1b      	lsrs	r3, r3, #8
 801440e:	b299      	uxth	r1, r3
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	681a      	ldr	r2, [r3, #0]
 8014414:	89fb      	ldrh	r3, [r7, #14]
 8014416:	1c58      	adds	r0, r3, #1
 8014418:	81f8      	strh	r0, [r7, #14]
 801441a:	4413      	add	r3, r2
 801441c:	b2ca      	uxtb	r2, r1
 801441e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681a      	ldr	r2, [r3, #0]
 8014424:	89fb      	ldrh	r3, [r7, #14]
 8014426:	18d0      	adds	r0, r2, r3
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f103 0110 	add.w	r1, r3, #16
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	7b1b      	ldrb	r3, [r3, #12]
 8014432:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014436:	b2db      	uxtb	r3, r3
 8014438:	b29b      	uxth	r3, r3
 801443a:	461a      	mov	r2, r3
 801443c:	f003 fe6f 	bl	801811e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	7b1b      	ldrb	r3, [r3, #12]
 8014444:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014448:	b2db      	uxtb	r3, r3
 801444a:	b29a      	uxth	r2, r3
 801444c:	89fb      	ldrh	r3, [r7, #14]
 801444e:	4413      	add	r3, r2
 8014450:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014458:	2b00      	cmp	r3, #0
 801445a:	d009      	beq.n	8014470 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681a      	ldr	r2, [r3, #0]
 8014460:	89fb      	ldrh	r3, [r7, #14]
 8014462:	1c59      	adds	r1, r3, #1
 8014464:	81f9      	strh	r1, [r7, #14]
 8014466:	4413      	add	r3, r2
 8014468:	687a      	ldr	r2, [r7, #4]
 801446a:	f892 2020 	ldrb.w	r2, [r2, #32]
 801446e:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681a      	ldr	r2, [r3, #0]
 8014474:	89fb      	ldrh	r3, [r7, #14]
 8014476:	18d0      	adds	r0, r2, r3
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014482:	b29b      	uxth	r3, r3
 8014484:	461a      	mov	r2, r3
 8014486:	f003 fe4a 	bl	801811e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014490:	b29a      	uxth	r2, r3
 8014492:	89fb      	ldrh	r3, [r7, #14]
 8014494:	4413      	add	r3, r2
 8014496:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	681a      	ldr	r2, [r3, #0]
 80144a0:	89fb      	ldrh	r3, [r7, #14]
 80144a2:	1c58      	adds	r0, r3, #1
 80144a4:	81f8      	strh	r0, [r7, #14]
 80144a6:	4413      	add	r3, r2
 80144a8:	b2ca      	uxtb	r2, r1
 80144aa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144b0:	0a19      	lsrs	r1, r3, #8
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	681a      	ldr	r2, [r3, #0]
 80144b6:	89fb      	ldrh	r3, [r7, #14]
 80144b8:	1c58      	adds	r0, r3, #1
 80144ba:	81f8      	strh	r0, [r7, #14]
 80144bc:	4413      	add	r3, r2
 80144be:	b2ca      	uxtb	r2, r1
 80144c0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144c6:	0c19      	lsrs	r1, r3, #16
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681a      	ldr	r2, [r3, #0]
 80144cc:	89fb      	ldrh	r3, [r7, #14]
 80144ce:	1c58      	adds	r0, r3, #1
 80144d0:	81f8      	strh	r0, [r7, #14]
 80144d2:	4413      	add	r3, r2
 80144d4:	b2ca      	uxtb	r2, r1
 80144d6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144dc:	0e19      	lsrs	r1, r3, #24
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	681a      	ldr	r2, [r3, #0]
 80144e2:	89fb      	ldrh	r3, [r7, #14]
 80144e4:	1c58      	adds	r0, r3, #1
 80144e6:	81f8      	strh	r0, [r7, #14]
 80144e8:	4413      	add	r3, r2
 80144ea:	b2ca      	uxtb	r2, r1
 80144ec:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80144ee:	89fb      	ldrh	r3, [r7, #14]
 80144f0:	b2da      	uxtb	r2, r3
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80144f6:	2300      	movs	r3, #0
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3710      	adds	r7, #16
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}

08014500 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8014500:	b480      	push	{r7}
 8014502:	b083      	sub	sp, #12
 8014504:	af00      	add	r7, sp, #0
 8014506:	4603      	mov	r3, r0
 8014508:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801450a:	79fb      	ldrb	r3, [r7, #7]
 801450c:	2b05      	cmp	r3, #5
 801450e:	d002      	beq.n	8014516 <RegionIsActive+0x16>
 8014510:	2b08      	cmp	r3, #8
 8014512:	d002      	beq.n	801451a <RegionIsActive+0x1a>
 8014514:	e003      	b.n	801451e <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8014516:	2301      	movs	r3, #1
 8014518:	e002      	b.n	8014520 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 801451a:	2301      	movs	r3, #1
 801451c:	e000      	b.n	8014520 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801451e:	2300      	movs	r3, #0
        }
    }
}
 8014520:	4618      	mov	r0, r3
 8014522:	370c      	adds	r7, #12
 8014524:	46bd      	mov	sp, r7
 8014526:	bc80      	pop	{r7}
 8014528:	4770      	bx	lr

0801452a <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 801452a:	b580      	push	{r7, lr}
 801452c:	b084      	sub	sp, #16
 801452e:	af00      	add	r7, sp, #0
 8014530:	4603      	mov	r3, r0
 8014532:	6039      	str	r1, [r7, #0]
 8014534:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8014536:	2300      	movs	r3, #0
 8014538:	60bb      	str	r3, [r7, #8]
    switch( region )
 801453a:	79fb      	ldrb	r3, [r7, #7]
 801453c:	2b05      	cmp	r3, #5
 801453e:	d002      	beq.n	8014546 <RegionGetPhyParam+0x1c>
 8014540:	2b08      	cmp	r3, #8
 8014542:	d006      	beq.n	8014552 <RegionGetPhyParam+0x28>
 8014544:	e00b      	b.n	801455e <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8014546:	6838      	ldr	r0, [r7, #0]
 8014548:	f001 fad0 	bl	8015aec <RegionEU868GetPhyParam>
 801454c:	4603      	mov	r3, r0
 801454e:	60fb      	str	r3, [r7, #12]
 8014550:	e007      	b.n	8014562 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8014552:	6838      	ldr	r0, [r7, #0]
 8014554:	f002 fc4a 	bl	8016dec <RegionUS915GetPhyParam>
 8014558:	4603      	mov	r3, r0
 801455a:	60fb      	str	r3, [r7, #12]
 801455c:	e001      	b.n	8014562 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801455e:	68bb      	ldr	r3, [r7, #8]
 8014560:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	4618      	mov	r0, r3
 8014566:	3710      	adds	r7, #16
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}

0801456c <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b082      	sub	sp, #8
 8014570:	af00      	add	r7, sp, #0
 8014572:	4603      	mov	r3, r0
 8014574:	6039      	str	r1, [r7, #0]
 8014576:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014578:	79fb      	ldrb	r3, [r7, #7]
 801457a:	2b05      	cmp	r3, #5
 801457c:	d002      	beq.n	8014584 <RegionSetBandTxDone+0x18>
 801457e:	2b08      	cmp	r3, #8
 8014580:	d004      	beq.n	801458c <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014582:	e006      	b.n	8014592 <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 8014584:	6838      	ldr	r0, [r7, #0]
 8014586:	f001 fbf7 	bl	8015d78 <RegionEU868SetBandTxDone>
 801458a:	e002      	b.n	8014592 <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 801458c:	6838      	ldr	r0, [r7, #0]
 801458e:	f002 fd89 	bl	80170a4 <RegionUS915SetBandTxDone>
        }
    }
}
 8014592:	3708      	adds	r7, #8
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}

08014598 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b082      	sub	sp, #8
 801459c:	af00      	add	r7, sp, #0
 801459e:	4603      	mov	r3, r0
 80145a0:	6039      	str	r1, [r7, #0]
 80145a2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80145a4:	79fb      	ldrb	r3, [r7, #7]
 80145a6:	2b05      	cmp	r3, #5
 80145a8:	d002      	beq.n	80145b0 <RegionInitDefaults+0x18>
 80145aa:	2b08      	cmp	r3, #8
 80145ac:	d004      	beq.n	80145b8 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80145ae:	e006      	b.n	80145be <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 80145b0:	6838      	ldr	r0, [r7, #0]
 80145b2:	f001 fc0d 	bl	8015dd0 <RegionEU868InitDefaults>
 80145b6:	e002      	b.n	80145be <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 80145b8:	6838      	ldr	r0, [r7, #0]
 80145ba:	f002 fd9f 	bl	80170fc <RegionUS915InitDefaults>
        }
    }
}
 80145be:	bf00      	nop
 80145c0:	3708      	adds	r7, #8
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}

080145c6 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80145c6:	b580      	push	{r7, lr}
 80145c8:	b082      	sub	sp, #8
 80145ca:	af00      	add	r7, sp, #0
 80145cc:	4603      	mov	r3, r0
 80145ce:	6039      	str	r1, [r7, #0]
 80145d0:	71fb      	strb	r3, [r7, #7]
 80145d2:	4613      	mov	r3, r2
 80145d4:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80145d6:	79fb      	ldrb	r3, [r7, #7]
 80145d8:	2b05      	cmp	r3, #5
 80145da:	d002      	beq.n	80145e2 <RegionVerify+0x1c>
 80145dc:	2b08      	cmp	r3, #8
 80145de:	d007      	beq.n	80145f0 <RegionVerify+0x2a>
 80145e0:	e00d      	b.n	80145fe <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80145e2:	79bb      	ldrb	r3, [r7, #6]
 80145e4:	4619      	mov	r1, r3
 80145e6:	6838      	ldr	r0, [r7, #0]
 80145e8:	f001 fc90 	bl	8015f0c <RegionEU868Verify>
 80145ec:	4603      	mov	r3, r0
 80145ee:	e007      	b.n	8014600 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 80145f0:	79bb      	ldrb	r3, [r7, #6]
 80145f2:	4619      	mov	r1, r3
 80145f4:	6838      	ldr	r0, [r7, #0]
 80145f6:	f002 feb3 	bl	8017360 <RegionUS915Verify>
 80145fa:	4603      	mov	r3, r0
 80145fc:	e000      	b.n	8014600 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 80145fe:	2300      	movs	r3, #0
        }
    }
}
 8014600:	4618      	mov	r0, r3
 8014602:	3708      	adds	r7, #8
 8014604:	46bd      	mov	sp, r7
 8014606:	bd80      	pop	{r7, pc}

08014608 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
 801460e:	4603      	mov	r3, r0
 8014610:	6039      	str	r1, [r7, #0]
 8014612:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014614:	79fb      	ldrb	r3, [r7, #7]
 8014616:	2b05      	cmp	r3, #5
 8014618:	d002      	beq.n	8014620 <RegionApplyCFList+0x18>
 801461a:	2b08      	cmp	r3, #8
 801461c:	d004      	beq.n	8014628 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801461e:	e006      	b.n	801462e <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 8014620:	6838      	ldr	r0, [r7, #0]
 8014622:	f001 fcef 	bl	8016004 <RegionEU868ApplyCFList>
 8014626:	e002      	b.n	801462e <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 8014628:	6838      	ldr	r0, [r7, #0]
 801462a:	f002 ff0f 	bl	801744c <RegionUS915ApplyCFList>
        }
    }
}
 801462e:	bf00      	nop
 8014630:	3708      	adds	r7, #8
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}

08014636 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8014636:	b580      	push	{r7, lr}
 8014638:	b082      	sub	sp, #8
 801463a:	af00      	add	r7, sp, #0
 801463c:	4603      	mov	r3, r0
 801463e:	6039      	str	r1, [r7, #0]
 8014640:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014642:	79fb      	ldrb	r3, [r7, #7]
 8014644:	2b05      	cmp	r3, #5
 8014646:	d002      	beq.n	801464e <RegionChanMaskSet+0x18>
 8014648:	2b08      	cmp	r3, #8
 801464a:	d005      	beq.n	8014658 <RegionChanMaskSet+0x22>
 801464c:	e009      	b.n	8014662 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801464e:	6838      	ldr	r0, [r7, #0]
 8014650:	f001 fd4c 	bl	80160ec <RegionEU868ChanMaskSet>
 8014654:	4603      	mov	r3, r0
 8014656:	e005      	b.n	8014664 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8014658:	6838      	ldr	r0, [r7, #0]
 801465a:	f002 ff6b 	bl	8017534 <RegionUS915ChanMaskSet>
 801465e:	4603      	mov	r3, r0
 8014660:	e000      	b.n	8014664 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8014662:	2300      	movs	r3, #0
        }
    }
}
 8014664:	4618      	mov	r0, r3
 8014666:	3708      	adds	r7, #8
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}

0801466c <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b082      	sub	sp, #8
 8014670:	af00      	add	r7, sp, #0
 8014672:	603b      	str	r3, [r7, #0]
 8014674:	4603      	mov	r3, r0
 8014676:	71fb      	strb	r3, [r7, #7]
 8014678:	460b      	mov	r3, r1
 801467a:	71bb      	strb	r3, [r7, #6]
 801467c:	4613      	mov	r3, r2
 801467e:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014680:	79fb      	ldrb	r3, [r7, #7]
 8014682:	2b05      	cmp	r3, #5
 8014684:	d002      	beq.n	801468c <RegionComputeRxWindowParameters+0x20>
 8014686:	2b08      	cmp	r3, #8
 8014688:	d008      	beq.n	801469c <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801468a:	e00e      	b.n	80146aa <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801468c:	7979      	ldrb	r1, [r7, #5]
 801468e:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014692:	693b      	ldr	r3, [r7, #16]
 8014694:	683a      	ldr	r2, [r7, #0]
 8014696:	f001 fd53 	bl	8016140 <RegionEU868ComputeRxWindowParameters>
 801469a:	e006      	b.n	80146aa <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 801469c:	7979      	ldrb	r1, [r7, #5]
 801469e:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80146a2:	693b      	ldr	r3, [r7, #16]
 80146a4:	683a      	ldr	r2, [r7, #0]
 80146a6:	f002 ffad 	bl	8017604 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 80146aa:	bf00      	nop
 80146ac:	3708      	adds	r7, #8
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}

080146b2 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80146b2:	b580      	push	{r7, lr}
 80146b4:	b084      	sub	sp, #16
 80146b6:	af00      	add	r7, sp, #0
 80146b8:	4603      	mov	r3, r0
 80146ba:	60b9      	str	r1, [r7, #8]
 80146bc:	607a      	str	r2, [r7, #4]
 80146be:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80146c0:	7bfb      	ldrb	r3, [r7, #15]
 80146c2:	2b05      	cmp	r3, #5
 80146c4:	d002      	beq.n	80146cc <RegionRxConfig+0x1a>
 80146c6:	2b08      	cmp	r3, #8
 80146c8:	d006      	beq.n	80146d8 <RegionRxConfig+0x26>
 80146ca:	e00b      	b.n	80146e4 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80146cc:	6879      	ldr	r1, [r7, #4]
 80146ce:	68b8      	ldr	r0, [r7, #8]
 80146d0:	f001 fd90 	bl	80161f4 <RegionEU868RxConfig>
 80146d4:	4603      	mov	r3, r0
 80146d6:	e006      	b.n	80146e6 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 80146d8:	6879      	ldr	r1, [r7, #4]
 80146da:	68b8      	ldr	r0, [r7, #8]
 80146dc:	f002 ffdc 	bl	8017698 <RegionUS915RxConfig>
 80146e0:	4603      	mov	r3, r0
 80146e2:	e000      	b.n	80146e6 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80146e4:	2300      	movs	r3, #0
        }
    }
}
 80146e6:	4618      	mov	r0, r3
 80146e8:	3710      	adds	r7, #16
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}

080146ee <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80146ee:	b580      	push	{r7, lr}
 80146f0:	b084      	sub	sp, #16
 80146f2:	af00      	add	r7, sp, #0
 80146f4:	60b9      	str	r1, [r7, #8]
 80146f6:	607a      	str	r2, [r7, #4]
 80146f8:	603b      	str	r3, [r7, #0]
 80146fa:	4603      	mov	r3, r0
 80146fc:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80146fe:	7bfb      	ldrb	r3, [r7, #15]
 8014700:	2b05      	cmp	r3, #5
 8014702:	d002      	beq.n	801470a <RegionTxConfig+0x1c>
 8014704:	2b08      	cmp	r3, #8
 8014706:	d007      	beq.n	8014718 <RegionTxConfig+0x2a>
 8014708:	e00d      	b.n	8014726 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801470a:	683a      	ldr	r2, [r7, #0]
 801470c:	6879      	ldr	r1, [r7, #4]
 801470e:	68b8      	ldr	r0, [r7, #8]
 8014710:	f001 fe40 	bl	8016394 <RegionEU868TxConfig>
 8014714:	4603      	mov	r3, r0
 8014716:	e007      	b.n	8014728 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8014718:	683a      	ldr	r2, [r7, #0]
 801471a:	6879      	ldr	r1, [r7, #4]
 801471c:	68b8      	ldr	r0, [r7, #8]
 801471e:	f003 f83f 	bl	80177a0 <RegionUS915TxConfig>
 8014722:	4603      	mov	r3, r0
 8014724:	e000      	b.n	8014728 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014726:	2300      	movs	r3, #0
        }
    }
}
 8014728:	4618      	mov	r0, r3
 801472a:	3710      	adds	r7, #16
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}

08014730 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b086      	sub	sp, #24
 8014734:	af02      	add	r7, sp, #8
 8014736:	60b9      	str	r1, [r7, #8]
 8014738:	607a      	str	r2, [r7, #4]
 801473a:	603b      	str	r3, [r7, #0]
 801473c:	4603      	mov	r3, r0
 801473e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014740:	7bfb      	ldrb	r3, [r7, #15]
 8014742:	2b05      	cmp	r3, #5
 8014744:	d002      	beq.n	801474c <RegionLinkAdrReq+0x1c>
 8014746:	2b08      	cmp	r3, #8
 8014748:	d00a      	beq.n	8014760 <RegionLinkAdrReq+0x30>
 801474a:	e013      	b.n	8014774 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801474c:	69fb      	ldr	r3, [r7, #28]
 801474e:	9300      	str	r3, [sp, #0]
 8014750:	69bb      	ldr	r3, [r7, #24]
 8014752:	683a      	ldr	r2, [r7, #0]
 8014754:	6879      	ldr	r1, [r7, #4]
 8014756:	68b8      	ldr	r0, [r7, #8]
 8014758:	f001 feec 	bl	8016534 <RegionEU868LinkAdrReq>
 801475c:	4603      	mov	r3, r0
 801475e:	e00a      	b.n	8014776 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	9300      	str	r3, [sp, #0]
 8014764:	69bb      	ldr	r3, [r7, #24]
 8014766:	683a      	ldr	r2, [r7, #0]
 8014768:	6879      	ldr	r1, [r7, #4]
 801476a:	68b8      	ldr	r0, [r7, #8]
 801476c:	f003 f8c2 	bl	80178f4 <RegionUS915LinkAdrReq>
 8014770:	4603      	mov	r3, r0
 8014772:	e000      	b.n	8014776 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8014774:	2300      	movs	r3, #0
        }
    }
}
 8014776:	4618      	mov	r0, r3
 8014778:	3710      	adds	r7, #16
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}

0801477e <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801477e:	b580      	push	{r7, lr}
 8014780:	b082      	sub	sp, #8
 8014782:	af00      	add	r7, sp, #0
 8014784:	4603      	mov	r3, r0
 8014786:	6039      	str	r1, [r7, #0]
 8014788:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801478a:	79fb      	ldrb	r3, [r7, #7]
 801478c:	2b05      	cmp	r3, #5
 801478e:	d002      	beq.n	8014796 <RegionRxParamSetupReq+0x18>
 8014790:	2b08      	cmp	r3, #8
 8014792:	d005      	beq.n	80147a0 <RegionRxParamSetupReq+0x22>
 8014794:	e009      	b.n	80147aa <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8014796:	6838      	ldr	r0, [r7, #0]
 8014798:	f001 ffee 	bl	8016778 <RegionEU868RxParamSetupReq>
 801479c:	4603      	mov	r3, r0
 801479e:	e005      	b.n	80147ac <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 80147a0:	6838      	ldr	r0, [r7, #0]
 80147a2:	f003 fac1 	bl	8017d28 <RegionUS915RxParamSetupReq>
 80147a6:	4603      	mov	r3, r0
 80147a8:	e000      	b.n	80147ac <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80147aa:	2300      	movs	r3, #0
        }
    }
}
 80147ac:	4618      	mov	r0, r3
 80147ae:	3708      	adds	r7, #8
 80147b0:	46bd      	mov	sp, r7
 80147b2:	bd80      	pop	{r7, pc}

080147b4 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b082      	sub	sp, #8
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	4603      	mov	r3, r0
 80147bc:	6039      	str	r1, [r7, #0]
 80147be:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80147c0:	79fb      	ldrb	r3, [r7, #7]
 80147c2:	2b05      	cmp	r3, #5
 80147c4:	d002      	beq.n	80147cc <RegionNewChannelReq+0x18>
 80147c6:	2b08      	cmp	r3, #8
 80147c8:	d005      	beq.n	80147d6 <RegionNewChannelReq+0x22>
 80147ca:	e009      	b.n	80147e0 <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80147cc:	6838      	ldr	r0, [r7, #0]
 80147ce:	f002 f811 	bl	80167f4 <RegionEU868NewChannelReq>
 80147d2:	4603      	mov	r3, r0
 80147d4:	e005      	b.n	80147e2 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 80147d6:	6838      	ldr	r0, [r7, #0]
 80147d8:	f003 faf2 	bl	8017dc0 <RegionUS915NewChannelReq>
 80147dc:	4603      	mov	r3, r0
 80147de:	e000      	b.n	80147e2 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80147e0:	2300      	movs	r3, #0
        }
    }
}
 80147e2:	4618      	mov	r0, r3
 80147e4:	3708      	adds	r7, #8
 80147e6:	46bd      	mov	sp, r7
 80147e8:	bd80      	pop	{r7, pc}

080147ea <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80147ea:	b580      	push	{r7, lr}
 80147ec:	b082      	sub	sp, #8
 80147ee:	af00      	add	r7, sp, #0
 80147f0:	4603      	mov	r3, r0
 80147f2:	6039      	str	r1, [r7, #0]
 80147f4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80147f6:	79fb      	ldrb	r3, [r7, #7]
 80147f8:	2b05      	cmp	r3, #5
 80147fa:	d002      	beq.n	8014802 <RegionTxParamSetupReq+0x18>
 80147fc:	2b08      	cmp	r3, #8
 80147fe:	d005      	beq.n	801480c <RegionTxParamSetupReq+0x22>
 8014800:	e009      	b.n	8014816 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8014802:	6838      	ldr	r0, [r7, #0]
 8014804:	f002 f854 	bl	80168b0 <RegionEU868TxParamSetupReq>
 8014808:	4603      	mov	r3, r0
 801480a:	e005      	b.n	8014818 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 801480c:	6838      	ldr	r0, [r7, #0]
 801480e:	f003 fae2 	bl	8017dd6 <RegionUS915TxParamSetupReq>
 8014812:	4603      	mov	r3, r0
 8014814:	e000      	b.n	8014818 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014816:	2300      	movs	r3, #0
        }
    }
}
 8014818:	4618      	mov	r0, r3
 801481a:	3708      	adds	r7, #8
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}

08014820 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b082      	sub	sp, #8
 8014824:	af00      	add	r7, sp, #0
 8014826:	4603      	mov	r3, r0
 8014828:	6039      	str	r1, [r7, #0]
 801482a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801482c:	79fb      	ldrb	r3, [r7, #7]
 801482e:	2b05      	cmp	r3, #5
 8014830:	d002      	beq.n	8014838 <RegionDlChannelReq+0x18>
 8014832:	2b08      	cmp	r3, #8
 8014834:	d005      	beq.n	8014842 <RegionDlChannelReq+0x22>
 8014836:	e009      	b.n	801484c <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8014838:	6838      	ldr	r0, [r7, #0]
 801483a:	f002 f845 	bl	80168c8 <RegionEU868DlChannelReq>
 801483e:	4603      	mov	r3, r0
 8014840:	e005      	b.n	801484e <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8014842:	6838      	ldr	r0, [r7, #0]
 8014844:	f003 fad2 	bl	8017dec <RegionUS915DlChannelReq>
 8014848:	4603      	mov	r3, r0
 801484a:	e000      	b.n	801484e <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801484c:	2300      	movs	r3, #0
        }
    }
}
 801484e:	4618      	mov	r0, r3
 8014850:	3708      	adds	r7, #8
 8014852:	46bd      	mov	sp, r7
 8014854:	bd80      	pop	{r7, pc}

08014856 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014856:	b580      	push	{r7, lr}
 8014858:	b082      	sub	sp, #8
 801485a:	af00      	add	r7, sp, #0
 801485c:	4603      	mov	r3, r0
 801485e:	71fb      	strb	r3, [r7, #7]
 8014860:	460b      	mov	r3, r1
 8014862:	71bb      	strb	r3, [r7, #6]
 8014864:	4613      	mov	r3, r2
 8014866:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014868:	79fb      	ldrb	r3, [r7, #7]
 801486a:	2b05      	cmp	r3, #5
 801486c:	d002      	beq.n	8014874 <RegionAlternateDr+0x1e>
 801486e:	2b08      	cmp	r3, #8
 8014870:	d009      	beq.n	8014886 <RegionAlternateDr+0x30>
 8014872:	e011      	b.n	8014898 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8014874:	797a      	ldrb	r2, [r7, #5]
 8014876:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801487a:	4611      	mov	r1, r2
 801487c:	4618      	mov	r0, r3
 801487e:	f002 f867 	bl	8016950 <RegionEU868AlternateDr>
 8014882:	4603      	mov	r3, r0
 8014884:	e009      	b.n	801489a <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8014886:	797a      	ldrb	r2, [r7, #5]
 8014888:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801488c:	4611      	mov	r1, r2
 801488e:	4618      	mov	r0, r3
 8014890:	f003 fab8 	bl	8017e04 <RegionUS915AlternateDr>
 8014894:	4603      	mov	r3, r0
 8014896:	e000      	b.n	801489a <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014898:	2300      	movs	r3, #0
        }
    }
}
 801489a:	4618      	mov	r0, r3
 801489c:	3708      	adds	r7, #8
 801489e:	46bd      	mov	sp, r7
 80148a0:	bd80      	pop	{r7, pc}

080148a2 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80148a2:	b580      	push	{r7, lr}
 80148a4:	b084      	sub	sp, #16
 80148a6:	af00      	add	r7, sp, #0
 80148a8:	60b9      	str	r1, [r7, #8]
 80148aa:	607a      	str	r2, [r7, #4]
 80148ac:	603b      	str	r3, [r7, #0]
 80148ae:	4603      	mov	r3, r0
 80148b0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80148b2:	7bfb      	ldrb	r3, [r7, #15]
 80148b4:	2b05      	cmp	r3, #5
 80148b6:	d002      	beq.n	80148be <RegionNextChannel+0x1c>
 80148b8:	2b08      	cmp	r3, #8
 80148ba:	d008      	beq.n	80148ce <RegionNextChannel+0x2c>
 80148bc:	e00f      	b.n	80148de <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80148be:	69bb      	ldr	r3, [r7, #24]
 80148c0:	683a      	ldr	r2, [r7, #0]
 80148c2:	6879      	ldr	r1, [r7, #4]
 80148c4:	68b8      	ldr	r0, [r7, #8]
 80148c6:	f002 f853 	bl	8016970 <RegionEU868NextChannel>
 80148ca:	4603      	mov	r3, r0
 80148cc:	e008      	b.n	80148e0 <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 80148ce:	69bb      	ldr	r3, [r7, #24]
 80148d0:	683a      	ldr	r2, [r7, #0]
 80148d2:	6879      	ldr	r1, [r7, #4]
 80148d4:	68b8      	ldr	r0, [r7, #8]
 80148d6:	f003 facb 	bl	8017e70 <RegionUS915NextChannel>
 80148da:	4603      	mov	r3, r0
 80148dc:	e000      	b.n	80148e0 <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80148de:	2309      	movs	r3, #9
        }
    }
}
 80148e0:	4618      	mov	r0, r3
 80148e2:	3710      	adds	r7, #16
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}

080148e8 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80148e8:	b590      	push	{r4, r7, lr}
 80148ea:	b083      	sub	sp, #12
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	4604      	mov	r4, r0
 80148f0:	4608      	mov	r0, r1
 80148f2:	4611      	mov	r1, r2
 80148f4:	461a      	mov	r2, r3
 80148f6:	4623      	mov	r3, r4
 80148f8:	71fb      	strb	r3, [r7, #7]
 80148fa:	4603      	mov	r3, r0
 80148fc:	71bb      	strb	r3, [r7, #6]
 80148fe:	460b      	mov	r3, r1
 8014900:	717b      	strb	r3, [r7, #5]
 8014902:	4613      	mov	r3, r2
 8014904:	713b      	strb	r3, [r7, #4]
    switch( region )
 8014906:	79fb      	ldrb	r3, [r7, #7]
 8014908:	2b05      	cmp	r3, #5
 801490a:	d002      	beq.n	8014912 <RegionApplyDrOffset+0x2a>
 801490c:	2b08      	cmp	r3, #8
 801490e:	d00a      	beq.n	8014926 <RegionApplyDrOffset+0x3e>
 8014910:	e013      	b.n	801493a <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8014912:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014916:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801491a:	79bb      	ldrb	r3, [r7, #6]
 801491c:	4618      	mov	r0, r3
 801491e:	f002 f9a1 	bl	8016c64 <RegionEU868ApplyDrOffset>
 8014922:	4603      	mov	r3, r0
 8014924:	e00a      	b.n	801493c <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8014926:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801492a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801492e:	79bb      	ldrb	r3, [r7, #6]
 8014930:	4618      	mov	r0, r3
 8014932:	f003 fb8b 	bl	801804c <RegionUS915ApplyDrOffset>
 8014936:	4603      	mov	r3, r0
 8014938:	e000      	b.n	801493c <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801493a:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801493c:	4618      	mov	r0, r3
 801493e:	370c      	adds	r7, #12
 8014940:	46bd      	mov	sp, r7
 8014942:	bd90      	pop	{r4, r7, pc}

08014944 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014944:	b480      	push	{r7}
 8014946:	b083      	sub	sp, #12
 8014948:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801494a:	4b04      	ldr	r3, [pc, #16]	; (801495c <RegionGetVersion+0x18>)
 801494c:	607b      	str	r3, [r7, #4]

    return version;
 801494e:	687b      	ldr	r3, [r7, #4]
}
 8014950:	4618      	mov	r0, r3
 8014952:	370c      	adds	r7, #12
 8014954:	46bd      	mov	sp, r7
 8014956:	bc80      	pop	{r7}
 8014958:	4770      	bx	lr
 801495a:	bf00      	nop
 801495c:	02010001 	.word	0x02010001

08014960 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8014960:	b480      	push	{r7}
 8014962:	b087      	sub	sp, #28
 8014964:	af00      	add	r7, sp, #0
 8014966:	4603      	mov	r3, r0
 8014968:	60b9      	str	r1, [r7, #8]
 801496a:	607a      	str	r2, [r7, #4]
 801496c:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 801496e:	68bb      	ldr	r3, [r7, #8]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d002      	beq.n	801497a <FindAvailable125kHzChannels+0x1a>
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d101      	bne.n	801497e <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801497a:	2303      	movs	r3, #3
 801497c:	e021      	b.n	80149c2 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	2200      	movs	r2, #0
 8014982:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8014984:	2300      	movs	r3, #0
 8014986:	75fb      	strb	r3, [r7, #23]
 8014988:	e017      	b.n	80149ba <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 801498a:	89fa      	ldrh	r2, [r7, #14]
 801498c:	7dfb      	ldrb	r3, [r7, #23]
 801498e:	fa42 f303 	asr.w	r3, r2, r3
 8014992:	f003 0301 	and.w	r3, r3, #1
 8014996:	2b00      	cmp	r3, #0
 8014998:	d00c      	beq.n	80149b4 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	781b      	ldrb	r3, [r3, #0]
 801499e:	461a      	mov	r2, r3
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	4413      	add	r3, r2
 80149a4:	7dfa      	ldrb	r2, [r7, #23]
 80149a6:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	3301      	adds	r3, #1
 80149ae:	b2da      	uxtb	r2, r3
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80149b4:	7dfb      	ldrb	r3, [r7, #23]
 80149b6:	3301      	adds	r3, #1
 80149b8:	75fb      	strb	r3, [r7, #23]
 80149ba:	7dfb      	ldrb	r3, [r7, #23]
 80149bc:	2b07      	cmp	r3, #7
 80149be:	d9e4      	bls.n	801498a <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 80149c0:	2300      	movs	r3, #0
}
 80149c2:	4618      	mov	r0, r3
 80149c4:	371c      	adds	r7, #28
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bc80      	pop	{r7}
 80149ca:	4770      	bx	lr

080149cc <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 80149cc:	b590      	push	{r4, r7, lr}
 80149ce:	b089      	sub	sp, #36	; 0x24
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	60f8      	str	r0, [r7, #12]
 80149d4:	60b9      	str	r1, [r7, #8]
 80149d6:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 80149d8:	2300      	movs	r3, #0
 80149da:	617b      	str	r3, [r7, #20]
 80149dc:	2300      	movs	r3, #0
 80149de:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 80149e0:	2300      	movs	r3, #0
 80149e2:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d005      	beq.n	80149f6 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 80149ea:	68bb      	ldr	r3, [r7, #8]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d002      	beq.n	80149f6 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d101      	bne.n	80149fa <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80149f6:	2303      	movs	r3, #3
 80149f8:	e055      	b.n	8014aa6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 80149fa:	68bb      	ldr	r3, [r7, #8]
 80149fc:	781b      	ldrb	r3, [r3, #0]
 80149fe:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8014a00:	7f7b      	ldrb	r3, [r7, #29]
 8014a02:	085b      	lsrs	r3, r3, #1
 8014a04:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8014a06:	7f7b      	ldrb	r3, [r7, #29]
 8014a08:	f003 0301 	and.w	r3, r3, #1
 8014a0c:	b2db      	uxtb	r3, r3
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d107      	bne.n	8014a22 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8014a12:	7f3b      	ldrb	r3, [r7, #28]
 8014a14:	005b      	lsls	r3, r3, #1
 8014a16:	68fa      	ldr	r2, [r7, #12]
 8014a18:	4413      	add	r3, r2
 8014a1a:	881b      	ldrh	r3, [r3, #0]
 8014a1c:	b2db      	uxtb	r3, r3
 8014a1e:	83fb      	strh	r3, [r7, #30]
 8014a20:	e006      	b.n	8014a30 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8014a22:	7f3b      	ldrb	r3, [r7, #28]
 8014a24:	005b      	lsls	r3, r3, #1
 8014a26:	68fa      	ldr	r2, [r7, #12]
 8014a28:	4413      	add	r3, r2
 8014a2a:	881b      	ldrh	r3, [r3, #0]
 8014a2c:	0a1b      	lsrs	r3, r3, #8
 8014a2e:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8014a30:	f107 0213 	add.w	r2, r7, #19
 8014a34:	f107 0114 	add.w	r1, r7, #20
 8014a38:	8bfb      	ldrh	r3, [r7, #30]
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	f7ff ff90 	bl	8014960 <FindAvailable125kHzChannels>
 8014a40:	4603      	mov	r3, r0
 8014a42:	2b03      	cmp	r3, #3
 8014a44:	d101      	bne.n	8014a4a <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8014a46:	2303      	movs	r3, #3
 8014a48:	e02d      	b.n	8014aa6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 8014a4a:	7cfb      	ldrb	r3, [r7, #19]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d011      	beq.n	8014a74 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8014a50:	7f7b      	ldrb	r3, [r7, #29]
 8014a52:	00db      	lsls	r3, r3, #3
 8014a54:	b2dc      	uxtb	r4, r3
 8014a56:	7cfb      	ldrb	r3, [r7, #19]
 8014a58:	3b01      	subs	r3, #1
 8014a5a:	4619      	mov	r1, r3
 8014a5c:	2000      	movs	r0, #0
 8014a5e:	f003 fb47 	bl	80180f0 <randr>
 8014a62:	4603      	mov	r3, r0
 8014a64:	3320      	adds	r3, #32
 8014a66:	443b      	add	r3, r7
 8014a68:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8014a6c:	4423      	add	r3, r4
 8014a6e:	b2da      	uxtb	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8014a74:	7f7b      	ldrb	r3, [r7, #29]
 8014a76:	3301      	adds	r3, #1
 8014a78:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8014a7a:	7f7b      	ldrb	r3, [r7, #29]
 8014a7c:	2b07      	cmp	r3, #7
 8014a7e:	d901      	bls.n	8014a84 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8014a80:	2300      	movs	r3, #0
 8014a82:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8014a84:	7cfb      	ldrb	r3, [r7, #19]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d104      	bne.n	8014a94 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 8014a8a:	68bb      	ldr	r3, [r7, #8]
 8014a8c:	781b      	ldrb	r3, [r3, #0]
 8014a8e:	7f7a      	ldrb	r2, [r7, #29]
 8014a90:	429a      	cmp	r2, r3
 8014a92:	d1b5      	bne.n	8014a00 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8014a94:	7cfb      	ldrb	r3, [r7, #19]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d004      	beq.n	8014aa4 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	7f7a      	ldrb	r2, [r7, #29]
 8014a9e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	e000      	b.n	8014aa6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8014aa4:	2303      	movs	r3, #3
}
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	3724      	adds	r7, #36	; 0x24
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd90      	pop	{r4, r7, pc}

08014aae <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8014aae:	b480      	push	{r7}
 8014ab0:	b085      	sub	sp, #20
 8014ab2:	af00      	add	r7, sp, #0
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	60b9      	str	r1, [r7, #8]
 8014ab8:	607a      	str	r2, [r7, #4]
 8014aba:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8014abc:	7bfb      	ldrb	r3, [r7, #15]
 8014abe:	687a      	ldr	r2, [r7, #4]
 8014ac0:	fb03 f202 	mul.w	r2, r3, r2
 8014ac4:	68bb      	ldr	r3, [r7, #8]
 8014ac6:	4413      	add	r3, r2
}
 8014ac8:	4618      	mov	r0, r3
 8014aca:	3714      	adds	r7, #20
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bc80      	pop	{r7}
 8014ad0:	4770      	bx	lr

08014ad2 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014ad2:	b480      	push	{r7}
 8014ad4:	b087      	sub	sp, #28
 8014ad6:	af00      	add	r7, sp, #0
 8014ad8:	60f8      	str	r0, [r7, #12]
 8014ada:	4608      	mov	r0, r1
 8014adc:	4639      	mov	r1, r7
 8014ade:	e881 000c 	stmia.w	r1, {r2, r3}
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	881b      	ldrh	r3, [r3, #0]
 8014aea:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8014aec:	7afb      	ldrb	r3, [r7, #11]
 8014aee:	f083 0301 	eor.w	r3, r3, #1
 8014af2:	b2db      	uxtb	r3, r3
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d01b      	beq.n	8014b30 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014af8:	f242 7310 	movw	r3, #10000	; 0x2710
 8014afc:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8014afe:	683b      	ldr	r3, [r7, #0]
 8014b00:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8014b04:	d202      	bcs.n	8014b0c <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8014b06:	2364      	movs	r3, #100	; 0x64
 8014b08:	82bb      	strh	r3, [r7, #20]
 8014b0a:	e00b      	b.n	8014b24 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8014b12:	4293      	cmp	r3, r2
 8014b14:	d803      	bhi.n	8014b1e <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014b1a:	82bb      	strh	r3, [r7, #20]
 8014b1c:	e002      	b.n	8014b24 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014b1e:	f242 7310 	movw	r3, #10000	; 0x2710
 8014b22:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8014b24:	8aba      	ldrh	r2, [r7, #20]
 8014b26:	8afb      	ldrh	r3, [r7, #22]
 8014b28:	4293      	cmp	r3, r2
 8014b2a:	bf38      	it	cc
 8014b2c:	4613      	movcc	r3, r2
 8014b2e:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8014b30:	8afb      	ldrh	r3, [r7, #22]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d101      	bne.n	8014b3a <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8014b36:	2301      	movs	r3, #1
 8014b38:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8014b3a:	8afb      	ldrh	r3, [r7, #22]
}
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	371c      	adds	r7, #28
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bc80      	pop	{r7}
 8014b44:	4770      	bx	lr
	...

08014b48 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b08e      	sub	sp, #56	; 0x38
 8014b4c:	af02      	add	r7, sp, #8
 8014b4e:	60f8      	str	r0, [r7, #12]
 8014b50:	4608      	mov	r0, r1
 8014b52:	4639      	mov	r1, r7
 8014b54:	e881 000c 	stmia.w	r1, {r2, r3}
 8014b58:	4603      	mov	r3, r0
 8014b5a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	881b      	ldrh	r3, [r3, #0]
 8014b60:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014b62:	4b4b      	ldr	r3, [pc, #300]	; (8014c90 <SetMaxTimeCredits+0x148>)
 8014b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8014b66:	463b      	mov	r3, r7
 8014b68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014b6c:	f006 ff10 	bl	801b990 <SysTimeToMs>
 8014b70:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8014b72:	f107 0314 	add.w	r3, r7, #20
 8014b76:	2200      	movs	r2, #0
 8014b78:	601a      	str	r2, [r3, #0]
 8014b7a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8014b7c:	7af9      	ldrb	r1, [r7, #11]
 8014b7e:	463b      	mov	r3, r7
 8014b80:	cb0c      	ldmia	r3, {r2, r3}
 8014b82:	68f8      	ldr	r0, [r7, #12]
 8014b84:	f7ff ffa5 	bl	8014ad2 <GetDutyCycle>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8014b8c:	7afb      	ldrb	r3, [r7, #11]
 8014b8e:	f083 0301 	eor.w	r3, r3, #1
 8014b92:	b2db      	uxtb	r3, r3
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d062      	beq.n	8014c5e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014b98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014b9a:	2b64      	cmp	r3, #100	; 0x64
 8014b9c:	d105      	bne.n	8014baa <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014b9e:	4b3c      	ldr	r3, [pc, #240]	; (8014c90 <SetMaxTimeCredits+0x148>)
 8014ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ba6:	609a      	str	r2, [r3, #8]
 8014ba8:	e00b      	b.n	8014bc2 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014baa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014bb0:	d105      	bne.n	8014bbe <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8014bb2:	4b38      	ldr	r3, [pc, #224]	; (8014c94 <SetMaxTimeCredits+0x14c>)
 8014bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014bba:	609a      	str	r2, [r3, #8]
 8014bbc:	e001      	b.n	8014bc2 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8014bbe:	4b36      	ldr	r3, [pc, #216]	; (8014c98 <SetMaxTimeCredits+0x150>)
 8014bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	689a      	ldr	r2, [r3, #8]
 8014bc6:	f107 031c 	add.w	r3, r7, #28
 8014bca:	4611      	mov	r1, r2
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f006 ff07 	bl	801b9e0 <SysTimeFromMs>
 8014bd2:	f107 0014 	add.w	r0, r7, #20
 8014bd6:	6a3b      	ldr	r3, [r7, #32]
 8014bd8:	9300      	str	r3, [sp, #0]
 8014bda:	69fb      	ldr	r3, [r7, #28]
 8014bdc:	463a      	mov	r2, r7
 8014bde:	ca06      	ldmia	r2, {r1, r2}
 8014be0:	f006 fe17 	bl	801b812 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014be4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014be8:	f083 0301 	eor.w	r3, r3, #1
 8014bec:	b2db      	uxtb	r3, r3
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d006      	beq.n	8014c00 <SetMaxTimeCredits+0xb8>
 8014bf2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8014bf6:	f083 0301 	eor.w	r3, r3, #1
 8014bfa:	b2db      	uxtb	r3, r3
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d108      	bne.n	8014c12 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c06:	429a      	cmp	r2, r3
 8014c08:	d103      	bne.n	8014c12 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8014c0a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8014c0c:	4a23      	ldr	r2, [pc, #140]	; (8014c9c <SetMaxTimeCredits+0x154>)
 8014c0e:	4293      	cmp	r3, r2
 8014c10:	d92f      	bls.n	8014c72 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c16:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	4a21      	ldr	r2, [pc, #132]	; (8014ca0 <SetMaxTimeCredits+0x158>)
 8014c1c:	4293      	cmp	r3, r2
 8014c1e:	d928      	bls.n	8014c72 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8014c26:	3b30      	subs	r3, #48	; 0x30
 8014c28:	4a1e      	ldr	r2, [pc, #120]	; (8014ca4 <SetMaxTimeCredits+0x15c>)
 8014c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8014c2e:	0c1b      	lsrs	r3, r3, #16
 8014c30:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8014c32:	697b      	ldr	r3, [r7, #20]
 8014c34:	4a1c      	ldr	r2, [pc, #112]	; (8014ca8 <SetMaxTimeCredits+0x160>)
 8014c36:	fb02 f303 	mul.w	r3, r2, r3
 8014c3a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014c3c:	697b      	ldr	r3, [r7, #20]
 8014c3e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8014c42:	3330      	adds	r3, #48	; 0x30
 8014c44:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8014c46:	2300      	movs	r3, #0
 8014c48:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8014c4a:	f107 0314 	add.w	r3, r7, #20
 8014c4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014c52:	f006 fe9d 	bl	801b990 <SysTimeToMs>
 8014c56:	4602      	mov	r2, r0
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	609a      	str	r2, [r3, #8]
 8014c5c:	e009      	b.n	8014c72 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8014c5e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014c62:	f083 0301 	eor.w	r3, r3, #1
 8014c66:	b2db      	uxtb	r3, r3
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d002      	beq.n	8014c72 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c70:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	685b      	ldr	r3, [r3, #4]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d102      	bne.n	8014c80 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c7e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c84:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8014c86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8014c88:	4618      	mov	r0, r3
 8014c8a:	3730      	adds	r7, #48	; 0x30
 8014c8c:	46bd      	mov	sp, r7
 8014c8e:	bd80      	pop	{r7, pc}
 8014c90:	001b7740 	.word	0x001b7740
 8014c94:	0112a880 	.word	0x0112a880
 8014c98:	02932e00 	.word	0x02932e00
 8014c9c:	0001517f 	.word	0x0001517f
 8014ca0:	0001ec2f 	.word	0x0001ec2f
 8014ca4:	c22e4507 	.word	0xc22e4507
 8014ca8:	00015180 	.word	0x00015180

08014cac <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b086      	sub	sp, #24
 8014cb0:	af02      	add	r7, sp, #8
 8014cb2:	6078      	str	r0, [r7, #4]
 8014cb4:	4608      	mov	r0, r1
 8014cb6:	4611      	mov	r1, r2
 8014cb8:	461a      	mov	r2, r3
 8014cba:	4603      	mov	r3, r0
 8014cbc:	70fb      	strb	r3, [r7, #3]
 8014cbe:	460b      	mov	r3, r1
 8014cc0:	70bb      	strb	r3, [r7, #2]
 8014cc2:	4613      	mov	r3, r2
 8014cc4:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8014cc6:	78f9      	ldrb	r1, [r7, #3]
 8014cc8:	787b      	ldrb	r3, [r7, #1]
 8014cca:	9301      	str	r3, [sp, #4]
 8014ccc:	78bb      	ldrb	r3, [r7, #2]
 8014cce:	9300      	str	r3, [sp, #0]
 8014cd0:	f107 0318 	add.w	r3, r7, #24
 8014cd4:	cb0c      	ldmia	r3, {r2, r3}
 8014cd6:	6878      	ldr	r0, [r7, #4]
 8014cd8:	f7ff ff36 	bl	8014b48 <SetMaxTimeCredits>
 8014cdc:	4603      	mov	r3, r0
 8014cde:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8014ce0:	78fb      	ldrb	r3, [r7, #3]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d00a      	beq.n	8014cfc <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	685b      	ldr	r3, [r3, #4]
 8014cea:	4618      	mov	r0, r3
 8014cec:	f007 fc8c 	bl	801c608 <UTIL_TIMER_GetElapsedTime>
 8014cf0:	4602      	mov	r2, r0
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	68db      	ldr	r3, [r3, #12]
 8014cf6:	441a      	add	r2, r3
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	68da      	ldr	r2, [r3, #12]
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	691b      	ldr	r3, [r3, #16]
 8014d04:	429a      	cmp	r2, r3
 8014d06:	d903      	bls.n	8014d10 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	691a      	ldr	r2, [r3, #16]
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	6a3a      	ldr	r2, [r7, #32]
 8014d14:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8014d16:	89fb      	ldrh	r3, [r7, #14]
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	3710      	adds	r7, #16
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}

08014d20 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8014d20:	b480      	push	{r7}
 8014d22:	b085      	sub	sp, #20
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	4603      	mov	r3, r0
 8014d28:	460a      	mov	r2, r1
 8014d2a:	80fb      	strh	r3, [r7, #6]
 8014d2c:	4613      	mov	r3, r2
 8014d2e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8014d30:	2300      	movs	r3, #0
 8014d32:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8014d34:	2300      	movs	r3, #0
 8014d36:	73bb      	strb	r3, [r7, #14]
 8014d38:	e011      	b.n	8014d5e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8014d3a:	88fa      	ldrh	r2, [r7, #6]
 8014d3c:	7bbb      	ldrb	r3, [r7, #14]
 8014d3e:	2101      	movs	r1, #1
 8014d40:	fa01 f303 	lsl.w	r3, r1, r3
 8014d44:	401a      	ands	r2, r3
 8014d46:	7bbb      	ldrb	r3, [r7, #14]
 8014d48:	2101      	movs	r1, #1
 8014d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8014d4e:	429a      	cmp	r2, r3
 8014d50:	d102      	bne.n	8014d58 <CountChannels+0x38>
        {
            nbActiveBits++;
 8014d52:	7bfb      	ldrb	r3, [r7, #15]
 8014d54:	3301      	adds	r3, #1
 8014d56:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8014d58:	7bbb      	ldrb	r3, [r7, #14]
 8014d5a:	3301      	adds	r3, #1
 8014d5c:	73bb      	strb	r3, [r7, #14]
 8014d5e:	7bba      	ldrb	r2, [r7, #14]
 8014d60:	797b      	ldrb	r3, [r7, #5]
 8014d62:	429a      	cmp	r2, r3
 8014d64:	d3e9      	bcc.n	8014d3a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8014d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d68:	4618      	mov	r0, r3
 8014d6a:	3714      	adds	r7, #20
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bc80      	pop	{r7}
 8014d70:	4770      	bx	lr

08014d72 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8014d72:	b580      	push	{r7, lr}
 8014d74:	b084      	sub	sp, #16
 8014d76:	af00      	add	r7, sp, #0
 8014d78:	6039      	str	r1, [r7, #0]
 8014d7a:	4611      	mov	r1, r2
 8014d7c:	461a      	mov	r2, r3
 8014d7e:	4603      	mov	r3, r0
 8014d80:	71fb      	strb	r3, [r7, #7]
 8014d82:	460b      	mov	r3, r1
 8014d84:	71bb      	strb	r3, [r7, #6]
 8014d86:	4613      	mov	r3, r2
 8014d88:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8014d8a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8014d8e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014d92:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014d96:	4618      	mov	r0, r3
 8014d98:	f000 f85d 	bl	8014e56 <RegionCommonValueInRange>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d101      	bne.n	8014da6 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8014da2:	2300      	movs	r3, #0
 8014da4:	e053      	b.n	8014e4e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014da6:	2300      	movs	r3, #0
 8014da8:	73fb      	strb	r3, [r7, #15]
 8014daa:	2300      	movs	r3, #0
 8014dac:	73bb      	strb	r3, [r7, #14]
 8014dae:	e049      	b.n	8014e44 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014db0:	2300      	movs	r3, #0
 8014db2:	737b      	strb	r3, [r7, #13]
 8014db4:	e03d      	b.n	8014e32 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8014db6:	7bbb      	ldrb	r3, [r7, #14]
 8014db8:	005b      	lsls	r3, r3, #1
 8014dba:	683a      	ldr	r2, [r7, #0]
 8014dbc:	4413      	add	r3, r2
 8014dbe:	881b      	ldrh	r3, [r3, #0]
 8014dc0:	461a      	mov	r2, r3
 8014dc2:	7b7b      	ldrb	r3, [r7, #13]
 8014dc4:	fa42 f303 	asr.w	r3, r2, r3
 8014dc8:	f003 0301 	and.w	r3, r3, #1
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d02d      	beq.n	8014e2c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014dd0:	7bfa      	ldrb	r2, [r7, #15]
 8014dd2:	7b7b      	ldrb	r3, [r7, #13]
 8014dd4:	4413      	add	r3, r2
 8014dd6:	461a      	mov	r2, r3
 8014dd8:	4613      	mov	r3, r2
 8014dda:	005b      	lsls	r3, r3, #1
 8014ddc:	4413      	add	r3, r2
 8014dde:	009b      	lsls	r3, r3, #2
 8014de0:	461a      	mov	r2, r3
 8014de2:	69fb      	ldr	r3, [r7, #28]
 8014de4:	4413      	add	r3, r2
 8014de6:	7a1b      	ldrb	r3, [r3, #8]
 8014de8:	f343 0303 	sbfx	r3, r3, #0, #4
 8014dec:	b25b      	sxtb	r3, r3
 8014dee:	f003 030f 	and.w	r3, r3, #15
 8014df2:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8014df4:	7bfa      	ldrb	r2, [r7, #15]
 8014df6:	7b7b      	ldrb	r3, [r7, #13]
 8014df8:	4413      	add	r3, r2
 8014dfa:	461a      	mov	r2, r3
 8014dfc:	4613      	mov	r3, r2
 8014dfe:	005b      	lsls	r3, r3, #1
 8014e00:	4413      	add	r3, r2
 8014e02:	009b      	lsls	r3, r3, #2
 8014e04:	461a      	mov	r2, r3
 8014e06:	69fb      	ldr	r3, [r7, #28]
 8014e08:	4413      	add	r3, r2
 8014e0a:	7a1b      	ldrb	r3, [r3, #8]
 8014e0c:	f343 1303 	sbfx	r3, r3, #4, #4
 8014e10:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014e12:	f003 030f 	and.w	r3, r3, #15
 8014e16:	b25a      	sxtb	r2, r3
 8014e18:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f000 f81a 	bl	8014e56 <RegionCommonValueInRange>
 8014e22:	4603      	mov	r3, r0
 8014e24:	2b01      	cmp	r3, #1
 8014e26:	d101      	bne.n	8014e2c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014e28:	2301      	movs	r3, #1
 8014e2a:	e010      	b.n	8014e4e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8014e2c:	7b7b      	ldrb	r3, [r7, #13]
 8014e2e:	3301      	adds	r3, #1
 8014e30:	737b      	strb	r3, [r7, #13]
 8014e32:	7b7b      	ldrb	r3, [r7, #13]
 8014e34:	2b0f      	cmp	r3, #15
 8014e36:	d9be      	bls.n	8014db6 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014e38:	7bfb      	ldrb	r3, [r7, #15]
 8014e3a:	3310      	adds	r3, #16
 8014e3c:	73fb      	strb	r3, [r7, #15]
 8014e3e:	7bbb      	ldrb	r3, [r7, #14]
 8014e40:	3301      	adds	r3, #1
 8014e42:	73bb      	strb	r3, [r7, #14]
 8014e44:	7bfa      	ldrb	r2, [r7, #15]
 8014e46:	79fb      	ldrb	r3, [r7, #7]
 8014e48:	429a      	cmp	r2, r3
 8014e4a:	d3b1      	bcc.n	8014db0 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8014e4c:	2300      	movs	r3, #0
}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	3710      	adds	r7, #16
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd80      	pop	{r7, pc}

08014e56 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8014e56:	b480      	push	{r7}
 8014e58:	b083      	sub	sp, #12
 8014e5a:	af00      	add	r7, sp, #0
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	71fb      	strb	r3, [r7, #7]
 8014e60:	460b      	mov	r3, r1
 8014e62:	71bb      	strb	r3, [r7, #6]
 8014e64:	4613      	mov	r3, r2
 8014e66:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8014e68:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014e6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014e70:	429a      	cmp	r2, r3
 8014e72:	db07      	blt.n	8014e84 <RegionCommonValueInRange+0x2e>
 8014e74:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014e78:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8014e7c:	429a      	cmp	r2, r3
 8014e7e:	dc01      	bgt.n	8014e84 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8014e80:	2301      	movs	r3, #1
 8014e82:	e000      	b.n	8014e86 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8014e84:	2300      	movs	r3, #0
}
 8014e86:	4618      	mov	r0, r3
 8014e88:	370c      	adds	r7, #12
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bc80      	pop	{r7}
 8014e8e:	4770      	bx	lr

08014e90 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8014e90:	b480      	push	{r7}
 8014e92:	b085      	sub	sp, #20
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
 8014e98:	460b      	mov	r3, r1
 8014e9a:	70fb      	strb	r3, [r7, #3]
 8014e9c:	4613      	mov	r3, r2
 8014e9e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8014ea0:	78fb      	ldrb	r3, [r7, #3]
 8014ea2:	091b      	lsrs	r3, r3, #4
 8014ea4:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8014ea6:	78bb      	ldrb	r3, [r7, #2]
 8014ea8:	091b      	lsrs	r3, r3, #4
 8014eaa:	b2db      	uxtb	r3, r3
 8014eac:	7bfa      	ldrb	r2, [r7, #15]
 8014eae:	429a      	cmp	r2, r3
 8014eb0:	d803      	bhi.n	8014eba <RegionCommonChanDisable+0x2a>
 8014eb2:	78fa      	ldrb	r2, [r7, #3]
 8014eb4:	78bb      	ldrb	r3, [r7, #2]
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	d301      	bcc.n	8014ebe <RegionCommonChanDisable+0x2e>
    {
        return false;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	e017      	b.n	8014eee <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8014ebe:	7bfb      	ldrb	r3, [r7, #15]
 8014ec0:	005b      	lsls	r3, r3, #1
 8014ec2:	687a      	ldr	r2, [r7, #4]
 8014ec4:	4413      	add	r3, r2
 8014ec6:	881b      	ldrh	r3, [r3, #0]
 8014ec8:	b21a      	sxth	r2, r3
 8014eca:	78fb      	ldrb	r3, [r7, #3]
 8014ecc:	f003 030f 	and.w	r3, r3, #15
 8014ed0:	2101      	movs	r1, #1
 8014ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8014ed6:	b21b      	sxth	r3, r3
 8014ed8:	43db      	mvns	r3, r3
 8014eda:	b21b      	sxth	r3, r3
 8014edc:	4013      	ands	r3, r2
 8014ede:	b219      	sxth	r1, r3
 8014ee0:	7bfb      	ldrb	r3, [r7, #15]
 8014ee2:	005b      	lsls	r3, r3, #1
 8014ee4:	687a      	ldr	r2, [r7, #4]
 8014ee6:	4413      	add	r3, r2
 8014ee8:	b28a      	uxth	r2, r1
 8014eea:	801a      	strh	r2, [r3, #0]

    return true;
 8014eec:	2301      	movs	r3, #1
}
 8014eee:	4618      	mov	r0, r3
 8014ef0:	3714      	adds	r7, #20
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bc80      	pop	{r7}
 8014ef6:	4770      	bx	lr

08014ef8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b084      	sub	sp, #16
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
 8014f00:	460b      	mov	r3, r1
 8014f02:	70fb      	strb	r3, [r7, #3]
 8014f04:	4613      	mov	r3, r2
 8014f06:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d101      	bne.n	8014f16 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8014f12:	2300      	movs	r3, #0
 8014f14:	e018      	b.n	8014f48 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014f16:	78fb      	ldrb	r3, [r7, #3]
 8014f18:	73bb      	strb	r3, [r7, #14]
 8014f1a:	e010      	b.n	8014f3e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8014f1c:	7bbb      	ldrb	r3, [r7, #14]
 8014f1e:	005b      	lsls	r3, r3, #1
 8014f20:	687a      	ldr	r2, [r7, #4]
 8014f22:	4413      	add	r3, r2
 8014f24:	881b      	ldrh	r3, [r3, #0]
 8014f26:	2110      	movs	r1, #16
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f7ff fef9 	bl	8014d20 <CountChannels>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	461a      	mov	r2, r3
 8014f32:	7bfb      	ldrb	r3, [r7, #15]
 8014f34:	4413      	add	r3, r2
 8014f36:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014f38:	7bbb      	ldrb	r3, [r7, #14]
 8014f3a:	3301      	adds	r3, #1
 8014f3c:	73bb      	strb	r3, [r7, #14]
 8014f3e:	7bba      	ldrb	r2, [r7, #14]
 8014f40:	78bb      	ldrb	r3, [r7, #2]
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d3ea      	bcc.n	8014f1c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8014f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f48:	4618      	mov	r0, r3
 8014f4a:	3710      	adds	r7, #16
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}

08014f50 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8014f50:	b480      	push	{r7}
 8014f52:	b087      	sub	sp, #28
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	60f8      	str	r0, [r7, #12]
 8014f58:	60b9      	str	r1, [r7, #8]
 8014f5a:	4613      	mov	r3, r2
 8014f5c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d016      	beq.n	8014f92 <RegionCommonChanMaskCopy+0x42>
 8014f64:	68bb      	ldr	r3, [r7, #8]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d013      	beq.n	8014f92 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	75fb      	strb	r3, [r7, #23]
 8014f6e:	e00c      	b.n	8014f8a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8014f70:	7dfb      	ldrb	r3, [r7, #23]
 8014f72:	005b      	lsls	r3, r3, #1
 8014f74:	68ba      	ldr	r2, [r7, #8]
 8014f76:	441a      	add	r2, r3
 8014f78:	7dfb      	ldrb	r3, [r7, #23]
 8014f7a:	005b      	lsls	r3, r3, #1
 8014f7c:	68f9      	ldr	r1, [r7, #12]
 8014f7e:	440b      	add	r3, r1
 8014f80:	8812      	ldrh	r2, [r2, #0]
 8014f82:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8014f84:	7dfb      	ldrb	r3, [r7, #23]
 8014f86:	3301      	adds	r3, #1
 8014f88:	75fb      	strb	r3, [r7, #23]
 8014f8a:	7dfa      	ldrb	r2, [r7, #23]
 8014f8c:	79fb      	ldrb	r3, [r7, #7]
 8014f8e:	429a      	cmp	r2, r3
 8014f90:	d3ee      	bcc.n	8014f70 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8014f92:	bf00      	nop
 8014f94:	371c      	adds	r7, #28
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bc80      	pop	{r7}
 8014f9a:	4770      	bx	lr

08014f9c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014f9c:	b082      	sub	sp, #8
 8014f9e:	b580      	push	{r7, lr}
 8014fa0:	b086      	sub	sp, #24
 8014fa2:	af00      	add	r7, sp, #0
 8014fa4:	60f8      	str	r0, [r7, #12]
 8014fa6:	60b9      	str	r1, [r7, #8]
 8014fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8014faa:	4613      	mov	r3, r2
 8014fac:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8014fae:	79f9      	ldrb	r1, [r7, #7]
 8014fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014fb4:	cb0c      	ldmia	r3, {r2, r3}
 8014fb6:	68f8      	ldr	r0, [r7, #12]
 8014fb8:	f7ff fd8b 	bl	8014ad2 <GetDutyCycle>
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	68da      	ldr	r2, [r3, #12]
 8014fc4:	8afb      	ldrh	r3, [r7, #22]
 8014fc6:	68b9      	ldr	r1, [r7, #8]
 8014fc8:	fb01 f303 	mul.w	r3, r1, r3
 8014fcc:	429a      	cmp	r2, r3
 8014fce:	d909      	bls.n	8014fe4 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	68da      	ldr	r2, [r3, #12]
 8014fd4:	8afb      	ldrh	r3, [r7, #22]
 8014fd6:	68b9      	ldr	r1, [r7, #8]
 8014fd8:	fb01 f303 	mul.w	r3, r1, r3
 8014fdc:	1ad2      	subs	r2, r2, r3
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8014fe2:	e002      	b.n	8014fea <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	60da      	str	r2, [r3, #12]
}
 8014fea:	bf00      	nop
 8014fec:	3718      	adds	r7, #24
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014ff4:	b002      	add	sp, #8
 8014ff6:	4770      	bx	lr

08014ff8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8014ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ffa:	b08f      	sub	sp, #60	; 0x3c
 8014ffc:	af04      	add	r7, sp, #16
 8014ffe:	6039      	str	r1, [r7, #0]
 8015000:	4611      	mov	r1, r2
 8015002:	461a      	mov	r2, r3
 8015004:	4603      	mov	r3, r0
 8015006:	71fb      	strb	r3, [r7, #7]
 8015008:	460b      	mov	r3, r1
 801500a:	71bb      	strb	r3, [r7, #6]
 801500c:	4613      	mov	r3, r2
 801500e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015014:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015016:	f007 fae5 	bl	801c5e4 <UTIL_TIMER_GetCurrentTime>
 801501a:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 801501c:	2300      	movs	r3, #0
 801501e:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8015020:	2301      	movs	r3, #1
 8015022:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8015024:	2300      	movs	r3, #0
 8015026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801502a:	2300      	movs	r3, #0
 801502c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015030:	e0ba      	b.n	80151a8 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8015032:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015036:	4613      	mov	r3, r2
 8015038:	005b      	lsls	r3, r3, #1
 801503a:	4413      	add	r3, r2
 801503c:	00db      	lsls	r3, r3, #3
 801503e:	461a      	mov	r2, r3
 8015040:	683b      	ldr	r3, [r7, #0]
 8015042:	189c      	adds	r4, r3, r2
 8015044:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8015048:	797a      	ldrb	r2, [r7, #5]
 801504a:	79fd      	ldrb	r5, [r7, #7]
 801504c:	69fb      	ldr	r3, [r7, #28]
 801504e:	9302      	str	r3, [sp, #8]
 8015050:	46ec      	mov	ip, sp
 8015052:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015056:	e893 0003 	ldmia.w	r3, {r0, r1}
 801505a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801505e:	4633      	mov	r3, r6
 8015060:	4629      	mov	r1, r5
 8015062:	4620      	mov	r0, r4
 8015064:	f7ff fe22 	bl	8014cac <UpdateTimeCredits>
 8015068:	4603      	mov	r3, r0
 801506a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801506c:	8afa      	ldrh	r2, [r7, #22]
 801506e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015070:	fb02 f303 	mul.w	r3, r2, r3
 8015074:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015076:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801507a:	4613      	mov	r3, r2
 801507c:	005b      	lsls	r3, r3, #1
 801507e:	4413      	add	r3, r2
 8015080:	00db      	lsls	r3, r3, #3
 8015082:	461a      	mov	r2, r3
 8015084:	683b      	ldr	r3, [r7, #0]
 8015086:	4413      	add	r3, r2
 8015088:	68db      	ldr	r3, [r3, #12]
 801508a:	69ba      	ldr	r2, [r7, #24]
 801508c:	429a      	cmp	r2, r3
 801508e:	d308      	bcc.n	80150a2 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015090:	797b      	ldrb	r3, [r7, #5]
 8015092:	f083 0301 	eor.w	r3, r3, #1
 8015096:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015098:	2b00      	cmp	r3, #0
 801509a:	d013      	beq.n	80150c4 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801509c:	79fb      	ldrb	r3, [r7, #7]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d010      	beq.n	80150c4 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80150a2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80150a6:	4613      	mov	r3, r2
 80150a8:	005b      	lsls	r3, r3, #1
 80150aa:	4413      	add	r3, r2
 80150ac:	00db      	lsls	r3, r3, #3
 80150ae:	461a      	mov	r2, r3
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	4413      	add	r3, r2
 80150b4:	2201      	movs	r2, #1
 80150b6:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80150b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80150bc:	3301      	adds	r3, #1
 80150be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80150c2:	e06c      	b.n	801519e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80150c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80150c8:	4613      	mov	r3, r2
 80150ca:	005b      	lsls	r3, r3, #1
 80150cc:	4413      	add	r3, r2
 80150ce:	00db      	lsls	r3, r3, #3
 80150d0:	461a      	mov	r2, r3
 80150d2:	683b      	ldr	r3, [r7, #0]
 80150d4:	4413      	add	r3, r2
 80150d6:	2200      	movs	r2, #0
 80150d8:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80150da:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80150de:	4613      	mov	r3, r2
 80150e0:	005b      	lsls	r3, r3, #1
 80150e2:	4413      	add	r3, r2
 80150e4:	00db      	lsls	r3, r3, #3
 80150e6:	461a      	mov	r2, r3
 80150e8:	683b      	ldr	r3, [r7, #0]
 80150ea:	4413      	add	r3, r2
 80150ec:	691b      	ldr	r3, [r3, #16]
 80150ee:	69ba      	ldr	r2, [r7, #24]
 80150f0:	429a      	cmp	r2, r3
 80150f2:	d215      	bcs.n	8015120 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80150f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80150f8:	4613      	mov	r3, r2
 80150fa:	005b      	lsls	r3, r3, #1
 80150fc:	4413      	add	r3, r2
 80150fe:	00db      	lsls	r3, r3, #3
 8015100:	461a      	mov	r2, r3
 8015102:	683b      	ldr	r3, [r7, #0]
 8015104:	4413      	add	r3, r2
 8015106:	68db      	ldr	r3, [r3, #12]
 8015108:	69ba      	ldr	r2, [r7, #24]
 801510a:	1ad3      	subs	r3, r2, r3
 801510c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801510e:	4293      	cmp	r3, r2
 8015110:	bf28      	it	cs
 8015112:	4613      	movcs	r3, r2
 8015114:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015116:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801511a:	3301      	adds	r3, #1
 801511c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8015120:	79fb      	ldrb	r3, [r7, #7]
 8015122:	f083 0301 	eor.w	r3, r3, #1
 8015126:	b2db      	uxtb	r3, r3
 8015128:	2b00      	cmp	r3, #0
 801512a:	d038      	beq.n	801519e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 801512c:	2300      	movs	r3, #0
 801512e:	60fb      	str	r3, [r7, #12]
 8015130:	2300      	movs	r3, #0
 8015132:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015134:	8afb      	ldrh	r3, [r7, #22]
 8015136:	2b64      	cmp	r3, #100	; 0x64
 8015138:	d103      	bne.n	8015142 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801513a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801513e:	60fb      	str	r3, [r7, #12]
 8015140:	e009      	b.n	8015156 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015142:	8afb      	ldrh	r3, [r7, #22]
 8015144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015148:	d103      	bne.n	8015152 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801514a:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801514e:	60fb      	str	r3, [r7, #12]
 8015150:	e001      	b.n	8015156 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015152:	4b1e      	ldr	r3, [pc, #120]	; (80151cc <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015154:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015158:	4a1c      	ldr	r2, [pc, #112]	; (80151cc <RegionCommonUpdateBandTimeOff+0x1d4>)
 801515a:	4293      	cmp	r3, r2
 801515c:	d90e      	bls.n	801517c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801515e:	68fa      	ldr	r2, [r7, #12]
 8015160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015162:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015166:	3b30      	subs	r3, #48	; 0x30
 8015168:	4919      	ldr	r1, [pc, #100]	; (80151d0 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801516a:	fba1 1303 	umull	r1, r3, r1, r3
 801516e:	0c1b      	lsrs	r3, r3, #16
 8015170:	3301      	adds	r3, #1
 8015172:	4918      	ldr	r1, [pc, #96]	; (80151d4 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8015174:	fb01 f303 	mul.w	r3, r1, r3
 8015178:	4413      	add	r3, r2
 801517a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801517c:	f107 000c 	add.w	r0, r7, #12
 8015180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015182:	9300      	str	r3, [sp, #0]
 8015184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015186:	f107 020c 	add.w	r2, r7, #12
 801518a:	ca06      	ldmia	r2, {r1, r2}
 801518c:	f006 fb41 	bl	801b812 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8015190:	f107 030c 	add.w	r3, r7, #12
 8015194:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015198:	f006 fbfa 	bl	801b990 <SysTimeToMs>
 801519c:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801519e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80151a2:	3301      	adds	r3, #1
 80151a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80151a8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80151ac:	79bb      	ldrb	r3, [r7, #6]
 80151ae:	429a      	cmp	r2, r3
 80151b0:	f4ff af3f 	bcc.w	8015032 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80151b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d102      	bne.n	80151c2 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80151bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151c0:	e000      	b.n	80151c4 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80151c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	372c      	adds	r7, #44	; 0x2c
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151cc:	0001ec30 	.word	0x0001ec30
 80151d0:	c22e4507 	.word	0xc22e4507
 80151d4:	00015180 	.word	0x00015180

080151d8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80151d8:	b480      	push	{r7}
 80151da:	b085      	sub	sp, #20
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]
 80151e0:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80151e2:	2300      	movs	r3, #0
 80151e4:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	781b      	ldrb	r3, [r3, #0]
 80151ea:	2b03      	cmp	r3, #3
 80151ec:	d13f      	bne.n	801526e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	3301      	adds	r3, #1
 80151f2:	781b      	ldrb	r3, [r3, #0]
 80151f4:	b25a      	sxtb	r2, r3
 80151f6:	683b      	ldr	r3, [r7, #0]
 80151f8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015200:	f003 030f 	and.w	r3, r3, #15
 8015204:	b25a      	sxtb	r2, r3
 8015206:	683b      	ldr	r3, [r7, #0]
 8015208:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015210:	b2db      	uxtb	r3, r3
 8015212:	091b      	lsrs	r3, r3, #4
 8015214:	b2db      	uxtb	r3, r3
 8015216:	b25a      	sxtb	r2, r3
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	3302      	adds	r3, #2
 8015220:	781b      	ldrb	r3, [r3, #0]
 8015222:	b29a      	uxth	r2, r3
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	889b      	ldrh	r3, [r3, #4]
 801522c:	b21a      	sxth	r2, r3
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	3303      	adds	r3, #3
 8015232:	781b      	ldrb	r3, [r3, #0]
 8015234:	021b      	lsls	r3, r3, #8
 8015236:	b21b      	sxth	r3, r3
 8015238:	4313      	orrs	r3, r2
 801523a:	b21b      	sxth	r3, r3
 801523c:	b29a      	uxth	r2, r3
 801523e:	683b      	ldr	r3, [r7, #0]
 8015240:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	791a      	ldrb	r2, [r3, #4]
 8015246:	683b      	ldr	r3, [r7, #0]
 8015248:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	781b      	ldrb	r3, [r3, #0]
 801524e:	091b      	lsrs	r3, r3, #4
 8015250:	b2db      	uxtb	r3, r3
 8015252:	f003 0307 	and.w	r3, r3, #7
 8015256:	b2da      	uxtb	r2, r3
 8015258:	683b      	ldr	r3, [r7, #0]
 801525a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	781b      	ldrb	r3, [r3, #0]
 8015260:	f003 030f 	and.w	r3, r3, #15
 8015264:	b2da      	uxtb	r2, r3
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801526a:	2305      	movs	r3, #5
 801526c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801526e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015270:	4618      	mov	r0, r3
 8015272:	3714      	adds	r7, #20
 8015274:	46bd      	mov	sp, r7
 8015276:	bc80      	pop	{r7}
 8015278:	4770      	bx	lr

0801527a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801527a:	b5b0      	push	{r4, r5, r7, lr}
 801527c:	b088      	sub	sp, #32
 801527e:	af02      	add	r7, sp, #8
 8015280:	60f8      	str	r0, [r7, #12]
 8015282:	60b9      	str	r1, [r7, #8]
 8015284:	607a      	str	r2, [r7, #4]
 8015286:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	791b      	ldrb	r3, [r3, #4]
 801528c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	799b      	ldrb	r3, [r3, #6]
 8015292:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	79db      	ldrb	r3, [r3, #7]
 8015298:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	7a1b      	ldrb	r3, [r3, #8]
 801529e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	795b      	ldrb	r3, [r3, #5]
 80152a4:	f083 0301 	eor.w	r3, r3, #1
 80152a8:	b2db      	uxtb	r3, r3
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d008      	beq.n	80152c0 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	7adb      	ldrb	r3, [r3, #11]
 80152b2:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	7a5b      	ldrb	r3, [r3, #9]
 80152b8:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	7a9b      	ldrb	r3, [r3, #10]
 80152be:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80152c0:	7dfb      	ldrb	r3, [r7, #23]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d04a      	beq.n	801535c <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80152c6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80152ca:	2b0f      	cmp	r3, #15
 80152cc:	d103      	bne.n	80152d6 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	7a5b      	ldrb	r3, [r3, #9]
 80152d2:	75bb      	strb	r3, [r7, #22]
 80152d4:	e01d      	b.n	8015312 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	7b18      	ldrb	r0, [r3, #12]
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	6919      	ldr	r1, [r3, #16]
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80152ea:	68fa      	ldr	r2, [r7, #12]
 80152ec:	6992      	ldr	r2, [r2, #24]
 80152ee:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80152f2:	9201      	str	r2, [sp, #4]
 80152f4:	9300      	str	r3, [sp, #0]
 80152f6:	462b      	mov	r3, r5
 80152f8:	4622      	mov	r2, r4
 80152fa:	f7ff fd3a 	bl	8014d72 <RegionCommonChanVerifyDr>
 80152fe:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8015300:	f083 0301 	eor.w	r3, r3, #1
 8015304:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015306:	2b00      	cmp	r3, #0
 8015308:	d003      	beq.n	8015312 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 801530a:	7dfb      	ldrb	r3, [r7, #23]
 801530c:	f023 0302 	bic.w	r3, r3, #2
 8015310:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8015312:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015316:	2b0f      	cmp	r3, #15
 8015318:	d103      	bne.n	8015322 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	7a9b      	ldrb	r3, [r3, #10]
 801531e:	757b      	strb	r3, [r7, #21]
 8015320:	e01c      	b.n	801535c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801532e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015332:	4618      	mov	r0, r3
 8015334:	f7ff fd8f 	bl	8014e56 <RegionCommonValueInRange>
 8015338:	4603      	mov	r3, r0
 801533a:	2b00      	cmp	r3, #0
 801533c:	d10e      	bne.n	801535c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8015344:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8015348:	429a      	cmp	r2, r3
 801534a:	da03      	bge.n	8015354 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	7f5b      	ldrb	r3, [r3, #29]
 8015350:	757b      	strb	r3, [r7, #21]
 8015352:	e003      	b.n	801535c <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8015354:	7dfb      	ldrb	r3, [r7, #23]
 8015356:	f023 0304 	bic.w	r3, r3, #4
 801535a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801535c:	7dfb      	ldrb	r3, [r7, #23]
 801535e:	2b07      	cmp	r3, #7
 8015360:	d105      	bne.n	801536e <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8015362:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d101      	bne.n	801536e <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801536a:	2301      	movs	r3, #1
 801536c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801536e:	68bb      	ldr	r3, [r7, #8]
 8015370:	7dba      	ldrb	r2, [r7, #22]
 8015372:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	7d7a      	ldrb	r2, [r7, #21]
 8015378:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801537a:	7d3a      	ldrb	r2, [r7, #20]
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	701a      	strb	r2, [r3, #0]

    return status;
 8015380:	7dfb      	ldrb	r3, [r7, #23]
}
 8015382:	4618      	mov	r0, r3
 8015384:	3718      	adds	r7, #24
 8015386:	46bd      	mov	sp, r7
 8015388:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801538c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 801538c:	b480      	push	{r7}
 801538e:	b083      	sub	sp, #12
 8015390:	af00      	add	r7, sp, #0
 8015392:	4603      	mov	r3, r0
 8015394:	6039      	str	r1, [r7, #0]
 8015396:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8015398:	79fb      	ldrb	r3, [r7, #7]
 801539a:	4a06      	ldr	r2, [pc, #24]	; (80153b4 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801539c:	fa02 f303 	lsl.w	r3, r2, r3
 80153a0:	461a      	mov	r2, r3
 80153a2:	683b      	ldr	r3, [r7, #0]
 80153a4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	370c      	adds	r7, #12
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bc80      	pop	{r7}
 80153b0:	4770      	bx	lr
 80153b2:	bf00      	nop
 80153b4:	000f4240 	.word	0x000f4240

080153b8 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80153b8:	b480      	push	{r7}
 80153ba:	b083      	sub	sp, #12
 80153bc:	af00      	add	r7, sp, #0
 80153be:	4603      	mov	r3, r0
 80153c0:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80153c2:	79fb      	ldrb	r3, [r7, #7]
 80153c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80153c8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80153cc:	4618      	mov	r0, r3
 80153ce:	370c      	adds	r7, #12
 80153d0:	46bd      	mov	sp, r7
 80153d2:	bc80      	pop	{r7}
 80153d4:	4770      	bx	lr
	...

080153d8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80153d8:	b480      	push	{r7}
 80153da:	b085      	sub	sp, #20
 80153dc:	af00      	add	r7, sp, #0
 80153de:	60f8      	str	r0, [r7, #12]
 80153e0:	607a      	str	r2, [r7, #4]
 80153e2:	603b      	str	r3, [r7, #0]
 80153e4:	460b      	mov	r3, r1
 80153e6:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80153e8:	7afa      	ldrb	r2, [r7, #11]
 80153ea:	7afb      	ldrb	r3, [r7, #11]
 80153ec:	3b04      	subs	r3, #4
 80153ee:	4619      	mov	r1, r3
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	fb03 f101 	mul.w	r1, r3, r1
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80153fc:	fb00 f303 	mul.w	r3, r0, r3
 8015400:	440b      	add	r3, r1
 8015402:	005b      	lsls	r3, r3, #1
 8015404:	2b00      	cmp	r3, #0
 8015406:	d013      	beq.n	8015430 <RegionCommonComputeRxWindowParameters+0x58>
 8015408:	7afb      	ldrb	r3, [r7, #11]
 801540a:	3b04      	subs	r3, #4
 801540c:	4619      	mov	r1, r3
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	fb03 f101 	mul.w	r1, r3, r1
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801541a:	fb00 f303 	mul.w	r3, r0, r3
 801541e:	440b      	add	r3, r1
 8015420:	0059      	lsls	r1, r3, #1
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	440b      	add	r3, r1
 8015426:	1e59      	subs	r1, r3, #1
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	fbb1 f3f3 	udiv	r3, r1, r3
 801542e:	e00f      	b.n	8015450 <RegionCommonComputeRxWindowParameters+0x78>
 8015430:	7afb      	ldrb	r3, [r7, #11]
 8015432:	3b04      	subs	r3, #4
 8015434:	4619      	mov	r1, r3
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	fb03 f101 	mul.w	r1, r3, r1
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015442:	fb00 f303 	mul.w	r3, r0, r3
 8015446:	440b      	add	r3, r1
 8015448:	0059      	lsls	r1, r3, #1
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	fbb1 f3f3 	udiv	r3, r1, r3
 8015450:	429a      	cmp	r2, r3
 8015452:	bf38      	it	cc
 8015454:	461a      	movcc	r2, r3
 8015456:	69bb      	ldr	r3, [r7, #24]
 8015458:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	009b      	lsls	r3, r3, #2
 801545e:	4619      	mov	r1, r3
 8015460:	69bb      	ldr	r3, [r7, #24]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	68fa      	ldr	r2, [r7, #12]
 8015466:	fb02 f303 	mul.w	r3, r2, r3
 801546a:	2b00      	cmp	r3, #0
 801546c:	d007      	beq.n	801547e <RegionCommonComputeRxWindowParameters+0xa6>
 801546e:	69bb      	ldr	r3, [r7, #24]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	68fa      	ldr	r2, [r7, #12]
 8015474:	fb02 f303 	mul.w	r3, r2, r3
 8015478:	3301      	adds	r3, #1
 801547a:	085b      	lsrs	r3, r3, #1
 801547c:	e005      	b.n	801548a <RegionCommonComputeRxWindowParameters+0xb2>
 801547e:	69bb      	ldr	r3, [r7, #24]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	68fa      	ldr	r2, [r7, #12]
 8015484:	fb02 f303 	mul.w	r3, r2, r3
 8015488:	085b      	lsrs	r3, r3, #1
 801548a:	1acb      	subs	r3, r1, r3
 801548c:	683a      	ldr	r2, [r7, #0]
 801548e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015492:	fb01 f202 	mul.w	r2, r1, r2
 8015496:	1a9b      	subs	r3, r3, r2
 8015498:	2b00      	cmp	r3, #0
 801549a:	dd27      	ble.n	80154ec <RegionCommonComputeRxWindowParameters+0x114>
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	009b      	lsls	r3, r3, #2
 80154a0:	4619      	mov	r1, r3
 80154a2:	69bb      	ldr	r3, [r7, #24]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	68fa      	ldr	r2, [r7, #12]
 80154a8:	fb02 f303 	mul.w	r3, r2, r3
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d007      	beq.n	80154c0 <RegionCommonComputeRxWindowParameters+0xe8>
 80154b0:	69bb      	ldr	r3, [r7, #24]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	68fa      	ldr	r2, [r7, #12]
 80154b6:	fb02 f303 	mul.w	r3, r2, r3
 80154ba:	3301      	adds	r3, #1
 80154bc:	085b      	lsrs	r3, r3, #1
 80154be:	e005      	b.n	80154cc <RegionCommonComputeRxWindowParameters+0xf4>
 80154c0:	69bb      	ldr	r3, [r7, #24]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	68fa      	ldr	r2, [r7, #12]
 80154c6:	fb02 f303 	mul.w	r3, r2, r3
 80154ca:	085b      	lsrs	r3, r3, #1
 80154cc:	1acb      	subs	r3, r1, r3
 80154ce:	683a      	ldr	r2, [r7, #0]
 80154d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80154d4:	fb01 f202 	mul.w	r2, r1, r2
 80154d8:	1a9b      	subs	r3, r3, r2
 80154da:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80154de:	4a19      	ldr	r2, [pc, #100]	; (8015544 <RegionCommonComputeRxWindowParameters+0x16c>)
 80154e0:	fb82 1203 	smull	r1, r2, r2, r3
 80154e4:	1192      	asrs	r2, r2, #6
 80154e6:	17db      	asrs	r3, r3, #31
 80154e8:	1ad3      	subs	r3, r2, r3
 80154ea:	e024      	b.n	8015536 <RegionCommonComputeRxWindowParameters+0x15e>
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	009b      	lsls	r3, r3, #2
 80154f0:	4619      	mov	r1, r3
 80154f2:	69bb      	ldr	r3, [r7, #24]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	68fa      	ldr	r2, [r7, #12]
 80154f8:	fb02 f303 	mul.w	r3, r2, r3
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d007      	beq.n	8015510 <RegionCommonComputeRxWindowParameters+0x138>
 8015500:	69bb      	ldr	r3, [r7, #24]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	68fa      	ldr	r2, [r7, #12]
 8015506:	fb02 f303 	mul.w	r3, r2, r3
 801550a:	3301      	adds	r3, #1
 801550c:	085b      	lsrs	r3, r3, #1
 801550e:	e005      	b.n	801551c <RegionCommonComputeRxWindowParameters+0x144>
 8015510:	69bb      	ldr	r3, [r7, #24]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	68fa      	ldr	r2, [r7, #12]
 8015516:	fb02 f303 	mul.w	r3, r2, r3
 801551a:	085b      	lsrs	r3, r3, #1
 801551c:	1acb      	subs	r3, r1, r3
 801551e:	683a      	ldr	r2, [r7, #0]
 8015520:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015524:	fb01 f202 	mul.w	r2, r1, r2
 8015528:	1a9b      	subs	r3, r3, r2
 801552a:	4a06      	ldr	r2, [pc, #24]	; (8015544 <RegionCommonComputeRxWindowParameters+0x16c>)
 801552c:	fb82 1203 	smull	r1, r2, r2, r3
 8015530:	1192      	asrs	r2, r2, #6
 8015532:	17db      	asrs	r3, r3, #31
 8015534:	1ad3      	subs	r3, r2, r3
 8015536:	69fa      	ldr	r2, [r7, #28]
 8015538:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801553a:	bf00      	nop
 801553c:	3714      	adds	r7, #20
 801553e:	46bd      	mov	sp, r7
 8015540:	bc80      	pop	{r7}
 8015542:	4770      	bx	lr
 8015544:	10624dd3 	.word	0x10624dd3

08015548 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b086      	sub	sp, #24
 801554c:	af00      	add	r7, sp, #0
 801554e:	4603      	mov	r3, r0
 8015550:	60b9      	str	r1, [r7, #8]
 8015552:	607a      	str	r2, [r7, #4]
 8015554:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8015556:	2300      	movs	r3, #0
 8015558:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801555a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801555e:	005b      	lsls	r3, r3, #1
 8015560:	4618      	mov	r0, r3
 8015562:	f7eb f933 	bl	80007cc <__aeabi_ui2f>
 8015566:	4603      	mov	r3, r0
 8015568:	4619      	mov	r1, r3
 801556a:	68b8      	ldr	r0, [r7, #8]
 801556c:	f7eb f87c 	bl	8000668 <__aeabi_fsub>
 8015570:	4603      	mov	r3, r0
 8015572:	6879      	ldr	r1, [r7, #4]
 8015574:	4618      	mov	r0, r3
 8015576:	f7eb f877 	bl	8000668 <__aeabi_fsub>
 801557a:	4603      	mov	r3, r0
 801557c:	4618      	mov	r0, r3
 801557e:	f7ea ff67 	bl	8000450 <__aeabi_f2d>
 8015582:	4602      	mov	r2, r0
 8015584:	460b      	mov	r3, r1
 8015586:	4610      	mov	r0, r2
 8015588:	4619      	mov	r1, r3
 801558a:	f007 fb95 	bl	801ccb8 <floor>
 801558e:	4602      	mov	r2, r0
 8015590:	460b      	mov	r3, r1
 8015592:	4610      	mov	r0, r2
 8015594:	4619      	mov	r1, r3
 8015596:	f7eb f83b 	bl	8000610 <__aeabi_d2iz>
 801559a:	4603      	mov	r3, r0
 801559c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801559e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	3718      	adds	r7, #24
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd80      	pop	{r7, pc}

080155aa <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80155aa:	b590      	push	{r4, r7, lr}
 80155ac:	b087      	sub	sp, #28
 80155ae:	af00      	add	r7, sp, #0
 80155b0:	60f8      	str	r0, [r7, #12]
 80155b2:	60b9      	str	r1, [r7, #8]
 80155b4:	607a      	str	r2, [r7, #4]
 80155b6:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80155b8:	2300      	movs	r3, #0
 80155ba:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80155bc:	2300      	movs	r3, #0
 80155be:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80155c0:	2300      	movs	r3, #0
 80155c2:	757b      	strb	r3, [r7, #21]
 80155c4:	2300      	movs	r3, #0
 80155c6:	753b      	strb	r3, [r7, #20]
 80155c8:	e09c      	b.n	8015704 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80155ca:	2300      	movs	r3, #0
 80155cc:	74fb      	strb	r3, [r7, #19]
 80155ce:	e08f      	b.n	80156f0 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	685a      	ldr	r2, [r3, #4]
 80155d4:	7d3b      	ldrb	r3, [r7, #20]
 80155d6:	005b      	lsls	r3, r3, #1
 80155d8:	4413      	add	r3, r2
 80155da:	881b      	ldrh	r3, [r3, #0]
 80155dc:	461a      	mov	r2, r3
 80155de:	7cfb      	ldrb	r3, [r7, #19]
 80155e0:	fa42 f303 	asr.w	r3, r2, r3
 80155e4:	f003 0301 	and.w	r3, r3, #1
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d07e      	beq.n	80156ea <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	689a      	ldr	r2, [r3, #8]
 80155f0:	7d79      	ldrb	r1, [r7, #21]
 80155f2:	7cfb      	ldrb	r3, [r7, #19]
 80155f4:	440b      	add	r3, r1
 80155f6:	4619      	mov	r1, r3
 80155f8:	460b      	mov	r3, r1
 80155fa:	005b      	lsls	r3, r3, #1
 80155fc:	440b      	add	r3, r1
 80155fe:	009b      	lsls	r3, r3, #2
 8015600:	4413      	add	r3, r2
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d06b      	beq.n	80156e0 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	781b      	ldrb	r3, [r3, #0]
 801560c:	f083 0301 	eor.w	r3, r3, #1
 8015610:	b2db      	uxtb	r3, r3
 8015612:	2b00      	cmp	r3, #0
 8015614:	d011      	beq.n	801563a <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801561a:	2b00      	cmp	r3, #0
 801561c:	d00d      	beq.n	801563a <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	695a      	ldr	r2, [r3, #20]
 8015622:	7d3b      	ldrb	r3, [r7, #20]
 8015624:	005b      	lsls	r3, r3, #1
 8015626:	4413      	add	r3, r2
 8015628:	881b      	ldrh	r3, [r3, #0]
 801562a:	461a      	mov	r2, r3
 801562c:	7cfb      	ldrb	r3, [r7, #19]
 801562e:	fa42 f303 	asr.w	r3, r2, r3
 8015632:	f003 0301 	and.w	r3, r3, #1
 8015636:	2b00      	cmp	r3, #0
 8015638:	d054      	beq.n	80156e4 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	785b      	ldrb	r3, [r3, #1]
 801563e:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	689a      	ldr	r2, [r3, #8]
 8015644:	7d79      	ldrb	r1, [r7, #21]
 8015646:	7cfb      	ldrb	r3, [r7, #19]
 8015648:	440b      	add	r3, r1
 801564a:	4619      	mov	r1, r3
 801564c:	460b      	mov	r3, r1
 801564e:	005b      	lsls	r3, r3, #1
 8015650:	440b      	add	r3, r1
 8015652:	009b      	lsls	r3, r3, #2
 8015654:	4413      	add	r3, r2
 8015656:	7a1b      	ldrb	r3, [r3, #8]
 8015658:	f343 0303 	sbfx	r3, r3, #0, #4
 801565c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801565e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	689a      	ldr	r2, [r3, #8]
 8015664:	7d79      	ldrb	r1, [r7, #21]
 8015666:	7cfb      	ldrb	r3, [r7, #19]
 8015668:	440b      	add	r3, r1
 801566a:	4619      	mov	r1, r3
 801566c:	460b      	mov	r3, r1
 801566e:	005b      	lsls	r3, r3, #1
 8015670:	440b      	add	r3, r1
 8015672:	009b      	lsls	r3, r3, #2
 8015674:	4413      	add	r3, r2
 8015676:	7a1b      	ldrb	r3, [r3, #8]
 8015678:	f343 1303 	sbfx	r3, r3, #4, #4
 801567c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801567e:	461a      	mov	r2, r3
 8015680:	4621      	mov	r1, r4
 8015682:	f7ff fbe8 	bl	8014e56 <RegionCommonValueInRange>
 8015686:	4603      	mov	r3, r0
 8015688:	2b00      	cmp	r3, #0
 801568a:	d02d      	beq.n	80156e8 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	68da      	ldr	r2, [r3, #12]
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	6899      	ldr	r1, [r3, #8]
 8015694:	7d78      	ldrb	r0, [r7, #21]
 8015696:	7cfb      	ldrb	r3, [r7, #19]
 8015698:	4403      	add	r3, r0
 801569a:	4618      	mov	r0, r3
 801569c:	4603      	mov	r3, r0
 801569e:	005b      	lsls	r3, r3, #1
 80156a0:	4403      	add	r3, r0
 80156a2:	009b      	lsls	r3, r3, #2
 80156a4:	440b      	add	r3, r1
 80156a6:	7a5b      	ldrb	r3, [r3, #9]
 80156a8:	4619      	mov	r1, r3
 80156aa:	460b      	mov	r3, r1
 80156ac:	005b      	lsls	r3, r3, #1
 80156ae:	440b      	add	r3, r1
 80156b0:	00db      	lsls	r3, r3, #3
 80156b2:	4413      	add	r3, r2
 80156b4:	7d1b      	ldrb	r3, [r3, #20]
 80156b6:	f083 0301 	eor.w	r3, r3, #1
 80156ba:	b2db      	uxtb	r3, r3
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d003      	beq.n	80156c8 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80156c0:	7dbb      	ldrb	r3, [r7, #22]
 80156c2:	3301      	adds	r3, #1
 80156c4:	75bb      	strb	r3, [r7, #22]
                    continue;
 80156c6:	e010      	b.n	80156ea <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80156c8:	7dfb      	ldrb	r3, [r7, #23]
 80156ca:	1c5a      	adds	r2, r3, #1
 80156cc:	75fa      	strb	r2, [r7, #23]
 80156ce:	461a      	mov	r2, r3
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	4413      	add	r3, r2
 80156d4:	7d79      	ldrb	r1, [r7, #21]
 80156d6:	7cfa      	ldrb	r2, [r7, #19]
 80156d8:	440a      	add	r2, r1
 80156da:	b2d2      	uxtb	r2, r2
 80156dc:	701a      	strb	r2, [r3, #0]
 80156de:	e004      	b.n	80156ea <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80156e0:	bf00      	nop
 80156e2:	e002      	b.n	80156ea <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80156e4:	bf00      	nop
 80156e6:	e000      	b.n	80156ea <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80156e8:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80156ea:	7cfb      	ldrb	r3, [r7, #19]
 80156ec:	3301      	adds	r3, #1
 80156ee:	74fb      	strb	r3, [r7, #19]
 80156f0:	7cfb      	ldrb	r3, [r7, #19]
 80156f2:	2b0f      	cmp	r3, #15
 80156f4:	f67f af6c 	bls.w	80155d0 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80156f8:	7d7b      	ldrb	r3, [r7, #21]
 80156fa:	3310      	adds	r3, #16
 80156fc:	757b      	strb	r3, [r7, #21]
 80156fe:	7d3b      	ldrb	r3, [r7, #20]
 8015700:	3301      	adds	r3, #1
 8015702:	753b      	strb	r3, [r7, #20]
 8015704:	7d7b      	ldrb	r3, [r7, #21]
 8015706:	b29a      	uxth	r2, r3
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	8a1b      	ldrh	r3, [r3, #16]
 801570c:	429a      	cmp	r2, r3
 801570e:	f4ff af5c 	bcc.w	80155ca <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	7dfa      	ldrb	r2, [r7, #23]
 8015716:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	7dba      	ldrb	r2, [r7, #22]
 801571c:	701a      	strb	r2, [r3, #0]
}
 801571e:	bf00      	nop
 8015720:	371c      	adds	r7, #28
 8015722:	46bd      	mov	sp, r7
 8015724:	bd90      	pop	{r4, r7, pc}

08015726 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8015726:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015728:	b08b      	sub	sp, #44	; 0x2c
 801572a:	af04      	add	r7, sp, #16
 801572c:	60f8      	str	r0, [r7, #12]
 801572e:	60b9      	str	r1, [r7, #8]
 8015730:	607a      	str	r2, [r7, #4]
 8015732:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	685b      	ldr	r3, [r3, #4]
 8015738:	4618      	mov	r0, r3
 801573a:	f006 ff65 	bl	801c608 <UTIL_TIMER_GetElapsedTime>
 801573e:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	681a      	ldr	r2, [r3, #0]
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	1ad2      	subs	r2, r2, r3
 8015748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801574a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 801574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801574e:	2201      	movs	r2, #1
 8015750:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8015752:	683b      	ldr	r3, [r7, #0]
 8015754:	2200      	movs	r2, #0
 8015756:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	685b      	ldr	r3, [r3, #4]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d004      	beq.n	801576a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015764:	697a      	ldr	r2, [r7, #20]
 8015766:	429a      	cmp	r2, r3
 8015768:	d32b      	bcc.n	80157c2 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801576a:	68bb      	ldr	r3, [r7, #8]
 801576c:	2200      	movs	r2, #0
 801576e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	69db      	ldr	r3, [r3, #28]
 8015774:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801577a:	68dd      	ldr	r5, [r3, #12]
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	7a5e      	ldrb	r6, [r3, #9]
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	f893 c008 	ldrb.w	ip, [r3, #8]
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	7d1b      	ldrb	r3, [r3, #20]
 801578a:	68fa      	ldr	r2, [r7, #12]
 801578c:	6992      	ldr	r2, [r2, #24]
 801578e:	9203      	str	r2, [sp, #12]
 8015790:	68fa      	ldr	r2, [r7, #12]
 8015792:	f10d 0e04 	add.w	lr, sp, #4
 8015796:	320c      	adds	r2, #12
 8015798:	e892 0003 	ldmia.w	r2, {r0, r1}
 801579c:	e88e 0003 	stmia.w	lr, {r0, r1}
 80157a0:	9300      	str	r3, [sp, #0]
 80157a2:	4663      	mov	r3, ip
 80157a4:	4632      	mov	r2, r6
 80157a6:	4629      	mov	r1, r5
 80157a8:	4620      	mov	r0, r4
 80157aa:	f7ff fc25 	bl	8014ff8 <RegionCommonUpdateBandTimeOff>
 80157ae:	4602      	mov	r2, r0
 80157b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157b2:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	69d8      	ldr	r0, [r3, #28]
 80157b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ba:	683a      	ldr	r2, [r7, #0]
 80157bc:	6879      	ldr	r1, [r7, #4]
 80157be:	f7ff fef4 	bl	80155aa <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	781b      	ldrb	r3, [r3, #0]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d004      	beq.n	80157d4 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80157ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157cc:	2200      	movs	r2, #0
 80157ce:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80157d0:	2300      	movs	r3, #0
 80157d2:	e006      	b.n	80157e2 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80157d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157d6:	781b      	ldrb	r3, [r3, #0]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d001      	beq.n	80157e0 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80157dc:	230b      	movs	r3, #11
 80157de:	e000      	b.n	80157e2 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80157e0:	230c      	movs	r3, #12
    }
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	371c      	adds	r7, #28
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080157ea <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80157ea:	b5b0      	push	{r4, r5, r7, lr}
 80157ec:	b086      	sub	sp, #24
 80157ee:	af02      	add	r7, sp, #8
 80157f0:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	781b      	ldrb	r3, [r3, #0]
 80157f6:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	f993 2000 	ldrsb.w	r2, [r3]
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015804:	429a      	cmp	r2, r3
 8015806:	d103      	bne.n	8015810 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801580e:	e026      	b.n	801585e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8015810:	7bfb      	ldrb	r3, [r7, #15]
 8015812:	3b01      	subs	r3, #1
 8015814:	b2db      	uxtb	r3, r3
 8015816:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801581e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015822:	429a      	cmp	r2, r3
 8015824:	d019      	beq.n	801585a <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	78d8      	ldrb	r0, [r3, #3]
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	6859      	ldr	r1, [r3, #4]
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801583a:	687a      	ldr	r2, [r7, #4]
 801583c:	6892      	ldr	r2, [r2, #8]
 801583e:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8015842:	9201      	str	r2, [sp, #4]
 8015844:	9300      	str	r3, [sp, #0]
 8015846:	462b      	mov	r3, r5
 8015848:	4622      	mov	r2, r4
 801584a:	f7ff fa92 	bl	8014d72 <RegionCommonChanVerifyDr>
 801584e:	4603      	mov	r3, r0
 8015850:	f083 0301 	eor.w	r3, r3, #1
 8015854:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8015856:	2b00      	cmp	r3, #0
 8015858:	d1da      	bne.n	8015810 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801585a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801585e:	4618      	mov	r0, r3
 8015860:	3710      	adds	r7, #16
 8015862:	46bd      	mov	sp, r7
 8015864:	bdb0      	pop	{r4, r5, r7, pc}

08015866 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8015866:	b480      	push	{r7}
 8015868:	b083      	sub	sp, #12
 801586a:	af00      	add	r7, sp, #0
 801586c:	4603      	mov	r3, r0
 801586e:	460a      	mov	r2, r1
 8015870:	71fb      	strb	r3, [r7, #7]
 8015872:	4613      	mov	r3, r2
 8015874:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8015876:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801587a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801587e:	4293      	cmp	r3, r2
 8015880:	bfb8      	it	lt
 8015882:	4613      	movlt	r3, r2
 8015884:	b25b      	sxtb	r3, r3
}
 8015886:	4618      	mov	r0, r3
 8015888:	370c      	adds	r7, #12
 801588a:	46bd      	mov	sp, r7
 801588c:	bc80      	pop	{r7}
 801588e:	4770      	bx	lr

08015890 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8015890:	b480      	push	{r7}
 8015892:	b083      	sub	sp, #12
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	009b      	lsls	r3, r3, #2
 801589e:	683a      	ldr	r2, [r7, #0]
 80158a0:	4413      	add	r3, r2
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	4a07      	ldr	r2, [pc, #28]	; (80158c4 <RegionCommonGetBandwidth+0x34>)
 80158a6:	4293      	cmp	r3, r2
 80158a8:	d004      	beq.n	80158b4 <RegionCommonGetBandwidth+0x24>
 80158aa:	4a07      	ldr	r2, [pc, #28]	; (80158c8 <RegionCommonGetBandwidth+0x38>)
 80158ac:	4293      	cmp	r3, r2
 80158ae:	d003      	beq.n	80158b8 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80158b0:	2300      	movs	r3, #0
 80158b2:	e002      	b.n	80158ba <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80158b4:	2301      	movs	r3, #1
 80158b6:	e000      	b.n	80158ba <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80158b8:	2302      	movs	r3, #2
    }
}
 80158ba:	4618      	mov	r0, r3
 80158bc:	370c      	adds	r7, #12
 80158be:	46bd      	mov	sp, r7
 80158c0:	bc80      	pop	{r7}
 80158c2:	4770      	bx	lr
 80158c4:	0003d090 	.word	0x0003d090
 80158c8:	0007a120 	.word	0x0007a120

080158cc <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b086      	sub	sp, #24
 80158d0:	af04      	add	r7, sp, #16
 80158d2:	4603      	mov	r3, r0
 80158d4:	6039      	str	r1, [r7, #0]
 80158d6:	71fb      	strb	r3, [r7, #7]
 80158d8:	4613      	mov	r3, r2
 80158da:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80158dc:	79fb      	ldrb	r3, [r7, #7]
 80158de:	2b05      	cmp	r3, #5
 80158e0:	d810      	bhi.n	8015904 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80158e2:	79fb      	ldrb	r3, [r7, #7]
 80158e4:	4a0f      	ldr	r2, [pc, #60]	; (8015924 <RegionCommonRxConfigPrint+0x58>)
 80158e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80158ea:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80158ee:	9202      	str	r2, [sp, #8]
 80158f0:	683a      	ldr	r2, [r7, #0]
 80158f2:	9201      	str	r2, [sp, #4]
 80158f4:	9300      	str	r3, [sp, #0]
 80158f6:	4b0c      	ldr	r3, [pc, #48]	; (8015928 <RegionCommonRxConfigPrint+0x5c>)
 80158f8:	2201      	movs	r2, #1
 80158fa:	2100      	movs	r1, #0
 80158fc:	2002      	movs	r0, #2
 80158fe:	f006 ff61 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8015902:	e00a      	b.n	801591a <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015904:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015908:	9301      	str	r3, [sp, #4]
 801590a:	683b      	ldr	r3, [r7, #0]
 801590c:	9300      	str	r3, [sp, #0]
 801590e:	4b07      	ldr	r3, [pc, #28]	; (801592c <RegionCommonRxConfigPrint+0x60>)
 8015910:	2201      	movs	r2, #1
 8015912:	2100      	movs	r1, #0
 8015914:	2002      	movs	r0, #2
 8015916:	f006 ff55 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 801591a:	bf00      	nop
 801591c:	3708      	adds	r7, #8
 801591e:	46bd      	mov	sp, r7
 8015920:	bd80      	pop	{r7, pc}
 8015922:	bf00      	nop
 8015924:	20000128 	.word	0x20000128
 8015928:	0801d5ec 	.word	0x0801d5ec
 801592c:	0801d60c 	.word	0x0801d60c

08015930 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b084      	sub	sp, #16
 8015934:	af02      	add	r7, sp, #8
 8015936:	6078      	str	r0, [r7, #4]
 8015938:	460b      	mov	r3, r1
 801593a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801593c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015940:	9301      	str	r3, [sp, #4]
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	9300      	str	r3, [sp, #0]
 8015946:	4b05      	ldr	r3, [pc, #20]	; (801595c <RegionCommonTxConfigPrint+0x2c>)
 8015948:	2201      	movs	r2, #1
 801594a:	2100      	movs	r1, #0
 801594c:	2002      	movs	r0, #2
 801594e:	f006 ff39 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8015952:	bf00      	nop
 8015954:	3708      	adds	r7, #8
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}
 801595a:	bf00      	nop
 801595c:	0801d628 	.word	0x0801d628

08015960 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b082      	sub	sp, #8
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801596a:	4b2d      	ldr	r3, [pc, #180]	; (8015a20 <VerifyRfFreq+0xc0>)
 801596c:	6a1b      	ldr	r3, [r3, #32]
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	4798      	blx	r3
 8015972:	4603      	mov	r3, r0
 8015974:	f083 0301 	eor.w	r3, r3, #1
 8015978:	b2db      	uxtb	r3, r3
 801597a:	2b00      	cmp	r3, #0
 801597c:	d001      	beq.n	8015982 <VerifyRfFreq+0x22>
    {
        return false;
 801597e:	2300      	movs	r3, #0
 8015980:	e04a      	b.n	8015a18 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	4a27      	ldr	r2, [pc, #156]	; (8015a24 <VerifyRfFreq+0xc4>)
 8015986:	4293      	cmp	r3, r2
 8015988:	d307      	bcc.n	801599a <VerifyRfFreq+0x3a>
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	4a26      	ldr	r2, [pc, #152]	; (8015a28 <VerifyRfFreq+0xc8>)
 801598e:	4293      	cmp	r3, r2
 8015990:	d803      	bhi.n	801599a <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8015992:	683b      	ldr	r3, [r7, #0]
 8015994:	2202      	movs	r2, #2
 8015996:	701a      	strb	r2, [r3, #0]
 8015998:	e03d      	b.n	8015a16 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	4a22      	ldr	r2, [pc, #136]	; (8015a28 <VerifyRfFreq+0xc8>)
 801599e:	4293      	cmp	r3, r2
 80159a0:	d907      	bls.n	80159b2 <VerifyRfFreq+0x52>
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	4a21      	ldr	r2, [pc, #132]	; (8015a2c <VerifyRfFreq+0xcc>)
 80159a6:	4293      	cmp	r3, r2
 80159a8:	d803      	bhi.n	80159b2 <VerifyRfFreq+0x52>
    {
        *band = 0;
 80159aa:	683b      	ldr	r3, [r7, #0]
 80159ac:	2200      	movs	r2, #0
 80159ae:	701a      	strb	r2, [r3, #0]
 80159b0:	e031      	b.n	8015a16 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	4a1d      	ldr	r2, [pc, #116]	; (8015a2c <VerifyRfFreq+0xcc>)
 80159b6:	4293      	cmp	r3, r2
 80159b8:	d907      	bls.n	80159ca <VerifyRfFreq+0x6a>
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	4a1c      	ldr	r2, [pc, #112]	; (8015a30 <VerifyRfFreq+0xd0>)
 80159be:	4293      	cmp	r3, r2
 80159c0:	d803      	bhi.n	80159ca <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80159c2:	683b      	ldr	r3, [r7, #0]
 80159c4:	2201      	movs	r2, #1
 80159c6:	701a      	strb	r2, [r3, #0]
 80159c8:	e025      	b.n	8015a16 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	4a19      	ldr	r2, [pc, #100]	; (8015a34 <VerifyRfFreq+0xd4>)
 80159ce:	4293      	cmp	r3, r2
 80159d0:	d907      	bls.n	80159e2 <VerifyRfFreq+0x82>
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	4a18      	ldr	r2, [pc, #96]	; (8015a38 <VerifyRfFreq+0xd8>)
 80159d6:	4293      	cmp	r3, r2
 80159d8:	d803      	bhi.n	80159e2 <VerifyRfFreq+0x82>
    {
        *band = 5;
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	2205      	movs	r2, #5
 80159de:	701a      	strb	r2, [r3, #0]
 80159e0:	e019      	b.n	8015a16 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	4a15      	ldr	r2, [pc, #84]	; (8015a3c <VerifyRfFreq+0xdc>)
 80159e6:	4293      	cmp	r3, r2
 80159e8:	d907      	bls.n	80159fa <VerifyRfFreq+0x9a>
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	4a14      	ldr	r2, [pc, #80]	; (8015a40 <VerifyRfFreq+0xe0>)
 80159ee:	4293      	cmp	r3, r2
 80159f0:	d803      	bhi.n	80159fa <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80159f2:	683b      	ldr	r3, [r7, #0]
 80159f4:	2203      	movs	r2, #3
 80159f6:	701a      	strb	r2, [r3, #0]
 80159f8:	e00d      	b.n	8015a16 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	4a11      	ldr	r2, [pc, #68]	; (8015a44 <VerifyRfFreq+0xe4>)
 80159fe:	4293      	cmp	r3, r2
 8015a00:	d307      	bcc.n	8015a12 <VerifyRfFreq+0xb2>
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	4a10      	ldr	r2, [pc, #64]	; (8015a48 <VerifyRfFreq+0xe8>)
 8015a06:	4293      	cmp	r3, r2
 8015a08:	d803      	bhi.n	8015a12 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8015a0a:	683b      	ldr	r3, [r7, #0]
 8015a0c:	2204      	movs	r2, #4
 8015a0e:	701a      	strb	r2, [r3, #0]
 8015a10:	e001      	b.n	8015a16 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8015a12:	2300      	movs	r3, #0
 8015a14:	e000      	b.n	8015a18 <VerifyRfFreq+0xb8>
    }
    return true;
 8015a16:	2301      	movs	r3, #1
}
 8015a18:	4618      	mov	r0, r3
 8015a1a:	3708      	adds	r7, #8
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bd80      	pop	{r7, pc}
 8015a20:	0801dc4c 	.word	0x0801dc4c
 8015a24:	337055c0 	.word	0x337055c0
 8015a28:	338eda3f 	.word	0x338eda3f
 8015a2c:	33bca100 	.word	0x33bca100
 8015a30:	33c5c8c0 	.word	0x33c5c8c0
 8015a34:	33c74f5f 	.word	0x33c74f5f
 8015a38:	33cef080 	.word	0x33cef080
 8015a3c:	33d1fdbf 	.word	0x33d1fdbf
 8015a40:	33d5ce50 	.word	0x33d5ce50
 8015a44:	33d691a0 	.word	0x33d691a0
 8015a48:	33db2580 	.word	0x33db2580

08015a4c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8015a4c:	b590      	push	{r4, r7, lr}
 8015a4e:	b08b      	sub	sp, #44	; 0x2c
 8015a50:	af04      	add	r7, sp, #16
 8015a52:	4603      	mov	r3, r0
 8015a54:	460a      	mov	r2, r1
 8015a56:	71fb      	strb	r3, [r7, #7]
 8015a58:	4613      	mov	r3, r2
 8015a5a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8015a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a60:	4a1f      	ldr	r2, [pc, #124]	; (8015ae0 <GetTimeOnAir+0x94>)
 8015a62:	5cd3      	ldrb	r3, [r2, r3]
 8015a64:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8015a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a6a:	491e      	ldr	r1, [pc, #120]	; (8015ae4 <GetTimeOnAir+0x98>)
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7ff ff0f 	bl	8015890 <RegionCommonGetBandwidth>
 8015a72:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8015a74:	2300      	movs	r3, #0
 8015a76:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8015a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a7c:	2b07      	cmp	r3, #7
 8015a7e:	d118      	bne.n	8015ab2 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8015a80:	4b19      	ldr	r3, [pc, #100]	; (8015ae8 <GetTimeOnAir+0x9c>)
 8015a82:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015a84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015a88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015a8c:	fb02 f303 	mul.w	r3, r2, r3
 8015a90:	4619      	mov	r1, r3
 8015a92:	88bb      	ldrh	r3, [r7, #4]
 8015a94:	b2db      	uxtb	r3, r3
 8015a96:	2201      	movs	r2, #1
 8015a98:	9203      	str	r2, [sp, #12]
 8015a9a:	9302      	str	r3, [sp, #8]
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	9301      	str	r3, [sp, #4]
 8015aa0:	2305      	movs	r3, #5
 8015aa2:	9300      	str	r3, [sp, #0]
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	460a      	mov	r2, r1
 8015aa8:	68f9      	ldr	r1, [r7, #12]
 8015aaa:	2000      	movs	r0, #0
 8015aac:	47a0      	blx	r4
 8015aae:	6178      	str	r0, [r7, #20]
 8015ab0:	e011      	b.n	8015ad6 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8015ab2:	4b0d      	ldr	r3, [pc, #52]	; (8015ae8 <GetTimeOnAir+0x9c>)
 8015ab4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015ab6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015aba:	88bb      	ldrh	r3, [r7, #4]
 8015abc:	b2db      	uxtb	r3, r3
 8015abe:	2101      	movs	r1, #1
 8015ac0:	9103      	str	r1, [sp, #12]
 8015ac2:	9302      	str	r3, [sp, #8]
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	9301      	str	r3, [sp, #4]
 8015ac8:	2308      	movs	r3, #8
 8015aca:	9300      	str	r3, [sp, #0]
 8015acc:	2301      	movs	r3, #1
 8015ace:	68f9      	ldr	r1, [r7, #12]
 8015ad0:	2001      	movs	r0, #1
 8015ad2:	47a0      	blx	r4
 8015ad4:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8015ad6:	697b      	ldr	r3, [r7, #20]
}
 8015ad8:	4618      	mov	r0, r3
 8015ada:	371c      	adds	r7, #28
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd90      	pop	{r4, r7, pc}
 8015ae0:	0801db90 	.word	0x0801db90
 8015ae4:	0801db98 	.word	0x0801db98
 8015ae8:	0801dc4c 	.word	0x0801dc4c

08015aec <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b088      	sub	sp, #32
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015af4:	2300      	movs	r3, #0
 8015af6:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	781b      	ldrb	r3, [r3, #0]
 8015afc:	3b01      	subs	r3, #1
 8015afe:	2b37      	cmp	r3, #55	; 0x37
 8015b00:	f200 8122 	bhi.w	8015d48 <RegionEU868GetPhyParam+0x25c>
 8015b04:	a201      	add	r2, pc, #4	; (adr r2, 8015b0c <RegionEU868GetPhyParam+0x20>)
 8015b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b0a:	bf00      	nop
 8015b0c:	08015bed 	.word	0x08015bed
 8015b10:	08015bf3 	.word	0x08015bf3
 8015b14:	08015d49 	.word	0x08015d49
 8015b18:	08015d49 	.word	0x08015d49
 8015b1c:	08015d49 	.word	0x08015d49
 8015b20:	08015bf9 	.word	0x08015bf9
 8015b24:	08015d49 	.word	0x08015d49
 8015b28:	08015c33 	.word	0x08015c33
 8015b2c:	08015d49 	.word	0x08015d49
 8015b30:	08015c39 	.word	0x08015c39
 8015b34:	08015c3f 	.word	0x08015c3f
 8015b38:	08015c45 	.word	0x08015c45
 8015b3c:	08015c4b 	.word	0x08015c4b
 8015b40:	08015c5b 	.word	0x08015c5b
 8015b44:	08015c6b 	.word	0x08015c6b
 8015b48:	08015c71 	.word	0x08015c71
 8015b4c:	08015c79 	.word	0x08015c79
 8015b50:	08015c81 	.word	0x08015c81
 8015b54:	08015c89 	.word	0x08015c89
 8015b58:	08015c91 	.word	0x08015c91
 8015b5c:	08015c99 	.word	0x08015c99
 8015b60:	08015cad 	.word	0x08015cad
 8015b64:	08015cb3 	.word	0x08015cb3
 8015b68:	08015cb9 	.word	0x08015cb9
 8015b6c:	08015cbf 	.word	0x08015cbf
 8015b70:	08015ccb 	.word	0x08015ccb
 8015b74:	08015cd7 	.word	0x08015cd7
 8015b78:	08015cdd 	.word	0x08015cdd
 8015b7c:	08015ce5 	.word	0x08015ce5
 8015b80:	08015ceb 	.word	0x08015ceb
 8015b84:	08015cf1 	.word	0x08015cf1
 8015b88:	08015cf9 	.word	0x08015cf9
 8015b8c:	08015bff 	.word	0x08015bff
 8015b90:	08015d49 	.word	0x08015d49
 8015b94:	08015d49 	.word	0x08015d49
 8015b98:	08015d49 	.word	0x08015d49
 8015b9c:	08015d49 	.word	0x08015d49
 8015ba0:	08015d49 	.word	0x08015d49
 8015ba4:	08015d49 	.word	0x08015d49
 8015ba8:	08015d49 	.word	0x08015d49
 8015bac:	08015d49 	.word	0x08015d49
 8015bb0:	08015d49 	.word	0x08015d49
 8015bb4:	08015d49 	.word	0x08015d49
 8015bb8:	08015d49 	.word	0x08015d49
 8015bbc:	08015d49 	.word	0x08015d49
 8015bc0:	08015d49 	.word	0x08015d49
 8015bc4:	08015cff 	.word	0x08015cff
 8015bc8:	08015d05 	.word	0x08015d05
 8015bcc:	08015d13 	.word	0x08015d13
 8015bd0:	08015d49 	.word	0x08015d49
 8015bd4:	08015d49 	.word	0x08015d49
 8015bd8:	08015d19 	.word	0x08015d19
 8015bdc:	08015d1f 	.word	0x08015d1f
 8015be0:	08015d49 	.word	0x08015d49
 8015be4:	08015d25 	.word	0x08015d25
 8015be8:	08015d35 	.word	0x08015d35
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8015bec:	2300      	movs	r3, #0
 8015bee:	61bb      	str	r3, [r7, #24]
            break;
 8015bf0:	e0ab      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	61bb      	str	r3, [r7, #24]
            break;
 8015bf6:	e0a8      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	61bb      	str	r3, [r7, #24]
            break;
 8015bfc:	e0a5      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015c04:	733b      	strb	r3, [r7, #12]
 8015c06:	2307      	movs	r3, #7
 8015c08:	737b      	strb	r3, [r7, #13]
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	73bb      	strb	r3, [r7, #14]
 8015c0e:	2310      	movs	r3, #16
 8015c10:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8015c12:	4b51      	ldr	r3, [pc, #324]	; (8015d58 <RegionEU868GetPhyParam+0x26c>)
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015c1a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015c1c:	4b4e      	ldr	r3, [pc, #312]	; (8015d58 <RegionEU868GetPhyParam+0x26c>)
 8015c1e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015c20:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015c22:	f107 030c 	add.w	r3, r7, #12
 8015c26:	4618      	mov	r0, r3
 8015c28:	f7ff fddf 	bl	80157ea <RegionCommonGetNextLowerTxDr>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	61bb      	str	r3, [r7, #24]
            break;
 8015c30:	e08b      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8015c32:	2300      	movs	r3, #0
 8015c34:	61bb      	str	r3, [r7, #24]
            break;
 8015c36:	e088      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8015c38:	2300      	movs	r3, #0
 8015c3a:	61bb      	str	r3, [r7, #24]
            break;
 8015c3c:	e085      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015c3e:	2340      	movs	r3, #64	; 0x40
 8015c40:	61bb      	str	r3, [r7, #24]
            break;
 8015c42:	e082      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015c44:	2320      	movs	r3, #32
 8015c46:	61bb      	str	r3, [r7, #24]
            break;
 8015c48:	e07f      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015c50:	461a      	mov	r2, r3
 8015c52:	4b42      	ldr	r3, [pc, #264]	; (8015d5c <RegionEU868GetPhyParam+0x270>)
 8015c54:	5c9b      	ldrb	r3, [r3, r2]
 8015c56:	61bb      	str	r3, [r7, #24]
            break;
 8015c58:	e077      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015c60:	461a      	mov	r2, r3
 8015c62:	4b3f      	ldr	r3, [pc, #252]	; (8015d60 <RegionEU868GetPhyParam+0x274>)
 8015c64:	5c9b      	ldrb	r3, [r3, r2]
 8015c66:	61bb      	str	r3, [r7, #24]
            break;
 8015c68:	e06f      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8015c6a:	2301      	movs	r3, #1
 8015c6c:	61bb      	str	r3, [r7, #24]
            break;
 8015c6e:	e06c      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8015c70:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8015c74:	61bb      	str	r3, [r7, #24]
            break;
 8015c76:	e068      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8015c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015c7c:	61bb      	str	r3, [r7, #24]
            break;
 8015c7e:	e064      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8015c80:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8015c84:	61bb      	str	r3, [r7, #24]
            break;
 8015c86:	e060      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8015c88:	f241 3388 	movw	r3, #5000	; 0x1388
 8015c8c:	61bb      	str	r3, [r7, #24]
            break;
 8015c8e:	e05c      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8015c90:	f241 7370 	movw	r3, #6000	; 0x1770
 8015c94:	61bb      	str	r3, [r7, #24]
            break;
 8015c96:	e058      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8015c98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015c9c:	4831      	ldr	r0, [pc, #196]	; (8015d64 <RegionEU868GetPhyParam+0x278>)
 8015c9e:	f002 fa27 	bl	80180f0 <randr>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8015ca8:	61bb      	str	r3, [r7, #24]
            break;
 8015caa:	e04e      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8015cac:	2300      	movs	r3, #0
 8015cae:	61bb      	str	r3, [r7, #24]
            break;
 8015cb0:	e04b      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8015cb2:	4b2d      	ldr	r3, [pc, #180]	; (8015d68 <RegionEU868GetPhyParam+0x27c>)
 8015cb4:	61bb      	str	r3, [r7, #24]
            break;
 8015cb6:	e048      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8015cb8:	2300      	movs	r3, #0
 8015cba:	61bb      	str	r3, [r7, #24]
            break;
 8015cbc:	e045      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015cbe:	4b26      	ldr	r3, [pc, #152]	; (8015d58 <RegionEU868GetPhyParam+0x26c>)
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8015cc6:	61bb      	str	r3, [r7, #24]
            break;
 8015cc8:	e03f      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8015cca:	4b23      	ldr	r3, [pc, #140]	; (8015d58 <RegionEU868GetPhyParam+0x26c>)
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8015cd2:	61bb      	str	r3, [r7, #24]
            break;
 8015cd4:	e039      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8015cd6:	2310      	movs	r3, #16
 8015cd8:	61bb      	str	r3, [r7, #24]
            break;
 8015cda:	e036      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015cdc:	4b1e      	ldr	r3, [pc, #120]	; (8015d58 <RegionEU868GetPhyParam+0x26c>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	61bb      	str	r3, [r7, #24]
            break;
 8015ce2:	e032      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	61bb      	str	r3, [r7, #24]
            break;
 8015ce8:	e02f      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8015cea:	2300      	movs	r3, #0
 8015cec:	61bb      	str	r3, [r7, #24]
            break;
 8015cee:	e02c      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8015cf0:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8015cf4:	61bb      	str	r3, [r7, #24]
            break;
 8015cf6:	e028      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8015cf8:	4b1c      	ldr	r3, [pc, #112]	; (8015d6c <RegionEU868GetPhyParam+0x280>)
 8015cfa:	61bb      	str	r3, [r7, #24]
            break;
 8015cfc:	e025      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8015cfe:	4b1a      	ldr	r3, [pc, #104]	; (8015d68 <RegionEU868GetPhyParam+0x27c>)
 8015d00:	61bb      	str	r3, [r7, #24]
            break;
 8015d02:	e022      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8015d04:	2311      	movs	r3, #17
 8015d06:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8015d08:	2301      	movs	r3, #1
 8015d0a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	76bb      	strb	r3, [r7, #26]
            break;
 8015d10:	e01b      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8015d12:	2303      	movs	r3, #3
 8015d14:	61bb      	str	r3, [r7, #24]
            break;
 8015d16:	e018      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8015d18:	4b13      	ldr	r3, [pc, #76]	; (8015d68 <RegionEU868GetPhyParam+0x27c>)
 8015d1a:	61bb      	str	r3, [r7, #24]
            break;
 8015d1c:	e015      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8015d1e:	2303      	movs	r3, #3
 8015d20:	61bb      	str	r3, [r7, #24]
            break;
 8015d22:	e012      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015d2a:	461a      	mov	r2, r3
 8015d2c:	4b10      	ldr	r3, [pc, #64]	; (8015d70 <RegionEU868GetPhyParam+0x284>)
 8015d2e:	5c9b      	ldrb	r3, [r3, r2]
 8015d30:	61bb      	str	r3, [r7, #24]
            break;
 8015d32:	e00a      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015d3a:	490e      	ldr	r1, [pc, #56]	; (8015d74 <RegionEU868GetPhyParam+0x288>)
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f7ff fda7 	bl	8015890 <RegionCommonGetBandwidth>
 8015d42:	4603      	mov	r3, r0
 8015d44:	61bb      	str	r3, [r7, #24]
            break;
 8015d46:	e000      	b.n	8015d4a <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8015d48:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8015d4a:	69bb      	ldr	r3, [r7, #24]
 8015d4c:	61fb      	str	r3, [r7, #28]
 8015d4e:	69fb      	ldr	r3, [r7, #28]
}
 8015d50:	4618      	mov	r0, r3
 8015d52:	3720      	adds	r7, #32
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd80      	pop	{r7, pc}
 8015d58:	20001984 	.word	0x20001984
 8015d5c:	0801dbb8 	.word	0x0801dbb8
 8015d60:	0801dbc0 	.word	0x0801dbc0
 8015d64:	fffffc18 	.word	0xfffffc18
 8015d68:	33d3e608 	.word	0x33d3e608
 8015d6c:	4009999a 	.word	0x4009999a
 8015d70:	0801db90 	.word	0x0801db90
 8015d74:	0801db98 	.word	0x0801db98

08015d78 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015d78:	b590      	push	{r4, r7, lr}
 8015d7a:	b085      	sub	sp, #20
 8015d7c:	af02      	add	r7, sp, #8
 8015d7e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8015d80:	4b11      	ldr	r3, [pc, #68]	; (8015dc8 <RegionEU868SetBandTxDone+0x50>)
 8015d82:	681a      	ldr	r2, [r3, #0]
 8015d84:	4b11      	ldr	r3, [pc, #68]	; (8015dcc <RegionEU868SetBandTxDone+0x54>)
 8015d86:	6819      	ldr	r1, [r3, #0]
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	781b      	ldrb	r3, [r3, #0]
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	4603      	mov	r3, r0
 8015d90:	005b      	lsls	r3, r3, #1
 8015d92:	4403      	add	r3, r0
 8015d94:	009b      	lsls	r3, r3, #2
 8015d96:	440b      	add	r3, r1
 8015d98:	3309      	adds	r3, #9
 8015d9a:	781b      	ldrb	r3, [r3, #0]
 8015d9c:	4619      	mov	r1, r3
 8015d9e:	460b      	mov	r3, r1
 8015da0:	005b      	lsls	r3, r3, #1
 8015da2:	440b      	add	r3, r1
 8015da4:	00db      	lsls	r3, r3, #3
 8015da6:	18d0      	adds	r0, r2, r3
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	6899      	ldr	r1, [r3, #8]
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	785c      	ldrb	r4, [r3, #1]
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	691a      	ldr	r2, [r3, #16]
 8015db4:	9200      	str	r2, [sp, #0]
 8015db6:	68db      	ldr	r3, [r3, #12]
 8015db8:	4622      	mov	r2, r4
 8015dba:	f7ff f8ef 	bl	8014f9c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8015dbe:	bf00      	nop
 8015dc0:	370c      	adds	r7, #12
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd90      	pop	{r4, r7, pc}
 8015dc6:	bf00      	nop
 8015dc8:	20001988 	.word	0x20001988
 8015dcc:	20001984 	.word	0x20001984

08015dd0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b0b0      	sub	sp, #192	; 0xc0
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8015dd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015ddc:	2290      	movs	r2, #144	; 0x90
 8015dde:	2100      	movs	r1, #0
 8015de0:	4618      	mov	r0, r3
 8015de2:	f006 ffe9 	bl	801cdb8 <memset>
 8015de6:	2364      	movs	r3, #100	; 0x64
 8015de8:	863b      	strh	r3, [r7, #48]	; 0x30
 8015dea:	2364      	movs	r3, #100	; 0x64
 8015dec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8015df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015df4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8015df8:	230a      	movs	r3, #10
 8015dfa:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8015dfe:	2364      	movs	r3, #100	; 0x64
 8015e00:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8015e04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015e08:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	7b1b      	ldrb	r3, [r3, #12]
 8015e10:	2b02      	cmp	r3, #2
 8015e12:	d05d      	beq.n	8015ed0 <RegionEU868InitDefaults+0x100>
 8015e14:	2b02      	cmp	r3, #2
 8015e16:	dc6a      	bgt.n	8015eee <RegionEU868InitDefaults+0x11e>
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d002      	beq.n	8015e22 <RegionEU868InitDefaults+0x52>
 8015e1c:	2b01      	cmp	r3, #1
 8015e1e:	d03e      	beq.n	8015e9e <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015e20:	e065      	b.n	8015eee <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d062      	beq.n	8015ef0 <RegionEU868InitDefaults+0x120>
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	685b      	ldr	r3, [r3, #4]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d05e      	beq.n	8015ef0 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	685b      	ldr	r3, [r3, #4]
 8015e36:	4a30      	ldr	r2, [pc, #192]	; (8015ef8 <RegionEU868InitDefaults+0x128>)
 8015e38:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	689b      	ldr	r3, [r3, #8]
 8015e3e:	4a2f      	ldr	r2, [pc, #188]	; (8015efc <RegionEU868InitDefaults+0x12c>)
 8015e40:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8015e42:	4b2e      	ldr	r3, [pc, #184]	; (8015efc <RegionEU868InitDefaults+0x12c>)
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015e4a:	2290      	movs	r2, #144	; 0x90
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	f002 f966 	bl	801811e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8015e52:	4b29      	ldr	r3, [pc, #164]	; (8015ef8 <RegionEU868InitDefaults+0x128>)
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	4a2a      	ldr	r2, [pc, #168]	; (8015f00 <RegionEU868InitDefaults+0x130>)
 8015e58:	ca07      	ldmia	r2, {r0, r1, r2}
 8015e5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8015e5e:	4b26      	ldr	r3, [pc, #152]	; (8015ef8 <RegionEU868InitDefaults+0x128>)
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	4a28      	ldr	r2, [pc, #160]	; (8015f04 <RegionEU868InitDefaults+0x134>)
 8015e64:	330c      	adds	r3, #12
 8015e66:	ca07      	ldmia	r2, {r0, r1, r2}
 8015e68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8015e6c:	4b22      	ldr	r3, [pc, #136]	; (8015ef8 <RegionEU868InitDefaults+0x128>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	4a25      	ldr	r2, [pc, #148]	; (8015f08 <RegionEU868InitDefaults+0x138>)
 8015e72:	3318      	adds	r3, #24
 8015e74:	ca07      	ldmia	r2, {r0, r1, r2}
 8015e76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8015e7a:	4b1f      	ldr	r3, [pc, #124]	; (8015ef8 <RegionEU868InitDefaults+0x128>)
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	2207      	movs	r2, #7
 8015e80:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015e84:	4b1c      	ldr	r3, [pc, #112]	; (8015ef8 <RegionEU868InitDefaults+0x128>)
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8015e8c:	4b1a      	ldr	r3, [pc, #104]	; (8015ef8 <RegionEU868InitDefaults+0x128>)
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8015e94:	2201      	movs	r2, #1
 8015e96:	4619      	mov	r1, r3
 8015e98:	f7ff f85a 	bl	8014f50 <RegionCommonChanMaskCopy>
 8015e9c:	e028      	b.n	8015ef0 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8015e9e:	4b16      	ldr	r3, [pc, #88]	; (8015ef8 <RegionEU868InitDefaults+0x128>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8015ea6:	4b14      	ldr	r3, [pc, #80]	; (8015ef8 <RegionEU868InitDefaults+0x128>)
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	2200      	movs	r2, #0
 8015eac:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8015eae:	4b12      	ldr	r3, [pc, #72]	; (8015ef8 <RegionEU868InitDefaults+0x128>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015eb6:	4b10      	ldr	r3, [pc, #64]	; (8015ef8 <RegionEU868InitDefaults+0x128>)
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8015ebe:	4b0e      	ldr	r3, [pc, #56]	; (8015ef8 <RegionEU868InitDefaults+0x128>)
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8015ec6:	2201      	movs	r2, #1
 8015ec8:	4619      	mov	r1, r3
 8015eca:	f7ff f841 	bl	8014f50 <RegionCommonChanMaskCopy>
            break;
 8015ece:	e00f      	b.n	8015ef0 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8015ed0:	4b09      	ldr	r3, [pc, #36]	; (8015ef8 <RegionEU868InitDefaults+0x128>)
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8015ed8:	4b07      	ldr	r3, [pc, #28]	; (8015ef8 <RegionEU868InitDefaults+0x128>)
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8015ee0:	4b05      	ldr	r3, [pc, #20]	; (8015ef8 <RegionEU868InitDefaults+0x128>)
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	430a      	orrs	r2, r1
 8015ee6:	b292      	uxth	r2, r2
 8015ee8:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8015eec:	e000      	b.n	8015ef0 <RegionEU868InitDefaults+0x120>
            break;
 8015eee:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015ef0:	37c0      	adds	r7, #192	; 0xc0
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bd80      	pop	{r7, pc}
 8015ef6:	bf00      	nop
 8015ef8:	20001984 	.word	0x20001984
 8015efc:	20001988 	.word	0x20001988
 8015f00:	0801d644 	.word	0x0801d644
 8015f04:	0801d650 	.word	0x0801d650
 8015f08:	0801d65c 	.word	0x0801d65c

08015f0c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b084      	sub	sp, #16
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
 8015f14:	460b      	mov	r3, r1
 8015f16:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8015f18:	78fb      	ldrb	r3, [r7, #3]
 8015f1a:	2b0f      	cmp	r3, #15
 8015f1c:	d86c      	bhi.n	8015ff8 <RegionEU868Verify+0xec>
 8015f1e:	a201      	add	r2, pc, #4	; (adr r2, 8015f24 <RegionEU868Verify+0x18>)
 8015f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f24:	08015f65 	.word	0x08015f65
 8015f28:	08015ff9 	.word	0x08015ff9
 8015f2c:	08015ff9 	.word	0x08015ff9
 8015f30:	08015ff9 	.word	0x08015ff9
 8015f34:	08015ff9 	.word	0x08015ff9
 8015f38:	08015f7d 	.word	0x08015f7d
 8015f3c:	08015f9b 	.word	0x08015f9b
 8015f40:	08015fb9 	.word	0x08015fb9
 8015f44:	08015ff9 	.word	0x08015ff9
 8015f48:	08015fd7 	.word	0x08015fd7
 8015f4c:	08015fd7 	.word	0x08015fd7
 8015f50:	08015ff9 	.word	0x08015ff9
 8015f54:	08015ff9 	.word	0x08015ff9
 8015f58:	08015ff9 	.word	0x08015ff9
 8015f5c:	08015ff9 	.word	0x08015ff9
 8015f60:	08015ff5 	.word	0x08015ff5
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8015f64:	2300      	movs	r3, #0
 8015f66:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	f107 020f 	add.w	r2, r7, #15
 8015f70:	4611      	mov	r1, r2
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7ff fcf4 	bl	8015960 <VerifyRfFreq>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	e03e      	b.n	8015ffa <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	f993 3000 	ldrsb.w	r3, [r3]
 8015f82:	2207      	movs	r2, #7
 8015f84:	2100      	movs	r1, #0
 8015f86:	4618      	mov	r0, r3
 8015f88:	f7fe ff65 	bl	8014e56 <RegionCommonValueInRange>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	bf14      	ite	ne
 8015f92:	2301      	movne	r3, #1
 8015f94:	2300      	moveq	r3, #0
 8015f96:	b2db      	uxtb	r3, r3
 8015f98:	e02f      	b.n	8015ffa <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	f993 3000 	ldrsb.w	r3, [r3]
 8015fa0:	2205      	movs	r2, #5
 8015fa2:	2100      	movs	r1, #0
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	f7fe ff56 	bl	8014e56 <RegionCommonValueInRange>
 8015faa:	4603      	mov	r3, r0
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	bf14      	ite	ne
 8015fb0:	2301      	movne	r3, #1
 8015fb2:	2300      	moveq	r3, #0
 8015fb4:	b2db      	uxtb	r3, r3
 8015fb6:	e020      	b.n	8015ffa <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f993 3000 	ldrsb.w	r3, [r3]
 8015fbe:	2207      	movs	r2, #7
 8015fc0:	2100      	movs	r1, #0
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	f7fe ff47 	bl	8014e56 <RegionCommonValueInRange>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	bf14      	ite	ne
 8015fce:	2301      	movne	r3, #1
 8015fd0:	2300      	moveq	r3, #0
 8015fd2:	b2db      	uxtb	r3, r3
 8015fd4:	e011      	b.n	8015ffa <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f993 3000 	ldrsb.w	r3, [r3]
 8015fdc:	2207      	movs	r2, #7
 8015fde:	2100      	movs	r1, #0
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f7fe ff38 	bl	8014e56 <RegionCommonValueInRange>
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	bf14      	ite	ne
 8015fec:	2301      	movne	r3, #1
 8015fee:	2300      	moveq	r3, #0
 8015ff0:	b2db      	uxtb	r3, r3
 8015ff2:	e002      	b.n	8015ffa <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8015ff4:	2301      	movs	r3, #1
 8015ff6:	e000      	b.n	8015ffa <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8015ff8:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	3710      	adds	r7, #16
 8015ffe:	46bd      	mov	sp, r7
 8016000:	bd80      	pop	{r7, pc}
 8016002:	bf00      	nop

08016004 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b08a      	sub	sp, #40	; 0x28
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801600c:	2350      	movs	r3, #80	; 0x50
 801600e:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	7a1b      	ldrb	r3, [r3, #8]
 8016016:	2b10      	cmp	r3, #16
 8016018:	d162      	bne.n	80160e0 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	685b      	ldr	r3, [r3, #4]
 801601e:	330f      	adds	r3, #15
 8016020:	781b      	ldrb	r3, [r3, #0]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d15e      	bne.n	80160e4 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016026:	2300      	movs	r3, #0
 8016028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801602c:	2303      	movs	r3, #3
 801602e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016032:	e050      	b.n	80160d6 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016034:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016038:	2b07      	cmp	r3, #7
 801603a:	d824      	bhi.n	8016086 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	685a      	ldr	r2, [r3, #4]
 8016040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016044:	4413      	add	r3, r2
 8016046:	781b      	ldrb	r3, [r3, #0]
 8016048:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801604a:	69ba      	ldr	r2, [r7, #24]
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	6859      	ldr	r1, [r3, #4]
 8016050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016054:	3301      	adds	r3, #1
 8016056:	440b      	add	r3, r1
 8016058:	781b      	ldrb	r3, [r3, #0]
 801605a:	021b      	lsls	r3, r3, #8
 801605c:	4313      	orrs	r3, r2
 801605e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8016060:	69ba      	ldr	r2, [r7, #24]
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	6859      	ldr	r1, [r3, #4]
 8016066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801606a:	3302      	adds	r3, #2
 801606c:	440b      	add	r3, r1
 801606e:	781b      	ldrb	r3, [r3, #0]
 8016070:	041b      	lsls	r3, r3, #16
 8016072:	4313      	orrs	r3, r2
 8016074:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8016076:	69bb      	ldr	r3, [r7, #24]
 8016078:	2264      	movs	r2, #100	; 0x64
 801607a:	fb02 f303 	mul.w	r3, r2, r3
 801607e:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016080:	2300      	movs	r3, #0
 8016082:	61fb      	str	r3, [r7, #28]
 8016084:	e006      	b.n	8016094 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8016086:	2300      	movs	r3, #0
 8016088:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801608a:	2300      	movs	r3, #0
 801608c:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016090:	2300      	movs	r3, #0
 8016092:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016094:	69bb      	ldr	r3, [r7, #24]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d00b      	beq.n	80160b2 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801609a:	f107 0318 	add.w	r3, r7, #24
 801609e:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80160a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80160a4:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80160a6:	f107 0310 	add.w	r3, r7, #16
 80160aa:	4618      	mov	r0, r3
 80160ac:	f000 fd0e 	bl	8016acc <RegionEU868ChannelAdd>
 80160b0:	e007      	b.n	80160c2 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80160b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80160b6:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80160b8:	f107 030c 	add.w	r3, r7, #12
 80160bc:	4618      	mov	r0, r3
 80160be:	f000 fda7 	bl	8016c10 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80160c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160c6:	3303      	adds	r3, #3
 80160c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80160cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80160d0:	3301      	adds	r3, #1
 80160d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80160d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80160da:	2b0f      	cmp	r3, #15
 80160dc:	d9aa      	bls.n	8016034 <RegionEU868ApplyCFList+0x30>
 80160de:	e002      	b.n	80160e6 <RegionEU868ApplyCFList+0xe2>
        return;
 80160e0:	bf00      	nop
 80160e2:	e000      	b.n	80160e6 <RegionEU868ApplyCFList+0xe2>
        return;
 80160e4:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80160e6:	3728      	adds	r7, #40	; 0x28
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}

080160ec <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b082      	sub	sp, #8
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	791b      	ldrb	r3, [r3, #4]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d002      	beq.n	8016102 <RegionEU868ChanMaskSet+0x16>
 80160fc:	2b01      	cmp	r3, #1
 80160fe:	d00b      	beq.n	8016118 <RegionEU868ChanMaskSet+0x2c>
 8016100:	e015      	b.n	801612e <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016102:	4b0e      	ldr	r3, [pc, #56]	; (801613c <RegionEU868ChanMaskSet+0x50>)
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	2201      	movs	r2, #1
 8016110:	4619      	mov	r1, r3
 8016112:	f7fe ff1d 	bl	8014f50 <RegionCommonChanMaskCopy>
            break;
 8016116:	e00c      	b.n	8016132 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016118:	4b08      	ldr	r3, [pc, #32]	; (801613c <RegionEU868ChanMaskSet+0x50>)
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	2201      	movs	r2, #1
 8016126:	4619      	mov	r1, r3
 8016128:	f7fe ff12 	bl	8014f50 <RegionCommonChanMaskCopy>
            break;
 801612c:	e001      	b.n	8016132 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801612e:	2300      	movs	r3, #0
 8016130:	e000      	b.n	8016134 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8016132:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016134:	4618      	mov	r0, r3
 8016136:	3708      	adds	r7, #8
 8016138:	46bd      	mov	sp, r7
 801613a:	bd80      	pop	{r7, pc}
 801613c:	20001984 	.word	0x20001984

08016140 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b088      	sub	sp, #32
 8016144:	af02      	add	r7, sp, #8
 8016146:	60ba      	str	r2, [r7, #8]
 8016148:	607b      	str	r3, [r7, #4]
 801614a:	4603      	mov	r3, r0
 801614c:	73fb      	strb	r3, [r7, #15]
 801614e:	460b      	mov	r3, r1
 8016150:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8016152:	2300      	movs	r3, #0
 8016154:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8016156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801615a:	2b07      	cmp	r3, #7
 801615c:	bfa8      	it	ge
 801615e:	2307      	movge	r3, #7
 8016160:	b25a      	sxtb	r2, r3
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801616c:	491e      	ldr	r1, [pc, #120]	; (80161e8 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801616e:	4618      	mov	r0, r3
 8016170:	f7ff fb8e 	bl	8015890 <RegionCommonGetBandwidth>
 8016174:	4603      	mov	r3, r0
 8016176:	b2da      	uxtb	r2, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016182:	2b07      	cmp	r3, #7
 8016184:	d10a      	bne.n	801619c <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801618c:	461a      	mov	r2, r3
 801618e:	4b17      	ldr	r3, [pc, #92]	; (80161ec <RegionEU868ComputeRxWindowParameters+0xac>)
 8016190:	5c9b      	ldrb	r3, [r3, r2]
 8016192:	4618      	mov	r0, r3
 8016194:	f7ff f910 	bl	80153b8 <RegionCommonComputeSymbolTimeFsk>
 8016198:	6178      	str	r0, [r7, #20]
 801619a:	e011      	b.n	80161c0 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80161a2:	461a      	mov	r2, r3
 80161a4:	4b11      	ldr	r3, [pc, #68]	; (80161ec <RegionEU868ComputeRxWindowParameters+0xac>)
 80161a6:	5c9a      	ldrb	r2, [r3, r2]
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80161ae:	4619      	mov	r1, r3
 80161b0:	4b0d      	ldr	r3, [pc, #52]	; (80161e8 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80161b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80161b6:	4619      	mov	r1, r3
 80161b8:	4610      	mov	r0, r2
 80161ba:	f7ff f8e7 	bl	801538c <RegionCommonComputeSymbolTimeLoRa>
 80161be:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80161c0:	4b0b      	ldr	r3, [pc, #44]	; (80161f0 <RegionEU868ComputeRxWindowParameters+0xb0>)
 80161c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80161c4:	4798      	blx	r3
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	3308      	adds	r3, #8
 80161ca:	687a      	ldr	r2, [r7, #4]
 80161cc:	320c      	adds	r2, #12
 80161ce:	7bb9      	ldrb	r1, [r7, #14]
 80161d0:	9201      	str	r2, [sp, #4]
 80161d2:	9300      	str	r3, [sp, #0]
 80161d4:	4603      	mov	r3, r0
 80161d6:	68ba      	ldr	r2, [r7, #8]
 80161d8:	6978      	ldr	r0, [r7, #20]
 80161da:	f7ff f8fd 	bl	80153d8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80161de:	bf00      	nop
 80161e0:	3718      	adds	r7, #24
 80161e2:	46bd      	mov	sp, r7
 80161e4:	bd80      	pop	{r7, pc}
 80161e6:	bf00      	nop
 80161e8:	0801db98 	.word	0x0801db98
 80161ec:	0801db90 	.word	0x0801db90
 80161f0:	0801dc4c 	.word	0x0801dc4c

080161f4 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80161f4:	b5b0      	push	{r4, r5, r7, lr}
 80161f6:	b090      	sub	sp, #64	; 0x40
 80161f8:	af0a      	add	r7, sp, #40	; 0x28
 80161fa:	6078      	str	r0, [r7, #4]
 80161fc:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	785b      	ldrb	r3, [r3, #1]
 8016202:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016204:	2300      	movs	r3, #0
 8016206:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8016208:	2300      	movs	r3, #0
 801620a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	685b      	ldr	r3, [r3, #4]
 8016210:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016212:	4b5a      	ldr	r3, [pc, #360]	; (801637c <RegionEU868RxConfig+0x188>)
 8016214:	685b      	ldr	r3, [r3, #4]
 8016216:	4798      	blx	r3
 8016218:	4603      	mov	r3, r0
 801621a:	2b00      	cmp	r3, #0
 801621c:	d001      	beq.n	8016222 <RegionEU868RxConfig+0x2e>
    {
        return false;
 801621e:	2300      	movs	r3, #0
 8016220:	e0a8      	b.n	8016374 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	7cdb      	ldrb	r3, [r3, #19]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d126      	bne.n	8016278 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801622a:	4b55      	ldr	r3, [pc, #340]	; (8016380 <RegionEU868RxConfig+0x18c>)
 801622c:	681a      	ldr	r2, [r3, #0]
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	781b      	ldrb	r3, [r3, #0]
 8016232:	4619      	mov	r1, r3
 8016234:	460b      	mov	r3, r1
 8016236:	005b      	lsls	r3, r3, #1
 8016238:	440b      	add	r3, r1
 801623a:	009b      	lsls	r3, r3, #2
 801623c:	4413      	add	r3, r2
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8016242:	4b4f      	ldr	r3, [pc, #316]	; (8016380 <RegionEU868RxConfig+0x18c>)
 8016244:	681a      	ldr	r2, [r3, #0]
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	781b      	ldrb	r3, [r3, #0]
 801624a:	4619      	mov	r1, r3
 801624c:	460b      	mov	r3, r1
 801624e:	005b      	lsls	r3, r3, #1
 8016250:	440b      	add	r3, r1
 8016252:	009b      	lsls	r3, r3, #2
 8016254:	4413      	add	r3, r2
 8016256:	3304      	adds	r3, #4
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d00c      	beq.n	8016278 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801625e:	4b48      	ldr	r3, [pc, #288]	; (8016380 <RegionEU868RxConfig+0x18c>)
 8016260:	681a      	ldr	r2, [r3, #0]
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	781b      	ldrb	r3, [r3, #0]
 8016266:	4619      	mov	r1, r3
 8016268:	460b      	mov	r3, r1
 801626a:	005b      	lsls	r3, r3, #1
 801626c:	440b      	add	r3, r1
 801626e:	009b      	lsls	r3, r3, #2
 8016270:	4413      	add	r3, r2
 8016272:	3304      	adds	r3, #4
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8016278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801627c:	4a41      	ldr	r2, [pc, #260]	; (8016384 <RegionEU868RxConfig+0x190>)
 801627e:	5cd3      	ldrb	r3, [r2, r3]
 8016280:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016282:	4b3e      	ldr	r3, [pc, #248]	; (801637c <RegionEU868RxConfig+0x188>)
 8016284:	68db      	ldr	r3, [r3, #12]
 8016286:	6938      	ldr	r0, [r7, #16]
 8016288:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801628a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801628e:	2b07      	cmp	r3, #7
 8016290:	d128      	bne.n	80162e4 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8016292:	2300      	movs	r3, #0
 8016294:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8016296:	4b39      	ldr	r3, [pc, #228]	; (801637c <RegionEU868RxConfig+0x188>)
 8016298:	699c      	ldr	r4, [r3, #24]
 801629a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801629e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80162a2:	fb02 f303 	mul.w	r3, r2, r3
 80162a6:	4619      	mov	r1, r3
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	689b      	ldr	r3, [r3, #8]
 80162ac:	b29b      	uxth	r3, r3
 80162ae:	687a      	ldr	r2, [r7, #4]
 80162b0:	7c92      	ldrb	r2, [r2, #18]
 80162b2:	7df8      	ldrb	r0, [r7, #23]
 80162b4:	9209      	str	r2, [sp, #36]	; 0x24
 80162b6:	2200      	movs	r2, #0
 80162b8:	9208      	str	r2, [sp, #32]
 80162ba:	2200      	movs	r2, #0
 80162bc:	9207      	str	r2, [sp, #28]
 80162be:	2200      	movs	r2, #0
 80162c0:	9206      	str	r2, [sp, #24]
 80162c2:	2201      	movs	r2, #1
 80162c4:	9205      	str	r2, [sp, #20]
 80162c6:	2200      	movs	r2, #0
 80162c8:	9204      	str	r2, [sp, #16]
 80162ca:	2200      	movs	r2, #0
 80162cc:	9203      	str	r2, [sp, #12]
 80162ce:	9302      	str	r3, [sp, #8]
 80162d0:	2305      	movs	r3, #5
 80162d2:	9301      	str	r3, [sp, #4]
 80162d4:	4b2c      	ldr	r3, [pc, #176]	; (8016388 <RegionEU868RxConfig+0x194>)
 80162d6:	9300      	str	r3, [sp, #0]
 80162d8:	2300      	movs	r3, #0
 80162da:	460a      	mov	r2, r1
 80162dc:	f24c 3150 	movw	r1, #50000	; 0xc350
 80162e0:	47a0      	blx	r4
 80162e2:	e024      	b.n	801632e <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80162e4:	2301      	movs	r3, #1
 80162e6:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80162e8:	4b24      	ldr	r3, [pc, #144]	; (801637c <RegionEU868RxConfig+0x188>)
 80162ea:	699c      	ldr	r4, [r3, #24]
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	789b      	ldrb	r3, [r3, #2]
 80162f0:	461d      	mov	r5, r3
 80162f2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	689b      	ldr	r3, [r3, #8]
 80162fa:	b29b      	uxth	r3, r3
 80162fc:	687a      	ldr	r2, [r7, #4]
 80162fe:	7c92      	ldrb	r2, [r2, #18]
 8016300:	7df8      	ldrb	r0, [r7, #23]
 8016302:	9209      	str	r2, [sp, #36]	; 0x24
 8016304:	2201      	movs	r2, #1
 8016306:	9208      	str	r2, [sp, #32]
 8016308:	2200      	movs	r2, #0
 801630a:	9207      	str	r2, [sp, #28]
 801630c:	2200      	movs	r2, #0
 801630e:	9206      	str	r2, [sp, #24]
 8016310:	2200      	movs	r2, #0
 8016312:	9205      	str	r2, [sp, #20]
 8016314:	2200      	movs	r2, #0
 8016316:	9204      	str	r2, [sp, #16]
 8016318:	2200      	movs	r2, #0
 801631a:	9203      	str	r2, [sp, #12]
 801631c:	9302      	str	r3, [sp, #8]
 801631e:	2308      	movs	r3, #8
 8016320:	9301      	str	r3, [sp, #4]
 8016322:	2300      	movs	r3, #0
 8016324:	9300      	str	r3, [sp, #0]
 8016326:	2301      	movs	r3, #1
 8016328:	460a      	mov	r2, r1
 801632a:	4629      	mov	r1, r5
 801632c:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	7c5b      	ldrb	r3, [r3, #17]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d005      	beq.n	8016342 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8016336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801633a:	4a14      	ldr	r2, [pc, #80]	; (801638c <RegionEU868RxConfig+0x198>)
 801633c:	5cd3      	ldrb	r3, [r2, r3]
 801633e:	75bb      	strb	r3, [r7, #22]
 8016340:	e004      	b.n	801634c <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8016342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016346:	4a12      	ldr	r2, [pc, #72]	; (8016390 <RegionEU868RxConfig+0x19c>)
 8016348:	5cd3      	ldrb	r3, [r2, r3]
 801634a:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801634c:	4b0b      	ldr	r3, [pc, #44]	; (801637c <RegionEU868RxConfig+0x188>)
 801634e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016350:	7dba      	ldrb	r2, [r7, #22]
 8016352:	320d      	adds	r2, #13
 8016354:	b2d1      	uxtb	r1, r2
 8016356:	7dfa      	ldrb	r2, [r7, #23]
 8016358:	4610      	mov	r0, r2
 801635a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	7cdb      	ldrb	r3, [r3, #19]
 8016360:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016364:	6939      	ldr	r1, [r7, #16]
 8016366:	4618      	mov	r0, r3
 8016368:	f7ff fab0 	bl	80158cc <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801636c:	683b      	ldr	r3, [r7, #0]
 801636e:	7bfa      	ldrb	r2, [r7, #15]
 8016370:	701a      	strb	r2, [r3, #0]
    return true;
 8016372:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016374:	4618      	mov	r0, r3
 8016376:	3718      	adds	r7, #24
 8016378:	46bd      	mov	sp, r7
 801637a:	bdb0      	pop	{r4, r5, r7, pc}
 801637c:	0801dc4c 	.word	0x0801dc4c
 8016380:	20001984 	.word	0x20001984
 8016384:	0801db90 	.word	0x0801db90
 8016388:	00014585 	.word	0x00014585
 801638c:	0801dbc0 	.word	0x0801dbc0
 8016390:	0801dbb8 	.word	0x0801dbb8

08016394 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016394:	b590      	push	{r4, r7, lr}
 8016396:	b093      	sub	sp, #76	; 0x4c
 8016398:	af0a      	add	r7, sp, #40	; 0x28
 801639a:	60f8      	str	r0, [r7, #12]
 801639c:	60b9      	str	r1, [r7, #8]
 801639e:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80163a6:	461a      	mov	r2, r3
 80163a8:	4b5d      	ldr	r3, [pc, #372]	; (8016520 <RegionEU868TxConfig+0x18c>)
 80163aa:	5c9b      	ldrb	r3, [r3, r2]
 80163ac:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80163b4:	4b5b      	ldr	r3, [pc, #364]	; (8016524 <RegionEU868TxConfig+0x190>)
 80163b6:	681a      	ldr	r2, [r3, #0]
 80163b8:	4b5b      	ldr	r3, [pc, #364]	; (8016528 <RegionEU868TxConfig+0x194>)
 80163ba:	6819      	ldr	r1, [r3, #0]
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	781b      	ldrb	r3, [r3, #0]
 80163c0:	461c      	mov	r4, r3
 80163c2:	4623      	mov	r3, r4
 80163c4:	005b      	lsls	r3, r3, #1
 80163c6:	4423      	add	r3, r4
 80163c8:	009b      	lsls	r3, r3, #2
 80163ca:	440b      	add	r3, r1
 80163cc:	3309      	adds	r3, #9
 80163ce:	781b      	ldrb	r3, [r3, #0]
 80163d0:	4619      	mov	r1, r3
 80163d2:	460b      	mov	r3, r1
 80163d4:	005b      	lsls	r3, r3, #1
 80163d6:	440b      	add	r3, r1
 80163d8:	00db      	lsls	r3, r3, #3
 80163da:	4413      	add	r3, r2
 80163dc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80163e0:	4619      	mov	r1, r3
 80163e2:	f7ff fa40 	bl	8015866 <RegionCommonLimitTxPower>
 80163e6:	4603      	mov	r3, r0
 80163e8:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80163f0:	494e      	ldr	r1, [pc, #312]	; (801652c <RegionEU868TxConfig+0x198>)
 80163f2:	4618      	mov	r0, r3
 80163f4:	f7ff fa4c 	bl	8015890 <RegionCommonGetBandwidth>
 80163f8:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80163fa:	2300      	movs	r3, #0
 80163fc:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	6859      	ldr	r1, [r3, #4]
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	689a      	ldr	r2, [r3, #8]
 8016406:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801640a:	4618      	mov	r0, r3
 801640c:	f7ff f89c 	bl	8015548 <RegionCommonComputeTxPower>
 8016410:	4603      	mov	r3, r0
 8016412:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8016414:	4b46      	ldr	r3, [pc, #280]	; (8016530 <RegionEU868TxConfig+0x19c>)
 8016416:	68da      	ldr	r2, [r3, #12]
 8016418:	4b43      	ldr	r3, [pc, #268]	; (8016528 <RegionEU868TxConfig+0x194>)
 801641a:	6819      	ldr	r1, [r3, #0]
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	781b      	ldrb	r3, [r3, #0]
 8016420:	4618      	mov	r0, r3
 8016422:	4603      	mov	r3, r0
 8016424:	005b      	lsls	r3, r3, #1
 8016426:	4403      	add	r3, r0
 8016428:	009b      	lsls	r3, r3, #2
 801642a:	440b      	add	r3, r1
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	4618      	mov	r0, r3
 8016430:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016438:	2b07      	cmp	r3, #7
 801643a:	d124      	bne.n	8016486 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801643c:	2300      	movs	r3, #0
 801643e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8016440:	4b3b      	ldr	r3, [pc, #236]	; (8016530 <RegionEU868TxConfig+0x19c>)
 8016442:	69dc      	ldr	r4, [r3, #28]
 8016444:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801644c:	fb02 f303 	mul.w	r3, r2, r3
 8016450:	461a      	mov	r2, r3
 8016452:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016456:	7ff8      	ldrb	r0, [r7, #31]
 8016458:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801645c:	9308      	str	r3, [sp, #32]
 801645e:	2300      	movs	r3, #0
 8016460:	9307      	str	r3, [sp, #28]
 8016462:	2300      	movs	r3, #0
 8016464:	9306      	str	r3, [sp, #24]
 8016466:	2300      	movs	r3, #0
 8016468:	9305      	str	r3, [sp, #20]
 801646a:	2301      	movs	r3, #1
 801646c:	9304      	str	r3, [sp, #16]
 801646e:	2300      	movs	r3, #0
 8016470:	9303      	str	r3, [sp, #12]
 8016472:	2305      	movs	r3, #5
 8016474:	9302      	str	r3, [sp, #8]
 8016476:	2300      	movs	r3, #0
 8016478:	9301      	str	r3, [sp, #4]
 801647a:	9200      	str	r2, [sp, #0]
 801647c:	69bb      	ldr	r3, [r7, #24]
 801647e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8016482:	47a0      	blx	r4
 8016484:	e01d      	b.n	80164c2 <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8016486:	2301      	movs	r3, #1
 8016488:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801648a:	4b29      	ldr	r3, [pc, #164]	; (8016530 <RegionEU868TxConfig+0x19c>)
 801648c:	69dc      	ldr	r4, [r3, #28]
 801648e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016492:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016496:	7ff8      	ldrb	r0, [r7, #31]
 8016498:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801649c:	9208      	str	r2, [sp, #32]
 801649e:	2200      	movs	r2, #0
 80164a0:	9207      	str	r2, [sp, #28]
 80164a2:	2200      	movs	r2, #0
 80164a4:	9206      	str	r2, [sp, #24]
 80164a6:	2200      	movs	r2, #0
 80164a8:	9205      	str	r2, [sp, #20]
 80164aa:	2201      	movs	r2, #1
 80164ac:	9204      	str	r2, [sp, #16]
 80164ae:	2200      	movs	r2, #0
 80164b0:	9203      	str	r2, [sp, #12]
 80164b2:	2208      	movs	r2, #8
 80164b4:	9202      	str	r2, [sp, #8]
 80164b6:	2201      	movs	r2, #1
 80164b8:	9201      	str	r2, [sp, #4]
 80164ba:	9300      	str	r3, [sp, #0]
 80164bc:	69bb      	ldr	r3, [r7, #24]
 80164be:	2200      	movs	r2, #0
 80164c0:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80164c2:	4b19      	ldr	r3, [pc, #100]	; (8016528 <RegionEU868TxConfig+0x194>)
 80164c4:	681a      	ldr	r2, [r3, #0]
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	781b      	ldrb	r3, [r3, #0]
 80164ca:	4619      	mov	r1, r3
 80164cc:	460b      	mov	r3, r1
 80164ce:	005b      	lsls	r3, r3, #1
 80164d0:	440b      	add	r3, r1
 80164d2:	009b      	lsls	r3, r3, #2
 80164d4:	4413      	add	r3, r2
 80164d6:	681a      	ldr	r2, [r3, #0]
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80164de:	4619      	mov	r1, r3
 80164e0:	4610      	mov	r0, r2
 80164e2:	f7ff fa25 	bl	8015930 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	899b      	ldrh	r3, [r3, #12]
 80164f0:	4619      	mov	r1, r3
 80164f2:	4610      	mov	r0, r2
 80164f4:	f7ff faaa 	bl	8015a4c <GetTimeOnAir>
 80164f8:	4602      	mov	r2, r0
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80164fe:	4b0c      	ldr	r3, [pc, #48]	; (8016530 <RegionEU868TxConfig+0x19c>)
 8016500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016502:	68fa      	ldr	r2, [r7, #12]
 8016504:	8992      	ldrh	r2, [r2, #12]
 8016506:	b2d1      	uxtb	r1, r2
 8016508:	7ffa      	ldrb	r2, [r7, #31]
 801650a:	4610      	mov	r0, r2
 801650c:	4798      	blx	r3

    *txPower = txPowerLimited;
 801650e:	68bb      	ldr	r3, [r7, #8]
 8016510:	7f7a      	ldrb	r2, [r7, #29]
 8016512:	701a      	strb	r2, [r3, #0]
    return true;
 8016514:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016516:	4618      	mov	r0, r3
 8016518:	3724      	adds	r7, #36	; 0x24
 801651a:	46bd      	mov	sp, r7
 801651c:	bd90      	pop	{r4, r7, pc}
 801651e:	bf00      	nop
 8016520:	0801db90 	.word	0x0801db90
 8016524:	20001988 	.word	0x20001988
 8016528:	20001984 	.word	0x20001984
 801652c:	0801db98 	.word	0x0801db98
 8016530:	0801dc4c 	.word	0x0801dc4c

08016534 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016534:	b590      	push	{r4, r7, lr}
 8016536:	b093      	sub	sp, #76	; 0x4c
 8016538:	af00      	add	r7, sp, #0
 801653a:	60f8      	str	r0, [r7, #12]
 801653c:	60b9      	str	r1, [r7, #8]
 801653e:	607a      	str	r2, [r7, #4]
 8016540:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8016542:	2307      	movs	r3, #7
 8016544:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016548:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801654c:	2200      	movs	r2, #0
 801654e:	601a      	str	r2, [r3, #0]
 8016550:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8016552:	2300      	movs	r3, #0
 8016554:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8016558:	2300      	movs	r3, #0
 801655a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 801655e:	2300      	movs	r3, #0
 8016560:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016562:	e085      	b.n	8016670 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	685a      	ldr	r2, [r3, #4]
 8016568:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801656c:	4413      	add	r3, r2
 801656e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8016572:	4611      	mov	r1, r2
 8016574:	4618      	mov	r0, r3
 8016576:	f7fe fe2f 	bl	80151d8 <RegionCommonParseLinkAdrReq>
 801657a:	4603      	mov	r3, r0
 801657c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8016580:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016584:	2b00      	cmp	r3, #0
 8016586:	d07b      	beq.n	8016680 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016588:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801658c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016590:	4413      	add	r3, r2
 8016592:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016596:	2307      	movs	r3, #7
 8016598:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 801659c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80165a0:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80165a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d109      	bne.n	80165be <RegionEU868LinkAdrReq+0x8a>
 80165aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d106      	bne.n	80165be <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80165b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80165b4:	f023 0301 	bic.w	r3, r3, #1
 80165b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80165bc:	e058      	b.n	8016670 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80165be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d003      	beq.n	80165ce <RegionEU868LinkAdrReq+0x9a>
 80165c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80165ca:	2b05      	cmp	r3, #5
 80165cc:	d903      	bls.n	80165d6 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80165ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80165d2:	2b06      	cmp	r3, #6
 80165d4:	d906      	bls.n	80165e4 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80165d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80165da:	f023 0301 	bic.w	r3, r3, #1
 80165de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80165e2:	e045      	b.n	8016670 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80165e4:	2300      	movs	r3, #0
 80165e6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80165ea:	e03d      	b.n	8016668 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80165ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80165f0:	2b06      	cmp	r3, #6
 80165f2:	d118      	bne.n	8016626 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80165f4:	4b5f      	ldr	r3, [pc, #380]	; (8016774 <RegionEU868LinkAdrReq+0x240>)
 80165f6:	6819      	ldr	r1, [r3, #0]
 80165f8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80165fc:	4613      	mov	r3, r2
 80165fe:	005b      	lsls	r3, r3, #1
 8016600:	4413      	add	r3, r2
 8016602:	009b      	lsls	r3, r3, #2
 8016604:	440b      	add	r3, r1
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d028      	beq.n	801665e <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 801660c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8016610:	2201      	movs	r2, #1
 8016612:	fa02 f303 	lsl.w	r3, r2, r3
 8016616:	b21a      	sxth	r2, r3
 8016618:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801661a:	b21b      	sxth	r3, r3
 801661c:	4313      	orrs	r3, r2
 801661e:	b21b      	sxth	r3, r3
 8016620:	b29b      	uxth	r3, r3
 8016622:	877b      	strh	r3, [r7, #58]	; 0x3a
 8016624:	e01b      	b.n	801665e <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016626:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016628:	461a      	mov	r2, r3
 801662a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801662e:	fa42 f303 	asr.w	r3, r2, r3
 8016632:	f003 0301 	and.w	r3, r3, #1
 8016636:	2b00      	cmp	r3, #0
 8016638:	d011      	beq.n	801665e <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801663a:	4b4e      	ldr	r3, [pc, #312]	; (8016774 <RegionEU868LinkAdrReq+0x240>)
 801663c:	6819      	ldr	r1, [r3, #0]
 801663e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8016642:	4613      	mov	r3, r2
 8016644:	005b      	lsls	r3, r3, #1
 8016646:	4413      	add	r3, r2
 8016648:	009b      	lsls	r3, r3, #2
 801664a:	440b      	add	r3, r1
 801664c:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801664e:	2b00      	cmp	r3, #0
 8016650:	d105      	bne.n	801665e <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8016652:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016656:	f023 0301 	bic.w	r3, r3, #1
 801665a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801665e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8016662:	3301      	adds	r3, #1
 8016664:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8016668:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801666c:	2b0f      	cmp	r3, #15
 801666e:	d9bd      	bls.n	80165ec <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	7a1b      	ldrb	r3, [r3, #8]
 8016674:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8016678:	429a      	cmp	r2, r3
 801667a:	f4ff af73 	bcc.w	8016564 <RegionEU868LinkAdrReq+0x30>
 801667e:	e000      	b.n	8016682 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8016680:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8016682:	2302      	movs	r3, #2
 8016684:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	7a5b      	ldrb	r3, [r3, #9]
 801668c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8016690:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016694:	4618      	mov	r0, r3
 8016696:	f7ff fa29 	bl	8015aec <RegionEU868GetPhyParam>
 801669a:	4603      	mov	r3, r0
 801669c:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 801669e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80166a2:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	7a9b      	ldrb	r3, [r3, #10]
 80166a8:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80166aa:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80166ae:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80166b0:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80166b4:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80166b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80166ba:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80166c2:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80166ca:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	7b5b      	ldrb	r3, [r3, #13]
 80166d0:	b25b      	sxtb	r3, r3
 80166d2:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80166d4:	2310      	movs	r3, #16
 80166d6:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80166d8:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80166dc:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80166de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166e0:	b25b      	sxtb	r3, r3
 80166e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80166e6:	2307      	movs	r3, #7
 80166e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80166ec:	4b21      	ldr	r3, [pc, #132]	; (8016774 <RegionEU868LinkAdrReq+0x240>)
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80166f2:	2307      	movs	r3, #7
 80166f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80166f8:	2300      	movs	r3, #0
 80166fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016704:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8016708:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801670c:	1c9a      	adds	r2, r3, #2
 801670e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016712:	1c59      	adds	r1, r3, #1
 8016714:	f107 0010 	add.w	r0, r7, #16
 8016718:	4623      	mov	r3, r4
 801671a:	f7fe fdae 	bl	801527a <RegionCommonLinkAdrReqVerifyParams>
 801671e:	4603      	mov	r3, r0
 8016720:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016724:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016728:	2b07      	cmp	r3, #7
 801672a:	d10d      	bne.n	8016748 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801672c:	4b11      	ldr	r3, [pc, #68]	; (8016774 <RegionEU868LinkAdrReq+0x240>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016734:	220c      	movs	r2, #12
 8016736:	2100      	movs	r1, #0
 8016738:	4618      	mov	r0, r3
 801673a:	f001 fd2b 	bl	8018194 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801673e:	4b0d      	ldr	r3, [pc, #52]	; (8016774 <RegionEU868LinkAdrReq+0x240>)
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016744:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016748:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 801674c:	68bb      	ldr	r3, [r7, #8]
 801674e:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8016750:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016758:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801675c:	683b      	ldr	r3, [r7, #0]
 801675e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8016760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016762:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8016766:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8016768:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801676c:	4618      	mov	r0, r3
 801676e:	374c      	adds	r7, #76	; 0x4c
 8016770:	46bd      	mov	sp, r7
 8016772:	bd90      	pop	{r4, r7, pc}
 8016774:	20001984 	.word	0x20001984

08016778 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b084      	sub	sp, #16
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016780:	2307      	movs	r3, #7
 8016782:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016784:	2300      	movs	r3, #0
 8016786:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	685b      	ldr	r3, [r3, #4]
 801678c:	f107 020e 	add.w	r2, r7, #14
 8016790:	4611      	mov	r1, r2
 8016792:	4618      	mov	r0, r3
 8016794:	f7ff f8e4 	bl	8015960 <VerifyRfFreq>
 8016798:	4603      	mov	r3, r0
 801679a:	f083 0301 	eor.w	r3, r3, #1
 801679e:	b2db      	uxtb	r3, r3
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d003      	beq.n	80167ac <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80167a4:	7bfb      	ldrb	r3, [r7, #15]
 80167a6:	f023 0301 	bic.w	r3, r3, #1
 80167aa:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	f993 3000 	ldrsb.w	r3, [r3]
 80167b2:	2207      	movs	r2, #7
 80167b4:	2100      	movs	r1, #0
 80167b6:	4618      	mov	r0, r3
 80167b8:	f7fe fb4d 	bl	8014e56 <RegionCommonValueInRange>
 80167bc:	4603      	mov	r3, r0
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d103      	bne.n	80167ca <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80167c2:	7bfb      	ldrb	r3, [r7, #15]
 80167c4:	f023 0302 	bic.w	r3, r3, #2
 80167c8:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80167d0:	2205      	movs	r2, #5
 80167d2:	2100      	movs	r1, #0
 80167d4:	4618      	mov	r0, r3
 80167d6:	f7fe fb3e 	bl	8014e56 <RegionCommonValueInRange>
 80167da:	4603      	mov	r3, r0
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d103      	bne.n	80167e8 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80167e0:	7bfb      	ldrb	r3, [r7, #15]
 80167e2:	f023 0304 	bic.w	r3, r3, #4
 80167e6:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80167e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80167ea:	4618      	mov	r0, r3
 80167ec:	3710      	adds	r7, #16
 80167ee:	46bd      	mov	sp, r7
 80167f0:	bd80      	pop	{r7, pc}
	...

080167f4 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b086      	sub	sp, #24
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80167fc:	2303      	movs	r3, #3
 80167fe:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d114      	bne.n	8016834 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016810:	b2db      	uxtb	r3, r3
 8016812:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8016814:	f107 0308 	add.w	r3, r7, #8
 8016818:	4618      	mov	r0, r3
 801681a:	f000 f9f9 	bl	8016c10 <RegionEU868ChannelsRemove>
 801681e:	4603      	mov	r3, r0
 8016820:	f083 0301 	eor.w	r3, r3, #1
 8016824:	b2db      	uxtb	r3, r3
 8016826:	2b00      	cmp	r3, #0
 8016828:	d03b      	beq.n	80168a2 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801682a:	7dfb      	ldrb	r3, [r7, #23]
 801682c:	f023 0303 	bic.w	r3, r3, #3
 8016830:	75fb      	strb	r3, [r7, #23]
 8016832:	e036      	b.n	80168a2 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016840:	b2db      	uxtb	r3, r3
 8016842:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8016844:	f107 030c 	add.w	r3, r7, #12
 8016848:	4618      	mov	r0, r3
 801684a:	f000 f93f 	bl	8016acc <RegionEU868ChannelAdd>
 801684e:	4603      	mov	r3, r0
 8016850:	2b06      	cmp	r3, #6
 8016852:	d820      	bhi.n	8016896 <RegionEU868NewChannelReq+0xa2>
 8016854:	a201      	add	r2, pc, #4	; (adr r2, 801685c <RegionEU868NewChannelReq+0x68>)
 8016856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801685a:	bf00      	nop
 801685c:	080168a1 	.word	0x080168a1
 8016860:	08016897 	.word	0x08016897
 8016864:	08016897 	.word	0x08016897
 8016868:	08016897 	.word	0x08016897
 801686c:	08016879 	.word	0x08016879
 8016870:	08016883 	.word	0x08016883
 8016874:	0801688d 	.word	0x0801688d
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8016878:	7dfb      	ldrb	r3, [r7, #23]
 801687a:	f023 0301 	bic.w	r3, r3, #1
 801687e:	75fb      	strb	r3, [r7, #23]
                break;
 8016880:	e00f      	b.n	80168a2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8016882:	7dfb      	ldrb	r3, [r7, #23]
 8016884:	f023 0302 	bic.w	r3, r3, #2
 8016888:	75fb      	strb	r3, [r7, #23]
                break;
 801688a:	e00a      	b.n	80168a2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801688c:	7dfb      	ldrb	r3, [r7, #23]
 801688e:	f023 0303 	bic.w	r3, r3, #3
 8016892:	75fb      	strb	r3, [r7, #23]
                break;
 8016894:	e005      	b.n	80168a2 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8016896:	7dfb      	ldrb	r3, [r7, #23]
 8016898:	f023 0303 	bic.w	r3, r3, #3
 801689c:	75fb      	strb	r3, [r7, #23]
                break;
 801689e:	e000      	b.n	80168a2 <RegionEU868NewChannelReq+0xae>
                break;
 80168a0:	bf00      	nop
            }
        }
    }

    return status;
 80168a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80168a6:	4618      	mov	r0, r3
 80168a8:	3718      	adds	r7, #24
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}
 80168ae:	bf00      	nop

080168b0 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80168b0:	b480      	push	{r7}
 80168b2:	b083      	sub	sp, #12
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80168b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80168bc:	4618      	mov	r0, r3
 80168be:	370c      	adds	r7, #12
 80168c0:	46bd      	mov	sp, r7
 80168c2:	bc80      	pop	{r7}
 80168c4:	4770      	bx	lr
	...

080168c8 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b084      	sub	sp, #16
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80168d0:	2303      	movs	r3, #3
 80168d2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80168d4:	2300      	movs	r3, #0
 80168d6:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	685b      	ldr	r3, [r3, #4]
 80168dc:	f107 020e 	add.w	r2, r7, #14
 80168e0:	4611      	mov	r1, r2
 80168e2:	4618      	mov	r0, r3
 80168e4:	f7ff f83c 	bl	8015960 <VerifyRfFreq>
 80168e8:	4603      	mov	r3, r0
 80168ea:	f083 0301 	eor.w	r3, r3, #1
 80168ee:	b2db      	uxtb	r3, r3
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d003      	beq.n	80168fc <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 80168f4:	7bfb      	ldrb	r3, [r7, #15]
 80168f6:	f023 0301 	bic.w	r3, r3, #1
 80168fa:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80168fc:	4b13      	ldr	r3, [pc, #76]	; (801694c <RegionEU868DlChannelReq+0x84>)
 80168fe:	681a      	ldr	r2, [r3, #0]
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	781b      	ldrb	r3, [r3, #0]
 8016904:	4619      	mov	r1, r3
 8016906:	460b      	mov	r3, r1
 8016908:	005b      	lsls	r3, r3, #1
 801690a:	440b      	add	r3, r1
 801690c:	009b      	lsls	r3, r3, #2
 801690e:	4413      	add	r3, r2
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	2b00      	cmp	r3, #0
 8016914:	d103      	bne.n	801691e <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8016916:	7bfb      	ldrb	r3, [r7, #15]
 8016918:	f023 0302 	bic.w	r3, r3, #2
 801691c:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801691e:	7bfb      	ldrb	r3, [r7, #15]
 8016920:	2b03      	cmp	r3, #3
 8016922:	d10d      	bne.n	8016940 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8016924:	4b09      	ldr	r3, [pc, #36]	; (801694c <RegionEU868DlChannelReq+0x84>)
 8016926:	6819      	ldr	r1, [r3, #0]
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	781b      	ldrb	r3, [r3, #0]
 801692c:	4618      	mov	r0, r3
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	685a      	ldr	r2, [r3, #4]
 8016932:	4603      	mov	r3, r0
 8016934:	005b      	lsls	r3, r3, #1
 8016936:	4403      	add	r3, r0
 8016938:	009b      	lsls	r3, r3, #2
 801693a:	440b      	add	r3, r1
 801693c:	3304      	adds	r3, #4
 801693e:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8016940:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016944:	4618      	mov	r0, r3
 8016946:	3710      	adds	r7, #16
 8016948:	46bd      	mov	sp, r7
 801694a:	bd80      	pop	{r7, pc}
 801694c:	20001984 	.word	0x20001984

08016950 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016950:	b480      	push	{r7}
 8016952:	b083      	sub	sp, #12
 8016954:	af00      	add	r7, sp, #0
 8016956:	4603      	mov	r3, r0
 8016958:	460a      	mov	r2, r1
 801695a:	71fb      	strb	r3, [r7, #7]
 801695c:	4613      	mov	r3, r2
 801695e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8016960:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8016964:	4618      	mov	r0, r3
 8016966:	370c      	adds	r7, #12
 8016968:	46bd      	mov	sp, r7
 801696a:	bc80      	pop	{r7}
 801696c:	4770      	bx	lr
	...

08016970 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b09a      	sub	sp, #104	; 0x68
 8016974:	af02      	add	r7, sp, #8
 8016976:	60f8      	str	r0, [r7, #12]
 8016978:	60b9      	str	r1, [r7, #8]
 801697a:	607a      	str	r2, [r7, #4]
 801697c:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801697e:	2300      	movs	r3, #0
 8016980:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8016984:	2300      	movs	r3, #0
 8016986:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801698a:	2300      	movs	r3, #0
 801698c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801698e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016992:	2200      	movs	r2, #0
 8016994:	601a      	str	r2, [r3, #0]
 8016996:	605a      	str	r2, [r3, #4]
 8016998:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801699a:	230c      	movs	r3, #12
 801699c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80169a0:	2307      	movs	r3, #7
 80169a2:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80169a4:	4b47      	ldr	r3, [pc, #284]	; (8016ac4 <RegionEU868NextChannel+0x154>)
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80169ac:	2201      	movs	r2, #1
 80169ae:	2100      	movs	r1, #0
 80169b0:	4618      	mov	r0, r3
 80169b2:	f7fe faa1 	bl	8014ef8 <RegionCommonCountChannels>
 80169b6:	4603      	mov	r3, r0
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d10a      	bne.n	80169d2 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80169bc:	4b41      	ldr	r3, [pc, #260]	; (8016ac4 <RegionEU868NextChannel+0x154>)
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80169c4:	4b3f      	ldr	r3, [pc, #252]	; (8016ac4 <RegionEU868NextChannel+0x154>)
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	f042 0207 	orr.w	r2, r2, #7
 80169cc:	b292      	uxth	r2, r2
 80169ce:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	7a5b      	ldrb	r3, [r3, #9]
 80169d6:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80169de:	b2db      	uxtb	r3, r3
 80169e0:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80169e2:	4b38      	ldr	r3, [pc, #224]	; (8016ac4 <RegionEU868NextChannel+0x154>)
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80169ea:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80169ec:	4b35      	ldr	r3, [pc, #212]	; (8016ac4 <RegionEU868NextChannel+0x154>)
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 80169f2:	4b35      	ldr	r3, [pc, #212]	; (8016ac8 <RegionEU868NextChannel+0x158>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80169f8:	2310      	movs	r3, #16
 80169fa:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80169fc:	f107 0312 	add.w	r3, r7, #18
 8016a00:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	685b      	ldr	r3, [r3, #4]
 8016a0c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	7a9b      	ldrb	r3, [r3, #10]
 8016a12:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8016a16:	2306      	movs	r3, #6
 8016a18:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016a1c:	68fa      	ldr	r2, [r7, #12]
 8016a1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016a22:	320c      	adds	r2, #12
 8016a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016a28:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	7d1b      	ldrb	r3, [r3, #20]
 8016a30:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	8adb      	ldrh	r3, [r3, #22]
 8016a3e:	4619      	mov	r1, r3
 8016a40:	4610      	mov	r0, r2
 8016a42:	f7ff f803 	bl	8015a4c <GetTimeOnAir>
 8016a46:	4603      	mov	r3, r0
 8016a48:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8016a4a:	f107 0314 	add.w	r3, r7, #20
 8016a4e:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016a50:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8016a54:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016a58:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	9301      	str	r3, [sp, #4]
 8016a60:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8016a64:	9300      	str	r3, [sp, #0]
 8016a66:	460b      	mov	r3, r1
 8016a68:	6839      	ldr	r1, [r7, #0]
 8016a6a:	f7fe fe5c 	bl	8015726 <RegionCommonIdentifyChannels>
 8016a6e:	4603      	mov	r3, r0
 8016a70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016a74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d10e      	bne.n	8016a9a <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8016a7c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8016a80:	3b01      	subs	r3, #1
 8016a82:	4619      	mov	r1, r3
 8016a84:	2000      	movs	r0, #0
 8016a86:	f001 fb33 	bl	80180f0 <randr>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	3360      	adds	r3, #96	; 0x60
 8016a8e:	443b      	add	r3, r7
 8016a90:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8016a94:	68bb      	ldr	r3, [r7, #8]
 8016a96:	701a      	strb	r2, [r3, #0]
 8016a98:	e00e      	b.n	8016ab8 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8016a9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a9e:	2b0c      	cmp	r3, #12
 8016aa0:	d10a      	bne.n	8016ab8 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8016aa2:	4b08      	ldr	r3, [pc, #32]	; (8016ac4 <RegionEU868NextChannel+0x154>)
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8016aaa:	4b06      	ldr	r3, [pc, #24]	; (8016ac4 <RegionEU868NextChannel+0x154>)
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	f042 0207 	orr.w	r2, r2, #7
 8016ab2:	b292      	uxth	r2, r2
 8016ab4:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 8016ab8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016abc:	4618      	mov	r0, r3
 8016abe:	3760      	adds	r7, #96	; 0x60
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	bd80      	pop	{r7, pc}
 8016ac4:	20001984 	.word	0x20001984
 8016ac8:	20001988 	.word	0x20001988

08016acc <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b084      	sub	sp, #16
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8016ad8:	2300      	movs	r3, #0
 8016ada:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8016adc:	2300      	movs	r3, #0
 8016ade:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	791b      	ldrb	r3, [r3, #4]
 8016ae4:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016ae6:	7b7b      	ldrb	r3, [r7, #13]
 8016ae8:	2b02      	cmp	r3, #2
 8016aea:	d801      	bhi.n	8016af0 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016aec:	2306      	movs	r3, #6
 8016aee:	e089      	b.n	8016c04 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8016af0:	7b7b      	ldrb	r3, [r7, #13]
 8016af2:	2b0f      	cmp	r3, #15
 8016af4:	d901      	bls.n	8016afa <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016af6:	2303      	movs	r3, #3
 8016af8:	e084      	b.n	8016c04 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	7a1b      	ldrb	r3, [r3, #8]
 8016b00:	f343 0303 	sbfx	r3, r3, #0, #4
 8016b04:	b25b      	sxtb	r3, r3
 8016b06:	2207      	movs	r2, #7
 8016b08:	2100      	movs	r1, #0
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7fe f9a3 	bl	8014e56 <RegionCommonValueInRange>
 8016b10:	4603      	mov	r3, r0
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d101      	bne.n	8016b1a <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8016b16:	2301      	movs	r3, #1
 8016b18:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	7a1b      	ldrb	r3, [r3, #8]
 8016b20:	f343 1303 	sbfx	r3, r3, #4, #4
 8016b24:	b25b      	sxtb	r3, r3
 8016b26:	2207      	movs	r2, #7
 8016b28:	2100      	movs	r1, #0
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	f7fe f993 	bl	8014e56 <RegionCommonValueInRange>
 8016b30:	4603      	mov	r3, r0
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d101      	bne.n	8016b3a <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8016b36:	2301      	movs	r3, #1
 8016b38:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	7a1b      	ldrb	r3, [r3, #8]
 8016b40:	f343 0303 	sbfx	r3, r3, #0, #4
 8016b44:	b25a      	sxtb	r2, r3
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	7a1b      	ldrb	r3, [r3, #8]
 8016b4c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016b50:	b25b      	sxtb	r3, r3
 8016b52:	429a      	cmp	r2, r3
 8016b54:	dd01      	ble.n	8016b5a <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8016b56:	2301      	movs	r3, #1
 8016b58:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8016b5a:	7bbb      	ldrb	r3, [r7, #14]
 8016b5c:	f083 0301 	eor.w	r3, r3, #1
 8016b60:	b2db      	uxtb	r3, r3
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d010      	beq.n	8016b88 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	f107 020c 	add.w	r2, r7, #12
 8016b70:	4611      	mov	r1, r2
 8016b72:	4618      	mov	r0, r3
 8016b74:	f7fe fef4 	bl	8015960 <VerifyRfFreq>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	f083 0301 	eor.w	r3, r3, #1
 8016b7e:	b2db      	uxtb	r3, r3
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d001      	beq.n	8016b88 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8016b84:	2301      	movs	r3, #1
 8016b86:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8016b88:	7bfb      	ldrb	r3, [r7, #15]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d004      	beq.n	8016b98 <RegionEU868ChannelAdd+0xcc>
 8016b8e:	7bbb      	ldrb	r3, [r7, #14]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d001      	beq.n	8016b98 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016b94:	2306      	movs	r3, #6
 8016b96:	e035      	b.n	8016c04 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8016b98:	7bfb      	ldrb	r3, [r7, #15]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d001      	beq.n	8016ba2 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8016b9e:	2305      	movs	r3, #5
 8016ba0:	e030      	b.n	8016c04 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8016ba2:	7bbb      	ldrb	r3, [r7, #14]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d001      	beq.n	8016bac <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8016ba8:	2304      	movs	r3, #4
 8016baa:	e02b      	b.n	8016c04 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8016bac:	4b17      	ldr	r3, [pc, #92]	; (8016c0c <RegionEU868ChannelAdd+0x140>)
 8016bae:	6819      	ldr	r1, [r3, #0]
 8016bb0:	7b7a      	ldrb	r2, [r7, #13]
 8016bb2:	4613      	mov	r3, r2
 8016bb4:	005b      	lsls	r3, r3, #1
 8016bb6:	4413      	add	r3, r2
 8016bb8:	009b      	lsls	r3, r3, #2
 8016bba:	18c8      	adds	r0, r1, r3
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	220c      	movs	r2, #12
 8016bc2:	4619      	mov	r1, r3
 8016bc4:	f001 faab 	bl	801811e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8016bc8:	4b10      	ldr	r3, [pc, #64]	; (8016c0c <RegionEU868ChannelAdd+0x140>)
 8016bca:	6819      	ldr	r1, [r3, #0]
 8016bcc:	7b7a      	ldrb	r2, [r7, #13]
 8016bce:	7b38      	ldrb	r0, [r7, #12]
 8016bd0:	4613      	mov	r3, r2
 8016bd2:	005b      	lsls	r3, r3, #1
 8016bd4:	4413      	add	r3, r2
 8016bd6:	009b      	lsls	r3, r3, #2
 8016bd8:	440b      	add	r3, r1
 8016bda:	3309      	adds	r3, #9
 8016bdc:	4602      	mov	r2, r0
 8016bde:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016be0:	4b0a      	ldr	r3, [pc, #40]	; (8016c0c <RegionEU868ChannelAdd+0x140>)
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8016be8:	b21a      	sxth	r2, r3
 8016bea:	7b7b      	ldrb	r3, [r7, #13]
 8016bec:	2101      	movs	r1, #1
 8016bee:	fa01 f303 	lsl.w	r3, r1, r3
 8016bf2:	b21b      	sxth	r3, r3
 8016bf4:	4313      	orrs	r3, r2
 8016bf6:	b21a      	sxth	r2, r3
 8016bf8:	4b04      	ldr	r3, [pc, #16]	; (8016c0c <RegionEU868ChannelAdd+0x140>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	b292      	uxth	r2, r2
 8016bfe:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8016c02:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016c04:	4618      	mov	r0, r3
 8016c06:	3710      	adds	r7, #16
 8016c08:	46bd      	mov	sp, r7
 8016c0a:	bd80      	pop	{r7, pc}
 8016c0c:	20001984 	.word	0x20001984

08016c10 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b086      	sub	sp, #24
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	781b      	ldrb	r3, [r3, #0]
 8016c1c:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016c1e:	7dfb      	ldrb	r3, [r7, #23]
 8016c20:	2b02      	cmp	r3, #2
 8016c22:	d801      	bhi.n	8016c28 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8016c24:	2300      	movs	r3, #0
 8016c26:	e016      	b.n	8016c56 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016c28:	4b0d      	ldr	r3, [pc, #52]	; (8016c60 <RegionEU868ChannelsRemove+0x50>)
 8016c2a:	6819      	ldr	r1, [r3, #0]
 8016c2c:	7dfa      	ldrb	r2, [r7, #23]
 8016c2e:	4613      	mov	r3, r2
 8016c30:	005b      	lsls	r3, r3, #1
 8016c32:	4413      	add	r3, r2
 8016c34:	009b      	lsls	r3, r3, #2
 8016c36:	440b      	add	r3, r1
 8016c38:	461a      	mov	r2, r3
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	6013      	str	r3, [r2, #0]
 8016c3e:	6053      	str	r3, [r2, #4]
 8016c40:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8016c42:	4b07      	ldr	r3, [pc, #28]	; (8016c60 <RegionEU868ChannelsRemove+0x50>)
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016c4a:	7df9      	ldrb	r1, [r7, #23]
 8016c4c:	2210      	movs	r2, #16
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f7fe f91e 	bl	8014e90 <RegionCommonChanDisable>
 8016c54:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8016c56:	4618      	mov	r0, r3
 8016c58:	3718      	adds	r7, #24
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bd80      	pop	{r7, pc}
 8016c5e:	bf00      	nop
 8016c60:	20001984 	.word	0x20001984

08016c64 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016c64:	b480      	push	{r7}
 8016c66:	b085      	sub	sp, #20
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	71fb      	strb	r3, [r7, #7]
 8016c6e:	460b      	mov	r3, r1
 8016c70:	71bb      	strb	r3, [r7, #6]
 8016c72:	4613      	mov	r3, r2
 8016c74:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8016c76:	79ba      	ldrb	r2, [r7, #6]
 8016c78:	797b      	ldrb	r3, [r7, #5]
 8016c7a:	1ad3      	subs	r3, r2, r3
 8016c7c:	b2db      	uxtb	r3, r3
 8016c7e:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8016c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	da01      	bge.n	8016c8c <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8016c88:	2300      	movs	r3, #0
 8016c8a:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8016c8c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8016c8e:	4618      	mov	r0, r3
 8016c90:	3714      	adds	r7, #20
 8016c92:	46bd      	mov	sp, r7
 8016c94:	bc80      	pop	{r7}
 8016c96:	4770      	bx	lr

08016c98 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b084      	sub	sp, #16
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	603b      	str	r3, [r7, #0]
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	71fb      	strb	r3, [r7, #7]
 8016ca4:	460b      	mov	r3, r1
 8016ca6:	71bb      	strb	r3, [r7, #6]
 8016ca8:	4613      	mov	r3, r2
 8016caa:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8016cac:	79fb      	ldrb	r3, [r7, #7]
 8016cae:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8016cb0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016cb8:	4611      	mov	r1, r2
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f7fe fdd3 	bl	8015866 <RegionCommonLimitTxPower>
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8016cc4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016cc8:	2b04      	cmp	r3, #4
 8016cca:	d106      	bne.n	8016cda <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8016ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016cd0:	2b02      	cmp	r3, #2
 8016cd2:	bfb8      	it	lt
 8016cd4:	2302      	movlt	r3, #2
 8016cd6:	73fb      	strb	r3, [r7, #15]
 8016cd8:	e00d      	b.n	8016cf6 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8016cda:	2204      	movs	r2, #4
 8016cdc:	2100      	movs	r1, #0
 8016cde:	6838      	ldr	r0, [r7, #0]
 8016ce0:	f7fe f90a 	bl	8014ef8 <RegionCommonCountChannels>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	2b31      	cmp	r3, #49	; 0x31
 8016ce8:	d805      	bhi.n	8016cf6 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8016cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016cee:	2b05      	cmp	r3, #5
 8016cf0:	bfb8      	it	lt
 8016cf2:	2305      	movlt	r3, #5
 8016cf4:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8016cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	3710      	adds	r7, #16
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}
	...

08016d04 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b082      	sub	sp, #8
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8016d0c:	4b18      	ldr	r3, [pc, #96]	; (8016d70 <VerifyRfFreq+0x6c>)
 8016d0e:	6a1b      	ldr	r3, [r3, #32]
 8016d10:	6878      	ldr	r0, [r7, #4]
 8016d12:	4798      	blx	r3
 8016d14:	4603      	mov	r3, r0
 8016d16:	f083 0301 	eor.w	r3, r3, #1
 8016d1a:	b2db      	uxtb	r3, r3
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d001      	beq.n	8016d24 <VerifyRfFreq+0x20>
    {
        return false;
 8016d20:	2300      	movs	r3, #0
 8016d22:	e021      	b.n	8016d68 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	4a13      	ldr	r2, [pc, #76]	; (8016d74 <VerifyRfFreq+0x70>)
 8016d28:	4293      	cmp	r3, r2
 8016d2a:	d910      	bls.n	8016d4e <VerifyRfFreq+0x4a>
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	4a12      	ldr	r2, [pc, #72]	; (8016d78 <VerifyRfFreq+0x74>)
 8016d30:	4293      	cmp	r3, r2
 8016d32:	d80c      	bhi.n	8016d4e <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8016d34:	687a      	ldr	r2, [r7, #4]
 8016d36:	4b11      	ldr	r3, [pc, #68]	; (8016d7c <VerifyRfFreq+0x78>)
 8016d38:	4413      	add	r3, r2
 8016d3a:	4a11      	ldr	r2, [pc, #68]	; (8016d80 <VerifyRfFreq+0x7c>)
 8016d3c:	fba2 1203 	umull	r1, r2, r2, r3
 8016d40:	0c92      	lsrs	r2, r2, #18
 8016d42:	4910      	ldr	r1, [pc, #64]	; (8016d84 <VerifyRfFreq+0x80>)
 8016d44:	fb01 f202 	mul.w	r2, r1, r2
 8016d48:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8016d4a:	2a00      	cmp	r2, #0
 8016d4c:	d001      	beq.n	8016d52 <VerifyRfFreq+0x4e>
    {
        return false;
 8016d4e:	2300      	movs	r3, #0
 8016d50:	e00a      	b.n	8016d68 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	4a0c      	ldr	r2, [pc, #48]	; (8016d88 <VerifyRfFreq+0x84>)
 8016d56:	4293      	cmp	r3, r2
 8016d58:	d903      	bls.n	8016d62 <VerifyRfFreq+0x5e>
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	4a06      	ldr	r2, [pc, #24]	; (8016d78 <VerifyRfFreq+0x74>)
 8016d5e:	4293      	cmp	r3, r2
 8016d60:	d901      	bls.n	8016d66 <VerifyRfFreq+0x62>
    {
        return false;
 8016d62:	2300      	movs	r3, #0
 8016d64:	e000      	b.n	8016d68 <VerifyRfFreq+0x64>
    }
    return true;
 8016d66:	2301      	movs	r3, #1
}
 8016d68:	4618      	mov	r0, r3
 8016d6a:	3708      	adds	r7, #8
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	bd80      	pop	{r7, pc}
 8016d70:	0801dc4c 	.word	0x0801dc4c
 8016d74:	3708709f 	.word	0x3708709f
 8016d78:	374886e0 	.word	0x374886e0
 8016d7c:	c8f78f60 	.word	0xc8f78f60
 8016d80:	6fd91d85 	.word	0x6fd91d85
 8016d84:	000927c0 	.word	0x000927c0
 8016d88:	35c8015f 	.word	0x35c8015f

08016d8c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8016d8c:	b590      	push	{r4, r7, lr}
 8016d8e:	b089      	sub	sp, #36	; 0x24
 8016d90:	af04      	add	r7, sp, #16
 8016d92:	4603      	mov	r3, r0
 8016d94:	460a      	mov	r2, r1
 8016d96:	71fb      	strb	r3, [r7, #7]
 8016d98:	4613      	mov	r3, r2
 8016d9a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8016d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016da0:	4a0f      	ldr	r2, [pc, #60]	; (8016de0 <GetTimeOnAir+0x54>)
 8016da2:	5cd3      	ldrb	r3, [r2, r3]
 8016da4:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8016da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016daa:	490e      	ldr	r1, [pc, #56]	; (8016de4 <GetTimeOnAir+0x58>)
 8016dac:	4618      	mov	r0, r3
 8016dae:	f7fe fd6f 	bl	8015890 <RegionCommonGetBandwidth>
 8016db2:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8016db4:	4b0c      	ldr	r3, [pc, #48]	; (8016de8 <GetTimeOnAir+0x5c>)
 8016db6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016db8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016dbc:	88bb      	ldrh	r3, [r7, #4]
 8016dbe:	b2db      	uxtb	r3, r3
 8016dc0:	2101      	movs	r1, #1
 8016dc2:	9103      	str	r1, [sp, #12]
 8016dc4:	9302      	str	r3, [sp, #8]
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	9301      	str	r3, [sp, #4]
 8016dca:	2308      	movs	r3, #8
 8016dcc:	9300      	str	r3, [sp, #0]
 8016dce:	2301      	movs	r3, #1
 8016dd0:	68b9      	ldr	r1, [r7, #8]
 8016dd2:	2001      	movs	r0, #1
 8016dd4:	47a0      	blx	r4
 8016dd6:	4603      	mov	r3, r0
}
 8016dd8:	4618      	mov	r0, r3
 8016dda:	3714      	adds	r7, #20
 8016ddc:	46bd      	mov	sp, r7
 8016dde:	bd90      	pop	{r4, r7, pc}
 8016de0:	0801dbc8 	.word	0x0801dbc8
 8016de4:	0801dbd8 	.word	0x0801dbd8
 8016de8:	0801dc4c 	.word	0x0801dc4c

08016dec <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b088      	sub	sp, #32
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8016df4:	2300      	movs	r3, #0
 8016df6:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	781b      	ldrb	r3, [r3, #0]
 8016dfc:	3b01      	subs	r3, #1
 8016dfe:	2b37      	cmp	r3, #55	; 0x37
 8016e00:	f200 8136 	bhi.w	8017070 <RegionUS915GetPhyParam+0x284>
 8016e04:	a201      	add	r2, pc, #4	; (adr r2, 8016e0c <RegionUS915GetPhyParam+0x20>)
 8016e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e0a:	bf00      	nop
 8016e0c:	08016eed 	.word	0x08016eed
 8016e10:	08016ef3 	.word	0x08016ef3
 8016e14:	08017071 	.word	0x08017071
 8016e18:	08017071 	.word	0x08017071
 8016e1c:	08017071 	.word	0x08017071
 8016e20:	08016ef9 	.word	0x08016ef9
 8016e24:	08017071 	.word	0x08017071
 8016e28:	08016f33 	.word	0x08016f33
 8016e2c:	08017071 	.word	0x08017071
 8016e30:	08016f39 	.word	0x08016f39
 8016e34:	08016f3f 	.word	0x08016f3f
 8016e38:	08016f45 	.word	0x08016f45
 8016e3c:	08016f4b 	.word	0x08016f4b
 8016e40:	08016f5b 	.word	0x08016f5b
 8016e44:	08016f6b 	.word	0x08016f6b
 8016e48:	08016f71 	.word	0x08016f71
 8016e4c:	08016f79 	.word	0x08016f79
 8016e50:	08016f81 	.word	0x08016f81
 8016e54:	08016f89 	.word	0x08016f89
 8016e58:	08016f91 	.word	0x08016f91
 8016e5c:	08016f99 	.word	0x08016f99
 8016e60:	08016fad 	.word	0x08016fad
 8016e64:	08016fb3 	.word	0x08016fb3
 8016e68:	08016fb9 	.word	0x08016fb9
 8016e6c:	08016fbf 	.word	0x08016fbf
 8016e70:	08016fcb 	.word	0x08016fcb
 8016e74:	08016fd7 	.word	0x08016fd7
 8016e78:	08016fdd 	.word	0x08016fdd
 8016e7c:	08016fe5 	.word	0x08016fe5
 8016e80:	08016feb 	.word	0x08016feb
 8016e84:	08016ff1 	.word	0x08016ff1
 8016e88:	08016ff7 	.word	0x08016ff7
 8016e8c:	08016eff 	.word	0x08016eff
 8016e90:	08017071 	.word	0x08017071
 8016e94:	08017071 	.word	0x08017071
 8016e98:	08017071 	.word	0x08017071
 8016e9c:	08017071 	.word	0x08017071
 8016ea0:	08017071 	.word	0x08017071
 8016ea4:	08017071 	.word	0x08017071
 8016ea8:	08017071 	.word	0x08017071
 8016eac:	08017071 	.word	0x08017071
 8016eb0:	08017071 	.word	0x08017071
 8016eb4:	08017071 	.word	0x08017071
 8016eb8:	08017071 	.word	0x08017071
 8016ebc:	08017071 	.word	0x08017071
 8016ec0:	08017071 	.word	0x08017071
 8016ec4:	08016fff 	.word	0x08016fff
 8016ec8:	08017013 	.word	0x08017013
 8016ecc:	08017021 	.word	0x08017021
 8016ed0:	08017027 	.word	0x08017027
 8016ed4:	08017071 	.word	0x08017071
 8016ed8:	0801702d 	.word	0x0801702d
 8016edc:	08017041 	.word	0x08017041
 8016ee0:	08017047 	.word	0x08017047
 8016ee4:	0801704d 	.word	0x0801704d
 8016ee8:	0801705d 	.word	0x0801705d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8016eec:	2308      	movs	r3, #8
 8016eee:	61bb      	str	r3, [r7, #24]
            break;
 8016ef0:	e0bf      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	61bb      	str	r3, [r7, #24]
            break;
 8016ef6:	e0bc      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8016ef8:	2300      	movs	r3, #0
 8016efa:	61bb      	str	r3, [r7, #24]
            break;
 8016efc:	e0b9      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016f04:	733b      	strb	r3, [r7, #12]
 8016f06:	2304      	movs	r3, #4
 8016f08:	737b      	strb	r3, [r7, #13]
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	73bb      	strb	r3, [r7, #14]
 8016f0e:	2348      	movs	r3, #72	; 0x48
 8016f10:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8016f12:	4b5b      	ldr	r3, [pc, #364]	; (8017080 <RegionUS915GetPhyParam+0x294>)
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016f1a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8016f1c:	4b58      	ldr	r3, [pc, #352]	; (8017080 <RegionUS915GetPhyParam+0x294>)
 8016f1e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016f20:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8016f22:	f107 030c 	add.w	r3, r7, #12
 8016f26:	4618      	mov	r0, r3
 8016f28:	f7fe fc5f 	bl	80157ea <RegionCommonGetNextLowerTxDr>
 8016f2c:	4603      	mov	r3, r0
 8016f2e:	61bb      	str	r3, [r7, #24]
            break;
 8016f30:	e09f      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8016f32:	2300      	movs	r3, #0
 8016f34:	61bb      	str	r3, [r7, #24]
            break;
 8016f36:	e09c      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8016f38:	2300      	movs	r3, #0
 8016f3a:	61bb      	str	r3, [r7, #24]
            break;
 8016f3c:	e099      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8016f3e:	2340      	movs	r3, #64	; 0x40
 8016f40:	61bb      	str	r3, [r7, #24]
            break;
 8016f42:	e096      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8016f44:	2320      	movs	r3, #32
 8016f46:	61bb      	str	r3, [r7, #24]
            break;
 8016f48:	e093      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f50:	461a      	mov	r2, r3
 8016f52:	4b4c      	ldr	r3, [pc, #304]	; (8017084 <RegionUS915GetPhyParam+0x298>)
 8016f54:	5c9b      	ldrb	r3, [r3, r2]
 8016f56:	61bb      	str	r3, [r7, #24]
            break;
 8016f58:	e08b      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f60:	461a      	mov	r2, r3
 8016f62:	4b49      	ldr	r3, [pc, #292]	; (8017088 <RegionUS915GetPhyParam+0x29c>)
 8016f64:	5c9b      	ldrb	r3, [r3, r2]
 8016f66:	61bb      	str	r3, [r7, #24]
            break;
 8016f68:	e083      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	61bb      	str	r3, [r7, #24]
            break;
 8016f6e:	e080      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8016f70:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8016f74:	61bb      	str	r3, [r7, #24]
            break;
 8016f76:	e07c      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8016f78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016f7c:	61bb      	str	r3, [r7, #24]
            break;
 8016f7e:	e078      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8016f80:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8016f84:	61bb      	str	r3, [r7, #24]
            break;
 8016f86:	e074      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8016f88:	f241 3388 	movw	r3, #5000	; 0x1388
 8016f8c:	61bb      	str	r3, [r7, #24]
            break;
 8016f8e:	e070      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8016f90:	f241 7370 	movw	r3, #6000	; 0x1770
 8016f94:	61bb      	str	r3, [r7, #24]
            break;
 8016f96:	e06c      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8016f98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016f9c:	483b      	ldr	r0, [pc, #236]	; (801708c <RegionUS915GetPhyParam+0x2a0>)
 8016f9e:	f001 f8a7 	bl	80180f0 <randr>
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8016fa8:	61bb      	str	r3, [r7, #24]
            break;
 8016faa:	e062      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8016fac:	2300      	movs	r3, #0
 8016fae:	61bb      	str	r3, [r7, #24]
            break;
 8016fb0:	e05f      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8016fb2:	4b37      	ldr	r3, [pc, #220]	; (8017090 <RegionUS915GetPhyParam+0x2a4>)
 8016fb4:	61bb      	str	r3, [r7, #24]
            break;
 8016fb6:	e05c      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8016fb8:	2308      	movs	r3, #8
 8016fba:	61bb      	str	r3, [r7, #24]
            break;
 8016fbc:	e059      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016fbe:	4b30      	ldr	r3, [pc, #192]	; (8017080 <RegionUS915GetPhyParam+0x294>)
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016fc6:	61bb      	str	r3, [r7, #24]
            break;
 8016fc8:	e053      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8016fca:	4b2d      	ldr	r3, [pc, #180]	; (8017080 <RegionUS915GetPhyParam+0x294>)
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016fd2:	61bb      	str	r3, [r7, #24]
            break;
 8016fd4:	e04d      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8016fd6:	2348      	movs	r3, #72	; 0x48
 8016fd8:	61bb      	str	r3, [r7, #24]
            break;
 8016fda:	e04a      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016fdc:	4b28      	ldr	r3, [pc, #160]	; (8017080 <RegionUS915GetPhyParam+0x294>)
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	61bb      	str	r3, [r7, #24]
            break;
 8016fe2:	e046      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	61bb      	str	r3, [r7, #24]
            break;
 8016fe8:	e043      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8016fea:	2300      	movs	r3, #0
 8016fec:	61bb      	str	r3, [r7, #24]
            break;
 8016fee:	e040      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8016ff0:	4b28      	ldr	r3, [pc, #160]	; (8017094 <RegionUS915GetPhyParam+0x2a8>)
 8016ff2:	61bb      	str	r3, [r7, #24]
            break;
 8016ff4:	e03d      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8016ff6:	f04f 0300 	mov.w	r3, #0
 8016ffa:	61bb      	str	r3, [r7, #24]
            break;
 8016ffc:	e039      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	791b      	ldrb	r3, [r3, #4]
 8017002:	4a25      	ldr	r2, [pc, #148]	; (8017098 <RegionUS915GetPhyParam+0x2ac>)
 8017004:	4922      	ldr	r1, [pc, #136]	; (8017090 <RegionUS915GetPhyParam+0x2a4>)
 8017006:	4618      	mov	r0, r3
 8017008:	f7fd fd51 	bl	8014aae <RegionBaseUSCalcDownlinkFrequency>
 801700c:	4603      	mov	r3, r0
 801700e:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017010:	e02f      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8017012:	2317      	movs	r3, #23
 8017014:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8017016:	2304      	movs	r3, #4
 8017018:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801701a:	2303      	movs	r3, #3
 801701c:	76bb      	strb	r3, [r7, #26]
            break;
 801701e:	e028      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8017020:	2308      	movs	r3, #8
 8017022:	61bb      	str	r3, [r7, #24]
            break;
 8017024:	e025      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017026:	2308      	movs	r3, #8
 8017028:	61bb      	str	r3, [r7, #24]
            break;
 801702a:	e022      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	791b      	ldrb	r3, [r3, #4]
 8017030:	4a19      	ldr	r2, [pc, #100]	; (8017098 <RegionUS915GetPhyParam+0x2ac>)
 8017032:	4917      	ldr	r1, [pc, #92]	; (8017090 <RegionUS915GetPhyParam+0x2a4>)
 8017034:	4618      	mov	r0, r3
 8017036:	f7fd fd3a 	bl	8014aae <RegionBaseUSCalcDownlinkFrequency>
 801703a:	4603      	mov	r3, r0
 801703c:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801703e:	e018      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8017040:	2308      	movs	r3, #8
 8017042:	61bb      	str	r3, [r7, #24]
            break;
 8017044:	e015      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017046:	2308      	movs	r3, #8
 8017048:	61bb      	str	r3, [r7, #24]
            break;
 801704a:	e012      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017052:	461a      	mov	r2, r3
 8017054:	4b11      	ldr	r3, [pc, #68]	; (801709c <RegionUS915GetPhyParam+0x2b0>)
 8017056:	5c9b      	ldrb	r3, [r3, r2]
 8017058:	61bb      	str	r3, [r7, #24]
            break;
 801705a:	e00a      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017062:	490f      	ldr	r1, [pc, #60]	; (80170a0 <RegionUS915GetPhyParam+0x2b4>)
 8017064:	4618      	mov	r0, r3
 8017066:	f7fe fc13 	bl	8015890 <RegionCommonGetBandwidth>
 801706a:	4603      	mov	r3, r0
 801706c:	61bb      	str	r3, [r7, #24]
            break;
 801706e:	e000      	b.n	8017072 <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 8017070:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8017072:	69bb      	ldr	r3, [r7, #24]
 8017074:	61fb      	str	r3, [r7, #28]
 8017076:	69fb      	ldr	r3, [r7, #28]
}
 8017078:	4618      	mov	r0, r3
 801707a:	3720      	adds	r7, #32
 801707c:	46bd      	mov	sp, r7
 801707e:	bd80      	pop	{r7, pc}
 8017080:	20001990 	.word	0x20001990
 8017084:	0801dc2c 	.word	0x0801dc2c
 8017088:	0801dc3c 	.word	0x0801dc3c
 801708c:	fffffc18 	.word	0xfffffc18
 8017090:	370870a0 	.word	0x370870a0
 8017094:	4200999a 	.word	0x4200999a
 8017098:	000927c0 	.word	0x000927c0
 801709c:	0801dbc8 	.word	0x0801dbc8
 80170a0:	0801dbd8 	.word	0x0801dbd8

080170a4 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80170a4:	b590      	push	{r4, r7, lr}
 80170a6:	b085      	sub	sp, #20
 80170a8:	af02      	add	r7, sp, #8
 80170aa:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80170ac:	4b11      	ldr	r3, [pc, #68]	; (80170f4 <RegionUS915SetBandTxDone+0x50>)
 80170ae:	681a      	ldr	r2, [r3, #0]
 80170b0:	4b11      	ldr	r3, [pc, #68]	; (80170f8 <RegionUS915SetBandTxDone+0x54>)
 80170b2:	6819      	ldr	r1, [r3, #0]
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	781b      	ldrb	r3, [r3, #0]
 80170b8:	4618      	mov	r0, r3
 80170ba:	4603      	mov	r3, r0
 80170bc:	005b      	lsls	r3, r3, #1
 80170be:	4403      	add	r3, r0
 80170c0:	009b      	lsls	r3, r3, #2
 80170c2:	440b      	add	r3, r1
 80170c4:	3309      	adds	r3, #9
 80170c6:	781b      	ldrb	r3, [r3, #0]
 80170c8:	4619      	mov	r1, r3
 80170ca:	460b      	mov	r3, r1
 80170cc:	005b      	lsls	r3, r3, #1
 80170ce:	440b      	add	r3, r1
 80170d0:	00db      	lsls	r3, r3, #3
 80170d2:	18d0      	adds	r0, r2, r3
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	6899      	ldr	r1, [r3, #8]
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	785c      	ldrb	r4, [r3, #1]
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	691a      	ldr	r2, [r3, #16]
 80170e0:	9200      	str	r2, [sp, #0]
 80170e2:	68db      	ldr	r3, [r3, #12]
 80170e4:	4622      	mov	r2, r4
 80170e6:	f7fd ff59 	bl	8014f9c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 80170ea:	bf00      	nop
 80170ec:	370c      	adds	r7, #12
 80170ee:	46bd      	mov	sp, r7
 80170f0:	bd90      	pop	{r4, r7, pc}
 80170f2:	bf00      	nop
 80170f4:	20001994 	.word	0x20001994
 80170f8:	20001990 	.word	0x20001990

080170fc <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b08a      	sub	sp, #40	; 0x28
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8017104:	2301      	movs	r3, #1
 8017106:	81bb      	strh	r3, [r7, #12]
 8017108:	2300      	movs	r3, #0
 801710a:	73bb      	strb	r3, [r7, #14]
 801710c:	2300      	movs	r3, #0
 801710e:	613b      	str	r3, [r7, #16]
 8017110:	2300      	movs	r3, #0
 8017112:	617b      	str	r3, [r7, #20]
 8017114:	2300      	movs	r3, #0
 8017116:	61bb      	str	r3, [r7, #24]
 8017118:	2300      	movs	r3, #0
 801711a:	61fb      	str	r3, [r7, #28]
 801711c:	2300      	movs	r3, #0
 801711e:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	7b1b      	ldrb	r3, [r3, #12]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d007      	beq.n	801713a <RegionUS915InitDefaults+0x3e>
 801712a:	2b00      	cmp	r3, #0
 801712c:	f2c0 8104 	blt.w	8017338 <RegionUS915InitDefaults+0x23c>
 8017130:	3b01      	subs	r3, #1
 8017132:	2b01      	cmp	r3, #1
 8017134:	f200 8100 	bhi.w	8017338 <RegionUS915InitDefaults+0x23c>
 8017138:	e0ce      	b.n	80172d8 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	2b00      	cmp	r3, #0
 8017140:	f000 80fc 	beq.w	801733c <RegionUS915InitDefaults+0x240>
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	685b      	ldr	r3, [r3, #4]
 8017148:	2b00      	cmp	r3, #0
 801714a:	f000 80f7 	beq.w	801733c <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	4a7c      	ldr	r2, [pc, #496]	; (8017344 <RegionUS915InitDefaults+0x248>)
 8017154:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	685b      	ldr	r3, [r3, #4]
 801715a:	4a7b      	ldr	r2, [pc, #492]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 801715c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	689b      	ldr	r3, [r3, #8]
 8017162:	4a7a      	ldr	r2, [pc, #488]	; (801734c <RegionUS915InitDefaults+0x250>)
 8017164:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8017166:	4b77      	ldr	r3, [pc, #476]	; (8017344 <RegionUS915InitDefaults+0x248>)
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	2200      	movs	r2, #0
 801716c:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801716e:	4b75      	ldr	r3, [pc, #468]	; (8017344 <RegionUS915InitDefaults+0x248>)
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	2200      	movs	r2, #0
 8017174:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8017176:	4b75      	ldr	r3, [pc, #468]	; (801734c <RegionUS915InitDefaults+0x250>)
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	f107 010c 	add.w	r1, r7, #12
 801717e:	2218      	movs	r2, #24
 8017180:	4618      	mov	r0, r3
 8017182:	f000 ffcc 	bl	801811e <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8017186:	2300      	movs	r3, #0
 8017188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801718c:	e02e      	b.n	80171ec <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801718e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017192:	4a6f      	ldr	r2, [pc, #444]	; (8017350 <RegionUS915InitDefaults+0x254>)
 8017194:	fb03 f202 	mul.w	r2, r3, r2
 8017198:	4b6e      	ldr	r3, [pc, #440]	; (8017354 <RegionUS915InitDefaults+0x258>)
 801719a:	4413      	add	r3, r2
 801719c:	4a6a      	ldr	r2, [pc, #424]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 801719e:	6811      	ldr	r1, [r2, #0]
 80171a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80171a4:	4618      	mov	r0, r3
 80171a6:	4613      	mov	r3, r2
 80171a8:	005b      	lsls	r3, r3, #1
 80171aa:	4413      	add	r3, r2
 80171ac:	009b      	lsls	r3, r3, #2
 80171ae:	440b      	add	r3, r1
 80171b0:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80171b2:	4b65      	ldr	r3, [pc, #404]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 80171b4:	6819      	ldr	r1, [r3, #0]
 80171b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80171ba:	4613      	mov	r3, r2
 80171bc:	005b      	lsls	r3, r3, #1
 80171be:	4413      	add	r3, r2
 80171c0:	009b      	lsls	r3, r3, #2
 80171c2:	440b      	add	r3, r1
 80171c4:	3308      	adds	r3, #8
 80171c6:	2230      	movs	r2, #48	; 0x30
 80171c8:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80171ca:	4b5f      	ldr	r3, [pc, #380]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 80171cc:	6819      	ldr	r1, [r3, #0]
 80171ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80171d2:	4613      	mov	r3, r2
 80171d4:	005b      	lsls	r3, r3, #1
 80171d6:	4413      	add	r3, r2
 80171d8:	009b      	lsls	r3, r3, #2
 80171da:	440b      	add	r3, r1
 80171dc:	3309      	adds	r3, #9
 80171de:	2200      	movs	r2, #0
 80171e0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80171e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171e6:	3301      	adds	r3, #1
 80171e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80171ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171f0:	2b3f      	cmp	r3, #63	; 0x3f
 80171f2:	d9cc      	bls.n	801718e <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80171f4:	2340      	movs	r3, #64	; 0x40
 80171f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80171fa:	e02f      	b.n	801725c <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80171fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017200:	3b40      	subs	r3, #64	; 0x40
 8017202:	4a55      	ldr	r2, [pc, #340]	; (8017358 <RegionUS915InitDefaults+0x25c>)
 8017204:	fb03 f202 	mul.w	r2, r3, r2
 8017208:	4b54      	ldr	r3, [pc, #336]	; (801735c <RegionUS915InitDefaults+0x260>)
 801720a:	4413      	add	r3, r2
 801720c:	4a4e      	ldr	r2, [pc, #312]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 801720e:	6811      	ldr	r1, [r2, #0]
 8017210:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017214:	4618      	mov	r0, r3
 8017216:	4613      	mov	r3, r2
 8017218:	005b      	lsls	r3, r3, #1
 801721a:	4413      	add	r3, r2
 801721c:	009b      	lsls	r3, r3, #2
 801721e:	440b      	add	r3, r1
 8017220:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8017222:	4b49      	ldr	r3, [pc, #292]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 8017224:	6819      	ldr	r1, [r3, #0]
 8017226:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801722a:	4613      	mov	r3, r2
 801722c:	005b      	lsls	r3, r3, #1
 801722e:	4413      	add	r3, r2
 8017230:	009b      	lsls	r3, r3, #2
 8017232:	440b      	add	r3, r1
 8017234:	3308      	adds	r3, #8
 8017236:	2244      	movs	r2, #68	; 0x44
 8017238:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801723a:	4b43      	ldr	r3, [pc, #268]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 801723c:	6819      	ldr	r1, [r3, #0]
 801723e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017242:	4613      	mov	r3, r2
 8017244:	005b      	lsls	r3, r3, #1
 8017246:	4413      	add	r3, r2
 8017248:	009b      	lsls	r3, r3, #2
 801724a:	440b      	add	r3, r1
 801724c:	3309      	adds	r3, #9
 801724e:	2200      	movs	r2, #0
 8017250:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8017252:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017256:	3301      	adds	r3, #1
 8017258:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801725c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017260:	2b47      	cmp	r3, #71	; 0x47
 8017262:	d9cb      	bls.n	80171fc <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8017264:	4b38      	ldr	r3, [pc, #224]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801726c:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8017270:	4b35      	ldr	r3, [pc, #212]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017278:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801727c:	4b32      	ldr	r3, [pc, #200]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017284:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8017288:	4b2f      	ldr	r3, [pc, #188]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017290:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8017294:	4b2c      	ldr	r3, [pc, #176]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	22ff      	movs	r2, #255	; 0xff
 801729a:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801729e:	4b2a      	ldr	r3, [pc, #168]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	2200      	movs	r2, #0
 80172a4:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */
            /* ST_WORKAROUND_END */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80172a8:	4b27      	ldr	r3, [pc, #156]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80172b0:	4b25      	ldr	r3, [pc, #148]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80172b8:	2206      	movs	r2, #6
 80172ba:	4619      	mov	r1, r3
 80172bc:	f7fd fe48 	bl	8014f50 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80172c0:	4b20      	ldr	r3, [pc, #128]	; (8017344 <RegionUS915InitDefaults+0x248>)
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	4618      	mov	r0, r3
 80172c6:	4b20      	ldr	r3, [pc, #128]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80172ce:	2206      	movs	r2, #6
 80172d0:	4619      	mov	r1, r3
 80172d2:	f7fd fe3d 	bl	8014f50 <RegionCommonChanMaskCopy>
            break;
 80172d6:	e032      	b.n	801733e <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80172d8:	4b1b      	ldr	r3, [pc, #108]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80172e0:	4b19      	ldr	r3, [pc, #100]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80172e8:	2206      	movs	r2, #6
 80172ea:	4619      	mov	r1, r3
 80172ec:	f7fd fe30 	bl	8014f50 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 80172f0:	2300      	movs	r3, #0
 80172f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80172f6:	e01a      	b.n	801732e <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80172f8:	4b12      	ldr	r3, [pc, #72]	; (8017344 <RegionUS915InitDefaults+0x248>)
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8017300:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017304:	4b10      	ldr	r3, [pc, #64]	; (8017348 <RegionUS915InitDefaults+0x24c>)
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801730c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017310:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017314:	4b0b      	ldr	r3, [pc, #44]	; (8017344 <RegionUS915InitDefaults+0x248>)
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801731c:	4001      	ands	r1, r0
 801731e:	b289      	uxth	r1, r1
 8017320:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8017324:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017328:	3301      	adds	r3, #1
 801732a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801732e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017332:	2b05      	cmp	r3, #5
 8017334:	d9e0      	bls.n	80172f8 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 8017336:	e002      	b.n	801733e <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 8017338:	bf00      	nop
 801733a:	e000      	b.n	801733e <RegionUS915InitDefaults+0x242>
                return;
 801733c:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801733e:	3728      	adds	r7, #40	; 0x28
 8017340:	46bd      	mov	sp, r7
 8017342:	bd80      	pop	{r7, pc}
 8017344:	2000198c 	.word	0x2000198c
 8017348:	20001990 	.word	0x20001990
 801734c:	20001994 	.word	0x20001994
 8017350:	00030d40 	.word	0x00030d40
 8017354:	35c80160 	.word	0x35c80160
 8017358:	00186a00 	.word	0x00186a00
 801735c:	35d2afc0 	.word	0x35d2afc0

08017360 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017360:	b580      	push	{r7, lr}
 8017362:	b082      	sub	sp, #8
 8017364:	af00      	add	r7, sp, #0
 8017366:	6078      	str	r0, [r7, #4]
 8017368:	460b      	mov	r3, r1
 801736a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801736c:	78fb      	ldrb	r3, [r7, #3]
 801736e:	2b0f      	cmp	r3, #15
 8017370:	d867      	bhi.n	8017442 <RegionUS915Verify+0xe2>
 8017372:	a201      	add	r2, pc, #4	; (adr r2, 8017378 <RegionUS915Verify+0x18>)
 8017374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017378:	080173b9 	.word	0x080173b9
 801737c:	08017443 	.word	0x08017443
 8017380:	08017443 	.word	0x08017443
 8017384:	08017443 	.word	0x08017443
 8017388:	08017443 	.word	0x08017443
 801738c:	080173c7 	.word	0x080173c7
 8017390:	080173e5 	.word	0x080173e5
 8017394:	08017403 	.word	0x08017403
 8017398:	08017443 	.word	0x08017443
 801739c:	08017421 	.word	0x08017421
 80173a0:	08017421 	.word	0x08017421
 80173a4:	08017443 	.word	0x08017443
 80173a8:	08017443 	.word	0x08017443
 80173ac:	08017443 	.word	0x08017443
 80173b0:	08017443 	.word	0x08017443
 80173b4:	0801743f 	.word	0x0801743f
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	4618      	mov	r0, r3
 80173be:	f7ff fca1 	bl	8016d04 <VerifyRfFreq>
 80173c2:	4603      	mov	r3, r0
 80173c4:	e03e      	b.n	8017444 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	f993 3000 	ldrsb.w	r3, [r3]
 80173cc:	2204      	movs	r2, #4
 80173ce:	2100      	movs	r1, #0
 80173d0:	4618      	mov	r0, r3
 80173d2:	f7fd fd40 	bl	8014e56 <RegionCommonValueInRange>
 80173d6:	4603      	mov	r3, r0
 80173d8:	2b00      	cmp	r3, #0
 80173da:	bf14      	ite	ne
 80173dc:	2301      	movne	r3, #1
 80173de:	2300      	moveq	r3, #0
 80173e0:	b2db      	uxtb	r3, r3
 80173e2:	e02f      	b.n	8017444 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	f993 3000 	ldrsb.w	r3, [r3]
 80173ea:	2205      	movs	r2, #5
 80173ec:	2100      	movs	r1, #0
 80173ee:	4618      	mov	r0, r3
 80173f0:	f7fd fd31 	bl	8014e56 <RegionCommonValueInRange>
 80173f4:	4603      	mov	r3, r0
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	bf14      	ite	ne
 80173fa:	2301      	movne	r3, #1
 80173fc:	2300      	moveq	r3, #0
 80173fe:	b2db      	uxtb	r3, r3
 8017400:	e020      	b.n	8017444 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	f993 3000 	ldrsb.w	r3, [r3]
 8017408:	220d      	movs	r2, #13
 801740a:	2108      	movs	r1, #8
 801740c:	4618      	mov	r0, r3
 801740e:	f7fd fd22 	bl	8014e56 <RegionCommonValueInRange>
 8017412:	4603      	mov	r3, r0
 8017414:	2b00      	cmp	r3, #0
 8017416:	bf14      	ite	ne
 8017418:	2301      	movne	r3, #1
 801741a:	2300      	moveq	r3, #0
 801741c:	b2db      	uxtb	r3, r3
 801741e:	e011      	b.n	8017444 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	f993 3000 	ldrsb.w	r3, [r3]
 8017426:	220e      	movs	r2, #14
 8017428:	2100      	movs	r1, #0
 801742a:	4618      	mov	r0, r3
 801742c:	f7fd fd13 	bl	8014e56 <RegionCommonValueInRange>
 8017430:	4603      	mov	r3, r0
 8017432:	2b00      	cmp	r3, #0
 8017434:	bf14      	ite	ne
 8017436:	2301      	movne	r3, #1
 8017438:	2300      	moveq	r3, #0
 801743a:	b2db      	uxtb	r3, r3
 801743c:	e002      	b.n	8017444 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 801743e:	2300      	movs	r3, #0
 8017440:	e000      	b.n	8017444 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 8017442:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8017444:	4618      	mov	r0, r3
 8017446:	3708      	adds	r7, #8
 8017448:	46bd      	mov	sp, r7
 801744a:	bd80      	pop	{r7, pc}

0801744c <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801744c:	b480      	push	{r7}
 801744e:	b085      	sub	sp, #20
 8017450:	af00      	add	r7, sp, #0
 8017452:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	7a1b      	ldrb	r3, [r3, #8]
 8017458:	2b10      	cmp	r3, #16
 801745a:	d160      	bne.n	801751e <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	685b      	ldr	r3, [r3, #4]
 8017460:	330f      	adds	r3, #15
 8017462:	781b      	ldrb	r3, [r3, #0]
 8017464:	2b01      	cmp	r3, #1
 8017466:	d15c      	bne.n	8017522 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8017468:	2300      	movs	r3, #0
 801746a:	73fb      	strb	r3, [r7, #15]
 801746c:	2300      	movs	r3, #0
 801746e:	73bb      	strb	r3, [r7, #14]
 8017470:	e051      	b.n	8017516 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	685a      	ldr	r2, [r3, #4]
 8017476:	7bbb      	ldrb	r3, [r7, #14]
 8017478:	4413      	add	r3, r2
 801747a:	7819      	ldrb	r1, [r3, #0]
 801747c:	4b2b      	ldr	r3, [pc, #172]	; (801752c <RegionUS915ApplyCFList+0xe0>)
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	7bfa      	ldrb	r2, [r7, #15]
 8017482:	b289      	uxth	r1, r1
 8017484:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017488:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801748c:	4b27      	ldr	r3, [pc, #156]	; (801752c <RegionUS915ApplyCFList+0xe0>)
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	7bfa      	ldrb	r2, [r7, #15]
 8017492:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017496:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	685a      	ldr	r2, [r3, #4]
 801749e:	7bbb      	ldrb	r3, [r7, #14]
 80174a0:	3301      	adds	r3, #1
 80174a2:	4413      	add	r3, r2
 80174a4:	781b      	ldrb	r3, [r3, #0]
 80174a6:	b29b      	uxth	r3, r3
 80174a8:	021b      	lsls	r3, r3, #8
 80174aa:	b299      	uxth	r1, r3
 80174ac:	4b1f      	ldr	r3, [pc, #124]	; (801752c <RegionUS915ApplyCFList+0xe0>)
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	7bfa      	ldrb	r2, [r7, #15]
 80174b2:	4301      	orrs	r1, r0
 80174b4:	b289      	uxth	r1, r1
 80174b6:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80174ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 80174be:	7bfb      	ldrb	r3, [r7, #15]
 80174c0:	2b04      	cmp	r3, #4
 80174c2:	d10f      	bne.n	80174e4 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 80174c4:	4b19      	ldr	r3, [pc, #100]	; (801752c <RegionUS915ApplyCFList+0xe0>)
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	7bfa      	ldrb	r2, [r7, #15]
 80174ca:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80174ce:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80174d2:	4b16      	ldr	r3, [pc, #88]	; (801752c <RegionUS915ApplyCFList+0xe0>)
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	7bfa      	ldrb	r2, [r7, #15]
 80174d8:	b2c9      	uxtb	r1, r1
 80174da:	b289      	uxth	r1, r1
 80174dc:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80174e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 80174e4:	4b12      	ldr	r3, [pc, #72]	; (8017530 <RegionUS915ApplyCFList+0xe4>)
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	7bfa      	ldrb	r2, [r7, #15]
 80174ea:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80174ee:	4b0f      	ldr	r3, [pc, #60]	; (801752c <RegionUS915ApplyCFList+0xe0>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	7bfa      	ldrb	r2, [r7, #15]
 80174f4:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80174f8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80174fc:	4b0c      	ldr	r3, [pc, #48]	; (8017530 <RegionUS915ApplyCFList+0xe4>)
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	7bfa      	ldrb	r2, [r7, #15]
 8017502:	4001      	ands	r1, r0
 8017504:	b289      	uxth	r1, r1
 8017506:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801750a:	7bfb      	ldrb	r3, [r7, #15]
 801750c:	3301      	adds	r3, #1
 801750e:	73fb      	strb	r3, [r7, #15]
 8017510:	7bbb      	ldrb	r3, [r7, #14]
 8017512:	3302      	adds	r3, #2
 8017514:	73bb      	strb	r3, [r7, #14]
 8017516:	7bfb      	ldrb	r3, [r7, #15]
 8017518:	2b04      	cmp	r3, #4
 801751a:	d9aa      	bls.n	8017472 <RegionUS915ApplyCFList+0x26>
 801751c:	e002      	b.n	8017524 <RegionUS915ApplyCFList+0xd8>
        return;
 801751e:	bf00      	nop
 8017520:	e000      	b.n	8017524 <RegionUS915ApplyCFList+0xd8>
        return;
 8017522:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8017524:	3714      	adds	r7, #20
 8017526:	46bd      	mov	sp, r7
 8017528:	bc80      	pop	{r7}
 801752a:	4770      	bx	lr
 801752c:	20001990 	.word	0x20001990
 8017530:	2000198c 	.word	0x2000198c

08017534 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b084      	sub	sp, #16
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	2204      	movs	r2, #4
 8017542:	2100      	movs	r1, #0
 8017544:	4618      	mov	r0, r3
 8017546:	f7fd fcd7 	bl	8014ef8 <RegionCommonCountChannels>
 801754a:	4603      	mov	r3, r0
 801754c:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801754e:	7bbb      	ldrb	r3, [r7, #14]
 8017550:	2b01      	cmp	r3, #1
 8017552:	d804      	bhi.n	801755e <RegionUS915ChanMaskSet+0x2a>
 8017554:	7bbb      	ldrb	r3, [r7, #14]
 8017556:	2b00      	cmp	r3, #0
 8017558:	d001      	beq.n	801755e <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801755a:	2300      	movs	r3, #0
 801755c:	e04a      	b.n	80175f4 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	791b      	ldrb	r3, [r3, #4]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d002      	beq.n	801756c <RegionUS915ChanMaskSet+0x38>
 8017566:	2b01      	cmp	r3, #1
 8017568:	d036      	beq.n	80175d8 <RegionUS915ChanMaskSet+0xa4>
 801756a:	e040      	b.n	80175ee <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801756c:	4b23      	ldr	r3, [pc, #140]	; (80175fc <RegionUS915ChanMaskSet+0xc8>)
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	2206      	movs	r2, #6
 801757a:	4619      	mov	r1, r3
 801757c:	f7fd fce8 	bl	8014f50 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8017580:	4b1e      	ldr	r3, [pc, #120]	; (80175fc <RegionUS915ChanMaskSet+0xc8>)
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 8017588:	4b1c      	ldr	r3, [pc, #112]	; (80175fc <RegionUS915ChanMaskSet+0xc8>)
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	b2d2      	uxtb	r2, r2
 801758e:	b292      	uxth	r2, r2
 8017590:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8017594:	4b19      	ldr	r3, [pc, #100]	; (80175fc <RegionUS915ChanMaskSet+0xc8>)
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	2200      	movs	r2, #0
 801759a:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801759e:	2300      	movs	r3, #0
 80175a0:	73fb      	strb	r3, [r7, #15]
 80175a2:	e015      	b.n	80175d0 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80175a4:	4b16      	ldr	r3, [pc, #88]	; (8017600 <RegionUS915ChanMaskSet+0xcc>)
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	7bfa      	ldrb	r2, [r7, #15]
 80175aa:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80175ae:	4b13      	ldr	r3, [pc, #76]	; (80175fc <RegionUS915ChanMaskSet+0xc8>)
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	7bfa      	ldrb	r2, [r7, #15]
 80175b4:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80175b8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80175bc:	4b10      	ldr	r3, [pc, #64]	; (8017600 <RegionUS915ChanMaskSet+0xcc>)
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	7bfa      	ldrb	r2, [r7, #15]
 80175c2:	4001      	ands	r1, r0
 80175c4:	b289      	uxth	r1, r1
 80175c6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80175ca:	7bfb      	ldrb	r3, [r7, #15]
 80175cc:	3301      	adds	r3, #1
 80175ce:	73fb      	strb	r3, [r7, #15]
 80175d0:	7bfb      	ldrb	r3, [r7, #15]
 80175d2:	2b05      	cmp	r3, #5
 80175d4:	d9e6      	bls.n	80175a4 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 80175d6:	e00c      	b.n	80175f2 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80175d8:	4b08      	ldr	r3, [pc, #32]	; (80175fc <RegionUS915ChanMaskSet+0xc8>)
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	2206      	movs	r2, #6
 80175e6:	4619      	mov	r1, r3
 80175e8:	f7fd fcb2 	bl	8014f50 <RegionCommonChanMaskCopy>
            break;
 80175ec:	e001      	b.n	80175f2 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 80175ee:	2300      	movs	r3, #0
 80175f0:	e000      	b.n	80175f4 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 80175f2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80175f4:	4618      	mov	r0, r3
 80175f6:	3710      	adds	r7, #16
 80175f8:	46bd      	mov	sp, r7
 80175fa:	bd80      	pop	{r7, pc}
 80175fc:	20001990 	.word	0x20001990
 8017600:	2000198c 	.word	0x2000198c

08017604 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b088      	sub	sp, #32
 8017608:	af02      	add	r7, sp, #8
 801760a:	60ba      	str	r2, [r7, #8]
 801760c:	607b      	str	r3, [r7, #4]
 801760e:	4603      	mov	r3, r0
 8017610:	73fb      	strb	r3, [r7, #15]
 8017612:	460b      	mov	r3, r1
 8017614:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 8017616:	2300      	movs	r3, #0
 8017618:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801761a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801761e:	2b0d      	cmp	r3, #13
 8017620:	bfa8      	it	ge
 8017622:	230d      	movge	r3, #13
 8017624:	b25a      	sxtb	r2, r3
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017630:	4916      	ldr	r1, [pc, #88]	; (801768c <RegionUS915ComputeRxWindowParameters+0x88>)
 8017632:	4618      	mov	r0, r3
 8017634:	f7fe f92c 	bl	8015890 <RegionCommonGetBandwidth>
 8017638:	4603      	mov	r3, r0
 801763a:	b2da      	uxtb	r2, r3
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017646:	461a      	mov	r2, r3
 8017648:	4b11      	ldr	r3, [pc, #68]	; (8017690 <RegionUS915ComputeRxWindowParameters+0x8c>)
 801764a:	5c9a      	ldrb	r2, [r3, r2]
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017652:	4619      	mov	r1, r3
 8017654:	4b0d      	ldr	r3, [pc, #52]	; (801768c <RegionUS915ComputeRxWindowParameters+0x88>)
 8017656:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801765a:	4619      	mov	r1, r3
 801765c:	4610      	mov	r0, r2
 801765e:	f7fd fe95 	bl	801538c <RegionCommonComputeSymbolTimeLoRa>
 8017662:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017664:	4b0b      	ldr	r3, [pc, #44]	; (8017694 <RegionUS915ComputeRxWindowParameters+0x90>)
 8017666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017668:	4798      	blx	r3
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	3308      	adds	r3, #8
 801766e:	687a      	ldr	r2, [r7, #4]
 8017670:	320c      	adds	r2, #12
 8017672:	7bb9      	ldrb	r1, [r7, #14]
 8017674:	9201      	str	r2, [sp, #4]
 8017676:	9300      	str	r3, [sp, #0]
 8017678:	4603      	mov	r3, r0
 801767a:	68ba      	ldr	r2, [r7, #8]
 801767c:	6978      	ldr	r0, [r7, #20]
 801767e:	f7fd feab 	bl	80153d8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8017682:	bf00      	nop
 8017684:	3718      	adds	r7, #24
 8017686:	46bd      	mov	sp, r7
 8017688:	bd80      	pop	{r7, pc}
 801768a:	bf00      	nop
 801768c:	0801dbd8 	.word	0x0801dbd8
 8017690:	0801dbc8 	.word	0x0801dbc8
 8017694:	0801dc4c 	.word	0x0801dc4c

08017698 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017698:	b590      	push	{r4, r7, lr}
 801769a:	b091      	sub	sp, #68	; 0x44
 801769c:	af0a      	add	r7, sp, #40	; 0x28
 801769e:	6078      	str	r0, [r7, #4]
 80176a0:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	785b      	ldrb	r3, [r3, #1]
 80176a6:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80176a8:	2300      	movs	r3, #0
 80176aa:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 80176ac:	2300      	movs	r3, #0
 80176ae:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	685b      	ldr	r3, [r3, #4]
 80176b4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80176b6:	4b34      	ldr	r3, [pc, #208]	; (8017788 <RegionUS915RxConfig+0xf0>)
 80176b8:	685b      	ldr	r3, [r3, #4]
 80176ba:	4798      	blx	r3
 80176bc:	4603      	mov	r3, r0
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d001      	beq.n	80176c6 <RegionUS915RxConfig+0x2e>
    {
        return false;
 80176c2:	2300      	movs	r3, #0
 80176c4:	e05c      	b.n	8017780 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	7cdb      	ldrb	r3, [r3, #19]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d109      	bne.n	80176e2 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	781b      	ldrb	r3, [r3, #0]
 80176d2:	f003 0307 	and.w	r3, r3, #7
 80176d6:	4a2d      	ldr	r2, [pc, #180]	; (801778c <RegionUS915RxConfig+0xf4>)
 80176d8:	fb03 f202 	mul.w	r2, r3, r2
 80176dc:	4b2c      	ldr	r3, [pc, #176]	; (8017790 <RegionUS915RxConfig+0xf8>)
 80176de:	4413      	add	r3, r2
 80176e0:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 80176e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176e6:	4a2b      	ldr	r2, [pc, #172]	; (8017794 <RegionUS915RxConfig+0xfc>)
 80176e8:	5cd3      	ldrb	r3, [r2, r3]
 80176ea:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80176ec:	4b26      	ldr	r3, [pc, #152]	; (8017788 <RegionUS915RxConfig+0xf0>)
 80176ee:	68db      	ldr	r3, [r3, #12]
 80176f0:	6938      	ldr	r0, [r7, #16]
 80176f2:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80176f4:	4b24      	ldr	r3, [pc, #144]	; (8017788 <RegionUS915RxConfig+0xf0>)
 80176f6:	699c      	ldr	r4, [r3, #24]
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	789b      	ldrb	r3, [r3, #2]
 80176fc:	4618      	mov	r0, r3
 80176fe:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	689b      	ldr	r3, [r3, #8]
 8017706:	b29b      	uxth	r3, r3
 8017708:	687a      	ldr	r2, [r7, #4]
 801770a:	7c92      	ldrb	r2, [r2, #18]
 801770c:	9209      	str	r2, [sp, #36]	; 0x24
 801770e:	2201      	movs	r2, #1
 8017710:	9208      	str	r2, [sp, #32]
 8017712:	2200      	movs	r2, #0
 8017714:	9207      	str	r2, [sp, #28]
 8017716:	2200      	movs	r2, #0
 8017718:	9206      	str	r2, [sp, #24]
 801771a:	2200      	movs	r2, #0
 801771c:	9205      	str	r2, [sp, #20]
 801771e:	2200      	movs	r2, #0
 8017720:	9204      	str	r2, [sp, #16]
 8017722:	2200      	movs	r2, #0
 8017724:	9203      	str	r2, [sp, #12]
 8017726:	9302      	str	r3, [sp, #8]
 8017728:	2308      	movs	r3, #8
 801772a:	9301      	str	r3, [sp, #4]
 801772c:	2300      	movs	r3, #0
 801772e:	9300      	str	r3, [sp, #0]
 8017730:	2301      	movs	r3, #1
 8017732:	460a      	mov	r2, r1
 8017734:	4601      	mov	r1, r0
 8017736:	2001      	movs	r0, #1
 8017738:	47a0      	blx	r4

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	7c5b      	ldrb	r3, [r3, #17]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d005      	beq.n	801774e <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8017742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017746:	4a14      	ldr	r2, [pc, #80]	; (8017798 <RegionUS915RxConfig+0x100>)
 8017748:	5cd3      	ldrb	r3, [r2, r3]
 801774a:	75fb      	strb	r3, [r7, #23]
 801774c:	e004      	b.n	8017758 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801774e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017752:	4a12      	ldr	r2, [pc, #72]	; (801779c <RegionUS915RxConfig+0x104>)
 8017754:	5cd3      	ldrb	r3, [r2, r3]
 8017756:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8017758:	4b0b      	ldr	r3, [pc, #44]	; (8017788 <RegionUS915RxConfig+0xf0>)
 801775a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801775c:	7dfa      	ldrb	r2, [r7, #23]
 801775e:	320d      	adds	r2, #13
 8017760:	b2d2      	uxtb	r2, r2
 8017762:	4611      	mov	r1, r2
 8017764:	2001      	movs	r0, #1
 8017766:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	7cdb      	ldrb	r3, [r3, #19]
 801776c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017770:	6939      	ldr	r1, [r7, #16]
 8017772:	4618      	mov	r0, r3
 8017774:	f7fe f8aa 	bl	80158cc <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8017778:	683b      	ldr	r3, [r7, #0]
 801777a:	7bfa      	ldrb	r2, [r7, #15]
 801777c:	701a      	strb	r2, [r3, #0]
    return true;
 801777e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8017780:	4618      	mov	r0, r3
 8017782:	371c      	adds	r7, #28
 8017784:	46bd      	mov	sp, r7
 8017786:	bd90      	pop	{r4, r7, pc}
 8017788:	0801dc4c 	.word	0x0801dc4c
 801778c:	000927c0 	.word	0x000927c0
 8017790:	370870a0 	.word	0x370870a0
 8017794:	0801dbc8 	.word	0x0801dbc8
 8017798:	0801dc3c 	.word	0x0801dc3c
 801779c:	0801dc2c 	.word	0x0801dc2c

080177a0 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80177a0:	b590      	push	{r4, r7, lr}
 80177a2:	b093      	sub	sp, #76	; 0x4c
 80177a4:	af0a      	add	r7, sp, #40	; 0x28
 80177a6:	60f8      	str	r0, [r7, #12]
 80177a8:	60b9      	str	r1, [r7, #8]
 80177aa:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80177b2:	461a      	mov	r2, r3
 80177b4:	4b49      	ldr	r3, [pc, #292]	; (80178dc <RegionUS915TxConfig+0x13c>)
 80177b6:	5c9b      	ldrb	r3, [r3, r2]
 80177b8:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80177c0:	4b47      	ldr	r3, [pc, #284]	; (80178e0 <RegionUS915TxConfig+0x140>)
 80177c2:	681a      	ldr	r2, [r3, #0]
 80177c4:	4b47      	ldr	r3, [pc, #284]	; (80178e4 <RegionUS915TxConfig+0x144>)
 80177c6:	6819      	ldr	r1, [r3, #0]
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	781b      	ldrb	r3, [r3, #0]
 80177cc:	461c      	mov	r4, r3
 80177ce:	4623      	mov	r3, r4
 80177d0:	005b      	lsls	r3, r3, #1
 80177d2:	4423      	add	r3, r4
 80177d4:	009b      	lsls	r3, r3, #2
 80177d6:	440b      	add	r3, r1
 80177d8:	3309      	adds	r3, #9
 80177da:	781b      	ldrb	r3, [r3, #0]
 80177dc:	4619      	mov	r1, r3
 80177de:	460b      	mov	r3, r1
 80177e0:	005b      	lsls	r3, r3, #1
 80177e2:	440b      	add	r3, r1
 80177e4:	00db      	lsls	r3, r3, #3
 80177e6:	4413      	add	r3, r2
 80177e8:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80177f2:	4b3c      	ldr	r3, [pc, #240]	; (80178e4 <RegionUS915TxConfig+0x144>)
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80177fa:	f7ff fa4d 	bl	8016c98 <LimitTxPower>
 80177fe:	4603      	mov	r3, r0
 8017800:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017808:	4937      	ldr	r1, [pc, #220]	; (80178e8 <RegionUS915TxConfig+0x148>)
 801780a:	4618      	mov	r0, r3
 801780c:	f7fe f840 	bl	8015890 <RegionCommonGetBandwidth>
 8017810:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8017812:	2300      	movs	r3, #0
 8017814:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8017816:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801781a:	f04f 0200 	mov.w	r2, #0
 801781e:	4933      	ldr	r1, [pc, #204]	; (80178ec <RegionUS915TxConfig+0x14c>)
 8017820:	4618      	mov	r0, r3
 8017822:	f7fd fe91 	bl	8015548 <RegionCommonComputeTxPower>
 8017826:	4603      	mov	r3, r0
 8017828:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801782a:	4b31      	ldr	r3, [pc, #196]	; (80178f0 <RegionUS915TxConfig+0x150>)
 801782c:	68da      	ldr	r2, [r3, #12]
 801782e:	4b2d      	ldr	r3, [pc, #180]	; (80178e4 <RegionUS915TxConfig+0x144>)
 8017830:	6819      	ldr	r1, [r3, #0]
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	781b      	ldrb	r3, [r3, #0]
 8017836:	4618      	mov	r0, r3
 8017838:	4603      	mov	r3, r0
 801783a:	005b      	lsls	r3, r3, #1
 801783c:	4403      	add	r3, r0
 801783e:	009b      	lsls	r3, r3, #2
 8017840:	440b      	add	r3, r1
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	4618      	mov	r0, r3
 8017846:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8017848:	4b29      	ldr	r3, [pc, #164]	; (80178f0 <RegionUS915TxConfig+0x150>)
 801784a:	69dc      	ldr	r4, [r3, #28]
 801784c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017850:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017854:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8017858:	9208      	str	r2, [sp, #32]
 801785a:	2200      	movs	r2, #0
 801785c:	9207      	str	r2, [sp, #28]
 801785e:	2200      	movs	r2, #0
 8017860:	9206      	str	r2, [sp, #24]
 8017862:	2200      	movs	r2, #0
 8017864:	9205      	str	r2, [sp, #20]
 8017866:	2201      	movs	r2, #1
 8017868:	9204      	str	r2, [sp, #16]
 801786a:	2200      	movs	r2, #0
 801786c:	9203      	str	r2, [sp, #12]
 801786e:	2208      	movs	r2, #8
 8017870:	9202      	str	r2, [sp, #8]
 8017872:	2201      	movs	r2, #1
 8017874:	9201      	str	r2, [sp, #4]
 8017876:	9300      	str	r3, [sp, #0]
 8017878:	69bb      	ldr	r3, [r7, #24]
 801787a:	2200      	movs	r2, #0
 801787c:	2001      	movs	r0, #1
 801787e:	47a0      	blx	r4
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8017880:	4b18      	ldr	r3, [pc, #96]	; (80178e4 <RegionUS915TxConfig+0x144>)
 8017882:	681a      	ldr	r2, [r3, #0]
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	781b      	ldrb	r3, [r3, #0]
 8017888:	4619      	mov	r1, r3
 801788a:	460b      	mov	r3, r1
 801788c:	005b      	lsls	r3, r3, #1
 801788e:	440b      	add	r3, r1
 8017890:	009b      	lsls	r3, r3, #2
 8017892:	4413      	add	r3, r2
 8017894:	681a      	ldr	r2, [r3, #0]
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801789c:	4619      	mov	r1, r3
 801789e:	4610      	mov	r0, r2
 80178a0:	f7fe f846 	bl	8015930 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 80178a4:	4b12      	ldr	r3, [pc, #72]	; (80178f0 <RegionUS915TxConfig+0x150>)
 80178a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80178a8:	68fa      	ldr	r2, [r7, #12]
 80178aa:	8992      	ldrh	r2, [r2, #12]
 80178ac:	b2d2      	uxtb	r2, r2
 80178ae:	4611      	mov	r1, r2
 80178b0:	2001      	movs	r0, #1
 80178b2:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	899b      	ldrh	r3, [r3, #12]
 80178be:	4619      	mov	r1, r3
 80178c0:	4610      	mov	r0, r2
 80178c2:	f7ff fa63 	bl	8016d8c <GetTimeOnAir>
 80178c6:	4602      	mov	r2, r0
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80178cc:	68bb      	ldr	r3, [r7, #8]
 80178ce:	7fba      	ldrb	r2, [r7, #30]
 80178d0:	701a      	strb	r2, [r3, #0]
    return true;
 80178d2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80178d4:	4618      	mov	r0, r3
 80178d6:	3724      	adds	r7, #36	; 0x24
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd90      	pop	{r4, r7, pc}
 80178dc:	0801dbc8 	.word	0x0801dbc8
 80178e0:	20001994 	.word	0x20001994
 80178e4:	20001990 	.word	0x20001990
 80178e8:	0801dbd8 	.word	0x0801dbd8
 80178ec:	41f00000 	.word	0x41f00000
 80178f0:	0801dc4c 	.word	0x0801dc4c

080178f4 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80178f4:	b590      	push	{r4, r7, lr}
 80178f6:	b097      	sub	sp, #92	; 0x5c
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	60f8      	str	r0, [r7, #12]
 80178fc:	60b9      	str	r1, [r7, #8]
 80178fe:	607a      	str	r2, [r7, #4]
 8017900:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8017902:	2307      	movs	r3, #7
 8017904:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8017908:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801790c:	2200      	movs	r2, #0
 801790e:	601a      	str	r2, [r3, #0]
 8017910:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8017912:	2300      	movs	r3, #0
 8017914:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 8017918:	2300      	movs	r3, #0
 801791a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801791e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017922:	2200      	movs	r2, #0
 8017924:	601a      	str	r2, [r3, #0]
 8017926:	605a      	str	r2, [r3, #4]
 8017928:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801792a:	4b97      	ldr	r3, [pc, #604]	; (8017b88 <RegionUS915LinkAdrReq+0x294>)
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	f503 7158 	add.w	r1, r3, #864	; 0x360
 8017932:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017936:	2206      	movs	r2, #6
 8017938:	4618      	mov	r0, r3
 801793a:	f7fd fb09 	bl	8014f50 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801793e:	e11b      	b.n	8017b78 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	685a      	ldr	r2, [r3, #4]
 8017944:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8017948:	4413      	add	r3, r2
 801794a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801794e:	4611      	mov	r1, r2
 8017950:	4618      	mov	r0, r3
 8017952:	f7fd fc41 	bl	80151d8 <RegionCommonParseLinkAdrReq>
 8017956:	4603      	mov	r3, r0
 8017958:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 801795c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8017960:	2b00      	cmp	r3, #0
 8017962:	f000 8113 	beq.w	8017b8c <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8017966:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801796a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801796e:	4413      	add	r3, r2
 8017970:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8017974:	2307      	movs	r3, #7
 8017976:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801797a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801797e:	2b06      	cmp	r3, #6
 8017980:	d116      	bne.n	80179b0 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8017982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017986:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 801798a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801798e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 8017992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017996:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 801799a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801799e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80179a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80179a6:	b2db      	uxtb	r3, r3
 80179a8:	b29b      	uxth	r3, r3
 80179aa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80179ae:	e0e3      	b.n	8017b78 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 80179b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80179b4:	2b07      	cmp	r3, #7
 80179b6:	d112      	bne.n	80179de <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 80179b8:	2300      	movs	r3, #0
 80179ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 80179be:	2300      	movs	r3, #0
 80179c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 80179c4:	2300      	movs	r3, #0
 80179c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 80179ca:	2300      	movs	r3, #0
 80179cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80179d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80179d4:	b2db      	uxtb	r3, r3
 80179d6:	b29b      	uxth	r3, r3
 80179d8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80179dc:	e0cc      	b.n	8017b78 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 80179de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80179e2:	2b05      	cmp	r3, #5
 80179e4:	f040 80bf 	bne.w	8017b66 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 80179e8:	2301      	movs	r3, #1
 80179ea:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 80179ee:	2300      	movs	r3, #0
 80179f0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 80179f4:	2300      	movs	r3, #0
 80179f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80179fa:	e0ae      	b.n	8017b5a <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80179fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8017a00:	b2da      	uxtb	r2, r3
 8017a02:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017a06:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8017a0e:	4013      	ands	r3, r2
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d04d      	beq.n	8017ab0 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8017a14:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017a18:	f003 0301 	and.w	r3, r3, #1
 8017a1c:	b2db      	uxtb	r3, r3
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d120      	bne.n	8017a64 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8017a22:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017a26:	005b      	lsls	r3, r3, #1
 8017a28:	3358      	adds	r3, #88	; 0x58
 8017a2a:	443b      	add	r3, r7
 8017a2c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017a30:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017a34:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8017a38:	b292      	uxth	r2, r2
 8017a3a:	005b      	lsls	r3, r3, #1
 8017a3c:	3358      	adds	r3, #88	; 0x58
 8017a3e:	443b      	add	r3, r7
 8017a40:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8017a44:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017a48:	b21a      	sxth	r2, r3
 8017a4a:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017a4e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017a52:	fa01 f303 	lsl.w	r3, r1, r3
 8017a56:	b21b      	sxth	r3, r3
 8017a58:	4313      	orrs	r3, r2
 8017a5a:	b21b      	sxth	r3, r3
 8017a5c:	b29b      	uxth	r3, r3
 8017a5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017a62:	e075      	b.n	8017b50 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8017a64:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017a68:	005b      	lsls	r3, r3, #1
 8017a6a:	3358      	adds	r3, #88	; 0x58
 8017a6c:	443b      	add	r3, r7
 8017a6e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017a72:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017a76:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8017a7a:	b292      	uxth	r2, r2
 8017a7c:	005b      	lsls	r3, r3, #1
 8017a7e:	3358      	adds	r3, #88	; 0x58
 8017a80:	443b      	add	r3, r7
 8017a82:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8017a86:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017a8a:	b21a      	sxth	r2, r3
 8017a8c:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017a90:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017a94:	fa01 f303 	lsl.w	r3, r1, r3
 8017a98:	b21b      	sxth	r3, r3
 8017a9a:	4313      	orrs	r3, r2
 8017a9c:	b21b      	sxth	r3, r3
 8017a9e:	b29b      	uxth	r3, r3
 8017aa0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8017aa4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017aa8:	3301      	adds	r3, #1
 8017aaa:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8017aae:	e04f      	b.n	8017b50 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8017ab0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017ab4:	f003 0301 	and.w	r3, r3, #1
 8017ab8:	b2db      	uxtb	r3, r3
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d122      	bne.n	8017b04 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 8017abe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017ac2:	005b      	lsls	r3, r3, #1
 8017ac4:	3358      	adds	r3, #88	; 0x58
 8017ac6:	443b      	add	r3, r7
 8017ac8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017acc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017ad0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8017ad4:	b292      	uxth	r2, r2
 8017ad6:	005b      	lsls	r3, r3, #1
 8017ad8:	3358      	adds	r3, #88	; 0x58
 8017ada:	443b      	add	r3, r7
 8017adc:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8017ae0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017ae4:	b21a      	sxth	r2, r3
 8017ae6:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017aea:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017aee:	fa01 f303 	lsl.w	r3, r1, r3
 8017af2:	b21b      	sxth	r3, r3
 8017af4:	43db      	mvns	r3, r3
 8017af6:	b21b      	sxth	r3, r3
 8017af8:	4013      	ands	r3, r2
 8017afa:	b21b      	sxth	r3, r3
 8017afc:	b29b      	uxth	r3, r3
 8017afe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017b02:	e025      	b.n	8017b50 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8017b04:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017b08:	005b      	lsls	r3, r3, #1
 8017b0a:	3358      	adds	r3, #88	; 0x58
 8017b0c:	443b      	add	r3, r7
 8017b0e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017b12:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017b16:	b2d2      	uxtb	r2, r2
 8017b18:	b292      	uxth	r2, r2
 8017b1a:	005b      	lsls	r3, r3, #1
 8017b1c:	3358      	adds	r3, #88	; 0x58
 8017b1e:	443b      	add	r3, r7
 8017b20:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8017b24:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017b28:	b21a      	sxth	r2, r3
 8017b2a:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017b2e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017b32:	fa01 f303 	lsl.w	r3, r1, r3
 8017b36:	b21b      	sxth	r3, r3
 8017b38:	43db      	mvns	r3, r3
 8017b3a:	b21b      	sxth	r3, r3
 8017b3c:	4013      	ands	r3, r2
 8017b3e:	b21b      	sxth	r3, r3
 8017b40:	b29b      	uxth	r3, r3
 8017b42:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8017b46:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017b4a:	3301      	adds	r3, #1
 8017b4c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8017b50:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017b54:	3301      	adds	r3, #1
 8017b56:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8017b5a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017b5e:	2b07      	cmp	r3, #7
 8017b60:	f67f af4c 	bls.w	80179fc <RegionUS915LinkAdrReq+0x108>
 8017b64:	e008      	b.n	8017b78 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8017b66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017b6a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8017b6e:	005b      	lsls	r3, r3, #1
 8017b70:	3358      	adds	r3, #88	; 0x58
 8017b72:	443b      	add	r3, r7
 8017b74:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	7a1b      	ldrb	r3, [r3, #8]
 8017b7c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8017b80:	429a      	cmp	r2, r3
 8017b82:	f4ff aedd 	bcc.w	8017940 <RegionUS915LinkAdrReq+0x4c>
 8017b86:	e002      	b.n	8017b8e <RegionUS915LinkAdrReq+0x29a>
 8017b88:	20001990 	.word	0x20001990
            break; // break loop, since no more request has been found
 8017b8c:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8017b8e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8017b92:	2b03      	cmp	r3, #3
 8017b94:	dc0f      	bgt.n	8017bb6 <RegionUS915LinkAdrReq+0x2c2>
 8017b96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017b9a:	2204      	movs	r2, #4
 8017b9c:	2100      	movs	r1, #0
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f7fd f9aa 	bl	8014ef8 <RegionCommonCountChannels>
 8017ba4:	4603      	mov	r3, r0
 8017ba6:	2b01      	cmp	r3, #1
 8017ba8:	d805      	bhi.n	8017bb6 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8017baa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017bae:	f023 0301 	bic.w	r3, r3, #1
 8017bb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8017bb6:	2302      	movs	r3, #2
 8017bb8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	7a5b      	ldrb	r3, [r3, #9]
 8017bc0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8017bc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017bc8:	4618      	mov	r0, r3
 8017bca:	f7ff f90f 	bl	8016dec <RegionUS915GetPhyParam>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 8017bd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017bd6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	7a9b      	ldrb	r3, [r3, #10]
 8017bdc:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8017bde:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8017be2:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017be4:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8017be8:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8017bea:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8017bee:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8017bf6:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8017bfe:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	7b5b      	ldrb	r3, [r3, #13]
 8017c04:	b25b      	sxtb	r3, r3
 8017c06:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8017c08:	2348      	movs	r3, #72	; 0x48
 8017c0a:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8017c0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017c12:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8017c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c16:	b25b      	sxtb	r3, r3
 8017c18:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8017c1c:	2304      	movs	r3, #4
 8017c1e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8017c22:	4b3f      	ldr	r3, [pc, #252]	; (8017d20 <RegionUS915LinkAdrReq+0x42c>)
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8017c28:	230e      	movs	r3, #14
 8017c2a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8017c2e:	2300      	movs	r3, #0
 8017c30:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8017c3a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8017c3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017c42:	1c9a      	adds	r2, r3, #2
 8017c44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017c48:	1c59      	adds	r1, r3, #1
 8017c4a:	f107 0014 	add.w	r0, r7, #20
 8017c4e:	4623      	mov	r3, r4
 8017c50:	f7fd fb13 	bl	801527a <RegionCommonLinkAdrReqVerifyParams>
 8017c54:	4603      	mov	r3, r0
 8017c56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8017c5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017c5e:	2b07      	cmp	r3, #7
 8017c60:	d147      	bne.n	8017cf2 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8017c62:	4b2f      	ldr	r3, [pc, #188]	; (8017d20 <RegionUS915LinkAdrReq+0x42c>)
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017c6a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8017c6e:	2206      	movs	r2, #6
 8017c70:	4618      	mov	r0, r3
 8017c72:	f7fd f96d 	bl	8014f50 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8017c76:	4b2b      	ldr	r3, [pc, #172]	; (8017d24 <RegionUS915LinkAdrReq+0x430>)
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	8819      	ldrh	r1, [r3, #0]
 8017c7c:	4b28      	ldr	r3, [pc, #160]	; (8017d20 <RegionUS915LinkAdrReq+0x42c>)
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8017c84:	4b27      	ldr	r3, [pc, #156]	; (8017d24 <RegionUS915LinkAdrReq+0x430>)
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	400a      	ands	r2, r1
 8017c8a:	b292      	uxth	r2, r2
 8017c8c:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8017c8e:	4b25      	ldr	r3, [pc, #148]	; (8017d24 <RegionUS915LinkAdrReq+0x430>)
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	8859      	ldrh	r1, [r3, #2]
 8017c94:	4b22      	ldr	r3, [pc, #136]	; (8017d20 <RegionUS915LinkAdrReq+0x42c>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 8017c9c:	4b21      	ldr	r3, [pc, #132]	; (8017d24 <RegionUS915LinkAdrReq+0x430>)
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	400a      	ands	r2, r1
 8017ca2:	b292      	uxth	r2, r2
 8017ca4:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8017ca6:	4b1f      	ldr	r3, [pc, #124]	; (8017d24 <RegionUS915LinkAdrReq+0x430>)
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	8899      	ldrh	r1, [r3, #4]
 8017cac:	4b1c      	ldr	r3, [pc, #112]	; (8017d20 <RegionUS915LinkAdrReq+0x42c>)
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 8017cb4:	4b1b      	ldr	r3, [pc, #108]	; (8017d24 <RegionUS915LinkAdrReq+0x430>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	400a      	ands	r2, r1
 8017cba:	b292      	uxth	r2, r2
 8017cbc:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8017cbe:	4b19      	ldr	r3, [pc, #100]	; (8017d24 <RegionUS915LinkAdrReq+0x430>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	88d9      	ldrh	r1, [r3, #6]
 8017cc4:	4b16      	ldr	r3, [pc, #88]	; (8017d20 <RegionUS915LinkAdrReq+0x42c>)
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 8017ccc:	4b15      	ldr	r3, [pc, #84]	; (8017d24 <RegionUS915LinkAdrReq+0x430>)
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	400a      	ands	r2, r1
 8017cd2:	b292      	uxth	r2, r2
 8017cd4:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8017cd6:	4b12      	ldr	r3, [pc, #72]	; (8017d20 <RegionUS915LinkAdrReq+0x42c>)
 8017cd8:	681a      	ldr	r2, [r3, #0]
 8017cda:	4b12      	ldr	r3, [pc, #72]	; (8017d24 <RegionUS915LinkAdrReq+0x430>)
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8017ce2:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8017ce4:	4b0e      	ldr	r3, [pc, #56]	; (8017d20 <RegionUS915LinkAdrReq+0x42c>)
 8017ce6:	681a      	ldr	r2, [r3, #0]
 8017ce8:	4b0e      	ldr	r3, [pc, #56]	; (8017d24 <RegionUS915LinkAdrReq+0x430>)
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8017cf0:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8017cf2:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 8017cf6:	68bb      	ldr	r3, [r7, #8]
 8017cf8:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8017cfa:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8017d02:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8017d06:	683b      	ldr	r3, [r7, #0]
 8017d08:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017d0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017d0c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8017d10:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8017d12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8017d16:	4618      	mov	r0, r3
 8017d18:	375c      	adds	r7, #92	; 0x5c
 8017d1a:	46bd      	mov	sp, r7
 8017d1c:	bd90      	pop	{r4, r7, pc}
 8017d1e:	bf00      	nop
 8017d20:	20001990 	.word	0x20001990
 8017d24:	2000198c 	.word	0x2000198c

08017d28 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b084      	sub	sp, #16
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8017d30:	2307      	movs	r3, #7
 8017d32:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	685b      	ldr	r3, [r3, #4]
 8017d38:	4618      	mov	r0, r3
 8017d3a:	f7fe ffe3 	bl	8016d04 <VerifyRfFreq>
 8017d3e:	4603      	mov	r3, r0
 8017d40:	f083 0301 	eor.w	r3, r3, #1
 8017d44:	b2db      	uxtb	r3, r3
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d003      	beq.n	8017d52 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8017d4a:	7bfb      	ldrb	r3, [r7, #15]
 8017d4c:	f023 0301 	bic.w	r3, r3, #1
 8017d50:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	f993 3000 	ldrsb.w	r3, [r3]
 8017d58:	220d      	movs	r2, #13
 8017d5a:	2108      	movs	r1, #8
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	f7fd f87a 	bl	8014e56 <RegionCommonValueInRange>
 8017d62:	4603      	mov	r3, r0
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d103      	bne.n	8017d70 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8017d68:	7bfb      	ldrb	r3, [r7, #15]
 8017d6a:	f023 0302 	bic.w	r3, r3, #2
 8017d6e:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	f993 3000 	ldrsb.w	r3, [r3]
 8017d76:	2207      	movs	r2, #7
 8017d78:	2105      	movs	r1, #5
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	f7fd f86b 	bl	8014e56 <RegionCommonValueInRange>
 8017d80:	4603      	mov	r3, r0
 8017d82:	2b01      	cmp	r3, #1
 8017d84:	d004      	beq.n	8017d90 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8017d8c:	2b0d      	cmp	r3, #13
 8017d8e:	dd03      	ble.n	8017d98 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8017d90:	7bfb      	ldrb	r3, [r7, #15]
 8017d92:	f023 0302 	bic.w	r3, r3, #2
 8017d96:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017d9e:	2203      	movs	r2, #3
 8017da0:	2100      	movs	r1, #0
 8017da2:	4618      	mov	r0, r3
 8017da4:	f7fd f857 	bl	8014e56 <RegionCommonValueInRange>
 8017da8:	4603      	mov	r3, r0
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d103      	bne.n	8017db6 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8017dae:	7bfb      	ldrb	r3, [r7, #15]
 8017db0:	f023 0304 	bic.w	r3, r3, #4
 8017db4:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8017db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017db8:	4618      	mov	r0, r3
 8017dba:	3710      	adds	r7, #16
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	bd80      	pop	{r7, pc}

08017dc0 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8017dc0:	b480      	push	{r7}
 8017dc2:	b083      	sub	sp, #12
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017dcc:	4618      	mov	r0, r3
 8017dce:	370c      	adds	r7, #12
 8017dd0:	46bd      	mov	sp, r7
 8017dd2:	bc80      	pop	{r7}
 8017dd4:	4770      	bx	lr

08017dd6 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017dd6:	b480      	push	{r7}
 8017dd8:	b083      	sub	sp, #12
 8017dda:	af00      	add	r7, sp, #0
 8017ddc:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017de2:	4618      	mov	r0, r3
 8017de4:	370c      	adds	r7, #12
 8017de6:	46bd      	mov	sp, r7
 8017de8:	bc80      	pop	{r7}
 8017dea:	4770      	bx	lr

08017dec <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8017dec:	b480      	push	{r7}
 8017dee:	b083      	sub	sp, #12
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017df8:	4618      	mov	r0, r3
 8017dfa:	370c      	adds	r7, #12
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	bc80      	pop	{r7}
 8017e00:	4770      	bx	lr
	...

08017e04 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8017e04:	b480      	push	{r7}
 8017e06:	b083      	sub	sp, #12
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	460a      	mov	r2, r1
 8017e0e:	71fb      	strb	r3, [r7, #7]
 8017e10:	4613      	mov	r3, r2
 8017e12:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8017e14:	79bb      	ldrb	r3, [r7, #6]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d106      	bne.n	8017e28 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8017e1a:	4b13      	ldr	r3, [pc, #76]	; (8017e68 <RegionUS915AlternateDr+0x64>)
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	7b5a      	ldrb	r2, [r3, #13]
 8017e20:	3201      	adds	r2, #1
 8017e22:	b2d2      	uxtb	r2, r2
 8017e24:	735a      	strb	r2, [r3, #13]
 8017e26:	e005      	b.n	8017e34 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8017e28:	4b0f      	ldr	r3, [pc, #60]	; (8017e68 <RegionUS915AlternateDr+0x64>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	7b5a      	ldrb	r2, [r3, #13]
 8017e2e:	3a01      	subs	r2, #1
 8017e30:	b2d2      	uxtb	r2, r2
 8017e32:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8017e34:	4b0c      	ldr	r3, [pc, #48]	; (8017e68 <RegionUS915AlternateDr+0x64>)
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	7b5a      	ldrb	r2, [r3, #13]
 8017e3a:	4b0c      	ldr	r3, [pc, #48]	; (8017e6c <RegionUS915AlternateDr+0x68>)
 8017e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8017e40:	0859      	lsrs	r1, r3, #1
 8017e42:	460b      	mov	r3, r1
 8017e44:	00db      	lsls	r3, r3, #3
 8017e46:	440b      	add	r3, r1
 8017e48:	1ad3      	subs	r3, r2, r3
 8017e4a:	b2db      	uxtb	r3, r3
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d102      	bne.n	8017e56 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8017e50:	2304      	movs	r3, #4
 8017e52:	71fb      	strb	r3, [r7, #7]
 8017e54:	e001      	b.n	8017e5a <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 8017e56:	2300      	movs	r3, #0
 8017e58:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8017e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8017e5e:	4618      	mov	r0, r3
 8017e60:	370c      	adds	r7, #12
 8017e62:	46bd      	mov	sp, r7
 8017e64:	bc80      	pop	{r7}
 8017e66:	4770      	bx	lr
 8017e68:	2000198c 	.word	0x2000198c
 8017e6c:	38e38e39 	.word	0x38e38e39

08017e70 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017e70:	b580      	push	{r7, lr}
 8017e72:	b0a8      	sub	sp, #160	; 0xa0
 8017e74:	af02      	add	r7, sp, #8
 8017e76:	60f8      	str	r0, [r7, #12]
 8017e78:	60b9      	str	r1, [r7, #8]
 8017e7a:	607a      	str	r2, [r7, #4]
 8017e7c:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8017e7e:	2300      	movs	r3, #0
 8017e80:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 8017e84:	2300      	movs	r3, #0
 8017e86:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017e8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017e92:	2244      	movs	r2, #68	; 0x44
 8017e94:	2100      	movs	r1, #0
 8017e96:	4618      	mov	r0, r3
 8017e98:	f004 ff8e 	bl	801cdb8 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017e9c:	230c      	movs	r3, #12
 8017e9e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8017ea2:	4b67      	ldr	r3, [pc, #412]	; (8018040 <RegionUS915NextChannel+0x1d0>)
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	2204      	movs	r2, #4
 8017ea8:	2100      	movs	r1, #0
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f7fd f824 	bl	8014ef8 <RegionCommonCountChannels>
 8017eb0:	4603      	mov	r3, r0
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d10e      	bne.n	8017ed4 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8017eb6:	4b62      	ldr	r3, [pc, #392]	; (8018040 <RegionUS915NextChannel+0x1d0>)
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	4618      	mov	r0, r3
 8017ebc:	4b61      	ldr	r3, [pc, #388]	; (8018044 <RegionUS915NextChannel+0x1d4>)
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017ec4:	2204      	movs	r2, #4
 8017ec6:	4619      	mov	r1, r3
 8017ec8:	f7fd f842 	bl	8014f50 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8017ecc:	4b5c      	ldr	r3, [pc, #368]	; (8018040 <RegionUS915NextChannel+0x1d0>)
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017eda:	2b03      	cmp	r3, #3
 8017edc:	dd0c      	ble.n	8017ef8 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8017ede:	4b58      	ldr	r3, [pc, #352]	; (8018040 <RegionUS915NextChannel+0x1d0>)
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	891b      	ldrh	r3, [r3, #8]
 8017ee4:	b2db      	uxtb	r3, r3
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d106      	bne.n	8017ef8 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8017eea:	4b56      	ldr	r3, [pc, #344]	; (8018044 <RegionUS915NextChannel+0x1d4>)
 8017eec:	681a      	ldr	r2, [r3, #0]
 8017eee:	4b54      	ldr	r3, [pc, #336]	; (8018040 <RegionUS915NextChannel+0x1d0>)
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8017ef6:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	7a5b      	ldrb	r3, [r3, #9]
 8017efc:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017f04:	b2db      	uxtb	r3, r3
 8017f06:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8017f08:	4b4d      	ldr	r3, [pc, #308]	; (8018040 <RegionUS915NextChannel+0x1d0>)
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8017f0e:	4b4d      	ldr	r3, [pc, #308]	; (8018044 <RegionUS915NextChannel+0x1d4>)
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8017f14:	4b4c      	ldr	r3, [pc, #304]	; (8018048 <RegionUS915NextChannel+0x1d8>)
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8017f1a:	2348      	movs	r3, #72	; 0x48
 8017f1c:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 8017f1e:	2300      	movs	r3, #0
 8017f20:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8017f22:	68fb      	ldr	r3, [r7, #12]
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	685b      	ldr	r3, [r3, #4]
 8017f2c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	7a9b      	ldrb	r3, [r3, #10]
 8017f32:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8017f36:	2301      	movs	r3, #1
 8017f38:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8017f3c:	f107 0314 	add.w	r3, r7, #20
 8017f40:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8017f42:	68fa      	ldr	r2, [r7, #12]
 8017f44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017f48:	320c      	adds	r2, #12
 8017f4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017f4e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	7d1b      	ldrb	r3, [r3, #20]
 8017f56:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	8adb      	ldrh	r3, [r3, #22]
 8017f64:	4619      	mov	r1, r3
 8017f66:	4610      	mov	r0, r2
 8017f68:	f7fe ff10 	bl	8016d8c <GetTimeOnAir>
 8017f6c:	4603      	mov	r3, r0
 8017f6e:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8017f70:	f107 0195 	add.w	r1, r7, #149	; 0x95
 8017f74:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017f78:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	9301      	str	r3, [sp, #4]
 8017f80:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8017f84:	9300      	str	r3, [sp, #0]
 8017f86:	460b      	mov	r3, r1
 8017f88:	6839      	ldr	r1, [r7, #0]
 8017f8a:	f7fd fbcc 	bl	8015726 <RegionCommonIdentifyChannels>
 8017f8e:	4603      	mov	r3, r0
 8017f90:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8017f94:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d14a      	bne.n	8018032 <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	7a5b      	ldrb	r3, [r3, #9]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d00e      	beq.n	8017fc2 <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8017fa4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8017fa8:	3b01      	subs	r3, #1
 8017faa:	4619      	mov	r1, r3
 8017fac:	2000      	movs	r0, #0
 8017fae:	f000 f89f 	bl	80180f0 <randr>
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	3398      	adds	r3, #152	; 0x98
 8017fb6:	443b      	add	r3, r7
 8017fb8:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8017fbc:	68bb      	ldr	r3, [r7, #8]
 8017fbe:	701a      	strb	r2, [r3, #0]
 8017fc0:	e02e      	b.n	8018020 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d10e      	bne.n	8017fea <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8017fcc:	4b1c      	ldr	r3, [pc, #112]	; (8018040 <RegionUS915NextChannel+0x1d0>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8017fd2:	4b1b      	ldr	r3, [pc, #108]	; (8018040 <RegionUS915NextChannel+0x1d0>)
 8017fd4:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8017fd6:	330c      	adds	r3, #12
 8017fd8:	68ba      	ldr	r2, [r7, #8]
 8017fda:	4619      	mov	r1, r3
 8017fdc:	f7fc fcf6 	bl	80149cc <RegionBaseUSComputeNext125kHzJoinChannel>
 8017fe0:	4603      	mov	r3, r0
 8017fe2:	2b03      	cmp	r3, #3
 8017fe4:	d11c      	bne.n	8018020 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8017fe6:	2303      	movs	r3, #3
 8017fe8:	e025      	b.n	8018036 <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8017fea:	2300      	movs	r3, #0
 8017fec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8017ff0:	e004      	b.n	8017ffc <RegionUS915NextChannel+0x18c>
                {
                    i++;
 8017ff2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8017ff6:	3301      	adds	r3, #1
 8017ff8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8017ffc:	4b10      	ldr	r3, [pc, #64]	; (8018040 <RegionUS915NextChannel+0x1d0>)
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	891b      	ldrh	r3, [r3, #8]
 8018002:	b2da      	uxtb	r2, r3
 8018004:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018008:	fa42 f303 	asr.w	r3, r2, r3
 801800c:	f003 0301 	and.w	r3, r3, #1
 8018010:	2b00      	cmp	r3, #0
 8018012:	d0ee      	beq.n	8017ff2 <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 8018014:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018018:	3340      	adds	r3, #64	; 0x40
 801801a:	b2da      	uxtb	r2, r3
 801801c:	68bb      	ldr	r3, [r7, #8]
 801801e:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8018020:	4b07      	ldr	r3, [pc, #28]	; (8018040 <RegionUS915NextChannel+0x1d0>)
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	4618      	mov	r0, r3
 8018026:	68bb      	ldr	r3, [r7, #8]
 8018028:	781b      	ldrb	r3, [r3, #0]
 801802a:	2248      	movs	r2, #72	; 0x48
 801802c:	4619      	mov	r1, r3
 801802e:	f7fc ff2f 	bl	8014e90 <RegionCommonChanDisable>
    }
    return status;
 8018032:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8018036:	4618      	mov	r0, r3
 8018038:	3798      	adds	r7, #152	; 0x98
 801803a:	46bd      	mov	sp, r7
 801803c:	bd80      	pop	{r7, pc}
 801803e:	bf00      	nop
 8018040:	2000198c 	.word	0x2000198c
 8018044:	20001990 	.word	0x20001990
 8018048:	20001994 	.word	0x20001994

0801804c <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801804c:	b480      	push	{r7}
 801804e:	b085      	sub	sp, #20
 8018050:	af00      	add	r7, sp, #0
 8018052:	4603      	mov	r3, r0
 8018054:	71fb      	strb	r3, [r7, #7]
 8018056:	460b      	mov	r3, r1
 8018058:	71bb      	strb	r3, [r7, #6]
 801805a:	4613      	mov	r3, r2
 801805c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801805e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018062:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018066:	4909      	ldr	r1, [pc, #36]	; (801808c <RegionUS915ApplyDrOffset+0x40>)
 8018068:	0092      	lsls	r2, r2, #2
 801806a:	440a      	add	r2, r1
 801806c:	4413      	add	r3, r2
 801806e:	781b      	ldrb	r3, [r3, #0]
 8018070:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018076:	2b00      	cmp	r3, #0
 8018078:	da01      	bge.n	801807e <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801807a:	2300      	movs	r3, #0
 801807c:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801807e:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8018080:	4618      	mov	r0, r3
 8018082:	3714      	adds	r7, #20
 8018084:	46bd      	mov	sp, r7
 8018086:	bc80      	pop	{r7}
 8018088:	4770      	bx	lr
 801808a:	bf00      	nop
 801808c:	0801dc18 	.word	0x0801dc18

08018090 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018090:	b480      	push	{r7}
 8018092:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018094:	4b0d      	ldr	r3, [pc, #52]	; (80180cc <rand1+0x3c>)
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	4a0d      	ldr	r2, [pc, #52]	; (80180d0 <rand1+0x40>)
 801809a:	fb02 f303 	mul.w	r3, r2, r3
 801809e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80180a2:	3339      	adds	r3, #57	; 0x39
 80180a4:	4a09      	ldr	r2, [pc, #36]	; (80180cc <rand1+0x3c>)
 80180a6:	6013      	str	r3, [r2, #0]
 80180a8:	4b08      	ldr	r3, [pc, #32]	; (80180cc <rand1+0x3c>)
 80180aa:	681a      	ldr	r2, [r3, #0]
 80180ac:	2303      	movs	r3, #3
 80180ae:	fba3 1302 	umull	r1, r3, r3, r2
 80180b2:	1ad1      	subs	r1, r2, r3
 80180b4:	0849      	lsrs	r1, r1, #1
 80180b6:	440b      	add	r3, r1
 80180b8:	0f99      	lsrs	r1, r3, #30
 80180ba:	460b      	mov	r3, r1
 80180bc:	07db      	lsls	r3, r3, #31
 80180be:	1a5b      	subs	r3, r3, r1
 80180c0:	1ad1      	subs	r1, r2, r3
 80180c2:	460b      	mov	r3, r1
}
 80180c4:	4618      	mov	r0, r3
 80180c6:	46bd      	mov	sp, r7
 80180c8:	bc80      	pop	{r7}
 80180ca:	4770      	bx	lr
 80180cc:	20000140 	.word	0x20000140
 80180d0:	41c64e6d 	.word	0x41c64e6d

080180d4 <srand1>:

void srand1( uint32_t seed )
{
 80180d4:	b480      	push	{r7}
 80180d6:	b083      	sub	sp, #12
 80180d8:	af00      	add	r7, sp, #0
 80180da:	6078      	str	r0, [r7, #4]
    next = seed;
 80180dc:	4a03      	ldr	r2, [pc, #12]	; (80180ec <srand1+0x18>)
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	6013      	str	r3, [r2, #0]
}
 80180e2:	bf00      	nop
 80180e4:	370c      	adds	r7, #12
 80180e6:	46bd      	mov	sp, r7
 80180e8:	bc80      	pop	{r7}
 80180ea:	4770      	bx	lr
 80180ec:	20000140 	.word	0x20000140

080180f0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b082      	sub	sp, #8
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
 80180f8:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80180fa:	f7ff ffc9 	bl	8018090 <rand1>
 80180fe:	4602      	mov	r2, r0
 8018100:	6839      	ldr	r1, [r7, #0]
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	1acb      	subs	r3, r1, r3
 8018106:	3301      	adds	r3, #1
 8018108:	fb92 f1f3 	sdiv	r1, r2, r3
 801810c:	fb01 f303 	mul.w	r3, r1, r3
 8018110:	1ad2      	subs	r2, r2, r3
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	4413      	add	r3, r2
}
 8018116:	4618      	mov	r0, r3
 8018118:	3708      	adds	r7, #8
 801811a:	46bd      	mov	sp, r7
 801811c:	bd80      	pop	{r7, pc}

0801811e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801811e:	b480      	push	{r7}
 8018120:	b085      	sub	sp, #20
 8018122:	af00      	add	r7, sp, #0
 8018124:	60f8      	str	r0, [r7, #12]
 8018126:	60b9      	str	r1, [r7, #8]
 8018128:	4613      	mov	r3, r2
 801812a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801812c:	e007      	b.n	801813e <memcpy1+0x20>
    {
        *dst++ = *src++;
 801812e:	68ba      	ldr	r2, [r7, #8]
 8018130:	1c53      	adds	r3, r2, #1
 8018132:	60bb      	str	r3, [r7, #8]
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	1c59      	adds	r1, r3, #1
 8018138:	60f9      	str	r1, [r7, #12]
 801813a:	7812      	ldrb	r2, [r2, #0]
 801813c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801813e:	88fb      	ldrh	r3, [r7, #6]
 8018140:	1e5a      	subs	r2, r3, #1
 8018142:	80fa      	strh	r2, [r7, #6]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d1f2      	bne.n	801812e <memcpy1+0x10>
    }
}
 8018148:	bf00      	nop
 801814a:	bf00      	nop
 801814c:	3714      	adds	r7, #20
 801814e:	46bd      	mov	sp, r7
 8018150:	bc80      	pop	{r7}
 8018152:	4770      	bx	lr

08018154 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018154:	b480      	push	{r7}
 8018156:	b085      	sub	sp, #20
 8018158:	af00      	add	r7, sp, #0
 801815a:	60f8      	str	r0, [r7, #12]
 801815c:	60b9      	str	r1, [r7, #8]
 801815e:	4613      	mov	r3, r2
 8018160:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018162:	88fb      	ldrh	r3, [r7, #6]
 8018164:	3b01      	subs	r3, #1
 8018166:	68fa      	ldr	r2, [r7, #12]
 8018168:	4413      	add	r3, r2
 801816a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801816c:	e007      	b.n	801817e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801816e:	68ba      	ldr	r2, [r7, #8]
 8018170:	1c53      	adds	r3, r2, #1
 8018172:	60bb      	str	r3, [r7, #8]
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	1e59      	subs	r1, r3, #1
 8018178:	60f9      	str	r1, [r7, #12]
 801817a:	7812      	ldrb	r2, [r2, #0]
 801817c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801817e:	88fb      	ldrh	r3, [r7, #6]
 8018180:	1e5a      	subs	r2, r3, #1
 8018182:	80fa      	strh	r2, [r7, #6]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d1f2      	bne.n	801816e <memcpyr+0x1a>
    }
}
 8018188:	bf00      	nop
 801818a:	bf00      	nop
 801818c:	3714      	adds	r7, #20
 801818e:	46bd      	mov	sp, r7
 8018190:	bc80      	pop	{r7}
 8018192:	4770      	bx	lr

08018194 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018194:	b480      	push	{r7}
 8018196:	b083      	sub	sp, #12
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
 801819c:	460b      	mov	r3, r1
 801819e:	70fb      	strb	r3, [r7, #3]
 80181a0:	4613      	mov	r3, r2
 80181a2:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80181a4:	e004      	b.n	80181b0 <memset1+0x1c>
    {
        *dst++ = value;
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	1c5a      	adds	r2, r3, #1
 80181aa:	607a      	str	r2, [r7, #4]
 80181ac:	78fa      	ldrb	r2, [r7, #3]
 80181ae:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80181b0:	883b      	ldrh	r3, [r7, #0]
 80181b2:	1e5a      	subs	r2, r3, #1
 80181b4:	803a      	strh	r2, [r7, #0]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d1f5      	bne.n	80181a6 <memset1+0x12>
    }
}
 80181ba:	bf00      	nop
 80181bc:	bf00      	nop
 80181be:	370c      	adds	r7, #12
 80181c0:	46bd      	mov	sp, r7
 80181c2:	bc80      	pop	{r7}
 80181c4:	4770      	bx	lr
	...

080181c8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80181c8:	b480      	push	{r7}
 80181ca:	b085      	sub	sp, #20
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	6078      	str	r0, [r7, #4]
 80181d0:	460b      	mov	r3, r1
 80181d2:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80181d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80181d8:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d101      	bne.n	80181e4 <Crc32+0x1c>
    {
        return 0;
 80181e0:	2300      	movs	r3, #0
 80181e2:	e026      	b.n	8018232 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80181e4:	2300      	movs	r3, #0
 80181e6:	817b      	strh	r3, [r7, #10]
 80181e8:	e01d      	b.n	8018226 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80181ea:	897b      	ldrh	r3, [r7, #10]
 80181ec:	687a      	ldr	r2, [r7, #4]
 80181ee:	4413      	add	r3, r2
 80181f0:	781b      	ldrb	r3, [r3, #0]
 80181f2:	461a      	mov	r2, r3
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	4053      	eors	r3, r2
 80181f8:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80181fa:	2300      	movs	r3, #0
 80181fc:	813b      	strh	r3, [r7, #8]
 80181fe:	e00c      	b.n	801821a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	085a      	lsrs	r2, r3, #1
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	f003 0301 	and.w	r3, r3, #1
 801820a:	425b      	negs	r3, r3
 801820c:	490b      	ldr	r1, [pc, #44]	; (801823c <Crc32+0x74>)
 801820e:	400b      	ands	r3, r1
 8018210:	4053      	eors	r3, r2
 8018212:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018214:	893b      	ldrh	r3, [r7, #8]
 8018216:	3301      	adds	r3, #1
 8018218:	813b      	strh	r3, [r7, #8]
 801821a:	893b      	ldrh	r3, [r7, #8]
 801821c:	2b07      	cmp	r3, #7
 801821e:	d9ef      	bls.n	8018200 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8018220:	897b      	ldrh	r3, [r7, #10]
 8018222:	3301      	adds	r3, #1
 8018224:	817b      	strh	r3, [r7, #10]
 8018226:	897a      	ldrh	r2, [r7, #10]
 8018228:	887b      	ldrh	r3, [r7, #2]
 801822a:	429a      	cmp	r2, r3
 801822c:	d3dd      	bcc.n	80181ea <Crc32+0x22>
        }
    }

    return ~crc;
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	43db      	mvns	r3, r3
}
 8018232:	4618      	mov	r0, r3
 8018234:	3714      	adds	r7, #20
 8018236:	46bd      	mov	sp, r7
 8018238:	bc80      	pop	{r7}
 801823a:	4770      	bx	lr
 801823c:	edb88320 	.word	0xedb88320

08018240 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018240:	b580      	push	{r7, lr}
 8018242:	b084      	sub	sp, #16
 8018244:	af02      	add	r7, sp, #8
 8018246:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018248:	4a24      	ldr	r2, [pc, #144]	; (80182dc <RadioInit+0x9c>)
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801824e:	4b24      	ldr	r3, [pc, #144]	; (80182e0 <RadioInit+0xa0>)
 8018250:	2200      	movs	r2, #0
 8018252:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018254:	4b22      	ldr	r3, [pc, #136]	; (80182e0 <RadioInit+0xa0>)
 8018256:	2200      	movs	r2, #0
 8018258:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801825a:	4b21      	ldr	r3, [pc, #132]	; (80182e0 <RadioInit+0xa0>)
 801825c:	2200      	movs	r2, #0
 801825e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018260:	4b1f      	ldr	r3, [pc, #124]	; (80182e0 <RadioInit+0xa0>)
 8018262:	2200      	movs	r2, #0
 8018264:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8018266:	481f      	ldr	r0, [pc, #124]	; (80182e4 <RadioInit+0xa4>)
 8018268:	f001 ff8a 	bl	801a180 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801826c:	4b1c      	ldr	r3, [pc, #112]	; (80182e0 <RadioInit+0xa0>)
 801826e:	2200      	movs	r2, #0
 8018270:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8018272:	4b1b      	ldr	r3, [pc, #108]	; (80182e0 <RadioInit+0xa0>)
 8018274:	2200      	movs	r2, #0
 8018276:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018278:	f002 fa18 	bl	801a6ac <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801827c:	2100      	movs	r1, #0
 801827e:	2000      	movs	r0, #0
 8018280:	f002 fde0 	bl	801ae44 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8018284:	2204      	movs	r2, #4
 8018286:	2100      	movs	r1, #0
 8018288:	2001      	movs	r0, #1
 801828a:	f002 fb9d 	bl	801a9c8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801828e:	2300      	movs	r3, #0
 8018290:	2200      	movs	r2, #0
 8018292:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018296:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801829a:	f002 facd 	bl	801a838 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801829e:	f000 fe83 	bl	8018fa8 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80182a2:	2300      	movs	r3, #0
 80182a4:	9300      	str	r3, [sp, #0]
 80182a6:	4b10      	ldr	r3, [pc, #64]	; (80182e8 <RadioInit+0xa8>)
 80182a8:	2200      	movs	r2, #0
 80182aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80182ae:	480f      	ldr	r0, [pc, #60]	; (80182ec <RadioInit+0xac>)
 80182b0:	f003 ffda 	bl	801c268 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80182b4:	2300      	movs	r3, #0
 80182b6:	9300      	str	r3, [sp, #0]
 80182b8:	4b0d      	ldr	r3, [pc, #52]	; (80182f0 <RadioInit+0xb0>)
 80182ba:	2200      	movs	r2, #0
 80182bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80182c0:	480c      	ldr	r0, [pc, #48]	; (80182f4 <RadioInit+0xb4>)
 80182c2:	f003 ffd1 	bl	801c268 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80182c6:	4809      	ldr	r0, [pc, #36]	; (80182ec <RadioInit+0xac>)
 80182c8:	f004 f872 	bl	801c3b0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80182cc:	4809      	ldr	r0, [pc, #36]	; (80182f4 <RadioInit+0xb4>)
 80182ce:	f004 f86f 	bl	801c3b0 <UTIL_TIMER_Stop>
}
 80182d2:	bf00      	nop
 80182d4:	3708      	adds	r7, #8
 80182d6:	46bd      	mov	sp, r7
 80182d8:	bd80      	pop	{r7, pc}
 80182da:	bf00      	nop
 80182dc:	20001a98 	.word	0x20001a98
 80182e0:	20001a9c 	.word	0x20001a9c
 80182e4:	08019395 	.word	0x08019395
 80182e8:	0801931d 	.word	0x0801931d
 80182ec:	20001af8 	.word	0x20001af8
 80182f0:	08019331 	.word	0x08019331
 80182f4:	20001b10 	.word	0x20001b10

080182f8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80182fc:	f001 ff82 	bl	801a204 <SUBGRF_GetOperatingMode>
 8018300:	4603      	mov	r3, r0
 8018302:	2b07      	cmp	r3, #7
 8018304:	d00a      	beq.n	801831c <RadioGetStatus+0x24>
 8018306:	2b07      	cmp	r3, #7
 8018308:	dc0a      	bgt.n	8018320 <RadioGetStatus+0x28>
 801830a:	2b04      	cmp	r3, #4
 801830c:	d002      	beq.n	8018314 <RadioGetStatus+0x1c>
 801830e:	2b05      	cmp	r3, #5
 8018310:	d002      	beq.n	8018318 <RadioGetStatus+0x20>
 8018312:	e005      	b.n	8018320 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8018314:	2302      	movs	r3, #2
 8018316:	e004      	b.n	8018322 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8018318:	2301      	movs	r3, #1
 801831a:	e002      	b.n	8018322 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801831c:	2303      	movs	r3, #3
 801831e:	e000      	b.n	8018322 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8018320:	2300      	movs	r3, #0
    }
}
 8018322:	4618      	mov	r0, r3
 8018324:	bd80      	pop	{r7, pc}
	...

08018328 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8018328:	b580      	push	{r7, lr}
 801832a:	b082      	sub	sp, #8
 801832c:	af00      	add	r7, sp, #0
 801832e:	4603      	mov	r3, r0
 8018330:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8018332:	4a2a      	ldr	r2, [pc, #168]	; (80183dc <RadioSetModem+0xb4>)
 8018334:	79fb      	ldrb	r3, [r7, #7]
 8018336:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8018338:	79fb      	ldrb	r3, [r7, #7]
 801833a:	4618      	mov	r0, r3
 801833c:	f003 f945 	bl	801b5ca <RFW_SetRadioModem>
    switch( modem )
 8018340:	79fb      	ldrb	r3, [r7, #7]
 8018342:	2b05      	cmp	r3, #5
 8018344:	d80e      	bhi.n	8018364 <RadioSetModem+0x3c>
 8018346:	a201      	add	r2, pc, #4	; (adr r2, 801834c <RadioSetModem+0x24>)
 8018348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801834c:	08018373 	.word	0x08018373
 8018350:	08018381 	.word	0x08018381
 8018354:	08018365 	.word	0x08018365
 8018358:	080183a7 	.word	0x080183a7
 801835c:	080183b5 	.word	0x080183b5
 8018360:	080183c3 	.word	0x080183c3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8018364:	2003      	movs	r0, #3
 8018366:	f002 fb09 	bl	801a97c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801836a:	4b1c      	ldr	r3, [pc, #112]	; (80183dc <RadioSetModem+0xb4>)
 801836c:	2200      	movs	r2, #0
 801836e:	735a      	strb	r2, [r3, #13]
        break;
 8018370:	e02f      	b.n	80183d2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018372:	2000      	movs	r0, #0
 8018374:	f002 fb02 	bl	801a97c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018378:	4b18      	ldr	r3, [pc, #96]	; (80183dc <RadioSetModem+0xb4>)
 801837a:	2200      	movs	r2, #0
 801837c:	735a      	strb	r2, [r3, #13]
        break;
 801837e:	e028      	b.n	80183d2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8018380:	2001      	movs	r0, #1
 8018382:	f002 fafb 	bl	801a97c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8018386:	4b15      	ldr	r3, [pc, #84]	; (80183dc <RadioSetModem+0xb4>)
 8018388:	7b5a      	ldrb	r2, [r3, #13]
 801838a:	4b14      	ldr	r3, [pc, #80]	; (80183dc <RadioSetModem+0xb4>)
 801838c:	7b1b      	ldrb	r3, [r3, #12]
 801838e:	429a      	cmp	r2, r3
 8018390:	d01e      	beq.n	80183d0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8018392:	4b12      	ldr	r3, [pc, #72]	; (80183dc <RadioSetModem+0xb4>)
 8018394:	7b1a      	ldrb	r2, [r3, #12]
 8018396:	4b11      	ldr	r3, [pc, #68]	; (80183dc <RadioSetModem+0xb4>)
 8018398:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801839a:	4b10      	ldr	r3, [pc, #64]	; (80183dc <RadioSetModem+0xb4>)
 801839c:	7b5b      	ldrb	r3, [r3, #13]
 801839e:	4618      	mov	r0, r3
 80183a0:	f000 ff86 	bl	80192b0 <RadioSetPublicNetwork>
        }
        break;
 80183a4:	e014      	b.n	80183d0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80183a6:	2002      	movs	r0, #2
 80183a8:	f002 fae8 	bl	801a97c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80183ac:	4b0b      	ldr	r3, [pc, #44]	; (80183dc <RadioSetModem+0xb4>)
 80183ae:	2200      	movs	r2, #0
 80183b0:	735a      	strb	r2, [r3, #13]
        break;
 80183b2:	e00e      	b.n	80183d2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80183b4:	2002      	movs	r0, #2
 80183b6:	f002 fae1 	bl	801a97c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80183ba:	4b08      	ldr	r3, [pc, #32]	; (80183dc <RadioSetModem+0xb4>)
 80183bc:	2200      	movs	r2, #0
 80183be:	735a      	strb	r2, [r3, #13]
        break;
 80183c0:	e007      	b.n	80183d2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80183c2:	2000      	movs	r0, #0
 80183c4:	f002 fada 	bl	801a97c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80183c8:	4b04      	ldr	r3, [pc, #16]	; (80183dc <RadioSetModem+0xb4>)
 80183ca:	2200      	movs	r2, #0
 80183cc:	735a      	strb	r2, [r3, #13]
        break;
 80183ce:	e000      	b.n	80183d2 <RadioSetModem+0xaa>
        break;
 80183d0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80183d2:	bf00      	nop
 80183d4:	3708      	adds	r7, #8
 80183d6:	46bd      	mov	sp, r7
 80183d8:	bd80      	pop	{r7, pc}
 80183da:	bf00      	nop
 80183dc:	20001a9c 	.word	0x20001a9c

080183e0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b082      	sub	sp, #8
 80183e4:	af00      	add	r7, sp, #0
 80183e6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80183e8:	6878      	ldr	r0, [r7, #4]
 80183ea:	f002 fa81 	bl	801a8f0 <SUBGRF_SetRfFrequency>
}
 80183ee:	bf00      	nop
 80183f0:	3708      	adds	r7, #8
 80183f2:	46bd      	mov	sp, r7
 80183f4:	bd80      	pop	{r7, pc}

080183f6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80183f6:	b580      	push	{r7, lr}
 80183f8:	b090      	sub	sp, #64	; 0x40
 80183fa:	af0a      	add	r7, sp, #40	; 0x28
 80183fc:	60f8      	str	r0, [r7, #12]
 80183fe:	60b9      	str	r1, [r7, #8]
 8018400:	603b      	str	r3, [r7, #0]
 8018402:	4613      	mov	r3, r2
 8018404:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8018406:	2301      	movs	r3, #1
 8018408:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801840a:	2300      	movs	r3, #0
 801840c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801840e:	2300      	movs	r3, #0
 8018410:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8018412:	f000 fddc 	bl	8018fce <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8018416:	2000      	movs	r0, #0
 8018418:	f7ff ff86 	bl	8018328 <RadioSetModem>

    RadioSetChannel( freq );
 801841c:	68f8      	ldr	r0, [r7, #12]
 801841e:	f7ff ffdf 	bl	80183e0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8018422:	2301      	movs	r3, #1
 8018424:	9309      	str	r3, [sp, #36]	; 0x24
 8018426:	2300      	movs	r3, #0
 8018428:	9308      	str	r3, [sp, #32]
 801842a:	2300      	movs	r3, #0
 801842c:	9307      	str	r3, [sp, #28]
 801842e:	2300      	movs	r3, #0
 8018430:	9306      	str	r3, [sp, #24]
 8018432:	2300      	movs	r3, #0
 8018434:	9305      	str	r3, [sp, #20]
 8018436:	2300      	movs	r3, #0
 8018438:	9304      	str	r3, [sp, #16]
 801843a:	2300      	movs	r3, #0
 801843c:	9303      	str	r3, [sp, #12]
 801843e:	2300      	movs	r3, #0
 8018440:	9302      	str	r3, [sp, #8]
 8018442:	2303      	movs	r3, #3
 8018444:	9301      	str	r3, [sp, #4]
 8018446:	68bb      	ldr	r3, [r7, #8]
 8018448:	9300      	str	r3, [sp, #0]
 801844a:	2300      	movs	r3, #0
 801844c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8018450:	68b9      	ldr	r1, [r7, #8]
 8018452:	2000      	movs	r0, #0
 8018454:	f000 f83c 	bl	80184d0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8018458:	2000      	movs	r0, #0
 801845a:	f000 fdbf 	bl	8018fdc <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801845e:	f000 ff55 	bl	801930c <RadioGetWakeupTime>
 8018462:	4603      	mov	r3, r0
 8018464:	4618      	mov	r0, r3
 8018466:	f7e9 fc4f 	bl	8001d08 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801846a:	f004 f8bb 	bl	801c5e4 <UTIL_TIMER_GetCurrentTime>
 801846e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018470:	e00d      	b.n	801848e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8018472:	2000      	movs	r0, #0
 8018474:	f000 fe9a 	bl	80191ac <RadioRssi>
 8018478:	4603      	mov	r3, r0
 801847a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801847c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018484:	429a      	cmp	r2, r3
 8018486:	dd02      	ble.n	801848e <RadioIsChannelFree+0x98>
        {
            status = false;
 8018488:	2300      	movs	r3, #0
 801848a:	75fb      	strb	r3, [r7, #23]
            break;
 801848c:	e006      	b.n	801849c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801848e:	6938      	ldr	r0, [r7, #16]
 8018490:	f004 f8ba 	bl	801c608 <UTIL_TIMER_GetElapsedTime>
 8018494:	4602      	mov	r2, r0
 8018496:	683b      	ldr	r3, [r7, #0]
 8018498:	4293      	cmp	r3, r2
 801849a:	d8ea      	bhi.n	8018472 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801849c:	f000 fd97 	bl	8018fce <RadioStandby>

    return status;
 80184a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80184a2:	4618      	mov	r0, r3
 80184a4:	3718      	adds	r7, #24
 80184a6:	46bd      	mov	sp, r7
 80184a8:	bd80      	pop	{r7, pc}

080184aa <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80184aa:	b580      	push	{r7, lr}
 80184ac:	b082      	sub	sp, #8
 80184ae:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80184b0:	2300      	movs	r3, #0
 80184b2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80184b4:	2300      	movs	r3, #0
 80184b6:	2200      	movs	r2, #0
 80184b8:	2100      	movs	r1, #0
 80184ba:	2000      	movs	r0, #0
 80184bc:	f002 f9bc 	bl	801a838 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80184c0:	f001 ff71 	bl	801a3a6 <SUBGRF_GetRandom>
 80184c4:	6078      	str	r0, [r7, #4]

    return rnd;
 80184c6:	687b      	ldr	r3, [r7, #4]
}
 80184c8:	4618      	mov	r0, r3
 80184ca:	3708      	adds	r7, #8
 80184cc:	46bd      	mov	sp, r7
 80184ce:	bd80      	pop	{r7, pc}

080184d0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80184d0:	b580      	push	{r7, lr}
 80184d2:	b08a      	sub	sp, #40	; 0x28
 80184d4:	af00      	add	r7, sp, #0
 80184d6:	60b9      	str	r1, [r7, #8]
 80184d8:	607a      	str	r2, [r7, #4]
 80184da:	461a      	mov	r2, r3
 80184dc:	4603      	mov	r3, r0
 80184de:	73fb      	strb	r3, [r7, #15]
 80184e0:	4613      	mov	r3, r2
 80184e2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80184e4:	4ab9      	ldr	r2, [pc, #740]	; (80187cc <RadioSetRxConfig+0x2fc>)
 80184e6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80184ea:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80184ec:	f003 f82b 	bl	801b546 <RFW_DeInit>
    if( rxContinuous == true )
 80184f0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d001      	beq.n	80184fc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80184f8:	2300      	movs	r3, #0
 80184fa:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80184fc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8018500:	2b00      	cmp	r3, #0
 8018502:	d004      	beq.n	801850e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8018504:	4ab2      	ldr	r2, [pc, #712]	; (80187d0 <RadioSetRxConfig+0x300>)
 8018506:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801850a:	7013      	strb	r3, [r2, #0]
 801850c:	e002      	b.n	8018514 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801850e:	4bb0      	ldr	r3, [pc, #704]	; (80187d0 <RadioSetRxConfig+0x300>)
 8018510:	22ff      	movs	r2, #255	; 0xff
 8018512:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8018514:	7bfb      	ldrb	r3, [r7, #15]
 8018516:	2b05      	cmp	r3, #5
 8018518:	d009      	beq.n	801852e <RadioSetRxConfig+0x5e>
 801851a:	2b05      	cmp	r3, #5
 801851c:	f300 81ca 	bgt.w	80188b4 <RadioSetRxConfig+0x3e4>
 8018520:	2b00      	cmp	r3, #0
 8018522:	f000 80bf 	beq.w	80186a4 <RadioSetRxConfig+0x1d4>
 8018526:	2b01      	cmp	r3, #1
 8018528:	f000 8124 	beq.w	8018774 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801852c:	e1c2      	b.n	80188b4 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801852e:	2001      	movs	r0, #1
 8018530:	f002 f87e 	bl	801a630 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018534:	4ba5      	ldr	r3, [pc, #660]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018536:	2200      	movs	r2, #0
 8018538:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801853c:	4aa3      	ldr	r2, [pc, #652]	; (80187cc <RadioSetRxConfig+0x2fc>)
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8018542:	4ba2      	ldr	r3, [pc, #648]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018544:	2209      	movs	r2, #9
 8018546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801854a:	4ba0      	ldr	r3, [pc, #640]	; (80187cc <RadioSetRxConfig+0x2fc>)
 801854c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018550:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018552:	68b8      	ldr	r0, [r7, #8]
 8018554:	f002 ff2a 	bl	801b3ac <SUBGRF_GetFskBandwidthRegValue>
 8018558:	4603      	mov	r3, r0
 801855a:	461a      	mov	r2, r3
 801855c:	4b9b      	ldr	r3, [pc, #620]	; (80187cc <RadioSetRxConfig+0x2fc>)
 801855e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018562:	4b9a      	ldr	r3, [pc, #616]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018564:	2200      	movs	r2, #0
 8018566:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018568:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801856a:	00db      	lsls	r3, r3, #3
 801856c:	b29a      	uxth	r2, r3
 801856e:	4b97      	ldr	r3, [pc, #604]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018570:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8018572:	4b96      	ldr	r3, [pc, #600]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018574:	2200      	movs	r2, #0
 8018576:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8018578:	4b94      	ldr	r3, [pc, #592]	; (80187cc <RadioSetRxConfig+0x2fc>)
 801857a:	2210      	movs	r2, #16
 801857c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801857e:	4b93      	ldr	r3, [pc, #588]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018580:	2200      	movs	r2, #0
 8018582:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8018584:	4b91      	ldr	r3, [pc, #580]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018586:	2200      	movs	r2, #0
 8018588:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801858a:	4b91      	ldr	r3, [pc, #580]	; (80187d0 <RadioSetRxConfig+0x300>)
 801858c:	781a      	ldrb	r2, [r3, #0]
 801858e:	4b8f      	ldr	r3, [pc, #572]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018590:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018592:	4b8e      	ldr	r3, [pc, #568]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018594:	2201      	movs	r2, #1
 8018596:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8018598:	4b8c      	ldr	r3, [pc, #560]	; (80187cc <RadioSetRxConfig+0x2fc>)
 801859a:	2200      	movs	r2, #0
 801859c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801859e:	2005      	movs	r0, #5
 80185a0:	f7ff fec2 	bl	8018328 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80185a4:	488b      	ldr	r0, [pc, #556]	; (80187d4 <RadioSetRxConfig+0x304>)
 80185a6:	f002 fadd 	bl	801ab64 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80185aa:	488b      	ldr	r0, [pc, #556]	; (80187d8 <RadioSetRxConfig+0x308>)
 80185ac:	f002 fbac 	bl	801ad08 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80185b0:	4a8a      	ldr	r2, [pc, #552]	; (80187dc <RadioSetRxConfig+0x30c>)
 80185b2:	f107 031c 	add.w	r3, r7, #28
 80185b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80185ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80185be:	f107 031c 	add.w	r3, r7, #28
 80185c2:	4618      	mov	r0, r3
 80185c4:	f001 fe6d 	bl	801a2a2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80185c8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80185cc:	f001 feb8 	bl	801a340 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80185d0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80185d4:	f000 fe09 	bl	80191ea <RadioRead>
 80185d8:	4603      	mov	r3, r0
 80185da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80185de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185e2:	f023 0310 	bic.w	r3, r3, #16
 80185e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80185ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185ee:	4619      	mov	r1, r3
 80185f0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80185f4:	f000 fde7 	bl	80191c6 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80185f8:	2104      	movs	r1, #4
 80185fa:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80185fe:	f000 fde2 	bl	80191c6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8018602:	f640 009b 	movw	r0, #2203	; 0x89b
 8018606:	f000 fdf0 	bl	80191ea <RadioRead>
 801860a:	4603      	mov	r3, r0
 801860c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018614:	f023 031c 	bic.w	r3, r3, #28
 8018618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801861c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018620:	f043 0308 	orr.w	r3, r3, #8
 8018624:	b2db      	uxtb	r3, r3
 8018626:	4619      	mov	r1, r3
 8018628:	f640 009b 	movw	r0, #2203	; 0x89b
 801862c:	f000 fdcb 	bl	80191c6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8018630:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8018634:	f000 fdd9 	bl	80191ea <RadioRead>
 8018638:	4603      	mov	r3, r0
 801863a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801863e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018642:	f023 0318 	bic.w	r3, r3, #24
 8018646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801864a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801864e:	f043 0318 	orr.w	r3, r3, #24
 8018652:	b2db      	uxtb	r3, r3
 8018654:	4619      	mov	r1, r3
 8018656:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801865a:	f000 fdb4 	bl	80191c6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801865e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018662:	f000 fdc2 	bl	80191ea <RadioRead>
 8018666:	4603      	mov	r3, r0
 8018668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801866c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8018678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801867c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8018680:	b2db      	uxtb	r3, r3
 8018682:	4619      	mov	r1, r3
 8018684:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018688:	f000 fd9d 	bl	80191c6 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801868c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801868e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018692:	fb02 f303 	mul.w	r3, r2, r3
 8018696:	461a      	mov	r2, r3
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	fbb2 f3f3 	udiv	r3, r2, r3
 801869e:	4a4b      	ldr	r2, [pc, #300]	; (80187cc <RadioSetRxConfig+0x2fc>)
 80186a0:	6093      	str	r3, [r2, #8]
            break;
 80186a2:	e108      	b.n	80188b6 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80186a4:	2000      	movs	r0, #0
 80186a6:	f001 ffc3 	bl	801a630 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80186aa:	4b48      	ldr	r3, [pc, #288]	; (80187cc <RadioSetRxConfig+0x2fc>)
 80186ac:	2200      	movs	r2, #0
 80186ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80186b2:	4a46      	ldr	r2, [pc, #280]	; (80187cc <RadioSetRxConfig+0x2fc>)
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80186b8:	4b44      	ldr	r3, [pc, #272]	; (80187cc <RadioSetRxConfig+0x2fc>)
 80186ba:	220b      	movs	r2, #11
 80186bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80186c0:	68b8      	ldr	r0, [r7, #8]
 80186c2:	f002 fe73 	bl	801b3ac <SUBGRF_GetFskBandwidthRegValue>
 80186c6:	4603      	mov	r3, r0
 80186c8:	461a      	mov	r2, r3
 80186ca:	4b40      	ldr	r3, [pc, #256]	; (80187cc <RadioSetRxConfig+0x2fc>)
 80186cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80186d0:	4b3e      	ldr	r3, [pc, #248]	; (80187cc <RadioSetRxConfig+0x2fc>)
 80186d2:	2200      	movs	r2, #0
 80186d4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80186d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80186d8:	00db      	lsls	r3, r3, #3
 80186da:	b29a      	uxth	r2, r3
 80186dc:	4b3b      	ldr	r3, [pc, #236]	; (80187cc <RadioSetRxConfig+0x2fc>)
 80186de:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80186e0:	4b3a      	ldr	r3, [pc, #232]	; (80187cc <RadioSetRxConfig+0x2fc>)
 80186e2:	2204      	movs	r2, #4
 80186e4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80186e6:	4b39      	ldr	r3, [pc, #228]	; (80187cc <RadioSetRxConfig+0x2fc>)
 80186e8:	2218      	movs	r2, #24
 80186ea:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80186ec:	4b37      	ldr	r3, [pc, #220]	; (80187cc <RadioSetRxConfig+0x2fc>)
 80186ee:	2200      	movs	r2, #0
 80186f0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80186f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80186f6:	f083 0301 	eor.w	r3, r3, #1
 80186fa:	b2db      	uxtb	r3, r3
 80186fc:	461a      	mov	r2, r3
 80186fe:	4b33      	ldr	r3, [pc, #204]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018700:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018702:	4b33      	ldr	r3, [pc, #204]	; (80187d0 <RadioSetRxConfig+0x300>)
 8018704:	781a      	ldrb	r2, [r3, #0]
 8018706:	4b31      	ldr	r3, [pc, #196]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018708:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801870a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801870e:	2b00      	cmp	r3, #0
 8018710:	d003      	beq.n	801871a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018712:	4b2e      	ldr	r3, [pc, #184]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018714:	22f2      	movs	r2, #242	; 0xf2
 8018716:	75da      	strb	r2, [r3, #23]
 8018718:	e002      	b.n	8018720 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801871a:	4b2c      	ldr	r3, [pc, #176]	; (80187cc <RadioSetRxConfig+0x2fc>)
 801871c:	2201      	movs	r2, #1
 801871e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018720:	4b2a      	ldr	r3, [pc, #168]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018722:	2201      	movs	r2, #1
 8018724:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018726:	f000 fc52 	bl	8018fce <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801872a:	2000      	movs	r0, #0
 801872c:	f7ff fdfc 	bl	8018328 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018730:	4828      	ldr	r0, [pc, #160]	; (80187d4 <RadioSetRxConfig+0x304>)
 8018732:	f002 fa17 	bl	801ab64 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018736:	4828      	ldr	r0, [pc, #160]	; (80187d8 <RadioSetRxConfig+0x308>)
 8018738:	f002 fae6 	bl	801ad08 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801873c:	4a28      	ldr	r2, [pc, #160]	; (80187e0 <RadioSetRxConfig+0x310>)
 801873e:	f107 0314 	add.w	r3, r7, #20
 8018742:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018746:	e883 0003 	stmia.w	r3, {r0, r1}
 801874a:	f107 0314 	add.w	r3, r7, #20
 801874e:	4618      	mov	r0, r3
 8018750:	f001 fda7 	bl	801a2a2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018754:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018758:	f001 fdf2 	bl	801a340 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801875c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801875e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018762:	fb02 f303 	mul.w	r3, r2, r3
 8018766:	461a      	mov	r2, r3
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	fbb2 f3f3 	udiv	r3, r2, r3
 801876e:	4a17      	ldr	r2, [pc, #92]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018770:	6093      	str	r3, [r2, #8]
            break;
 8018772:	e0a0      	b.n	80188b6 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018774:	2000      	movs	r0, #0
 8018776:	f001 ff5b 	bl	801a630 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801877a:	4b14      	ldr	r3, [pc, #80]	; (80187cc <RadioSetRxConfig+0x2fc>)
 801877c:	2201      	movs	r2, #1
 801877e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	b2da      	uxtb	r2, r3
 8018786:	4b11      	ldr	r3, [pc, #68]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801878c:	4a15      	ldr	r2, [pc, #84]	; (80187e4 <RadioSetRxConfig+0x314>)
 801878e:	68bb      	ldr	r3, [r7, #8]
 8018790:	4413      	add	r3, r2
 8018792:	781a      	ldrb	r2, [r3, #0]
 8018794:	4b0d      	ldr	r3, [pc, #52]	; (80187cc <RadioSetRxConfig+0x2fc>)
 8018796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801879a:	4a0c      	ldr	r2, [pc, #48]	; (80187cc <RadioSetRxConfig+0x2fc>)
 801879c:	7bbb      	ldrb	r3, [r7, #14]
 801879e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80187a2:	68bb      	ldr	r3, [r7, #8]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d105      	bne.n	80187b4 <RadioSetRxConfig+0x2e4>
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	2b0b      	cmp	r3, #11
 80187ac:	d008      	beq.n	80187c0 <RadioSetRxConfig+0x2f0>
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	2b0c      	cmp	r3, #12
 80187b2:	d005      	beq.n	80187c0 <RadioSetRxConfig+0x2f0>
 80187b4:	68bb      	ldr	r3, [r7, #8]
 80187b6:	2b01      	cmp	r3, #1
 80187b8:	d116      	bne.n	80187e8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	2b0c      	cmp	r3, #12
 80187be:	d113      	bne.n	80187e8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80187c0:	4b02      	ldr	r3, [pc, #8]	; (80187cc <RadioSetRxConfig+0x2fc>)
 80187c2:	2201      	movs	r2, #1
 80187c4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80187c8:	e012      	b.n	80187f0 <RadioSetRxConfig+0x320>
 80187ca:	bf00      	nop
 80187cc:	20001a9c 	.word	0x20001a9c
 80187d0:	20000144 	.word	0x20000144
 80187d4:	20001ad4 	.word	0x20001ad4
 80187d8:	20001aaa 	.word	0x20001aaa
 80187dc:	0801d668 	.word	0x0801d668
 80187e0:	0801d670 	.word	0x0801d670
 80187e4:	0801dcd0 	.word	0x0801dcd0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80187e8:	4b35      	ldr	r3, [pc, #212]	; (80188c0 <RadioSetRxConfig+0x3f0>)
 80187ea:	2200      	movs	r2, #0
 80187ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80187f0:	4b33      	ldr	r3, [pc, #204]	; (80188c0 <RadioSetRxConfig+0x3f0>)
 80187f2:	2201      	movs	r2, #1
 80187f4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80187f6:	4b32      	ldr	r3, [pc, #200]	; (80188c0 <RadioSetRxConfig+0x3f0>)
 80187f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80187fc:	2b05      	cmp	r3, #5
 80187fe:	d004      	beq.n	801880a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018800:	4b2f      	ldr	r3, [pc, #188]	; (80188c0 <RadioSetRxConfig+0x3f0>)
 8018802:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018806:	2b06      	cmp	r3, #6
 8018808:	d10a      	bne.n	8018820 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801880a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801880c:	2b0b      	cmp	r3, #11
 801880e:	d803      	bhi.n	8018818 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018810:	4b2b      	ldr	r3, [pc, #172]	; (80188c0 <RadioSetRxConfig+0x3f0>)
 8018812:	220c      	movs	r2, #12
 8018814:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018816:	e006      	b.n	8018826 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018818:	4a29      	ldr	r2, [pc, #164]	; (80188c0 <RadioSetRxConfig+0x3f0>)
 801881a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801881c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801881e:	e002      	b.n	8018826 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018820:	4a27      	ldr	r2, [pc, #156]	; (80188c0 <RadioSetRxConfig+0x3f0>)
 8018822:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018824:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018826:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801882a:	4b25      	ldr	r3, [pc, #148]	; (80188c0 <RadioSetRxConfig+0x3f0>)
 801882c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801882e:	4b25      	ldr	r3, [pc, #148]	; (80188c4 <RadioSetRxConfig+0x3f4>)
 8018830:	781a      	ldrb	r2, [r3, #0]
 8018832:	4b23      	ldr	r3, [pc, #140]	; (80188c0 <RadioSetRxConfig+0x3f0>)
 8018834:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018836:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801883a:	4b21      	ldr	r3, [pc, #132]	; (80188c0 <RadioSetRxConfig+0x3f0>)
 801883c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018840:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8018844:	4b1e      	ldr	r3, [pc, #120]	; (80188c0 <RadioSetRxConfig+0x3f0>)
 8018846:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801884a:	f000 fbc0 	bl	8018fce <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801884e:	2001      	movs	r0, #1
 8018850:	f7ff fd6a 	bl	8018328 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018854:	481c      	ldr	r0, [pc, #112]	; (80188c8 <RadioSetRxConfig+0x3f8>)
 8018856:	f002 f985 	bl	801ab64 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801885a:	481c      	ldr	r0, [pc, #112]	; (80188cc <RadioSetRxConfig+0x3fc>)
 801885c:	f002 fa54 	bl	801ad08 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018860:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018862:	b2db      	uxtb	r3, r3
 8018864:	4618      	mov	r0, r3
 8018866:	f001 fef2 	bl	801a64e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801886a:	4b15      	ldr	r3, [pc, #84]	; (80188c0 <RadioSetRxConfig+0x3f0>)
 801886c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8018870:	2b01      	cmp	r3, #1
 8018872:	d10d      	bne.n	8018890 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018874:	f240 7036 	movw	r0, #1846	; 0x736
 8018878:	f002 fba2 	bl	801afc0 <SUBGRF_ReadRegister>
 801887c:	4603      	mov	r3, r0
 801887e:	f023 0304 	bic.w	r3, r3, #4
 8018882:	b2db      	uxtb	r3, r3
 8018884:	4619      	mov	r1, r3
 8018886:	f240 7036 	movw	r0, #1846	; 0x736
 801888a:	f002 fb85 	bl	801af98 <SUBGRF_WriteRegister>
 801888e:	e00c      	b.n	80188aa <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018890:	f240 7036 	movw	r0, #1846	; 0x736
 8018894:	f002 fb94 	bl	801afc0 <SUBGRF_ReadRegister>
 8018898:	4603      	mov	r3, r0
 801889a:	f043 0304 	orr.w	r3, r3, #4
 801889e:	b2db      	uxtb	r3, r3
 80188a0:	4619      	mov	r1, r3
 80188a2:	f240 7036 	movw	r0, #1846	; 0x736
 80188a6:	f002 fb77 	bl	801af98 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80188aa:	4b05      	ldr	r3, [pc, #20]	; (80188c0 <RadioSetRxConfig+0x3f0>)
 80188ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80188b0:	609a      	str	r2, [r3, #8]
            break;
 80188b2:	e000      	b.n	80188b6 <RadioSetRxConfig+0x3e6>
            break;
 80188b4:	bf00      	nop
    }
}
 80188b6:	bf00      	nop
 80188b8:	3728      	adds	r7, #40	; 0x28
 80188ba:	46bd      	mov	sp, r7
 80188bc:	bd80      	pop	{r7, pc}
 80188be:	bf00      	nop
 80188c0:	20001a9c 	.word	0x20001a9c
 80188c4:	20000144 	.word	0x20000144
 80188c8:	20001ad4 	.word	0x20001ad4
 80188cc:	20001aaa 	.word	0x20001aaa

080188d0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b086      	sub	sp, #24
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	60ba      	str	r2, [r7, #8]
 80188d8:	607b      	str	r3, [r7, #4]
 80188da:	4603      	mov	r3, r0
 80188dc:	73fb      	strb	r3, [r7, #15]
 80188de:	460b      	mov	r3, r1
 80188e0:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80188e2:	f002 fe30 	bl	801b546 <RFW_DeInit>
    switch( modem )
 80188e6:	7bfb      	ldrb	r3, [r7, #15]
 80188e8:	2b04      	cmp	r3, #4
 80188ea:	f000 80c7 	beq.w	8018a7c <RadioSetTxConfig+0x1ac>
 80188ee:	2b04      	cmp	r3, #4
 80188f0:	f300 80d6 	bgt.w	8018aa0 <RadioSetTxConfig+0x1d0>
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d002      	beq.n	80188fe <RadioSetTxConfig+0x2e>
 80188f8:	2b01      	cmp	r3, #1
 80188fa:	d059      	beq.n	80189b0 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80188fc:	e0d0      	b.n	8018aa0 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80188fe:	4b74      	ldr	r3, [pc, #464]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018900:	2200      	movs	r2, #0
 8018902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018906:	4a72      	ldr	r2, [pc, #456]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018908:	6a3b      	ldr	r3, [r7, #32]
 801890a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801890c:	4b70      	ldr	r3, [pc, #448]	; (8018ad0 <RadioSetTxConfig+0x200>)
 801890e:	220b      	movs	r2, #11
 8018910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018914:	6878      	ldr	r0, [r7, #4]
 8018916:	f002 fd49 	bl	801b3ac <SUBGRF_GetFskBandwidthRegValue>
 801891a:	4603      	mov	r3, r0
 801891c:	461a      	mov	r2, r3
 801891e:	4b6c      	ldr	r3, [pc, #432]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8018924:	4a6a      	ldr	r2, [pc, #424]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018926:	68bb      	ldr	r3, [r7, #8]
 8018928:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801892a:	4b69      	ldr	r3, [pc, #420]	; (8018ad0 <RadioSetTxConfig+0x200>)
 801892c:	2200      	movs	r2, #0
 801892e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018930:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018932:	00db      	lsls	r3, r3, #3
 8018934:	b29a      	uxth	r2, r3
 8018936:	4b66      	ldr	r3, [pc, #408]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018938:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801893a:	4b65      	ldr	r3, [pc, #404]	; (8018ad0 <RadioSetTxConfig+0x200>)
 801893c:	2204      	movs	r2, #4
 801893e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8018940:	4b63      	ldr	r3, [pc, #396]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018942:	2218      	movs	r2, #24
 8018944:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018946:	4b62      	ldr	r3, [pc, #392]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018948:	2200      	movs	r2, #0
 801894a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801894c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018950:	f083 0301 	eor.w	r3, r3, #1
 8018954:	b2db      	uxtb	r3, r3
 8018956:	461a      	mov	r2, r3
 8018958:	4b5d      	ldr	r3, [pc, #372]	; (8018ad0 <RadioSetTxConfig+0x200>)
 801895a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801895c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8018960:	2b00      	cmp	r3, #0
 8018962:	d003      	beq.n	801896c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018964:	4b5a      	ldr	r3, [pc, #360]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018966:	22f2      	movs	r2, #242	; 0xf2
 8018968:	75da      	strb	r2, [r3, #23]
 801896a:	e002      	b.n	8018972 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801896c:	4b58      	ldr	r3, [pc, #352]	; (8018ad0 <RadioSetTxConfig+0x200>)
 801896e:	2201      	movs	r2, #1
 8018970:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018972:	4b57      	ldr	r3, [pc, #348]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018974:	2201      	movs	r2, #1
 8018976:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018978:	f000 fb29 	bl	8018fce <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801897c:	2000      	movs	r0, #0
 801897e:	f7ff fcd3 	bl	8018328 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018982:	4854      	ldr	r0, [pc, #336]	; (8018ad4 <RadioSetTxConfig+0x204>)
 8018984:	f002 f8ee 	bl	801ab64 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018988:	4853      	ldr	r0, [pc, #332]	; (8018ad8 <RadioSetTxConfig+0x208>)
 801898a:	f002 f9bd 	bl	801ad08 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801898e:	4a53      	ldr	r2, [pc, #332]	; (8018adc <RadioSetTxConfig+0x20c>)
 8018990:	f107 0310 	add.w	r3, r7, #16
 8018994:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018998:	e883 0003 	stmia.w	r3, {r0, r1}
 801899c:	f107 0310 	add.w	r3, r7, #16
 80189a0:	4618      	mov	r0, r3
 80189a2:	f001 fc7e 	bl	801a2a2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80189a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80189aa:	f001 fcc9 	bl	801a340 <SUBGRF_SetWhiteningSeed>
            break;
 80189ae:	e078      	b.n	8018aa2 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80189b0:	4b47      	ldr	r3, [pc, #284]	; (8018ad0 <RadioSetTxConfig+0x200>)
 80189b2:	2201      	movs	r2, #1
 80189b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80189b8:	6a3b      	ldr	r3, [r7, #32]
 80189ba:	b2da      	uxtb	r2, r3
 80189bc:	4b44      	ldr	r3, [pc, #272]	; (8018ad0 <RadioSetTxConfig+0x200>)
 80189be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80189c2:	4a47      	ldr	r2, [pc, #284]	; (8018ae0 <RadioSetTxConfig+0x210>)
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	4413      	add	r3, r2
 80189c8:	781a      	ldrb	r2, [r3, #0]
 80189ca:	4b41      	ldr	r3, [pc, #260]	; (8018ad0 <RadioSetTxConfig+0x200>)
 80189cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80189d0:	4a3f      	ldr	r2, [pc, #252]	; (8018ad0 <RadioSetTxConfig+0x200>)
 80189d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80189d6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d105      	bne.n	80189ec <RadioSetTxConfig+0x11c>
 80189e0:	6a3b      	ldr	r3, [r7, #32]
 80189e2:	2b0b      	cmp	r3, #11
 80189e4:	d008      	beq.n	80189f8 <RadioSetTxConfig+0x128>
 80189e6:	6a3b      	ldr	r3, [r7, #32]
 80189e8:	2b0c      	cmp	r3, #12
 80189ea:	d005      	beq.n	80189f8 <RadioSetTxConfig+0x128>
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	2b01      	cmp	r3, #1
 80189f0:	d107      	bne.n	8018a02 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80189f2:	6a3b      	ldr	r3, [r7, #32]
 80189f4:	2b0c      	cmp	r3, #12
 80189f6:	d104      	bne.n	8018a02 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80189f8:	4b35      	ldr	r3, [pc, #212]	; (8018ad0 <RadioSetTxConfig+0x200>)
 80189fa:	2201      	movs	r2, #1
 80189fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8018a00:	e003      	b.n	8018a0a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018a02:	4b33      	ldr	r3, [pc, #204]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018a04:	2200      	movs	r2, #0
 8018a06:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018a0a:	4b31      	ldr	r3, [pc, #196]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018a0c:	2201      	movs	r2, #1
 8018a0e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018a10:	4b2f      	ldr	r3, [pc, #188]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018a12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018a16:	2b05      	cmp	r3, #5
 8018a18:	d004      	beq.n	8018a24 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018a1a:	4b2d      	ldr	r3, [pc, #180]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018a1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018a20:	2b06      	cmp	r3, #6
 8018a22:	d10a      	bne.n	8018a3a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8018a24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018a26:	2b0b      	cmp	r3, #11
 8018a28:	d803      	bhi.n	8018a32 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018a2a:	4b29      	ldr	r3, [pc, #164]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018a2c:	220c      	movs	r2, #12
 8018a2e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018a30:	e006      	b.n	8018a40 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018a32:	4a27      	ldr	r2, [pc, #156]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018a34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018a36:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018a38:	e002      	b.n	8018a40 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018a3a:	4a25      	ldr	r2, [pc, #148]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018a3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018a3e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018a40:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018a44:	4b22      	ldr	r3, [pc, #136]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018a46:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018a48:	4b26      	ldr	r3, [pc, #152]	; (8018ae4 <RadioSetTxConfig+0x214>)
 8018a4a:	781a      	ldrb	r2, [r3, #0]
 8018a4c:	4b20      	ldr	r3, [pc, #128]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018a4e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018a50:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8018a54:	4b1e      	ldr	r3, [pc, #120]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018a56:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018a5a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8018a5e:	4b1c      	ldr	r3, [pc, #112]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018a60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8018a64:	f000 fab3 	bl	8018fce <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018a68:	2001      	movs	r0, #1
 8018a6a:	f7ff fc5d 	bl	8018328 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018a6e:	4819      	ldr	r0, [pc, #100]	; (8018ad4 <RadioSetTxConfig+0x204>)
 8018a70:	f002 f878 	bl	801ab64 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018a74:	4818      	ldr	r0, [pc, #96]	; (8018ad8 <RadioSetTxConfig+0x208>)
 8018a76:	f002 f947 	bl	801ad08 <SUBGRF_SetPacketParams>
            break;
 8018a7a:	e012      	b.n	8018aa2 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8018a7c:	2004      	movs	r0, #4
 8018a7e:	f7ff fc53 	bl	8018328 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018a82:	4b13      	ldr	r3, [pc, #76]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018a84:	2202      	movs	r2, #2
 8018a86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8018a8a:	4a11      	ldr	r2, [pc, #68]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018a8c:	6a3b      	ldr	r3, [r7, #32]
 8018a8e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018a90:	4b0f      	ldr	r3, [pc, #60]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018a92:	2216      	movs	r2, #22
 8018a94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018a98:	480e      	ldr	r0, [pc, #56]	; (8018ad4 <RadioSetTxConfig+0x204>)
 8018a9a:	f002 f863 	bl	801ab64 <SUBGRF_SetModulationParams>
            break;
 8018a9e:	e000      	b.n	8018aa2 <RadioSetTxConfig+0x1d2>
            break;
 8018aa0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018aa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018aa6:	4618      	mov	r0, r3
 8018aa8:	f002 fb92 	bl	801b1d0 <SUBGRF_SetRfTxPower>
 8018aac:	4603      	mov	r3, r0
 8018aae:	461a      	mov	r2, r3
 8018ab0:	4b07      	ldr	r3, [pc, #28]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018ab2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8018ab6:	4b06      	ldr	r3, [pc, #24]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018ab8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018abc:	4618      	mov	r0, r3
 8018abe:	f002 fd56 	bl	801b56e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018ac2:	4a03      	ldr	r2, [pc, #12]	; (8018ad0 <RadioSetTxConfig+0x200>)
 8018ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018ac6:	6053      	str	r3, [r2, #4]
}
 8018ac8:	bf00      	nop
 8018aca:	3718      	adds	r7, #24
 8018acc:	46bd      	mov	sp, r7
 8018ace:	bd80      	pop	{r7, pc}
 8018ad0:	20001a9c 	.word	0x20001a9c
 8018ad4:	20001ad4 	.word	0x20001ad4
 8018ad8:	20001aaa 	.word	0x20001aaa
 8018adc:	0801d670 	.word	0x0801d670
 8018ae0:	0801dcd0 	.word	0x0801dcd0
 8018ae4:	20000144 	.word	0x20000144

08018ae8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018ae8:	b480      	push	{r7}
 8018aea:	b083      	sub	sp, #12
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
    return true;
 8018af0:	2301      	movs	r3, #1
}
 8018af2:	4618      	mov	r0, r3
 8018af4:	370c      	adds	r7, #12
 8018af6:	46bd      	mov	sp, r7
 8018af8:	bc80      	pop	{r7}
 8018afa:	4770      	bx	lr

08018afc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8018afc:	b480      	push	{r7}
 8018afe:	b085      	sub	sp, #20
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	4603      	mov	r3, r0
 8018b04:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8018b06:	2300      	movs	r3, #0
 8018b08:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8018b0a:	79fb      	ldrb	r3, [r7, #7]
 8018b0c:	2b0a      	cmp	r3, #10
 8018b0e:	d83e      	bhi.n	8018b8e <RadioGetLoRaBandwidthInHz+0x92>
 8018b10:	a201      	add	r2, pc, #4	; (adr r2, 8018b18 <RadioGetLoRaBandwidthInHz+0x1c>)
 8018b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b16:	bf00      	nop
 8018b18:	08018b45 	.word	0x08018b45
 8018b1c:	08018b55 	.word	0x08018b55
 8018b20:	08018b65 	.word	0x08018b65
 8018b24:	08018b75 	.word	0x08018b75
 8018b28:	08018b7d 	.word	0x08018b7d
 8018b2c:	08018b83 	.word	0x08018b83
 8018b30:	08018b89 	.word	0x08018b89
 8018b34:	08018b8f 	.word	0x08018b8f
 8018b38:	08018b4d 	.word	0x08018b4d
 8018b3c:	08018b5d 	.word	0x08018b5d
 8018b40:	08018b6d 	.word	0x08018b6d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8018b44:	f641 6384 	movw	r3, #7812	; 0x1e84
 8018b48:	60fb      	str	r3, [r7, #12]
        break;
 8018b4a:	e020      	b.n	8018b8e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8018b4c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8018b50:	60fb      	str	r3, [r7, #12]
        break;
 8018b52:	e01c      	b.n	8018b8e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8018b54:	f643 5309 	movw	r3, #15625	; 0x3d09
 8018b58:	60fb      	str	r3, [r7, #12]
        break;
 8018b5a:	e018      	b.n	8018b8e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8018b5c:	f245 1361 	movw	r3, #20833	; 0x5161
 8018b60:	60fb      	str	r3, [r7, #12]
        break;
 8018b62:	e014      	b.n	8018b8e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8018b64:	f647 2312 	movw	r3, #31250	; 0x7a12
 8018b68:	60fb      	str	r3, [r7, #12]
        break;
 8018b6a:	e010      	b.n	8018b8e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8018b6c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8018b70:	60fb      	str	r3, [r7, #12]
        break;
 8018b72:	e00c      	b.n	8018b8e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8018b74:	f24f 4324 	movw	r3, #62500	; 0xf424
 8018b78:	60fb      	str	r3, [r7, #12]
        break;
 8018b7a:	e008      	b.n	8018b8e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8018b7c:	4b07      	ldr	r3, [pc, #28]	; (8018b9c <RadioGetLoRaBandwidthInHz+0xa0>)
 8018b7e:	60fb      	str	r3, [r7, #12]
        break;
 8018b80:	e005      	b.n	8018b8e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8018b82:	4b07      	ldr	r3, [pc, #28]	; (8018ba0 <RadioGetLoRaBandwidthInHz+0xa4>)
 8018b84:	60fb      	str	r3, [r7, #12]
        break;
 8018b86:	e002      	b.n	8018b8e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8018b88:	4b06      	ldr	r3, [pc, #24]	; (8018ba4 <RadioGetLoRaBandwidthInHz+0xa8>)
 8018b8a:	60fb      	str	r3, [r7, #12]
        break;
 8018b8c:	bf00      	nop
    }

    return bandwidthInHz;
 8018b8e:	68fb      	ldr	r3, [r7, #12]
}
 8018b90:	4618      	mov	r0, r3
 8018b92:	3714      	adds	r7, #20
 8018b94:	46bd      	mov	sp, r7
 8018b96:	bc80      	pop	{r7}
 8018b98:	4770      	bx	lr
 8018b9a:	bf00      	nop
 8018b9c:	0001e848 	.word	0x0001e848
 8018ba0:	0003d090 	.word	0x0003d090
 8018ba4:	0007a120 	.word	0x0007a120

08018ba8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018ba8:	b480      	push	{r7}
 8018baa:	b083      	sub	sp, #12
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
 8018bb0:	4608      	mov	r0, r1
 8018bb2:	4611      	mov	r1, r2
 8018bb4:	461a      	mov	r2, r3
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	70fb      	strb	r3, [r7, #3]
 8018bba:	460b      	mov	r3, r1
 8018bbc:	803b      	strh	r3, [r7, #0]
 8018bbe:	4613      	mov	r3, r2
 8018bc0:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8018bc2:	883b      	ldrh	r3, [r7, #0]
 8018bc4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018bc6:	78ba      	ldrb	r2, [r7, #2]
 8018bc8:	f082 0201 	eor.w	r2, r2, #1
 8018bcc:	b2d2      	uxtb	r2, r2
 8018bce:	2a00      	cmp	r2, #0
 8018bd0:	d001      	beq.n	8018bd6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8018bd2:	2208      	movs	r2, #8
 8018bd4:	e000      	b.n	8018bd8 <RadioGetGfskTimeOnAirNumerator+0x30>
 8018bd6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8018bd8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018bda:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8018bde:	7c3b      	ldrb	r3, [r7, #16]
 8018be0:	7d39      	ldrb	r1, [r7, #20]
 8018be2:	2900      	cmp	r1, #0
 8018be4:	d001      	beq.n	8018bea <RadioGetGfskTimeOnAirNumerator+0x42>
 8018be6:	2102      	movs	r1, #2
 8018be8:	e000      	b.n	8018bec <RadioGetGfskTimeOnAirNumerator+0x44>
 8018bea:	2100      	movs	r1, #0
 8018bec:	440b      	add	r3, r1
 8018bee:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018bf0:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	370c      	adds	r7, #12
 8018bf6:	46bd      	mov	sp, r7
 8018bf8:	bc80      	pop	{r7}
 8018bfa:	4770      	bx	lr

08018bfc <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018bfc:	b480      	push	{r7}
 8018bfe:	b08b      	sub	sp, #44	; 0x2c
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	60f8      	str	r0, [r7, #12]
 8018c04:	60b9      	str	r1, [r7, #8]
 8018c06:	4611      	mov	r1, r2
 8018c08:	461a      	mov	r2, r3
 8018c0a:	460b      	mov	r3, r1
 8018c0c:	71fb      	strb	r3, [r7, #7]
 8018c0e:	4613      	mov	r3, r2
 8018c10:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8018c12:	79fb      	ldrb	r3, [r7, #7]
 8018c14:	3304      	adds	r3, #4
 8018c16:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8018c18:	2300      	movs	r3, #0
 8018c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8018c1e:	68bb      	ldr	r3, [r7, #8]
 8018c20:	2b05      	cmp	r3, #5
 8018c22:	d002      	beq.n	8018c2a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8018c24:	68bb      	ldr	r3, [r7, #8]
 8018c26:	2b06      	cmp	r3, #6
 8018c28:	d104      	bne.n	8018c34 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8018c2a:	88bb      	ldrh	r3, [r7, #4]
 8018c2c:	2b0b      	cmp	r3, #11
 8018c2e:	d801      	bhi.n	8018c34 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8018c30:	230c      	movs	r3, #12
 8018c32:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d105      	bne.n	8018c46 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8018c3a:	68bb      	ldr	r3, [r7, #8]
 8018c3c:	2b0b      	cmp	r3, #11
 8018c3e:	d008      	beq.n	8018c52 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018c40:	68bb      	ldr	r3, [r7, #8]
 8018c42:	2b0c      	cmp	r3, #12
 8018c44:	d005      	beq.n	8018c52 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	2b01      	cmp	r3, #1
 8018c4a:	d105      	bne.n	8018c58 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018c4c:	68bb      	ldr	r3, [r7, #8]
 8018c4e:	2b0c      	cmp	r3, #12
 8018c50:	d102      	bne.n	8018c58 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8018c52:	2301      	movs	r3, #1
 8018c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018c58:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8018c5c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8018c5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8018c62:	2a00      	cmp	r2, #0
 8018c64:	d001      	beq.n	8018c6a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8018c66:	2210      	movs	r2, #16
 8018c68:	e000      	b.n	8018c6c <RadioGetLoRaTimeOnAirNumerator+0x70>
 8018c6a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018c6c:	4413      	add	r3, r2
 8018c6e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8018c70:	68bb      	ldr	r3, [r7, #8]
 8018c72:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8018c74:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8018c76:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8018c7a:	2a00      	cmp	r2, #0
 8018c7c:	d001      	beq.n	8018c82 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8018c7e:	2200      	movs	r2, #0
 8018c80:	e000      	b.n	8018c84 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8018c82:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8018c84:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018c86:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8018c88:	68bb      	ldr	r3, [r7, #8]
 8018c8a:	2b06      	cmp	r3, #6
 8018c8c:	d803      	bhi.n	8018c96 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8018c8e:	68bb      	ldr	r3, [r7, #8]
 8018c90:	009b      	lsls	r3, r3, #2
 8018c92:	623b      	str	r3, [r7, #32]
 8018c94:	e00e      	b.n	8018cb4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8018c96:	69fb      	ldr	r3, [r7, #28]
 8018c98:	3308      	adds	r3, #8
 8018c9a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8018c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d004      	beq.n	8018cae <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8018ca4:	68bb      	ldr	r3, [r7, #8]
 8018ca6:	3b02      	subs	r3, #2
 8018ca8:	009b      	lsls	r3, r3, #2
 8018caa:	623b      	str	r3, [r7, #32]
 8018cac:	e002      	b.n	8018cb4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8018cae:	68bb      	ldr	r3, [r7, #8]
 8018cb0:	009b      	lsls	r3, r3, #2
 8018cb2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8018cb4:	69fb      	ldr	r3, [r7, #28]
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	da01      	bge.n	8018cbe <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8018cba:	2300      	movs	r3, #0
 8018cbc:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8018cbe:	69fa      	ldr	r2, [r7, #28]
 8018cc0:	6a3b      	ldr	r3, [r7, #32]
 8018cc2:	4413      	add	r3, r2
 8018cc4:	1e5a      	subs	r2, r3, #1
 8018cc6:	6a3b      	ldr	r3, [r7, #32]
 8018cc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8018ccc:	697a      	ldr	r2, [r7, #20]
 8018cce:	fb03 f202 	mul.w	r2, r3, r2
 8018cd2:	88bb      	ldrh	r3, [r7, #4]
 8018cd4:	4413      	add	r3, r2
    int32_t intermediate =
 8018cd6:	330c      	adds	r3, #12
 8018cd8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8018cda:	68bb      	ldr	r3, [r7, #8]
 8018cdc:	2b06      	cmp	r3, #6
 8018cde:	d802      	bhi.n	8018ce6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8018ce0:	69bb      	ldr	r3, [r7, #24]
 8018ce2:	3302      	adds	r3, #2
 8018ce4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8018ce6:	69bb      	ldr	r3, [r7, #24]
 8018ce8:	009b      	lsls	r3, r3, #2
 8018cea:	1c5a      	adds	r2, r3, #1
 8018cec:	68bb      	ldr	r3, [r7, #8]
 8018cee:	3b02      	subs	r3, #2
 8018cf0:	fa02 f303 	lsl.w	r3, r2, r3
}
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	372c      	adds	r7, #44	; 0x2c
 8018cf8:	46bd      	mov	sp, r7
 8018cfa:	bc80      	pop	{r7}
 8018cfc:	4770      	bx	lr
	...

08018d00 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8018d00:	b580      	push	{r7, lr}
 8018d02:	b08a      	sub	sp, #40	; 0x28
 8018d04:	af04      	add	r7, sp, #16
 8018d06:	60b9      	str	r1, [r7, #8]
 8018d08:	607a      	str	r2, [r7, #4]
 8018d0a:	461a      	mov	r2, r3
 8018d0c:	4603      	mov	r3, r0
 8018d0e:	73fb      	strb	r3, [r7, #15]
 8018d10:	4613      	mov	r3, r2
 8018d12:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8018d14:	2300      	movs	r3, #0
 8018d16:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8018d18:	2301      	movs	r3, #1
 8018d1a:	613b      	str	r3, [r7, #16]

    switch( modem )
 8018d1c:	7bfb      	ldrb	r3, [r7, #15]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d002      	beq.n	8018d28 <RadioTimeOnAir+0x28>
 8018d22:	2b01      	cmp	r3, #1
 8018d24:	d017      	beq.n	8018d56 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8018d26:	e035      	b.n	8018d94 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8018d28:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8018d2c:	8c3a      	ldrh	r2, [r7, #32]
 8018d2e:	7bb9      	ldrb	r1, [r7, #14]
 8018d30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018d34:	9301      	str	r3, [sp, #4]
 8018d36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018d3a:	9300      	str	r3, [sp, #0]
 8018d3c:	4603      	mov	r3, r0
 8018d3e:	6878      	ldr	r0, [r7, #4]
 8018d40:	f7ff ff32 	bl	8018ba8 <RadioGetGfskTimeOnAirNumerator>
 8018d44:	4603      	mov	r3, r0
 8018d46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018d4a:	fb02 f303 	mul.w	r3, r2, r3
 8018d4e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	613b      	str	r3, [r7, #16]
        break;
 8018d54:	e01e      	b.n	8018d94 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8018d56:	8c39      	ldrh	r1, [r7, #32]
 8018d58:	7bba      	ldrb	r2, [r7, #14]
 8018d5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018d5e:	9302      	str	r3, [sp, #8]
 8018d60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018d64:	9301      	str	r3, [sp, #4]
 8018d66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018d6a:	9300      	str	r3, [sp, #0]
 8018d6c:	460b      	mov	r3, r1
 8018d6e:	6879      	ldr	r1, [r7, #4]
 8018d70:	68b8      	ldr	r0, [r7, #8]
 8018d72:	f7ff ff43 	bl	8018bfc <RadioGetLoRaTimeOnAirNumerator>
 8018d76:	4603      	mov	r3, r0
 8018d78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018d7c:	fb02 f303 	mul.w	r3, r2, r3
 8018d80:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8018d82:	4a0a      	ldr	r2, [pc, #40]	; (8018dac <RadioTimeOnAir+0xac>)
 8018d84:	68bb      	ldr	r3, [r7, #8]
 8018d86:	4413      	add	r3, r2
 8018d88:	781b      	ldrb	r3, [r3, #0]
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	f7ff feb6 	bl	8018afc <RadioGetLoRaBandwidthInHz>
 8018d90:	6138      	str	r0, [r7, #16]
        break;
 8018d92:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8018d94:	697a      	ldr	r2, [r7, #20]
 8018d96:	693b      	ldr	r3, [r7, #16]
 8018d98:	4413      	add	r3, r2
 8018d9a:	1e5a      	subs	r2, r3, #1
 8018d9c:	693b      	ldr	r3, [r7, #16]
 8018d9e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018da2:	4618      	mov	r0, r3
 8018da4:	3718      	adds	r7, #24
 8018da6:	46bd      	mov	sp, r7
 8018da8:	bd80      	pop	{r7, pc}
 8018daa:	bf00      	nop
 8018dac:	0801dcd0 	.word	0x0801dcd0

08018db0 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b084      	sub	sp, #16
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	6078      	str	r0, [r7, #4]
 8018db8:	460b      	mov	r3, r1
 8018dba:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	2200      	movs	r2, #0
 8018dc0:	f240 2101 	movw	r1, #513	; 0x201
 8018dc4:	f240 2001 	movw	r0, #513	; 0x201
 8018dc8:	f001 fd36 	bl	801a838 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018dcc:	4b71      	ldr	r3, [pc, #452]	; (8018f94 <RadioSend+0x1e4>)
 8018dce:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018dd2:	2101      	movs	r1, #1
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	f002 f9d3 	bl	801b180 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8018dda:	4b6e      	ldr	r3, [pc, #440]	; (8018f94 <RadioSend+0x1e4>)
 8018ddc:	781b      	ldrb	r3, [r3, #0]
 8018dde:	2b01      	cmp	r3, #1
 8018de0:	d112      	bne.n	8018e08 <RadioSend+0x58>
 8018de2:	4b6c      	ldr	r3, [pc, #432]	; (8018f94 <RadioSend+0x1e4>)
 8018de4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8018de8:	2b06      	cmp	r3, #6
 8018dea:	d10d      	bne.n	8018e08 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018dec:	f640 0089 	movw	r0, #2185	; 0x889
 8018df0:	f002 f8e6 	bl	801afc0 <SUBGRF_ReadRegister>
 8018df4:	4603      	mov	r3, r0
 8018df6:	f023 0304 	bic.w	r3, r3, #4
 8018dfa:	b2db      	uxtb	r3, r3
 8018dfc:	4619      	mov	r1, r3
 8018dfe:	f640 0089 	movw	r0, #2185	; 0x889
 8018e02:	f002 f8c9 	bl	801af98 <SUBGRF_WriteRegister>
 8018e06:	e00c      	b.n	8018e22 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018e08:	f640 0089 	movw	r0, #2185	; 0x889
 8018e0c:	f002 f8d8 	bl	801afc0 <SUBGRF_ReadRegister>
 8018e10:	4603      	mov	r3, r0
 8018e12:	f043 0304 	orr.w	r3, r3, #4
 8018e16:	b2db      	uxtb	r3, r3
 8018e18:	4619      	mov	r1, r3
 8018e1a:	f640 0089 	movw	r0, #2185	; 0x889
 8018e1e:	f002 f8bb 	bl	801af98 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8018e22:	4b5c      	ldr	r3, [pc, #368]	; (8018f94 <RadioSend+0x1e4>)
 8018e24:	781b      	ldrb	r3, [r3, #0]
 8018e26:	2b04      	cmp	r3, #4
 8018e28:	f200 80a7 	bhi.w	8018f7a <RadioSend+0x1ca>
 8018e2c:	a201      	add	r2, pc, #4	; (adr r2, 8018e34 <RadioSend+0x84>)
 8018e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e32:	bf00      	nop
 8018e34:	08018e63 	.word	0x08018e63
 8018e38:	08018e49 	.word	0x08018e49
 8018e3c:	08018e63 	.word	0x08018e63
 8018e40:	08018ec3 	.word	0x08018ec3
 8018e44:	08018ee3 	.word	0x08018ee3
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8018e48:	4a52      	ldr	r2, [pc, #328]	; (8018f94 <RadioSend+0x1e4>)
 8018e4a:	78fb      	ldrb	r3, [r7, #3]
 8018e4c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018e4e:	4852      	ldr	r0, [pc, #328]	; (8018f98 <RadioSend+0x1e8>)
 8018e50:	f001 ff5a 	bl	801ad08 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018e54:	78fb      	ldrb	r3, [r7, #3]
 8018e56:	2200      	movs	r2, #0
 8018e58:	4619      	mov	r1, r3
 8018e5a:	6878      	ldr	r0, [r7, #4]
 8018e5c:	f001 fa0e 	bl	801a27c <SUBGRF_SendPayload>
            break;
 8018e60:	e08c      	b.n	8018f7c <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8018e62:	f002 fb76 	bl	801b552 <RFW_Is_Init>
 8018e66:	4603      	mov	r3, r0
 8018e68:	2b01      	cmp	r3, #1
 8018e6a:	d11d      	bne.n	8018ea8 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8018e6c:	f107 020d 	add.w	r2, r7, #13
 8018e70:	78fb      	ldrb	r3, [r7, #3]
 8018e72:	4619      	mov	r1, r3
 8018e74:	6878      	ldr	r0, [r7, #4]
 8018e76:	f002 fb84 	bl	801b582 <RFW_TransmitInit>
 8018e7a:	4603      	mov	r3, r0
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d10c      	bne.n	8018e9a <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8018e80:	7b7a      	ldrb	r2, [r7, #13]
 8018e82:	4b44      	ldr	r3, [pc, #272]	; (8018f94 <RadioSend+0x1e4>)
 8018e84:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018e86:	4844      	ldr	r0, [pc, #272]	; (8018f98 <RadioSend+0x1e8>)
 8018e88:	f001 ff3e 	bl	801ad08 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8018e8c:	7b7b      	ldrb	r3, [r7, #13]
 8018e8e:	2200      	movs	r2, #0
 8018e90:	4619      	mov	r1, r3
 8018e92:	6878      	ldr	r0, [r7, #4]
 8018e94:	f001 f9f2 	bl	801a27c <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8018e98:	e070      	b.n	8018f7c <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8018e9a:	4b40      	ldr	r3, [pc, #256]	; (8018f9c <RadioSend+0x1ec>)
 8018e9c:	2201      	movs	r2, #1
 8018e9e:	2100      	movs	r1, #0
 8018ea0:	2002      	movs	r0, #2
 8018ea2:	f003 fc8f 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
 8018ea6:	e072      	b.n	8018f8e <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8018ea8:	4a3a      	ldr	r2, [pc, #232]	; (8018f94 <RadioSend+0x1e4>)
 8018eaa:	78fb      	ldrb	r3, [r7, #3]
 8018eac:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018eae:	483a      	ldr	r0, [pc, #232]	; (8018f98 <RadioSend+0x1e8>)
 8018eb0:	f001 ff2a 	bl	801ad08 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8018eb4:	78fb      	ldrb	r3, [r7, #3]
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	4619      	mov	r1, r3
 8018eba:	6878      	ldr	r0, [r7, #4]
 8018ebc:	f001 f9de 	bl	801a27c <SUBGRF_SendPayload>
            break;
 8018ec0:	e05c      	b.n	8018f7c <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018ec2:	4b34      	ldr	r3, [pc, #208]	; (8018f94 <RadioSend+0x1e4>)
 8018ec4:	2202      	movs	r2, #2
 8018ec6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8018ec8:	4a32      	ldr	r2, [pc, #200]	; (8018f94 <RadioSend+0x1e4>)
 8018eca:	78fb      	ldrb	r3, [r7, #3]
 8018ecc:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018ece:	4832      	ldr	r0, [pc, #200]	; (8018f98 <RadioSend+0x1e8>)
 8018ed0:	f001 ff1a 	bl	801ad08 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018ed4:	78fb      	ldrb	r3, [r7, #3]
 8018ed6:	2200      	movs	r2, #0
 8018ed8:	4619      	mov	r1, r3
 8018eda:	6878      	ldr	r0, [r7, #4]
 8018edc:	f001 f9ce 	bl	801a27c <SUBGRF_SendPayload>
            break;
 8018ee0:	e04c      	b.n	8018f7c <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8018ee2:	78fb      	ldrb	r3, [r7, #3]
 8018ee4:	461a      	mov	r2, r3
 8018ee6:	6879      	ldr	r1, [r7, #4]
 8018ee8:	482d      	ldr	r0, [pc, #180]	; (8018fa0 <RadioSend+0x1f0>)
 8018eea:	f000 fcbe 	bl	801986a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018eee:	4b29      	ldr	r3, [pc, #164]	; (8018f94 <RadioSend+0x1e4>)
 8018ef0:	2202      	movs	r2, #2
 8018ef2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8018ef4:	78fb      	ldrb	r3, [r7, #3]
 8018ef6:	3301      	adds	r3, #1
 8018ef8:	b2da      	uxtb	r2, r3
 8018efa:	4b26      	ldr	r3, [pc, #152]	; (8018f94 <RadioSend+0x1e4>)
 8018efc:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018efe:	4826      	ldr	r0, [pc, #152]	; (8018f98 <RadioSend+0x1e8>)
 8018f00:	f001 ff02 	bl	801ad08 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8018f04:	2100      	movs	r1, #0
 8018f06:	20f1      	movs	r0, #241	; 0xf1
 8018f08:	f000 f95d 	bl	80191c6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8018f0c:	2100      	movs	r1, #0
 8018f0e:	20f0      	movs	r0, #240	; 0xf0
 8018f10:	f000 f959 	bl	80191c6 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8018f14:	4b1f      	ldr	r3, [pc, #124]	; (8018f94 <RadioSend+0x1e4>)
 8018f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f18:	2b64      	cmp	r3, #100	; 0x64
 8018f1a:	d108      	bne.n	8018f2e <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8018f1c:	2170      	movs	r1, #112	; 0x70
 8018f1e:	20f3      	movs	r0, #243	; 0xf3
 8018f20:	f000 f951 	bl	80191c6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8018f24:	211d      	movs	r1, #29
 8018f26:	20f2      	movs	r0, #242	; 0xf2
 8018f28:	f000 f94d 	bl	80191c6 <RadioWrite>
 8018f2c:	e007      	b.n	8018f3e <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8018f2e:	21e1      	movs	r1, #225	; 0xe1
 8018f30:	20f3      	movs	r0, #243	; 0xf3
 8018f32:	f000 f948 	bl	80191c6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8018f36:	2104      	movs	r1, #4
 8018f38:	20f2      	movs	r0, #242	; 0xf2
 8018f3a:	f000 f944 	bl	80191c6 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8018f3e:	78fb      	ldrb	r3, [r7, #3]
 8018f40:	b29b      	uxth	r3, r3
 8018f42:	00db      	lsls	r3, r3, #3
 8018f44:	b29b      	uxth	r3, r3
 8018f46:	3302      	adds	r3, #2
 8018f48:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8018f4a:	89fb      	ldrh	r3, [r7, #14]
 8018f4c:	0a1b      	lsrs	r3, r3, #8
 8018f4e:	b29b      	uxth	r3, r3
 8018f50:	b2db      	uxtb	r3, r3
 8018f52:	4619      	mov	r1, r3
 8018f54:	20f4      	movs	r0, #244	; 0xf4
 8018f56:	f000 f936 	bl	80191c6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8018f5a:	89fb      	ldrh	r3, [r7, #14]
 8018f5c:	b2db      	uxtb	r3, r3
 8018f5e:	4619      	mov	r1, r3
 8018f60:	20f5      	movs	r0, #245	; 0xf5
 8018f62:	f000 f930 	bl	80191c6 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8018f66:	78fb      	ldrb	r3, [r7, #3]
 8018f68:	3301      	adds	r3, #1
 8018f6a:	b2db      	uxtb	r3, r3
 8018f6c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8018f70:	4619      	mov	r1, r3
 8018f72:	480b      	ldr	r0, [pc, #44]	; (8018fa0 <RadioSend+0x1f0>)
 8018f74:	f001 f982 	bl	801a27c <SUBGRF_SendPayload>
            break;
 8018f78:	e000      	b.n	8018f7c <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018f7a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8018f7c:	4b05      	ldr	r3, [pc, #20]	; (8018f94 <RadioSend+0x1e4>)
 8018f7e:	685b      	ldr	r3, [r3, #4]
 8018f80:	4619      	mov	r1, r3
 8018f82:	4808      	ldr	r0, [pc, #32]	; (8018fa4 <RadioSend+0x1f4>)
 8018f84:	f003 fa84 	bl	801c490 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8018f88:	4806      	ldr	r0, [pc, #24]	; (8018fa4 <RadioSend+0x1f4>)
 8018f8a:	f003 f9a3 	bl	801c2d4 <UTIL_TIMER_Start>
}
 8018f8e:	3710      	adds	r7, #16
 8018f90:	46bd      	mov	sp, r7
 8018f92:	bd80      	pop	{r7, pc}
 8018f94:	20001a9c 	.word	0x20001a9c
 8018f98:	20001aaa 	.word	0x20001aaa
 8018f9c:	0801d678 	.word	0x0801d678
 8018fa0:	20001998 	.word	0x20001998
 8018fa4:	20001af8 	.word	0x20001af8

08018fa8 <RadioSleep>:

static void RadioSleep( void )
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b082      	sub	sp, #8
 8018fac:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8018fae:	2300      	movs	r3, #0
 8018fb0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8018fb2:	793b      	ldrb	r3, [r7, #4]
 8018fb4:	f043 0304 	orr.w	r3, r3, #4
 8018fb8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8018fba:	7938      	ldrb	r0, [r7, #4]
 8018fbc:	f001 fa3a 	bl	801a434 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8018fc0:	2002      	movs	r0, #2
 8018fc2:	f7e8 fea1 	bl	8001d08 <HAL_Delay>
}
 8018fc6:	bf00      	nop
 8018fc8:	3708      	adds	r7, #8
 8018fca:	46bd      	mov	sp, r7
 8018fcc:	bd80      	pop	{r7, pc}

08018fce <RadioStandby>:

static void RadioStandby( void )
{
 8018fce:	b580      	push	{r7, lr}
 8018fd0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8018fd2:	2000      	movs	r0, #0
 8018fd4:	f001 fa60 	bl	801a498 <SUBGRF_SetStandby>
}
 8018fd8:	bf00      	nop
 8018fda:	bd80      	pop	{r7, pc}

08018fdc <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8018fdc:	b580      	push	{r7, lr}
 8018fde:	b082      	sub	sp, #8
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8018fe4:	f002 fab5 	bl	801b552 <RFW_Is_Init>
 8018fe8:	4603      	mov	r3, r0
 8018fea:	2b01      	cmp	r3, #1
 8018fec:	d102      	bne.n	8018ff4 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8018fee:	f002 fad8 	bl	801b5a2 <RFW_ReceiveInit>
 8018ff2:	e007      	b.n	8019004 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	2200      	movs	r2, #0
 8018ff8:	f240 2162 	movw	r1, #610	; 0x262
 8018ffc:	f240 2062 	movw	r0, #610	; 0x262
 8019000:	f001 fc1a 	bl	801a838 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	2b00      	cmp	r3, #0
 8019008:	d006      	beq.n	8019018 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801900a:	6879      	ldr	r1, [r7, #4]
 801900c:	4811      	ldr	r0, [pc, #68]	; (8019054 <RadioRx+0x78>)
 801900e:	f003 fa3f 	bl	801c490 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019012:	4810      	ldr	r0, [pc, #64]	; (8019054 <RadioRx+0x78>)
 8019014:	f003 f95e 	bl	801c2d4 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019018:	4b0f      	ldr	r3, [pc, #60]	; (8019058 <RadioRx+0x7c>)
 801901a:	2200      	movs	r2, #0
 801901c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801901e:	4b0e      	ldr	r3, [pc, #56]	; (8019058 <RadioRx+0x7c>)
 8019020:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019024:	2100      	movs	r1, #0
 8019026:	4618      	mov	r0, r3
 8019028:	f002 f8aa 	bl	801b180 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801902c:	4b0a      	ldr	r3, [pc, #40]	; (8019058 <RadioRx+0x7c>)
 801902e:	785b      	ldrb	r3, [r3, #1]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d004      	beq.n	801903e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019034:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019038:	f001 fa6a 	bl	801a510 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801903c:	e005      	b.n	801904a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801903e:	4b06      	ldr	r3, [pc, #24]	; (8019058 <RadioRx+0x7c>)
 8019040:	689b      	ldr	r3, [r3, #8]
 8019042:	019b      	lsls	r3, r3, #6
 8019044:	4618      	mov	r0, r3
 8019046:	f001 fa63 	bl	801a510 <SUBGRF_SetRx>
}
 801904a:	bf00      	nop
 801904c:	3708      	adds	r7, #8
 801904e:	46bd      	mov	sp, r7
 8019050:	bd80      	pop	{r7, pc}
 8019052:	bf00      	nop
 8019054:	20001b10 	.word	0x20001b10
 8019058:	20001a9c 	.word	0x20001a9c

0801905c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b082      	sub	sp, #8
 8019060:	af00      	add	r7, sp, #0
 8019062:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8019064:	f002 fa75 	bl	801b552 <RFW_Is_Init>
 8019068:	4603      	mov	r3, r0
 801906a:	2b01      	cmp	r3, #1
 801906c:	d102      	bne.n	8019074 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801906e:	f002 fa98 	bl	801b5a2 <RFW_ReceiveInit>
 8019072:	e007      	b.n	8019084 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019074:	2300      	movs	r3, #0
 8019076:	2200      	movs	r2, #0
 8019078:	f240 2162 	movw	r1, #610	; 0x262
 801907c:	f240 2062 	movw	r0, #610	; 0x262
 8019080:	f001 fbda 	bl	801a838 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	2b00      	cmp	r3, #0
 8019088:	d006      	beq.n	8019098 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801908a:	6879      	ldr	r1, [r7, #4]
 801908c:	4811      	ldr	r0, [pc, #68]	; (80190d4 <RadioRxBoosted+0x78>)
 801908e:	f003 f9ff 	bl	801c490 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019092:	4810      	ldr	r0, [pc, #64]	; (80190d4 <RadioRxBoosted+0x78>)
 8019094:	f003 f91e 	bl	801c2d4 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019098:	4b0f      	ldr	r3, [pc, #60]	; (80190d8 <RadioRxBoosted+0x7c>)
 801909a:	2200      	movs	r2, #0
 801909c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801909e:	4b0e      	ldr	r3, [pc, #56]	; (80190d8 <RadioRxBoosted+0x7c>)
 80190a0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80190a4:	2100      	movs	r1, #0
 80190a6:	4618      	mov	r0, r3
 80190a8:	f002 f86a 	bl	801b180 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80190ac:	4b0a      	ldr	r3, [pc, #40]	; (80190d8 <RadioRxBoosted+0x7c>)
 80190ae:	785b      	ldrb	r3, [r3, #1]
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d004      	beq.n	80190be <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80190b4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80190b8:	f001 fa4a 	bl	801a550 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80190bc:	e005      	b.n	80190ca <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80190be:	4b06      	ldr	r3, [pc, #24]	; (80190d8 <RadioRxBoosted+0x7c>)
 80190c0:	689b      	ldr	r3, [r3, #8]
 80190c2:	019b      	lsls	r3, r3, #6
 80190c4:	4618      	mov	r0, r3
 80190c6:	f001 fa43 	bl	801a550 <SUBGRF_SetRxBoosted>
}
 80190ca:	bf00      	nop
 80190cc:	3708      	adds	r7, #8
 80190ce:	46bd      	mov	sp, r7
 80190d0:	bd80      	pop	{r7, pc}
 80190d2:	bf00      	nop
 80190d4:	20001b10 	.word	0x20001b10
 80190d8:	20001a9c 	.word	0x20001a9c

080190dc <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80190dc:	b580      	push	{r7, lr}
 80190de:	b082      	sub	sp, #8
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	6078      	str	r0, [r7, #4]
 80190e4:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	005a      	lsls	r2, r3, #1
 80190ea:	683b      	ldr	r3, [r7, #0]
 80190ec:	4413      	add	r3, r2
 80190ee:	4a0c      	ldr	r2, [pc, #48]	; (8019120 <RadioSetRxDutyCycle+0x44>)
 80190f0:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80190f2:	2300      	movs	r3, #0
 80190f4:	2200      	movs	r2, #0
 80190f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80190fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80190fe:	f001 fb9b 	bl	801a838 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019102:	4b07      	ldr	r3, [pc, #28]	; (8019120 <RadioSetRxDutyCycle+0x44>)
 8019104:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019108:	2100      	movs	r1, #0
 801910a:	4618      	mov	r0, r3
 801910c:	f002 f838 	bl	801b180 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019110:	6839      	ldr	r1, [r7, #0]
 8019112:	6878      	ldr	r0, [r7, #4]
 8019114:	f001 fa40 	bl	801a598 <SUBGRF_SetRxDutyCycle>
}
 8019118:	bf00      	nop
 801911a:	3708      	adds	r7, #8
 801911c:	46bd      	mov	sp, r7
 801911e:	bd80      	pop	{r7, pc}
 8019120:	20001a9c 	.word	0x20001a9c

08019124 <RadioStartCad>:

static void RadioStartCad( void )
{
 8019124:	b580      	push	{r7, lr}
 8019126:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019128:	4b09      	ldr	r3, [pc, #36]	; (8019150 <RadioStartCad+0x2c>)
 801912a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801912e:	2100      	movs	r1, #0
 8019130:	4618      	mov	r0, r3
 8019132:	f002 f825 	bl	801b180 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019136:	2300      	movs	r3, #0
 8019138:	2200      	movs	r2, #0
 801913a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801913e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8019142:	f001 fb79 	bl	801a838 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019146:	f001 fa53 	bl	801a5f0 <SUBGRF_SetCad>
}
 801914a:	bf00      	nop
 801914c:	bd80      	pop	{r7, pc}
 801914e:	bf00      	nop
 8019150:	20001a9c 	.word	0x20001a9c

08019154 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019154:	b580      	push	{r7, lr}
 8019156:	b084      	sub	sp, #16
 8019158:	af00      	add	r7, sp, #0
 801915a:	6078      	str	r0, [r7, #4]
 801915c:	460b      	mov	r3, r1
 801915e:	70fb      	strb	r3, [r7, #3]
 8019160:	4613      	mov	r3, r2
 8019162:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8019164:	883b      	ldrh	r3, [r7, #0]
 8019166:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801916a:	fb02 f303 	mul.w	r3, r2, r3
 801916e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019170:	6878      	ldr	r0, [r7, #4]
 8019172:	f001 fbbd 	bl	801a8f0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801917a:	4618      	mov	r0, r3
 801917c:	f002 f828 	bl	801b1d0 <SUBGRF_SetRfTxPower>
 8019180:	4603      	mov	r3, r0
 8019182:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8019184:	7afb      	ldrb	r3, [r7, #11]
 8019186:	2101      	movs	r1, #1
 8019188:	4618      	mov	r0, r3
 801918a:	f001 fff9 	bl	801b180 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801918e:	f001 fa3d 	bl	801a60c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019192:	68f9      	ldr	r1, [r7, #12]
 8019194:	4804      	ldr	r0, [pc, #16]	; (80191a8 <RadioSetTxContinuousWave+0x54>)
 8019196:	f003 f97b 	bl	801c490 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801919a:	4803      	ldr	r0, [pc, #12]	; (80191a8 <RadioSetTxContinuousWave+0x54>)
 801919c:	f003 f89a 	bl	801c2d4 <UTIL_TIMER_Start>
}
 80191a0:	bf00      	nop
 80191a2:	3710      	adds	r7, #16
 80191a4:	46bd      	mov	sp, r7
 80191a6:	bd80      	pop	{r7, pc}
 80191a8:	20001af8 	.word	0x20001af8

080191ac <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80191ac:	b580      	push	{r7, lr}
 80191ae:	b082      	sub	sp, #8
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	4603      	mov	r3, r0
 80191b4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80191b6:	f001 fe5c 	bl	801ae72 <SUBGRF_GetRssiInst>
 80191ba:	4603      	mov	r3, r0
 80191bc:	b21b      	sxth	r3, r3
}
 80191be:	4618      	mov	r0, r3
 80191c0:	3708      	adds	r7, #8
 80191c2:	46bd      	mov	sp, r7
 80191c4:	bd80      	pop	{r7, pc}

080191c6 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80191c6:	b580      	push	{r7, lr}
 80191c8:	b082      	sub	sp, #8
 80191ca:	af00      	add	r7, sp, #0
 80191cc:	4603      	mov	r3, r0
 80191ce:	460a      	mov	r2, r1
 80191d0:	80fb      	strh	r3, [r7, #6]
 80191d2:	4613      	mov	r3, r2
 80191d4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80191d6:	797a      	ldrb	r2, [r7, #5]
 80191d8:	88fb      	ldrh	r3, [r7, #6]
 80191da:	4611      	mov	r1, r2
 80191dc:	4618      	mov	r0, r3
 80191de:	f001 fedb 	bl	801af98 <SUBGRF_WriteRegister>
}
 80191e2:	bf00      	nop
 80191e4:	3708      	adds	r7, #8
 80191e6:	46bd      	mov	sp, r7
 80191e8:	bd80      	pop	{r7, pc}

080191ea <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80191ea:	b580      	push	{r7, lr}
 80191ec:	b082      	sub	sp, #8
 80191ee:	af00      	add	r7, sp, #0
 80191f0:	4603      	mov	r3, r0
 80191f2:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80191f4:	88fb      	ldrh	r3, [r7, #6]
 80191f6:	4618      	mov	r0, r3
 80191f8:	f001 fee2 	bl	801afc0 <SUBGRF_ReadRegister>
 80191fc:	4603      	mov	r3, r0
}
 80191fe:	4618      	mov	r0, r3
 8019200:	3708      	adds	r7, #8
 8019202:	46bd      	mov	sp, r7
 8019204:	bd80      	pop	{r7, pc}

08019206 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019206:	b580      	push	{r7, lr}
 8019208:	b082      	sub	sp, #8
 801920a:	af00      	add	r7, sp, #0
 801920c:	4603      	mov	r3, r0
 801920e:	6039      	str	r1, [r7, #0]
 8019210:	80fb      	strh	r3, [r7, #6]
 8019212:	4613      	mov	r3, r2
 8019214:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8019216:	797b      	ldrb	r3, [r7, #5]
 8019218:	b29a      	uxth	r2, r3
 801921a:	88fb      	ldrh	r3, [r7, #6]
 801921c:	6839      	ldr	r1, [r7, #0]
 801921e:	4618      	mov	r0, r3
 8019220:	f001 fee2 	bl	801afe8 <SUBGRF_WriteRegisters>
}
 8019224:	bf00      	nop
 8019226:	3708      	adds	r7, #8
 8019228:	46bd      	mov	sp, r7
 801922a:	bd80      	pop	{r7, pc}

0801922c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801922c:	b580      	push	{r7, lr}
 801922e:	b082      	sub	sp, #8
 8019230:	af00      	add	r7, sp, #0
 8019232:	4603      	mov	r3, r0
 8019234:	6039      	str	r1, [r7, #0]
 8019236:	80fb      	strh	r3, [r7, #6]
 8019238:	4613      	mov	r3, r2
 801923a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801923c:	797b      	ldrb	r3, [r7, #5]
 801923e:	b29a      	uxth	r2, r3
 8019240:	88fb      	ldrh	r3, [r7, #6]
 8019242:	6839      	ldr	r1, [r7, #0]
 8019244:	4618      	mov	r0, r3
 8019246:	f001 fef1 	bl	801b02c <SUBGRF_ReadRegisters>
}
 801924a:	bf00      	nop
 801924c:	3708      	adds	r7, #8
 801924e:	46bd      	mov	sp, r7
 8019250:	bd80      	pop	{r7, pc}
	...

08019254 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019254:	b580      	push	{r7, lr}
 8019256:	b082      	sub	sp, #8
 8019258:	af00      	add	r7, sp, #0
 801925a:	4603      	mov	r3, r0
 801925c:	460a      	mov	r2, r1
 801925e:	71fb      	strb	r3, [r7, #7]
 8019260:	4613      	mov	r3, r2
 8019262:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019264:	79fb      	ldrb	r3, [r7, #7]
 8019266:	2b01      	cmp	r3, #1
 8019268:	d10a      	bne.n	8019280 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801926a:	4a0e      	ldr	r2, [pc, #56]	; (80192a4 <RadioSetMaxPayloadLength+0x50>)
 801926c:	79bb      	ldrb	r3, [r7, #6]
 801926e:	7013      	strb	r3, [r2, #0]
 8019270:	4b0c      	ldr	r3, [pc, #48]	; (80192a4 <RadioSetMaxPayloadLength+0x50>)
 8019272:	781a      	ldrb	r2, [r3, #0]
 8019274:	4b0c      	ldr	r3, [pc, #48]	; (80192a8 <RadioSetMaxPayloadLength+0x54>)
 8019276:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019278:	480c      	ldr	r0, [pc, #48]	; (80192ac <RadioSetMaxPayloadLength+0x58>)
 801927a:	f001 fd45 	bl	801ad08 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801927e:	e00d      	b.n	801929c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8019280:	4b09      	ldr	r3, [pc, #36]	; (80192a8 <RadioSetMaxPayloadLength+0x54>)
 8019282:	7d5b      	ldrb	r3, [r3, #21]
 8019284:	2b01      	cmp	r3, #1
 8019286:	d109      	bne.n	801929c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8019288:	4a06      	ldr	r2, [pc, #24]	; (80192a4 <RadioSetMaxPayloadLength+0x50>)
 801928a:	79bb      	ldrb	r3, [r7, #6]
 801928c:	7013      	strb	r3, [r2, #0]
 801928e:	4b05      	ldr	r3, [pc, #20]	; (80192a4 <RadioSetMaxPayloadLength+0x50>)
 8019290:	781a      	ldrb	r2, [r3, #0]
 8019292:	4b05      	ldr	r3, [pc, #20]	; (80192a8 <RadioSetMaxPayloadLength+0x54>)
 8019294:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019296:	4805      	ldr	r0, [pc, #20]	; (80192ac <RadioSetMaxPayloadLength+0x58>)
 8019298:	f001 fd36 	bl	801ad08 <SUBGRF_SetPacketParams>
}
 801929c:	bf00      	nop
 801929e:	3708      	adds	r7, #8
 80192a0:	46bd      	mov	sp, r7
 80192a2:	bd80      	pop	{r7, pc}
 80192a4:	20000144 	.word	0x20000144
 80192a8:	20001a9c 	.word	0x20001a9c
 80192ac:	20001aaa 	.word	0x20001aaa

080192b0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80192b0:	b580      	push	{r7, lr}
 80192b2:	b082      	sub	sp, #8
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	4603      	mov	r3, r0
 80192b8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80192ba:	4a13      	ldr	r2, [pc, #76]	; (8019308 <RadioSetPublicNetwork+0x58>)
 80192bc:	79fb      	ldrb	r3, [r7, #7]
 80192be:	7313      	strb	r3, [r2, #12]
 80192c0:	4b11      	ldr	r3, [pc, #68]	; (8019308 <RadioSetPublicNetwork+0x58>)
 80192c2:	7b1a      	ldrb	r2, [r3, #12]
 80192c4:	4b10      	ldr	r3, [pc, #64]	; (8019308 <RadioSetPublicNetwork+0x58>)
 80192c6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80192c8:	2001      	movs	r0, #1
 80192ca:	f7ff f82d 	bl	8018328 <RadioSetModem>
    if( enable == true )
 80192ce:	79fb      	ldrb	r3, [r7, #7]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d00a      	beq.n	80192ea <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80192d4:	2134      	movs	r1, #52	; 0x34
 80192d6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80192da:	f001 fe5d 	bl	801af98 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80192de:	2144      	movs	r1, #68	; 0x44
 80192e0:	f240 7041 	movw	r0, #1857	; 0x741
 80192e4:	f001 fe58 	bl	801af98 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80192e8:	e009      	b.n	80192fe <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80192ea:	2114      	movs	r1, #20
 80192ec:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80192f0:	f001 fe52 	bl	801af98 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80192f4:	2124      	movs	r1, #36	; 0x24
 80192f6:	f240 7041 	movw	r0, #1857	; 0x741
 80192fa:	f001 fe4d 	bl	801af98 <SUBGRF_WriteRegister>
}
 80192fe:	bf00      	nop
 8019300:	3708      	adds	r7, #8
 8019302:	46bd      	mov	sp, r7
 8019304:	bd80      	pop	{r7, pc}
 8019306:	bf00      	nop
 8019308:	20001a9c 	.word	0x20001a9c

0801930c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801930c:	b580      	push	{r7, lr}
 801930e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8019310:	f001 ff92 	bl	801b238 <SUBGRF_GetRadioWakeUpTime>
 8019314:	4603      	mov	r3, r0
 8019316:	3303      	adds	r3, #3
}
 8019318:	4618      	mov	r0, r3
 801931a:	bd80      	pop	{r7, pc}

0801931c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b082      	sub	sp, #8
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8019324:	f000 f80e 	bl	8019344 <RadioOnTxTimeoutProcess>
}
 8019328:	bf00      	nop
 801932a:	3708      	adds	r7, #8
 801932c:	46bd      	mov	sp, r7
 801932e:	bd80      	pop	{r7, pc}

08019330 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b082      	sub	sp, #8
 8019334:	af00      	add	r7, sp, #0
 8019336:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8019338:	f000 f818 	bl	801936c <RadioOnRxTimeoutProcess>
}
 801933c:	bf00      	nop
 801933e:	3708      	adds	r7, #8
 8019340:	46bd      	mov	sp, r7
 8019342:	bd80      	pop	{r7, pc}

08019344 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8019344:	b580      	push	{r7, lr}
 8019346:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019348:	4b07      	ldr	r3, [pc, #28]	; (8019368 <RadioOnTxTimeoutProcess+0x24>)
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	2b00      	cmp	r3, #0
 801934e:	d008      	beq.n	8019362 <RadioOnTxTimeoutProcess+0x1e>
 8019350:	4b05      	ldr	r3, [pc, #20]	; (8019368 <RadioOnTxTimeoutProcess+0x24>)
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	685b      	ldr	r3, [r3, #4]
 8019356:	2b00      	cmp	r3, #0
 8019358:	d003      	beq.n	8019362 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801935a:	4b03      	ldr	r3, [pc, #12]	; (8019368 <RadioOnTxTimeoutProcess+0x24>)
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	685b      	ldr	r3, [r3, #4]
 8019360:	4798      	blx	r3
    }
}
 8019362:	bf00      	nop
 8019364:	bd80      	pop	{r7, pc}
 8019366:	bf00      	nop
 8019368:	20001a98 	.word	0x20001a98

0801936c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801936c:	b580      	push	{r7, lr}
 801936e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019370:	4b07      	ldr	r3, [pc, #28]	; (8019390 <RadioOnRxTimeoutProcess+0x24>)
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	2b00      	cmp	r3, #0
 8019376:	d008      	beq.n	801938a <RadioOnRxTimeoutProcess+0x1e>
 8019378:	4b05      	ldr	r3, [pc, #20]	; (8019390 <RadioOnRxTimeoutProcess+0x24>)
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	68db      	ldr	r3, [r3, #12]
 801937e:	2b00      	cmp	r3, #0
 8019380:	d003      	beq.n	801938a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8019382:	4b03      	ldr	r3, [pc, #12]	; (8019390 <RadioOnRxTimeoutProcess+0x24>)
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	68db      	ldr	r3, [r3, #12]
 8019388:	4798      	blx	r3
    }
}
 801938a:	bf00      	nop
 801938c:	bd80      	pop	{r7, pc}
 801938e:	bf00      	nop
 8019390:	20001a98 	.word	0x20001a98

08019394 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8019394:	b580      	push	{r7, lr}
 8019396:	b082      	sub	sp, #8
 8019398:	af00      	add	r7, sp, #0
 801939a:	4603      	mov	r3, r0
 801939c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801939e:	4a05      	ldr	r2, [pc, #20]	; (80193b4 <RadioOnDioIrq+0x20>)
 80193a0:	88fb      	ldrh	r3, [r7, #6]
 80193a2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80193a6:	f000 f807 	bl	80193b8 <RadioIrqProcess>
}
 80193aa:	bf00      	nop
 80193ac:	3708      	adds	r7, #8
 80193ae:	46bd      	mov	sp, r7
 80193b0:	bd80      	pop	{r7, pc}
 80193b2:	bf00      	nop
 80193b4:	20001a9c 	.word	0x20001a9c

080193b8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80193b8:	b5b0      	push	{r4, r5, r7, lr}
 80193ba:	b082      	sub	sp, #8
 80193bc:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80193be:	2300      	movs	r3, #0
 80193c0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80193c2:	2300      	movs	r3, #0
 80193c4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80193c6:	4ba8      	ldr	r3, [pc, #672]	; (8019668 <RadioIrqProcess+0x2b0>)
 80193c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80193cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80193d0:	f000 810d 	beq.w	80195ee <RadioIrqProcess+0x236>
 80193d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80193d8:	f300 81e8 	bgt.w	80197ac <RadioIrqProcess+0x3f4>
 80193dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80193e0:	f000 80f1 	beq.w	80195c6 <RadioIrqProcess+0x20e>
 80193e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80193e8:	f300 81e0 	bgt.w	80197ac <RadioIrqProcess+0x3f4>
 80193ec:	2b80      	cmp	r3, #128	; 0x80
 80193ee:	f000 80d6 	beq.w	801959e <RadioIrqProcess+0x1e6>
 80193f2:	2b80      	cmp	r3, #128	; 0x80
 80193f4:	f300 81da 	bgt.w	80197ac <RadioIrqProcess+0x3f4>
 80193f8:	2b20      	cmp	r3, #32
 80193fa:	dc49      	bgt.n	8019490 <RadioIrqProcess+0xd8>
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	f340 81d5 	ble.w	80197ac <RadioIrqProcess+0x3f4>
 8019402:	3b01      	subs	r3, #1
 8019404:	2b1f      	cmp	r3, #31
 8019406:	f200 81d1 	bhi.w	80197ac <RadioIrqProcess+0x3f4>
 801940a:	a201      	add	r2, pc, #4	; (adr r2, 8019410 <RadioIrqProcess+0x58>)
 801940c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019410:	08019499 	.word	0x08019499
 8019414:	080194d3 	.word	0x080194d3
 8019418:	080197ad 	.word	0x080197ad
 801941c:	08019689 	.word	0x08019689
 8019420:	080197ad 	.word	0x080197ad
 8019424:	080197ad 	.word	0x080197ad
 8019428:	080197ad 	.word	0x080197ad
 801942c:	08019705 	.word	0x08019705
 8019430:	080197ad 	.word	0x080197ad
 8019434:	080197ad 	.word	0x080197ad
 8019438:	080197ad 	.word	0x080197ad
 801943c:	080197ad 	.word	0x080197ad
 8019440:	080197ad 	.word	0x080197ad
 8019444:	080197ad 	.word	0x080197ad
 8019448:	080197ad 	.word	0x080197ad
 801944c:	08019721 	.word	0x08019721
 8019450:	080197ad 	.word	0x080197ad
 8019454:	080197ad 	.word	0x080197ad
 8019458:	080197ad 	.word	0x080197ad
 801945c:	080197ad 	.word	0x080197ad
 8019460:	080197ad 	.word	0x080197ad
 8019464:	080197ad 	.word	0x080197ad
 8019468:	080197ad 	.word	0x080197ad
 801946c:	080197ad 	.word	0x080197ad
 8019470:	080197ad 	.word	0x080197ad
 8019474:	080197ad 	.word	0x080197ad
 8019478:	080197ad 	.word	0x080197ad
 801947c:	080197ad 	.word	0x080197ad
 8019480:	080197ad 	.word	0x080197ad
 8019484:	080197ad 	.word	0x080197ad
 8019488:	080197ad 	.word	0x080197ad
 801948c:	0801972f 	.word	0x0801972f
 8019490:	2b40      	cmp	r3, #64	; 0x40
 8019492:	f000 816d 	beq.w	8019770 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8019496:	e189      	b.n	80197ac <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8019498:	4874      	ldr	r0, [pc, #464]	; (801966c <RadioIrqProcess+0x2b4>)
 801949a:	f002 ff89 	bl	801c3b0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801949e:	2000      	movs	r0, #0
 80194a0:	f000 fffa 	bl	801a498 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80194a4:	f002 f85c 	bl	801b560 <RFW_Is_LongPacketModeEnabled>
 80194a8:	4603      	mov	r3, r0
 80194aa:	2b01      	cmp	r3, #1
 80194ac:	d101      	bne.n	80194b2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80194ae:	f002 f880 	bl	801b5b2 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80194b2:	4b6f      	ldr	r3, [pc, #444]	; (8019670 <RadioIrqProcess+0x2b8>)
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	f000 817a 	beq.w	80197b0 <RadioIrqProcess+0x3f8>
 80194bc:	4b6c      	ldr	r3, [pc, #432]	; (8019670 <RadioIrqProcess+0x2b8>)
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	f000 8174 	beq.w	80197b0 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 80194c8:	4b69      	ldr	r3, [pc, #420]	; (8019670 <RadioIrqProcess+0x2b8>)
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	4798      	blx	r3
        break;
 80194d0:	e16e      	b.n	80197b0 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 80194d2:	4868      	ldr	r0, [pc, #416]	; (8019674 <RadioIrqProcess+0x2bc>)
 80194d4:	f002 ff6c 	bl	801c3b0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80194d8:	4b63      	ldr	r3, [pc, #396]	; (8019668 <RadioIrqProcess+0x2b0>)
 80194da:	785b      	ldrb	r3, [r3, #1]
 80194dc:	f083 0301 	eor.w	r3, r3, #1
 80194e0:	b2db      	uxtb	r3, r3
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d014      	beq.n	8019510 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80194e6:	2000      	movs	r0, #0
 80194e8:	f000 ffd6 	bl	801a498 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80194ec:	2100      	movs	r1, #0
 80194ee:	f640 1002 	movw	r0, #2306	; 0x902
 80194f2:	f001 fd51 	bl	801af98 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80194f6:	f640 1044 	movw	r0, #2372	; 0x944
 80194fa:	f001 fd61 	bl	801afc0 <SUBGRF_ReadRegister>
 80194fe:	4603      	mov	r3, r0
 8019500:	f043 0302 	orr.w	r3, r3, #2
 8019504:	b2db      	uxtb	r3, r3
 8019506:	4619      	mov	r1, r3
 8019508:	f640 1044 	movw	r0, #2372	; 0x944
 801950c:	f001 fd44 	bl	801af98 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8019510:	1dfb      	adds	r3, r7, #7
 8019512:	22ff      	movs	r2, #255	; 0xff
 8019514:	4619      	mov	r1, r3
 8019516:	4858      	ldr	r0, [pc, #352]	; (8019678 <RadioIrqProcess+0x2c0>)
 8019518:	f000 fe8e 	bl	801a238 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801951c:	4857      	ldr	r0, [pc, #348]	; (801967c <RadioIrqProcess+0x2c4>)
 801951e:	f001 fce9 	bl	801aef4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8019522:	4b53      	ldr	r3, [pc, #332]	; (8019670 <RadioIrqProcess+0x2b8>)
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	2b00      	cmp	r3, #0
 8019528:	f000 8144 	beq.w	80197b4 <RadioIrqProcess+0x3fc>
 801952c:	4b50      	ldr	r3, [pc, #320]	; (8019670 <RadioIrqProcess+0x2b8>)
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	689b      	ldr	r3, [r3, #8]
 8019532:	2b00      	cmp	r3, #0
 8019534:	f000 813e 	beq.w	80197b4 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8019538:	4b4b      	ldr	r3, [pc, #300]	; (8019668 <RadioIrqProcess+0x2b0>)
 801953a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801953e:	2b01      	cmp	r3, #1
 8019540:	d10e      	bne.n	8019560 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8019542:	4b4b      	ldr	r3, [pc, #300]	; (8019670 <RadioIrqProcess+0x2b8>)
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	689c      	ldr	r4, [r3, #8]
 8019548:	79fb      	ldrb	r3, [r7, #7]
 801954a:	b299      	uxth	r1, r3
 801954c:	4b46      	ldr	r3, [pc, #280]	; (8019668 <RadioIrqProcess+0x2b0>)
 801954e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8019552:	b21a      	sxth	r2, r3
 8019554:	4b44      	ldr	r3, [pc, #272]	; (8019668 <RadioIrqProcess+0x2b0>)
 8019556:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801955a:	4847      	ldr	r0, [pc, #284]	; (8019678 <RadioIrqProcess+0x2c0>)
 801955c:	47a0      	blx	r4
                break;
 801955e:	e01d      	b.n	801959c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019560:	4b41      	ldr	r3, [pc, #260]	; (8019668 <RadioIrqProcess+0x2b0>)
 8019562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019564:	463a      	mov	r2, r7
 8019566:	4611      	mov	r1, r2
 8019568:	4618      	mov	r0, r3
 801956a:	f001 ff47 	bl	801b3fc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801956e:	4b40      	ldr	r3, [pc, #256]	; (8019670 <RadioIrqProcess+0x2b8>)
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	689c      	ldr	r4, [r3, #8]
 8019574:	79fb      	ldrb	r3, [r7, #7]
 8019576:	b299      	uxth	r1, r3
 8019578:	4b3b      	ldr	r3, [pc, #236]	; (8019668 <RadioIrqProcess+0x2b0>)
 801957a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801957e:	b218      	sxth	r0, r3
 8019580:	683b      	ldr	r3, [r7, #0]
 8019582:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8019586:	4a3e      	ldr	r2, [pc, #248]	; (8019680 <RadioIrqProcess+0x2c8>)
 8019588:	fb82 5203 	smull	r5, r2, r2, r3
 801958c:	1192      	asrs	r2, r2, #6
 801958e:	17db      	asrs	r3, r3, #31
 8019590:	1ad3      	subs	r3, r2, r3
 8019592:	b25b      	sxtb	r3, r3
 8019594:	4602      	mov	r2, r0
 8019596:	4838      	ldr	r0, [pc, #224]	; (8019678 <RadioIrqProcess+0x2c0>)
 8019598:	47a0      	blx	r4
                break;
 801959a:	bf00      	nop
        break;
 801959c:	e10a      	b.n	80197b4 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801959e:	2000      	movs	r0, #0
 80195a0:	f000 ff7a 	bl	801a498 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80195a4:	4b32      	ldr	r3, [pc, #200]	; (8019670 <RadioIrqProcess+0x2b8>)
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	f000 8105 	beq.w	80197b8 <RadioIrqProcess+0x400>
 80195ae:	4b30      	ldr	r3, [pc, #192]	; (8019670 <RadioIrqProcess+0x2b8>)
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	699b      	ldr	r3, [r3, #24]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	f000 80ff 	beq.w	80197b8 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 80195ba:	4b2d      	ldr	r3, [pc, #180]	; (8019670 <RadioIrqProcess+0x2b8>)
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	699b      	ldr	r3, [r3, #24]
 80195c0:	2000      	movs	r0, #0
 80195c2:	4798      	blx	r3
        break;
 80195c4:	e0f8      	b.n	80197b8 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 80195c6:	2000      	movs	r0, #0
 80195c8:	f000 ff66 	bl	801a498 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80195cc:	4b28      	ldr	r3, [pc, #160]	; (8019670 <RadioIrqProcess+0x2b8>)
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	f000 80f3 	beq.w	80197bc <RadioIrqProcess+0x404>
 80195d6:	4b26      	ldr	r3, [pc, #152]	; (8019670 <RadioIrqProcess+0x2b8>)
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	699b      	ldr	r3, [r3, #24]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	f000 80ed 	beq.w	80197bc <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 80195e2:	4b23      	ldr	r3, [pc, #140]	; (8019670 <RadioIrqProcess+0x2b8>)
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	699b      	ldr	r3, [r3, #24]
 80195e8:	2001      	movs	r0, #1
 80195ea:	4798      	blx	r3
        break;
 80195ec:	e0e6      	b.n	80197bc <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80195ee:	4b25      	ldr	r3, [pc, #148]	; (8019684 <RadioIrqProcess+0x2cc>)
 80195f0:	2201      	movs	r2, #1
 80195f2:	2100      	movs	r1, #0
 80195f4:	2002      	movs	r0, #2
 80195f6:	f003 f8e5 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80195fa:	f000 fe03 	bl	801a204 <SUBGRF_GetOperatingMode>
 80195fe:	4603      	mov	r3, r0
 8019600:	2b04      	cmp	r3, #4
 8019602:	d115      	bne.n	8019630 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8019604:	4819      	ldr	r0, [pc, #100]	; (801966c <RadioIrqProcess+0x2b4>)
 8019606:	f002 fed3 	bl	801c3b0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801960a:	2000      	movs	r0, #0
 801960c:	f000 ff44 	bl	801a498 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019610:	4b17      	ldr	r3, [pc, #92]	; (8019670 <RadioIrqProcess+0x2b8>)
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	2b00      	cmp	r3, #0
 8019616:	f000 80d3 	beq.w	80197c0 <RadioIrqProcess+0x408>
 801961a:	4b15      	ldr	r3, [pc, #84]	; (8019670 <RadioIrqProcess+0x2b8>)
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	685b      	ldr	r3, [r3, #4]
 8019620:	2b00      	cmp	r3, #0
 8019622:	f000 80cd 	beq.w	80197c0 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8019626:	4b12      	ldr	r3, [pc, #72]	; (8019670 <RadioIrqProcess+0x2b8>)
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	685b      	ldr	r3, [r3, #4]
 801962c:	4798      	blx	r3
        break;
 801962e:	e0c7      	b.n	80197c0 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8019630:	f000 fde8 	bl	801a204 <SUBGRF_GetOperatingMode>
 8019634:	4603      	mov	r3, r0
 8019636:	2b05      	cmp	r3, #5
 8019638:	f040 80c2 	bne.w	80197c0 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801963c:	480d      	ldr	r0, [pc, #52]	; (8019674 <RadioIrqProcess+0x2bc>)
 801963e:	f002 feb7 	bl	801c3b0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019642:	2000      	movs	r0, #0
 8019644:	f000 ff28 	bl	801a498 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019648:	4b09      	ldr	r3, [pc, #36]	; (8019670 <RadioIrqProcess+0x2b8>)
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	2b00      	cmp	r3, #0
 801964e:	f000 80b7 	beq.w	80197c0 <RadioIrqProcess+0x408>
 8019652:	4b07      	ldr	r3, [pc, #28]	; (8019670 <RadioIrqProcess+0x2b8>)
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	68db      	ldr	r3, [r3, #12]
 8019658:	2b00      	cmp	r3, #0
 801965a:	f000 80b1 	beq.w	80197c0 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801965e:	4b04      	ldr	r3, [pc, #16]	; (8019670 <RadioIrqProcess+0x2b8>)
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	68db      	ldr	r3, [r3, #12]
 8019664:	4798      	blx	r3
        break;
 8019666:	e0ab      	b.n	80197c0 <RadioIrqProcess+0x408>
 8019668:	20001a9c 	.word	0x20001a9c
 801966c:	20001af8 	.word	0x20001af8
 8019670:	20001a98 	.word	0x20001a98
 8019674:	20001b10 	.word	0x20001b10
 8019678:	20001998 	.word	0x20001998
 801967c:	20001ac0 	.word	0x20001ac0
 8019680:	10624dd3 	.word	0x10624dd3
 8019684:	0801d690 	.word	0x0801d690
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8019688:	4b54      	ldr	r3, [pc, #336]	; (80197dc <RadioIrqProcess+0x424>)
 801968a:	2201      	movs	r2, #1
 801968c:	2100      	movs	r1, #0
 801968e:	2002      	movs	r0, #2
 8019690:	f003 f898 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8019694:	4b52      	ldr	r3, [pc, #328]	; (80197e0 <RadioIrqProcess+0x428>)
 8019696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019698:	2b00      	cmp	r3, #0
 801969a:	f000 8093 	beq.w	80197c4 <RadioIrqProcess+0x40c>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 801969e:	4a51      	ldr	r2, [pc, #324]	; (80197e4 <RadioIrqProcess+0x42c>)
 80196a0:	4b4f      	ldr	r3, [pc, #316]	; (80197e0 <RadioIrqProcess+0x428>)
 80196a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196a4:	0c1b      	lsrs	r3, r3, #16
 80196a6:	b2db      	uxtb	r3, r3
 80196a8:	4619      	mov	r1, r3
 80196aa:	f640 1003 	movw	r0, #2307	; 0x903
 80196ae:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 80196b0:	4a4c      	ldr	r2, [pc, #304]	; (80197e4 <RadioIrqProcess+0x42c>)
 80196b2:	4b4b      	ldr	r3, [pc, #300]	; (80197e0 <RadioIrqProcess+0x428>)
 80196b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196b6:	0a1b      	lsrs	r3, r3, #8
 80196b8:	b2db      	uxtb	r3, r3
 80196ba:	4619      	mov	r1, r3
 80196bc:	f640 1004 	movw	r0, #2308	; 0x904
 80196c0:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 80196c2:	4a48      	ldr	r2, [pc, #288]	; (80197e4 <RadioIrqProcess+0x42c>)
 80196c4:	4b46      	ldr	r3, [pc, #280]	; (80197e0 <RadioIrqProcess+0x428>)
 80196c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196c8:	b2db      	uxtb	r3, r3
 80196ca:	4619      	mov	r1, r3
 80196cc:	f640 1005 	movw	r0, #2309	; 0x905
 80196d0:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 80196d2:	4c44      	ldr	r4, [pc, #272]	; (80197e4 <RadioIrqProcess+0x42c>)
 80196d4:	4b44      	ldr	r3, [pc, #272]	; (80197e8 <RadioIrqProcess+0x430>)
 80196d6:	f640 1002 	movw	r0, #2306	; 0x902
 80196da:	4798      	blx	r3
 80196dc:	4603      	mov	r3, r0
 80196de:	f043 0301 	orr.w	r3, r3, #1
 80196e2:	b2db      	uxtb	r3, r3
 80196e4:	4619      	mov	r1, r3
 80196e6:	f640 1002 	movw	r0, #2306	; 0x902
 80196ea:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 80196ec:	4b3c      	ldr	r3, [pc, #240]	; (80197e0 <RadioIrqProcess+0x428>)
 80196ee:	2200      	movs	r2, #0
 80196f0:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80196f2:	2300      	movs	r3, #0
 80196f4:	2200      	movs	r2, #0
 80196f6:	f240 2162 	movw	r1, #610	; 0x262
 80196fa:	f240 2062 	movw	r0, #610	; 0x262
 80196fe:	f001 f89b 	bl	801a838 <SUBGRF_SetDioIrqParams>
        break;
 8019702:	e05f      	b.n	80197c4 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8019704:	4b39      	ldr	r3, [pc, #228]	; (80197ec <RadioIrqProcess+0x434>)
 8019706:	2201      	movs	r2, #1
 8019708:	2100      	movs	r1, #0
 801970a:	2002      	movs	r0, #2
 801970c:	f003 f85a 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8019710:	f001 ff1f 	bl	801b552 <RFW_Is_Init>
 8019714:	4603      	mov	r3, r0
 8019716:	2b01      	cmp	r3, #1
 8019718:	d156      	bne.n	80197c8 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801971a:	f001 ff50 	bl	801b5be <RFW_ReceivePayload>
        break;
 801971e:	e053      	b.n	80197c8 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8019720:	4b33      	ldr	r3, [pc, #204]	; (80197f0 <RadioIrqProcess+0x438>)
 8019722:	2201      	movs	r2, #1
 8019724:	2100      	movs	r1, #0
 8019726:	2002      	movs	r0, #2
 8019728:	f003 f84c 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801972c:	e051      	b.n	80197d2 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801972e:	4831      	ldr	r0, [pc, #196]	; (80197f4 <RadioIrqProcess+0x43c>)
 8019730:	f002 fe3e 	bl	801c3b0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019734:	4b2a      	ldr	r3, [pc, #168]	; (80197e0 <RadioIrqProcess+0x428>)
 8019736:	785b      	ldrb	r3, [r3, #1]
 8019738:	f083 0301 	eor.w	r3, r3, #1
 801973c:	b2db      	uxtb	r3, r3
 801973e:	2b00      	cmp	r3, #0
 8019740:	d002      	beq.n	8019748 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8019742:	2000      	movs	r0, #0
 8019744:	f000 fea8 	bl	801a498 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019748:	4b2b      	ldr	r3, [pc, #172]	; (80197f8 <RadioIrqProcess+0x440>)
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	2b00      	cmp	r3, #0
 801974e:	d03d      	beq.n	80197cc <RadioIrqProcess+0x414>
 8019750:	4b29      	ldr	r3, [pc, #164]	; (80197f8 <RadioIrqProcess+0x440>)
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	68db      	ldr	r3, [r3, #12]
 8019756:	2b00      	cmp	r3, #0
 8019758:	d038      	beq.n	80197cc <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801975a:	4b27      	ldr	r3, [pc, #156]	; (80197f8 <RadioIrqProcess+0x440>)
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	68db      	ldr	r3, [r3, #12]
 8019760:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8019762:	4b26      	ldr	r3, [pc, #152]	; (80197fc <RadioIrqProcess+0x444>)
 8019764:	2201      	movs	r2, #1
 8019766:	2100      	movs	r1, #0
 8019768:	2002      	movs	r0, #2
 801976a:	f003 f82b 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801976e:	e02d      	b.n	80197cc <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8019770:	4b23      	ldr	r3, [pc, #140]	; (8019800 <RadioIrqProcess+0x448>)
 8019772:	2201      	movs	r2, #1
 8019774:	2100      	movs	r1, #0
 8019776:	2002      	movs	r0, #2
 8019778:	f003 f824 	bl	801c7c4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801977c:	4b18      	ldr	r3, [pc, #96]	; (80197e0 <RadioIrqProcess+0x428>)
 801977e:	785b      	ldrb	r3, [r3, #1]
 8019780:	f083 0301 	eor.w	r3, r3, #1
 8019784:	b2db      	uxtb	r3, r3
 8019786:	2b00      	cmp	r3, #0
 8019788:	d002      	beq.n	8019790 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801978a:	2000      	movs	r0, #0
 801978c:	f000 fe84 	bl	801a498 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8019790:	4b19      	ldr	r3, [pc, #100]	; (80197f8 <RadioIrqProcess+0x440>)
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	2b00      	cmp	r3, #0
 8019796:	d01b      	beq.n	80197d0 <RadioIrqProcess+0x418>
 8019798:	4b17      	ldr	r3, [pc, #92]	; (80197f8 <RadioIrqProcess+0x440>)
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	691b      	ldr	r3, [r3, #16]
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d016      	beq.n	80197d0 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 80197a2:	4b15      	ldr	r3, [pc, #84]	; (80197f8 <RadioIrqProcess+0x440>)
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	691b      	ldr	r3, [r3, #16]
 80197a8:	4798      	blx	r3
        break;
 80197aa:	e011      	b.n	80197d0 <RadioIrqProcess+0x418>
        break;
 80197ac:	bf00      	nop
 80197ae:	e010      	b.n	80197d2 <RadioIrqProcess+0x41a>
        break;
 80197b0:	bf00      	nop
 80197b2:	e00e      	b.n	80197d2 <RadioIrqProcess+0x41a>
        break;
 80197b4:	bf00      	nop
 80197b6:	e00c      	b.n	80197d2 <RadioIrqProcess+0x41a>
        break;
 80197b8:	bf00      	nop
 80197ba:	e00a      	b.n	80197d2 <RadioIrqProcess+0x41a>
        break;
 80197bc:	bf00      	nop
 80197be:	e008      	b.n	80197d2 <RadioIrqProcess+0x41a>
        break;
 80197c0:	bf00      	nop
 80197c2:	e006      	b.n	80197d2 <RadioIrqProcess+0x41a>
        break;
 80197c4:	bf00      	nop
 80197c6:	e004      	b.n	80197d2 <RadioIrqProcess+0x41a>
        break;
 80197c8:	bf00      	nop
 80197ca:	e002      	b.n	80197d2 <RadioIrqProcess+0x41a>
        break;
 80197cc:	bf00      	nop
 80197ce:	e000      	b.n	80197d2 <RadioIrqProcess+0x41a>
        break;
 80197d0:	bf00      	nop
    }
}
 80197d2:	bf00      	nop
 80197d4:	3708      	adds	r7, #8
 80197d6:	46bd      	mov	sp, r7
 80197d8:	bdb0      	pop	{r4, r5, r7, pc}
 80197da:	bf00      	nop
 80197dc:	0801d6a4 	.word	0x0801d6a4
 80197e0:	20001a9c 	.word	0x20001a9c
 80197e4:	080191c7 	.word	0x080191c7
 80197e8:	080191eb 	.word	0x080191eb
 80197ec:	0801d6b0 	.word	0x0801d6b0
 80197f0:	0801d6bc 	.word	0x0801d6bc
 80197f4:	20001b10 	.word	0x20001b10
 80197f8:	20001a98 	.word	0x20001a98
 80197fc:	0801d6c8 	.word	0x0801d6c8
 8019800:	0801d6d4 	.word	0x0801d6d4

08019804 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8019804:	b580      	push	{r7, lr}
 8019806:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019808:	4b09      	ldr	r3, [pc, #36]	; (8019830 <RadioTxPrbs+0x2c>)
 801980a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801980e:	2101      	movs	r1, #1
 8019810:	4618      	mov	r0, r3
 8019812:	f001 fcb5 	bl	801b180 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8019816:	4b07      	ldr	r3, [pc, #28]	; (8019834 <RadioTxPrbs+0x30>)
 8019818:	212d      	movs	r1, #45	; 0x2d
 801981a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801981e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8019820:	f000 fefd 	bl	801a61e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8019824:	4804      	ldr	r0, [pc, #16]	; (8019838 <RadioTxPrbs+0x34>)
 8019826:	f000 fe53 	bl	801a4d0 <SUBGRF_SetTx>
}
 801982a:	bf00      	nop
 801982c:	bd80      	pop	{r7, pc}
 801982e:	bf00      	nop
 8019830:	20001a9c 	.word	0x20001a9c
 8019834:	080191c7 	.word	0x080191c7
 8019838:	000fffff 	.word	0x000fffff

0801983c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b084      	sub	sp, #16
 8019840:	af00      	add	r7, sp, #0
 8019842:	4603      	mov	r3, r0
 8019844:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8019846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801984a:	4618      	mov	r0, r3
 801984c:	f001 fcc0 	bl	801b1d0 <SUBGRF_SetRfTxPower>
 8019850:	4603      	mov	r3, r0
 8019852:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8019854:	7bfb      	ldrb	r3, [r7, #15]
 8019856:	2101      	movs	r1, #1
 8019858:	4618      	mov	r0, r3
 801985a:	f001 fc91 	bl	801b180 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801985e:	f000 fed5 	bl	801a60c <SUBGRF_SetTxContinuousWave>
}
 8019862:	bf00      	nop
 8019864:	3710      	adds	r7, #16
 8019866:	46bd      	mov	sp, r7
 8019868:	bd80      	pop	{r7, pc}

0801986a <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801986a:	b480      	push	{r7}
 801986c:	b089      	sub	sp, #36	; 0x24
 801986e:	af00      	add	r7, sp, #0
 8019870:	60f8      	str	r0, [r7, #12]
 8019872:	60b9      	str	r1, [r7, #8]
 8019874:	4613      	mov	r3, r2
 8019876:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8019878:	2300      	movs	r3, #0
 801987a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801987c:	2300      	movs	r3, #0
 801987e:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8019880:	2300      	movs	r3, #0
 8019882:	61bb      	str	r3, [r7, #24]
 8019884:	e011      	b.n	80198aa <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8019886:	69bb      	ldr	r3, [r7, #24]
 8019888:	68ba      	ldr	r2, [r7, #8]
 801988a:	4413      	add	r3, r2
 801988c:	781a      	ldrb	r2, [r3, #0]
 801988e:	69bb      	ldr	r3, [r7, #24]
 8019890:	68b9      	ldr	r1, [r7, #8]
 8019892:	440b      	add	r3, r1
 8019894:	43d2      	mvns	r2, r2
 8019896:	b2d2      	uxtb	r2, r2
 8019898:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801989a:	69bb      	ldr	r3, [r7, #24]
 801989c:	68fa      	ldr	r2, [r7, #12]
 801989e:	4413      	add	r3, r2
 80198a0:	2200      	movs	r2, #0
 80198a2:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80198a4:	69bb      	ldr	r3, [r7, #24]
 80198a6:	3301      	adds	r3, #1
 80198a8:	61bb      	str	r3, [r7, #24]
 80198aa:	79fb      	ldrb	r3, [r7, #7]
 80198ac:	69ba      	ldr	r2, [r7, #24]
 80198ae:	429a      	cmp	r2, r3
 80198b0:	dbe9      	blt.n	8019886 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80198b2:	2300      	movs	r3, #0
 80198b4:	61bb      	str	r3, [r7, #24]
 80198b6:	e049      	b.n	801994c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80198b8:	69bb      	ldr	r3, [r7, #24]
 80198ba:	425a      	negs	r2, r3
 80198bc:	f003 0307 	and.w	r3, r3, #7
 80198c0:	f002 0207 	and.w	r2, r2, #7
 80198c4:	bf58      	it	pl
 80198c6:	4253      	negpl	r3, r2
 80198c8:	b2db      	uxtb	r3, r3
 80198ca:	f1c3 0307 	rsb	r3, r3, #7
 80198ce:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80198d0:	69bb      	ldr	r3, [r7, #24]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	da00      	bge.n	80198d8 <payload_integration+0x6e>
 80198d6:	3307      	adds	r3, #7
 80198d8:	10db      	asrs	r3, r3, #3
 80198da:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80198dc:	69bb      	ldr	r3, [r7, #24]
 80198de:	3301      	adds	r3, #1
 80198e0:	425a      	negs	r2, r3
 80198e2:	f003 0307 	and.w	r3, r3, #7
 80198e6:	f002 0207 	and.w	r2, r2, #7
 80198ea:	bf58      	it	pl
 80198ec:	4253      	negpl	r3, r2
 80198ee:	b2db      	uxtb	r3, r3
 80198f0:	f1c3 0307 	rsb	r3, r3, #7
 80198f4:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80198f6:	69bb      	ldr	r3, [r7, #24]
 80198f8:	3301      	adds	r3, #1
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	da00      	bge.n	8019900 <payload_integration+0x96>
 80198fe:	3307      	adds	r3, #7
 8019900:	10db      	asrs	r3, r3, #3
 8019902:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8019904:	7dbb      	ldrb	r3, [r7, #22]
 8019906:	68ba      	ldr	r2, [r7, #8]
 8019908:	4413      	add	r3, r2
 801990a:	781b      	ldrb	r3, [r3, #0]
 801990c:	461a      	mov	r2, r3
 801990e:	7dfb      	ldrb	r3, [r7, #23]
 8019910:	fa42 f303 	asr.w	r3, r2, r3
 8019914:	b2db      	uxtb	r3, r3
 8019916:	f003 0301 	and.w	r3, r3, #1
 801991a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801991c:	7ffa      	ldrb	r2, [r7, #31]
 801991e:	7cfb      	ldrb	r3, [r7, #19]
 8019920:	4053      	eors	r3, r2
 8019922:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8019924:	7d3b      	ldrb	r3, [r7, #20]
 8019926:	68fa      	ldr	r2, [r7, #12]
 8019928:	4413      	add	r3, r2
 801992a:	781b      	ldrb	r3, [r3, #0]
 801992c:	b25a      	sxtb	r2, r3
 801992e:	7ff9      	ldrb	r1, [r7, #31]
 8019930:	7d7b      	ldrb	r3, [r7, #21]
 8019932:	fa01 f303 	lsl.w	r3, r1, r3
 8019936:	b25b      	sxtb	r3, r3
 8019938:	4313      	orrs	r3, r2
 801993a:	b259      	sxtb	r1, r3
 801993c:	7d3b      	ldrb	r3, [r7, #20]
 801993e:	68fa      	ldr	r2, [r7, #12]
 8019940:	4413      	add	r3, r2
 8019942:	b2ca      	uxtb	r2, r1
 8019944:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8019946:	69bb      	ldr	r3, [r7, #24]
 8019948:	3301      	adds	r3, #1
 801994a:	61bb      	str	r3, [r7, #24]
 801994c:	79fb      	ldrb	r3, [r7, #7]
 801994e:	00db      	lsls	r3, r3, #3
 8019950:	69ba      	ldr	r2, [r7, #24]
 8019952:	429a      	cmp	r2, r3
 8019954:	dbb0      	blt.n	80198b8 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8019956:	7ffb      	ldrb	r3, [r7, #31]
 8019958:	01db      	lsls	r3, r3, #7
 801995a:	b25a      	sxtb	r2, r3
 801995c:	7ffb      	ldrb	r3, [r7, #31]
 801995e:	019b      	lsls	r3, r3, #6
 8019960:	b25b      	sxtb	r3, r3
 8019962:	4313      	orrs	r3, r2
 8019964:	b25b      	sxtb	r3, r3
 8019966:	7ffa      	ldrb	r2, [r7, #31]
 8019968:	2a00      	cmp	r2, #0
 801996a:	d101      	bne.n	8019970 <payload_integration+0x106>
 801996c:	2220      	movs	r2, #32
 801996e:	e000      	b.n	8019972 <payload_integration+0x108>
 8019970:	2200      	movs	r2, #0
 8019972:	4313      	orrs	r3, r2
 8019974:	b259      	sxtb	r1, r3
 8019976:	79fb      	ldrb	r3, [r7, #7]
 8019978:	68fa      	ldr	r2, [r7, #12]
 801997a:	4413      	add	r3, r2
 801997c:	b2ca      	uxtb	r2, r1
 801997e:	701a      	strb	r2, [r3, #0]
}
 8019980:	bf00      	nop
 8019982:	3724      	adds	r7, #36	; 0x24
 8019984:	46bd      	mov	sp, r7
 8019986:	bc80      	pop	{r7}
 8019988:	4770      	bx	lr
	...

0801998c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801998c:	b580      	push	{r7, lr}
 801998e:	b08c      	sub	sp, #48	; 0x30
 8019990:	af00      	add	r7, sp, #0
 8019992:	60b9      	str	r1, [r7, #8]
 8019994:	607a      	str	r2, [r7, #4]
 8019996:	603b      	str	r3, [r7, #0]
 8019998:	4603      	mov	r3, r0
 801999a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801999c:	2300      	movs	r3, #0
 801999e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 80199a0:	2300      	movs	r3, #0
 80199a2:	623b      	str	r3, [r7, #32]
 80199a4:	2300      	movs	r3, #0
 80199a6:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80199a8:	f001 fdcd 	bl	801b546 <RFW_DeInit>

    if( rxContinuous != 0 )
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d001      	beq.n	80199b6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80199b2:	2300      	movs	r3, #0
 80199b4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	bf14      	ite	ne
 80199bc:	2301      	movne	r3, #1
 80199be:	2300      	moveq	r3, #0
 80199c0:	b2da      	uxtb	r2, r3
 80199c2:	4ba3      	ldr	r3, [pc, #652]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 80199c4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80199c6:	7bfb      	ldrb	r3, [r7, #15]
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d003      	beq.n	80199d4 <RadioSetRxGenericConfig+0x48>
 80199cc:	2b01      	cmp	r3, #1
 80199ce:	f000 80dc 	beq.w	8019b8a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80199d2:	e194      	b.n	8019cfe <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80199d4:	68bb      	ldr	r3, [r7, #8]
 80199d6:	689b      	ldr	r3, [r3, #8]
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d003      	beq.n	80199e4 <RadioSetRxGenericConfig+0x58>
 80199dc:	68bb      	ldr	r3, [r7, #8]
 80199de:	68db      	ldr	r3, [r3, #12]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d102      	bne.n	80199ea <RadioSetRxGenericConfig+0x5e>
            return -1;
 80199e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80199e8:	e18a      	b.n	8019d00 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80199ea:	68bb      	ldr	r3, [r7, #8]
 80199ec:	7f9b      	ldrb	r3, [r3, #30]
 80199ee:	2b08      	cmp	r3, #8
 80199f0:	d902      	bls.n	80199f8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80199f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80199f6:	e183      	b.n	8019d00 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80199f8:	68bb      	ldr	r3, [r7, #8]
 80199fa:	6919      	ldr	r1, [r3, #16]
 80199fc:	68bb      	ldr	r3, [r7, #8]
 80199fe:	7f9b      	ldrb	r3, [r3, #30]
 8019a00:	b29a      	uxth	r2, r3
 8019a02:	f107 0320 	add.w	r3, r7, #32
 8019a06:	4618      	mov	r0, r3
 8019a08:	f001 fe90 	bl	801b72c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019a0c:	68bb      	ldr	r3, [r7, #8]
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	bf14      	ite	ne
 8019a14:	2301      	movne	r3, #1
 8019a16:	2300      	moveq	r3, #0
 8019a18:	b2db      	uxtb	r3, r3
 8019a1a:	4618      	mov	r0, r3
 8019a1c:	f000 fe08 	bl	801a630 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019a20:	4b8b      	ldr	r3, [pc, #556]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019a22:	2200      	movs	r2, #0
 8019a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019a28:	68bb      	ldr	r3, [r7, #8]
 8019a2a:	689b      	ldr	r3, [r3, #8]
 8019a2c:	4a88      	ldr	r2, [pc, #544]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019a2e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8019a30:	68bb      	ldr	r3, [r7, #8]
 8019a32:	f893 2020 	ldrb.w	r2, [r3, #32]
 8019a36:	4b86      	ldr	r3, [pc, #536]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8019a3c:	68bb      	ldr	r3, [r7, #8]
 8019a3e:	685b      	ldr	r3, [r3, #4]
 8019a40:	4618      	mov	r0, r3
 8019a42:	f001 fcb3 	bl	801b3ac <SUBGRF_GetFskBandwidthRegValue>
 8019a46:	4603      	mov	r3, r0
 8019a48:	461a      	mov	r2, r3
 8019a4a:	4b81      	ldr	r3, [pc, #516]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019a50:	4b7f      	ldr	r3, [pc, #508]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019a52:	2200      	movs	r2, #0
 8019a54:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8019a56:	68bb      	ldr	r3, [r7, #8]
 8019a58:	68db      	ldr	r3, [r3, #12]
 8019a5a:	b29b      	uxth	r3, r3
 8019a5c:	00db      	lsls	r3, r3, #3
 8019a5e:	b29a      	uxth	r2, r3
 8019a60:	4b7b      	ldr	r3, [pc, #492]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019a62:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8019a64:	68bb      	ldr	r3, [r7, #8]
 8019a66:	7fda      	ldrb	r2, [r3, #31]
 8019a68:	4b79      	ldr	r3, [pc, #484]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019a6a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019a6c:	68bb      	ldr	r3, [r7, #8]
 8019a6e:	7f9b      	ldrb	r3, [r3, #30]
 8019a70:	00db      	lsls	r3, r3, #3
 8019a72:	b2da      	uxtb	r2, r3
 8019a74:	4b76      	ldr	r3, [pc, #472]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019a76:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8019a78:	68bb      	ldr	r3, [r7, #8]
 8019a7a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8019a7e:	4b74      	ldr	r3, [pc, #464]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019a80:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8019a82:	68bb      	ldr	r3, [r7, #8]
 8019a84:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d105      	bne.n	8019a98 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8019a8c:	68bb      	ldr	r3, [r7, #8]
 8019a8e:	695b      	ldr	r3, [r3, #20]
 8019a90:	b2da      	uxtb	r2, r3
 8019a92:	4b6f      	ldr	r3, [pc, #444]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019a94:	759a      	strb	r2, [r3, #22]
 8019a96:	e00b      	b.n	8019ab0 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8019a98:	68bb      	ldr	r3, [r7, #8]
 8019a9a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019a9e:	2b02      	cmp	r3, #2
 8019aa0:	d103      	bne.n	8019aaa <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019aa2:	4b6b      	ldr	r3, [pc, #428]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019aa4:	22ff      	movs	r2, #255	; 0xff
 8019aa6:	759a      	strb	r2, [r3, #22]
 8019aa8:	e002      	b.n	8019ab0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019aaa:	4b69      	ldr	r3, [pc, #420]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019aac:	22ff      	movs	r2, #255	; 0xff
 8019aae:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019ab0:	68bb      	ldr	r3, [r7, #8]
 8019ab2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019ab6:	2b02      	cmp	r3, #2
 8019ab8:	d004      	beq.n	8019ac4 <RadioSetRxGenericConfig+0x138>
 8019aba:	68bb      	ldr	r3, [r7, #8]
 8019abc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019ac0:	2b02      	cmp	r3, #2
 8019ac2:	d12d      	bne.n	8019b20 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019ac4:	68bb      	ldr	r3, [r7, #8]
 8019ac6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019aca:	2bf1      	cmp	r3, #241	; 0xf1
 8019acc:	d00c      	beq.n	8019ae8 <RadioSetRxGenericConfig+0x15c>
 8019ace:	68bb      	ldr	r3, [r7, #8]
 8019ad0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019ad4:	2bf2      	cmp	r3, #242	; 0xf2
 8019ad6:	d007      	beq.n	8019ae8 <RadioSetRxGenericConfig+0x15c>
 8019ad8:	68bb      	ldr	r3, [r7, #8]
 8019ada:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019ade:	2b01      	cmp	r3, #1
 8019ae0:	d002      	beq.n	8019ae8 <RadioSetRxGenericConfig+0x15c>
            return -1;
 8019ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019ae6:	e10b      	b.n	8019d00 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8019ae8:	2300      	movs	r3, #0
 8019aea:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8019aec:	68bb      	ldr	r3, [r7, #8]
 8019aee:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8019af0:	4b58      	ldr	r3, [pc, #352]	; (8019c54 <RadioSetRxGenericConfig+0x2c8>)
 8019af2:	6819      	ldr	r1, [r3, #0]
 8019af4:	f107 0314 	add.w	r3, r7, #20
 8019af8:	4a57      	ldr	r2, [pc, #348]	; (8019c58 <RadioSetRxGenericConfig+0x2cc>)
 8019afa:	4618      	mov	r0, r3
 8019afc:	f001 fd16 	bl	801b52c <RFW_Init>
 8019b00:	4603      	mov	r3, r0
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d002      	beq.n	8019b0c <RadioSetRxGenericConfig+0x180>
            return -1;
 8019b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b0a:	e0f9      	b.n	8019d00 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019b0c:	4b50      	ldr	r3, [pc, #320]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019b0e:	2200      	movs	r2, #0
 8019b10:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019b12:	4b4f      	ldr	r3, [pc, #316]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019b14:	2201      	movs	r2, #1
 8019b16:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019b18:	4b4d      	ldr	r3, [pc, #308]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019b1a:	2200      	movs	r2, #0
 8019b1c:	755a      	strb	r2, [r3, #21]
        {
 8019b1e:	e00e      	b.n	8019b3e <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019b20:	68bb      	ldr	r3, [r7, #8]
 8019b22:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8019b26:	4b4a      	ldr	r3, [pc, #296]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019b28:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019b2a:	68bb      	ldr	r3, [r7, #8]
 8019b2c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8019b30:	4b47      	ldr	r3, [pc, #284]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019b32:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8019b34:	68bb      	ldr	r3, [r7, #8]
 8019b36:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8019b3a:	4b45      	ldr	r3, [pc, #276]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019b3c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8019b3e:	f7ff fa46 	bl	8018fce <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019b42:	2000      	movs	r0, #0
 8019b44:	f7fe fbf0 	bl	8018328 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019b48:	4844      	ldr	r0, [pc, #272]	; (8019c5c <RadioSetRxGenericConfig+0x2d0>)
 8019b4a:	f001 f80b 	bl	801ab64 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019b4e:	4844      	ldr	r0, [pc, #272]	; (8019c60 <RadioSetRxGenericConfig+0x2d4>)
 8019b50:	f001 f8da 	bl	801ad08 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019b54:	f107 0320 	add.w	r3, r7, #32
 8019b58:	4618      	mov	r0, r3
 8019b5a:	f000 fba2 	bl	801a2a2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019b5e:	68bb      	ldr	r3, [r7, #8]
 8019b60:	8b9b      	ldrh	r3, [r3, #28]
 8019b62:	4618      	mov	r0, r3
 8019b64:	f000 fbec 	bl	801a340 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8019b68:	68bb      	ldr	r3, [r7, #8]
 8019b6a:	8b1b      	ldrh	r3, [r3, #24]
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	f000 fbc7 	bl	801a300 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8019b72:	683b      	ldr	r3, [r7, #0]
 8019b74:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019b78:	fb03 f202 	mul.w	r2, r3, r2
 8019b7c:	68bb      	ldr	r3, [r7, #8]
 8019b7e:	689b      	ldr	r3, [r3, #8]
 8019b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b84:	4a32      	ldr	r2, [pc, #200]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019b86:	6093      	str	r3, [r2, #8]
        break;
 8019b88:	e0b9      	b.n	8019cfe <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8019b8a:	68bb      	ldr	r3, [r7, #8]
 8019b8c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d102      	bne.n	8019b98 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8019b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b96:	e0b3      	b.n	8019d00 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8019b98:	68bb      	ldr	r3, [r7, #8]
 8019b9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8019b9e:	2b01      	cmp	r3, #1
 8019ba0:	d104      	bne.n	8019bac <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8019ba2:	68bb      	ldr	r3, [r7, #8]
 8019ba4:	695b      	ldr	r3, [r3, #20]
 8019ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019baa:	e002      	b.n	8019bb2 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8019bac:	23ff      	movs	r3, #255	; 0xff
 8019bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019bb2:	68bb      	ldr	r3, [r7, #8]
 8019bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	bf14      	ite	ne
 8019bba:	2301      	movne	r3, #1
 8019bbc:	2300      	moveq	r3, #0
 8019bbe:	b2db      	uxtb	r3, r3
 8019bc0:	4618      	mov	r0, r3
 8019bc2:	f000 fd35 	bl	801a630 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019bc6:	683b      	ldr	r3, [r7, #0]
 8019bc8:	b2db      	uxtb	r3, r3
 8019bca:	4618      	mov	r0, r3
 8019bcc:	f000 fd3f 	bl	801a64e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019bd0:	4b1f      	ldr	r3, [pc, #124]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019bd2:	2201      	movs	r2, #1
 8019bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019bd8:	68bb      	ldr	r3, [r7, #8]
 8019bda:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8019bde:	4b1c      	ldr	r3, [pc, #112]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8019be4:	68bb      	ldr	r3, [r7, #8]
 8019be6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8019bea:	4b19      	ldr	r3, [pc, #100]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019bf0:	68bb      	ldr	r3, [r7, #8]
 8019bf2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8019bf6:	4b16      	ldr	r3, [pc, #88]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019bf8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8019bfc:	68bb      	ldr	r3, [r7, #8]
 8019bfe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019c02:	2b02      	cmp	r3, #2
 8019c04:	d010      	beq.n	8019c28 <RadioSetRxGenericConfig+0x29c>
 8019c06:	2b02      	cmp	r3, #2
 8019c08:	dc2c      	bgt.n	8019c64 <RadioSetRxGenericConfig+0x2d8>
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d002      	beq.n	8019c14 <RadioSetRxGenericConfig+0x288>
 8019c0e:	2b01      	cmp	r3, #1
 8019c10:	d005      	beq.n	8019c1e <RadioSetRxGenericConfig+0x292>
            break;
 8019c12:	e027      	b.n	8019c64 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019c14:	4b0e      	ldr	r3, [pc, #56]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019c16:	2200      	movs	r2, #0
 8019c18:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019c1c:	e023      	b.n	8019c66 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019c1e:	4b0c      	ldr	r3, [pc, #48]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019c20:	2201      	movs	r2, #1
 8019c22:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019c26:	e01e      	b.n	8019c66 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019c28:	68bb      	ldr	r3, [r7, #8]
 8019c2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019c2e:	2b0b      	cmp	r3, #11
 8019c30:	d004      	beq.n	8019c3c <RadioSetRxGenericConfig+0x2b0>
 8019c32:	68bb      	ldr	r3, [r7, #8]
 8019c34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019c38:	2b0c      	cmp	r3, #12
 8019c3a:	d104      	bne.n	8019c46 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019c3c:	4b04      	ldr	r3, [pc, #16]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019c3e:	2201      	movs	r2, #1
 8019c40:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019c44:	e00f      	b.n	8019c66 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019c46:	4b02      	ldr	r3, [pc, #8]	; (8019c50 <RadioSetRxGenericConfig+0x2c4>)
 8019c48:	2200      	movs	r2, #0
 8019c4a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019c4e:	e00a      	b.n	8019c66 <RadioSetRxGenericConfig+0x2da>
 8019c50:	20001a9c 	.word	0x20001a9c
 8019c54:	20001a98 	.word	0x20001a98
 8019c58:	20001b10 	.word	0x20001b10
 8019c5c:	20001ad4 	.word	0x20001ad4
 8019c60:	20001aaa 	.word	0x20001aaa
            break;
 8019c64:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019c66:	4b28      	ldr	r3, [pc, #160]	; (8019d08 <RadioSetRxGenericConfig+0x37c>)
 8019c68:	2201      	movs	r2, #1
 8019c6a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019c6c:	68bb      	ldr	r3, [r7, #8]
 8019c6e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8019c70:	4b25      	ldr	r3, [pc, #148]	; (8019d08 <RadioSetRxGenericConfig+0x37c>)
 8019c72:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8019c74:	68bb      	ldr	r3, [r7, #8]
 8019c76:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8019c7a:	4b23      	ldr	r3, [pc, #140]	; (8019d08 <RadioSetRxGenericConfig+0x37c>)
 8019c7c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019c7e:	4a22      	ldr	r2, [pc, #136]	; (8019d08 <RadioSetRxGenericConfig+0x37c>)
 8019c80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019c84:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019c86:	68bb      	ldr	r3, [r7, #8]
 8019c88:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8019c8c:	4b1e      	ldr	r3, [pc, #120]	; (8019d08 <RadioSetRxGenericConfig+0x37c>)
 8019c8e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8019c92:	68bb      	ldr	r3, [r7, #8]
 8019c94:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8019c98:	4b1b      	ldr	r3, [pc, #108]	; (8019d08 <RadioSetRxGenericConfig+0x37c>)
 8019c9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8019c9e:	f7ff f996 	bl	8018fce <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8019ca2:	2001      	movs	r0, #1
 8019ca4:	f7fe fb40 	bl	8018328 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019ca8:	4818      	ldr	r0, [pc, #96]	; (8019d0c <RadioSetRxGenericConfig+0x380>)
 8019caa:	f000 ff5b 	bl	801ab64 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019cae:	4818      	ldr	r0, [pc, #96]	; (8019d10 <RadioSetRxGenericConfig+0x384>)
 8019cb0:	f001 f82a 	bl	801ad08 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019cb4:	4b14      	ldr	r3, [pc, #80]	; (8019d08 <RadioSetRxGenericConfig+0x37c>)
 8019cb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019cba:	2b01      	cmp	r3, #1
 8019cbc:	d10d      	bne.n	8019cda <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019cbe:	f240 7036 	movw	r0, #1846	; 0x736
 8019cc2:	f001 f97d 	bl	801afc0 <SUBGRF_ReadRegister>
 8019cc6:	4603      	mov	r3, r0
 8019cc8:	f023 0304 	bic.w	r3, r3, #4
 8019ccc:	b2db      	uxtb	r3, r3
 8019cce:	4619      	mov	r1, r3
 8019cd0:	f240 7036 	movw	r0, #1846	; 0x736
 8019cd4:	f001 f960 	bl	801af98 <SUBGRF_WriteRegister>
 8019cd8:	e00c      	b.n	8019cf4 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019cda:	f240 7036 	movw	r0, #1846	; 0x736
 8019cde:	f001 f96f 	bl	801afc0 <SUBGRF_ReadRegister>
 8019ce2:	4603      	mov	r3, r0
 8019ce4:	f043 0304 	orr.w	r3, r3, #4
 8019ce8:	b2db      	uxtb	r3, r3
 8019cea:	4619      	mov	r1, r3
 8019cec:	f240 7036 	movw	r0, #1846	; 0x736
 8019cf0:	f001 f952 	bl	801af98 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8019cf4:	4b04      	ldr	r3, [pc, #16]	; (8019d08 <RadioSetRxGenericConfig+0x37c>)
 8019cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019cfa:	609a      	str	r2, [r3, #8]
        break;
 8019cfc:	bf00      	nop
    }
    return status;
 8019cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019d00:	4618      	mov	r0, r3
 8019d02:	3730      	adds	r7, #48	; 0x30
 8019d04:	46bd      	mov	sp, r7
 8019d06:	bd80      	pop	{r7, pc}
 8019d08:	20001a9c 	.word	0x20001a9c
 8019d0c:	20001ad4 	.word	0x20001ad4
 8019d10:	20001aaa 	.word	0x20001aaa

08019d14 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8019d14:	b580      	push	{r7, lr}
 8019d16:	b08e      	sub	sp, #56	; 0x38
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	60b9      	str	r1, [r7, #8]
 8019d1c:	607b      	str	r3, [r7, #4]
 8019d1e:	4603      	mov	r3, r0
 8019d20:	73fb      	strb	r3, [r7, #15]
 8019d22:	4613      	mov	r3, r2
 8019d24:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8019d26:	2300      	movs	r3, #0
 8019d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019d2e:	f001 fc0a 	bl	801b546 <RFW_DeInit>
    switch( modem )
 8019d32:	7bfb      	ldrb	r3, [r7, #15]
 8019d34:	2b03      	cmp	r3, #3
 8019d36:	f200 8204 	bhi.w	801a142 <RadioSetTxGenericConfig+0x42e>
 8019d3a:	a201      	add	r2, pc, #4	; (adr r2, 8019d40 <RadioSetTxGenericConfig+0x2c>)
 8019d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d40:	08019ec5 	.word	0x08019ec5
 8019d44:	0801a00d 	.word	0x0801a00d
 8019d48:	0801a105 	.word	0x0801a105
 8019d4c:	08019d51 	.word	0x08019d51
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8019d50:	68bb      	ldr	r3, [r7, #8]
 8019d52:	7c9b      	ldrb	r3, [r3, #18]
 8019d54:	2b08      	cmp	r3, #8
 8019d56:	d902      	bls.n	8019d5e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8019d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019d5c:	e206      	b.n	801a16c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8019d5e:	68bb      	ldr	r3, [r7, #8]
 8019d60:	6899      	ldr	r1, [r3, #8]
 8019d62:	68bb      	ldr	r3, [r7, #8]
 8019d64:	7c9b      	ldrb	r3, [r3, #18]
 8019d66:	b29a      	uxth	r2, r3
 8019d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	f001 fcdd 	bl	801b72c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8019d72:	68bb      	ldr	r3, [r7, #8]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d102      	bne.n	8019d80 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8019d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019d7e:	e1f5      	b.n	801a16c <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 8019d80:	68bb      	ldr	r3, [r7, #8]
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	f242 7210 	movw	r2, #10000	; 0x2710
 8019d88:	4293      	cmp	r3, r2
 8019d8a:	d813      	bhi.n	8019db4 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8019d8c:	2302      	movs	r3, #2
 8019d8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8019d92:	4b99      	ldr	r3, [pc, #612]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019d94:	2203      	movs	r2, #3
 8019d96:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8019d98:	4b97      	ldr	r3, [pc, #604]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019d9a:	2203      	movs	r2, #3
 8019d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019da0:	68bb      	ldr	r3, [r7, #8]
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	4a94      	ldr	r2, [pc, #592]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019da6:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019da8:	68bb      	ldr	r3, [r7, #8]
 8019daa:	7cda      	ldrb	r2, [r3, #19]
 8019dac:	4b92      	ldr	r3, [pc, #584]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019db2:	e017      	b.n	8019de4 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8019db4:	2300      	movs	r3, #0
 8019db6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019dba:	4b8f      	ldr	r3, [pc, #572]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019dbc:	2200      	movs	r2, #0
 8019dbe:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019dc0:	4b8d      	ldr	r3, [pc, #564]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019dc8:	68bb      	ldr	r3, [r7, #8]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	4a8a      	ldr	r2, [pc, #552]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019dce:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019dd0:	68bb      	ldr	r3, [r7, #8]
 8019dd2:	7cda      	ldrb	r2, [r3, #19]
 8019dd4:	4b88      	ldr	r3, [pc, #544]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8019dda:	68bb      	ldr	r3, [r7, #8]
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	089b      	lsrs	r3, r3, #2
 8019de0:	4a85      	ldr	r2, [pc, #532]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019de2:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8019de4:	68bb      	ldr	r3, [r7, #8]
 8019de6:	685b      	ldr	r3, [r3, #4]
 8019de8:	b29b      	uxth	r3, r3
 8019dea:	00db      	lsls	r3, r3, #3
 8019dec:	b29a      	uxth	r2, r3
 8019dee:	4b82      	ldr	r3, [pc, #520]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019df0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8019df2:	4b81      	ldr	r3, [pc, #516]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019df4:	2204      	movs	r2, #4
 8019df6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8019df8:	68bb      	ldr	r3, [r7, #8]
 8019dfa:	7c9b      	ldrb	r3, [r3, #18]
 8019dfc:	00db      	lsls	r3, r3, #3
 8019dfe:	b2da      	uxtb	r2, r3
 8019e00:	4b7d      	ldr	r3, [pc, #500]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019e02:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019e04:	4b7c      	ldr	r3, [pc, #496]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019e06:	2200      	movs	r2, #0
 8019e08:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019e0a:	68bb      	ldr	r3, [r7, #8]
 8019e0c:	7d9b      	ldrb	r3, [r3, #22]
 8019e0e:	2b02      	cmp	r3, #2
 8019e10:	d003      	beq.n	8019e1a <RadioSetTxGenericConfig+0x106>
 8019e12:	68bb      	ldr	r3, [r7, #8]
 8019e14:	7d1b      	ldrb	r3, [r3, #20]
 8019e16:	2b02      	cmp	r3, #2
 8019e18:	d12b      	bne.n	8019e72 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019e1a:	68bb      	ldr	r3, [r7, #8]
 8019e1c:	7d5b      	ldrb	r3, [r3, #21]
 8019e1e:	2bf1      	cmp	r3, #241	; 0xf1
 8019e20:	d00a      	beq.n	8019e38 <RadioSetTxGenericConfig+0x124>
 8019e22:	68bb      	ldr	r3, [r7, #8]
 8019e24:	7d5b      	ldrb	r3, [r3, #21]
 8019e26:	2bf2      	cmp	r3, #242	; 0xf2
 8019e28:	d006      	beq.n	8019e38 <RadioSetTxGenericConfig+0x124>
 8019e2a:	68bb      	ldr	r3, [r7, #8]
 8019e2c:	7d5b      	ldrb	r3, [r3, #21]
 8019e2e:	2b01      	cmp	r3, #1
 8019e30:	d002      	beq.n	8019e38 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8019e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e36:	e199      	b.n	801a16c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8019e38:	68bb      	ldr	r3, [r7, #8]
 8019e3a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8019e3c:	2301      	movs	r3, #1
 8019e3e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019e42:	4b6e      	ldr	r3, [pc, #440]	; (8019ffc <RadioSetTxGenericConfig+0x2e8>)
 8019e44:	6819      	ldr	r1, [r3, #0]
 8019e46:	f107 0320 	add.w	r3, r7, #32
 8019e4a:	4a6d      	ldr	r2, [pc, #436]	; (801a000 <RadioSetTxGenericConfig+0x2ec>)
 8019e4c:	4618      	mov	r0, r3
 8019e4e:	f001 fb6d 	bl	801b52c <RFW_Init>
 8019e52:	4603      	mov	r3, r0
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d002      	beq.n	8019e5e <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 8019e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e5c:	e186      	b.n	801a16c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019e5e:	4b66      	ldr	r3, [pc, #408]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019e60:	2200      	movs	r2, #0
 8019e62:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8019e64:	4b64      	ldr	r3, [pc, #400]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019e66:	2201      	movs	r2, #1
 8019e68:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019e6a:	4b63      	ldr	r3, [pc, #396]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019e6c:	2200      	movs	r2, #0
 8019e6e:	755a      	strb	r2, [r3, #21]
        {
 8019e70:	e00b      	b.n	8019e8a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8019e72:	68bb      	ldr	r3, [r7, #8]
 8019e74:	7d5a      	ldrb	r2, [r3, #21]
 8019e76:	4b60      	ldr	r3, [pc, #384]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019e78:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8019e7a:	68bb      	ldr	r3, [r7, #8]
 8019e7c:	7d9a      	ldrb	r2, [r3, #22]
 8019e7e:	4b5e      	ldr	r3, [pc, #376]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019e80:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8019e82:	68bb      	ldr	r3, [r7, #8]
 8019e84:	7d1a      	ldrb	r2, [r3, #20]
 8019e86:	4b5c      	ldr	r3, [pc, #368]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019e88:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8019e8a:	f7ff f8a0 	bl	8018fce <RadioStandby>
        RadioSetModem( radio_modem );
 8019e8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019e92:	4618      	mov	r0, r3
 8019e94:	f7fe fa48 	bl	8018328 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019e98:	485a      	ldr	r0, [pc, #360]	; (801a004 <RadioSetTxGenericConfig+0x2f0>)
 8019e9a:	f000 fe63 	bl	801ab64 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019e9e:	485a      	ldr	r0, [pc, #360]	; (801a008 <RadioSetTxGenericConfig+0x2f4>)
 8019ea0:	f000 ff32 	bl	801ad08 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	f000 f9fa 	bl	801a2a2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8019eae:	68bb      	ldr	r3, [r7, #8]
 8019eb0:	8a1b      	ldrh	r3, [r3, #16]
 8019eb2:	4618      	mov	r0, r3
 8019eb4:	f000 fa44 	bl	801a340 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8019eb8:	68bb      	ldr	r3, [r7, #8]
 8019eba:	899b      	ldrh	r3, [r3, #12]
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f000 fa1f 	bl	801a300 <SUBGRF_SetCrcPolynomial>
        break;
 8019ec2:	e13f      	b.n	801a144 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8019ec4:	68bb      	ldr	r3, [r7, #8]
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d102      	bne.n	8019ed2 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8019ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019ed0:	e14c      	b.n	801a16c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8019ed2:	68bb      	ldr	r3, [r7, #8]
 8019ed4:	7c9b      	ldrb	r3, [r3, #18]
 8019ed6:	2b08      	cmp	r3, #8
 8019ed8:	d902      	bls.n	8019ee0 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8019eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019ede:	e145      	b.n	801a16c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8019ee0:	68bb      	ldr	r3, [r7, #8]
 8019ee2:	6899      	ldr	r1, [r3, #8]
 8019ee4:	68bb      	ldr	r3, [r7, #8]
 8019ee6:	7c9b      	ldrb	r3, [r3, #18]
 8019ee8:	b29a      	uxth	r2, r3
 8019eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019eee:	4618      	mov	r0, r3
 8019ef0:	f001 fc1c 	bl	801b72c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019ef4:	4b40      	ldr	r3, [pc, #256]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019ef6:	2200      	movs	r2, #0
 8019ef8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019efc:	68bb      	ldr	r3, [r7, #8]
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	4a3d      	ldr	r2, [pc, #244]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019f02:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8019f04:	68bb      	ldr	r3, [r7, #8]
 8019f06:	7cda      	ldrb	r2, [r3, #19]
 8019f08:	4b3b      	ldr	r3, [pc, #236]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8019f0e:	68bb      	ldr	r3, [r7, #8]
 8019f10:	699b      	ldr	r3, [r3, #24]
 8019f12:	4a39      	ldr	r2, [pc, #228]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019f14:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019f16:	4b38      	ldr	r3, [pc, #224]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019f18:	2200      	movs	r2, #0
 8019f1a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8019f1c:	68bb      	ldr	r3, [r7, #8]
 8019f1e:	685b      	ldr	r3, [r3, #4]
 8019f20:	b29b      	uxth	r3, r3
 8019f22:	00db      	lsls	r3, r3, #3
 8019f24:	b29a      	uxth	r2, r3
 8019f26:	4b34      	ldr	r3, [pc, #208]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019f28:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8019f2a:	4b33      	ldr	r3, [pc, #204]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019f2c:	2204      	movs	r2, #4
 8019f2e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019f30:	68bb      	ldr	r3, [r7, #8]
 8019f32:	7c9b      	ldrb	r3, [r3, #18]
 8019f34:	00db      	lsls	r3, r3, #3
 8019f36:	b2da      	uxtb	r2, r3
 8019f38:	4b2f      	ldr	r3, [pc, #188]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019f3a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019f3c:	4b2e      	ldr	r3, [pc, #184]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019f3e:	2200      	movs	r2, #0
 8019f40:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019f42:	68bb      	ldr	r3, [r7, #8]
 8019f44:	7d9b      	ldrb	r3, [r3, #22]
 8019f46:	2b02      	cmp	r3, #2
 8019f48:	d003      	beq.n	8019f52 <RadioSetTxGenericConfig+0x23e>
 8019f4a:	68bb      	ldr	r3, [r7, #8]
 8019f4c:	7d1b      	ldrb	r3, [r3, #20]
 8019f4e:	2b02      	cmp	r3, #2
 8019f50:	d12a      	bne.n	8019fa8 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019f52:	68bb      	ldr	r3, [r7, #8]
 8019f54:	7d5b      	ldrb	r3, [r3, #21]
 8019f56:	2bf1      	cmp	r3, #241	; 0xf1
 8019f58:	d00a      	beq.n	8019f70 <RadioSetTxGenericConfig+0x25c>
 8019f5a:	68bb      	ldr	r3, [r7, #8]
 8019f5c:	7d5b      	ldrb	r3, [r3, #21]
 8019f5e:	2bf2      	cmp	r3, #242	; 0xf2
 8019f60:	d006      	beq.n	8019f70 <RadioSetTxGenericConfig+0x25c>
 8019f62:	68bb      	ldr	r3, [r7, #8]
 8019f64:	7d5b      	ldrb	r3, [r3, #21]
 8019f66:	2b01      	cmp	r3, #1
 8019f68:	d002      	beq.n	8019f70 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8019f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019f6e:	e0fd      	b.n	801a16c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8019f70:	2301      	movs	r3, #1
 8019f72:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8019f74:	68bb      	ldr	r3, [r7, #8]
 8019f76:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019f78:	4b20      	ldr	r3, [pc, #128]	; (8019ffc <RadioSetTxGenericConfig+0x2e8>)
 8019f7a:	6819      	ldr	r1, [r3, #0]
 8019f7c:	f107 0314 	add.w	r3, r7, #20
 8019f80:	4a1f      	ldr	r2, [pc, #124]	; (801a000 <RadioSetTxGenericConfig+0x2ec>)
 8019f82:	4618      	mov	r0, r3
 8019f84:	f001 fad2 	bl	801b52c <RFW_Init>
 8019f88:	4603      	mov	r3, r0
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d002      	beq.n	8019f94 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 8019f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019f92:	e0eb      	b.n	801a16c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019f94:	4b18      	ldr	r3, [pc, #96]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019f96:	2200      	movs	r2, #0
 8019f98:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8019f9a:	4b17      	ldr	r3, [pc, #92]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019f9c:	2201      	movs	r2, #1
 8019f9e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019fa0:	4b15      	ldr	r3, [pc, #84]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	755a      	strb	r2, [r3, #21]
        {
 8019fa6:	e00b      	b.n	8019fc0 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019fa8:	68bb      	ldr	r3, [r7, #8]
 8019faa:	7d5a      	ldrb	r2, [r3, #21]
 8019fac:	4b12      	ldr	r3, [pc, #72]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019fae:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019fb0:	68bb      	ldr	r3, [r7, #8]
 8019fb2:	7d9a      	ldrb	r2, [r3, #22]
 8019fb4:	4b10      	ldr	r3, [pc, #64]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019fb6:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8019fb8:	68bb      	ldr	r3, [r7, #8]
 8019fba:	7d1a      	ldrb	r2, [r3, #20]
 8019fbc:	4b0e      	ldr	r3, [pc, #56]	; (8019ff8 <RadioSetTxGenericConfig+0x2e4>)
 8019fbe:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8019fc0:	f7ff f805 	bl	8018fce <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019fc4:	2000      	movs	r0, #0
 8019fc6:	f7fe f9af 	bl	8018328 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019fca:	480e      	ldr	r0, [pc, #56]	; (801a004 <RadioSetTxGenericConfig+0x2f0>)
 8019fcc:	f000 fdca 	bl	801ab64 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019fd0:	480d      	ldr	r0, [pc, #52]	; (801a008 <RadioSetTxGenericConfig+0x2f4>)
 8019fd2:	f000 fe99 	bl	801ad08 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019fda:	4618      	mov	r0, r3
 8019fdc:	f000 f961 	bl	801a2a2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019fe0:	68bb      	ldr	r3, [r7, #8]
 8019fe2:	8a1b      	ldrh	r3, [r3, #16]
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	f000 f9ab 	bl	801a340 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8019fea:	68bb      	ldr	r3, [r7, #8]
 8019fec:	899b      	ldrh	r3, [r3, #12]
 8019fee:	4618      	mov	r0, r3
 8019ff0:	f000 f986 	bl	801a300 <SUBGRF_SetCrcPolynomial>
        break;
 8019ff4:	e0a6      	b.n	801a144 <RadioSetTxGenericConfig+0x430>
 8019ff6:	bf00      	nop
 8019ff8:	20001a9c 	.word	0x20001a9c
 8019ffc:	20001a98 	.word	0x20001a98
 801a000:	20001af8 	.word	0x20001af8
 801a004:	20001ad4 	.word	0x20001ad4
 801a008:	20001aaa 	.word	0x20001aaa
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a00c:	4b59      	ldr	r3, [pc, #356]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a00e:	2201      	movs	r2, #1
 801a010:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a014:	68bb      	ldr	r3, [r7, #8]
 801a016:	781a      	ldrb	r2, [r3, #0]
 801a018:	4b56      	ldr	r3, [pc, #344]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a01a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a01e:	68bb      	ldr	r3, [r7, #8]
 801a020:	785a      	ldrb	r2, [r3, #1]
 801a022:	4b54      	ldr	r3, [pc, #336]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	789a      	ldrb	r2, [r3, #2]
 801a02c:	4b51      	ldr	r3, [pc, #324]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a02e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a032:	68bb      	ldr	r3, [r7, #8]
 801a034:	78db      	ldrb	r3, [r3, #3]
 801a036:	2b02      	cmp	r3, #2
 801a038:	d010      	beq.n	801a05c <RadioSetTxGenericConfig+0x348>
 801a03a:	2b02      	cmp	r3, #2
 801a03c:	dc20      	bgt.n	801a080 <RadioSetTxGenericConfig+0x36c>
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d002      	beq.n	801a048 <RadioSetTxGenericConfig+0x334>
 801a042:	2b01      	cmp	r3, #1
 801a044:	d005      	beq.n	801a052 <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801a046:	e01b      	b.n	801a080 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a048:	4b4a      	ldr	r3, [pc, #296]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a04a:	2200      	movs	r2, #0
 801a04c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a050:	e017      	b.n	801a082 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a052:	4b48      	ldr	r3, [pc, #288]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a054:	2201      	movs	r2, #1
 801a056:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a05a:	e012      	b.n	801a082 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a05c:	68bb      	ldr	r3, [r7, #8]
 801a05e:	781b      	ldrb	r3, [r3, #0]
 801a060:	2b0b      	cmp	r3, #11
 801a062:	d003      	beq.n	801a06c <RadioSetTxGenericConfig+0x358>
 801a064:	68bb      	ldr	r3, [r7, #8]
 801a066:	781b      	ldrb	r3, [r3, #0]
 801a068:	2b0c      	cmp	r3, #12
 801a06a:	d104      	bne.n	801a076 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a06c:	4b41      	ldr	r3, [pc, #260]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a06e:	2201      	movs	r2, #1
 801a070:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a074:	e005      	b.n	801a082 <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a076:	4b3f      	ldr	r3, [pc, #252]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a078:	2200      	movs	r2, #0
 801a07a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a07e:	e000      	b.n	801a082 <RadioSetTxGenericConfig+0x36e>
            break;
 801a080:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a082:	4b3c      	ldr	r3, [pc, #240]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a084:	2201      	movs	r2, #1
 801a086:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a088:	68bb      	ldr	r3, [r7, #8]
 801a08a:	889a      	ldrh	r2, [r3, #4]
 801a08c:	4b39      	ldr	r3, [pc, #228]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a08e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a090:	68bb      	ldr	r3, [r7, #8]
 801a092:	799a      	ldrb	r2, [r3, #6]
 801a094:	4b37      	ldr	r3, [pc, #220]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a096:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a098:	68bb      	ldr	r3, [r7, #8]
 801a09a:	79da      	ldrb	r2, [r3, #7]
 801a09c:	4b35      	ldr	r3, [pc, #212]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a09e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a0a2:	68bb      	ldr	r3, [r7, #8]
 801a0a4:	7a1a      	ldrb	r2, [r3, #8]
 801a0a6:	4b33      	ldr	r3, [pc, #204]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a0a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801a0ac:	f7fe ff8f 	bl	8018fce <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a0b0:	2001      	movs	r0, #1
 801a0b2:	f7fe f939 	bl	8018328 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a0b6:	4830      	ldr	r0, [pc, #192]	; (801a178 <RadioSetTxGenericConfig+0x464>)
 801a0b8:	f000 fd54 	bl	801ab64 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a0bc:	482f      	ldr	r0, [pc, #188]	; (801a17c <RadioSetTxGenericConfig+0x468>)
 801a0be:	f000 fe23 	bl	801ad08 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801a0c2:	4b2c      	ldr	r3, [pc, #176]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a0c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a0c8:	2b06      	cmp	r3, #6
 801a0ca:	d10d      	bne.n	801a0e8 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a0cc:	f640 0089 	movw	r0, #2185	; 0x889
 801a0d0:	f000 ff76 	bl	801afc0 <SUBGRF_ReadRegister>
 801a0d4:	4603      	mov	r3, r0
 801a0d6:	f023 0304 	bic.w	r3, r3, #4
 801a0da:	b2db      	uxtb	r3, r3
 801a0dc:	4619      	mov	r1, r3
 801a0de:	f640 0089 	movw	r0, #2185	; 0x889
 801a0e2:	f000 ff59 	bl	801af98 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801a0e6:	e02d      	b.n	801a144 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a0e8:	f640 0089 	movw	r0, #2185	; 0x889
 801a0ec:	f000 ff68 	bl	801afc0 <SUBGRF_ReadRegister>
 801a0f0:	4603      	mov	r3, r0
 801a0f2:	f043 0304 	orr.w	r3, r3, #4
 801a0f6:	b2db      	uxtb	r3, r3
 801a0f8:	4619      	mov	r1, r3
 801a0fa:	f640 0089 	movw	r0, #2185	; 0x889
 801a0fe:	f000 ff4b 	bl	801af98 <SUBGRF_WriteRegister>
        break;
 801a102:	e01f      	b.n	801a144 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801a104:	68bb      	ldr	r3, [r7, #8]
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d004      	beq.n	801a116 <RadioSetTxGenericConfig+0x402>
 801a10c:	68bb      	ldr	r3, [r7, #8]
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a114:	d902      	bls.n	801a11c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801a116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a11a:	e027      	b.n	801a16c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801a11c:	2003      	movs	r0, #3
 801a11e:	f7fe f903 	bl	8018328 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a122:	4b14      	ldr	r3, [pc, #80]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a124:	2202      	movs	r2, #2
 801a126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801a12a:	68bb      	ldr	r3, [r7, #8]
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	4a11      	ldr	r2, [pc, #68]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a130:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a132:	4b10      	ldr	r3, [pc, #64]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a134:	2216      	movs	r2, #22
 801a136:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a13a:	480f      	ldr	r0, [pc, #60]	; (801a178 <RadioSetTxGenericConfig+0x464>)
 801a13c:	f000 fd12 	bl	801ab64 <SUBGRF_SetModulationParams>
        break;
 801a140:	e000      	b.n	801a144 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801a142:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a144:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a148:	4618      	mov	r0, r3
 801a14a:	f001 f841 	bl	801b1d0 <SUBGRF_SetRfTxPower>
 801a14e:	4603      	mov	r3, r0
 801a150:	461a      	mov	r2, r3
 801a152:	4b08      	ldr	r3, [pc, #32]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a154:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a158:	4b06      	ldr	r3, [pc, #24]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a15a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a15e:	4618      	mov	r0, r3
 801a160:	f001 fa05 	bl	801b56e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a164:	4a03      	ldr	r2, [pc, #12]	; (801a174 <RadioSetTxGenericConfig+0x460>)
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	6053      	str	r3, [r2, #4]
    return 0;
 801a16a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a16c:	4618      	mov	r0, r3
 801a16e:	3738      	adds	r7, #56	; 0x38
 801a170:	46bd      	mov	sp, r7
 801a172:	bd80      	pop	{r7, pc}
 801a174:	20001a9c 	.word	0x20001a9c
 801a178:	20001ad4 	.word	0x20001ad4
 801a17c:	20001aaa 	.word	0x20001aaa

0801a180 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801a180:	b580      	push	{r7, lr}
 801a182:	b084      	sub	sp, #16
 801a184:	af00      	add	r7, sp, #0
 801a186:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d002      	beq.n	801a194 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801a18e:	4a1a      	ldr	r2, [pc, #104]	; (801a1f8 <SUBGRF_Init+0x78>)
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801a194:	f7e7 fbee 	bl	8001974 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a198:	2002      	movs	r0, #2
 801a19a:	f001 f8e5 	bl	801b368 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801a19e:	4b17      	ldr	r3, [pc, #92]	; (801a1fc <SUBGRF_Init+0x7c>)
 801a1a0:	2200      	movs	r2, #0
 801a1a2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801a1a4:	2000      	movs	r0, #0
 801a1a6:	f000 f977 	bl	801a498 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801a1aa:	f7f0 fa2f 	bl	800a60c <RBI_IsTCXO>
 801a1ae:	4603      	mov	r3, r0
 801a1b0:	2b01      	cmp	r3, #1
 801a1b2:	d10e      	bne.n	801a1d2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801a1b4:	2140      	movs	r1, #64	; 0x40
 801a1b6:	2001      	movs	r0, #1
 801a1b8:	f000 fb78 	bl	801a8ac <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801a1bc:	2100      	movs	r1, #0
 801a1be:	f640 1011 	movw	r0, #2321	; 0x911
 801a1c2:	f000 fee9 	bl	801af98 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801a1c6:	237f      	movs	r3, #127	; 0x7f
 801a1c8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801a1ca:	7b38      	ldrb	r0, [r7, #12]
 801a1cc:	f000 fa85 	bl	801a6da <SUBGRF_Calibrate>
 801a1d0:	e009      	b.n	801a1e6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a1d2:	2120      	movs	r1, #32
 801a1d4:	f640 1011 	movw	r0, #2321	; 0x911
 801a1d8:	f000 fede 	bl	801af98 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a1dc:	2120      	movs	r1, #32
 801a1de:	f640 1012 	movw	r0, #2322	; 0x912
 801a1e2:	f000 fed9 	bl	801af98 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801a1e6:	f7f0 f9f5 	bl	800a5d4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801a1ea:	4b05      	ldr	r3, [pc, #20]	; (801a200 <SUBGRF_Init+0x80>)
 801a1ec:	2201      	movs	r2, #1
 801a1ee:	701a      	strb	r2, [r3, #0]
}
 801a1f0:	bf00      	nop
 801a1f2:	3710      	adds	r7, #16
 801a1f4:	46bd      	mov	sp, r7
 801a1f6:	bd80      	pop	{r7, pc}
 801a1f8:	20001b34 	.word	0x20001b34
 801a1fc:	20001b30 	.word	0x20001b30
 801a200:	20001b28 	.word	0x20001b28

0801a204 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801a204:	b480      	push	{r7}
 801a206:	af00      	add	r7, sp, #0
    return OperatingMode;
 801a208:	4b02      	ldr	r3, [pc, #8]	; (801a214 <SUBGRF_GetOperatingMode+0x10>)
 801a20a:	781b      	ldrb	r3, [r3, #0]
}
 801a20c:	4618      	mov	r0, r3
 801a20e:	46bd      	mov	sp, r7
 801a210:	bc80      	pop	{r7}
 801a212:	4770      	bx	lr
 801a214:	20001b28 	.word	0x20001b28

0801a218 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801a218:	b580      	push	{r7, lr}
 801a21a:	b082      	sub	sp, #8
 801a21c:	af00      	add	r7, sp, #0
 801a21e:	6078      	str	r0, [r7, #4]
 801a220:	460b      	mov	r3, r1
 801a222:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801a224:	78fb      	ldrb	r3, [r7, #3]
 801a226:	461a      	mov	r2, r3
 801a228:	6879      	ldr	r1, [r7, #4]
 801a22a:	2000      	movs	r0, #0
 801a22c:	f000 ff20 	bl	801b070 <SUBGRF_WriteBuffer>
}
 801a230:	bf00      	nop
 801a232:	3708      	adds	r7, #8
 801a234:	46bd      	mov	sp, r7
 801a236:	bd80      	pop	{r7, pc}

0801a238 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801a238:	b580      	push	{r7, lr}
 801a23a:	b086      	sub	sp, #24
 801a23c:	af00      	add	r7, sp, #0
 801a23e:	60f8      	str	r0, [r7, #12]
 801a240:	60b9      	str	r1, [r7, #8]
 801a242:	4613      	mov	r3, r2
 801a244:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801a246:	2300      	movs	r3, #0
 801a248:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801a24a:	f107 0317 	add.w	r3, r7, #23
 801a24e:	4619      	mov	r1, r3
 801a250:	68b8      	ldr	r0, [r7, #8]
 801a252:	f000 fe23 	bl	801ae9c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801a256:	68bb      	ldr	r3, [r7, #8]
 801a258:	781b      	ldrb	r3, [r3, #0]
 801a25a:	79fa      	ldrb	r2, [r7, #7]
 801a25c:	429a      	cmp	r2, r3
 801a25e:	d201      	bcs.n	801a264 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801a260:	2301      	movs	r3, #1
 801a262:	e007      	b.n	801a274 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801a264:	7df8      	ldrb	r0, [r7, #23]
 801a266:	68bb      	ldr	r3, [r7, #8]
 801a268:	781b      	ldrb	r3, [r3, #0]
 801a26a:	461a      	mov	r2, r3
 801a26c:	68f9      	ldr	r1, [r7, #12]
 801a26e:	f000 ff21 	bl	801b0b4 <SUBGRF_ReadBuffer>

    return 0;
 801a272:	2300      	movs	r3, #0
}
 801a274:	4618      	mov	r0, r3
 801a276:	3718      	adds	r7, #24
 801a278:	46bd      	mov	sp, r7
 801a27a:	bd80      	pop	{r7, pc}

0801a27c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801a27c:	b580      	push	{r7, lr}
 801a27e:	b084      	sub	sp, #16
 801a280:	af00      	add	r7, sp, #0
 801a282:	60f8      	str	r0, [r7, #12]
 801a284:	460b      	mov	r3, r1
 801a286:	607a      	str	r2, [r7, #4]
 801a288:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801a28a:	7afb      	ldrb	r3, [r7, #11]
 801a28c:	4619      	mov	r1, r3
 801a28e:	68f8      	ldr	r0, [r7, #12]
 801a290:	f7ff ffc2 	bl	801a218 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801a294:	6878      	ldr	r0, [r7, #4]
 801a296:	f000 f91b 	bl	801a4d0 <SUBGRF_SetTx>
}
 801a29a:	bf00      	nop
 801a29c:	3710      	adds	r7, #16
 801a29e:	46bd      	mov	sp, r7
 801a2a0:	bd80      	pop	{r7, pc}

0801a2a2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801a2a2:	b580      	push	{r7, lr}
 801a2a4:	b082      	sub	sp, #8
 801a2a6:	af00      	add	r7, sp, #0
 801a2a8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801a2aa:	2208      	movs	r2, #8
 801a2ac:	6879      	ldr	r1, [r7, #4]
 801a2ae:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801a2b2:	f000 fe99 	bl	801afe8 <SUBGRF_WriteRegisters>
    return 0;
 801a2b6:	2300      	movs	r3, #0
}
 801a2b8:	4618      	mov	r0, r3
 801a2ba:	3708      	adds	r7, #8
 801a2bc:	46bd      	mov	sp, r7
 801a2be:	bd80      	pop	{r7, pc}

0801a2c0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801a2c0:	b580      	push	{r7, lr}
 801a2c2:	b084      	sub	sp, #16
 801a2c4:	af00      	add	r7, sp, #0
 801a2c6:	4603      	mov	r3, r0
 801a2c8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801a2ca:	88fb      	ldrh	r3, [r7, #6]
 801a2cc:	0a1b      	lsrs	r3, r3, #8
 801a2ce:	b29b      	uxth	r3, r3
 801a2d0:	b2db      	uxtb	r3, r3
 801a2d2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801a2d4:	88fb      	ldrh	r3, [r7, #6]
 801a2d6:	b2db      	uxtb	r3, r3
 801a2d8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a2da:	f000 fb6b 	bl	801a9b4 <SUBGRF_GetPacketType>
 801a2de:	4603      	mov	r3, r0
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d108      	bne.n	801a2f6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801a2e4:	f107 030c 	add.w	r3, r7, #12
 801a2e8:	2202      	movs	r2, #2
 801a2ea:	4619      	mov	r1, r3
 801a2ec:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801a2f0:	f000 fe7a 	bl	801afe8 <SUBGRF_WriteRegisters>
            break;
 801a2f4:	e000      	b.n	801a2f8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801a2f6:	bf00      	nop
    }
}
 801a2f8:	bf00      	nop
 801a2fa:	3710      	adds	r7, #16
 801a2fc:	46bd      	mov	sp, r7
 801a2fe:	bd80      	pop	{r7, pc}

0801a300 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801a300:	b580      	push	{r7, lr}
 801a302:	b084      	sub	sp, #16
 801a304:	af00      	add	r7, sp, #0
 801a306:	4603      	mov	r3, r0
 801a308:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801a30a:	88fb      	ldrh	r3, [r7, #6]
 801a30c:	0a1b      	lsrs	r3, r3, #8
 801a30e:	b29b      	uxth	r3, r3
 801a310:	b2db      	uxtb	r3, r3
 801a312:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801a314:	88fb      	ldrh	r3, [r7, #6]
 801a316:	b2db      	uxtb	r3, r3
 801a318:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a31a:	f000 fb4b 	bl	801a9b4 <SUBGRF_GetPacketType>
 801a31e:	4603      	mov	r3, r0
 801a320:	2b00      	cmp	r3, #0
 801a322:	d108      	bne.n	801a336 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801a324:	f107 030c 	add.w	r3, r7, #12
 801a328:	2202      	movs	r2, #2
 801a32a:	4619      	mov	r1, r3
 801a32c:	f240 60be 	movw	r0, #1726	; 0x6be
 801a330:	f000 fe5a 	bl	801afe8 <SUBGRF_WriteRegisters>
            break;
 801a334:	e000      	b.n	801a338 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801a336:	bf00      	nop
    }
}
 801a338:	bf00      	nop
 801a33a:	3710      	adds	r7, #16
 801a33c:	46bd      	mov	sp, r7
 801a33e:	bd80      	pop	{r7, pc}

0801a340 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801a340:	b580      	push	{r7, lr}
 801a342:	b084      	sub	sp, #16
 801a344:	af00      	add	r7, sp, #0
 801a346:	4603      	mov	r3, r0
 801a348:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801a34a:	2300      	movs	r3, #0
 801a34c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801a34e:	f000 fb31 	bl	801a9b4 <SUBGRF_GetPacketType>
 801a352:	4603      	mov	r3, r0
 801a354:	2b00      	cmp	r3, #0
 801a356:	d121      	bne.n	801a39c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801a358:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a35c:	f000 fe30 	bl	801afc0 <SUBGRF_ReadRegister>
 801a360:	4603      	mov	r3, r0
 801a362:	f023 0301 	bic.w	r3, r3, #1
 801a366:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801a368:	88fb      	ldrh	r3, [r7, #6]
 801a36a:	0a1b      	lsrs	r3, r3, #8
 801a36c:	b29b      	uxth	r3, r3
 801a36e:	b25b      	sxtb	r3, r3
 801a370:	f003 0301 	and.w	r3, r3, #1
 801a374:	b25a      	sxtb	r2, r3
 801a376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a37a:	4313      	orrs	r3, r2
 801a37c:	b25b      	sxtb	r3, r3
 801a37e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801a380:	7bfb      	ldrb	r3, [r7, #15]
 801a382:	4619      	mov	r1, r3
 801a384:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a388:	f000 fe06 	bl	801af98 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801a38c:	88fb      	ldrh	r3, [r7, #6]
 801a38e:	b2db      	uxtb	r3, r3
 801a390:	4619      	mov	r1, r3
 801a392:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801a396:	f000 fdff 	bl	801af98 <SUBGRF_WriteRegister>
            break;
 801a39a:	e000      	b.n	801a39e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801a39c:	bf00      	nop
    }
}
 801a39e:	bf00      	nop
 801a3a0:	3710      	adds	r7, #16
 801a3a2:	46bd      	mov	sp, r7
 801a3a4:	bd80      	pop	{r7, pc}

0801a3a6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801a3a6:	b580      	push	{r7, lr}
 801a3a8:	b082      	sub	sp, #8
 801a3aa:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801a3ac:	2300      	movs	r3, #0
 801a3ae:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801a3b0:	2300      	movs	r3, #0
 801a3b2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801a3b4:	2300      	movs	r3, #0
 801a3b6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801a3b8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a3bc:	f000 fe00 	bl	801afc0 <SUBGRF_ReadRegister>
 801a3c0:	4603      	mov	r3, r0
 801a3c2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801a3c4:	79fb      	ldrb	r3, [r7, #7]
 801a3c6:	f023 0301 	bic.w	r3, r3, #1
 801a3ca:	b2db      	uxtb	r3, r3
 801a3cc:	4619      	mov	r1, r3
 801a3ce:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a3d2:	f000 fde1 	bl	801af98 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801a3d6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a3da:	f000 fdf1 	bl	801afc0 <SUBGRF_ReadRegister>
 801a3de:	4603      	mov	r3, r0
 801a3e0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801a3e2:	79bb      	ldrb	r3, [r7, #6]
 801a3e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a3e8:	b2db      	uxtb	r3, r3
 801a3ea:	4619      	mov	r1, r3
 801a3ec:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a3f0:	f000 fdd2 	bl	801af98 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a3f4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a3f8:	f000 f88a 	bl	801a510 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801a3fc:	463b      	mov	r3, r7
 801a3fe:	2204      	movs	r2, #4
 801a400:	4619      	mov	r1, r3
 801a402:	f640 0019 	movw	r0, #2073	; 0x819
 801a406:	f000 fe11 	bl	801b02c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801a40a:	2000      	movs	r0, #0
 801a40c:	f000 f844 	bl	801a498 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801a410:	79fb      	ldrb	r3, [r7, #7]
 801a412:	4619      	mov	r1, r3
 801a414:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a418:	f000 fdbe 	bl	801af98 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801a41c:	79bb      	ldrb	r3, [r7, #6]
 801a41e:	4619      	mov	r1, r3
 801a420:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a424:	f000 fdb8 	bl	801af98 <SUBGRF_WriteRegister>

    return number;
 801a428:	683b      	ldr	r3, [r7, #0]
}
 801a42a:	4618      	mov	r0, r3
 801a42c:	3708      	adds	r7, #8
 801a42e:	46bd      	mov	sp, r7
 801a430:	bd80      	pop	{r7, pc}
	...

0801a434 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801a434:	b580      	push	{r7, lr}
 801a436:	b084      	sub	sp, #16
 801a438:	af00      	add	r7, sp, #0
 801a43a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801a43c:	2000      	movs	r0, #0
 801a43e:	f7f0 f8d0 	bl	800a5e2 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a442:	2002      	movs	r0, #2
 801a444:	f000 ff90 	bl	801b368 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a448:	793b      	ldrb	r3, [r7, #4]
 801a44a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a44e:	b2db      	uxtb	r3, r3
 801a450:	009b      	lsls	r3, r3, #2
 801a452:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a454:	793b      	ldrb	r3, [r7, #4]
 801a456:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a45a:	b2db      	uxtb	r3, r3
 801a45c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a45e:	b25b      	sxtb	r3, r3
 801a460:	4313      	orrs	r3, r2
 801a462:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801a464:	793b      	ldrb	r3, [r7, #4]
 801a466:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a46a:	b2db      	uxtb	r3, r3
 801a46c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a46e:	4313      	orrs	r3, r2
 801a470:	b25b      	sxtb	r3, r3
 801a472:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a474:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801a476:	f107 030f 	add.w	r3, r7, #15
 801a47a:	2201      	movs	r2, #1
 801a47c:	4619      	mov	r1, r3
 801a47e:	2084      	movs	r0, #132	; 0x84
 801a480:	f000 fe3a 	bl	801b0f8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801a484:	4b03      	ldr	r3, [pc, #12]	; (801a494 <SUBGRF_SetSleep+0x60>)
 801a486:	2200      	movs	r2, #0
 801a488:	701a      	strb	r2, [r3, #0]
}
 801a48a:	bf00      	nop
 801a48c:	3710      	adds	r7, #16
 801a48e:	46bd      	mov	sp, r7
 801a490:	bd80      	pop	{r7, pc}
 801a492:	bf00      	nop
 801a494:	20001b28 	.word	0x20001b28

0801a498 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801a498:	b580      	push	{r7, lr}
 801a49a:	b082      	sub	sp, #8
 801a49c:	af00      	add	r7, sp, #0
 801a49e:	4603      	mov	r3, r0
 801a4a0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801a4a2:	1dfb      	adds	r3, r7, #7
 801a4a4:	2201      	movs	r2, #1
 801a4a6:	4619      	mov	r1, r3
 801a4a8:	2080      	movs	r0, #128	; 0x80
 801a4aa:	f000 fe25 	bl	801b0f8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801a4ae:	79fb      	ldrb	r3, [r7, #7]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d103      	bne.n	801a4bc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801a4b4:	4b05      	ldr	r3, [pc, #20]	; (801a4cc <SUBGRF_SetStandby+0x34>)
 801a4b6:	2201      	movs	r2, #1
 801a4b8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801a4ba:	e002      	b.n	801a4c2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801a4bc:	4b03      	ldr	r3, [pc, #12]	; (801a4cc <SUBGRF_SetStandby+0x34>)
 801a4be:	2202      	movs	r2, #2
 801a4c0:	701a      	strb	r2, [r3, #0]
}
 801a4c2:	bf00      	nop
 801a4c4:	3708      	adds	r7, #8
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	bd80      	pop	{r7, pc}
 801a4ca:	bf00      	nop
 801a4cc:	20001b28 	.word	0x20001b28

0801a4d0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801a4d0:	b580      	push	{r7, lr}
 801a4d2:	b084      	sub	sp, #16
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801a4d8:	4b0c      	ldr	r3, [pc, #48]	; (801a50c <SUBGRF_SetTx+0x3c>)
 801a4da:	2204      	movs	r2, #4
 801a4dc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	0c1b      	lsrs	r3, r3, #16
 801a4e2:	b2db      	uxtb	r3, r3
 801a4e4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	0a1b      	lsrs	r3, r3, #8
 801a4ea:	b2db      	uxtb	r3, r3
 801a4ec:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	b2db      	uxtb	r3, r3
 801a4f2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801a4f4:	f107 030c 	add.w	r3, r7, #12
 801a4f8:	2203      	movs	r2, #3
 801a4fa:	4619      	mov	r1, r3
 801a4fc:	2083      	movs	r0, #131	; 0x83
 801a4fe:	f000 fdfb 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801a502:	bf00      	nop
 801a504:	3710      	adds	r7, #16
 801a506:	46bd      	mov	sp, r7
 801a508:	bd80      	pop	{r7, pc}
 801a50a:	bf00      	nop
 801a50c:	20001b28 	.word	0x20001b28

0801a510 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801a510:	b580      	push	{r7, lr}
 801a512:	b084      	sub	sp, #16
 801a514:	af00      	add	r7, sp, #0
 801a516:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a518:	4b0c      	ldr	r3, [pc, #48]	; (801a54c <SUBGRF_SetRx+0x3c>)
 801a51a:	2205      	movs	r2, #5
 801a51c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	0c1b      	lsrs	r3, r3, #16
 801a522:	b2db      	uxtb	r3, r3
 801a524:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	0a1b      	lsrs	r3, r3, #8
 801a52a:	b2db      	uxtb	r3, r3
 801a52c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	b2db      	uxtb	r3, r3
 801a532:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a534:	f107 030c 	add.w	r3, r7, #12
 801a538:	2203      	movs	r2, #3
 801a53a:	4619      	mov	r1, r3
 801a53c:	2082      	movs	r0, #130	; 0x82
 801a53e:	f000 fddb 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801a542:	bf00      	nop
 801a544:	3710      	adds	r7, #16
 801a546:	46bd      	mov	sp, r7
 801a548:	bd80      	pop	{r7, pc}
 801a54a:	bf00      	nop
 801a54c:	20001b28 	.word	0x20001b28

0801a550 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801a550:	b580      	push	{r7, lr}
 801a552:	b084      	sub	sp, #16
 801a554:	af00      	add	r7, sp, #0
 801a556:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a558:	4b0e      	ldr	r3, [pc, #56]	; (801a594 <SUBGRF_SetRxBoosted+0x44>)
 801a55a:	2205      	movs	r2, #5
 801a55c:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801a55e:	2197      	movs	r1, #151	; 0x97
 801a560:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801a564:	f000 fd18 	bl	801af98 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	0c1b      	lsrs	r3, r3, #16
 801a56c:	b2db      	uxtb	r3, r3
 801a56e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	0a1b      	lsrs	r3, r3, #8
 801a574:	b2db      	uxtb	r3, r3
 801a576:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	b2db      	uxtb	r3, r3
 801a57c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a57e:	f107 030c 	add.w	r3, r7, #12
 801a582:	2203      	movs	r2, #3
 801a584:	4619      	mov	r1, r3
 801a586:	2082      	movs	r0, #130	; 0x82
 801a588:	f000 fdb6 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801a58c:	bf00      	nop
 801a58e:	3710      	adds	r7, #16
 801a590:	46bd      	mov	sp, r7
 801a592:	bd80      	pop	{r7, pc}
 801a594:	20001b28 	.word	0x20001b28

0801a598 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a598:	b580      	push	{r7, lr}
 801a59a:	b084      	sub	sp, #16
 801a59c:	af00      	add	r7, sp, #0
 801a59e:	6078      	str	r0, [r7, #4]
 801a5a0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	0c1b      	lsrs	r3, r3, #16
 801a5a6:	b2db      	uxtb	r3, r3
 801a5a8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	0a1b      	lsrs	r3, r3, #8
 801a5ae:	b2db      	uxtb	r3, r3
 801a5b0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	b2db      	uxtb	r3, r3
 801a5b6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801a5b8:	683b      	ldr	r3, [r7, #0]
 801a5ba:	0c1b      	lsrs	r3, r3, #16
 801a5bc:	b2db      	uxtb	r3, r3
 801a5be:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801a5c0:	683b      	ldr	r3, [r7, #0]
 801a5c2:	0a1b      	lsrs	r3, r3, #8
 801a5c4:	b2db      	uxtb	r3, r3
 801a5c6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801a5c8:	683b      	ldr	r3, [r7, #0]
 801a5ca:	b2db      	uxtb	r3, r3
 801a5cc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801a5ce:	f107 0308 	add.w	r3, r7, #8
 801a5d2:	2206      	movs	r2, #6
 801a5d4:	4619      	mov	r1, r3
 801a5d6:	2094      	movs	r0, #148	; 0x94
 801a5d8:	f000 fd8e 	bl	801b0f8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801a5dc:	4b03      	ldr	r3, [pc, #12]	; (801a5ec <SUBGRF_SetRxDutyCycle+0x54>)
 801a5de:	2206      	movs	r2, #6
 801a5e0:	701a      	strb	r2, [r3, #0]
}
 801a5e2:	bf00      	nop
 801a5e4:	3710      	adds	r7, #16
 801a5e6:	46bd      	mov	sp, r7
 801a5e8:	bd80      	pop	{r7, pc}
 801a5ea:	bf00      	nop
 801a5ec:	20001b28 	.word	0x20001b28

0801a5f0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801a5f0:	b580      	push	{r7, lr}
 801a5f2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801a5f4:	2200      	movs	r2, #0
 801a5f6:	2100      	movs	r1, #0
 801a5f8:	20c5      	movs	r0, #197	; 0xc5
 801a5fa:	f000 fd7d 	bl	801b0f8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801a5fe:	4b02      	ldr	r3, [pc, #8]	; (801a608 <SUBGRF_SetCad+0x18>)
 801a600:	2207      	movs	r2, #7
 801a602:	701a      	strb	r2, [r3, #0]
}
 801a604:	bf00      	nop
 801a606:	bd80      	pop	{r7, pc}
 801a608:	20001b28 	.word	0x20001b28

0801a60c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801a60c:	b580      	push	{r7, lr}
 801a60e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801a610:	2200      	movs	r2, #0
 801a612:	2100      	movs	r1, #0
 801a614:	20d1      	movs	r0, #209	; 0xd1
 801a616:	f000 fd6f 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801a61a:	bf00      	nop
 801a61c:	bd80      	pop	{r7, pc}

0801a61e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801a61e:	b580      	push	{r7, lr}
 801a620:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801a622:	2200      	movs	r2, #0
 801a624:	2100      	movs	r1, #0
 801a626:	20d2      	movs	r0, #210	; 0xd2
 801a628:	f000 fd66 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801a62c:	bf00      	nop
 801a62e:	bd80      	pop	{r7, pc}

0801a630 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801a630:	b580      	push	{r7, lr}
 801a632:	b082      	sub	sp, #8
 801a634:	af00      	add	r7, sp, #0
 801a636:	4603      	mov	r3, r0
 801a638:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801a63a:	1dfb      	adds	r3, r7, #7
 801a63c:	2201      	movs	r2, #1
 801a63e:	4619      	mov	r1, r3
 801a640:	209f      	movs	r0, #159	; 0x9f
 801a642:	f000 fd59 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801a646:	bf00      	nop
 801a648:	3708      	adds	r7, #8
 801a64a:	46bd      	mov	sp, r7
 801a64c:	bd80      	pop	{r7, pc}

0801a64e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801a64e:	b580      	push	{r7, lr}
 801a650:	b084      	sub	sp, #16
 801a652:	af00      	add	r7, sp, #0
 801a654:	4603      	mov	r3, r0
 801a656:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801a658:	1dfb      	adds	r3, r7, #7
 801a65a:	2201      	movs	r2, #1
 801a65c:	4619      	mov	r1, r3
 801a65e:	20a0      	movs	r0, #160	; 0xa0
 801a660:	f000 fd4a 	bl	801b0f8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801a664:	79fb      	ldrb	r3, [r7, #7]
 801a666:	2b3f      	cmp	r3, #63	; 0x3f
 801a668:	d91c      	bls.n	801a6a4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801a66a:	79fb      	ldrb	r3, [r7, #7]
 801a66c:	085b      	lsrs	r3, r3, #1
 801a66e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801a670:	2300      	movs	r3, #0
 801a672:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801a674:	2300      	movs	r3, #0
 801a676:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801a678:	e005      	b.n	801a686 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801a67a:	7bfb      	ldrb	r3, [r7, #15]
 801a67c:	089b      	lsrs	r3, r3, #2
 801a67e:	73fb      	strb	r3, [r7, #15]
            exp++;
 801a680:	7bbb      	ldrb	r3, [r7, #14]
 801a682:	3301      	adds	r3, #1
 801a684:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801a686:	7bfb      	ldrb	r3, [r7, #15]
 801a688:	2b1f      	cmp	r3, #31
 801a68a:	d8f6      	bhi.n	801a67a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801a68c:	7bfb      	ldrb	r3, [r7, #15]
 801a68e:	00db      	lsls	r3, r3, #3
 801a690:	b2da      	uxtb	r2, r3
 801a692:	7bbb      	ldrb	r3, [r7, #14]
 801a694:	4413      	add	r3, r2
 801a696:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801a698:	7b7b      	ldrb	r3, [r7, #13]
 801a69a:	4619      	mov	r1, r3
 801a69c:	f240 7006 	movw	r0, #1798	; 0x706
 801a6a0:	f000 fc7a 	bl	801af98 <SUBGRF_WriteRegister>
    }
}
 801a6a4:	bf00      	nop
 801a6a6:	3710      	adds	r7, #16
 801a6a8:	46bd      	mov	sp, r7
 801a6aa:	bd80      	pop	{r7, pc}

0801a6ac <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801a6ac:	b580      	push	{r7, lr}
 801a6ae:	b082      	sub	sp, #8
 801a6b0:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801a6b2:	f7ef ffb2 	bl	800a61a <RBI_IsDCDC>
 801a6b6:	4603      	mov	r3, r0
 801a6b8:	2b01      	cmp	r3, #1
 801a6ba:	d102      	bne.n	801a6c2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801a6bc:	2301      	movs	r3, #1
 801a6be:	71fb      	strb	r3, [r7, #7]
 801a6c0:	e001      	b.n	801a6c6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801a6c6:	1dfb      	adds	r3, r7, #7
 801a6c8:	2201      	movs	r2, #1
 801a6ca:	4619      	mov	r1, r3
 801a6cc:	2096      	movs	r0, #150	; 0x96
 801a6ce:	f000 fd13 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801a6d2:	bf00      	nop
 801a6d4:	3708      	adds	r7, #8
 801a6d6:	46bd      	mov	sp, r7
 801a6d8:	bd80      	pop	{r7, pc}

0801a6da <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801a6da:	b580      	push	{r7, lr}
 801a6dc:	b084      	sub	sp, #16
 801a6de:	af00      	add	r7, sp, #0
 801a6e0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a6e2:	793b      	ldrb	r3, [r7, #4]
 801a6e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801a6e8:	b2db      	uxtb	r3, r3
 801a6ea:	019b      	lsls	r3, r3, #6
 801a6ec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a6ee:	793b      	ldrb	r3, [r7, #4]
 801a6f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801a6f4:	b2db      	uxtb	r3, r3
 801a6f6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a6f8:	b25b      	sxtb	r3, r3
 801a6fa:	4313      	orrs	r3, r2
 801a6fc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a6fe:	793b      	ldrb	r3, [r7, #4]
 801a700:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801a704:	b2db      	uxtb	r3, r3
 801a706:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a708:	b25b      	sxtb	r3, r3
 801a70a:	4313      	orrs	r3, r2
 801a70c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a70e:	793b      	ldrb	r3, [r7, #4]
 801a710:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801a714:	b2db      	uxtb	r3, r3
 801a716:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a718:	b25b      	sxtb	r3, r3
 801a71a:	4313      	orrs	r3, r2
 801a71c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a71e:	793b      	ldrb	r3, [r7, #4]
 801a720:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a724:	b2db      	uxtb	r3, r3
 801a726:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a728:	b25b      	sxtb	r3, r3
 801a72a:	4313      	orrs	r3, r2
 801a72c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a72e:	793b      	ldrb	r3, [r7, #4]
 801a730:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a734:	b2db      	uxtb	r3, r3
 801a736:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a738:	b25b      	sxtb	r3, r3
 801a73a:	4313      	orrs	r3, r2
 801a73c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801a73e:	793b      	ldrb	r3, [r7, #4]
 801a740:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a744:	b2db      	uxtb	r3, r3
 801a746:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a748:	4313      	orrs	r3, r2
 801a74a:	b25b      	sxtb	r3, r3
 801a74c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a74e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801a750:	f107 030f 	add.w	r3, r7, #15
 801a754:	2201      	movs	r2, #1
 801a756:	4619      	mov	r1, r3
 801a758:	2089      	movs	r0, #137	; 0x89
 801a75a:	f000 fccd 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801a75e:	bf00      	nop
 801a760:	3710      	adds	r7, #16
 801a762:	46bd      	mov	sp, r7
 801a764:	bd80      	pop	{r7, pc}
	...

0801a768 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801a768:	b580      	push	{r7, lr}
 801a76a:	b084      	sub	sp, #16
 801a76c:	af00      	add	r7, sp, #0
 801a76e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	4a1b      	ldr	r2, [pc, #108]	; (801a7e0 <SUBGRF_CalibrateImage+0x78>)
 801a774:	4293      	cmp	r3, r2
 801a776:	d904      	bls.n	801a782 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801a778:	23e1      	movs	r3, #225	; 0xe1
 801a77a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801a77c:	23e9      	movs	r3, #233	; 0xe9
 801a77e:	737b      	strb	r3, [r7, #13]
 801a780:	e022      	b.n	801a7c8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	4a17      	ldr	r2, [pc, #92]	; (801a7e4 <SUBGRF_CalibrateImage+0x7c>)
 801a786:	4293      	cmp	r3, r2
 801a788:	d904      	bls.n	801a794 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801a78a:	23d7      	movs	r3, #215	; 0xd7
 801a78c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801a78e:	23db      	movs	r3, #219	; 0xdb
 801a790:	737b      	strb	r3, [r7, #13]
 801a792:	e019      	b.n	801a7c8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	4a14      	ldr	r2, [pc, #80]	; (801a7e8 <SUBGRF_CalibrateImage+0x80>)
 801a798:	4293      	cmp	r3, r2
 801a79a:	d904      	bls.n	801a7a6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801a79c:	23c1      	movs	r3, #193	; 0xc1
 801a79e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801a7a0:	23c5      	movs	r3, #197	; 0xc5
 801a7a2:	737b      	strb	r3, [r7, #13]
 801a7a4:	e010      	b.n	801a7c8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	4a10      	ldr	r2, [pc, #64]	; (801a7ec <SUBGRF_CalibrateImage+0x84>)
 801a7aa:	4293      	cmp	r3, r2
 801a7ac:	d904      	bls.n	801a7b8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801a7ae:	2375      	movs	r3, #117	; 0x75
 801a7b0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801a7b2:	2381      	movs	r3, #129	; 0x81
 801a7b4:	737b      	strb	r3, [r7, #13]
 801a7b6:	e007      	b.n	801a7c8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	4a0d      	ldr	r2, [pc, #52]	; (801a7f0 <SUBGRF_CalibrateImage+0x88>)
 801a7bc:	4293      	cmp	r3, r2
 801a7be:	d903      	bls.n	801a7c8 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801a7c0:	236b      	movs	r3, #107	; 0x6b
 801a7c2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801a7c4:	236f      	movs	r3, #111	; 0x6f
 801a7c6:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801a7c8:	f107 030c 	add.w	r3, r7, #12
 801a7cc:	2202      	movs	r2, #2
 801a7ce:	4619      	mov	r1, r3
 801a7d0:	2098      	movs	r0, #152	; 0x98
 801a7d2:	f000 fc91 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801a7d6:	bf00      	nop
 801a7d8:	3710      	adds	r7, #16
 801a7da:	46bd      	mov	sp, r7
 801a7dc:	bd80      	pop	{r7, pc}
 801a7de:	bf00      	nop
 801a7e0:	35a4e900 	.word	0x35a4e900
 801a7e4:	32a9f880 	.word	0x32a9f880
 801a7e8:	2de54480 	.word	0x2de54480
 801a7ec:	1b6b0b00 	.word	0x1b6b0b00
 801a7f0:	1954fc40 	.word	0x1954fc40

0801a7f4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801a7f4:	b590      	push	{r4, r7, lr}
 801a7f6:	b085      	sub	sp, #20
 801a7f8:	af00      	add	r7, sp, #0
 801a7fa:	4604      	mov	r4, r0
 801a7fc:	4608      	mov	r0, r1
 801a7fe:	4611      	mov	r1, r2
 801a800:	461a      	mov	r2, r3
 801a802:	4623      	mov	r3, r4
 801a804:	71fb      	strb	r3, [r7, #7]
 801a806:	4603      	mov	r3, r0
 801a808:	71bb      	strb	r3, [r7, #6]
 801a80a:	460b      	mov	r3, r1
 801a80c:	717b      	strb	r3, [r7, #5]
 801a80e:	4613      	mov	r3, r2
 801a810:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801a812:	79fb      	ldrb	r3, [r7, #7]
 801a814:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801a816:	79bb      	ldrb	r3, [r7, #6]
 801a818:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801a81a:	797b      	ldrb	r3, [r7, #5]
 801a81c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801a81e:	793b      	ldrb	r3, [r7, #4]
 801a820:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801a822:	f107 030c 	add.w	r3, r7, #12
 801a826:	2204      	movs	r2, #4
 801a828:	4619      	mov	r1, r3
 801a82a:	2095      	movs	r0, #149	; 0x95
 801a82c:	f000 fc64 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801a830:	bf00      	nop
 801a832:	3714      	adds	r7, #20
 801a834:	46bd      	mov	sp, r7
 801a836:	bd90      	pop	{r4, r7, pc}

0801a838 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801a838:	b590      	push	{r4, r7, lr}
 801a83a:	b085      	sub	sp, #20
 801a83c:	af00      	add	r7, sp, #0
 801a83e:	4604      	mov	r4, r0
 801a840:	4608      	mov	r0, r1
 801a842:	4611      	mov	r1, r2
 801a844:	461a      	mov	r2, r3
 801a846:	4623      	mov	r3, r4
 801a848:	80fb      	strh	r3, [r7, #6]
 801a84a:	4603      	mov	r3, r0
 801a84c:	80bb      	strh	r3, [r7, #4]
 801a84e:	460b      	mov	r3, r1
 801a850:	807b      	strh	r3, [r7, #2]
 801a852:	4613      	mov	r3, r2
 801a854:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801a856:	88fb      	ldrh	r3, [r7, #6]
 801a858:	0a1b      	lsrs	r3, r3, #8
 801a85a:	b29b      	uxth	r3, r3
 801a85c:	b2db      	uxtb	r3, r3
 801a85e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801a860:	88fb      	ldrh	r3, [r7, #6]
 801a862:	b2db      	uxtb	r3, r3
 801a864:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801a866:	88bb      	ldrh	r3, [r7, #4]
 801a868:	0a1b      	lsrs	r3, r3, #8
 801a86a:	b29b      	uxth	r3, r3
 801a86c:	b2db      	uxtb	r3, r3
 801a86e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801a870:	88bb      	ldrh	r3, [r7, #4]
 801a872:	b2db      	uxtb	r3, r3
 801a874:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801a876:	887b      	ldrh	r3, [r7, #2]
 801a878:	0a1b      	lsrs	r3, r3, #8
 801a87a:	b29b      	uxth	r3, r3
 801a87c:	b2db      	uxtb	r3, r3
 801a87e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801a880:	887b      	ldrh	r3, [r7, #2]
 801a882:	b2db      	uxtb	r3, r3
 801a884:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801a886:	883b      	ldrh	r3, [r7, #0]
 801a888:	0a1b      	lsrs	r3, r3, #8
 801a88a:	b29b      	uxth	r3, r3
 801a88c:	b2db      	uxtb	r3, r3
 801a88e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801a890:	883b      	ldrh	r3, [r7, #0]
 801a892:	b2db      	uxtb	r3, r3
 801a894:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801a896:	f107 0308 	add.w	r3, r7, #8
 801a89a:	2208      	movs	r2, #8
 801a89c:	4619      	mov	r1, r3
 801a89e:	2008      	movs	r0, #8
 801a8a0:	f000 fc2a 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801a8a4:	bf00      	nop
 801a8a6:	3714      	adds	r7, #20
 801a8a8:	46bd      	mov	sp, r7
 801a8aa:	bd90      	pop	{r4, r7, pc}

0801a8ac <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801a8ac:	b580      	push	{r7, lr}
 801a8ae:	b084      	sub	sp, #16
 801a8b0:	af00      	add	r7, sp, #0
 801a8b2:	4603      	mov	r3, r0
 801a8b4:	6039      	str	r1, [r7, #0]
 801a8b6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801a8b8:	79fb      	ldrb	r3, [r7, #7]
 801a8ba:	f003 0307 	and.w	r3, r3, #7
 801a8be:	b2db      	uxtb	r3, r3
 801a8c0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a8c2:	683b      	ldr	r3, [r7, #0]
 801a8c4:	0c1b      	lsrs	r3, r3, #16
 801a8c6:	b2db      	uxtb	r3, r3
 801a8c8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a8ca:	683b      	ldr	r3, [r7, #0]
 801a8cc:	0a1b      	lsrs	r3, r3, #8
 801a8ce:	b2db      	uxtb	r3, r3
 801a8d0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801a8d2:	683b      	ldr	r3, [r7, #0]
 801a8d4:	b2db      	uxtb	r3, r3
 801a8d6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801a8d8:	f107 030c 	add.w	r3, r7, #12
 801a8dc:	2204      	movs	r2, #4
 801a8de:	4619      	mov	r1, r3
 801a8e0:	2097      	movs	r0, #151	; 0x97
 801a8e2:	f000 fc09 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801a8e6:	bf00      	nop
 801a8e8:	3710      	adds	r7, #16
 801a8ea:	46bd      	mov	sp, r7
 801a8ec:	bd80      	pop	{r7, pc}
	...

0801a8f0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801a8f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a8f4:	b084      	sub	sp, #16
 801a8f6:	af00      	add	r7, sp, #0
 801a8f8:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801a8fa:	2300      	movs	r3, #0
 801a8fc:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801a8fe:	4b1d      	ldr	r3, [pc, #116]	; (801a974 <SUBGRF_SetRfFrequency+0x84>)
 801a900:	781b      	ldrb	r3, [r3, #0]
 801a902:	f083 0301 	eor.w	r3, r3, #1
 801a906:	b2db      	uxtb	r3, r3
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d005      	beq.n	801a918 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801a90c:	6878      	ldr	r0, [r7, #4]
 801a90e:	f7ff ff2b 	bl	801a768 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801a912:	4b18      	ldr	r3, [pc, #96]	; (801a974 <SUBGRF_SetRfFrequency+0x84>)
 801a914:	2201      	movs	r2, #1
 801a916:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	2200      	movs	r2, #0
 801a91c:	461c      	mov	r4, r3
 801a91e:	4615      	mov	r5, r2
 801a920:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a924:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a928:	4a13      	ldr	r2, [pc, #76]	; (801a978 <SUBGRF_SetRfFrequency+0x88>)
 801a92a:	f04f 0300 	mov.w	r3, #0
 801a92e:	4640      	mov	r0, r8
 801a930:	4649      	mov	r1, r9
 801a932:	f7e6 f939 	bl	8000ba8 <__aeabi_uldivmod>
 801a936:	4602      	mov	r2, r0
 801a938:	460b      	mov	r3, r1
 801a93a:	4613      	mov	r3, r2
 801a93c:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	0e1b      	lsrs	r3, r3, #24
 801a942:	b2db      	uxtb	r3, r3
 801a944:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	0c1b      	lsrs	r3, r3, #16
 801a94a:	b2db      	uxtb	r3, r3
 801a94c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801a94e:	68fb      	ldr	r3, [r7, #12]
 801a950:	0a1b      	lsrs	r3, r3, #8
 801a952:	b2db      	uxtb	r3, r3
 801a954:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801a956:	68fb      	ldr	r3, [r7, #12]
 801a958:	b2db      	uxtb	r3, r3
 801a95a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801a95c:	f107 0308 	add.w	r3, r7, #8
 801a960:	2204      	movs	r2, #4
 801a962:	4619      	mov	r1, r3
 801a964:	2086      	movs	r0, #134	; 0x86
 801a966:	f000 fbc7 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801a96a:	bf00      	nop
 801a96c:	3710      	adds	r7, #16
 801a96e:	46bd      	mov	sp, r7
 801a970:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a974:	20001b30 	.word	0x20001b30
 801a978:	01e84800 	.word	0x01e84800

0801a97c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801a97c:	b580      	push	{r7, lr}
 801a97e:	b082      	sub	sp, #8
 801a980:	af00      	add	r7, sp, #0
 801a982:	4603      	mov	r3, r0
 801a984:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801a986:	79fa      	ldrb	r2, [r7, #7]
 801a988:	4b09      	ldr	r3, [pc, #36]	; (801a9b0 <SUBGRF_SetPacketType+0x34>)
 801a98a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801a98c:	79fb      	ldrb	r3, [r7, #7]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d104      	bne.n	801a99c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801a992:	2100      	movs	r1, #0
 801a994:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a998:	f000 fafe 	bl	801af98 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801a99c:	1dfb      	adds	r3, r7, #7
 801a99e:	2201      	movs	r2, #1
 801a9a0:	4619      	mov	r1, r3
 801a9a2:	208a      	movs	r0, #138	; 0x8a
 801a9a4:	f000 fba8 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801a9a8:	bf00      	nop
 801a9aa:	3708      	adds	r7, #8
 801a9ac:	46bd      	mov	sp, r7
 801a9ae:	bd80      	pop	{r7, pc}
 801a9b0:	20001b29 	.word	0x20001b29

0801a9b4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801a9b4:	b480      	push	{r7}
 801a9b6:	af00      	add	r7, sp, #0
    return PacketType;
 801a9b8:	4b02      	ldr	r3, [pc, #8]	; (801a9c4 <SUBGRF_GetPacketType+0x10>)
 801a9ba:	781b      	ldrb	r3, [r3, #0]
}
 801a9bc:	4618      	mov	r0, r3
 801a9be:	46bd      	mov	sp, r7
 801a9c0:	bc80      	pop	{r7}
 801a9c2:	4770      	bx	lr
 801a9c4:	20001b29 	.word	0x20001b29

0801a9c8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801a9c8:	b580      	push	{r7, lr}
 801a9ca:	b084      	sub	sp, #16
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	4603      	mov	r3, r0
 801a9d0:	71fb      	strb	r3, [r7, #7]
 801a9d2:	460b      	mov	r3, r1
 801a9d4:	71bb      	strb	r3, [r7, #6]
 801a9d6:	4613      	mov	r3, r2
 801a9d8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801a9da:	79fb      	ldrb	r3, [r7, #7]
 801a9dc:	2b01      	cmp	r3, #1
 801a9de:	d149      	bne.n	801aa74 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801a9e0:	2000      	movs	r0, #0
 801a9e2:	f7ef fe21 	bl	800a628 <RBI_GetRFOMaxPowerConfig>
 801a9e6:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801a9e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a9ec:	68fa      	ldr	r2, [r7, #12]
 801a9ee:	429a      	cmp	r2, r3
 801a9f0:	da01      	bge.n	801a9f6 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801a9f6:	68fb      	ldr	r3, [r7, #12]
 801a9f8:	2b0e      	cmp	r3, #14
 801a9fa:	d10e      	bne.n	801aa1a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801a9fc:	2301      	movs	r3, #1
 801a9fe:	2201      	movs	r2, #1
 801aa00:	2100      	movs	r1, #0
 801aa02:	2004      	movs	r0, #4
 801aa04:	f7ff fef6 	bl	801a7f4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801aa08:	79ba      	ldrb	r2, [r7, #6]
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	b2db      	uxtb	r3, r3
 801aa0e:	1ad3      	subs	r3, r2, r3
 801aa10:	b2db      	uxtb	r3, r3
 801aa12:	330e      	adds	r3, #14
 801aa14:	b2db      	uxtb	r3, r3
 801aa16:	71bb      	strb	r3, [r7, #6]
 801aa18:	e01f      	b.n	801aa5a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801aa1a:	68fb      	ldr	r3, [r7, #12]
 801aa1c:	2b0a      	cmp	r3, #10
 801aa1e:	d10e      	bne.n	801aa3e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801aa20:	2301      	movs	r3, #1
 801aa22:	2201      	movs	r2, #1
 801aa24:	2100      	movs	r1, #0
 801aa26:	2001      	movs	r0, #1
 801aa28:	f7ff fee4 	bl	801a7f4 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801aa2c:	79ba      	ldrb	r2, [r7, #6]
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	b2db      	uxtb	r3, r3
 801aa32:	1ad3      	subs	r3, r2, r3
 801aa34:	b2db      	uxtb	r3, r3
 801aa36:	330d      	adds	r3, #13
 801aa38:	b2db      	uxtb	r3, r3
 801aa3a:	71bb      	strb	r3, [r7, #6]
 801aa3c:	e00d      	b.n	801aa5a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801aa3e:	2301      	movs	r3, #1
 801aa40:	2201      	movs	r2, #1
 801aa42:	2100      	movs	r1, #0
 801aa44:	2006      	movs	r0, #6
 801aa46:	f7ff fed5 	bl	801a7f4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801aa4a:	79ba      	ldrb	r2, [r7, #6]
 801aa4c:	68fb      	ldr	r3, [r7, #12]
 801aa4e:	b2db      	uxtb	r3, r3
 801aa50:	1ad3      	subs	r3, r2, r3
 801aa52:	b2db      	uxtb	r3, r3
 801aa54:	330e      	adds	r3, #14
 801aa56:	b2db      	uxtb	r3, r3
 801aa58:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801aa5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801aa5e:	f113 0f11 	cmn.w	r3, #17
 801aa62:	da01      	bge.n	801aa68 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801aa64:	23ef      	movs	r3, #239	; 0xef
 801aa66:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801aa68:	2118      	movs	r1, #24
 801aa6a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801aa6e:	f000 fa93 	bl	801af98 <SUBGRF_WriteRegister>
 801aa72:	e067      	b.n	801ab44 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801aa74:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801aa78:	f000 faa2 	bl	801afc0 <SUBGRF_ReadRegister>
 801aa7c:	4603      	mov	r3, r0
 801aa7e:	f043 031e 	orr.w	r3, r3, #30
 801aa82:	b2db      	uxtb	r3, r3
 801aa84:	4619      	mov	r1, r3
 801aa86:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801aa8a:	f000 fa85 	bl	801af98 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801aa8e:	2001      	movs	r0, #1
 801aa90:	f7ef fdca 	bl	800a628 <RBI_GetRFOMaxPowerConfig>
 801aa94:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801aa96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801aa9a:	68fa      	ldr	r2, [r7, #12]
 801aa9c:	429a      	cmp	r2, r3
 801aa9e:	da01      	bge.n	801aaa4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	2b14      	cmp	r3, #20
 801aaa8:	d10e      	bne.n	801aac8 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801aaaa:	2301      	movs	r3, #1
 801aaac:	2200      	movs	r2, #0
 801aaae:	2105      	movs	r1, #5
 801aab0:	2003      	movs	r0, #3
 801aab2:	f7ff fe9f 	bl	801a7f4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801aab6:	79ba      	ldrb	r2, [r7, #6]
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	b2db      	uxtb	r3, r3
 801aabc:	1ad3      	subs	r3, r2, r3
 801aabe:	b2db      	uxtb	r3, r3
 801aac0:	3316      	adds	r3, #22
 801aac2:	b2db      	uxtb	r3, r3
 801aac4:	71bb      	strb	r3, [r7, #6]
 801aac6:	e031      	b.n	801ab2c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801aac8:	68fb      	ldr	r3, [r7, #12]
 801aaca:	2b11      	cmp	r3, #17
 801aacc:	d10e      	bne.n	801aaec <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801aace:	2301      	movs	r3, #1
 801aad0:	2200      	movs	r2, #0
 801aad2:	2103      	movs	r1, #3
 801aad4:	2002      	movs	r0, #2
 801aad6:	f7ff fe8d 	bl	801a7f4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801aada:	79ba      	ldrb	r2, [r7, #6]
 801aadc:	68fb      	ldr	r3, [r7, #12]
 801aade:	b2db      	uxtb	r3, r3
 801aae0:	1ad3      	subs	r3, r2, r3
 801aae2:	b2db      	uxtb	r3, r3
 801aae4:	3316      	adds	r3, #22
 801aae6:	b2db      	uxtb	r3, r3
 801aae8:	71bb      	strb	r3, [r7, #6]
 801aaea:	e01f      	b.n	801ab2c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	2b0e      	cmp	r3, #14
 801aaf0:	d10e      	bne.n	801ab10 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801aaf2:	2301      	movs	r3, #1
 801aaf4:	2200      	movs	r2, #0
 801aaf6:	2102      	movs	r1, #2
 801aaf8:	2002      	movs	r0, #2
 801aafa:	f7ff fe7b 	bl	801a7f4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801aafe:	79ba      	ldrb	r2, [r7, #6]
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	b2db      	uxtb	r3, r3
 801ab04:	1ad3      	subs	r3, r2, r3
 801ab06:	b2db      	uxtb	r3, r3
 801ab08:	330e      	adds	r3, #14
 801ab0a:	b2db      	uxtb	r3, r3
 801ab0c:	71bb      	strb	r3, [r7, #6]
 801ab0e:	e00d      	b.n	801ab2c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801ab10:	2301      	movs	r3, #1
 801ab12:	2200      	movs	r2, #0
 801ab14:	2107      	movs	r1, #7
 801ab16:	2004      	movs	r0, #4
 801ab18:	f7ff fe6c 	bl	801a7f4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ab1c:	79ba      	ldrb	r2, [r7, #6]
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	b2db      	uxtb	r3, r3
 801ab22:	1ad3      	subs	r3, r2, r3
 801ab24:	b2db      	uxtb	r3, r3
 801ab26:	3316      	adds	r3, #22
 801ab28:	b2db      	uxtb	r3, r3
 801ab2a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801ab2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ab30:	f113 0f09 	cmn.w	r3, #9
 801ab34:	da01      	bge.n	801ab3a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801ab36:	23f7      	movs	r3, #247	; 0xf7
 801ab38:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801ab3a:	2138      	movs	r1, #56	; 0x38
 801ab3c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ab40:	f000 fa2a 	bl	801af98 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801ab44:	79bb      	ldrb	r3, [r7, #6]
 801ab46:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801ab48:	797b      	ldrb	r3, [r7, #5]
 801ab4a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801ab4c:	f107 0308 	add.w	r3, r7, #8
 801ab50:	2202      	movs	r2, #2
 801ab52:	4619      	mov	r1, r3
 801ab54:	208e      	movs	r0, #142	; 0x8e
 801ab56:	f000 facf 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801ab5a:	bf00      	nop
 801ab5c:	3710      	adds	r7, #16
 801ab5e:	46bd      	mov	sp, r7
 801ab60:	bd80      	pop	{r7, pc}
	...

0801ab64 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801ab64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ab68:	b086      	sub	sp, #24
 801ab6a:	af00      	add	r7, sp, #0
 801ab6c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801ab6e:	2300      	movs	r3, #0
 801ab70:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ab72:	4a61      	ldr	r2, [pc, #388]	; (801acf8 <SUBGRF_SetModulationParams+0x194>)
 801ab74:	f107 0308 	add.w	r3, r7, #8
 801ab78:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ab7c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	781a      	ldrb	r2, [r3, #0]
 801ab84:	4b5d      	ldr	r3, [pc, #372]	; (801acfc <SUBGRF_SetModulationParams+0x198>)
 801ab86:	781b      	ldrb	r3, [r3, #0]
 801ab88:	429a      	cmp	r2, r3
 801ab8a:	d004      	beq.n	801ab96 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	781b      	ldrb	r3, [r3, #0]
 801ab90:	4618      	mov	r0, r3
 801ab92:	f7ff fef3 	bl	801a97c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	781b      	ldrb	r3, [r3, #0]
 801ab9a:	2b03      	cmp	r3, #3
 801ab9c:	f200 80a5 	bhi.w	801acea <SUBGRF_SetModulationParams+0x186>
 801aba0:	a201      	add	r2, pc, #4	; (adr r2, 801aba8 <SUBGRF_SetModulationParams+0x44>)
 801aba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aba6:	bf00      	nop
 801aba8:	0801abb9 	.word	0x0801abb9
 801abac:	0801ac79 	.word	0x0801ac79
 801abb0:	0801ac3b 	.word	0x0801ac3b
 801abb4:	0801aca7 	.word	0x0801aca7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801abb8:	2308      	movs	r3, #8
 801abba:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	685b      	ldr	r3, [r3, #4]
 801abc0:	4a4f      	ldr	r2, [pc, #316]	; (801ad00 <SUBGRF_SetModulationParams+0x19c>)
 801abc2:	fbb2 f3f3 	udiv	r3, r2, r3
 801abc6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801abc8:	697b      	ldr	r3, [r7, #20]
 801abca:	0c1b      	lsrs	r3, r3, #16
 801abcc:	b2db      	uxtb	r3, r3
 801abce:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801abd0:	697b      	ldr	r3, [r7, #20]
 801abd2:	0a1b      	lsrs	r3, r3, #8
 801abd4:	b2db      	uxtb	r3, r3
 801abd6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801abd8:	697b      	ldr	r3, [r7, #20]
 801abda:	b2db      	uxtb	r3, r3
 801abdc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	7b1b      	ldrb	r3, [r3, #12]
 801abe2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	7b5b      	ldrb	r3, [r3, #13]
 801abe8:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	689b      	ldr	r3, [r3, #8]
 801abee:	2200      	movs	r2, #0
 801abf0:	461c      	mov	r4, r3
 801abf2:	4615      	mov	r5, r2
 801abf4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801abf8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801abfc:	4a41      	ldr	r2, [pc, #260]	; (801ad04 <SUBGRF_SetModulationParams+0x1a0>)
 801abfe:	f04f 0300 	mov.w	r3, #0
 801ac02:	4640      	mov	r0, r8
 801ac04:	4649      	mov	r1, r9
 801ac06:	f7e5 ffcf 	bl	8000ba8 <__aeabi_uldivmod>
 801ac0a:	4602      	mov	r2, r0
 801ac0c:	460b      	mov	r3, r1
 801ac0e:	4613      	mov	r3, r2
 801ac10:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801ac12:	697b      	ldr	r3, [r7, #20]
 801ac14:	0c1b      	lsrs	r3, r3, #16
 801ac16:	b2db      	uxtb	r3, r3
 801ac18:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801ac1a:	697b      	ldr	r3, [r7, #20]
 801ac1c:	0a1b      	lsrs	r3, r3, #8
 801ac1e:	b2db      	uxtb	r3, r3
 801ac20:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801ac22:	697b      	ldr	r3, [r7, #20]
 801ac24:	b2db      	uxtb	r3, r3
 801ac26:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ac28:	7cfb      	ldrb	r3, [r7, #19]
 801ac2a:	b29a      	uxth	r2, r3
 801ac2c:	f107 0308 	add.w	r3, r7, #8
 801ac30:	4619      	mov	r1, r3
 801ac32:	208b      	movs	r0, #139	; 0x8b
 801ac34:	f000 fa60 	bl	801b0f8 <SUBGRF_WriteCommand>
        break;
 801ac38:	e058      	b.n	801acec <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801ac3a:	2304      	movs	r3, #4
 801ac3c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	691b      	ldr	r3, [r3, #16]
 801ac42:	4a2f      	ldr	r2, [pc, #188]	; (801ad00 <SUBGRF_SetModulationParams+0x19c>)
 801ac44:	fbb2 f3f3 	udiv	r3, r2, r3
 801ac48:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ac4a:	697b      	ldr	r3, [r7, #20]
 801ac4c:	0c1b      	lsrs	r3, r3, #16
 801ac4e:	b2db      	uxtb	r3, r3
 801ac50:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ac52:	697b      	ldr	r3, [r7, #20]
 801ac54:	0a1b      	lsrs	r3, r3, #8
 801ac56:	b2db      	uxtb	r3, r3
 801ac58:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ac5a:	697b      	ldr	r3, [r7, #20]
 801ac5c:	b2db      	uxtb	r3, r3
 801ac5e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	7d1b      	ldrb	r3, [r3, #20]
 801ac64:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ac66:	7cfb      	ldrb	r3, [r7, #19]
 801ac68:	b29a      	uxth	r2, r3
 801ac6a:	f107 0308 	add.w	r3, r7, #8
 801ac6e:	4619      	mov	r1, r3
 801ac70:	208b      	movs	r0, #139	; 0x8b
 801ac72:	f000 fa41 	bl	801b0f8 <SUBGRF_WriteCommand>
        break;
 801ac76:	e039      	b.n	801acec <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801ac78:	2304      	movs	r3, #4
 801ac7a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	7e1b      	ldrb	r3, [r3, #24]
 801ac80:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	7e5b      	ldrb	r3, [r3, #25]
 801ac86:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	7e9b      	ldrb	r3, [r3, #26]
 801ac8c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	7edb      	ldrb	r3, [r3, #27]
 801ac92:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ac94:	7cfb      	ldrb	r3, [r7, #19]
 801ac96:	b29a      	uxth	r2, r3
 801ac98:	f107 0308 	add.w	r3, r7, #8
 801ac9c:	4619      	mov	r1, r3
 801ac9e:	208b      	movs	r0, #139	; 0x8b
 801aca0:	f000 fa2a 	bl	801b0f8 <SUBGRF_WriteCommand>

        break;
 801aca4:	e022      	b.n	801acec <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801aca6:	2305      	movs	r3, #5
 801aca8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	685b      	ldr	r3, [r3, #4]
 801acae:	4a14      	ldr	r2, [pc, #80]	; (801ad00 <SUBGRF_SetModulationParams+0x19c>)
 801acb0:	fbb2 f3f3 	udiv	r3, r2, r3
 801acb4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801acb6:	697b      	ldr	r3, [r7, #20]
 801acb8:	0c1b      	lsrs	r3, r3, #16
 801acba:	b2db      	uxtb	r3, r3
 801acbc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801acbe:	697b      	ldr	r3, [r7, #20]
 801acc0:	0a1b      	lsrs	r3, r3, #8
 801acc2:	b2db      	uxtb	r3, r3
 801acc4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801acc6:	697b      	ldr	r3, [r7, #20]
 801acc8:	b2db      	uxtb	r3, r3
 801acca:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	7b1b      	ldrb	r3, [r3, #12]
 801acd0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	7b5b      	ldrb	r3, [r3, #13]
 801acd6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801acd8:	7cfb      	ldrb	r3, [r7, #19]
 801acda:	b29a      	uxth	r2, r3
 801acdc:	f107 0308 	add.w	r3, r7, #8
 801ace0:	4619      	mov	r1, r3
 801ace2:	208b      	movs	r0, #139	; 0x8b
 801ace4:	f000 fa08 	bl	801b0f8 <SUBGRF_WriteCommand>
        break;
 801ace8:	e000      	b.n	801acec <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801acea:	bf00      	nop
    }
}
 801acec:	bf00      	nop
 801acee:	3718      	adds	r7, #24
 801acf0:	46bd      	mov	sp, r7
 801acf2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801acf6:	bf00      	nop
 801acf8:	0801d6e4 	.word	0x0801d6e4
 801acfc:	20001b29 	.word	0x20001b29
 801ad00:	3d090000 	.word	0x3d090000
 801ad04:	01e84800 	.word	0x01e84800

0801ad08 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801ad08:	b580      	push	{r7, lr}
 801ad0a:	b086      	sub	sp, #24
 801ad0c:	af00      	add	r7, sp, #0
 801ad0e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801ad10:	2300      	movs	r3, #0
 801ad12:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ad14:	4a48      	ldr	r2, [pc, #288]	; (801ae38 <SUBGRF_SetPacketParams+0x130>)
 801ad16:	f107 030c 	add.w	r3, r7, #12
 801ad1a:	ca07      	ldmia	r2, {r0, r1, r2}
 801ad1c:	c303      	stmia	r3!, {r0, r1}
 801ad1e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	781a      	ldrb	r2, [r3, #0]
 801ad24:	4b45      	ldr	r3, [pc, #276]	; (801ae3c <SUBGRF_SetPacketParams+0x134>)
 801ad26:	781b      	ldrb	r3, [r3, #0]
 801ad28:	429a      	cmp	r2, r3
 801ad2a:	d004      	beq.n	801ad36 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	781b      	ldrb	r3, [r3, #0]
 801ad30:	4618      	mov	r0, r3
 801ad32:	f7ff fe23 	bl	801a97c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	781b      	ldrb	r3, [r3, #0]
 801ad3a:	2b03      	cmp	r3, #3
 801ad3c:	d878      	bhi.n	801ae30 <SUBGRF_SetPacketParams+0x128>
 801ad3e:	a201      	add	r2, pc, #4	; (adr r2, 801ad44 <SUBGRF_SetPacketParams+0x3c>)
 801ad40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad44:	0801ad55 	.word	0x0801ad55
 801ad48:	0801ade5 	.word	0x0801ade5
 801ad4c:	0801add9 	.word	0x0801add9
 801ad50:	0801ad55 	.word	0x0801ad55
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	7a5b      	ldrb	r3, [r3, #9]
 801ad58:	2bf1      	cmp	r3, #241	; 0xf1
 801ad5a:	d10a      	bne.n	801ad72 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801ad5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801ad60:	f7ff faae 	bl	801a2c0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801ad64:	f248 0005 	movw	r0, #32773	; 0x8005
 801ad68:	f7ff faca 	bl	801a300 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801ad6c:	2302      	movs	r3, #2
 801ad6e:	75bb      	strb	r3, [r7, #22]
 801ad70:	e011      	b.n	801ad96 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	7a5b      	ldrb	r3, [r3, #9]
 801ad76:	2bf2      	cmp	r3, #242	; 0xf2
 801ad78:	d10a      	bne.n	801ad90 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801ad7a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801ad7e:	f7ff fa9f 	bl	801a2c0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801ad82:	f241 0021 	movw	r0, #4129	; 0x1021
 801ad86:	f7ff fabb 	bl	801a300 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801ad8a:	2306      	movs	r3, #6
 801ad8c:	75bb      	strb	r3, [r7, #22]
 801ad8e:	e002      	b.n	801ad96 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	7a5b      	ldrb	r3, [r3, #9]
 801ad94:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801ad96:	2309      	movs	r3, #9
 801ad98:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	885b      	ldrh	r3, [r3, #2]
 801ad9e:	0a1b      	lsrs	r3, r3, #8
 801ada0:	b29b      	uxth	r3, r3
 801ada2:	b2db      	uxtb	r3, r3
 801ada4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	885b      	ldrh	r3, [r3, #2]
 801adaa:	b2db      	uxtb	r3, r3
 801adac:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	791b      	ldrb	r3, [r3, #4]
 801adb2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	795b      	ldrb	r3, [r3, #5]
 801adb8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	799b      	ldrb	r3, [r3, #6]
 801adbe:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	79db      	ldrb	r3, [r3, #7]
 801adc4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	7a1b      	ldrb	r3, [r3, #8]
 801adca:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801adcc:	7dbb      	ldrb	r3, [r7, #22]
 801adce:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	7a9b      	ldrb	r3, [r3, #10]
 801add4:	753b      	strb	r3, [r7, #20]
        break;
 801add6:	e022      	b.n	801ae1e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801add8:	2301      	movs	r3, #1
 801adda:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	7b1b      	ldrb	r3, [r3, #12]
 801ade0:	733b      	strb	r3, [r7, #12]
        break;
 801ade2:	e01c      	b.n	801ae1e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801ade4:	2306      	movs	r3, #6
 801ade6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	89db      	ldrh	r3, [r3, #14]
 801adec:	0a1b      	lsrs	r3, r3, #8
 801adee:	b29b      	uxth	r3, r3
 801adf0:	b2db      	uxtb	r3, r3
 801adf2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	89db      	ldrh	r3, [r3, #14]
 801adf8:	b2db      	uxtb	r3, r3
 801adfa:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	7c1a      	ldrb	r2, [r3, #16]
 801ae00:	4b0f      	ldr	r3, [pc, #60]	; (801ae40 <SUBGRF_SetPacketParams+0x138>)
 801ae02:	4611      	mov	r1, r2
 801ae04:	7019      	strb	r1, [r3, #0]
 801ae06:	4613      	mov	r3, r2
 801ae08:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	7c5b      	ldrb	r3, [r3, #17]
 801ae0e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	7c9b      	ldrb	r3, [r3, #18]
 801ae14:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	7cdb      	ldrb	r3, [r3, #19]
 801ae1a:	747b      	strb	r3, [r7, #17]
        break;
 801ae1c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801ae1e:	7dfb      	ldrb	r3, [r7, #23]
 801ae20:	b29a      	uxth	r2, r3
 801ae22:	f107 030c 	add.w	r3, r7, #12
 801ae26:	4619      	mov	r1, r3
 801ae28:	208c      	movs	r0, #140	; 0x8c
 801ae2a:	f000 f965 	bl	801b0f8 <SUBGRF_WriteCommand>
 801ae2e:	e000      	b.n	801ae32 <SUBGRF_SetPacketParams+0x12a>
        return;
 801ae30:	bf00      	nop
}
 801ae32:	3718      	adds	r7, #24
 801ae34:	46bd      	mov	sp, r7
 801ae36:	bd80      	pop	{r7, pc}
 801ae38:	0801d6ec 	.word	0x0801d6ec
 801ae3c:	20001b29 	.word	0x20001b29
 801ae40:	20001b2a 	.word	0x20001b2a

0801ae44 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801ae44:	b580      	push	{r7, lr}
 801ae46:	b084      	sub	sp, #16
 801ae48:	af00      	add	r7, sp, #0
 801ae4a:	4603      	mov	r3, r0
 801ae4c:	460a      	mov	r2, r1
 801ae4e:	71fb      	strb	r3, [r7, #7]
 801ae50:	4613      	mov	r3, r2
 801ae52:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801ae54:	79fb      	ldrb	r3, [r7, #7]
 801ae56:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801ae58:	79bb      	ldrb	r3, [r7, #6]
 801ae5a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801ae5c:	f107 030c 	add.w	r3, r7, #12
 801ae60:	2202      	movs	r2, #2
 801ae62:	4619      	mov	r1, r3
 801ae64:	208f      	movs	r0, #143	; 0x8f
 801ae66:	f000 f947 	bl	801b0f8 <SUBGRF_WriteCommand>
}
 801ae6a:	bf00      	nop
 801ae6c:	3710      	adds	r7, #16
 801ae6e:	46bd      	mov	sp, r7
 801ae70:	bd80      	pop	{r7, pc}

0801ae72 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801ae72:	b580      	push	{r7, lr}
 801ae74:	b082      	sub	sp, #8
 801ae76:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801ae78:	2300      	movs	r3, #0
 801ae7a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801ae7c:	1d3b      	adds	r3, r7, #4
 801ae7e:	2201      	movs	r2, #1
 801ae80:	4619      	mov	r1, r3
 801ae82:	2015      	movs	r0, #21
 801ae84:	f000 f95a 	bl	801b13c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801ae88:	793b      	ldrb	r3, [r7, #4]
 801ae8a:	425b      	negs	r3, r3
 801ae8c:	105b      	asrs	r3, r3, #1
 801ae8e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801ae90:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801ae94:	4618      	mov	r0, r3
 801ae96:	3708      	adds	r7, #8
 801ae98:	46bd      	mov	sp, r7
 801ae9a:	bd80      	pop	{r7, pc}

0801ae9c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801ae9c:	b580      	push	{r7, lr}
 801ae9e:	b084      	sub	sp, #16
 801aea0:	af00      	add	r7, sp, #0
 801aea2:	6078      	str	r0, [r7, #4]
 801aea4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801aea6:	f107 030c 	add.w	r3, r7, #12
 801aeaa:	2202      	movs	r2, #2
 801aeac:	4619      	mov	r1, r3
 801aeae:	2013      	movs	r0, #19
 801aeb0:	f000 f944 	bl	801b13c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801aeb4:	f7ff fd7e 	bl	801a9b4 <SUBGRF_GetPacketType>
 801aeb8:	4603      	mov	r3, r0
 801aeba:	2b01      	cmp	r3, #1
 801aebc:	d10d      	bne.n	801aeda <SUBGRF_GetRxBufferStatus+0x3e>
 801aebe:	4b0c      	ldr	r3, [pc, #48]	; (801aef0 <SUBGRF_GetRxBufferStatus+0x54>)
 801aec0:	781b      	ldrb	r3, [r3, #0]
 801aec2:	b2db      	uxtb	r3, r3
 801aec4:	2b01      	cmp	r3, #1
 801aec6:	d108      	bne.n	801aeda <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801aec8:	f240 7002 	movw	r0, #1794	; 0x702
 801aecc:	f000 f878 	bl	801afc0 <SUBGRF_ReadRegister>
 801aed0:	4603      	mov	r3, r0
 801aed2:	461a      	mov	r2, r3
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	701a      	strb	r2, [r3, #0]
 801aed8:	e002      	b.n	801aee0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801aeda:	7b3a      	ldrb	r2, [r7, #12]
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801aee0:	7b7a      	ldrb	r2, [r7, #13]
 801aee2:	683b      	ldr	r3, [r7, #0]
 801aee4:	701a      	strb	r2, [r3, #0]
}
 801aee6:	bf00      	nop
 801aee8:	3710      	adds	r7, #16
 801aeea:	46bd      	mov	sp, r7
 801aeec:	bd80      	pop	{r7, pc}
 801aeee:	bf00      	nop
 801aef0:	20001b2a 	.word	0x20001b2a

0801aef4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801aef4:	b580      	push	{r7, lr}
 801aef6:	b084      	sub	sp, #16
 801aef8:	af00      	add	r7, sp, #0
 801aefa:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801aefc:	f107 030c 	add.w	r3, r7, #12
 801af00:	2203      	movs	r2, #3
 801af02:	4619      	mov	r1, r3
 801af04:	2014      	movs	r0, #20
 801af06:	f000 f919 	bl	801b13c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801af0a:	f7ff fd53 	bl	801a9b4 <SUBGRF_GetPacketType>
 801af0e:	4603      	mov	r3, r0
 801af10:	461a      	mov	r2, r3
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	781b      	ldrb	r3, [r3, #0]
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d002      	beq.n	801af24 <SUBGRF_GetPacketStatus+0x30>
 801af1e:	2b01      	cmp	r3, #1
 801af20:	d013      	beq.n	801af4a <SUBGRF_GetPacketStatus+0x56>
 801af22:	e02a      	b.n	801af7a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801af24:	7b3a      	ldrb	r2, [r7, #12]
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801af2a:	7b7b      	ldrb	r3, [r7, #13]
 801af2c:	425b      	negs	r3, r3
 801af2e:	105b      	asrs	r3, r3, #1
 801af30:	b25a      	sxtb	r2, r3
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801af36:	7bbb      	ldrb	r3, [r7, #14]
 801af38:	425b      	negs	r3, r3
 801af3a:	105b      	asrs	r3, r3, #1
 801af3c:	b25a      	sxtb	r2, r3
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	2200      	movs	r2, #0
 801af46:	609a      	str	r2, [r3, #8]
            break;
 801af48:	e020      	b.n	801af8c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801af4a:	7b3b      	ldrb	r3, [r7, #12]
 801af4c:	425b      	negs	r3, r3
 801af4e:	105b      	asrs	r3, r3, #1
 801af50:	b25a      	sxtb	r2, r3
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801af56:	7b7b      	ldrb	r3, [r7, #13]
 801af58:	b25b      	sxtb	r3, r3
 801af5a:	3302      	adds	r3, #2
 801af5c:	109b      	asrs	r3, r3, #2
 801af5e:	b25a      	sxtb	r2, r3
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801af64:	7bbb      	ldrb	r3, [r7, #14]
 801af66:	425b      	negs	r3, r3
 801af68:	105b      	asrs	r3, r3, #1
 801af6a:	b25a      	sxtb	r2, r3
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801af70:	4b08      	ldr	r3, [pc, #32]	; (801af94 <SUBGRF_GetPacketStatus+0xa0>)
 801af72:	681a      	ldr	r2, [r3, #0]
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	611a      	str	r2, [r3, #16]
            break;
 801af78:	e008      	b.n	801af8c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801af7a:	2214      	movs	r2, #20
 801af7c:	2100      	movs	r1, #0
 801af7e:	6878      	ldr	r0, [r7, #4]
 801af80:	f000 fbf3 	bl	801b76a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	220f      	movs	r2, #15
 801af88:	701a      	strb	r2, [r3, #0]
            break;
 801af8a:	bf00      	nop
    }
}
 801af8c:	bf00      	nop
 801af8e:	3710      	adds	r7, #16
 801af90:	46bd      	mov	sp, r7
 801af92:	bd80      	pop	{r7, pc}
 801af94:	20001b2c 	.word	0x20001b2c

0801af98 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801af98:	b580      	push	{r7, lr}
 801af9a:	b082      	sub	sp, #8
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	4603      	mov	r3, r0
 801afa0:	460a      	mov	r2, r1
 801afa2:	80fb      	strh	r3, [r7, #6]
 801afa4:	4613      	mov	r3, r2
 801afa6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801afa8:	1d7a      	adds	r2, r7, #5
 801afaa:	88f9      	ldrh	r1, [r7, #6]
 801afac:	2301      	movs	r3, #1
 801afae:	4803      	ldr	r0, [pc, #12]	; (801afbc <SUBGRF_WriteRegister+0x24>)
 801afb0:	f7eb ff98 	bl	8006ee4 <HAL_SUBGHZ_WriteRegisters>
}
 801afb4:	bf00      	nop
 801afb6:	3708      	adds	r7, #8
 801afb8:	46bd      	mov	sp, r7
 801afba:	bd80      	pop	{r7, pc}
 801afbc:	20000210 	.word	0x20000210

0801afc0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801afc0:	b580      	push	{r7, lr}
 801afc2:	b084      	sub	sp, #16
 801afc4:	af00      	add	r7, sp, #0
 801afc6:	4603      	mov	r3, r0
 801afc8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801afca:	f107 020f 	add.w	r2, r7, #15
 801afce:	88f9      	ldrh	r1, [r7, #6]
 801afd0:	2301      	movs	r3, #1
 801afd2:	4804      	ldr	r0, [pc, #16]	; (801afe4 <SUBGRF_ReadRegister+0x24>)
 801afd4:	f7eb ffe5 	bl	8006fa2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801afd8:	7bfb      	ldrb	r3, [r7, #15]
}
 801afda:	4618      	mov	r0, r3
 801afdc:	3710      	adds	r7, #16
 801afde:	46bd      	mov	sp, r7
 801afe0:	bd80      	pop	{r7, pc}
 801afe2:	bf00      	nop
 801afe4:	20000210 	.word	0x20000210

0801afe8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801afe8:	b580      	push	{r7, lr}
 801afea:	b086      	sub	sp, #24
 801afec:	af00      	add	r7, sp, #0
 801afee:	4603      	mov	r3, r0
 801aff0:	6039      	str	r1, [r7, #0]
 801aff2:	80fb      	strh	r3, [r7, #6]
 801aff4:	4613      	mov	r3, r2
 801aff6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aff8:	f3ef 8310 	mrs	r3, PRIMASK
 801affc:	60fb      	str	r3, [r7, #12]
  return(result);
 801affe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b000:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b002:	b672      	cpsid	i
}
 801b004:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801b006:	88bb      	ldrh	r3, [r7, #4]
 801b008:	88f9      	ldrh	r1, [r7, #6]
 801b00a:	683a      	ldr	r2, [r7, #0]
 801b00c:	4806      	ldr	r0, [pc, #24]	; (801b028 <SUBGRF_WriteRegisters+0x40>)
 801b00e:	f7eb ff69 	bl	8006ee4 <HAL_SUBGHZ_WriteRegisters>
 801b012:	697b      	ldr	r3, [r7, #20]
 801b014:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b016:	693b      	ldr	r3, [r7, #16]
 801b018:	f383 8810 	msr	PRIMASK, r3
}
 801b01c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b01e:	bf00      	nop
 801b020:	3718      	adds	r7, #24
 801b022:	46bd      	mov	sp, r7
 801b024:	bd80      	pop	{r7, pc}
 801b026:	bf00      	nop
 801b028:	20000210 	.word	0x20000210

0801b02c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b02c:	b580      	push	{r7, lr}
 801b02e:	b086      	sub	sp, #24
 801b030:	af00      	add	r7, sp, #0
 801b032:	4603      	mov	r3, r0
 801b034:	6039      	str	r1, [r7, #0]
 801b036:	80fb      	strh	r3, [r7, #6]
 801b038:	4613      	mov	r3, r2
 801b03a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b03c:	f3ef 8310 	mrs	r3, PRIMASK
 801b040:	60fb      	str	r3, [r7, #12]
  return(result);
 801b042:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b044:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b046:	b672      	cpsid	i
}
 801b048:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801b04a:	88bb      	ldrh	r3, [r7, #4]
 801b04c:	88f9      	ldrh	r1, [r7, #6]
 801b04e:	683a      	ldr	r2, [r7, #0]
 801b050:	4806      	ldr	r0, [pc, #24]	; (801b06c <SUBGRF_ReadRegisters+0x40>)
 801b052:	f7eb ffa6 	bl	8006fa2 <HAL_SUBGHZ_ReadRegisters>
 801b056:	697b      	ldr	r3, [r7, #20]
 801b058:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b05a:	693b      	ldr	r3, [r7, #16]
 801b05c:	f383 8810 	msr	PRIMASK, r3
}
 801b060:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b062:	bf00      	nop
 801b064:	3718      	adds	r7, #24
 801b066:	46bd      	mov	sp, r7
 801b068:	bd80      	pop	{r7, pc}
 801b06a:	bf00      	nop
 801b06c:	20000210 	.word	0x20000210

0801b070 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b070:	b580      	push	{r7, lr}
 801b072:	b086      	sub	sp, #24
 801b074:	af00      	add	r7, sp, #0
 801b076:	4603      	mov	r3, r0
 801b078:	6039      	str	r1, [r7, #0]
 801b07a:	71fb      	strb	r3, [r7, #7]
 801b07c:	4613      	mov	r3, r2
 801b07e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b080:	f3ef 8310 	mrs	r3, PRIMASK
 801b084:	60fb      	str	r3, [r7, #12]
  return(result);
 801b086:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b088:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b08a:	b672      	cpsid	i
}
 801b08c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801b08e:	79bb      	ldrb	r3, [r7, #6]
 801b090:	b29b      	uxth	r3, r3
 801b092:	79f9      	ldrb	r1, [r7, #7]
 801b094:	683a      	ldr	r2, [r7, #0]
 801b096:	4806      	ldr	r0, [pc, #24]	; (801b0b0 <SUBGRF_WriteBuffer+0x40>)
 801b098:	f7ec f897 	bl	80071ca <HAL_SUBGHZ_WriteBuffer>
 801b09c:	697b      	ldr	r3, [r7, #20]
 801b09e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0a0:	693b      	ldr	r3, [r7, #16]
 801b0a2:	f383 8810 	msr	PRIMASK, r3
}
 801b0a6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b0a8:	bf00      	nop
 801b0aa:	3718      	adds	r7, #24
 801b0ac:	46bd      	mov	sp, r7
 801b0ae:	bd80      	pop	{r7, pc}
 801b0b0:	20000210 	.word	0x20000210

0801b0b4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b0b4:	b580      	push	{r7, lr}
 801b0b6:	b086      	sub	sp, #24
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	4603      	mov	r3, r0
 801b0bc:	6039      	str	r1, [r7, #0]
 801b0be:	71fb      	strb	r3, [r7, #7]
 801b0c0:	4613      	mov	r3, r2
 801b0c2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b0c4:	f3ef 8310 	mrs	r3, PRIMASK
 801b0c8:	60fb      	str	r3, [r7, #12]
  return(result);
 801b0ca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b0cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b0ce:	b672      	cpsid	i
}
 801b0d0:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801b0d2:	79bb      	ldrb	r3, [r7, #6]
 801b0d4:	b29b      	uxth	r3, r3
 801b0d6:	79f9      	ldrb	r1, [r7, #7]
 801b0d8:	683a      	ldr	r2, [r7, #0]
 801b0da:	4806      	ldr	r0, [pc, #24]	; (801b0f4 <SUBGRF_ReadBuffer+0x40>)
 801b0dc:	f7ec f8c8 	bl	8007270 <HAL_SUBGHZ_ReadBuffer>
 801b0e0:	697b      	ldr	r3, [r7, #20]
 801b0e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0e4:	693b      	ldr	r3, [r7, #16]
 801b0e6:	f383 8810 	msr	PRIMASK, r3
}
 801b0ea:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b0ec:	bf00      	nop
 801b0ee:	3718      	adds	r7, #24
 801b0f0:	46bd      	mov	sp, r7
 801b0f2:	bd80      	pop	{r7, pc}
 801b0f4:	20000210 	.word	0x20000210

0801b0f8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b0f8:	b580      	push	{r7, lr}
 801b0fa:	b086      	sub	sp, #24
 801b0fc:	af00      	add	r7, sp, #0
 801b0fe:	4603      	mov	r3, r0
 801b100:	6039      	str	r1, [r7, #0]
 801b102:	71fb      	strb	r3, [r7, #7]
 801b104:	4613      	mov	r3, r2
 801b106:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b108:	f3ef 8310 	mrs	r3, PRIMASK
 801b10c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b10e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b110:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b112:	b672      	cpsid	i
}
 801b114:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801b116:	88bb      	ldrh	r3, [r7, #4]
 801b118:	79f9      	ldrb	r1, [r7, #7]
 801b11a:	683a      	ldr	r2, [r7, #0]
 801b11c:	4806      	ldr	r0, [pc, #24]	; (801b138 <SUBGRF_WriteCommand+0x40>)
 801b11e:	f7eb ffa1 	bl	8007064 <HAL_SUBGHZ_ExecSetCmd>
 801b122:	697b      	ldr	r3, [r7, #20]
 801b124:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b126:	693b      	ldr	r3, [r7, #16]
 801b128:	f383 8810 	msr	PRIMASK, r3
}
 801b12c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b12e:	bf00      	nop
 801b130:	3718      	adds	r7, #24
 801b132:	46bd      	mov	sp, r7
 801b134:	bd80      	pop	{r7, pc}
 801b136:	bf00      	nop
 801b138:	20000210 	.word	0x20000210

0801b13c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b086      	sub	sp, #24
 801b140:	af00      	add	r7, sp, #0
 801b142:	4603      	mov	r3, r0
 801b144:	6039      	str	r1, [r7, #0]
 801b146:	71fb      	strb	r3, [r7, #7]
 801b148:	4613      	mov	r3, r2
 801b14a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b14c:	f3ef 8310 	mrs	r3, PRIMASK
 801b150:	60fb      	str	r3, [r7, #12]
  return(result);
 801b152:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b154:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b156:	b672      	cpsid	i
}
 801b158:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801b15a:	88bb      	ldrh	r3, [r7, #4]
 801b15c:	79f9      	ldrb	r1, [r7, #7]
 801b15e:	683a      	ldr	r2, [r7, #0]
 801b160:	4806      	ldr	r0, [pc, #24]	; (801b17c <SUBGRF_ReadCommand+0x40>)
 801b162:	f7eb ffde 	bl	8007122 <HAL_SUBGHZ_ExecGetCmd>
 801b166:	697b      	ldr	r3, [r7, #20]
 801b168:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b16a:	693b      	ldr	r3, [r7, #16]
 801b16c:	f383 8810 	msr	PRIMASK, r3
}
 801b170:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b172:	bf00      	nop
 801b174:	3718      	adds	r7, #24
 801b176:	46bd      	mov	sp, r7
 801b178:	bd80      	pop	{r7, pc}
 801b17a:	bf00      	nop
 801b17c:	20000210 	.word	0x20000210

0801b180 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801b180:	b580      	push	{r7, lr}
 801b182:	b084      	sub	sp, #16
 801b184:	af00      	add	r7, sp, #0
 801b186:	4603      	mov	r3, r0
 801b188:	460a      	mov	r2, r1
 801b18a:	71fb      	strb	r3, [r7, #7]
 801b18c:	4613      	mov	r3, r2
 801b18e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801b190:	2301      	movs	r3, #1
 801b192:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801b194:	79bb      	ldrb	r3, [r7, #6]
 801b196:	2b01      	cmp	r3, #1
 801b198:	d10d      	bne.n	801b1b6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801b19a:	79fb      	ldrb	r3, [r7, #7]
 801b19c:	2b01      	cmp	r3, #1
 801b19e:	d104      	bne.n	801b1aa <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801b1a0:	2302      	movs	r3, #2
 801b1a2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801b1a4:	2004      	movs	r0, #4
 801b1a6:	f000 f8df 	bl	801b368 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801b1aa:	79fb      	ldrb	r3, [r7, #7]
 801b1ac:	2b02      	cmp	r3, #2
 801b1ae:	d107      	bne.n	801b1c0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801b1b0:	2303      	movs	r3, #3
 801b1b2:	73fb      	strb	r3, [r7, #15]
 801b1b4:	e004      	b.n	801b1c0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801b1b6:	79bb      	ldrb	r3, [r7, #6]
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d101      	bne.n	801b1c0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801b1bc:	2301      	movs	r3, #1
 801b1be:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801b1c0:	7bfb      	ldrb	r3, [r7, #15]
 801b1c2:	4618      	mov	r0, r3
 801b1c4:	f7ef fa0d 	bl	800a5e2 <RBI_ConfigRFSwitch>
}
 801b1c8:	bf00      	nop
 801b1ca:	3710      	adds	r7, #16
 801b1cc:	46bd      	mov	sp, r7
 801b1ce:	bd80      	pop	{r7, pc}

0801b1d0 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801b1d0:	b580      	push	{r7, lr}
 801b1d2:	b084      	sub	sp, #16
 801b1d4:	af00      	add	r7, sp, #0
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801b1da:	2301      	movs	r3, #1
 801b1dc:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801b1de:	f7ef fa0e 	bl	800a5fe <RBI_GetTxConfig>
 801b1e2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801b1e4:	68bb      	ldr	r3, [r7, #8]
 801b1e6:	2b02      	cmp	r3, #2
 801b1e8:	d016      	beq.n	801b218 <SUBGRF_SetRfTxPower+0x48>
 801b1ea:	68bb      	ldr	r3, [r7, #8]
 801b1ec:	2b02      	cmp	r3, #2
 801b1ee:	dc16      	bgt.n	801b21e <SUBGRF_SetRfTxPower+0x4e>
 801b1f0:	68bb      	ldr	r3, [r7, #8]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d003      	beq.n	801b1fe <SUBGRF_SetRfTxPower+0x2e>
 801b1f6:	68bb      	ldr	r3, [r7, #8]
 801b1f8:	2b01      	cmp	r3, #1
 801b1fa:	d00a      	beq.n	801b212 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801b1fc:	e00f      	b.n	801b21e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801b1fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b202:	2b0f      	cmp	r3, #15
 801b204:	dd02      	ble.n	801b20c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801b206:	2302      	movs	r3, #2
 801b208:	73fb      	strb	r3, [r7, #15]
            break;
 801b20a:	e009      	b.n	801b220 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801b20c:	2301      	movs	r3, #1
 801b20e:	73fb      	strb	r3, [r7, #15]
            break;
 801b210:	e006      	b.n	801b220 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801b212:	2301      	movs	r3, #1
 801b214:	73fb      	strb	r3, [r7, #15]
            break;
 801b216:	e003      	b.n	801b220 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801b218:	2302      	movs	r3, #2
 801b21a:	73fb      	strb	r3, [r7, #15]
            break;
 801b21c:	e000      	b.n	801b220 <SUBGRF_SetRfTxPower+0x50>
            break;
 801b21e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801b220:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801b224:	7bfb      	ldrb	r3, [r7, #15]
 801b226:	2202      	movs	r2, #2
 801b228:	4618      	mov	r0, r3
 801b22a:	f7ff fbcd 	bl	801a9c8 <SUBGRF_SetTxParams>

    return paSelect;
 801b22e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b230:	4618      	mov	r0, r3
 801b232:	3710      	adds	r7, #16
 801b234:	46bd      	mov	sp, r7
 801b236:	bd80      	pop	{r7, pc}

0801b238 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801b238:	b480      	push	{r7}
 801b23a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801b23c:	2301      	movs	r3, #1
}
 801b23e:	4618      	mov	r0, r3
 801b240:	46bd      	mov	sp, r7
 801b242:	bc80      	pop	{r7}
 801b244:	4770      	bx	lr
	...

0801b248 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b248:	b580      	push	{r7, lr}
 801b24a:	b082      	sub	sp, #8
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801b250:	4b03      	ldr	r3, [pc, #12]	; (801b260 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	2001      	movs	r0, #1
 801b256:	4798      	blx	r3
}
 801b258:	bf00      	nop
 801b25a:	3708      	adds	r7, #8
 801b25c:	46bd      	mov	sp, r7
 801b25e:	bd80      	pop	{r7, pc}
 801b260:	20001b34 	.word	0x20001b34

0801b264 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b264:	b580      	push	{r7, lr}
 801b266:	b082      	sub	sp, #8
 801b268:	af00      	add	r7, sp, #0
 801b26a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801b26c:	4b03      	ldr	r3, [pc, #12]	; (801b27c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	2002      	movs	r0, #2
 801b272:	4798      	blx	r3
}
 801b274:	bf00      	nop
 801b276:	3708      	adds	r7, #8
 801b278:	46bd      	mov	sp, r7
 801b27a:	bd80      	pop	{r7, pc}
 801b27c:	20001b34 	.word	0x20001b34

0801b280 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801b280:	b580      	push	{r7, lr}
 801b282:	b082      	sub	sp, #8
 801b284:	af00      	add	r7, sp, #0
 801b286:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801b288:	4b03      	ldr	r3, [pc, #12]	; (801b298 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801b28a:	681b      	ldr	r3, [r3, #0]
 801b28c:	2040      	movs	r0, #64	; 0x40
 801b28e:	4798      	blx	r3
}
 801b290:	bf00      	nop
 801b292:	3708      	adds	r7, #8
 801b294:	46bd      	mov	sp, r7
 801b296:	bd80      	pop	{r7, pc}
 801b298:	20001b34 	.word	0x20001b34

0801b29c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801b29c:	b580      	push	{r7, lr}
 801b29e:	b082      	sub	sp, #8
 801b2a0:	af00      	add	r7, sp, #0
 801b2a2:	6078      	str	r0, [r7, #4]
 801b2a4:	460b      	mov	r3, r1
 801b2a6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801b2a8:	78fb      	ldrb	r3, [r7, #3]
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d002      	beq.n	801b2b4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801b2ae:	2b01      	cmp	r3, #1
 801b2b0:	d005      	beq.n	801b2be <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801b2b2:	e00a      	b.n	801b2ca <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801b2b4:	4b07      	ldr	r3, [pc, #28]	; (801b2d4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	2080      	movs	r0, #128	; 0x80
 801b2ba:	4798      	blx	r3
            break;
 801b2bc:	e005      	b.n	801b2ca <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801b2be:	4b05      	ldr	r3, [pc, #20]	; (801b2d4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 801b2c6:	4798      	blx	r3
            break;
 801b2c8:	bf00      	nop
    }
}
 801b2ca:	bf00      	nop
 801b2cc:	3708      	adds	r7, #8
 801b2ce:	46bd      	mov	sp, r7
 801b2d0:	bd80      	pop	{r7, pc}
 801b2d2:	bf00      	nop
 801b2d4:	20001b34 	.word	0x20001b34

0801b2d8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b2d8:	b580      	push	{r7, lr}
 801b2da:	b082      	sub	sp, #8
 801b2dc:	af00      	add	r7, sp, #0
 801b2de:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801b2e0:	4b04      	ldr	r3, [pc, #16]	; (801b2f4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 801b2e8:	4798      	blx	r3
}
 801b2ea:	bf00      	nop
 801b2ec:	3708      	adds	r7, #8
 801b2ee:	46bd      	mov	sp, r7
 801b2f0:	bd80      	pop	{r7, pc}
 801b2f2:	bf00      	nop
 801b2f4:	20001b34 	.word	0x20001b34

0801b2f8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b2f8:	b580      	push	{r7, lr}
 801b2fa:	b082      	sub	sp, #8
 801b2fc:	af00      	add	r7, sp, #0
 801b2fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801b300:	4b03      	ldr	r3, [pc, #12]	; (801b310 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	2020      	movs	r0, #32
 801b306:	4798      	blx	r3
}
 801b308:	bf00      	nop
 801b30a:	3708      	adds	r7, #8
 801b30c:	46bd      	mov	sp, r7
 801b30e:	bd80      	pop	{r7, pc}
 801b310:	20001b34 	.word	0x20001b34

0801b314 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b314:	b580      	push	{r7, lr}
 801b316:	b082      	sub	sp, #8
 801b318:	af00      	add	r7, sp, #0
 801b31a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801b31c:	4b03      	ldr	r3, [pc, #12]	; (801b32c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801b31e:	681b      	ldr	r3, [r3, #0]
 801b320:	2004      	movs	r0, #4
 801b322:	4798      	blx	r3
}
 801b324:	bf00      	nop
 801b326:	3708      	adds	r7, #8
 801b328:	46bd      	mov	sp, r7
 801b32a:	bd80      	pop	{r7, pc}
 801b32c:	20001b34 	.word	0x20001b34

0801b330 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b330:	b580      	push	{r7, lr}
 801b332:	b082      	sub	sp, #8
 801b334:	af00      	add	r7, sp, #0
 801b336:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801b338:	4b03      	ldr	r3, [pc, #12]	; (801b348 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	2008      	movs	r0, #8
 801b33e:	4798      	blx	r3
}
 801b340:	bf00      	nop
 801b342:	3708      	adds	r7, #8
 801b344:	46bd      	mov	sp, r7
 801b346:	bd80      	pop	{r7, pc}
 801b348:	20001b34 	.word	0x20001b34

0801b34c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b34c:	b580      	push	{r7, lr}
 801b34e:	b082      	sub	sp, #8
 801b350:	af00      	add	r7, sp, #0
 801b352:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801b354:	4b03      	ldr	r3, [pc, #12]	; (801b364 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	2010      	movs	r0, #16
 801b35a:	4798      	blx	r3
}
 801b35c:	bf00      	nop
 801b35e:	3708      	adds	r7, #8
 801b360:	46bd      	mov	sp, r7
 801b362:	bd80      	pop	{r7, pc}
 801b364:	20001b34 	.word	0x20001b34

0801b368 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801b368:	b580      	push	{r7, lr}
 801b36a:	b084      	sub	sp, #16
 801b36c:	af00      	add	r7, sp, #0
 801b36e:	4603      	mov	r3, r0
 801b370:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801b372:	f7ef f952 	bl	800a61a <RBI_IsDCDC>
 801b376:	4603      	mov	r3, r0
 801b378:	2b01      	cmp	r3, #1
 801b37a:	d112      	bne.n	801b3a2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801b37c:	f640 1023 	movw	r0, #2339	; 0x923
 801b380:	f7ff fe1e 	bl	801afc0 <SUBGRF_ReadRegister>
 801b384:	4603      	mov	r3, r0
 801b386:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801b388:	7bfb      	ldrb	r3, [r7, #15]
 801b38a:	f023 0306 	bic.w	r3, r3, #6
 801b38e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801b390:	7bfa      	ldrb	r2, [r7, #15]
 801b392:	79fb      	ldrb	r3, [r7, #7]
 801b394:	4313      	orrs	r3, r2
 801b396:	b2db      	uxtb	r3, r3
 801b398:	4619      	mov	r1, r3
 801b39a:	f640 1023 	movw	r0, #2339	; 0x923
 801b39e:	f7ff fdfb 	bl	801af98 <SUBGRF_WriteRegister>
  }
}
 801b3a2:	bf00      	nop
 801b3a4:	3710      	adds	r7, #16
 801b3a6:	46bd      	mov	sp, r7
 801b3a8:	bd80      	pop	{r7, pc}
	...

0801b3ac <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801b3ac:	b480      	push	{r7}
 801b3ae:	b085      	sub	sp, #20
 801b3b0:	af00      	add	r7, sp, #0
 801b3b2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	d101      	bne.n	801b3be <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801b3ba:	231f      	movs	r3, #31
 801b3bc:	e016      	b.n	801b3ec <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b3be:	2300      	movs	r3, #0
 801b3c0:	73fb      	strb	r3, [r7, #15]
 801b3c2:	e00f      	b.n	801b3e4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801b3c4:	7bfb      	ldrb	r3, [r7, #15]
 801b3c6:	4a0c      	ldr	r2, [pc, #48]	; (801b3f8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b3c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b3cc:	687a      	ldr	r2, [r7, #4]
 801b3ce:	429a      	cmp	r2, r3
 801b3d0:	d205      	bcs.n	801b3de <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801b3d2:	7bfb      	ldrb	r3, [r7, #15]
 801b3d4:	4a08      	ldr	r2, [pc, #32]	; (801b3f8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b3d6:	00db      	lsls	r3, r3, #3
 801b3d8:	4413      	add	r3, r2
 801b3da:	791b      	ldrb	r3, [r3, #4]
 801b3dc:	e006      	b.n	801b3ec <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b3de:	7bfb      	ldrb	r3, [r7, #15]
 801b3e0:	3301      	adds	r3, #1
 801b3e2:	73fb      	strb	r3, [r7, #15]
 801b3e4:	7bfb      	ldrb	r3, [r7, #15]
 801b3e6:	2b15      	cmp	r3, #21
 801b3e8:	d9ec      	bls.n	801b3c4 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801b3ea:	e7fe      	b.n	801b3ea <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	3714      	adds	r7, #20
 801b3f0:	46bd      	mov	sp, r7
 801b3f2:	bc80      	pop	{r7}
 801b3f4:	4770      	bx	lr
 801b3f6:	bf00      	nop
 801b3f8:	0801dcd4 	.word	0x0801dcd4

0801b3fc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801b3fc:	b580      	push	{r7, lr}
 801b3fe:	b08a      	sub	sp, #40	; 0x28
 801b400:	af00      	add	r7, sp, #0
 801b402:	6078      	str	r0, [r7, #4]
 801b404:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801b406:	4b35      	ldr	r3, [pc, #212]	; (801b4dc <SUBGRF_GetCFO+0xe0>)
 801b408:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801b40a:	f640 0007 	movw	r0, #2055	; 0x807
 801b40e:	f7ff fdd7 	bl	801afc0 <SUBGRF_ReadRegister>
 801b412:	4603      	mov	r3, r0
 801b414:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801b416:	7ffb      	ldrb	r3, [r7, #31]
 801b418:	08db      	lsrs	r3, r3, #3
 801b41a:	b2db      	uxtb	r3, r3
 801b41c:	f003 0303 	and.w	r3, r3, #3
 801b420:	3328      	adds	r3, #40	; 0x28
 801b422:	443b      	add	r3, r7
 801b424:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801b428:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801b42a:	7ffb      	ldrb	r3, [r7, #31]
 801b42c:	f003 0307 	and.w	r3, r3, #7
 801b430:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801b432:	7fba      	ldrb	r2, [r7, #30]
 801b434:	7f7b      	ldrb	r3, [r7, #29]
 801b436:	3b01      	subs	r3, #1
 801b438:	fa02 f303 	lsl.w	r3, r2, r3
 801b43c:	461a      	mov	r2, r3
 801b43e:	4b28      	ldr	r3, [pc, #160]	; (801b4e0 <SUBGRF_GetCFO+0xe4>)
 801b440:	fbb3 f3f2 	udiv	r3, r3, r2
 801b444:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801b446:	69ba      	ldr	r2, [r7, #24]
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	fbb2 f3f3 	udiv	r3, r2, r3
 801b44e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801b450:	2301      	movs	r3, #1
 801b452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801b456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b45a:	697a      	ldr	r2, [r7, #20]
 801b45c:	fb02 f303 	mul.w	r3, r2, r3
 801b460:	2b07      	cmp	r3, #7
 801b462:	d802      	bhi.n	801b46a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801b464:	2302      	movs	r3, #2
 801b466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801b46a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b46e:	697a      	ldr	r2, [r7, #20]
 801b470:	fb02 f303 	mul.w	r3, r2, r3
 801b474:	2b03      	cmp	r3, #3
 801b476:	d802      	bhi.n	801b47e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801b478:	2304      	movs	r3, #4
 801b47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801b47e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b482:	69bb      	ldr	r3, [r7, #24]
 801b484:	fb02 f303 	mul.w	r3, r2, r3
 801b488:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801b48a:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801b48e:	f7ff fd97 	bl	801afc0 <SUBGRF_ReadRegister>
 801b492:	4603      	mov	r3, r0
 801b494:	021b      	lsls	r3, r3, #8
 801b496:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801b49a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801b49c:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801b4a0:	f7ff fd8e 	bl	801afc0 <SUBGRF_ReadRegister>
 801b4a4:	4603      	mov	r3, r0
 801b4a6:	461a      	mov	r2, r3
 801b4a8:	6a3b      	ldr	r3, [r7, #32]
 801b4aa:	4313      	orrs	r3, r2
 801b4ac:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801b4ae:	6a3b      	ldr	r3, [r7, #32]
 801b4b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	d005      	beq.n	801b4c4 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801b4b8:	6a3b      	ldr	r3, [r7, #32]
 801b4ba:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801b4be:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801b4c2:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801b4c4:	693b      	ldr	r3, [r7, #16]
 801b4c6:	095b      	lsrs	r3, r3, #5
 801b4c8:	6a3a      	ldr	r2, [r7, #32]
 801b4ca:	fb02 f303 	mul.w	r3, r2, r3
 801b4ce:	11da      	asrs	r2, r3, #7
 801b4d0:	683b      	ldr	r3, [r7, #0]
 801b4d2:	601a      	str	r2, [r3, #0]
}
 801b4d4:	bf00      	nop
 801b4d6:	3728      	adds	r7, #40	; 0x28
 801b4d8:	46bd      	mov	sp, r7
 801b4da:	bd80      	pop	{r7, pc}
 801b4dc:	0c0a0804 	.word	0x0c0a0804
 801b4e0:	01e84800 	.word	0x01e84800

0801b4e4 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801b4e4:	b480      	push	{r7}
 801b4e6:	b087      	sub	sp, #28
 801b4e8:	af00      	add	r7, sp, #0
 801b4ea:	4603      	mov	r3, r0
 801b4ec:	60b9      	str	r1, [r7, #8]
 801b4ee:	607a      	str	r2, [r7, #4]
 801b4f0:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801b4f2:	2300      	movs	r3, #0
 801b4f4:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801b4f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b4fa:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b4fc:	697b      	ldr	r3, [r7, #20]
}
 801b4fe:	4618      	mov	r0, r3
 801b500:	371c      	adds	r7, #28
 801b502:	46bd      	mov	sp, r7
 801b504:	bc80      	pop	{r7}
 801b506:	4770      	bx	lr

0801b508 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801b508:	b480      	push	{r7}
 801b50a:	b087      	sub	sp, #28
 801b50c:	af00      	add	r7, sp, #0
 801b50e:	4603      	mov	r3, r0
 801b510:	60b9      	str	r1, [r7, #8]
 801b512:	607a      	str	r2, [r7, #4]
 801b514:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801b516:	2300      	movs	r3, #0
 801b518:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801b51a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b51e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b520:	697b      	ldr	r3, [r7, #20]
}
 801b522:	4618      	mov	r0, r3
 801b524:	371c      	adds	r7, #28
 801b526:	46bd      	mov	sp, r7
 801b528:	bc80      	pop	{r7}
 801b52a:	4770      	bx	lr

0801b52c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801b52c:	b480      	push	{r7}
 801b52e:	b085      	sub	sp, #20
 801b530:	af00      	add	r7, sp, #0
 801b532:	60f8      	str	r0, [r7, #12]
 801b534:	60b9      	str	r1, [r7, #8]
 801b536:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801b538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 801b53c:	4618      	mov	r0, r3
 801b53e:	3714      	adds	r7, #20
 801b540:	46bd      	mov	sp, r7
 801b542:	bc80      	pop	{r7}
 801b544:	4770      	bx	lr

0801b546 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801b546:	b480      	push	{r7}
 801b548:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801b54a:	bf00      	nop
 801b54c:	46bd      	mov	sp, r7
 801b54e:	bc80      	pop	{r7}
 801b550:	4770      	bx	lr

0801b552 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801b552:	b480      	push	{r7}
 801b554:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801b556:	2300      	movs	r3, #0
#endif
}
 801b558:	4618      	mov	r0, r3
 801b55a:	46bd      	mov	sp, r7
 801b55c:	bc80      	pop	{r7}
 801b55e:	4770      	bx	lr

0801b560 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801b560:	b480      	push	{r7}
 801b562:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801b564:	2300      	movs	r3, #0
#endif
}
 801b566:	4618      	mov	r0, r3
 801b568:	46bd      	mov	sp, r7
 801b56a:	bc80      	pop	{r7}
 801b56c:	4770      	bx	lr

0801b56e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801b56e:	b480      	push	{r7}
 801b570:	b083      	sub	sp, #12
 801b572:	af00      	add	r7, sp, #0
 801b574:	4603      	mov	r3, r0
 801b576:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801b578:	bf00      	nop
 801b57a:	370c      	adds	r7, #12
 801b57c:	46bd      	mov	sp, r7
 801b57e:	bc80      	pop	{r7}
 801b580:	4770      	bx	lr

0801b582 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801b582:	b480      	push	{r7}
 801b584:	b087      	sub	sp, #28
 801b586:	af00      	add	r7, sp, #0
 801b588:	60f8      	str	r0, [r7, #12]
 801b58a:	460b      	mov	r3, r1
 801b58c:	607a      	str	r2, [r7, #4]
 801b58e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801b590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b594:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801b596:	697b      	ldr	r3, [r7, #20]
}
 801b598:	4618      	mov	r0, r3
 801b59a:	371c      	adds	r7, #28
 801b59c:	46bd      	mov	sp, r7
 801b59e:	bc80      	pop	{r7}
 801b5a0:	4770      	bx	lr

0801b5a2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801b5a2:	b480      	push	{r7}
 801b5a4:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801b5a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 801b5aa:	4618      	mov	r0, r3
 801b5ac:	46bd      	mov	sp, r7
 801b5ae:	bc80      	pop	{r7}
 801b5b0:	4770      	bx	lr

0801b5b2 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801b5b2:	b480      	push	{r7}
 801b5b4:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801b5b6:	bf00      	nop
 801b5b8:	46bd      	mov	sp, r7
 801b5ba:	bc80      	pop	{r7}
 801b5bc:	4770      	bx	lr

0801b5be <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801b5be:	b480      	push	{r7}
 801b5c0:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801b5c2:	bf00      	nop
 801b5c4:	46bd      	mov	sp, r7
 801b5c6:	bc80      	pop	{r7}
 801b5c8:	4770      	bx	lr

0801b5ca <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801b5ca:	b480      	push	{r7}
 801b5cc:	b083      	sub	sp, #12
 801b5ce:	af00      	add	r7, sp, #0
 801b5d0:	4603      	mov	r3, r0
 801b5d2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801b5d4:	bf00      	nop
 801b5d6:	370c      	adds	r7, #12
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	bc80      	pop	{r7}
 801b5dc:	4770      	bx	lr
	...

0801b5e0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801b5e0:	b480      	push	{r7}
 801b5e2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801b5e4:	4b04      	ldr	r3, [pc, #16]	; (801b5f8 <UTIL_LPM_Init+0x18>)
 801b5e6:	2200      	movs	r2, #0
 801b5e8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801b5ea:	4b04      	ldr	r3, [pc, #16]	; (801b5fc <UTIL_LPM_Init+0x1c>)
 801b5ec:	2200      	movs	r2, #0
 801b5ee:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801b5f0:	bf00      	nop
 801b5f2:	46bd      	mov	sp, r7
 801b5f4:	bc80      	pop	{r7}
 801b5f6:	4770      	bx	lr
 801b5f8:	20001b38 	.word	0x20001b38
 801b5fc:	20001b3c 	.word	0x20001b3c

0801b600 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b600:	b480      	push	{r7}
 801b602:	b087      	sub	sp, #28
 801b604:	af00      	add	r7, sp, #0
 801b606:	6078      	str	r0, [r7, #4]
 801b608:	460b      	mov	r3, r1
 801b60a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b60c:	f3ef 8310 	mrs	r3, PRIMASK
 801b610:	613b      	str	r3, [r7, #16]
  return(result);
 801b612:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b614:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b616:	b672      	cpsid	i
}
 801b618:	bf00      	nop
  
  switch( state )
 801b61a:	78fb      	ldrb	r3, [r7, #3]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d008      	beq.n	801b632 <UTIL_LPM_SetStopMode+0x32>
 801b620:	2b01      	cmp	r3, #1
 801b622:	d10e      	bne.n	801b642 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801b624:	4b0d      	ldr	r3, [pc, #52]	; (801b65c <UTIL_LPM_SetStopMode+0x5c>)
 801b626:	681a      	ldr	r2, [r3, #0]
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	4313      	orrs	r3, r2
 801b62c:	4a0b      	ldr	r2, [pc, #44]	; (801b65c <UTIL_LPM_SetStopMode+0x5c>)
 801b62e:	6013      	str	r3, [r2, #0]
      break;
 801b630:	e008      	b.n	801b644 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	43da      	mvns	r2, r3
 801b636:	4b09      	ldr	r3, [pc, #36]	; (801b65c <UTIL_LPM_SetStopMode+0x5c>)
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	4013      	ands	r3, r2
 801b63c:	4a07      	ldr	r2, [pc, #28]	; (801b65c <UTIL_LPM_SetStopMode+0x5c>)
 801b63e:	6013      	str	r3, [r2, #0]
      break;
 801b640:	e000      	b.n	801b644 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801b642:	bf00      	nop
 801b644:	697b      	ldr	r3, [r7, #20]
 801b646:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b648:	68fb      	ldr	r3, [r7, #12]
 801b64a:	f383 8810 	msr	PRIMASK, r3
}
 801b64e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b650:	bf00      	nop
 801b652:	371c      	adds	r7, #28
 801b654:	46bd      	mov	sp, r7
 801b656:	bc80      	pop	{r7}
 801b658:	4770      	bx	lr
 801b65a:	bf00      	nop
 801b65c:	20001b38 	.word	0x20001b38

0801b660 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b660:	b480      	push	{r7}
 801b662:	b087      	sub	sp, #28
 801b664:	af00      	add	r7, sp, #0
 801b666:	6078      	str	r0, [r7, #4]
 801b668:	460b      	mov	r3, r1
 801b66a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b66c:	f3ef 8310 	mrs	r3, PRIMASK
 801b670:	613b      	str	r3, [r7, #16]
  return(result);
 801b672:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b674:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b676:	b672      	cpsid	i
}
 801b678:	bf00      	nop
  
  switch(state)
 801b67a:	78fb      	ldrb	r3, [r7, #3]
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d008      	beq.n	801b692 <UTIL_LPM_SetOffMode+0x32>
 801b680:	2b01      	cmp	r3, #1
 801b682:	d10e      	bne.n	801b6a2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801b684:	4b0d      	ldr	r3, [pc, #52]	; (801b6bc <UTIL_LPM_SetOffMode+0x5c>)
 801b686:	681a      	ldr	r2, [r3, #0]
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	4313      	orrs	r3, r2
 801b68c:	4a0b      	ldr	r2, [pc, #44]	; (801b6bc <UTIL_LPM_SetOffMode+0x5c>)
 801b68e:	6013      	str	r3, [r2, #0]
      break;
 801b690:	e008      	b.n	801b6a4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	43da      	mvns	r2, r3
 801b696:	4b09      	ldr	r3, [pc, #36]	; (801b6bc <UTIL_LPM_SetOffMode+0x5c>)
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	4013      	ands	r3, r2
 801b69c:	4a07      	ldr	r2, [pc, #28]	; (801b6bc <UTIL_LPM_SetOffMode+0x5c>)
 801b69e:	6013      	str	r3, [r2, #0]
      break;
 801b6a0:	e000      	b.n	801b6a4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801b6a2:	bf00      	nop
 801b6a4:	697b      	ldr	r3, [r7, #20]
 801b6a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	f383 8810 	msr	PRIMASK, r3
}
 801b6ae:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b6b0:	bf00      	nop
 801b6b2:	371c      	adds	r7, #28
 801b6b4:	46bd      	mov	sp, r7
 801b6b6:	bc80      	pop	{r7}
 801b6b8:	4770      	bx	lr
 801b6ba:	bf00      	nop
 801b6bc:	20001b3c 	.word	0x20001b3c

0801b6c0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801b6c0:	b580      	push	{r7, lr}
 801b6c2:	b084      	sub	sp, #16
 801b6c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b6c6:	f3ef 8310 	mrs	r3, PRIMASK
 801b6ca:	60bb      	str	r3, [r7, #8]
  return(result);
 801b6cc:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801b6ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b6d0:	b672      	cpsid	i
}
 801b6d2:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801b6d4:	4b12      	ldr	r3, [pc, #72]	; (801b720 <UTIL_LPM_EnterLowPower+0x60>)
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d006      	beq.n	801b6ea <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801b6dc:	4b11      	ldr	r3, [pc, #68]	; (801b724 <UTIL_LPM_EnterLowPower+0x64>)
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801b6e2:	4b10      	ldr	r3, [pc, #64]	; (801b724 <UTIL_LPM_EnterLowPower+0x64>)
 801b6e4:	685b      	ldr	r3, [r3, #4]
 801b6e6:	4798      	blx	r3
 801b6e8:	e010      	b.n	801b70c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801b6ea:	4b0f      	ldr	r3, [pc, #60]	; (801b728 <UTIL_LPM_EnterLowPower+0x68>)
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d006      	beq.n	801b700 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801b6f2:	4b0c      	ldr	r3, [pc, #48]	; (801b724 <UTIL_LPM_EnterLowPower+0x64>)
 801b6f4:	689b      	ldr	r3, [r3, #8]
 801b6f6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801b6f8:	4b0a      	ldr	r3, [pc, #40]	; (801b724 <UTIL_LPM_EnterLowPower+0x64>)
 801b6fa:	68db      	ldr	r3, [r3, #12]
 801b6fc:	4798      	blx	r3
 801b6fe:	e005      	b.n	801b70c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801b700:	4b08      	ldr	r3, [pc, #32]	; (801b724 <UTIL_LPM_EnterLowPower+0x64>)
 801b702:	691b      	ldr	r3, [r3, #16]
 801b704:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801b706:	4b07      	ldr	r3, [pc, #28]	; (801b724 <UTIL_LPM_EnterLowPower+0x64>)
 801b708:	695b      	ldr	r3, [r3, #20]
 801b70a:	4798      	blx	r3
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	f383 8810 	msr	PRIMASK, r3
}
 801b716:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801b718:	bf00      	nop
 801b71a:	3710      	adds	r7, #16
 801b71c:	46bd      	mov	sp, r7
 801b71e:	bd80      	pop	{r7, pc}
 801b720:	20001b38 	.word	0x20001b38
 801b724:	0801d750 	.word	0x0801d750
 801b728:	20001b3c 	.word	0x20001b3c

0801b72c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801b72c:	b480      	push	{r7}
 801b72e:	b087      	sub	sp, #28
 801b730:	af00      	add	r7, sp, #0
 801b732:	60f8      	str	r0, [r7, #12]
 801b734:	60b9      	str	r1, [r7, #8]
 801b736:	4613      	mov	r3, r2
 801b738:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801b73a:	68fb      	ldr	r3, [r7, #12]
 801b73c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801b73e:	68bb      	ldr	r3, [r7, #8]
 801b740:	613b      	str	r3, [r7, #16]

  while( size-- )
 801b742:	e007      	b.n	801b754 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801b744:	693a      	ldr	r2, [r7, #16]
 801b746:	1c53      	adds	r3, r2, #1
 801b748:	613b      	str	r3, [r7, #16]
 801b74a:	697b      	ldr	r3, [r7, #20]
 801b74c:	1c59      	adds	r1, r3, #1
 801b74e:	6179      	str	r1, [r7, #20]
 801b750:	7812      	ldrb	r2, [r2, #0]
 801b752:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b754:	88fb      	ldrh	r3, [r7, #6]
 801b756:	1e5a      	subs	r2, r3, #1
 801b758:	80fa      	strh	r2, [r7, #6]
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d1f2      	bne.n	801b744 <UTIL_MEM_cpy_8+0x18>
    }
}
 801b75e:	bf00      	nop
 801b760:	bf00      	nop
 801b762:	371c      	adds	r7, #28
 801b764:	46bd      	mov	sp, r7
 801b766:	bc80      	pop	{r7}
 801b768:	4770      	bx	lr

0801b76a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801b76a:	b480      	push	{r7}
 801b76c:	b085      	sub	sp, #20
 801b76e:	af00      	add	r7, sp, #0
 801b770:	6078      	str	r0, [r7, #4]
 801b772:	460b      	mov	r3, r1
 801b774:	70fb      	strb	r3, [r7, #3]
 801b776:	4613      	mov	r3, r2
 801b778:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801b77e:	e004      	b.n	801b78a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801b780:	68fb      	ldr	r3, [r7, #12]
 801b782:	1c5a      	adds	r2, r3, #1
 801b784:	60fa      	str	r2, [r7, #12]
 801b786:	78fa      	ldrb	r2, [r7, #3]
 801b788:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b78a:	883b      	ldrh	r3, [r7, #0]
 801b78c:	1e5a      	subs	r2, r3, #1
 801b78e:	803a      	strh	r2, [r7, #0]
 801b790:	2b00      	cmp	r3, #0
 801b792:	d1f5      	bne.n	801b780 <UTIL_MEM_set_8+0x16>
  }
}
 801b794:	bf00      	nop
 801b796:	bf00      	nop
 801b798:	3714      	adds	r7, #20
 801b79a:	46bd      	mov	sp, r7
 801b79c:	bc80      	pop	{r7}
 801b79e:	4770      	bx	lr

0801b7a0 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801b7a0:	b082      	sub	sp, #8
 801b7a2:	b480      	push	{r7}
 801b7a4:	b087      	sub	sp, #28
 801b7a6:	af00      	add	r7, sp, #0
 801b7a8:	60f8      	str	r0, [r7, #12]
 801b7aa:	1d38      	adds	r0, r7, #4
 801b7ac:	e880 0006 	stmia.w	r0, {r1, r2}
 801b7b0:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801b7b2:	2300      	movs	r3, #0
 801b7b4:	613b      	str	r3, [r7, #16]
 801b7b6:	2300      	movs	r3, #0
 801b7b8:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801b7ba:	687a      	ldr	r2, [r7, #4]
 801b7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7be:	4413      	add	r3, r2
 801b7c0:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801b7c2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b7c6:	b29a      	uxth	r2, r3
 801b7c8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801b7cc:	b29b      	uxth	r3, r3
 801b7ce:	4413      	add	r3, r2
 801b7d0:	b29b      	uxth	r3, r3
 801b7d2:	b21b      	sxth	r3, r3
 801b7d4:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801b7d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b7da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b7de:	db0a      	blt.n	801b7f6 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801b7e0:	693b      	ldr	r3, [r7, #16]
 801b7e2:	3301      	adds	r3, #1
 801b7e4:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801b7e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b7ea:	b29b      	uxth	r3, r3
 801b7ec:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801b7f0:	b29b      	uxth	r3, r3
 801b7f2:	b21b      	sxth	r3, r3
 801b7f4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b7f6:	68fb      	ldr	r3, [r7, #12]
 801b7f8:	461a      	mov	r2, r3
 801b7fa:	f107 0310 	add.w	r3, r7, #16
 801b7fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b802:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b806:	68f8      	ldr	r0, [r7, #12]
 801b808:	371c      	adds	r7, #28
 801b80a:	46bd      	mov	sp, r7
 801b80c:	bc80      	pop	{r7}
 801b80e:	b002      	add	sp, #8
 801b810:	4770      	bx	lr

0801b812 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801b812:	b082      	sub	sp, #8
 801b814:	b480      	push	{r7}
 801b816:	b087      	sub	sp, #28
 801b818:	af00      	add	r7, sp, #0
 801b81a:	60f8      	str	r0, [r7, #12]
 801b81c:	1d38      	adds	r0, r7, #4
 801b81e:	e880 0006 	stmia.w	r0, {r1, r2}
 801b822:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801b824:	2300      	movs	r3, #0
 801b826:	613b      	str	r3, [r7, #16]
 801b828:	2300      	movs	r3, #0
 801b82a:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801b82c:	687a      	ldr	r2, [r7, #4]
 801b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b830:	1ad3      	subs	r3, r2, r3
 801b832:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801b834:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b838:	b29a      	uxth	r2, r3
 801b83a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801b83e:	b29b      	uxth	r3, r3
 801b840:	1ad3      	subs	r3, r2, r3
 801b842:	b29b      	uxth	r3, r3
 801b844:	b21b      	sxth	r3, r3
 801b846:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801b848:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	da0a      	bge.n	801b866 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801b850:	693b      	ldr	r3, [r7, #16]
 801b852:	3b01      	subs	r3, #1
 801b854:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801b856:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b85a:	b29b      	uxth	r3, r3
 801b85c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801b860:	b29b      	uxth	r3, r3
 801b862:	b21b      	sxth	r3, r3
 801b864:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	461a      	mov	r2, r3
 801b86a:	f107 0310 	add.w	r3, r7, #16
 801b86e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b872:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b876:	68f8      	ldr	r0, [r7, #12]
 801b878:	371c      	adds	r7, #28
 801b87a:	46bd      	mov	sp, r7
 801b87c:	bc80      	pop	{r7}
 801b87e:	b002      	add	sp, #8
 801b880:	4770      	bx	lr
	...

0801b884 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801b884:	b580      	push	{r7, lr}
 801b886:	b088      	sub	sp, #32
 801b888:	af02      	add	r7, sp, #8
 801b88a:	463b      	mov	r3, r7
 801b88c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b890:	2300      	movs	r3, #0
 801b892:	60bb      	str	r3, [r7, #8]
 801b894:	2300      	movs	r3, #0
 801b896:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b898:	4b10      	ldr	r3, [pc, #64]	; (801b8dc <SysTimeSet+0x58>)
 801b89a:	691b      	ldr	r3, [r3, #16]
 801b89c:	f107 0208 	add.w	r2, r7, #8
 801b8a0:	3204      	adds	r2, #4
 801b8a2:	4610      	mov	r0, r2
 801b8a4:	4798      	blx	r3
 801b8a6:	4603      	mov	r3, r0
 801b8a8:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801b8aa:	f107 0010 	add.w	r0, r7, #16
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	9300      	str	r3, [sp, #0]
 801b8b2:	68bb      	ldr	r3, [r7, #8]
 801b8b4:	463a      	mov	r2, r7
 801b8b6:	ca06      	ldmia	r2, {r1, r2}
 801b8b8:	f7ff ffab 	bl	801b812 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801b8bc:	4b07      	ldr	r3, [pc, #28]	; (801b8dc <SysTimeSet+0x58>)
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	693a      	ldr	r2, [r7, #16]
 801b8c2:	4610      	mov	r0, r2
 801b8c4:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801b8c6:	4b05      	ldr	r3, [pc, #20]	; (801b8dc <SysTimeSet+0x58>)
 801b8c8:	689b      	ldr	r3, [r3, #8]
 801b8ca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b8ce:	4610      	mov	r0, r2
 801b8d0:	4798      	blx	r3
}
 801b8d2:	bf00      	nop
 801b8d4:	3718      	adds	r7, #24
 801b8d6:	46bd      	mov	sp, r7
 801b8d8:	bd80      	pop	{r7, pc}
 801b8da:	bf00      	nop
 801b8dc:	0801d834 	.word	0x0801d834

0801b8e0 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801b8e0:	b580      	push	{r7, lr}
 801b8e2:	b08a      	sub	sp, #40	; 0x28
 801b8e4:	af02      	add	r7, sp, #8
 801b8e6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b8e8:	2300      	movs	r3, #0
 801b8ea:	61bb      	str	r3, [r7, #24]
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801b8f0:	2300      	movs	r3, #0
 801b8f2:	613b      	str	r3, [r7, #16]
 801b8f4:	2300      	movs	r3, #0
 801b8f6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b8f8:	4b14      	ldr	r3, [pc, #80]	; (801b94c <SysTimeGet+0x6c>)
 801b8fa:	691b      	ldr	r3, [r3, #16]
 801b8fc:	f107 0218 	add.w	r2, r7, #24
 801b900:	3204      	adds	r2, #4
 801b902:	4610      	mov	r0, r2
 801b904:	4798      	blx	r3
 801b906:	4603      	mov	r3, r0
 801b908:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b90a:	4b10      	ldr	r3, [pc, #64]	; (801b94c <SysTimeGet+0x6c>)
 801b90c:	68db      	ldr	r3, [r3, #12]
 801b90e:	4798      	blx	r3
 801b910:	4603      	mov	r3, r0
 801b912:	b21b      	sxth	r3, r3
 801b914:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b916:	4b0d      	ldr	r3, [pc, #52]	; (801b94c <SysTimeGet+0x6c>)
 801b918:	685b      	ldr	r3, [r3, #4]
 801b91a:	4798      	blx	r3
 801b91c:	4603      	mov	r3, r0
 801b91e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801b920:	f107 0010 	add.w	r0, r7, #16
 801b924:	69fb      	ldr	r3, [r7, #28]
 801b926:	9300      	str	r3, [sp, #0]
 801b928:	69bb      	ldr	r3, [r7, #24]
 801b92a:	f107 0208 	add.w	r2, r7, #8
 801b92e:	ca06      	ldmia	r2, {r1, r2}
 801b930:	f7ff ff36 	bl	801b7a0 <SysTimeAdd>

  return sysTime;
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	461a      	mov	r2, r3
 801b938:	f107 0310 	add.w	r3, r7, #16
 801b93c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b940:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b944:	6878      	ldr	r0, [r7, #4]
 801b946:	3720      	adds	r7, #32
 801b948:	46bd      	mov	sp, r7
 801b94a:	bd80      	pop	{r7, pc}
 801b94c:	0801d834 	.word	0x0801d834

0801b950 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801b950:	b580      	push	{r7, lr}
 801b952:	b084      	sub	sp, #16
 801b954:	af00      	add	r7, sp, #0
 801b956:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b958:	2300      	movs	r3, #0
 801b95a:	60bb      	str	r3, [r7, #8]
 801b95c:	2300      	movs	r3, #0
 801b95e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b960:	4b0a      	ldr	r3, [pc, #40]	; (801b98c <SysTimeGetMcuTime+0x3c>)
 801b962:	691b      	ldr	r3, [r3, #16]
 801b964:	f107 0208 	add.w	r2, r7, #8
 801b968:	3204      	adds	r2, #4
 801b96a:	4610      	mov	r0, r2
 801b96c:	4798      	blx	r3
 801b96e:	4603      	mov	r3, r0
 801b970:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	461a      	mov	r2, r3
 801b976:	f107 0308 	add.w	r3, r7, #8
 801b97a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b97e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b982:	6878      	ldr	r0, [r7, #4]
 801b984:	3710      	adds	r7, #16
 801b986:	46bd      	mov	sp, r7
 801b988:	bd80      	pop	{r7, pc}
 801b98a:	bf00      	nop
 801b98c:	0801d834 	.word	0x0801d834

0801b990 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801b990:	b580      	push	{r7, lr}
 801b992:	b088      	sub	sp, #32
 801b994:	af02      	add	r7, sp, #8
 801b996:	463b      	mov	r3, r7
 801b998:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b99c:	4b0f      	ldr	r3, [pc, #60]	; (801b9dc <SysTimeToMs+0x4c>)
 801b99e:	68db      	ldr	r3, [r3, #12]
 801b9a0:	4798      	blx	r3
 801b9a2:	4603      	mov	r3, r0
 801b9a4:	b21b      	sxth	r3, r3
 801b9a6:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b9a8:	4b0c      	ldr	r3, [pc, #48]	; (801b9dc <SysTimeToMs+0x4c>)
 801b9aa:	685b      	ldr	r3, [r3, #4]
 801b9ac:	4798      	blx	r3
 801b9ae:	4603      	mov	r3, r0
 801b9b0:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801b9b2:	f107 0008 	add.w	r0, r7, #8
 801b9b6:	697b      	ldr	r3, [r7, #20]
 801b9b8:	9300      	str	r3, [sp, #0]
 801b9ba:	693b      	ldr	r3, [r7, #16]
 801b9bc:	463a      	mov	r2, r7
 801b9be:	ca06      	ldmia	r2, {r1, r2}
 801b9c0:	f7ff ff27 	bl	801b812 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801b9c4:	68bb      	ldr	r3, [r7, #8]
 801b9c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b9ca:	fb02 f303 	mul.w	r3, r2, r3
 801b9ce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801b9d2:	4413      	add	r3, r2
}
 801b9d4:	4618      	mov	r0, r3
 801b9d6:	3718      	adds	r7, #24
 801b9d8:	46bd      	mov	sp, r7
 801b9da:	bd80      	pop	{r7, pc}
 801b9dc:	0801d834 	.word	0x0801d834

0801b9e0 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801b9e0:	b580      	push	{r7, lr}
 801b9e2:	b08a      	sub	sp, #40	; 0x28
 801b9e4:	af02      	add	r7, sp, #8
 801b9e6:	6078      	str	r0, [r7, #4]
 801b9e8:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801b9ea:	683b      	ldr	r3, [r7, #0]
 801b9ec:	4a19      	ldr	r2, [pc, #100]	; (801ba54 <SysTimeFromMs+0x74>)
 801b9ee:	fba2 2303 	umull	r2, r3, r2, r3
 801b9f2:	099b      	lsrs	r3, r3, #6
 801b9f4:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801b9f6:	69fb      	ldr	r3, [r7, #28]
 801b9f8:	617b      	str	r3, [r7, #20]
 801b9fa:	683b      	ldr	r3, [r7, #0]
 801b9fc:	b29a      	uxth	r2, r3
 801b9fe:	69fb      	ldr	r3, [r7, #28]
 801ba00:	b29b      	uxth	r3, r3
 801ba02:	4619      	mov	r1, r3
 801ba04:	0149      	lsls	r1, r1, #5
 801ba06:	1ac9      	subs	r1, r1, r3
 801ba08:	0089      	lsls	r1, r1, #2
 801ba0a:	440b      	add	r3, r1
 801ba0c:	00db      	lsls	r3, r3, #3
 801ba0e:	b29b      	uxth	r3, r3
 801ba10:	1ad3      	subs	r3, r2, r3
 801ba12:	b29b      	uxth	r3, r3
 801ba14:	b21b      	sxth	r3, r3
 801ba16:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801ba18:	f107 030c 	add.w	r3, r7, #12
 801ba1c:	2200      	movs	r2, #0
 801ba1e:	601a      	str	r2, [r3, #0]
 801ba20:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ba22:	4b0d      	ldr	r3, [pc, #52]	; (801ba58 <SysTimeFromMs+0x78>)
 801ba24:	68db      	ldr	r3, [r3, #12]
 801ba26:	4798      	blx	r3
 801ba28:	4603      	mov	r3, r0
 801ba2a:	b21b      	sxth	r3, r3
 801ba2c:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ba2e:	4b0a      	ldr	r3, [pc, #40]	; (801ba58 <SysTimeFromMs+0x78>)
 801ba30:	685b      	ldr	r3, [r3, #4]
 801ba32:	4798      	blx	r3
 801ba34:	4603      	mov	r3, r0
 801ba36:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801ba38:	6878      	ldr	r0, [r7, #4]
 801ba3a:	693b      	ldr	r3, [r7, #16]
 801ba3c:	9300      	str	r3, [sp, #0]
 801ba3e:	68fb      	ldr	r3, [r7, #12]
 801ba40:	f107 0214 	add.w	r2, r7, #20
 801ba44:	ca06      	ldmia	r2, {r1, r2}
 801ba46:	f7ff feab 	bl	801b7a0 <SysTimeAdd>
}
 801ba4a:	6878      	ldr	r0, [r7, #4]
 801ba4c:	3720      	adds	r7, #32
 801ba4e:	46bd      	mov	sp, r7
 801ba50:	bd80      	pop	{r7, pc}
 801ba52:	bf00      	nop
 801ba54:	10624dd3 	.word	0x10624dd3
 801ba58:	0801d834 	.word	0x0801d834

0801ba5c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801ba5c:	b480      	push	{r7}
 801ba5e:	b085      	sub	sp, #20
 801ba60:	af00      	add	r7, sp, #0
 801ba62:	6078      	str	r0, [r7, #4]
  int i = 0;
 801ba64:	2300      	movs	r3, #0
 801ba66:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801ba68:	e00e      	b.n	801ba88 <ee_skip_atoi+0x2c>
 801ba6a:	68fa      	ldr	r2, [r7, #12]
 801ba6c:	4613      	mov	r3, r2
 801ba6e:	009b      	lsls	r3, r3, #2
 801ba70:	4413      	add	r3, r2
 801ba72:	005b      	lsls	r3, r3, #1
 801ba74:	4618      	mov	r0, r3
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	1c59      	adds	r1, r3, #1
 801ba7c:	687a      	ldr	r2, [r7, #4]
 801ba7e:	6011      	str	r1, [r2, #0]
 801ba80:	781b      	ldrb	r3, [r3, #0]
 801ba82:	4403      	add	r3, r0
 801ba84:	3b30      	subs	r3, #48	; 0x30
 801ba86:	60fb      	str	r3, [r7, #12]
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	681b      	ldr	r3, [r3, #0]
 801ba8c:	781b      	ldrb	r3, [r3, #0]
 801ba8e:	2b2f      	cmp	r3, #47	; 0x2f
 801ba90:	d904      	bls.n	801ba9c <ee_skip_atoi+0x40>
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	781b      	ldrb	r3, [r3, #0]
 801ba98:	2b39      	cmp	r3, #57	; 0x39
 801ba9a:	d9e6      	bls.n	801ba6a <ee_skip_atoi+0xe>
  return i;
 801ba9c:	68fb      	ldr	r3, [r7, #12]
}
 801ba9e:	4618      	mov	r0, r3
 801baa0:	3714      	adds	r7, #20
 801baa2:	46bd      	mov	sp, r7
 801baa4:	bc80      	pop	{r7}
 801baa6:	4770      	bx	lr

0801baa8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801baa8:	b480      	push	{r7}
 801baaa:	b099      	sub	sp, #100	; 0x64
 801baac:	af00      	add	r7, sp, #0
 801baae:	60f8      	str	r0, [r7, #12]
 801bab0:	60b9      	str	r1, [r7, #8]
 801bab2:	607a      	str	r2, [r7, #4]
 801bab4:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801bab6:	4b71      	ldr	r3, [pc, #452]	; (801bc7c <ee_number+0x1d4>)
 801bab8:	681b      	ldr	r3, [r3, #0]
 801baba:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801babc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801babe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d002      	beq.n	801bacc <ee_number+0x24>
 801bac6:	4b6e      	ldr	r3, [pc, #440]	; (801bc80 <ee_number+0x1d8>)
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801bacc:	683b      	ldr	r3, [r7, #0]
 801bace:	2b01      	cmp	r3, #1
 801bad0:	dd02      	ble.n	801bad8 <ee_number+0x30>
 801bad2:	683b      	ldr	r3, [r7, #0]
 801bad4:	2b24      	cmp	r3, #36	; 0x24
 801bad6:	dd01      	ble.n	801badc <ee_number+0x34>
 801bad8:	2300      	movs	r3, #0
 801bada:	e0ca      	b.n	801bc72 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801badc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bade:	f003 0301 	and.w	r3, r3, #1
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d001      	beq.n	801baea <ee_number+0x42>
 801bae6:	2330      	movs	r3, #48	; 0x30
 801bae8:	e000      	b.n	801baec <ee_number+0x44>
 801baea:	2320      	movs	r3, #32
 801baec:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801baf0:	2300      	movs	r3, #0
 801baf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801baf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801baf8:	f003 0302 	and.w	r3, r3, #2
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d00b      	beq.n	801bb18 <ee_number+0x70>
  {
    if (num < 0)
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	da08      	bge.n	801bb18 <ee_number+0x70>
    {
      sign = '-';
 801bb06:	232d      	movs	r3, #45	; 0x2d
 801bb08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	425b      	negs	r3, r3
 801bb10:	607b      	str	r3, [r7, #4]
      size--;
 801bb12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bb14:	3b01      	subs	r3, #1
 801bb16:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801bb18:	2300      	movs	r3, #0
 801bb1a:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d11e      	bne.n	801bb60 <ee_number+0xb8>
    tmp[i++] = '0';
 801bb22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bb24:	1c5a      	adds	r2, r3, #1
 801bb26:	657a      	str	r2, [r7, #84]	; 0x54
 801bb28:	3360      	adds	r3, #96	; 0x60
 801bb2a:	443b      	add	r3, r7
 801bb2c:	2230      	movs	r2, #48	; 0x30
 801bb2e:	f803 2c50 	strb.w	r2, [r3, #-80]
 801bb32:	e018      	b.n	801bb66 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	683a      	ldr	r2, [r7, #0]
 801bb38:	fbb3 f1f2 	udiv	r1, r3, r2
 801bb3c:	fb01 f202 	mul.w	r2, r1, r2
 801bb40:	1a9b      	subs	r3, r3, r2
 801bb42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bb44:	441a      	add	r2, r3
 801bb46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bb48:	1c59      	adds	r1, r3, #1
 801bb4a:	6579      	str	r1, [r7, #84]	; 0x54
 801bb4c:	7812      	ldrb	r2, [r2, #0]
 801bb4e:	3360      	adds	r3, #96	; 0x60
 801bb50:	443b      	add	r3, r7
 801bb52:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801bb56:	687a      	ldr	r2, [r7, #4]
 801bb58:	683b      	ldr	r3, [r7, #0]
 801bb5a:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb5e:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d1e6      	bne.n	801bb34 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801bb66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bb68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bb6a:	429a      	cmp	r2, r3
 801bb6c:	dd01      	ble.n	801bb72 <ee_number+0xca>
 801bb6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bb70:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801bb72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801bb74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bb76:	1ad3      	subs	r3, r2, r3
 801bb78:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801bb7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bb7c:	f003 0301 	and.w	r3, r3, #1
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d112      	bne.n	801bbaa <ee_number+0x102>
 801bb84:	e00c      	b.n	801bba0 <ee_number+0xf8>
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	1c5a      	adds	r2, r3, #1
 801bb8a:	60fa      	str	r2, [r7, #12]
 801bb8c:	2220      	movs	r2, #32
 801bb8e:	701a      	strb	r2, [r3, #0]
 801bb90:	68bb      	ldr	r3, [r7, #8]
 801bb92:	3b01      	subs	r3, #1
 801bb94:	60bb      	str	r3, [r7, #8]
 801bb96:	68bb      	ldr	r3, [r7, #8]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d101      	bne.n	801bba0 <ee_number+0xf8>
 801bb9c:	68fb      	ldr	r3, [r7, #12]
 801bb9e:	e068      	b.n	801bc72 <ee_number+0x1ca>
 801bba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bba2:	1e5a      	subs	r2, r3, #1
 801bba4:	66ba      	str	r2, [r7, #104]	; 0x68
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	dced      	bgt.n	801bb86 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801bbaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d01b      	beq.n	801bbea <ee_number+0x142>
 801bbb2:	68fb      	ldr	r3, [r7, #12]
 801bbb4:	1c5a      	adds	r2, r3, #1
 801bbb6:	60fa      	str	r2, [r7, #12]
 801bbb8:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801bbbc:	701a      	strb	r2, [r3, #0]
 801bbbe:	68bb      	ldr	r3, [r7, #8]
 801bbc0:	3b01      	subs	r3, #1
 801bbc2:	60bb      	str	r3, [r7, #8]
 801bbc4:	68bb      	ldr	r3, [r7, #8]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d10f      	bne.n	801bbea <ee_number+0x142>
 801bbca:	68fb      	ldr	r3, [r7, #12]
 801bbcc:	e051      	b.n	801bc72 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801bbce:	68fb      	ldr	r3, [r7, #12]
 801bbd0:	1c5a      	adds	r2, r3, #1
 801bbd2:	60fa      	str	r2, [r7, #12]
 801bbd4:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801bbd8:	701a      	strb	r2, [r3, #0]
 801bbda:	68bb      	ldr	r3, [r7, #8]
 801bbdc:	3b01      	subs	r3, #1
 801bbde:	60bb      	str	r3, [r7, #8]
 801bbe0:	68bb      	ldr	r3, [r7, #8]
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d101      	bne.n	801bbea <ee_number+0x142>
 801bbe6:	68fb      	ldr	r3, [r7, #12]
 801bbe8:	e043      	b.n	801bc72 <ee_number+0x1ca>
 801bbea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bbec:	1e5a      	subs	r2, r3, #1
 801bbee:	66ba      	str	r2, [r7, #104]	; 0x68
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	dcec      	bgt.n	801bbce <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801bbf4:	e00c      	b.n	801bc10 <ee_number+0x168>
 801bbf6:	68fb      	ldr	r3, [r7, #12]
 801bbf8:	1c5a      	adds	r2, r3, #1
 801bbfa:	60fa      	str	r2, [r7, #12]
 801bbfc:	2230      	movs	r2, #48	; 0x30
 801bbfe:	701a      	strb	r2, [r3, #0]
 801bc00:	68bb      	ldr	r3, [r7, #8]
 801bc02:	3b01      	subs	r3, #1
 801bc04:	60bb      	str	r3, [r7, #8]
 801bc06:	68bb      	ldr	r3, [r7, #8]
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	d101      	bne.n	801bc10 <ee_number+0x168>
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	e030      	b.n	801bc72 <ee_number+0x1ca>
 801bc10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bc12:	1e5a      	subs	r2, r3, #1
 801bc14:	66fa      	str	r2, [r7, #108]	; 0x6c
 801bc16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bc18:	429a      	cmp	r2, r3
 801bc1a:	dbec      	blt.n	801bbf6 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801bc1c:	e010      	b.n	801bc40 <ee_number+0x198>
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	1c5a      	adds	r2, r3, #1
 801bc22:	60fa      	str	r2, [r7, #12]
 801bc24:	f107 0110 	add.w	r1, r7, #16
 801bc28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bc2a:	440a      	add	r2, r1
 801bc2c:	7812      	ldrb	r2, [r2, #0]
 801bc2e:	701a      	strb	r2, [r3, #0]
 801bc30:	68bb      	ldr	r3, [r7, #8]
 801bc32:	3b01      	subs	r3, #1
 801bc34:	60bb      	str	r3, [r7, #8]
 801bc36:	68bb      	ldr	r3, [r7, #8]
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d101      	bne.n	801bc40 <ee_number+0x198>
 801bc3c:	68fb      	ldr	r3, [r7, #12]
 801bc3e:	e018      	b.n	801bc72 <ee_number+0x1ca>
 801bc40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc42:	1e5a      	subs	r2, r3, #1
 801bc44:	657a      	str	r2, [r7, #84]	; 0x54
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	dce9      	bgt.n	801bc1e <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801bc4a:	e00c      	b.n	801bc66 <ee_number+0x1be>
 801bc4c:	68fb      	ldr	r3, [r7, #12]
 801bc4e:	1c5a      	adds	r2, r3, #1
 801bc50:	60fa      	str	r2, [r7, #12]
 801bc52:	2220      	movs	r2, #32
 801bc54:	701a      	strb	r2, [r3, #0]
 801bc56:	68bb      	ldr	r3, [r7, #8]
 801bc58:	3b01      	subs	r3, #1
 801bc5a:	60bb      	str	r3, [r7, #8]
 801bc5c:	68bb      	ldr	r3, [r7, #8]
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d101      	bne.n	801bc66 <ee_number+0x1be>
 801bc62:	68fb      	ldr	r3, [r7, #12]
 801bc64:	e005      	b.n	801bc72 <ee_number+0x1ca>
 801bc66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bc68:	1e5a      	subs	r2, r3, #1
 801bc6a:	66ba      	str	r2, [r7, #104]	; 0x68
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	dced      	bgt.n	801bc4c <ee_number+0x1a4>

  return str;
 801bc70:	68fb      	ldr	r3, [r7, #12]
}
 801bc72:	4618      	mov	r0, r3
 801bc74:	3764      	adds	r7, #100	; 0x64
 801bc76:	46bd      	mov	sp, r7
 801bc78:	bc80      	pop	{r7}
 801bc7a:	4770      	bx	lr
 801bc7c:	20000148 	.word	0x20000148
 801bc80:	2000014c 	.word	0x2000014c

0801bc84 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801bc84:	b580      	push	{r7, lr}
 801bc86:	b092      	sub	sp, #72	; 0x48
 801bc88:	af04      	add	r7, sp, #16
 801bc8a:	60f8      	str	r0, [r7, #12]
 801bc8c:	60b9      	str	r1, [r7, #8]
 801bc8e:	607a      	str	r2, [r7, #4]
 801bc90:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801bc92:	68bb      	ldr	r3, [r7, #8]
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	dc01      	bgt.n	801bc9c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801bc98:	2300      	movs	r3, #0
 801bc9a:	e13e      	b.n	801bf1a <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801bc9c:	68fb      	ldr	r3, [r7, #12]
 801bc9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bca0:	e128      	b.n	801bef4 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801bca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	1ad2      	subs	r2, r2, r3
 801bca8:	68bb      	ldr	r3, [r7, #8]
 801bcaa:	3b01      	subs	r3, #1
 801bcac:	429a      	cmp	r2, r3
 801bcae:	f280 812e 	bge.w	801bf0e <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	781b      	ldrb	r3, [r3, #0]
 801bcb6:	2b25      	cmp	r3, #37	; 0x25
 801bcb8:	d006      	beq.n	801bcc8 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801bcba:	687a      	ldr	r2, [r7, #4]
 801bcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcbe:	1c59      	adds	r1, r3, #1
 801bcc0:	62f9      	str	r1, [r7, #44]	; 0x2c
 801bcc2:	7812      	ldrb	r2, [r2, #0]
 801bcc4:	701a      	strb	r2, [r3, #0]
      continue;
 801bcc6:	e112      	b.n	801beee <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801bcc8:	2300      	movs	r3, #0
 801bcca:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	3301      	adds	r3, #1
 801bcd0:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	781b      	ldrb	r3, [r3, #0]
 801bcd6:	2b30      	cmp	r3, #48	; 0x30
 801bcd8:	d103      	bne.n	801bce2 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801bcda:	6a3b      	ldr	r3, [r7, #32]
 801bcdc:	f043 0301 	orr.w	r3, r3, #1
 801bce0:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801bce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bce6:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	781b      	ldrb	r3, [r3, #0]
 801bcec:	2b2f      	cmp	r3, #47	; 0x2f
 801bcee:	d908      	bls.n	801bd02 <tiny_vsnprintf_like+0x7e>
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	781b      	ldrb	r3, [r3, #0]
 801bcf4:	2b39      	cmp	r3, #57	; 0x39
 801bcf6:	d804      	bhi.n	801bd02 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801bcf8:	1d3b      	adds	r3, r7, #4
 801bcfa:	4618      	mov	r0, r3
 801bcfc:	f7ff feae 	bl	801ba5c <ee_skip_atoi>
 801bd00:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801bd02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bd06:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801bd08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bd0c:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801bd0e:	230a      	movs	r3, #10
 801bd10:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	781b      	ldrb	r3, [r3, #0]
 801bd16:	3b58      	subs	r3, #88	; 0x58
 801bd18:	2b20      	cmp	r3, #32
 801bd1a:	f200 8094 	bhi.w	801be46 <tiny_vsnprintf_like+0x1c2>
 801bd1e:	a201      	add	r2, pc, #4	; (adr r2, 801bd24 <tiny_vsnprintf_like+0xa0>)
 801bd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd24:	0801be2f 	.word	0x0801be2f
 801bd28:	0801be47 	.word	0x0801be47
 801bd2c:	0801be47 	.word	0x0801be47
 801bd30:	0801be47 	.word	0x0801be47
 801bd34:	0801be47 	.word	0x0801be47
 801bd38:	0801be47 	.word	0x0801be47
 801bd3c:	0801be47 	.word	0x0801be47
 801bd40:	0801be47 	.word	0x0801be47
 801bd44:	0801be47 	.word	0x0801be47
 801bd48:	0801be47 	.word	0x0801be47
 801bd4c:	0801be47 	.word	0x0801be47
 801bd50:	0801bdb3 	.word	0x0801bdb3
 801bd54:	0801be3d 	.word	0x0801be3d
 801bd58:	0801be47 	.word	0x0801be47
 801bd5c:	0801be47 	.word	0x0801be47
 801bd60:	0801be47 	.word	0x0801be47
 801bd64:	0801be47 	.word	0x0801be47
 801bd68:	0801be3d 	.word	0x0801be3d
 801bd6c:	0801be47 	.word	0x0801be47
 801bd70:	0801be47 	.word	0x0801be47
 801bd74:	0801be47 	.word	0x0801be47
 801bd78:	0801be47 	.word	0x0801be47
 801bd7c:	0801be47 	.word	0x0801be47
 801bd80:	0801be47 	.word	0x0801be47
 801bd84:	0801be47 	.word	0x0801be47
 801bd88:	0801be47 	.word	0x0801be47
 801bd8c:	0801be47 	.word	0x0801be47
 801bd90:	0801bdd3 	.word	0x0801bdd3
 801bd94:	0801be47 	.word	0x0801be47
 801bd98:	0801be93 	.word	0x0801be93
 801bd9c:	0801be47 	.word	0x0801be47
 801bda0:	0801be47 	.word	0x0801be47
 801bda4:	0801be37 	.word	0x0801be37
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801bda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdaa:	1c5a      	adds	r2, r3, #1
 801bdac:	62fa      	str	r2, [r7, #44]	; 0x2c
 801bdae:	2220      	movs	r2, #32
 801bdb0:	701a      	strb	r2, [r3, #0]
 801bdb2:	69fb      	ldr	r3, [r7, #28]
 801bdb4:	3b01      	subs	r3, #1
 801bdb6:	61fb      	str	r3, [r7, #28]
 801bdb8:	69fb      	ldr	r3, [r7, #28]
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	dcf4      	bgt.n	801bda8 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801bdbe:	683b      	ldr	r3, [r7, #0]
 801bdc0:	1d1a      	adds	r2, r3, #4
 801bdc2:	603a      	str	r2, [r7, #0]
 801bdc4:	6819      	ldr	r1, [r3, #0]
 801bdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdc8:	1c5a      	adds	r2, r3, #1
 801bdca:	62fa      	str	r2, [r7, #44]	; 0x2c
 801bdcc:	b2ca      	uxtb	r2, r1
 801bdce:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801bdd0:	e08d      	b.n	801beee <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801bdd2:	683b      	ldr	r3, [r7, #0]
 801bdd4:	1d1a      	adds	r2, r3, #4
 801bdd6:	603a      	str	r2, [r7, #0]
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801bddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d101      	bne.n	801bde6 <tiny_vsnprintf_like+0x162>
 801bde2:	4b50      	ldr	r3, [pc, #320]	; (801bf24 <tiny_vsnprintf_like+0x2a0>)
 801bde4:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801bde6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bde8:	f7e4 f9c6 	bl	8000178 <strlen>
 801bdec:	4603      	mov	r3, r0
 801bdee:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801bdf0:	e004      	b.n	801bdfc <tiny_vsnprintf_like+0x178>
 801bdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdf4:	1c5a      	adds	r2, r3, #1
 801bdf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801bdf8:	2220      	movs	r2, #32
 801bdfa:	701a      	strb	r2, [r3, #0]
 801bdfc:	69fb      	ldr	r3, [r7, #28]
 801bdfe:	1e5a      	subs	r2, r3, #1
 801be00:	61fa      	str	r2, [r7, #28]
 801be02:	693a      	ldr	r2, [r7, #16]
 801be04:	429a      	cmp	r2, r3
 801be06:	dbf4      	blt.n	801bdf2 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801be08:	2300      	movs	r3, #0
 801be0a:	62bb      	str	r3, [r7, #40]	; 0x28
 801be0c:	e00a      	b.n	801be24 <tiny_vsnprintf_like+0x1a0>
 801be0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801be10:	1c53      	adds	r3, r2, #1
 801be12:	627b      	str	r3, [r7, #36]	; 0x24
 801be14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be16:	1c59      	adds	r1, r3, #1
 801be18:	62f9      	str	r1, [r7, #44]	; 0x2c
 801be1a:	7812      	ldrb	r2, [r2, #0]
 801be1c:	701a      	strb	r2, [r3, #0]
 801be1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be20:	3301      	adds	r3, #1
 801be22:	62bb      	str	r3, [r7, #40]	; 0x28
 801be24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801be26:	693b      	ldr	r3, [r7, #16]
 801be28:	429a      	cmp	r2, r3
 801be2a:	dbf0      	blt.n	801be0e <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801be2c:	e05f      	b.n	801beee <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801be2e:	6a3b      	ldr	r3, [r7, #32]
 801be30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be34:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801be36:	2310      	movs	r3, #16
 801be38:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801be3a:	e02b      	b.n	801be94 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801be3c:	6a3b      	ldr	r3, [r7, #32]
 801be3e:	f043 0302 	orr.w	r3, r3, #2
 801be42:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801be44:	e025      	b.n	801be92 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	781b      	ldrb	r3, [r3, #0]
 801be4a:	2b25      	cmp	r3, #37	; 0x25
 801be4c:	d004      	beq.n	801be58 <tiny_vsnprintf_like+0x1d4>
 801be4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be50:	1c5a      	adds	r2, r3, #1
 801be52:	62fa      	str	r2, [r7, #44]	; 0x2c
 801be54:	2225      	movs	r2, #37	; 0x25
 801be56:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801be58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	1ad2      	subs	r2, r2, r3
 801be5e:	68bb      	ldr	r3, [r7, #8]
 801be60:	3b01      	subs	r3, #1
 801be62:	429a      	cmp	r2, r3
 801be64:	da16      	bge.n	801be94 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	781b      	ldrb	r3, [r3, #0]
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d006      	beq.n	801be7c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801be6e:	687a      	ldr	r2, [r7, #4]
 801be70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be72:	1c59      	adds	r1, r3, #1
 801be74:	62f9      	str	r1, [r7, #44]	; 0x2c
 801be76:	7812      	ldrb	r2, [r2, #0]
 801be78:	701a      	strb	r2, [r3, #0]
 801be7a:	e002      	b.n	801be82 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	3b01      	subs	r3, #1
 801be80:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801be82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be84:	68fb      	ldr	r3, [r7, #12]
 801be86:	1ad2      	subs	r2, r2, r3
 801be88:	68bb      	ldr	r3, [r7, #8]
 801be8a:	3b01      	subs	r3, #1
 801be8c:	429a      	cmp	r2, r3
 801be8e:	db2d      	blt.n	801beec <tiny_vsnprintf_like+0x268>
 801be90:	e000      	b.n	801be94 <tiny_vsnprintf_like+0x210>
        break;
 801be92:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801be94:	697b      	ldr	r3, [r7, #20]
 801be96:	2b6c      	cmp	r3, #108	; 0x6c
 801be98:	d105      	bne.n	801bea6 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801be9a:	683b      	ldr	r3, [r7, #0]
 801be9c:	1d1a      	adds	r2, r3, #4
 801be9e:	603a      	str	r2, [r7, #0]
 801bea0:	681b      	ldr	r3, [r3, #0]
 801bea2:	637b      	str	r3, [r7, #52]	; 0x34
 801bea4:	e00f      	b.n	801bec6 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801bea6:	6a3b      	ldr	r3, [r7, #32]
 801bea8:	f003 0302 	and.w	r3, r3, #2
 801beac:	2b00      	cmp	r3, #0
 801beae:	d005      	beq.n	801bebc <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801beb0:	683b      	ldr	r3, [r7, #0]
 801beb2:	1d1a      	adds	r2, r3, #4
 801beb4:	603a      	str	r2, [r7, #0]
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	637b      	str	r3, [r7, #52]	; 0x34
 801beba:	e004      	b.n	801bec6 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801bebc:	683b      	ldr	r3, [r7, #0]
 801bebe:	1d1a      	adds	r2, r3, #4
 801bec0:	603a      	str	r2, [r7, #0]
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801bec6:	68bb      	ldr	r3, [r7, #8]
 801bec8:	1e5a      	subs	r2, r3, #1
 801beca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801becc:	68fb      	ldr	r3, [r7, #12]
 801bece:	1acb      	subs	r3, r1, r3
 801bed0:	1ad1      	subs	r1, r2, r3
 801bed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bed4:	6a3b      	ldr	r3, [r7, #32]
 801bed6:	9302      	str	r3, [sp, #8]
 801bed8:	69bb      	ldr	r3, [r7, #24]
 801beda:	9301      	str	r3, [sp, #4]
 801bedc:	69fb      	ldr	r3, [r7, #28]
 801bede:	9300      	str	r3, [sp, #0]
 801bee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bee2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bee4:	f7ff fde0 	bl	801baa8 <ee_number>
 801bee8:	62f8      	str	r0, [r7, #44]	; 0x2c
 801beea:	e000      	b.n	801beee <tiny_vsnprintf_like+0x26a>
        continue;
 801beec:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	3301      	adds	r3, #1
 801bef2:	607b      	str	r3, [r7, #4]
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	781b      	ldrb	r3, [r3, #0]
 801bef8:	2b00      	cmp	r3, #0
 801befa:	f47f aed2 	bne.w	801bca2 <tiny_vsnprintf_like+0x1e>
 801befe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf00:	68fb      	ldr	r3, [r7, #12]
 801bf02:	1ad2      	subs	r2, r2, r3
 801bf04:	68bb      	ldr	r3, [r7, #8]
 801bf06:	3b01      	subs	r3, #1
 801bf08:	429a      	cmp	r2, r3
 801bf0a:	f6bf aeca 	bge.w	801bca2 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801bf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf10:	2200      	movs	r2, #0
 801bf12:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801bf14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf16:	68fb      	ldr	r3, [r7, #12]
 801bf18:	1ad3      	subs	r3, r2, r3
}
 801bf1a:	4618      	mov	r0, r3
 801bf1c:	3738      	adds	r7, #56	; 0x38
 801bf1e:	46bd      	mov	sp, r7
 801bf20:	bd80      	pop	{r7, pc}
 801bf22:	bf00      	nop
 801bf24:	0801d748 	.word	0x0801d748

0801bf28 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b090      	sub	sp, #64	; 0x40
 801bf2c:	af00      	add	r7, sp, #0
 801bf2e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801bf30:	4b73      	ldr	r3, [pc, #460]	; (801c100 <UTIL_SEQ_Run+0x1d8>)
 801bf32:	681b      	ldr	r3, [r3, #0]
 801bf34:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801bf36:	4b72      	ldr	r3, [pc, #456]	; (801c100 <UTIL_SEQ_Run+0x1d8>)
 801bf38:	681a      	ldr	r2, [r3, #0]
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	4013      	ands	r3, r2
 801bf3e:	4a70      	ldr	r2, [pc, #448]	; (801c100 <UTIL_SEQ_Run+0x1d8>)
 801bf40:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801bf42:	4b70      	ldr	r3, [pc, #448]	; (801c104 <UTIL_SEQ_Run+0x1dc>)
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801bf48:	4b6f      	ldr	r3, [pc, #444]	; (801c108 <UTIL_SEQ_Run+0x1e0>)
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801bf4e:	4b6f      	ldr	r3, [pc, #444]	; (801c10c <UTIL_SEQ_Run+0x1e4>)
 801bf50:	681b      	ldr	r3, [r3, #0]
 801bf52:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801bf54:	4b6e      	ldr	r3, [pc, #440]	; (801c110 <UTIL_SEQ_Run+0x1e8>)
 801bf56:	681b      	ldr	r3, [r3, #0]
 801bf58:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801bf5a:	e08d      	b.n	801c078 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801bf5c:	2300      	movs	r3, #0
 801bf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801bf60:	e002      	b.n	801bf68 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801bf62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf64:	3301      	adds	r3, #1
 801bf66:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801bf68:	4a6a      	ldr	r2, [pc, #424]	; (801c114 <UTIL_SEQ_Run+0x1ec>)
 801bf6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf6c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801bf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf72:	401a      	ands	r2, r3
 801bf74:	4b62      	ldr	r3, [pc, #392]	; (801c100 <UTIL_SEQ_Run+0x1d8>)
 801bf76:	681b      	ldr	r3, [r3, #0]
 801bf78:	4013      	ands	r3, r2
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d0f1      	beq.n	801bf62 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801bf7e:	4a65      	ldr	r2, [pc, #404]	; (801c114 <UTIL_SEQ_Run+0x1ec>)
 801bf80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf82:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf88:	401a      	ands	r2, r3
 801bf8a:	4b5d      	ldr	r3, [pc, #372]	; (801c100 <UTIL_SEQ_Run+0x1d8>)
 801bf8c:	681b      	ldr	r3, [r3, #0]
 801bf8e:	4013      	ands	r3, r2
 801bf90:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801bf92:	4a60      	ldr	r2, [pc, #384]	; (801c114 <UTIL_SEQ_Run+0x1ec>)
 801bf94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf96:	00db      	lsls	r3, r3, #3
 801bf98:	4413      	add	r3, r2
 801bf9a:	685a      	ldr	r2, [r3, #4]
 801bf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf9e:	4013      	ands	r3, r2
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d106      	bne.n	801bfb2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801bfa4:	4a5b      	ldr	r2, [pc, #364]	; (801c114 <UTIL_SEQ_Run+0x1ec>)
 801bfa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bfa8:	00db      	lsls	r3, r3, #3
 801bfaa:	4413      	add	r3, r2
 801bfac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bfb0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801bfb2:	4a58      	ldr	r2, [pc, #352]	; (801c114 <UTIL_SEQ_Run+0x1ec>)
 801bfb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bfb6:	00db      	lsls	r3, r3, #3
 801bfb8:	4413      	add	r3, r2
 801bfba:	685a      	ldr	r2, [r3, #4]
 801bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfbe:	4013      	ands	r3, r2
 801bfc0:	4618      	mov	r0, r3
 801bfc2:	f000 f907 	bl	801c1d4 <SEQ_BitPosition>
 801bfc6:	4603      	mov	r3, r0
 801bfc8:	461a      	mov	r2, r3
 801bfca:	4b53      	ldr	r3, [pc, #332]	; (801c118 <UTIL_SEQ_Run+0x1f0>)
 801bfcc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801bfce:	4a51      	ldr	r2, [pc, #324]	; (801c114 <UTIL_SEQ_Run+0x1ec>)
 801bfd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bfd2:	00db      	lsls	r3, r3, #3
 801bfd4:	4413      	add	r3, r2
 801bfd6:	685a      	ldr	r2, [r3, #4]
 801bfd8:	4b4f      	ldr	r3, [pc, #316]	; (801c118 <UTIL_SEQ_Run+0x1f0>)
 801bfda:	681b      	ldr	r3, [r3, #0]
 801bfdc:	2101      	movs	r1, #1
 801bfde:	fa01 f303 	lsl.w	r3, r1, r3
 801bfe2:	43db      	mvns	r3, r3
 801bfe4:	401a      	ands	r2, r3
 801bfe6:	494b      	ldr	r1, [pc, #300]	; (801c114 <UTIL_SEQ_Run+0x1ec>)
 801bfe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bfea:	00db      	lsls	r3, r3, #3
 801bfec:	440b      	add	r3, r1
 801bfee:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bff0:	f3ef 8310 	mrs	r3, PRIMASK
 801bff4:	61bb      	str	r3, [r7, #24]
  return(result);
 801bff6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801bff8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801bffa:	b672      	cpsid	i
}
 801bffc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801bffe:	4b46      	ldr	r3, [pc, #280]	; (801c118 <UTIL_SEQ_Run+0x1f0>)
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	2201      	movs	r2, #1
 801c004:	fa02 f303 	lsl.w	r3, r2, r3
 801c008:	43da      	mvns	r2, r3
 801c00a:	4b3e      	ldr	r3, [pc, #248]	; (801c104 <UTIL_SEQ_Run+0x1dc>)
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	4013      	ands	r3, r2
 801c010:	4a3c      	ldr	r2, [pc, #240]	; (801c104 <UTIL_SEQ_Run+0x1dc>)
 801c012:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c014:	2301      	movs	r3, #1
 801c016:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c018:	e013      	b.n	801c042 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c01c:	3b01      	subs	r3, #1
 801c01e:	4a3d      	ldr	r2, [pc, #244]	; (801c114 <UTIL_SEQ_Run+0x1ec>)
 801c020:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c024:	4b3c      	ldr	r3, [pc, #240]	; (801c118 <UTIL_SEQ_Run+0x1f0>)
 801c026:	681b      	ldr	r3, [r3, #0]
 801c028:	2201      	movs	r2, #1
 801c02a:	fa02 f303 	lsl.w	r3, r2, r3
 801c02e:	43da      	mvns	r2, r3
 801c030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c032:	3b01      	subs	r3, #1
 801c034:	400a      	ands	r2, r1
 801c036:	4937      	ldr	r1, [pc, #220]	; (801c114 <UTIL_SEQ_Run+0x1ec>)
 801c038:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c03e:	3b01      	subs	r3, #1
 801c040:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c044:	2b00      	cmp	r3, #0
 801c046:	d1e8      	bne.n	801c01a <UTIL_SEQ_Run+0xf2>
 801c048:	6a3b      	ldr	r3, [r7, #32]
 801c04a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c04c:	697b      	ldr	r3, [r7, #20]
 801c04e:	f383 8810 	msr	PRIMASK, r3
}
 801c052:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c054:	4b30      	ldr	r3, [pc, #192]	; (801c118 <UTIL_SEQ_Run+0x1f0>)
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	4a30      	ldr	r2, [pc, #192]	; (801c11c <UTIL_SEQ_Run+0x1f4>)
 801c05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c05e:	4798      	blx	r3

    local_taskset = TaskSet;
 801c060:	4b28      	ldr	r3, [pc, #160]	; (801c104 <UTIL_SEQ_Run+0x1dc>)
 801c062:	681b      	ldr	r3, [r3, #0]
 801c064:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801c066:	4b28      	ldr	r3, [pc, #160]	; (801c108 <UTIL_SEQ_Run+0x1e0>)
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801c06c:	4b27      	ldr	r3, [pc, #156]	; (801c10c <UTIL_SEQ_Run+0x1e4>)
 801c06e:	681b      	ldr	r3, [r3, #0]
 801c070:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801c072:	4b27      	ldr	r3, [pc, #156]	; (801c110 <UTIL_SEQ_Run+0x1e8>)
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c07c:	401a      	ands	r2, r3
 801c07e:	4b20      	ldr	r3, [pc, #128]	; (801c100 <UTIL_SEQ_Run+0x1d8>)
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	4013      	ands	r3, r2
 801c084:	2b00      	cmp	r3, #0
 801c086:	d005      	beq.n	801c094 <UTIL_SEQ_Run+0x16c>
 801c088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c08c:	4013      	ands	r3, r2
 801c08e:	2b00      	cmp	r3, #0
 801c090:	f43f af64 	beq.w	801bf5c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c094:	4b20      	ldr	r3, [pc, #128]	; (801c118 <UTIL_SEQ_Run+0x1f0>)
 801c096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c09a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c09c:	f000 f88e 	bl	801c1bc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0a0:	f3ef 8310 	mrs	r3, PRIMASK
 801c0a4:	613b      	str	r3, [r7, #16]
  return(result);
 801c0a6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c0a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0aa:	b672      	cpsid	i
}
 801c0ac:	bf00      	nop
  local_taskset = TaskSet;
 801c0ae:	4b15      	ldr	r3, [pc, #84]	; (801c104 <UTIL_SEQ_Run+0x1dc>)
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801c0b4:	4b14      	ldr	r3, [pc, #80]	; (801c108 <UTIL_SEQ_Run+0x1e0>)
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801c0ba:	4b14      	ldr	r3, [pc, #80]	; (801c10c <UTIL_SEQ_Run+0x1e4>)
 801c0bc:	681b      	ldr	r3, [r3, #0]
 801c0be:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801c0c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0c4:	401a      	ands	r2, r3
 801c0c6:	4b0e      	ldr	r3, [pc, #56]	; (801c100 <UTIL_SEQ_Run+0x1d8>)
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	4013      	ands	r3, r2
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d107      	bne.n	801c0e0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801c0d0:	4b0f      	ldr	r3, [pc, #60]	; (801c110 <UTIL_SEQ_Run+0x1e8>)
 801c0d2:	681a      	ldr	r2, [r3, #0]
 801c0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0d6:	4013      	ands	r3, r2
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d101      	bne.n	801c0e0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801c0dc:	f7e5 fcce 	bl	8001a7c <UTIL_SEQ_Idle>
 801c0e0:	69fb      	ldr	r3, [r7, #28]
 801c0e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0e4:	68fb      	ldr	r3, [r7, #12]
 801c0e6:	f383 8810 	msr	PRIMASK, r3
}
 801c0ea:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801c0ec:	f000 f86c 	bl	801c1c8 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c0f0:	4a03      	ldr	r2, [pc, #12]	; (801c100 <UTIL_SEQ_Run+0x1d8>)
 801c0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c0f4:	6013      	str	r3, [r2, #0]

  return;
 801c0f6:	bf00      	nop
}
 801c0f8:	3740      	adds	r7, #64	; 0x40
 801c0fa:	46bd      	mov	sp, r7
 801c0fc:	bd80      	pop	{r7, pc}
 801c0fe:	bf00      	nop
 801c100:	20000154 	.word	0x20000154
 801c104:	20001b40 	.word	0x20001b40
 801c108:	20001b44 	.word	0x20001b44
 801c10c:	20000150 	.word	0x20000150
 801c110:	20001b48 	.word	0x20001b48
 801c114:	20001b60 	.word	0x20001b60
 801c118:	20001b4c 	.word	0x20001b4c
 801c11c:	20001b50 	.word	0x20001b50

0801c120 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c120:	b580      	push	{r7, lr}
 801c122:	b088      	sub	sp, #32
 801c124:	af00      	add	r7, sp, #0
 801c126:	60f8      	str	r0, [r7, #12]
 801c128:	60b9      	str	r1, [r7, #8]
 801c12a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c12c:	f3ef 8310 	mrs	r3, PRIMASK
 801c130:	617b      	str	r3, [r7, #20]
  return(result);
 801c132:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c134:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c136:	b672      	cpsid	i
}
 801c138:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c13a:	68f8      	ldr	r0, [r7, #12]
 801c13c:	f000 f84a 	bl	801c1d4 <SEQ_BitPosition>
 801c140:	4603      	mov	r3, r0
 801c142:	4619      	mov	r1, r3
 801c144:	4a06      	ldr	r2, [pc, #24]	; (801c160 <UTIL_SEQ_RegTask+0x40>)
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c14c:	69fb      	ldr	r3, [r7, #28]
 801c14e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c150:	69bb      	ldr	r3, [r7, #24]
 801c152:	f383 8810 	msr	PRIMASK, r3
}
 801c156:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c158:	bf00      	nop
}
 801c15a:	3720      	adds	r7, #32
 801c15c:	46bd      	mov	sp, r7
 801c15e:	bd80      	pop	{r7, pc}
 801c160:	20001b50 	.word	0x20001b50

0801c164 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c164:	b480      	push	{r7}
 801c166:	b087      	sub	sp, #28
 801c168:	af00      	add	r7, sp, #0
 801c16a:	6078      	str	r0, [r7, #4]
 801c16c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c16e:	f3ef 8310 	mrs	r3, PRIMASK
 801c172:	60fb      	str	r3, [r7, #12]
  return(result);
 801c174:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c176:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c178:	b672      	cpsid	i
}
 801c17a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801c17c:	4b0d      	ldr	r3, [pc, #52]	; (801c1b4 <UTIL_SEQ_SetTask+0x50>)
 801c17e:	681a      	ldr	r2, [r3, #0]
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	4313      	orrs	r3, r2
 801c184:	4a0b      	ldr	r2, [pc, #44]	; (801c1b4 <UTIL_SEQ_SetTask+0x50>)
 801c186:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c188:	4a0b      	ldr	r2, [pc, #44]	; (801c1b8 <UTIL_SEQ_SetTask+0x54>)
 801c18a:	683b      	ldr	r3, [r7, #0]
 801c18c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	431a      	orrs	r2, r3
 801c194:	4908      	ldr	r1, [pc, #32]	; (801c1b8 <UTIL_SEQ_SetTask+0x54>)
 801c196:	683b      	ldr	r3, [r7, #0]
 801c198:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801c19c:	697b      	ldr	r3, [r7, #20]
 801c19e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1a0:	693b      	ldr	r3, [r7, #16]
 801c1a2:	f383 8810 	msr	PRIMASK, r3
}
 801c1a6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c1a8:	bf00      	nop
}
 801c1aa:	371c      	adds	r7, #28
 801c1ac:	46bd      	mov	sp, r7
 801c1ae:	bc80      	pop	{r7}
 801c1b0:	4770      	bx	lr
 801c1b2:	bf00      	nop
 801c1b4:	20001b40 	.word	0x20001b40
 801c1b8:	20001b60 	.word	0x20001b60

0801c1bc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c1bc:	b480      	push	{r7}
 801c1be:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c1c0:	bf00      	nop
}
 801c1c2:	46bd      	mov	sp, r7
 801c1c4:	bc80      	pop	{r7}
 801c1c6:	4770      	bx	lr

0801c1c8 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c1c8:	b480      	push	{r7}
 801c1ca:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c1cc:	bf00      	nop
}
 801c1ce:	46bd      	mov	sp, r7
 801c1d0:	bc80      	pop	{r7}
 801c1d2:	4770      	bx	lr

0801c1d4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c1d4:	b480      	push	{r7}
 801c1d6:	b085      	sub	sp, #20
 801c1d8:	af00      	add	r7, sp, #0
 801c1da:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801c1dc:	2300      	movs	r3, #0
 801c1de:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801c1e4:	68bb      	ldr	r3, [r7, #8]
 801c1e6:	0c1b      	lsrs	r3, r3, #16
 801c1e8:	041b      	lsls	r3, r3, #16
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d104      	bne.n	801c1f8 <SEQ_BitPosition+0x24>
 801c1ee:	2310      	movs	r3, #16
 801c1f0:	73fb      	strb	r3, [r7, #15]
 801c1f2:	68bb      	ldr	r3, [r7, #8]
 801c1f4:	041b      	lsls	r3, r3, #16
 801c1f6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801c1f8:	68bb      	ldr	r3, [r7, #8]
 801c1fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d105      	bne.n	801c20e <SEQ_BitPosition+0x3a>
 801c202:	7bfb      	ldrb	r3, [r7, #15]
 801c204:	3308      	adds	r3, #8
 801c206:	73fb      	strb	r3, [r7, #15]
 801c208:	68bb      	ldr	r3, [r7, #8]
 801c20a:	021b      	lsls	r3, r3, #8
 801c20c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801c20e:	68bb      	ldr	r3, [r7, #8]
 801c210:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801c214:	2b00      	cmp	r3, #0
 801c216:	d105      	bne.n	801c224 <SEQ_BitPosition+0x50>
 801c218:	7bfb      	ldrb	r3, [r7, #15]
 801c21a:	3304      	adds	r3, #4
 801c21c:	73fb      	strb	r3, [r7, #15]
 801c21e:	68bb      	ldr	r3, [r7, #8]
 801c220:	011b      	lsls	r3, r3, #4
 801c222:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801c224:	68bb      	ldr	r3, [r7, #8]
 801c226:	0f1b      	lsrs	r3, r3, #28
 801c228:	4a06      	ldr	r2, [pc, #24]	; (801c244 <SEQ_BitPosition+0x70>)
 801c22a:	5cd2      	ldrb	r2, [r2, r3]
 801c22c:	7bfb      	ldrb	r3, [r7, #15]
 801c22e:	4413      	add	r3, r2
 801c230:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801c232:	7bfb      	ldrb	r3, [r7, #15]
 801c234:	f1c3 031f 	rsb	r3, r3, #31
 801c238:	b2db      	uxtb	r3, r3
}
 801c23a:	4618      	mov	r0, r3
 801c23c:	3714      	adds	r7, #20
 801c23e:	46bd      	mov	sp, r7
 801c240:	bc80      	pop	{r7}
 801c242:	4770      	bx	lr
 801c244:	0801dd84 	.word	0x0801dd84

0801c248 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c248:	b580      	push	{r7, lr}
 801c24a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c24c:	4b04      	ldr	r3, [pc, #16]	; (801c260 <UTIL_TIMER_Init+0x18>)
 801c24e:	2200      	movs	r2, #0
 801c250:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c252:	4b04      	ldr	r3, [pc, #16]	; (801c264 <UTIL_TIMER_Init+0x1c>)
 801c254:	681b      	ldr	r3, [r3, #0]
 801c256:	4798      	blx	r3
 801c258:	4603      	mov	r3, r0
}
 801c25a:	4618      	mov	r0, r3
 801c25c:	bd80      	pop	{r7, pc}
 801c25e:	bf00      	nop
 801c260:	20001b68 	.word	0x20001b68
 801c264:	0801d808 	.word	0x0801d808

0801c268 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c268:	b580      	push	{r7, lr}
 801c26a:	b084      	sub	sp, #16
 801c26c:	af00      	add	r7, sp, #0
 801c26e:	60f8      	str	r0, [r7, #12]
 801c270:	60b9      	str	r1, [r7, #8]
 801c272:	603b      	str	r3, [r7, #0]
 801c274:	4613      	mov	r3, r2
 801c276:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801c278:	68fb      	ldr	r3, [r7, #12]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d023      	beq.n	801c2c6 <UTIL_TIMER_Create+0x5e>
 801c27e:	683b      	ldr	r3, [r7, #0]
 801c280:	2b00      	cmp	r3, #0
 801c282:	d020      	beq.n	801c2c6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801c284:	68fb      	ldr	r3, [r7, #12]
 801c286:	2200      	movs	r2, #0
 801c288:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c28a:	4b11      	ldr	r3, [pc, #68]	; (801c2d0 <UTIL_TIMER_Create+0x68>)
 801c28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c28e:	68b8      	ldr	r0, [r7, #8]
 801c290:	4798      	blx	r3
 801c292:	4602      	mov	r2, r0
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c298:	68fb      	ldr	r3, [r7, #12]
 801c29a:	2200      	movs	r2, #0
 801c29c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c29e:	68fb      	ldr	r3, [r7, #12]
 801c2a0:	2200      	movs	r2, #0
 801c2a2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c2a4:	68fb      	ldr	r3, [r7, #12]
 801c2a6:	2200      	movs	r2, #0
 801c2a8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c2aa:	68fb      	ldr	r3, [r7, #12]
 801c2ac:	683a      	ldr	r2, [r7, #0]
 801c2ae:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	69ba      	ldr	r2, [r7, #24]
 801c2b4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c2b6:	68fb      	ldr	r3, [r7, #12]
 801c2b8:	79fa      	ldrb	r2, [r7, #7]
 801c2ba:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	2200      	movs	r2, #0
 801c2c0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c2c2:	2300      	movs	r3, #0
 801c2c4:	e000      	b.n	801c2c8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c2c6:	2301      	movs	r3, #1
  }
}
 801c2c8:	4618      	mov	r0, r3
 801c2ca:	3710      	adds	r7, #16
 801c2cc:	46bd      	mov	sp, r7
 801c2ce:	bd80      	pop	{r7, pc}
 801c2d0:	0801d808 	.word	0x0801d808

0801c2d4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c2d4:	b580      	push	{r7, lr}
 801c2d6:	b08a      	sub	sp, #40	; 0x28
 801c2d8:	af00      	add	r7, sp, #0
 801c2da:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c2dc:	2300      	movs	r3, #0
 801c2de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	d056      	beq.n	801c396 <UTIL_TIMER_Start+0xc2>
 801c2e8:	6878      	ldr	r0, [r7, #4]
 801c2ea:	f000 f9a9 	bl	801c640 <TimerExists>
 801c2ee:	4603      	mov	r3, r0
 801c2f0:	f083 0301 	eor.w	r3, r3, #1
 801c2f4:	b2db      	uxtb	r3, r3
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d04d      	beq.n	801c396 <UTIL_TIMER_Start+0xc2>
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	7a5b      	ldrb	r3, [r3, #9]
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d149      	bne.n	801c396 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c302:	f3ef 8310 	mrs	r3, PRIMASK
 801c306:	613b      	str	r3, [r7, #16]
  return(result);
 801c308:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c30a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c30c:	b672      	cpsid	i
}
 801c30e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	685b      	ldr	r3, [r3, #4]
 801c314:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c316:	4b24      	ldr	r3, [pc, #144]	; (801c3a8 <UTIL_TIMER_Start+0xd4>)
 801c318:	6a1b      	ldr	r3, [r3, #32]
 801c31a:	4798      	blx	r3
 801c31c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801c31e:	6a3a      	ldr	r2, [r7, #32]
 801c320:	69bb      	ldr	r3, [r7, #24]
 801c322:	429a      	cmp	r2, r3
 801c324:	d201      	bcs.n	801c32a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801c326:	69bb      	ldr	r3, [r7, #24]
 801c328:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	6a3a      	ldr	r2, [r7, #32]
 801c32e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	2200      	movs	r2, #0
 801c334:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	2201      	movs	r2, #1
 801c33a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	2200      	movs	r2, #0
 801c340:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c342:	4b1a      	ldr	r3, [pc, #104]	; (801c3ac <UTIL_TIMER_Start+0xd8>)
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	2b00      	cmp	r3, #0
 801c348:	d106      	bne.n	801c358 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c34a:	4b17      	ldr	r3, [pc, #92]	; (801c3a8 <UTIL_TIMER_Start+0xd4>)
 801c34c:	691b      	ldr	r3, [r3, #16]
 801c34e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c350:	6878      	ldr	r0, [r7, #4]
 801c352:	f000 f9eb 	bl	801c72c <TimerInsertNewHeadTimer>
 801c356:	e017      	b.n	801c388 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c358:	4b13      	ldr	r3, [pc, #76]	; (801c3a8 <UTIL_TIMER_Start+0xd4>)
 801c35a:	699b      	ldr	r3, [r3, #24]
 801c35c:	4798      	blx	r3
 801c35e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	681a      	ldr	r2, [r3, #0]
 801c364:	697b      	ldr	r3, [r7, #20]
 801c366:	441a      	add	r2, r3
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	681a      	ldr	r2, [r3, #0]
 801c370:	4b0e      	ldr	r3, [pc, #56]	; (801c3ac <UTIL_TIMER_Start+0xd8>)
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	429a      	cmp	r2, r3
 801c378:	d203      	bcs.n	801c382 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c37a:	6878      	ldr	r0, [r7, #4]
 801c37c:	f000 f9d6 	bl	801c72c <TimerInsertNewHeadTimer>
 801c380:	e002      	b.n	801c388 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c382:	6878      	ldr	r0, [r7, #4]
 801c384:	f000 f9a2 	bl	801c6cc <TimerInsertTimer>
 801c388:	69fb      	ldr	r3, [r7, #28]
 801c38a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	f383 8810 	msr	PRIMASK, r3
}
 801c392:	bf00      	nop
  {
 801c394:	e002      	b.n	801c39c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c396:	2301      	movs	r3, #1
 801c398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801c39c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801c3a0:	4618      	mov	r0, r3
 801c3a2:	3728      	adds	r7, #40	; 0x28
 801c3a4:	46bd      	mov	sp, r7
 801c3a6:	bd80      	pop	{r7, pc}
 801c3a8:	0801d808 	.word	0x0801d808
 801c3ac:	20001b68 	.word	0x20001b68

0801c3b0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	b088      	sub	sp, #32
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c3b8:	2300      	movs	r3, #0
 801c3ba:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d05b      	beq.n	801c47a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c3c2:	f3ef 8310 	mrs	r3, PRIMASK
 801c3c6:	60fb      	str	r3, [r7, #12]
  return(result);
 801c3c8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c3ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c3cc:	b672      	cpsid	i
}
 801c3ce:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c3d0:	4b2d      	ldr	r3, [pc, #180]	; (801c488 <UTIL_TIMER_Stop+0xd8>)
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c3d6:	4b2c      	ldr	r3, [pc, #176]	; (801c488 <UTIL_TIMER_Stop+0xd8>)
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	2201      	movs	r2, #1
 801c3e0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c3e2:	4b29      	ldr	r3, [pc, #164]	; (801c488 <UTIL_TIMER_Stop+0xd8>)
 801c3e4:	681b      	ldr	r3, [r3, #0]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d041      	beq.n	801c46e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	2200      	movs	r2, #0
 801c3ee:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c3f0:	4b25      	ldr	r3, [pc, #148]	; (801c488 <UTIL_TIMER_Stop+0xd8>)
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	687a      	ldr	r2, [r7, #4]
 801c3f6:	429a      	cmp	r2, r3
 801c3f8:	d134      	bne.n	801c464 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801c3fa:	4b23      	ldr	r3, [pc, #140]	; (801c488 <UTIL_TIMER_Stop+0xd8>)
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	2200      	movs	r2, #0
 801c400:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c402:	4b21      	ldr	r3, [pc, #132]	; (801c488 <UTIL_TIMER_Stop+0xd8>)
 801c404:	681b      	ldr	r3, [r3, #0]
 801c406:	695b      	ldr	r3, [r3, #20]
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d00a      	beq.n	801c422 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801c40c:	4b1e      	ldr	r3, [pc, #120]	; (801c488 <UTIL_TIMER_Stop+0xd8>)
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	695b      	ldr	r3, [r3, #20]
 801c412:	4a1d      	ldr	r2, [pc, #116]	; (801c488 <UTIL_TIMER_Stop+0xd8>)
 801c414:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801c416:	4b1c      	ldr	r3, [pc, #112]	; (801c488 <UTIL_TIMER_Stop+0xd8>)
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	4618      	mov	r0, r3
 801c41c:	f000 f92c 	bl	801c678 <TimerSetTimeout>
 801c420:	e023      	b.n	801c46a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c422:	4b1a      	ldr	r3, [pc, #104]	; (801c48c <UTIL_TIMER_Stop+0xdc>)
 801c424:	68db      	ldr	r3, [r3, #12]
 801c426:	4798      	blx	r3
            TimerListHead = NULL;
 801c428:	4b17      	ldr	r3, [pc, #92]	; (801c488 <UTIL_TIMER_Stop+0xd8>)
 801c42a:	2200      	movs	r2, #0
 801c42c:	601a      	str	r2, [r3, #0]
 801c42e:	e01c      	b.n	801c46a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c430:	697a      	ldr	r2, [r7, #20]
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	429a      	cmp	r2, r3
 801c436:	d110      	bne.n	801c45a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801c438:	697b      	ldr	r3, [r7, #20]
 801c43a:	695b      	ldr	r3, [r3, #20]
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d006      	beq.n	801c44e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801c440:	697b      	ldr	r3, [r7, #20]
 801c442:	695b      	ldr	r3, [r3, #20]
 801c444:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c446:	69bb      	ldr	r3, [r7, #24]
 801c448:	697a      	ldr	r2, [r7, #20]
 801c44a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c44c:	e00d      	b.n	801c46a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801c44e:	2300      	movs	r3, #0
 801c450:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c452:	69bb      	ldr	r3, [r7, #24]
 801c454:	697a      	ldr	r2, [r7, #20]
 801c456:	615a      	str	r2, [r3, #20]
            break;
 801c458:	e007      	b.n	801c46a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801c45a:	697b      	ldr	r3, [r7, #20]
 801c45c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c45e:	697b      	ldr	r3, [r7, #20]
 801c460:	695b      	ldr	r3, [r3, #20]
 801c462:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c464:	697b      	ldr	r3, [r7, #20]
 801c466:	2b00      	cmp	r3, #0
 801c468:	d1e2      	bne.n	801c430 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c46a:	2300      	movs	r3, #0
 801c46c:	77fb      	strb	r3, [r7, #31]
 801c46e:	693b      	ldr	r3, [r7, #16]
 801c470:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c472:	68bb      	ldr	r3, [r7, #8]
 801c474:	f383 8810 	msr	PRIMASK, r3
}
 801c478:	e001      	b.n	801c47e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c47a:	2301      	movs	r3, #1
 801c47c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801c47e:	7ffb      	ldrb	r3, [r7, #31]
}
 801c480:	4618      	mov	r0, r3
 801c482:	3720      	adds	r7, #32
 801c484:	46bd      	mov	sp, r7
 801c486:	bd80      	pop	{r7, pc}
 801c488:	20001b68 	.word	0x20001b68
 801c48c:	0801d808 	.word	0x0801d808

0801c490 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c490:	b580      	push	{r7, lr}
 801c492:	b084      	sub	sp, #16
 801c494:	af00      	add	r7, sp, #0
 801c496:	6078      	str	r0, [r7, #4]
 801c498:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c49a:	2300      	movs	r3, #0
 801c49c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d102      	bne.n	801c4aa <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c4a4:	2301      	movs	r3, #1
 801c4a6:	73fb      	strb	r3, [r7, #15]
 801c4a8:	e014      	b.n	801c4d4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c4aa:	4b0d      	ldr	r3, [pc, #52]	; (801c4e0 <UTIL_TIMER_SetPeriod+0x50>)
 801c4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c4ae:	6838      	ldr	r0, [r7, #0]
 801c4b0:	4798      	blx	r3
 801c4b2:	4602      	mov	r2, r0
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c4b8:	6878      	ldr	r0, [r7, #4]
 801c4ba:	f000 f8c1 	bl	801c640 <TimerExists>
 801c4be:	4603      	mov	r3, r0
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	d007      	beq.n	801c4d4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c4c4:	6878      	ldr	r0, [r7, #4]
 801c4c6:	f7ff ff73 	bl	801c3b0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c4ca:	6878      	ldr	r0, [r7, #4]
 801c4cc:	f7ff ff02 	bl	801c2d4 <UTIL_TIMER_Start>
 801c4d0:	4603      	mov	r3, r0
 801c4d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801c4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 801c4d6:	4618      	mov	r0, r3
 801c4d8:	3710      	adds	r7, #16
 801c4da:	46bd      	mov	sp, r7
 801c4dc:	bd80      	pop	{r7, pc}
 801c4de:	bf00      	nop
 801c4e0:	0801d808 	.word	0x0801d808

0801c4e4 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c4e4:	b590      	push	{r4, r7, lr}
 801c4e6:	b089      	sub	sp, #36	; 0x24
 801c4e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4ea:	f3ef 8310 	mrs	r3, PRIMASK
 801c4ee:	60bb      	str	r3, [r7, #8]
  return(result);
 801c4f0:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c4f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4f4:	b672      	cpsid	i
}
 801c4f6:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c4f8:	4b38      	ldr	r3, [pc, #224]	; (801c5dc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c4fa:	695b      	ldr	r3, [r3, #20]
 801c4fc:	4798      	blx	r3
 801c4fe:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c500:	4b36      	ldr	r3, [pc, #216]	; (801c5dc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c502:	691b      	ldr	r3, [r3, #16]
 801c504:	4798      	blx	r3
 801c506:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c508:	693a      	ldr	r2, [r7, #16]
 801c50a:	697b      	ldr	r3, [r7, #20]
 801c50c:	1ad3      	subs	r3, r2, r3
 801c50e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c510:	4b33      	ldr	r3, [pc, #204]	; (801c5e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	2b00      	cmp	r3, #0
 801c516:	d037      	beq.n	801c588 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801c518:	4b31      	ldr	r3, [pc, #196]	; (801c5e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c51a:	681b      	ldr	r3, [r3, #0]
 801c51c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c51e:	69fb      	ldr	r3, [r7, #28]
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	68fa      	ldr	r2, [r7, #12]
 801c524:	429a      	cmp	r2, r3
 801c526:	d206      	bcs.n	801c536 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801c528:	69fb      	ldr	r3, [r7, #28]
 801c52a:	681a      	ldr	r2, [r3, #0]
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	1ad2      	subs	r2, r2, r3
 801c530:	69fb      	ldr	r3, [r7, #28]
 801c532:	601a      	str	r2, [r3, #0]
 801c534:	e002      	b.n	801c53c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801c536:	69fb      	ldr	r3, [r7, #28]
 801c538:	2200      	movs	r2, #0
 801c53a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c53c:	69fb      	ldr	r3, [r7, #28]
 801c53e:	695b      	ldr	r3, [r3, #20]
 801c540:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c542:	69fb      	ldr	r3, [r7, #28]
 801c544:	2b00      	cmp	r3, #0
 801c546:	d1ea      	bne.n	801c51e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c548:	e01e      	b.n	801c588 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801c54a:	4b25      	ldr	r3, [pc, #148]	; (801c5e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c54c:	681b      	ldr	r3, [r3, #0]
 801c54e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c550:	4b23      	ldr	r3, [pc, #140]	; (801c5e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	695b      	ldr	r3, [r3, #20]
 801c556:	4a22      	ldr	r2, [pc, #136]	; (801c5e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c558:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801c55a:	69fb      	ldr	r3, [r7, #28]
 801c55c:	2200      	movs	r2, #0
 801c55e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c560:	69fb      	ldr	r3, [r7, #28]
 801c562:	2200      	movs	r2, #0
 801c564:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c566:	69fb      	ldr	r3, [r7, #28]
 801c568:	68db      	ldr	r3, [r3, #12]
 801c56a:	69fa      	ldr	r2, [r7, #28]
 801c56c:	6912      	ldr	r2, [r2, #16]
 801c56e:	4610      	mov	r0, r2
 801c570:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c572:	69fb      	ldr	r3, [r7, #28]
 801c574:	7adb      	ldrb	r3, [r3, #11]
 801c576:	2b01      	cmp	r3, #1
 801c578:	d106      	bne.n	801c588 <UTIL_TIMER_IRQ_Handler+0xa4>
 801c57a:	69fb      	ldr	r3, [r7, #28]
 801c57c:	7a9b      	ldrb	r3, [r3, #10]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d102      	bne.n	801c588 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801c582:	69f8      	ldr	r0, [r7, #28]
 801c584:	f7ff fea6 	bl	801c2d4 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c588:	4b15      	ldr	r3, [pc, #84]	; (801c5e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d00d      	beq.n	801c5ac <UTIL_TIMER_IRQ_Handler+0xc8>
 801c590:	4b13      	ldr	r3, [pc, #76]	; (801c5e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d0d7      	beq.n	801c54a <UTIL_TIMER_IRQ_Handler+0x66>
 801c59a:	4b11      	ldr	r3, [pc, #68]	; (801c5e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	681c      	ldr	r4, [r3, #0]
 801c5a0:	4b0e      	ldr	r3, [pc, #56]	; (801c5dc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c5a2:	699b      	ldr	r3, [r3, #24]
 801c5a4:	4798      	blx	r3
 801c5a6:	4603      	mov	r3, r0
 801c5a8:	429c      	cmp	r4, r3
 801c5aa:	d3ce      	bcc.n	801c54a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801c5ac:	4b0c      	ldr	r3, [pc, #48]	; (801c5e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d009      	beq.n	801c5c8 <UTIL_TIMER_IRQ_Handler+0xe4>
 801c5b4:	4b0a      	ldr	r3, [pc, #40]	; (801c5e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	7a1b      	ldrb	r3, [r3, #8]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d104      	bne.n	801c5c8 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801c5be:	4b08      	ldr	r3, [pc, #32]	; (801c5e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	4618      	mov	r0, r3
 801c5c4:	f000 f858 	bl	801c678 <TimerSetTimeout>
 801c5c8:	69bb      	ldr	r3, [r7, #24]
 801c5ca:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	f383 8810 	msr	PRIMASK, r3
}
 801c5d2:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801c5d4:	bf00      	nop
 801c5d6:	3724      	adds	r7, #36	; 0x24
 801c5d8:	46bd      	mov	sp, r7
 801c5da:	bd90      	pop	{r4, r7, pc}
 801c5dc:	0801d808 	.word	0x0801d808
 801c5e0:	20001b68 	.word	0x20001b68

0801c5e4 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801c5e4:	b580      	push	{r7, lr}
 801c5e6:	b082      	sub	sp, #8
 801c5e8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801c5ea:	4b06      	ldr	r3, [pc, #24]	; (801c604 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c5ec:	69db      	ldr	r3, [r3, #28]
 801c5ee:	4798      	blx	r3
 801c5f0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801c5f2:	4b04      	ldr	r3, [pc, #16]	; (801c604 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5f6:	6878      	ldr	r0, [r7, #4]
 801c5f8:	4798      	blx	r3
 801c5fa:	4603      	mov	r3, r0
}
 801c5fc:	4618      	mov	r0, r3
 801c5fe:	3708      	adds	r7, #8
 801c600:	46bd      	mov	sp, r7
 801c602:	bd80      	pop	{r7, pc}
 801c604:	0801d808 	.word	0x0801d808

0801c608 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801c608:	b580      	push	{r7, lr}
 801c60a:	b084      	sub	sp, #16
 801c60c:	af00      	add	r7, sp, #0
 801c60e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801c610:	4b0a      	ldr	r3, [pc, #40]	; (801c63c <UTIL_TIMER_GetElapsedTime+0x34>)
 801c612:	69db      	ldr	r3, [r3, #28]
 801c614:	4798      	blx	r3
 801c616:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801c618:	4b08      	ldr	r3, [pc, #32]	; (801c63c <UTIL_TIMER_GetElapsedTime+0x34>)
 801c61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c61c:	6878      	ldr	r0, [r7, #4]
 801c61e:	4798      	blx	r3
 801c620:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801c622:	4b06      	ldr	r3, [pc, #24]	; (801c63c <UTIL_TIMER_GetElapsedTime+0x34>)
 801c624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c626:	68f9      	ldr	r1, [r7, #12]
 801c628:	68ba      	ldr	r2, [r7, #8]
 801c62a:	1a8a      	subs	r2, r1, r2
 801c62c:	4610      	mov	r0, r2
 801c62e:	4798      	blx	r3
 801c630:	4603      	mov	r3, r0
}
 801c632:	4618      	mov	r0, r3
 801c634:	3710      	adds	r7, #16
 801c636:	46bd      	mov	sp, r7
 801c638:	bd80      	pop	{r7, pc}
 801c63a:	bf00      	nop
 801c63c:	0801d808 	.word	0x0801d808

0801c640 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801c640:	b480      	push	{r7}
 801c642:	b085      	sub	sp, #20
 801c644:	af00      	add	r7, sp, #0
 801c646:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c648:	4b0a      	ldr	r3, [pc, #40]	; (801c674 <TimerExists+0x34>)
 801c64a:	681b      	ldr	r3, [r3, #0]
 801c64c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801c64e:	e008      	b.n	801c662 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801c650:	68fa      	ldr	r2, [r7, #12]
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	429a      	cmp	r2, r3
 801c656:	d101      	bne.n	801c65c <TimerExists+0x1c>
    {
      return true;
 801c658:	2301      	movs	r3, #1
 801c65a:	e006      	b.n	801c66a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	695b      	ldr	r3, [r3, #20]
 801c660:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801c662:	68fb      	ldr	r3, [r7, #12]
 801c664:	2b00      	cmp	r3, #0
 801c666:	d1f3      	bne.n	801c650 <TimerExists+0x10>
  }
  return false;
 801c668:	2300      	movs	r3, #0
}
 801c66a:	4618      	mov	r0, r3
 801c66c:	3714      	adds	r7, #20
 801c66e:	46bd      	mov	sp, r7
 801c670:	bc80      	pop	{r7}
 801c672:	4770      	bx	lr
 801c674:	20001b68 	.word	0x20001b68

0801c678 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801c678:	b590      	push	{r4, r7, lr}
 801c67a:	b085      	sub	sp, #20
 801c67c:	af00      	add	r7, sp, #0
 801c67e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801c680:	4b11      	ldr	r3, [pc, #68]	; (801c6c8 <TimerSetTimeout+0x50>)
 801c682:	6a1b      	ldr	r3, [r3, #32]
 801c684:	4798      	blx	r3
 801c686:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	2201      	movs	r2, #1
 801c68c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	681c      	ldr	r4, [r3, #0]
 801c692:	4b0d      	ldr	r3, [pc, #52]	; (801c6c8 <TimerSetTimeout+0x50>)
 801c694:	699b      	ldr	r3, [r3, #24]
 801c696:	4798      	blx	r3
 801c698:	4602      	mov	r2, r0
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	4413      	add	r3, r2
 801c69e:	429c      	cmp	r4, r3
 801c6a0:	d207      	bcs.n	801c6b2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801c6a2:	4b09      	ldr	r3, [pc, #36]	; (801c6c8 <TimerSetTimeout+0x50>)
 801c6a4:	699b      	ldr	r3, [r3, #24]
 801c6a6:	4798      	blx	r3
 801c6a8:	4602      	mov	r2, r0
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	441a      	add	r2, r3
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801c6b2:	4b05      	ldr	r3, [pc, #20]	; (801c6c8 <TimerSetTimeout+0x50>)
 801c6b4:	689b      	ldr	r3, [r3, #8]
 801c6b6:	687a      	ldr	r2, [r7, #4]
 801c6b8:	6812      	ldr	r2, [r2, #0]
 801c6ba:	4610      	mov	r0, r2
 801c6bc:	4798      	blx	r3
}
 801c6be:	bf00      	nop
 801c6c0:	3714      	adds	r7, #20
 801c6c2:	46bd      	mov	sp, r7
 801c6c4:	bd90      	pop	{r4, r7, pc}
 801c6c6:	bf00      	nop
 801c6c8:	0801d808 	.word	0x0801d808

0801c6cc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801c6cc:	b480      	push	{r7}
 801c6ce:	b085      	sub	sp, #20
 801c6d0:	af00      	add	r7, sp, #0
 801c6d2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c6d4:	4b14      	ldr	r3, [pc, #80]	; (801c728 <TimerInsertTimer+0x5c>)
 801c6d6:	681b      	ldr	r3, [r3, #0]
 801c6d8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801c6da:	4b13      	ldr	r3, [pc, #76]	; (801c728 <TimerInsertTimer+0x5c>)
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	695b      	ldr	r3, [r3, #20]
 801c6e0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801c6e2:	e012      	b.n	801c70a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	681a      	ldr	r2, [r3, #0]
 801c6e8:	68bb      	ldr	r3, [r7, #8]
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	429a      	cmp	r2, r3
 801c6ee:	d905      	bls.n	801c6fc <TimerInsertTimer+0x30>
    {
        cur = next;
 801c6f0:	68bb      	ldr	r3, [r7, #8]
 801c6f2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801c6f4:	68bb      	ldr	r3, [r7, #8]
 801c6f6:	695b      	ldr	r3, [r3, #20]
 801c6f8:	60bb      	str	r3, [r7, #8]
 801c6fa:	e006      	b.n	801c70a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	687a      	ldr	r2, [r7, #4]
 801c700:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	68ba      	ldr	r2, [r7, #8]
 801c706:	615a      	str	r2, [r3, #20]
        return;
 801c708:	e009      	b.n	801c71e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801c70a:	68fb      	ldr	r3, [r7, #12]
 801c70c:	695b      	ldr	r3, [r3, #20]
 801c70e:	2b00      	cmp	r3, #0
 801c710:	d1e8      	bne.n	801c6e4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	687a      	ldr	r2, [r7, #4]
 801c716:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801c718:	687b      	ldr	r3, [r7, #4]
 801c71a:	2200      	movs	r2, #0
 801c71c:	615a      	str	r2, [r3, #20]
}
 801c71e:	3714      	adds	r7, #20
 801c720:	46bd      	mov	sp, r7
 801c722:	bc80      	pop	{r7}
 801c724:	4770      	bx	lr
 801c726:	bf00      	nop
 801c728:	20001b68 	.word	0x20001b68

0801c72c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801c72c:	b580      	push	{r7, lr}
 801c72e:	b084      	sub	sp, #16
 801c730:	af00      	add	r7, sp, #0
 801c732:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c734:	4b0b      	ldr	r3, [pc, #44]	; (801c764 <TimerInsertNewHeadTimer+0x38>)
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d002      	beq.n	801c746 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	2200      	movs	r2, #0
 801c744:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	68fa      	ldr	r2, [r7, #12]
 801c74a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801c74c:	4a05      	ldr	r2, [pc, #20]	; (801c764 <TimerInsertNewHeadTimer+0x38>)
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801c752:	4b04      	ldr	r3, [pc, #16]	; (801c764 <TimerInsertNewHeadTimer+0x38>)
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	4618      	mov	r0, r3
 801c758:	f7ff ff8e 	bl	801c678 <TimerSetTimeout>
}
 801c75c:	bf00      	nop
 801c75e:	3710      	adds	r7, #16
 801c760:	46bd      	mov	sp, r7
 801c762:	bd80      	pop	{r7, pc}
 801c764:	20001b68 	.word	0x20001b68

0801c768 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801c768:	b580      	push	{r7, lr}
 801c76a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801c76c:	2218      	movs	r2, #24
 801c76e:	2100      	movs	r1, #0
 801c770:	4807      	ldr	r0, [pc, #28]	; (801c790 <UTIL_ADV_TRACE_Init+0x28>)
 801c772:	f7fe fffa 	bl	801b76a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801c776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c77a:	2100      	movs	r1, #0
 801c77c:	4805      	ldr	r0, [pc, #20]	; (801c794 <UTIL_ADV_TRACE_Init+0x2c>)
 801c77e:	f7fe fff4 	bl	801b76a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801c782:	4b05      	ldr	r3, [pc, #20]	; (801c798 <UTIL_ADV_TRACE_Init+0x30>)
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	4805      	ldr	r0, [pc, #20]	; (801c79c <UTIL_ADV_TRACE_Init+0x34>)
 801c788:	4798      	blx	r3
 801c78a:	4603      	mov	r3, r0
}
 801c78c:	4618      	mov	r0, r3
 801c78e:	bd80      	pop	{r7, pc}
 801c790:	20001b6c 	.word	0x20001b6c
 801c794:	20001b84 	.word	0x20001b84
 801c798:	0801d848 	.word	0x0801d848
 801c79c:	0801ca09 	.word	0x0801ca09

0801c7a0 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801c7a0:	b480      	push	{r7}
 801c7a2:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c7a4:	4b06      	ldr	r3, [pc, #24]	; (801c7c0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c7a6:	8a5a      	ldrh	r2, [r3, #18]
 801c7a8:	4b05      	ldr	r3, [pc, #20]	; (801c7c0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c7aa:	8a1b      	ldrh	r3, [r3, #16]
 801c7ac:	429a      	cmp	r2, r3
 801c7ae:	d101      	bne.n	801c7b4 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801c7b0:	2301      	movs	r3, #1
 801c7b2:	e000      	b.n	801c7b6 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801c7b4:	2300      	movs	r3, #0
}
 801c7b6:	4618      	mov	r0, r3
 801c7b8:	46bd      	mov	sp, r7
 801c7ba:	bc80      	pop	{r7}
 801c7bc:	4770      	bx	lr
 801c7be:	bf00      	nop
 801c7c0:	20001b6c 	.word	0x20001b6c

0801c7c4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801c7c4:	b408      	push	{r3}
 801c7c6:	b580      	push	{r7, lr}
 801c7c8:	b08d      	sub	sp, #52	; 0x34
 801c7ca:	af00      	add	r7, sp, #0
 801c7cc:	60f8      	str	r0, [r7, #12]
 801c7ce:	60b9      	str	r1, [r7, #8]
 801c7d0:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801c7d2:	2300      	movs	r3, #0
 801c7d4:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801c7d6:	2300      	movs	r3, #0
 801c7d8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801c7da:	4b37      	ldr	r3, [pc, #220]	; (801c8b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c7dc:	7a1b      	ldrb	r3, [r3, #8]
 801c7de:	461a      	mov	r2, r3
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	4293      	cmp	r3, r2
 801c7e4:	d902      	bls.n	801c7ec <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801c7e6:	f06f 0304 	mvn.w	r3, #4
 801c7ea:	e05e      	b.n	801c8aa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801c7ec:	4b32      	ldr	r3, [pc, #200]	; (801c8b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c7ee:	68da      	ldr	r2, [r3, #12]
 801c7f0:	68bb      	ldr	r3, [r7, #8]
 801c7f2:	4013      	ands	r3, r2
 801c7f4:	68ba      	ldr	r2, [r7, #8]
 801c7f6:	429a      	cmp	r2, r3
 801c7f8:	d002      	beq.n	801c800 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801c7fa:	f06f 0305 	mvn.w	r3, #5
 801c7fe:	e054      	b.n	801c8aa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801c800:	4b2d      	ldr	r3, [pc, #180]	; (801c8b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c802:	685b      	ldr	r3, [r3, #4]
 801c804:	2b00      	cmp	r3, #0
 801c806:	d00a      	beq.n	801c81e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d007      	beq.n	801c81e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801c80e:	4b2a      	ldr	r3, [pc, #168]	; (801c8b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c810:	685b      	ldr	r3, [r3, #4]
 801c812:	f107 0116 	add.w	r1, r7, #22
 801c816:	f107 0218 	add.w	r2, r7, #24
 801c81a:	4610      	mov	r0, r2
 801c81c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801c81e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c822:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c828:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c82c:	4823      	ldr	r0, [pc, #140]	; (801c8bc <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801c82e:	f7ff fa29 	bl	801bc84 <tiny_vsnprintf_like>
 801c832:	4603      	mov	r3, r0
 801c834:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801c836:	f000 f9f1 	bl	801cc1c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801c83a:	8afa      	ldrh	r2, [r7, #22]
 801c83c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c83e:	4413      	add	r3, r2
 801c840:	b29b      	uxth	r3, r3
 801c842:	f107 0214 	add.w	r2, r7, #20
 801c846:	4611      	mov	r1, r2
 801c848:	4618      	mov	r0, r3
 801c84a:	f000 f969 	bl	801cb20 <TRACE_AllocateBufer>
 801c84e:	4603      	mov	r3, r0
 801c850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c854:	d025      	beq.n	801c8a2 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801c856:	2300      	movs	r3, #0
 801c858:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c85a:	e00e      	b.n	801c87a <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801c85c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c85e:	8aba      	ldrh	r2, [r7, #20]
 801c860:	3330      	adds	r3, #48	; 0x30
 801c862:	443b      	add	r3, r7
 801c864:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801c868:	4b15      	ldr	r3, [pc, #84]	; (801c8c0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c86a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801c86c:	8abb      	ldrh	r3, [r7, #20]
 801c86e:	3301      	adds	r3, #1
 801c870:	b29b      	uxth	r3, r3
 801c872:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801c874:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c876:	3301      	adds	r3, #1
 801c878:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c87a:	8afb      	ldrh	r3, [r7, #22]
 801c87c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c87e:	429a      	cmp	r2, r3
 801c880:	d3ec      	bcc.n	801c85c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c882:	8abb      	ldrh	r3, [r7, #20]
 801c884:	461a      	mov	r2, r3
 801c886:	4b0e      	ldr	r3, [pc, #56]	; (801c8c0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c888:	18d0      	adds	r0, r2, r3
 801c88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c88c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c88e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c892:	f7ff f9f7 	bl	801bc84 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c896:	f000 f9df 	bl	801cc58 <TRACE_UnLock>

    return TRACE_Send();
 801c89a:	f000 f831 	bl	801c900 <TRACE_Send>
 801c89e:	4603      	mov	r3, r0
 801c8a0:	e003      	b.n	801c8aa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c8a2:	f000 f9d9 	bl	801cc58 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c8a6:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c8aa:	4618      	mov	r0, r3
 801c8ac:	3734      	adds	r7, #52	; 0x34
 801c8ae:	46bd      	mov	sp, r7
 801c8b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c8b4:	b001      	add	sp, #4
 801c8b6:	4770      	bx	lr
 801c8b8:	20001b6c 	.word	0x20001b6c
 801c8bc:	20001f84 	.word	0x20001f84
 801c8c0:	20001b84 	.word	0x20001b84

0801c8c4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c8c4:	b480      	push	{r7}
 801c8c6:	b083      	sub	sp, #12
 801c8c8:	af00      	add	r7, sp, #0
 801c8ca:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801c8cc:	4a03      	ldr	r2, [pc, #12]	; (801c8dc <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	6053      	str	r3, [r2, #4]
}
 801c8d2:	bf00      	nop
 801c8d4:	370c      	adds	r7, #12
 801c8d6:	46bd      	mov	sp, r7
 801c8d8:	bc80      	pop	{r7}
 801c8da:	4770      	bx	lr
 801c8dc:	20001b6c 	.word	0x20001b6c

0801c8e0 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c8e0:	b480      	push	{r7}
 801c8e2:	b083      	sub	sp, #12
 801c8e4:	af00      	add	r7, sp, #0
 801c8e6:	4603      	mov	r3, r0
 801c8e8:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c8ea:	4a04      	ldr	r2, [pc, #16]	; (801c8fc <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c8ec:	79fb      	ldrb	r3, [r7, #7]
 801c8ee:	7213      	strb	r3, [r2, #8]
}
 801c8f0:	bf00      	nop
 801c8f2:	370c      	adds	r7, #12
 801c8f4:	46bd      	mov	sp, r7
 801c8f6:	bc80      	pop	{r7}
 801c8f8:	4770      	bx	lr
 801c8fa:	bf00      	nop
 801c8fc:	20001b6c 	.word	0x20001b6c

0801c900 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801c900:	b580      	push	{r7, lr}
 801c902:	b088      	sub	sp, #32
 801c904:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801c906:	2300      	movs	r3, #0
 801c908:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801c90a:	2300      	movs	r3, #0
 801c90c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c90e:	f3ef 8310 	mrs	r3, PRIMASK
 801c912:	613b      	str	r3, [r7, #16]
  return(result);
 801c914:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c916:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c918:	b672      	cpsid	i
}
 801c91a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801c91c:	f000 f9ba 	bl	801cc94 <TRACE_IsLocked>
 801c920:	4603      	mov	r3, r0
 801c922:	2b00      	cmp	r3, #0
 801c924:	d15d      	bne.n	801c9e2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801c926:	f000 f979 	bl	801cc1c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c92a:	4b34      	ldr	r3, [pc, #208]	; (801c9fc <TRACE_Send+0xfc>)
 801c92c:	8a1a      	ldrh	r2, [r3, #16]
 801c92e:	4b33      	ldr	r3, [pc, #204]	; (801c9fc <TRACE_Send+0xfc>)
 801c930:	8a5b      	ldrh	r3, [r3, #18]
 801c932:	429a      	cmp	r2, r3
 801c934:	d04d      	beq.n	801c9d2 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c936:	4b31      	ldr	r3, [pc, #196]	; (801c9fc <TRACE_Send+0xfc>)
 801c938:	789b      	ldrb	r3, [r3, #2]
 801c93a:	2b01      	cmp	r3, #1
 801c93c:	d117      	bne.n	801c96e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801c93e:	4b2f      	ldr	r3, [pc, #188]	; (801c9fc <TRACE_Send+0xfc>)
 801c940:	881a      	ldrh	r2, [r3, #0]
 801c942:	4b2e      	ldr	r3, [pc, #184]	; (801c9fc <TRACE_Send+0xfc>)
 801c944:	8a1b      	ldrh	r3, [r3, #16]
 801c946:	1ad3      	subs	r3, r2, r3
 801c948:	b29a      	uxth	r2, r3
 801c94a:	4b2c      	ldr	r3, [pc, #176]	; (801c9fc <TRACE_Send+0xfc>)
 801c94c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c94e:	4b2b      	ldr	r3, [pc, #172]	; (801c9fc <TRACE_Send+0xfc>)
 801c950:	2202      	movs	r2, #2
 801c952:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c954:	4b29      	ldr	r3, [pc, #164]	; (801c9fc <TRACE_Send+0xfc>)
 801c956:	2200      	movs	r2, #0
 801c958:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c95a:	4b28      	ldr	r3, [pc, #160]	; (801c9fc <TRACE_Send+0xfc>)
 801c95c:	8a9b      	ldrh	r3, [r3, #20]
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d105      	bne.n	801c96e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c962:	4b26      	ldr	r3, [pc, #152]	; (801c9fc <TRACE_Send+0xfc>)
 801c964:	2200      	movs	r2, #0
 801c966:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c968:	4b24      	ldr	r3, [pc, #144]	; (801c9fc <TRACE_Send+0xfc>)
 801c96a:	2200      	movs	r2, #0
 801c96c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c96e:	4b23      	ldr	r3, [pc, #140]	; (801c9fc <TRACE_Send+0xfc>)
 801c970:	789b      	ldrb	r3, [r3, #2]
 801c972:	2b00      	cmp	r3, #0
 801c974:	d115      	bne.n	801c9a2 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c976:	4b21      	ldr	r3, [pc, #132]	; (801c9fc <TRACE_Send+0xfc>)
 801c978:	8a5a      	ldrh	r2, [r3, #18]
 801c97a:	4b20      	ldr	r3, [pc, #128]	; (801c9fc <TRACE_Send+0xfc>)
 801c97c:	8a1b      	ldrh	r3, [r3, #16]
 801c97e:	429a      	cmp	r2, r3
 801c980:	d908      	bls.n	801c994 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c982:	4b1e      	ldr	r3, [pc, #120]	; (801c9fc <TRACE_Send+0xfc>)
 801c984:	8a5a      	ldrh	r2, [r3, #18]
 801c986:	4b1d      	ldr	r3, [pc, #116]	; (801c9fc <TRACE_Send+0xfc>)
 801c988:	8a1b      	ldrh	r3, [r3, #16]
 801c98a:	1ad3      	subs	r3, r2, r3
 801c98c:	b29a      	uxth	r2, r3
 801c98e:	4b1b      	ldr	r3, [pc, #108]	; (801c9fc <TRACE_Send+0xfc>)
 801c990:	829a      	strh	r2, [r3, #20]
 801c992:	e006      	b.n	801c9a2 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c994:	4b19      	ldr	r3, [pc, #100]	; (801c9fc <TRACE_Send+0xfc>)
 801c996:	8a1b      	ldrh	r3, [r3, #16]
 801c998:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c99c:	b29a      	uxth	r2, r3
 801c99e:	4b17      	ldr	r3, [pc, #92]	; (801c9fc <TRACE_Send+0xfc>)
 801c9a0:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c9a2:	4b16      	ldr	r3, [pc, #88]	; (801c9fc <TRACE_Send+0xfc>)
 801c9a4:	8a1b      	ldrh	r3, [r3, #16]
 801c9a6:	461a      	mov	r2, r3
 801c9a8:	4b15      	ldr	r3, [pc, #84]	; (801ca00 <TRACE_Send+0x100>)
 801c9aa:	4413      	add	r3, r2
 801c9ac:	61bb      	str	r3, [r7, #24]
 801c9ae:	697b      	ldr	r3, [r7, #20]
 801c9b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9b2:	68fb      	ldr	r3, [r7, #12]
 801c9b4:	f383 8810 	msr	PRIMASK, r3
}
 801c9b8:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801c9ba:	f7e5 f961 	bl	8001c80 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c9be:	4b11      	ldr	r3, [pc, #68]	; (801ca04 <TRACE_Send+0x104>)
 801c9c0:	68db      	ldr	r3, [r3, #12]
 801c9c2:	4a0e      	ldr	r2, [pc, #56]	; (801c9fc <TRACE_Send+0xfc>)
 801c9c4:	8a92      	ldrh	r2, [r2, #20]
 801c9c6:	4611      	mov	r1, r2
 801c9c8:	69b8      	ldr	r0, [r7, #24]
 801c9ca:	4798      	blx	r3
 801c9cc:	4603      	mov	r3, r0
 801c9ce:	77fb      	strb	r3, [r7, #31]
 801c9d0:	e00d      	b.n	801c9ee <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801c9d2:	f000 f941 	bl	801cc58 <TRACE_UnLock>
 801c9d6:	697b      	ldr	r3, [r7, #20]
 801c9d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9da:	68bb      	ldr	r3, [r7, #8]
 801c9dc:	f383 8810 	msr	PRIMASK, r3
}
 801c9e0:	e005      	b.n	801c9ee <TRACE_Send+0xee>
 801c9e2:	697b      	ldr	r3, [r7, #20]
 801c9e4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	f383 8810 	msr	PRIMASK, r3
}
 801c9ec:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801c9ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c9f2:	4618      	mov	r0, r3
 801c9f4:	3720      	adds	r7, #32
 801c9f6:	46bd      	mov	sp, r7
 801c9f8:	bd80      	pop	{r7, pc}
 801c9fa:	bf00      	nop
 801c9fc:	20001b6c 	.word	0x20001b6c
 801ca00:	20001b84 	.word	0x20001b84
 801ca04:	0801d848 	.word	0x0801d848

0801ca08 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801ca08:	b580      	push	{r7, lr}
 801ca0a:	b088      	sub	sp, #32
 801ca0c:	af00      	add	r7, sp, #0
 801ca0e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801ca10:	2300      	movs	r3, #0
 801ca12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca14:	f3ef 8310 	mrs	r3, PRIMASK
 801ca18:	617b      	str	r3, [r7, #20]
  return(result);
 801ca1a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ca1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca1e:	b672      	cpsid	i
}
 801ca20:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801ca22:	4b3c      	ldr	r3, [pc, #240]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca24:	789b      	ldrb	r3, [r3, #2]
 801ca26:	2b02      	cmp	r3, #2
 801ca28:	d106      	bne.n	801ca38 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ca2a:	4b3a      	ldr	r3, [pc, #232]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca2c:	2200      	movs	r2, #0
 801ca2e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ca30:	4b38      	ldr	r3, [pc, #224]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca32:	2200      	movs	r2, #0
 801ca34:	821a      	strh	r2, [r3, #16]
 801ca36:	e00a      	b.n	801ca4e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ca38:	4b36      	ldr	r3, [pc, #216]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca3a:	8a1a      	ldrh	r2, [r3, #16]
 801ca3c:	4b35      	ldr	r3, [pc, #212]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca3e:	8a9b      	ldrh	r3, [r3, #20]
 801ca40:	4413      	add	r3, r2
 801ca42:	b29b      	uxth	r3, r3
 801ca44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ca48:	b29a      	uxth	r2, r3
 801ca4a:	4b32      	ldr	r3, [pc, #200]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca4c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801ca4e:	4b31      	ldr	r3, [pc, #196]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca50:	8a1a      	ldrh	r2, [r3, #16]
 801ca52:	4b30      	ldr	r3, [pc, #192]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca54:	8a5b      	ldrh	r3, [r3, #18]
 801ca56:	429a      	cmp	r2, r3
 801ca58:	d04d      	beq.n	801caf6 <TRACE_TxCpltCallback+0xee>
 801ca5a:	4b2e      	ldr	r3, [pc, #184]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca5c:	8adb      	ldrh	r3, [r3, #22]
 801ca5e:	2b01      	cmp	r3, #1
 801ca60:	d149      	bne.n	801caf6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ca62:	4b2c      	ldr	r3, [pc, #176]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca64:	789b      	ldrb	r3, [r3, #2]
 801ca66:	2b01      	cmp	r3, #1
 801ca68:	d117      	bne.n	801ca9a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801ca6a:	4b2a      	ldr	r3, [pc, #168]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca6c:	881a      	ldrh	r2, [r3, #0]
 801ca6e:	4b29      	ldr	r3, [pc, #164]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca70:	8a1b      	ldrh	r3, [r3, #16]
 801ca72:	1ad3      	subs	r3, r2, r3
 801ca74:	b29a      	uxth	r2, r3
 801ca76:	4b27      	ldr	r3, [pc, #156]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca78:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ca7a:	4b26      	ldr	r3, [pc, #152]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca7c:	2202      	movs	r2, #2
 801ca7e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ca80:	4b24      	ldr	r3, [pc, #144]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca82:	2200      	movs	r2, #0
 801ca84:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ca86:	4b23      	ldr	r3, [pc, #140]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca88:	8a9b      	ldrh	r3, [r3, #20]
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d105      	bne.n	801ca9a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ca8e:	4b21      	ldr	r3, [pc, #132]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca90:	2200      	movs	r2, #0
 801ca92:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ca94:	4b1f      	ldr	r3, [pc, #124]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca96:	2200      	movs	r2, #0
 801ca98:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ca9a:	4b1e      	ldr	r3, [pc, #120]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801ca9c:	789b      	ldrb	r3, [r3, #2]
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	d115      	bne.n	801cace <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801caa2:	4b1c      	ldr	r3, [pc, #112]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801caa4:	8a5a      	ldrh	r2, [r3, #18]
 801caa6:	4b1b      	ldr	r3, [pc, #108]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801caa8:	8a1b      	ldrh	r3, [r3, #16]
 801caaa:	429a      	cmp	r2, r3
 801caac:	d908      	bls.n	801cac0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801caae:	4b19      	ldr	r3, [pc, #100]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801cab0:	8a5a      	ldrh	r2, [r3, #18]
 801cab2:	4b18      	ldr	r3, [pc, #96]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801cab4:	8a1b      	ldrh	r3, [r3, #16]
 801cab6:	1ad3      	subs	r3, r2, r3
 801cab8:	b29a      	uxth	r2, r3
 801caba:	4b16      	ldr	r3, [pc, #88]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801cabc:	829a      	strh	r2, [r3, #20]
 801cabe:	e006      	b.n	801cace <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801cac0:	4b14      	ldr	r3, [pc, #80]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801cac2:	8a1b      	ldrh	r3, [r3, #16]
 801cac4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cac8:	b29a      	uxth	r2, r3
 801caca:	4b12      	ldr	r3, [pc, #72]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801cacc:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cace:	4b11      	ldr	r3, [pc, #68]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801cad0:	8a1b      	ldrh	r3, [r3, #16]
 801cad2:	461a      	mov	r2, r3
 801cad4:	4b10      	ldr	r3, [pc, #64]	; (801cb18 <TRACE_TxCpltCallback+0x110>)
 801cad6:	4413      	add	r3, r2
 801cad8:	61fb      	str	r3, [r7, #28]
 801cada:	69bb      	ldr	r3, [r7, #24]
 801cadc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cade:	693b      	ldr	r3, [r7, #16]
 801cae0:	f383 8810 	msr	PRIMASK, r3
}
 801cae4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801cae6:	4b0d      	ldr	r3, [pc, #52]	; (801cb1c <TRACE_TxCpltCallback+0x114>)
 801cae8:	68db      	ldr	r3, [r3, #12]
 801caea:	4a0a      	ldr	r2, [pc, #40]	; (801cb14 <TRACE_TxCpltCallback+0x10c>)
 801caec:	8a92      	ldrh	r2, [r2, #20]
 801caee:	4611      	mov	r1, r2
 801caf0:	69f8      	ldr	r0, [r7, #28]
 801caf2:	4798      	blx	r3
 801caf4:	e00a      	b.n	801cb0c <TRACE_TxCpltCallback+0x104>
 801caf6:	69bb      	ldr	r3, [r7, #24]
 801caf8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cafa:	68fb      	ldr	r3, [r7, #12]
 801cafc:	f383 8810 	msr	PRIMASK, r3
}
 801cb00:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801cb02:	f7e5 f8c5 	bl	8001c90 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801cb06:	f000 f8a7 	bl	801cc58 <TRACE_UnLock>
  }
}
 801cb0a:	bf00      	nop
 801cb0c:	bf00      	nop
 801cb0e:	3720      	adds	r7, #32
 801cb10:	46bd      	mov	sp, r7
 801cb12:	bd80      	pop	{r7, pc}
 801cb14:	20001b6c 	.word	0x20001b6c
 801cb18:	20001b84 	.word	0x20001b84
 801cb1c:	0801d848 	.word	0x0801d848

0801cb20 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801cb20:	b480      	push	{r7}
 801cb22:	b087      	sub	sp, #28
 801cb24:	af00      	add	r7, sp, #0
 801cb26:	4603      	mov	r3, r0
 801cb28:	6039      	str	r1, [r7, #0]
 801cb2a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801cb2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cb30:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cb32:	f3ef 8310 	mrs	r3, PRIMASK
 801cb36:	60fb      	str	r3, [r7, #12]
  return(result);
 801cb38:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cb3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cb3c:	b672      	cpsid	i
}
 801cb3e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801cb40:	4b35      	ldr	r3, [pc, #212]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cb42:	8a5a      	ldrh	r2, [r3, #18]
 801cb44:	4b34      	ldr	r3, [pc, #208]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cb46:	8a1b      	ldrh	r3, [r3, #16]
 801cb48:	429a      	cmp	r2, r3
 801cb4a:	d11b      	bne.n	801cb84 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cb4c:	4b32      	ldr	r3, [pc, #200]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cb4e:	8a5b      	ldrh	r3, [r3, #18]
 801cb50:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cb54:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801cb56:	88fa      	ldrh	r2, [r7, #6]
 801cb58:	8afb      	ldrh	r3, [r7, #22]
 801cb5a:	429a      	cmp	r2, r3
 801cb5c:	d33a      	bcc.n	801cbd4 <TRACE_AllocateBufer+0xb4>
 801cb5e:	4b2e      	ldr	r3, [pc, #184]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cb60:	8a1b      	ldrh	r3, [r3, #16]
 801cb62:	88fa      	ldrh	r2, [r7, #6]
 801cb64:	429a      	cmp	r2, r3
 801cb66:	d235      	bcs.n	801cbd4 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801cb68:	4b2b      	ldr	r3, [pc, #172]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cb6a:	2201      	movs	r2, #1
 801cb6c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cb6e:	4b2a      	ldr	r3, [pc, #168]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cb70:	8a5a      	ldrh	r2, [r3, #18]
 801cb72:	4b29      	ldr	r3, [pc, #164]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cb74:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801cb76:	4b28      	ldr	r3, [pc, #160]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cb78:	8a1b      	ldrh	r3, [r3, #16]
 801cb7a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cb7c:	4b26      	ldr	r3, [pc, #152]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cb7e:	2200      	movs	r2, #0
 801cb80:	825a      	strh	r2, [r3, #18]
 801cb82:	e027      	b.n	801cbd4 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cb84:	4b24      	ldr	r3, [pc, #144]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cb86:	8a5a      	ldrh	r2, [r3, #18]
 801cb88:	4b23      	ldr	r3, [pc, #140]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cb8a:	8a1b      	ldrh	r3, [r3, #16]
 801cb8c:	429a      	cmp	r2, r3
 801cb8e:	d91b      	bls.n	801cbc8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cb90:	4b21      	ldr	r3, [pc, #132]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cb92:	8a5b      	ldrh	r3, [r3, #18]
 801cb94:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cb98:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801cb9a:	88fa      	ldrh	r2, [r7, #6]
 801cb9c:	8afb      	ldrh	r3, [r7, #22]
 801cb9e:	429a      	cmp	r2, r3
 801cba0:	d318      	bcc.n	801cbd4 <TRACE_AllocateBufer+0xb4>
 801cba2:	4b1d      	ldr	r3, [pc, #116]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cba4:	8a1b      	ldrh	r3, [r3, #16]
 801cba6:	88fa      	ldrh	r2, [r7, #6]
 801cba8:	429a      	cmp	r2, r3
 801cbaa:	d213      	bcs.n	801cbd4 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801cbac:	4b1a      	ldr	r3, [pc, #104]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cbae:	2201      	movs	r2, #1
 801cbb0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cbb2:	4b19      	ldr	r3, [pc, #100]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cbb4:	8a5a      	ldrh	r2, [r3, #18]
 801cbb6:	4b18      	ldr	r3, [pc, #96]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cbb8:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801cbba:	4b17      	ldr	r3, [pc, #92]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cbbc:	8a1b      	ldrh	r3, [r3, #16]
 801cbbe:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cbc0:	4b15      	ldr	r3, [pc, #84]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cbc2:	2200      	movs	r2, #0
 801cbc4:	825a      	strh	r2, [r3, #18]
 801cbc6:	e005      	b.n	801cbd4 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801cbc8:	4b13      	ldr	r3, [pc, #76]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cbca:	8a1a      	ldrh	r2, [r3, #16]
 801cbcc:	4b12      	ldr	r3, [pc, #72]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cbce:	8a5b      	ldrh	r3, [r3, #18]
 801cbd0:	1ad3      	subs	r3, r2, r3
 801cbd2:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801cbd4:	8afa      	ldrh	r2, [r7, #22]
 801cbd6:	88fb      	ldrh	r3, [r7, #6]
 801cbd8:	429a      	cmp	r2, r3
 801cbda:	d90f      	bls.n	801cbfc <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801cbdc:	4b0e      	ldr	r3, [pc, #56]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cbde:	8a5a      	ldrh	r2, [r3, #18]
 801cbe0:	683b      	ldr	r3, [r7, #0]
 801cbe2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801cbe4:	4b0c      	ldr	r3, [pc, #48]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cbe6:	8a5a      	ldrh	r2, [r3, #18]
 801cbe8:	88fb      	ldrh	r3, [r7, #6]
 801cbea:	4413      	add	r3, r2
 801cbec:	b29b      	uxth	r3, r3
 801cbee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801cbf2:	b29a      	uxth	r2, r3
 801cbf4:	4b08      	ldr	r3, [pc, #32]	; (801cc18 <TRACE_AllocateBufer+0xf8>)
 801cbf6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801cbf8:	2300      	movs	r3, #0
 801cbfa:	82bb      	strh	r3, [r7, #20]
 801cbfc:	693b      	ldr	r3, [r7, #16]
 801cbfe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cc00:	68bb      	ldr	r3, [r7, #8]
 801cc02:	f383 8810 	msr	PRIMASK, r3
}
 801cc06:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801cc08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801cc0c:	4618      	mov	r0, r3
 801cc0e:	371c      	adds	r7, #28
 801cc10:	46bd      	mov	sp, r7
 801cc12:	bc80      	pop	{r7}
 801cc14:	4770      	bx	lr
 801cc16:	bf00      	nop
 801cc18:	20001b6c 	.word	0x20001b6c

0801cc1c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801cc1c:	b480      	push	{r7}
 801cc1e:	b085      	sub	sp, #20
 801cc20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cc22:	f3ef 8310 	mrs	r3, PRIMASK
 801cc26:	607b      	str	r3, [r7, #4]
  return(result);
 801cc28:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cc2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cc2c:	b672      	cpsid	i
}
 801cc2e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801cc30:	4b08      	ldr	r3, [pc, #32]	; (801cc54 <TRACE_Lock+0x38>)
 801cc32:	8adb      	ldrh	r3, [r3, #22]
 801cc34:	3301      	adds	r3, #1
 801cc36:	b29a      	uxth	r2, r3
 801cc38:	4b06      	ldr	r3, [pc, #24]	; (801cc54 <TRACE_Lock+0x38>)
 801cc3a:	82da      	strh	r2, [r3, #22]
 801cc3c:	68fb      	ldr	r3, [r7, #12]
 801cc3e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cc40:	68bb      	ldr	r3, [r7, #8]
 801cc42:	f383 8810 	msr	PRIMASK, r3
}
 801cc46:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801cc48:	bf00      	nop
 801cc4a:	3714      	adds	r7, #20
 801cc4c:	46bd      	mov	sp, r7
 801cc4e:	bc80      	pop	{r7}
 801cc50:	4770      	bx	lr
 801cc52:	bf00      	nop
 801cc54:	20001b6c 	.word	0x20001b6c

0801cc58 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801cc58:	b480      	push	{r7}
 801cc5a:	b085      	sub	sp, #20
 801cc5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cc5e:	f3ef 8310 	mrs	r3, PRIMASK
 801cc62:	607b      	str	r3, [r7, #4]
  return(result);
 801cc64:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cc66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cc68:	b672      	cpsid	i
}
 801cc6a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801cc6c:	4b08      	ldr	r3, [pc, #32]	; (801cc90 <TRACE_UnLock+0x38>)
 801cc6e:	8adb      	ldrh	r3, [r3, #22]
 801cc70:	3b01      	subs	r3, #1
 801cc72:	b29a      	uxth	r2, r3
 801cc74:	4b06      	ldr	r3, [pc, #24]	; (801cc90 <TRACE_UnLock+0x38>)
 801cc76:	82da      	strh	r2, [r3, #22]
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cc7c:	68bb      	ldr	r3, [r7, #8]
 801cc7e:	f383 8810 	msr	PRIMASK, r3
}
 801cc82:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801cc84:	bf00      	nop
 801cc86:	3714      	adds	r7, #20
 801cc88:	46bd      	mov	sp, r7
 801cc8a:	bc80      	pop	{r7}
 801cc8c:	4770      	bx	lr
 801cc8e:	bf00      	nop
 801cc90:	20001b6c 	.word	0x20001b6c

0801cc94 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801cc94:	b480      	push	{r7}
 801cc96:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801cc98:	4b05      	ldr	r3, [pc, #20]	; (801ccb0 <TRACE_IsLocked+0x1c>)
 801cc9a:	8adb      	ldrh	r3, [r3, #22]
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	bf14      	ite	ne
 801cca0:	2301      	movne	r3, #1
 801cca2:	2300      	moveq	r3, #0
 801cca4:	b2db      	uxtb	r3, r3
}
 801cca6:	4618      	mov	r0, r3
 801cca8:	46bd      	mov	sp, r7
 801ccaa:	bc80      	pop	{r7}
 801ccac:	4770      	bx	lr
 801ccae:	bf00      	nop
 801ccb0:	20001b6c 	.word	0x20001b6c
 801ccb4:	00000000 	.word	0x00000000

0801ccb8 <floor>:
 801ccb8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ccbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ccc0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801ccc4:	2e13      	cmp	r6, #19
 801ccc6:	460b      	mov	r3, r1
 801ccc8:	4607      	mov	r7, r0
 801ccca:	460c      	mov	r4, r1
 801cccc:	4605      	mov	r5, r0
 801ccce:	dc32      	bgt.n	801cd36 <floor+0x7e>
 801ccd0:	2e00      	cmp	r6, #0
 801ccd2:	da14      	bge.n	801ccfe <floor+0x46>
 801ccd4:	a334      	add	r3, pc, #208	; (adr r3, 801cda8 <floor+0xf0>)
 801ccd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccda:	f7e3 fa5b 	bl	8000194 <__adddf3>
 801ccde:	2200      	movs	r2, #0
 801cce0:	2300      	movs	r3, #0
 801cce2:	f7e3 fc8b 	bl	80005fc <__aeabi_dcmpgt>
 801cce6:	b138      	cbz	r0, 801ccf8 <floor+0x40>
 801cce8:	2c00      	cmp	r4, #0
 801ccea:	da56      	bge.n	801cd9a <floor+0xe2>
 801ccec:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801ccf0:	4325      	orrs	r5, r4
 801ccf2:	d055      	beq.n	801cda0 <floor+0xe8>
 801ccf4:	4c2e      	ldr	r4, [pc, #184]	; (801cdb0 <floor+0xf8>)
 801ccf6:	2500      	movs	r5, #0
 801ccf8:	4623      	mov	r3, r4
 801ccfa:	462f      	mov	r7, r5
 801ccfc:	e025      	b.n	801cd4a <floor+0x92>
 801ccfe:	4a2d      	ldr	r2, [pc, #180]	; (801cdb4 <floor+0xfc>)
 801cd00:	fa42 f806 	asr.w	r8, r2, r6
 801cd04:	ea01 0208 	and.w	r2, r1, r8
 801cd08:	4302      	orrs	r2, r0
 801cd0a:	d01e      	beq.n	801cd4a <floor+0x92>
 801cd0c:	a326      	add	r3, pc, #152	; (adr r3, 801cda8 <floor+0xf0>)
 801cd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd12:	f7e3 fa3f 	bl	8000194 <__adddf3>
 801cd16:	2200      	movs	r2, #0
 801cd18:	2300      	movs	r3, #0
 801cd1a:	f7e3 fc6f 	bl	80005fc <__aeabi_dcmpgt>
 801cd1e:	2800      	cmp	r0, #0
 801cd20:	d0ea      	beq.n	801ccf8 <floor+0x40>
 801cd22:	2c00      	cmp	r4, #0
 801cd24:	bfbe      	ittt	lt
 801cd26:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801cd2a:	4133      	asrlt	r3, r6
 801cd2c:	18e4      	addlt	r4, r4, r3
 801cd2e:	ea24 0408 	bic.w	r4, r4, r8
 801cd32:	2500      	movs	r5, #0
 801cd34:	e7e0      	b.n	801ccf8 <floor+0x40>
 801cd36:	2e33      	cmp	r6, #51	; 0x33
 801cd38:	dd0b      	ble.n	801cd52 <floor+0x9a>
 801cd3a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801cd3e:	d104      	bne.n	801cd4a <floor+0x92>
 801cd40:	4602      	mov	r2, r0
 801cd42:	f7e3 fa27 	bl	8000194 <__adddf3>
 801cd46:	4607      	mov	r7, r0
 801cd48:	460b      	mov	r3, r1
 801cd4a:	4638      	mov	r0, r7
 801cd4c:	4619      	mov	r1, r3
 801cd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd52:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801cd56:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801cd5a:	fa28 f802 	lsr.w	r8, r8, r2
 801cd5e:	ea10 0f08 	tst.w	r0, r8
 801cd62:	d0f2      	beq.n	801cd4a <floor+0x92>
 801cd64:	a310      	add	r3, pc, #64	; (adr r3, 801cda8 <floor+0xf0>)
 801cd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd6a:	f7e3 fa13 	bl	8000194 <__adddf3>
 801cd6e:	2200      	movs	r2, #0
 801cd70:	2300      	movs	r3, #0
 801cd72:	f7e3 fc43 	bl	80005fc <__aeabi_dcmpgt>
 801cd76:	2800      	cmp	r0, #0
 801cd78:	d0be      	beq.n	801ccf8 <floor+0x40>
 801cd7a:	2c00      	cmp	r4, #0
 801cd7c:	da0a      	bge.n	801cd94 <floor+0xdc>
 801cd7e:	2e14      	cmp	r6, #20
 801cd80:	d101      	bne.n	801cd86 <floor+0xce>
 801cd82:	3401      	adds	r4, #1
 801cd84:	e006      	b.n	801cd94 <floor+0xdc>
 801cd86:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801cd8a:	2301      	movs	r3, #1
 801cd8c:	40b3      	lsls	r3, r6
 801cd8e:	441d      	add	r5, r3
 801cd90:	42af      	cmp	r7, r5
 801cd92:	d8f6      	bhi.n	801cd82 <floor+0xca>
 801cd94:	ea25 0508 	bic.w	r5, r5, r8
 801cd98:	e7ae      	b.n	801ccf8 <floor+0x40>
 801cd9a:	2500      	movs	r5, #0
 801cd9c:	462c      	mov	r4, r5
 801cd9e:	e7ab      	b.n	801ccf8 <floor+0x40>
 801cda0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801cda4:	e7a8      	b.n	801ccf8 <floor+0x40>
 801cda6:	bf00      	nop
 801cda8:	8800759c 	.word	0x8800759c
 801cdac:	7e37e43c 	.word	0x7e37e43c
 801cdb0:	bff00000 	.word	0xbff00000
 801cdb4:	000fffff 	.word	0x000fffff

0801cdb8 <memset>:
 801cdb8:	4402      	add	r2, r0
 801cdba:	4603      	mov	r3, r0
 801cdbc:	4293      	cmp	r3, r2
 801cdbe:	d100      	bne.n	801cdc2 <memset+0xa>
 801cdc0:	4770      	bx	lr
 801cdc2:	f803 1b01 	strb.w	r1, [r3], #1
 801cdc6:	e7f9      	b.n	801cdbc <memset+0x4>

0801cdc8 <__libc_init_array>:
 801cdc8:	b570      	push	{r4, r5, r6, lr}
 801cdca:	4d0d      	ldr	r5, [pc, #52]	; (801ce00 <__libc_init_array+0x38>)
 801cdcc:	4c0d      	ldr	r4, [pc, #52]	; (801ce04 <__libc_init_array+0x3c>)
 801cdce:	1b64      	subs	r4, r4, r5
 801cdd0:	10a4      	asrs	r4, r4, #2
 801cdd2:	2600      	movs	r6, #0
 801cdd4:	42a6      	cmp	r6, r4
 801cdd6:	d109      	bne.n	801cdec <__libc_init_array+0x24>
 801cdd8:	4d0b      	ldr	r5, [pc, #44]	; (801ce08 <__libc_init_array+0x40>)
 801cdda:	4c0c      	ldr	r4, [pc, #48]	; (801ce0c <__libc_init_array+0x44>)
 801cddc:	f000 f818 	bl	801ce10 <_init>
 801cde0:	1b64      	subs	r4, r4, r5
 801cde2:	10a4      	asrs	r4, r4, #2
 801cde4:	2600      	movs	r6, #0
 801cde6:	42a6      	cmp	r6, r4
 801cde8:	d105      	bne.n	801cdf6 <__libc_init_array+0x2e>
 801cdea:	bd70      	pop	{r4, r5, r6, pc}
 801cdec:	f855 3b04 	ldr.w	r3, [r5], #4
 801cdf0:	4798      	blx	r3
 801cdf2:	3601      	adds	r6, #1
 801cdf4:	e7ee      	b.n	801cdd4 <__libc_init_array+0xc>
 801cdf6:	f855 3b04 	ldr.w	r3, [r5], #4
 801cdfa:	4798      	blx	r3
 801cdfc:	3601      	adds	r6, #1
 801cdfe:	e7f2      	b.n	801cde6 <__libc_init_array+0x1e>
 801ce00:	0801de5c 	.word	0x0801de5c
 801ce04:	0801de5c 	.word	0x0801de5c
 801ce08:	0801de5c 	.word	0x0801de5c
 801ce0c:	0801de60 	.word	0x0801de60

0801ce10 <_init>:
 801ce10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce12:	bf00      	nop
 801ce14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ce16:	bc08      	pop	{r3}
 801ce18:	469e      	mov	lr, r3
 801ce1a:	4770      	bx	lr

0801ce1c <_fini>:
 801ce1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce1e:	bf00      	nop
 801ce20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ce22:	bc08      	pop	{r3}
 801ce24:	469e      	mov	lr, r3
 801ce26:	4770      	bx	lr
