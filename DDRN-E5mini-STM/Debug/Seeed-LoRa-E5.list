
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020f6c  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001058  080210a8  080210a8  000310a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  08022100  08022100  00032100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080221d8  080221d8  000401a4  2**0
                  CONTENTS
  5 .ARM          00000008  080221d8  080221d8  000321d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080221e0  080221e0  000401a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080221e0  080221e0  000321e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080221e4  080221e4  000321e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001a4  20000000  080221e8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002118  200001a4  0802238c  000401a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200022bc  0802238c  000422bc  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000401a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000500a5  00000000  00000000  000401ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b1e2  00000000  00000000  00090273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003910  00000000  00000000  0009b458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003538  00000000  00000000  0009ed68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d5c7  00000000  00000000  000a22a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00045ab4  00000000  00000000  000cf867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4c67  00000000  00000000  0011531b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e9f82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f098  00000000  00000000  001e9fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	200001a4 	.word	0x200001a4
 8000154:	00000000 	.word	0x00000000
 8000158:	0802108c 	.word	0x0802108c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	200001a8 	.word	0x200001a8
 8000174:	0802108c 	.word	0x0802108c

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmpun>:
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__aeabi_dcmpun+0x10>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d10a      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__aeabi_dcmpun+0x20>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d102      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0001 	mov.w	r0, #1
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_d2iz>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d215      	bcs.n	8000a96 <__aeabi_d2iz+0x36>
 8000a6a:	d511      	bpl.n	8000a90 <__aeabi_d2iz+0x30>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d912      	bls.n	8000a9c <__aeabi_d2iz+0x3c>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	bf18      	it	ne
 8000a8c:	4240      	negne	r0, r0
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9a:	d105      	bne.n	8000aa8 <__aeabi_d2iz+0x48>
 8000a9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	bf08      	it	eq
 8000aa2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fmul>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d06f      	beq.n	8000e64 <__aeabi_fmul+0xf8>
 8000d84:	441a      	add	r2, r3
 8000d86:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8a:	0240      	lsls	r0, r0, #9
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d92:	d01e      	beq.n	8000dd2 <__aeabi_fmul+0x66>
 8000d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da0:	fba0 3101 	umull	r3, r1, r0, r1
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dac:	bf3e      	ittt	cc
 8000dae:	0049      	lslcc	r1, r1, #1
 8000db0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	ea40 0001 	orr.w	r0, r0, r1
 8000dba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dbe:	2afd      	cmp	r2, #253	; 0xfd
 8000dc0:	d81d      	bhi.n	8000dfe <__aeabi_fmul+0x92>
 8000dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dca:	bf08      	it	eq
 8000dcc:	f020 0001 	biceq.w	r0, r0, #1
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	0249      	lsleq	r1, r1, #9
 8000dde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de6:	3a7f      	subs	r2, #127	; 0x7f
 8000de8:	bfc2      	ittt	gt
 8000dea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df2:	4770      	bxgt	lr
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	dc5d      	bgt.n	8000ebc <__aeabi_fmul+0x150>
 8000e00:	f112 0f19 	cmn.w	r2, #25
 8000e04:	bfdc      	itt	le
 8000e06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e0a:	4770      	bxle	lr
 8000e0c:	f1c2 0200 	rsb	r2, r2, #0
 8000e10:	0041      	lsls	r1, r0, #1
 8000e12:	fa21 f102 	lsr.w	r1, r1, r2
 8000e16:	f1c2 0220 	rsb	r2, r2, #32
 8000e1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e22:	f140 0000 	adc.w	r0, r0, #0
 8000e26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e2a:	bf08      	it	eq
 8000e2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e30:	4770      	bx	lr
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xce>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xe6>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e78f      	b.n	8000d84 <__aeabi_fmul+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	bf18      	it	ne
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d00a      	beq.n	8000e8a <__aeabi_fmul+0x11e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1d8      	bne.n	8000e32 <__aeabi_fmul+0xc6>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	bf17      	itett	ne
 8000e90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e94:	4608      	moveq	r0, r1
 8000e96:	f091 0f00 	teqne	r1, #0
 8000e9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9e:	d014      	beq.n	8000eca <__aeabi_fmul+0x15e>
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_fmul+0x13e>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d10f      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eaa:	ea93 0f0c 	teq	r3, ip
 8000eae:	d103      	bne.n	8000eb8 <__aeabi_fmul+0x14c>
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	bf18      	it	ne
 8000eb4:	4608      	movne	r0, r1
 8000eb6:	d108      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec8:	4770      	bx	lr
 8000eca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ece:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fdiv>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d069      	beq.n	8000fc0 <__aeabi_fdiv+0xec>
 8000eec:	eba2 0203 	sub.w	r2, r2, r3
 8000ef0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000efa:	d037      	beq.n	8000f6c <__aeabi_fdiv+0x98>
 8000efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf38      	it	cc
 8000f10:	005b      	lslcc	r3, r3, #1
 8000f12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	bf24      	itt	cs
 8000f1e:	1a5b      	subcs	r3, r3, r1
 8000f20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f36:	bf24      	itt	cs
 8000f38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	bf18      	it	ne
 8000f52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f56:	d1e0      	bne.n	8000f1a <__aeabi_fdiv+0x46>
 8000f58:	2afd      	cmp	r2, #253	; 0xfd
 8000f5a:	f63f af50 	bhi.w	8000dfe <__aeabi_fmul+0x92>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f64:	bf08      	it	eq
 8000f66:	f020 0001 	biceq.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f74:	327f      	adds	r2, #127	; 0x7f
 8000f76:	bfc2      	ittt	gt
 8000f78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f80:	4770      	bxgt	lr
 8000f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	e737      	b.n	8000dfe <__aeabi_fmul+0x92>
 8000f8e:	f092 0f00 	teq	r2, #0
 8000f92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0040      	lsleq	r0, r0, #1
 8000f9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9e:	3a01      	subeq	r2, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xc2>
 8000fa2:	ea40 000c 	orr.w	r0, r0, ip
 8000fa6:	f093 0f00 	teq	r3, #0
 8000faa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0049      	lsleq	r1, r1, #1
 8000fb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb6:	3b01      	subeq	r3, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xda>
 8000fba:	ea41 010c 	orr.w	r1, r1, ip
 8000fbe:	e795      	b.n	8000eec <__aeabi_fdiv+0x18>
 8000fc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc4:	ea92 0f0c 	teq	r2, ip
 8000fc8:	d108      	bne.n	8000fdc <__aeabi_fdiv+0x108>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	f47f af7d 	bne.w	8000eca <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	f47f af70 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e776      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fdc:	ea93 0f0c 	teq	r3, ip
 8000fe0:	d104      	bne.n	8000fec <__aeabi_fdiv+0x118>
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	f43f af4c 	beq.w	8000e80 <__aeabi_fmul+0x114>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e76e      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	d1ca      	bne.n	8000f8e <__aeabi_fdiv+0xba>
 8000ff8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ffc:	f47f af5c 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8001000:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001004:	f47f af3c 	bne.w	8000e80 <__aeabi_fmul+0x114>
 8001008:	e75f      	b.n	8000eca <__aeabi_fmul+0x15e>
 800100a:	bf00      	nop

0800100c <__gesf2>:
 800100c:	f04f 3cff 	mov.w	ip, #4294967295
 8001010:	e006      	b.n	8001020 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__lesf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	e002      	b.n	8001020 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__cmpsf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	bf18      	it	ne
 8001032:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001036:	d011      	beq.n	800105c <__cmpsf2+0x40>
 8001038:	b001      	add	sp, #4
 800103a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800103e:	bf18      	it	ne
 8001040:	ea90 0f01 	teqne	r0, r1
 8001044:	bf58      	it	pl
 8001046:	ebb2 0003 	subspl.w	r0, r2, r3
 800104a:	bf88      	it	hi
 800104c:	17c8      	asrhi	r0, r1, #31
 800104e:	bf38      	it	cc
 8001050:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001054:	bf18      	it	ne
 8001056:	f040 0001 	orrne.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001060:	d102      	bne.n	8001068 <__cmpsf2+0x4c>
 8001062:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001066:	d105      	bne.n	8001074 <__cmpsf2+0x58>
 8001068:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800106c:	d1e4      	bne.n	8001038 <__cmpsf2+0x1c>
 800106e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001072:	d0e1      	beq.n	8001038 <__cmpsf2+0x1c>
 8001074:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <__aeabi_cfrcmple>:
 800107c:	4684      	mov	ip, r0
 800107e:	4608      	mov	r0, r1
 8001080:	4661      	mov	r1, ip
 8001082:	e7ff      	b.n	8001084 <__aeabi_cfcmpeq>

08001084 <__aeabi_cfcmpeq>:
 8001084:	b50f      	push	{r0, r1, r2, r3, lr}
 8001086:	f7ff ffc9 	bl	800101c <__cmpsf2>
 800108a:	2800      	cmp	r0, #0
 800108c:	bf48      	it	mi
 800108e:	f110 0f00 	cmnmi.w	r0, #0
 8001092:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001094 <__aeabi_fcmpeq>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff fff4 	bl	8001084 <__aeabi_cfcmpeq>
 800109c:	bf0c      	ite	eq
 800109e:	2001      	moveq	r0, #1
 80010a0:	2000      	movne	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmplt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffea 	bl	8001084 <__aeabi_cfcmpeq>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmple>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffe0 	bl	8001084 <__aeabi_cfcmpeq>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpge>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffd2 	bl	800107c <__aeabi_cfrcmple>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpgt>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffc8 	bl	800107c <__aeabi_cfrcmple>
 80010ec:	bf34      	ite	cc
 80010ee:	2001      	movcc	r0, #1
 80010f0:	2000      	movcs	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_f2iz>:
 80010f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001100:	d30f      	bcc.n	8001122 <__aeabi_f2iz+0x2a>
 8001102:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001106:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110a:	d90d      	bls.n	8001128 <__aeabi_f2iz+0x30>
 800110c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001114:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001118:	fa23 f002 	lsr.w	r0, r3, r2
 800111c:	bf18      	it	ne
 800111e:	4240      	negne	r0, r0
 8001120:	4770      	bx	lr
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	4770      	bx	lr
 8001128:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800112c:	d101      	bne.n	8001132 <__aeabi_f2iz+0x3a>
 800112e:	0242      	lsls	r2, r0, #9
 8001130:	d105      	bne.n	800113e <__aeabi_f2iz+0x46>
 8001132:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001136:	bf08      	it	eq
 8001138:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr

08001144 <__aeabi_f2uiz>:
 8001144:	0042      	lsls	r2, r0, #1
 8001146:	d20e      	bcs.n	8001166 <__aeabi_f2uiz+0x22>
 8001148:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800114c:	d30b      	bcc.n	8001166 <__aeabi_f2uiz+0x22>
 800114e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001152:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001156:	d409      	bmi.n	800116c <__aeabi_f2uiz+0x28>
 8001158:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800115c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2uiz+0x32>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d102      	bne.n	800117c <__aeabi_f2uiz+0x38>
 8001176:	f04f 30ff 	mov.w	r0, #4294967295
 800117a:	4770      	bx	lr
 800117c:	f04f 0000 	mov.w	r0, #0
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <__aeabi_uldivmod>:
 8001184:	b953      	cbnz	r3, 800119c <__aeabi_uldivmod+0x18>
 8001186:	b94a      	cbnz	r2, 800119c <__aeabi_uldivmod+0x18>
 8001188:	2900      	cmp	r1, #0
 800118a:	bf08      	it	eq
 800118c:	2800      	cmpeq	r0, #0
 800118e:	bf1c      	itt	ne
 8001190:	f04f 31ff 	movne.w	r1, #4294967295
 8001194:	f04f 30ff 	movne.w	r0, #4294967295
 8001198:	f000 b974 	b.w	8001484 <__aeabi_idiv0>
 800119c:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011a4:	f000 f806 	bl	80011b4 <__udivmoddi4>
 80011a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b0:	b004      	add	sp, #16
 80011b2:	4770      	bx	lr

080011b4 <__udivmoddi4>:
 80011b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b8:	9e08      	ldr	r6, [sp, #32]
 80011ba:	460d      	mov	r5, r1
 80011bc:	4604      	mov	r4, r0
 80011be:	4688      	mov	r8, r1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d14d      	bne.n	8001260 <__udivmoddi4+0xac>
 80011c4:	428a      	cmp	r2, r1
 80011c6:	4694      	mov	ip, r2
 80011c8:	d968      	bls.n	800129c <__udivmoddi4+0xe8>
 80011ca:	fab2 f282 	clz	r2, r2
 80011ce:	b152      	cbz	r2, 80011e6 <__udivmoddi4+0x32>
 80011d0:	fa01 f302 	lsl.w	r3, r1, r2
 80011d4:	f1c2 0120 	rsb	r1, r2, #32
 80011d8:	fa20 f101 	lsr.w	r1, r0, r1
 80011dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80011e0:	ea41 0803 	orr.w	r8, r1, r3
 80011e4:	4094      	lsls	r4, r2
 80011e6:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80011ea:	0c21      	lsrs	r1, r4, #16
 80011ec:	fbb8 fef5 	udiv	lr, r8, r5
 80011f0:	fa1f f78c 	uxth.w	r7, ip
 80011f4:	fb05 831e 	mls	r3, r5, lr, r8
 80011f8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011fc:	fb0e f107 	mul.w	r1, lr, r7
 8001200:	4299      	cmp	r1, r3
 8001202:	d90b      	bls.n	800121c <__udivmoddi4+0x68>
 8001204:	eb1c 0303 	adds.w	r3, ip, r3
 8001208:	f10e 30ff 	add.w	r0, lr, #4294967295
 800120c:	f080 811e 	bcs.w	800144c <__udivmoddi4+0x298>
 8001210:	4299      	cmp	r1, r3
 8001212:	f240 811b 	bls.w	800144c <__udivmoddi4+0x298>
 8001216:	f1ae 0e02 	sub.w	lr, lr, #2
 800121a:	4463      	add	r3, ip
 800121c:	1a5b      	subs	r3, r3, r1
 800121e:	b2a4      	uxth	r4, r4
 8001220:	fbb3 f0f5 	udiv	r0, r3, r5
 8001224:	fb05 3310 	mls	r3, r5, r0, r3
 8001228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800122c:	fb00 f707 	mul.w	r7, r0, r7
 8001230:	42a7      	cmp	r7, r4
 8001232:	d90a      	bls.n	800124a <__udivmoddi4+0x96>
 8001234:	eb1c 0404 	adds.w	r4, ip, r4
 8001238:	f100 33ff 	add.w	r3, r0, #4294967295
 800123c:	f080 8108 	bcs.w	8001450 <__udivmoddi4+0x29c>
 8001240:	42a7      	cmp	r7, r4
 8001242:	f240 8105 	bls.w	8001450 <__udivmoddi4+0x29c>
 8001246:	4464      	add	r4, ip
 8001248:	3802      	subs	r0, #2
 800124a:	1be4      	subs	r4, r4, r7
 800124c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001250:	2100      	movs	r1, #0
 8001252:	b11e      	cbz	r6, 800125c <__udivmoddi4+0xa8>
 8001254:	40d4      	lsrs	r4, r2
 8001256:	2300      	movs	r3, #0
 8001258:	e9c6 4300 	strd	r4, r3, [r6]
 800125c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001260:	428b      	cmp	r3, r1
 8001262:	d908      	bls.n	8001276 <__udivmoddi4+0xc2>
 8001264:	2e00      	cmp	r6, #0
 8001266:	f000 80ee 	beq.w	8001446 <__udivmoddi4+0x292>
 800126a:	2100      	movs	r1, #0
 800126c:	e9c6 0500 	strd	r0, r5, [r6]
 8001270:	4608      	mov	r0, r1
 8001272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001276:	fab3 f183 	clz	r1, r3
 800127a:	2900      	cmp	r1, #0
 800127c:	d14a      	bne.n	8001314 <__udivmoddi4+0x160>
 800127e:	42ab      	cmp	r3, r5
 8001280:	d302      	bcc.n	8001288 <__udivmoddi4+0xd4>
 8001282:	4282      	cmp	r2, r0
 8001284:	f200 80f9 	bhi.w	800147a <__udivmoddi4+0x2c6>
 8001288:	1a84      	subs	r4, r0, r2
 800128a:	eb65 0303 	sbc.w	r3, r5, r3
 800128e:	2001      	movs	r0, #1
 8001290:	4698      	mov	r8, r3
 8001292:	2e00      	cmp	r6, #0
 8001294:	d0e2      	beq.n	800125c <__udivmoddi4+0xa8>
 8001296:	e9c6 4800 	strd	r4, r8, [r6]
 800129a:	e7df      	b.n	800125c <__udivmoddi4+0xa8>
 800129c:	b902      	cbnz	r2, 80012a0 <__udivmoddi4+0xec>
 800129e:	deff      	udf	#255	; 0xff
 80012a0:	fab2 f282 	clz	r2, r2
 80012a4:	2a00      	cmp	r2, #0
 80012a6:	f040 8091 	bne.w	80013cc <__udivmoddi4+0x218>
 80012aa:	eba1 050c 	sub.w	r5, r1, ip
 80012ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012b2:	fa1f fe8c 	uxth.w	lr, ip
 80012b6:	2101      	movs	r1, #1
 80012b8:	fbb5 f3f7 	udiv	r3, r5, r7
 80012bc:	fb07 5013 	mls	r0, r7, r3, r5
 80012c0:	0c25      	lsrs	r5, r4, #16
 80012c2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012c6:	fb0e f003 	mul.w	r0, lr, r3
 80012ca:	42a8      	cmp	r0, r5
 80012cc:	d908      	bls.n	80012e0 <__udivmoddi4+0x12c>
 80012ce:	eb1c 0505 	adds.w	r5, ip, r5
 80012d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80012d6:	d202      	bcs.n	80012de <__udivmoddi4+0x12a>
 80012d8:	42a8      	cmp	r0, r5
 80012da:	f200 80cb 	bhi.w	8001474 <__udivmoddi4+0x2c0>
 80012de:	4643      	mov	r3, r8
 80012e0:	1a2d      	subs	r5, r5, r0
 80012e2:	b2a4      	uxth	r4, r4
 80012e4:	fbb5 f0f7 	udiv	r0, r5, r7
 80012e8:	fb07 5510 	mls	r5, r7, r0, r5
 80012ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012f0:	fb0e fe00 	mul.w	lr, lr, r0
 80012f4:	45a6      	cmp	lr, r4
 80012f6:	d908      	bls.n	800130a <__udivmoddi4+0x156>
 80012f8:	eb1c 0404 	adds.w	r4, ip, r4
 80012fc:	f100 35ff 	add.w	r5, r0, #4294967295
 8001300:	d202      	bcs.n	8001308 <__udivmoddi4+0x154>
 8001302:	45a6      	cmp	lr, r4
 8001304:	f200 80bb 	bhi.w	800147e <__udivmoddi4+0x2ca>
 8001308:	4628      	mov	r0, r5
 800130a:	eba4 040e 	sub.w	r4, r4, lr
 800130e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001312:	e79e      	b.n	8001252 <__udivmoddi4+0x9e>
 8001314:	f1c1 0720 	rsb	r7, r1, #32
 8001318:	408b      	lsls	r3, r1
 800131a:	fa22 fc07 	lsr.w	ip, r2, r7
 800131e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001322:	fa20 f407 	lsr.w	r4, r0, r7
 8001326:	fa05 f301 	lsl.w	r3, r5, r1
 800132a:	431c      	orrs	r4, r3
 800132c:	40fd      	lsrs	r5, r7
 800132e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001332:	fa00 f301 	lsl.w	r3, r0, r1
 8001336:	fbb5 f8f9 	udiv	r8, r5, r9
 800133a:	0c20      	lsrs	r0, r4, #16
 800133c:	fa1f fe8c 	uxth.w	lr, ip
 8001340:	fb09 5518 	mls	r5, r9, r8, r5
 8001344:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8001348:	fb08 f00e 	mul.w	r0, r8, lr
 800134c:	42a8      	cmp	r0, r5
 800134e:	fa02 f201 	lsl.w	r2, r2, r1
 8001352:	d90b      	bls.n	800136c <__udivmoddi4+0x1b8>
 8001354:	eb1c 0505 	adds.w	r5, ip, r5
 8001358:	f108 3aff 	add.w	sl, r8, #4294967295
 800135c:	f080 8088 	bcs.w	8001470 <__udivmoddi4+0x2bc>
 8001360:	42a8      	cmp	r0, r5
 8001362:	f240 8085 	bls.w	8001470 <__udivmoddi4+0x2bc>
 8001366:	f1a8 0802 	sub.w	r8, r8, #2
 800136a:	4465      	add	r5, ip
 800136c:	1a2d      	subs	r5, r5, r0
 800136e:	b2a4      	uxth	r4, r4
 8001370:	fbb5 f0f9 	udiv	r0, r5, r9
 8001374:	fb09 5510 	mls	r5, r9, r0, r5
 8001378:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800137c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001380:	45ae      	cmp	lr, r5
 8001382:	d908      	bls.n	8001396 <__udivmoddi4+0x1e2>
 8001384:	eb1c 0505 	adds.w	r5, ip, r5
 8001388:	f100 34ff 	add.w	r4, r0, #4294967295
 800138c:	d26c      	bcs.n	8001468 <__udivmoddi4+0x2b4>
 800138e:	45ae      	cmp	lr, r5
 8001390:	d96a      	bls.n	8001468 <__udivmoddi4+0x2b4>
 8001392:	3802      	subs	r0, #2
 8001394:	4465      	add	r5, ip
 8001396:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800139a:	fba0 9402 	umull	r9, r4, r0, r2
 800139e:	eba5 050e 	sub.w	r5, r5, lr
 80013a2:	42a5      	cmp	r5, r4
 80013a4:	46c8      	mov	r8, r9
 80013a6:	46a6      	mov	lr, r4
 80013a8:	d356      	bcc.n	8001458 <__udivmoddi4+0x2a4>
 80013aa:	d053      	beq.n	8001454 <__udivmoddi4+0x2a0>
 80013ac:	b15e      	cbz	r6, 80013c6 <__udivmoddi4+0x212>
 80013ae:	ebb3 0208 	subs.w	r2, r3, r8
 80013b2:	eb65 050e 	sbc.w	r5, r5, lr
 80013b6:	fa05 f707 	lsl.w	r7, r5, r7
 80013ba:	fa22 f301 	lsr.w	r3, r2, r1
 80013be:	40cd      	lsrs	r5, r1
 80013c0:	431f      	orrs	r7, r3
 80013c2:	e9c6 7500 	strd	r7, r5, [r6]
 80013c6:	2100      	movs	r1, #0
 80013c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013cc:	f1c2 0320 	rsb	r3, r2, #32
 80013d0:	fa20 f103 	lsr.w	r1, r0, r3
 80013d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80013d8:	fa25 f303 	lsr.w	r3, r5, r3
 80013dc:	4095      	lsls	r5, r2
 80013de:	430d      	orrs	r5, r1
 80013e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013e4:	fa1f fe8c 	uxth.w	lr, ip
 80013e8:	fbb3 f1f7 	udiv	r1, r3, r7
 80013ec:	fb07 3011 	mls	r0, r7, r1, r3
 80013f0:	0c2b      	lsrs	r3, r5, #16
 80013f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80013f6:	fb01 f00e 	mul.w	r0, r1, lr
 80013fa:	4298      	cmp	r0, r3
 80013fc:	fa04 f402 	lsl.w	r4, r4, r2
 8001400:	d908      	bls.n	8001414 <__udivmoddi4+0x260>
 8001402:	eb1c 0303 	adds.w	r3, ip, r3
 8001406:	f101 38ff 	add.w	r8, r1, #4294967295
 800140a:	d22f      	bcs.n	800146c <__udivmoddi4+0x2b8>
 800140c:	4298      	cmp	r0, r3
 800140e:	d92d      	bls.n	800146c <__udivmoddi4+0x2b8>
 8001410:	3902      	subs	r1, #2
 8001412:	4463      	add	r3, ip
 8001414:	1a1b      	subs	r3, r3, r0
 8001416:	b2ad      	uxth	r5, r5
 8001418:	fbb3 f0f7 	udiv	r0, r3, r7
 800141c:	fb07 3310 	mls	r3, r7, r0, r3
 8001420:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001424:	fb00 f30e 	mul.w	r3, r0, lr
 8001428:	42ab      	cmp	r3, r5
 800142a:	d908      	bls.n	800143e <__udivmoddi4+0x28a>
 800142c:	eb1c 0505 	adds.w	r5, ip, r5
 8001430:	f100 38ff 	add.w	r8, r0, #4294967295
 8001434:	d216      	bcs.n	8001464 <__udivmoddi4+0x2b0>
 8001436:	42ab      	cmp	r3, r5
 8001438:	d914      	bls.n	8001464 <__udivmoddi4+0x2b0>
 800143a:	3802      	subs	r0, #2
 800143c:	4465      	add	r5, ip
 800143e:	1aed      	subs	r5, r5, r3
 8001440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001444:	e738      	b.n	80012b8 <__udivmoddi4+0x104>
 8001446:	4631      	mov	r1, r6
 8001448:	4630      	mov	r0, r6
 800144a:	e707      	b.n	800125c <__udivmoddi4+0xa8>
 800144c:	4686      	mov	lr, r0
 800144e:	e6e5      	b.n	800121c <__udivmoddi4+0x68>
 8001450:	4618      	mov	r0, r3
 8001452:	e6fa      	b.n	800124a <__udivmoddi4+0x96>
 8001454:	454b      	cmp	r3, r9
 8001456:	d2a9      	bcs.n	80013ac <__udivmoddi4+0x1f8>
 8001458:	ebb9 0802 	subs.w	r8, r9, r2
 800145c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001460:	3801      	subs	r0, #1
 8001462:	e7a3      	b.n	80013ac <__udivmoddi4+0x1f8>
 8001464:	4640      	mov	r0, r8
 8001466:	e7ea      	b.n	800143e <__udivmoddi4+0x28a>
 8001468:	4620      	mov	r0, r4
 800146a:	e794      	b.n	8001396 <__udivmoddi4+0x1e2>
 800146c:	4641      	mov	r1, r8
 800146e:	e7d1      	b.n	8001414 <__udivmoddi4+0x260>
 8001470:	46d0      	mov	r8, sl
 8001472:	e77b      	b.n	800136c <__udivmoddi4+0x1b8>
 8001474:	3b02      	subs	r3, #2
 8001476:	4465      	add	r5, ip
 8001478:	e732      	b.n	80012e0 <__udivmoddi4+0x12c>
 800147a:	4608      	mov	r0, r1
 800147c:	e709      	b.n	8001292 <__udivmoddi4+0xde>
 800147e:	4464      	add	r4, ip
 8001480:	3802      	subs	r0, #2
 8001482:	e742      	b.n	800130a <__udivmoddi4+0x156>

08001484 <__aeabi_idiv0>:
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop

08001488 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001494:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4313      	orrs	r3, r2
 800149e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ac:	68fb      	ldr	r3, [r7, #12]
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80014c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ce:	4013      	ands	r3, r2
 80014d0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <MX_ADC_Init+0x94>)
 80014e2:	4a24      	ldr	r2, [pc, #144]	; (8001574 <MX_ADC_Init+0x98>)
 80014e4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <MX_ADC_Init+0x94>)
 80014e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014ec:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <MX_ADC_Init+0x94>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <MX_ADC_Init+0x94>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <MX_ADC_Init+0x94>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <MX_ADC_Init+0x94>)
 8001502:	2204      	movs	r2, #4
 8001504:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_ADC_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_ADC_Init+0x94>)
 800150e:	2200      	movs	r2, #0
 8001510:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_ADC_Init+0x94>)
 8001514:	2200      	movs	r2, #0
 8001516:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_ADC_Init+0x94>)
 800151a:	2201      	movs	r2, #1
 800151c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_ADC_Init+0x94>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_ADC_Init+0x94>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_ADC_Init+0x94>)
 800152e:	2200      	movs	r2, #0
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_ADC_Init+0x94>)
 8001534:	2200      	movs	r2, #0
 8001536:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <MX_ADC_Init+0x94>)
 800153c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001540:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_ADC_Init+0x94>)
 8001544:	2207      	movs	r2, #7
 8001546:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_ADC_Init+0x94>)
 800154a:	2207      	movs	r2, #7
 800154c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_ADC_Init+0x94>)
 8001550:	2200      	movs	r2, #0
 8001552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_ADC_Init+0x94>)
 8001558:	2200      	movs	r2, #0
 800155a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_ADC_Init+0x94>)
 800155e:	f003 ff09 	bl	8005374 <HAL_ADC_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001568:	f000 fdac 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200001c0 	.word	0x200001c0
 8001574:	40012400 	.word	0x40012400

08001578 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a05      	ldr	r2, [pc, #20]	; (800159c <HAL_ADC_MspInit+0x24>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d103      	bne.n	8001592 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800158a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800158e:	f7ff ff7b 	bl	8001488 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40012400 	.word	0x40012400

080015a0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <HAL_ADC_MspDeInit+0x24>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d103      	bne.n	80015ba <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80015b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015b6:	f7ff ff7f 	bl	80014b8 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40012400 	.word	0x40012400

080015c8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <SYS_InitMeasurement+0x14>)
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <SYS_InitMeasurement+0x18>)
 80015d0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200001c0 	.word	0x200001c0
 80015e0:	40012400 	.word	0x40012400

080015e4 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80015f2:	4813      	ldr	r0, [pc, #76]	; (8001640 <SYS_GetBatteryLevel+0x5c>)
 80015f4:	f000 f82a 	bl	800164c <ADC_ReadChannels>
 80015f8:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	80fb      	strh	r3, [r7, #6]
 8001604:	e016      	b.n	8001634 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <SYS_GetBatteryLevel+0x60>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800160e:	4293      	cmp	r3, r2
 8001610:	d00b      	beq.n	800162a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <SYS_GetBatteryLevel+0x60>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	f640 43e4 	movw	r3, #3300	; 0xce4
 800161c:	fb03 f202 	mul.w	r2, r3, r2
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	80fb      	strh	r3, [r7, #6]
 8001628:	e004      	b.n	8001634 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800162a:	4a07      	ldr	r2, [pc, #28]	; (8001648 <SYS_GetBatteryLevel+0x64>)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001634:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	b4002000 	.word	0xb4002000
 8001644:	1fff75aa 	.word	0x1fff75aa
 8001648:	004c08d8 	.word	0x004c08d8

0800164c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001664:	f7ff ff3a 	bl	80014dc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001668:	481a      	ldr	r0, [pc, #104]	; (80016d4 <ADC_ReadChannels+0x88>)
 800166a:	f004 fca2 	bl	8005fb2 <HAL_ADCEx_Calibration_Start>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001674:	f000 fd26 	bl	80020c4 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	4619      	mov	r1, r3
 800168a:	4812      	ldr	r0, [pc, #72]	; (80016d4 <ADC_ReadChannels+0x88>)
 800168c:	f004 f9ae 	bl	80059ec <HAL_ADC_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001696:	f000 fd15 	bl	80020c4 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800169a:	480e      	ldr	r0, [pc, #56]	; (80016d4 <ADC_ReadChannels+0x88>)
 800169c:	f004 f88a 	bl	80057b4 <HAL_ADC_Start>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80016a6:	f000 fd0d 	bl	80020c4 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80016aa:	f04f 31ff 	mov.w	r1, #4294967295
 80016ae:	4809      	ldr	r0, [pc, #36]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016b0:	f004 f8f8 	bl	80058a4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80016b4:	4807      	ldr	r0, [pc, #28]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016b6:	f004 f8c3 	bl	8005840 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016bc:	f004 f989 	bl	80059d2 <HAL_ADC_GetValue>
 80016c0:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80016c2:	4804      	ldr	r0, [pc, #16]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016c4:	f003 ffea 	bl	800569c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80016c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001c0 	.word	0x200001c0

080016d8 <LL_AHB1_GRP1_EnableClock>:
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016fc:	68fb      	ldr	r3, [r7, #12]
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800170c:	2004      	movs	r0, #4
 800170e:	f7ff ffe3 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001712:	2001      	movs	r0, #1
 8001714:	f7ff ffe0 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2102      	movs	r1, #2
 800171c:	200b      	movs	r0, #11
 800171e:	f004 fdee 	bl	80062fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001722:	200b      	movs	r0, #11
 8001724:	f004 fe05 	bl	8006332 <HAL_NVIC_EnableIRQ>

}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001738:	23ff      	movs	r3, #255	; 0xff
 800173a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001742:	d311      	bcc.n	8001768 <FLASH_IF_Write+0x3c>
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <FLASH_IF_Write+0x48>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	029a      	lsls	r2, r3, #10
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <FLASH_IF_Write+0x4c>)
 800174c:	4013      	ands	r3, r2
 800174e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001752:	3b01      	subs	r3, #1
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4293      	cmp	r3, r2
 8001758:	d306      	bcc.n	8001768 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 f85a 	bl	8001818 <FLASH_IF_INT_Write>
 8001764:	4603      	mov	r3, r0
 8001766:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001768:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	1fff75e0 	.word	0x1fff75e0
 8001778:	03fffc00 	.word	0x03fffc00

0800177c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001788:	23ff      	movs	r3, #255	; 0xff
 800178a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001792:	d311      	bcc.n	80017b8 <FLASH_IF_Read+0x3c>
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <FLASH_IF_Read+0x48>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	029a      	lsls	r2, r3, #10
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <FLASH_IF_Read+0x4c>)
 800179c:	4013      	ands	r3, r2
 800179e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017a2:	3b01      	subs	r3, #1
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d306      	bcc.n	80017b8 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 f93a 	bl	8001a28 <FLASH_IF_INT_Read>
 80017b4:	4603      	mov	r3, r0
 80017b6:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 80017b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	1fff75e0 	.word	0x1fff75e0
 80017c8:	03fffc00 	.word	0x03fffc00

080017cc <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80017d6:	23ff      	movs	r3, #255	; 0xff
 80017d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017e0:	d310      	bcc.n	8001804 <FLASH_IF_Erase+0x38>
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <FLASH_IF_Erase+0x44>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	029a      	lsls	r2, r3, #10
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <FLASH_IF_Erase+0x48>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017f0:	3b01      	subs	r3, #1
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d305      	bcc.n	8001804 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80017f8:	6839      	ldr	r1, [r7, #0]
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f932 	bl	8001a64 <FLASH_IF_INT_Erase>
 8001800:	4603      	mov	r3, r0
 8001802:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001804:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	1fff75e0 	.word	0x1fff75e0
 8001814:	03fffc00 	.word	0x03fffc00

08001818 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b090      	sub	sp, #64	; 0x40
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00c      	beq.n	8001856 <FLASH_IF_INT_Write+0x3e>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d009      	beq.n	8001856 <FLASH_IF_INT_Write+0x3e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	2b00      	cmp	r3, #0
 800184a:	d104      	bne.n	8001856 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001856:	f06f 0305 	mvn.w	r3, #5
 800185a:	e0da      	b.n	8001a12 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800185c:	f000 f992 	bl	8001b84 <FLASH_IF_INT_Clear_Error>
 8001860:	4603      	mov	r3, r0
 8001862:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 8001866:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 80cf 	bne.w	8001a0e <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001870:	f005 f9aa 	bl	8006bc8 <HAL_FLASH_Unlock>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	f040 80c6 	bne.w	8001a08 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 800187c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800187e:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001882:	4b66      	ldr	r3, [pc, #408]	; (8001a1c <FLASH_IF_INT_Write+0x204>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	0299      	lsls	r1, r3, #10
 8001888:	4b65      	ldr	r3, [pc, #404]	; (8001a20 <FLASH_IF_INT_Write+0x208>)
 800188a:	400b      	ands	r3, r1
 800188c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	0adb      	lsrs	r3, r3, #11
 8001898:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800189a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4413      	add	r3, r2
 80018a0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80018a4:	3b01      	subs	r3, #1
 80018a6:	4a5d      	ldr	r2, [pc, #372]	; (8001a1c <FLASH_IF_INT_Write+0x204>)
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	0291      	lsls	r1, r2, #10
 80018ac:	4a5c      	ldr	r2, [pc, #368]	; (8001a20 <FLASH_IF_INT_Write+0x208>)
 80018ae:	400a      	ands	r2, r1
 80018b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80018b4:	fb01 f202 	mul.w	r2, r1, r2
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	0ada      	lsrs	r2, r3, #11
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	3301      	adds	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d905      	bls.n	80018d6 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80018ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018d0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018da:	e089      	b.n	80019f0 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80018dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018e2:	02db      	lsls	r3, r3, #11
 80018e4:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80018e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f925 	bl	8001b38 <FLASH_IF_INT_IsEmpty>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d031      	beq.n	8001958 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 80018f4:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <FLASH_IF_INT_Write+0x20c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80018fc:	23fa      	movs	r3, #250	; 0xfa
 80018fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001902:	e07e      	b.n	8001a02 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001904:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <FLASH_IF_INT_Write+0x20c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6939      	ldr	r1, [r7, #16]
 800190a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f88a 	bl	8001a28 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001914:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <FLASH_IF_INT_Write+0x20c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800191a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800191e:	4413      	add	r3, r2
 8001920:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001924:	b292      	uxth	r2, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f01d fa4c 	bl	801edc4 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f896 	bl	8001a64 <FLASH_IF_INT_Erase>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800193e:	23fe      	movs	r3, #254	; 0xfe
 8001940:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001944:	e05d      	b.n	8001a02 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 800194a:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <FLASH_IF_INT_Write+0x20c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	e005      	b.n	8001964 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 800195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195e:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001962:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
 8001968:	e026      	b.n	80019b8 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800196a:	6a3a      	ldr	r2, [r7, #32]
 800196c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001976:	2001      	movs	r0, #1
 8001978:	f005 f8e2 	bl	8006b40 <HAL_FLASH_Program>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d113      	bne.n	80019aa <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198c:	4413      	add	r3, r2
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	4299      	cmp	r1, r3
 8001994:	bf08      	it	eq
 8001996:	4290      	cmpeq	r0, r2
 8001998:	d003      	beq.n	80019a2 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 800199a:	23fc      	movs	r3, #252	; 0xfc
 800199c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 80019a0:	e00e      	b.n	80019c0 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	3308      	adds	r3, #8
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
 80019a8:	e003      	b.n	80019b2 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80019aa:	23fc      	movs	r3, #252	; 0xfc
 80019ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 80019b0:	e006      	b.n	80019c0 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80019b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b4:	3308      	adds	r3, #8
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d3d4      	bcc.n	800196a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80019c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d11b      	bne.n	8001a00 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80019c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019cc:	4413      	add	r3, r2
 80019ce:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 80019d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	4413      	add	r3, r2
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019e2:	bf28      	it	cs
 80019e4:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80019ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ec:	3301      	adds	r3, #1
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	4413      	add	r3, r2
 80019f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f8:	429a      	cmp	r2, r3
 80019fa:	f4ff af6f 	bcc.w	80018dc <FLASH_IF_INT_Write+0xc4>
 80019fe:	e000      	b.n	8001a02 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001a00:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001a02:	f005 f903 	bl	8006c0c <HAL_FLASH_Lock>
 8001a06:	e002      	b.n	8001a0e <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001a08:	23fb      	movs	r3, #251	; 0xfb
 8001a0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001a0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3740      	adds	r7, #64	; 0x40
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	1fff75e0 	.word	0x1fff75e0
 8001a20:	03fffc00 	.word	0x03fffc00
 8001a24:	20000224 	.word	0x20000224

08001a28 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <FLASH_IF_INT_Read+0x1c>
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001a44:	f06f 0305 	mvn.w	r3, #5
 8001a48:	e008      	b.n	8001a5c <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f01d f9b6 	bl	801edc4 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001a84:	f06f 0305 	mvn.w	r3, #5
 8001a88:	e04e      	b.n	8001b28 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001a8a:	f000 f87b 	bl	8001b84 <FLASH_IF_INT_Clear_Error>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001a92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d144      	bne.n	8001b24 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001a9a:	f005 f895 	bl	8006bc8 <HAL_FLASH_Unlock>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d13d      	bne.n	8001b20 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <FLASH_IF_INT_Erase+0xcc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0299      	lsls	r1, r3, #10
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <FLASH_IF_INT_Erase+0xd0>)
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	fbb2 f1f3 	udiv	r1, r2, r3
 8001abc:	fb01 f303 	mul.w	r3, r1, r3
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	0adb      	lsrs	r3, r3, #11
 8001ac4:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <FLASH_IF_INT_Erase+0xcc>)
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	0291      	lsls	r1, r2, #10
 8001ad8:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <FLASH_IF_INT_Erase+0xd0>)
 8001ada:	400a      	ands	r2, r1
 8001adc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ae0:	fb01 f202 	mul.w	r2, r1, r2
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	0ada      	lsrs	r2, r3, #11
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	3301      	adds	r3, #1
 8001aee:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001af0:	f107 0214 	add.w	r2, r7, #20
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f005 f966 	bl	8006dcc <HAL_FLASHEx_Erase>
 8001b00:	4603      	mov	r3, r0
 8001b02:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001b04:	7fbb      	ldrb	r3, [r7, #30]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001b0a:	7fbb      	ldrb	r3, [r7, #30]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d101      	bne.n	8001b14 <FLASH_IF_INT_Erase+0xb0>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e001      	b.n	8001b18 <FLASH_IF_INT_Erase+0xb4>
 8001b14:	f06f 0301 	mvn.w	r3, #1
 8001b18:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001b1a:	f005 f877 	bl	8006c0c <HAL_FLASH_Lock>
 8001b1e:	e001      	b.n	8001b24 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001b20:	23fb      	movs	r3, #251	; 0xfb
 8001b22:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001b24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	1fff75e0 	.word	0x1fff75e0
 8001b34:	03fffc00 	.word	0x03fffc00

08001b38 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	e011      	b.n	8001b70 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b56:	bf08      	it	eq
 8001b58:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001b5c:	d002      	beq.n	8001b64 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
      break;
 8001b62:	e009      	b.n	8001b78 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3308      	adds	r3, #8
 8001b68:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	3308      	adds	r3, #8
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d3e9      	bcc.n	8001b4c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001b78:	68fb      	ldr	r3, [r7, #12]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001b8a:	23fb      	movs	r3, #251	; 0xfb
 8001b8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001b8e:	f005 f81b 	bl	8006bc8 <HAL_FLASH_Unlock>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d110      	bne.n	8001bba <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001b9e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001ba6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001baa:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001bac:	f005 f82e 	bl	8006c0c <HAL_FLASH_Lock>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	58004000 	.word	0x58004000

08001bcc <LL_AHB2_GRP1_EnableClock>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	2001      	movs	r0, #1
 8001c12:	f7ff ffdb 	bl	8001bcc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	2002      	movs	r0, #2
 8001c18:	f7ff ffd8 	bl	8001bcc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1c:	2004      	movs	r0, #4
 8001c1e:	f7ff ffd5 	bl	8001bcc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001c28:	4821      	ldr	r0, [pc, #132]	; (8001cb0 <MX_GPIO_Init+0xb4>)
 8001c2a:	f005 fbd1 	bl	80073d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2120      	movs	r1, #32
 8001c32:	481f      	ldr	r0, [pc, #124]	; (8001cb0 <MX_GPIO_Init+0xb4>)
 8001c34:	f005 fbcc 	bl	80073d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2131      	movs	r1, #49	; 0x31
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c40:	f005 fbc6 	bl	80073d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001c44:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001c48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4815      	ldr	r0, [pc, #84]	; (8001cb0 <MX_GPIO_Init+0xb4>)
 8001c5c:	f005 f98a 	bl	8006f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001c60:	2331      	movs	r3, #49	; 0x31
 8001c62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c78:	f005 f97c 	bl	8006f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <MX_GPIO_Init+0xb4>)
 8001c92:	f005 f96f 	bl	8006f74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2029      	movs	r0, #41	; 0x29
 8001c9c:	f004 fb2f 	bl	80062fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ca0:	2029      	movs	r0, #41	; 0x29
 8001ca2:	f004 fb46 	bl	8006332 <HAL_NVIC_EnableIRQ>

}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	48000400 	.word	0x48000400

08001cb4 <LL_AHB2_GRP1_EnableClock>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <LL_APB1_GRP1_EnableClock>:
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4013      	ands	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d08:	68fb      	ldr	r3, [r7, #12]
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <MX_I2C2_Init+0x78>)
 8001d1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d20:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <MX_I2C2_Init+0x7c>)
 8001d22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d4e:	480e      	ldr	r0, [pc, #56]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d50:	f005 fb6e 	bl	8007430 <HAL_I2C_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d5a:	f000 f9b3 	bl	80020c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4809      	ldr	r0, [pc, #36]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d62:	f006 f8bb 	bl	8007edc <HAL_I2CEx_ConfigAnalogFilter>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d6c:	f000 f9aa 	bl	80020c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d70:	2100      	movs	r1, #0
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d74:	f006 f8fc 	bl	8007f70 <HAL_I2CEx_ConfigDigitalFilter>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d7e:	f000 f9a1 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000228 	.word	0x20000228
 8001d8c:	40005800 	.word	0x40005800
 8001d90:	20303e5d 	.word	0x20303e5d

08001d94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b096      	sub	sp, #88	; 0x58
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	2238      	movs	r2, #56	; 0x38
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f01f f961 	bl	802107c <memset>
  if(i2cHandle->Instance==I2C2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <HAL_I2C_MspInit+0xb0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d13b      	bne.n	8001e3c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001dc8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f007 fae6 	bl	80093a4 <HAL_RCCEx_PeriphCLKConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001dde:	f000 f971 	bl	80020c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	2001      	movs	r0, #1
 8001de4:	f7ff ff66 	bl	8001cb4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de8:	2002      	movs	r0, #2
 8001dea:	f7ff ff63 	bl	8001cb4 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df4:	2312      	movs	r3, #18
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e00:	2304      	movs	r3, #4
 8001e02:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0e:	f005 f8b1 	bl	8006f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e16:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e18:	2312      	movs	r3, #18
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e24:	2304      	movs	r3, #4
 8001e26:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <HAL_I2C_MspInit+0xb4>)
 8001e30:	f005 f8a0 	bl	8006f74 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e34:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001e38:	f7ff ff54 	bl	8001ce4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	3758      	adds	r7, #88	; 0x58
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40005800 	.word	0x40005800
 8001e48:	48000400 	.word	0x48000400

08001e4c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5c:	f023 0218 	bic.w	r2, r3, #24
 8001e60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
	...

08001e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b0c5      	sub	sp, #276	; 0x114
 8001e7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e7e:	f003 f8a7 	bl	8004fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e82:	f000 f8bb 	bl	8001ffc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e86:	f7ff feb9 	bl	8001bfc <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001e8a:	f00a fe2d 	bl	800cae8 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 8001e8e:	f7ff ff41 	bl	8001d14 <MX_I2C2_Init>
    } else {
    	APP_LOG(TS_ON, VLEVEL_M, "Incorrect device ID: %x \r\n", bmp390_device_id);
    }
*/

  EnvionmentSensors envSensors(&hi2c2);
 8001e92:	463b      	mov	r3, r7
 8001e94:	4951      	ldr	r1, [pc, #324]	; (8001fdc <main+0x164>)
 8001e96:	4618      	mov	r0, r3
 8001e98:	f002 ff64 	bl	8004d64 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef>
  float temperature = -99;
 8001e9c:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <main+0x168>)
 8001e9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  float pressure = -99;
 8001ea2:	4b4f      	ldr	r3, [pc, #316]	; (8001fe0 <main+0x168>)
 8001ea4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  float altitude = -99;
 8001ea8:	4b4d      	ldr	r3, [pc, #308]	; (8001fe0 <main+0x168>)
 8001eaa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	temperature = envSensors.getTemperature();
 8001eae:	463b      	mov	r3, r7
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 ffa0 	bl	8004df6 <_ZN17EnvionmentSensors14getTemperatureEv>
 8001eb6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  	temperature *= 100;
 8001eba:	494a      	ldr	r1, [pc, #296]	; (8001fe4 <main+0x16c>)
 8001ebc:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001ec0:	f7fe ff54 	bl	8000d6c <__aeabi_fmul>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

  	pressure = envSensors.getPressure();
 8001eca:	463b      	mov	r3, r7
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f002 ff85 	bl	8004ddc <_ZN17EnvionmentSensors11getPressureEv>
 8001ed2:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
  	pressure *= 100;
 8001ed6:	4943      	ldr	r1, [pc, #268]	; (8001fe4 <main+0x16c>)
 8001ed8:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8001edc:	f7fe ff46 	bl	8000d6c <__aeabi_fmul>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

  	altitude = envSensors.getAltitude(1021.56);
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	493f      	ldr	r1, [pc, #252]	; (8001fe8 <main+0x170>)
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 ff90 	bl	8004e10 <_ZN17EnvionmentSensors11getAltitudeEf>
 8001ef0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  	altitude *= 100;
 8001ef4:	493b      	ldr	r1, [pc, #236]	; (8001fe4 <main+0x16c>)
 8001ef6:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8001efa:	f7fe ff37 	bl	8000d6c <__aeabi_fmul>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  	APP_LOG(TS_ON, VLEVEL_M, "temp: %d.%02d [C]\r\n", (int)temperature / 100, (int)temperature % 100);
 8001f04:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001f08:	f7ff f8f6 	bl	80010f8 <__aeabi_f2iz>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4a37      	ldr	r2, [pc, #220]	; (8001fec <main+0x174>)
 8001f10:	fb82 1203 	smull	r1, r2, r2, r3
 8001f14:	1152      	asrs	r2, r2, #5
 8001f16:	17db      	asrs	r3, r3, #31
 8001f18:	1ad4      	subs	r4, r2, r3
 8001f1a:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001f1e:	f7ff f8eb 	bl	80010f8 <__aeabi_f2iz>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b31      	ldr	r3, [pc, #196]	; (8001fec <main+0x174>)
 8001f26:	fb83 1302 	smull	r1, r3, r3, r2
 8001f2a:	1159      	asrs	r1, r3, #5
 8001f2c:	17d3      	asrs	r3, r2, #31
 8001f2e:	1acb      	subs	r3, r1, r3
 8001f30:	2164      	movs	r1, #100	; 0x64
 8001f32:	fb01 f303 	mul.w	r3, r1, r3
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	9400      	str	r4, [sp, #0]
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <main+0x178>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	2100      	movs	r1, #0
 8001f42:	2002      	movs	r0, #2
 8001f44:	f01d fe86 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
  	APP_LOG(TS_ON, VLEVEL_M, "pressure: %d.%02d [Pa]\r\n", (int)pressure / 100, (int)pressure % 100);
 8001f48:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8001f4c:	f7ff f8d4 	bl	80010f8 <__aeabi_f2iz>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4a26      	ldr	r2, [pc, #152]	; (8001fec <main+0x174>)
 8001f54:	fb82 1203 	smull	r1, r2, r2, r3
 8001f58:	1152      	asrs	r2, r2, #5
 8001f5a:	17db      	asrs	r3, r3, #31
 8001f5c:	1ad4      	subs	r4, r2, r3
 8001f5e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8001f62:	f7ff f8c9 	bl	80010f8 <__aeabi_f2iz>
 8001f66:	4602      	mov	r2, r0
 8001f68:	4b20      	ldr	r3, [pc, #128]	; (8001fec <main+0x174>)
 8001f6a:	fb83 1302 	smull	r1, r3, r3, r2
 8001f6e:	1159      	asrs	r1, r3, #5
 8001f70:	17d3      	asrs	r3, r2, #31
 8001f72:	1acb      	subs	r3, r1, r3
 8001f74:	2164      	movs	r1, #100	; 0x64
 8001f76:	fb01 f303 	mul.w	r3, r1, r3
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	9400      	str	r4, [sp, #0]
 8001f80:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <main+0x17c>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	2100      	movs	r1, #0
 8001f86:	2002      	movs	r0, #2
 8001f88:	f01d fe64 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
  	APP_LOG(TS_ON, VLEVEL_M, "altitude: %d.%02d [m?]\r\n", (int)altitude / 100, (int)altitude % 100);
 8001f8c:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8001f90:	f7ff f8b2 	bl	80010f8 <__aeabi_f2iz>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4a15      	ldr	r2, [pc, #84]	; (8001fec <main+0x174>)
 8001f98:	fb82 1203 	smull	r1, r2, r2, r3
 8001f9c:	1152      	asrs	r2, r2, #5
 8001f9e:	17db      	asrs	r3, r3, #31
 8001fa0:	1ad4      	subs	r4, r2, r3
 8001fa2:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8001fa6:	f7ff f8a7 	bl	80010f8 <__aeabi_f2iz>
 8001faa:	4602      	mov	r2, r0
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <main+0x174>)
 8001fae:	fb83 1302 	smull	r1, r3, r3, r2
 8001fb2:	1159      	asrs	r1, r3, #5
 8001fb4:	17d3      	asrs	r3, r2, #31
 8001fb6:	1acb      	subs	r3, r1, r3
 8001fb8:	2164      	movs	r1, #100	; 0x64
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	9400      	str	r4, [sp, #0]
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <main+0x180>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2100      	movs	r1, #0
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f01d fe42 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
  	HAL_Delay(2000);
 8001fd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fd4:	f000 fb7a 	bl	80026cc <HAL_Delay>
  	temperature = envSensors.getTemperature();
 8001fd8:	e769      	b.n	8001eae <main+0x36>
 8001fda:	bf00      	nop
 8001fdc:	20000228 	.word	0x20000228
 8001fe0:	c2c60000 	.word	0xc2c60000
 8001fe4:	42c80000 	.word	0x42c80000
 8001fe8:	447f63d7 	.word	0x447f63d7
 8001fec:	51eb851f 	.word	0x51eb851f
 8001ff0:	080210a8 	.word	0x080210a8
 8001ff4:	080210bc 	.word	0x080210bc
 8001ff8:	080210d8 	.word	0x080210d8

08001ffc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b09a      	sub	sp, #104	; 0x68
 8002000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002002:	f107 0320 	add.w	r3, r7, #32
 8002006:	2248      	movs	r2, #72	; 0x48
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f01f f836 	bl	802107c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002010:	f107 0308 	add.w	r3, r7, #8
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
 8002020:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002022:	f005 fff1 	bl	8008008 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002026:	2000      	movs	r0, #0
 8002028:	f7ff ff10 	bl	8001e4c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <_Z18SystemClock_Configv+0xc4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002034:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <_Z18SystemClock_Configv+0xc4>)
 8002036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <_Z18SystemClock_Configv+0xc4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002048:	2324      	movs	r3, #36	; 0x24
 800204a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800204c:	2381      	movs	r3, #129	; 0x81
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002050:	2301      	movs	r3, #1
 8002052:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002054:	2300      	movs	r3, #0
 8002056:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002058:	23b0      	movs	r3, #176	; 0xb0
 800205a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800205c:	2300      	movs	r3, #0
 800205e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002060:	f107 0320 	add.w	r3, r7, #32
 8002064:	4618      	mov	r0, r3
 8002066:	f006 fa79 	bl	800855c <HAL_RCC_OscConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 800207a:	f000 f823 	bl	80020c4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800207e:	234f      	movs	r3, #79	; 0x4f
 8002080:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002096:	f107 0308 	add.w	r3, r7, #8
 800209a:	2102      	movs	r1, #2
 800209c:	4618      	mov	r0, r3
 800209e:	f006 fddf 	bl	8008c60 <HAL_RCC_ClockConfig>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80020b2:	f000 f807 	bl	80020c4 <Error_Handler>
  }
}
 80020b6:	bf00      	nop
 80020b8:	3768      	adds	r7, #104	; 0x68
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	58000400 	.word	0x58000400

080020c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c8:	b672      	cpsid	i
}
 80020ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020cc:	e7fe      	b.n	80020cc <Error_Handler+0x8>

080020ce <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <LL_APB1_GRP1_EnableClock>:
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4313      	orrs	r3, r2
 8002104:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4013      	ands	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
	...

08002120 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	; 0x30
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	222c      	movs	r2, #44	; 0x2c
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f01e ffa5 	bl	802107c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <MX_RTC_Init+0x9c>)
 8002134:	4a22      	ldr	r2, [pc, #136]	; (80021c0 <MX_RTC_Init+0xa0>)
 8002136:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <MX_RTC_Init+0x9c>)
 800213a:	221f      	movs	r2, #31
 800213c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800213e:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <MX_RTC_Init+0x9c>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <MX_RTC_Init+0x9c>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <MX_RTC_Init+0x9c>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <MX_RTC_Init+0x9c>)
 8002152:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002156:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002158:	4b18      	ldr	r3, [pc, #96]	; (80021bc <MX_RTC_Init+0x9c>)
 800215a:	2200      	movs	r2, #0
 800215c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <MX_RTC_Init+0x9c>)
 8002160:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002164:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002166:	4815      	ldr	r0, [pc, #84]	; (80021bc <MX_RTC_Init+0x9c>)
 8002168:	f007 fa36 	bl	80095d8 <HAL_RTC_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002172:	f7ff ffa7 	bl	80020c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8002176:	4811      	ldr	r0, [pc, #68]	; (80021bc <MX_RTC_Init+0x9c>)
 8002178:	f007 fd2c 	bl	8009bd4 <HAL_RTCEx_SetSSRU_IT>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002182:	f7ff ff9f 	bl	80020c4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002192:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002196:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2200      	movs	r2, #0
 80021a2:	4619      	mov	r1, r3
 80021a4:	4805      	ldr	r0, [pc, #20]	; (80021bc <MX_RTC_Init+0x9c>)
 80021a6:	f007 fa99 	bl	80096dc <HAL_RTC_SetAlarm_IT>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80021b0:	f7ff ff88 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021b4:	bf00      	nop
 80021b6:	3730      	adds	r7, #48	; 0x30
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	2000027c 	.word	0x2000027c
 80021c0:	40002800 	.word	0x40002800

080021c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b090      	sub	sp, #64	; 0x40
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021cc:	f107 0308 	add.w	r3, r7, #8
 80021d0:	2238      	movs	r2, #56	; 0x38
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f01e ff51 	bl	802107c <memset>
  if(rtcHandle->Instance==RTC)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_RTC_MspInit+0x74>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d125      	bne.n	8002230 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021e8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021f0:	f107 0308 	add.w	r3, r7, #8
 80021f4:	4618      	mov	r0, r3
 80021f6:	f007 f8d5 	bl	80093a4 <HAL_RCCEx_PeriphCLKConfig>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002200:	f7ff ff60 	bl	80020c4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002204:	f7ff ff63 	bl	80020ce <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002208:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800220c:	f7ff ff6f 	bl	80020ee <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002210:	2200      	movs	r2, #0
 8002212:	2100      	movs	r1, #0
 8002214:	2002      	movs	r0, #2
 8002216:	f004 f872 	bl	80062fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800221a:	2002      	movs	r0, #2
 800221c:	f004 f889 	bl	8006332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002220:	2200      	movs	r2, #0
 8002222:	2100      	movs	r1, #0
 8002224:	202a      	movs	r0, #42	; 0x2a
 8002226:	f004 f86a 	bl	80062fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800222a:	202a      	movs	r0, #42	; 0x2a
 800222c:	f004 f881 	bl	8006332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002230:	bf00      	nop
 8002232:	3740      	adds	r7, #64	; 0x40
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40002800 	.word	0x40002800

0800223c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800224c:	e7fe      	b.n	800224c <NMI_Handler+0x4>

0800224e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002252:	e7fe      	b.n	8002252 <HardFault_Handler+0x4>

08002254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <MemManage_Handler+0x4>

0800225a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800225e:	e7fe      	b.n	800225e <BusFault_Handler+0x4>

08002260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <UsageFault_Handler+0x4>

08002266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
	...

08002298 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800229e:	f007 fcd5 	bl	8009c4c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	2000027c 	.word	0x2000027c

080022ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <DMA1_Channel1_IRQHandler+0x10>)
 80022b2:	f004 fad5 	bl	8006860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000035c 	.word	0x2000035c

080022c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <USART1_IRQHandler+0x10>)
 80022c6:	f008 fb15 	bl	800a8f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200002c8 	.word	0x200002c8

080022d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80022d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022dc:	f005 f890 	bl	8007400 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <RTC_Alarm_IRQHandler+0x10>)
 80022ea:	f007 fb5f 	bl	80099ac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000027c 	.word	0x2000027c

080022f8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <SUBGHZ_Radio_IRQHandler+0x10>)
 80022fe:	f008 f813 	bl	800a328 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200002b4 	.word	0x200002b4

0800230c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002318:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800231a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4313      	orrs	r3, r2
 8002322:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002328:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4013      	ands	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002330:	68fb      	ldr	r3, [r7, #12]
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <MX_SUBGHZ_Init+0x20>)
 8002342:	2208      	movs	r2, #8
 8002344:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002346:	4805      	ldr	r0, [pc, #20]	; (800235c <MX_SUBGHZ_Init+0x20>)
 8002348:	f007 fd6c 	bl	8009e24 <HAL_SUBGHZ_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002352:	f7ff feb7 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200002b4 	.word	0x200002b4

08002360 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002368:	2001      	movs	r0, #1
 800236a:	f7ff ffcf 	bl	800230c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	2032      	movs	r0, #50	; 0x32
 8002374:	f003 ffc3 	bl	80062fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002378:	2032      	movs	r0, #50	; 0x32
 800237a:	f003 ffda 	bl	8006332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800238e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002398:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80023b0:	4b02      	ldr	r3, [pc, #8]	; (80023bc <LL_FLASH_GetUDN+0x10>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	1fff7580 	.word	0x1fff7580

080023c0 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <LL_FLASH_GetDeviceID+0x14>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	b2db      	uxtb	r3, r3
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	1fff7584 	.word	0x1fff7584

080023d8 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <LL_FLASH_GetSTCompanyID+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0a1b      	lsrs	r3, r3, #8
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	1fff7584 	.word	0x1fff7584

080023f0 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff ffc6 	bl	8002386 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80023fa:	f01d f96d 	bl	801f6d8 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <SystemApp_Init+0x48>)
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002404:	f000 f986 	bl	8002714 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002408:	f01d fbf6 	bl	801fbf8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800240c:	480b      	ldr	r0, [pc, #44]	; (800243c <SystemApp_Init+0x4c>)
 800240e:	f01d fca1 	bl	801fd54 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <SystemApp_Init+0x50>)
 8002414:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002418:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800241a:	2002      	movs	r0, #2
 800241c:	f01d fca8 	bl	801fd70 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002420:	f7ff f8d2 	bl	80015c8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002424:	f000 f9fc 	bl	8002820 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002428:	f01c fc5c 	bl	801ece4 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800242c:	2101      	movs	r1, #1
 800242e:	2001      	movs	r0, #1
 8002430:	f01c fc98 	bl	801ed64 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200002c0 	.word	0x200002c0
 800243c:	08002605 	.word	0x08002605
 8002440:	58004000 	.word	0x58004000

08002444 <GetBatteryLevel>:

  /* USER CODE END UTIL_SEQ_Idle_2 */
}

uint8_t GetBatteryLevel(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800244e:	f7ff f8c9 	bl	80015e4 <SYS_GetBatteryLevel>
 8002452:	4603      	mov	r3, r0
 8002454:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8002456:	88bb      	ldrh	r3, [r7, #4]
 8002458:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800245c:	4293      	cmp	r3, r2
 800245e:	d902      	bls.n	8002466 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002460:	23fe      	movs	r3, #254	; 0xfe
 8002462:	71fb      	strb	r3, [r7, #7]
 8002464:	e014      	b.n	8002490 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8002466:	88bb      	ldrh	r3, [r7, #4]
 8002468:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800246c:	d202      	bcs.n	8002474 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	71fb      	strb	r3, [r7, #7]
 8002472:	e00d      	b.n	8002490 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002474:	88bb      	ldrh	r3, [r7, #4]
 8002476:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800247a:	461a      	mov	r2, r3
 800247c:	4613      	mov	r3, r2
 800247e:	01db      	lsls	r3, r3, #7
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	461a      	mov	r2, r3
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <GetBatteryLevel+0x58>)
 8002488:	fba3 2302 	umull	r2, r3, r3, r2
 800248c:	09db      	lsrs	r3, r3, #7
 800248e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002490:	79fb      	ldrb	r3, [r7, #7]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	1b4e81b5 	.word	0x1b4e81b5

080024a0 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f98d 	bl	80027cc <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fe1f 	bl	80010f8 <__aeabi_f2iz>
 80024ba:	4603      	mov	r3, r0
 80024bc:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80024be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80024ca:	b590      	push	{r4, r7, lr}
 80024cc:	b087      	sub	sp, #28
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80024d6:	f7ff ff69 	bl	80023ac <LL_FLASH_GetUDN>
 80024da:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e2:	d138      	bne.n	8002556 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80024e4:	f002 fd94 	bl	8005010 <HAL_GetUIDw0>
 80024e8:	4604      	mov	r4, r0
 80024ea:	f002 fda5 	bl	8005038 <HAL_GetUIDw2>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4423      	add	r3, r4
 80024f2:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 80024f4:	f002 fd96 	bl	8005024 <HAL_GetUIDw1>
 80024f8:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	0e1a      	lsrs	r2, r3, #24
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3307      	adds	r3, #7
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	0c1a      	lsrs	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3306      	adds	r3, #6
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	0a1a      	lsrs	r2, r3, #8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3305      	adds	r3, #5
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3304      	adds	r3, #4
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	0e1a      	lsrs	r2, r3, #24
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3303      	adds	r3, #3
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	0c1a      	lsrs	r2, r3, #16
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3302      	adds	r3, #2
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	0a1a      	lsrs	r2, r3, #8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3301      	adds	r3, #1
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	b2da      	uxtb	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002554:	e031      	b.n	80025ba <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3307      	adds	r3, #7
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	0a1a      	lsrs	r2, r3, #8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3306      	adds	r3, #6
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	0c1a      	lsrs	r2, r3, #16
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3305      	adds	r3, #5
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	0e1a      	lsrs	r2, r3, #24
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002584:	f7ff ff1c 	bl	80023c0 <LL_FLASH_GetDeviceID>
 8002588:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3303      	adds	r3, #3
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002594:	f7ff ff20 	bl	80023d8 <LL_FLASH_GetSTCompanyID>
 8002598:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3302      	adds	r3, #2
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	0a1a      	lsrs	r2, r3, #8
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3301      	adds	r3, #1
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	0c1b      	lsrs	r3, r3, #16
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	701a      	strb	r2, [r3, #0]
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd90      	pop	{r4, r7, pc}

080025c2 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80025c2:	b590      	push	{r4, r7, lr}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 80025ca:	f7ff feef 	bl	80023ac <LL_FLASH_GetUDN>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d10d      	bne.n	80025fa <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80025de:	f002 fd17 	bl	8005010 <HAL_GetUIDw0>
 80025e2:	4604      	mov	r4, r0
 80025e4:	f002 fd1e 	bl	8005024 <HAL_GetUIDw1>
 80025e8:	4603      	mov	r3, r0
 80025ea:	405c      	eors	r4, r3
 80025ec:	f002 fd24 	bl	8005038 <HAL_GetUIDw2>
 80025f0:	4603      	mov	r3, r0
 80025f2:	ea84 0203 	eor.w	r2, r4, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd90      	pop	{r4, r7, pc}
	...

08002604 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af02      	add	r7, sp, #8
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800260e:	f107 0308 	add.w	r3, r7, #8
 8002612:	4618      	mov	r0, r3
 8002614:	f01c fcb0 	bl	801ef78 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800261e:	9200      	str	r2, [sp, #0]
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <TimestampNow+0x3c>)
 8002622:	2110      	movs	r1, #16
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f81d 	bl	8002664 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fd fda4 	bl	8000178 <strlen>
 8002630:	4603      	mov	r3, r0
 8002632:	b29a      	uxth	r2, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	080210f4 	.word	0x080210f4

08002644 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002648:	2101      	movs	r1, #1
 800264a:	2002      	movs	r0, #2
 800264c:	f01c fb5a 	bl	801ed04 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}

08002654 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002658:	2100      	movs	r1, #0
 800265a:	2002      	movs	r0, #2
 800265c:	f01c fb52 	bl	801ed04 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}

08002664 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002664:	b40c      	push	{r2, r3}
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002676:	6839      	ldr	r1, [r7, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f01c fe4d 	bl	801f31c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800268c:	b002      	add	sp, #8
 800268e:	4770      	bx	lr

08002690 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_GetTick+0x24>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80026b6:	f000 f97f 	bl	80029b8 <TIMER_IF_GetTimerValue>
 80026ba:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80026bc:	687b      	ldr	r3, [r7, #4]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200002c0 	.word	0x200002c0

080026cc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f9f5 	bl	8002ac6 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <LL_AHB2_GRP1_EnableClock>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4013      	ands	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002708:	68fb      	ldr	r3, [r7, #12]
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800271a:	f002 fc97 	bl	800504c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 800271e:	f002 fc9b 	bl	8005058 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002722:	f002 fc9f 	bl	8005064 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002734:	2301      	movs	r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	2303      	movs	r3, #3
 800273e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002740:	2001      	movs	r0, #1
 8002742:	f7ff ffcf 	bl	80026e4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8002746:	2002      	movs	r0, #2
 8002748:	f7ff ffcc 	bl	80026e4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 800274c:	2002      	movs	r0, #2
 800274e:	f7ff ffc9 	bl	80026e4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8002752:	2002      	movs	r0, #2
 8002754:	f7ff ffc6 	bl	80026e4 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002758:	2301      	movs	r3, #1
 800275a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	4619      	mov	r1, r3
 8002760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002764:	f004 fc06 	bl	8006f74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800276c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	4619      	mov	r1, r3
 8002772:	4815      	ldr	r0, [pc, #84]	; (80027c8 <DBG_Init+0xb4>)
 8002774:	f004 fbfe 	bl	8006f74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002778:	2308      	movs	r3, #8
 800277a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	4619      	mov	r1, r3
 8002780:	4811      	ldr	r0, [pc, #68]	; (80027c8 <DBG_Init+0xb4>)
 8002782:	f004 fbf7 	bl	8006f74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8002786:	2310      	movs	r3, #16
 8002788:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4619      	mov	r1, r3
 800278e:	480e      	ldr	r0, [pc, #56]	; (80027c8 <DBG_Init+0xb4>)
 8002790:	f004 fbf0 	bl	8006f74 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002794:	2200      	movs	r2, #0
 8002796:	2101      	movs	r1, #1
 8002798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800279c:	f004 fe18 	bl	80073d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80027a0:	2200      	movs	r2, #0
 80027a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027a6:	4808      	ldr	r0, [pc, #32]	; (80027c8 <DBG_Init+0xb4>)
 80027a8:	f004 fe12 	bl	80073d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2108      	movs	r1, #8
 80027b0:	4805      	ldr	r0, [pc, #20]	; (80027c8 <DBG_Init+0xb4>)
 80027b2:	f004 fe0d 	bl	80073d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2110      	movs	r1, #16
 80027ba:	4803      	ldr	r0, [pc, #12]	; (80027c8 <DBG_Init+0xb4>)
 80027bc:	f004 fe08 	bl	80073d0 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80027c0:	bf00      	nop
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	48000400 	.word	0x48000400

080027cc <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80027d4:	4b0d      	ldr	r3, [pc, #52]	; (800280c <EnvSensors_Read+0x40>)
 80027d6:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80027d8:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <EnvSensors_Read+0x44>)
 80027da:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <EnvSensors_Read+0x48>)
 80027de:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a08      	ldr	r2, [pc, #32]	; (8002818 <EnvSensors_Read+0x4c>)
 80027f6:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <EnvSensors_Read+0x50>)
 80027fc:	611a      	str	r2, [r3, #16]

  return 0;
 80027fe:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002800:	4618      	mov	r0, r3
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	42480000 	.word	0x42480000
 8002810:	41900000 	.word	0x41900000
 8002814:	447a0000 	.word	0x447a0000
 8002818:	003e090d 	.word	0x003e090d
 800281c:	000503ab 	.word	0x000503ab

08002820 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 800282a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002862:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <TIMER_IF_Init+0x5c>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	f083 0301 	eor.w	r3, r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01b      	beq.n	80028a8 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <TIMER_IF_Init+0x60>)
 8002872:	f04f 32ff 	mov.w	r2, #4294967295
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002878:	f7ff fc52 	bl	8002120 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800287c:	f000 f856 	bl	800292c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002880:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002884:	480c      	ldr	r0, [pc, #48]	; (80028b8 <TIMER_IF_Init+0x60>)
 8002886:	f007 f835 	bl	80098f4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <TIMER_IF_Init+0x60>)
 800288c:	f04f 32ff 	mov.w	r2, #4294967295
 8002890:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002892:	4809      	ldr	r0, [pc, #36]	; (80028b8 <TIMER_IF_Init+0x60>)
 8002894:	f007 f96c 	bl	8009b70 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002898:	2000      	movs	r0, #0
 800289a:	f000 f9d3 	bl	8002c44 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800289e:	f000 f85f 	bl	8002960 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <TIMER_IF_Init+0x5c>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80028a8:	79fb      	ldrb	r3, [r7, #7]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	200002c1 	.word	0x200002c1
 80028b8:	2000027c 	.word	0x2000027c

080028bc <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08e      	sub	sp, #56	; 0x38
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80028ca:	f107 0308 	add.w	r3, r7, #8
 80028ce:	222c      	movs	r2, #44	; 0x2c
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f01e fbd2 	bl	802107c <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80028d8:	f000 f828 	bl	800292c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <TIMER_IF_StartTimer+0x68>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4413      	add	r3, r2
 80028e4:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80028f4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80028f8:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80028fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002900:	f107 0308 	add.w	r3, r7, #8
 8002904:	2201      	movs	r2, #1
 8002906:	4619      	mov	r1, r3
 8002908:	4807      	ldr	r0, [pc, #28]	; (8002928 <TIMER_IF_StartTimer+0x6c>)
 800290a:	f006 fee7 	bl	80096dc <HAL_RTC_SetAlarm_IT>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002914:	f7ff fbd6 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002918:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800291c:	4618      	mov	r0, r3
 800291e:	3738      	adds	r7, #56	; 0x38
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200002c4 	.word	0x200002c4
 8002928:	2000027c 	.word	0x2000027c

0800292c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <TIMER_IF_StopTimer+0x2c>)
 8002938:	2201      	movs	r2, #1
 800293a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800293c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002940:	4806      	ldr	r0, [pc, #24]	; (800295c <TIMER_IF_StopTimer+0x30>)
 8002942:	f006 ffd7 	bl	80098f4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <TIMER_IF_StopTimer+0x30>)
 8002948:	f04f 32ff 	mov.w	r2, #4294967295
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800294e:	79fb      	ldrb	r3, [r7, #7]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40002800 	.word	0x40002800
 800295c:	2000027c 	.word	0x2000027c

08002960 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002964:	f000 f98e 	bl	8002c84 <GetTimerTicks>
 8002968:	4603      	mov	r3, r0
 800296a:	4a03      	ldr	r2, [pc, #12]	; (8002978 <TIMER_IF_SetTimerContext+0x18>)
 800296c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800296e:	4b02      	ldr	r3, [pc, #8]	; (8002978 <TIMER_IF_SetTimerContext+0x18>)
 8002970:	681b      	ldr	r3, [r3, #0]
}
 8002972:	4618      	mov	r0, r3
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200002c4 	.word	0x200002c4

0800297c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002980:	4b02      	ldr	r3, [pc, #8]	; (800298c <TIMER_IF_GetTimerContext+0x10>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	200002c4 	.word	0x200002c4

08002990 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800299a:	f000 f973 	bl	8002c84 <GetTimerTicks>
 800299e:	4602      	mov	r2, r0
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80029a8:	687b      	ldr	r3, [r7, #4]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200002c4 	.word	0x200002c4

080029b8 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <TIMER_IF_GetTimerValue+0x24>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80029ca:	f000 f95b 	bl	8002c84 <GetTimerTicks>
 80029ce:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80029d0:	687b      	ldr	r3, [r7, #4]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	200002c1 	.word	0x200002c1

080029e0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80029ea:	2303      	movs	r3, #3
 80029ec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80029ee:	687b      	ldr	r3, [r7, #4]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80029fa:	b5b0      	push	{r4, r5, r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002a02:	2100      	movs	r1, #0
 8002a04:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	2000      	movs	r0, #0
 8002a0a:	460a      	mov	r2, r1
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	0d95      	lsrs	r5, r2, #22
 8002a10:	0294      	lsls	r4, r2, #10
 8002a12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	f7fe fbb1 	bl	8001184 <__aeabi_uldivmod>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4613      	mov	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bdb0      	pop	{r4, r5, r7, pc}

08002a34 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002a34:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002a3e:	2100      	movs	r1, #0
 8002a40:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	2000      	movs	r0, #0
 8002a46:	460c      	mov	r4, r1
 8002a48:	4605      	mov	r5, r0
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	f04f 0a00 	mov.w	sl, #0
 8002a52:	f04f 0b00 	mov.w	fp, #0
 8002a56:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002a5a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002a5e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002a62:	4650      	mov	r0, sl
 8002a64:	4659      	mov	r1, fp
 8002a66:	1b02      	subs	r2, r0, r4
 8002a68:	eb61 0305 	sbc.w	r3, r1, r5
 8002a6c:	f04f 0000 	mov.w	r0, #0
 8002a70:	f04f 0100 	mov.w	r1, #0
 8002a74:	0099      	lsls	r1, r3, #2
 8002a76:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002a7a:	0090      	lsls	r0, r2, #2
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	eb12 0804 	adds.w	r8, r2, r4
 8002a84:	eb43 0905 	adc.w	r9, r3, r5
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a9c:	4690      	mov	r8, r2
 8002a9e:	4699      	mov	r9, r3
 8002aa0:	4640      	mov	r0, r8
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	0a82      	lsrs	r2, r0, #10
 8002aae:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002ab2:	0a8b      	lsrs	r3, r1, #10
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ac4:	4770      	bx	lr

08002ac6 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ff93 	bl	80029fa <TIMER_IF_Convert_ms2Tick>
 8002ad4:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002ad6:	f000 f8d5 	bl	8002c84 <GetTimerTicks>
 8002ada:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002adc:	e000      	b.n	8002ae0 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002ade:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002ae0:	f000 f8d0 	bl	8002c84 <GetTimerTicks>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d8f6      	bhi.n	8002ade <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002b02:	f01c ff37 	bl	801f974 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002b16:	f000 f8a5 	bl	8002c64 <TIMER_IF_BkUp_Read_MSBticks>
 8002b1a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f88f 	bl	8002c44 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002b2e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b32:	b08c      	sub	sp, #48	; 0x30
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002b3c:	f000 f8a2 	bl	8002c84 <GetTimerTicks>
 8002b40:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002b42:	f000 f88f 	bl	8002c64 <TIMER_IF_BkUp_Read_MSBticks>
 8002b46:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	60fa      	str	r2, [r7, #12]
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	000b      	movs	r3, r1
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b60:	2000      	movs	r0, #0
 8002b62:	460c      	mov	r4, r1
 8002b64:	4605      	mov	r5, r0
 8002b66:	eb12 0804 	adds.w	r8, r2, r4
 8002b6a:	eb43 0905 	adc.w	r9, r3, r5
 8002b6e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002b72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	0a82      	lsrs	r2, r0, #10
 8002b80:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002b84:	0a8b      	lsrs	r3, r1, #10
 8002b86:	4613      	mov	r3, r2
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002b98:	f04f 0b00 	mov.w	fp, #0
 8002b9c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff46 	bl	8002a34 <TIMER_IF_Convert_Tick2ms>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3730      	adds	r7, #48	; 0x30
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002bbc <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4803      	ldr	r0, [pc, #12]	; (8002bd8 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002bca:	f007 f863 	bl	8009c94 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000027c 	.word	0x2000027c

08002bdc <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	2101      	movs	r1, #1
 8002be8:	4803      	ldr	r0, [pc, #12]	; (8002bf8 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002bea:	f007 f853 	bl	8009c94 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2000027c 	.word	0x2000027c

08002bfc <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002c06:	2100      	movs	r1, #0
 8002c08:	4804      	ldr	r0, [pc, #16]	; (8002c1c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002c0a:	f007 f85b 	bl	8009cc4 <HAL_RTCEx_BKUPRead>
 8002c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002c10:	687b      	ldr	r3, [r7, #4]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2000027c 	.word	0x2000027c

08002c20 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4804      	ldr	r0, [pc, #16]	; (8002c40 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002c2e:	f007 f849 	bl	8009cc4 <HAL_RTCEx_BKUPRead>
 8002c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002c34:	687b      	ldr	r3, [r7, #4]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	2000027c 	.word	0x2000027c

08002c44 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	2102      	movs	r1, #2
 8002c50:	4803      	ldr	r0, [pc, #12]	; (8002c60 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002c52:	f007 f81f 	bl	8009c94 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	2000027c 	.word	0x2000027c

08002c64 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	4804      	ldr	r0, [pc, #16]	; (8002c80 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002c6e:	f007 f829 	bl	8009cc4 <HAL_RTCEx_BKUPRead>
 8002c72:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002c74:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	2000027c 	.word	0x2000027c

08002c84 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002c8a:	480b      	ldr	r0, [pc, #44]	; (8002cb8 <GetTimerTicks+0x34>)
 8002c8c:	f7ff fdd9 	bl	8002842 <LL_RTC_TIME_GetSubSecond>
 8002c90:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002c92:	e003      	b.n	8002c9c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002c94:	4808      	ldr	r0, [pc, #32]	; (8002cb8 <GetTimerTicks+0x34>)
 8002c96:	f7ff fdd4 	bl	8002842 <LL_RTC_TIME_GetSubSecond>
 8002c9a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002c9c:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <GetTimerTicks+0x34>)
 8002c9e:	f7ff fdd0 	bl	8002842 <LL_RTC_TIME_GetSubSecond>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d1f4      	bne.n	8002c94 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40002800 	.word	0x40002800

08002cbc <LL_AHB2_GRP1_EnableClock>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <LL_APB2_GRP1_EnableClock>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d10:	68fb      	ldr	r3, [r7, #12]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <LL_APB2_GRP1_DisableClock>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d32:	4013      	ands	r3, r2
 8002d34:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d44:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d46:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <MX_USART1_UART_Init+0x94>)
 8002d48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d4a:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d52:	4b1f      	ldr	r3, [pc, #124]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d58:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d5e:	4b1c      	ldr	r3, [pc, #112]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d64:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d66:	220c      	movs	r2, #12
 8002d68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6a:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d70:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d76:	4b16      	ldr	r3, [pc, #88]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d7c:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d82:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d88:	4811      	ldr	r0, [pc, #68]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d8a:	f007 fc96 	bl	800a6ba <HAL_UART_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d94:	f7ff f996 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d98:	2100      	movs	r1, #0
 8002d9a:	480d      	ldr	r0, [pc, #52]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d9c:	f009 fdb9 	bl	800c912 <HAL_UARTEx_SetTxFifoThreshold>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002da6:	f7ff f98d 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002daa:	2100      	movs	r1, #0
 8002dac:	4808      	ldr	r0, [pc, #32]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002dae:	f009 fdee 	bl	800c98e <HAL_UARTEx_SetRxFifoThreshold>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002db8:	f7ff f984 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002dbc:	4804      	ldr	r0, [pc, #16]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002dbe:	f009 fd6d 	bl	800c89c <HAL_UARTEx_EnableFifoMode>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002dc8:	f7ff f97c 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	200002c8 	.word	0x200002c8
 8002dd4:	40013800 	.word	0x40013800

08002dd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b096      	sub	sp, #88	; 0x58
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002df0:	f107 030c 	add.w	r3, r7, #12
 8002df4:	2238      	movs	r2, #56	; 0x38
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f01e f93f 	bl	802107c <memset>
  if(uartHandle->Instance==USART1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2f      	ldr	r2, [pc, #188]	; (8002ec0 <HAL_UART_MspInit+0xe8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d156      	bne.n	8002eb6 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e0c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002e10:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	4618      	mov	r0, r3
 8002e18:	f006 fac4 	bl	80093a4 <HAL_RCCEx_PeriphCLKConfig>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e22:	f7ff f94f 	bl	80020c4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e26:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e2a:	f7ff ff5f 	bl	8002cec <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2e:	2002      	movs	r0, #2
 8002e30:	f7ff ff44 	bl	8002cbc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002e34:	23c0      	movs	r3, #192	; 0xc0
 8002e36:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e40:	2303      	movs	r3, #3
 8002e42:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e44:	2307      	movs	r3, #7
 8002e46:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	481d      	ldr	r0, [pc, #116]	; (8002ec4 <HAL_UART_MspInit+0xec>)
 8002e50:	f004 f890 	bl	8006f74 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002e54:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e56:	4a1d      	ldr	r2, [pc, #116]	; (8002ecc <HAL_UART_MspInit+0xf4>)
 8002e58:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e5c:	2212      	movs	r2, #18
 8002e5e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e60:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e62:	2210      	movs	r2, #16
 8002e64:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e78:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002e8a:	480f      	ldr	r0, [pc, #60]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e8c:	f003 fa6e 	bl	800636c <HAL_DMA_Init>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002e96:	f7ff f915 	bl	80020c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e9e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ea0:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	2024      	movs	r0, #36	; 0x24
 8002eac:	f003 fa27 	bl	80062fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002eb0:	2024      	movs	r0, #36	; 0x24
 8002eb2:	f003 fa3e 	bl	8006332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	3758      	adds	r7, #88	; 0x58
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40013800 	.word	0x40013800
 8002ec4:	48000400 	.word	0x48000400
 8002ec8:	2000035c 	.word	0x2000035c
 8002ecc:	40020008 	.word	0x40020008

08002ed0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0b      	ldr	r2, [pc, #44]	; (8002f0c <HAL_UART_MspDeInit+0x3c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d10f      	bne.n	8002f02 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002ee2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ee6:	f7ff ff19 	bl	8002d1c <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002eea:	21c0      	movs	r1, #192	; 0xc0
 8002eec:	4808      	ldr	r0, [pc, #32]	; (8002f10 <HAL_UART_MspDeInit+0x40>)
 8002eee:	f004 f9a1 	bl	8007234 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f003 fae0 	bl	80064bc <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002efc:	2024      	movs	r0, #36	; 0x24
 8002efe:	f003 fa26 	bl	800634e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40013800 	.word	0x40013800
 8002f10:	48000400 	.word	0x48000400

08002f14 <LL_APB2_GRP1_ForceReset>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <LL_APB2_GRP1_ReleaseReset>:
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
	...

08002f5c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <LL_EXTI_EnableIT_0_31+0x24>)
 8002f66:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002f6a:	4905      	ldr	r1, [pc, #20]	; (8002f80 <LL_EXTI_EnableIT_0_31+0x24>)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	58000800 	.word	0x58000800

08002f84 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002f8c:	4a07      	ldr	r2, [pc, #28]	; (8002fac <vcom_Init+0x28>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002f92:	f7fe fbb9 	bl	8001708 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002f96:	f7ff fed3 	bl	8002d40 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002f9a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002f9e:	f7ff ffdd 	bl	8002f5c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002fa2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	200003c0 	.word	0x200003c0

08002fb0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002fb4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fb8:	f7ff ffac 	bl	8002f14 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002fbc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fc0:	f7ff ffb9 	bl	8002f36 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002fc4:	4804      	ldr	r0, [pc, #16]	; (8002fd8 <vcom_DeInit+0x28>)
 8002fc6:	f7ff ff83 	bl	8002ed0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002fca:	200f      	movs	r0, #15
 8002fcc:	f003 f9bf 	bl	800634e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002fd0:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	200002c8 	.word	0x200002c8

08002fdc <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002fe8:	887b      	ldrh	r3, [r7, #2]
 8002fea:	461a      	mov	r2, r3
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4804      	ldr	r0, [pc, #16]	; (8003000 <vcom_Trace_DMA+0x24>)
 8002ff0:	f007 fc00 	bl	800a7f4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002ff4:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	200002c8 	.word	0x200002c8

08003004 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800300c:	4a19      	ldr	r2, [pc, #100]	; (8003074 <vcom_ReceiveInit+0x70>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003012:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003016:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003018:	f107 0308 	add.w	r3, r7, #8
 800301c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003020:	4815      	ldr	r0, [pc, #84]	; (8003078 <vcom_ReceiveInit+0x74>)
 8003022:	f009 fbae 	bl	800c782 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8003026:	bf00      	nop
 8003028:	4b13      	ldr	r3, [pc, #76]	; (8003078 <vcom_ReceiveInit+0x74>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003036:	d0f7      	beq.n	8003028 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003038:	bf00      	nop
 800303a:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <vcom_ReceiveInit+0x74>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003048:	d1f7      	bne.n	800303a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800304a:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <vcom_ReceiveInit+0x74>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <vcom_ReceiveInit+0x74>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003058:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800305a:	4807      	ldr	r0, [pc, #28]	; (8003078 <vcom_ReceiveInit+0x74>)
 800305c:	f009 fbec 	bl	800c838 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003060:	2201      	movs	r2, #1
 8003062:	4906      	ldr	r1, [pc, #24]	; (800307c <vcom_ReceiveInit+0x78>)
 8003064:	4804      	ldr	r0, [pc, #16]	; (8003078 <vcom_ReceiveInit+0x74>)
 8003066:	f007 fb79 	bl	800a75c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800306a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	200003c4 	.word	0x200003c4
 8003078:	200002c8 	.word	0x200002c8
 800307c:	200003bc 	.word	0x200003bc

08003080 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a05      	ldr	r2, [pc, #20]	; (80030a4 <HAL_UART_TxCpltCallback+0x24>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d103      	bne.n	800309a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_UART_TxCpltCallback+0x28>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2000      	movs	r0, #0
 8003098:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40013800 	.word	0x40013800
 80030a8:	200003c0 	.word	0x200003c0

080030ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0d      	ldr	r2, [pc, #52]	; (80030f0 <HAL_UART_RxCpltCallback+0x44>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d113      	bne.n	80030e6 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <HAL_UART_RxCpltCallback+0x48>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_UART_RxCpltCallback+0x30>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d105      	bne.n	80030dc <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_UART_RxCpltCallback+0x48>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2200      	movs	r2, #0
 80030d6:	2101      	movs	r1, #1
 80030d8:	4807      	ldr	r0, [pc, #28]	; (80030f8 <HAL_UART_RxCpltCallback+0x4c>)
 80030da:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80030dc:	2201      	movs	r2, #1
 80030de:	4906      	ldr	r1, [pc, #24]	; (80030f8 <HAL_UART_RxCpltCallback+0x4c>)
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f007 fb3b 	bl	800a75c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40013800 	.word	0x40013800
 80030f4:	200003c4 	.word	0x200003c4
 80030f8:	200003bc 	.word	0x200003bc

080030fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030fc:	480d      	ldr	r0, [pc, #52]	; (8003134 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003100:	f7ff fb99 	bl	8002836 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003104:	480c      	ldr	r0, [pc, #48]	; (8003138 <LoopForever+0x6>)
  ldr r1, =_edata
 8003106:	490d      	ldr	r1, [pc, #52]	; (800313c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003108:	4a0d      	ldr	r2, [pc, #52]	; (8003140 <LoopForever+0xe>)
  movs r3, #0
 800310a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800310c:	e002      	b.n	8003114 <LoopCopyDataInit>

0800310e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800310e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003112:	3304      	adds	r3, #4

08003114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003118:	d3f9      	bcc.n	800310e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <LoopForever+0x12>)
  ldr r4, =_ebss
 800311c:	4c0a      	ldr	r4, [pc, #40]	; (8003148 <LoopForever+0x16>)
  movs r3, #0
 800311e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003120:	e001      	b.n	8003126 <LoopFillZerobss>

08003122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003124:	3204      	adds	r2, #4

08003126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003128:	d3fb      	bcc.n	8003122 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800312a:	f01d ff75 	bl	8021018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800312e:	f7fe fea3 	bl	8001e78 <main>

08003132 <LoopForever>:

LoopForever:
    b LoopForever
 8003132:	e7fe      	b.n	8003132 <LoopForever>
  ldr   r0, =_estack
 8003134:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800313c:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8003140:	080221e8 	.word	0x080221e8
  ldr r2, =_sbss
 8003144:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8003148:	200022bc 	.word	0x200022bc

0800314c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800314c:	e7fe      	b.n	800314c <ADC_IRQHandler>

0800314e <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f001 fade 	bl	800471c <null_ptr_check>
 8003160:	4603      	mov	r3, r0
 8003162:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8003164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d131      	bne.n	80031d0 <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7a1b      	ldrb	r3, [r3, #8]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d003      	beq.n	800317c <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	729a      	strb	r2, [r3, #10]
 800317a:	e002      	b.n	8003182 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8003182:	f107 010e 	add.w	r1, r7, #14
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	2000      	movs	r0, #0
 800318c:	f000 f826 	bl	80031dc <bmp3_get_regs>
 8003190:	4603      	mov	r3, r0
 8003192:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8003194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d119      	bne.n	80031d0 <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 800319c:	7bbb      	ldrb	r3, [r7, #14]
 800319e:	2b50      	cmp	r3, #80	; 0x50
 80031a0:	d002      	beq.n	80031a8 <bmp3_init+0x5a>
 80031a2:	7bbb      	ldrb	r3, [r7, #14]
 80031a4:	2b60      	cmp	r3, #96	; 0x60
 80031a6:	d111      	bne.n	80031cc <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 80031a8:	7bba      	ldrb	r2, [r7, #14]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f98b 	bl	80034ca <bmp3_soft_reset>
 80031b4:	4603      	mov	r3, r0
 80031b6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 80031b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d107      	bne.n	80031d0 <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fb33 	bl	800382c <get_calib_data>
 80031c6:	4603      	mov	r3, r0
 80031c8:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 80031ca:	e001      	b.n	80031d0 <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 80031cc:	23fe      	movs	r3, #254	; 0xfe
 80031ce:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80031d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 80031dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031e0:	b08b      	sub	sp, #44	; 0x2c
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	4603      	mov	r3, r0
 80031ec:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80031ee:	6838      	ldr	r0, [r7, #0]
 80031f0:	f001 fa94 	bl	800471c <null_ptr_check>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 80031fa:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d172      	bne.n	80032e8 <bmp3_get_regs+0x10c>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d06f      	beq.n	80032e8 <bmp3_get_regs+0x10c>
    {
 8003208:	466b      	mov	r3, sp
 800320a:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	7a9b      	ldrb	r3, [r3, #10]
 8003210:	461a      	mov	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	7a9b      	ldrb	r3, [r3, #10]
 800321c:	461a      	mov	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	18d1      	adds	r1, r2, r3
 8003222:	460b      	mov	r3, r1
 8003224:	3b01      	subs	r3, #1
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	2300      	movs	r3, #0
 800322a:	4688      	mov	r8, r1
 800322c:	4699      	mov	r9, r3
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800323a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800323e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003242:	2300      	movs	r3, #0
 8003244:	460c      	mov	r4, r1
 8003246:	461d      	mov	r5, r3
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	00eb      	lsls	r3, r5, #3
 8003252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003256:	00e2      	lsls	r2, r4, #3
 8003258:	1dcb      	adds	r3, r1, #7
 800325a:	08db      	lsrs	r3, r3, #3
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	ebad 0d03 	sub.w	sp, sp, r3
 8003262:	466b      	mov	r3, sp
 8003264:	3300      	adds	r3, #0
 8003266:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	7a1b      	ldrb	r3, [r3, #8]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d025      	beq.n	80032bc <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003276:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68dc      	ldr	r4, [r3, #12]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	7bf8      	ldrb	r0, [r7, #15]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	6979      	ldr	r1, [r7, #20]
 8003286:	47a0      	blx	r4
 8003288:	4603      	mov	r3, r0
 800328a:	461a      	mov	r2, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 8003290:	2300      	movs	r3, #0
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
 8003294:	e00d      	b.n	80032b2 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	7a9b      	ldrb	r3, [r3, #10]
 800329a:	461a      	mov	r2, r3
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	441a      	add	r2, r3
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	440b      	add	r3, r1
 80032a6:	6979      	ldr	r1, [r7, #20]
 80032a8:	5c8a      	ldrb	r2, [r1, r2]
 80032aa:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	3301      	adds	r3, #1
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
 80032b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d3ed      	bcc.n	8003296 <bmp3_get_regs+0xba>
 80032ba:	e00b      	b.n	80032d4 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68dc      	ldr	r4, [r3, #12]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	7bf8      	ldrb	r0, [r7, #15]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	47a0      	blx	r4
 80032cc:	4603      	mov	r3, r0
 80032ce:	461a      	mov	r2, r3
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 80032de:	23f9      	movs	r3, #249	; 0xf9
 80032e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e4:	46b5      	mov	sp, r6
    {
 80032e6:	e002      	b.n	80032ee <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80032e8:	23ff      	movs	r3, #255	; 0xff
 80032ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 80032ee:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	372c      	adds	r7, #44	; 0x2c
 80032f6:	46bd      	mov	sp, r7
 80032f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080032fc <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 80032fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003300:	b089      	sub	sp, #36	; 0x24
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	466b      	mov	r3, sp
 800330e:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	0059      	lsls	r1, r3, #1
 8003314:	460b      	mov	r3, r1
 8003316:	3b01      	subs	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	2300      	movs	r3, #0
 800331c:	4688      	mov	r8, r1
 800331e:	4699      	mov	r9, r3
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800332c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003330:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003334:	2300      	movs	r3, #0
 8003336:	460c      	mov	r4, r1
 8003338:	461d      	mov	r5, r3
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	00eb      	lsls	r3, r5, #3
 8003344:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003348:	00e2      	lsls	r2, r4, #3
 800334a:	1dcb      	adds	r3, r1, #7
 800334c:	08db      	lsrs	r3, r3, #3
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	ebad 0d03 	sub.w	sp, sp, r3
 8003354:	466b      	mov	r3, sp
 8003356:	3300      	adds	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800335a:	6838      	ldr	r0, [r7, #0]
 800335c:	f001 f9de 	bl	800471c <null_ptr_check>
 8003360:	4603      	mov	r3, r0
 8003362:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8003364:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d14c      	bne.n	8003406 <bmp3_set_regs+0x10a>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d049      	beq.n	8003406 <bmp3_set_regs+0x10a>
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d046      	beq.n	8003406 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d040      	beq.n	8003400 <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	781a      	ldrb	r2, [r3, #0]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	7a1b      	ldrb	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d114      	bne.n	80033b8 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800338e:	2300      	movs	r3, #0
 8003390:	76bb      	strb	r3, [r7, #26]
 8003392:	e00d      	b.n	80033b0 <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003394:	7ebb      	ldrb	r3, [r7, #26]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4413      	add	r3, r2
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	7ebb      	ldrb	r3, [r7, #26]
 800339e:	68f9      	ldr	r1, [r7, #12]
 80033a0:	440b      	add	r3, r1
 80033a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80033aa:	7ebb      	ldrb	r3, [r7, #26]
 80033ac:	3301      	adds	r3, #1
 80033ae:	76bb      	strb	r3, [r7, #26]
 80033b0:	7ebb      	ldrb	r3, [r7, #26]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d8ed      	bhi.n	8003394 <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d909      	bls.n	80033d2 <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	6939      	ldr	r1, [r7, #16]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fa56 	bl	8003876 <interleave_reg_addr>
                temp_len = len * 2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	e001      	b.n	80033d6 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	691c      	ldr	r4, [r3, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	7818      	ldrb	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	6939      	ldr	r1, [r7, #16]
 80033e6:	47a0      	blx	r4
 80033e8:	4603      	mov	r3, r0
 80033ea:	461a      	mov	r2, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 80033fa:	23f9      	movs	r3, #249	; 0xf9
 80033fc:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 80033fe:	e005      	b.n	800340c <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 8003400:	23fa      	movs	r3, #250	; 0xfa
 8003402:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8003404:	e002      	b.n	800340c <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003406:	23ff      	movs	r3, #255	; 0xff
 8003408:	76fb      	strb	r3, [r7, #27]
 800340a:	e000      	b.n	800340e <bmp3_set_regs+0x112>
        if (len != 0)
 800340c:	bf00      	nop
    }

    return rslt;
 800340e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003412:	46b5      	mov	sp, r6
}
 8003414:	4618      	mov	r0, r3
 8003416:	3724      	adds	r7, #36	; 0x24
 8003418:	46bd      	mov	sp, r7
 800341a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800341e <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003428:	6838      	ldr	r0, [r7, #0]
 800342a:	f001 f977 	bl	800471c <null_ptr_check>
 800342e:	4603      	mov	r3, r0
 8003430:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8003432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d141      	bne.n	80034be <bmp3_set_sensor_settings+0xa0>
    {
        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	2006      	movs	r0, #6
 800343e:	f001 f956 	bl	80046ee <are_settings_changed>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <bmp3_set_sensor_settings+0x36>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, dev);
 8003448:	6839      	ldr	r1, [r7, #0]
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa77 	bl	800393e <set_pwr_ctrl_settings>
 8003450:	4603      	mov	r3, r0
 8003452:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	20f0      	movs	r0, #240	; 0xf0
 8003458:	f001 f949 	bl	80046ee <are_settings_changed>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <bmp3_set_sensor_settings+0x58>
 8003462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <bmp3_set_sensor_settings+0x58>
        {
            /* Set the over sampling, ODR and filter settings*/
            rslt = set_odr_filter_settings(desired_settings, dev);
 800346a:	6839      	ldr	r1, [r7, #0]
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fab5 	bl	80039dc <set_odr_filter_settings>
 8003472:	4603      	mov	r3, r0
 8003474:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 800347c:	f001 f937 	bl	80046ee <are_settings_changed>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <bmp3_set_sensor_settings+0x7c>
 8003486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d105      	bne.n	800349a <bmp3_set_sensor_settings+0x7c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, dev);
 800348e:	6839      	ldr	r1, [r7, #0]
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fb11 	bl	8003ab8 <set_int_ctrl_settings>
 8003496:	4603      	mov	r3, r0
 8003498:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80034a0:	f001 f925 	bl	80046ee <are_settings_changed>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <bmp3_set_sensor_settings+0xa0>
 80034aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <bmp3_set_sensor_settings+0xa0>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, dev);
 80034b2:	6839      	ldr	r1, [r7, #0]
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fb78 	bl	8003baa <set_advance_settings>
 80034ba:	4603      	mov	r3, r0
 80034bc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80034be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 80034d2:	237e      	movs	r3, #126	; 0x7e
 80034d4:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 80034d6:	23b6      	movs	r3, #182	; 0xb6
 80034d8:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f001 f91e 	bl	800471c <null_ptr_check>
 80034e0:	4603      	mov	r3, r0
 80034e2:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 80034e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d140      	bne.n	800356e <bmp3_soft_reset+0xa4>
    {
        /* Check for command ready status */
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 80034ec:	f107 010c 	add.w	r1, r7, #12
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	2003      	movs	r0, #3
 80034f6:	f7ff fe71 	bl	80031dc <bmp3_get_regs>
 80034fa:	4603      	mov	r3, r0
 80034fc:	73fb      	strb	r3, [r7, #15]

        /* Device is ready to accept new command */
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 80034fe:	7b3b      	ldrb	r3, [r7, #12]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d02e      	beq.n	8003566 <bmp3_soft_reset+0x9c>
 8003508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d12a      	bne.n	8003566 <bmp3_soft_reset+0x9c>
        {
            /* Write the soft reset command in the sensor */
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003510:	f107 010d 	add.w	r1, r7, #13
 8003514:	f107 000e 	add.w	r0, r7, #14
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f7ff feee 	bl	80032fc <bmp3_set_regs>
 8003520:	4603      	mov	r3, r0
 8003522:	73fb      	strb	r3, [r7, #15]

            /* Proceed if everything is fine until now */
            if (rslt == BMP3_OK)
 8003524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d11f      	bne.n	800356c <bmp3_soft_reset+0xa2>
            {
                /* Wait for 2 ms */
                dev->delay_us(2000, dev->intf_ptr);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6852      	ldr	r2, [r2, #4]
 8003534:	4611      	mov	r1, r2
 8003536:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800353a:	4798      	blx	r3

                /* Read for command error status */
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800353c:	f107 010b 	add.w	r1, r7, #11
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	2002      	movs	r0, #2
 8003546:	f7ff fe49 	bl	80031dc <bmp3_get_regs>
 800354a:	4603      	mov	r3, r0
 800354c:	73fb      	strb	r3, [r7, #15]

                /* check for command error status */
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 800354e:	7afb      	ldrb	r3, [r7, #11]
 8003550:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003554:	2b00      	cmp	r3, #0
 8003556:	d103      	bne.n	8003560 <bmp3_soft_reset+0x96>
 8003558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <bmp3_soft_reset+0xa2>
                {
                    /* Command not written hence return
                     * error */
                    rslt = BMP3_E_CMD_EXEC_FAILED;
 8003560:	23fc      	movs	r3, #252	; 0xfc
 8003562:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP3_OK)
 8003564:	e002      	b.n	800356c <bmp3_soft_reset+0xa2>
                }
            }
        }
        else
        {
            rslt = BMP3_E_CMD_EXEC_FAILED;
 8003566:	23fc      	movs	r3, #252	; 0xfc
 8003568:	73fb      	strb	r3, [r7, #15]
 800356a:	e000      	b.n	800356e <bmp3_soft_reset+0xa4>
            if (rslt == BMP3_OK)
 800356c:	bf00      	nop
        }
    }

    return rslt;
 800356e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_dev *dev)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f001 f8ca 	bl	800471c <null_ptr_check>
 8003588:	4603      	mov	r3, r0
 800358a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800358c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d130      	bne.n	80035f6 <bmp3_set_op_mode+0x7c>
    {
        uint8_t curr_mode = dev->settings.op_mode;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800359a:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 800359c:	f107 030d 	add.w	r3, r7, #13
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f82d 	bl	8003602 <bmp3_get_op_mode>
 80035a8:	4603      	mov	r3, r0
 80035aa:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if (last_set_mode != BMP3_MODE_SLEEP)
 80035ac:	7b7b      	ldrb	r3, [r7, #13]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <bmp3_set_op_mode+0x52>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f8fa 	bl	80037ac <put_device_to_sleep>
 80035b8:	4603      	mov	r3, r0
 80035ba:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6852      	ldr	r2, [r2, #4]
 80035c4:	4611      	mov	r1, r2
 80035c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80035ca:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 80035cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d110      	bne.n	80035f6 <bmp3_set_op_mode+0x7c>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 80035d4:	7bbb      	ldrb	r3, [r7, #14]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d105      	bne.n	80035e6 <bmp3_set_op_mode+0x6c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(dev);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f880 	bl	80036e0 <set_normal_mode>
 80035e0:	4603      	mov	r3, r0
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	e007      	b.n	80035f6 <bmp3_set_op_mode+0x7c>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 80035e6:	7bbb      	ldrb	r3, [r7, #14]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d104      	bne.n	80035f6 <bmp3_set_op_mode+0x7c>
            {
                /* Set forced mode */
                rslt = write_power_mode(dev);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f8a7 	bl	8003740 <write_power_mode>
 80035f2:	4603      	mov	r3, r0
 80035f4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80035f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800360c:	6838      	ldr	r0, [r7, #0]
 800360e:	f001 f885 	bl	800471c <null_ptr_check>
 8003612:	4603      	mov	r3, r0
 8003614:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (op_mode != NULL))
 8003616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d114      	bne.n	8003648 <bmp3_get_op_mode+0x46>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d011      	beq.n	8003648 <bmp3_get_op_mode+0x46>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2201      	movs	r2, #1
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	201b      	movs	r0, #27
 800362c:	f7ff fdd6 	bl	80031dc <bmp3_get_regs>
 8003630:	4603      	mov	r3, r0
 8003632:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	111b      	asrs	r3, r3, #4
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	b2da      	uxtb	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	e001      	b.n	800364c <bmp3_get_op_mode+0x4a>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003648:	23ff      	movs	r3, #255	; 0xff
 800364a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800364c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	2300      	movs	r3, #0
 800366c:	83bb      	strh	r3, [r7, #28]
    struct bmp3_uncomp_data uncomp_data = { 0 };
 800366e:	f107 0310 	add.w	r3, r7, #16
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f001 f84f 	bl	800471c <null_ptr_check>
 800367e:	4603      	mov	r3, r0
 8003680:	77fb      	strb	r3, [r7, #31]

    if ((rslt == BMP3_OK) && (comp_data != NULL))
 8003682:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d122      	bne.n	80036d0 <bmp3_get_sensor_data+0x78>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01f      	beq.n	80036d0 <bmp3_get_sensor_data+0x78>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 8003690:	f107 0118 	add.w	r1, r7, #24
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2206      	movs	r2, #6
 8003698:	2004      	movs	r0, #4
 800369a:	f7ff fd9f 	bl	80031dc <bmp3_get_regs>
 800369e:	4603      	mov	r3, r0
 80036a0:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMP3_OK)
 80036a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d114      	bne.n	80036d4 <bmp3_get_sensor_data+0x7c>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 80036aa:	f107 0210 	add.w	r2, r7, #16
 80036ae:	f107 0318 	add.w	r3, r7, #24
 80036b2:	4611      	mov	r1, r2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fc66 	bl	8003f86 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3318      	adds	r3, #24
 80036be:	f107 0110 	add.w	r1, r7, #16
 80036c2:	7bf8      	ldrb	r0, [r7, #15]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	f000 fc91 	bl	8003fec <compensate_data>
 80036ca:	4603      	mov	r3, r0
 80036cc:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMP3_OK)
 80036ce:	e001      	b.n	80036d4 <bmp3_get_sensor_data+0x7c>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80036d0:	23ff      	movs	r3, #255	; 0xff
 80036d2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80036d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_dev *dev)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(dev);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f887 	bl	80037fc <validate_normal_mode_settings>
 80036ee:	4603      	mov	r3, r0
 80036f0:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 80036f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11c      	bne.n	8003734 <set_normal_mode+0x54>
    {
        rslt = write_power_mode(dev);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f820 	bl	8003740 <write_power_mode>
 8003700:	4603      	mov	r3, r0
 8003702:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8003704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d113      	bne.n	8003734 <set_normal_mode+0x54>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800370c:	f107 010e 	add.w	r1, r7, #14
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	2002      	movs	r0, #2
 8003716:	f7ff fd61 	bl	80031dc <bmp3_get_regs>
 800371a:	4603      	mov	r3, r0
 800371c:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800371e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <set_normal_mode+0x54>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8003726:	7bbb      	ldrb	r3, [r7, #14]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <set_normal_mode+0x54>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8003730:	23fb      	movs	r3, #251	; 0xfb
 8003732:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003734:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(struct bmp3_dev *dev)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003748:	231b      	movs	r3, #27
 800374a:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = dev->settings.op_mode;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003752:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 8003754:	7b78      	ldrb	r0, [r7, #13]
 8003756:	f107 010c 	add.w	r1, r7, #12
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f7ff fd3d 	bl	80031dc <bmp3_get_regs>
 8003762:	4603      	mov	r3, r0
 8003764:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 8003766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d118      	bne.n	80037a0 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 800376e:	7b3b      	ldrb	r3, [r7, #12]
 8003770:	b25b      	sxtb	r3, r3
 8003772:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003776:	b25a      	sxtb	r2, r3
 8003778:	7bbb      	ldrb	r3, [r7, #14]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	b25b      	sxtb	r3, r3
 800377e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003782:	b25b      	sxtb	r3, r3
 8003784:	4313      	orrs	r3, r2
 8003786:	b25b      	sxtb	r3, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800378c:	f107 010c 	add.w	r1, r7, #12
 8003790:	f107 000d 	add.w	r0, r7, #13
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f7ff fdb0 	bl	80032fc <bmp3_set_regs>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80037a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80037b4:	231b      	movs	r3, #27
 80037b6:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 80037b8:	f107 010d 	add.w	r1, r7, #13
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	201b      	movs	r0, #27
 80037c2:	f7ff fd0b 	bl	80031dc <bmp3_get_regs>
 80037c6:	4603      	mov	r3, r0
 80037c8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80037ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10e      	bne.n	80037f0 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 80037d2:	7b7b      	ldrb	r3, [r7, #13]
 80037d4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80037dc:	f107 010d 	add.w	r1, r7, #13
 80037e0:	f107 000e 	add.w	r0, r7, #14
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f7ff fd88 	bl	80032fc <bmp3_set_regs>
 80037ec:	4603      	mov	r3, r0
 80037ee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80037f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_dev *dev)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = get_odr_filter_settings(dev);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fa22 	bl	8003c4e <get_odr_filter_settings>
 800380a:	4603      	mov	r3, r0
 800380c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800380e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d104      	bne.n	8003820 <validate_normal_mode_settings+0x24>
    {
        rslt = validate_osr_and_odr_settings(dev);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa36 	bl	8003c88 <validate_osr_and_odr_settings>
 800381c:	4603      	mov	r3, r0
 800381e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003820:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8003834:	2331      	movs	r3, #49	; 0x31
 8003836:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 8003838:	2300      	movs	r3, #0
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	f107 030c 	add.w	r3, r7, #12
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 800384c:	f107 0108 	add.w	r1, r7, #8
 8003850:	7ff8      	ldrb	r0, [r7, #31]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2215      	movs	r2, #21
 8003856:	f7ff fcc1 	bl	80031dc <bmp3_get_regs>
 800385a:	4603      	mov	r3, r0
 800385c:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 800385e:	f107 0308 	add.w	r3, r7, #8
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fbf9 	bl	800405c <parse_calib_data>

    return rslt;
 800386a:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8003876:	b480      	push	{r7}
 8003878:	b087      	sub	sp, #28
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8003884:	2301      	movs	r3, #1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	e015      	b.n	80038b6 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	441a      	add	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	3b01      	subs	r3, #1
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	440b      	add	r3, r1
 800389a:	7812      	ldrb	r2, [r2, #0]
 800389c:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	441a      	add	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	440b      	add	r3, r1
 80038ac:	7812      	ldrb	r2, [r2, #0]
 80038ae:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	3301      	adds	r3, #1
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d3e5      	bcc.n	800388a <interleave_reg_addr+0x14>
    }
}
 80038be:	bf00      	nop
 80038c0:	bf00      	nop
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b085      	sub	sp, #20
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	10db      	asrs	r3, r3, #3
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	3301      	adds	r3, #1
 8003904:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4413      	add	r3, r2
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	b2da      	uxtb	r2, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	3302      	adds	r3, #2
 800391c:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	105b      	asrs	r3, r3, #1
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	b2da      	uxtb	r2, r3
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	709a      	strb	r2, [r3, #2]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr

0800393e <set_pwr_ctrl_settings>:
/*!
 * @brief This API sets the pressure enable and temperature enable
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003948:	231b      	movs	r3, #27
 800394a:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800394c:	7bb8      	ldrb	r0, [r7, #14]
 800394e:	f107 010d 	add.w	r1, r7, #13
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2201      	movs	r2, #1
 8003956:	f7ff fc41 	bl	80031dc <bmp3_get_regs>
 800395a:	4603      	mov	r3, r0
 800395c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800395e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d134      	bne.n	80039d0 <set_pwr_ctrl_settings+0x92>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00f      	beq.n	8003990 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
 8003970:	7b7b      	ldrb	r3, [r7, #13]
 8003972:	b25b      	sxtb	r3, r3
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	b25a      	sxtb	r2, r3
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003980:	b25b      	sxtb	r3, r3
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	b25b      	sxtb	r3, r3
 8003988:	4313      	orrs	r3, r2
 800398a:	b25b      	sxtb	r3, r3
 800398c:	b2db      	uxtb	r3, r3
 800398e:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d010      	beq.n	80039bc <set_pwr_ctrl_settings+0x7e>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
 800399a:	7b7b      	ldrb	r3, [r7, #13]
 800399c:	b25b      	sxtb	r3, r3
 800399e:	f023 0302 	bic.w	r3, r3, #2
 80039a2:	b25a      	sxtb	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	b25b      	sxtb	r3, r3
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	b25b      	sxtb	r3, r3
 80039b4:	4313      	orrs	r3, r2
 80039b6:	b25b      	sxtb	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	737b      	strb	r3, [r7, #13]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80039bc:	f107 010d 	add.w	r1, r7, #13
 80039c0:	f107 000e 	add.w	r0, r7, #14
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f7ff fc98 	bl	80032fc <bmp3_set_regs>
 80039cc:	4603      	mov	r3, r0
 80039ce:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80039d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 80039e6:	4b33      	ldr	r3, [pc, #204]	; (8003ab4 <set_odr_filter_settings+0xd8>)
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	82bb      	strh	r3, [r7, #20]
 80039ec:	2300      	movs	r3, #0
 80039ee:	75bb      	strb	r3, [r7, #22]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	73fb      	strb	r3, [r7, #15]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 80039f4:	f107 0110 	add.w	r1, r7, #16
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2204      	movs	r2, #4
 80039fc:	201c      	movs	r0, #28
 80039fe:	f7ff fbed 	bl	80031dc <bmp3_get_regs>
 8003a02:	4603      	mov	r3, r0
 8003a04:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8003a06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d14b      	bne.n	8003aa6 <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	2030      	movs	r0, #48	; 0x30
 8003a12:	f000 fe6c 	bl	80046ee <are_settings_changed>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <set_odr_filter_settings+0x58>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, dev);
 8003a1c:	f107 000f 	add.w	r0, r7, #15
 8003a20:	f107 0210 	add.w	r2, r7, #16
 8003a24:	f107 0114 	add.w	r1, r7, #20
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f9e4 	bl	8003dfc <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	2080      	movs	r0, #128	; 0x80
 8003a38:	f000 fe59 	bl	80046ee <are_settings_changed>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d008      	beq.n	8003a54 <set_odr_filter_settings+0x78>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, dev);
 8003a42:	f107 020f 	add.w	r2, r7, #15
 8003a46:	f107 0110 	add.w	r1, r7, #16
 8003a4a:	f107 0014 	add.w	r0, r7, #20
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	f000 fa2b 	bl	8003eaa <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	2040      	movs	r0, #64	; 0x40
 8003a58:	f000 fe49 	bl	80046ee <are_settings_changed>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <set_odr_filter_settings+0x98>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, dev);
 8003a62:	f107 020f 	add.w	r2, r7, #15
 8003a66:	f107 0110 	add.w	r1, r7, #16
 8003a6a:	f107 0014 	add.w	r0, r7, #20
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	f000 fa54 	bl	8003f1c <fill_filter_data>
        }

        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d104      	bne.n	8003a88 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(dev);
 8003a7e:	6838      	ldr	r0, [r7, #0]
 8003a80:	f000 f902 	bl	8003c88 <validate_osr_and_odr_settings>
 8003a84:	4603      	mov	r3, r0
 8003a86:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMP3_OK)
 8003a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	461a      	mov	r2, r3
 8003a94:	f107 0110 	add.w	r1, r7, #16
 8003a98:	f107 0014 	add.w	r0, r7, #20
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	f7ff fc2d 	bl	80032fc <bmp3_set_regs>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8003aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	08021100 	.word	0x08021100

08003ab8 <set_int_ctrl_settings>:
 * @brief This internal API sets the interrupt control (output mode, level,
 * latch and data ready) settings of the sensor based on the settings
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 8003ac2:	2319      	movs	r3, #25
 8003ac4:	737b      	strb	r3, [r7, #13]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8003ac6:	7b78      	ldrb	r0, [r7, #13]
 8003ac8:	f107 010e 	add.w	r1, r7, #14
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f7ff fb84 	bl	80031dc <bmp3_get_regs>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d15e      	bne.n	8003b9e <set_int_ctrl_settings+0xe6>
    {
        int_settings = dev->settings.int_settings;
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	f107 0308 	add.w	r3, r7, #8
 8003ae6:	32b7      	adds	r2, #183	; 0xb7
 8003ae8:	6810      	ldr	r0, [r2, #0]
 8003aea:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <set_int_ctrl_settings+0x5a>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8003af6:	7bbb      	ldrb	r3, [r7, #14]
 8003af8:	b25b      	sxtb	r3, r3
 8003afa:	f023 0301 	bic.w	r3, r3, #1
 8003afe:	b25a      	sxtb	r2, r3
 8003b00:	7a3b      	ldrb	r3, [r7, #8]
 8003b02:	b25b      	sxtb	r3, r3
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	b25b      	sxtb	r3, r3
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	b25b      	sxtb	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <set_int_ctrl_settings+0x82>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8003b1c:	7bbb      	ldrb	r3, [r7, #14]
 8003b1e:	b25b      	sxtb	r3, r3
 8003b20:	f023 0302 	bic.w	r3, r3, #2
 8003b24:	b25a      	sxtb	r2, r3
 8003b26:	7a7b      	ldrb	r3, [r7, #9]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	b25b      	sxtb	r3, r3
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	b25b      	sxtb	r3, r3
 8003b32:	4313      	orrs	r3, r2
 8003b34:	b25b      	sxtb	r3, r3
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00e      	beq.n	8003b62 <set_int_ctrl_settings+0xaa>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8003b44:	7bbb      	ldrb	r3, [r7, #14]
 8003b46:	b25b      	sxtb	r3, r3
 8003b48:	f023 0304 	bic.w	r3, r3, #4
 8003b4c:	b25a      	sxtb	r2, r3
 8003b4e:	7abb      	ldrb	r3, [r7, #10]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	b25b      	sxtb	r3, r3
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	b25b      	sxtb	r3, r3
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	b25b      	sxtb	r3, r3
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00e      	beq.n	8003b8a <set_int_ctrl_settings+0xd2>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 8003b6c:	7bbb      	ldrb	r3, [r7, #14]
 8003b6e:	b25b      	sxtb	r3, r3
 8003b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b74:	b25a      	sxtb	r2, r3
 8003b76:	7afb      	ldrb	r3, [r7, #11]
 8003b78:	019b      	lsls	r3, r3, #6
 8003b7a:	b25b      	sxtb	r3, r3
 8003b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b80:	b25b      	sxtb	r3, r3
 8003b82:	4313      	orrs	r3, r2
 8003b84:	b25b      	sxtb	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	73bb      	strb	r3, [r7, #14]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8003b8a:	f107 010e 	add.w	r1, r7, #14
 8003b8e:	f107 000d 	add.w	r0, r7, #13
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f7ff fbb1 	bl	80032fc <bmp3_set_regs>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <set_advance_settings>:
/*!
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	f107 0308 	add.w	r3, r7, #8
 8003bba:	32bb      	adds	r2, #187	; 0xbb
 8003bbc:	8812      	ldrh	r2, [r2, #0]
 8003bbe:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8003bc0:	231a      	movs	r3, #26
 8003bc2:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8003bc4:	7bb8      	ldrb	r0, [r7, #14]
 8003bc6:	f107 010d 	add.w	r1, r7, #13
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f7ff fb05 	bl	80031dc <bmp3_get_regs>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d131      	bne.n	8003c42 <set_advance_settings+0x98>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00e      	beq.n	8003c06 <set_advance_settings+0x5c>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8003be8:	7b7b      	ldrb	r3, [r7, #13]
 8003bea:	b25b      	sxtb	r3, r3
 8003bec:	f023 0302 	bic.w	r3, r3, #2
 8003bf0:	b25a      	sxtb	r2, r3
 8003bf2:	7a3b      	ldrb	r3, [r7, #8]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	b25b      	sxtb	r3, r3
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	b25b      	sxtb	r3, r3
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	b25b      	sxtb	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00e      	beq.n	8003c2e <set_advance_settings+0x84>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8003c10:	7b7b      	ldrb	r3, [r7, #13]
 8003c12:	b25b      	sxtb	r3, r3
 8003c14:	f023 0304 	bic.w	r3, r3, #4
 8003c18:	b25a      	sxtb	r2, r3
 8003c1a:	7a7b      	ldrb	r3, [r7, #9]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	b25b      	sxtb	r3, r3
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	b25b      	sxtb	r3, r3
 8003c26:	4313      	orrs	r3, r2
 8003c28:	b25b      	sxtb	r3, r3
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	737b      	strb	r3, [r7, #13]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8003c2e:	f107 010d 	add.w	r1, r7, #13
 8003c32:	f107 000e 	add.w	r0, r7, #14
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f7ff fb5f 	bl	80032fc <bmp3_set_regs>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_dev *dev)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8003c56:	f107 0108 	add.w	r1, r7, #8
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	201c      	movs	r0, #28
 8003c60:	f7ff fabc 	bl	80031dc <bmp3_get_regs>
 8003c64:	4603      	mov	r3, r0
 8003c66:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &dev->settings.odr_filter);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 8003c6e:	f107 0308 	add.w	r3, r7, #8
 8003c72:	4611      	mov	r1, r2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fe28 	bl	80038ca <parse_odr_filter_settings>

    return rslt;
 8003c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_dev *dev)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b098      	sub	sp, #96	; 0x60
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8003c90:	23ea      	movs	r3, #234	; 0xea
 8003c92:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8003c98:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <validate_osr_and_odr_settings+0x84>)
 8003c9a:	f107 030c 	add.w	r3, r7, #12
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	2248      	movs	r2, #72	; 0x48
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f01d f9dc 	bl	8021060 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (dev->settings.press_en)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d006      	beq.n	8003cc0 <validate_osr_and_odr_settings+0x38>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(dev);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f842 	bl	8003d3c <calculate_press_meas_time>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cbc:	4413      	add	r3, r2
 8003cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (dev->settings.temp_en)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d006      	beq.n	8003cd8 <validate_osr_and_odr_settings+0x50>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(dev);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f866 	bl	8003d9c <calculate_temp_meas_time>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cd4:	4413      	add	r3, r2
 8003cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8003cd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cdc:	4413      	add	r3, r2
 8003cde:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	3360      	adds	r3, #96	; 0x60
 8003cea:	443b      	add	r3, r7
 8003cec:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003cf4:	f000 f80c 	bl	8003d10 <verify_meas_time_and_odr_duration>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8003cfe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3760      	adds	r7, #96	; 0x60
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	08021104 	.word	0x08021104

08003d10 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d202      	bcs.n	8003d28 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	73fb      	strb	r3, [r7, #15]
 8003d26:	e001      	b.n	8003d2c <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8003d28:	23fd      	movs	r3, #253	; 0xfd
 8003d2a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr
	...

08003d3c <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_dev *dev)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	f107 030c 	add.w	r3, r7, #12
 8003d4a:	32b3      	adds	r2, #179	; 0xb3
 8003d4c:	6810      	ldr	r0, [r2, #0]
 8003d4e:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8003d5c:	7b3b      	ldrb	r3, [r7, #12]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d64:	f000 fca2 	bl	80046ac <pow_bmp3>
 8003d68:	6178      	str	r0, [r7, #20]
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8003d6a:	490a      	ldr	r1, [pc, #40]	; (8003d94 <calculate_press_meas_time+0x58>)
 8003d6c:	6978      	ldr	r0, [r7, #20]
 8003d6e:	f7fc fffd 	bl	8000d6c <__aeabi_fmul>
 8003d72:	4603      	mov	r3, r0
 8003d74:	4908      	ldr	r1, [pc, #32]	; (8003d98 <calculate_press_meas_time+0x5c>)
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fef0 	bl	8000b5c <__addsf3>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fd f9e0 	bl	8001144 <__aeabi_f2uiz>
 8003d84:	4603      	mov	r3, r0
 8003d86:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8003d88:	693b      	ldr	r3, [r7, #16]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	44fa0000 	.word	0x44fa0000
 8003d98:	43c40000 	.word	0x43c40000

08003d9c <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_dev *dev)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	f107 030c 	add.w	r3, r7, #12
 8003daa:	32b3      	adds	r2, #179	; 0xb3
 8003dac:	6810      	ldr	r0, [r2, #0]
 8003dae:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003db8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8003dbc:	7b7b      	ldrb	r3, [r7, #13]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003dc4:	f000 fc72 	bl	80046ac <pow_bmp3>
 8003dc8:	6178      	str	r0, [r7, #20]
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8003dca:	490a      	ldr	r1, [pc, #40]	; (8003df4 <calculate_temp_meas_time+0x58>)
 8003dcc:	6978      	ldr	r0, [r7, #20]
 8003dce:	f7fc ffcd 	bl	8000d6c <__aeabi_fmul>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4908      	ldr	r1, [pc, #32]	; (8003df8 <calculate_temp_meas_time+0x5c>)
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fc fec0 	bl	8000b5c <__addsf3>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd f9b0 	bl	8001144 <__aeabi_f2uiz>
 8003de4:	4603      	mov	r3, r0
 8003de6:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8003de8:	693b      	ldr	r3, [r7, #16]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	44fa0000 	.word	0x44fa0000
 8003df8:	439c8000 	.word	0x439c8000

08003dfc <fill_osr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the over sampling settings for burst write operation.
 */
static void fill_osr_data(uint32_t settings, uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 8003e0a:	6a3a      	ldr	r2, [r7, #32]
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	32b3      	adds	r2, #179	; 0xb3
 8003e12:	6810      	ldr	r0, [r2, #0]
 8003e14:	6018      	str	r0, [r3, #0]

    if (settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d03f      	beq.n	8003ea0 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (settings & BMP3_SEL_PRESS_OS)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d013      	beq.n	8003e52 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b25b      	sxtb	r3, r3
 8003e30:	f023 0307 	bic.w	r3, r3, #7
 8003e34:	b25a      	sxtb	r2, r3
 8003e36:	7d3b      	ldrb	r3, [r7, #20]
 8003e38:	b25b      	sxtb	r3, r3
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	b25b      	sxtb	r3, r3
 8003e40:	4313      	orrs	r3, r2
 8003e42:	b25a      	sxtb	r2, r3
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	440b      	add	r3, r1
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (settings & BMP3_SEL_TEMP_OS)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d014      	beq.n	8003e86 <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	b25b      	sxtb	r3, r3
 8003e62:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003e66:	b25a      	sxtb	r2, r3
 8003e68:	7d7b      	ldrb	r3, [r7, #21]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	b25b      	sxtb	r3, r3
 8003e6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e72:	b25b      	sxtb	r3, r3
 8003e74:	4313      	orrs	r3, r2
 8003e76:	b25a      	sxtb	r2, r3
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	440b      	add	r3, r1
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4413      	add	r3, r2
 8003e90:	221c      	movs	r2, #28
 8003e92:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	701a      	strb	r2, [r3, #0]
    }
}
 8003ea0:	bf00      	nop
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_dev *dev)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b087      	sub	sp, #28
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &dev->settings.odr_filter;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	33b3      	adds	r3, #179	; 0xb3
 8003ebc:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	78db      	ldrb	r3, [r3, #3]
 8003ec2:	2b11      	cmp	r3, #17
 8003ec4:	d902      	bls.n	8003ecc <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2211      	movs	r2, #17
 8003eca:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	b25b      	sxtb	r3, r3
 8003ed4:	f023 031f 	bic.w	r3, r3, #31
 8003ed8:	b25a      	sxtb	r2, r3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	78db      	ldrb	r3, [r3, #3]
 8003ede:	b25b      	sxtb	r3, r3
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	b25b      	sxtb	r3, r3
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	b25a      	sxtb	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	440b      	add	r3, r1
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4413      	add	r3, r2
 8003f02:	221d      	movs	r2, #29
 8003f04:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	701a      	strb	r2, [r3, #0]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	f107 0314 	add.w	r3, r7, #20
 8003f30:	32b3      	adds	r2, #179	; 0xb3
 8003f32:	6810      	ldr	r0, [r2, #0]
 8003f34:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	3303      	adds	r3, #3
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	b25b      	sxtb	r3, r3
 8003f3e:	f023 030e 	bic.w	r3, r3, #14
 8003f42:	b25a      	sxtb	r2, r3
 8003f44:	7dbb      	ldrb	r3, [r7, #22]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	b25b      	sxtb	r3, r3
 8003f4a:	f003 030e 	and.w	r3, r3, #14
 8003f4e:	b25b      	sxtb	r3, r3
 8003f50:	4313      	orrs	r3, r2
 8003f52:	b25a      	sxtb	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	440b      	add	r3, r1
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	221f      	movs	r2, #31
 8003f6e:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	701a      	strb	r2, [r3, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b087      	sub	sp, #28
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	041b      	lsls	r3, r3, #16
 8003fa8:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3303      	adds	r3, #3
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3305      	adds	r3, #5
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d022      	beq.n	800404c <compensate_data+0x60>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01f      	beq.n	800404c <compensate_data+0x60>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01c      	beq.n	800404c <compensate_data+0x60>
    {
        /* If pressure or temperature component is selected */
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <compensate_data+0x42>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	68b8      	ldr	r0, [r7, #8]
 8004020:	f000 f9e4 	bl	80043ec <compensate_temperature>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (sensor_comp & BMP3_PRESS)
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00b      	beq.n	8004050 <compensate_data+0x64>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8004038:	6839      	ldr	r1, [r7, #0]
 800403a:	68b8      	ldr	r0, [r7, #8]
 800403c:	f000 fa19 	bl	8004472 <compensate_pressure>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp & BMP3_PRESS)
 800404a:	e001      	b.n	8004050 <compensate_data+0x64>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800404c:	23ff      	movs	r3, #255	; 0xff
 800404e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	3390      	adds	r3, #144	; 0x90
 800406a:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	3318      	adds	r3, #24
 8004070:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	4ba4      	ldr	r3, [pc, #656]	; (8004308 <parse_calib_data+0x2ac>)
 8004078:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3301      	adds	r3, #1
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	b21a      	sxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	b21b      	sxth	r3, r3
 800408c:	4313      	orrs	r3, r2
 800408e:	b21b      	sxth	r3, r3
 8004090:	b29a      	uxth	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc f9b6 	bl	800040c <__aeabi_ui2d>
 80040a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040a4:	f7fc fb56 	bl	8000754 <__aeabi_ddiv>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	6939      	ldr	r1, [r7, #16]
 80040ae:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3303      	adds	r3, #3
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	b21a      	sxth	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3302      	adds	r3, #2
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	b21b      	sxth	r3, r3
 80040c4:	4313      	orrs	r3, r2
 80040c6:	b21b      	sxth	r3, r3
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	4b8e      	ldr	r3, [pc, #568]	; (800430c <parse_calib_data+0x2b0>)
 80040d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	885b      	ldrh	r3, [r3, #2]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fc f995 	bl	800040c <__aeabi_ui2d>
 80040e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040e6:	f7fc fb35 	bl	8000754 <__aeabi_ddiv>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	6939      	ldr	r1, [r7, #16]
 80040f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	b25a      	sxtb	r2, r3
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	4b82      	ldr	r3, [pc, #520]	; (8004310 <parse_calib_data+0x2b4>)
 8004106:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8004110:	4618      	mov	r0, r3
 8004112:	f7fc f98b 	bl	800042c <__aeabi_i2d>
 8004116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800411a:	f7fc fb1b 	bl	8000754 <__aeabi_ddiv>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	6939      	ldr	r1, [r7, #16]
 8004124:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3306      	adds	r3, #6
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	b21a      	sxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3305      	adds	r3, #5
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	b21b      	sxth	r3, r3
 800413a:	4313      	orrs	r3, r2
 800413c:	b21a      	sxth	r2, r3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	4b73      	ldr	r3, [pc, #460]	; (8004314 <parse_calib_data+0x2b8>)
 8004148:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004152:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004156:	4618      	mov	r0, r3
 8004158:	f7fc f968 	bl	800042c <__aeabi_i2d>
 800415c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004160:	f7fc faf8 	bl	8000754 <__aeabi_ddiv>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	6939      	ldr	r1, [r7, #16]
 800416a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3308      	adds	r3, #8
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	b21a      	sxth	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3307      	adds	r3, #7
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	b21b      	sxth	r3, r3
 8004180:	4313      	orrs	r3, r2
 8004182:	b21a      	sxth	r2, r3
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	4b62      	ldr	r3, [pc, #392]	; (8004318 <parse_calib_data+0x2bc>)
 800418e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004198:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800419c:	4618      	mov	r0, r3
 800419e:	f7fc f945 	bl	800042c <__aeabi_i2d>
 80041a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041a6:	f7fc fad5 	bl	8000754 <__aeabi_ddiv>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	6939      	ldr	r1, [r7, #16]
 80041b0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3309      	adds	r3, #9
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	b25a      	sxtb	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	4b55      	ldr	r3, [pc, #340]	; (800431c <parse_calib_data+0x2c0>)
 80041c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fc f92b 	bl	800042c <__aeabi_i2d>
 80041d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041da:	f7fc fabb 	bl	8000754 <__aeabi_ddiv>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	6939      	ldr	r1, [r7, #16]
 80041e4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	330a      	adds	r3, #10
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b25a      	sxtb	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	4b49      	ldr	r3, [pc, #292]	; (8004320 <parse_calib_data+0x2c4>)
 80041fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8004204:	4618      	mov	r0, r3
 8004206:	f7fc f911 	bl	800042c <__aeabi_i2d>
 800420a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800420e:	f7fc faa1 	bl	8000754 <__aeabi_ddiv>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	6939      	ldr	r1, [r7, #16]
 8004218:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	330c      	adds	r3, #12
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	b21a      	sxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	330b      	adds	r3, #11
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	b21b      	sxth	r3, r3
 800422e:	4313      	orrs	r3, r2
 8004230:	b21b      	sxth	r3, r3
 8004232:	b29a      	uxth	r2, r3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004240:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	899b      	ldrh	r3, [r3, #12]
 8004248:	4618      	mov	r0, r3
 800424a:	f7fc f8df 	bl	800040c <__aeabi_ui2d>
 800424e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004252:	f7fc fa7f 	bl	8000754 <__aeabi_ddiv>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	6939      	ldr	r1, [r7, #16]
 800425c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	330e      	adds	r3, #14
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	b21a      	sxth	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	330d      	adds	r3, #13
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	b21b      	sxth	r3, r3
 8004272:	4313      	orrs	r3, r2
 8004274:	b21b      	sxth	r3, r3
 8004276:	b29a      	uxth	r2, r3
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	4b28      	ldr	r3, [pc, #160]	; (8004324 <parse_calib_data+0x2c8>)
 8004282:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	89db      	ldrh	r3, [r3, #14]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fc f8be 	bl	800040c <__aeabi_ui2d>
 8004290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004294:	f7fc fa5e 	bl	8000754 <__aeabi_ddiv>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	6939      	ldr	r1, [r7, #16]
 800429e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	330f      	adds	r3, #15
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b25a      	sxtb	r2, r3
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <parse_calib_data+0x2cc>)
 80042b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fc f8b4 	bl	800042c <__aeabi_i2d>
 80042c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042c8:	f7fc fa44 	bl	8000754 <__aeabi_ddiv>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	6939      	ldr	r1, [r7, #16]
 80042d2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3310      	adds	r3, #16
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	b25a      	sxtb	r2, r3
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	4b11      	ldr	r3, [pc, #68]	; (800432c <parse_calib_data+0x2d0>)
 80042e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fc f89a 	bl	800042c <__aeabi_i2d>
 80042f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042fc:	f7fc fa2a 	bl	8000754 <__aeabi_ddiv>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	6939      	ldr	r1, [r7, #16]
 8004306:	e013      	b.n	8004330 <parse_calib_data+0x2d4>
 8004308:	3f700000 	.word	0x3f700000
 800430c:	41d00000 	.word	0x41d00000
 8004310:	42f00000 	.word	0x42f00000
 8004314:	41300000 	.word	0x41300000
 8004318:	41c00000 	.word	0x41c00000
 800431c:	41f00000 	.word	0x41f00000
 8004320:	42400000 	.word	0x42400000
 8004324:	40500000 	.word	0x40500000
 8004328:	40700000 	.word	0x40700000
 800432c:	40e00000 	.word	0x40e00000
 8004330:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3312      	adds	r3, #18
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	b21a      	sxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3311      	adds	r3, #17
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	b21b      	sxth	r3, r3
 8004346:	4313      	orrs	r3, r2
 8004348:	b21a      	sxth	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <parse_calib_data+0x38c>)
 8004354:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fc f864 	bl	800042c <__aeabi_i2d>
 8004364:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004368:	f7fc f9f4 	bl	8000754 <__aeabi_ddiv>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	6939      	ldr	r1, [r7, #16]
 8004372:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3313      	adds	r3, #19
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	b25a      	sxtb	r2, r3
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <parse_calib_data+0x38c>)
 8004388:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8004392:	4618      	mov	r0, r3
 8004394:	f7fc f84a 	bl	800042c <__aeabi_i2d>
 8004398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800439c:	f7fc f9da 	bl	8000754 <__aeabi_ddiv>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	6939      	ldr	r1, [r7, #16]
 80043a6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3314      	adds	r3, #20
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b25a      	sxtb	r2, r3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80043be:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fc f82f 	bl	800042c <__aeabi_i2d>
 80043ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043d2:	f7fc f9bf 	bl	8000754 <__aeabi_ddiv>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	6939      	ldr	r1, [r7, #16]
 80043dc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80043e0:	bf00      	nop
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	42f00000 	.word	0x42f00000

080043ec <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 * for e.g. returns temperature 24.26 deg Celsius
 */
static double compensate_temperature(const struct bmp3_uncomp_data *uncomp_data, struct bmp3_calib_data *calib_data)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
    uint32_t uncomp_temp = uncomp_data->temperature;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	61fb      	str	r3, [r7, #28]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 80043fc:	69f8      	ldr	r0, [r7, #28]
 80043fe:	f7fc f805 	bl	800040c <__aeabi_ui2d>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	f7fb fec2 	bl	8000190 <__aeabi_dsub>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	e9c7 2304 	strd	r2, r3, [r7, #16]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800441a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800441e:	f7fc f86f 	bl	8000500 <__aeabi_dmul>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 800442a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800442e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004432:	f7fc f865 	bl	8000500 <__aeabi_dmul>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4610      	mov	r0, r2
 800443c:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8004444:	f7fc f85c 	bl	8000500 <__aeabi_dmul>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4610      	mov	r0, r2
 800444e:	4619      	mov	r1, r3
 8004450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004454:	f7fb fe9e 	bl	8000194 <__adddf3>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	6839      	ldr	r1, [r7, #0]
 800445e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    return calib_data->quantized_calib_data.t_lin;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
}
 8004468:	4610      	mov	r0, r2
 800446a:	4619      	mov	r1, r3
 800446c:	3720      	adds	r7, #32
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 * For e.g. returns pressure in Pascal p = 95305.295 which is 953.05295 hecto pascal
 */
static double compensate_pressure(const struct bmp3_uncomp_data *uncomp_data, const struct bmp3_calib_data *calib_data)
{
 8004472:	b5b0      	push	{r4, r5, r7, lr}
 8004474:	b092      	sub	sp, #72	; 0x48
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 8004480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004482:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004488:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800448c:	f7fc f838 	bl	8000500 <__aeabi_dmul>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8004498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800449a:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800449e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a0:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80044a4:	2202      	movs	r2, #2
 80044a6:	f000 f901 	bl	80046ac <pow_bmp3>
 80044aa:	4603      	mov	r3, r0
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fb ffcf 	bl	8000450 <__aeabi_f2d>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4620      	mov	r0, r4
 80044b8:	4629      	mov	r1, r5
 80044ba:	f7fc f821 	bl	8000500 <__aeabi_dmul>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80044c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c8:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80044cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ce:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80044d2:	2203      	movs	r2, #3
 80044d4:	f000 f8ea 	bl	80046ac <pow_bmp3>
 80044d8:	4603      	mov	r3, r0
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fb ffb8 	bl	8000450 <__aeabi_f2d>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4620      	mov	r0, r4
 80044e6:	4629      	mov	r1, r5
 80044e8:	f7fc f80a 	bl	8000500 <__aeabi_dmul>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 80044f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80044fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044fe:	f7fb fe49 	bl	8000194 <__adddf3>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4610      	mov	r0, r2
 8004508:	4619      	mov	r1, r3
 800450a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800450e:	f7fb fe41 	bl	8000194 <__adddf3>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800451a:	f7fb fe3b 	bl	8000194 <__adddf3>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 8004526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004528:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800452c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800452e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004532:	f7fb ffe5 	bl	8000500 <__aeabi_dmul>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 800453e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004540:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8004544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004546:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800454a:	2202      	movs	r2, #2
 800454c:	f000 f8ae 	bl	80046ac <pow_bmp3>
 8004550:	4603      	mov	r3, r0
 8004552:	4618      	mov	r0, r3
 8004554:	f7fb ff7c 	bl	8000450 <__aeabi_f2d>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4620      	mov	r0, r4
 800455e:	4629      	mov	r1, r5
 8004560:	f7fb ffce 	bl	8000500 <__aeabi_dmul>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 800456c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800456e:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8004572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004574:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004578:	2203      	movs	r2, #3
 800457a:	f000 f897 	bl	80046ac <pow_bmp3>
 800457e:	4603      	mov	r3, r0
 8004580:	4618      	mov	r0, r3
 8004582:	f7fb ff65 	bl	8000450 <__aeabi_f2d>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4620      	mov	r0, r4
 800458c:	4629      	mov	r1, r5
 800458e:	f7fb ffb7 	bl	8000500 <__aeabi_dmul>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fb ff34 	bl	800040c <__aeabi_ui2d>
 80045a4:	4604      	mov	r4, r0
 80045a6:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 80045a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045aa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80045ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045b2:	f7fb fdef 	bl	8000194 <__adddf3>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4610      	mov	r0, r2
 80045bc:	4619      	mov	r1, r3
 80045be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045c2:	f7fb fde7 	bl	8000194 <__adddf3>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4610      	mov	r0, r2
 80045cc:	4619      	mov	r1, r3
 80045ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045d2:	f7fb fddf 	bl	8000194 <__adddf3>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 80045da:	4620      	mov	r0, r4
 80045dc:	4629      	mov	r1, r5
 80045de:	f7fb ff8f 	bl	8000500 <__aeabi_dmul>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fb ff0c 	bl	800040c <__aeabi_ui2d>
 80045f4:	2202      	movs	r2, #2
 80045f6:	f000 f859 	bl	80046ac <pow_bmp3>
 80045fa:	4603      	mov	r3, r0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fb ff27 	bl	8000450 <__aeabi_f2d>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 800460a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800460c:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8004610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004612:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004618:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800461c:	f7fb ff70 	bl	8000500 <__aeabi_dmul>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4620      	mov	r0, r4
 8004626:	4629      	mov	r1, r5
 8004628:	f7fb fdb4 	bl	8000194 <__adddf3>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 8004634:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004638:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800463c:	f7fb ff60 	bl	8000500 <__aeabi_dmul>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f7fb fedd 	bl	800040c <__aeabi_ui2d>
 8004652:	2203      	movs	r2, #3
 8004654:	f000 f82a 	bl	80046ac <pow_bmp3>
 8004658:	4603      	mov	r3, r0
 800465a:	4618      	mov	r0, r3
 800465c:	f7fb fef8 	bl	8000450 <__aeabi_f2d>
 8004660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004662:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004666:	f7fb ff4b 	bl	8000500 <__aeabi_dmul>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004672:	f7fb fd8f 	bl	8000194 <__adddf3>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800467e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004682:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004686:	f7fb fd85 	bl	8000194 <__adddf3>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004692:	f7fb fd7f 	bl	8000194 <__adddf3>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return comp_press;
 800469e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80046a2:	4610      	mov	r0, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	3748      	adds	r7, #72	; 0x48
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bdb0      	pop	{r4, r5, r7, pc}

080046ac <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80046b6:	4613      	mov	r3, r2
 80046b8:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80046ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80046be:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80046c0:	e00d      	b.n	80046de <pow_bmp3+0x32>
    {
        pow_output = (float) base * pow_output;
 80046c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046c6:	f7fc f9f3 	bl	8000ab0 <__aeabi_d2f>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4619      	mov	r1, r3
 80046ce:	6978      	ldr	r0, [r7, #20]
 80046d0:	f7fc fb4c 	bl	8000d6c <__aeabi_fmul>
 80046d4:	4603      	mov	r3, r0
 80046d6:	617b      	str	r3, [r7, #20]
        power--;
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	3b01      	subs	r3, #1
 80046dc:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1ee      	bne.n	80046c2 <pow_bmp3+0x16>
    }

    return pow_output;
 80046e4:	697b      	ldr	r3, [r7, #20]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 80046f8:	2300      	movs	r3, #0
 80046fa:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	4013      	ands	r3, r2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
 800470a:	e001      	b.n	8004710 <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800470c:	2300      	movs	r3, #0
 800470e:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8004710:	7bfb      	ldrb	r3, [r7, #15]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr

0800471c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00f      	beq.n	800474a <null_ptr_check+0x2e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <null_ptr_check+0x2e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <null_ptr_check+0x2e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 800474a:	23ff      	movs	r3, #255	; 0xff
 800474c:	73fb      	strb	r3, [r7, #15]
 800474e:	e001      	b.n	8004754 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004754:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
 8004762:	0000      	movs	r0, r0
 8004764:	0000      	movs	r0, r0
	...

08004768 <_ZN6BMP390C1EP19__I2C_HandleTypeDef>:
static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t validate_trimming_param(struct bmp3_dev *dev);
static int8_t cal_crc(uint8_t seed, uint8_t data);

BMP390::BMP390(I2C_HandleTypeDef *pntr_hi2c) {
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  _meas_end = 0;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 20e2 	ldrb.w	r2, [r3, #226]	; 0xe2
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  temperature = -999;
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	a312      	add	r3, pc, #72	; (adr r3, 80047e8 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x80>)
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = -999;
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	a30f      	add	r3, pc, #60	; (adr r3, 80047e8 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x80>)
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	e9c1 2302 	strd	r2, r3, [r1, #8]

  the_sensor.chip_id = BMP390_I2C_ADDRESS;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	22ee      	movs	r2, #238	; 0xee
 80047b6:	741a      	strb	r2, [r3, #16]
  the_sensor.intf = BMP3_I2C_INTF;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	761a      	strb	r2, [r3, #24]
  the_sensor.read = &bmp390_i2c_read;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a0b      	ldr	r2, [pc, #44]	; (80047f0 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x88>)
 80047c2:	61da      	str	r2, [r3, #28]
  the_sensor.write = &bmp390_i2c_write;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a0b      	ldr	r2, [pc, #44]	; (80047f4 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x8c>)
 80047c8:	621a      	str	r2, [r3, #32]
  the_sensor.intf_ptr = (void *)pntr_hi2c;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	615a      	str	r2, [r3, #20]
  the_sensor.dummy_byte = 0;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	769a      	strb	r2, [r3, #26]
  the_sensor.delay_us = &delay_usec;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a07      	ldr	r2, [pc, #28]	; (80047f8 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x90>)
 80047da:	625a      	str	r2, [r3, #36]	; 0x24
}
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4618      	mov	r0, r3
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	00000000 	.word	0x00000000
 80047ec:	c08f3800 	.word	0xc08f3800
 80047f0:	08004be3 	.word	0x08004be3
 80047f4:	08004b91 	.word	0x08004b91
 80047f8:	08004a6d 	.word	0x08004a6d

080047fc <_ZN6BMP3904initEv>:

bool BMP390::init(){
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMP3_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	73fb      	strb	r3, [r7, #15]
	/* Reset the sensor */
	rslt = bmp3_soft_reset(&the_sensor);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3310      	adds	r3, #16
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe fe5c 	bl	80034ca <bmp3_soft_reset>
 8004812:	4603      	mov	r3, r0
 8004814:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP3_OK) { return false; }
 8004816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <_ZN6BMP3904initEv+0x26>
 800481e:	2300      	movs	r3, #0
 8004820:	e028      	b.n	8004874 <_ZN6BMP3904initEv+0x78>

	rslt = bmp3_init(&the_sensor);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3310      	adds	r3, #16
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fc91 	bl	800314e <bmp3_init>
 800482c:	4603      	mov	r3, r0
 800482e:	73fb      	strb	r3, [r7, #15]
	rslt = validate_trimming_param(&the_sensor);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3310      	adds	r3, #16
 8004834:	4618      	mov	r0, r3
 8004836:	f000 f9fd 	bl	8004c34 <_ZL23validate_trimming_paramP8bmp3_dev>
 800483a:	4603      	mov	r3, r0
 800483c:	73fb      	strb	r3, [r7, #15]

	if (rslt != BMP3_OK) { return false; }
 800483e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <_ZN6BMP3904initEv+0x4e>
 8004846:	2300      	movs	r3, #0
 8004848:	e014      	b.n	8004874 <_ZN6BMP3904initEv+0x78>

	setTemperatureOversampling(BMP3_NO_OVERSAMPLING);
 800484a:	2100      	movs	r1, #0
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f923 	bl	8004a98 <_ZN6BMP39026setTemperatureOversamplingEh>
	setPressureOversampling(BMP3_NO_OVERSAMPLING);
 8004852:	2100      	movs	r1, #0
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f940 	bl	8004ada <_ZN6BMP39023setPressureOversamplingEh>
	setIIRFilterCoeff(BMP3_IIR_FILTER_DISABLE);
 800485a:	2100      	movs	r1, #0
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f95d 	bl	8004b1c <_ZN6BMP39017setIIRFilterCoeffEh>
	setOutputDataRate(BMP3_ODR_25_HZ);
 8004862:	2103      	movs	r1, #3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f97a 	bl	8004b5e <_ZN6BMP39017setOutputDataRateEh>

	// don't do anything till we request a reading
	the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

	return true;
 8004872:	2301      	movs	r3, #1
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <_ZN6BMP39015readTemperatureEv>:

float BMP390::readTemperature(void) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  performReading();
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f86d 	bl	8004964 <_ZN6BMP39014performReadingEv>
  return temperature;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
 8004894:	f7fc f90c 	bl	8000ab0 <__aeabi_d2f>
 8004898:	4603      	mov	r3, r0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <_ZN6BMP39012readPressureEv>:

float BMP390::readPressure(void) {
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b082      	sub	sp, #8
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  performReading();
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f85a 	bl	8004964 <_ZN6BMP39014performReadingEv>
  return pressure;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80048b6:	4610      	mov	r0, r2
 80048b8:	4619      	mov	r1, r3
 80048ba:	f7fc f8f9 	bl	8000ab0 <__aeabi_d2f>
 80048be:	4603      	mov	r3, r0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <_ZN6BMP39011getAltitudeEf>:

float BMP390::getAltitude(float seaLevel) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
	if (seaLevel < 0){ //use default sealevel
 80048d2:	f04f 0100 	mov.w	r1, #0
 80048d6:	6838      	ldr	r0, [r7, #0]
 80048d8:	f7fc fbe6 	bl	80010a8 <__aeabi_fcmplt>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <_ZN6BMP39011getAltitudeEf+0x1e>
	  seaLevel = DEFAULT_SEALEVELPRESSURE_HPA;
 80048e2:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <_ZN6BMP39011getAltitudeEf+0x90>)
 80048e4:	603b      	str	r3, [r7, #0]

  // Note that using the equation from wikipedia can give bad results
  // at high altitude. See this thread for more information:
  //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

  float atmospheric = readPressure() / 100.0F; //convert to units of hPa
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff ffdb 	bl	80048a2 <_ZN6BMP39012readPressureEv>
 80048ec:	4603      	mov	r3, r0
 80048ee:	491b      	ldr	r1, [pc, #108]	; (800495c <_ZN6BMP39011getAltitudeEf+0x94>)
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fc faef 	bl	8000ed4 <__aeabi_fdiv>
 80048f6:	4603      	mov	r3, r0
 80048f8:	60fb      	str	r3, [r7, #12]
  return 44330.0 * (1.0 - std::pow(atmospheric / seaLevel, 0.1903));
 80048fa:	6839      	ldr	r1, [r7, #0]
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7fc fae9 	bl	8000ed4 <__aeabi_fdiv>
 8004902:	4603      	mov	r3, r0
 8004904:	4619      	mov	r1, r3
 8004906:	a310      	add	r3, pc, #64	; (adr r3, 8004948 <_ZN6BMP39011getAltitudeEf+0x80>)
 8004908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490c:	4608      	mov	r0, r1
 800490e:	f000 fa14 	bl	8004d3a <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	f04f 0000 	mov.w	r0, #0
 800491a:	4911      	ldr	r1, [pc, #68]	; (8004960 <_ZN6BMP39011getAltitudeEf+0x98>)
 800491c:	f7fb fc38 	bl	8000190 <__aeabi_dsub>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	a309      	add	r3, pc, #36	; (adr r3, 8004950 <_ZN6BMP39011getAltitudeEf+0x88>)
 800492a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492e:	f7fb fde7 	bl	8000500 <__aeabi_dmul>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4610      	mov	r0, r2
 8004938:	4619      	mov	r1, r3
 800493a:	f7fc f8b9 	bl	8000ab0 <__aeabi_d2f>
 800493e:	4603      	mov	r3, r0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	1a36e2eb 	.word	0x1a36e2eb
 800494c:	3fc85bc0 	.word	0x3fc85bc0
 8004950:	00000000 	.word	0x00000000
 8004954:	40e5a540 	.word	0x40e5a540
 8004958:	447d5000 	.word	0x447d5000
 800495c:	42c80000 	.word	0x42c80000
 8004960:	3ff00000 	.word	0x3ff00000

08004964 <_ZN6BMP39014performReadingEv>:

bool BMP390::performReading(void) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  /* Used to select the settings user needs to change */
  uint16_t settings_sel = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	83fb      	strh	r3, [r7, #30]
  /* Variable used to select the sensor component */
  uint8_t sensor_comp = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	777b      	strb	r3, [r7, #29]

  /* Select the pressure and temperature sensor to be enabled */
  the_sensor.settings.temp_en = BMP3_ENABLE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
  settings_sel |= BMP3_SEL_TEMP_EN;
 800497c:	8bfb      	ldrh	r3, [r7, #30]
 800497e:	f043 0304 	orr.w	r3, r3, #4
 8004982:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_TEMP;
 8004984:	7f7b      	ldrb	r3, [r7, #29]
 8004986:	f043 0302 	orr.w	r3, r3, #2
 800498a:	777b      	strb	r3, [r7, #29]
  if (_tempOSEnabled) {
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <_ZN6BMP39014performReadingEv+0x3a>
    settings_sel |= BMP3_SEL_TEMP_OS;
 8004996:	8bfb      	ldrh	r3, [r7, #30]
 8004998:	f043 0320 	orr.w	r3, r3, #32
 800499c:	83fb      	strh	r3, [r7, #30]
  }

  the_sensor.settings.press_en = BMP3_ENABLE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  settings_sel |= BMP3_SEL_PRESS_EN;
 80049a6:	8bfb      	ldrh	r3, [r7, #30]
 80049a8:	f043 0302 	orr.w	r3, r3, #2
 80049ac:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_PRESS;
 80049ae:	7f7b      	ldrb	r3, [r7, #29]
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	777b      	strb	r3, [r7, #29]
  if (_presOSEnabled) {
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <_ZN6BMP39014performReadingEv+0x64>
    settings_sel |= BMP3_SEL_PRESS_OS;
 80049c0:	8bfb      	ldrh	r3, [r7, #30]
 80049c2:	f043 0310 	orr.w	r3, r3, #16
 80049c6:	83fb      	strh	r3, [r7, #30]
  }

  if (_filterEnabled) {
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <_ZN6BMP39014performReadingEv+0x76>
    settings_sel |= BMP3_SEL_IIR_FILTER;
 80049d2:	8bfb      	ldrh	r3, [r7, #30]
 80049d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d8:	83fb      	strh	r3, [r7, #30]
  }

  if (_ODREnabled) {
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <_ZN6BMP39014performReadingEv+0x88>
    settings_sel |= BMP3_SEL_ODR;
 80049e4:	8bfb      	ldrh	r3, [r7, #30]
 80049e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ea:	83fb      	strh	r3, [r7, #30]

  // set interrupt to data ready
  // settings_sel |= BMP3_DRDY_EN_SEL | BMP3_LEVEL_SEL | BMP3_LATCH_SEL;

  /* Set the desired sensor configuration */
  rslt = bmp3_set_sensor_settings(settings_sel, &the_sensor);
 80049ec:	8bfa      	ldrh	r2, [r7, #30]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3310      	adds	r3, #16
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f7fe fd12 	bl	800341e <bmp3_set_sensor_settings>
 80049fa:	4603      	mov	r3, r0
 80049fc:	773b      	strb	r3, [r7, #28]

  if (rslt != BMP3_OK)
 80049fe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <_ZN6BMP39014performReadingEv+0xa6>
    return false;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e02c      	b.n	8004a64 <_ZN6BMP39014performReadingEv+0x100>

  /* Set the power mode */
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
  rslt = bmp3_set_op_mode(&the_sensor);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3310      	adds	r3, #16
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe fdaf 	bl	800357a <bmp3_set_op_mode>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 8004a20:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <_ZN6BMP39014performReadingEv+0xc8>
    return false;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e01b      	b.n	8004a64 <_ZN6BMP39014performReadingEv+0x100>

  /* Variable used to store the compensated data */
  struct bmp3_data data;

  /* Temperature and Pressure data are read and stored in the bmp3_data instance */
  rslt = bmp3_get_sensor_data(sensor_comp, &data, &the_sensor);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f103 0210 	add.w	r2, r3, #16
 8004a32:	f107 0108 	add.w	r1, r7, #8
 8004a36:	7f7b      	ldrb	r3, [r7, #29]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe fe0d 	bl	8003658 <bmp3_get_sensor_data>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 8004a42:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <_ZN6BMP39014performReadingEv+0xea>
    return false;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e00a      	b.n	8004a64 <_ZN6BMP39014performReadingEv+0x100>


  /* Save the temperature and pressure data */
  temperature = data.temperature;
 8004a4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = data.pressure;
 8004a58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	e9c1 2302 	strd	r2, r3, [r1, #8]

  return true;
 8004a62:	2301      	movs	r3, #1
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <_ZL10delay_usecmPv>:

// Our hardware interface functions
static void delay_usec(uint32_t us, void *intf_ptr){
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
	uint8_t ms = us/1000;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a06      	ldr	r2, [pc, #24]	; (8004a94 <_ZL10delay_usecmPv+0x28>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	099b      	lsrs	r3, r3, #6
 8004a80:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(ms);
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fd fe21 	bl	80026cc <HAL_Delay>
}
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	10624dd3 	.word	0x10624dd3

08004a98 <_ZN6BMP39026setTemperatureOversamplingEh>:

bool BMP390::setTemperatureOversampling(uint8_t oversample) {
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	2b05      	cmp	r3, #5
 8004aa8:	d901      	bls.n	8004aae <_ZN6BMP39026setTemperatureOversamplingEh+0x16>
    return false;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e010      	b.n	8004ad0 <_ZN6BMP39026setTemperatureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.temp_os = oversample;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	78fa      	ldrb	r2, [r7, #3]
 8004ab2:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

  if (oversample == BMP3_NO_OVERSAMPLING)
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <_ZN6BMP39026setTemperatureOversamplingEh+0x2e>
    _tempOSEnabled = false;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004ac4:	e003      	b.n	8004ace <_ZN6BMP39026setTemperatureOversamplingEh+0x36>
  else
    _tempOSEnabled = true;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1

  return true;
 8004ace:	2301      	movs	r3, #1
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr

08004ada <_ZN6BMP39023setPressureOversamplingEh>:
   BMP3_OVERSAMPLING_2X, BMP3_OVERSAMPLING_4X, BMP3_OVERSAMPLING_8X,
   BMP3_OVERSAMPLING_16X, BMP3_OVERSAMPLING_32X
    @return True on success, False on failure
*/
/**************************************************************************/
bool BMP390::setPressureOversampling(uint8_t oversample) {
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	2b05      	cmp	r3, #5
 8004aea:	d901      	bls.n	8004af0 <_ZN6BMP39023setPressureOversamplingEh+0x16>
    return false;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e010      	b.n	8004b12 <_ZN6BMP39023setPressureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.press_os = oversample;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

  if (oversample == BMP3_NO_OVERSAMPLING)
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d104      	bne.n	8004b08 <_ZN6BMP39023setPressureOversamplingEh+0x2e>
    _presOSEnabled = false;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004b06:	e003      	b.n	8004b10 <_ZN6BMP39023setPressureOversamplingEh+0x36>
  else
    _presOSEnabled = true;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2

  return true;
 8004b10:	2301      	movs	r3, #1
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr

08004b1c <_ZN6BMP39017setIIRFilterCoeffEh>:
   BMP3_IIR_FILTER_COEFF_31, BMP3_IIR_FILTER_COEFF_63, BMP3_IIR_FILTER_COEFF_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setIIRFilterCoeff(uint8_t filtercoeff) {
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	70fb      	strb	r3, [r7, #3]
  if (filtercoeff > BMP3_IIR_FILTER_COEFF_127)
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	2b07      	cmp	r3, #7
 8004b2c:	d901      	bls.n	8004b32 <_ZN6BMP39017setIIRFilterCoeffEh+0x16>
    return false;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e010      	b.n	8004b54 <_ZN6BMP39017setIIRFilterCoeffEh+0x38>

  the_sensor.settings.odr_filter.iir_filter = filtercoeff;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

  if (filtercoeff == BMP3_IIR_FILTER_DISABLE)
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d104      	bne.n	8004b4a <_ZN6BMP39017setIIRFilterCoeffEh+0x2e>
    _filterEnabled = false;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8004b48:	e003      	b.n	8004b52 <_ZN6BMP39017setIIRFilterCoeffEh+0x36>
  else
    _filterEnabled = true;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

  return true;
 8004b52:	2301      	movs	r3, #1
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr

08004b5e <_ZN6BMP39017setOutputDataRateEh>:
   BMP3_ODR_0_01_HZ, BMP3_ODR_0_006_HZ, BMP3_ODR_0_003_HZ, or BMP3_ODR_0_001_HZ
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setOutputDataRate(uint8_t odr) {
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	460b      	mov	r3, r1
 8004b68:	70fb      	strb	r3, [r7, #3]
  if (odr > BMP3_ODR_0_001_HZ)
 8004b6a:	78fb      	ldrb	r3, [r7, #3]
 8004b6c:	2b11      	cmp	r3, #17
 8004b6e:	d901      	bls.n	8004b74 <_ZN6BMP39017setOutputDataRateEh+0x16>
    return false;
 8004b70:	2300      	movs	r3, #0
 8004b72:	e008      	b.n	8004b86 <_ZN6BMP39017setOutputDataRateEh+0x28>

  the_sensor.settings.odr_filter.odr = odr;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	78fa      	ldrb	r2, [r7, #3]
 8004b78:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

  _ODREnabled = true;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3

  return true;
 8004b84:	2301      	movs	r3, #1
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <_ZL16bmp390_i2c_writehPKhmPv>:

static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr){
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	; 0x28
 8004b94:	af04      	add	r7, sp, #16
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Write(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f04f 31ff 	mov.w	r1, #4294967295
 8004bb0:	9102      	str	r1, [sp, #8]
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	2301      	movs	r3, #1
 8004bba:	21ee      	movs	r1, #238	; 0xee
 8004bbc:	6978      	ldr	r0, [r7, #20]
 8004bbe:	f002 fcc7 	bl	8007550 <HAL_I2C_Mem_Write>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <_ZL16bmp390_i2c_writehPKhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd6:	e000      	b.n	8004bda <_ZL16bmp390_i2c_writehPKhmPv+0x4a>
	}
	return 0;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <_ZL15bmp390_i2c_readhPhmPv>:

static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr){
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b08a      	sub	sp, #40	; 0x28
 8004be6:	af04      	add	r7, sp, #16
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	603b      	str	r3, [r7, #0]
 8004bee:	4603      	mov	r3, r0
 8004bf0:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Read(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8004c02:	9102      	str	r1, [sp, #8]
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	21ee      	movs	r1, #238	; 0xee
 8004c0e:	6978      	ldr	r0, [r7, #20]
 8004c10:	f002 fdb2 	bl	8007778 <HAL_I2C_Mem_Read>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bf14      	ite	ne
 8004c1a:	2301      	movne	r3, #1
 8004c1c:	2300      	moveq	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <_ZL15bmp390_i2c_readhPhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 8004c24:	f04f 33ff 	mov.w	r3, #4294967295
 8004c28:	e000      	b.n	8004c2c <_ZL15bmp390_i2c_readhPhmPv+0x4a>
	}
	return 0;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <_ZL23validate_trimming_paramP8bmp3_dev>:

static int8_t validate_trimming_param(struct bmp3_dev *dev) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08a      	sub	sp, #40	; 0x28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t crc = 0xFF;
 8004c3c:	23ff      	movs	r3, #255	; 0xff
 8004c3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 8004c42:	f107 010c 	add.w	r1, r7, #12
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2215      	movs	r2, #21
 8004c4a:	2031      	movs	r0, #49	; 0x31
 8004c4c:	f7fe fac6 	bl	80031dc <bmp3_get_regs>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (rslt == BMP3_OK) {
 8004c56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d133      	bne.n	8004cc6 <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
    for (i = 0; i < 21; i++) {
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004c64:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c68:	2b14      	cmp	r3, #20
 8004c6a:	d814      	bhi.n	8004c96 <_ZL23validate_trimming_paramP8bmp3_dev+0x62>
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
 8004c6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c70:	3328      	adds	r3, #40	; 0x28
 8004c72:	443b      	add	r3, r7
 8004c74:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8004c78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 f827 	bl	8004cd2 <_ZL7cal_crchh>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (i = 0; i < 21; i++) {
 8004c8a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c8e:	3301      	adds	r3, #1
 8004c90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004c94:	e7e6      	b.n	8004c64 <_ZL23validate_trimming_paramP8bmp3_dev+0x30>
    }

    crc = (crc ^ 0xFF);
 8004c96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c9a:	43db      	mvns	r3, r3
 8004c9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 8004ca0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	2030      	movs	r0, #48	; 0x30
 8004caa:	f7fe fa97 	bl	80031dc <bmp3_get_regs>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (stored_crc != crc) {
 8004cb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004cb8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d002      	beq.n	8004cc6 <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
      rslt = -1;
 8004cc0:	23ff      	movs	r3, #255	; 0xff
 8004cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  return rslt;
 8004cc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3728      	adds	r7, #40	; 0x28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <_ZL7cal_crchh>:

/*
 * @brief function to calculate CRC for the trimming parameters
 * */
static int8_t cal_crc(uint8_t seed, uint8_t data) {
 8004cd2:	b480      	push	{r7}
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	4603      	mov	r3, r0
 8004cda:	460a      	mov	r2, r1
 8004cdc:	71fb      	strb	r3, [r7, #7]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	71bb      	strb	r3, [r7, #6]
  int8_t poly = 0x1D;
 8004ce2:	231d      	movs	r3, #29
 8004ce4:	737b      	strb	r3, [r7, #13]
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	73bb      	strb	r3, [r7, #14]
 8004cea:	7bbb      	ldrb	r3, [r7, #14]
 8004cec:	2b07      	cmp	r3, #7
 8004cee:	d81d      	bhi.n	8004d2c <_ZL7cal_crchh+0x5a>
    if ((seed & 0x80) ^ (data & 0x80)) {
 8004cf0:	79fa      	ldrb	r2, [r7, #7]
 8004cf2:	79bb      	ldrb	r3, [r7, #6]
 8004cf4:	4053      	eors	r3, r2
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	b25b      	sxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	da02      	bge.n	8004d04 <_ZL7cal_crchh+0x32>
      var2 = 1;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
 8004d02:	e001      	b.n	8004d08 <_ZL7cal_crchh+0x36>
    } else {
      var2 = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	73fb      	strb	r3, [r7, #15]
    }

    seed = (seed & 0x7F) << 1;
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	71fb      	strb	r3, [r7, #7]
    data = (data & 0x7F) << 1;
 8004d0e:	79bb      	ldrb	r3, [r7, #6]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	71bb      	strb	r3, [r7, #6]
    seed = seed ^ (uint8_t)(poly * var2);
 8004d14:	7b7a      	ldrb	r2, [r7, #13]
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	fb12 f303 	smulbb	r3, r2, r3
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	4053      	eors	r3, r2
 8004d22:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8004d24:	7bbb      	ldrb	r3, [r7, #14]
 8004d26:	3301      	adds	r3, #1
 8004d28:	73bb      	strb	r3, [r7, #14]
 8004d2a:	e7de      	b.n	8004cea <_ZL7cal_crchh+0x18>
  }

  return (int8_t)seed;
 8004d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr

08004d3a <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	e9c7 2300 	strd	r2, r3, [r7]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f7fb fb82 	bl	8000450 <__aeabi_f2d>
 8004d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d50:	f01b fa7a 	bl	8020248 <pow>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
    }
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef>:
#include <env_sensors.hpp>

EnvionmentSensors::EnvionmentSensors(I2C_HandleTypeDef *pntr_hi2c) : bmp(pntr_hi2c) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6839      	ldr	r1, [r7, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fcf8 	bl	8004768 <_ZN6BMP390C1EP19__I2C_HandleTypeDef>
  if(bmp.init()){
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff fd3e 	bl	80047fc <_ZN6BMP3904initEv>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d006      	beq.n	8004d94 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x30>
  	APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup valid \r\n");
 8004d86:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x70>)
 8004d88:	2201      	movs	r2, #1
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	2002      	movs	r0, #2
 8004d8e:	f01a ff61 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
 8004d92:	e005      	b.n	8004da0 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x3c>
  } else {
  	APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup failed \r\n");
 8004d94:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x74>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	2100      	movs	r1, #0
 8004d9a:	2002      	movs	r0, #2
 8004d9c:	f01a ff5a 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
  }
  bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2103      	movs	r1, #3
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff fe77 	bl	8004a98 <_ZN6BMP39026setTemperatureOversamplingEh>
	bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2102      	movs	r1, #2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fe93 	bl	8004ada <_ZN6BMP39023setPressureOversamplingEh>
	bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_3);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2102      	movs	r1, #2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff feaf 	bl	8004b1c <_ZN6BMP39017setIIRFilterCoeffEh>
	bmp.setOutputDataRate(BMP3_ODR_50_HZ);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2102      	movs	r1, #2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff fecb 	bl	8004b5e <_ZN6BMP39017setOutputDataRateEh>

}
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	0802114c 	.word	0x0802114c
 8004dd8:	08021164 	.word	0x08021164

08004ddc <_ZN17EnvionmentSensors11getPressureEv>:

float EnvionmentSensors::getPressure(){
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
	return bmp.readPressure();
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fd5b 	bl	80048a2 <_ZN6BMP39012readPressureEv>
 8004dec:	4603      	mov	r3, r0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_ZN17EnvionmentSensors14getTemperatureEv>:

float EnvionmentSensors::getTemperature(){
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
	return bmp.readTemperature();
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fd3b 	bl	800487c <_ZN6BMP39015readTemperatureEv>
 8004e06:	4603      	mov	r3, r0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <_ZN17EnvionmentSensors11getAltitudeEf>:

float EnvionmentSensors::getAltitude(float seaLevel){
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  return bmp.getAltitude(seaLevel);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6839      	ldr	r1, [r7, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff fd52 	bl	80048c8 <_ZN6BMP39011getAltitudeEf>
 8004e24:	4603      	mov	r3, r0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b086      	sub	sp, #24
 8004e32:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8004e34:	1d3b      	adds	r3, r7, #4
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	605a      	str	r2, [r3, #4]
 8004e3c:	609a      	str	r2, [r3, #8]
 8004e3e:	60da      	str	r2, [r3, #12]
 8004e40:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8004e42:	2310      	movs	r3, #16
 8004e44:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004e46:	2301      	movs	r3, #1
 8004e48:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8004e52:	1d3b      	adds	r3, r7, #4
 8004e54:	4619      	mov	r1, r3
 8004e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e5a:	f002 f88b 	bl	8006f74 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8004e5e:	2320      	movs	r3, #32
 8004e60:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8004e62:	1d3b      	adds	r3, r7, #4
 8004e64:	4619      	mov	r1, r3
 8004e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e6a:	f002 f883 	bl	8006f74 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2120      	movs	r1, #32
 8004e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e76:	f002 faab 	bl	80073d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2110      	movs	r1, #16
 8004e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e82:	f002 faa5 	bl	80073d0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	4603      	mov	r3, r0
 8004e98:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d83f      	bhi.n	8004f20 <BSP_RADIO_ConfigRFSwitch+0x90>
 8004ea0:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004eb9 	.word	0x08004eb9
 8004eac:	08004ed3 	.word	0x08004ed3
 8004eb0:	08004eed 	.word	0x08004eed
 8004eb4:	08004f07 	.word	0x08004f07
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2110      	movs	r1, #16
 8004ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ec0:	f002 fa86 	bl	80073d0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2120      	movs	r1, #32
 8004ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ecc:	f002 fa80 	bl	80073d0 <HAL_GPIO_WritePin>
      break;      
 8004ed0:	e027      	b.n	8004f22 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	2110      	movs	r1, #16
 8004ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004eda:	f002 fa79 	bl	80073d0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2120      	movs	r1, #32
 8004ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ee6:	f002 fa73 	bl	80073d0 <HAL_GPIO_WritePin>
      break;
 8004eea:	e01a      	b.n	8004f22 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8004eec:	2201      	movs	r2, #1
 8004eee:	2110      	movs	r1, #16
 8004ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ef4:	f002 fa6c 	bl	80073d0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8004ef8:	2201      	movs	r2, #1
 8004efa:	2120      	movs	r1, #32
 8004efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f00:	f002 fa66 	bl	80073d0 <HAL_GPIO_WritePin>
      break;
 8004f04:	e00d      	b.n	8004f22 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8004f06:	2200      	movs	r2, #0
 8004f08:	2110      	movs	r1, #16
 8004f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f0e:	f002 fa5f 	bl	80073d0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8004f12:	2201      	movs	r2, #1
 8004f14:	2120      	movs	r1, #32
 8004f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f1a:	f002 fa59 	bl	80073d0 <HAL_GPIO_WritePin>
      break;
 8004f1e:	e000      	b.n	8004f22 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8004f20:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8004f30:	2302      	movs	r3, #2
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr

08004f3a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8004f3e:	2301      	movs	r3, #1
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8004f4c:	2301      	movs	r3, #1
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr

08004f56 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8004f66:	230f      	movs	r3, #15
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	e001      	b.n	8004f70 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8004f6c:	2316      	movs	r3, #22
 8004f6e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004f70:	68fb      	ldr	r3, [r7, #12]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr

08004f7c <LL_DBGMCU_DisableDBGSleepMode>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	4a03      	ldr	r2, [pc, #12]	; (8004f94 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8004f86:	f023 0301 	bic.w	r3, r3, #1
 8004f8a:	6053      	str	r3, [r2, #4]
}
 8004f8c:	bf00      	nop
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr
 8004f94:	e0042000 	.word	0xe0042000

08004f98 <LL_DBGMCU_DisableDBGStopMode>:
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004f9c:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	4a03      	ldr	r2, [pc, #12]	; (8004fb0 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8004fa2:	f023 0302 	bic.w	r3, r3, #2
 8004fa6:	6053      	str	r3, [r2, #4]
}
 8004fa8:	bf00      	nop
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr
 8004fb0:	e0042000 	.word	0xe0042000

08004fb4 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	4a03      	ldr	r2, [pc, #12]	; (8004fcc <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8004fbe:	f023 0304 	bic.w	r3, r3, #4
 8004fc2:	6053      	str	r3, [r2, #4]
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr
 8004fcc:	e0042000 	.word	0xe0042000

08004fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fda:	2003      	movs	r0, #3
 8004fdc:	f001 f984 	bl	80062e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004fe0:	f004 f802 	bl	8008fe8 <HAL_RCC_GetHCLKFreq>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	4a09      	ldr	r2, [pc, #36]	; (800500c <HAL_Init+0x3c>)
 8004fe8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004fea:	200f      	movs	r0, #15
 8004fec:	f7fd fb50 	bl	8002690 <HAL_InitTick>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	71fb      	strb	r3, [r7, #7]
 8004ffa:	e001      	b.n	8005000 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004ffc:	f7fd f91e 	bl	800223c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005000:	79fb      	ldrb	r3, [r7, #7]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000000 	.word	0x20000000

08005010 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8005014:	4b02      	ldr	r3, [pc, #8]	; (8005020 <HAL_GetUIDw0+0x10>)
 8005016:	681b      	ldr	r3, [r3, #0]
}
 8005018:	4618      	mov	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr
 8005020:	1fff7590 	.word	0x1fff7590

08005024 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8005028:	4b02      	ldr	r3, [pc, #8]	; (8005034 <HAL_GetUIDw1+0x10>)
 800502a:	681b      	ldr	r3, [r3, #0]
}
 800502c:	4618      	mov	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr
 8005034:	1fff7594 	.word	0x1fff7594

08005038 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800503c:	4b02      	ldr	r3, [pc, #8]	; (8005048 <HAL_GetUIDw2+0x10>)
 800503e:	681b      	ldr	r3, [r3, #0]
}
 8005040:	4618      	mov	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr
 8005048:	1fff7598 	.word	0x1fff7598

0800504c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8005050:	f7ff ff94 	bl	8004f7c <LL_DBGMCU_DisableDBGSleepMode>
}
 8005054:	bf00      	nop
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 800505c:	f7ff ff9c 	bl	8004f98 <LL_DBGMCU_DisableDBGStopMode>
}
 8005060:	bf00      	nop
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8005068:	f7ff ffa4 	bl	8004fb4 <LL_DBGMCU_DisableDBGStandbyMode>
}
 800506c:	bf00      	nop
 800506e:	bd80      	pop	{r7, pc}

08005070 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	431a      	orrs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	601a      	str	r2, [r3, #0]
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr

080050ae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b085      	sub	sp, #20
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	695a      	ldr	r2, [r3, #20]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2107      	movs	r1, #7
 80050c6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ca:	43db      	mvns	r3, r3
 80050cc:	401a      	ands	r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	fa01 f303 	lsl.w	r3, r1, r3
 80050da:	431a      	orrs	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80050e0:	bf00      	nop
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr

080050ea <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	695a      	ldr	r2, [r3, #20]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2107      	movs	r1, #7
 8005100:	fa01 f303 	lsl.w	r3, r1, r3
 8005104:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800510c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr

0800511a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	bc80      	pop	{r7}
 800513c:	4770      	bx	lr

0800513e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	210f      	movs	r1, #15
 8005156:	fa01 f303 	lsl.w	r3, r1, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	401a      	ands	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	0e9b      	lsrs	r3, r3, #26
 8005162:	f003 010f 	and.w	r1, r3, #15
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	fa01 f303 	lsl.w	r3, r1, r3
 8005170:	431a      	orrs	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	629a      	str	r2, [r3, #40]	; 0x28
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80051b8:	43db      	mvns	r3, r3
 80051ba:	401a      	ands	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr

080051ca <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	43db      	mvns	r3, r3
 80051e0:	401a      	ands	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	0219      	lsls	r1, r3, #8
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	400b      	ands	r3, r1
 80051ea:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80051ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051f2:	431a      	orrs	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr

08005202 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005212:	f023 0317 	bic.w	r3, r3, #23
 8005216:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr

08005228 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005238:	f023 0317 	bic.w	r3, r3, #23
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6093      	str	r3, [r2, #8]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr

0800524a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800525e:	d101      	bne.n	8005264 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005260:	2301      	movs	r3, #1
 8005262:	e000      	b.n	8005266 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr

08005270 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005280:	f023 0317 	bic.w	r3, r3, #23
 8005284:	f043 0201 	orr.w	r2, r3, #1
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	bc80      	pop	{r7}
 8005294:	4770      	bx	lr

08005296 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052a6:	f023 0317 	bic.w	r3, r3, #23
 80052aa:	f043 0202 	orr.w	r2, r3, #2
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr

080052bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <LL_ADC_IsEnabled+0x18>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e000      	b.n	80052d6 <LL_ADC_IsEnabled+0x1a>
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr

080052e0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d101      	bne.n	80052f8 <LL_ADC_IsDisableOngoing+0x18>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <LL_ADC_IsDisableOngoing+0x1a>
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005314:	f023 0317 	bic.w	r3, r3, #23
 8005318:	f043 0204 	orr.w	r2, r3, #4
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr

0800532a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800533a:	f023 0317 	bic.w	r3, r3, #23
 800533e:	f043 0210 	orr.w	r2, r3, #16
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr

08005350 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b04      	cmp	r3, #4
 8005362:	d101      	bne.n	8005368 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr

08005374 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8005380:	2300      	movs	r3, #0
 8005382:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e17e      	b.n	8005694 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d109      	bne.n	80053b8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7fc f8e7 	bl	8001578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7ff ff44 	bl	800524a <LL_ADC_IsInternalRegulatorEnabled>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d115      	bne.n	80053f4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff ff18 	bl	8005202 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053d2:	4b9e      	ldr	r3, [pc, #632]	; (800564c <HAL_ADC_Init+0x2d8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	099b      	lsrs	r3, r3, #6
 80053d8:	4a9d      	ldr	r2, [pc, #628]	; (8005650 <HAL_ADC_Init+0x2dc>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	099b      	lsrs	r3, r3, #6
 80053e0:	3301      	adds	r3, #1
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80053e6:	e002      	b.n	80053ee <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f9      	bne.n	80053e8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff ff26 	bl	800524a <LL_ADC_IsInternalRegulatorEnabled>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10d      	bne.n	8005420 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005408:	f043 0210 	orr.w	r2, r3, #16
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005414:	f043 0201 	orr.w	r2, r3, #1
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff ff93 	bl	8005350 <LL_ADC_REG_IsConversionOngoing>
 800542a:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	2b00      	cmp	r3, #0
 8005436:	f040 8124 	bne.w	8005682 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	f040 8120 	bne.w	8005682 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005446:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800544a:	f043 0202 	orr.w	r2, r3, #2
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff ff30 	bl	80052bc <LL_ADC_IsEnabled>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	f040 80a7 	bne.w	80055b2 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	7e1b      	ldrb	r3, [r3, #24]
 800546c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800546e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	7e5b      	ldrb	r3, [r3, #25]
 8005474:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005476:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	7e9b      	ldrb	r3, [r3, #26]
 800547c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800547e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005484:	2a00      	cmp	r2, #0
 8005486:	d002      	beq.n	800548e <HAL_ADC_Init+0x11a>
 8005488:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800548c:	e000      	b.n	8005490 <HAL_ADC_Init+0x11c>
 800548e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005490:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005496:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	da04      	bge.n	80054aa <HAL_ADC_Init+0x136>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054a8:	e001      	b.n	80054ae <HAL_ADC_Init+0x13a>
 80054aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80054ae:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80054b6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80054b8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	4313      	orrs	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d114      	bne.n	80054f4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	7e9b      	ldrb	r3, [r3, #26]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d104      	bne.n	80054dc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	e00b      	b.n	80054f4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e0:	f043 0220 	orr.w	r2, r3, #32
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ec:	f043 0201 	orr.w	r2, r3, #1
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005508:	4313      	orrs	r3, r2
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	4313      	orrs	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800551a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6812      	ldr	r2, [r2, #0]
 8005522:	69b9      	ldr	r1, [r7, #24]
 8005524:	430b      	orrs	r3, r1
 8005526:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005534:	4313      	orrs	r3, r2
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005542:	2b01      	cmp	r3, #1
 8005544:	d111      	bne.n	800556a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005552:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005558:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800555e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	4b38      	ldr	r3, [pc, #224]	; (8005654 <HAL_ADC_Init+0x2e0>)
 8005572:	4013      	ands	r3, r2
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	6979      	ldr	r1, [r7, #20]
 800557a:	430b      	orrs	r3, r1
 800557c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005586:	d014      	beq.n	80055b2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800558c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005590:	d00f      	beq.n	80055b2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559a:	d00a      	beq.n	80055b2 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800559c:	4b2e      	ldr	r3, [pc, #184]	; (8005658 <HAL_ADC_Init+0x2e4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80055ac:	492a      	ldr	r1, [pc, #168]	; (8005658 <HAL_ADC_Init+0x2e4>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ba:	461a      	mov	r2, r3
 80055bc:	2100      	movs	r1, #0
 80055be:	f7ff fd76 	bl	80050ae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	461a      	mov	r2, r3
 80055cc:	4923      	ldr	r1, [pc, #140]	; (800565c <HAL_ADC_Init+0x2e8>)
 80055ce:	f7ff fd6e 	bl	80050ae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d108      	bne.n	80055ec <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f062 020f 	orn	r2, r2, #15
 80055e8:	629a      	str	r2, [r3, #40]	; 0x28
 80055ea:	e017      	b.n	800561c <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055f4:	d112      	bne.n	800561c <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	3b01      	subs	r3, #1
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	f003 031c 	and.w	r3, r3, #28
 8005608:	f06f 020f 	mvn.w	r2, #15
 800560c:	fa02 f103 	lsl.w	r1, r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2100      	movs	r1, #0
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff fd61 	bl	80050ea <LL_ADC_GetSamplingTimeCommonChannels>
 8005628:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800562e:	429a      	cmp	r2, r3
 8005630:	d116      	bne.n	8005660 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563c:	f023 0303 	bic.w	r3, r3, #3
 8005640:	f043 0201 	orr.w	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005648:	e023      	b.n	8005692 <HAL_ADC_Init+0x31e>
 800564a:	bf00      	nop
 800564c:	20000000 	.word	0x20000000
 8005650:	053e2d63 	.word	0x053e2d63
 8005654:	1ffffc02 	.word	0x1ffffc02
 8005658:	40012708 	.word	0x40012708
 800565c:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005664:	f023 0312 	bic.w	r3, r3, #18
 8005668:	f043 0210 	orr.w	r2, r3, #16
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005674:	f043 0201 	orr.w	r2, r3, #1
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005680:	e007      	b.n	8005692 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005686:	f043 0210 	orr.w	r2, r3, #16
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8005692:	7ffb      	ldrb	r3, [r7, #31]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3720      	adds	r7, #32
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e07a      	b.n	80057a4 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b2:	f043 0202 	orr.w	r2, r3, #2
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 face 	bl	8005c5c <ADC_ConversionStop>
 80056c0:	4603      	mov	r3, r0
 80056c2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10f      	bne.n	80056ea <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fb92 	bl	8005df4 <ADC_Disable>
 80056d0:	4603      	mov	r3, r0
 80056d2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d102      	bne.n	80056e0 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff fd9f 	bl	8005228 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6812      	ldr	r2, [r2, #0]
 80056f4:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80056f8:	f023 0303 	bic.w	r3, r3, #3
 80056fc:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f240 329f 	movw	r2, #927	; 0x39f
 8005706:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68d9      	ldr	r1, [r3, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b26      	ldr	r3, [pc, #152]	; (80057ac <HAL_ADC_DeInit+0x110>)
 8005714:	400b      	ands	r3, r1
 8005716:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8005726:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695a      	ldr	r2, [r3, #20]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0207 	bic.w	r2, r2, #7
 8005736:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6a1a      	ldr	r2, [r3, #32]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8005746:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8005756:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2200      	movs	r2, #0
 8005774:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8005776:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <HAL_ADC_DeInit+0x114>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a0d      	ldr	r2, [pc, #52]	; (80057b0 <HAL_ADC_DeInit+0x114>)
 800577c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8005780:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fb ff0c 	bl	80015a0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	833e0200 	.word	0x833e0200
 80057b0:	40012708 	.word	0x40012708

080057b4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7ff fdc5 	bl	8005350 <LL_ADC_REG_IsConversionOngoing>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d132      	bne.n	8005832 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_ADC_Start+0x26>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e02e      	b.n	8005838 <HAL_ADC_Start+0x84>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fa80 	bl	8005ce8 <ADC_Enable>
 80057e8:	4603      	mov	r3, r0
 80057ea:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d11a      	bne.n	8005828 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80057fa:	f023 0301 	bic.w	r3, r3, #1
 80057fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	221c      	movs	r2, #28
 8005812:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff fd6f 	bl	8005304 <LL_ADC_REG_StartConversion>
 8005826:	e006      	b.n	8005836 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005830:	e001      	b.n	8005836 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005832:	2302      	movs	r3, #2
 8005834:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8005836:	7bfb      	ldrb	r3, [r7, #15]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_ADC_Stop+0x16>
 8005852:	2302      	movs	r3, #2
 8005854:	e022      	b.n	800589c <HAL_ADC_Stop+0x5c>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f9fc 	bl	8005c5c <ADC_ConversionStop>
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005868:	7bfb      	ldrb	r3, [r7, #15]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d111      	bne.n	8005892 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fac0 	bl	8005df4 <ADC_Disable>
 8005874:	4603      	mov	r3, r0
 8005876:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d109      	bne.n	8005892 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005886:	f023 0301 	bic.w	r3, r3, #1
 800588a:	f043 0201 	orr.w	r2, r3, #1
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800589a:	7bfb      	ldrb	r3, [r7, #15]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d102      	bne.n	80058bc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80058b6:	2308      	movs	r3, #8
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	e010      	b.n	80058de <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ce:	f043 0220 	orr.w	r2, r3, #32
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e077      	b.n	80059ca <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80058da:	2304      	movs	r3, #4
 80058dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80058de:	f7fc fee1 	bl	80026a4 <HAL_GetTick>
 80058e2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80058e4:	e021      	b.n	800592a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ec:	d01d      	beq.n	800592a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80058ee:	f7fc fed9 	bl	80026a4 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d302      	bcc.n	8005904 <HAL_ADC_PollForConversion+0x60>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d112      	bne.n	800592a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4013      	ands	r3, r2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10b      	bne.n	800592a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005916:	f043 0204 	orr.w	r2, r3, #4
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e04f      	b.n	80059ca <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4013      	ands	r3, r2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0d6      	beq.n	80058e6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff fbe6 	bl	800511a <LL_ADC_REG_IsTriggerSourceSWStart>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d031      	beq.n	80059b8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	7e9b      	ldrb	r3, [r3, #26]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d12d      	bne.n	80059b8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b08      	cmp	r3, #8
 8005968:	d126      	bne.n	80059b8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fcee 	bl	8005350 <LL_ADC_REG_IsConversionOngoing>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d112      	bne.n	80059a0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 020c 	bic.w	r2, r2, #12
 8005988:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005992:	f023 0301 	bic.w	r3, r3, #1
 8005996:	f043 0201 	orr.w	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	659a      	str	r2, [r3, #88]	; 0x58
 800599e:	e00b      	b.n	80059b8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a4:	f043 0220 	orr.w	r2, r3, #32
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b0:	f043 0201 	orr.w	r2, r3, #1
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	7e1b      	ldrb	r3, [r3, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d103      	bne.n	80059c8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	220c      	movs	r2, #12
 80059c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr
	...

080059ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_ADC_ConfigChannel+0x28>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e110      	b.n	8005c36 <HAL_ADC_ConfigChannel+0x24a>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff fc95 	bl	8005350 <LL_ADC_REG_IsConversionOngoing>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f040 80f7 	bne.w	8005c1c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	f000 80b1 	beq.w	8005b9a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a40:	d004      	beq.n	8005a4c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005a46:	4a7e      	ldr	r2, [pc, #504]	; (8005c40 <HAL_ADC_ConfigChannel+0x254>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d108      	bne.n	8005a5e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4619      	mov	r1, r3
 8005a56:	4610      	mov	r0, r2
 8005a58:	f7ff fb92 	bl	8005180 <LL_ADC_REG_SetSequencerChAdd>
 8005a5c:	e041      	b.n	8005ae2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	210f      	movs	r1, #15
 8005a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a70:	43db      	mvns	r3, r3
 8005a72:	401a      	ands	r2, r3
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d105      	bne.n	8005a8c <HAL_ADC_ConfigChannel+0xa0>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	0e9b      	lsrs	r3, r3, #26
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	e011      	b.n	8005ab0 <HAL_ADC_ConfigChannel+0xc4>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	fa93 f3a3 	rbit	r3, r3
 8005a98:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8005aa4:	2320      	movs	r3, #32
 8005aa6:	e003      	b.n	8005ab0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	fab3 f383 	clz	r3, r3
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	6849      	ldr	r1, [r1, #4]
 8005ab4:	f001 011f 	and.w	r1, r1, #31
 8005ab8:	408b      	lsls	r3, r1
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	089b      	lsrs	r3, r3, #2
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d808      	bhi.n	8005ae2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	6859      	ldr	r1, [r3, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	f7ff fb2e 	bl	800513e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6819      	ldr	r1, [r3, #0]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	461a      	mov	r2, r3
 8005af0:	f7ff fb6b 	bl	80051ca <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f280 8097 	bge.w	8005c2c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005afe:	4851      	ldr	r0, [pc, #324]	; (8005c44 <HAL_ADC_ConfigChannel+0x258>)
 8005b00:	f7ff fac8 	bl	8005094 <LL_ADC_GetCommonPathInternalCh>
 8005b04:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a4f      	ldr	r2, [pc, #316]	; (8005c48 <HAL_ADC_ConfigChannel+0x25c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d120      	bne.n	8005b52 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d11b      	bne.n	8005b52 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b20:	4619      	mov	r1, r3
 8005b22:	4848      	ldr	r0, [pc, #288]	; (8005c44 <HAL_ADC_ConfigChannel+0x258>)
 8005b24:	f7ff faa4 	bl	8005070 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b28:	4b48      	ldr	r3, [pc, #288]	; (8005c4c <HAL_ADC_ConfigChannel+0x260>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	099b      	lsrs	r3, r3, #6
 8005b2e:	4a48      	ldr	r2, [pc, #288]	; (8005c50 <HAL_ADC_ConfigChannel+0x264>)
 8005b30:	fba2 2303 	umull	r2, r3, r2, r3
 8005b34:	099b      	lsrs	r3, r3, #6
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	4613      	mov	r3, r2
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005b42:	e002      	b.n	8005b4a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1f9      	bne.n	8005b44 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005b50:	e06c      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a3f      	ldr	r2, [pc, #252]	; (8005c54 <HAL_ADC_ConfigChannel+0x268>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d10c      	bne.n	8005b76 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d107      	bne.n	8005b76 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4835      	ldr	r0, [pc, #212]	; (8005c44 <HAL_ADC_ConfigChannel+0x258>)
 8005b70:	f7ff fa7e 	bl	8005070 <LL_ADC_SetCommonPathInternalCh>
 8005b74:	e05a      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a37      	ldr	r2, [pc, #220]	; (8005c58 <HAL_ADC_ConfigChannel+0x26c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d155      	bne.n	8005c2c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d150      	bne.n	8005c2c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b90:	4619      	mov	r1, r3
 8005b92:	482c      	ldr	r0, [pc, #176]	; (8005c44 <HAL_ADC_ConfigChannel+0x258>)
 8005b94:	f7ff fa6c 	bl	8005070 <LL_ADC_SetCommonPathInternalCh>
 8005b98:	e048      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba2:	d004      	beq.n	8005bae <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005ba8:	4a25      	ldr	r2, [pc, #148]	; (8005c40 <HAL_ADC_ConfigChannel+0x254>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d107      	bne.n	8005bbe <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4610      	mov	r0, r2
 8005bba:	f7ff faf3 	bl	80051a4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	da32      	bge.n	8005c2c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bc6:	481f      	ldr	r0, [pc, #124]	; (8005c44 <HAL_ADC_ConfigChannel+0x258>)
 8005bc8:	f7ff fa64 	bl	8005094 <LL_ADC_GetCommonPathInternalCh>
 8005bcc:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1d      	ldr	r2, [pc, #116]	; (8005c48 <HAL_ADC_ConfigChannel+0x25c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d107      	bne.n	8005be8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005bde:	4619      	mov	r1, r3
 8005be0:	4818      	ldr	r0, [pc, #96]	; (8005c44 <HAL_ADC_ConfigChannel+0x258>)
 8005be2:	f7ff fa45 	bl	8005070 <LL_ADC_SetCommonPathInternalCh>
 8005be6:	e021      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a19      	ldr	r2, [pc, #100]	; (8005c54 <HAL_ADC_ConfigChannel+0x268>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d107      	bne.n	8005c02 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4812      	ldr	r0, [pc, #72]	; (8005c44 <HAL_ADC_ConfigChannel+0x258>)
 8005bfc:	f7ff fa38 	bl	8005070 <LL_ADC_SetCommonPathInternalCh>
 8005c00:	e014      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a14      	ldr	r2, [pc, #80]	; (8005c58 <HAL_ADC_ConfigChannel+0x26c>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d10f      	bne.n	8005c2c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005c12:	4619      	mov	r1, r3
 8005c14:	480b      	ldr	r0, [pc, #44]	; (8005c44 <HAL_ADC_ConfigChannel+0x258>)
 8005c16:	f7ff fa2b 	bl	8005070 <LL_ADC_SetCommonPathInternalCh>
 8005c1a:	e007      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c20:	f043 0220 	orr.w	r2, r3, #32
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8005c34:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3720      	adds	r7, #32
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	80000004 	.word	0x80000004
 8005c44:	40012708 	.word	0x40012708
 8005c48:	b0001000 	.word	0xb0001000
 8005c4c:	20000000 	.word	0x20000000
 8005c50:	053e2d63 	.word	0x053e2d63
 8005c54:	b8004000 	.word	0xb8004000
 8005c58:	b4002000 	.word	0xb4002000

08005c5c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff fb71 	bl	8005350 <LL_ADC_REG_IsConversionOngoing>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d033      	beq.n	8005cdc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7ff fb31 	bl	80052e0 <LL_ADC_IsDisableOngoing>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff fb4e 	bl	800532a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005c8e:	f7fc fd09 	bl	80026a4 <HAL_GetTick>
 8005c92:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005c94:	e01b      	b.n	8005cce <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005c96:	f7fc fd05 	bl	80026a4 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d914      	bls.n	8005cce <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00d      	beq.n	8005cce <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb6:	f043 0210 	orr.w	r2, r3, #16
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc2:	f043 0201 	orr.w	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e007      	b.n	8005cde <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1dc      	bne.n	8005c96 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff fadf 	bl	80052bc <LL_ADC_IsEnabled>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d169      	bne.n	8005dd8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	4b36      	ldr	r3, [pc, #216]	; (8005de4 <ADC_Enable+0xfc>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00d      	beq.n	8005d2e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d16:	f043 0210 	orr.w	r2, r3, #16
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d22:	f043 0201 	orr.w	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e055      	b.n	8005dda <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff fa9c 	bl	8005270 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8005d38:	482b      	ldr	r0, [pc, #172]	; (8005de8 <ADC_Enable+0x100>)
 8005d3a:	f7ff f9ab 	bl	8005094 <LL_ADC_GetCommonPathInternalCh>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00f      	beq.n	8005d68 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d48:	4b28      	ldr	r3, [pc, #160]	; (8005dec <ADC_Enable+0x104>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	099b      	lsrs	r3, r3, #6
 8005d4e:	4a28      	ldr	r2, [pc, #160]	; (8005df0 <ADC_Enable+0x108>)
 8005d50:	fba2 2303 	umull	r2, r3, r2, r3
 8005d54:	099b      	lsrs	r3, r3, #6
 8005d56:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8005d58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005d5a:	e002      	b.n	8005d62 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1f9      	bne.n	8005d5c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	7e5b      	ldrb	r3, [r3, #25]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d033      	beq.n	8005dd8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005d70:	f7fc fc98 	bl	80026a4 <HAL_GetTick>
 8005d74:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d76:	e028      	b.n	8005dca <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff fa9d 	bl	80052bc <LL_ADC_IsEnabled>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d104      	bne.n	8005d92 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff fa6f 	bl	8005270 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005d92:	f7fc fc87 	bl	80026a4 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d914      	bls.n	8005dca <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d00d      	beq.n	8005dca <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db2:	f043 0210 	orr.w	r2, r3, #16
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbe:	f043 0201 	orr.w	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e007      	b.n	8005dda <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d1cf      	bne.n	8005d78 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	80000017 	.word	0x80000017
 8005de8:	40012708 	.word	0x40012708
 8005dec:	20000000 	.word	0x20000000
 8005df0:	053e2d63 	.word	0x053e2d63

08005df4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff fa6d 	bl	80052e0 <LL_ADC_IsDisableOngoing>
 8005e06:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fa55 	bl	80052bc <LL_ADC_IsEnabled>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d047      	beq.n	8005ea8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d144      	bne.n	8005ea8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 0305 	and.w	r3, r3, #5
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d10c      	bne.n	8005e46 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff fa30 	bl	8005296 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005e3e:	f7fc fc31 	bl	80026a4 <HAL_GetTick>
 8005e42:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e44:	e029      	b.n	8005e9a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4a:	f043 0210 	orr.w	r2, r3, #16
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e56:	f043 0201 	orr.w	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e023      	b.n	8005eaa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005e62:	f7fc fc1f 	bl	80026a4 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d914      	bls.n	8005e9a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00d      	beq.n	8005e9a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e82:	f043 0210 	orr.w	r2, r3, #16
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8e:	f043 0201 	orr.w	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e007      	b.n	8005eaa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1dc      	bne.n	8005e62 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <LL_ADC_SetCalibrationFactor>:
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ec2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bc80      	pop	{r7}
 8005ed8:	4770      	bx	lr

08005eda <LL_ADC_GetCalibrationFactor>:
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr

08005ef6 <LL_ADC_Enable>:
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f06:	f023 0317 	bic.w	r3, r3, #23
 8005f0a:	f043 0201 	orr.w	r2, r3, #1
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	609a      	str	r2, [r3, #8]
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr

08005f1c <LL_ADC_Disable>:
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f2c:	f023 0317 	bic.w	r3, r3, #23
 8005f30:	f043 0202 	orr.w	r2, r3, #2
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	609a      	str	r2, [r3, #8]
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bc80      	pop	{r7}
 8005f40:	4770      	bx	lr

08005f42 <LL_ADC_IsEnabled>:
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d101      	bne.n	8005f5a <LL_ADC_IsEnabled+0x18>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <LL_ADC_IsEnabled+0x1a>
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bc80      	pop	{r7}
 8005f64:	4770      	bx	lr

08005f66 <LL_ADC_StartCalibration>:
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f76:	f023 0317 	bic.w	r3, r3, #23
 8005f7a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	609a      	str	r2, [r3, #8]
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr

08005f8c <LL_ADC_IsCalibrationOnGoing>:
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fa0:	d101      	bne.n	8005fa6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b088      	sub	sp, #32
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_ADCEx_Calibration_Start+0x1e>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e0b9      	b.n	8006144 <HAL_ADCEx_Calibration_Start+0x192>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff ff0b 	bl	8005df4 <ADC_Disable>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff ffab 	bl	8005f42 <LL_ADC_IsEnabled>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f040 809d 	bne.w	800612e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005ffc:	f043 0202 	orr.w	r2, r3, #2
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	f248 0303 	movw	r3, #32771	; 0x8003
 800600e:	4013      	ands	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006020:	f023 0303 	bic.w	r3, r3, #3
 8006024:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006026:	2300      	movs	r3, #0
 8006028:	61fb      	str	r3, [r7, #28]
 800602a:	e02e      	b.n	800608a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff ff98 	bl	8005f66 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006036:	e014      	b.n	8006062 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	3301      	adds	r3, #1
 800603c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8006044:	d30d      	bcc.n	8006062 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604a:	f023 0312 	bic.w	r3, r3, #18
 800604e:	f043 0210 	orr.w	r2, r3, #16
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e070      	b.n	8006144 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff ff90 	bl	8005f8c <LL_ADC_IsCalibrationOnGoing>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e2      	bne.n	8006038 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f7ff ff2f 	bl	8005eda <LL_ADC_GetCalibrationFactor>
 800607c:	4602      	mov	r2, r0
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	4413      	add	r3, r2
 8006082:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	3301      	adds	r3, #1
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	2b07      	cmp	r3, #7
 800608e:	d9cd      	bls.n	800602c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	fbb2 f3f3 	udiv	r3, r2, r3
 8006098:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff ff29 	bl	8005ef6 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69b9      	ldr	r1, [r7, #24]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff ff01 	bl	8005eb2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff ff31 	bl	8005f1c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80060ba:	f7fc faf3 	bl	80026a4 <HAL_GetTick>
 80060be:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80060c0:	e01c      	b.n	80060fc <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80060c2:	f7fc faef 	bl	80026a4 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d915      	bls.n	80060fc <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff ff34 	bl	8005f42 <LL_ADC_IsEnabled>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00d      	beq.n	80060fc <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e4:	f043 0210 	orr.w	r2, r3, #16
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f0:	f043 0201 	orr.w	r2, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e023      	b.n	8006144 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff ff1e 	bl	8005f42 <LL_ADC_IsEnabled>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1da      	bne.n	80060c2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68d9      	ldr	r1, [r3, #12]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	430a      	orrs	r2, r1
 800611a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006120:	f023 0303 	bic.w	r3, r3, #3
 8006124:	f043 0201 	orr.w	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	659a      	str	r2, [r3, #88]	; 0x58
 800612c:	e005      	b.n	800613a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006132:	f043 0210 	orr.w	r2, r3, #16
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8006142:	7dfb      	ldrb	r3, [r7, #23]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3720      	adds	r7, #32
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800615c:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <__NVIC_SetPriorityGrouping+0x44>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006168:	4013      	ands	r3, r2
 800616a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800617c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800617e:	4a04      	ldr	r2, [pc, #16]	; (8006190 <__NVIC_SetPriorityGrouping+0x44>)
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	60d3      	str	r3, [r2, #12]
}
 8006184:	bf00      	nop
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	e000ed00 	.word	0xe000ed00

08006194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006198:	4b04      	ldr	r3, [pc, #16]	; (80061ac <__NVIC_GetPriorityGrouping+0x18>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	0a1b      	lsrs	r3, r3, #8
 800619e:	f003 0307 	and.w	r3, r3, #7
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	e000ed00 	.word	0xe000ed00

080061b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	db0b      	blt.n	80061da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	f003 021f 	and.w	r2, r3, #31
 80061c8:	4906      	ldr	r1, [pc, #24]	; (80061e4 <__NVIC_EnableIRQ+0x34>)
 80061ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	2001      	movs	r0, #1
 80061d2:	fa00 f202 	lsl.w	r2, r0, r2
 80061d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	bc80      	pop	{r7}
 80061e2:	4770      	bx	lr
 80061e4:	e000e100 	.word	0xe000e100

080061e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	db12      	blt.n	8006220 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	f003 021f 	and.w	r2, r3, #31
 8006200:	490a      	ldr	r1, [pc, #40]	; (800622c <__NVIC_DisableIRQ+0x44>)
 8006202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	2001      	movs	r0, #1
 800620a:	fa00 f202 	lsl.w	r2, r0, r2
 800620e:	3320      	adds	r3, #32
 8006210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006214:	f3bf 8f4f 	dsb	sy
}
 8006218:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800621a:	f3bf 8f6f 	isb	sy
}
 800621e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	e000e100 	.word	0xe000e100

08006230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	4603      	mov	r3, r0
 8006238:	6039      	str	r1, [r7, #0]
 800623a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800623c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006240:	2b00      	cmp	r3, #0
 8006242:	db0a      	blt.n	800625a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	b2da      	uxtb	r2, r3
 8006248:	490c      	ldr	r1, [pc, #48]	; (800627c <__NVIC_SetPriority+0x4c>)
 800624a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800624e:	0112      	lsls	r2, r2, #4
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	440b      	add	r3, r1
 8006254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006258:	e00a      	b.n	8006270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	b2da      	uxtb	r2, r3
 800625e:	4908      	ldr	r1, [pc, #32]	; (8006280 <__NVIC_SetPriority+0x50>)
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	3b04      	subs	r3, #4
 8006268:	0112      	lsls	r2, r2, #4
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	440b      	add	r3, r1
 800626e:	761a      	strb	r2, [r3, #24]
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	bc80      	pop	{r7}
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	e000e100 	.word	0xe000e100
 8006280:	e000ed00 	.word	0xe000ed00

08006284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006284:	b480      	push	{r7}
 8006286:	b089      	sub	sp, #36	; 0x24
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	f1c3 0307 	rsb	r3, r3, #7
 800629e:	2b04      	cmp	r3, #4
 80062a0:	bf28      	it	cs
 80062a2:	2304      	movcs	r3, #4
 80062a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	3304      	adds	r3, #4
 80062aa:	2b06      	cmp	r3, #6
 80062ac:	d902      	bls.n	80062b4 <NVIC_EncodePriority+0x30>
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	3b03      	subs	r3, #3
 80062b2:	e000      	b.n	80062b6 <NVIC_EncodePriority+0x32>
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062b8:	f04f 32ff 	mov.w	r2, #4294967295
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	fa02 f303 	lsl.w	r3, r2, r3
 80062c2:	43da      	mvns	r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	401a      	ands	r2, r3
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062cc:	f04f 31ff 	mov.w	r1, #4294967295
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	fa01 f303 	lsl.w	r3, r1, r3
 80062d6:	43d9      	mvns	r1, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062dc:	4313      	orrs	r3, r2
         );
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3724      	adds	r7, #36	; 0x24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bc80      	pop	{r7}
 80062e6:	4770      	bx	lr

080062e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff ff2b 	bl	800614c <__NVIC_SetPriorityGrouping>
}
 80062f6:	bf00      	nop
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b086      	sub	sp, #24
 8006302:	af00      	add	r7, sp, #0
 8006304:	4603      	mov	r3, r0
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	607a      	str	r2, [r7, #4]
 800630a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800630c:	f7ff ff42 	bl	8006194 <__NVIC_GetPriorityGrouping>
 8006310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	6978      	ldr	r0, [r7, #20]
 8006318:	f7ff ffb4 	bl	8006284 <NVIC_EncodePriority>
 800631c:	4602      	mov	r2, r0
 800631e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006322:	4611      	mov	r1, r2
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff ff83 	bl	8006230 <__NVIC_SetPriority>
}
 800632a:	bf00      	nop
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	4603      	mov	r3, r0
 800633a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800633c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff ff35 	bl	80061b0 <__NVIC_EnableIRQ>
}
 8006346:	bf00      	nop
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	4603      	mov	r3, r0
 8006356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff ff43 	bl	80061e8 <__NVIC_DisableIRQ>
}
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e08e      	b.n	800649c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	4b47      	ldr	r3, [pc, #284]	; (80064a4 <HAL_DMA_Init+0x138>)
 8006386:	429a      	cmp	r2, r3
 8006388:	d80f      	bhi.n	80063aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	4b45      	ldr	r3, [pc, #276]	; (80064a8 <HAL_DMA_Init+0x13c>)
 8006392:	4413      	add	r3, r2
 8006394:	4a45      	ldr	r2, [pc, #276]	; (80064ac <HAL_DMA_Init+0x140>)
 8006396:	fba2 2303 	umull	r2, r3, r2, r3
 800639a:	091b      	lsrs	r3, r3, #4
 800639c:	009a      	lsls	r2, r3, #2
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a42      	ldr	r2, [pc, #264]	; (80064b0 <HAL_DMA_Init+0x144>)
 80063a6:	641a      	str	r2, [r3, #64]	; 0x40
 80063a8:	e00e      	b.n	80063c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	4b40      	ldr	r3, [pc, #256]	; (80064b4 <HAL_DMA_Init+0x148>)
 80063b2:	4413      	add	r3, r2
 80063b4:	4a3d      	ldr	r2, [pc, #244]	; (80064ac <HAL_DMA_Init+0x140>)
 80063b6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ba:	091b      	lsrs	r3, r3, #4
 80063bc:	009a      	lsls	r2, r3, #2
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a3c      	ldr	r2, [pc, #240]	; (80064b8 <HAL_DMA_Init+0x14c>)
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6812      	ldr	r2, [r2, #0]
 80063da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6819      	ldr	r1, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	431a      	orrs	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	431a      	orrs	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fb24 	bl	8006a68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006428:	d102      	bne.n	8006430 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006438:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800643c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006446:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d010      	beq.n	8006472 <HAL_DMA_Init+0x106>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b04      	cmp	r3, #4
 8006456:	d80c      	bhi.n	8006472 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fb4d 	bl	8006af8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800646e:	605a      	str	r2, [r3, #4]
 8006470:	e008      	b.n	8006484 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40020407 	.word	0x40020407
 80064a8:	bffdfff8 	.word	0xbffdfff8
 80064ac:	cccccccd 	.word	0xcccccccd
 80064b0:	40020000 	.word	0x40020000
 80064b4:	bffdfbf8 	.word	0xbffdfbf8
 80064b8:	40020400 	.word	0x40020400

080064bc <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e07b      	b.n	80065c6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0201 	bic.w	r2, r2, #1
 80064dc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	4b3a      	ldr	r3, [pc, #232]	; (80065d0 <HAL_DMA_DeInit+0x114>)
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d80f      	bhi.n	800650a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	4b38      	ldr	r3, [pc, #224]	; (80065d4 <HAL_DMA_DeInit+0x118>)
 80064f2:	4413      	add	r3, r2
 80064f4:	4a38      	ldr	r2, [pc, #224]	; (80065d8 <HAL_DMA_DeInit+0x11c>)
 80064f6:	fba2 2303 	umull	r2, r3, r2, r3
 80064fa:	091b      	lsrs	r3, r3, #4
 80064fc:	009a      	lsls	r2, r3, #2
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a35      	ldr	r2, [pc, #212]	; (80065dc <HAL_DMA_DeInit+0x120>)
 8006506:	641a      	str	r2, [r3, #64]	; 0x40
 8006508:	e00e      	b.n	8006528 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	4b33      	ldr	r3, [pc, #204]	; (80065e0 <HAL_DMA_DeInit+0x124>)
 8006512:	4413      	add	r3, r2
 8006514:	4a30      	ldr	r2, [pc, #192]	; (80065d8 <HAL_DMA_DeInit+0x11c>)
 8006516:	fba2 2303 	umull	r2, r3, r2, r3
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	009a      	lsls	r2, r3, #2
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a2f      	ldr	r2, [pc, #188]	; (80065e4 <HAL_DMA_DeInit+0x128>)
 8006526:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006534:	f003 021c 	and.w	r2, r3, #28
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	2101      	movs	r1, #1
 800653e:	fa01 f202 	lsl.w	r2, r1, r2
 8006542:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fa8f 	bl	8006a68 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800655a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00f      	beq.n	8006584 <HAL_DMA_DeInit+0xc8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2b04      	cmp	r3, #4
 800656a:	d80b      	bhi.n	8006584 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fac3 	bl	8006af8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006582:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40020407 	.word	0x40020407
 80065d4:	bffdfff8 	.word	0xbffdfff8
 80065d8:	cccccccd 	.word	0xcccccccd
 80065dc:	40020000 	.word	0x40020000
 80065e0:	bffdfbf8 	.word	0xbffdfbf8
 80065e4:	40020400 	.word	0x40020400

080065e8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_DMA_Start_IT+0x20>
 8006604:	2302      	movs	r3, #2
 8006606:	e069      	b.n	80066dc <HAL_DMA_Start_IT+0xf4>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b01      	cmp	r3, #1
 800661a:	d155      	bne.n	80066c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0201 	bic.w	r2, r2, #1
 8006638:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	68b9      	ldr	r1, [r7, #8]
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 f9d3 	bl	80069ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664a:	2b00      	cmp	r3, #0
 800664c:	d008      	beq.n	8006660 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f042 020e 	orr.w	r2, r2, #14
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	e00f      	b.n	8006680 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0204 	bic.w	r2, r2, #4
 800666e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 020a 	orr.w	r2, r2, #10
 800667e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d007      	beq.n	800669e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800669c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d007      	beq.n	80066b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0201 	orr.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	e008      	b.n	80066da <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2280      	movs	r2, #128	; 0x80
 80066cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80066da:	7dfb      	ldrb	r3, [r7, #23]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3718      	adds	r7, #24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e04f      	b.n	8006796 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d008      	beq.n	8006714 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2204      	movs	r2, #4
 8006706:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e040      	b.n	8006796 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 020e 	bic.w	r2, r2, #14
 8006722:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800672e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006732:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0201 	bic.w	r2, r2, #1
 8006742:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006748:	f003 021c 	and.w	r2, r3, #28
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006750:	2101      	movs	r1, #1
 8006752:	fa01 f202 	lsl.w	r2, r1, r2
 8006756:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006760:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00c      	beq.n	8006784 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006778:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006782:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d005      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2204      	movs	r2, #4
 80067bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	73fb      	strb	r3, [r7, #15]
 80067c2:	e047      	b.n	8006854 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 020e 	bic.w	r2, r2, #14
 80067d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0201 	bic.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f8:	f003 021c 	and.w	r2, r3, #28
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006800:	2101      	movs	r1, #1
 8006802:	fa01 f202 	lsl.w	r2, r1, r2
 8006806:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006810:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00c      	beq.n	8006834 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006828:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006832:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
    }
  }
  return status;
 8006854:	7bfb      	ldrb	r3, [r7, #15]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687c:	f003 031c 	and.w	r3, r3, #28
 8006880:	2204      	movs	r2, #4
 8006882:	409a      	lsls	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4013      	ands	r3, r2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d027      	beq.n	80068dc <HAL_DMA_IRQHandler+0x7c>
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d022      	beq.n	80068dc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d107      	bne.n	80068b4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0204 	bic.w	r2, r2, #4
 80068b2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b8:	f003 021c 	and.w	r2, r3, #28
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	2104      	movs	r1, #4
 80068c2:	fa01 f202 	lsl.w	r2, r1, r2
 80068c6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8081 	beq.w	80069d4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80068da:	e07b      	b.n	80069d4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e0:	f003 031c 	and.w	r3, r3, #28
 80068e4:	2202      	movs	r2, #2
 80068e6:	409a      	lsls	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d03d      	beq.n	800696c <HAL_DMA_IRQHandler+0x10c>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d038      	beq.n	800696c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10b      	bne.n	8006920 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 020a 	bic.w	r2, r2, #10
 8006916:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	4b2e      	ldr	r3, [pc, #184]	; (80069e0 <HAL_DMA_IRQHandler+0x180>)
 8006928:	429a      	cmp	r2, r3
 800692a:	d909      	bls.n	8006940 <HAL_DMA_IRQHandler+0xe0>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006930:	f003 031c 	and.w	r3, r3, #28
 8006934:	4a2b      	ldr	r2, [pc, #172]	; (80069e4 <HAL_DMA_IRQHandler+0x184>)
 8006936:	2102      	movs	r1, #2
 8006938:	fa01 f303 	lsl.w	r3, r1, r3
 800693c:	6053      	str	r3, [r2, #4]
 800693e:	e008      	b.n	8006952 <HAL_DMA_IRQHandler+0xf2>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006944:	f003 031c 	and.w	r3, r3, #28
 8006948:	4a27      	ldr	r2, [pc, #156]	; (80069e8 <HAL_DMA_IRQHandler+0x188>)
 800694a:	2102      	movs	r1, #2
 800694c:	fa01 f303 	lsl.w	r3, r1, r3
 8006950:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d038      	beq.n	80069d4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800696a:	e033      	b.n	80069d4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006970:	f003 031c 	and.w	r3, r3, #28
 8006974:	2208      	movs	r2, #8
 8006976:	409a      	lsls	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4013      	ands	r3, r2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d02a      	beq.n	80069d6 <HAL_DMA_IRQHandler+0x176>
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d025      	beq.n	80069d6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 020e 	bic.w	r2, r2, #14
 8006998:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699e:	f003 021c 	and.w	r2, r3, #28
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	2101      	movs	r1, #1
 80069a8:	fa01 f202 	lsl.w	r2, r1, r2
 80069ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d004      	beq.n	80069d6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
}
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	40020080 	.word	0x40020080
 80069e4:	40020400 	.word	0x40020400
 80069e8:	40020000 	.word	0x40020000

080069ec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006a02:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006a14:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1a:	f003 021c 	and.w	r2, r3, #28
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	2101      	movs	r1, #1
 8006a24:	fa01 f202 	lsl.w	r2, r1, r2
 8006a28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	2b10      	cmp	r3, #16
 8006a38:	d108      	bne.n	8006a4c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006a4a:	e007      	b.n	8006a5c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	60da      	str	r2, [r3, #12]
}
 8006a5c:	bf00      	nop
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bc80      	pop	{r7}
 8006a64:	4770      	bx	lr
	...

08006a68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	4b1c      	ldr	r3, [pc, #112]	; (8006ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d813      	bhi.n	8006aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a80:	089b      	lsrs	r3, r3, #2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a88:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	3b08      	subs	r3, #8
 8006a98:	4a14      	ldr	r2, [pc, #80]	; (8006aec <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8006a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9e:	091b      	lsrs	r3, r3, #4
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	e011      	b.n	8006ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa8:	089b      	lsrs	r3, r3, #2
 8006aaa:	009a      	lsls	r2, r3, #2
 8006aac:	4b10      	ldr	r3, [pc, #64]	; (8006af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8006aae:	4413      	add	r3, r2
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	3b08      	subs	r3, #8
 8006abc:	4a0b      	ldr	r2, [pc, #44]	; (8006aec <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8006abe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac2:	091b      	lsrs	r3, r3, #4
 8006ac4:	3307      	adds	r3, #7
 8006ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a0a      	ldr	r2, [pc, #40]	; (8006af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8006acc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f003 031f 	and.w	r3, r3, #31
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006adc:	bf00      	nop
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40020407 	.word	0x40020407
 8006aec:	cccccccd 	.word	0xcccccccd
 8006af0:	4002081c 	.word	0x4002081c
 8006af4:	40020880 	.word	0x40020880

08006af8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b08:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	461a      	mov	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a08      	ldr	r2, [pc, #32]	; (8006b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006b1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	2201      	movs	r2, #1
 8006b28:	409a      	lsls	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006b2e:	bf00      	nop
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr
 8006b38:	1000823f 	.word	0x1000823f
 8006b3c:	40020940 	.word	0x40020940

08006b40 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006b4e:	4b1c      	ldr	r3, [pc, #112]	; (8006bc0 <HAL_FLASH_Program+0x80>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d101      	bne.n	8006b5a <HAL_FLASH_Program+0x1a>
 8006b56:	2302      	movs	r3, #2
 8006b58:	e02d      	b.n	8006bb6 <HAL_FLASH_Program+0x76>
 8006b5a:	4b19      	ldr	r3, [pc, #100]	; (8006bc0 <HAL_FLASH_Program+0x80>)
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006b60:	4b17      	ldr	r3, [pc, #92]	; (8006bc0 <HAL_FLASH_Program+0x80>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006b66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b6a:	f000 f869 	bl	8006c40 <FLASH_WaitForLastOperation>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006b72:	7dfb      	ldrb	r3, [r7, #23]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d11a      	bne.n	8006bae <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d105      	bne.n	8006b8a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b82:	68b8      	ldr	r0, [r7, #8]
 8006b84:	f000 f8be 	bl	8006d04 <FLASH_Program_DoubleWord>
 8006b88:	e004      	b.n	8006b94 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	68b8      	ldr	r0, [r7, #8]
 8006b90:	f000 f8de 	bl	8006d50 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006b94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b98:	f000 f852 	bl	8006c40 <FLASH_WaitForLastOperation>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8006ba0:	4b08      	ldr	r3, [pc, #32]	; (8006bc4 <HAL_FLASH_Program+0x84>)
 8006ba2:	695a      	ldr	r2, [r3, #20]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	43db      	mvns	r3, r3
 8006ba8:	4906      	ldr	r1, [pc, #24]	; (8006bc4 <HAL_FLASH_Program+0x84>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006bae:	4b04      	ldr	r3, [pc, #16]	; (8006bc0 <HAL_FLASH_Program+0x80>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	200003c8 	.word	0x200003c8
 8006bc4:	58004000 	.word	0x58004000

08006bc8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006bd2:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <HAL_FLASH_Unlock+0x38>)
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	da0b      	bge.n	8006bf2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006bda:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <HAL_FLASH_Unlock+0x38>)
 8006bdc:	4a09      	ldr	r2, [pc, #36]	; (8006c04 <HAL_FLASH_Unlock+0x3c>)
 8006bde:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006be0:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <HAL_FLASH_Unlock+0x38>)
 8006be2:	4a09      	ldr	r2, [pc, #36]	; (8006c08 <HAL_FLASH_Unlock+0x40>)
 8006be4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006be6:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <HAL_FLASH_Unlock+0x38>)
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	da01      	bge.n	8006bf2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bc80      	pop	{r7}
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	58004000 	.word	0x58004000
 8006c04:	45670123 	.word	0x45670123
 8006c08:	cdef89ab 	.word	0xcdef89ab

08006c0c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006c16:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <HAL_FLASH_Lock+0x30>)
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <HAL_FLASH_Lock+0x30>)
 8006c1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c20:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8006c22:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <HAL_FLASH_Lock+0x30>)
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	db01      	blt.n	8006c2e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	58004000 	.word	0x58004000

08006c40 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8006c48:	f7fb fd2c 	bl	80026a4 <HAL_GetTick>
 8006c4c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006c4e:	e009      	b.n	8006c64 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8006c50:	f7fb fd28 	bl	80026a4 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d801      	bhi.n	8006c64 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e047      	b.n	8006cf4 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006c64:	4b25      	ldr	r3, [pc, #148]	; (8006cfc <FLASH_WaitForLastOperation+0xbc>)
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c70:	d0ee      	beq.n	8006c50 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8006c72:	4b22      	ldr	r3, [pc, #136]	; (8006cfc <FLASH_WaitForLastOperation+0xbc>)
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006c82:	4b1e      	ldr	r3, [pc, #120]	; (8006cfc <FLASH_WaitForLastOperation+0xbc>)
 8006c84:	2201      	movs	r2, #1
 8006c86:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8006c8e:	4013      	ands	r3, r2
 8006c90:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d007      	beq.n	8006cac <FLASH_WaitForLastOperation+0x6c>
 8006c9c:	4b17      	ldr	r3, [pc, #92]	; (8006cfc <FLASH_WaitForLastOperation+0xbc>)
 8006c9e:	699a      	ldr	r2, [r3, #24]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006ca6:	4915      	ldr	r1, [pc, #84]	; (8006cfc <FLASH_WaitForLastOperation+0xbc>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	618b      	str	r3, [r1, #24]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <FLASH_WaitForLastOperation+0x80>
 8006cb6:	4a11      	ldr	r2, [pc, #68]	; (8006cfc <FLASH_WaitForLastOperation+0xbc>)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006cbe:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00e      	beq.n	8006ce4 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8006cc6:	4a0e      	ldr	r2, [pc, #56]	; (8006d00 <FLASH_WaitForLastOperation+0xc0>)
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e011      	b.n	8006cf4 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8006cd0:	f7fb fce8 	bl	80026a4 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d801      	bhi.n	8006ce4 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e007      	b.n	8006cf4 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8006ce4:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <FLASH_WaitForLastOperation+0xbc>)
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cf0:	d0ee      	beq.n	8006cd0 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	58004000 	.word	0x58004000
 8006d00:	200003c8 	.word	0x200003c8

08006d04 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006d10:	4b0e      	ldr	r3, [pc, #56]	; (8006d4c <FLASH_Program_DoubleWord+0x48>)
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	4a0d      	ldr	r2, [pc, #52]	; (8006d4c <FLASH_Program_DoubleWord+0x48>)
 8006d16:	f043 0301 	orr.w	r3, r3, #1
 8006d1a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006d22:	f3bf 8f6f 	isb	sy
}
 8006d26:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8006d28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d2c:	f04f 0200 	mov.w	r2, #0
 8006d30:	f04f 0300 	mov.w	r3, #0
 8006d34:	000a      	movs	r2, r1
 8006d36:	2300      	movs	r3, #0
 8006d38:	68f9      	ldr	r1, [r7, #12]
 8006d3a:	3104      	adds	r1, #4
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	600b      	str	r3, [r1, #0]
}
 8006d40:	bf00      	nop
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	58004000 	.word	0x58004000

08006d50 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8006d50:	b480      	push	{r7}
 8006d52:	b089      	sub	sp, #36	; 0x24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006d5a:	2340      	movs	r3, #64	; 0x40
 8006d5c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006d66:	4b18      	ldr	r3, [pc, #96]	; (8006dc8 <FLASH_Program_Fast+0x78>)
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	4a17      	ldr	r2, [pc, #92]	; (8006dc8 <FLASH_Program_Fast+0x78>)
 8006d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d70:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d72:	f3ef 8310 	mrs	r3, PRIMASK
 8006d76:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d78:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8006d7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006d7c:	b672      	cpsid	i
}
 8006d7e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	3304      	adds	r3, #4
 8006d92:	617b      	str	r3, [r7, #20]
    row_index--;
 8006d94:	7ffb      	ldrb	r3, [r7, #31]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8006d9a:	7ffb      	ldrb	r3, [r7, #31]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1ef      	bne.n	8006d80 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8006da0:	bf00      	nop
 8006da2:	4b09      	ldr	r3, [pc, #36]	; (8006dc8 <FLASH_Program_Fast+0x78>)
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dae:	d0f8      	beq.n	8006da2 <FLASH_Program_Fast+0x52>
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f383 8810 	msr	PRIMASK, r3
}
 8006dba:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006dbc:	bf00      	nop
 8006dbe:	3724      	adds	r7, #36	; 0x24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bc80      	pop	{r7}
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	58004000 	.word	0x58004000

08006dcc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006dd6:	4b28      	ldr	r3, [pc, #160]	; (8006e78 <HAL_FLASHEx_Erase+0xac>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_FLASHEx_Erase+0x16>
 8006dde:	2302      	movs	r3, #2
 8006de0:	e046      	b.n	8006e70 <HAL_FLASHEx_Erase+0xa4>
 8006de2:	4b25      	ldr	r3, [pc, #148]	; (8006e78 <HAL_FLASHEx_Erase+0xac>)
 8006de4:	2201      	movs	r2, #1
 8006de6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006de8:	4b23      	ldr	r3, [pc, #140]	; (8006e78 <HAL_FLASHEx_Erase+0xac>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006dee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006df2:	f7ff ff25 	bl	8006c40 <FLASH_WaitForLastOperation>
 8006df6:	4603      	mov	r3, r0
 8006df8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d133      	bne.n	8006e68 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d108      	bne.n	8006e1a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8006e08:	f000 f838 	bl	8006e7c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e10:	f7ff ff16 	bl	8006c40 <FLASH_WaitForLastOperation>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73fb      	strb	r3, [r7, #15]
 8006e18:	e024      	b.n	8006e64 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e20:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	60bb      	str	r3, [r7, #8]
 8006e28:	e012      	b.n	8006e50 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8006e2a:	68b8      	ldr	r0, [r7, #8]
 8006e2c:	f000 f836 	bl	8006e9c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e34:	f7ff ff04 	bl	8006c40 <FLASH_WaitForLastOperation>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	601a      	str	r2, [r3, #0]
          break;
 8006e48:	e00a      	b.n	8006e60 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	60bb      	str	r3, [r7, #8]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	4413      	add	r3, r2
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d3e4      	bcc.n	8006e2a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8006e60:	f000 f878 	bl	8006f54 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006e64:	f000 f832 	bl	8006ecc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006e68:	4b03      	ldr	r3, [pc, #12]	; (8006e78 <HAL_FLASHEx_Erase+0xac>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]

  return status;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	200003c8 	.word	0x200003c8

08006e7c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8006e80:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <FLASH_MassErase+0x1c>)
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	4a04      	ldr	r2, [pc, #16]	; (8006e98 <FLASH_MassErase+0x1c>)
 8006e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e8a:	f043 0304 	orr.w	r3, r3, #4
 8006e8e:	6153      	str	r3, [r2, #20]
#endif
}
 8006e90:	bf00      	nop
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr
 8006e98:	58004000 	.word	0x58004000

08006e9c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8006ea4:	4b08      	ldr	r3, [pc, #32]	; (8006ec8 <FLASH_PageErase+0x2c>)
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	4a05      	ldr	r2, [pc, #20]	; (8006ec8 <FLASH_PageErase+0x2c>)
 8006eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eb8:	f043 0302 	orr.w	r3, r3, #2
 8006ebc:	6153      	str	r3, [r2, #20]
#endif
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr
 8006ec8:	58004000 	.word	0x58004000

08006ecc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8006ed0:	4b1f      	ldr	r3, [pc, #124]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d117      	bne.n	8006f0c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006edc:	4b1c      	ldr	r3, [pc, #112]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a1b      	ldr	r2, [pc, #108]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006ee2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ee6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006ee8:	4b19      	ldr	r3, [pc, #100]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a18      	ldr	r2, [pc, #96]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006eee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	4b16      	ldr	r3, [pc, #88]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a15      	ldr	r2, [pc, #84]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006efe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006f00:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a12      	ldr	r2, [pc, #72]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f0a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8006f0c:	4b10      	ldr	r3, [pc, #64]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d117      	bne.n	8006f48 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006f18:	4b0d      	ldr	r3, [pc, #52]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a0c      	ldr	r2, [pc, #48]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006f1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f22:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006f24:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a09      	ldr	r2, [pc, #36]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006f2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a06      	ldr	r2, [pc, #24]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006f36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f3a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006f3c:	4b04      	ldr	r3, [pc, #16]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a03      	ldr	r2, [pc, #12]	; (8006f50 <FLASH_FlushCaches+0x84>)
 8006f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f46:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8006f48:	bf00      	nop
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bc80      	pop	{r7}
 8006f4e:	4770      	bx	lr
 8006f50:	58004000 	.word	0x58004000

08006f54 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006f58:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <FLASH_AcknowledgePageErase+0x1c>)
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	4a04      	ldr	r2, [pc, #16]	; (8006f70 <FLASH_AcknowledgePageErase+0x1c>)
 8006f5e:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8006f62:	f023 0302 	bic.w	r3, r3, #2
 8006f66:	6153      	str	r3, [r2, #20]
#endif
}
 8006f68:	bf00      	nop
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr
 8006f70:	58004000 	.word	0x58004000

08006f74 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f82:	e140      	b.n	8007206 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	2101      	movs	r1, #1
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f90:	4013      	ands	r3, r2
 8006f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 8132 	beq.w	8007200 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f003 0303 	and.w	r3, r3, #3
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d005      	beq.n	8006fb4 <HAL_GPIO_Init+0x40>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f003 0303 	and.w	r3, r3, #3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d130      	bne.n	8007016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	2203      	movs	r2, #3
 8006fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc4:	43db      	mvns	r3, r3
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006fea:	2201      	movs	r2, #1
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff2:	43db      	mvns	r3, r3
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	091b      	lsrs	r3, r3, #4
 8007000:	f003 0201 	and.w	r2, r3, #1
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	fa02 f303 	lsl.w	r3, r2, r3
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	4313      	orrs	r3, r2
 800700e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	2b03      	cmp	r3, #3
 8007020:	d017      	beq.n	8007052 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	2203      	movs	r2, #3
 800702e:	fa02 f303 	lsl.w	r3, r2, r3
 8007032:	43db      	mvns	r3, r3
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	4013      	ands	r3, r2
 8007038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	689a      	ldr	r2, [r3, #8]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	fa02 f303 	lsl.w	r3, r2, r3
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f003 0303 	and.w	r3, r3, #3
 800705a:	2b02      	cmp	r3, #2
 800705c:	d123      	bne.n	80070a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	08da      	lsrs	r2, r3, #3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3208      	adds	r2, #8
 8007066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f003 0307 	and.w	r3, r3, #7
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	220f      	movs	r2, #15
 8007076:	fa02 f303 	lsl.w	r3, r2, r3
 800707a:	43db      	mvns	r3, r3
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4013      	ands	r3, r2
 8007080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	691a      	ldr	r2, [r3, #16]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f003 0307 	and.w	r3, r3, #7
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	fa02 f303 	lsl.w	r3, r2, r3
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	08da      	lsrs	r2, r3, #3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3208      	adds	r2, #8
 80070a0:	6939      	ldr	r1, [r7, #16]
 80070a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	2203      	movs	r2, #3
 80070b2:	fa02 f303 	lsl.w	r3, r2, r3
 80070b6:	43db      	mvns	r3, r3
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4013      	ands	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f003 0203 	and.w	r2, r3, #3
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	fa02 f303 	lsl.w	r3, r2, r3
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 808c 	beq.w	8007200 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80070e8:	4a4e      	ldr	r2, [pc, #312]	; (8007224 <HAL_GPIO_Init+0x2b0>)
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	089b      	lsrs	r3, r3, #2
 80070ee:	3302      	adds	r3, #2
 80070f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f003 0303 	and.w	r3, r3, #3
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	2207      	movs	r2, #7
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	43db      	mvns	r3, r3
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4013      	ands	r3, r2
 800710a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007112:	d00d      	beq.n	8007130 <HAL_GPIO_Init+0x1bc>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a44      	ldr	r2, [pc, #272]	; (8007228 <HAL_GPIO_Init+0x2b4>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d007      	beq.n	800712c <HAL_GPIO_Init+0x1b8>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a43      	ldr	r2, [pc, #268]	; (800722c <HAL_GPIO_Init+0x2b8>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d101      	bne.n	8007128 <HAL_GPIO_Init+0x1b4>
 8007124:	2302      	movs	r3, #2
 8007126:	e004      	b.n	8007132 <HAL_GPIO_Init+0x1be>
 8007128:	2307      	movs	r3, #7
 800712a:	e002      	b.n	8007132 <HAL_GPIO_Init+0x1be>
 800712c:	2301      	movs	r3, #1
 800712e:	e000      	b.n	8007132 <HAL_GPIO_Init+0x1be>
 8007130:	2300      	movs	r3, #0
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	f002 0203 	and.w	r2, r2, #3
 8007138:	0092      	lsls	r2, r2, #2
 800713a:	4093      	lsls	r3, r2
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007142:	4938      	ldr	r1, [pc, #224]	; (8007224 <HAL_GPIO_Init+0x2b0>)
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	089b      	lsrs	r3, r3, #2
 8007148:	3302      	adds	r3, #2
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007150:	4b37      	ldr	r3, [pc, #220]	; (8007230 <HAL_GPIO_Init+0x2bc>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	43db      	mvns	r3, r3
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	4013      	ands	r3, r2
 800715e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4313      	orrs	r3, r2
 8007172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007174:	4a2e      	ldr	r2, [pc, #184]	; (8007230 <HAL_GPIO_Init+0x2bc>)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800717a:	4b2d      	ldr	r3, [pc, #180]	; (8007230 <HAL_GPIO_Init+0x2bc>)
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	43db      	mvns	r3, r3
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	4013      	ands	r3, r2
 8007188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4313      	orrs	r3, r2
 800719c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800719e:	4a24      	ldr	r2, [pc, #144]	; (8007230 <HAL_GPIO_Init+0x2bc>)
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80071a4:	4b22      	ldr	r3, [pc, #136]	; (8007230 <HAL_GPIO_Init+0x2bc>)
 80071a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071aa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	43db      	mvns	r3, r3
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4013      	ands	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80071ca:	4a19      	ldr	r2, [pc, #100]	; (8007230 <HAL_GPIO_Init+0x2bc>)
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80071d2:	4b17      	ldr	r3, [pc, #92]	; (8007230 <HAL_GPIO_Init+0x2bc>)
 80071d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	43db      	mvns	r3, r3
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4013      	ands	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80071f8:	4a0d      	ldr	r2, [pc, #52]	; (8007230 <HAL_GPIO_Init+0x2bc>)
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	3301      	adds	r3, #1
 8007204:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	fa22 f303 	lsr.w	r3, r2, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	f47f aeb7 	bne.w	8006f84 <HAL_GPIO_Init+0x10>
  }
}
 8007216:	bf00      	nop
 8007218:	bf00      	nop
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	40010000 	.word	0x40010000
 8007228:	48000400 	.word	0x48000400
 800722c:	48000800 	.word	0x48000800
 8007230:	58000800 	.word	0x58000800

08007234 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800723e:	2300      	movs	r3, #0
 8007240:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007242:	e0af      	b.n	80073a4 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007244:	2201      	movs	r2, #1
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	fa02 f303 	lsl.w	r3, r2, r3
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	4013      	ands	r3, r2
 8007250:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80a2 	beq.w	800739e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800725a:	4a59      	ldr	r2, [pc, #356]	; (80073c0 <HAL_GPIO_DeInit+0x18c>)
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	089b      	lsrs	r3, r3, #2
 8007260:	3302      	adds	r3, #2
 8007262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007266:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	2207      	movs	r2, #7
 8007272:	fa02 f303 	lsl.w	r3, r2, r3
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4013      	ands	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007282:	d00d      	beq.n	80072a0 <HAL_GPIO_DeInit+0x6c>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a4f      	ldr	r2, [pc, #316]	; (80073c4 <HAL_GPIO_DeInit+0x190>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d007      	beq.n	800729c <HAL_GPIO_DeInit+0x68>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a4e      	ldr	r2, [pc, #312]	; (80073c8 <HAL_GPIO_DeInit+0x194>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d101      	bne.n	8007298 <HAL_GPIO_DeInit+0x64>
 8007294:	2302      	movs	r3, #2
 8007296:	e004      	b.n	80072a2 <HAL_GPIO_DeInit+0x6e>
 8007298:	2307      	movs	r3, #7
 800729a:	e002      	b.n	80072a2 <HAL_GPIO_DeInit+0x6e>
 800729c:	2301      	movs	r3, #1
 800729e:	e000      	b.n	80072a2 <HAL_GPIO_DeInit+0x6e>
 80072a0:	2300      	movs	r3, #0
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	f002 0203 	and.w	r2, r2, #3
 80072a8:	0092      	lsls	r2, r2, #2
 80072aa:	4093      	lsls	r3, r2
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d136      	bne.n	8007320 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80072b2:	4b46      	ldr	r3, [pc, #280]	; (80073cc <HAL_GPIO_DeInit+0x198>)
 80072b4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	43db      	mvns	r3, r3
 80072bc:	4943      	ldr	r1, [pc, #268]	; (80073cc <HAL_GPIO_DeInit+0x198>)
 80072be:	4013      	ands	r3, r2
 80072c0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80072c4:	4b41      	ldr	r3, [pc, #260]	; (80073cc <HAL_GPIO_DeInit+0x198>)
 80072c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	43db      	mvns	r3, r3
 80072ce:	493f      	ldr	r1, [pc, #252]	; (80073cc <HAL_GPIO_DeInit+0x198>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80072d6:	4b3d      	ldr	r3, [pc, #244]	; (80073cc <HAL_GPIO_DeInit+0x198>)
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	43db      	mvns	r3, r3
 80072de:	493b      	ldr	r1, [pc, #236]	; (80073cc <HAL_GPIO_DeInit+0x198>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80072e4:	4b39      	ldr	r3, [pc, #228]	; (80073cc <HAL_GPIO_DeInit+0x198>)
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	43db      	mvns	r3, r3
 80072ec:	4937      	ldr	r1, [pc, #220]	; (80073cc <HAL_GPIO_DeInit+0x198>)
 80072ee:	4013      	ands	r3, r2
 80072f0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f003 0303 	and.w	r3, r3, #3
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	2207      	movs	r2, #7
 80072fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007300:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007302:	4a2f      	ldr	r2, [pc, #188]	; (80073c0 <HAL_GPIO_DeInit+0x18c>)
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	089b      	lsrs	r3, r3, #2
 8007308:	3302      	adds	r3, #2
 800730a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	43da      	mvns	r2, r3
 8007312:	482b      	ldr	r0, [pc, #172]	; (80073c0 <HAL_GPIO_DeInit+0x18c>)
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	089b      	lsrs	r3, r3, #2
 8007318:	400a      	ands	r2, r1
 800731a:	3302      	adds	r3, #2
 800731c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	2103      	movs	r1, #3
 800732a:	fa01 f303 	lsl.w	r3, r1, r3
 800732e:	431a      	orrs	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	08da      	lsrs	r2, r3, #3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3208      	adds	r2, #8
 800733c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	220f      	movs	r2, #15
 800734a:	fa02 f303 	lsl.w	r3, r2, r3
 800734e:	43db      	mvns	r3, r3
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	08d2      	lsrs	r2, r2, #3
 8007354:	4019      	ands	r1, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3208      	adds	r2, #8
 800735a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689a      	ldr	r2, [r3, #8]
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	2103      	movs	r1, #3
 8007368:	fa01 f303 	lsl.w	r3, r1, r3
 800736c:	43db      	mvns	r3, r3
 800736e:	401a      	ands	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	2101      	movs	r1, #1
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	fa01 f303 	lsl.w	r3, r1, r3
 8007380:	43db      	mvns	r3, r3
 8007382:	401a      	ands	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	2103      	movs	r1, #3
 8007392:	fa01 f303 	lsl.w	r3, r1, r3
 8007396:	43db      	mvns	r3, r3
 8007398:	401a      	ands	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	3301      	adds	r3, #1
 80073a2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	fa22 f303 	lsr.w	r3, r2, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f47f af49 	bne.w	8007244 <HAL_GPIO_DeInit+0x10>
  }
}
 80073b2:	bf00      	nop
 80073b4:	bf00      	nop
 80073b6:	371c      	adds	r7, #28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bc80      	pop	{r7}
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	40010000 	.word	0x40010000
 80073c4:	48000400 	.word	0x48000400
 80073c8:	48000800 	.word	0x48000800
 80073cc:	58000800 	.word	0x58000800

080073d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	807b      	strh	r3, [r7, #2]
 80073dc:	4613      	mov	r3, r2
 80073de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80073e0:	787b      	ldrb	r3, [r7, #1]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80073e6:	887a      	ldrh	r2, [r7, #2]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80073ec:	e002      	b.n	80073f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80073ee:	887a      	ldrh	r2, [r7, #2]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bc80      	pop	{r7}
 80073fc:	4770      	bx	lr
	...

08007400 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	4603      	mov	r3, r0
 8007408:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800740a:	4b08      	ldr	r3, [pc, #32]	; (800742c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	4013      	ands	r3, r2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d006      	beq.n	8007424 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007416:	4a05      	ldr	r2, [pc, #20]	; (800742c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007418:	88fb      	ldrh	r3, [r7, #6]
 800741a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	4618      	mov	r0, r3
 8007420:	f005 fc72 	bl	800cd08 <HAL_GPIO_EXTI_Callback>
  }
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	58000800 	.word	0x58000800

08007430 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e081      	b.n	8007546 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d106      	bne.n	800745c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7fa fc9c 	bl	8001d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2224      	movs	r2, #36	; 0x24
 8007460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0201 	bic.w	r2, r2, #1
 8007472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007480:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007490:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d107      	bne.n	80074aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074a6:	609a      	str	r2, [r3, #8]
 80074a8:	e006      	b.n	80074b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689a      	ldr	r2, [r3, #8]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80074b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d104      	bne.n	80074ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6812      	ldr	r2, [r2, #0]
 80074d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80074d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68da      	ldr	r2, [r3, #12]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691a      	ldr	r2, [r3, #16]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	69d9      	ldr	r1, [r3, #28]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a1a      	ldr	r2, [r3, #32]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 0201 	orr.w	r2, r2, #1
 8007526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af02      	add	r7, sp, #8
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	4608      	mov	r0, r1
 800755a:	4611      	mov	r1, r2
 800755c:	461a      	mov	r2, r3
 800755e:	4603      	mov	r3, r0
 8007560:	817b      	strh	r3, [r7, #10]
 8007562:	460b      	mov	r3, r1
 8007564:	813b      	strh	r3, [r7, #8]
 8007566:	4613      	mov	r3, r2
 8007568:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b20      	cmp	r3, #32
 8007574:	f040 80f9 	bne.w	800776a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <HAL_I2C_Mem_Write+0x34>
 800757e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007580:	2b00      	cmp	r3, #0
 8007582:	d105      	bne.n	8007590 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800758a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e0ed      	b.n	800776c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007596:	2b01      	cmp	r3, #1
 8007598:	d101      	bne.n	800759e <HAL_I2C_Mem_Write+0x4e>
 800759a:	2302      	movs	r3, #2
 800759c:	e0e6      	b.n	800776c <HAL_I2C_Mem_Write+0x21c>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075a6:	f7fb f87d 	bl	80026a4 <HAL_GetTick>
 80075aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	2319      	movs	r3, #25
 80075b2:	2201      	movs	r2, #1
 80075b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 fac2 	bl	8007b42 <I2C_WaitOnFlagUntilTimeout>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0d1      	b.n	800776c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2221      	movs	r2, #33	; 0x21
 80075cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2240      	movs	r2, #64	; 0x40
 80075d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a3a      	ldr	r2, [r7, #32]
 80075e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075f0:	88f8      	ldrh	r0, [r7, #6]
 80075f2:	893a      	ldrh	r2, [r7, #8]
 80075f4:	8979      	ldrh	r1, [r7, #10]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	4603      	mov	r3, r0
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 f9d3 	bl	80079ac <I2C_RequestMemoryWrite>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e0a9      	b.n	800776c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761c:	b29b      	uxth	r3, r3
 800761e:	2bff      	cmp	r3, #255	; 0xff
 8007620:	d90e      	bls.n	8007640 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	22ff      	movs	r2, #255	; 0xff
 8007626:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800762c:	b2da      	uxtb	r2, r3
 800762e:	8979      	ldrh	r1, [r7, #10]
 8007630:	2300      	movs	r3, #0
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 fc1f 	bl	8007e7c <I2C_TransferConfig>
 800763e:	e00f      	b.n	8007660 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800764e:	b2da      	uxtb	r2, r3
 8007650:	8979      	ldrh	r1, [r7, #10]
 8007652:	2300      	movs	r3, #0
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f000 fc0e 	bl	8007e7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 faac 	bl	8007bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e07b      	b.n	800776c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	781a      	ldrb	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800768e:	b29b      	uxth	r3, r3
 8007690:	3b01      	subs	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800769c:	3b01      	subs	r3, #1
 800769e:	b29a      	uxth	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d034      	beq.n	8007718 <HAL_I2C_Mem_Write+0x1c8>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d130      	bne.n	8007718 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	2200      	movs	r2, #0
 80076be:	2180      	movs	r1, #128	; 0x80
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 fa3e 	bl	8007b42 <I2C_WaitOnFlagUntilTimeout>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e04d      	b.n	800776c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2bff      	cmp	r3, #255	; 0xff
 80076d8:	d90e      	bls.n	80076f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	22ff      	movs	r2, #255	; 0xff
 80076de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	8979      	ldrh	r1, [r7, #10]
 80076e8:	2300      	movs	r3, #0
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 fbc3 	bl	8007e7c <I2C_TransferConfig>
 80076f6:	e00f      	b.n	8007718 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007706:	b2da      	uxtb	r2, r3
 8007708:	8979      	ldrh	r1, [r7, #10]
 800770a:	2300      	movs	r3, #0
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 fbb2 	bl	8007e7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d19e      	bne.n	8007660 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 fa8b 	bl	8007c42 <I2C_WaitOnSTOPFlagUntilTimeout>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e01a      	b.n	800776c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2220      	movs	r2, #32
 800773c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6859      	ldr	r1, [r3, #4]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <HAL_I2C_Mem_Write+0x224>)
 800774a:	400b      	ands	r3, r1
 800774c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2220      	movs	r2, #32
 8007752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	e000      	b.n	800776c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800776a:	2302      	movs	r3, #2
  }
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	fe00e800 	.word	0xfe00e800

08007778 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af02      	add	r7, sp, #8
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	4608      	mov	r0, r1
 8007782:	4611      	mov	r1, r2
 8007784:	461a      	mov	r2, r3
 8007786:	4603      	mov	r3, r0
 8007788:	817b      	strh	r3, [r7, #10]
 800778a:	460b      	mov	r3, r1
 800778c:	813b      	strh	r3, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b20      	cmp	r3, #32
 800779c:	f040 80fd 	bne.w	800799a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <HAL_I2C_Mem_Read+0x34>
 80077a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d105      	bne.n	80077b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e0f1      	b.n	800799c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_I2C_Mem_Read+0x4e>
 80077c2:	2302      	movs	r3, #2
 80077c4:	e0ea      	b.n	800799c <HAL_I2C_Mem_Read+0x224>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077ce:	f7fa ff69 	bl	80026a4 <HAL_GetTick>
 80077d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	2319      	movs	r3, #25
 80077da:	2201      	movs	r2, #1
 80077dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 f9ae 	bl	8007b42 <I2C_WaitOnFlagUntilTimeout>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e0d5      	b.n	800799c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2222      	movs	r2, #34	; 0x22
 80077f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2240      	movs	r2, #64	; 0x40
 80077fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a3a      	ldr	r2, [r7, #32]
 800780a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007810:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007818:	88f8      	ldrh	r0, [r7, #6]
 800781a:	893a      	ldrh	r2, [r7, #8]
 800781c:	8979      	ldrh	r1, [r7, #10]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	4603      	mov	r3, r0
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 f913 	bl	8007a54 <I2C_RequestMemoryRead>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e0ad      	b.n	800799c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007844:	b29b      	uxth	r3, r3
 8007846:	2bff      	cmp	r3, #255	; 0xff
 8007848:	d90e      	bls.n	8007868 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	22ff      	movs	r2, #255	; 0xff
 800784e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007854:	b2da      	uxtb	r2, r3
 8007856:	8979      	ldrh	r1, [r7, #10]
 8007858:	4b52      	ldr	r3, [pc, #328]	; (80079a4 <HAL_I2C_Mem_Read+0x22c>)
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 fb0b 	bl	8007e7c <I2C_TransferConfig>
 8007866:	e00f      	b.n	8007888 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786c:	b29a      	uxth	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007876:	b2da      	uxtb	r2, r3
 8007878:	8979      	ldrh	r1, [r7, #10]
 800787a:	4b4a      	ldr	r3, [pc, #296]	; (80079a4 <HAL_I2C_Mem_Read+0x22c>)
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 fafa 	bl	8007e7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	2200      	movs	r2, #0
 8007890:	2104      	movs	r1, #4
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f000 f955 	bl	8007b42 <I2C_WaitOnFlagUntilTimeout>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e07c      	b.n	800799c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	b2d2      	uxtb	r2, r2
 80078ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	3b01      	subs	r3, #1
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d8:	b29b      	uxth	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d034      	beq.n	8007948 <HAL_I2C_Mem_Read+0x1d0>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d130      	bne.n	8007948 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ec:	2200      	movs	r2, #0
 80078ee:	2180      	movs	r1, #128	; 0x80
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 f926 	bl	8007b42 <I2C_WaitOnFlagUntilTimeout>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e04d      	b.n	800799c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007904:	b29b      	uxth	r3, r3
 8007906:	2bff      	cmp	r3, #255	; 0xff
 8007908:	d90e      	bls.n	8007928 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	22ff      	movs	r2, #255	; 0xff
 800790e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007914:	b2da      	uxtb	r2, r3
 8007916:	8979      	ldrh	r1, [r7, #10]
 8007918:	2300      	movs	r3, #0
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 faab 	bl	8007e7c <I2C_TransferConfig>
 8007926:	e00f      	b.n	8007948 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800792c:	b29a      	uxth	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007936:	b2da      	uxtb	r2, r3
 8007938:	8979      	ldrh	r1, [r7, #10]
 800793a:	2300      	movs	r3, #0
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 fa9a 	bl	8007e7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794c:	b29b      	uxth	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d19a      	bne.n	8007888 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f973 	bl	8007c42 <I2C_WaitOnSTOPFlagUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e01a      	b.n	800799c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2220      	movs	r2, #32
 800796c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6859      	ldr	r1, [r3, #4]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	4b0b      	ldr	r3, [pc, #44]	; (80079a8 <HAL_I2C_Mem_Read+0x230>)
 800797a:	400b      	ands	r3, r1
 800797c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2220      	movs	r2, #32
 8007982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	e000      	b.n	800799c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800799a:	2302      	movs	r3, #2
  }
}
 800799c:	4618      	mov	r0, r3
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	80002400 	.word	0x80002400
 80079a8:	fe00e800 	.word	0xfe00e800

080079ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af02      	add	r7, sp, #8
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	4608      	mov	r0, r1
 80079b6:	4611      	mov	r1, r2
 80079b8:	461a      	mov	r2, r3
 80079ba:	4603      	mov	r3, r0
 80079bc:	817b      	strh	r3, [r7, #10]
 80079be:	460b      	mov	r3, r1
 80079c0:	813b      	strh	r3, [r7, #8]
 80079c2:	4613      	mov	r3, r2
 80079c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80079c6:	88fb      	ldrh	r3, [r7, #6]
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	8979      	ldrh	r1, [r7, #10]
 80079cc:	4b20      	ldr	r3, [pc, #128]	; (8007a50 <I2C_RequestMemoryWrite+0xa4>)
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 fa51 	bl	8007e7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	69b9      	ldr	r1, [r7, #24]
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 f8ef 	bl	8007bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e02c      	b.n	8007a48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d105      	bne.n	8007a00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079f4:	893b      	ldrh	r3, [r7, #8]
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	629a      	str	r2, [r3, #40]	; 0x28
 80079fe:	e015      	b.n	8007a2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a00:	893b      	ldrh	r3, [r7, #8]
 8007a02:	0a1b      	lsrs	r3, r3, #8
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	69b9      	ldr	r1, [r7, #24]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 f8d5 	bl	8007bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e012      	b.n	8007a48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a22:	893b      	ldrh	r3, [r7, #8]
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	2200      	movs	r2, #0
 8007a34:	2180      	movs	r1, #128	; 0x80
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 f883 	bl	8007b42 <I2C_WaitOnFlagUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	80002000 	.word	0x80002000

08007a54 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af02      	add	r7, sp, #8
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	4611      	mov	r1, r2
 8007a60:	461a      	mov	r2, r3
 8007a62:	4603      	mov	r3, r0
 8007a64:	817b      	strh	r3, [r7, #10]
 8007a66:	460b      	mov	r3, r1
 8007a68:	813b      	strh	r3, [r7, #8]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007a6e:	88fb      	ldrh	r3, [r7, #6]
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	8979      	ldrh	r1, [r7, #10]
 8007a74:	4b20      	ldr	r3, [pc, #128]	; (8007af8 <I2C_RequestMemoryRead+0xa4>)
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	2300      	movs	r3, #0
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f9fe 	bl	8007e7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a80:	69fa      	ldr	r2, [r7, #28]
 8007a82:	69b9      	ldr	r1, [r7, #24]
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 f89c 	bl	8007bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e02c      	b.n	8007aee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a94:	88fb      	ldrh	r3, [r7, #6]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d105      	bne.n	8007aa6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a9a:	893b      	ldrh	r3, [r7, #8]
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	629a      	str	r2, [r3, #40]	; 0x28
 8007aa4:	e015      	b.n	8007ad2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007aa6:	893b      	ldrh	r3, [r7, #8]
 8007aa8:	0a1b      	lsrs	r3, r3, #8
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	69b9      	ldr	r1, [r7, #24]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 f882 	bl	8007bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e012      	b.n	8007aee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ac8:	893b      	ldrh	r3, [r7, #8]
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2140      	movs	r1, #64	; 0x40
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 f830 	bl	8007b42 <I2C_WaitOnFlagUntilTimeout>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e000      	b.n	8007aee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	80002000 	.word	0x80002000

08007afc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d103      	bne.n	8007b1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2200      	movs	r2, #0
 8007b18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	f003 0301 	and.w	r3, r3, #1
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d007      	beq.n	8007b38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699a      	ldr	r2, [r3, #24]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0201 	orr.w	r2, r2, #1
 8007b36:	619a      	str	r2, [r3, #24]
  }
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bc80      	pop	{r7}
 8007b40:	4770      	bx	lr

08007b42 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b084      	sub	sp, #16
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	60f8      	str	r0, [r7, #12]
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	603b      	str	r3, [r7, #0]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b52:	e022      	b.n	8007b9a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5a:	d01e      	beq.n	8007b9a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5c:	f7fa fda2 	bl	80026a4 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d302      	bcc.n	8007b72 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d113      	bne.n	8007b9a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b76:	f043 0220 	orr.w	r2, r3, #32
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e00f      	b.n	8007bba <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	699a      	ldr	r2, [r3, #24]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	bf0c      	ite	eq
 8007baa:	2301      	moveq	r3, #1
 8007bac:	2300      	movne	r3, #0
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d0cd      	beq.n	8007b54 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007bce:	e02c      	b.n	8007c2a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	68b9      	ldr	r1, [r7, #8]
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 f871 	bl	8007cbc <I2C_IsErrorOccurred>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e02a      	b.n	8007c3a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bea:	d01e      	beq.n	8007c2a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bec:	f7fa fd5a 	bl	80026a4 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d302      	bcc.n	8007c02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d113      	bne.n	8007c2a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c06:	f043 0220 	orr.w	r2, r3, #32
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e007      	b.n	8007c3a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d1cb      	bne.n	8007bd0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c4e:	e028      	b.n	8007ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	68b9      	ldr	r1, [r7, #8]
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 f831 	bl	8007cbc <I2C_IsErrorOccurred>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e026      	b.n	8007cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c64:	f7fa fd1e 	bl	80026a4 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d302      	bcc.n	8007c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d113      	bne.n	8007ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7e:	f043 0220 	orr.w	r2, r3, #32
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e007      	b.n	8007cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	f003 0320 	and.w	r3, r3, #32
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	d1cf      	bne.n	8007c50 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08a      	sub	sp, #40	; 0x28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	f003 0310 	and.w	r3, r3, #16
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d068      	beq.n	8007dba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2210      	movs	r2, #16
 8007cee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007cf0:	e049      	b.n	8007d86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf8:	d045      	beq.n	8007d86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007cfa:	f7fa fcd3 	bl	80026a4 <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d302      	bcc.n	8007d10 <I2C_IsErrorOccurred+0x54>
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d13a      	bne.n	8007d86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d32:	d121      	bne.n	8007d78 <I2C_IsErrorOccurred+0xbc>
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d3a:	d01d      	beq.n	8007d78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007d3c:	7cfb      	ldrb	r3, [r7, #19]
 8007d3e:	2b20      	cmp	r3, #32
 8007d40:	d01a      	beq.n	8007d78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007d52:	f7fa fca7 	bl	80026a4 <HAL_GetTick>
 8007d56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d58:	e00e      	b.n	8007d78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007d5a:	f7fa fca3 	bl	80026a4 <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b19      	cmp	r3, #25
 8007d66:	d907      	bls.n	8007d78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007d68:	6a3b      	ldr	r3, [r7, #32]
 8007d6a:	f043 0320 	orr.w	r3, r3, #32
 8007d6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007d76:	e006      	b.n	8007d86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b20      	cmp	r3, #32
 8007d84:	d1e9      	bne.n	8007d5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	f003 0320 	and.w	r3, r3, #32
 8007d90:	2b20      	cmp	r3, #32
 8007d92:	d003      	beq.n	8007d9c <I2C_IsErrorOccurred+0xe0>
 8007d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d0aa      	beq.n	8007cf2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d103      	bne.n	8007dac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2220      	movs	r2, #32
 8007daa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	f043 0304 	orr.w	r3, r3, #4
 8007db2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00b      	beq.n	8007de4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	f043 0301 	orr.w	r3, r3, #1
 8007dd2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ddc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00b      	beq.n	8007e06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	f043 0308 	orr.w	r3, r3, #8
 8007df4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007dfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00b      	beq.n	8007e28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	f043 0302 	orr.w	r3, r3, #2
 8007e16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d01c      	beq.n	8007e6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f7ff fe63 	bl	8007afc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6859      	ldr	r1, [r3, #4]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	4b0d      	ldr	r3, [pc, #52]	; (8007e78 <I2C_IsErrorOccurred+0x1bc>)
 8007e42:	400b      	ands	r3, r1
 8007e44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3728      	adds	r7, #40	; 0x28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	fe00e800 	.word	0xfe00e800

08007e7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	607b      	str	r3, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	817b      	strh	r3, [r7, #10]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e8e:	897b      	ldrh	r3, [r7, #10]
 8007e90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e94:	7a7b      	ldrb	r3, [r7, #9]
 8007e96:	041b      	lsls	r3, r3, #16
 8007e98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007eaa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	0d5b      	lsrs	r3, r3, #21
 8007eb6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007eba:	4b07      	ldr	r3, [pc, #28]	; (8007ed8 <I2C_TransferConfig+0x5c>)
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	43db      	mvns	r3, r3
 8007ec0:	ea02 0103 	and.w	r1, r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007ece:	bf00      	nop
 8007ed0:	371c      	adds	r7, #28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bc80      	pop	{r7}
 8007ed6:	4770      	bx	lr
 8007ed8:	03ff63ff 	.word	0x03ff63ff

08007edc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	d138      	bne.n	8007f64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e032      	b.n	8007f66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2224      	movs	r2, #36	; 0x24
 8007f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0201 	bic.w	r2, r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6819      	ldr	r1, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f042 0201 	orr.w	r2, r2, #1
 8007f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2220      	movs	r2, #32
 8007f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	e000      	b.n	8007f66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f64:	2302      	movs	r3, #2
  }
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bc80      	pop	{r7}
 8007f6e:	4770      	bx	lr

08007f70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	d139      	bne.n	8007ffa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d101      	bne.n	8007f94 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f90:	2302      	movs	r3, #2
 8007f92:	e033      	b.n	8007ffc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2224      	movs	r2, #36	; 0x24
 8007fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0201 	bic.w	r2, r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007fc2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	021b      	lsls	r3, r3, #8
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 0201 	orr.w	r2, r2, #1
 8007fe4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2220      	movs	r2, #32
 8007fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e000      	b.n	8007ffc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ffa:	2302      	movs	r3, #2
  }
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	bc80      	pop	{r7}
 8008004:	4770      	bx	lr
	...

08008008 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800800c:	4b04      	ldr	r3, [pc, #16]	; (8008020 <HAL_PWR_EnableBkUpAccess+0x18>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a03      	ldr	r2, [pc, #12]	; (8008020 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008016:	6013      	str	r3, [r2, #0]
}
 8008018:	bf00      	nop
 800801a:	46bd      	mov	sp, r7
 800801c:	bc80      	pop	{r7}
 800801e:	4770      	bx	lr
 8008020:	58000400 	.word	0x58000400

08008024 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008024:	b480      	push	{r7}
 8008026:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8008028:	4b03      	ldr	r3, [pc, #12]	; (8008038 <HAL_PWREx_GetVoltageRange+0x14>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8008030:	4618      	mov	r0, r3
 8008032:	46bd      	mov	sp, r7
 8008034:	bc80      	pop	{r7}
 8008036:	4770      	bx	lr
 8008038:	58000400 	.word	0x58000400

0800803c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800803c:	b480      	push	{r7}
 800803e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8008040:	4b06      	ldr	r3, [pc, #24]	; (800805c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800804c:	d101      	bne.n	8008052 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800804e:	2301      	movs	r3, #1
 8008050:	e000      	b.n	8008054 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	46bd      	mov	sp, r7
 8008058:	bc80      	pop	{r7}
 800805a:	4770      	bx	lr
 800805c:	58000400 	.word	0x58000400

08008060 <LL_RCC_HSE_EnableTcxo>:
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8008064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800806e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008072:	6013      	str	r3, [r2, #0]
}
 8008074:	bf00      	nop
 8008076:	46bd      	mov	sp, r7
 8008078:	bc80      	pop	{r7}
 800807a:	4770      	bx	lr

0800807c <LL_RCC_HSE_DisableTcxo>:
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8008080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800808a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800808e:	6013      	str	r3, [r2, #0]
}
 8008090:	bf00      	nop
 8008092:	46bd      	mov	sp, r7
 8008094:	bc80      	pop	{r7}
 8008096:	4770      	bx	lr

08008098 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8008098:	b480      	push	{r7}
 800809a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800809c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080aa:	d101      	bne.n	80080b0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80080ac:	2301      	movs	r3, #1
 80080ae:	e000      	b.n	80080b2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bc80      	pop	{r7}
 80080b8:	4770      	bx	lr

080080ba <LL_RCC_HSE_Enable>:
{
 80080ba:	b480      	push	{r7}
 80080bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80080be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080cc:	6013      	str	r3, [r2, #0]
}
 80080ce:	bf00      	nop
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bc80      	pop	{r7}
 80080d4:	4770      	bx	lr

080080d6 <LL_RCC_HSE_Disable>:
{
 80080d6:	b480      	push	{r7}
 80080d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80080da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080e8:	6013      	str	r3, [r2, #0]
}
 80080ea:	bf00      	nop
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bc80      	pop	{r7}
 80080f0:	4770      	bx	lr

080080f2 <LL_RCC_HSE_IsReady>:
{
 80080f2:	b480      	push	{r7}
 80080f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80080f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008104:	d101      	bne.n	800810a <LL_RCC_HSE_IsReady+0x18>
 8008106:	2301      	movs	r3, #1
 8008108:	e000      	b.n	800810c <LL_RCC_HSE_IsReady+0x1a>
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	46bd      	mov	sp, r7
 8008110:	bc80      	pop	{r7}
 8008112:	4770      	bx	lr

08008114 <LL_RCC_HSI_Enable>:
{
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008126:	6013      	str	r3, [r2, #0]
}
 8008128:	bf00      	nop
 800812a:	46bd      	mov	sp, r7
 800812c:	bc80      	pop	{r7}
 800812e:	4770      	bx	lr

08008130 <LL_RCC_HSI_Disable>:
{
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800813e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008142:	6013      	str	r3, [r2, #0]
}
 8008144:	bf00      	nop
 8008146:	46bd      	mov	sp, r7
 8008148:	bc80      	pop	{r7}
 800814a:	4770      	bx	lr

0800814c <LL_RCC_HSI_IsReady>:
{
 800814c:	b480      	push	{r7}
 800814e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800815a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800815e:	d101      	bne.n	8008164 <LL_RCC_HSI_IsReady+0x18>
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <LL_RCC_HSI_IsReady+0x1a>
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr

0800816e <LL_RCC_HSI_SetCalibTrimming>:
{
 800816e:	b480      	push	{r7}
 8008170:	b083      	sub	sp, #12
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8008176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	061b      	lsls	r3, r3, #24
 8008184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008188:	4313      	orrs	r3, r2
 800818a:	604b      	str	r3, [r1, #4]
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	bc80      	pop	{r7}
 8008194:	4770      	bx	lr

08008196 <LL_RCC_LSE_IsReady>:
{
 8008196:	b480      	push	{r7}
 8008198:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800819a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800819e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a2:	f003 0302 	and.w	r3, r3, #2
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d101      	bne.n	80081ae <LL_RCC_LSE_IsReady+0x18>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e000      	b.n	80081b0 <LL_RCC_LSE_IsReady+0x1a>
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bc80      	pop	{r7}
 80081b6:	4770      	bx	lr

080081b8 <LL_RCC_LSI_Enable>:
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80081bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081c8:	f043 0301 	orr.w	r3, r3, #1
 80081cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80081d0:	bf00      	nop
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bc80      	pop	{r7}
 80081d6:	4770      	bx	lr

080081d8 <LL_RCC_LSI_Disable>:
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80081dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081e8:	f023 0301 	bic.w	r3, r3, #1
 80081ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80081f0:	bf00      	nop
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bc80      	pop	{r7}
 80081f6:	4770      	bx	lr

080081f8 <LL_RCC_LSI_IsReady>:
{
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80081fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008204:	f003 0302 	and.w	r3, r3, #2
 8008208:	2b02      	cmp	r3, #2
 800820a:	d101      	bne.n	8008210 <LL_RCC_LSI_IsReady+0x18>
 800820c:	2301      	movs	r3, #1
 800820e:	e000      	b.n	8008212 <LL_RCC_LSI_IsReady+0x1a>
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	46bd      	mov	sp, r7
 8008216:	bc80      	pop	{r7}
 8008218:	4770      	bx	lr

0800821a <LL_RCC_MSI_Enable>:
{
 800821a:	b480      	push	{r7}
 800821c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800821e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008228:	f043 0301 	orr.w	r3, r3, #1
 800822c:	6013      	str	r3, [r2, #0]
}
 800822e:	bf00      	nop
 8008230:	46bd      	mov	sp, r7
 8008232:	bc80      	pop	{r7}
 8008234:	4770      	bx	lr

08008236 <LL_RCC_MSI_Disable>:
{
 8008236:	b480      	push	{r7}
 8008238:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800823a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008244:	f023 0301 	bic.w	r3, r3, #1
 8008248:	6013      	str	r3, [r2, #0]
}
 800824a:	bf00      	nop
 800824c:	46bd      	mov	sp, r7
 800824e:	bc80      	pop	{r7}
 8008250:	4770      	bx	lr

08008252 <LL_RCC_MSI_IsReady>:
{
 8008252:	b480      	push	{r7}
 8008254:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b02      	cmp	r3, #2
 8008262:	d101      	bne.n	8008268 <LL_RCC_MSI_IsReady+0x16>
 8008264:	2301      	movs	r3, #1
 8008266:	e000      	b.n	800826a <LL_RCC_MSI_IsReady+0x18>
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	46bd      	mov	sp, r7
 800826e:	bc80      	pop	{r7}
 8008270:	4770      	bx	lr

08008272 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8008272:	b480      	push	{r7}
 8008274:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8008276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0308 	and.w	r3, r3, #8
 8008280:	2b08      	cmp	r3, #8
 8008282:	d101      	bne.n	8008288 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8008284:	2301      	movs	r3, #1
 8008286:	e000      	b.n	800828a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	46bd      	mov	sp, r7
 800828e:	bc80      	pop	{r7}
 8008290:	4770      	bx	lr

08008292 <LL_RCC_MSI_GetRange>:
{
 8008292:	b480      	push	{r7}
 8008294:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8008296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bc80      	pop	{r7}
 80082a6:	4770      	bx	lr

080082a8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80082a8:	b480      	push	{r7}
 80082aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80082ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bc80      	pop	{r7}
 80082be:	4770      	bx	lr

080082c0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80082c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	021b      	lsls	r3, r3, #8
 80082d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082da:	4313      	orrs	r3, r2
 80082dc:	604b      	str	r3, [r1, #4]
}
 80082de:	bf00      	nop
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bc80      	pop	{r7}
 80082e6:	4770      	bx	lr

080082e8 <LL_RCC_SetSysClkSource>:
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80082f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f023 0203 	bic.w	r2, r3, #3
 80082fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4313      	orrs	r3, r2
 8008302:	608b      	str	r3, [r1, #8]
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	bc80      	pop	{r7}
 800830c:	4770      	bx	lr

0800830e <LL_RCC_GetSysClkSource>:
{
 800830e:	b480      	push	{r7}
 8008310:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f003 030c 	and.w	r3, r3, #12
}
 800831c:	4618      	mov	r0, r3
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr

08008324 <LL_RCC_SetAHBPrescaler>:
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800832c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4313      	orrs	r3, r2
 800833e:	608b      	str	r3, [r1, #8]
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	bc80      	pop	{r7}
 8008348:	4770      	bx	lr

0800834a <LL_RCC_SetAHB3Prescaler>:
{
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008356:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800835a:	f023 020f 	bic.w	r2, r3, #15
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	091b      	lsrs	r3, r3, #4
 8008362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008366:	4313      	orrs	r3, r2
 8008368:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	bc80      	pop	{r7}
 8008374:	4770      	bx	lr

08008376 <LL_RCC_SetAPB1Prescaler>:
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800837e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008388:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4313      	orrs	r3, r2
 8008390:	608b      	str	r3, [r1, #8]
}
 8008392:	bf00      	nop
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	bc80      	pop	{r7}
 800839a:	4770      	bx	lr

0800839c <LL_RCC_SetAPB2Prescaler>:
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80083a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80083ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	608b      	str	r3, [r1, #8]
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	bc80      	pop	{r7}
 80083c0:	4770      	bx	lr

080083c2 <LL_RCC_GetAHBPrescaler>:
{
 80083c2:	b480      	push	{r7}
 80083c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80083c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bc80      	pop	{r7}
 80083d6:	4770      	bx	lr

080083d8 <LL_RCC_GetAHB3Prescaler>:
{
 80083d8:	b480      	push	{r7}
 80083da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80083dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80083e4:	011b      	lsls	r3, r3, #4
 80083e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bc80      	pop	{r7}
 80083f0:	4770      	bx	lr

080083f2 <LL_RCC_GetAPB1Prescaler>:
{
 80083f2:	b480      	push	{r7}
 80083f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80083f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008400:	4618      	mov	r0, r3
 8008402:	46bd      	mov	sp, r7
 8008404:	bc80      	pop	{r7}
 8008406:	4770      	bx	lr

08008408 <LL_RCC_GetAPB2Prescaler>:
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800840c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008416:	4618      	mov	r0, r3
 8008418:	46bd      	mov	sp, r7
 800841a:	bc80      	pop	{r7}
 800841c:	4770      	bx	lr

0800841e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800841e:	b480      	push	{r7}
 8008420:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800842c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008430:	6013      	str	r3, [r2, #0]
}
 8008432:	bf00      	nop
 8008434:	46bd      	mov	sp, r7
 8008436:	bc80      	pop	{r7}
 8008438:	4770      	bx	lr

0800843a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800843a:	b480      	push	{r7}
 800843c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800843e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800844c:	6013      	str	r3, [r2, #0]
}
 800844e:	bf00      	nop
 8008450:	46bd      	mov	sp, r7
 8008452:	bc80      	pop	{r7}
 8008454:	4770      	bx	lr

08008456 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8008456:	b480      	push	{r7}
 8008458:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800845a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008464:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008468:	d101      	bne.n	800846e <LL_RCC_PLL_IsReady+0x18>
 800846a:	2301      	movs	r3, #1
 800846c:	e000      	b.n	8008470 <LL_RCC_PLL_IsReady+0x1a>
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	46bd      	mov	sp, r7
 8008474:	bc80      	pop	{r7}
 8008476:	4770      	bx	lr

08008478 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008478:	b480      	push	{r7}
 800847a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800847c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	0a1b      	lsrs	r3, r3, #8
 8008484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008488:	4618      	mov	r0, r3
 800848a:	46bd      	mov	sp, r7
 800848c:	bc80      	pop	{r7}
 800848e:	4770      	bx	lr

08008490 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8008490:	b480      	push	{r7}
 8008492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800849e:	4618      	mov	r0, r3
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bc80      	pop	{r7}
 80084a4:	4770      	bx	lr

080084a6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80084a6:	b480      	push	{r7}
 80084a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80084aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bc80      	pop	{r7}
 80084ba:	4770      	bx	lr

080084bc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80084bc:	b480      	push	{r7}
 80084be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80084c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f003 0303 	and.w	r3, r3, #3
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bc80      	pop	{r7}
 80084d0:	4770      	bx	lr

080084d2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80084d2:	b480      	push	{r7}
 80084d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80084d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084e4:	d101      	bne.n	80084ea <LL_RCC_IsActiveFlag_HPRE+0x18>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e000      	b.n	80084ec <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bc80      	pop	{r7}
 80084f2:	4770      	bx	lr

080084f4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80084f4:	b480      	push	{r7}
 80084f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80084f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008508:	d101      	bne.n	800850e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800850a:	2301      	movs	r3, #1
 800850c:	e000      	b.n	8008510 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	46bd      	mov	sp, r7
 8008514:	bc80      	pop	{r7}
 8008516:	4770      	bx	lr

08008518 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008518:	b480      	push	{r7}
 800851a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800851c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800852a:	d101      	bne.n	8008530 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800852c:	2301      	movs	r3, #1
 800852e:	e000      	b.n	8008532 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	46bd      	mov	sp, r7
 8008536:	bc80      	pop	{r7}
 8008538:	4770      	bx	lr

0800853a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800853a:	b480      	push	{r7}
 800853c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800853e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008548:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800854c:	d101      	bne.n	8008552 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800854e:	2301      	movs	r3, #1
 8008550:	e000      	b.n	8008554 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	46bd      	mov	sp, r7
 8008558:	bc80      	pop	{r7}
 800855a:	4770      	bx	lr

0800855c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e36f      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800856e:	f7ff fece 	bl	800830e <LL_RCC_GetSysClkSource>
 8008572:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008574:	f7ff ffa2 	bl	80084bc <LL_RCC_PLL_GetMainSource>
 8008578:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0320 	and.w	r3, r3, #32
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 80c4 	beq.w	8008710 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <HAL_RCC_OscConfig+0x3e>
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	2b0c      	cmp	r3, #12
 8008592:	d176      	bne.n	8008682 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d173      	bne.n	8008682 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e353      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0308 	and.w	r3, r3, #8
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d005      	beq.n	80085c4 <HAL_RCC_OscConfig+0x68>
 80085b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085c2:	e006      	b.n	80085d2 <HAL_RCC_OscConfig+0x76>
 80085c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085cc:	091b      	lsrs	r3, r3, #4
 80085ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d222      	bcs.n	800861c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fd3c 	bl	8009058 <RCC_SetFlashLatencyFromMSIRange>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e331      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085f4:	f043 0308 	orr.w	r3, r3, #8
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008608:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800860c:	4313      	orrs	r3, r2
 800860e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	4618      	mov	r0, r3
 8008616:	f7ff fe53 	bl	80082c0 <LL_RCC_MSI_SetCalibTrimming>
 800861a:	e021      	b.n	8008660 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800861c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008626:	f043 0308 	orr.w	r3, r3, #8
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800863e:	4313      	orrs	r3, r2
 8008640:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008646:	4618      	mov	r0, r3
 8008648:	f7ff fe3a 	bl	80082c0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fd01 	bl	8009058 <RCC_SetFlashLatencyFromMSIRange>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e2f6      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008660:	f000 fcc2 	bl	8008fe8 <HAL_RCC_GetHCLKFreq>
 8008664:	4603      	mov	r3, r0
 8008666:	4aa7      	ldr	r2, [pc, #668]	; (8008904 <HAL_RCC_OscConfig+0x3a8>)
 8008668:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800866a:	4ba7      	ldr	r3, [pc, #668]	; (8008908 <HAL_RCC_OscConfig+0x3ac>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4618      	mov	r0, r3
 8008670:	f7fa f80e 	bl	8002690 <HAL_InitTick>
 8008674:	4603      	mov	r3, r0
 8008676:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8008678:	7cfb      	ldrb	r3, [r7, #19]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d047      	beq.n	800870e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800867e:	7cfb      	ldrb	r3, [r7, #19]
 8008680:	e2e5      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d02c      	beq.n	80086e4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800868a:	f7ff fdc6 	bl	800821a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800868e:	f7fa f809 	bl	80026a4 <HAL_GetTick>
 8008692:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008694:	e008      	b.n	80086a8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008696:	f7fa f805 	bl	80026a4 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d901      	bls.n	80086a8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e2d2      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80086a8:	f7ff fdd3 	bl	8008252 <LL_RCC_MSI_IsReady>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d0f1      	beq.n	8008696 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80086b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086bc:	f043 0308 	orr.w	r3, r3, #8
 80086c0:	6013      	str	r3, [r2, #0]
 80086c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086d4:	4313      	orrs	r3, r2
 80086d6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff fdef 	bl	80082c0 <LL_RCC_MSI_SetCalibTrimming>
 80086e2:	e015      	b.n	8008710 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80086e4:	f7ff fda7 	bl	8008236 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80086e8:	f7f9 ffdc 	bl	80026a4 <HAL_GetTick>
 80086ec:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80086ee:	e008      	b.n	8008702 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80086f0:	f7f9 ffd8 	bl	80026a4 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e2a5      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008702:	f7ff fda6 	bl	8008252 <LL_RCC_MSI_IsReady>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1f1      	bne.n	80086f0 <HAL_RCC_OscConfig+0x194>
 800870c:	e000      	b.n	8008710 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800870e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b00      	cmp	r3, #0
 800871a:	d058      	beq.n	80087ce <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	2b08      	cmp	r3, #8
 8008720:	d005      	beq.n	800872e <HAL_RCC_OscConfig+0x1d2>
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	2b0c      	cmp	r3, #12
 8008726:	d108      	bne.n	800873a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	2b03      	cmp	r3, #3
 800872c:	d105      	bne.n	800873a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d14b      	bne.n	80087ce <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e289      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800873a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800874c:	4313      	orrs	r3, r2
 800874e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008758:	d102      	bne.n	8008760 <HAL_RCC_OscConfig+0x204>
 800875a:	f7ff fcae 	bl	80080ba <LL_RCC_HSE_Enable>
 800875e:	e00d      	b.n	800877c <HAL_RCC_OscConfig+0x220>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8008768:	d104      	bne.n	8008774 <HAL_RCC_OscConfig+0x218>
 800876a:	f7ff fc79 	bl	8008060 <LL_RCC_HSE_EnableTcxo>
 800876e:	f7ff fca4 	bl	80080ba <LL_RCC_HSE_Enable>
 8008772:	e003      	b.n	800877c <HAL_RCC_OscConfig+0x220>
 8008774:	f7ff fcaf 	bl	80080d6 <LL_RCC_HSE_Disable>
 8008778:	f7ff fc80 	bl	800807c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d012      	beq.n	80087aa <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008784:	f7f9 ff8e 	bl	80026a4 <HAL_GetTick>
 8008788:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800878a:	e008      	b.n	800879e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800878c:	f7f9 ff8a 	bl	80026a4 <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	2b64      	cmp	r3, #100	; 0x64
 8008798:	d901      	bls.n	800879e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e257      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800879e:	f7ff fca8 	bl	80080f2 <LL_RCC_HSE_IsReady>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d0f1      	beq.n	800878c <HAL_RCC_OscConfig+0x230>
 80087a8:	e011      	b.n	80087ce <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087aa:	f7f9 ff7b 	bl	80026a4 <HAL_GetTick>
 80087ae:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80087b0:	e008      	b.n	80087c4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087b2:	f7f9 ff77 	bl	80026a4 <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	2b64      	cmp	r3, #100	; 0x64
 80087be:	d901      	bls.n	80087c4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e244      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80087c4:	f7ff fc95 	bl	80080f2 <LL_RCC_HSE_IsReady>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1f1      	bne.n	80087b2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d046      	beq.n	8008868 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	2b04      	cmp	r3, #4
 80087de:	d005      	beq.n	80087ec <HAL_RCC_OscConfig+0x290>
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	2b0c      	cmp	r3, #12
 80087e4:	d10e      	bne.n	8008804 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d10b      	bne.n	8008804 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e22a      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	695b      	ldr	r3, [r3, #20]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff fcb6 	bl	800816e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008802:	e031      	b.n	8008868 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d019      	beq.n	8008840 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800880c:	f7ff fc82 	bl	8008114 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008810:	f7f9 ff48 	bl	80026a4 <HAL_GetTick>
 8008814:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008816:	e008      	b.n	800882a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008818:	f7f9 ff44 	bl	80026a4 <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	2b02      	cmp	r3, #2
 8008824:	d901      	bls.n	800882a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e211      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800882a:	f7ff fc8f 	bl	800814c <LL_RCC_HSI_IsReady>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0f1      	beq.n	8008818 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	695b      	ldr	r3, [r3, #20]
 8008838:	4618      	mov	r0, r3
 800883a:	f7ff fc98 	bl	800816e <LL_RCC_HSI_SetCalibTrimming>
 800883e:	e013      	b.n	8008868 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008840:	f7ff fc76 	bl	8008130 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008844:	f7f9 ff2e 	bl	80026a4 <HAL_GetTick>
 8008848:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800884a:	e008      	b.n	800885e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800884c:	f7f9 ff2a 	bl	80026a4 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	2b02      	cmp	r3, #2
 8008858:	d901      	bls.n	800885e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e1f7      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800885e:	f7ff fc75 	bl	800814c <LL_RCC_HSI_IsReady>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1f1      	bne.n	800884c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0308 	and.w	r3, r3, #8
 8008870:	2b00      	cmp	r3, #0
 8008872:	d06e      	beq.n	8008952 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d056      	beq.n	800892a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800887c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008884:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	69da      	ldr	r2, [r3, #28]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f003 0310 	and.w	r3, r3, #16
 8008890:	429a      	cmp	r2, r3
 8008892:	d031      	beq.n	80088f8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f003 0302 	and.w	r3, r3, #2
 800889a:	2b00      	cmp	r3, #0
 800889c:	d006      	beq.n	80088ac <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e1d0      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d013      	beq.n	80088de <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80088b6:	f7ff fc8f 	bl	80081d8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80088ba:	f7f9 fef3 	bl	80026a4 <HAL_GetTick>
 80088be:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80088c0:	e008      	b.n	80088d4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088c2:	f7f9 feef 	bl	80026a4 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	2b11      	cmp	r3, #17
 80088ce:	d901      	bls.n	80088d4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e1bc      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80088d4:	f7ff fc90 	bl	80081f8 <LL_RCC_LSI_IsReady>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1f1      	bne.n	80088c2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80088de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088e6:	f023 0210 	bic.w	r2, r3, #16
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088f2:	4313      	orrs	r3, r2
 80088f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088f8:	f7ff fc5e 	bl	80081b8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088fc:	f7f9 fed2 	bl	80026a4 <HAL_GetTick>
 8008900:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8008902:	e00c      	b.n	800891e <HAL_RCC_OscConfig+0x3c2>
 8008904:	20000000 	.word	0x20000000
 8008908:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800890c:	f7f9 feca 	bl	80026a4 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b11      	cmp	r3, #17
 8008918:	d901      	bls.n	800891e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e197      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800891e:	f7ff fc6b 	bl	80081f8 <LL_RCC_LSI_IsReady>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0f1      	beq.n	800890c <HAL_RCC_OscConfig+0x3b0>
 8008928:	e013      	b.n	8008952 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800892a:	f7ff fc55 	bl	80081d8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800892e:	f7f9 feb9 	bl	80026a4 <HAL_GetTick>
 8008932:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8008934:	e008      	b.n	8008948 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008936:	f7f9 feb5 	bl	80026a4 <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	2b11      	cmp	r3, #17
 8008942:	d901      	bls.n	8008948 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e182      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8008948:	f7ff fc56 	bl	80081f8 <LL_RCC_LSI_IsReady>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1f1      	bne.n	8008936 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0304 	and.w	r3, r3, #4
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 80d8 	beq.w	8008b10 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008960:	f7ff fb6c 	bl	800803c <LL_PWR_IsEnabledBkUpAccess>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d113      	bne.n	8008992 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800896a:	f7ff fb4d 	bl	8008008 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800896e:	f7f9 fe99 	bl	80026a4 <HAL_GetTick>
 8008972:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008974:	e008      	b.n	8008988 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008976:	f7f9 fe95 	bl	80026a4 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2b02      	cmp	r3, #2
 8008982:	d901      	bls.n	8008988 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e162      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008988:	f7ff fb58 	bl	800803c <LL_PWR_IsEnabledBkUpAccess>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0f1      	beq.n	8008976 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d07b      	beq.n	8008a92 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	2b85      	cmp	r3, #133	; 0x85
 80089a0:	d003      	beq.n	80089aa <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	2b05      	cmp	r3, #5
 80089a8:	d109      	bne.n	80089be <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80089aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089b6:	f043 0304 	orr.w	r3, r3, #4
 80089ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089be:	f7f9 fe71 	bl	80026a4 <HAL_GetTick>
 80089c2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80089c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089d0:	f043 0301 	orr.w	r3, r3, #1
 80089d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80089d8:	e00a      	b.n	80089f0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089da:	f7f9 fe63 	bl	80026a4 <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d901      	bls.n	80089f0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e12e      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80089f0:	f7ff fbd1 	bl	8008196 <LL_RCC_LSE_IsReady>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0ef      	beq.n	80089da <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	2b81      	cmp	r3, #129	; 0x81
 8008a00:	d003      	beq.n	8008a0a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	2b85      	cmp	r3, #133	; 0x85
 8008a08:	d121      	bne.n	8008a4e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a0a:	f7f9 fe4b 	bl	80026a4 <HAL_GetTick>
 8008a0e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008a24:	e00a      	b.n	8008a3c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a26:	f7f9 fe3d 	bl	80026a4 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d901      	bls.n	8008a3c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e108      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d0ec      	beq.n	8008a26 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008a4c:	e060      	b.n	8008b10 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a4e:	f7f9 fe29 	bl	80026a4 <HAL_GetTick>
 8008a52:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008a68:	e00a      	b.n	8008a80 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a6a:	f7f9 fe1b 	bl	80026a4 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d901      	bls.n	8008a80 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e0e6      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1ec      	bne.n	8008a6a <HAL_RCC_OscConfig+0x50e>
 8008a90:	e03e      	b.n	8008b10 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a92:	f7f9 fe07 	bl	80026a4 <HAL_GetTick>
 8008a96:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008aac:	e00a      	b.n	8008ac4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aae:	f7f9 fdf9 	bl	80026a4 <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d901      	bls.n	8008ac4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e0c4      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1ec      	bne.n	8008aae <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ad4:	f7f9 fde6 	bl	80026a4 <HAL_GetTick>
 8008ad8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ae6:	f023 0301 	bic.w	r3, r3, #1
 8008aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008aee:	e00a      	b.n	8008b06 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008af0:	f7f9 fdd8 	bl	80026a4 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d901      	bls.n	8008b06 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e0a3      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008b06:	f7ff fb46 	bl	8008196 <LL_RCC_LSE_IsReady>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1ef      	bne.n	8008af0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 8099 	beq.w	8008c4c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	2b0c      	cmp	r3, #12
 8008b1e:	d06c      	beq.n	8008bfa <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d14b      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b28:	f7ff fc87 	bl	800843a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b2c:	f7f9 fdba 	bl	80026a4 <HAL_GetTick>
 8008b30:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008b32:	e008      	b.n	8008b46 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b34:	f7f9 fdb6 	bl	80026a4 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	2b0a      	cmp	r3, #10
 8008b40:	d901      	bls.n	8008b46 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e083      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008b46:	f7ff fc86 	bl	8008456 <LL_RCC_PLL_IsReady>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1f1      	bne.n	8008b34 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	4b40      	ldr	r3, [pc, #256]	; (8008c58 <HAL_RCC_OscConfig+0x6fc>)
 8008b58:	4013      	ands	r3, r2
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b62:	4311      	orrs	r1, r2
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b68:	0212      	lsls	r2, r2, #8
 8008b6a:	4311      	orrs	r1, r2
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008b70:	4311      	orrs	r1, r2
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008b76:	4311      	orrs	r1, r2
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b86:	f7ff fc4a 	bl	800841e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b98:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b9a:	f7f9 fd83 	bl	80026a4 <HAL_GetTick>
 8008b9e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8008ba0:	e008      	b.n	8008bb4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ba2:	f7f9 fd7f 	bl	80026a4 <HAL_GetTick>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	2b0a      	cmp	r3, #10
 8008bae:	d901      	bls.n	8008bb4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e04c      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8008bb4:	f7ff fc4f 	bl	8008456 <LL_RCC_PLL_IsReady>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d0f1      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x646>
 8008bbe:	e045      	b.n	8008c4c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bc0:	f7ff fc3b 	bl	800843a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bc4:	f7f9 fd6e 	bl	80026a4 <HAL_GetTick>
 8008bc8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008bca:	e008      	b.n	8008bde <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bcc:	f7f9 fd6a 	bl	80026a4 <HAL_GetTick>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	2b0a      	cmp	r3, #10
 8008bd8:	d901      	bls.n	8008bde <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e037      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008bde:	f7ff fc3a 	bl	8008456 <LL_RCC_PLL_IsReady>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1f1      	bne.n	8008bcc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bec:	68da      	ldr	r2, [r3, #12]
 8008bee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bf2:	4b1a      	ldr	r3, [pc, #104]	; (8008c5c <HAL_RCC_OscConfig+0x700>)
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	60cb      	str	r3, [r1, #12]
 8008bf8:	e028      	b.n	8008c4c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d101      	bne.n	8008c06 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e023      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	f003 0203 	and.w	r2, r3, #3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d115      	bne.n	8008c48 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d10e      	bne.n	8008c48 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c34:	021b      	lsls	r3, r3, #8
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d106      	bne.n	8008c48 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d001      	beq.n	8008c4c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e000      	b.n	8008c4e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3720      	adds	r7, #32
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	11c1808c 	.word	0x11c1808c
 8008c5c:	eefefffc 	.word	0xeefefffc

08008c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e10f      	b.n	8008e94 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c74:	4b89      	ldr	r3, [pc, #548]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0307 	and.w	r3, r3, #7
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d91b      	bls.n	8008cba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c82:	4b86      	ldr	r3, [pc, #536]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f023 0207 	bic.w	r2, r3, #7
 8008c8a:	4984      	ldr	r1, [pc, #528]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c92:	f7f9 fd07 	bl	80026a4 <HAL_GetTick>
 8008c96:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c98:	e008      	b.n	8008cac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008c9a:	f7f9 fd03 	bl	80026a4 <HAL_GetTick>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d901      	bls.n	8008cac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e0f3      	b.n	8008e94 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cac:	4b7b      	ldr	r3, [pc, #492]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0307 	and.w	r3, r3, #7
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d1ef      	bne.n	8008c9a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d016      	beq.n	8008cf4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7ff fb2a 	bl	8008324 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008cd0:	f7f9 fce8 	bl	80026a4 <HAL_GetTick>
 8008cd4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008cd6:	e008      	b.n	8008cea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008cd8:	f7f9 fce4 	bl	80026a4 <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d901      	bls.n	8008cea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e0d4      	b.n	8008e94 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008cea:	f7ff fbf2 	bl	80084d2 <LL_RCC_IsActiveFlag_HPRE>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0f1      	beq.n	8008cd8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d016      	beq.n	8008d2e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7ff fb20 	bl	800834a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d0a:	f7f9 fccb 	bl	80026a4 <HAL_GetTick>
 8008d0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008d10:	e008      	b.n	8008d24 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d12:	f7f9 fcc7 	bl	80026a4 <HAL_GetTick>
 8008d16:	4602      	mov	r2, r0
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d901      	bls.n	8008d24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e0b7      	b.n	8008e94 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008d24:	f7ff fbe6 	bl	80084f4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0f1      	beq.n	8008d12 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0304 	and.w	r3, r3, #4
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d016      	beq.n	8008d68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff fb19 	bl	8008376 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d44:	f7f9 fcae 	bl	80026a4 <HAL_GetTick>
 8008d48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008d4a:	e008      	b.n	8008d5e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d4c:	f7f9 fcaa 	bl	80026a4 <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e09a      	b.n	8008e94 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008d5e:	f7ff fbdb 	bl	8008518 <LL_RCC_IsActiveFlag_PPRE1>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d0f1      	beq.n	8008d4c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0308 	and.w	r3, r3, #8
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d017      	beq.n	8008da4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	00db      	lsls	r3, r3, #3
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff fb0e 	bl	800839c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d80:	f7f9 fc90 	bl	80026a4 <HAL_GetTick>
 8008d84:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008d86:	e008      	b.n	8008d9a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d88:	f7f9 fc8c 	bl	80026a4 <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d901      	bls.n	8008d9a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e07c      	b.n	8008e94 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008d9a:	f7ff fbce 	bl	800853a <LL_RCC_IsActiveFlag_PPRE2>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d0f1      	beq.n	8008d88 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d043      	beq.n	8008e38 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d106      	bne.n	8008dc6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008db8:	f7ff f99b 	bl	80080f2 <LL_RCC_HSE_IsReady>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d11e      	bne.n	8008e00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e066      	b.n	8008e94 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	d106      	bne.n	8008ddc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008dce:	f7ff fb42 	bl	8008456 <LL_RCC_PLL_IsReady>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d113      	bne.n	8008e00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e05b      	b.n	8008e94 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d106      	bne.n	8008df2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008de4:	f7ff fa35 	bl	8008252 <LL_RCC_MSI_IsReady>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d108      	bne.n	8008e00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e050      	b.n	8008e94 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008df2:	f7ff f9ab 	bl	800814c <LL_RCC_HSI_IsReady>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e049      	b.n	8008e94 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7ff fa6f 	bl	80082e8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e0a:	f7f9 fc4b 	bl	80026a4 <HAL_GetTick>
 8008e0e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e10:	e00a      	b.n	8008e28 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e12:	f7f9 fc47 	bl	80026a4 <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d901      	bls.n	8008e28 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e035      	b.n	8008e94 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e28:	f7ff fa71 	bl	800830e <LL_RCC_GetSysClkSource>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d1ec      	bne.n	8008e12 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e38:	4b18      	ldr	r3, [pc, #96]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0307 	and.w	r3, r3, #7
 8008e40:	683a      	ldr	r2, [r7, #0]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d21b      	bcs.n	8008e7e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e46:	4b15      	ldr	r3, [pc, #84]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f023 0207 	bic.w	r2, r3, #7
 8008e4e:	4913      	ldr	r1, [pc, #76]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e56:	f7f9 fc25 	bl	80026a4 <HAL_GetTick>
 8008e5a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e5c:	e008      	b.n	8008e70 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008e5e:	f7f9 fc21 	bl	80026a4 <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d901      	bls.n	8008e70 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e011      	b.n	8008e94 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e70:	4b0a      	ldr	r3, [pc, #40]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d1ef      	bne.n	8008e5e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008e7e:	f000 f8b3 	bl	8008fe8 <HAL_RCC_GetHCLKFreq>
 8008e82:	4603      	mov	r3, r0
 8008e84:	4a06      	ldr	r2, [pc, #24]	; (8008ea0 <HAL_RCC_ClockConfig+0x240>)
 8008e86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8008e88:	4b06      	ldr	r3, [pc, #24]	; (8008ea4 <HAL_RCC_ClockConfig+0x244>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7f9 fbff 	bl	8002690 <HAL_InitTick>
 8008e92:	4603      	mov	r3, r0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	58004000 	.word	0x58004000
 8008ea0:	20000000 	.word	0x20000000
 8008ea4:	20000004 	.word	0x20000004

08008ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ea8:	b590      	push	{r4, r7, lr}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008eb6:	f7ff fa2a 	bl	800830e <LL_RCC_GetSysClkSource>
 8008eba:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ebc:	f7ff fafe 	bl	80084bc <LL_RCC_PLL_GetMainSource>
 8008ec0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d005      	beq.n	8008ed4 <HAL_RCC_GetSysClockFreq+0x2c>
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	2b0c      	cmp	r3, #12
 8008ecc:	d139      	bne.n	8008f42 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d136      	bne.n	8008f42 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008ed4:	f7ff f9cd 	bl	8008272 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d115      	bne.n	8008f0a <HAL_RCC_GetSysClockFreq+0x62>
 8008ede:	f7ff f9c8 	bl	8008272 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d106      	bne.n	8008ef6 <HAL_RCC_GetSysClockFreq+0x4e>
 8008ee8:	f7ff f9d3 	bl	8008292 <LL_RCC_MSI_GetRange>
 8008eec:	4603      	mov	r3, r0
 8008eee:	0a1b      	lsrs	r3, r3, #8
 8008ef0:	f003 030f 	and.w	r3, r3, #15
 8008ef4:	e005      	b.n	8008f02 <HAL_RCC_GetSysClockFreq+0x5a>
 8008ef6:	f7ff f9d7 	bl	80082a8 <LL_RCC_MSI_GetRangeAfterStandby>
 8008efa:	4603      	mov	r3, r0
 8008efc:	0a1b      	lsrs	r3, r3, #8
 8008efe:	f003 030f 	and.w	r3, r3, #15
 8008f02:	4a36      	ldr	r2, [pc, #216]	; (8008fdc <HAL_RCC_GetSysClockFreq+0x134>)
 8008f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f08:	e014      	b.n	8008f34 <HAL_RCC_GetSysClockFreq+0x8c>
 8008f0a:	f7ff f9b2 	bl	8008272 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d106      	bne.n	8008f22 <HAL_RCC_GetSysClockFreq+0x7a>
 8008f14:	f7ff f9bd 	bl	8008292 <LL_RCC_MSI_GetRange>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	091b      	lsrs	r3, r3, #4
 8008f1c:	f003 030f 	and.w	r3, r3, #15
 8008f20:	e005      	b.n	8008f2e <HAL_RCC_GetSysClockFreq+0x86>
 8008f22:	f7ff f9c1 	bl	80082a8 <LL_RCC_MSI_GetRangeAfterStandby>
 8008f26:	4603      	mov	r3, r0
 8008f28:	091b      	lsrs	r3, r3, #4
 8008f2a:	f003 030f 	and.w	r3, r3, #15
 8008f2e:	4a2b      	ldr	r2, [pc, #172]	; (8008fdc <HAL_RCC_GetSysClockFreq+0x134>)
 8008f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f34:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d115      	bne.n	8008f68 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008f40:	e012      	b.n	8008f68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2b04      	cmp	r3, #4
 8008f46:	d102      	bne.n	8008f4e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008f48:	4b25      	ldr	r3, [pc, #148]	; (8008fe0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008f4a:	617b      	str	r3, [r7, #20]
 8008f4c:	e00c      	b.n	8008f68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	2b08      	cmp	r3, #8
 8008f52:	d109      	bne.n	8008f68 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008f54:	f7ff f8a0 	bl	8008098 <LL_RCC_HSE_IsEnabledDiv2>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d102      	bne.n	8008f64 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008f5e:	4b20      	ldr	r3, [pc, #128]	; (8008fe0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008f60:	617b      	str	r3, [r7, #20]
 8008f62:	e001      	b.n	8008f68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008f64:	4b1f      	ldr	r3, [pc, #124]	; (8008fe4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008f66:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f68:	f7ff f9d1 	bl	800830e <LL_RCC_GetSysClkSource>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b0c      	cmp	r3, #12
 8008f70:	d12f      	bne.n	8008fd2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008f72:	f7ff faa3 	bl	80084bc <LL_RCC_PLL_GetMainSource>
 8008f76:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d003      	beq.n	8008f86 <HAL_RCC_GetSysClockFreq+0xde>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b03      	cmp	r3, #3
 8008f82:	d003      	beq.n	8008f8c <HAL_RCC_GetSysClockFreq+0xe4>
 8008f84:	e00d      	b.n	8008fa2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008f86:	4b16      	ldr	r3, [pc, #88]	; (8008fe0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008f88:	60fb      	str	r3, [r7, #12]
        break;
 8008f8a:	e00d      	b.n	8008fa8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008f8c:	f7ff f884 	bl	8008098 <LL_RCC_HSE_IsEnabledDiv2>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d102      	bne.n	8008f9c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008f96:	4b12      	ldr	r3, [pc, #72]	; (8008fe0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008f98:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008f9a:	e005      	b.n	8008fa8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8008f9c:	4b11      	ldr	r3, [pc, #68]	; (8008fe4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008f9e:	60fb      	str	r3, [r7, #12]
        break;
 8008fa0:	e002      	b.n	8008fa8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	60fb      	str	r3, [r7, #12]
        break;
 8008fa6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008fa8:	f7ff fa66 	bl	8008478 <LL_RCC_PLL_GetN>
 8008fac:	4602      	mov	r2, r0
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	fb03 f402 	mul.w	r4, r3, r2
 8008fb4:	f7ff fa77 	bl	80084a6 <LL_RCC_PLL_GetDivider>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	091b      	lsrs	r3, r3, #4
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	fbb4 f4f3 	udiv	r4, r4, r3
 8008fc2:	f7ff fa65 	bl	8008490 <LL_RCC_PLL_GetR>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	0f5b      	lsrs	r3, r3, #29
 8008fca:	3301      	adds	r3, #1
 8008fcc:	fbb4 f3f3 	udiv	r3, r4, r3
 8008fd0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008fd2:	697b      	ldr	r3, [r7, #20]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	371c      	adds	r7, #28
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd90      	pop	{r4, r7, pc}
 8008fdc:	08021a74 	.word	0x08021a74
 8008fe0:	00f42400 	.word	0x00f42400
 8008fe4:	01e84800 	.word	0x01e84800

08008fe8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fe8:	b598      	push	{r3, r4, r7, lr}
 8008fea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008fec:	f7ff ff5c 	bl	8008ea8 <HAL_RCC_GetSysClockFreq>
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	f7ff f9e6 	bl	80083c2 <LL_RCC_GetAHBPrescaler>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	091b      	lsrs	r3, r3, #4
 8008ffa:	f003 030f 	and.w	r3, r3, #15
 8008ffe:	4a03      	ldr	r2, [pc, #12]	; (800900c <HAL_RCC_GetHCLKFreq+0x24>)
 8009000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009004:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009008:	4618      	mov	r0, r3
 800900a:	bd98      	pop	{r3, r4, r7, pc}
 800900c:	08021a14 	.word	0x08021a14

08009010 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009010:	b598      	push	{r3, r4, r7, lr}
 8009012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009014:	f7ff ffe8 	bl	8008fe8 <HAL_RCC_GetHCLKFreq>
 8009018:	4604      	mov	r4, r0
 800901a:	f7ff f9ea 	bl	80083f2 <LL_RCC_GetAPB1Prescaler>
 800901e:	4603      	mov	r3, r0
 8009020:	0a1b      	lsrs	r3, r3, #8
 8009022:	4a03      	ldr	r2, [pc, #12]	; (8009030 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009028:	fa24 f303 	lsr.w	r3, r4, r3
}
 800902c:	4618      	mov	r0, r3
 800902e:	bd98      	pop	{r3, r4, r7, pc}
 8009030:	08021a54 	.word	0x08021a54

08009034 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009034:	b598      	push	{r3, r4, r7, lr}
 8009036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009038:	f7ff ffd6 	bl	8008fe8 <HAL_RCC_GetHCLKFreq>
 800903c:	4604      	mov	r4, r0
 800903e:	f7ff f9e3 	bl	8008408 <LL_RCC_GetAPB2Prescaler>
 8009042:	4603      	mov	r3, r0
 8009044:	0adb      	lsrs	r3, r3, #11
 8009046:	4a03      	ldr	r2, [pc, #12]	; (8009054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800904c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009050:	4618      	mov	r0, r3
 8009052:	bd98      	pop	{r3, r4, r7, pc}
 8009054:	08021a54 	.word	0x08021a54

08009058 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009058:	b590      	push	{r4, r7, lr}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	091b      	lsrs	r3, r3, #4
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	4a10      	ldr	r2, [pc, #64]	; (80090ac <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800906a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800906e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8009070:	f7ff f9b2 	bl	80083d8 <LL_RCC_GetAHB3Prescaler>
 8009074:	4603      	mov	r3, r0
 8009076:	091b      	lsrs	r3, r3, #4
 8009078:	f003 030f 	and.w	r3, r3, #15
 800907c:	4a0c      	ldr	r2, [pc, #48]	; (80090b0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800907e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	fbb2 f3f3 	udiv	r3, r2, r3
 8009088:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	4a09      	ldr	r2, [pc, #36]	; (80090b4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800908e:	fba2 2303 	umull	r2, r3, r2, r3
 8009092:	0c9c      	lsrs	r4, r3, #18
 8009094:	f7fe ffc6 	bl	8008024 <HAL_PWREx_GetVoltageRange>
 8009098:	4603      	mov	r3, r0
 800909a:	4619      	mov	r1, r3
 800909c:	4620      	mov	r0, r4
 800909e:	f000 f80b 	bl	80090b8 <RCC_SetFlashLatency>
 80090a2:	4603      	mov	r3, r0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd90      	pop	{r4, r7, pc}
 80090ac:	08021a74 	.word	0x08021a74
 80090b0:	08021a14 	.word	0x08021a14
 80090b4:	431bde83 	.word	0x431bde83

080090b8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08e      	sub	sp, #56	; 0x38
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80090c2:	4a3a      	ldr	r2, [pc, #232]	; (80091ac <RCC_SetFlashLatency+0xf4>)
 80090c4:	f107 0320 	add.w	r3, r7, #32
 80090c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80090cc:	6018      	str	r0, [r3, #0]
 80090ce:	3304      	adds	r3, #4
 80090d0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80090d2:	4a37      	ldr	r2, [pc, #220]	; (80091b0 <RCC_SetFlashLatency+0xf8>)
 80090d4:	f107 0318 	add.w	r3, r7, #24
 80090d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80090dc:	6018      	str	r0, [r3, #0]
 80090de:	3304      	adds	r3, #4
 80090e0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80090e2:	4a34      	ldr	r2, [pc, #208]	; (80091b4 <RCC_SetFlashLatency+0xfc>)
 80090e4:	f107 030c 	add.w	r3, r7, #12
 80090e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80090ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80090ee:	2300      	movs	r3, #0
 80090f0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090f8:	d11b      	bne.n	8009132 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80090fa:	2300      	movs	r3, #0
 80090fc:	633b      	str	r3, [r7, #48]	; 0x30
 80090fe:	e014      	b.n	800912a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009102:	005b      	lsls	r3, r3, #1
 8009104:	3338      	adds	r3, #56	; 0x38
 8009106:	443b      	add	r3, r7
 8009108:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800910c:	461a      	mov	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4293      	cmp	r3, r2
 8009112:	d807      	bhi.n	8009124 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	3338      	adds	r3, #56	; 0x38
 800911a:	443b      	add	r3, r7
 800911c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009120:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009122:	e021      	b.n	8009168 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009126:	3301      	adds	r3, #1
 8009128:	633b      	str	r3, [r7, #48]	; 0x30
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	2b02      	cmp	r3, #2
 800912e:	d9e7      	bls.n	8009100 <RCC_SetFlashLatency+0x48>
 8009130:	e01a      	b.n	8009168 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009132:	2300      	movs	r3, #0
 8009134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009136:	e014      	b.n	8009162 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	3338      	adds	r3, #56	; 0x38
 800913e:	443b      	add	r3, r7
 8009140:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8009144:	461a      	mov	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4293      	cmp	r3, r2
 800914a:	d807      	bhi.n	800915c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	3338      	adds	r3, #56	; 0x38
 8009152:	443b      	add	r3, r7
 8009154:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009158:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800915a:	e005      	b.n	8009168 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915e:	3301      	adds	r3, #1
 8009160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009164:	2b02      	cmp	r3, #2
 8009166:	d9e7      	bls.n	8009138 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009168:	4b13      	ldr	r3, [pc, #76]	; (80091b8 <RCC_SetFlashLatency+0x100>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f023 0207 	bic.w	r2, r3, #7
 8009170:	4911      	ldr	r1, [pc, #68]	; (80091b8 <RCC_SetFlashLatency+0x100>)
 8009172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009174:	4313      	orrs	r3, r2
 8009176:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009178:	f7f9 fa94 	bl	80026a4 <HAL_GetTick>
 800917c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800917e:	e008      	b.n	8009192 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009180:	f7f9 fa90 	bl	80026a4 <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	2b02      	cmp	r3, #2
 800918c:	d901      	bls.n	8009192 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e007      	b.n	80091a2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009192:	4b09      	ldr	r3, [pc, #36]	; (80091b8 <RCC_SetFlashLatency+0x100>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0307 	and.w	r3, r3, #7
 800919a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800919c:	429a      	cmp	r2, r3
 800919e:	d1ef      	bne.n	8009180 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3738      	adds	r7, #56	; 0x38
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	0802117c 	.word	0x0802117c
 80091b0:	08021184 	.word	0x08021184
 80091b4:	0802118c 	.word	0x0802118c
 80091b8:	58004000 	.word	0x58004000

080091bc <LL_RCC_LSE_IsReady>:
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80091c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091c8:	f003 0302 	and.w	r3, r3, #2
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d101      	bne.n	80091d4 <LL_RCC_LSE_IsReady+0x18>
 80091d0:	2301      	movs	r3, #1
 80091d2:	e000      	b.n	80091d6 <LL_RCC_LSE_IsReady+0x1a>
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	46bd      	mov	sp, r7
 80091da:	bc80      	pop	{r7}
 80091dc:	4770      	bx	lr

080091de <LL_RCC_SetUSARTClockSource>:
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80091e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	0c1b      	lsrs	r3, r3, #16
 80091f2:	43db      	mvns	r3, r3
 80091f4:	401a      	ands	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091fe:	4313      	orrs	r3, r2
 8009200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	bc80      	pop	{r7}
 800920c:	4770      	bx	lr

0800920e <LL_RCC_SetI2SClockSource>:
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8009216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800921a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800921e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4313      	orrs	r3, r2
 800922a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800922e:	bf00      	nop
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	bc80      	pop	{r7}
 8009236:	4770      	bx	lr

08009238 <LL_RCC_SetLPUARTClockSource>:
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009248:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800924c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4313      	orrs	r3, r2
 8009254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	bc80      	pop	{r7}
 8009260:	4770      	bx	lr

08009262 <LL_RCC_SetI2CClockSource>:
{
 8009262:	b480      	push	{r7}
 8009264:	b083      	sub	sp, #12
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800926a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800926e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	091b      	lsrs	r3, r3, #4
 8009276:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800927a:	43db      	mvns	r3, r3
 800927c:	401a      	ands	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	011b      	lsls	r3, r3, #4
 8009282:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800928a:	4313      	orrs	r3, r2
 800928c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	bc80      	pop	{r7}
 8009298:	4770      	bx	lr

0800929a <LL_RCC_SetLPTIMClockSource>:
{
 800929a:	b480      	push	{r7}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80092a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	0c1b      	lsrs	r3, r3, #16
 80092ae:	041b      	lsls	r3, r3, #16
 80092b0:	43db      	mvns	r3, r3
 80092b2:	401a      	ands	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	041b      	lsls	r3, r3, #16
 80092b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80092bc:	4313      	orrs	r3, r2
 80092be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80092c2:	bf00      	nop
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bc80      	pop	{r7}
 80092ca:	4770      	bx	lr

080092cc <LL_RCC_SetRNGClockSource>:
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80092d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092dc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80092e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bc80      	pop	{r7}
 80092f4:	4770      	bx	lr

080092f6 <LL_RCC_SetADCClockSource>:
{
 80092f6:	b480      	push	{r7}
 80092f8:	b083      	sub	sp, #12
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80092fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009306:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800930a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4313      	orrs	r3, r2
 8009312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009316:	bf00      	nop
 8009318:	370c      	adds	r7, #12
 800931a:	46bd      	mov	sp, r7
 800931c:	bc80      	pop	{r7}
 800931e:	4770      	bx	lr

08009320 <LL_RCC_SetRTCClockSource>:
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800932c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4313      	orrs	r3, r2
 800933c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	bc80      	pop	{r7}
 8009348:	4770      	bx	lr

0800934a <LL_RCC_GetRTCClockSource>:
{
 800934a:	b480      	push	{r7}
 800934c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800934e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009356:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800935a:	4618      	mov	r0, r3
 800935c:	46bd      	mov	sp, r7
 800935e:	bc80      	pop	{r7}
 8009360:	4770      	bx	lr

08009362 <LL_RCC_ForceBackupDomainReset>:
{
 8009362:	b480      	push	{r7}
 8009364:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800936a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800936e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800937a:	bf00      	nop
 800937c:	46bd      	mov	sp, r7
 800937e:	bc80      	pop	{r7}
 8009380:	4770      	bx	lr

08009382 <LL_RCC_ReleaseBackupDomainReset>:
{
 8009382:	b480      	push	{r7}
 8009384:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800938a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800938e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800939a:	bf00      	nop
 800939c:	46bd      	mov	sp, r7
 800939e:	bc80      	pop	{r7}
 80093a0:	4770      	bx	lr
	...

080093a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80093b0:	2300      	movs	r3, #0
 80093b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80093b4:	2300      	movs	r3, #0
 80093b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d058      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80093c4:	f7fe fe20 	bl	8008008 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093c8:	f7f9 f96c 	bl	80026a4 <HAL_GetTick>
 80093cc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80093ce:	e009      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093d0:	f7f9 f968 	bl	80026a4 <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d902      	bls.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	74fb      	strb	r3, [r7, #19]
        break;
 80093e2:	e006      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80093e4:	4b7b      	ldr	r3, [pc, #492]	; (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093f0:	d1ee      	bne.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80093f2:	7cfb      	ldrb	r3, [r7, #19]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d13c      	bne.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80093f8:	f7ff ffa7 	bl	800934a <LL_RCC_GetRTCClockSource>
 80093fc:	4602      	mov	r2, r0
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009402:	429a      	cmp	r2, r3
 8009404:	d00f      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800940a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800940e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009412:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009414:	f7ff ffa5 	bl	8009362 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009418:	f7ff ffb3 	bl	8009382 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800941c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f003 0302 	and.w	r3, r3, #2
 800942c:	2b00      	cmp	r3, #0
 800942e:	d014      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009430:	f7f9 f938 	bl	80026a4 <HAL_GetTick>
 8009434:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8009436:	e00b      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009438:	f7f9 f934 	bl	80026a4 <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	f241 3288 	movw	r2, #5000	; 0x1388
 8009446:	4293      	cmp	r3, r2
 8009448:	d902      	bls.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	74fb      	strb	r3, [r7, #19]
            break;
 800944e:	e004      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8009450:	f7ff feb4 	bl	80091bc <LL_RCC_LSE_IsReady>
 8009454:	4603      	mov	r3, r0
 8009456:	2b01      	cmp	r3, #1
 8009458:	d1ee      	bne.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800945a:	7cfb      	ldrb	r3, [r7, #19]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d105      	bne.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009464:	4618      	mov	r0, r3
 8009466:	f7ff ff5b 	bl	8009320 <LL_RCC_SetRTCClockSource>
 800946a:	e004      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800946c:	7cfb      	ldrb	r3, [r7, #19]
 800946e:	74bb      	strb	r3, [r7, #18]
 8009470:	e001      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009472:	7cfb      	ldrb	r3, [r7, #19]
 8009474:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b00      	cmp	r3, #0
 8009480:	d004      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff fea9 	bl	80091de <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b00      	cmp	r3, #0
 8009496:	d004      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	4618      	mov	r0, r3
 800949e:	f7ff fe9e 	bl	80091de <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0320 	and.w	r3, r3, #32
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d004      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7ff fec0 	bl	8009238 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d004      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a1b      	ldr	r3, [r3, #32]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff fee6 	bl	800929a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d004      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff fedb 	bl	800929a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d004      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7ff fed0 	bl	800929a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009502:	2b00      	cmp	r3, #0
 8009504:	d004      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	4618      	mov	r0, r3
 800950c:	f7ff fea9 	bl	8009262 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009518:	2b00      	cmp	r3, #0
 800951a:	d004      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	4618      	mov	r0, r3
 8009522:	f7ff fe9e 	bl	8009262 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800952e:	2b00      	cmp	r3, #0
 8009530:	d004      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	4618      	mov	r0, r3
 8009538:	f7ff fe93 	bl	8009262 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0310 	and.w	r3, r3, #16
 8009544:	2b00      	cmp	r3, #0
 8009546:	d011      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	4618      	mov	r0, r3
 800954e:	f7ff fe5e 	bl	800920e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800955a:	d107      	bne.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800955c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800956a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009574:	2b00      	cmp	r3, #0
 8009576:	d010      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957c:	4618      	mov	r0, r3
 800957e:	f7ff fea5 	bl	80092cc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009586:	2b00      	cmp	r3, #0
 8009588:	d107      	bne.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800958a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009598:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d011      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff fea3 	bl	80092f6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095b8:	d107      	bne.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80095ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095c8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80095ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3718      	adds	r7, #24
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	58000400 	.word	0x58000400

080095d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d071      	beq.n	80096ce <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d106      	bne.n	8009604 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7f8 fde0 	bl	80021c4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2202      	movs	r2, #2
 8009608:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800960c:	4b32      	ldr	r3, [pc, #200]	; (80096d8 <HAL_RTC_Init+0x100>)
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f003 0310 	and.w	r3, r3, #16
 8009614:	2b10      	cmp	r3, #16
 8009616:	d051      	beq.n	80096bc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009618:	4b2f      	ldr	r3, [pc, #188]	; (80096d8 <HAL_RTC_Init+0x100>)
 800961a:	22ca      	movs	r2, #202	; 0xca
 800961c:	625a      	str	r2, [r3, #36]	; 0x24
 800961e:	4b2e      	ldr	r3, [pc, #184]	; (80096d8 <HAL_RTC_Init+0x100>)
 8009620:	2253      	movs	r2, #83	; 0x53
 8009622:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fa11 	bl	8009a4c <RTC_EnterInitMode>
 800962a:	4603      	mov	r3, r0
 800962c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d13f      	bne.n	80096b4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009634:	4b28      	ldr	r3, [pc, #160]	; (80096d8 <HAL_RTC_Init+0x100>)
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	4a27      	ldr	r2, [pc, #156]	; (80096d8 <HAL_RTC_Init+0x100>)
 800963a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800963e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009642:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009644:	4b24      	ldr	r3, [pc, #144]	; (80096d8 <HAL_RTC_Init+0x100>)
 8009646:	699a      	ldr	r2, [r3, #24]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6859      	ldr	r1, [r3, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	4319      	orrs	r1, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	430b      	orrs	r3, r1
 8009658:	491f      	ldr	r1, [pc, #124]	; (80096d8 <HAL_RTC_Init+0x100>)
 800965a:	4313      	orrs	r3, r2
 800965c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	68da      	ldr	r2, [r3, #12]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	041b      	lsls	r3, r3, #16
 8009668:	491b      	ldr	r1, [pc, #108]	; (80096d8 <HAL_RTC_Init+0x100>)
 800966a:	4313      	orrs	r3, r2
 800966c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800966e:	4b1a      	ldr	r3, [pc, #104]	; (80096d8 <HAL_RTC_Init+0x100>)
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967e:	430b      	orrs	r3, r1
 8009680:	4915      	ldr	r1, [pc, #84]	; (80096d8 <HAL_RTC_Init+0x100>)
 8009682:	4313      	orrs	r3, r2
 8009684:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fa14 	bl	8009ab4 <RTC_ExitInitMode>
 800968c:	4603      	mov	r3, r0
 800968e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10e      	bne.n	80096b4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8009696:	4b10      	ldr	r3, [pc, #64]	; (80096d8 <HAL_RTC_Init+0x100>)
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a19      	ldr	r1, [r3, #32]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	69db      	ldr	r3, [r3, #28]
 80096a6:	4319      	orrs	r1, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	430b      	orrs	r3, r1
 80096ae:	490a      	ldr	r1, [pc, #40]	; (80096d8 <HAL_RTC_Init+0x100>)
 80096b0:	4313      	orrs	r3, r2
 80096b2:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096b4:	4b08      	ldr	r3, [pc, #32]	; (80096d8 <HAL_RTC_Init+0x100>)
 80096b6:	22ff      	movs	r2, #255	; 0xff
 80096b8:	625a      	str	r2, [r3, #36]	; 0x24
 80096ba:	e001      	b.n	80096c0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d103      	bne.n	80096ce <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	40002800 	.word	0x40002800

080096dc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80096dc:	b590      	push	{r4, r7, lr}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80096e8:	2300      	movs	r3, #0
 80096ea:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d101      	bne.n	80096fa <HAL_RTC_SetAlarm_IT+0x1e>
 80096f6:	2302      	movs	r3, #2
 80096f8:	e0f3      	b.n	80098e2 <HAL_RTC_SetAlarm_IT+0x206>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2202      	movs	r2, #2
 8009706:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800970a:	4b78      	ldr	r3, [pc, #480]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009712:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800971a:	d06a      	beq.n	80097f2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d13a      	bne.n	8009798 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009722:	4b72      	ldr	r3, [pc, #456]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800972a:	2b00      	cmp	r3, #0
 800972c:	d102      	bne.n	8009734 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	2200      	movs	r2, #0
 8009732:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	4618      	mov	r0, r3
 8009742:	f000 f9f5 	bl	8009b30 <RTC_ByteToBcd2>
 8009746:	4603      	mov	r3, r0
 8009748:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	785b      	ldrb	r3, [r3, #1]
 800974e:	4618      	mov	r0, r3
 8009750:	f000 f9ee 	bl	8009b30 <RTC_ByteToBcd2>
 8009754:	4603      	mov	r3, r0
 8009756:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009758:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	789b      	ldrb	r3, [r3, #2]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 f9e6 	bl	8009b30 <RTC_ByteToBcd2>
 8009764:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009766:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	78db      	ldrb	r3, [r3, #3]
 800976e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009770:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800977a:	4618      	mov	r0, r3
 800977c:	f000 f9d8 	bl	8009b30 <RTC_ByteToBcd2>
 8009780:	4603      	mov	r3, r0
 8009782:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009784:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800978c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009792:	4313      	orrs	r3, r2
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	e02c      	b.n	80097f2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	695b      	ldr	r3, [r3, #20]
 800979c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80097a0:	d00d      	beq.n	80097be <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097aa:	d008      	beq.n	80097be <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80097ac:	4b4f      	ldr	r3, [pc, #316]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d102      	bne.n	80097be <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	2200      	movs	r2, #0
 80097bc:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	785b      	ldrb	r3, [r3, #1]
 80097c8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80097ca:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80097d0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	78db      	ldrb	r3, [r3, #3]
 80097d6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80097d8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80097e0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80097e2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80097e8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80097ee:	4313      	orrs	r3, r2
 80097f0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80097f2:	4b3e      	ldr	r3, [pc, #248]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 80097f4:	22ca      	movs	r2, #202	; 0xca
 80097f6:	625a      	str	r2, [r3, #36]	; 0x24
 80097f8:	4b3c      	ldr	r3, [pc, #240]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 80097fa:	2253      	movs	r2, #83	; 0x53
 80097fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009806:	d12c      	bne.n	8009862 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009808:	4b38      	ldr	r3, [pc, #224]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	4a37      	ldr	r2, [pc, #220]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 800980e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009812:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009814:	4b35      	ldr	r3, [pc, #212]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 8009816:	2201      	movs	r2, #1
 8009818:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009820:	d107      	bne.n	8009832 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	699a      	ldr	r2, [r3, #24]
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	4930      	ldr	r1, [pc, #192]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 800982c:	4313      	orrs	r3, r2
 800982e:	644b      	str	r3, [r1, #68]	; 0x44
 8009830:	e006      	b.n	8009840 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8009832:	4a2e      	ldr	r2, [pc, #184]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8009838:	4a2c      	ldr	r2, [pc, #176]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8009840:	4a2a      	ldr	r2, [pc, #168]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984c:	f043 0201 	orr.w	r2, r3, #1
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009854:	4b25      	ldr	r3, [pc, #148]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	4a24      	ldr	r2, [pc, #144]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 800985a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800985e:	6193      	str	r3, [r2, #24]
 8009860:	e02b      	b.n	80098ba <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009862:	4b22      	ldr	r3, [pc, #136]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	4a21      	ldr	r2, [pc, #132]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 8009868:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800986c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800986e:	4b1f      	ldr	r3, [pc, #124]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 8009870:	2202      	movs	r2, #2
 8009872:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800987a:	d107      	bne.n	800988c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	699a      	ldr	r2, [r3, #24]
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	69db      	ldr	r3, [r3, #28]
 8009884:	4919      	ldr	r1, [pc, #100]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 8009886:	4313      	orrs	r3, r2
 8009888:	64cb      	str	r3, [r1, #76]	; 0x4c
 800988a:	e006      	b.n	800989a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800988c:	4a17      	ldr	r2, [pc, #92]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8009892:	4a16      	ldr	r2, [pc, #88]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800989a:	4a14      	ldr	r2, [pc, #80]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a6:	f043 0202 	orr.w	r2, r3, #2
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80098ae:	4b0f      	ldr	r3, [pc, #60]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	4a0e      	ldr	r2, [pc, #56]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 80098b4:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80098b8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80098ba:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <HAL_RTC_SetAlarm_IT+0x214>)
 80098bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098c0:	4a0b      	ldr	r2, [pc, #44]	; (80098f0 <HAL_RTC_SetAlarm_IT+0x214>)
 80098c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098ca:	4b08      	ldr	r3, [pc, #32]	; (80098ec <HAL_RTC_SetAlarm_IT+0x210>)
 80098cc:	22ff      	movs	r2, #255	; 0xff
 80098ce:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	371c      	adds	r7, #28
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd90      	pop	{r4, r7, pc}
 80098ea:	bf00      	nop
 80098ec:	40002800 	.word	0x40002800
 80098f0:	58000800 	.word	0x58000800

080098f4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009904:	2b01      	cmp	r3, #1
 8009906:	d101      	bne.n	800990c <HAL_RTC_DeactivateAlarm+0x18>
 8009908:	2302      	movs	r3, #2
 800990a:	e048      	b.n	800999e <HAL_RTC_DeactivateAlarm+0xaa>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800991c:	4b22      	ldr	r3, [pc, #136]	; (80099a8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800991e:	22ca      	movs	r2, #202	; 0xca
 8009920:	625a      	str	r2, [r3, #36]	; 0x24
 8009922:	4b21      	ldr	r3, [pc, #132]	; (80099a8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009924:	2253      	movs	r2, #83	; 0x53
 8009926:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800992e:	d115      	bne.n	800995c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009930:	4b1d      	ldr	r3, [pc, #116]	; (80099a8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	4a1c      	ldr	r2, [pc, #112]	; (80099a8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009936:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800993a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800993c:	4b1a      	ldr	r3, [pc, #104]	; (80099a8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800993e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009940:	4a19      	ldr	r2, [pc, #100]	; (80099a8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009942:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009946:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994c:	f023 0201 	bic.w	r2, r3, #1
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009954:	4b14      	ldr	r3, [pc, #80]	; (80099a8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009956:	2201      	movs	r2, #1
 8009958:	65da      	str	r2, [r3, #92]	; 0x5c
 800995a:	e014      	b.n	8009986 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800995c:	4b12      	ldr	r3, [pc, #72]	; (80099a8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	4a11      	ldr	r2, [pc, #68]	; (80099a8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009962:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009966:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8009968:	4b0f      	ldr	r3, [pc, #60]	; (80099a8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800996a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800996c:	4a0e      	ldr	r2, [pc, #56]	; (80099a8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800996e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009972:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009978:	f023 0202 	bic.w	r2, r3, #2
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009980:	4b09      	ldr	r3, [pc, #36]	; (80099a8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009982:	2202      	movs	r2, #2
 8009984:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009986:	4b08      	ldr	r3, [pc, #32]	; (80099a8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009988:	22ff      	movs	r2, #255	; 0xff
 800998a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bc80      	pop	{r7}
 80099a6:	4770      	bx	lr
 80099a8:	40002800 	.word	0x40002800

080099ac <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80099b4:	4b11      	ldr	r3, [pc, #68]	; (80099fc <HAL_RTC_AlarmIRQHandler+0x50>)
 80099b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099bc:	4013      	ands	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d005      	beq.n	80099d6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80099ca:	4b0c      	ldr	r3, [pc, #48]	; (80099fc <HAL_RTC_AlarmIRQHandler+0x50>)
 80099cc:	2201      	movs	r2, #1
 80099ce:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f7f9 f892 	bl	8002afa <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f003 0302 	and.w	r3, r3, #2
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d005      	beq.n	80099ec <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80099e0:	4b06      	ldr	r3, [pc, #24]	; (80099fc <HAL_RTC_AlarmIRQHandler+0x50>)
 80099e2:	2202      	movs	r2, #2
 80099e4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f94a 	bl	8009c80 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80099f4:	bf00      	nop
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	40002800 	.word	0x40002800

08009a00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009a08:	4b0f      	ldr	r3, [pc, #60]	; (8009a48 <HAL_RTC_WaitForSynchro+0x48>)
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	4a0e      	ldr	r2, [pc, #56]	; (8009a48 <HAL_RTC_WaitForSynchro+0x48>)
 8009a0e:	f023 0320 	bic.w	r3, r3, #32
 8009a12:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009a14:	f7f8 fe46 	bl	80026a4 <HAL_GetTick>
 8009a18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009a1a:	e009      	b.n	8009a30 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009a1c:	f7f8 fe42 	bl	80026a4 <HAL_GetTick>
 8009a20:	4602      	mov	r2, r0
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a2a:	d901      	bls.n	8009a30 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e006      	b.n	8009a3e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009a30:	4b05      	ldr	r3, [pc, #20]	; (8009a48 <HAL_RTC_WaitForSynchro+0x48>)
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	f003 0320 	and.w	r3, r3, #32
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d0ef      	beq.n	8009a1c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	40002800 	.word	0x40002800

08009a4c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a54:	2300      	movs	r3, #0
 8009a56:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009a58:	4b15      	ldr	r3, [pc, #84]	; (8009ab0 <RTC_EnterInitMode+0x64>)
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d120      	bne.n	8009aa6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009a64:	4b12      	ldr	r3, [pc, #72]	; (8009ab0 <RTC_EnterInitMode+0x64>)
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	4a11      	ldr	r2, [pc, #68]	; (8009ab0 <RTC_EnterInitMode+0x64>)
 8009a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a6e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009a70:	f7f8 fe18 	bl	80026a4 <HAL_GetTick>
 8009a74:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009a76:	e00d      	b.n	8009a94 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009a78:	f7f8 fe14 	bl	80026a4 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a86:	d905      	bls.n	8009a94 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2203      	movs	r2, #3
 8009a90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009a94:	4b06      	ldr	r3, [pc, #24]	; (8009ab0 <RTC_EnterInitMode+0x64>)
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d102      	bne.n	8009aa6 <RTC_EnterInitMode+0x5a>
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d1e8      	bne.n	8009a78 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	40002800 	.word	0x40002800

08009ab4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009ac0:	4b1a      	ldr	r3, [pc, #104]	; (8009b2c <RTC_ExitInitMode+0x78>)
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	4a19      	ldr	r2, [pc, #100]	; (8009b2c <RTC_ExitInitMode+0x78>)
 8009ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aca:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009acc:	4b17      	ldr	r3, [pc, #92]	; (8009b2c <RTC_ExitInitMode+0x78>)
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	f003 0320 	and.w	r3, r3, #32
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10c      	bne.n	8009af2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff ff91 	bl	8009a00 <HAL_RTC_WaitForSynchro>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d01e      	beq.n	8009b22 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2203      	movs	r2, #3
 8009ae8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009aec:	2303      	movs	r3, #3
 8009aee:	73fb      	strb	r3, [r7, #15]
 8009af0:	e017      	b.n	8009b22 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009af2:	4b0e      	ldr	r3, [pc, #56]	; (8009b2c <RTC_ExitInitMode+0x78>)
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	4a0d      	ldr	r2, [pc, #52]	; (8009b2c <RTC_ExitInitMode+0x78>)
 8009af8:	f023 0320 	bic.w	r3, r3, #32
 8009afc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7ff ff7e 	bl	8009a00 <HAL_RTC_WaitForSynchro>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d005      	beq.n	8009b16 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2203      	movs	r2, #3
 8009b0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009b16:	4b05      	ldr	r3, [pc, #20]	; (8009b2c <RTC_ExitInitMode+0x78>)
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	4a04      	ldr	r2, [pc, #16]	; (8009b2c <RTC_ExitInitMode+0x78>)
 8009b1c:	f043 0320 	orr.w	r3, r3, #32
 8009b20:	6193      	str	r3, [r2, #24]
  }

  return status;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	40002800 	.word	0x40002800

08009b30 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	4603      	mov	r3, r0
 8009b38:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8009b3e:	79fb      	ldrb	r3, [r7, #7]
 8009b40:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8009b42:	e005      	b.n	8009b50 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	3301      	adds	r3, #1
 8009b48:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8009b4a:	7afb      	ldrb	r3, [r7, #11]
 8009b4c:	3b0a      	subs	r3, #10
 8009b4e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8009b50:	7afb      	ldrb	r3, [r7, #11]
 8009b52:	2b09      	cmp	r3, #9
 8009b54:	d8f6      	bhi.n	8009b44 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	011b      	lsls	r3, r3, #4
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	7afb      	ldrb	r3, [r7, #11]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	b2db      	uxtb	r3, r3
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3714      	adds	r7, #20
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bc80      	pop	{r7}
 8009b6c:	4770      	bx	lr
	...

08009b70 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d101      	bne.n	8009b86 <HAL_RTCEx_EnableBypassShadow+0x16>
 8009b82:	2302      	movs	r3, #2
 8009b84:	e01f      	b.n	8009bc6 <HAL_RTCEx_EnableBypassShadow+0x56>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2202      	movs	r2, #2
 8009b92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b96:	4b0e      	ldr	r3, [pc, #56]	; (8009bd0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009b98:	22ca      	movs	r2, #202	; 0xca
 8009b9a:	625a      	str	r2, [r3, #36]	; 0x24
 8009b9c:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009b9e:	2253      	movs	r2, #83	; 0x53
 8009ba0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009ba2:	4b0b      	ldr	r3, [pc, #44]	; (8009bd0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	4a0a      	ldr	r2, [pc, #40]	; (8009bd0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009ba8:	f043 0320 	orr.w	r3, r3, #32
 8009bac:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bae:	4b08      	ldr	r3, [pc, #32]	; (8009bd0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009bb0:	22ff      	movs	r2, #255	; 0xff
 8009bb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bc80      	pop	{r7}
 8009bce:	4770      	bx	lr
 8009bd0:	40002800 	.word	0x40002800

08009bd4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d101      	bne.n	8009bea <HAL_RTCEx_SetSSRU_IT+0x16>
 8009be6:	2302      	movs	r3, #2
 8009be8:	e027      	b.n	8009c3a <HAL_RTCEx_SetSSRU_IT+0x66>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bfa:	4b12      	ldr	r3, [pc, #72]	; (8009c44 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009bfc:	22ca      	movs	r2, #202	; 0xca
 8009bfe:	625a      	str	r2, [r3, #36]	; 0x24
 8009c00:	4b10      	ldr	r3, [pc, #64]	; (8009c44 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009c02:	2253      	movs	r2, #83	; 0x53
 8009c04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8009c06:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	4a0e      	ldr	r2, [pc, #56]	; (8009c44 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c10:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8009c12:	4b0d      	ldr	r3, [pc, #52]	; (8009c48 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8009c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c18:	4a0b      	ldr	r2, [pc, #44]	; (8009c48 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8009c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c22:	4b08      	ldr	r3, [pc, #32]	; (8009c44 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009c24:	22ff      	movs	r2, #255	; 0xff
 8009c26:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bc80      	pop	{r7}
 8009c42:	4770      	bx	lr
 8009c44:	40002800 	.word	0x40002800
 8009c48:	58000800 	.word	0x58000800

08009c4c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8009c54:	4b09      	ldr	r3, [pc, #36]	; (8009c7c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8009c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d005      	beq.n	8009c6c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8009c60:	4b06      	ldr	r3, [pc, #24]	; (8009c7c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8009c62:	2240      	movs	r2, #64	; 0x40
 8009c64:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7f8 ff51 	bl	8002b0e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009c74:	bf00      	nop
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	40002800 	.word	0x40002800

08009c80 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bc80      	pop	{r7}
 8009c90:	4770      	bx	lr
	...

08009c94 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8009ca0:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <HAL_RTCEx_BKUPWrite+0x2c>)
 8009ca2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	4413      	add	r3, r2
 8009cac:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	601a      	str	r2, [r3, #0]
}
 8009cb4:	bf00      	nop
 8009cb6:	371c      	adds	r7, #28
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bc80      	pop	{r7}
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	4000b100 	.word	0x4000b100

08009cc4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8009cce:	4b07      	ldr	r3, [pc, #28]	; (8009cec <HAL_RTCEx_BKUPRead+0x28>)
 8009cd0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	4413      	add	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3714      	adds	r7, #20
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bc80      	pop	{r7}
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	4000b100 	.word	0x4000b100

08009cf0 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8009cf8:	4b06      	ldr	r3, [pc, #24]	; (8009d14 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d00:	4904      	ldr	r1, [pc, #16]	; (8009d14 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	608b      	str	r3, [r1, #8]
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bc80      	pop	{r7}
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	58000400 	.word	0x58000400

08009d18 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009d1c:	4b05      	ldr	r3, [pc, #20]	; (8009d34 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d22:	4a04      	ldr	r2, [pc, #16]	; (8009d34 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009d2c:	bf00      	nop
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bc80      	pop	{r7}
 8009d32:	4770      	bx	lr
 8009d34:	58000400 	.word	0x58000400

08009d38 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009d3c:	4b05      	ldr	r3, [pc, #20]	; (8009d54 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d42:	4a04      	ldr	r2, [pc, #16]	; (8009d54 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009d44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009d4c:	bf00      	nop
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bc80      	pop	{r7}
 8009d52:	4770      	bx	lr
 8009d54:	58000400 	.word	0x58000400

08009d58 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009d5c:	4b03      	ldr	r3, [pc, #12]	; (8009d6c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8009d5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d62:	619a      	str	r2, [r3, #24]
}
 8009d64:	bf00      	nop
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bc80      	pop	{r7}
 8009d6a:	4770      	bx	lr
 8009d6c:	58000400 	.word	0x58000400

08009d70 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8009d70:	b480      	push	{r7}
 8009d72:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8009d74:	4b06      	ldr	r3, [pc, #24]	; (8009d90 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	f003 0302 	and.w	r3, r3, #2
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d101      	bne.n	8009d84 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8009d80:	2301      	movs	r3, #1
 8009d82:	e000      	b.n	8009d86 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bc80      	pop	{r7}
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	58000400 	.word	0x58000400

08009d94 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8009d94:	b480      	push	{r7}
 8009d96:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8009d98:	4b06      	ldr	r3, [pc, #24]	; (8009db4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8009d9a:	695b      	ldr	r3, [r3, #20]
 8009d9c:	f003 0304 	and.w	r3, r3, #4
 8009da0:	2b04      	cmp	r3, #4
 8009da2:	d101      	bne.n	8009da8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8009da4:	2301      	movs	r3, #1
 8009da6:	e000      	b.n	8009daa <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bc80      	pop	{r7}
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	58000400 	.word	0x58000400

08009db8 <LL_RCC_RF_DisableReset>:
{
 8009db8:	b480      	push	{r7}
 8009dba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009dc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009dd0:	bf00      	nop
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bc80      	pop	{r7}
 8009dd6:	4770      	bx	lr

08009dd8 <LL_RCC_IsRFUnderReset>:
{
 8009dd8:	b480      	push	{r7}
 8009dda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dec:	d101      	bne.n	8009df2 <LL_RCC_IsRFUnderReset+0x1a>
 8009dee:	2301      	movs	r3, #1
 8009df0:	e000      	b.n	8009df4 <LL_RCC_IsRFUnderReset+0x1c>
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bc80      	pop	{r7}
 8009dfa:	4770      	bx	lr

08009dfc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009e04:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <LL_EXTI_EnableIT_32_63+0x24>)
 8009e06:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009e0a:	4905      	ldr	r1, [pc, #20]	; (8009e20 <LL_EXTI_EnableIT_32_63+0x24>)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009e14:	bf00      	nop
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bc80      	pop	{r7}
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	58000800 	.word	0x58000800

08009e24 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d103      	bne.n	8009e3a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	73fb      	strb	r3, [r7, #15]
    return status;
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	e052      	b.n	8009ee0 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	799b      	ldrb	r3, [r3, #6]
 8009e42:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8009e44:	7bbb      	ldrb	r3, [r7, #14]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d002      	beq.n	8009e50 <HAL_SUBGHZ_Init+0x2c>
 8009e4a:	7bbb      	ldrb	r3, [r7, #14]
 8009e4c:	2b03      	cmp	r3, #3
 8009e4e:	d109      	bne.n	8009e64 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f7f8 fa82 	bl	8002360 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009e5c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009e60:	f7ff ffcc 	bl	8009dfc <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d126      	bne.n	8009eb8 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2202      	movs	r2, #2
 8009e6e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8009e70:	f7ff ffa2 	bl	8009db8 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009e74:	4b1c      	ldr	r3, [pc, #112]	; (8009ee8 <HAL_SUBGHZ_Init+0xc4>)
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	4613      	mov	r3, r2
 8009e7a:	00db      	lsls	r3, r3, #3
 8009e7c:	1a9b      	subs	r3, r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	0cdb      	lsrs	r3, r3, #19
 8009e82:	2264      	movs	r2, #100	; 0x64
 8009e84:	fb02 f303 	mul.w	r3, r2, r3
 8009e88:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d105      	bne.n	8009e9c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	609a      	str	r2, [r3, #8]
        break;
 8009e9a:	e007      	b.n	8009eac <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8009ea2:	f7ff ff99 	bl	8009dd8 <LL_RCC_IsRFUnderReset>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1ee      	bne.n	8009e8a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009eac:	f7ff ff34 	bl	8009d18 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8009eb0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009eb4:	f7ff ff1c 	bl	8009cf0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8009eb8:	f7ff ff4e 	bl	8009d58 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10a      	bne.n	8009ed8 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 fab6 	bl	800a438 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	719a      	strb	r2, [r3, #6]

  return status;
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	20000000 	.word	0x20000000

08009eec <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b086      	sub	sp, #24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	607a      	str	r2, [r7, #4]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	460b      	mov	r3, r1
 8009efa:	817b      	strh	r3, [r7, #10]
 8009efc:	4613      	mov	r3, r2
 8009efe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	799b      	ldrb	r3, [r3, #6]
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d14a      	bne.n	8009fa0 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	795b      	ldrb	r3, [r3, #5]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d101      	bne.n	8009f16 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8009f12:	2302      	movs	r3, #2
 8009f14:	e045      	b.n	8009fa2 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2202      	movs	r2, #2
 8009f20:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f000 fb56 	bl	800a5d4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009f28:	f7ff ff06 	bl	8009d38 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8009f2c:	210d      	movs	r1, #13
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f000 faa2 	bl	800a478 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009f34:	897b      	ldrh	r3, [r7, #10]
 8009f36:	0a1b      	lsrs	r3, r3, #8
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f000 fa9a 	bl	800a478 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009f44:	897b      	ldrh	r3, [r7, #10]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	4619      	mov	r1, r3
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 fa94 	bl	800a478 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009f50:	2300      	movs	r3, #0
 8009f52:	82bb      	strh	r3, [r7, #20]
 8009f54:	e00a      	b.n	8009f6c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009f56:	8abb      	ldrh	r3, [r7, #20]
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	4619      	mov	r1, r3
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f000 fa89 	bl	800a478 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009f66:	8abb      	ldrh	r3, [r7, #20]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	82bb      	strh	r3, [r7, #20]
 8009f6c:	8aba      	ldrh	r2, [r7, #20]
 8009f6e:	893b      	ldrh	r3, [r7, #8]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d3f0      	bcc.n	8009f56 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009f74:	f7ff fed0 	bl	8009d18 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f000 fb4f 	bl	800a61c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d002      	beq.n	8009f8c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	75fb      	strb	r3, [r7, #23]
 8009f8a:	e001      	b.n	8009f90 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2201      	movs	r2, #1
 8009f94:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	715a      	strb	r2, [r3, #5]

    return status;
 8009f9c:	7dfb      	ldrb	r3, [r7, #23]
 8009f9e:	e000      	b.n	8009fa2 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009fa0:	2302      	movs	r3, #2
  }
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b088      	sub	sp, #32
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	817b      	strh	r3, [r7, #10]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	799b      	ldrb	r3, [r3, #6]
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d14a      	bne.n	800a062 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	795b      	ldrb	r3, [r3, #5]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d101      	bne.n	8009fd8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	e045      	b.n	800a064 <HAL_SUBGHZ_ReadRegisters+0xba>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f000 faf8 	bl	800a5d4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009fe4:	f7ff fea8 	bl	8009d38 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8009fe8:	211d      	movs	r1, #29
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 fa44 	bl	800a478 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009ff0:	897b      	ldrh	r3, [r7, #10]
 8009ff2:	0a1b      	lsrs	r3, r3, #8
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 fa3c 	bl	800a478 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a000:	897b      	ldrh	r3, [r7, #10]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	4619      	mov	r1, r3
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 fa36 	bl	800a478 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800a00c:	2100      	movs	r1, #0
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f000 fa32 	bl	800a478 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a014:	2300      	movs	r3, #0
 800a016:	82fb      	strh	r3, [r7, #22]
 800a018:	e009      	b.n	800a02e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a01a:	69b9      	ldr	r1, [r7, #24]
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 fa81 	bl	800a524 <SUBGHZSPI_Receive>
      pData++;
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	3301      	adds	r3, #1
 800a026:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a028:	8afb      	ldrh	r3, [r7, #22]
 800a02a:	3301      	adds	r3, #1
 800a02c:	82fb      	strh	r3, [r7, #22]
 800a02e:	8afa      	ldrh	r2, [r7, #22]
 800a030:	893b      	ldrh	r3, [r7, #8]
 800a032:	429a      	cmp	r2, r3
 800a034:	d3f1      	bcc.n	800a01a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a036:	f7ff fe6f 	bl	8009d18 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f000 faee 	bl	800a61c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d002      	beq.n	800a04e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	77fb      	strb	r3, [r7, #31]
 800a04c:	e001      	b.n	800a052 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800a04e:	2300      	movs	r3, #0
 800a050:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2201      	movs	r2, #1
 800a056:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	715a      	strb	r2, [r3, #5]

    return status;
 800a05e:	7ffb      	ldrb	r3, [r7, #31]
 800a060:	e000      	b.n	800a064 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800a062:	2302      	movs	r3, #2
  }
}
 800a064:	4618      	mov	r0, r3
 800a066:	3720      	adds	r7, #32
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	607a      	str	r2, [r7, #4]
 800a076:	461a      	mov	r2, r3
 800a078:	460b      	mov	r3, r1
 800a07a:	72fb      	strb	r3, [r7, #11]
 800a07c:	4613      	mov	r3, r2
 800a07e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	799b      	ldrb	r3, [r3, #6]
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b01      	cmp	r3, #1
 800a088:	d14a      	bne.n	800a120 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	795b      	ldrb	r3, [r3, #5]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d101      	bne.n	800a096 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800a092:	2302      	movs	r3, #2
 800a094:	e045      	b.n	800a122 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2201      	movs	r2, #1
 800a09a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 fa99 	bl	800a5d4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800a0a2:	7afb      	ldrb	r3, [r7, #11]
 800a0a4:	2b84      	cmp	r3, #132	; 0x84
 800a0a6:	d002      	beq.n	800a0ae <HAL_SUBGHZ_ExecSetCmd+0x42>
 800a0a8:	7afb      	ldrb	r3, [r7, #11]
 800a0aa:	2b94      	cmp	r3, #148	; 0x94
 800a0ac:	d103      	bne.n	800a0b6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	711a      	strb	r2, [r3, #4]
 800a0b4:	e002      	b.n	800a0bc <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a0bc:	f7ff fe3c 	bl	8009d38 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a0c0:	7afb      	ldrb	r3, [r7, #11]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 f9d7 	bl	800a478 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	82bb      	strh	r3, [r7, #20]
 800a0ce:	e00a      	b.n	800a0e6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a0d0:	8abb      	ldrh	r3, [r7, #20]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	4619      	mov	r1, r3
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f000 f9cc 	bl	800a478 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a0e0:	8abb      	ldrh	r3, [r7, #20]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	82bb      	strh	r3, [r7, #20]
 800a0e6:	8aba      	ldrh	r2, [r7, #20]
 800a0e8:	893b      	ldrh	r3, [r7, #8]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d3f0      	bcc.n	800a0d0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a0ee:	f7ff fe13 	bl	8009d18 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800a0f2:	7afb      	ldrb	r3, [r7, #11]
 800a0f4:	2b84      	cmp	r3, #132	; 0x84
 800a0f6:	d002      	beq.n	800a0fe <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f000 fa8f 	bl	800a61c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d002      	beq.n	800a10c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	75fb      	strb	r3, [r7, #23]
 800a10a:	e001      	b.n	800a110 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2201      	movs	r2, #1
 800a114:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	715a      	strb	r2, [r3, #5]

    return status;
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
 800a11e:	e000      	b.n	800a122 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a120:	2302      	movs	r3, #2
  }
}
 800a122:	4618      	mov	r0, r3
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b088      	sub	sp, #32
 800a12e:	af00      	add	r7, sp, #0
 800a130:	60f8      	str	r0, [r7, #12]
 800a132:	607a      	str	r2, [r7, #4]
 800a134:	461a      	mov	r2, r3
 800a136:	460b      	mov	r3, r1
 800a138:	72fb      	strb	r3, [r7, #11]
 800a13a:	4613      	mov	r3, r2
 800a13c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	799b      	ldrb	r3, [r3, #6]
 800a146:	b2db      	uxtb	r3, r3
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d13d      	bne.n	800a1c8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	795b      	ldrb	r3, [r3, #5]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d101      	bne.n	800a158 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800a154:	2302      	movs	r3, #2
 800a156:	e038      	b.n	800a1ca <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2201      	movs	r2, #1
 800a15c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 fa38 	bl	800a5d4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a164:	f7ff fde8 	bl	8009d38 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a168:	7afb      	ldrb	r3, [r7, #11]
 800a16a:	4619      	mov	r1, r3
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 f983 	bl	800a478 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a172:	2100      	movs	r1, #0
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f97f 	bl	800a478 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a17a:	2300      	movs	r3, #0
 800a17c:	82fb      	strh	r3, [r7, #22]
 800a17e:	e009      	b.n	800a194 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a180:	69b9      	ldr	r1, [r7, #24]
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f000 f9ce 	bl	800a524 <SUBGHZSPI_Receive>
      pData++;
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	3301      	adds	r3, #1
 800a18c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a18e:	8afb      	ldrh	r3, [r7, #22]
 800a190:	3301      	adds	r3, #1
 800a192:	82fb      	strh	r3, [r7, #22]
 800a194:	8afa      	ldrh	r2, [r7, #22]
 800a196:	893b      	ldrh	r3, [r7, #8]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d3f1      	bcc.n	800a180 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a19c:	f7ff fdbc 	bl	8009d18 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 fa3b 	bl	800a61c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d002      	beq.n	800a1b4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	77fb      	strb	r3, [r7, #31]
 800a1b2:	e001      	b.n	800a1b8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	715a      	strb	r2, [r3, #5]

    return status;
 800a1c4:	7ffb      	ldrb	r3, [r7, #31]
 800a1c6:	e000      	b.n	800a1ca <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a1c8:	2302      	movs	r3, #2
  }
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3720      	adds	r7, #32
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b086      	sub	sp, #24
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	60f8      	str	r0, [r7, #12]
 800a1da:	607a      	str	r2, [r7, #4]
 800a1dc:	461a      	mov	r2, r3
 800a1de:	460b      	mov	r3, r1
 800a1e0:	72fb      	strb	r3, [r7, #11]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	799b      	ldrb	r3, [r3, #6]
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d13e      	bne.n	800a26e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	795b      	ldrb	r3, [r3, #5]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d101      	bne.n	800a1fc <HAL_SUBGHZ_WriteBuffer+0x2a>
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	e039      	b.n	800a270 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2201      	movs	r2, #1
 800a200:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f000 f9e6 	bl	800a5d4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a208:	f7ff fd96 	bl	8009d38 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a20c:	210e      	movs	r1, #14
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f000 f932 	bl	800a478 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a214:	7afb      	ldrb	r3, [r7, #11]
 800a216:	4619      	mov	r1, r3
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 f92d 	bl	800a478 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a21e:	2300      	movs	r3, #0
 800a220:	82bb      	strh	r3, [r7, #20]
 800a222:	e00a      	b.n	800a23a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a224:	8abb      	ldrh	r3, [r7, #20]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	4413      	add	r3, r2
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	4619      	mov	r1, r3
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f000 f922 	bl	800a478 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a234:	8abb      	ldrh	r3, [r7, #20]
 800a236:	3301      	adds	r3, #1
 800a238:	82bb      	strh	r3, [r7, #20]
 800a23a:	8aba      	ldrh	r2, [r7, #20]
 800a23c:	893b      	ldrh	r3, [r7, #8]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d3f0      	bcc.n	800a224 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a242:	f7ff fd69 	bl	8009d18 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f000 f9e8 	bl	800a61c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	75fb      	strb	r3, [r7, #23]
 800a258:	e001      	b.n	800a25e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2201      	movs	r2, #1
 800a262:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	715a      	strb	r2, [r3, #5]

    return status;
 800a26a:	7dfb      	ldrb	r3, [r7, #23]
 800a26c:	e000      	b.n	800a270 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a26e:	2302      	movs	r3, #2
  }
}
 800a270:	4618      	mov	r0, r3
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	607a      	str	r2, [r7, #4]
 800a282:	461a      	mov	r2, r3
 800a284:	460b      	mov	r3, r1
 800a286:	72fb      	strb	r3, [r7, #11]
 800a288:	4613      	mov	r3, r2
 800a28a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	799b      	ldrb	r3, [r3, #6]
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b01      	cmp	r3, #1
 800a298:	d141      	bne.n	800a31e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	795b      	ldrb	r3, [r3, #5]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d101      	bne.n	800a2a6 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	e03c      	b.n	800a320 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 f991 	bl	800a5d4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a2b2:	f7ff fd41 	bl	8009d38 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a2b6:	211e      	movs	r1, #30
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f000 f8dd 	bl	800a478 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a2be:	7afb      	ldrb	r3, [r7, #11]
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 f8d8 	bl	800a478 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f000 f8d4 	bl	800a478 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	82fb      	strh	r3, [r7, #22]
 800a2d4:	e009      	b.n	800a2ea <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a2d6:	69b9      	ldr	r1, [r7, #24]
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f000 f923 	bl	800a524 <SUBGHZSPI_Receive>
      pData++;
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a2e4:	8afb      	ldrh	r3, [r7, #22]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	82fb      	strh	r3, [r7, #22]
 800a2ea:	8afa      	ldrh	r2, [r7, #22]
 800a2ec:	893b      	ldrh	r3, [r7, #8]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d3f1      	bcc.n	800a2d6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a2f2:	f7ff fd11 	bl	8009d18 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f000 f990 	bl	800a61c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d002      	beq.n	800a30a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	77fb      	strb	r3, [r7, #31]
 800a308:	e001      	b.n	800a30e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2201      	movs	r2, #1
 800a312:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	715a      	strb	r2, [r3, #5]

    return status;
 800a31a:	7ffb      	ldrb	r3, [r7, #31]
 800a31c:	e000      	b.n	800a320 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a31e:	2302      	movs	r3, #2
  }
}
 800a320:	4618      	mov	r0, r3
 800a322:	3720      	adds	r7, #32
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a330:	2300      	movs	r3, #0
 800a332:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a334:	f107 020c 	add.w	r2, r7, #12
 800a338:	2302      	movs	r3, #2
 800a33a:	2112      	movs	r1, #18
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7ff fef4 	bl	800a12a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a342:	7b3b      	ldrb	r3, [r7, #12]
 800a344:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a346:	89fb      	ldrh	r3, [r7, #14]
 800a348:	021b      	lsls	r3, r3, #8
 800a34a:	b21a      	sxth	r2, r3
 800a34c:	7b7b      	ldrb	r3, [r7, #13]
 800a34e:	b21b      	sxth	r3, r3
 800a350:	4313      	orrs	r3, r2
 800a352:	b21b      	sxth	r3, r3
 800a354:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800a356:	f107 020c 	add.w	r2, r7, #12
 800a35a:	2302      	movs	r3, #2
 800a35c:	2102      	movs	r1, #2
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7ff fe84 	bl	800a06c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a364:	89fb      	ldrh	r3, [r7, #14]
 800a366:	f003 0301 	and.w	r3, r3, #1
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d002      	beq.n	800a374 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f014 fadc 	bl	801e92c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a374:	89fb      	ldrh	r3, [r7, #14]
 800a376:	085b      	lsrs	r3, r3, #1
 800a378:	f003 0301 	and.w	r3, r3, #1
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f014 fae1 	bl	801e948 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a386:	89fb      	ldrh	r3, [r7, #14]
 800a388:	089b      	lsrs	r3, r3, #2
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d002      	beq.n	800a398 <HAL_SUBGHZ_IRQHandler+0x70>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f014 fb30 	bl	801e9f8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a398:	89fb      	ldrh	r3, [r7, #14]
 800a39a:	08db      	lsrs	r3, r3, #3
 800a39c:	f003 0301 	and.w	r3, r3, #1
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <HAL_SUBGHZ_IRQHandler+0x82>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f014 fb35 	bl	801ea14 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a3aa:	89fb      	ldrh	r3, [r7, #14]
 800a3ac:	091b      	lsrs	r3, r3, #4
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d002      	beq.n	800a3bc <HAL_SUBGHZ_IRQHandler+0x94>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f014 fb3a 	bl	801ea30 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a3bc:	89fb      	ldrh	r3, [r7, #14]
 800a3be:	095b      	lsrs	r3, r3, #5
 800a3c0:	f003 0301 	and.w	r3, r3, #1
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d002      	beq.n	800a3ce <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f014 fb07 	bl	801e9dc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a3ce:	89fb      	ldrh	r3, [r7, #14]
 800a3d0:	099b      	lsrs	r3, r3, #6
 800a3d2:	f003 0301 	and.w	r3, r3, #1
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <HAL_SUBGHZ_IRQHandler+0xb8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f014 fac2 	bl	801e964 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a3e0:	89fb      	ldrh	r3, [r7, #14]
 800a3e2:	09db      	lsrs	r3, r3, #7
 800a3e4:	f003 0301 	and.w	r3, r3, #1
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00e      	beq.n	800a40a <HAL_SUBGHZ_IRQHandler+0xe2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a3ec:	89fb      	ldrh	r3, [r7, #14]
 800a3ee:	0a1b      	lsrs	r3, r3, #8
 800a3f0:	f003 0301 	and.w	r3, r3, #1
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d004      	beq.n	800a402 <HAL_SUBGHZ_IRQHandler+0xda>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a3f8:	2101      	movs	r1, #1
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f014 fac0 	bl	801e980 <HAL_SUBGHZ_CADStatusCallback>
 800a400:	e003      	b.n	800a40a <HAL_SUBGHZ_IRQHandler+0xe2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a402:	2100      	movs	r1, #0
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f014 fabb 	bl	801e980 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a40a:	89fb      	ldrh	r3, [r7, #14]
 800a40c:	0a5b      	lsrs	r3, r3, #9
 800a40e:	f003 0301 	and.w	r3, r3, #1
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <HAL_SUBGHZ_IRQHandler+0xf4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f014 fad0 	bl	801e9bc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800a41c:	89fb      	ldrh	r3, [r7, #14]
 800a41e:	0b9b      	lsrs	r3, r3, #14
 800a420:	f003 0301 	and.w	r3, r3, #1
 800a424:	2b00      	cmp	r3, #0
 800a426:	d002      	beq.n	800a42e <HAL_SUBGHZ_IRQHandler+0x106>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f014 fb0f 	bl	801ea4c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800a42e:	bf00      	nop
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
	...

0800a438 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a440:	4b0c      	ldr	r3, [pc, #48]	; (800a474 <SUBGHZSPI_Init+0x3c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a0b      	ldr	r2, [pc, #44]	; (800a474 <SUBGHZSPI_Init+0x3c>)
 800a446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a44a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800a44c:	4a09      	ldr	r2, [pc, #36]	; (800a474 <SUBGHZSPI_Init+0x3c>)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800a454:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800a456:	4b07      	ldr	r3, [pc, #28]	; (800a474 <SUBGHZSPI_Init+0x3c>)
 800a458:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800a45c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a45e:	4b05      	ldr	r3, [pc, #20]	; (800a474 <SUBGHZSPI_Init+0x3c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a04      	ldr	r2, [pc, #16]	; (800a474 <SUBGHZSPI_Init+0x3c>)
 800a464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a468:	6013      	str	r3, [r2, #0]
}
 800a46a:	bf00      	nop
 800a46c:	370c      	adds	r7, #12
 800a46e:	46bd      	mov	sp, r7
 800a470:	bc80      	pop	{r7}
 800a472:	4770      	bx	lr
 800a474:	58010000 	.word	0x58010000

0800a478 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800a478:	b480      	push	{r7}
 800a47a:	b087      	sub	sp, #28
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	460b      	mov	r3, r1
 800a482:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a488:	4b23      	ldr	r3, [pc, #140]	; (800a518 <SUBGHZSPI_Transmit+0xa0>)
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	4613      	mov	r3, r2
 800a48e:	00db      	lsls	r3, r3, #3
 800a490:	1a9b      	subs	r3, r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	0cdb      	lsrs	r3, r3, #19
 800a496:	2264      	movs	r2, #100	; 0x64
 800a498:	fb02 f303 	mul.w	r3, r2, r3
 800a49c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d105      	bne.n	800a4b0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	609a      	str	r2, [r3, #8]
      break;
 800a4ae:	e008      	b.n	800a4c2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a4b6:	4b19      	ldr	r3, [pc, #100]	; (800a51c <SUBGHZSPI_Transmit+0xa4>)
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	f003 0302 	and.w	r3, r3, #2
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	d1ed      	bne.n	800a49e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a4c2:	4b17      	ldr	r3, [pc, #92]	; (800a520 <SUBGHZSPI_Transmit+0xa8>)
 800a4c4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	78fa      	ldrb	r2, [r7, #3]
 800a4ca:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a4cc:	4b12      	ldr	r3, [pc, #72]	; (800a518 <SUBGHZSPI_Transmit+0xa0>)
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	00db      	lsls	r3, r3, #3
 800a4d4:	1a9b      	subs	r3, r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	0cdb      	lsrs	r3, r3, #19
 800a4da:	2264      	movs	r2, #100	; 0x64
 800a4dc:	fb02 f303 	mul.w	r3, r2, r3
 800a4e0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d105      	bne.n	800a4f4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	609a      	str	r2, [r3, #8]
      break;
 800a4f2:	e008      	b.n	800a506 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a4fa:	4b08      	ldr	r3, [pc, #32]	; (800a51c <SUBGHZSPI_Transmit+0xa4>)
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b01      	cmp	r3, #1
 800a504:	d1ed      	bne.n	800a4e2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800a506:	4b05      	ldr	r3, [pc, #20]	; (800a51c <SUBGHZSPI_Transmit+0xa4>)
 800a508:	68db      	ldr	r3, [r3, #12]

  return status;
 800a50a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	371c      	adds	r7, #28
 800a510:	46bd      	mov	sp, r7
 800a512:	bc80      	pop	{r7}
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	20000000 	.word	0x20000000
 800a51c:	58010000 	.word	0x58010000
 800a520:	5801000c 	.word	0x5801000c

0800a524 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800a524:	b480      	push	{r7}
 800a526:	b087      	sub	sp, #28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a532:	4b25      	ldr	r3, [pc, #148]	; (800a5c8 <SUBGHZSPI_Receive+0xa4>)
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	4613      	mov	r3, r2
 800a538:	00db      	lsls	r3, r3, #3
 800a53a:	1a9b      	subs	r3, r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	0cdb      	lsrs	r3, r3, #19
 800a540:	2264      	movs	r2, #100	; 0x64
 800a542:	fb02 f303 	mul.w	r3, r2, r3
 800a546:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d105      	bne.n	800a55a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2201      	movs	r2, #1
 800a556:	609a      	str	r2, [r3, #8]
      break;
 800a558:	e008      	b.n	800a56c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	3b01      	subs	r3, #1
 800a55e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a560:	4b1a      	ldr	r3, [pc, #104]	; (800a5cc <SUBGHZSPI_Receive+0xa8>)
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f003 0302 	and.w	r3, r3, #2
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d1ed      	bne.n	800a548 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a56c:	4b18      	ldr	r3, [pc, #96]	; (800a5d0 <SUBGHZSPI_Receive+0xac>)
 800a56e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	22ff      	movs	r2, #255	; 0xff
 800a574:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a576:	4b14      	ldr	r3, [pc, #80]	; (800a5c8 <SUBGHZSPI_Receive+0xa4>)
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	4613      	mov	r3, r2
 800a57c:	00db      	lsls	r3, r3, #3
 800a57e:	1a9b      	subs	r3, r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	0cdb      	lsrs	r3, r3, #19
 800a584:	2264      	movs	r2, #100	; 0x64
 800a586:	fb02 f303 	mul.w	r3, r2, r3
 800a58a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d105      	bne.n	800a59e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	609a      	str	r2, [r3, #8]
      break;
 800a59c:	e008      	b.n	800a5b0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a5a4:	4b09      	ldr	r3, [pc, #36]	; (800a5cc <SUBGHZSPI_Receive+0xa8>)
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	f003 0301 	and.w	r3, r3, #1
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d1ed      	bne.n	800a58c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800a5b0:	4b06      	ldr	r3, [pc, #24]	; (800a5cc <SUBGHZSPI_Receive+0xa8>)
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	701a      	strb	r2, [r3, #0]

  return status;
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	371c      	adds	r7, #28
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bc80      	pop	{r7}
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	20000000 	.word	0x20000000
 800a5cc:	58010000 	.word	0x58010000
 800a5d0:	5801000c 	.word	0x5801000c

0800a5d4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	791b      	ldrb	r3, [r3, #4]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d111      	bne.n	800a608 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800a5e4:	4b0c      	ldr	r3, [pc, #48]	; (800a618 <SUBGHZ_CheckDeviceReady+0x44>)
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	005b      	lsls	r3, r3, #1
 800a5ec:	4413      	add	r3, r2
 800a5ee:	00db      	lsls	r3, r3, #3
 800a5f0:	0c1b      	lsrs	r3, r3, #16
 800a5f2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a5f4:	f7ff fba0 	bl	8009d38 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1f9      	bne.n	800a5f8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a604:	f7ff fb88 	bl	8009d18 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 f807 	bl	800a61c <SUBGHZ_WaitOnBusy>
 800a60e:	4603      	mov	r3, r0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	20000000 	.word	0x20000000

0800a61c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800a624:	2300      	movs	r3, #0
 800a626:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800a628:	4b12      	ldr	r3, [pc, #72]	; (800a674 <SUBGHZ_WaitOnBusy+0x58>)
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	4613      	mov	r3, r2
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	4413      	add	r3, r2
 800a632:	00db      	lsls	r3, r3, #3
 800a634:	0d1b      	lsrs	r3, r3, #20
 800a636:	2264      	movs	r2, #100	; 0x64
 800a638:	fb02 f303 	mul.w	r3, r2, r3
 800a63c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800a63e:	f7ff fba9 	bl	8009d94 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800a642:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d105      	bne.n	800a656 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2202      	movs	r2, #2
 800a652:	609a      	str	r2, [r3, #8]
      break;
 800a654:	e009      	b.n	800a66a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	3b01      	subs	r3, #1
 800a65a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800a65c:	f7ff fb88 	bl	8009d70 <LL_PWR_IsActiveFlag_RFBUSYS>
 800a660:	4602      	mov	r2, r0
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	4013      	ands	r3, r2
 800a666:	2b01      	cmp	r3, #1
 800a668:	d0e9      	beq.n	800a63e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800a66a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	20000000 	.word	0x20000000

0800a678 <LL_RCC_GetUSARTClockSource>:
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800a680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a684:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	401a      	ands	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	041b      	lsls	r3, r3, #16
 800a690:	4313      	orrs	r3, r2
}
 800a692:	4618      	mov	r0, r3
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	bc80      	pop	{r7}
 800a69a:	4770      	bx	lr

0800a69c <LL_RCC_GetLPUARTClockSource>:
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800a6a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4013      	ands	r3, r2
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bc80      	pop	{r7}
 800a6b8:	4770      	bx	lr

0800a6ba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b082      	sub	sp, #8
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d101      	bne.n	800a6cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e042      	b.n	800a752 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d106      	bne.n	800a6e4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7f8 fb7a 	bl	8002dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2224      	movs	r2, #36	; 0x24
 800a6e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f022 0201 	bic.w	r2, r2, #1
 800a6fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fc3b 	bl	800af78 <UART_SetConfig>
 800a702:	4603      	mov	r3, r0
 800a704:	2b01      	cmp	r3, #1
 800a706:	d101      	bne.n	800a70c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e022      	b.n	800a752 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a710:	2b00      	cmp	r3, #0
 800a712:	d002      	beq.n	800a71a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fea3 	bl	800b460 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	685a      	ldr	r2, [r3, #4]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a728:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	689a      	ldr	r2, [r3, #8]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a738:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f042 0201 	orr.w	r2, r2, #1
 800a748:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 ff29 	bl	800b5a2 <UART_CheckIdleState>
 800a750:	4603      	mov	r3, r0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
	...

0800a75c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b08a      	sub	sp, #40	; 0x28
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	4613      	mov	r3, r2
 800a768:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a770:	2b20      	cmp	r3, #32
 800a772:	d137      	bne.n	800a7e4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d002      	beq.n	800a780 <HAL_UART_Receive_IT+0x24>
 800a77a:	88fb      	ldrh	r3, [r7, #6]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e030      	b.n	800a7e6 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a18      	ldr	r2, [pc, #96]	; (800a7f0 <HAL_UART_Receive_IT+0x94>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d01f      	beq.n	800a7d4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d018      	beq.n	800a7d4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	e853 3f00 	ldrex	r3, [r3]
 800a7ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a7b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c0:	623b      	str	r3, [r7, #32]
 800a7c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c4:	69f9      	ldr	r1, [r7, #28]
 800a7c6:	6a3a      	ldr	r2, [r7, #32]
 800a7c8:	e841 2300 	strex	r3, r2, [r1]
 800a7cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1e6      	bne.n	800a7a2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a7d4:	88fb      	ldrh	r3, [r7, #6]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	68b9      	ldr	r1, [r7, #8]
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f000 fff8 	bl	800b7d0 <UART_Start_Receive_IT>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	e000      	b.n	800a7e6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a7e4:	2302      	movs	r3, #2
  }
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3728      	adds	r7, #40	; 0x28
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	40008000 	.word	0x40008000

0800a7f4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b08a      	sub	sp, #40	; 0x28
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	4613      	mov	r3, r2
 800a800:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a808:	2b20      	cmp	r3, #32
 800a80a:	d167      	bne.n	800a8dc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d002      	beq.n	800a818 <HAL_UART_Transmit_DMA+0x24>
 800a812:	88fb      	ldrh	r3, [r7, #6]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	e060      	b.n	800a8de <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	88fa      	ldrh	r2, [r7, #6]
 800a826:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	88fa      	ldrh	r2, [r7, #6]
 800a82e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2200      	movs	r2, #0
 800a836:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2221      	movs	r2, #33	; 0x21
 800a83e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a846:	2b00      	cmp	r3, #0
 800a848:	d028      	beq.n	800a89c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a84e:	4a26      	ldr	r2, [pc, #152]	; (800a8e8 <HAL_UART_Transmit_DMA+0xf4>)
 800a850:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a856:	4a25      	ldr	r2, [pc, #148]	; (800a8ec <HAL_UART_Transmit_DMA+0xf8>)
 800a858:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a85e:	4a24      	ldr	r2, [pc, #144]	; (800a8f0 <HAL_UART_Transmit_DMA+0xfc>)
 800a860:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a866:	2200      	movs	r2, #0
 800a868:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a872:	4619      	mov	r1, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	3328      	adds	r3, #40	; 0x28
 800a87a:	461a      	mov	r2, r3
 800a87c:	88fb      	ldrh	r3, [r7, #6]
 800a87e:	f7fb feb3 	bl	80065e8 <HAL_DMA_Start_IT>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d009      	beq.n	800a89c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2210      	movs	r2, #16
 800a88c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2220      	movs	r2, #32
 800a894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	e020      	b.n	800a8de <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2240      	movs	r2, #64	; 0x40
 800a8a2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3308      	adds	r3, #8
 800a8aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	e853 3f00 	ldrex	r3, [r3]
 800a8b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3308      	adds	r3, #8
 800a8c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8c4:	623a      	str	r2, [r7, #32]
 800a8c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c8:	69f9      	ldr	r1, [r7, #28]
 800a8ca:	6a3a      	ldr	r2, [r7, #32]
 800a8cc:	e841 2300 	strex	r3, r2, [r1]
 800a8d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1e5      	bne.n	800a8a4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	e000      	b.n	800a8de <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a8dc:	2302      	movs	r3, #2
  }
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3728      	adds	r7, #40	; 0x28
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	0800bb5b 	.word	0x0800bb5b
 800a8ec:	0800bbf5 	.word	0x0800bbf5
 800a8f0:	0800bc11 	.word	0x0800bc11

0800a8f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b0ba      	sub	sp, #232	; 0xe8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	69db      	ldr	r3, [r3, #28]
 800a902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a91a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a91e:	f640 030f 	movw	r3, #2063	; 0x80f
 800a922:	4013      	ands	r3, r2
 800a924:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d11b      	bne.n	800a968 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a934:	f003 0320 	and.w	r3, r3, #32
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d015      	beq.n	800a968 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a93c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a940:	f003 0320 	and.w	r3, r3, #32
 800a944:	2b00      	cmp	r3, #0
 800a946:	d105      	bne.n	800a954 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a94c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a950:	2b00      	cmp	r3, #0
 800a952:	d009      	beq.n	800a968 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 82e3 	beq.w	800af24 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	4798      	blx	r3
      }
      return;
 800a966:	e2dd      	b.n	800af24 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a968:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 8123 	beq.w	800abb8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a972:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a976:	4b8d      	ldr	r3, [pc, #564]	; (800abac <HAL_UART_IRQHandler+0x2b8>)
 800a978:	4013      	ands	r3, r2
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d106      	bne.n	800a98c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a97e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a982:	4b8b      	ldr	r3, [pc, #556]	; (800abb0 <HAL_UART_IRQHandler+0x2bc>)
 800a984:	4013      	ands	r3, r2
 800a986:	2b00      	cmp	r3, #0
 800a988:	f000 8116 	beq.w	800abb8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a98c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	2b00      	cmp	r3, #0
 800a996:	d011      	beq.n	800a9bc <HAL_UART_IRQHandler+0xc8>
 800a998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a99c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00b      	beq.n	800a9bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9b2:	f043 0201 	orr.w	r2, r3, #1
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9c0:	f003 0302 	and.w	r3, r3, #2
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d011      	beq.n	800a9ec <HAL_UART_IRQHandler+0xf8>
 800a9c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9cc:	f003 0301 	and.w	r3, r3, #1
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00b      	beq.n	800a9ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2202      	movs	r2, #2
 800a9da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9e2:	f043 0204 	orr.w	r2, r3, #4
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9f0:	f003 0304 	and.w	r3, r3, #4
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d011      	beq.n	800aa1c <HAL_UART_IRQHandler+0x128>
 800a9f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00b      	beq.n	800aa1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2204      	movs	r2, #4
 800aa0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa12:	f043 0202 	orr.w	r2, r3, #2
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aa1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa20:	f003 0308 	and.w	r3, r3, #8
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d017      	beq.n	800aa58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa2c:	f003 0320 	and.w	r3, r3, #32
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d105      	bne.n	800aa40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aa34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aa38:	4b5c      	ldr	r3, [pc, #368]	; (800abac <HAL_UART_IRQHandler+0x2b8>)
 800aa3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2208      	movs	r2, #8
 800aa46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa4e:	f043 0208 	orr.w	r2, r3, #8
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d012      	beq.n	800aa8a <HAL_UART_IRQHandler+0x196>
 800aa64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00c      	beq.n	800aa8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa80:	f043 0220 	orr.w	r2, r3, #32
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 8249 	beq.w	800af28 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa9a:	f003 0320 	and.w	r3, r3, #32
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d013      	beq.n	800aaca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aaa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaa6:	f003 0320 	and.w	r3, r3, #32
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d105      	bne.n	800aaba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aaae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d007      	beq.n	800aaca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d003      	beq.n	800aaca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aad0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aade:	2b40      	cmp	r3, #64	; 0x40
 800aae0:	d005      	beq.n	800aaee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aae6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d054      	beq.n	800ab98 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 ffce 	bl	800ba90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aafe:	2b40      	cmp	r3, #64	; 0x40
 800ab00:	d146      	bne.n	800ab90 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	3308      	adds	r3, #8
 800ab08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab10:	e853 3f00 	ldrex	r3, [r3]
 800ab14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ab18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	3308      	adds	r3, #8
 800ab2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ab2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ab32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ab3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ab3e:	e841 2300 	strex	r3, r2, [r1]
 800ab42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ab46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1d9      	bne.n	800ab02 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d017      	beq.n	800ab88 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab5e:	4a15      	ldr	r2, [pc, #84]	; (800abb4 <HAL_UART_IRQHandler+0x2c0>)
 800ab60:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fb fe19 	bl	80067a0 <HAL_DMA_Abort_IT>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d019      	beq.n	800aba8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ab82:	4610      	mov	r0, r2
 800ab84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab86:	e00f      	b.n	800aba8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 f9e0 	bl	800af4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab8e:	e00b      	b.n	800aba8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 f9dc 	bl	800af4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab96:	e007      	b.n	800aba8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 f9d8 	bl	800af4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800aba6:	e1bf      	b.n	800af28 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aba8:	bf00      	nop
    return;
 800abaa:	e1bd      	b.n	800af28 <HAL_UART_IRQHandler+0x634>
 800abac:	10000001 	.word	0x10000001
 800abb0:	04000120 	.word	0x04000120
 800abb4:	0800bc91 	.word	0x0800bc91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	f040 8153 	bne.w	800ae68 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800abc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abc6:	f003 0310 	and.w	r3, r3, #16
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f000 814c 	beq.w	800ae68 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800abd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abd4:	f003 0310 	and.w	r3, r3, #16
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f000 8145 	beq.w	800ae68 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2210      	movs	r2, #16
 800abe4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf0:	2b40      	cmp	r3, #64	; 0x40
 800abf2:	f040 80bb 	bne.w	800ad6c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 818f 	beq.w	800af2c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	f080 8187 	bcs.w	800af2c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f003 0320 	and.w	r3, r3, #32
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f040 8087 	bne.w	800ad4a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac48:	e853 3f00 	ldrex	r3, [r3]
 800ac4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ac50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	461a      	mov	r2, r3
 800ac62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ac6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ac72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ac76:	e841 2300 	strex	r3, r2, [r1]
 800ac7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ac7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1da      	bne.n	800ac3c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	3308      	adds	r3, #8
 800ac8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac90:	e853 3f00 	ldrex	r3, [r3]
 800ac94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ac96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac98:	f023 0301 	bic.w	r3, r3, #1
 800ac9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	3308      	adds	r3, #8
 800aca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800acaa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800acae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800acb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800acb6:	e841 2300 	strex	r3, r2, [r1]
 800acba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800acbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1e1      	bne.n	800ac86 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3308      	adds	r3, #8
 800acc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800accc:	e853 3f00 	ldrex	r3, [r3]
 800acd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800acd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	3308      	adds	r3, #8
 800ace2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ace6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ace8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800acec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800acee:	e841 2300 	strex	r3, r2, [r1]
 800acf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800acf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1e3      	bne.n	800acc2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2220      	movs	r2, #32
 800acfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad10:	e853 3f00 	ldrex	r3, [r3]
 800ad14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad18:	f023 0310 	bic.w	r3, r3, #16
 800ad1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	461a      	mov	r2, r3
 800ad26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad2a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad32:	e841 2300 	strex	r3, r2, [r1]
 800ad36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1e4      	bne.n	800ad08 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fb fccd 	bl	80066e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2202      	movs	r2, #2
 800ad4e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	1ad3      	subs	r3, r2, r3
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	4619      	mov	r1, r3
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f8fb 	bl	800af60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad6a:	e0df      	b.n	800af2c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 80d1 	beq.w	800af30 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800ad8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f000 80cc 	beq.w	800af30 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada0:	e853 3f00 	ldrex	r3, [r3]
 800ada4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ada6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800adac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	461a      	mov	r2, r3
 800adb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adba:	647b      	str	r3, [r7, #68]	; 0x44
 800adbc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800adc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adc2:	e841 2300 	strex	r3, r2, [r1]
 800adc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800adc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1e4      	bne.n	800ad98 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3308      	adds	r3, #8
 800add4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add8:	e853 3f00 	ldrex	r3, [r3]
 800addc:	623b      	str	r3, [r7, #32]
   return(result);
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ade4:	f023 0301 	bic.w	r3, r3, #1
 800ade8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	3308      	adds	r3, #8
 800adf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800adf6:	633a      	str	r2, [r7, #48]	; 0x30
 800adf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800adfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e1      	bne.n	800adce <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	e853 3f00 	ldrex	r3, [r3]
 800ae2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f023 0310 	bic.w	r3, r3, #16
 800ae32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae40:	61fb      	str	r3, [r7, #28]
 800ae42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae44:	69b9      	ldr	r1, [r7, #24]
 800ae46:	69fa      	ldr	r2, [r7, #28]
 800ae48:	e841 2300 	strex	r3, r2, [r1]
 800ae4c:	617b      	str	r3, [r7, #20]
   return(result);
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1e4      	bne.n	800ae1e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2202      	movs	r2, #2
 800ae58:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae5e:	4619      	mov	r1, r3
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 f87d 	bl	800af60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae66:	e063      	b.n	800af30 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ae68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00e      	beq.n	800ae92 <HAL_UART_IRQHandler+0x59e>
 800ae74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d008      	beq.n	800ae92 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ae88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f001 fc5e 	bl	800c74c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae90:	e051      	b.n	800af36 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ae92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d014      	beq.n	800aec8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ae9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d105      	bne.n	800aeb6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aeaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d008      	beq.n	800aec8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d03a      	beq.n	800af34 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	4798      	blx	r3
    }
    return;
 800aec6:	e035      	b.n	800af34 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d009      	beq.n	800aee8 <HAL_UART_IRQHandler+0x5f4>
 800aed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d003      	beq.n	800aee8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 feeb 	bl	800bcbc <UART_EndTransmit_IT>
    return;
 800aee6:	e026      	b.n	800af36 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d009      	beq.n	800af08 <HAL_UART_IRQHandler+0x614>
 800aef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aef8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f001 fc35 	bl	800c770 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af06:	e016      	b.n	800af36 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800af08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af10:	2b00      	cmp	r3, #0
 800af12:	d010      	beq.n	800af36 <HAL_UART_IRQHandler+0x642>
 800af14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	da0c      	bge.n	800af36 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f001 fc1e 	bl	800c75e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af22:	e008      	b.n	800af36 <HAL_UART_IRQHandler+0x642>
      return;
 800af24:	bf00      	nop
 800af26:	e006      	b.n	800af36 <HAL_UART_IRQHandler+0x642>
    return;
 800af28:	bf00      	nop
 800af2a:	e004      	b.n	800af36 <HAL_UART_IRQHandler+0x642>
      return;
 800af2c:	bf00      	nop
 800af2e:	e002      	b.n	800af36 <HAL_UART_IRQHandler+0x642>
      return;
 800af30:	bf00      	nop
 800af32:	e000      	b.n	800af36 <HAL_UART_IRQHandler+0x642>
    return;
 800af34:	bf00      	nop
  }
}
 800af36:	37e8      	adds	r7, #232	; 0xe8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	bc80      	pop	{r7}
 800af4c:	4770      	bx	lr

0800af4e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af4e:	b480      	push	{r7}
 800af50:	b083      	sub	sp, #12
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af56:	bf00      	nop
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bc80      	pop	{r7}
 800af5e:	4770      	bx	lr

0800af60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	460b      	mov	r3, r1
 800af6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	bc80      	pop	{r7}
 800af74:	4770      	bx	lr
	...

0800af78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af7c:	b08c      	sub	sp, #48	; 0x30
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af82:	2300      	movs	r3, #0
 800af84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	689a      	ldr	r2, [r3, #8]
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	431a      	orrs	r2, r3
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	695b      	ldr	r3, [r3, #20]
 800af96:	431a      	orrs	r2, r3
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	69db      	ldr	r3, [r3, #28]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	4b94      	ldr	r3, [pc, #592]	; (800b1f8 <UART_SetConfig+0x280>)
 800afa8:	4013      	ands	r3, r2
 800afaa:	697a      	ldr	r2, [r7, #20]
 800afac:	6812      	ldr	r2, [r2, #0]
 800afae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afb0:	430b      	orrs	r3, r1
 800afb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	68da      	ldr	r2, [r3, #12]
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	430a      	orrs	r2, r1
 800afc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	699b      	ldr	r3, [r3, #24]
 800afce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a89      	ldr	r2, [pc, #548]	; (800b1fc <UART_SetConfig+0x284>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d004      	beq.n	800afe4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afe0:	4313      	orrs	r3, r2
 800afe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800afee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	6812      	ldr	r2, [r2, #0]
 800aff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aff8:	430b      	orrs	r3, r1
 800affa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b002:	f023 010f 	bic.w	r1, r3, #15
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	430a      	orrs	r2, r1
 800b010:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a7a      	ldr	r2, [pc, #488]	; (800b200 <UART_SetConfig+0x288>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d127      	bne.n	800b06c <UART_SetConfig+0xf4>
 800b01c:	2003      	movs	r0, #3
 800b01e:	f7ff fb2b 	bl	800a678 <LL_RCC_GetUSARTClockSource>
 800b022:	4603      	mov	r3, r0
 800b024:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800b028:	2b03      	cmp	r3, #3
 800b02a:	d81b      	bhi.n	800b064 <UART_SetConfig+0xec>
 800b02c:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <UART_SetConfig+0xbc>)
 800b02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b032:	bf00      	nop
 800b034:	0800b045 	.word	0x0800b045
 800b038:	0800b055 	.word	0x0800b055
 800b03c:	0800b04d 	.word	0x0800b04d
 800b040:	0800b05d 	.word	0x0800b05d
 800b044:	2301      	movs	r3, #1
 800b046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b04a:	e080      	b.n	800b14e <UART_SetConfig+0x1d6>
 800b04c:	2302      	movs	r3, #2
 800b04e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b052:	e07c      	b.n	800b14e <UART_SetConfig+0x1d6>
 800b054:	2304      	movs	r3, #4
 800b056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b05a:	e078      	b.n	800b14e <UART_SetConfig+0x1d6>
 800b05c:	2308      	movs	r3, #8
 800b05e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b062:	e074      	b.n	800b14e <UART_SetConfig+0x1d6>
 800b064:	2310      	movs	r3, #16
 800b066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b06a:	e070      	b.n	800b14e <UART_SetConfig+0x1d6>
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a64      	ldr	r2, [pc, #400]	; (800b204 <UART_SetConfig+0x28c>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d138      	bne.n	800b0e8 <UART_SetConfig+0x170>
 800b076:	200c      	movs	r0, #12
 800b078:	f7ff fafe 	bl	800a678 <LL_RCC_GetUSARTClockSource>
 800b07c:	4603      	mov	r3, r0
 800b07e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800b082:	2b0c      	cmp	r3, #12
 800b084:	d82c      	bhi.n	800b0e0 <UART_SetConfig+0x168>
 800b086:	a201      	add	r2, pc, #4	; (adr r2, 800b08c <UART_SetConfig+0x114>)
 800b088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b08c:	0800b0c1 	.word	0x0800b0c1
 800b090:	0800b0e1 	.word	0x0800b0e1
 800b094:	0800b0e1 	.word	0x0800b0e1
 800b098:	0800b0e1 	.word	0x0800b0e1
 800b09c:	0800b0d1 	.word	0x0800b0d1
 800b0a0:	0800b0e1 	.word	0x0800b0e1
 800b0a4:	0800b0e1 	.word	0x0800b0e1
 800b0a8:	0800b0e1 	.word	0x0800b0e1
 800b0ac:	0800b0c9 	.word	0x0800b0c9
 800b0b0:	0800b0e1 	.word	0x0800b0e1
 800b0b4:	0800b0e1 	.word	0x0800b0e1
 800b0b8:	0800b0e1 	.word	0x0800b0e1
 800b0bc:	0800b0d9 	.word	0x0800b0d9
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0c6:	e042      	b.n	800b14e <UART_SetConfig+0x1d6>
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0ce:	e03e      	b.n	800b14e <UART_SetConfig+0x1d6>
 800b0d0:	2304      	movs	r3, #4
 800b0d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0d6:	e03a      	b.n	800b14e <UART_SetConfig+0x1d6>
 800b0d8:	2308      	movs	r3, #8
 800b0da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0de:	e036      	b.n	800b14e <UART_SetConfig+0x1d6>
 800b0e0:	2310      	movs	r3, #16
 800b0e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0e6:	e032      	b.n	800b14e <UART_SetConfig+0x1d6>
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a43      	ldr	r2, [pc, #268]	; (800b1fc <UART_SetConfig+0x284>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d12a      	bne.n	800b148 <UART_SetConfig+0x1d0>
 800b0f2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b0f6:	f7ff fad1 	bl	800a69c <LL_RCC_GetLPUARTClockSource>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b100:	d01a      	beq.n	800b138 <UART_SetConfig+0x1c0>
 800b102:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b106:	d81b      	bhi.n	800b140 <UART_SetConfig+0x1c8>
 800b108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b10c:	d00c      	beq.n	800b128 <UART_SetConfig+0x1b0>
 800b10e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b112:	d815      	bhi.n	800b140 <UART_SetConfig+0x1c8>
 800b114:	2b00      	cmp	r3, #0
 800b116:	d003      	beq.n	800b120 <UART_SetConfig+0x1a8>
 800b118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b11c:	d008      	beq.n	800b130 <UART_SetConfig+0x1b8>
 800b11e:	e00f      	b.n	800b140 <UART_SetConfig+0x1c8>
 800b120:	2300      	movs	r3, #0
 800b122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b126:	e012      	b.n	800b14e <UART_SetConfig+0x1d6>
 800b128:	2302      	movs	r3, #2
 800b12a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b12e:	e00e      	b.n	800b14e <UART_SetConfig+0x1d6>
 800b130:	2304      	movs	r3, #4
 800b132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b136:	e00a      	b.n	800b14e <UART_SetConfig+0x1d6>
 800b138:	2308      	movs	r3, #8
 800b13a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b13e:	e006      	b.n	800b14e <UART_SetConfig+0x1d6>
 800b140:	2310      	movs	r3, #16
 800b142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b146:	e002      	b.n	800b14e <UART_SetConfig+0x1d6>
 800b148:	2310      	movs	r3, #16
 800b14a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a2a      	ldr	r2, [pc, #168]	; (800b1fc <UART_SetConfig+0x284>)
 800b154:	4293      	cmp	r3, r2
 800b156:	f040 80a4 	bne.w	800b2a2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b15a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b15e:	2b08      	cmp	r3, #8
 800b160:	d823      	bhi.n	800b1aa <UART_SetConfig+0x232>
 800b162:	a201      	add	r2, pc, #4	; (adr r2, 800b168 <UART_SetConfig+0x1f0>)
 800b164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b168:	0800b18d 	.word	0x0800b18d
 800b16c:	0800b1ab 	.word	0x0800b1ab
 800b170:	0800b195 	.word	0x0800b195
 800b174:	0800b1ab 	.word	0x0800b1ab
 800b178:	0800b19b 	.word	0x0800b19b
 800b17c:	0800b1ab 	.word	0x0800b1ab
 800b180:	0800b1ab 	.word	0x0800b1ab
 800b184:	0800b1ab 	.word	0x0800b1ab
 800b188:	0800b1a3 	.word	0x0800b1a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b18c:	f7fd ff40 	bl	8009010 <HAL_RCC_GetPCLK1Freq>
 800b190:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b192:	e010      	b.n	800b1b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b194:	4b1c      	ldr	r3, [pc, #112]	; (800b208 <UART_SetConfig+0x290>)
 800b196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b198:	e00d      	b.n	800b1b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b19a:	f7fd fe85 	bl	8008ea8 <HAL_RCC_GetSysClockFreq>
 800b19e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b1a0:	e009      	b.n	800b1b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b1a8:	e005      	b.n	800b1b6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b1b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f000 8137 	beq.w	800b42c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c2:	4a12      	ldr	r2, [pc, #72]	; (800b20c <UART_SetConfig+0x294>)
 800b1c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	005b      	lsls	r3, r3, #1
 800b1da:	4413      	add	r3, r2
 800b1dc:	69ba      	ldr	r2, [r7, #24]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d305      	bcc.n	800b1ee <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1e8:	69ba      	ldr	r2, [r7, #24]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d910      	bls.n	800b210 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b1f4:	e11a      	b.n	800b42c <UART_SetConfig+0x4b4>
 800b1f6:	bf00      	nop
 800b1f8:	cfff69f3 	.word	0xcfff69f3
 800b1fc:	40008000 	.word	0x40008000
 800b200:	40013800 	.word	0x40013800
 800b204:	40004400 	.word	0x40004400
 800b208:	00f42400 	.word	0x00f42400
 800b20c:	08021b04 	.word	0x08021b04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b212:	2200      	movs	r2, #0
 800b214:	60bb      	str	r3, [r7, #8]
 800b216:	60fa      	str	r2, [r7, #12]
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21c:	4a8e      	ldr	r2, [pc, #568]	; (800b458 <UART_SetConfig+0x4e0>)
 800b21e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b222:	b29b      	uxth	r3, r3
 800b224:	2200      	movs	r2, #0
 800b226:	603b      	str	r3, [r7, #0]
 800b228:	607a      	str	r2, [r7, #4]
 800b22a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b22e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b232:	f7f5 ffa7 	bl	8001184 <__aeabi_uldivmod>
 800b236:	4602      	mov	r2, r0
 800b238:	460b      	mov	r3, r1
 800b23a:	4610      	mov	r0, r2
 800b23c:	4619      	mov	r1, r3
 800b23e:	f04f 0200 	mov.w	r2, #0
 800b242:	f04f 0300 	mov.w	r3, #0
 800b246:	020b      	lsls	r3, r1, #8
 800b248:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b24c:	0202      	lsls	r2, r0, #8
 800b24e:	6979      	ldr	r1, [r7, #20]
 800b250:	6849      	ldr	r1, [r1, #4]
 800b252:	0849      	lsrs	r1, r1, #1
 800b254:	2000      	movs	r0, #0
 800b256:	460c      	mov	r4, r1
 800b258:	4605      	mov	r5, r0
 800b25a:	eb12 0804 	adds.w	r8, r2, r4
 800b25e:	eb43 0905 	adc.w	r9, r3, r5
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	469a      	mov	sl, r3
 800b26a:	4693      	mov	fp, r2
 800b26c:	4652      	mov	r2, sl
 800b26e:	465b      	mov	r3, fp
 800b270:	4640      	mov	r0, r8
 800b272:	4649      	mov	r1, r9
 800b274:	f7f5 ff86 	bl	8001184 <__aeabi_uldivmod>
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	4613      	mov	r3, r2
 800b27e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b280:	6a3b      	ldr	r3, [r7, #32]
 800b282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b286:	d308      	bcc.n	800b29a <UART_SetConfig+0x322>
 800b288:	6a3b      	ldr	r3, [r7, #32]
 800b28a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b28e:	d204      	bcs.n	800b29a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	6a3a      	ldr	r2, [r7, #32]
 800b296:	60da      	str	r2, [r3, #12]
 800b298:	e0c8      	b.n	800b42c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b2a0:	e0c4      	b.n	800b42c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2aa:	d167      	bne.n	800b37c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800b2ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b2b0:	2b08      	cmp	r3, #8
 800b2b2:	d828      	bhi.n	800b306 <UART_SetConfig+0x38e>
 800b2b4:	a201      	add	r2, pc, #4	; (adr r2, 800b2bc <UART_SetConfig+0x344>)
 800b2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ba:	bf00      	nop
 800b2bc:	0800b2e1 	.word	0x0800b2e1
 800b2c0:	0800b2e9 	.word	0x0800b2e9
 800b2c4:	0800b2f1 	.word	0x0800b2f1
 800b2c8:	0800b307 	.word	0x0800b307
 800b2cc:	0800b2f7 	.word	0x0800b2f7
 800b2d0:	0800b307 	.word	0x0800b307
 800b2d4:	0800b307 	.word	0x0800b307
 800b2d8:	0800b307 	.word	0x0800b307
 800b2dc:	0800b2ff 	.word	0x0800b2ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2e0:	f7fd fe96 	bl	8009010 <HAL_RCC_GetPCLK1Freq>
 800b2e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b2e6:	e014      	b.n	800b312 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2e8:	f7fd fea4 	bl	8009034 <HAL_RCC_GetPCLK2Freq>
 800b2ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b2ee:	e010      	b.n	800b312 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2f0:	4b5a      	ldr	r3, [pc, #360]	; (800b45c <UART_SetConfig+0x4e4>)
 800b2f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b2f4:	e00d      	b.n	800b312 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2f6:	f7fd fdd7 	bl	8008ea8 <HAL_RCC_GetSysClockFreq>
 800b2fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b2fc:	e009      	b.n	800b312 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b302:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b304:	e005      	b.n	800b312 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800b306:	2300      	movs	r3, #0
 800b308:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
 800b30c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b310:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b314:	2b00      	cmp	r3, #0
 800b316:	f000 8089 	beq.w	800b42c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31e:	4a4e      	ldr	r2, [pc, #312]	; (800b458 <UART_SetConfig+0x4e0>)
 800b320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b324:	461a      	mov	r2, r3
 800b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b328:	fbb3 f3f2 	udiv	r3, r3, r2
 800b32c:	005a      	lsls	r2, r3, #1
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	085b      	lsrs	r3, r3, #1
 800b334:	441a      	add	r2, r3
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b33e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b340:	6a3b      	ldr	r3, [r7, #32]
 800b342:	2b0f      	cmp	r3, #15
 800b344:	d916      	bls.n	800b374 <UART_SetConfig+0x3fc>
 800b346:	6a3b      	ldr	r3, [r7, #32]
 800b348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b34c:	d212      	bcs.n	800b374 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b34e:	6a3b      	ldr	r3, [r7, #32]
 800b350:	b29b      	uxth	r3, r3
 800b352:	f023 030f 	bic.w	r3, r3, #15
 800b356:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	085b      	lsrs	r3, r3, #1
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	f003 0307 	and.w	r3, r3, #7
 800b362:	b29a      	uxth	r2, r3
 800b364:	8bfb      	ldrh	r3, [r7, #30]
 800b366:	4313      	orrs	r3, r2
 800b368:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	8bfa      	ldrh	r2, [r7, #30]
 800b370:	60da      	str	r2, [r3, #12]
 800b372:	e05b      	b.n	800b42c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b374:	2301      	movs	r3, #1
 800b376:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b37a:	e057      	b.n	800b42c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b37c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b380:	2b08      	cmp	r3, #8
 800b382:	d828      	bhi.n	800b3d6 <UART_SetConfig+0x45e>
 800b384:	a201      	add	r2, pc, #4	; (adr r2, 800b38c <UART_SetConfig+0x414>)
 800b386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38a:	bf00      	nop
 800b38c:	0800b3b1 	.word	0x0800b3b1
 800b390:	0800b3b9 	.word	0x0800b3b9
 800b394:	0800b3c1 	.word	0x0800b3c1
 800b398:	0800b3d7 	.word	0x0800b3d7
 800b39c:	0800b3c7 	.word	0x0800b3c7
 800b3a0:	0800b3d7 	.word	0x0800b3d7
 800b3a4:	0800b3d7 	.word	0x0800b3d7
 800b3a8:	0800b3d7 	.word	0x0800b3d7
 800b3ac:	0800b3cf 	.word	0x0800b3cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3b0:	f7fd fe2e 	bl	8009010 <HAL_RCC_GetPCLK1Freq>
 800b3b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b3b6:	e014      	b.n	800b3e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3b8:	f7fd fe3c 	bl	8009034 <HAL_RCC_GetPCLK2Freq>
 800b3bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b3be:	e010      	b.n	800b3e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3c0:	4b26      	ldr	r3, [pc, #152]	; (800b45c <UART_SetConfig+0x4e4>)
 800b3c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b3c4:	e00d      	b.n	800b3e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3c6:	f7fd fd6f 	bl	8008ea8 <HAL_RCC_GetSysClockFreq>
 800b3ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b3cc:	e009      	b.n	800b3e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b3d4:	e005      	b.n	800b3e2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b3e0:	bf00      	nop
    }

    if (pclk != 0U)
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d021      	beq.n	800b42c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ec:	4a1a      	ldr	r2, [pc, #104]	; (800b458 <UART_SetConfig+0x4e0>)
 800b3ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	085b      	lsrs	r3, r3, #1
 800b400:	441a      	add	r2, r3
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	fbb2 f3f3 	udiv	r3, r2, r3
 800b40a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b40c:	6a3b      	ldr	r3, [r7, #32]
 800b40e:	2b0f      	cmp	r3, #15
 800b410:	d909      	bls.n	800b426 <UART_SetConfig+0x4ae>
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b418:	d205      	bcs.n	800b426 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	60da      	str	r2, [r3, #12]
 800b424:	e002      	b.n	800b42c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	2201      	movs	r2, #1
 800b430:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	2201      	movs	r2, #1
 800b438:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	2200      	movs	r2, #0
 800b440:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	2200      	movs	r2, #0
 800b446:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b448:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3730      	adds	r7, #48	; 0x30
 800b450:	46bd      	mov	sp, r7
 800b452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b456:	bf00      	nop
 800b458:	08021b04 	.word	0x08021b04
 800b45c:	00f42400 	.word	0x00f42400

0800b460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b46c:	f003 0301 	and.w	r3, r3, #1
 800b470:	2b00      	cmp	r3, #0
 800b472:	d00a      	beq.n	800b48a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	430a      	orrs	r2, r1
 800b488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b48e:	f003 0302 	and.w	r3, r3, #2
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00a      	beq.n	800b4ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	430a      	orrs	r2, r1
 800b4aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b0:	f003 0304 	and.w	r3, r3, #4
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00a      	beq.n	800b4ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	430a      	orrs	r2, r1
 800b4cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d2:	f003 0308 	and.w	r3, r3, #8
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00a      	beq.n	800b4f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	430a      	orrs	r2, r1
 800b4ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f4:	f003 0310 	and.w	r3, r3, #16
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00a      	beq.n	800b512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	430a      	orrs	r2, r1
 800b510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b516:	f003 0320 	and.w	r3, r3, #32
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00a      	beq.n	800b534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	430a      	orrs	r2, r1
 800b532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d01a      	beq.n	800b576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	430a      	orrs	r2, r1
 800b554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b55a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b55e:	d10a      	bne.n	800b576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	430a      	orrs	r2, r1
 800b574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b57a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00a      	beq.n	800b598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	430a      	orrs	r2, r1
 800b596:	605a      	str	r2, [r3, #4]
  }
}
 800b598:	bf00      	nop
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bc80      	pop	{r7}
 800b5a0:	4770      	bx	lr

0800b5a2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b086      	sub	sp, #24
 800b5a6:	af02      	add	r7, sp, #8
 800b5a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5b2:	f7f7 f877 	bl	80026a4 <HAL_GetTick>
 800b5b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f003 0308 	and.w	r3, r3, #8
 800b5c2:	2b08      	cmp	r3, #8
 800b5c4:	d10e      	bne.n	800b5e4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f832 	bl	800b63e <UART_WaitOnFlagUntilTimeout>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d001      	beq.n	800b5e4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e028      	b.n	800b636 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f003 0304 	and.w	r3, r3, #4
 800b5ee:	2b04      	cmp	r3, #4
 800b5f0:	d10e      	bne.n	800b610 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f81c 	bl	800b63e <UART_WaitOnFlagUntilTimeout>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d001      	beq.n	800b610 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b60c:	2303      	movs	r3, #3
 800b60e:	e012      	b.n	800b636 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2220      	movs	r2, #32
 800b614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2220      	movs	r2, #32
 800b61c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b09c      	sub	sp, #112	; 0x70
 800b642:	af00      	add	r7, sp, #0
 800b644:	60f8      	str	r0, [r7, #12]
 800b646:	60b9      	str	r1, [r7, #8]
 800b648:	603b      	str	r3, [r7, #0]
 800b64a:	4613      	mov	r3, r2
 800b64c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b64e:	e0a9      	b.n	800b7a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b656:	f000 80a5 	beq.w	800b7a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b65a:	f7f7 f823 	bl	80026a4 <HAL_GetTick>
 800b65e:	4602      	mov	r2, r0
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b666:	429a      	cmp	r2, r3
 800b668:	d302      	bcc.n	800b670 <UART_WaitOnFlagUntilTimeout+0x32>
 800b66a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d140      	bne.n	800b6f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b678:	e853 3f00 	ldrex	r3, [r3]
 800b67c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b67e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b680:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b684:	667b      	str	r3, [r7, #100]	; 0x64
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	461a      	mov	r2, r3
 800b68c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b68e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b690:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b692:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b694:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b696:	e841 2300 	strex	r3, r2, [r1]
 800b69a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b69c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1e6      	bne.n	800b670 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3308      	adds	r3, #8
 800b6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ac:	e853 3f00 	ldrex	r3, [r3]
 800b6b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b4:	f023 0301 	bic.w	r3, r3, #1
 800b6b8:	663b      	str	r3, [r7, #96]	; 0x60
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	3308      	adds	r3, #8
 800b6c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b6c2:	64ba      	str	r2, [r7, #72]	; 0x48
 800b6c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b6c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6ca:	e841 2300 	strex	r3, r2, [r1]
 800b6ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b6d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d1e5      	bne.n	800b6a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2220      	movs	r2, #32
 800b6da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2220      	movs	r2, #32
 800b6e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800b6ee:	2303      	movs	r3, #3
 800b6f0:	e069      	b.n	800b7c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 0304 	and.w	r3, r3, #4
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d051      	beq.n	800b7a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	69db      	ldr	r3, [r3, #28]
 800b706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b70a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b70e:	d149      	bne.n	800b7a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b718:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b722:	e853 3f00 	ldrex	r3, [r3]
 800b726:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b72e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	461a      	mov	r2, r3
 800b736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b738:	637b      	str	r3, [r7, #52]	; 0x34
 800b73a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b73e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b740:	e841 2300 	strex	r3, r2, [r1]
 800b744:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1e6      	bne.n	800b71a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	3308      	adds	r3, #8
 800b752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	e853 3f00 	ldrex	r3, [r3]
 800b75a:	613b      	str	r3, [r7, #16]
   return(result);
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	f023 0301 	bic.w	r3, r3, #1
 800b762:	66bb      	str	r3, [r7, #104]	; 0x68
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	3308      	adds	r3, #8
 800b76a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b76c:	623a      	str	r2, [r7, #32]
 800b76e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b770:	69f9      	ldr	r1, [r7, #28]
 800b772:	6a3a      	ldr	r2, [r7, #32]
 800b774:	e841 2300 	strex	r3, r2, [r1]
 800b778:	61bb      	str	r3, [r7, #24]
   return(result);
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1e5      	bne.n	800b74c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2220      	movs	r2, #32
 800b784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2220      	movs	r2, #32
 800b78c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2220      	movs	r2, #32
 800b794:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2200      	movs	r2, #0
 800b79c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	e010      	b.n	800b7c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	69da      	ldr	r2, [r3, #28]
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	bf0c      	ite	eq
 800b7b4:	2301      	moveq	r3, #1
 800b7b6:	2300      	movne	r3, #0
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	79fb      	ldrb	r3, [r7, #7]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	f43f af46 	beq.w	800b650 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3770      	adds	r7, #112	; 0x70
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
	...

0800b7d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b0a3      	sub	sp, #140	; 0x8c
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	88fa      	ldrh	r2, [r7, #6]
 800b7e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	88fa      	ldrh	r2, [r7, #6]
 800b7f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b802:	d10e      	bne.n	800b822 <UART_Start_Receive_IT+0x52>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d105      	bne.n	800b818 <UART_Start_Receive_IT+0x48>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b812:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b816:	e02d      	b.n	800b874 <UART_Start_Receive_IT+0xa4>
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	22ff      	movs	r2, #255	; 0xff
 800b81c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b820:	e028      	b.n	800b874 <UART_Start_Receive_IT+0xa4>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10d      	bne.n	800b846 <UART_Start_Receive_IT+0x76>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d104      	bne.n	800b83c <UART_Start_Receive_IT+0x6c>
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	22ff      	movs	r2, #255	; 0xff
 800b836:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b83a:	e01b      	b.n	800b874 <UART_Start_Receive_IT+0xa4>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	227f      	movs	r2, #127	; 0x7f
 800b840:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b844:	e016      	b.n	800b874 <UART_Start_Receive_IT+0xa4>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b84e:	d10d      	bne.n	800b86c <UART_Start_Receive_IT+0x9c>
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d104      	bne.n	800b862 <UART_Start_Receive_IT+0x92>
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	227f      	movs	r2, #127	; 0x7f
 800b85c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b860:	e008      	b.n	800b874 <UART_Start_Receive_IT+0xa4>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	223f      	movs	r2, #63	; 0x3f
 800b866:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b86a:	e003      	b.n	800b874 <UART_Start_Receive_IT+0xa4>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2200      	movs	r2, #0
 800b870:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2222      	movs	r2, #34	; 0x22
 800b880:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	3308      	adds	r3, #8
 800b88a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b88e:	e853 3f00 	ldrex	r3, [r3]
 800b892:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b896:	f043 0301 	orr.w	r3, r3, #1
 800b89a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b8a8:	673a      	str	r2, [r7, #112]	; 0x70
 800b8aa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b8ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b8b0:	e841 2300 	strex	r3, r2, [r1]
 800b8b4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b8b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1e3      	bne.n	800b884 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8c4:	d14f      	bne.n	800b966 <UART_Start_Receive_IT+0x196>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b8cc:	88fa      	ldrh	r2, [r7, #6]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d349      	bcc.n	800b966 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8da:	d107      	bne.n	800b8ec <UART_Start_Receive_IT+0x11c>
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	691b      	ldr	r3, [r3, #16]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d103      	bne.n	800b8ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	4a46      	ldr	r2, [pc, #280]	; (800ba00 <UART_Start_Receive_IT+0x230>)
 800b8e8:	675a      	str	r2, [r3, #116]	; 0x74
 800b8ea:	e002      	b.n	800b8f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	4a45      	ldr	r2, [pc, #276]	; (800ba04 <UART_Start_Receive_IT+0x234>)
 800b8f0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d01a      	beq.n	800b930 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b902:	e853 3f00 	ldrex	r3, [r3]
 800b906:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b90a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b90e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	461a      	mov	r2, r3
 800b918:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b91c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b91e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b920:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b922:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b924:	e841 2300 	strex	r3, r2, [r1]
 800b928:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b92a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1e4      	bne.n	800b8fa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3308      	adds	r3, #8
 800b936:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b93a:	e853 3f00 	ldrex	r3, [r3]
 800b93e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b946:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3308      	adds	r3, #8
 800b94e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b950:	64ba      	str	r2, [r7, #72]	; 0x48
 800b952:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b954:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b958:	e841 2300 	strex	r3, r2, [r1]
 800b95c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b960:	2b00      	cmp	r3, #0
 800b962:	d1e5      	bne.n	800b930 <UART_Start_Receive_IT+0x160>
 800b964:	e046      	b.n	800b9f4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b96e:	d107      	bne.n	800b980 <UART_Start_Receive_IT+0x1b0>
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d103      	bne.n	800b980 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	4a23      	ldr	r2, [pc, #140]	; (800ba08 <UART_Start_Receive_IT+0x238>)
 800b97c:	675a      	str	r2, [r3, #116]	; 0x74
 800b97e:	e002      	b.n	800b986 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	4a22      	ldr	r2, [pc, #136]	; (800ba0c <UART_Start_Receive_IT+0x23c>)
 800b984:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	691b      	ldr	r3, [r3, #16]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d019      	beq.n	800b9c2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b996:	e853 3f00 	ldrex	r3, [r3]
 800b99a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b9a2:	677b      	str	r3, [r7, #116]	; 0x74
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b9ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b9b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9b4:	e841 2300 	strex	r3, r2, [r1]
 800b9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1e6      	bne.n	800b98e <UART_Start_Receive_IT+0x1be>
 800b9c0:	e018      	b.n	800b9f4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	e853 3f00 	ldrex	r3, [r3]
 800b9ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	f043 0320 	orr.w	r3, r3, #32
 800b9d6:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	461a      	mov	r2, r3
 800b9de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9e0:	623b      	str	r3, [r7, #32]
 800b9e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e4:	69f9      	ldr	r1, [r7, #28]
 800b9e6:	6a3a      	ldr	r2, [r7, #32]
 800b9e8:	e841 2300 	strex	r3, r2, [r1]
 800b9ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d1e6      	bne.n	800b9c2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	378c      	adds	r7, #140	; 0x8c
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bc80      	pop	{r7}
 800b9fe:	4770      	bx	lr
 800ba00:	0800c3e5 	.word	0x0800c3e5
 800ba04:	0800c085 	.word	0x0800c085
 800ba08:	0800becd 	.word	0x0800becd
 800ba0c:	0800bd15 	.word	0x0800bd15

0800ba10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b08f      	sub	sp, #60	; 0x3c
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1e:	6a3b      	ldr	r3, [r7, #32]
 800ba20:	e853 3f00 	ldrex	r3, [r3]
 800ba24:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ba2c:	637b      	str	r3, [r7, #52]	; 0x34
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	461a      	mov	r2, r3
 800ba34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba38:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba3e:	e841 2300 	strex	r3, r2, [r1]
 800ba42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1e6      	bne.n	800ba18 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3308      	adds	r3, #8
 800ba50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	e853 3f00 	ldrex	r3, [r3]
 800ba58:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ba60:	633b      	str	r3, [r7, #48]	; 0x30
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3308      	adds	r3, #8
 800ba68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba6a:	61ba      	str	r2, [r7, #24]
 800ba6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6e:	6979      	ldr	r1, [r7, #20]
 800ba70:	69ba      	ldr	r2, [r7, #24]
 800ba72:	e841 2300 	strex	r3, r2, [r1]
 800ba76:	613b      	str	r3, [r7, #16]
   return(result);
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d1e5      	bne.n	800ba4a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2220      	movs	r2, #32
 800ba82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800ba86:	bf00      	nop
 800ba88:	373c      	adds	r7, #60	; 0x3c
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bc80      	pop	{r7}
 800ba8e:	4770      	bx	lr

0800ba90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b095      	sub	sp, #84	; 0x54
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baa0:	e853 3f00 	ldrex	r3, [r3]
 800baa4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800baac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	461a      	mov	r2, r3
 800bab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bab6:	643b      	str	r3, [r7, #64]	; 0x40
 800bab8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800babc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800babe:	e841 2300 	strex	r3, r2, [r1]
 800bac2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1e6      	bne.n	800ba98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	3308      	adds	r3, #8
 800bad0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad2:	6a3b      	ldr	r3, [r7, #32]
 800bad4:	e853 3f00 	ldrex	r3, [r3]
 800bad8:	61fb      	str	r3, [r7, #28]
   return(result);
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bae0:	f023 0301 	bic.w	r3, r3, #1
 800bae4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3308      	adds	r3, #8
 800baec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800baee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800baf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800baf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baf6:	e841 2300 	strex	r3, r2, [r1]
 800bafa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1e3      	bne.n	800baca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d118      	bne.n	800bb3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	e853 3f00 	ldrex	r3, [r3]
 800bb16:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	f023 0310 	bic.w	r3, r3, #16
 800bb1e:	647b      	str	r3, [r7, #68]	; 0x44
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	461a      	mov	r2, r3
 800bb26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb28:	61bb      	str	r3, [r7, #24]
 800bb2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2c:	6979      	ldr	r1, [r7, #20]
 800bb2e:	69ba      	ldr	r2, [r7, #24]
 800bb30:	e841 2300 	strex	r3, r2, [r1]
 800bb34:	613b      	str	r3, [r7, #16]
   return(result);
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1e6      	bne.n	800bb0a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2220      	movs	r2, #32
 800bb40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bb50:	bf00      	nop
 800bb52:	3754      	adds	r7, #84	; 0x54
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bc80      	pop	{r7}
 800bb58:	4770      	bx	lr

0800bb5a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b090      	sub	sp, #64	; 0x40
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb66:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 0320 	and.w	r3, r3, #32
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d137      	bne.n	800bbe6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bb76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3308      	adds	r3, #8
 800bb84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	e853 3f00 	ldrex	r3, [r3]
 800bb8c:	623b      	str	r3, [r7, #32]
   return(result);
 800bb8e:	6a3b      	ldr	r3, [r7, #32]
 800bb90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb94:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	3308      	adds	r3, #8
 800bb9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb9e:	633a      	str	r2, [r7, #48]	; 0x30
 800bba0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bba6:	e841 2300 	strex	r3, r2, [r1]
 800bbaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1e5      	bne.n	800bb7e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	e853 3f00 	ldrex	r3, [r3]
 800bbbe:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbc6:	637b      	str	r3, [r7, #52]	; 0x34
 800bbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	461a      	mov	r2, r3
 800bbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd0:	61fb      	str	r3, [r7, #28]
 800bbd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd4:	69b9      	ldr	r1, [r7, #24]
 800bbd6:	69fa      	ldr	r2, [r7, #28]
 800bbd8:	e841 2300 	strex	r3, r2, [r1]
 800bbdc:	617b      	str	r3, [r7, #20]
   return(result);
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1e6      	bne.n	800bbb2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbe4:	e002      	b.n	800bbec <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bbe6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bbe8:	f7f7 fa4a 	bl	8003080 <HAL_UART_TxCpltCallback>
}
 800bbec:	bf00      	nop
 800bbee:	3740      	adds	r7, #64	; 0x40
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc00:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f7ff f99a 	bl	800af3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc08:	bf00      	nop
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b086      	sub	sp, #24
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc1c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc24:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc2c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc38:	2b80      	cmp	r3, #128	; 0x80
 800bc3a:	d109      	bne.n	800bc50 <UART_DMAError+0x40>
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	2b21      	cmp	r3, #33	; 0x21
 800bc40:	d106      	bne.n	800bc50 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bc4a:	6978      	ldr	r0, [r7, #20]
 800bc4c:	f7ff fee0 	bl	800ba10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc5a:	2b40      	cmp	r3, #64	; 0x40
 800bc5c:	d109      	bne.n	800bc72 <UART_DMAError+0x62>
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2b22      	cmp	r3, #34	; 0x22
 800bc62:	d106      	bne.n	800bc72 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bc6c:	6978      	ldr	r0, [r7, #20]
 800bc6e:	f7ff ff0f 	bl	800ba90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc78:	f043 0210 	orr.w	r2, r3, #16
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc82:	6978      	ldr	r0, [r7, #20]
 800bc84:	f7ff f963 	bl	800af4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc88:	bf00      	nop
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f7ff f94d 	bl	800af4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcb4:	bf00      	nop
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b088      	sub	sp, #32
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	e853 3f00 	ldrex	r3, [r3]
 800bcd0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcd8:	61fb      	str	r3, [r7, #28]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	461a      	mov	r2, r3
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	61bb      	str	r3, [r7, #24]
 800bce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce6:	6979      	ldr	r1, [r7, #20]
 800bce8:	69ba      	ldr	r2, [r7, #24]
 800bcea:	e841 2300 	strex	r3, r2, [r1]
 800bcee:	613b      	str	r3, [r7, #16]
   return(result);
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d1e6      	bne.n	800bcc4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2220      	movs	r2, #32
 800bcfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7f7 f9bb 	bl	8003080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd0a:	bf00      	nop
 800bd0c:	3720      	adds	r7, #32
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
	...

0800bd14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b09c      	sub	sp, #112	; 0x70
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd2c:	2b22      	cmp	r3, #34	; 0x22
 800bd2e:	f040 80be 	bne.w	800beae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bd3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bd40:	b2d9      	uxtb	r1, r3
 800bd42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bd46:	b2da      	uxtb	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd4c:	400a      	ands	r2, r1
 800bd4e:	b2d2      	uxtb	r2, r2
 800bd50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd56:	1c5a      	adds	r2, r3, #1
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	3b01      	subs	r3, #1
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f040 80a1 	bne.w	800bebe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd84:	e853 3f00 	ldrex	r3, [r3]
 800bd88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd90:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	461a      	mov	r2, r3
 800bd98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd9a:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bda0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bda2:	e841 2300 	strex	r3, r2, [r1]
 800bda6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bda8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d1e6      	bne.n	800bd7c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3308      	adds	r3, #8
 800bdb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb8:	e853 3f00 	ldrex	r3, [r3]
 800bdbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bdbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc0:	f023 0301 	bic.w	r3, r3, #1
 800bdc4:	667b      	str	r3, [r7, #100]	; 0x64
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	3308      	adds	r3, #8
 800bdcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdce:	647a      	str	r2, [r7, #68]	; 0x44
 800bdd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bdd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdd6:	e841 2300 	strex	r3, r2, [r1]
 800bdda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1e5      	bne.n	800bdae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2220      	movs	r2, #32
 800bde6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a33      	ldr	r2, [pc, #204]	; (800bec8 <UART_RxISR_8BIT+0x1b4>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d01f      	beq.n	800be40 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d018      	beq.n	800be40 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be16:	e853 3f00 	ldrex	r3, [r3]
 800be1a:	623b      	str	r3, [r7, #32]
   return(result);
 800be1c:	6a3b      	ldr	r3, [r7, #32]
 800be1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800be22:	663b      	str	r3, [r7, #96]	; 0x60
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	461a      	mov	r2, r3
 800be2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be2c:	633b      	str	r3, [r7, #48]	; 0x30
 800be2e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be34:	e841 2300 	strex	r3, r2, [r1]
 800be38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d1e6      	bne.n	800be0e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be44:	2b01      	cmp	r3, #1
 800be46:	d12e      	bne.n	800bea6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	e853 3f00 	ldrex	r3, [r3]
 800be5a:	60fb      	str	r3, [r7, #12]
   return(result);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f023 0310 	bic.w	r3, r3, #16
 800be62:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	461a      	mov	r2, r3
 800be6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be6c:	61fb      	str	r3, [r7, #28]
 800be6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be70:	69b9      	ldr	r1, [r7, #24]
 800be72:	69fa      	ldr	r2, [r7, #28]
 800be74:	e841 2300 	strex	r3, r2, [r1]
 800be78:	617b      	str	r3, [r7, #20]
   return(result);
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1e6      	bne.n	800be4e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	69db      	ldr	r3, [r3, #28]
 800be86:	f003 0310 	and.w	r3, r3, #16
 800be8a:	2b10      	cmp	r3, #16
 800be8c:	d103      	bne.n	800be96 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2210      	movs	r2, #16
 800be94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800be9c:	4619      	mov	r1, r3
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f7ff f85e 	bl	800af60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bea4:	e00b      	b.n	800bebe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f7f7 f900 	bl	80030ac <HAL_UART_RxCpltCallback>
}
 800beac:	e007      	b.n	800bebe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	699a      	ldr	r2, [r3, #24]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f042 0208 	orr.w	r2, r2, #8
 800bebc:	619a      	str	r2, [r3, #24]
}
 800bebe:	bf00      	nop
 800bec0:	3770      	adds	r7, #112	; 0x70
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	40008000 	.word	0x40008000

0800becc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b09c      	sub	sp, #112	; 0x70
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800beda:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bee4:	2b22      	cmp	r3, #34	; 0x22
 800bee6:	f040 80be 	bne.w	800c066 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bef8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800befa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800befe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bf02:	4013      	ands	r3, r2
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf0e:	1c9a      	adds	r2, r3, #2
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	3b01      	subs	r3, #1
 800bf1e:	b29a      	uxth	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f040 80a1 	bne.w	800c076 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf3c:	e853 3f00 	ldrex	r3, [r3]
 800bf40:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bf42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf48:	667b      	str	r3, [r7, #100]	; 0x64
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf52:	657b      	str	r3, [r7, #84]	; 0x54
 800bf54:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf5a:	e841 2300 	strex	r3, r2, [r1]
 800bf5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bf60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1e6      	bne.n	800bf34 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	3308      	adds	r3, #8
 800bf6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf70:	e853 3f00 	ldrex	r3, [r3]
 800bf74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	f023 0301 	bic.w	r3, r3, #1
 800bf7c:	663b      	str	r3, [r7, #96]	; 0x60
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	3308      	adds	r3, #8
 800bf84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf86:	643a      	str	r2, [r7, #64]	; 0x40
 800bf88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf8e:	e841 2300 	strex	r3, r2, [r1]
 800bf92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1e5      	bne.n	800bf66 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2220      	movs	r2, #32
 800bf9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a33      	ldr	r2, [pc, #204]	; (800c080 <UART_RxISR_16BIT+0x1b4>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d01f      	beq.n	800bff8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d018      	beq.n	800bff8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
 800bfce:	e853 3f00 	ldrex	r3, [r3]
 800bfd2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bfda:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfe6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfec:	e841 2300 	strex	r3, r2, [r1]
 800bff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1e6      	bne.n	800bfc6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d12e      	bne.n	800c05e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	e853 3f00 	ldrex	r3, [r3]
 800c012:	60bb      	str	r3, [r7, #8]
   return(result);
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	f023 0310 	bic.w	r3, r3, #16
 800c01a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	461a      	mov	r2, r3
 800c022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c024:	61bb      	str	r3, [r7, #24]
 800c026:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c028:	6979      	ldr	r1, [r7, #20]
 800c02a:	69ba      	ldr	r2, [r7, #24]
 800c02c:	e841 2300 	strex	r3, r2, [r1]
 800c030:	613b      	str	r3, [r7, #16]
   return(result);
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d1e6      	bne.n	800c006 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	69db      	ldr	r3, [r3, #28]
 800c03e:	f003 0310 	and.w	r3, r3, #16
 800c042:	2b10      	cmp	r3, #16
 800c044:	d103      	bne.n	800c04e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2210      	movs	r2, #16
 800c04c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c054:	4619      	mov	r1, r3
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7fe ff82 	bl	800af60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c05c:	e00b      	b.n	800c076 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7f7 f824 	bl	80030ac <HAL_UART_RxCpltCallback>
}
 800c064:	e007      	b.n	800c076 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	699a      	ldr	r2, [r3, #24]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f042 0208 	orr.w	r2, r2, #8
 800c074:	619a      	str	r2, [r3, #24]
}
 800c076:	bf00      	nop
 800c078:	3770      	adds	r7, #112	; 0x70
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	40008000 	.word	0x40008000

0800c084 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b0ac      	sub	sp, #176	; 0xb0
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c092:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	69db      	ldr	r3, [r3, #28]
 800c09c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0ba:	2b22      	cmp	r3, #34	; 0x22
 800c0bc:	f040 8182 	bne.w	800c3c4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c0c6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c0ca:	e125      	b.n	800c318 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c0d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c0da:	b2d9      	uxtb	r1, r3
 800c0dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c0e0:	b2da      	uxtb	r2, r3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0e6:	400a      	ands	r2, r1
 800c0e8:	b2d2      	uxtb	r2, r2
 800c0ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0f0:	1c5a      	adds	r2, r3, #1
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	3b01      	subs	r3, #1
 800c100:	b29a      	uxth	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	69db      	ldr	r3, [r3, #28]
 800c10e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c116:	f003 0307 	and.w	r3, r3, #7
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d053      	beq.n	800c1c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c11e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c122:	f003 0301 	and.w	r3, r3, #1
 800c126:	2b00      	cmp	r3, #0
 800c128:	d011      	beq.n	800c14e <UART_RxISR_8BIT_FIFOEN+0xca>
 800c12a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c12e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00b      	beq.n	800c14e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2201      	movs	r2, #1
 800c13c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c144:	f043 0201 	orr.w	r2, r3, #1
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c14e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c152:	f003 0302 	and.w	r3, r3, #2
 800c156:	2b00      	cmp	r3, #0
 800c158:	d011      	beq.n	800c17e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c15a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c15e:	f003 0301 	and.w	r3, r3, #1
 800c162:	2b00      	cmp	r3, #0
 800c164:	d00b      	beq.n	800c17e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2202      	movs	r2, #2
 800c16c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c174:	f043 0204 	orr.w	r2, r3, #4
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c17e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c182:	f003 0304 	and.w	r3, r3, #4
 800c186:	2b00      	cmp	r3, #0
 800c188:	d011      	beq.n	800c1ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c18a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c18e:	f003 0301 	and.w	r3, r3, #1
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00b      	beq.n	800c1ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2204      	movs	r2, #4
 800c19c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1a4:	f043 0202 	orr.w	r2, r3, #2
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d006      	beq.n	800c1c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f7fe fec8 	bl	800af4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f040 80a2 	bne.w	800c318 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1dc:	e853 3f00 	ldrex	r3, [r3]
 800c1e0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c1e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c1f8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c1fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c1fe:	e841 2300 	strex	r3, r2, [r1]
 800c202:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1e4      	bne.n	800c1d4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	3308      	adds	r3, #8
 800c210:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c214:	e853 3f00 	ldrex	r3, [r3]
 800c218:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c21a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c21c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c220:	f023 0301 	bic.w	r3, r3, #1
 800c224:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	3308      	adds	r3, #8
 800c22e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c232:	66ba      	str	r2, [r7, #104]	; 0x68
 800c234:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c236:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c238:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c23a:	e841 2300 	strex	r3, r2, [r1]
 800c23e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c240:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c242:	2b00      	cmp	r3, #0
 800c244:	d1e1      	bne.n	800c20a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2220      	movs	r2, #32
 800c24a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a5f      	ldr	r2, [pc, #380]	; (800c3dc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d021      	beq.n	800c2a8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d01a      	beq.n	800c2a8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c27a:	e853 3f00 	ldrex	r3, [r3]
 800c27e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c282:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	461a      	mov	r2, r3
 800c290:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c294:	657b      	str	r3, [r7, #84]	; 0x54
 800c296:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c298:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c29a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c29c:	e841 2300 	strex	r3, r2, [r1]
 800c2a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c2a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1e4      	bne.n	800c272 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d130      	bne.n	800c312 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2be:	e853 3f00 	ldrex	r3, [r3]
 800c2c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c6:	f023 0310 	bic.w	r3, r3, #16
 800c2ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2d8:	643b      	str	r3, [r7, #64]	; 0x40
 800c2da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c2de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2e0:	e841 2300 	strex	r3, r2, [r1]
 800c2e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1e4      	bne.n	800c2b6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	69db      	ldr	r3, [r3, #28]
 800c2f2:	f003 0310 	and.w	r3, r3, #16
 800c2f6:	2b10      	cmp	r3, #16
 800c2f8:	d103      	bne.n	800c302 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2210      	movs	r2, #16
 800c300:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c308:	4619      	mov	r1, r3
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f7fe fe28 	bl	800af60 <HAL_UARTEx_RxEventCallback>
 800c310:	e002      	b.n	800c318 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f7f6 feca 	bl	80030ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c318:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d006      	beq.n	800c32e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c324:	f003 0320 	and.w	r3, r3, #32
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f47f aecf 	bne.w	800c0cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c334:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c338:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d049      	beq.n	800c3d4 <UART_RxISR_8BIT_FIFOEN+0x350>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c346:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d242      	bcs.n	800c3d4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	3308      	adds	r3, #8
 800c354:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c356:	6a3b      	ldr	r3, [r7, #32]
 800c358:	e853 3f00 	ldrex	r3, [r3]
 800c35c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	3308      	adds	r3, #8
 800c36e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c372:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c374:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c37a:	e841 2300 	strex	r3, r2, [r1]
 800c37e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c382:	2b00      	cmp	r3, #0
 800c384:	d1e3      	bne.n	800c34e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a15      	ldr	r2, [pc, #84]	; (800c3e0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c38a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	e853 3f00 	ldrex	r3, [r3]
 800c398:	60bb      	str	r3, [r7, #8]
   return(result);
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	f043 0320 	orr.w	r3, r3, #32
 800c3a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3ae:	61bb      	str	r3, [r7, #24]
 800c3b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b2:	6979      	ldr	r1, [r7, #20]
 800c3b4:	69ba      	ldr	r2, [r7, #24]
 800c3b6:	e841 2300 	strex	r3, r2, [r1]
 800c3ba:	613b      	str	r3, [r7, #16]
   return(result);
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d1e4      	bne.n	800c38c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c3c2:	e007      	b.n	800c3d4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	699a      	ldr	r2, [r3, #24]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f042 0208 	orr.w	r2, r2, #8
 800c3d2:	619a      	str	r2, [r3, #24]
}
 800c3d4:	bf00      	nop
 800c3d6:	37b0      	adds	r7, #176	; 0xb0
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	40008000 	.word	0x40008000
 800c3e0:	0800bd15 	.word	0x0800bd15

0800c3e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b0ae      	sub	sp, #184	; 0xb8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3f2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	69db      	ldr	r3, [r3, #28]
 800c3fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c41a:	2b22      	cmp	r3, #34	; 0x22
 800c41c:	f040 8186 	bne.w	800c72c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c426:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c42a:	e129      	b.n	800c680 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c432:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c43a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c43e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c442:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c446:	4013      	ands	r3, r2
 800c448:	b29a      	uxth	r2, r3
 800c44a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c44e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c454:	1c9a      	adds	r2, r3, #2
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c460:	b29b      	uxth	r3, r3
 800c462:	3b01      	subs	r3, #1
 800c464:	b29a      	uxth	r2, r3
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	69db      	ldr	r3, [r3, #28]
 800c472:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c476:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c47a:	f003 0307 	and.w	r3, r3, #7
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d053      	beq.n	800c52a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c482:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c486:	f003 0301 	and.w	r3, r3, #1
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d011      	beq.n	800c4b2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c48e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00b      	beq.n	800c4b2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4a8:	f043 0201 	orr.w	r2, r3, #1
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c4b6:	f003 0302 	and.w	r3, r3, #2
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d011      	beq.n	800c4e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c4be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00b      	beq.n	800c4e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2202      	movs	r2, #2
 800c4d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4d8:	f043 0204 	orr.w	r2, r3, #4
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c4e6:	f003 0304 	and.w	r3, r3, #4
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d011      	beq.n	800c512 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c4ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4f2:	f003 0301 	and.w	r3, r3, #1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00b      	beq.n	800c512 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2204      	movs	r2, #4
 800c500:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c508:	f043 0202 	orr.w	r2, r3, #2
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d006      	beq.n	800c52a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f7fe fd16 	bl	800af4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c530:	b29b      	uxth	r3, r3
 800c532:	2b00      	cmp	r3, #0
 800c534:	f040 80a4 	bne.w	800c680 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c540:	e853 3f00 	ldrex	r3, [r3]
 800c544:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c546:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c54c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	461a      	mov	r2, r3
 800c556:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c55a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c55e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c560:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c562:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c566:	e841 2300 	strex	r3, r2, [r1]
 800c56a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c56c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1e2      	bne.n	800c538 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	3308      	adds	r3, #8
 800c578:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c57c:	e853 3f00 	ldrex	r3, [r3]
 800c580:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c588:	f023 0301 	bic.w	r3, r3, #1
 800c58c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	3308      	adds	r3, #8
 800c596:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c59a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c59c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c5a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c5a2:	e841 2300 	strex	r3, r2, [r1]
 800c5a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c5a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1e1      	bne.n	800c572 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2220      	movs	r2, #32
 800c5b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a5f      	ldr	r2, [pc, #380]	; (800c744 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d021      	beq.n	800c610 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d01a      	beq.n	800c610 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5e2:	e853 3f00 	ldrex	r3, [r3]
 800c5e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c5e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c5ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c600:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c602:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c604:	e841 2300 	strex	r3, r2, [r1]
 800c608:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c60a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d1e4      	bne.n	800c5da <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c614:	2b01      	cmp	r3, #1
 800c616:	d130      	bne.n	800c67a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c626:	e853 3f00 	ldrex	r3, [r3]
 800c62a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c62e:	f023 0310 	bic.w	r3, r3, #16
 800c632:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	461a      	mov	r2, r3
 800c63c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c640:	647b      	str	r3, [r7, #68]	; 0x44
 800c642:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c644:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c648:	e841 2300 	strex	r3, r2, [r1]
 800c64c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1e4      	bne.n	800c61e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	69db      	ldr	r3, [r3, #28]
 800c65a:	f003 0310 	and.w	r3, r3, #16
 800c65e:	2b10      	cmp	r3, #16
 800c660:	d103      	bne.n	800c66a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2210      	movs	r2, #16
 800c668:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c670:	4619      	mov	r1, r3
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7fe fc74 	bl	800af60 <HAL_UARTEx_RxEventCallback>
 800c678:	e002      	b.n	800c680 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f7f6 fd16 	bl	80030ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c680:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c684:	2b00      	cmp	r3, #0
 800c686:	d006      	beq.n	800c696 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800c688:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c68c:	f003 0320 	and.w	r3, r3, #32
 800c690:	2b00      	cmp	r3, #0
 800c692:	f47f aecb 	bne.w	800c42c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c69c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c6a0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d049      	beq.n	800c73c <UART_RxISR_16BIT_FIFOEN+0x358>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c6ae:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d242      	bcs.n	800c73c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	3308      	adds	r3, #8
 800c6bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c0:	e853 3f00 	ldrex	r3, [r3]
 800c6c4:	623b      	str	r3, [r7, #32]
   return(result);
 800c6c6:	6a3b      	ldr	r3, [r7, #32]
 800c6c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	3308      	adds	r3, #8
 800c6d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c6da:	633a      	str	r2, [r7, #48]	; 0x30
 800c6dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6e2:	e841 2300 	strex	r3, r2, [r1]
 800c6e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1e3      	bne.n	800c6b6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a15      	ldr	r2, [pc, #84]	; (800c748 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c6f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	e853 3f00 	ldrex	r3, [r3]
 800c700:	60fb      	str	r3, [r7, #12]
   return(result);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f043 0320 	orr.w	r3, r3, #32
 800c708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	461a      	mov	r2, r3
 800c712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c716:	61fb      	str	r3, [r7, #28]
 800c718:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71a:	69b9      	ldr	r1, [r7, #24]
 800c71c:	69fa      	ldr	r2, [r7, #28]
 800c71e:	e841 2300 	strex	r3, r2, [r1]
 800c722:	617b      	str	r3, [r7, #20]
   return(result);
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1e4      	bne.n	800c6f4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c72a:	e007      	b.n	800c73c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	699a      	ldr	r2, [r3, #24]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f042 0208 	orr.w	r2, r2, #8
 800c73a:	619a      	str	r2, [r3, #24]
}
 800c73c:	bf00      	nop
 800c73e:	37b8      	adds	r7, #184	; 0xb8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	40008000 	.word	0x40008000
 800c748:	0800becd 	.word	0x0800becd

0800c74c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b083      	sub	sp, #12
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c754:	bf00      	nop
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	bc80      	pop	{r7}
 800c75c:	4770      	bx	lr

0800c75e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c75e:	b480      	push	{r7}
 800c760:	b083      	sub	sp, #12
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c766:	bf00      	nop
 800c768:	370c      	adds	r7, #12
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bc80      	pop	{r7}
 800c76e:	4770      	bx	lr

0800c770 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c778:	bf00      	nop
 800c77a:	370c      	adds	r7, #12
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bc80      	pop	{r7}
 800c780:	4770      	bx	lr

0800c782 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b088      	sub	sp, #32
 800c786:	af02      	add	r7, sp, #8
 800c788:	60f8      	str	r0, [r7, #12]
 800c78a:	1d3b      	adds	r3, r7, #4
 800c78c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800c790:	2300      	movs	r3, #0
 800c792:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d101      	bne.n	800c7a2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800c79e:	2302      	movs	r3, #2
 800c7a0:	e046      	b.n	800c830 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2224      	movs	r2, #36	; 0x24
 800c7ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f022 0201 	bic.w	r2, r2, #1
 800c7c0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	430a      	orrs	r2, r1
 800c7d4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d105      	bne.n	800c7e8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800c7dc:	1d3b      	adds	r3, r7, #4
 800c7de:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f000 f911 	bl	800ca0a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f042 0201 	orr.w	r2, r2, #1
 800c7f6:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c7f8:	f7f5 ff54 	bl	80026a4 <HAL_GetTick>
 800c7fc:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c802:	9300      	str	r3, [sp, #0]
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	2200      	movs	r2, #0
 800c808:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f7fe ff16 	bl	800b63e <UART_WaitOnFlagUntilTimeout>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d002      	beq.n	800c81e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800c818:	2303      	movs	r3, #3
 800c81a:	75fb      	strb	r3, [r7, #23]
 800c81c:	e003      	b.n	800c826 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2220      	movs	r2, #32
 800c822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800c82e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3718      	adds	r7, #24
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800c838:	b480      	push	{r7}
 800c83a:	b089      	sub	sp, #36	; 0x24
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c846:	2b01      	cmp	r3, #1
 800c848:	d101      	bne.n	800c84e <HAL_UARTEx_EnableStopMode+0x16>
 800c84a:	2302      	movs	r3, #2
 800c84c:	e021      	b.n	800c892 <HAL_UARTEx_EnableStopMode+0x5a>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	e853 3f00 	ldrex	r3, [r3]
 800c862:	60bb      	str	r3, [r7, #8]
   return(result);
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	f043 0302 	orr.w	r3, r3, #2
 800c86a:	61fb      	str	r3, [r7, #28]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	461a      	mov	r2, r3
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	61bb      	str	r3, [r7, #24]
 800c876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c878:	6979      	ldr	r1, [r7, #20]
 800c87a:	69ba      	ldr	r2, [r7, #24]
 800c87c:	e841 2300 	strex	r3, r2, [r1]
 800c880:	613b      	str	r3, [r7, #16]
   return(result);
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1e6      	bne.n	800c856 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c890:	2300      	movs	r3, #0
}
 800c892:	4618      	mov	r0, r3
 800c894:	3724      	adds	r7, #36	; 0x24
 800c896:	46bd      	mov	sp, r7
 800c898:	bc80      	pop	{r7}
 800c89a:	4770      	bx	lr

0800c89c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d101      	bne.n	800c8b2 <HAL_UARTEx_EnableFifoMode+0x16>
 800c8ae:	2302      	movs	r3, #2
 800c8b0:	e02b      	b.n	800c90a <HAL_UARTEx_EnableFifoMode+0x6e>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2224      	movs	r2, #36	; 0x24
 800c8be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f022 0201 	bic.w	r2, r2, #1
 800c8d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c8e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c8e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	68fa      	ldr	r2, [r7, #12]
 800c8f0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 f8ac 	bl	800ca50 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2220      	movs	r2, #32
 800c8fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c908:	2300      	movs	r3, #0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3710      	adds	r7, #16
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b084      	sub	sp, #16
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
 800c91a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c922:	2b01      	cmp	r3, #1
 800c924:	d101      	bne.n	800c92a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c926:	2302      	movs	r3, #2
 800c928:	e02d      	b.n	800c986 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2201      	movs	r2, #1
 800c92e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2224      	movs	r2, #36	; 0x24
 800c936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f022 0201 	bic.w	r2, r2, #1
 800c950:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	683a      	ldr	r2, [r7, #0]
 800c962:	430a      	orrs	r2, r1
 800c964:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 f872 	bl	800ca50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2220      	movs	r2, #32
 800c978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c984:	2300      	movs	r3, #0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b084      	sub	sp, #16
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d101      	bne.n	800c9a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c9a2:	2302      	movs	r3, #2
 800c9a4:	e02d      	b.n	800ca02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2224      	movs	r2, #36	; 0x24
 800c9b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f022 0201 	bic.w	r2, r2, #1
 800c9cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	683a      	ldr	r2, [r7, #0]
 800c9de:	430a      	orrs	r2, r1
 800c9e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 f834 	bl	800ca50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2220      	movs	r2, #32
 800c9f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ca00:	2300      	movs	r3, #0
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ca0a:	b480      	push	{r7}
 800ca0c:	b085      	sub	sp, #20
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	60f8      	str	r0, [r7, #12]
 800ca12:	1d3b      	adds	r3, r7, #4
 800ca14:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	f023 0210 	bic.w	r2, r3, #16
 800ca22:	893b      	ldrh	r3, [r7, #8]
 800ca24:	4619      	mov	r1, r3
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	430a      	orrs	r2, r1
 800ca2c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800ca38:	7abb      	ldrb	r3, [r7, #10]
 800ca3a:	061a      	lsls	r2, r3, #24
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	430a      	orrs	r2, r1
 800ca42:	605a      	str	r2, [r3, #4]
}
 800ca44:	bf00      	nop
 800ca46:	3714      	adds	r7, #20
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bc80      	pop	{r7}
 800ca4c:	4770      	bx	lr
	...

0800ca50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d108      	bne.n	800ca72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2201      	movs	r2, #1
 800ca64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ca70:	e031      	b.n	800cad6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ca72:	2308      	movs	r3, #8
 800ca74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ca76:	2308      	movs	r3, #8
 800ca78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	0e5b      	lsrs	r3, r3, #25
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	f003 0307 	and.w	r3, r3, #7
 800ca88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	0f5b      	lsrs	r3, r3, #29
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	f003 0307 	and.w	r3, r3, #7
 800ca98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca9a:	7bbb      	ldrb	r3, [r7, #14]
 800ca9c:	7b3a      	ldrb	r2, [r7, #12]
 800ca9e:	4910      	ldr	r1, [pc, #64]	; (800cae0 <UARTEx_SetNbDataToProcess+0x90>)
 800caa0:	5c8a      	ldrb	r2, [r1, r2]
 800caa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800caa6:	7b3a      	ldrb	r2, [r7, #12]
 800caa8:	490e      	ldr	r1, [pc, #56]	; (800cae4 <UARTEx_SetNbDataToProcess+0x94>)
 800caaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800caac:	fb93 f3f2 	sdiv	r3, r3, r2
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cab8:	7bfb      	ldrb	r3, [r7, #15]
 800caba:	7b7a      	ldrb	r2, [r7, #13]
 800cabc:	4908      	ldr	r1, [pc, #32]	; (800cae0 <UARTEx_SetNbDataToProcess+0x90>)
 800cabe:	5c8a      	ldrb	r2, [r1, r2]
 800cac0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cac4:	7b7a      	ldrb	r2, [r7, #13]
 800cac6:	4907      	ldr	r1, [pc, #28]	; (800cae4 <UARTEx_SetNbDataToProcess+0x94>)
 800cac8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800caca:	fb93 f3f2 	sdiv	r3, r3, r2
 800cace:	b29a      	uxth	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cad6:	bf00      	nop
 800cad8:	3714      	adds	r7, #20
 800cada:	46bd      	mov	sp, r7
 800cadc:	bc80      	pop	{r7}
 800cade:	4770      	bx	lr
 800cae0:	08021b1c 	.word	0x08021b1c
 800cae4:	08021b24 	.word	0x08021b24

0800cae8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800caec:	f7f5 fc80 	bl	80023f0 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800caf0:	f000 f818 	bl	800cb24 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800caf4:	bf00      	nop
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800caf8:	b480      	push	{r7}
 800cafa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800cafc:	f3bf 8f4f 	dsb	sy
}
 800cb00:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cb02:	4b06      	ldr	r3, [pc, #24]	; (800cb1c <__NVIC_SystemReset+0x24>)
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cb0a:	4904      	ldr	r1, [pc, #16]	; (800cb1c <__NVIC_SystemReset+0x24>)
 800cb0c:	4b04      	ldr	r3, [pc, #16]	; (800cb20 <__NVIC_SystemReset+0x28>)
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800cb12:	f3bf 8f4f 	dsb	sy
}
 800cb16:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cb18:	bf00      	nop
 800cb1a:	e7fd      	b.n	800cb18 <__NVIC_SystemReset+0x20>
 800cb1c:	e000ed00 	.word	0xe000ed00
 800cb20:	05fa0004 	.word	0x05fa0004

0800cb24 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b086      	sub	sp, #24
 800cb28:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800cb2e:	2300      	movs	r3, #0
 800cb30:	9302      	str	r3, [sp, #8]
 800cb32:	2303      	movs	r3, #3
 800cb34:	9301      	str	r3, [sp, #4]
 800cb36:	2301      	movs	r3, #1
 800cb38:	9300      	str	r3, [sp, #0]
 800cb3a:	4b59      	ldr	r3, [pc, #356]	; (800cca0 <LoRaWAN_Init+0x17c>)
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	2100      	movs	r1, #0
 800cb40:	2002      	movs	r0, #2
 800cb42:	f013 f887 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800cb46:	2300      	movs	r3, #0
 800cb48:	9302      	str	r3, [sp, #8]
 800cb4a:	2305      	movs	r3, #5
 800cb4c:	9301      	str	r3, [sp, #4]
 800cb4e:	2302      	movs	r3, #2
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	4b54      	ldr	r3, [pc, #336]	; (800cca4 <LoRaWAN_Init+0x180>)
 800cb54:	2200      	movs	r2, #0
 800cb56:	2100      	movs	r1, #0
 800cb58:	2002      	movs	r0, #2
 800cb5a:	f013 f87b 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800cb5e:	2300      	movs	r3, #0
 800cb60:	9302      	str	r3, [sp, #8]
 800cb62:	2303      	movs	r3, #3
 800cb64:	9301      	str	r3, [sp, #4]
 800cb66:	2301      	movs	r3, #1
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	4b4f      	ldr	r3, [pc, #316]	; (800cca8 <LoRaWAN_Init+0x184>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	2100      	movs	r1, #0
 800cb70:	2002      	movs	r0, #2
 800cb72:	f013 f86f 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800cb76:	1d3b      	adds	r3, r7, #4
 800cb78:	4619      	mov	r1, r3
 800cb7a:	2000      	movs	r0, #0
 800cb7c:	f003 fa3c 	bl	800fff8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	0e1b      	lsrs	r3, r3, #24
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	461a      	mov	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	0c1b      	lsrs	r3, r3, #16
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	4619      	mov	r1, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	0a1b      	lsrs	r3, r3, #8
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	9302      	str	r3, [sp, #8]
 800cb98:	9101      	str	r1, [sp, #4]
 800cb9a:	9200      	str	r2, [sp, #0]
 800cb9c:	4b43      	ldr	r3, [pc, #268]	; (800ccac <LoRaWAN_Init+0x188>)
 800cb9e:	2200      	movs	r2, #0
 800cba0:	2100      	movs	r1, #0
 800cba2:	2002      	movs	r0, #2
 800cba4:	f013 f856 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800cba8:	1d3b      	adds	r3, r7, #4
 800cbaa:	4619      	mov	r1, r3
 800cbac:	2001      	movs	r0, #1
 800cbae:	f003 fa23 	bl	800fff8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	0e1b      	lsrs	r3, r3, #24
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	461a      	mov	r2, r3
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	0c1b      	lsrs	r3, r3, #16
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	0a1b      	lsrs	r3, r3, #8
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	b2c0      	uxtb	r0, r0
 800cbcc:	9003      	str	r0, [sp, #12]
 800cbce:	9302      	str	r3, [sp, #8]
 800cbd0:	9101      	str	r1, [sp, #4]
 800cbd2:	9200      	str	r2, [sp, #0]
 800cbd4:	4b36      	ldr	r3, [pc, #216]	; (800ccb0 <LoRaWAN_Init+0x18c>)
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	2100      	movs	r1, #0
 800cbda:	2002      	movs	r0, #2
 800cbdc:	f013 f83a 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	9300      	str	r3, [sp, #0]
 800cbe4:	4b33      	ldr	r3, [pc, #204]	; (800ccb4 <LoRaWAN_Init+0x190>)
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800cbec:	4832      	ldr	r0, [pc, #200]	; (800ccb8 <LoRaWAN_Init+0x194>)
 800cbee:	f012 fd83 	bl	801f6f8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	4b31      	ldr	r3, [pc, #196]	; (800ccbc <LoRaWAN_Init+0x198>)
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800cbfe:	4830      	ldr	r0, [pc, #192]	; (800ccc0 <LoRaWAN_Init+0x19c>)
 800cc00:	f012 fd7a 	bl	801f6f8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800cc04:	2300      	movs	r3, #0
 800cc06:	9300      	str	r3, [sp, #0]
 800cc08:	4b2e      	ldr	r3, [pc, #184]	; (800ccc4 <LoRaWAN_Init+0x1a0>)
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800cc10:	482d      	ldr	r0, [pc, #180]	; (800ccc8 <LoRaWAN_Init+0x1a4>)
 800cc12:	f012 fd71 	bl	801f6f8 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800cc16:	2300      	movs	r3, #0
 800cc18:	9300      	str	r3, [sp, #0]
 800cc1a:	4b2c      	ldr	r3, [pc, #176]	; (800cccc <LoRaWAN_Init+0x1a8>)
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800cc22:	482b      	ldr	r0, [pc, #172]	; (800ccd0 <LoRaWAN_Init+0x1ac>)
 800cc24:	f012 fd68 	bl	801f6f8 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800cc28:	4a2a      	ldr	r2, [pc, #168]	; (800ccd4 <LoRaWAN_Init+0x1b0>)
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	2001      	movs	r0, #1
 800cc2e:	f012 fccb 	bl	801f5c8 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800cc32:	4a29      	ldr	r2, [pc, #164]	; (800ccd8 <LoRaWAN_Init+0x1b4>)
 800cc34:	2100      	movs	r1, #0
 800cc36:	2002      	movs	r0, #2
 800cc38:	f012 fcc6 	bl	801f5c8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800cc3c:	4a27      	ldr	r2, [pc, #156]	; (800ccdc <LoRaWAN_Init+0x1b8>)
 800cc3e:	2100      	movs	r1, #0
 800cc40:	2004      	movs	r0, #4
 800cc42:	f012 fcc1 	bl	801f5c8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800cc46:	4a26      	ldr	r2, [pc, #152]	; (800cce0 <LoRaWAN_Init+0x1bc>)
 800cc48:	2100      	movs	r1, #0
 800cc4a:	2008      	movs	r0, #8
 800cc4c:	f012 fcbc 	bl	801f5c8 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800cc50:	f000 fd26 	bl	800d6a0 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800cc54:	4923      	ldr	r1, [pc, #140]	; (800cce4 <LoRaWAN_Init+0x1c0>)
 800cc56:	4824      	ldr	r0, [pc, #144]	; (800cce8 <LoRaWAN_Init+0x1c4>)
 800cc58:	f002 fa3c 	bl	800f0d4 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800cc5c:	4823      	ldr	r0, [pc, #140]	; (800ccec <LoRaWAN_Init+0x1c8>)
 800cc5e:	f002 faa7 	bl	800f1b0 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800cc62:	4819      	ldr	r0, [pc, #100]	; (800ccc8 <LoRaWAN_Init+0x1a4>)
 800cc64:	f012 fd7e 	bl	801f764 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800cc68:	4b21      	ldr	r3, [pc, #132]	; (800ccf0 <LoRaWAN_Init+0x1cc>)
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	4a21      	ldr	r2, [pc, #132]	; (800ccf4 <LoRaWAN_Init+0x1d0>)
 800cc6e:	7812      	ldrb	r2, [r2, #0]
 800cc70:	4611      	mov	r1, r2
 800cc72:	4618      	mov	r0, r3
 800cc74:	f002 fbf4 	bl	800f460 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800cc78:	4b1f      	ldr	r3, [pc, #124]	; (800ccf8 <LoRaWAN_Init+0x1d4>)
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d10b      	bne.n	800cc98 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800cc80:	4b1e      	ldr	r3, [pc, #120]	; (800ccfc <LoRaWAN_Init+0x1d8>)
 800cc82:	6819      	ldr	r1, [r3, #0]
 800cc84:	2300      	movs	r3, #0
 800cc86:	9300      	str	r3, [sp, #0]
 800cc88:	4b1d      	ldr	r3, [pc, #116]	; (800cd00 <LoRaWAN_Init+0x1dc>)
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	481d      	ldr	r0, [pc, #116]	; (800cd04 <LoRaWAN_Init+0x1e0>)
 800cc8e:	f012 fd33 	bl	801f6f8 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800cc92:	481c      	ldr	r0, [pc, #112]	; (800cd04 <LoRaWAN_Init+0x1e0>)
 800cc94:	f012 fd66 	bl	801f764 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800cc98:	bf00      	nop
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	080211b8 	.word	0x080211b8
 800cca4:	080211dc 	.word	0x080211dc
 800cca8:	08021200 	.word	0x08021200
 800ccac:	08021224 	.word	0x08021224
 800ccb0:	08021248 	.word	0x08021248
 800ccb4:	0800d1bd 	.word	0x0800d1bd
 800ccb8:	20000508 	.word	0x20000508
 800ccbc:	0800d1cf 	.word	0x0800d1cf
 800ccc0:	20000520 	.word	0x20000520
 800ccc4:	0800d1e1 	.word	0x0800d1e1
 800ccc8:	20000538 	.word	0x20000538
 800cccc:	0800d5a1 	.word	0x0800d5a1
 800ccd0:	200003fc 	.word	0x200003fc
 800ccd4:	0800f3f5 	.word	0x0800f3f5
 800ccd8:	0800ce7d 	.word	0x0800ce7d
 800ccdc:	0800d5c5 	.word	0x0800d5c5
 800cce0:	0800d521 	.word	0x0800d521
 800cce4:	01030000 	.word	0x01030000
 800cce8:	20000024 	.word	0x20000024
 800ccec:	20000070 	.word	0x20000070
 800ccf0:	20000020 	.word	0x20000020
 800ccf4:	20000021 	.word	0x20000021
 800ccf8:	200003e0 	.word	0x200003e0
 800ccfc:	20000088 	.word	0x20000088
 800cd00:	0800d199 	.word	0x0800d199
 800cd04:	200003e4 	.word	0x200003e4

0800cd08 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	4603      	mov	r3, r0
 800cd10:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800cd12:	88fb      	ldrh	r3, [r7, #6]
 800cd14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd18:	d104      	bne.n	800cd24 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	2002      	movs	r0, #2
 800cd1e:	f012 fc75 	bl	801f60c <UTIL_SEQ_SetTask>
      }
      break;
 800cd22:	e000      	b.n	800cd26 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800cd24:	bf00      	nop
  }
}
 800cd26:	bf00      	nop
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
	...

0800cd30 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800cd30:	b5b0      	push	{r4, r5, r7, lr}
 800cd32:	b08a      	sub	sp, #40	; 0x28
 800cd34:	af06      	add	r7, sp, #24
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f000 8088 	beq.w	800ce56 <OnRxData+0x126>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800cd46:	4846      	ldr	r0, [pc, #280]	; (800ce60 <OnRxData+0x130>)
 800cd48:	f012 fd0c 	bl	801f764 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d057      	beq.n	800ce04 <OnRxData+0xd4>
    {
      if (appData != NULL)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d054      	beq.n	800ce04 <OnRxData+0xd4>
      {
        RxPort = appData->Port;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d04d      	beq.n	800ce04 <OnRxData+0xd4>
        {
          switch (appData->Port)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	2b02      	cmp	r3, #2
 800cd6e:	d021      	beq.n	800cdb4 <OnRxData+0x84>
 800cd70:	2b03      	cmp	r3, #3
 800cd72:	d149      	bne.n	800ce08 <OnRxData+0xd8>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	785b      	ldrb	r3, [r3, #1]
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d117      	bne.n	800cdac <OnRxData+0x7c>
              {
                switch (appData->Buffer[0])
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	2b02      	cmp	r3, #2
 800cd84:	d00e      	beq.n	800cda4 <OnRxData+0x74>
 800cd86:	2b02      	cmp	r3, #2
 800cd88:	dc12      	bgt.n	800cdb0 <OnRxData+0x80>
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d002      	beq.n	800cd94 <OnRxData+0x64>
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d004      	beq.n	800cd9c <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800cd92:	e00d      	b.n	800cdb0 <OnRxData+0x80>
                    LmHandlerRequestClass(CLASS_A);
 800cd94:	2000      	movs	r0, #0
 800cd96:	f002 fd17 	bl	800f7c8 <LmHandlerRequestClass>
                    break;
 800cd9a:	e00a      	b.n	800cdb2 <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_B);
 800cd9c:	2001      	movs	r0, #1
 800cd9e:	f002 fd13 	bl	800f7c8 <LmHandlerRequestClass>
                    break;
 800cda2:	e006      	b.n	800cdb2 <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_C);
 800cda4:	2002      	movs	r0, #2
 800cda6:	f002 fd0f 	bl	800f7c8 <LmHandlerRequestClass>
                    break;
 800cdaa:	e002      	b.n	800cdb2 <OnRxData+0x82>
                }
              }
 800cdac:	bf00      	nop
 800cdae:	e02e      	b.n	800ce0e <OnRxData+0xde>
                    break;
 800cdb0:	bf00      	nop
              break;
 800cdb2:	e02c      	b.n	800ce0e <OnRxData+0xde>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	785b      	ldrb	r3, [r3, #1]
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d127      	bne.n	800ce0c <OnRxData+0xdc>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	f003 0301 	and.w	r3, r3, #1
 800cdc6:	b2da      	uxtb	r2, r3
 800cdc8:	4b26      	ldr	r3, [pc, #152]	; (800ce64 <OnRxData+0x134>)
 800cdca:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800cdcc:	4b25      	ldr	r3, [pc, #148]	; (800ce64 <OnRxData+0x134>)
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d10b      	bne.n	800cdec <OnRxData+0xbc>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800cdd4:	4b24      	ldr	r3, [pc, #144]	; (800ce68 <OnRxData+0x138>)
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	2100      	movs	r1, #0
 800cdda:	2003      	movs	r0, #3
 800cddc:	f012 ff3a 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800cde0:	2201      	movs	r2, #1
 800cde2:	2120      	movs	r1, #32
 800cde4:	4821      	ldr	r0, [pc, #132]	; (800ce6c <OnRxData+0x13c>)
 800cde6:	f7fa faf3 	bl	80073d0 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800cdea:	e00f      	b.n	800ce0c <OnRxData+0xdc>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800cdec:	4b20      	ldr	r3, [pc, #128]	; (800ce70 <OnRxData+0x140>)
 800cdee:	2200      	movs	r2, #0
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	2003      	movs	r0, #3
 800cdf4:	f012 ff2e 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	2120      	movs	r1, #32
 800cdfc:	481b      	ldr	r0, [pc, #108]	; (800ce6c <OnRxData+0x13c>)
 800cdfe:	f7fa fae7 	bl	80073d0 <HAL_GPIO_WritePin>
              break;
 800ce02:	e003      	b.n	800ce0c <OnRxData+0xdc>

            default:

              break;
          }
        }
 800ce04:	bf00      	nop
 800ce06:	e002      	b.n	800ce0e <OnRxData+0xde>
              break;
 800ce08:	bf00      	nop
 800ce0a:	e000      	b.n	800ce0e <OnRxData+0xde>
              break;
 800ce0c:	bf00      	nop
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	7c1b      	ldrb	r3, [r3, #16]
 800ce12:	2b05      	cmp	r3, #5
 800ce14:	d81f      	bhi.n	800ce56 <OnRxData+0x126>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	7bfa      	ldrb	r2, [r7, #15]
 800ce1c:	6839      	ldr	r1, [r7, #0]
 800ce1e:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800ce22:	460c      	mov	r4, r1
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	7c09      	ldrb	r1, [r1, #16]
 800ce28:	4608      	mov	r0, r1
 800ce2a:	4912      	ldr	r1, [pc, #72]	; (800ce74 <OnRxData+0x144>)
 800ce2c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ce30:	6838      	ldr	r0, [r7, #0]
 800ce32:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800ce36:	4605      	mov	r5, r0
 800ce38:	6838      	ldr	r0, [r7, #0]
 800ce3a:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800ce3e:	9005      	str	r0, [sp, #20]
 800ce40:	9504      	str	r5, [sp, #16]
 800ce42:	9103      	str	r1, [sp, #12]
 800ce44:	9402      	str	r4, [sp, #8]
 800ce46:	9201      	str	r2, [sp, #4]
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	4b0b      	ldr	r3, [pc, #44]	; (800ce78 <OnRxData+0x148>)
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	2100      	movs	r1, #0
 800ce50:	2003      	movs	r0, #3
 800ce52:	f012 feff 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800ce56:	bf00      	nop
 800ce58:	3710      	adds	r7, #16
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bdb0      	pop	{r4, r5, r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	20000520 	.word	0x20000520
 800ce64:	20000506 	.word	0x20000506
 800ce68:	0802126c 	.word	0x0802126c
 800ce6c:	48000400 	.word	0x48000400
 800ce70:	08021278 	.word	0x08021278
 800ce74:	20000008 	.word	0x20000008
 800ce78:	08021284 	.word	0x08021284

0800ce7c <SendTxData>:

static void SendTxData(void)
{
 800ce7c:	b590      	push	{r4, r7, lr}
 800ce7e:	b091      	sub	sp, #68	; 0x44
 800ce80:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800ce82:	23ff      	movs	r3, #255	; 0xff
 800ce84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800ce88:	f7f5 fadc 	bl	8002444 <GetBatteryLevel>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800ce92:	2300      	movs	r3, #0
 800ce94:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800ce96:	2300      	movs	r3, #0
 800ce98:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800ceb2:	1d3b      	adds	r3, r7, #4
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7f5 fc89 	bl	80027cc <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800ceba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cebe:	9300      	str	r3, [sp, #0]
 800cec0:	4b8f      	ldr	r3, [pc, #572]	; (800d100 <SendTxData+0x284>)
 800cec2:	2201      	movs	r2, #1
 800cec4:	2100      	movs	r1, #0
 800cec6:	2002      	movs	r0, #2
 800cec8:	f012 fec4 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	4618      	mov	r0, r3
 800ced0:	f7f4 f912 	bl	80010f8 <__aeabi_f2iz>
 800ced4:	4603      	mov	r3, r0
 800ced6:	b21b      	sxth	r3, r3
 800ced8:	9300      	str	r3, [sp, #0]
 800ceda:	4b8a      	ldr	r3, [pc, #552]	; (800d104 <SendTxData+0x288>)
 800cedc:	2201      	movs	r2, #1
 800cede:	2100      	movs	r1, #0
 800cee0:	2002      	movs	r0, #2
 800cee2:	f012 feb7 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800cee6:	4b88      	ldr	r3, [pc, #544]	; (800d108 <SendTxData+0x28c>)
 800cee8:	2202      	movs	r2, #2
 800ceea:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	4987      	ldr	r1, [pc, #540]	; (800d10c <SendTxData+0x290>)
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7f3 ff3b 	bl	8000d6c <__aeabi_fmul>
 800cef6:	4603      	mov	r3, r0
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7f4 f923 	bl	8001144 <__aeabi_f2uiz>
 800cefe:	4603      	mov	r3, r0
 800cf00:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7f4 f8f7 	bl	80010f8 <__aeabi_f2iz>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	497f      	ldr	r1, [pc, #508]	; (800d110 <SendTxData+0x294>)
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7f3 ff2a 	bl	8000d6c <__aeabi_fmul>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	497c      	ldr	r1, [pc, #496]	; (800d10c <SendTxData+0x290>)
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7f3 ffd9 	bl	8000ed4 <__aeabi_fdiv>
 800cf22:	4603      	mov	r3, r0
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7f4 f90d 	bl	8001144 <__aeabi_f2uiz>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800cf2e:	4b76      	ldr	r3, [pc, #472]	; (800d108 <SendTxData+0x28c>)
 800cf30:	685a      	ldr	r2, [r3, #4]
 800cf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf34:	1c59      	adds	r1, r3, #1
 800cf36:	6339      	str	r1, [r7, #48]	; 0x30
 800cf38:	4413      	add	r3, r2
 800cf3a:	4a76      	ldr	r2, [pc, #472]	; (800d114 <SendTxData+0x298>)
 800cf3c:	7812      	ldrb	r2, [r2, #0]
 800cf3e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800cf40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cf42:	0a1b      	lsrs	r3, r3, #8
 800cf44:	b298      	uxth	r0, r3
 800cf46:	4b70      	ldr	r3, [pc, #448]	; (800d108 <SendTxData+0x28c>)
 800cf48:	685a      	ldr	r2, [r3, #4]
 800cf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4c:	1c59      	adds	r1, r3, #1
 800cf4e:	6339      	str	r1, [r7, #48]	; 0x30
 800cf50:	4413      	add	r3, r2
 800cf52:	b2c2      	uxtb	r2, r0
 800cf54:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800cf56:	4b6c      	ldr	r3, [pc, #432]	; (800d108 <SendTxData+0x28c>)
 800cf58:	685a      	ldr	r2, [r3, #4]
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5c:	1c59      	adds	r1, r3, #1
 800cf5e:	6339      	str	r1, [r7, #48]	; 0x30
 800cf60:	4413      	add	r3, r2
 800cf62:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cf64:	b2d2      	uxtb	r2, r2
 800cf66:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800cf68:	4b67      	ldr	r3, [pc, #412]	; (800d108 <SendTxData+0x28c>)
 800cf6a:	685a      	ldr	r2, [r3, #4]
 800cf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6e:	1c59      	adds	r1, r3, #1
 800cf70:	6339      	str	r1, [r7, #48]	; 0x30
 800cf72:	4413      	add	r3, r2
 800cf74:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800cf76:	b2d2      	uxtb	r2, r2
 800cf78:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800cf7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cf7c:	0a1b      	lsrs	r3, r3, #8
 800cf7e:	b298      	uxth	r0, r3
 800cf80:	4b61      	ldr	r3, [pc, #388]	; (800d108 <SendTxData+0x28c>)
 800cf82:	685a      	ldr	r2, [r3, #4]
 800cf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf86:	1c59      	adds	r1, r3, #1
 800cf88:	6339      	str	r1, [r7, #48]	; 0x30
 800cf8a:	4413      	add	r3, r2
 800cf8c:	b2c2      	uxtb	r2, r0
 800cf8e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800cf90:	4b5d      	ldr	r3, [pc, #372]	; (800d108 <SendTxData+0x28c>)
 800cf92:	685a      	ldr	r2, [r3, #4]
 800cf94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf96:	1c59      	adds	r1, r3, #1
 800cf98:	6339      	str	r1, [r7, #48]	; 0x30
 800cf9a:	4413      	add	r3, r2
 800cf9c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cf9e:	b2d2      	uxtb	r2, r2
 800cfa0:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800cfa2:	4b5d      	ldr	r3, [pc, #372]	; (800d118 <SendTxData+0x29c>)
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	2b08      	cmp	r3, #8
 800cfa8:	d007      	beq.n	800cfba <SendTxData+0x13e>
 800cfaa:	4b5b      	ldr	r3, [pc, #364]	; (800d118 <SendTxData+0x29c>)
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d003      	beq.n	800cfba <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800cfb2:	4b59      	ldr	r3, [pc, #356]	; (800d118 <SendTxData+0x29c>)
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d120      	bne.n	800cffc <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 800cfba:	4b53      	ldr	r3, [pc, #332]	; (800d108 <SendTxData+0x28c>)
 800cfbc:	685a      	ldr	r2, [r3, #4]
 800cfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc0:	1c59      	adds	r1, r3, #1
 800cfc2:	6339      	str	r1, [r7, #48]	; 0x30
 800cfc4:	4413      	add	r3, r2
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800cfca:	4b4f      	ldr	r3, [pc, #316]	; (800d108 <SendTxData+0x28c>)
 800cfcc:	685a      	ldr	r2, [r3, #4]
 800cfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd0:	1c59      	adds	r1, r3, #1
 800cfd2:	6339      	str	r1, [r7, #48]	; 0x30
 800cfd4:	4413      	add	r3, r2
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800cfda:	4b4b      	ldr	r3, [pc, #300]	; (800d108 <SendTxData+0x28c>)
 800cfdc:	685a      	ldr	r2, [r3, #4]
 800cfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe0:	1c59      	adds	r1, r3, #1
 800cfe2:	6339      	str	r1, [r7, #48]	; 0x30
 800cfe4:	4413      	add	r3, r2
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800cfea:	4b47      	ldr	r3, [pc, #284]	; (800d108 <SendTxData+0x28c>)
 800cfec:	685a      	ldr	r2, [r3, #4]
 800cfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff0:	1c59      	adds	r1, r3, #1
 800cff2:	6339      	str	r1, [r7, #48]	; 0x30
 800cff4:	4413      	add	r3, r2
 800cff6:	2200      	movs	r2, #0
 800cff8:	701a      	strb	r2, [r3, #0]
 800cffa:	e05b      	b.n	800d0b4 <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800d004:	4b40      	ldr	r3, [pc, #256]	; (800d108 <SendTxData+0x28c>)
 800d006:	685a      	ldr	r2, [r3, #4]
 800d008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00a:	1c59      	adds	r1, r3, #1
 800d00c:	6339      	str	r1, [r7, #48]	; 0x30
 800d00e:	18d4      	adds	r4, r2, r3
 800d010:	f7f5 fa18 	bl	8002444 <GetBatteryLevel>
 800d014:	4603      	mov	r3, r0
 800d016:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800d018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01a:	1418      	asrs	r0, r3, #16
 800d01c:	4b3a      	ldr	r3, [pc, #232]	; (800d108 <SendTxData+0x28c>)
 800d01e:	685a      	ldr	r2, [r3, #4]
 800d020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d022:	1c59      	adds	r1, r3, #1
 800d024:	6339      	str	r1, [r7, #48]	; 0x30
 800d026:	4413      	add	r3, r2
 800d028:	b2c2      	uxtb	r2, r0
 800d02a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800d02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02e:	1218      	asrs	r0, r3, #8
 800d030:	4b35      	ldr	r3, [pc, #212]	; (800d108 <SendTxData+0x28c>)
 800d032:	685a      	ldr	r2, [r3, #4]
 800d034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d036:	1c59      	adds	r1, r3, #1
 800d038:	6339      	str	r1, [r7, #48]	; 0x30
 800d03a:	4413      	add	r3, r2
 800d03c:	b2c2      	uxtb	r2, r0
 800d03e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800d040:	4b31      	ldr	r3, [pc, #196]	; (800d108 <SendTxData+0x28c>)
 800d042:	685a      	ldr	r2, [r3, #4]
 800d044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d046:	1c59      	adds	r1, r3, #1
 800d048:	6339      	str	r1, [r7, #48]	; 0x30
 800d04a:	4413      	add	r3, r2
 800d04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d04e:	b2d2      	uxtb	r2, r2
 800d050:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800d052:	6a3b      	ldr	r3, [r7, #32]
 800d054:	1418      	asrs	r0, r3, #16
 800d056:	4b2c      	ldr	r3, [pc, #176]	; (800d108 <SendTxData+0x28c>)
 800d058:	685a      	ldr	r2, [r3, #4]
 800d05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05c:	1c59      	adds	r1, r3, #1
 800d05e:	6339      	str	r1, [r7, #48]	; 0x30
 800d060:	4413      	add	r3, r2
 800d062:	b2c2      	uxtb	r2, r0
 800d064:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800d066:	6a3b      	ldr	r3, [r7, #32]
 800d068:	1218      	asrs	r0, r3, #8
 800d06a:	4b27      	ldr	r3, [pc, #156]	; (800d108 <SendTxData+0x28c>)
 800d06c:	685a      	ldr	r2, [r3, #4]
 800d06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d070:	1c59      	adds	r1, r3, #1
 800d072:	6339      	str	r1, [r7, #48]	; 0x30
 800d074:	4413      	add	r3, r2
 800d076:	b2c2      	uxtb	r2, r0
 800d078:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800d07a:	4b23      	ldr	r3, [pc, #140]	; (800d108 <SendTxData+0x28c>)
 800d07c:	685a      	ldr	r2, [r3, #4]
 800d07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d080:	1c59      	adds	r1, r3, #1
 800d082:	6339      	str	r1, [r7, #48]	; 0x30
 800d084:	4413      	add	r3, r2
 800d086:	6a3a      	ldr	r2, [r7, #32]
 800d088:	b2d2      	uxtb	r2, r2
 800d08a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800d08c:	8bfb      	ldrh	r3, [r7, #30]
 800d08e:	0a1b      	lsrs	r3, r3, #8
 800d090:	b298      	uxth	r0, r3
 800d092:	4b1d      	ldr	r3, [pc, #116]	; (800d108 <SendTxData+0x28c>)
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d098:	1c59      	adds	r1, r3, #1
 800d09a:	6339      	str	r1, [r7, #48]	; 0x30
 800d09c:	4413      	add	r3, r2
 800d09e:	b2c2      	uxtb	r2, r0
 800d0a0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800d0a2:	4b19      	ldr	r3, [pc, #100]	; (800d108 <SendTxData+0x28c>)
 800d0a4:	685a      	ldr	r2, [r3, #4]
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a8:	1c59      	adds	r1, r3, #1
 800d0aa:	6339      	str	r1, [r7, #48]	; 0x30
 800d0ac:	4413      	add	r3, r2
 800d0ae:	8bfa      	ldrh	r2, [r7, #30]
 800d0b0:	b2d2      	uxtb	r2, r2
 800d0b2:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800d0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b6:	b2da      	uxtb	r2, r3
 800d0b8:	4b13      	ldr	r3, [pc, #76]	; (800d108 <SendTxData+0x28c>)
 800d0ba:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d0bc:	4b17      	ldr	r3, [pc, #92]	; (800d11c <SendTxData+0x2a0>)
 800d0be:	7a5b      	ldrb	r3, [r3, #9]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d007      	beq.n	800d0d4 <SendTxData+0x258>
 800d0c4:	f002 fa6e 	bl	800f5a4 <LmHandlerJoinStatus>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d102      	bne.n	800d0d4 <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800d0ce:	4813      	ldr	r0, [pc, #76]	; (800d11c <SendTxData+0x2a0>)
 800d0d0:	f012 fbb6 	bl	801f840 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800d0d4:	4b10      	ldr	r3, [pc, #64]	; (800d118 <SendTxData+0x29c>)
 800d0d6:	78db      	ldrb	r3, [r3, #3]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	4619      	mov	r1, r3
 800d0dc:	480a      	ldr	r0, [pc, #40]	; (800d108 <SendTxData+0x28c>)
 800d0de:	f002 fa7d 	bl	800f5dc <LmHandlerSend>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800d0e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d119      	bne.n	800d124 <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800d0f0:	4b0b      	ldr	r3, [pc, #44]	; (800d120 <SendTxData+0x2a4>)
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	2001      	movs	r0, #1
 800d0f8:	f012 fdac 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
 800d0fc:	e029      	b.n	800d152 <SendTxData+0x2d6>
 800d0fe:	bf00      	nop
 800d100:	080212cc 	.word	0x080212cc
 800d104:	080212d8 	.word	0x080212d8
 800d108:	2000008c 	.word	0x2000008c
 800d10c:	41200000 	.word	0x41200000
 800d110:	42c80000 	.word	0x42c80000
 800d114:	20000506 	.word	0x20000506
 800d118:	20000070 	.word	0x20000070
 800d11c:	20000538 	.word	0x20000538
 800d120:	080212e4 	.word	0x080212e4
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800d124:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d128:	f113 0f06 	cmn.w	r3, #6
 800d12c:	d111      	bne.n	800d152 <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800d12e:	f002 f98d 	bl	800f44c <LmHandlerGetDutyCycleWaitTime>
 800d132:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 800d134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00b      	beq.n	800d152 <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800d13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d13c:	4a11      	ldr	r2, [pc, #68]	; (800d184 <SendTxData+0x308>)
 800d13e:	fba2 2303 	umull	r2, r3, r2, r3
 800d142:	099b      	lsrs	r3, r3, #6
 800d144:	9300      	str	r3, [sp, #0]
 800d146:	4b10      	ldr	r3, [pc, #64]	; (800d188 <SendTxData+0x30c>)
 800d148:	2201      	movs	r2, #1
 800d14a:	2100      	movs	r1, #0
 800d14c:	2001      	movs	r0, #1
 800d14e:	f012 fd81 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800d152:	4b0e      	ldr	r3, [pc, #56]	; (800d18c <SendTxData+0x310>)
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d10f      	bne.n	800d17a <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800d15a:	480d      	ldr	r0, [pc, #52]	; (800d190 <SendTxData+0x314>)
 800d15c:	f012 fb70 	bl	801f840 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800d160:	4b0c      	ldr	r3, [pc, #48]	; (800d194 <SendTxData+0x318>)
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d166:	4293      	cmp	r3, r2
 800d168:	bf38      	it	cc
 800d16a:	4613      	movcc	r3, r2
 800d16c:	4619      	mov	r1, r3
 800d16e:	4808      	ldr	r0, [pc, #32]	; (800d190 <SendTxData+0x314>)
 800d170:	f012 fbd6 	bl	801f920 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800d174:	4806      	ldr	r0, [pc, #24]	; (800d190 <SendTxData+0x314>)
 800d176:	f012 faf5 	bl	801f764 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800d17a:	bf00      	nop
 800d17c:	373c      	adds	r7, #60	; 0x3c
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd90      	pop	{r4, r7, pc}
 800d182:	bf00      	nop
 800d184:	10624dd3 	.word	0x10624dd3
 800d188:	080212f4 	.word	0x080212f4
 800d18c:	200003e0 	.word	0x200003e0
 800d190:	200003e4 	.word	0x200003e4
 800d194:	20000088 	.word	0x20000088

0800d198 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800d1a0:	2100      	movs	r1, #0
 800d1a2:	2002      	movs	r0, #2
 800d1a4:	f012 fa32 	bl	801f60c <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800d1a8:	4803      	ldr	r0, [pc, #12]	; (800d1b8 <OnTxTimerEvent+0x20>)
 800d1aa:	f012 fadb 	bl	801f764 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800d1ae:	bf00      	nop
 800d1b0:	3708      	adds	r7, #8
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	200003e4 	.word	0x200003e4

0800d1bc <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bc80      	pop	{r7}
 800d1cc:	4770      	bx	lr

0800d1ce <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800d1ce:	b480      	push	{r7}
 800d1d0:	b083      	sub	sp, #12
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800d1d6:	bf00      	nop
 800d1d8:	370c      	adds	r7, #12
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bc80      	pop	{r7}
 800d1de:	4770      	bx	lr

0800d1e0 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b083      	sub	sp, #12
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800d1e8:	bf00      	nop
 800d1ea:	370c      	adds	r7, #12
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bc80      	pop	{r7}
 800d1f0:	4770      	bx	lr
	...

0800d1f4 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b086      	sub	sp, #24
 800d1f8:	af04      	add	r7, sp, #16
 800d1fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d041      	beq.n	800d286 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d03d      	beq.n	800d286 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800d20a:	4821      	ldr	r0, [pc, #132]	; (800d290 <OnTxData+0x9c>)
 800d20c:	f012 faaa 	bl	801f764 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800d210:	4b20      	ldr	r3, [pc, #128]	; (800d294 <OnTxData+0xa0>)
 800d212:	2200      	movs	r2, #0
 800d214:	2100      	movs	r1, #0
 800d216:	2002      	movs	r0, #2
 800d218:	f012 fd1c 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	68db      	ldr	r3, [r3, #12]
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	7c12      	ldrb	r2, [r2, #16]
 800d224:	4611      	mov	r1, r2
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800d22c:	4610      	mov	r0, r2
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800d234:	9203      	str	r2, [sp, #12]
 800d236:	9002      	str	r0, [sp, #8]
 800d238:	9101      	str	r1, [sp, #4]
 800d23a:	9300      	str	r3, [sp, #0]
 800d23c:	4b16      	ldr	r3, [pc, #88]	; (800d298 <OnTxData+0xa4>)
 800d23e:	2200      	movs	r2, #0
 800d240:	2100      	movs	r1, #0
 800d242:	2003      	movs	r0, #3
 800d244:	f012 fd06 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800d248:	4b14      	ldr	r3, [pc, #80]	; (800d29c <OnTxData+0xa8>)
 800d24a:	2200      	movs	r2, #0
 800d24c:	2100      	movs	r1, #0
 800d24e:	2003      	movs	r0, #3
 800d250:	f012 fd00 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	7a1b      	ldrb	r3, [r3, #8]
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d10e      	bne.n	800d27a <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	7a5b      	ldrb	r3, [r3, #9]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d001      	beq.n	800d268 <OnTxData+0x74>
 800d264:	4b0e      	ldr	r3, [pc, #56]	; (800d2a0 <OnTxData+0xac>)
 800d266:	e000      	b.n	800d26a <OnTxData+0x76>
 800d268:	4b0e      	ldr	r3, [pc, #56]	; (800d2a4 <OnTxData+0xb0>)
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	4b0e      	ldr	r3, [pc, #56]	; (800d2a8 <OnTxData+0xb4>)
 800d26e:	2200      	movs	r2, #0
 800d270:	2100      	movs	r1, #0
 800d272:	2003      	movs	r0, #3
 800d274:	f012 fcee 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800d278:	e005      	b.n	800d286 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800d27a:	4b0c      	ldr	r3, [pc, #48]	; (800d2ac <OnTxData+0xb8>)
 800d27c:	2200      	movs	r2, #0
 800d27e:	2100      	movs	r1, #0
 800d280:	2003      	movs	r0, #3
 800d282:	f012 fce7 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
}
 800d286:	bf00      	nop
 800d288:	3708      	adds	r7, #8
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	20000508 	.word	0x20000508
 800d294:	08021314 	.word	0x08021314
 800d298:	08021348 	.word	0x08021348
 800d29c:	0802137c 	.word	0x0802137c
 800d2a0:	0802138c 	.word	0x0802138c
 800d2a4:	08021390 	.word	0x08021390
 800d2a8:	08021398 	.word	0x08021398
 800d2ac:	080213ac 	.word	0x080213ac

0800d2b0 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d039      	beq.n	800d332 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d11e      	bne.n	800d306 <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	2004      	movs	r0, #4
 800d2cc:	f012 f99e 	bl	801f60c <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800d2d0:	481a      	ldr	r0, [pc, #104]	; (800d33c <OnJoinRequest+0x8c>)
 800d2d2:	f012 fab5 	bl	801f840 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800d2d6:	4b1a      	ldr	r3, [pc, #104]	; (800d340 <OnJoinRequest+0x90>)
 800d2d8:	2200      	movs	r2, #0
 800d2da:	2100      	movs	r1, #0
 800d2dc:	2002      	movs	r0, #2
 800d2de:	f012 fcb9 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	79db      	ldrb	r3, [r3, #7]
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d106      	bne.n	800d2f8 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800d2ea:	4b16      	ldr	r3, [pc, #88]	; (800d344 <OnJoinRequest+0x94>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	2002      	movs	r0, #2
 800d2f2:	f012 fcaf 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800d2f6:	e01c      	b.n	800d332 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800d2f8:	4b13      	ldr	r3, [pc, #76]	; (800d348 <OnJoinRequest+0x98>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	2002      	movs	r0, #2
 800d300:	f012 fca8 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
}
 800d304:	e015      	b.n	800d332 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800d306:	4b11      	ldr	r3, [pc, #68]	; (800d34c <OnJoinRequest+0x9c>)
 800d308:	2200      	movs	r2, #0
 800d30a:	2100      	movs	r1, #0
 800d30c:	2002      	movs	r0, #2
 800d30e:	f012 fca1 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	79db      	ldrb	r3, [r3, #7]
 800d316:	2b02      	cmp	r3, #2
 800d318:	d10b      	bne.n	800d332 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800d31a:	4b0d      	ldr	r3, [pc, #52]	; (800d350 <OnJoinRequest+0xa0>)
 800d31c:	2200      	movs	r2, #0
 800d31e:	2100      	movs	r1, #0
 800d320:	2002      	movs	r0, #2
 800d322:	f012 fc97 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800d326:	4b0b      	ldr	r3, [pc, #44]	; (800d354 <OnJoinRequest+0xa4>)
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	2101      	movs	r1, #1
 800d32c:	4618      	mov	r0, r3
 800d32e:	f002 f897 	bl	800f460 <LmHandlerJoin>
}
 800d332:	bf00      	nop
 800d334:	3708      	adds	r7, #8
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	20000538 	.word	0x20000538
 800d340:	080213bc 	.word	0x080213bc
 800d344:	080213d4 	.word	0x080213d4
 800d348:	080213f4 	.word	0x080213f4
 800d34c:	08021414 	.word	0x08021414
 800d350:	08021430 	.word	0x08021430
 800d354:	20000020 	.word	0x20000020

0800d358 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800d358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d35a:	b093      	sub	sp, #76	; 0x4c
 800d35c:	af0c      	add	r7, sp, #48	; 0x30
 800d35e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d056      	beq.n	800d414 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	785b      	ldrb	r3, [r3, #1]
 800d36a:	2b02      	cmp	r3, #2
 800d36c:	d008      	beq.n	800d380 <OnBeaconStatusChange+0x28>
 800d36e:	2b03      	cmp	r3, #3
 800d370:	d049      	beq.n	800d406 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800d372:	4b2b      	ldr	r3, [pc, #172]	; (800d420 <OnBeaconStatusChange+0xc8>)
 800d374:	2200      	movs	r2, #0
 800d376:	2100      	movs	r1, #0
 800d378:	2002      	movs	r0, #2
 800d37a:	f012 fc6b 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d37e:	e04a      	b.n	800d416 <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	7c1b      	ldrb	r3, [r3, #16]
 800d384:	4618      	mov	r0, r3
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d38c:	461c      	mov	r4, r3
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d394:	461d      	mov	r5, r3
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	697a      	ldr	r2, [r7, #20]
 800d39c:	6852      	ldr	r2, [r2, #4]
 800d39e:	6979      	ldr	r1, [r7, #20]
 800d3a0:	7d89      	ldrb	r1, [r1, #22]
 800d3a2:	460e      	mov	r6, r1
 800d3a4:	6979      	ldr	r1, [r7, #20]
 800d3a6:	7dc9      	ldrb	r1, [r1, #23]
 800d3a8:	6139      	str	r1, [r7, #16]
 800d3aa:	6979      	ldr	r1, [r7, #20]
 800d3ac:	7e09      	ldrb	r1, [r1, #24]
 800d3ae:	60f9      	str	r1, [r7, #12]
 800d3b0:	6979      	ldr	r1, [r7, #20]
 800d3b2:	7e49      	ldrb	r1, [r1, #25]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	6979      	ldr	r1, [r7, #20]
 800d3b8:	7e89      	ldrb	r1, [r1, #26]
 800d3ba:	6079      	str	r1, [r7, #4]
 800d3bc:	6979      	ldr	r1, [r7, #20]
 800d3be:	7ec9      	ldrb	r1, [r1, #27]
 800d3c0:	6039      	str	r1, [r7, #0]
 800d3c2:	6979      	ldr	r1, [r7, #20]
 800d3c4:	7f09      	ldrb	r1, [r1, #28]
 800d3c6:	910b      	str	r1, [sp, #44]	; 0x2c
 800d3c8:	f8d7 c000 	ldr.w	ip, [r7]
 800d3cc:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800d3d0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800d3d4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d3d8:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800d3dc:	f8cd c020 	str.w	ip, [sp, #32]
 800d3e0:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800d3e4:	f8cd c01c 	str.w	ip, [sp, #28]
 800d3e8:	6939      	ldr	r1, [r7, #16]
 800d3ea:	9106      	str	r1, [sp, #24]
 800d3ec:	9605      	str	r6, [sp, #20]
 800d3ee:	9204      	str	r2, [sp, #16]
 800d3f0:	9303      	str	r3, [sp, #12]
 800d3f2:	9502      	str	r5, [sp, #8]
 800d3f4:	9401      	str	r4, [sp, #4]
 800d3f6:	9000      	str	r0, [sp, #0]
 800d3f8:	4b0a      	ldr	r3, [pc, #40]	; (800d424 <OnBeaconStatusChange+0xcc>)
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	2002      	movs	r0, #2
 800d400:	f012 fc28 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800d404:	e007      	b.n	800d416 <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800d406:	4b08      	ldr	r3, [pc, #32]	; (800d428 <OnBeaconStatusChange+0xd0>)
 800d408:	2200      	movs	r2, #0
 800d40a:	2100      	movs	r1, #0
 800d40c:	2002      	movs	r0, #2
 800d40e:	f012 fc21 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d412:	e000      	b.n	800d416 <OnBeaconStatusChange+0xbe>
      }
    }
  }
 800d414:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800d416:	bf00      	nop
 800d418:	371c      	adds	r7, #28
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d41e:	bf00      	nop
 800d420:	08021454 	.word	0x08021454
 800d424:	0802146c 	.word	0x0802146c
 800d428:	080214e0 	.word	0x080214e0

0800d42c <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800d42c:	b480      	push	{r7}
 800d42e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800d430:	bf00      	nop
 800d432:	46bd      	mov	sp, r7
 800d434:	bc80      	pop	{r7}
 800d436:	4770      	bx	lr

0800d438 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af02      	add	r7, sp, #8
 800d43e:	4603      	mov	r3, r0
 800d440:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800d442:	79fb      	ldrb	r3, [r7, #7]
 800d444:	4a06      	ldr	r2, [pc, #24]	; (800d460 <OnClassChange+0x28>)
 800d446:	5cd3      	ldrb	r3, [r2, r3]
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	4b06      	ldr	r3, [pc, #24]	; (800d464 <OnClassChange+0x2c>)
 800d44c:	2200      	movs	r2, #0
 800d44e:	2100      	movs	r1, #0
 800d450:	2002      	movs	r0, #2
 800d452:	f012 fbff 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800d456:	bf00      	nop
 800d458:	3708      	adds	r7, #8
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	0802151c 	.word	0x0802151c
 800d464:	08021500 	.word	0x08021500

0800d468 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800d46c:	2100      	movs	r1, #0
 800d46e:	2001      	movs	r0, #1
 800d470:	f012 f8cc 	bl	801f60c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800d474:	bf00      	nop
 800d476:	bd80      	pop	{r7, pc}

0800d478 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800d480:	4a0d      	ldr	r2, [pc, #52]	; (800d4b8 <OnTxPeriodicityChanged+0x40>)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800d486:	4b0c      	ldr	r3, [pc, #48]	; (800d4b8 <OnTxPeriodicityChanged+0x40>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d103      	bne.n	800d496 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800d48e:	4b0a      	ldr	r3, [pc, #40]	; (800d4b8 <OnTxPeriodicityChanged+0x40>)
 800d490:	f242 7210 	movw	r2, #10000	; 0x2710
 800d494:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800d496:	4809      	ldr	r0, [pc, #36]	; (800d4bc <OnTxPeriodicityChanged+0x44>)
 800d498:	f012 f9d2 	bl	801f840 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800d49c:	4b06      	ldr	r3, [pc, #24]	; (800d4b8 <OnTxPeriodicityChanged+0x40>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	4806      	ldr	r0, [pc, #24]	; (800d4bc <OnTxPeriodicityChanged+0x44>)
 800d4a4:	f012 fa3c 	bl	801f920 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800d4a8:	4804      	ldr	r0, [pc, #16]	; (800d4bc <OnTxPeriodicityChanged+0x44>)
 800d4aa:	f012 f95b 	bl	801f764 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800d4ae:	bf00      	nop
 800d4b0:	3708      	adds	r7, #8
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	20000088 	.word	0x20000088
 800d4bc:	200003e4 	.word	0x200003e4

0800d4c0 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800d4ca:	4a04      	ldr	r2, [pc, #16]	; (800d4dc <OnTxFrameCtrlChanged+0x1c>)
 800d4cc:	79fb      	ldrb	r3, [r7, #7]
 800d4ce:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bc80      	pop	{r7}
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	20000070 	.word	0x20000070

0800d4e0 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800d4ea:	4a04      	ldr	r2, [pc, #16]	; (800d4fc <OnPingSlotPeriodicityChanged+0x1c>)
 800d4ec:	79fb      	ldrb	r3, [r7, #7]
 800d4ee:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800d4f0:	bf00      	nop
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bc80      	pop	{r7}
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	20000070 	.word	0x20000070

0800d500 <OnSystemReset>:

static void OnSystemReset(void)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d504:	f002 fda9 	bl	801005a <LmHandlerHalt>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d106      	bne.n	800d51c <OnSystemReset+0x1c>
 800d50e:	f002 f849 	bl	800f5a4 <LmHandlerJoinStatus>
 800d512:	4603      	mov	r3, r0
 800d514:	2b01      	cmp	r3, #1
 800d516:	d101      	bne.n	800d51c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800d518:	f7ff faee 	bl	800caf8 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800d51c:	bf00      	nop
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <StopJoin>:

static void StopJoin(void)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800d524:	4817      	ldr	r0, [pc, #92]	; (800d584 <StopJoin+0x64>)
 800d526:	f012 f98b 	bl	801f840 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800d52a:	f002 fd89 	bl	8010040 <LmHandlerStop>
 800d52e:	4603      	mov	r3, r0
 800d530:	2b00      	cmp	r3, #0
 800d532:	d006      	beq.n	800d542 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800d534:	4b14      	ldr	r3, [pc, #80]	; (800d588 <StopJoin+0x68>)
 800d536:	2200      	movs	r2, #0
 800d538:	2100      	movs	r1, #0
 800d53a:	2002      	movs	r0, #2
 800d53c:	f012 fb8a 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
 800d540:	e01a      	b.n	800d578 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800d542:	4b12      	ldr	r3, [pc, #72]	; (800d58c <StopJoin+0x6c>)
 800d544:	2200      	movs	r2, #0
 800d546:	2100      	movs	r1, #0
 800d548:	2002      	movs	r0, #2
 800d54a:	f012 fb83 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800d54e:	4b10      	ldr	r3, [pc, #64]	; (800d590 <StopJoin+0x70>)
 800d550:	2201      	movs	r2, #1
 800d552:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800d554:	4b0f      	ldr	r3, [pc, #60]	; (800d594 <StopJoin+0x74>)
 800d556:	2200      	movs	r2, #0
 800d558:	2100      	movs	r1, #0
 800d55a:	2002      	movs	r0, #2
 800d55c:	f012 fb7a 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800d560:	480d      	ldr	r0, [pc, #52]	; (800d598 <StopJoin+0x78>)
 800d562:	f001 fe25 	bl	800f1b0 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800d566:	4b0a      	ldr	r3, [pc, #40]	; (800d590 <StopJoin+0x70>)
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	2101      	movs	r1, #1
 800d56c:	4618      	mov	r0, r3
 800d56e:	f001 ff77 	bl	800f460 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800d572:	4804      	ldr	r0, [pc, #16]	; (800d584 <StopJoin+0x64>)
 800d574:	f012 f8f6 	bl	801f764 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800d578:	4808      	ldr	r0, [pc, #32]	; (800d59c <StopJoin+0x7c>)
 800d57a:	f012 f8f3 	bl	801f764 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800d57e:	bf00      	nop
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	200003e4 	.word	0x200003e4
 800d588:	08021520 	.word	0x08021520
 800d58c:	08021540 	.word	0x08021540
 800d590:	20000020 	.word	0x20000020
 800d594:	08021554 	.word	0x08021554
 800d598:	20000070 	.word	0x20000070
 800d59c:	200003fc 	.word	0x200003fc

0800d5a0 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800d5a8:	4b05      	ldr	r3, [pc, #20]	; (800d5c0 <OnStopJoinTimerEvent+0x20>)
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	2b02      	cmp	r3, #2
 800d5ae:	d103      	bne.n	800d5b8 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800d5b0:	2100      	movs	r1, #0
 800d5b2:	2008      	movs	r0, #8
 800d5b4:	f012 f82a 	bl	801f60c <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800d5b8:	bf00      	nop
 800d5ba:	3708      	adds	r7, #8
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	20000020 	.word	0x20000020

0800d5c4 <StoreContext>:

static void StoreContext(void)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d5ca:	23ff      	movs	r3, #255	; 0xff
 800d5cc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800d5ce:	f002 fd79 	bl	80100c4 <LmHandlerNvmDataStore>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800d5d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5da:	f113 0f08 	cmn.w	r3, #8
 800d5de:	d106      	bne.n	800d5ee <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800d5e0:	4b0a      	ldr	r3, [pc, #40]	; (800d60c <StoreContext+0x48>)
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	2002      	movs	r0, #2
 800d5e8:	f012 fb34 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800d5ec:	e00a      	b.n	800d604 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800d5ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f6:	d105      	bne.n	800d604 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800d5f8:	4b05      	ldr	r3, [pc, #20]	; (800d610 <StoreContext+0x4c>)
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	2002      	movs	r0, #2
 800d600:	f012 fb28 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
}
 800d604:	bf00      	nop
 800d606:	3708      	adds	r7, #8
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	08021574 	.word	0x08021574
 800d610:	0802158c 	.word	0x0802158c

0800d614 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	4603      	mov	r3, r0
 800d61c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800d61e:	79fb      	ldrb	r3, [r7, #7]
 800d620:	2b01      	cmp	r3, #1
 800d622:	d106      	bne.n	800d632 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800d624:	4b08      	ldr	r3, [pc, #32]	; (800d648 <OnNvmDataChange+0x34>)
 800d626:	2200      	movs	r2, #0
 800d628:	2100      	movs	r1, #0
 800d62a:	2002      	movs	r0, #2
 800d62c:	f012 fb12 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800d630:	e005      	b.n	800d63e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800d632:	4b06      	ldr	r3, [pc, #24]	; (800d64c <OnNvmDataChange+0x38>)
 800d634:	2200      	movs	r2, #0
 800d636:	2100      	movs	r1, #0
 800d638:	2002      	movs	r0, #2
 800d63a:	f012 fb0b 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
}
 800d63e:	bf00      	nop
 800d640:	3708      	adds	r7, #8
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	080215a4 	.word	0x080215a4
 800d64c:	080215b8 	.word	0x080215b8

0800d650 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800d65a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d65e:	4807      	ldr	r0, [pc, #28]	; (800d67c <OnStoreContextRequest+0x2c>)
 800d660:	f7f4 f8b4 	bl	80017cc <FLASH_IF_Erase>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d104      	bne.n	800d674 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800d66a:	683a      	ldr	r2, [r7, #0]
 800d66c:	6879      	ldr	r1, [r7, #4]
 800d66e:	4803      	ldr	r0, [pc, #12]	; (800d67c <OnStoreContextRequest+0x2c>)
 800d670:	f7f4 f85c 	bl	800172c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800d674:	bf00      	nop
 800d676:	3708      	adds	r7, #8
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	0803f000 	.word	0x0803f000

0800d680 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800d68a:	683a      	ldr	r2, [r7, #0]
 800d68c:	4903      	ldr	r1, [pc, #12]	; (800d69c <OnRestoreContextRequest+0x1c>)
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f7f4 f874 	bl	800177c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	0803f000 	.word	0x0803f000

0800d6a0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800d6a4:	4b18      	ldr	r3, [pc, #96]	; (800d708 <LoraInfo_Init+0x68>)
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800d6aa:	4b17      	ldr	r3, [pc, #92]	; (800d708 <LoraInfo_Init+0x68>)
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800d6b0:	4b15      	ldr	r3, [pc, #84]	; (800d708 <LoraInfo_Init+0x68>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800d6b6:	4b14      	ldr	r3, [pc, #80]	; (800d708 <LoraInfo_Init+0x68>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800d6bc:	4b12      	ldr	r3, [pc, #72]	; (800d708 <LoraInfo_Init+0x68>)
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	f043 0320 	orr.w	r3, r3, #32
 800d6c4:	4a10      	ldr	r2, [pc, #64]	; (800d708 <LoraInfo_Init+0x68>)
 800d6c6:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800d6c8:	4b0f      	ldr	r3, [pc, #60]	; (800d708 <LoraInfo_Init+0x68>)
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6d0:	4a0d      	ldr	r2, [pc, #52]	; (800d708 <LoraInfo_Init+0x68>)
 800d6d2:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800d6d4:	4b0c      	ldr	r3, [pc, #48]	; (800d708 <LoraInfo_Init+0x68>)
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d10c      	bne.n	800d6f6 <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800d6dc:	4b0b      	ldr	r3, [pc, #44]	; (800d70c <LoraInfo_Init+0x6c>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	2100      	movs	r1, #0
 800d6e2:	2000      	movs	r0, #0
 800d6e4:	f012 fab6 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800d6e8:	bf00      	nop
 800d6ea:	f012 faa1 	bl	801fc30 <UTIL_ADV_TRACE_IsBufferEmpty>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d1fa      	bne.n	800d6ea <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800d6f4:	e7fe      	b.n	800d6f4 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800d6f6:	4b04      	ldr	r3, [pc, #16]	; (800d708 <LoraInfo_Init+0x68>)
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800d6fc:	4b02      	ldr	r3, [pc, #8]	; (800d708 <LoraInfo_Init+0x68>)
 800d6fe:	2201      	movs	r2, #1
 800d700:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800d702:	bf00      	nop
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	20000550 	.word	0x20000550
 800d70c:	080215cc 	.word	0x080215cc

0800d710 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800d710:	b480      	push	{r7}
 800d712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800d714:	4b02      	ldr	r3, [pc, #8]	; (800d720 <LoraInfo_GetPtr+0x10>)
}
 800d716:	4618      	mov	r0, r3
 800d718:	46bd      	mov	sp, r7
 800d71a:	bc80      	pop	{r7}
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop
 800d720:	20000550 	.word	0x20000550

0800d724 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800d728:	f7f7 fb81 	bl	8004e2e <BSP_RADIO_Init>
 800d72c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d72e:	4618      	mov	r0, r3
 800d730:	bd80      	pop	{r7, pc}

0800d732 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b082      	sub	sp, #8
 800d736:	af00      	add	r7, sp, #0
 800d738:	4603      	mov	r3, r0
 800d73a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800d73c:	79fb      	ldrb	r3, [r7, #7]
 800d73e:	4618      	mov	r0, r3
 800d740:	f7f7 fba6 	bl	8004e90 <BSP_RADIO_ConfigRFSwitch>
 800d744:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d746:	4618      	mov	r0, r3
 800d748:	3708      	adds	r7, #8
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800d74e:	b580      	push	{r7, lr}
 800d750:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800d752:	f7f7 fbeb 	bl	8004f2c <BSP_RADIO_GetTxConfig>
 800d756:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d758:	4618      	mov	r0, r3
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800d760:	f7f7 fbeb 	bl	8004f3a <BSP_RADIO_IsTCXO>
 800d764:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d766:	4618      	mov	r0, r3
 800d768:	bd80      	pop	{r7, pc}

0800d76a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800d76e:	f7f7 fbeb 	bl	8004f48 <BSP_RADIO_IsDCDC>
 800d772:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d774:	4618      	mov	r0, r3
 800d776:	bd80      	pop	{r7, pc}

0800d778 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	4603      	mov	r3, r0
 800d780:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800d782:	79fb      	ldrb	r3, [r7, #7]
 800d784:	4618      	mov	r0, r3
 800d786:	f7f7 fbe6 	bl	8004f56 <BSP_RADIO_GetRFOMaxPowerConfig>
 800d78a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	33f1      	adds	r3, #241	; 0xf1
 800d7a0:	2210      	movs	r2, #16
 800d7a2:	2100      	movs	r1, #0
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f00e f827 	bl	801b7f8 <memset1>
    ctx->M_n = 0;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	22f0      	movs	r2, #240	; 0xf0
 800d7b6:	2100      	movs	r1, #0
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f00e f81d 	bl	801b7f8 <memset1>
}
 800d7be:	bf00      	nop
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}

0800d7c6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800d7c6:	b580      	push	{r7, lr}
 800d7c8:	b082      	sub	sp, #8
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
 800d7ce:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	2110      	movs	r1, #16
 800d7d6:	6838      	ldr	r0, [r7, #0]
 800d7d8:	f000 fe5c 	bl	800e494 <lorawan_aes_set_key>
}
 800d7dc:	bf00      	nop
 800d7de:	3708      	adds	r7, #8
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b08c      	sub	sp, #48	; 0x30
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f000 80a1 	beq.w	800d93e <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d802:	f1c3 0310 	rsb	r3, r3, #16
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	4293      	cmp	r3, r2
 800d80a:	bf28      	it	cs
 800d80c:	4613      	movcs	r3, r2
 800d80e:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f203 1201 	addw	r2, r3, #257	; 0x101
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d81c:	4413      	add	r3, r2
 800d81e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d820:	b292      	uxth	r2, r2
 800d822:	68b9      	ldr	r1, [r7, #8]
 800d824:	4618      	mov	r0, r3
 800d826:	f00d ffac 	bl	801b782 <memcpy1>
        ctx->M_n += mlen;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800d830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d832:	441a      	add	r2, r3
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d840:	2b0f      	cmp	r3, #15
 800d842:	f240 808d 	bls.w	800d960 <AES_CMAC_Update+0x17c>
 800d846:	687a      	ldr	r2, [r7, #4]
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	429a      	cmp	r2, r3
 800d84c:	f000 8088 	beq.w	800d960 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800d850:	2300      	movs	r3, #0
 800d852:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d854:	e015      	b.n	800d882 <AES_CMAC_Update+0x9e>
 800d856:	68fa      	ldr	r2, [r7, #12]
 800d858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85a:	4413      	add	r3, r2
 800d85c:	33f1      	adds	r3, #241	; 0xf1
 800d85e:	781a      	ldrb	r2, [r3, #0]
 800d860:	68f9      	ldr	r1, [r7, #12]
 800d862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d864:	440b      	add	r3, r1
 800d866:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	4053      	eors	r3, r2
 800d86e:	b2d9      	uxtb	r1, r3
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d874:	4413      	add	r3, r2
 800d876:	33f1      	adds	r3, #241	; 0xf1
 800d878:	460a      	mov	r2, r1
 800d87a:	701a      	strb	r2, [r3, #0]
 800d87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87e:	3301      	adds	r3, #1
 800d880:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d884:	2b0f      	cmp	r3, #15
 800d886:	dde6      	ble.n	800d856 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800d88e:	f107 0314 	add.w	r3, r7, #20
 800d892:	2210      	movs	r2, #16
 800d894:	4618      	mov	r0, r3
 800d896:	f00d ff74 	bl	801b782 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d89a:	68fa      	ldr	r2, [r7, #12]
 800d89c:	f107 0114 	add.w	r1, r7, #20
 800d8a0:	f107 0314 	add.w	r3, r7, #20
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f000 fed3 	bl	800e650 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	33f1      	adds	r3, #241	; 0xf1
 800d8ae:	f107 0114 	add.w	r1, r7, #20
 800d8b2:	2210      	movs	r2, #16
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f00d ff64 	bl	801b782 <memcpy1>

        data += mlen;
 800d8ba:	68ba      	ldr	r2, [r7, #8]
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8be:	4413      	add	r3, r2
 800d8c0:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800d8c2:	687a      	ldr	r2, [r7, #4]
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c6:	1ad3      	subs	r3, r2, r3
 800d8c8:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800d8ca:	e038      	b.n	800d93e <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8d0:	e013      	b.n	800d8fa <AES_CMAC_Update+0x116>
 800d8d2:	68fa      	ldr	r2, [r7, #12]
 800d8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d6:	4413      	add	r3, r2
 800d8d8:	33f1      	adds	r3, #241	; 0xf1
 800d8da:	781a      	ldrb	r2, [r3, #0]
 800d8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8de:	68b9      	ldr	r1, [r7, #8]
 800d8e0:	440b      	add	r3, r1
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	4053      	eors	r3, r2
 800d8e6:	b2d9      	uxtb	r1, r3
 800d8e8:	68fa      	ldr	r2, [r7, #12]
 800d8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ec:	4413      	add	r3, r2
 800d8ee:	33f1      	adds	r3, #241	; 0xf1
 800d8f0:	460a      	mov	r2, r1
 800d8f2:	701a      	strb	r2, [r3, #0]
 800d8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fc:	2b0f      	cmp	r3, #15
 800d8fe:	dde8      	ble.n	800d8d2 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800d906:	f107 0314 	add.w	r3, r7, #20
 800d90a:	2210      	movs	r2, #16
 800d90c:	4618      	mov	r0, r3
 800d90e:	f00d ff38 	bl	801b782 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d912:	68fa      	ldr	r2, [r7, #12]
 800d914:	f107 0114 	add.w	r1, r7, #20
 800d918:	f107 0314 	add.w	r3, r7, #20
 800d91c:	4618      	mov	r0, r3
 800d91e:	f000 fe97 	bl	800e650 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	33f1      	adds	r3, #241	; 0xf1
 800d926:	f107 0114 	add.w	r1, r7, #20
 800d92a:	2210      	movs	r2, #16
 800d92c:	4618      	mov	r0, r3
 800d92e:	f00d ff28 	bl	801b782 <memcpy1>

        data += 16;
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	3310      	adds	r3, #16
 800d936:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	3b10      	subs	r3, #16
 800d93c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2b10      	cmp	r3, #16
 800d942:	d8c3      	bhi.n	800d8cc <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d94a:	687a      	ldr	r2, [r7, #4]
 800d94c:	b292      	uxth	r2, r2
 800d94e:	68b9      	ldr	r1, [r7, #8]
 800d950:	4618      	mov	r0, r3
 800d952:	f00d ff16 	bl	801b782 <memcpy1>
    ctx->M_n = len;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800d95e:	e000      	b.n	800d962 <AES_CMAC_Update+0x17e>
            return;
 800d960:	bf00      	nop
}
 800d962:	3730      	adds	r7, #48	; 0x30
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b092      	sub	sp, #72	; 0x48
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800d972:	f107 031c 	add.w	r3, r7, #28
 800d976:	2210      	movs	r2, #16
 800d978:	2100      	movs	r1, #0
 800d97a:	4618      	mov	r0, r3
 800d97c:	f00d ff3c 	bl	801b7f8 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800d980:	683a      	ldr	r2, [r7, #0]
 800d982:	f107 011c 	add.w	r1, r7, #28
 800d986:	f107 031c 	add.w	r3, r7, #28
 800d98a:	4618      	mov	r0, r3
 800d98c:	f000 fe60 	bl	800e650 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800d990:	7f3b      	ldrb	r3, [r7, #28]
 800d992:	b25b      	sxtb	r3, r3
 800d994:	2b00      	cmp	r3, #0
 800d996:	da30      	bge.n	800d9fa <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800d998:	2300      	movs	r3, #0
 800d99a:	647b      	str	r3, [r7, #68]	; 0x44
 800d99c:	e01b      	b.n	800d9d6 <AES_CMAC_Final+0x6e>
 800d99e:	f107 021c 	add.w	r2, r7, #28
 800d9a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9a4:	4413      	add	r3, r2
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	005b      	lsls	r3, r3, #1
 800d9aa:	b25a      	sxtb	r2, r3
 800d9ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	3348      	adds	r3, #72	; 0x48
 800d9b2:	443b      	add	r3, r7
 800d9b4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d9b8:	09db      	lsrs	r3, r3, #7
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	b25b      	sxtb	r3, r3
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	b25b      	sxtb	r3, r3
 800d9c2:	b2d9      	uxtb	r1, r3
 800d9c4:	f107 021c 	add.w	r2, r7, #28
 800d9c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9ca:	4413      	add	r3, r2
 800d9cc:	460a      	mov	r2, r1
 800d9ce:	701a      	strb	r2, [r3, #0]
 800d9d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	647b      	str	r3, [r7, #68]	; 0x44
 800d9d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9d8:	2b0e      	cmp	r3, #14
 800d9da:	dde0      	ble.n	800d99e <AES_CMAC_Final+0x36>
 800d9dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d9e0:	005b      	lsls	r3, r3, #1
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800d9e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d9ec:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800d9f0:	43db      	mvns	r3, r3
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d9f8:	e027      	b.n	800da4a <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	643b      	str	r3, [r7, #64]	; 0x40
 800d9fe:	e01b      	b.n	800da38 <AES_CMAC_Final+0xd0>
 800da00:	f107 021c 	add.w	r2, r7, #28
 800da04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da06:	4413      	add	r3, r2
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	005b      	lsls	r3, r3, #1
 800da0c:	b25a      	sxtb	r2, r3
 800da0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da10:	3301      	adds	r3, #1
 800da12:	3348      	adds	r3, #72	; 0x48
 800da14:	443b      	add	r3, r7
 800da16:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800da1a:	09db      	lsrs	r3, r3, #7
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	b25b      	sxtb	r3, r3
 800da20:	4313      	orrs	r3, r2
 800da22:	b25b      	sxtb	r3, r3
 800da24:	b2d9      	uxtb	r1, r3
 800da26:	f107 021c 	add.w	r2, r7, #28
 800da2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da2c:	4413      	add	r3, r2
 800da2e:	460a      	mov	r2, r1
 800da30:	701a      	strb	r2, [r3, #0]
 800da32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da34:	3301      	adds	r3, #1
 800da36:	643b      	str	r3, [r7, #64]	; 0x40
 800da38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da3a:	2b0e      	cmp	r3, #14
 800da3c:	dde0      	ble.n	800da00 <AES_CMAC_Final+0x98>
 800da3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da42:	005b      	lsls	r3, r3, #1
 800da44:	b2db      	uxtb	r3, r3
 800da46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800da50:	2b10      	cmp	r3, #16
 800da52:	d11d      	bne.n	800da90 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800da54:	2300      	movs	r3, #0
 800da56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da58:	e016      	b.n	800da88 <AES_CMAC_Final+0x120>
 800da5a:	683a      	ldr	r2, [r7, #0]
 800da5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da5e:	4413      	add	r3, r2
 800da60:	f203 1301 	addw	r3, r3, #257	; 0x101
 800da64:	781a      	ldrb	r2, [r3, #0]
 800da66:	f107 011c 	add.w	r1, r7, #28
 800da6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da6c:	440b      	add	r3, r1
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	4053      	eors	r3, r2
 800da72:	b2d9      	uxtb	r1, r3
 800da74:	683a      	ldr	r2, [r7, #0]
 800da76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da78:	4413      	add	r3, r2
 800da7a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800da7e:	460a      	mov	r2, r1
 800da80:	701a      	strb	r2, [r3, #0]
 800da82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da84:	3301      	adds	r3, #1
 800da86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da8a:	2b0f      	cmp	r3, #15
 800da8c:	dde5      	ble.n	800da5a <AES_CMAC_Final+0xf2>
 800da8e:	e096      	b.n	800dbbe <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800da90:	7f3b      	ldrb	r3, [r7, #28]
 800da92:	b25b      	sxtb	r3, r3
 800da94:	2b00      	cmp	r3, #0
 800da96:	da30      	bge.n	800dafa <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800da98:	2300      	movs	r3, #0
 800da9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800da9c:	e01b      	b.n	800dad6 <AES_CMAC_Final+0x16e>
 800da9e:	f107 021c 	add.w	r2, r7, #28
 800daa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa4:	4413      	add	r3, r2
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	005b      	lsls	r3, r3, #1
 800daaa:	b25a      	sxtb	r2, r3
 800daac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daae:	3301      	adds	r3, #1
 800dab0:	3348      	adds	r3, #72	; 0x48
 800dab2:	443b      	add	r3, r7
 800dab4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dab8:	09db      	lsrs	r3, r3, #7
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	b25b      	sxtb	r3, r3
 800dabe:	4313      	orrs	r3, r2
 800dac0:	b25b      	sxtb	r3, r3
 800dac2:	b2d9      	uxtb	r1, r3
 800dac4:	f107 021c 	add.w	r2, r7, #28
 800dac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daca:	4413      	add	r3, r2
 800dacc:	460a      	mov	r2, r1
 800dace:	701a      	strb	r2, [r3, #0]
 800dad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad2:	3301      	adds	r3, #1
 800dad4:	63bb      	str	r3, [r7, #56]	; 0x38
 800dad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad8:	2b0e      	cmp	r3, #14
 800dada:	dde0      	ble.n	800da9e <AES_CMAC_Final+0x136>
 800dadc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dae0:	005b      	lsls	r3, r3, #1
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800dae8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800daec:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800daf0:	43db      	mvns	r3, r3
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800daf8:	e027      	b.n	800db4a <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800dafa:	2300      	movs	r3, #0
 800dafc:	637b      	str	r3, [r7, #52]	; 0x34
 800dafe:	e01b      	b.n	800db38 <AES_CMAC_Final+0x1d0>
 800db00:	f107 021c 	add.w	r2, r7, #28
 800db04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db06:	4413      	add	r3, r2
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	005b      	lsls	r3, r3, #1
 800db0c:	b25a      	sxtb	r2, r3
 800db0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db10:	3301      	adds	r3, #1
 800db12:	3348      	adds	r3, #72	; 0x48
 800db14:	443b      	add	r3, r7
 800db16:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800db1a:	09db      	lsrs	r3, r3, #7
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	b25b      	sxtb	r3, r3
 800db20:	4313      	orrs	r3, r2
 800db22:	b25b      	sxtb	r3, r3
 800db24:	b2d9      	uxtb	r1, r3
 800db26:	f107 021c 	add.w	r2, r7, #28
 800db2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db2c:	4413      	add	r3, r2
 800db2e:	460a      	mov	r2, r1
 800db30:	701a      	strb	r2, [r3, #0]
 800db32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db34:	3301      	adds	r3, #1
 800db36:	637b      	str	r3, [r7, #52]	; 0x34
 800db38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db3a:	2b0e      	cmp	r3, #14
 800db3c:	dde0      	ble.n	800db00 <AES_CMAC_Final+0x198>
 800db3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db42:	005b      	lsls	r3, r3, #1
 800db44:	b2db      	uxtb	r3, r3
 800db46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800db50:	683a      	ldr	r2, [r7, #0]
 800db52:	4413      	add	r3, r2
 800db54:	2280      	movs	r2, #128	; 0x80
 800db56:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800db5a:	e007      	b.n	800db6c <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800db62:	683a      	ldr	r2, [r7, #0]
 800db64:	4413      	add	r3, r2
 800db66:	2200      	movs	r2, #0
 800db68:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800db72:	1c5a      	adds	r2, r3, #1
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800db80:	2b0f      	cmp	r3, #15
 800db82:	d9eb      	bls.n	800db5c <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800db84:	2300      	movs	r3, #0
 800db86:	633b      	str	r3, [r7, #48]	; 0x30
 800db88:	e016      	b.n	800dbb8 <AES_CMAC_Final+0x250>
 800db8a:	683a      	ldr	r2, [r7, #0]
 800db8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8e:	4413      	add	r3, r2
 800db90:	f203 1301 	addw	r3, r3, #257	; 0x101
 800db94:	781a      	ldrb	r2, [r3, #0]
 800db96:	f107 011c 	add.w	r1, r7, #28
 800db9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9c:	440b      	add	r3, r1
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	4053      	eors	r3, r2
 800dba2:	b2d9      	uxtb	r1, r3
 800dba4:	683a      	ldr	r2, [r7, #0]
 800dba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba8:	4413      	add	r3, r2
 800dbaa:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dbae:	460a      	mov	r2, r1
 800dbb0:	701a      	strb	r2, [r3, #0]
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	633b      	str	r3, [r7, #48]	; 0x30
 800dbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbba:	2b0f      	cmp	r3, #15
 800dbbc:	dde5      	ble.n	800db8a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbc2:	e015      	b.n	800dbf0 <AES_CMAC_Final+0x288>
 800dbc4:	683a      	ldr	r2, [r7, #0]
 800dbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc8:	4413      	add	r3, r2
 800dbca:	33f1      	adds	r3, #241	; 0xf1
 800dbcc:	781a      	ldrb	r2, [r3, #0]
 800dbce:	6839      	ldr	r1, [r7, #0]
 800dbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd2:	440b      	add	r3, r1
 800dbd4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	4053      	eors	r3, r2
 800dbdc:	b2d9      	uxtb	r1, r3
 800dbde:	683a      	ldr	r2, [r7, #0]
 800dbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe2:	4413      	add	r3, r2
 800dbe4:	33f1      	adds	r3, #241	; 0xf1
 800dbe6:	460a      	mov	r2, r1
 800dbe8:	701a      	strb	r2, [r3, #0]
 800dbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbec:	3301      	adds	r3, #1
 800dbee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf2:	2b0f      	cmp	r3, #15
 800dbf4:	dde6      	ble.n	800dbc4 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800dbfc:	f107 030c 	add.w	r3, r7, #12
 800dc00:	2210      	movs	r2, #16
 800dc02:	4618      	mov	r0, r3
 800dc04:	f00d fdbd 	bl	801b782 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800dc08:	683a      	ldr	r2, [r7, #0]
 800dc0a:	f107 030c 	add.w	r3, r7, #12
 800dc0e:	6879      	ldr	r1, [r7, #4]
 800dc10:	4618      	mov	r0, r3
 800dc12:	f000 fd1d 	bl	800e650 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800dc16:	f107 031c 	add.w	r3, r7, #28
 800dc1a:	2210      	movs	r2, #16
 800dc1c:	2100      	movs	r1, #0
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f00d fdea 	bl	801b7f8 <memset1>
}
 800dc24:	bf00      	nop
 800dc26:	3748      	adds	r7, #72	; 0x48
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	781a      	ldrb	r2, [r3, #0]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	3301      	adds	r3, #1
 800dc42:	683a      	ldr	r2, [r7, #0]
 800dc44:	7852      	ldrb	r2, [r2, #1]
 800dc46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	3302      	adds	r3, #2
 800dc4c:	683a      	ldr	r2, [r7, #0]
 800dc4e:	7892      	ldrb	r2, [r2, #2]
 800dc50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	3303      	adds	r3, #3
 800dc56:	683a      	ldr	r2, [r7, #0]
 800dc58:	78d2      	ldrb	r2, [r2, #3]
 800dc5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	3304      	adds	r3, #4
 800dc60:	683a      	ldr	r2, [r7, #0]
 800dc62:	7912      	ldrb	r2, [r2, #4]
 800dc64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	3305      	adds	r3, #5
 800dc6a:	683a      	ldr	r2, [r7, #0]
 800dc6c:	7952      	ldrb	r2, [r2, #5]
 800dc6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	3306      	adds	r3, #6
 800dc74:	683a      	ldr	r2, [r7, #0]
 800dc76:	7992      	ldrb	r2, [r2, #6]
 800dc78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	3307      	adds	r3, #7
 800dc7e:	683a      	ldr	r2, [r7, #0]
 800dc80:	79d2      	ldrb	r2, [r2, #7]
 800dc82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	3308      	adds	r3, #8
 800dc88:	683a      	ldr	r2, [r7, #0]
 800dc8a:	7a12      	ldrb	r2, [r2, #8]
 800dc8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	3309      	adds	r3, #9
 800dc92:	683a      	ldr	r2, [r7, #0]
 800dc94:	7a52      	ldrb	r2, [r2, #9]
 800dc96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	330a      	adds	r3, #10
 800dc9c:	683a      	ldr	r2, [r7, #0]
 800dc9e:	7a92      	ldrb	r2, [r2, #10]
 800dca0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	330b      	adds	r3, #11
 800dca6:	683a      	ldr	r2, [r7, #0]
 800dca8:	7ad2      	ldrb	r2, [r2, #11]
 800dcaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	330c      	adds	r3, #12
 800dcb0:	683a      	ldr	r2, [r7, #0]
 800dcb2:	7b12      	ldrb	r2, [r2, #12]
 800dcb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	330d      	adds	r3, #13
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	7b52      	ldrb	r2, [r2, #13]
 800dcbe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	330e      	adds	r3, #14
 800dcc4:	683a      	ldr	r2, [r7, #0]
 800dcc6:	7b92      	ldrb	r2, [r2, #14]
 800dcc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	330f      	adds	r3, #15
 800dcce:	683a      	ldr	r2, [r7, #0]
 800dcd0:	7bd2      	ldrb	r2, [r2, #15]
 800dcd2:	701a      	strb	r2, [r3, #0]
#endif
}
 800dcd4:	bf00      	nop
 800dcd6:	370c      	adds	r7, #12
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bc80      	pop	{r7}
 800dcdc:	4770      	bx	lr

0800dcde <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800dcde:	b480      	push	{r7}
 800dce0:	b085      	sub	sp, #20
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	60f8      	str	r0, [r7, #12]
 800dce6:	60b9      	str	r1, [r7, #8]
 800dce8:	4613      	mov	r3, r2
 800dcea:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800dcec:	e007      	b.n	800dcfe <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	1c53      	adds	r3, r2, #1
 800dcf2:	60bb      	str	r3, [r7, #8]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	1c59      	adds	r1, r3, #1
 800dcf8:	60f9      	str	r1, [r7, #12]
 800dcfa:	7812      	ldrb	r2, [r2, #0]
 800dcfc:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800dcfe:	79fb      	ldrb	r3, [r7, #7]
 800dd00:	1e5a      	subs	r2, r3, #1
 800dd02:	71fa      	strb	r2, [r7, #7]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d1f2      	bne.n	800dcee <copy_block_nn+0x10>
}
 800dd08:	bf00      	nop
 800dd0a:	bf00      	nop
 800dd0c:	3714      	adds	r7, #20
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bc80      	pop	{r7}
 800dd12:	4770      	bx	lr

0800dd14 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800dd14:	b480      	push	{r7}
 800dd16:	b083      	sub	sp, #12
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	781a      	ldrb	r2, [r3, #0]
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	4053      	eors	r3, r2
 800dd28:	b2da      	uxtb	r2, r3
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	3301      	adds	r3, #1
 800dd32:	7819      	ldrb	r1, [r3, #0]
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	3301      	adds	r3, #1
 800dd38:	781a      	ldrb	r2, [r3, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	404a      	eors	r2, r1
 800dd40:	b2d2      	uxtb	r2, r2
 800dd42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	3302      	adds	r3, #2
 800dd48:	7819      	ldrb	r1, [r3, #0]
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	3302      	adds	r3, #2
 800dd4e:	781a      	ldrb	r2, [r3, #0]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	3302      	adds	r3, #2
 800dd54:	404a      	eors	r2, r1
 800dd56:	b2d2      	uxtb	r2, r2
 800dd58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	3303      	adds	r3, #3
 800dd5e:	7819      	ldrb	r1, [r3, #0]
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	3303      	adds	r3, #3
 800dd64:	781a      	ldrb	r2, [r3, #0]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	3303      	adds	r3, #3
 800dd6a:	404a      	eors	r2, r1
 800dd6c:	b2d2      	uxtb	r2, r2
 800dd6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	3304      	adds	r3, #4
 800dd74:	7819      	ldrb	r1, [r3, #0]
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	3304      	adds	r3, #4
 800dd7a:	781a      	ldrb	r2, [r3, #0]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	3304      	adds	r3, #4
 800dd80:	404a      	eors	r2, r1
 800dd82:	b2d2      	uxtb	r2, r2
 800dd84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	3305      	adds	r3, #5
 800dd8a:	7819      	ldrb	r1, [r3, #0]
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	3305      	adds	r3, #5
 800dd90:	781a      	ldrb	r2, [r3, #0]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	3305      	adds	r3, #5
 800dd96:	404a      	eors	r2, r1
 800dd98:	b2d2      	uxtb	r2, r2
 800dd9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	3306      	adds	r3, #6
 800dda0:	7819      	ldrb	r1, [r3, #0]
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	3306      	adds	r3, #6
 800dda6:	781a      	ldrb	r2, [r3, #0]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	3306      	adds	r3, #6
 800ddac:	404a      	eors	r2, r1
 800ddae:	b2d2      	uxtb	r2, r2
 800ddb0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	3307      	adds	r3, #7
 800ddb6:	7819      	ldrb	r1, [r3, #0]
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	3307      	adds	r3, #7
 800ddbc:	781a      	ldrb	r2, [r3, #0]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	3307      	adds	r3, #7
 800ddc2:	404a      	eors	r2, r1
 800ddc4:	b2d2      	uxtb	r2, r2
 800ddc6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	3308      	adds	r3, #8
 800ddcc:	7819      	ldrb	r1, [r3, #0]
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	3308      	adds	r3, #8
 800ddd2:	781a      	ldrb	r2, [r3, #0]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	3308      	adds	r3, #8
 800ddd8:	404a      	eors	r2, r1
 800ddda:	b2d2      	uxtb	r2, r2
 800dddc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	3309      	adds	r3, #9
 800dde2:	7819      	ldrb	r1, [r3, #0]
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	3309      	adds	r3, #9
 800dde8:	781a      	ldrb	r2, [r3, #0]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	3309      	adds	r3, #9
 800ddee:	404a      	eors	r2, r1
 800ddf0:	b2d2      	uxtb	r2, r2
 800ddf2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	330a      	adds	r3, #10
 800ddf8:	7819      	ldrb	r1, [r3, #0]
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	330a      	adds	r3, #10
 800ddfe:	781a      	ldrb	r2, [r3, #0]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	330a      	adds	r3, #10
 800de04:	404a      	eors	r2, r1
 800de06:	b2d2      	uxtb	r2, r2
 800de08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	330b      	adds	r3, #11
 800de0e:	7819      	ldrb	r1, [r3, #0]
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	330b      	adds	r3, #11
 800de14:	781a      	ldrb	r2, [r3, #0]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	330b      	adds	r3, #11
 800de1a:	404a      	eors	r2, r1
 800de1c:	b2d2      	uxtb	r2, r2
 800de1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	330c      	adds	r3, #12
 800de24:	7819      	ldrb	r1, [r3, #0]
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	330c      	adds	r3, #12
 800de2a:	781a      	ldrb	r2, [r3, #0]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	330c      	adds	r3, #12
 800de30:	404a      	eors	r2, r1
 800de32:	b2d2      	uxtb	r2, r2
 800de34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	330d      	adds	r3, #13
 800de3a:	7819      	ldrb	r1, [r3, #0]
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	330d      	adds	r3, #13
 800de40:	781a      	ldrb	r2, [r3, #0]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	330d      	adds	r3, #13
 800de46:	404a      	eors	r2, r1
 800de48:	b2d2      	uxtb	r2, r2
 800de4a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	330e      	adds	r3, #14
 800de50:	7819      	ldrb	r1, [r3, #0]
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	330e      	adds	r3, #14
 800de56:	781a      	ldrb	r2, [r3, #0]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	330e      	adds	r3, #14
 800de5c:	404a      	eors	r2, r1
 800de5e:	b2d2      	uxtb	r2, r2
 800de60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	330f      	adds	r3, #15
 800de66:	7819      	ldrb	r1, [r3, #0]
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	330f      	adds	r3, #15
 800de6c:	781a      	ldrb	r2, [r3, #0]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	330f      	adds	r3, #15
 800de72:	404a      	eors	r2, r1
 800de74:	b2d2      	uxtb	r2, r2
 800de76:	701a      	strb	r2, [r3, #0]
#endif
}
 800de78:	bf00      	nop
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bc80      	pop	{r7}
 800de80:	4770      	bx	lr

0800de82 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800de82:	b480      	push	{r7}
 800de84:	b085      	sub	sp, #20
 800de86:	af00      	add	r7, sp, #0
 800de88:	60f8      	str	r0, [r7, #12]
 800de8a:	60b9      	str	r1, [r7, #8]
 800de8c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	781a      	ldrb	r2, [r3, #0]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	4053      	eors	r3, r2
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	3301      	adds	r3, #1
 800dea2:	7819      	ldrb	r1, [r3, #0]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	3301      	adds	r3, #1
 800dea8:	781a      	ldrb	r2, [r3, #0]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3301      	adds	r3, #1
 800deae:	404a      	eors	r2, r1
 800deb0:	b2d2      	uxtb	r2, r2
 800deb2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	3302      	adds	r3, #2
 800deb8:	7819      	ldrb	r1, [r3, #0]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	3302      	adds	r3, #2
 800debe:	781a      	ldrb	r2, [r3, #0]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	3302      	adds	r3, #2
 800dec4:	404a      	eors	r2, r1
 800dec6:	b2d2      	uxtb	r2, r2
 800dec8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	3303      	adds	r3, #3
 800dece:	7819      	ldrb	r1, [r3, #0]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	3303      	adds	r3, #3
 800ded4:	781a      	ldrb	r2, [r3, #0]
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	3303      	adds	r3, #3
 800deda:	404a      	eors	r2, r1
 800dedc:	b2d2      	uxtb	r2, r2
 800dede:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	3304      	adds	r3, #4
 800dee4:	7819      	ldrb	r1, [r3, #0]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	3304      	adds	r3, #4
 800deea:	781a      	ldrb	r2, [r3, #0]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	3304      	adds	r3, #4
 800def0:	404a      	eors	r2, r1
 800def2:	b2d2      	uxtb	r2, r2
 800def4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	3305      	adds	r3, #5
 800defa:	7819      	ldrb	r1, [r3, #0]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	3305      	adds	r3, #5
 800df00:	781a      	ldrb	r2, [r3, #0]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	3305      	adds	r3, #5
 800df06:	404a      	eors	r2, r1
 800df08:	b2d2      	uxtb	r2, r2
 800df0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	3306      	adds	r3, #6
 800df10:	7819      	ldrb	r1, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	3306      	adds	r3, #6
 800df16:	781a      	ldrb	r2, [r3, #0]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	3306      	adds	r3, #6
 800df1c:	404a      	eors	r2, r1
 800df1e:	b2d2      	uxtb	r2, r2
 800df20:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	3307      	adds	r3, #7
 800df26:	7819      	ldrb	r1, [r3, #0]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	3307      	adds	r3, #7
 800df2c:	781a      	ldrb	r2, [r3, #0]
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	3307      	adds	r3, #7
 800df32:	404a      	eors	r2, r1
 800df34:	b2d2      	uxtb	r2, r2
 800df36:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	3308      	adds	r3, #8
 800df3c:	7819      	ldrb	r1, [r3, #0]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	3308      	adds	r3, #8
 800df42:	781a      	ldrb	r2, [r3, #0]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	3308      	adds	r3, #8
 800df48:	404a      	eors	r2, r1
 800df4a:	b2d2      	uxtb	r2, r2
 800df4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	3309      	adds	r3, #9
 800df52:	7819      	ldrb	r1, [r3, #0]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	3309      	adds	r3, #9
 800df58:	781a      	ldrb	r2, [r3, #0]
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	3309      	adds	r3, #9
 800df5e:	404a      	eors	r2, r1
 800df60:	b2d2      	uxtb	r2, r2
 800df62:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	330a      	adds	r3, #10
 800df68:	7819      	ldrb	r1, [r3, #0]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	330a      	adds	r3, #10
 800df6e:	781a      	ldrb	r2, [r3, #0]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	330a      	adds	r3, #10
 800df74:	404a      	eors	r2, r1
 800df76:	b2d2      	uxtb	r2, r2
 800df78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	330b      	adds	r3, #11
 800df7e:	7819      	ldrb	r1, [r3, #0]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	330b      	adds	r3, #11
 800df84:	781a      	ldrb	r2, [r3, #0]
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	330b      	adds	r3, #11
 800df8a:	404a      	eors	r2, r1
 800df8c:	b2d2      	uxtb	r2, r2
 800df8e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	330c      	adds	r3, #12
 800df94:	7819      	ldrb	r1, [r3, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	330c      	adds	r3, #12
 800df9a:	781a      	ldrb	r2, [r3, #0]
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	330c      	adds	r3, #12
 800dfa0:	404a      	eors	r2, r1
 800dfa2:	b2d2      	uxtb	r2, r2
 800dfa4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	330d      	adds	r3, #13
 800dfaa:	7819      	ldrb	r1, [r3, #0]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	330d      	adds	r3, #13
 800dfb0:	781a      	ldrb	r2, [r3, #0]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	330d      	adds	r3, #13
 800dfb6:	404a      	eors	r2, r1
 800dfb8:	b2d2      	uxtb	r2, r2
 800dfba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	330e      	adds	r3, #14
 800dfc0:	7819      	ldrb	r1, [r3, #0]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	330e      	adds	r3, #14
 800dfc6:	781a      	ldrb	r2, [r3, #0]
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	330e      	adds	r3, #14
 800dfcc:	404a      	eors	r2, r1
 800dfce:	b2d2      	uxtb	r2, r2
 800dfd0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	330f      	adds	r3, #15
 800dfd6:	7819      	ldrb	r1, [r3, #0]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	330f      	adds	r3, #15
 800dfdc:	781a      	ldrb	r2, [r3, #0]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	330f      	adds	r3, #15
 800dfe2:	404a      	eors	r2, r1
 800dfe4:	b2d2      	uxtb	r2, r2
 800dfe6:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800dfe8:	bf00      	nop
 800dfea:	3714      	adds	r7, #20
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bc80      	pop	{r7}
 800dff0:	4770      	bx	lr

0800dff2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800dff2:	b580      	push	{r7, lr}
 800dff4:	b082      	sub	sp, #8
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	6078      	str	r0, [r7, #4]
 800dffa:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800dffc:	6839      	ldr	r1, [r7, #0]
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f7ff fe88 	bl	800dd14 <xor_block>
}
 800e004:	bf00      	nop
 800e006:	3708      	adds	r7, #8
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e00c:	b480      	push	{r7}
 800e00e:	b085      	sub	sp, #20
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	461a      	mov	r2, r3
 800e01a:	4b48      	ldr	r3, [pc, #288]	; (800e13c <shift_sub_rows+0x130>)
 800e01c:	5c9a      	ldrb	r2, [r3, r2]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	701a      	strb	r2, [r3, #0]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	3304      	adds	r3, #4
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	4619      	mov	r1, r3
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	3304      	adds	r3, #4
 800e02e:	4a43      	ldr	r2, [pc, #268]	; (800e13c <shift_sub_rows+0x130>)
 800e030:	5c52      	ldrb	r2, [r2, r1]
 800e032:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	3308      	adds	r3, #8
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	4619      	mov	r1, r3
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	3308      	adds	r3, #8
 800e040:	4a3e      	ldr	r2, [pc, #248]	; (800e13c <shift_sub_rows+0x130>)
 800e042:	5c52      	ldrb	r2, [r2, r1]
 800e044:	701a      	strb	r2, [r3, #0]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	330c      	adds	r3, #12
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	4619      	mov	r1, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	330c      	adds	r3, #12
 800e052:	4a3a      	ldr	r2, [pc, #232]	; (800e13c <shift_sub_rows+0x130>)
 800e054:	5c52      	ldrb	r2, [r2, r1]
 800e056:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	785b      	ldrb	r3, [r3, #1]
 800e05c:	73fb      	strb	r3, [r7, #15]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	3305      	adds	r3, #5
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	4619      	mov	r1, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	3301      	adds	r3, #1
 800e06a:	4a34      	ldr	r2, [pc, #208]	; (800e13c <shift_sub_rows+0x130>)
 800e06c:	5c52      	ldrb	r2, [r2, r1]
 800e06e:	701a      	strb	r2, [r3, #0]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	3309      	adds	r3, #9
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	4619      	mov	r1, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	3305      	adds	r3, #5
 800e07c:	4a2f      	ldr	r2, [pc, #188]	; (800e13c <shift_sub_rows+0x130>)
 800e07e:	5c52      	ldrb	r2, [r2, r1]
 800e080:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	330d      	adds	r3, #13
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	4619      	mov	r1, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	3309      	adds	r3, #9
 800e08e:	4a2b      	ldr	r2, [pc, #172]	; (800e13c <shift_sub_rows+0x130>)
 800e090:	5c52      	ldrb	r2, [r2, r1]
 800e092:	701a      	strb	r2, [r3, #0]
 800e094:	7bfa      	ldrb	r2, [r7, #15]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	330d      	adds	r3, #13
 800e09a:	4928      	ldr	r1, [pc, #160]	; (800e13c <shift_sub_rows+0x130>)
 800e09c:	5c8a      	ldrb	r2, [r1, r2]
 800e09e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	789b      	ldrb	r3, [r3, #2]
 800e0a4:	73fb      	strb	r3, [r7, #15]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	330a      	adds	r3, #10
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	3302      	adds	r3, #2
 800e0b2:	4a22      	ldr	r2, [pc, #136]	; (800e13c <shift_sub_rows+0x130>)
 800e0b4:	5c52      	ldrb	r2, [r2, r1]
 800e0b6:	701a      	strb	r2, [r3, #0]
 800e0b8:	7bfa      	ldrb	r2, [r7, #15]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	330a      	adds	r3, #10
 800e0be:	491f      	ldr	r1, [pc, #124]	; (800e13c <shift_sub_rows+0x130>)
 800e0c0:	5c8a      	ldrb	r2, [r1, r2]
 800e0c2:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	799b      	ldrb	r3, [r3, #6]
 800e0c8:	73fb      	strb	r3, [r7, #15]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	330e      	adds	r3, #14
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	3306      	adds	r3, #6
 800e0d6:	4a19      	ldr	r2, [pc, #100]	; (800e13c <shift_sub_rows+0x130>)
 800e0d8:	5c52      	ldrb	r2, [r2, r1]
 800e0da:	701a      	strb	r2, [r3, #0]
 800e0dc:	7bfa      	ldrb	r2, [r7, #15]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	330e      	adds	r3, #14
 800e0e2:	4916      	ldr	r1, [pc, #88]	; (800e13c <shift_sub_rows+0x130>)
 800e0e4:	5c8a      	ldrb	r2, [r1, r2]
 800e0e6:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	7bdb      	ldrb	r3, [r3, #15]
 800e0ec:	73fb      	strb	r3, [r7, #15]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	330b      	adds	r3, #11
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	330f      	adds	r3, #15
 800e0fa:	4a10      	ldr	r2, [pc, #64]	; (800e13c <shift_sub_rows+0x130>)
 800e0fc:	5c52      	ldrb	r2, [r2, r1]
 800e0fe:	701a      	strb	r2, [r3, #0]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	3307      	adds	r3, #7
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	4619      	mov	r1, r3
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	330b      	adds	r3, #11
 800e10c:	4a0b      	ldr	r2, [pc, #44]	; (800e13c <shift_sub_rows+0x130>)
 800e10e:	5c52      	ldrb	r2, [r2, r1]
 800e110:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	3303      	adds	r3, #3
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	4619      	mov	r1, r3
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	3307      	adds	r3, #7
 800e11e:	4a07      	ldr	r2, [pc, #28]	; (800e13c <shift_sub_rows+0x130>)
 800e120:	5c52      	ldrb	r2, [r2, r1]
 800e122:	701a      	strb	r2, [r3, #0]
 800e124:	7bfa      	ldrb	r2, [r7, #15]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	3303      	adds	r3, #3
 800e12a:	4904      	ldr	r1, [pc, #16]	; (800e13c <shift_sub_rows+0x130>)
 800e12c:	5c8a      	ldrb	r2, [r1, r2]
 800e12e:	701a      	strb	r2, [r3, #0]
}
 800e130:	bf00      	nop
 800e132:	3714      	adds	r7, #20
 800e134:	46bd      	mov	sp, r7
 800e136:	bc80      	pop	{r7}
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	08021b2c 	.word	0x08021b2c

0800e140 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e140:	b580      	push	{r7, lr}
 800e142:	b086      	sub	sp, #24
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e148:	f107 0308 	add.w	r3, r7, #8
 800e14c:	6879      	ldr	r1, [r7, #4]
 800e14e:	4618      	mov	r0, r3
 800e150:	f7ff fd6c 	bl	800dc2c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e154:	7a3b      	ldrb	r3, [r7, #8]
 800e156:	461a      	mov	r2, r3
 800e158:	4b9a      	ldr	r3, [pc, #616]	; (800e3c4 <mix_sub_columns+0x284>)
 800e15a:	5c9a      	ldrb	r2, [r3, r2]
 800e15c:	7b7b      	ldrb	r3, [r7, #13]
 800e15e:	4619      	mov	r1, r3
 800e160:	4b99      	ldr	r3, [pc, #612]	; (800e3c8 <mix_sub_columns+0x288>)
 800e162:	5c5b      	ldrb	r3, [r3, r1]
 800e164:	4053      	eors	r3, r2
 800e166:	b2da      	uxtb	r2, r3
 800e168:	7cbb      	ldrb	r3, [r7, #18]
 800e16a:	4619      	mov	r1, r3
 800e16c:	4b97      	ldr	r3, [pc, #604]	; (800e3cc <mix_sub_columns+0x28c>)
 800e16e:	5c5b      	ldrb	r3, [r3, r1]
 800e170:	4053      	eors	r3, r2
 800e172:	b2da      	uxtb	r2, r3
 800e174:	7dfb      	ldrb	r3, [r7, #23]
 800e176:	4619      	mov	r1, r3
 800e178:	4b94      	ldr	r3, [pc, #592]	; (800e3cc <mix_sub_columns+0x28c>)
 800e17a:	5c5b      	ldrb	r3, [r3, r1]
 800e17c:	4053      	eors	r3, r2
 800e17e:	b2da      	uxtb	r2, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e184:	7a3b      	ldrb	r3, [r7, #8]
 800e186:	461a      	mov	r2, r3
 800e188:	4b90      	ldr	r3, [pc, #576]	; (800e3cc <mix_sub_columns+0x28c>)
 800e18a:	5c9a      	ldrb	r2, [r3, r2]
 800e18c:	7b7b      	ldrb	r3, [r7, #13]
 800e18e:	4619      	mov	r1, r3
 800e190:	4b8c      	ldr	r3, [pc, #560]	; (800e3c4 <mix_sub_columns+0x284>)
 800e192:	5c5b      	ldrb	r3, [r3, r1]
 800e194:	4053      	eors	r3, r2
 800e196:	b2da      	uxtb	r2, r3
 800e198:	7cbb      	ldrb	r3, [r7, #18]
 800e19a:	4619      	mov	r1, r3
 800e19c:	4b8a      	ldr	r3, [pc, #552]	; (800e3c8 <mix_sub_columns+0x288>)
 800e19e:	5c5b      	ldrb	r3, [r3, r1]
 800e1a0:	4053      	eors	r3, r2
 800e1a2:	b2d9      	uxtb	r1, r3
 800e1a4:	7dfb      	ldrb	r3, [r7, #23]
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	4b88      	ldr	r3, [pc, #544]	; (800e3cc <mix_sub_columns+0x28c>)
 800e1aa:	5c9a      	ldrb	r2, [r3, r2]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	404a      	eors	r2, r1
 800e1b2:	b2d2      	uxtb	r2, r2
 800e1b4:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e1b6:	7a3b      	ldrb	r3, [r7, #8]
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	4b84      	ldr	r3, [pc, #528]	; (800e3cc <mix_sub_columns+0x28c>)
 800e1bc:	5c9a      	ldrb	r2, [r3, r2]
 800e1be:	7b7b      	ldrb	r3, [r7, #13]
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	4b82      	ldr	r3, [pc, #520]	; (800e3cc <mix_sub_columns+0x28c>)
 800e1c4:	5c5b      	ldrb	r3, [r3, r1]
 800e1c6:	4053      	eors	r3, r2
 800e1c8:	b2da      	uxtb	r2, r3
 800e1ca:	7cbb      	ldrb	r3, [r7, #18]
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	4b7d      	ldr	r3, [pc, #500]	; (800e3c4 <mix_sub_columns+0x284>)
 800e1d0:	5c5b      	ldrb	r3, [r3, r1]
 800e1d2:	4053      	eors	r3, r2
 800e1d4:	b2d9      	uxtb	r1, r3
 800e1d6:	7dfb      	ldrb	r3, [r7, #23]
 800e1d8:	461a      	mov	r2, r3
 800e1da:	4b7b      	ldr	r3, [pc, #492]	; (800e3c8 <mix_sub_columns+0x288>)
 800e1dc:	5c9a      	ldrb	r2, [r3, r2]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	3302      	adds	r3, #2
 800e1e2:	404a      	eors	r2, r1
 800e1e4:	b2d2      	uxtb	r2, r2
 800e1e6:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e1e8:	7a3b      	ldrb	r3, [r7, #8]
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	4b76      	ldr	r3, [pc, #472]	; (800e3c8 <mix_sub_columns+0x288>)
 800e1ee:	5c9a      	ldrb	r2, [r3, r2]
 800e1f0:	7b7b      	ldrb	r3, [r7, #13]
 800e1f2:	4619      	mov	r1, r3
 800e1f4:	4b75      	ldr	r3, [pc, #468]	; (800e3cc <mix_sub_columns+0x28c>)
 800e1f6:	5c5b      	ldrb	r3, [r3, r1]
 800e1f8:	4053      	eors	r3, r2
 800e1fa:	b2da      	uxtb	r2, r3
 800e1fc:	7cbb      	ldrb	r3, [r7, #18]
 800e1fe:	4619      	mov	r1, r3
 800e200:	4b72      	ldr	r3, [pc, #456]	; (800e3cc <mix_sub_columns+0x28c>)
 800e202:	5c5b      	ldrb	r3, [r3, r1]
 800e204:	4053      	eors	r3, r2
 800e206:	b2d9      	uxtb	r1, r3
 800e208:	7dfb      	ldrb	r3, [r7, #23]
 800e20a:	461a      	mov	r2, r3
 800e20c:	4b6d      	ldr	r3, [pc, #436]	; (800e3c4 <mix_sub_columns+0x284>)
 800e20e:	5c9a      	ldrb	r2, [r3, r2]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	3303      	adds	r3, #3
 800e214:	404a      	eors	r2, r1
 800e216:	b2d2      	uxtb	r2, r2
 800e218:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e21a:	7b3b      	ldrb	r3, [r7, #12]
 800e21c:	461a      	mov	r2, r3
 800e21e:	4b69      	ldr	r3, [pc, #420]	; (800e3c4 <mix_sub_columns+0x284>)
 800e220:	5c9a      	ldrb	r2, [r3, r2]
 800e222:	7c7b      	ldrb	r3, [r7, #17]
 800e224:	4619      	mov	r1, r3
 800e226:	4b68      	ldr	r3, [pc, #416]	; (800e3c8 <mix_sub_columns+0x288>)
 800e228:	5c5b      	ldrb	r3, [r3, r1]
 800e22a:	4053      	eors	r3, r2
 800e22c:	b2da      	uxtb	r2, r3
 800e22e:	7dbb      	ldrb	r3, [r7, #22]
 800e230:	4619      	mov	r1, r3
 800e232:	4b66      	ldr	r3, [pc, #408]	; (800e3cc <mix_sub_columns+0x28c>)
 800e234:	5c5b      	ldrb	r3, [r3, r1]
 800e236:	4053      	eors	r3, r2
 800e238:	b2d9      	uxtb	r1, r3
 800e23a:	7afb      	ldrb	r3, [r7, #11]
 800e23c:	461a      	mov	r2, r3
 800e23e:	4b63      	ldr	r3, [pc, #396]	; (800e3cc <mix_sub_columns+0x28c>)
 800e240:	5c9a      	ldrb	r2, [r3, r2]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	3304      	adds	r3, #4
 800e246:	404a      	eors	r2, r1
 800e248:	b2d2      	uxtb	r2, r2
 800e24a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e24c:	7b3b      	ldrb	r3, [r7, #12]
 800e24e:	461a      	mov	r2, r3
 800e250:	4b5e      	ldr	r3, [pc, #376]	; (800e3cc <mix_sub_columns+0x28c>)
 800e252:	5c9a      	ldrb	r2, [r3, r2]
 800e254:	7c7b      	ldrb	r3, [r7, #17]
 800e256:	4619      	mov	r1, r3
 800e258:	4b5a      	ldr	r3, [pc, #360]	; (800e3c4 <mix_sub_columns+0x284>)
 800e25a:	5c5b      	ldrb	r3, [r3, r1]
 800e25c:	4053      	eors	r3, r2
 800e25e:	b2da      	uxtb	r2, r3
 800e260:	7dbb      	ldrb	r3, [r7, #22]
 800e262:	4619      	mov	r1, r3
 800e264:	4b58      	ldr	r3, [pc, #352]	; (800e3c8 <mix_sub_columns+0x288>)
 800e266:	5c5b      	ldrb	r3, [r3, r1]
 800e268:	4053      	eors	r3, r2
 800e26a:	b2d9      	uxtb	r1, r3
 800e26c:	7afb      	ldrb	r3, [r7, #11]
 800e26e:	461a      	mov	r2, r3
 800e270:	4b56      	ldr	r3, [pc, #344]	; (800e3cc <mix_sub_columns+0x28c>)
 800e272:	5c9a      	ldrb	r2, [r3, r2]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	3305      	adds	r3, #5
 800e278:	404a      	eors	r2, r1
 800e27a:	b2d2      	uxtb	r2, r2
 800e27c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e27e:	7b3b      	ldrb	r3, [r7, #12]
 800e280:	461a      	mov	r2, r3
 800e282:	4b52      	ldr	r3, [pc, #328]	; (800e3cc <mix_sub_columns+0x28c>)
 800e284:	5c9a      	ldrb	r2, [r3, r2]
 800e286:	7c7b      	ldrb	r3, [r7, #17]
 800e288:	4619      	mov	r1, r3
 800e28a:	4b50      	ldr	r3, [pc, #320]	; (800e3cc <mix_sub_columns+0x28c>)
 800e28c:	5c5b      	ldrb	r3, [r3, r1]
 800e28e:	4053      	eors	r3, r2
 800e290:	b2da      	uxtb	r2, r3
 800e292:	7dbb      	ldrb	r3, [r7, #22]
 800e294:	4619      	mov	r1, r3
 800e296:	4b4b      	ldr	r3, [pc, #300]	; (800e3c4 <mix_sub_columns+0x284>)
 800e298:	5c5b      	ldrb	r3, [r3, r1]
 800e29a:	4053      	eors	r3, r2
 800e29c:	b2d9      	uxtb	r1, r3
 800e29e:	7afb      	ldrb	r3, [r7, #11]
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	4b49      	ldr	r3, [pc, #292]	; (800e3c8 <mix_sub_columns+0x288>)
 800e2a4:	5c9a      	ldrb	r2, [r3, r2]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	3306      	adds	r3, #6
 800e2aa:	404a      	eors	r2, r1
 800e2ac:	b2d2      	uxtb	r2, r2
 800e2ae:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e2b0:	7b3b      	ldrb	r3, [r7, #12]
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	4b44      	ldr	r3, [pc, #272]	; (800e3c8 <mix_sub_columns+0x288>)
 800e2b6:	5c9a      	ldrb	r2, [r3, r2]
 800e2b8:	7c7b      	ldrb	r3, [r7, #17]
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	4b43      	ldr	r3, [pc, #268]	; (800e3cc <mix_sub_columns+0x28c>)
 800e2be:	5c5b      	ldrb	r3, [r3, r1]
 800e2c0:	4053      	eors	r3, r2
 800e2c2:	b2da      	uxtb	r2, r3
 800e2c4:	7dbb      	ldrb	r3, [r7, #22]
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	4b40      	ldr	r3, [pc, #256]	; (800e3cc <mix_sub_columns+0x28c>)
 800e2ca:	5c5b      	ldrb	r3, [r3, r1]
 800e2cc:	4053      	eors	r3, r2
 800e2ce:	b2d9      	uxtb	r1, r3
 800e2d0:	7afb      	ldrb	r3, [r7, #11]
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	4b3b      	ldr	r3, [pc, #236]	; (800e3c4 <mix_sub_columns+0x284>)
 800e2d6:	5c9a      	ldrb	r2, [r3, r2]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	3307      	adds	r3, #7
 800e2dc:	404a      	eors	r2, r1
 800e2de:	b2d2      	uxtb	r2, r2
 800e2e0:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e2e2:	7c3b      	ldrb	r3, [r7, #16]
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	4b37      	ldr	r3, [pc, #220]	; (800e3c4 <mix_sub_columns+0x284>)
 800e2e8:	5c9a      	ldrb	r2, [r3, r2]
 800e2ea:	7d7b      	ldrb	r3, [r7, #21]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	4b36      	ldr	r3, [pc, #216]	; (800e3c8 <mix_sub_columns+0x288>)
 800e2f0:	5c5b      	ldrb	r3, [r3, r1]
 800e2f2:	4053      	eors	r3, r2
 800e2f4:	b2da      	uxtb	r2, r3
 800e2f6:	7abb      	ldrb	r3, [r7, #10]
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	4b34      	ldr	r3, [pc, #208]	; (800e3cc <mix_sub_columns+0x28c>)
 800e2fc:	5c5b      	ldrb	r3, [r3, r1]
 800e2fe:	4053      	eors	r3, r2
 800e300:	b2d9      	uxtb	r1, r3
 800e302:	7bfb      	ldrb	r3, [r7, #15]
 800e304:	461a      	mov	r2, r3
 800e306:	4b31      	ldr	r3, [pc, #196]	; (800e3cc <mix_sub_columns+0x28c>)
 800e308:	5c9a      	ldrb	r2, [r3, r2]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	3308      	adds	r3, #8
 800e30e:	404a      	eors	r2, r1
 800e310:	b2d2      	uxtb	r2, r2
 800e312:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e314:	7c3b      	ldrb	r3, [r7, #16]
 800e316:	461a      	mov	r2, r3
 800e318:	4b2c      	ldr	r3, [pc, #176]	; (800e3cc <mix_sub_columns+0x28c>)
 800e31a:	5c9a      	ldrb	r2, [r3, r2]
 800e31c:	7d7b      	ldrb	r3, [r7, #21]
 800e31e:	4619      	mov	r1, r3
 800e320:	4b28      	ldr	r3, [pc, #160]	; (800e3c4 <mix_sub_columns+0x284>)
 800e322:	5c5b      	ldrb	r3, [r3, r1]
 800e324:	4053      	eors	r3, r2
 800e326:	b2da      	uxtb	r2, r3
 800e328:	7abb      	ldrb	r3, [r7, #10]
 800e32a:	4619      	mov	r1, r3
 800e32c:	4b26      	ldr	r3, [pc, #152]	; (800e3c8 <mix_sub_columns+0x288>)
 800e32e:	5c5b      	ldrb	r3, [r3, r1]
 800e330:	4053      	eors	r3, r2
 800e332:	b2d9      	uxtb	r1, r3
 800e334:	7bfb      	ldrb	r3, [r7, #15]
 800e336:	461a      	mov	r2, r3
 800e338:	4b24      	ldr	r3, [pc, #144]	; (800e3cc <mix_sub_columns+0x28c>)
 800e33a:	5c9a      	ldrb	r2, [r3, r2]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	3309      	adds	r3, #9
 800e340:	404a      	eors	r2, r1
 800e342:	b2d2      	uxtb	r2, r2
 800e344:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e346:	7c3b      	ldrb	r3, [r7, #16]
 800e348:	461a      	mov	r2, r3
 800e34a:	4b20      	ldr	r3, [pc, #128]	; (800e3cc <mix_sub_columns+0x28c>)
 800e34c:	5c9a      	ldrb	r2, [r3, r2]
 800e34e:	7d7b      	ldrb	r3, [r7, #21]
 800e350:	4619      	mov	r1, r3
 800e352:	4b1e      	ldr	r3, [pc, #120]	; (800e3cc <mix_sub_columns+0x28c>)
 800e354:	5c5b      	ldrb	r3, [r3, r1]
 800e356:	4053      	eors	r3, r2
 800e358:	b2da      	uxtb	r2, r3
 800e35a:	7abb      	ldrb	r3, [r7, #10]
 800e35c:	4619      	mov	r1, r3
 800e35e:	4b19      	ldr	r3, [pc, #100]	; (800e3c4 <mix_sub_columns+0x284>)
 800e360:	5c5b      	ldrb	r3, [r3, r1]
 800e362:	4053      	eors	r3, r2
 800e364:	b2d9      	uxtb	r1, r3
 800e366:	7bfb      	ldrb	r3, [r7, #15]
 800e368:	461a      	mov	r2, r3
 800e36a:	4b17      	ldr	r3, [pc, #92]	; (800e3c8 <mix_sub_columns+0x288>)
 800e36c:	5c9a      	ldrb	r2, [r3, r2]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	330a      	adds	r3, #10
 800e372:	404a      	eors	r2, r1
 800e374:	b2d2      	uxtb	r2, r2
 800e376:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e378:	7c3b      	ldrb	r3, [r7, #16]
 800e37a:	461a      	mov	r2, r3
 800e37c:	4b12      	ldr	r3, [pc, #72]	; (800e3c8 <mix_sub_columns+0x288>)
 800e37e:	5c9a      	ldrb	r2, [r3, r2]
 800e380:	7d7b      	ldrb	r3, [r7, #21]
 800e382:	4619      	mov	r1, r3
 800e384:	4b11      	ldr	r3, [pc, #68]	; (800e3cc <mix_sub_columns+0x28c>)
 800e386:	5c5b      	ldrb	r3, [r3, r1]
 800e388:	4053      	eors	r3, r2
 800e38a:	b2da      	uxtb	r2, r3
 800e38c:	7abb      	ldrb	r3, [r7, #10]
 800e38e:	4619      	mov	r1, r3
 800e390:	4b0e      	ldr	r3, [pc, #56]	; (800e3cc <mix_sub_columns+0x28c>)
 800e392:	5c5b      	ldrb	r3, [r3, r1]
 800e394:	4053      	eors	r3, r2
 800e396:	b2d9      	uxtb	r1, r3
 800e398:	7bfb      	ldrb	r3, [r7, #15]
 800e39a:	461a      	mov	r2, r3
 800e39c:	4b09      	ldr	r3, [pc, #36]	; (800e3c4 <mix_sub_columns+0x284>)
 800e39e:	5c9a      	ldrb	r2, [r3, r2]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	330b      	adds	r3, #11
 800e3a4:	404a      	eors	r2, r1
 800e3a6:	b2d2      	uxtb	r2, r2
 800e3a8:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e3aa:	7d3b      	ldrb	r3, [r7, #20]
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	4b05      	ldr	r3, [pc, #20]	; (800e3c4 <mix_sub_columns+0x284>)
 800e3b0:	5c9a      	ldrb	r2, [r3, r2]
 800e3b2:	7a7b      	ldrb	r3, [r7, #9]
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	4b04      	ldr	r3, [pc, #16]	; (800e3c8 <mix_sub_columns+0x288>)
 800e3b8:	5c5b      	ldrb	r3, [r3, r1]
 800e3ba:	4053      	eors	r3, r2
 800e3bc:	b2da      	uxtb	r2, r3
 800e3be:	7bbb      	ldrb	r3, [r7, #14]
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	e005      	b.n	800e3d0 <mix_sub_columns+0x290>
 800e3c4:	08021c2c 	.word	0x08021c2c
 800e3c8:	08021d2c 	.word	0x08021d2c
 800e3cc:	08021b2c 	.word	0x08021b2c
 800e3d0:	4b2d      	ldr	r3, [pc, #180]	; (800e488 <mix_sub_columns+0x348>)
 800e3d2:	5c5b      	ldrb	r3, [r3, r1]
 800e3d4:	4053      	eors	r3, r2
 800e3d6:	b2d9      	uxtb	r1, r3
 800e3d8:	7cfb      	ldrb	r3, [r7, #19]
 800e3da:	461a      	mov	r2, r3
 800e3dc:	4b2a      	ldr	r3, [pc, #168]	; (800e488 <mix_sub_columns+0x348>)
 800e3de:	5c9a      	ldrb	r2, [r3, r2]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	330c      	adds	r3, #12
 800e3e4:	404a      	eors	r2, r1
 800e3e6:	b2d2      	uxtb	r2, r2
 800e3e8:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e3ea:	7d3b      	ldrb	r3, [r7, #20]
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	4b26      	ldr	r3, [pc, #152]	; (800e488 <mix_sub_columns+0x348>)
 800e3f0:	5c9a      	ldrb	r2, [r3, r2]
 800e3f2:	7a7b      	ldrb	r3, [r7, #9]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	4b25      	ldr	r3, [pc, #148]	; (800e48c <mix_sub_columns+0x34c>)
 800e3f8:	5c5b      	ldrb	r3, [r3, r1]
 800e3fa:	4053      	eors	r3, r2
 800e3fc:	b2da      	uxtb	r2, r3
 800e3fe:	7bbb      	ldrb	r3, [r7, #14]
 800e400:	4619      	mov	r1, r3
 800e402:	4b23      	ldr	r3, [pc, #140]	; (800e490 <mix_sub_columns+0x350>)
 800e404:	5c5b      	ldrb	r3, [r3, r1]
 800e406:	4053      	eors	r3, r2
 800e408:	b2d9      	uxtb	r1, r3
 800e40a:	7cfb      	ldrb	r3, [r7, #19]
 800e40c:	461a      	mov	r2, r3
 800e40e:	4b1e      	ldr	r3, [pc, #120]	; (800e488 <mix_sub_columns+0x348>)
 800e410:	5c9a      	ldrb	r2, [r3, r2]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	330d      	adds	r3, #13
 800e416:	404a      	eors	r2, r1
 800e418:	b2d2      	uxtb	r2, r2
 800e41a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e41c:	7d3b      	ldrb	r3, [r7, #20]
 800e41e:	461a      	mov	r2, r3
 800e420:	4b19      	ldr	r3, [pc, #100]	; (800e488 <mix_sub_columns+0x348>)
 800e422:	5c9a      	ldrb	r2, [r3, r2]
 800e424:	7a7b      	ldrb	r3, [r7, #9]
 800e426:	4619      	mov	r1, r3
 800e428:	4b17      	ldr	r3, [pc, #92]	; (800e488 <mix_sub_columns+0x348>)
 800e42a:	5c5b      	ldrb	r3, [r3, r1]
 800e42c:	4053      	eors	r3, r2
 800e42e:	b2da      	uxtb	r2, r3
 800e430:	7bbb      	ldrb	r3, [r7, #14]
 800e432:	4619      	mov	r1, r3
 800e434:	4b15      	ldr	r3, [pc, #84]	; (800e48c <mix_sub_columns+0x34c>)
 800e436:	5c5b      	ldrb	r3, [r3, r1]
 800e438:	4053      	eors	r3, r2
 800e43a:	b2d9      	uxtb	r1, r3
 800e43c:	7cfb      	ldrb	r3, [r7, #19]
 800e43e:	461a      	mov	r2, r3
 800e440:	4b13      	ldr	r3, [pc, #76]	; (800e490 <mix_sub_columns+0x350>)
 800e442:	5c9a      	ldrb	r2, [r3, r2]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	330e      	adds	r3, #14
 800e448:	404a      	eors	r2, r1
 800e44a:	b2d2      	uxtb	r2, r2
 800e44c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e44e:	7d3b      	ldrb	r3, [r7, #20]
 800e450:	461a      	mov	r2, r3
 800e452:	4b0f      	ldr	r3, [pc, #60]	; (800e490 <mix_sub_columns+0x350>)
 800e454:	5c9a      	ldrb	r2, [r3, r2]
 800e456:	7a7b      	ldrb	r3, [r7, #9]
 800e458:	4619      	mov	r1, r3
 800e45a:	4b0b      	ldr	r3, [pc, #44]	; (800e488 <mix_sub_columns+0x348>)
 800e45c:	5c5b      	ldrb	r3, [r3, r1]
 800e45e:	4053      	eors	r3, r2
 800e460:	b2da      	uxtb	r2, r3
 800e462:	7bbb      	ldrb	r3, [r7, #14]
 800e464:	4619      	mov	r1, r3
 800e466:	4b08      	ldr	r3, [pc, #32]	; (800e488 <mix_sub_columns+0x348>)
 800e468:	5c5b      	ldrb	r3, [r3, r1]
 800e46a:	4053      	eors	r3, r2
 800e46c:	b2d9      	uxtb	r1, r3
 800e46e:	7cfb      	ldrb	r3, [r7, #19]
 800e470:	461a      	mov	r2, r3
 800e472:	4b06      	ldr	r3, [pc, #24]	; (800e48c <mix_sub_columns+0x34c>)
 800e474:	5c9a      	ldrb	r2, [r3, r2]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	330f      	adds	r3, #15
 800e47a:	404a      	eors	r2, r1
 800e47c:	b2d2      	uxtb	r2, r2
 800e47e:	701a      	strb	r2, [r3, #0]
  }
 800e480:	bf00      	nop
 800e482:	3718      	adds	r7, #24
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	08021b2c 	.word	0x08021b2c
 800e48c:	08021c2c 	.word	0x08021c2c
 800e490:	08021d2c 	.word	0x08021d2c

0800e494 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b086      	sub	sp, #24
 800e498:	af00      	add	r7, sp, #0
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	460b      	mov	r3, r1
 800e49e:	607a      	str	r2, [r7, #4]
 800e4a0:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800e4a2:	7afb      	ldrb	r3, [r7, #11]
 800e4a4:	3b10      	subs	r3, #16
 800e4a6:	2b10      	cmp	r3, #16
 800e4a8:	bf8c      	ite	hi
 800e4aa:	2201      	movhi	r2, #1
 800e4ac:	2200      	movls	r2, #0
 800e4ae:	b2d2      	uxtb	r2, r2
 800e4b0:	2a00      	cmp	r2, #0
 800e4b2:	d10d      	bne.n	800e4d0 <lorawan_aes_set_key+0x3c>
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800e4ba:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800e4be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	bf14      	ite	ne
 800e4c6:	2301      	movne	r3, #1
 800e4c8:	2300      	moveq	r3, #0
 800e4ca:	b2db      	uxtb	r3, r3
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d105      	bne.n	800e4dc <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800e4d8:	23ff      	movs	r3, #255	; 0xff
 800e4da:	e0b2      	b.n	800e642 <lorawan_aes_set_key+0x1ae>
        break;
 800e4dc:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	7afa      	ldrb	r2, [r7, #11]
 800e4e2:	68f9      	ldr	r1, [r7, #12]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7ff fbfa 	bl	800dcde <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e4ea:	7afb      	ldrb	r3, [r7, #11]
 800e4ec:	331c      	adds	r3, #28
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	009b      	lsls	r3, r3, #2
 800e4f2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800e4f4:	7c7b      	ldrb	r3, [r7, #17]
 800e4f6:	091b      	lsrs	r3, r3, #4
 800e4f8:	b2db      	uxtb	r3, r3
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	b2da      	uxtb	r2, r3
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e504:	7afb      	ldrb	r3, [r7, #11]
 800e506:	75fb      	strb	r3, [r7, #23]
 800e508:	2301      	movs	r3, #1
 800e50a:	75bb      	strb	r3, [r7, #22]
 800e50c:	e093      	b.n	800e636 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800e50e:	7dfb      	ldrb	r3, [r7, #23]
 800e510:	3b04      	subs	r3, #4
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	5cd3      	ldrb	r3, [r2, r3]
 800e516:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800e518:	7dfb      	ldrb	r3, [r7, #23]
 800e51a:	3b03      	subs	r3, #3
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	5cd3      	ldrb	r3, [r2, r3]
 800e520:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800e522:	7dfb      	ldrb	r3, [r7, #23]
 800e524:	3b02      	subs	r3, #2
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	5cd3      	ldrb	r3, [r2, r3]
 800e52a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800e52c:	7dfb      	ldrb	r3, [r7, #23]
 800e52e:	3b01      	subs	r3, #1
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	5cd3      	ldrb	r3, [r2, r3]
 800e534:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800e536:	7dfb      	ldrb	r3, [r7, #23]
 800e538:	7afa      	ldrb	r2, [r7, #11]
 800e53a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e53e:	fb01 f202 	mul.w	r2, r1, r2
 800e542:	1a9b      	subs	r3, r3, r2
 800e544:	b2db      	uxtb	r3, r3
 800e546:	2b00      	cmp	r3, #0
 800e548:	d127      	bne.n	800e59a <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800e54a:	7d7b      	ldrb	r3, [r7, #21]
 800e54c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800e54e:	7d3b      	ldrb	r3, [r7, #20]
 800e550:	4a3e      	ldr	r2, [pc, #248]	; (800e64c <lorawan_aes_set_key+0x1b8>)
 800e552:	5cd2      	ldrb	r2, [r2, r3]
 800e554:	7dbb      	ldrb	r3, [r7, #22]
 800e556:	4053      	eors	r3, r2
 800e558:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800e55a:	7cfb      	ldrb	r3, [r7, #19]
 800e55c:	4a3b      	ldr	r2, [pc, #236]	; (800e64c <lorawan_aes_set_key+0x1b8>)
 800e55e:	5cd3      	ldrb	r3, [r2, r3]
 800e560:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800e562:	7cbb      	ldrb	r3, [r7, #18]
 800e564:	4a39      	ldr	r2, [pc, #228]	; (800e64c <lorawan_aes_set_key+0x1b8>)
 800e566:	5cd3      	ldrb	r3, [r2, r3]
 800e568:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800e56a:	7c3b      	ldrb	r3, [r7, #16]
 800e56c:	4a37      	ldr	r2, [pc, #220]	; (800e64c <lorawan_aes_set_key+0x1b8>)
 800e56e:	5cd3      	ldrb	r3, [r2, r3]
 800e570:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800e572:	7dbb      	ldrb	r3, [r7, #22]
 800e574:	005b      	lsls	r3, r3, #1
 800e576:	b25a      	sxtb	r2, r3
 800e578:	7dbb      	ldrb	r3, [r7, #22]
 800e57a:	09db      	lsrs	r3, r3, #7
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	4619      	mov	r1, r3
 800e580:	0049      	lsls	r1, r1, #1
 800e582:	440b      	add	r3, r1
 800e584:	4619      	mov	r1, r3
 800e586:	00c8      	lsls	r0, r1, #3
 800e588:	4619      	mov	r1, r3
 800e58a:	4603      	mov	r3, r0
 800e58c:	440b      	add	r3, r1
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	b25b      	sxtb	r3, r3
 800e592:	4053      	eors	r3, r2
 800e594:	b25b      	sxtb	r3, r3
 800e596:	75bb      	strb	r3, [r7, #22]
 800e598:	e01c      	b.n	800e5d4 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800e59a:	7afb      	ldrb	r3, [r7, #11]
 800e59c:	2b18      	cmp	r3, #24
 800e59e:	d919      	bls.n	800e5d4 <lorawan_aes_set_key+0x140>
 800e5a0:	7dfb      	ldrb	r3, [r7, #23]
 800e5a2:	7afa      	ldrb	r2, [r7, #11]
 800e5a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5a8:	fb01 f202 	mul.w	r2, r1, r2
 800e5ac:	1a9b      	subs	r3, r3, r2
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	2b10      	cmp	r3, #16
 800e5b2:	d10f      	bne.n	800e5d4 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800e5b4:	7d7b      	ldrb	r3, [r7, #21]
 800e5b6:	4a25      	ldr	r2, [pc, #148]	; (800e64c <lorawan_aes_set_key+0x1b8>)
 800e5b8:	5cd3      	ldrb	r3, [r2, r3]
 800e5ba:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800e5bc:	7d3b      	ldrb	r3, [r7, #20]
 800e5be:	4a23      	ldr	r2, [pc, #140]	; (800e64c <lorawan_aes_set_key+0x1b8>)
 800e5c0:	5cd3      	ldrb	r3, [r2, r3]
 800e5c2:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800e5c4:	7cfb      	ldrb	r3, [r7, #19]
 800e5c6:	4a21      	ldr	r2, [pc, #132]	; (800e64c <lorawan_aes_set_key+0x1b8>)
 800e5c8:	5cd3      	ldrb	r3, [r2, r3]
 800e5ca:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800e5cc:	7cbb      	ldrb	r3, [r7, #18]
 800e5ce:	4a1f      	ldr	r2, [pc, #124]	; (800e64c <lorawan_aes_set_key+0x1b8>)
 800e5d0:	5cd3      	ldrb	r3, [r2, r3]
 800e5d2:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800e5d4:	7dfa      	ldrb	r2, [r7, #23]
 800e5d6:	7afb      	ldrb	r3, [r7, #11]
 800e5d8:	1ad3      	subs	r3, r2, r3
 800e5da:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e5dc:	7c3b      	ldrb	r3, [r7, #16]
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	5cd1      	ldrb	r1, [r2, r3]
 800e5e2:	7dfb      	ldrb	r3, [r7, #23]
 800e5e4:	7d7a      	ldrb	r2, [r7, #21]
 800e5e6:	404a      	eors	r2, r1
 800e5e8:	b2d1      	uxtb	r1, r2
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e5ee:	7c3b      	ldrb	r3, [r7, #16]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	5cd1      	ldrb	r1, [r2, r3]
 800e5f6:	7dfb      	ldrb	r3, [r7, #23]
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	7d3a      	ldrb	r2, [r7, #20]
 800e5fc:	404a      	eors	r2, r1
 800e5fe:	b2d1      	uxtb	r1, r2
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e604:	7c3b      	ldrb	r3, [r7, #16]
 800e606:	3302      	adds	r3, #2
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	5cd1      	ldrb	r1, [r2, r3]
 800e60c:	7dfb      	ldrb	r3, [r7, #23]
 800e60e:	3302      	adds	r3, #2
 800e610:	7cfa      	ldrb	r2, [r7, #19]
 800e612:	404a      	eors	r2, r1
 800e614:	b2d1      	uxtb	r1, r2
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e61a:	7c3b      	ldrb	r3, [r7, #16]
 800e61c:	3303      	adds	r3, #3
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	5cd1      	ldrb	r1, [r2, r3]
 800e622:	7dfb      	ldrb	r3, [r7, #23]
 800e624:	3303      	adds	r3, #3
 800e626:	7cba      	ldrb	r2, [r7, #18]
 800e628:	404a      	eors	r2, r1
 800e62a:	b2d1      	uxtb	r1, r2
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e630:	7dfb      	ldrb	r3, [r7, #23]
 800e632:	3304      	adds	r3, #4
 800e634:	75fb      	strb	r3, [r7, #23]
 800e636:	7dfa      	ldrb	r2, [r7, #23]
 800e638:	7c7b      	ldrb	r3, [r7, #17]
 800e63a:	429a      	cmp	r2, r3
 800e63c:	f4ff af67 	bcc.w	800e50e <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800e640:	2300      	movs	r3, #0
}
 800e642:	4618      	mov	r0, r3
 800e644:	3718      	adds	r7, #24
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	08021b2c 	.word	0x08021b2c

0800e650 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b08a      	sub	sp, #40	; 0x28
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d038      	beq.n	800e6d8 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	f107 0314 	add.w	r3, r7, #20
 800e66c:	68f9      	ldr	r1, [r7, #12]
 800e66e:	4618      	mov	r0, r3
 800e670:	f7ff fc07 	bl	800de82 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e674:	2301      	movs	r3, #1
 800e676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e67a:	e014      	b.n	800e6a6 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e67c:	f107 0314 	add.w	r3, r7, #20
 800e680:	4618      	mov	r0, r3
 800e682:	f7ff fd5d 	bl	800e140 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e68c:	0112      	lsls	r2, r2, #4
 800e68e:	441a      	add	r2, r3
 800e690:	f107 0314 	add.w	r3, r7, #20
 800e694:	4611      	mov	r1, r2
 800e696:	4618      	mov	r0, r3
 800e698:	f7ff fcab 	bl	800dff2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e69c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e6ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d3e3      	bcc.n	800e67c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e6b4:	f107 0314 	add.w	r3, r7, #20
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7ff fca7 	bl	800e00c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e6c4:	0112      	lsls	r2, r2, #4
 800e6c6:	441a      	add	r2, r3
 800e6c8:	f107 0314 	add.w	r3, r7, #20
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	68b8      	ldr	r0, [r7, #8]
 800e6d0:	f7ff fbd7 	bl	800de82 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	e000      	b.n	800e6da <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800e6d8:	23ff      	movs	r3, #255	; 0xff
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3728      	adds	r7, #40	; 0x28
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
	...

0800e6e4 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800e6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6e6:	b0a1      	sub	sp, #132	; 0x84
 800e6e8:	af12      	add	r7, sp, #72	; 0x48
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800e6f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e6f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6f8:	4611      	mov	r1, r2
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f000 fa12 	bl	800eb24 <SecureElementGetKeyByID>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	d174      	bne.n	800e7f0 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e706:	2300      	movs	r3, #0
 800e708:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e70c:	e06c      	b.n	800e7e8 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800e70e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e712:	4939      	ldr	r1, [pc, #228]	; (800e7f8 <PrintKey+0x114>)
 800e714:	4613      	mov	r3, r2
 800e716:	005b      	lsls	r3, r3, #1
 800e718:	4413      	add	r3, r2
 800e71a:	009b      	lsls	r3, r3, #2
 800e71c:	440b      	add	r3, r1
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e724:	429a      	cmp	r2, r3
 800e726:	d15a      	bne.n	800e7de <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800e728:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e72c:	4932      	ldr	r1, [pc, #200]	; (800e7f8 <PrintKey+0x114>)
 800e72e:	4613      	mov	r3, r2
 800e730:	005b      	lsls	r3, r3, #1
 800e732:	4413      	add	r3, r2
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	440b      	add	r3, r1
 800e738:	3308      	adds	r3, #8
 800e73a:	6819      	ldr	r1, [r3, #0]
 800e73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73e:	785b      	ldrb	r3, [r3, #1]
 800e740:	461d      	mov	r5, r3
 800e742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e744:	789b      	ldrb	r3, [r3, #2]
 800e746:	461e      	mov	r6, r3
 800e748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74a:	78db      	ldrb	r3, [r3, #3]
 800e74c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e750:	791b      	ldrb	r3, [r3, #4]
 800e752:	627b      	str	r3, [r7, #36]	; 0x24
 800e754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e756:	795b      	ldrb	r3, [r3, #5]
 800e758:	623b      	str	r3, [r7, #32]
 800e75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75c:	799b      	ldrb	r3, [r3, #6]
 800e75e:	61fb      	str	r3, [r7, #28]
 800e760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e762:	79db      	ldrb	r3, [r3, #7]
 800e764:	61bb      	str	r3, [r7, #24]
 800e766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e768:	7a1b      	ldrb	r3, [r3, #8]
 800e76a:	617b      	str	r3, [r7, #20]
 800e76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76e:	7a5b      	ldrb	r3, [r3, #9]
 800e770:	613b      	str	r3, [r7, #16]
 800e772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e774:	7a9b      	ldrb	r3, [r3, #10]
 800e776:	60fb      	str	r3, [r7, #12]
 800e778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77a:	7adb      	ldrb	r3, [r3, #11]
 800e77c:	60bb      	str	r3, [r7, #8]
 800e77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e780:	7b1b      	ldrb	r3, [r3, #12]
 800e782:	607b      	str	r3, [r7, #4]
 800e784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e786:	7b5b      	ldrb	r3, [r3, #13]
 800e788:	461c      	mov	r4, r3
 800e78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e78c:	7b9b      	ldrb	r3, [r3, #14]
 800e78e:	4618      	mov	r0, r3
 800e790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e792:	7bdb      	ldrb	r3, [r3, #15]
 800e794:	461a      	mov	r2, r3
 800e796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e798:	7c1b      	ldrb	r3, [r3, #16]
 800e79a:	9310      	str	r3, [sp, #64]	; 0x40
 800e79c:	920f      	str	r2, [sp, #60]	; 0x3c
 800e79e:	900e      	str	r0, [sp, #56]	; 0x38
 800e7a0:	940d      	str	r4, [sp, #52]	; 0x34
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	920c      	str	r2, [sp, #48]	; 0x30
 800e7a6:	68ba      	ldr	r2, [r7, #8]
 800e7a8:	920b      	str	r2, [sp, #44]	; 0x2c
 800e7aa:	68fa      	ldr	r2, [r7, #12]
 800e7ac:	920a      	str	r2, [sp, #40]	; 0x28
 800e7ae:	693a      	ldr	r2, [r7, #16]
 800e7b0:	9209      	str	r2, [sp, #36]	; 0x24
 800e7b2:	697a      	ldr	r2, [r7, #20]
 800e7b4:	9208      	str	r2, [sp, #32]
 800e7b6:	69ba      	ldr	r2, [r7, #24]
 800e7b8:	9207      	str	r2, [sp, #28]
 800e7ba:	69fa      	ldr	r2, [r7, #28]
 800e7bc:	9206      	str	r2, [sp, #24]
 800e7be:	6a3a      	ldr	r2, [r7, #32]
 800e7c0:	9205      	str	r2, [sp, #20]
 800e7c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7c4:	9204      	str	r2, [sp, #16]
 800e7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c8:	9303      	str	r3, [sp, #12]
 800e7ca:	9602      	str	r6, [sp, #8]
 800e7cc:	9501      	str	r5, [sp, #4]
 800e7ce:	9100      	str	r1, [sp, #0]
 800e7d0:	4b0a      	ldr	r3, [pc, #40]	; (800e7fc <PrintKey+0x118>)
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	2002      	movs	r0, #2
 800e7d8:	f011 fa3c 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
 800e7dc:	e008      	b.n	800e7f0 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e7de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e7e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e7ec:	2b0a      	cmp	r3, #10
 800e7ee:	d98e      	bls.n	800e70e <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800e7f0:	373c      	adds	r7, #60	; 0x3c
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	08021e2c 	.word	0x08021e2c
 800e7fc:	080216b0 	.word	0x080216b0

0800e800 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800e800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e802:	b091      	sub	sp, #68	; 0x44
 800e804:	af08      	add	r7, sp, #32
 800e806:	4603      	mov	r3, r0
 800e808:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800e80a:	2300      	movs	r3, #0
 800e80c:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800e80e:	f107 0310 	add.w	r3, r7, #16
 800e812:	4618      	mov	r0, r3
 800e814:	f000 fbda 	bl	800efcc <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800e818:	7c3b      	ldrb	r3, [r7, #16]
 800e81a:	7c7a      	ldrb	r2, [r7, #17]
 800e81c:	7cb9      	ldrb	r1, [r7, #18]
 800e81e:	7cf8      	ldrb	r0, [r7, #19]
 800e820:	7d3c      	ldrb	r4, [r7, #20]
 800e822:	7d7d      	ldrb	r5, [r7, #21]
 800e824:	7dbe      	ldrb	r6, [r7, #22]
 800e826:	f897 c017 	ldrb.w	ip, [r7, #23]
 800e82a:	f8cd c01c 	str.w	ip, [sp, #28]
 800e82e:	9606      	str	r6, [sp, #24]
 800e830:	9505      	str	r5, [sp, #20]
 800e832:	9404      	str	r4, [sp, #16]
 800e834:	9003      	str	r0, [sp, #12]
 800e836:	9102      	str	r1, [sp, #8]
 800e838:	9201      	str	r2, [sp, #4]
 800e83a:	9300      	str	r3, [sp, #0]
 800e83c:	4b24      	ldr	r3, [pc, #144]	; (800e8d0 <PrintIds+0xd0>)
 800e83e:	2200      	movs	r2, #0
 800e840:	2100      	movs	r1, #0
 800e842:	2002      	movs	r0, #2
 800e844:	f011 fa06 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800e848:	f107 0318 	add.w	r3, r7, #24
 800e84c:	4618      	mov	r0, r3
 800e84e:	f000 fbed 	bl	800f02c <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800e852:	7e3b      	ldrb	r3, [r7, #24]
 800e854:	7e7a      	ldrb	r2, [r7, #25]
 800e856:	7eb9      	ldrb	r1, [r7, #26]
 800e858:	7ef8      	ldrb	r0, [r7, #27]
 800e85a:	7f3c      	ldrb	r4, [r7, #28]
 800e85c:	7f7d      	ldrb	r5, [r7, #29]
 800e85e:	7fbe      	ldrb	r6, [r7, #30]
 800e860:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800e864:	f8cd c01c 	str.w	ip, [sp, #28]
 800e868:	9606      	str	r6, [sp, #24]
 800e86a:	9505      	str	r5, [sp, #20]
 800e86c:	9404      	str	r4, [sp, #16]
 800e86e:	9003      	str	r0, [sp, #12]
 800e870:	9102      	str	r1, [sp, #8]
 800e872:	9201      	str	r2, [sp, #4]
 800e874:	9300      	str	r3, [sp, #0]
 800e876:	4b17      	ldr	r3, [pc, #92]	; (800e8d4 <PrintIds+0xd4>)
 800e878:	2200      	movs	r2, #0
 800e87a:	2100      	movs	r1, #0
 800e87c:	2002      	movs	r0, #2
 800e87e:	f011 f9e9 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800e882:	f107 020c 	add.w	r2, r7, #12
 800e886:	79fb      	ldrb	r3, [r7, #7]
 800e888:	4611      	mov	r1, r2
 800e88a:	4618      	mov	r0, r3
 800e88c:	f000 fc00 	bl	800f090 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800e890:	f107 030c 	add.w	r3, r7, #12
 800e894:	3303      	adds	r3, #3
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	461a      	mov	r2, r3
 800e89a:	f107 030c 	add.w	r3, r7, #12
 800e89e:	3302      	adds	r3, #2
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	f107 030c 	add.w	r3, r7, #12
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f107 030c 	add.w	r3, r7, #12
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	9303      	str	r3, [sp, #12]
 800e8b6:	9002      	str	r0, [sp, #8]
 800e8b8:	9101      	str	r1, [sp, #4]
 800e8ba:	9200      	str	r2, [sp, #0]
 800e8bc:	4b06      	ldr	r3, [pc, #24]	; (800e8d8 <PrintIds+0xd8>)
 800e8be:	2200      	movs	r2, #0
 800e8c0:	2100      	movs	r1, #0
 800e8c2:	2002      	movs	r0, #2
 800e8c4:	f011 f9c6 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800e8c8:	bf00      	nop
 800e8ca:	3724      	adds	r7, #36	; 0x24
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8d0:	0802170c 	.word	0x0802170c
 800e8d4:	0802174c 	.word	0x0802174c
 800e8d8:	0802178c 	.word	0x0802178c

0800e8dc <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b085      	sub	sp, #20
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	6039      	str	r1, [r7, #0]
 800e8e6:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	73fb      	strb	r3, [r7, #15]
 800e8ec:	e01a      	b.n	800e924 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e8ee:	4b12      	ldr	r3, [pc, #72]	; (800e938 <GetKeyByID+0x5c>)
 800e8f0:	6819      	ldr	r1, [r3, #0]
 800e8f2:	7bfa      	ldrb	r2, [r7, #15]
 800e8f4:	4613      	mov	r3, r2
 800e8f6:	011b      	lsls	r3, r3, #4
 800e8f8:	4413      	add	r3, r2
 800e8fa:	440b      	add	r3, r1
 800e8fc:	3318      	adds	r3, #24
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	79fa      	ldrb	r2, [r7, #7]
 800e902:	429a      	cmp	r2, r3
 800e904:	d10b      	bne.n	800e91e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800e906:	4b0c      	ldr	r3, [pc, #48]	; (800e938 <GetKeyByID+0x5c>)
 800e908:	6819      	ldr	r1, [r3, #0]
 800e90a:	7bfa      	ldrb	r2, [r7, #15]
 800e90c:	4613      	mov	r3, r2
 800e90e:	011b      	lsls	r3, r3, #4
 800e910:	4413      	add	r3, r2
 800e912:	3318      	adds	r3, #24
 800e914:	18ca      	adds	r2, r1, r3
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e91a:	2300      	movs	r3, #0
 800e91c:	e006      	b.n	800e92c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e91e:	7bfb      	ldrb	r3, [r7, #15]
 800e920:	3301      	adds	r3, #1
 800e922:	73fb      	strb	r3, [r7, #15]
 800e924:	7bfb      	ldrb	r3, [r7, #15]
 800e926:	2b0a      	cmp	r3, #10
 800e928:	d9e1      	bls.n	800e8ee <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e92a:	2303      	movs	r3, #3
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3714      	adds	r7, #20
 800e930:	46bd      	mov	sp, r7
 800e932:	bc80      	pop	{r7}
 800e934:	4770      	bx	lr
 800e936:	bf00      	nop
 800e938:	20000560 	.word	0x20000560

0800e93c <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800e93c:	b590      	push	{r4, r7, lr}
 800e93e:	b0d1      	sub	sp, #324	; 0x144
 800e940:	af00      	add	r7, sp, #0
 800e942:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800e946:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800e94a:	6020      	str	r0, [r4, #0]
 800e94c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800e950:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800e954:	6001      	str	r1, [r0, #0]
 800e956:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800e95a:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800e95e:	600a      	str	r2, [r1, #0]
 800e960:	461a      	mov	r2, r3
 800e962:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e966:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800e96a:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800e96c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e970:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d003      	beq.n	800e982 <ComputeCmac+0x46>
 800e97a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d101      	bne.n	800e986 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e982:	2302      	movs	r3, #2
 800e984:	e05d      	b.n	800ea42 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800e986:	f107 0314 	add.w	r3, r7, #20
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fe ff02 	bl	800d794 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800e990:	f107 0210 	add.w	r2, r7, #16
 800e994:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e998:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	4611      	mov	r1, r2
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7ff ff9b 	bl	800e8dc <GetKeyByID>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e9ac:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d144      	bne.n	800ea3e <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800e9b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e9b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	1c5a      	adds	r2, r3, #1
 800e9c0:	f107 0314 	add.w	r3, r7, #20
 800e9c4:	4611      	mov	r1, r2
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7fe fefd 	bl	800d7c6 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800e9cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e9d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d009      	beq.n	800e9ee <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800e9da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e9de:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e9e2:	f107 0014 	add.w	r0, r7, #20
 800e9e6:	2210      	movs	r2, #16
 800e9e8:	6819      	ldr	r1, [r3, #0]
 800e9ea:	f7fe fefb 	bl	800d7e4 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800e9ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e9f2:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800e9f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e9fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e9fe:	f107 0014 	add.w	r0, r7, #20
 800ea02:	6812      	ldr	r2, [r2, #0]
 800ea04:	6819      	ldr	r1, [r3, #0]
 800ea06:	f7fe feed 	bl	800d7e4 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ea0a:	f107 0214 	add.w	r2, r7, #20
 800ea0e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ea12:	4611      	mov	r1, r2
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7fe ffa7 	bl	800d968 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800ea1a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800ea1e:	461a      	mov	r2, r3
 800ea20:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800ea24:	021b      	lsls	r3, r3, #8
 800ea26:	431a      	orrs	r2, r3
 800ea28:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800ea2c:	041b      	lsls	r3, r3, #16
 800ea2e:	431a      	orrs	r2, r3
 800ea30:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800ea34:	061b      	lsls	r3, r3, #24
 800ea36:	431a      	orrs	r2, r3
 800ea38:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ea3c:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800ea3e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd90      	pop	{r4, r7, pc}

0800ea4c <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d101      	bne.n	800ea5e <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ea5a:	2302      	movs	r3, #2
 800ea5c:	e00a      	b.n	800ea74 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800ea5e:	4a07      	ldr	r2, [pc, #28]	; (800ea7c <SecureElementInit+0x30>)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800ea64:	4b05      	ldr	r3, [pc, #20]	; (800ea7c <SecureElementInit+0x30>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	22d8      	movs	r2, #216	; 0xd8
 800ea6a:	4905      	ldr	r1, [pc, #20]	; (800ea80 <SecureElementInit+0x34>)
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f00c fe88 	bl	801b782 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3708      	adds	r7, #8
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}
 800ea7c:	20000560 	.word	0x20000560
 800ea80:	08022100 	.word	0x08022100

0800ea84 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b086      	sub	sp, #24
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800ea92:	f107 030c 	add.w	r3, r7, #12
 800ea96:	4618      	mov	r0, r3
 800ea98:	f000 fa98 	bl	800efcc <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800ea9c:	f107 0308 	add.w	r3, r7, #8
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	2001      	movs	r0, #1
 800eaa4:	f000 faf4 	bl	800f090 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d024      	beq.n	800eaf8 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800eaae:	2300      	movs	r3, #0
 800eab0:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800eab2:	2300      	movs	r3, #0
 800eab4:	75bb      	strb	r3, [r7, #22]
 800eab6:	e00c      	b.n	800ead2 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800eab8:	7dbb      	ldrb	r3, [r7, #22]
 800eaba:	3318      	adds	r3, #24
 800eabc:	443b      	add	r3, r7
 800eabe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d002      	beq.n	800eacc <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800eac6:	2301      	movs	r3, #1
 800eac8:	75fb      	strb	r3, [r7, #23]
                break;
 800eaca:	e005      	b.n	800ead8 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800eacc:	7dbb      	ldrb	r3, [r7, #22]
 800eace:	3301      	adds	r3, #1
 800ead0:	75bb      	strb	r3, [r7, #22]
 800ead2:	7dbb      	ldrb	r3, [r7, #22]
 800ead4:	2b07      	cmp	r3, #7
 800ead6:	d9ef      	bls.n	800eab8 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800ead8:	7dfb      	ldrb	r3, [r7, #23]
 800eada:	f083 0301 	eor.w	r3, r3, #1
 800eade:	b2db      	uxtb	r3, r3
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d009      	beq.n	800eaf8 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800eae4:	f107 020c 	add.w	r2, r7, #12
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	4610      	mov	r0, r2
 800eaec:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800eaee:	f107 030c 	add.w	r3, r7, #12
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f000 fa52 	bl	800ef9c <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d00c      	beq.n	800eb18 <SecureElementInitMcuID+0x94>
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d109      	bne.n	800eb18 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800eb04:	f107 0208 	add.w	r2, r7, #8
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	4610      	mov	r0, r2
 800eb0c:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	4619      	mov	r1, r3
 800eb12:	2001      	movs	r0, #1
 800eb14:	f000 faa2 	bl	800f05c <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800eb18:	2300      	movs	r3, #0
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3718      	adds	r7, #24
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
	...

0800eb24 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800eb24:	b480      	push	{r7}
 800eb26:	b085      	sub	sp, #20
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	6039      	str	r1, [r7, #0]
 800eb2e:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eb30:	2300      	movs	r3, #0
 800eb32:	73fb      	strb	r3, [r7, #15]
 800eb34:	e01a      	b.n	800eb6c <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800eb36:	4b12      	ldr	r3, [pc, #72]	; (800eb80 <SecureElementGetKeyByID+0x5c>)
 800eb38:	6819      	ldr	r1, [r3, #0]
 800eb3a:	7bfa      	ldrb	r2, [r7, #15]
 800eb3c:	4613      	mov	r3, r2
 800eb3e:	011b      	lsls	r3, r3, #4
 800eb40:	4413      	add	r3, r2
 800eb42:	440b      	add	r3, r1
 800eb44:	3318      	adds	r3, #24
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	79fa      	ldrb	r2, [r7, #7]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d10b      	bne.n	800eb66 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800eb4e:	4b0c      	ldr	r3, [pc, #48]	; (800eb80 <SecureElementGetKeyByID+0x5c>)
 800eb50:	6819      	ldr	r1, [r3, #0]
 800eb52:	7bfa      	ldrb	r2, [r7, #15]
 800eb54:	4613      	mov	r3, r2
 800eb56:	011b      	lsls	r3, r3, #4
 800eb58:	4413      	add	r3, r2
 800eb5a:	3318      	adds	r3, #24
 800eb5c:	18ca      	adds	r2, r1, r3
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800eb62:	2300      	movs	r3, #0
 800eb64:	e006      	b.n	800eb74 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eb66:	7bfb      	ldrb	r3, [r7, #15]
 800eb68:	3301      	adds	r3, #1
 800eb6a:	73fb      	strb	r3, [r7, #15]
 800eb6c:	7bfb      	ldrb	r3, [r7, #15]
 800eb6e:	2b0a      	cmp	r3, #10
 800eb70:	d9e1      	bls.n	800eb36 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eb72:	2303      	movs	r3, #3
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3714      	adds	r7, #20
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bc80      	pop	{r7}
 800eb7c:	4770      	bx	lr
 800eb7e:	bf00      	nop
 800eb80:	20000560 	.word	0x20000560

0800eb84 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800eb88:	2000      	movs	r0, #0
 800eb8a:	f7ff fdab 	bl	800e6e4 <PrintKey>
    PrintKey( NWK_KEY );
 800eb8e:	2001      	movs	r0, #1
 800eb90:	f7ff fda8 	bl	800e6e4 <PrintKey>
    PrintKey( APP_S_KEY );
 800eb94:	2009      	movs	r0, #9
 800eb96:	f7ff fda5 	bl	800e6e4 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800eb9a:	2008      	movs	r0, #8
 800eb9c:	f7ff fda2 	bl	800e6e4 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800eba0:	2000      	movs	r0, #0
 800eba2:	f7ff fe2d 	bl	800e800 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800eba6:	2300      	movs	r3, #0
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800ebb6:	200b      	movs	r0, #11
 800ebb8:	f7ff fd94 	bl	800e6e4 <PrintKey>
    PrintKey( MC_KE_KEY );
 800ebbc:	200c      	movs	r0, #12
 800ebbe:	f7ff fd91 	bl	800e6e4 <PrintKey>
    PrintKey( APP_S_KEY );
 800ebc2:	2009      	movs	r0, #9
 800ebc4:	f7ff fd8e 	bl	800e6e4 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800ebc8:	2008      	movs	r0, #8
 800ebca:	f7ff fd8b 	bl	800e6e4 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800ebce:	200a      	movs	r0, #10
 800ebd0:	f7ff fd88 	bl	800e6e4 <PrintKey>
    PrintIds( mode );
 800ebd4:	79fb      	ldrb	r3, [r7, #7]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7ff fe12 	bl	800e800 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800ebdc:	2300      	movs	r3, #0
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3708      	adds	r7, #8
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
	...

0800ebe8 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b088      	sub	sp, #32
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	4603      	mov	r3, r0
 800ebf0:	6039      	str	r1, [r7, #0]
 800ebf2:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d101      	bne.n	800ebfe <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ebfa:	2302      	movs	r3, #2
 800ebfc:	e04c      	b.n	800ec98 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ebfe:	2300      	movs	r3, #0
 800ec00:	77fb      	strb	r3, [r7, #31]
 800ec02:	e045      	b.n	800ec90 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ec04:	4b26      	ldr	r3, [pc, #152]	; (800eca0 <SecureElementSetKey+0xb8>)
 800ec06:	6819      	ldr	r1, [r3, #0]
 800ec08:	7ffa      	ldrb	r2, [r7, #31]
 800ec0a:	4613      	mov	r3, r2
 800ec0c:	011b      	lsls	r3, r3, #4
 800ec0e:	4413      	add	r3, r2
 800ec10:	440b      	add	r3, r1
 800ec12:	3318      	adds	r3, #24
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	79fa      	ldrb	r2, [r7, #7]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d136      	bne.n	800ec8a <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800ec1c:	79fb      	ldrb	r3, [r7, #7]
 800ec1e:	2b0d      	cmp	r3, #13
 800ec20:	d123      	bne.n	800ec6a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800ec22:	2306      	movs	r3, #6
 800ec24:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800ec26:	2300      	movs	r3, #0
 800ec28:	60fb      	str	r3, [r7, #12]
 800ec2a:	f107 0310 	add.w	r3, r7, #16
 800ec2e:	2200      	movs	r2, #0
 800ec30:	601a      	str	r2, [r3, #0]
 800ec32:	605a      	str	r2, [r3, #4]
 800ec34:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800ec36:	f107 030c 	add.w	r3, r7, #12
 800ec3a:	220c      	movs	r2, #12
 800ec3c:	2110      	movs	r1, #16
 800ec3e:	6838      	ldr	r0, [r7, #0]
 800ec40:	f000 f876 	bl	800ed30 <SecureElementAesEncrypt>
 800ec44:	4603      	mov	r3, r0
 800ec46:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800ec48:	4b15      	ldr	r3, [pc, #84]	; (800eca0 <SecureElementSetKey+0xb8>)
 800ec4a:	6819      	ldr	r1, [r3, #0]
 800ec4c:	7ffa      	ldrb	r2, [r7, #31]
 800ec4e:	4613      	mov	r3, r2
 800ec50:	011b      	lsls	r3, r3, #4
 800ec52:	4413      	add	r3, r2
 800ec54:	3318      	adds	r3, #24
 800ec56:	440b      	add	r3, r1
 800ec58:	3301      	adds	r3, #1
 800ec5a:	f107 010c 	add.w	r1, r7, #12
 800ec5e:	2210      	movs	r2, #16
 800ec60:	4618      	mov	r0, r3
 800ec62:	f00c fd8e 	bl	801b782 <memcpy1>
                return retval;
 800ec66:	7fbb      	ldrb	r3, [r7, #30]
 800ec68:	e016      	b.n	800ec98 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800ec6a:	4b0d      	ldr	r3, [pc, #52]	; (800eca0 <SecureElementSetKey+0xb8>)
 800ec6c:	6819      	ldr	r1, [r3, #0]
 800ec6e:	7ffa      	ldrb	r2, [r7, #31]
 800ec70:	4613      	mov	r3, r2
 800ec72:	011b      	lsls	r3, r3, #4
 800ec74:	4413      	add	r3, r2
 800ec76:	3318      	adds	r3, #24
 800ec78:	440b      	add	r3, r1
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	2210      	movs	r2, #16
 800ec7e:	6839      	ldr	r1, [r7, #0]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f00c fd7e 	bl	801b782 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800ec86:	2300      	movs	r3, #0
 800ec88:	e006      	b.n	800ec98 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ec8a:	7ffb      	ldrb	r3, [r7, #31]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	77fb      	strb	r3, [r7, #31]
 800ec90:	7ffb      	ldrb	r3, [r7, #31]
 800ec92:	2b0a      	cmp	r3, #10
 800ec94:	d9b6      	bls.n	800ec04 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ec96:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3720      	adds	r7, #32
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}
 800eca0:	20000560 	.word	0x20000560

0800eca4 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b086      	sub	sp, #24
 800eca8:	af02      	add	r7, sp, #8
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	607a      	str	r2, [r7, #4]
 800ecb0:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800ecb2:	78fb      	ldrb	r3, [r7, #3]
 800ecb4:	2b0b      	cmp	r3, #11
 800ecb6:	d901      	bls.n	800ecbc <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ecb8:	2303      	movs	r3, #3
 800ecba:	e009      	b.n	800ecd0 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800ecbc:	78fa      	ldrb	r2, [r7, #3]
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	9300      	str	r3, [sp, #0]
 800ecc2:	4613      	mov	r3, r2
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	68b9      	ldr	r1, [r7, #8]
 800ecc8:	68f8      	ldr	r0, [r7, #12]
 800ecca:	f7ff fe37 	bl	800e93c <ComputeCmac>
 800ecce:	4603      	mov	r3, r0
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3710      	adds	r7, #16
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b088      	sub	sp, #32
 800ecdc:	af02      	add	r7, sp, #8
 800ecde:	60f8      	str	r0, [r7, #12]
 800ece0:	60b9      	str	r1, [r7, #8]
 800ece2:	607a      	str	r2, [r7, #4]
 800ece4:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d101      	bne.n	800ecf0 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ecec:	2302      	movs	r3, #2
 800ecee:	e01b      	b.n	800ed28 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800ecf0:	2306      	movs	r3, #6
 800ecf2:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800ecf8:	78fa      	ldrb	r2, [r7, #3]
 800ecfa:	f107 0310 	add.w	r3, r7, #16
 800ecfe:	9300      	str	r3, [sp, #0]
 800ed00:	4613      	mov	r3, r2
 800ed02:	68ba      	ldr	r2, [r7, #8]
 800ed04:	68f9      	ldr	r1, [r7, #12]
 800ed06:	2000      	movs	r0, #0
 800ed08:	f7ff fe18 	bl	800e93c <ComputeCmac>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ed10:	7dfb      	ldrb	r3, [r7, #23]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d001      	beq.n	800ed1a <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800ed16:	7dfb      	ldrb	r3, [r7, #23]
 800ed18:	e006      	b.n	800ed28 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d001      	beq.n	800ed26 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800ed22:	2301      	movs	r3, #1
 800ed24:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800ed26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3718      	adds	r7, #24
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b0c2      	sub	sp, #264	; 0x108
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ed3c:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800ed40:	6001      	str	r1, [r0, #0]
 800ed42:	4611      	mov	r1, r2
 800ed44:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800ed48:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800ed4c:	6013      	str	r3, [r2, #0]
 800ed4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed52:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800ed56:	460a      	mov	r2, r1
 800ed58:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d006      	beq.n	800ed6e <SecureElementAesEncrypt+0x3e>
 800ed60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d101      	bne.n	800ed72 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ed6e:	2302      	movs	r3, #2
 800ed70:	e059      	b.n	800ee26 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800ed72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed76:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f003 030f 	and.w	r3, r3, #15
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d001      	beq.n	800ed88 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ed84:	2305      	movs	r3, #5
 800ed86:	e04e      	b.n	800ee26 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800ed88:	f107 0314 	add.w	r3, r7, #20
 800ed8c:	22f0      	movs	r2, #240	; 0xf0
 800ed8e:	2100      	movs	r1, #0
 800ed90:	4618      	mov	r0, r3
 800ed92:	f00c fd31 	bl	801b7f8 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800ed96:	f107 0210 	add.w	r2, r7, #16
 800ed9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed9e:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	4611      	mov	r1, r2
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7ff fd98 	bl	800e8dc <GetKeyByID>
 800edac:	4603      	mov	r3, r0
 800edae:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800edb2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d133      	bne.n	800ee22 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	3301      	adds	r3, #1
 800edbe:	f107 0214 	add.w	r2, r7, #20
 800edc2:	2110      	movs	r1, #16
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7ff fb65 	bl	800e494 <lorawan_aes_set_key>

        uint8_t block = 0;
 800edca:	2300      	movs	r3, #0
 800edcc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800edd0:	e020      	b.n	800ee14 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800edd2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800edd6:	68fa      	ldr	r2, [r7, #12]
 800edd8:	18d0      	adds	r0, r2, r3
 800edda:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800edde:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800ede2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800ede6:	6812      	ldr	r2, [r2, #0]
 800ede8:	4413      	add	r3, r2
 800edea:	f107 0214 	add.w	r2, r7, #20
 800edee:	4619      	mov	r1, r3
 800edf0:	f7ff fc2e 	bl	800e650 <lorawan_aes_encrypt>
            block = block + 16;
 800edf4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800edf8:	3310      	adds	r3, #16
 800edfa:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800edfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee02:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ee06:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800ee0a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800ee0e:	6812      	ldr	r2, [r2, #0]
 800ee10:	3a10      	subs	r2, #16
 800ee12:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800ee14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee18:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d1d7      	bne.n	800edd2 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800ee22:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}

0800ee30 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b088      	sub	sp, #32
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	460b      	mov	r3, r1
 800ee3a:	70fb      	strb	r3, [r7, #3]
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d101      	bne.n	800ee4a <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ee46:	2302      	movs	r3, #2
 800ee48:	e02e      	b.n	800eea8 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800ee4a:	2306      	movs	r3, #6
 800ee4c:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800ee4e:	78bb      	ldrb	r3, [r7, #2]
 800ee50:	2b0c      	cmp	r3, #12
 800ee52:	d104      	bne.n	800ee5e <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800ee54:	78fb      	ldrb	r3, [r7, #3]
 800ee56:	2b0b      	cmp	r3, #11
 800ee58:	d001      	beq.n	800ee5e <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ee5a:	2303      	movs	r3, #3
 800ee5c:	e024      	b.n	800eea8 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800ee5e:	2300      	movs	r3, #0
 800ee60:	60fb      	str	r3, [r7, #12]
 800ee62:	f107 0310 	add.w	r3, r7, #16
 800ee66:	2200      	movs	r2, #0
 800ee68:	601a      	str	r2, [r3, #0]
 800ee6a:	605a      	str	r2, [r3, #4]
 800ee6c:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800ee6e:	f107 030c 	add.w	r3, r7, #12
 800ee72:	78fa      	ldrb	r2, [r7, #3]
 800ee74:	2110      	movs	r1, #16
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f7ff ff5a 	bl	800ed30 <SecureElementAesEncrypt>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ee80:	7ffb      	ldrb	r3, [r7, #31]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d001      	beq.n	800ee8a <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800ee86:	7ffb      	ldrb	r3, [r7, #31]
 800ee88:	e00e      	b.n	800eea8 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800ee8a:	f107 020c 	add.w	r2, r7, #12
 800ee8e:	78bb      	ldrb	r3, [r7, #2]
 800ee90:	4611      	mov	r1, r2
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7ff fea8 	bl	800ebe8 <SecureElementSetKey>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ee9c:	7ffb      	ldrb	r3, [r7, #31]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d001      	beq.n	800eea6 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800eea2:	7ffb      	ldrb	r3, [r7, #31]
 800eea4:	e000      	b.n	800eea8 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800eea6:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3720      	adds	r7, #32
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}

0800eeb0 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b086      	sub	sp, #24
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	60b9      	str	r1, [r7, #8]
 800eeb8:	607b      	str	r3, [r7, #4]
 800eeba:	4603      	mov	r3, r0
 800eebc:	73fb      	strb	r3, [r7, #15]
 800eebe:	4613      	mov	r3, r2
 800eec0:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d005      	beq.n	800eed4 <SecureElementProcessJoinAccept+0x24>
 800eec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d002      	beq.n	800eed4 <SecureElementProcessJoinAccept+0x24>
 800eece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d101      	bne.n	800eed8 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eed4:	2302      	movs	r3, #2
 800eed6:	e05c      	b.n	800ef92 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800eed8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eedc:	2b21      	cmp	r3, #33	; 0x21
 800eede:	d901      	bls.n	800eee4 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800eee0:	2305      	movs	r3, #5
 800eee2:	e056      	b.n	800ef92 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800eee4:	2301      	movs	r3, #1
 800eee6:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800eee8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	461a      	mov	r2, r3
 800eef0:	6879      	ldr	r1, [r7, #4]
 800eef2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eef4:	f00c fc45 	bl	801b782 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	1c58      	adds	r0, r3, #1
 800eefc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef00:	3b01      	subs	r3, #1
 800ef02:	4619      	mov	r1, r3
 800ef04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef06:	3301      	adds	r3, #1
 800ef08:	7dfa      	ldrb	r2, [r7, #23]
 800ef0a:	f7ff ff11 	bl	800ed30 <SecureElementAesEncrypt>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d001      	beq.n	800ef18 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800ef14:	2307      	movs	r3, #7
 800ef16:	e03c      	b.n	800ef92 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800ef18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1a:	330b      	adds	r3, #11
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	09db      	lsrs	r3, r3, #7
 800ef20:	b2da      	uxtb	r2, r3
 800ef22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef24:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800ef26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef2a:	3b04      	subs	r3, #4
 800ef2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef2e:	4413      	add	r3, r2
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	4619      	mov	r1, r3
 800ef34:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef38:	3b03      	subs	r3, #3
 800ef3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef3c:	4413      	add	r3, r2
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	021b      	lsls	r3, r3, #8
 800ef42:	ea41 0203 	orr.w	r2, r1, r3
 800ef46:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef4a:	3b02      	subs	r3, #2
 800ef4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef4e:	440b      	add	r3, r1
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	041b      	lsls	r3, r3, #16
 800ef54:	431a      	orrs	r2, r3
 800ef56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef5a:	3b01      	subs	r3, #1
 800ef5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef5e:	440b      	add	r3, r1
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	061b      	lsls	r3, r3, #24
 800ef64:	4313      	orrs	r3, r2
 800ef66:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800ef68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d10d      	bne.n	800ef8c <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800ef70:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef74:	3b04      	subs	r3, #4
 800ef76:	4619      	mov	r1, r3
 800ef78:	2301      	movs	r3, #1
 800ef7a:	693a      	ldr	r2, [r7, #16]
 800ef7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef7e:	f7ff feab 	bl	800ecd8 <SecureElementVerifyAesCmac>
 800ef82:	4603      	mov	r3, r0
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d003      	beq.n	800ef90 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e002      	b.n	800ef92 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800ef8c:	2304      	movs	r3, #4
 800ef8e:	e000      	b.n	800ef92 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3718      	adds	r7, #24
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
	...

0800ef9c <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d101      	bne.n	800efae <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800efaa:	2302      	movs	r3, #2
 800efac:	e007      	b.n	800efbe <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800efae:	4b06      	ldr	r3, [pc, #24]	; (800efc8 <SecureElementSetDevEui+0x2c>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2208      	movs	r2, #8
 800efb4:	6879      	ldr	r1, [r7, #4]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f00c fbe3 	bl	801b782 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800efbc:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3708      	adds	r7, #8
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
 800efc6:	bf00      	nop
 800efc8:	20000560 	.word	0x20000560

0800efcc <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b082      	sub	sp, #8
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d101      	bne.n	800efde <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800efda:	2302      	movs	r3, #2
 800efdc:	e007      	b.n	800efee <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800efde:	4b06      	ldr	r3, [pc, #24]	; (800eff8 <SecureElementGetDevEui+0x2c>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2208      	movs	r2, #8
 800efe4:	4619      	mov	r1, r3
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f00c fbcb 	bl	801b782 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800efec:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3708      	adds	r7, #8
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	20000560 	.word	0x20000560

0800effc <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d101      	bne.n	800f00e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f00a:	2302      	movs	r3, #2
 800f00c:	e008      	b.n	800f020 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800f00e:	4b06      	ldr	r3, [pc, #24]	; (800f028 <SecureElementSetJoinEui+0x2c>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	3308      	adds	r3, #8
 800f014:	2208      	movs	r2, #8
 800f016:	6879      	ldr	r1, [r7, #4]
 800f018:	4618      	mov	r0, r3
 800f01a:	f00c fbb2 	bl	801b782 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f01e:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f020:	4618      	mov	r0, r3
 800f022:	3708      	adds	r7, #8
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}
 800f028:	20000560 	.word	0x20000560

0800f02c <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d101      	bne.n	800f03e <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f03a:	2302      	movs	r3, #2
 800f03c:	e008      	b.n	800f050 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800f03e:	4b06      	ldr	r3, [pc, #24]	; (800f058 <SecureElementGetJoinEui+0x2c>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	3308      	adds	r3, #8
 800f044:	2208      	movs	r2, #8
 800f046:	4619      	mov	r1, r3
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f00c fb9a 	bl	801b782 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f04e:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f050:	4618      	mov	r0, r3
 800f052:	3708      	adds	r7, #8
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}
 800f058:	20000560 	.word	0x20000560

0800f05c <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	4603      	mov	r3, r0
 800f064:	6039      	str	r1, [r7, #0]
 800f066:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800f068:	79fb      	ldrb	r3, [r7, #7]
 800f06a:	2b02      	cmp	r3, #2
 800f06c:	d104      	bne.n	800f078 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800f06e:	4b07      	ldr	r3, [pc, #28]	; (800f08c <SecureElementSetDevAddr+0x30>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	683a      	ldr	r2, [r7, #0]
 800f074:	611a      	str	r2, [r3, #16]
 800f076:	e003      	b.n	800f080 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800f078:	4b04      	ldr	r3, [pc, #16]	; (800f08c <SecureElementSetDevAddr+0x30>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	683a      	ldr	r2, [r7, #0]
 800f07e:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800f080:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f082:	4618      	mov	r0, r3
 800f084:	370c      	adds	r7, #12
 800f086:	46bd      	mov	sp, r7
 800f088:	bc80      	pop	{r7}
 800f08a:	4770      	bx	lr
 800f08c:	20000560 	.word	0x20000560

0800f090 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800f090:	b480      	push	{r7}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
 800f096:	4603      	mov	r3, r0
 800f098:	6039      	str	r1, [r7, #0]
 800f09a:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d101      	bne.n	800f0a6 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f0a2:	2302      	movs	r3, #2
 800f0a4:	e00e      	b.n	800f0c4 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800f0a6:	79fb      	ldrb	r3, [r7, #7]
 800f0a8:	2b02      	cmp	r3, #2
 800f0aa:	d105      	bne.n	800f0b8 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800f0ac:	4b08      	ldr	r3, [pc, #32]	; (800f0d0 <SecureElementGetDevAddr+0x40>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	691a      	ldr	r2, [r3, #16]
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	601a      	str	r2, [r3, #0]
 800f0b6:	e004      	b.n	800f0c2 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800f0b8:	4b05      	ldr	r3, [pc, #20]	; (800f0d0 <SecureElementGetDevAddr+0x40>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	695a      	ldr	r2, [r3, #20]
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800f0c2:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	370c      	adds	r7, #12
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bc80      	pop	{r7}
 800f0cc:	4770      	bx	lr
 800f0ce:	bf00      	nop
 800f0d0:	20000560 	.word	0x20000560

0800f0d4 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800f0de:	4a29      	ldr	r2, [pc, #164]	; (800f184 <LmHandlerInit+0xb0>)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f0e4:	4b28      	ldr	r3, [pc, #160]	; (800f188 <LmHandlerInit+0xb4>)
 800f0e6:	4a29      	ldr	r2, [pc, #164]	; (800f18c <LmHandlerInit+0xb8>)
 800f0e8:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f0ea:	4b27      	ldr	r3, [pc, #156]	; (800f188 <LmHandlerInit+0xb4>)
 800f0ec:	4a28      	ldr	r2, [pc, #160]	; (800f190 <LmHandlerInit+0xbc>)
 800f0ee:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f0f0:	4b25      	ldr	r3, [pc, #148]	; (800f188 <LmHandlerInit+0xb4>)
 800f0f2:	4a28      	ldr	r2, [pc, #160]	; (800f194 <LmHandlerInit+0xc0>)
 800f0f4:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f0f6:	4b24      	ldr	r3, [pc, #144]	; (800f188 <LmHandlerInit+0xb4>)
 800f0f8:	4a27      	ldr	r2, [pc, #156]	; (800f198 <LmHandlerInit+0xc4>)
 800f0fa:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f0fc:	4b21      	ldr	r3, [pc, #132]	; (800f184 <LmHandlerInit+0xb0>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	4a26      	ldr	r2, [pc, #152]	; (800f19c <LmHandlerInit+0xc8>)
 800f104:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f106:	4b1f      	ldr	r3, [pc, #124]	; (800f184 <LmHandlerInit+0xb0>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	4a23      	ldr	r2, [pc, #140]	; (800f19c <LmHandlerInit+0xc8>)
 800f10e:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f110:	4b1c      	ldr	r3, [pc, #112]	; (800f184 <LmHandlerInit+0xb0>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	689b      	ldr	r3, [r3, #8]
 800f116:	4a21      	ldr	r2, [pc, #132]	; (800f19c <LmHandlerInit+0xc8>)
 800f118:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800f11a:	4b1a      	ldr	r3, [pc, #104]	; (800f184 <LmHandlerInit+0xb0>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	4a1e      	ldr	r2, [pc, #120]	; (800f19c <LmHandlerInit+0xc8>)
 800f122:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f124:	4b1d      	ldr	r3, [pc, #116]	; (800f19c <LmHandlerInit+0xc8>)
 800f126:	4a1e      	ldr	r2, [pc, #120]	; (800f1a0 <LmHandlerInit+0xcc>)
 800f128:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f12a:	4b16      	ldr	r3, [pc, #88]	; (800f184 <LmHandlerInit+0xb0>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	699b      	ldr	r3, [r3, #24]
 800f130:	4a1a      	ldr	r2, [pc, #104]	; (800f19c <LmHandlerInit+0xc8>)
 800f132:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	4a1b      	ldr	r2, [pc, #108]	; (800f1a4 <LmHandlerInit+0xd0>)
 800f138:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800f13a:	4b12      	ldr	r3, [pc, #72]	; (800f184 <LmHandlerInit+0xb0>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f140:	4a18      	ldr	r2, [pc, #96]	; (800f1a4 <LmHandlerInit+0xd0>)
 800f142:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800f144:	4b17      	ldr	r3, [pc, #92]	; (800f1a4 <LmHandlerInit+0xd0>)
 800f146:	4a18      	ldr	r2, [pc, #96]	; (800f1a8 <LmHandlerInit+0xd4>)
 800f148:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800f14a:	4b16      	ldr	r3, [pc, #88]	; (800f1a4 <LmHandlerInit+0xd0>)
 800f14c:	4a17      	ldr	r2, [pc, #92]	; (800f1ac <LmHandlerInit+0xd8>)
 800f14e:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800f150:	4914      	ldr	r1, [pc, #80]	; (800f1a4 <LmHandlerInit+0xd0>)
 800f152:	2000      	movs	r0, #0
 800f154:	f000 fdb6 	bl	800fcc4 <LmHandlerPackageRegister>
 800f158:	4603      	mov	r3, r0
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d002      	beq.n	800f164 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800f15e:	f04f 33ff 	mov.w	r3, #4294967295
 800f162:	e00a      	b.n	800f17a <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800f164:	463b      	mov	r3, r7
 800f166:	4618      	mov	r0, r3
 800f168:	f001 fd2e 	bl	8010bc8 <LmhpPackagesRegistrationInit>
 800f16c:	4603      	mov	r3, r0
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d002      	beq.n	800f178 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800f172:	f04f 33ff 	mov.w	r3, #4294967295
 800f176:	e000      	b.n	800f17a <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f178:	2300      	movs	r3, #0
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3708      	adds	r7, #8
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	200005b8 	.word	0x200005b8
 800f188:	200005bc 	.word	0x200005bc
 800f18c:	0800f99d 	.word	0x0800f99d
 800f190:	0800fa11 	.word	0x0800fa11
 800f194:	0800fae1 	.word	0x0800fae1
 800f198:	0800fc31 	.word	0x0800fc31
 800f19c:	200005cc 	.word	0x200005cc
 800f1a0:	08010175 	.word	0x08010175
 800f1a4:	2000057c 	.word	0x2000057c
 800f1a8:	0800ff89 	.word	0x0800ff89
 800f1ac:	0800ffc1 	.word	0x0800ffc1

0800f1b0 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b092      	sub	sp, #72	; 0x48
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800f1b8:	2218      	movs	r2, #24
 800f1ba:	6879      	ldr	r1, [r7, #4]
 800f1bc:	4884      	ldr	r0, [pc, #528]	; (800f3d0 <LmHandlerConfigure+0x220>)
 800f1be:	f00c fae0 	bl	801b782 <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800f1c2:	4b84      	ldr	r3, [pc, #528]	; (800f3d4 <LmHandlerConfigure+0x224>)
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800f1c8:	f7fe faa2 	bl	800d710 <LoraInfo_GetPtr>
 800f1cc:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800f1ce:	4b80      	ldr	r3, [pc, #512]	; (800f3d0 <LmHandlerConfigure+0x220>)
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	4093      	lsls	r3, r2
 800f1d8:	461a      	mov	r2, r3
 800f1da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	4013      	ands	r3, r2
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d106      	bne.n	800f1f2 <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800f1e4:	4b7c      	ldr	r3, [pc, #496]	; (800f3d8 <LmHandlerConfigure+0x228>)
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	2100      	movs	r1, #0
 800f1ea:	2000      	movs	r0, #0
 800f1ec:	f010 fd32 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800f1f0:	e7fe      	b.n	800f1f0 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800f1f2:	4b77      	ldr	r3, [pc, #476]	; (800f3d0 <LmHandlerConfigure+0x220>)
 800f1f4:	781b      	ldrb	r3, [r3, #0]
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	4978      	ldr	r1, [pc, #480]	; (800f3dc <LmHandlerConfigure+0x22c>)
 800f1fa:	4879      	ldr	r0, [pc, #484]	; (800f3e0 <LmHandlerConfigure+0x230>)
 800f1fc:	f004 ffd8 	bl	80141b0 <LoRaMacInitialization>
 800f200:	4603      	mov	r3, r0
 800f202:	2b00      	cmp	r3, #0
 800f204:	d002      	beq.n	800f20c <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800f206:	f04f 33ff 	mov.w	r3, #4294967295
 800f20a:	e0dc      	b.n	800f3c6 <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800f20c:	2327      	movs	r3, #39	; 0x27
 800f20e:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f210:	f107 0318 	add.w	r3, r7, #24
 800f214:	4618      	mov	r0, r3
 800f216:	f005 fd57 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>
 800f21a:	4603      	mov	r3, r0
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d103      	bne.n	800f228 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800f220:	4b70      	ldr	r3, [pc, #448]	; (800f3e4 <LmHandlerConfigure+0x234>)
 800f222:	2201      	movs	r2, #1
 800f224:	701a      	strb	r2, [r3, #0]
 800f226:	e02a      	b.n	800f27e <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800f228:	2328      	movs	r3, #40	; 0x28
 800f22a:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800f22c:	4b6e      	ldr	r3, [pc, #440]	; (800f3e8 <LmHandlerConfigure+0x238>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	691b      	ldr	r3, [r3, #16]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d00c      	beq.n	800f250 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800f236:	f107 0318 	add.w	r3, r7, #24
 800f23a:	4618      	mov	r0, r3
 800f23c:	f005 fb6c 	bl	8014918 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800f240:	4b69      	ldr	r3, [pc, #420]	; (800f3e8 <LmHandlerConfigure+0x238>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	691b      	ldr	r3, [r3, #16]
 800f246:	69fa      	ldr	r2, [r7, #28]
 800f248:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800f24c:	4610      	mov	r0, r2
 800f24e:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800f250:	2327      	movs	r3, #39	; 0x27
 800f252:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f254:	f107 0318 	add.w	r3, r7, #24
 800f258:	4618      	mov	r0, r3
 800f25a:	f005 fd35 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>
 800f25e:	4603      	mov	r3, r0
 800f260:	2b00      	cmp	r3, #0
 800f262:	d10c      	bne.n	800f27e <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f264:	2301      	movs	r3, #1
 800f266:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800f268:	f107 0318 	add.w	r3, r7, #24
 800f26c:	4618      	mov	r0, r3
 800f26e:	f005 fb53 	bl	8014918 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f272:	7f3b      	ldrb	r3, [r7, #28]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d002      	beq.n	800f27e <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800f278:	4b5a      	ldr	r3, [pc, #360]	; (800f3e4 <LmHandlerConfigure+0x234>)
 800f27a:	2201      	movs	r2, #1
 800f27c:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800f27e:	4b59      	ldr	r3, [pc, #356]	; (800f3e4 <LmHandlerConfigure+0x234>)
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d022      	beq.n	800f2cc <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800f286:	4b58      	ldr	r3, [pc, #352]	; (800f3e8 <LmHandlerConfigure+0x238>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	69db      	ldr	r3, [r3, #28]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d004      	beq.n	800f29a <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800f290:	4b55      	ldr	r3, [pc, #340]	; (800f3e8 <LmHandlerConfigure+0x238>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	69db      	ldr	r3, [r3, #28]
 800f296:	2000      	movs	r0, #0
 800f298:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800f29a:	2327      	movs	r3, #39	; 0x27
 800f29c:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800f29e:	f107 0318 	add.w	r3, r7, #24
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f005 fb38 	bl	8014918 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800f2ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2ae:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f2b2:	4b47      	ldr	r3, [pc, #284]	; (800f3d0 <LmHandlerConfigure+0x220>)
 800f2b4:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800f2b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2b8:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800f2bc:	4b44      	ldr	r3, [pc, #272]	; (800f3d0 <LmHandlerConfigure+0x220>)
 800f2be:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800f2c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2c2:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800f2c6:	4b42      	ldr	r3, [pc, #264]	; (800f3d0 <LmHandlerConfigure+0x220>)
 800f2c8:	709a      	strb	r2, [r3, #2]
 800f2ca:	e008      	b.n	800f2de <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800f2cc:	2305      	movs	r3, #5
 800f2ce:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f2d4:	f107 0318 	add.w	r3, r7, #24
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f005 fcf5 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800f2de:	4b3f      	ldr	r3, [pc, #252]	; (800f3dc <LmHandlerConfigure+0x22c>)
 800f2e0:	689b      	ldr	r3, [r3, #8]
 800f2e2:	4a3e      	ldr	r2, [pc, #248]	; (800f3dc <LmHandlerConfigure+0x22c>)
 800f2e4:	68d2      	ldr	r2, [r2, #12]
 800f2e6:	4611      	mov	r1, r2
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7ff fbcb 	bl	800ea84 <SecureElementInitMcuID>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d002      	beq.n	800f2fa <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f2f8:	e065      	b.n	800f3c6 <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800f2fa:	2306      	movs	r3, #6
 800f2fc:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f2fe:	f107 0318 	add.w	r3, r7, #24
 800f302:	4618      	mov	r0, r3
 800f304:	f005 fb08 	bl	8014918 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f308:	69fb      	ldr	r3, [r7, #28]
 800f30a:	4a38      	ldr	r2, [pc, #224]	; (800f3ec <LmHandlerConfigure+0x23c>)
 800f30c:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f30e:	f107 0318 	add.w	r3, r7, #24
 800f312:	4618      	mov	r0, r3
 800f314:	f005 fcd8 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800f318:	2302      	movs	r3, #2
 800f31a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800f31c:	4b33      	ldr	r3, [pc, #204]	; (800f3ec <LmHandlerConfigure+0x23c>)
 800f31e:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f320:	f107 0318 	add.w	r3, r7, #24
 800f324:	4618      	mov	r0, r3
 800f326:	f005 faf7 	bl	8014918 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800f32a:	2303      	movs	r3, #3
 800f32c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800f32e:	4b30      	ldr	r3, [pc, #192]	; (800f3f0 <LmHandlerConfigure+0x240>)
 800f330:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f332:	f107 0318 	add.w	r3, r7, #24
 800f336:	4618      	mov	r0, r3
 800f338:	f005 faee 	bl	8014918 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800f33c:	f7ff fc22 	bl	800eb84 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f340:	230f      	movs	r3, #15
 800f342:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f344:	2301      	movs	r3, #1
 800f346:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f348:	f107 0318 	add.w	r3, r7, #24
 800f34c:	4618      	mov	r0, r3
 800f34e:	f005 fcbb 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f352:	2310      	movs	r3, #16
 800f354:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f356:	2300      	movs	r3, #0
 800f358:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f35a:	f107 0318 	add.w	r3, r7, #24
 800f35e:	4618      	mov	r0, r3
 800f360:	f005 fcb2 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f364:	2304      	movs	r3, #4
 800f366:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f368:	4b19      	ldr	r3, [pc, #100]	; (800f3d0 <LmHandlerConfigure+0x220>)
 800f36a:	789b      	ldrb	r3, [r3, #2]
 800f36c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f36e:	f107 0318 	add.w	r3, r7, #24
 800f372:	4618      	mov	r0, r3
 800f374:	f005 fca8 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800f378:	233a      	movs	r3, #58	; 0x3a
 800f37a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800f37c:	4b14      	ldr	r3, [pc, #80]	; (800f3d0 <LmHandlerConfigure+0x220>)
 800f37e:	695b      	ldr	r3, [r3, #20]
 800f380:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f382:	f107 0318 	add.w	r3, r7, #24
 800f386:	4618      	mov	r0, r3
 800f388:	f005 fc9e 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f38c:	230f      	movs	r3, #15
 800f38e:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f390:	4b0f      	ldr	r3, [pc, #60]	; (800f3d0 <LmHandlerConfigure+0x220>)
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	f107 0210 	add.w	r2, r7, #16
 800f398:	4611      	mov	r1, r2
 800f39a:	4618      	mov	r0, r3
 800f39c:	f008 fbec 	bl	8017b78 <RegionGetPhyParam>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	bf14      	ite	ne
 800f3aa:	2301      	movne	r3, #1
 800f3ac:	2300      	moveq	r3, #0
 800f3ae:	b2da      	uxtb	r2, r3
 800f3b0:	4b07      	ldr	r3, [pc, #28]	; (800f3d0 <LmHandlerConfigure+0x220>)
 800f3b2:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800f3b4:	2014      	movs	r0, #20
 800f3b6:	f000 fad9 	bl	800f96c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f3ba:	4b05      	ldr	r3, [pc, #20]	; (800f3d0 <LmHandlerConfigure+0x220>)
 800f3bc:	79db      	ldrb	r3, [r3, #7]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f006 fafc 	bl	80159bc <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f3c4:	2300      	movs	r3, #0
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3748      	adds	r7, #72	; 0x48
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	200005a0 	.word	0x200005a0
 800f3d4:	200005e8 	.word	0x200005e8
 800f3d8:	080217b8 	.word	0x080217b8
 800f3dc:	200005cc 	.word	0x200005cc
 800f3e0:	200005bc 	.word	0x200005bc
 800f3e4:	200006de 	.word	0x200006de
 800f3e8:	200005b8 	.word	0x200005b8
 800f3ec:	20000564 	.word	0x20000564
 800f3f0:	2000056c 	.word	0x2000056c

0800f3f4 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800f3fa:	f002 fe4d 	bl	8012098 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800f3fe:	f000 fd8f 	bl	800ff20 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800f402:	f000 fd63 	bl	800fecc <LmHandlerPackageIsTxPending>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d117      	bne.n	800f43c <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800f40c:	4b0d      	ldr	r3, [pc, #52]	; (800f444 <LmHandlerProcess+0x50>)
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d014      	beq.n	800f43e <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800f414:	2300      	movs	r3, #0
 800f416:	703b      	strb	r3, [r7, #0]
 800f418:	2300      	movs	r3, #0
 800f41a:	707b      	strb	r3, [r7, #1]
 800f41c:	2300      	movs	r3, #0
 800f41e:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800f420:	4b09      	ldr	r3, [pc, #36]	; (800f448 <LmHandlerProcess+0x54>)
 800f422:	78d9      	ldrb	r1, [r3, #3]
 800f424:	463b      	mov	r3, r7
 800f426:	2200      	movs	r2, #0
 800f428:	4618      	mov	r0, r3
 800f42a:	f000 f8d7 	bl	800f5dc <LmHandlerSend>
 800f42e:	4603      	mov	r3, r0
 800f430:	2b00      	cmp	r3, #0
 800f432:	d104      	bne.n	800f43e <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800f434:	4b03      	ldr	r3, [pc, #12]	; (800f444 <LmHandlerProcess+0x50>)
 800f436:	2200      	movs	r2, #0
 800f438:	701a      	strb	r2, [r3, #0]
 800f43a:	e000      	b.n	800f43e <LmHandlerProcess+0x4a>
        return;
 800f43c:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800f43e:	3708      	adds	r7, #8
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	200005e8 	.word	0x200005e8
 800f448:	200005a0 	.word	0x200005a0

0800f44c <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800f44c:	b480      	push	{r7}
 800f44e:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800f450:	4b02      	ldr	r3, [pc, #8]	; (800f45c <LmHandlerGetDutyCycleWaitTime+0x10>)
 800f452:	681b      	ldr	r3, [r3, #0]
}
 800f454:	4618      	mov	r0, r3
 800f456:	46bd      	mov	sp, r7
 800f458:	bc80      	pop	{r7}
 800f45a:	4770      	bx	lr
 800f45c:	200005e4 	.word	0x200005e4

0800f460 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b092      	sub	sp, #72	; 0x48
 800f464:	af00      	add	r7, sp, #0
 800f466:	4603      	mov	r3, r0
 800f468:	460a      	mov	r2, r1
 800f46a:	71fb      	strb	r3, [r7, #7]
 800f46c:	4613      	mov	r3, r2
 800f46e:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800f470:	2301      	movs	r3, #1
 800f472:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f476:	4b46      	ldr	r3, [pc, #280]	; (800f590 <LmHandlerJoin+0x130>)
 800f478:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f47c:	b2db      	uxtb	r3, r3
 800f47e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800f482:	4b43      	ldr	r3, [pc, #268]	; (800f590 <LmHandlerJoin+0x130>)
 800f484:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f488:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800f48c:	79fb      	ldrb	r3, [r7, #7]
 800f48e:	2b02      	cmp	r3, #2
 800f490:	d10b      	bne.n	800f4aa <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f492:	2302      	movs	r3, #2
 800f494:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f498:	4b3e      	ldr	r3, [pc, #248]	; (800f594 <LmHandlerJoin+0x134>)
 800f49a:	2202      	movs	r2, #2
 800f49c:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800f49e:	4a3d      	ldr	r2, [pc, #244]	; (800f594 <LmHandlerJoin+0x134>)
 800f4a0:	79bb      	ldrb	r3, [r7, #6]
 800f4a2:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800f4a4:	f005 f93a 	bl	801471c <LoRaMacStart>
 800f4a8:	e05c      	b.n	800f564 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f4b0:	4b38      	ldr	r3, [pc, #224]	; (800f594 <LmHandlerJoin+0x134>)
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f4b6:	4b36      	ldr	r3, [pc, #216]	; (800f590 <LmHandlerJoin+0x130>)
 800f4b8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f4bc:	4b35      	ldr	r3, [pc, #212]	; (800f594 <LmHandlerJoin+0x134>)
 800f4be:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800f4c0:	4b33      	ldr	r3, [pc, #204]	; (800f590 <LmHandlerJoin+0x130>)
 800f4c2:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800f4c6:	4b33      	ldr	r3, [pc, #204]	; (800f594 <LmHandlerJoin+0x134>)
 800f4c8:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f4ca:	4b32      	ldr	r3, [pc, #200]	; (800f594 <LmHandlerJoin+0x134>)
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800f4d0:	4a30      	ldr	r2, [pc, #192]	; (800f594 <LmHandlerJoin+0x134>)
 800f4d2:	79bb      	ldrb	r3, [r7, #6]
 800f4d4:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800f4d6:	4b30      	ldr	r3, [pc, #192]	; (800f598 <LmHandlerJoin+0x138>)
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	f083 0301 	eor.w	r3, r3, #1
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d034      	beq.n	800f54e <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800f4e4:	231f      	movs	r3, #31
 800f4e6:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800f4e8:	4b29      	ldr	r3, [pc, #164]	; (800f590 <LmHandlerJoin+0x130>)
 800f4ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f4ee:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f4f0:	f107 030c 	add.w	r3, r7, #12
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f005 fbe7 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800f4fa:	2320      	movs	r3, #32
 800f4fc:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800f4fe:	4b24      	ldr	r3, [pc, #144]	; (800f590 <LmHandlerJoin+0x130>)
 800f500:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f504:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f506:	f107 030c 	add.w	r3, r7, #12
 800f50a:	4618      	mov	r0, r3
 800f50c:	f005 fbdc 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800f510:	2322      	movs	r3, #34	; 0x22
 800f512:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800f514:	4b1e      	ldr	r3, [pc, #120]	; (800f590 <LmHandlerJoin+0x130>)
 800f516:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f51a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f51c:	f107 030c 	add.w	r3, r7, #12
 800f520:	4618      	mov	r0, r3
 800f522:	f005 fbd1 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800f526:	2321      	movs	r3, #33	; 0x21
 800f528:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800f52a:	4b19      	ldr	r3, [pc, #100]	; (800f590 <LmHandlerJoin+0x130>)
 800f52c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f530:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f532:	f107 030c 	add.w	r3, r7, #12
 800f536:	4618      	mov	r0, r3
 800f538:	f005 fbc6 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800f53c:	2329      	movs	r3, #41	; 0x29
 800f53e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800f540:	4b16      	ldr	r3, [pc, #88]	; (800f59c <LmHandlerJoin+0x13c>)
 800f542:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f544:	f107 030c 	add.w	r3, r7, #12
 800f548:	4618      	mov	r0, r3
 800f54a:	f005 fbbd 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800f54e:	f005 f8e5 	bl	801471c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f552:	2301      	movs	r3, #1
 800f554:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f556:	2301      	movs	r3, #1
 800f558:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f55a:	f107 030c 	add.w	r3, r7, #12
 800f55e:	4618      	mov	r0, r3
 800f560:	f005 fbb2 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800f564:	4b0c      	ldr	r3, [pc, #48]	; (800f598 <LmHandlerJoin+0x138>)
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	f083 0301 	eor.w	r3, r3, #1
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d102      	bne.n	800f578 <LmHandlerJoin+0x118>
 800f572:	79bb      	ldrb	r3, [r7, #6]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d004      	beq.n	800f582 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800f578:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f57c:	4618      	mov	r0, r3
 800f57e:	f005 ff4d 	bl	801541c <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800f582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f584:	4a06      	ldr	r2, [pc, #24]	; (800f5a0 <LmHandlerJoin+0x140>)
 800f586:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800f588:	bf00      	nop
 800f58a:	3748      	adds	r7, #72	; 0x48
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}
 800f590:	200005a0 	.word	0x200005a0
 800f594:	20000094 	.word	0x20000094
 800f598:	200006de 	.word	0x200006de
 800f59c:	01000400 	.word	0x01000400
 800f5a0:	200005e4 	.word	0x200005e4

0800f5a4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b08c      	sub	sp, #48	; 0x30
 800f5a8:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800f5ae:	1d3b      	adds	r3, r7, #4
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f005 f9b1 	bl	8014918 <LoRaMacMibGetRequestConfirm>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800f5bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d106      	bne.n	800f5d2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f5c4:	7a3b      	ldrb	r3, [r7, #8]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d101      	bne.n	800f5ce <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	e002      	b.n	800f5d4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	e000      	b.n	800f5d4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800f5d2:	2300      	movs	r3, #0
    }
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3730      	adds	r7, #48	; 0x30
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}

0800f5dc <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b08a      	sub	sp, #40	; 0x28
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	70fb      	strb	r3, [r7, #3]
 800f5e8:	4613      	mov	r3, r2
 800f5ea:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800f5ec:	23ff      	movs	r3, #255	; 0xff
 800f5ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800f5f2:	f002 faab 	bl	8011b4c <LoRaMacIsBusy>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d002      	beq.n	800f602 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f5fc:	f06f 0301 	mvn.w	r3, #1
 800f600:	e0ab      	b.n	800f75a <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800f602:	f002 facb 	bl	8011b9c <LoRaMacIsStopped>
 800f606:	4603      	mov	r3, r0
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d002      	beq.n	800f612 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f60c:	f06f 0302 	mvn.w	r3, #2
 800f610:	e0a3      	b.n	800f75a <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800f612:	f7ff ffc7 	bl	800f5a4 <LmHandlerJoinStatus>
 800f616:	4603      	mov	r3, r0
 800f618:	2b01      	cmp	r3, #1
 800f61a:	d00a      	beq.n	800f632 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800f61c:	4b51      	ldr	r3, [pc, #324]	; (800f764 <LmHandlerSend+0x188>)
 800f61e:	79db      	ldrb	r3, [r3, #7]
 800f620:	4a50      	ldr	r2, [pc, #320]	; (800f764 <LmHandlerSend+0x188>)
 800f622:	7a12      	ldrb	r2, [r2, #8]
 800f624:	4611      	mov	r1, r2
 800f626:	4618      	mov	r0, r3
 800f628:	f7ff ff1a 	bl	800f460 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f62c:	f06f 0302 	mvn.w	r3, #2
 800f630:	e093      	b.n	800f75a <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800f632:	4a4d      	ldr	r2, [pc, #308]	; (800f768 <LmHandlerSend+0x18c>)
 800f634:	78fb      	ldrb	r3, [r7, #3]
 800f636:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800f638:	78fb      	ldrb	r3, [r7, #3]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	bf14      	ite	ne
 800f63e:	2301      	movne	r3, #1
 800f640:	2300      	moveq	r3, #0
 800f642:	b2db      	uxtb	r3, r3
 800f644:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800f646:	4b49      	ldr	r3, [pc, #292]	; (800f76c <LmHandlerSend+0x190>)
 800f648:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f64c:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	785b      	ldrb	r3, [r3, #1]
 800f652:	f107 020c 	add.w	r2, r7, #12
 800f656:	4611      	mov	r1, r2
 800f658:	4618      	mov	r0, r3
 800f65a:	f005 f8cd 	bl	80147f8 <LoRaMacQueryTxPossible>
 800f65e:	4603      	mov	r3, r0
 800f660:	2b00      	cmp	r3, #0
 800f662:	d009      	beq.n	800f678 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800f664:	2300      	movs	r3, #0
 800f666:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800f668:	2300      	movs	r3, #0
 800f66a:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800f66c:	2300      	movs	r3, #0
 800f66e:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800f670:	23f9      	movs	r3, #249	; 0xf9
 800f672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f676:	e009      	b.n	800f68c <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	785b      	ldrb	r3, [r3, #1]
 800f682:	b29b      	uxth	r3, r3
 800f684:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800f68c:	4b36      	ldr	r3, [pc, #216]	; (800f768 <LmHandlerSend+0x18c>)
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	3310      	adds	r3, #16
 800f692:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f696:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800f69a:	4b34      	ldr	r3, [pc, #208]	; (800f76c <LmHandlerSend+0x190>)
 800f69c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f6a0:	4b31      	ldr	r3, [pc, #196]	; (800f768 <LmHandlerSend+0x18c>)
 800f6a2:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800f6a4:	78ba      	ldrb	r2, [r7, #2]
 800f6a6:	f107 0310 	add.w	r3, r7, #16
 800f6aa:	4611      	mov	r1, r2
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f006 f84d 	bl	801574c <LoRaMacMcpsRequest>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800f6b8:	6a3b      	ldr	r3, [r7, #32]
 800f6ba:	4a2d      	ldr	r2, [pc, #180]	; (800f770 <LmHandlerSend+0x194>)
 800f6bc:	6013      	str	r3, [r2, #0]

    switch( status )
 800f6be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f6c2:	2b11      	cmp	r3, #17
 800f6c4:	d842      	bhi.n	800f74c <LmHandlerSend+0x170>
 800f6c6:	a201      	add	r2, pc, #4	; (adr r2, 800f6cc <LmHandlerSend+0xf0>)
 800f6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6cc:	0800f715 	.word	0x0800f715
 800f6d0:	0800f72d 	.word	0x0800f72d
 800f6d4:	0800f74d 	.word	0x0800f74d
 800f6d8:	0800f74d 	.word	0x0800f74d
 800f6dc:	0800f74d 	.word	0x0800f74d
 800f6e0:	0800f74d 	.word	0x0800f74d
 800f6e4:	0800f74d 	.word	0x0800f74d
 800f6e8:	0800f735 	.word	0x0800f735
 800f6ec:	0800f74d 	.word	0x0800f74d
 800f6f0:	0800f74d 	.word	0x0800f74d
 800f6f4:	0800f74d 	.word	0x0800f74d
 800f6f8:	0800f745 	.word	0x0800f745
 800f6fc:	0800f74d 	.word	0x0800f74d
 800f700:	0800f74d 	.word	0x0800f74d
 800f704:	0800f72d 	.word	0x0800f72d
 800f708:	0800f72d 	.word	0x0800f72d
 800f70c:	0800f72d 	.word	0x0800f72d
 800f710:	0800f73d 	.word	0x0800f73d
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800f714:	4b17      	ldr	r3, [pc, #92]	; (800f774 <LmHandlerSend+0x198>)
 800f716:	2200      	movs	r2, #0
 800f718:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800f71a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f71e:	f113 0f07 	cmn.w	r3, #7
 800f722:	d017      	beq.n	800f754 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800f724:	2300      	movs	r3, #0
 800f726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800f72a:	e013      	b.n	800f754 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800f72c:	23fe      	movs	r3, #254	; 0xfe
 800f72e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f732:	e010      	b.n	800f756 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f734:	23fd      	movs	r3, #253	; 0xfd
 800f736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f73a:	e00c      	b.n	800f756 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800f73c:	23fb      	movs	r3, #251	; 0xfb
 800f73e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f742:	e008      	b.n	800f756 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800f744:	23fa      	movs	r3, #250	; 0xfa
 800f746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f74a:	e004      	b.n	800f756 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f74c:	23ff      	movs	r3, #255	; 0xff
 800f74e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f752:	e000      	b.n	800f756 <LmHandlerSend+0x17a>
            break;
 800f754:	bf00      	nop
    }

    return lmhStatus;
 800f756:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3728      	adds	r7, #40	; 0x28
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	20000094 	.word	0x20000094
 800f768:	200000a0 	.word	0x200000a0
 800f76c:	200005a0 	.word	0x200005a0
 800f770:	200005e4 	.word	0x200005e4
 800f774:	200005e8 	.word	0x200005e8

0800f778 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b086      	sub	sp, #24
 800f77c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800f77e:	2309      	movs	r3, #9
 800f780:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800f782:	463b      	mov	r3, r7
 800f784:	4618      	mov	r0, r3
 800f786:	f005 fe49 	bl	801541c <LoRaMacMlmeRequest>
 800f78a:	4603      	mov	r3, r0
 800f78c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	4a06      	ldr	r2, [pc, #24]	; (800f7ac <LmHandlerDeviceTimeReq+0x34>)
 800f792:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800f794:	7dfb      	ldrb	r3, [r7, #23]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d101      	bne.n	800f79e <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f79a:	2300      	movs	r3, #0
 800f79c:	e001      	b.n	800f7a2 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800f79e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3718      	adds	r7, #24
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}
 800f7aa:	bf00      	nop
 800f7ac:	200005e4 	.word	0x200005e4

0800f7b0 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b083      	sub	sp, #12
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800f7ba:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	370c      	adds	r7, #12
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bc80      	pop	{r7}
 800f7c6:	4770      	bx	lr

0800f7c8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b08e      	sub	sp, #56	; 0x38
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800f7d8:	f002 f9b8 	bl	8011b4c <LoRaMacIsBusy>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d002      	beq.n	800f7e8 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f7e2:	f06f 0301 	mvn.w	r3, #1
 800f7e6:	e073      	b.n	800f8d0 <LmHandlerRequestClass+0x108>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800f7e8:	f7ff fedc 	bl	800f5a4 <LmHandlerJoinStatus>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	d002      	beq.n	800f7f8 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f7f2:	f06f 0302 	mvn.w	r3, #2
 800f7f6:	e06b      	b.n	800f8d0 <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f7fc:	f107 030c 	add.w	r3, r7, #12
 800f800:	4618      	mov	r0, r3
 800f802:	f005 f889 	bl	8014918 <LoRaMacMibGetRequestConfirm>
 800f806:	4603      	mov	r3, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d002      	beq.n	800f812 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f80c:	f04f 33ff 	mov.w	r3, #4294967295
 800f810:	e05e      	b.n	800f8d0 <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800f812:	7c3b      	ldrb	r3, [r7, #16]
 800f814:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800f818:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f81c:	79fb      	ldrb	r3, [r7, #7]
 800f81e:	429a      	cmp	r2, r3
 800f820:	d04d      	beq.n	800f8be <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800f822:	79fb      	ldrb	r3, [r7, #7]
 800f824:	2b02      	cmp	r3, #2
 800f826:	d028      	beq.n	800f87a <LmHandlerRequestClass+0xb2>
 800f828:	2b02      	cmp	r3, #2
 800f82a:	dc4a      	bgt.n	800f8c2 <LmHandlerRequestClass+0xfa>
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d002      	beq.n	800f836 <LmHandlerRequestClass+0x6e>
 800f830:	2b01      	cmp	r3, #1
 800f832:	d01e      	beq.n	800f872 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800f834:	e045      	b.n	800f8c2 <LmHandlerRequestClass+0xfa>
                    if( currentClass != CLASS_A )
 800f836:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d043      	beq.n	800f8c6 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800f83e:	79fb      	ldrb	r3, [r7, #7]
 800f840:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f842:	f107 030c 	add.w	r3, r7, #12
 800f846:	4618      	mov	r0, r3
 800f848:	f005 fa3e 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>
 800f84c:	4603      	mov	r3, r0
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d10b      	bne.n	800f86a <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800f852:	4b21      	ldr	r3, [pc, #132]	; (800f8d8 <LmHandlerRequestClass+0x110>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d034      	beq.n	800f8c6 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800f85c:	4b1e      	ldr	r3, [pc, #120]	; (800f8d8 <LmHandlerRequestClass+0x110>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f862:	79fa      	ldrb	r2, [r7, #7]
 800f864:	4610      	mov	r0, r2
 800f866:	4798      	blx	r3
                break;
 800f868:	e02d      	b.n	800f8c6 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800f86a:	23ff      	movs	r3, #255	; 0xff
 800f86c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f870:	e029      	b.n	800f8c6 <LmHandlerRequestClass+0xfe>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800f872:	23ff      	movs	r3, #255	; 0xff
 800f874:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f878:	e028      	b.n	800f8cc <LmHandlerRequestClass+0x104>
                    if( currentClass != CLASS_A )
 800f87a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d003      	beq.n	800f88a <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800f882:	23ff      	movs	r3, #255	; 0xff
 800f884:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f888:	e01f      	b.n	800f8ca <LmHandlerRequestClass+0x102>
                        mibReq.Param.Class = newClass;
 800f88a:	79fb      	ldrb	r3, [r7, #7]
 800f88c:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f88e:	f107 030c 	add.w	r3, r7, #12
 800f892:	4618      	mov	r0, r3
 800f894:	f005 fa18 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>
 800f898:	4603      	mov	r3, r0
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d10b      	bne.n	800f8b6 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800f89e:	4b0e      	ldr	r3, [pc, #56]	; (800f8d8 <LmHandlerRequestClass+0x110>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d010      	beq.n	800f8ca <LmHandlerRequestClass+0x102>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800f8a8:	4b0b      	ldr	r3, [pc, #44]	; (800f8d8 <LmHandlerRequestClass+0x110>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8ae:	79fa      	ldrb	r2, [r7, #7]
 800f8b0:	4610      	mov	r0, r2
 800f8b2:	4798      	blx	r3
                break;
 800f8b4:	e009      	b.n	800f8ca <LmHandlerRequestClass+0x102>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800f8b6:	23ff      	movs	r3, #255	; 0xff
 800f8b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f8bc:	e005      	b.n	800f8ca <LmHandlerRequestClass+0x102>
        }
    }
 800f8be:	bf00      	nop
 800f8c0:	e004      	b.n	800f8cc <LmHandlerRequestClass+0x104>
                break;
 800f8c2:	bf00      	nop
 800f8c4:	e002      	b.n	800f8cc <LmHandlerRequestClass+0x104>
                break;
 800f8c6:	bf00      	nop
 800f8c8:	e000      	b.n	800f8cc <LmHandlerRequestClass+0x104>
                break;
 800f8ca:	bf00      	nop
    return errorStatus;
 800f8cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3738      	adds	r7, #56	; 0x38
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}
 800f8d8:	200005b8 	.word	0x200005b8

0800f8dc <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b08c      	sub	sp, #48	; 0x30
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d102      	bne.n	800f8f0 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f8ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f8ee:	e010      	b.n	800f912 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f8f4:	f107 0308 	add.w	r3, r7, #8
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f005 f80d 	bl	8014918 <LoRaMacMibGetRequestConfirm>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2b00      	cmp	r3, #0
 800f902:	d002      	beq.n	800f90a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f904:	f04f 33ff 	mov.w	r3, #4294967295
 800f908:	e003      	b.n	800f912 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800f90a:	7b3a      	ldrb	r2, [r7, #12]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800f910:	2300      	movs	r3, #0
}
 800f912:	4618      	mov	r0, r3
 800f914:	3730      	adds	r7, #48	; 0x30
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
	...

0800f91c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b08c      	sub	sp, #48	; 0x30
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d102      	bne.n	800f930 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f92a:	f04f 33ff 	mov.w	r3, #4294967295
 800f92e:	e016      	b.n	800f95e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800f930:	2320      	movs	r3, #32
 800f932:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800f934:	f107 0308 	add.w	r3, r7, #8
 800f938:	4618      	mov	r0, r3
 800f93a:	f004 ffed 	bl	8014918 <LoRaMacMibGetRequestConfirm>
 800f93e:	4603      	mov	r3, r0
 800f940:	2b00      	cmp	r3, #0
 800f942:	d002      	beq.n	800f94a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f944:	f04f 33ff 	mov.w	r3, #4294967295
 800f948:	e009      	b.n	800f95e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800f94a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f993 2000 	ldrsb.w	r2, [r3]
 800f958:	4b03      	ldr	r3, [pc, #12]	; (800f968 <LmHandlerGetTxDatarate+0x4c>)
 800f95a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800f95c:	2300      	movs	r3, #0
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3730      	adds	r7, #48	; 0x30
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	200005a0 	.word	0x200005a0

0800f96c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b08c      	sub	sp, #48	; 0x30
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800f974:	2323      	movs	r3, #35	; 0x23
 800f976:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f97c:	f107 0308 	add.w	r3, r7, #8
 800f980:	4618      	mov	r0, r3
 800f982:	f005 f9a1 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>
 800f986:	4603      	mov	r3, r0
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d002      	beq.n	800f992 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800f98c:	f04f 33ff 	mov.w	r3, #4294967295
 800f990:	e000      	b.n	800f994 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800f992:	2300      	movs	r3, #0
}
 800f994:	4618      	mov	r0, r3
 800f996:	3730      	adds	r7, #48	; 0x30
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800f9a4:	4b18      	ldr	r3, [pc, #96]	; (800fa08 <McpsConfirm+0x6c>)
 800f9a6:	2201      	movs	r2, #1
 800f9a8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	785a      	ldrb	r2, [r3, #1]
 800f9ae:	4b16      	ldr	r3, [pc, #88]	; (800fa08 <McpsConfirm+0x6c>)
 800f9b0:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	789b      	ldrb	r3, [r3, #2]
 800f9b6:	b25a      	sxtb	r2, r3
 800f9b8:	4b13      	ldr	r3, [pc, #76]	; (800fa08 <McpsConfirm+0x6c>)
 800f9ba:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	68db      	ldr	r3, [r3, #12]
 800f9c0:	4a11      	ldr	r2, [pc, #68]	; (800fa08 <McpsConfirm+0x6c>)
 800f9c2:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800f9ca:	4b0f      	ldr	r3, [pc, #60]	; (800fa08 <McpsConfirm+0x6c>)
 800f9cc:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	691b      	ldr	r3, [r3, #16]
 800f9d2:	b2da      	uxtb	r2, r3
 800f9d4:	4b0c      	ldr	r3, [pc, #48]	; (800fa08 <McpsConfirm+0x6c>)
 800f9d6:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	791b      	ldrb	r3, [r3, #4]
 800f9dc:	461a      	mov	r2, r3
 800f9de:	4b0a      	ldr	r3, [pc, #40]	; (800fa08 <McpsConfirm+0x6c>)
 800f9e0:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800f9e2:	4b0a      	ldr	r3, [pc, #40]	; (800fa0c <McpsConfirm+0x70>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d004      	beq.n	800f9f6 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800f9ec:	4b07      	ldr	r3, [pc, #28]	; (800fa0c <McpsConfirm+0x70>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f2:	4805      	ldr	r0, [pc, #20]	; (800fa08 <McpsConfirm+0x6c>)
 800f9f4:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800f9f6:	6879      	ldr	r1, [r7, #4]
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	f000 f9e9 	bl	800fdd0 <LmHandlerPackagesNotify>
}
 800f9fe:	bf00      	nop
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	200000a0 	.word	0x200000a0
 800fa0c:	200005b8 	.word	0x200005b8

0800fa10 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b086      	sub	sp, #24
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800fa1e:	4b2d      	ldr	r3, [pc, #180]	; (800fad4 <McpsIndication+0xc4>)
 800fa20:	2201      	movs	r2, #1
 800fa22:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	785a      	ldrb	r2, [r3, #1]
 800fa28:	4b2a      	ldr	r3, [pc, #168]	; (800fad4 <McpsIndication+0xc4>)
 800fa2a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800fa2c:	4b29      	ldr	r3, [pc, #164]	; (800fad4 <McpsIndication+0xc4>)
 800fa2e:	785b      	ldrb	r3, [r3, #1]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d14b      	bne.n	800facc <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	791b      	ldrb	r3, [r3, #4]
 800fa38:	b25a      	sxtb	r2, r3
 800fa3a:	4b26      	ldr	r3, [pc, #152]	; (800fad4 <McpsIndication+0xc4>)
 800fa3c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa44:	b25a      	sxtb	r2, r3
 800fa46:	4b23      	ldr	r3, [pc, #140]	; (800fad4 <McpsIndication+0xc4>)
 800fa48:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fa50:	4b20      	ldr	r3, [pc, #128]	; (800fad4 <McpsIndication+0xc4>)
 800fa52:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	78da      	ldrb	r2, [r3, #3]
 800fa58:	4b1e      	ldr	r3, [pc, #120]	; (800fad4 <McpsIndication+0xc4>)
 800fa5a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	691b      	ldr	r3, [r3, #16]
 800fa60:	4a1c      	ldr	r2, [pc, #112]	; (800fad4 <McpsIndication+0xc4>)
 800fa62:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	78db      	ldrb	r3, [r3, #3]
 800fa68:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	7b1b      	ldrb	r3, [r3, #12]
 800fa6e:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	689b      	ldr	r3, [r3, #8]
 800fa74:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800fa76:	4b18      	ldr	r3, [pc, #96]	; (800fad8 <McpsIndication+0xc8>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d007      	beq.n	800fa90 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800fa80:	4b15      	ldr	r3, [pc, #84]	; (800fad8 <McpsIndication+0xc8>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa86:	f107 0210 	add.w	r2, r7, #16
 800fa8a:	4912      	ldr	r1, [pc, #72]	; (800fad4 <McpsIndication+0xc4>)
 800fa8c:	4610      	mov	r0, r2
 800fa8e:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800fa90:	4b11      	ldr	r3, [pc, #68]	; (800fad8 <McpsIndication+0xc8>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d007      	beq.n	800faaa <McpsIndication+0x9a>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	7e1b      	ldrb	r3, [r3, #24]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d003      	beq.n	800faaa <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800faa2:	4b0d      	ldr	r3, [pc, #52]	; (800fad8 <McpsIndication+0xc8>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faa8:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800faaa:	6879      	ldr	r1, [r7, #4]
 800faac:	2001      	movs	r0, #1
 800faae:	f000 f98f 	bl	800fdd0 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800fab2:	f107 030f 	add.w	r3, r7, #15
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7ff ff10 	bl	800f8dc <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	795b      	ldrb	r3, [r3, #5]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d004      	beq.n	800face <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800fac4:	4b05      	ldr	r3, [pc, #20]	; (800fadc <McpsIndication+0xcc>)
 800fac6:	2201      	movs	r2, #1
 800fac8:	701a      	strb	r2, [r3, #0]
 800faca:	e000      	b.n	800face <McpsIndication+0xbe>
        return;
 800facc:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800face:	3718      	adds	r7, #24
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}
 800fad4:	200000bc 	.word	0x200000bc
 800fad8:	200005b8 	.word	0x200005b8
 800fadc:	200005e8 	.word	0x200005e8

0800fae0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b08c      	sub	sp, #48	; 0x30
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800fae8:	4b49      	ldr	r3, [pc, #292]	; (800fc10 <MlmeConfirm+0x130>)
 800faea:	2200      	movs	r2, #0
 800faec:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	785a      	ldrb	r2, [r3, #1]
 800faf2:	4b47      	ldr	r3, [pc, #284]	; (800fc10 <MlmeConfirm+0x130>)
 800faf4:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800faf6:	4b47      	ldr	r3, [pc, #284]	; (800fc14 <MlmeConfirm+0x134>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d004      	beq.n	800fb0a <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800fb00:	4b44      	ldr	r3, [pc, #272]	; (800fc14 <MlmeConfirm+0x134>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb06:	4842      	ldr	r0, [pc, #264]	; (800fc10 <MlmeConfirm+0x130>)
 800fb08:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800fb0a:	6879      	ldr	r1, [r7, #4]
 800fb0c:	2002      	movs	r0, #2
 800fb0e:	f000 f95f 	bl	800fdd0 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	3b01      	subs	r3, #1
 800fb18:	2b0b      	cmp	r3, #11
 800fb1a:	d872      	bhi.n	800fc02 <MlmeConfirm+0x122>
 800fb1c:	a201      	add	r2, pc, #4	; (adr r2, 800fb24 <MlmeConfirm+0x44>)
 800fb1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb22:	bf00      	nop
 800fb24:	0800fb55 	.word	0x0800fb55
 800fb28:	0800fc03 	.word	0x0800fc03
 800fb2c:	0800fc03 	.word	0x0800fc03
 800fb30:	0800fc03 	.word	0x0800fc03
 800fb34:	0800fbd1 	.word	0x0800fbd1
 800fb38:	0800fc03 	.word	0x0800fc03
 800fb3c:	0800fc03 	.word	0x0800fc03
 800fb40:	0800fc03 	.word	0x0800fc03
 800fb44:	0800fc03 	.word	0x0800fc03
 800fb48:	0800fc03 	.word	0x0800fc03
 800fb4c:	0800fbe9 	.word	0x0800fbe9
 800fb50:	0800fc03 	.word	0x0800fc03
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800fb54:	2306      	movs	r3, #6
 800fb56:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800fb58:	f107 0308 	add.w	r3, r7, #8
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f004 fedb 	bl	8014918 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800fb62:	4b2d      	ldr	r3, [pc, #180]	; (800fc18 <MlmeConfirm+0x138>)
 800fb64:	79db      	ldrb	r3, [r3, #7]
 800fb66:	68fa      	ldr	r2, [r7, #12]
 800fb68:	4611      	mov	r1, r2
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7ff fa76 	bl	800f05c <SecureElementSetDevAddr>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d102      	bne.n	800fb7c <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	4a28      	ldr	r2, [pc, #160]	; (800fc1c <MlmeConfirm+0x13c>)
 800fb7a:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800fb7c:	4828      	ldr	r0, [pc, #160]	; (800fc20 <MlmeConfirm+0x140>)
 800fb7e:	f7ff fecd 	bl	800f91c <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800fb82:	4828      	ldr	r0, [pc, #160]	; (800fc24 <MlmeConfirm+0x144>)
 800fb84:	f000 fa76 	bl	8010074 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fb88:	4b21      	ldr	r3, [pc, #132]	; (800fc10 <MlmeConfirm+0x130>)
 800fb8a:	785b      	ldrb	r3, [r3, #1]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d108      	bne.n	800fba2 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800fb90:	4b21      	ldr	r3, [pc, #132]	; (800fc18 <MlmeConfirm+0x138>)
 800fb92:	2200      	movs	r2, #0
 800fb94:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800fb96:	4b24      	ldr	r3, [pc, #144]	; (800fc28 <MlmeConfirm+0x148>)
 800fb98:	785b      	ldrb	r3, [r3, #1]
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7ff fe14 	bl	800f7c8 <LmHandlerRequestClass>
 800fba0:	e002      	b.n	800fba8 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800fba2:	4b1d      	ldr	r3, [pc, #116]	; (800fc18 <MlmeConfirm+0x138>)
 800fba4:	22ff      	movs	r2, #255	; 0xff
 800fba6:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800fba8:	4b1a      	ldr	r3, [pc, #104]	; (800fc14 <MlmeConfirm+0x134>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d004      	beq.n	800fbbc <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800fbb2:	4b18      	ldr	r3, [pc, #96]	; (800fc14 <MlmeConfirm+0x134>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbb8:	4817      	ldr	r0, [pc, #92]	; (800fc18 <MlmeConfirm+0x138>)
 800fbba:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fbbc:	4b14      	ldr	r3, [pc, #80]	; (800fc10 <MlmeConfirm+0x130>)
 800fbbe:	785b      	ldrb	r3, [r3, #1]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d120      	bne.n	800fc06 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800fbc4:	4b14      	ldr	r3, [pc, #80]	; (800fc18 <MlmeConfirm+0x138>)
 800fbc6:	79db      	ldrb	r3, [r3, #7]
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7fe ffef 	bl	800ebac <SecureElementPrintSessionKeys>
                }
            }
            break;
 800fbce:	e01a      	b.n	800fc06 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800fbd0:	4b16      	ldr	r3, [pc, #88]	; (800fc2c <MlmeConfirm+0x14c>)
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	7a1a      	ldrb	r2, [r3, #8]
 800fbda:	4b14      	ldr	r3, [pc, #80]	; (800fc2c <MlmeConfirm+0x14c>)
 800fbdc:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	7a5a      	ldrb	r2, [r3, #9]
 800fbe2:	4b12      	ldr	r3, [pc, #72]	; (800fc2c <MlmeConfirm+0x14c>)
 800fbe4:	74da      	strb	r2, [r3, #19]
            }
            break;
 800fbe6:	e00f      	b.n	800fc08 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	785b      	ldrb	r3, [r3, #1]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d105      	bne.n	800fbfc <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800fbf0:	4b0d      	ldr	r3, [pc, #52]	; (800fc28 <MlmeConfirm+0x148>)
 800fbf2:	7c1b      	ldrb	r3, [r3, #16]
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7ff fddb 	bl	800f7b0 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800fbfa:	e005      	b.n	800fc08 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800fbfc:	f7ff fdbc 	bl	800f778 <LmHandlerDeviceTimeReq>
            break;
 800fc00:	e002      	b.n	800fc08 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800fc02:	bf00      	nop
 800fc04:	e000      	b.n	800fc08 <MlmeConfirm+0x128>
            break;
 800fc06:	bf00      	nop
    }
}
 800fc08:	bf00      	nop
 800fc0a:	3730      	adds	r7, #48	; 0x30
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}
 800fc10:	200000a0 	.word	0x200000a0
 800fc14:	200005b8 	.word	0x200005b8
 800fc18:	20000094 	.word	0x20000094
 800fc1c:	20000564 	.word	0x20000564
 800fc20:	20000098 	.word	0x20000098
 800fc24:	20000099 	.word	0x20000099
 800fc28:	200005a0 	.word	0x200005a0
 800fc2c:	200000bc 	.word	0x200000bc

0800fc30 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800fc3a:	4b20      	ldr	r3, [pc, #128]	; (800fcbc <MlmeIndication+0x8c>)
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	785a      	ldrb	r2, [r3, #1]
 800fc44:	4b1d      	ldr	r3, [pc, #116]	; (800fcbc <MlmeIndication+0x8c>)
 800fc46:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	789b      	ldrb	r3, [r3, #2]
 800fc4c:	b25a      	sxtb	r2, r3
 800fc4e:	4b1b      	ldr	r3, [pc, #108]	; (800fcbc <MlmeIndication+0x8c>)
 800fc50:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc58:	b25a      	sxtb	r2, r3
 800fc5a:	4b18      	ldr	r3, [pc, #96]	; (800fcbc <MlmeIndication+0x8c>)
 800fc5c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fc64:	4b15      	ldr	r3, [pc, #84]	; (800fcbc <MlmeIndication+0x8c>)
 800fc66:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	78da      	ldrb	r2, [r3, #3]
 800fc6c:	4b13      	ldr	r3, [pc, #76]	; (800fcbc <MlmeIndication+0x8c>)
 800fc6e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	685b      	ldr	r3, [r3, #4]
 800fc74:	4a11      	ldr	r2, [pc, #68]	; (800fcbc <MlmeIndication+0x8c>)
 800fc76:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800fc78:	4b11      	ldr	r3, [pc, #68]	; (800fcc0 <MlmeIndication+0x90>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d00d      	beq.n	800fc9e <MlmeIndication+0x6e>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	2b0a      	cmp	r3, #10
 800fc88:	d009      	beq.n	800fc9e <MlmeIndication+0x6e>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	2b0e      	cmp	r3, #14
 800fc90:	d005      	beq.n	800fc9e <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800fc92:	4b0b      	ldr	r3, [pc, #44]	; (800fcc0 <MlmeIndication+0x90>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc98:	4908      	ldr	r1, [pc, #32]	; (800fcbc <MlmeIndication+0x8c>)
 800fc9a:	2000      	movs	r0, #0
 800fc9c:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800fc9e:	6879      	ldr	r1, [r7, #4]
 800fca0:	2003      	movs	r0, #3
 800fca2:	f000 f895 	bl	800fdd0 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	2b0a      	cmp	r3, #10
 800fcac:	d001      	beq.n	800fcb2 <MlmeIndication+0x82>
 800fcae:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800fcb0:	e000      	b.n	800fcb4 <MlmeIndication+0x84>
            break;
 800fcb2:	bf00      	nop
    }
}
 800fcb4:	bf00      	nop
 800fcb6:	3708      	adds	r7, #8
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	200000bc 	.word	0x200000bc
 800fcc0:	200005b8 	.word	0x200005b8

0800fcc4 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	4603      	mov	r3, r0
 800fccc:	6039      	str	r1, [r7, #0]
 800fcce:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	60fb      	str	r3, [r7, #12]
    switch( id )
 800fcd4:	79fb      	ldrb	r3, [r7, #7]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d104      	bne.n	800fce4 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800fcda:	f000 fa8d 	bl	80101f8 <LmhpCompliancePackageFactory>
 800fcde:	4603      	mov	r3, r0
 800fce0:	60fb      	str	r3, [r7, #12]
                break;
 800fce2:	e00d      	b.n	800fd00 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800fce4:	f107 020c 	add.w	r2, r7, #12
 800fce8:	79fb      	ldrb	r3, [r7, #7]
 800fcea:	4611      	mov	r1, r2
 800fcec:	4618      	mov	r0, r3
 800fcee:	f000 ff75 	bl	8010bdc <LmhpPackagesRegister>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d002      	beq.n	800fcfe <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800fcf8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcfc:	e03b      	b.n	800fd76 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800fcfe:	bf00      	nop
            }
    }
    if( package != NULL )
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d035      	beq.n	800fd72 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800fd06:	79fb      	ldrb	r3, [r7, #7]
 800fd08:	68fa      	ldr	r2, [r7, #12]
 800fd0a:	491d      	ldr	r1, [pc, #116]	; (800fd80 <LmHandlerPackageRegister+0xbc>)
 800fd0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800fd10:	79fb      	ldrb	r3, [r7, #7]
 800fd12:	4a1b      	ldr	r2, [pc, #108]	; (800fd80 <LmHandlerPackageRegister+0xbc>)
 800fd14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd18:	4a1a      	ldr	r2, [pc, #104]	; (800fd84 <LmHandlerPackageRegister+0xc0>)
 800fd1a:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800fd1c:	4b1a      	ldr	r3, [pc, #104]	; (800fd88 <LmHandlerPackageRegister+0xc4>)
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	79fb      	ldrb	r3, [r7, #7]
 800fd22:	4917      	ldr	r1, [pc, #92]	; (800fd80 <LmHandlerPackageRegister+0xbc>)
 800fd24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fd28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fd2a:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800fd2c:	4b16      	ldr	r3, [pc, #88]	; (800fd88 <LmHandlerPackageRegister+0xc4>)
 800fd2e:	681a      	ldr	r2, [r3, #0]
 800fd30:	79fb      	ldrb	r3, [r7, #7]
 800fd32:	4913      	ldr	r1, [pc, #76]	; (800fd80 <LmHandlerPackageRegister+0xbc>)
 800fd34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fd38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800fd3a:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800fd3c:	79fb      	ldrb	r3, [r7, #7]
 800fd3e:	4a10      	ldr	r2, [pc, #64]	; (800fd80 <LmHandlerPackageRegister+0xbc>)
 800fd40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd44:	4a11      	ldr	r2, [pc, #68]	; (800fd8c <LmHandlerPackageRegister+0xc8>)
 800fd46:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800fd48:	4b0f      	ldr	r3, [pc, #60]	; (800fd88 <LmHandlerPackageRegister+0xc4>)
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	79fb      	ldrb	r3, [r7, #7]
 800fd4e:	490c      	ldr	r1, [pc, #48]	; (800fd80 <LmHandlerPackageRegister+0xbc>)
 800fd50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fd54:	6992      	ldr	r2, [r2, #24]
 800fd56:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800fd58:	79fb      	ldrb	r3, [r7, #7]
 800fd5a:	4a09      	ldr	r2, [pc, #36]	; (800fd80 <LmHandlerPackageRegister+0xbc>)
 800fd5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	4a0b      	ldr	r2, [pc, #44]	; (800fd90 <LmHandlerPackageRegister+0xcc>)
 800fd64:	6851      	ldr	r1, [r2, #4]
 800fd66:	4a0a      	ldr	r2, [pc, #40]	; (800fd90 <LmHandlerPackageRegister+0xcc>)
 800fd68:	7852      	ldrb	r2, [r2, #1]
 800fd6a:	6838      	ldr	r0, [r7, #0]
 800fd6c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	e001      	b.n	800fd76 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fd72:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3710      	adds	r7, #16
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	2000058c 	.word	0x2000058c
 800fd84:	0800f461 	.word	0x0800f461
 800fd88:	200005b8 	.word	0x200005b8
 800fd8c:	0800f779 	.word	0x0800f779
 800fd90:	200000d0 	.word	0x200000d0

0800fd94 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800fd9e:	79fb      	ldrb	r3, [r7, #7]
 800fda0:	2b04      	cmp	r3, #4
 800fda2:	d80e      	bhi.n	800fdc2 <LmHandlerPackageIsInitialized+0x2e>
 800fda4:	79fb      	ldrb	r3, [r7, #7]
 800fda6:	4a09      	ldr	r2, [pc, #36]	; (800fdcc <LmHandlerPackageIsInitialized+0x38>)
 800fda8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdac:	689b      	ldr	r3, [r3, #8]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d007      	beq.n	800fdc2 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800fdb2:	79fb      	ldrb	r3, [r7, #7]
 800fdb4:	4a05      	ldr	r2, [pc, #20]	; (800fdcc <LmHandlerPackageIsInitialized+0x38>)
 800fdb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdba:	689b      	ldr	r3, [r3, #8]
 800fdbc:	4798      	blx	r3
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	e000      	b.n	800fdc4 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800fdc2:	2300      	movs	r3, #0
    }
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3708      	adds	r7, #8
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	2000058c 	.word	0x2000058c

0800fdd0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	6039      	str	r1, [r7, #0]
 800fdda:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fddc:	2300      	movs	r3, #0
 800fdde:	73fb      	strb	r3, [r7, #15]
 800fde0:	e069      	b.n	800feb6 <LmHandlerPackagesNotify+0xe6>
    {
        if( LmHandlerPackages[i] != NULL )
 800fde2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fde6:	4a38      	ldr	r2, [pc, #224]	; (800fec8 <LmHandlerPackagesNotify+0xf8>)
 800fde8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d051      	beq.n	800fe94 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800fdf0:	79fb      	ldrb	r3, [r7, #7]
 800fdf2:	2b03      	cmp	r3, #3
 800fdf4:	d850      	bhi.n	800fe98 <LmHandlerPackagesNotify+0xc8>
 800fdf6:	a201      	add	r2, pc, #4	; (adr r2, 800fdfc <LmHandlerPackagesNotify+0x2c>)
 800fdf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdfc:	0800fe0d 	.word	0x0800fe0d
 800fe00:	0800fe2f 	.word	0x0800fe2f
 800fe04:	0800fe51 	.word	0x0800fe51
 800fe08:	0800fe73 	.word	0x0800fe73
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800fe0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe10:	4a2d      	ldr	r2, [pc, #180]	; (800fec8 <LmHandlerPackagesNotify+0xf8>)
 800fe12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe16:	699b      	ldr	r3, [r3, #24]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d03f      	beq.n	800fe9c <LmHandlerPackagesNotify+0xcc>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800fe1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe20:	4a29      	ldr	r2, [pc, #164]	; (800fec8 <LmHandlerPackagesNotify+0xf8>)
 800fe22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe26:	699b      	ldr	r3, [r3, #24]
 800fe28:	6838      	ldr	r0, [r7, #0]
 800fe2a:	4798      	blx	r3
                        }
                        break;
 800fe2c:	e036      	b.n	800fe9c <LmHandlerPackagesNotify+0xcc>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800fe2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe32:	4a25      	ldr	r2, [pc, #148]	; (800fec8 <LmHandlerPackagesNotify+0xf8>)
 800fe34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe38:	69db      	ldr	r3, [r3, #28]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d030      	beq.n	800fea0 <LmHandlerPackagesNotify+0xd0>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800fe3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe42:	4a21      	ldr	r2, [pc, #132]	; (800fec8 <LmHandlerPackagesNotify+0xf8>)
 800fe44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe48:	69db      	ldr	r3, [r3, #28]
 800fe4a:	6838      	ldr	r0, [r7, #0]
 800fe4c:	4798      	blx	r3
                        }
                        break;
 800fe4e:	e027      	b.n	800fea0 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800fe50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe54:	4a1c      	ldr	r2, [pc, #112]	; (800fec8 <LmHandlerPackagesNotify+0xf8>)
 800fe56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe5a:	6a1b      	ldr	r3, [r3, #32]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d021      	beq.n	800fea4 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800fe60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe64:	4a18      	ldr	r2, [pc, #96]	; (800fec8 <LmHandlerPackagesNotify+0xf8>)
 800fe66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe6a:	6a1b      	ldr	r3, [r3, #32]
 800fe6c:	6838      	ldr	r0, [r7, #0]
 800fe6e:	4798      	blx	r3
                        }
                        break;
 800fe70:	e018      	b.n	800fea4 <LmHandlerPackagesNotify+0xd4>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800fe72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe76:	4a14      	ldr	r2, [pc, #80]	; (800fec8 <LmHandlerPackagesNotify+0xf8>)
 800fe78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d012      	beq.n	800fea8 <LmHandlerPackagesNotify+0xd8>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800fe82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe86:	4a10      	ldr	r2, [pc, #64]	; (800fec8 <LmHandlerPackagesNotify+0xf8>)
 800fe88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe8e:	6838      	ldr	r0, [r7, #0]
 800fe90:	4798      	blx	r3
                        }
                        break;
 800fe92:	e009      	b.n	800fea8 <LmHandlerPackagesNotify+0xd8>
                default:
                    {
                        break;
                    }
            }
        }
 800fe94:	bf00      	nop
 800fe96:	e008      	b.n	800feaa <LmHandlerPackagesNotify+0xda>
                        break;
 800fe98:	bf00      	nop
 800fe9a:	e006      	b.n	800feaa <LmHandlerPackagesNotify+0xda>
                        break;
 800fe9c:	bf00      	nop
 800fe9e:	e004      	b.n	800feaa <LmHandlerPackagesNotify+0xda>
                        break;
 800fea0:	bf00      	nop
 800fea2:	e002      	b.n	800feaa <LmHandlerPackagesNotify+0xda>
                        break;
 800fea4:	bf00      	nop
 800fea6:	e000      	b.n	800feaa <LmHandlerPackagesNotify+0xda>
                        break;
 800fea8:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800feaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	3301      	adds	r3, #1
 800feb2:	b2db      	uxtb	r3, r3
 800feb4:	73fb      	strb	r3, [r7, #15]
 800feb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800feba:	2b04      	cmp	r3, #4
 800febc:	dd91      	ble.n	800fde2 <LmHandlerPackagesNotify+0x12>
    }
}
 800febe:	bf00      	nop
 800fec0:	bf00      	nop
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	2000058c 	.word	0x2000058c

0800fecc <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b082      	sub	sp, #8
 800fed0:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fed2:	2300      	movs	r3, #0
 800fed4:	71fb      	strb	r3, [r7, #7]
 800fed6:	e018      	b.n	800ff0a <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800fed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fedc:	4a0f      	ldr	r2, [pc, #60]	; (800ff1c <LmHandlerPackageIsTxPending+0x50>)
 800fede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00b      	beq.n	800fefe <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800fee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800feea:	4a0c      	ldr	r2, [pc, #48]	; (800ff1c <LmHandlerPackageIsTxPending+0x50>)
 800feec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fef0:	68db      	ldr	r3, [r3, #12]
 800fef2:	4798      	blx	r3
 800fef4:	4603      	mov	r3, r0
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d001      	beq.n	800fefe <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800fefa:	2301      	movs	r3, #1
 800fefc:	e00a      	b.n	800ff14 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fefe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	3301      	adds	r3, #1
 800ff06:	b2db      	uxtb	r3, r3
 800ff08:	71fb      	strb	r3, [r7, #7]
 800ff0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff0e:	2b04      	cmp	r3, #4
 800ff10:	dde2      	ble.n	800fed8 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800ff12:	2300      	movs	r3, #0
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3708      	adds	r7, #8
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}
 800ff1c:	2000058c 	.word	0x2000058c

0800ff20 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b082      	sub	sp, #8
 800ff24:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ff26:	2300      	movs	r3, #0
 800ff28:	71fb      	strb	r3, [r7, #7]
 800ff2a:	e022      	b.n	800ff72 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ff2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff30:	4a14      	ldr	r2, [pc, #80]	; (800ff84 <LmHandlerPackagesProcess+0x64>)
 800ff32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d015      	beq.n	800ff66 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ff3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff3e:	4a11      	ldr	r2, [pc, #68]	; (800ff84 <LmHandlerPackagesProcess+0x64>)
 800ff40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff44:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d00d      	beq.n	800ff66 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ff4a:	79fb      	ldrb	r3, [r7, #7]
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7ff ff21 	bl	800fd94 <LmHandlerPackageIsInitialized>
 800ff52:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d006      	beq.n	800ff66 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800ff58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff5c:	4a09      	ldr	r2, [pc, #36]	; (800ff84 <LmHandlerPackagesProcess+0x64>)
 800ff5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff62:	691b      	ldr	r3, [r3, #16]
 800ff64:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ff66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff6a:	b2db      	uxtb	r3, r3
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	b2db      	uxtb	r3, r3
 800ff70:	71fb      	strb	r3, [r7, #7]
 800ff72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff76:	2b04      	cmp	r3, #4
 800ff78:	ddd8      	ble.n	800ff2c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ff7a:	bf00      	nop
 800ff7c:	bf00      	nop
 800ff7e:	3708      	adds	r7, #8
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}
 800ff84:	2000058c 	.word	0x2000058c

0800ff88 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	4603      	mov	r3, r0
 800ff90:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800ff92:	4a09      	ldr	r2, [pc, #36]	; (800ffb8 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800ff94:	79fb      	ldrb	r3, [r7, #7]
 800ff96:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800ff98:	4b08      	ldr	r3, [pc, #32]	; (800ffbc <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d005      	beq.n	800ffae <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800ffa2:	4b06      	ldr	r3, [pc, #24]	; (800ffbc <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffa8:	79fa      	ldrb	r2, [r7, #7]
 800ffaa:	4610      	mov	r0, r2
 800ffac:	4798      	blx	r3
    }
}
 800ffae:	bf00      	nop
 800ffb0:	3708      	adds	r7, #8
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
 800ffb6:	bf00      	nop
 800ffb8:	200005a0 	.word	0x200005a0
 800ffbc:	200005b8 	.word	0x200005b8

0800ffc0 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800ffca:	4a09      	ldr	r2, [pc, #36]	; (800fff0 <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800ffcc:	79fb      	ldrb	r3, [r7, #7]
 800ffce:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800ffd0:	4b08      	ldr	r3, [pc, #32]	; (800fff4 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d005      	beq.n	800ffe6 <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800ffda:	4b06      	ldr	r3, [pc, #24]	; (800fff4 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffe0:	79fa      	ldrb	r2, [r7, #7]
 800ffe2:	4610      	mov	r0, r2
 800ffe4:	4798      	blx	r3
    }
}
 800ffe6:	bf00      	nop
 800ffe8:	3708      	adds	r7, #8
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	200005a0 	.word	0x200005a0
 800fff4:	200005b8 	.word	0x200005b8

0800fff8 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800fff8:	b480      	push	{r7}
 800fffa:	b083      	sub	sp, #12
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	4603      	mov	r3, r0
 8010000:	6039      	str	r1, [r7, #0]
 8010002:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d102      	bne.n	8010010 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 801000a:	f04f 33ff 	mov.w	r3, #4294967295
 801000e:	e00e      	b.n	801002e <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 8010010:	79fb      	ldrb	r3, [r7, #7]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d002      	beq.n	801001c <LmHandlerGetVersion+0x24>
 8010016:	2b01      	cmp	r3, #1
 8010018:	d004      	beq.n	8010024 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 801001a:	e007      	b.n	801002c <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	4a06      	ldr	r2, [pc, #24]	; (8010038 <LmHandlerGetVersion+0x40>)
 8010020:	601a      	str	r2, [r3, #0]
            break;
 8010022:	e003      	b.n	801002c <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	4a05      	ldr	r2, [pc, #20]	; (801003c <LmHandlerGetVersion+0x44>)
 8010028:	601a      	str	r2, [r3, #0]
            break;
 801002a:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 801002c:	2300      	movs	r3, #0
}
 801002e:	4618      	mov	r0, r3
 8010030:	370c      	adds	r7, #12
 8010032:	46bd      	mov	sp, r7
 8010034:	bc80      	pop	{r7}
 8010036:	4770      	bx	lr
 8010038:	01000400 	.word	0x01000400
 801003c:	02010001 	.word	0x02010001

08010040 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8010040:	b580      	push	{r7, lr}
 8010042:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8010044:	f005 fce0 	bl	8015a08 <LoRaMacDeInitialization>
 8010048:	4603      	mov	r3, r0
 801004a:	2b00      	cmp	r3, #0
 801004c:	d101      	bne.n	8010052 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801004e:	2300      	movs	r3, #0
 8010050:	e001      	b.n	8010056 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010052:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010056:	4618      	mov	r0, r3
 8010058:	bd80      	pop	{r7, pc}

0801005a <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 801005a:	b580      	push	{r7, lr}
 801005c:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 801005e:	f004 fb93 	bl	8014788 <LoRaMacHalt>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	d101      	bne.n	801006c <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010068:	2300      	movs	r3, #0
 801006a:	e001      	b.n	8010070 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 801006c:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010070:	4618      	mov	r0, r3
 8010072:	bd80      	pop	{r7, pc}

08010074 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b08c      	sub	sp, #48	; 0x30
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d102      	bne.n	8010088 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010082:	f04f 33ff 	mov.w	r3, #4294967295
 8010086:	e016      	b.n	80100b6 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8010088:	2321      	movs	r3, #33	; 0x21
 801008a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 801008c:	f107 0308 	add.w	r3, r7, #8
 8010090:	4618      	mov	r0, r3
 8010092:	f004 fc41 	bl	8014918 <LoRaMacMibGetRequestConfirm>
 8010096:	4603      	mov	r3, r0
 8010098:	2b00      	cmp	r3, #0
 801009a:	d002      	beq.n	80100a2 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 801009c:	f04f 33ff 	mov.w	r3, #4294967295
 80100a0:	e009      	b.n	80100b6 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 80100a2:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f993 2000 	ldrsb.w	r2, [r3]
 80100b0:	4b03      	ldr	r3, [pc, #12]	; (80100c0 <LmHandlerGetTxPower+0x4c>)
 80100b2:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 80100b4:	2300      	movs	r3, #0
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3730      	adds	r7, #48	; 0x30
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	200005a0 	.word	0x200005a0

080100c4 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b08e      	sub	sp, #56	; 0x38
 80100c8:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 80100ca:	2300      	movs	r3, #0
 80100cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 80100d0:	2300      	movs	r3, #0
 80100d2:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 80100d4:	f7ff ffc1 	bl	801005a <LmHandlerHalt>
 80100d8:	4603      	mov	r3, r0
 80100da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 80100de:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d12f      	bne.n	8010146 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 80100e6:	f000 f859 	bl	801019c <NvmDataMgmtStoreBegin>
 80100ea:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 80100ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ee:	f113 0f02 	cmn.w	r3, #2
 80100f2:	d103      	bne.n	80100fc <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 80100f4:	23f8      	movs	r3, #248	; 0xf8
 80100f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80100fa:	e01c      	b.n	8010136 <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 80100fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d104      	bne.n	801010c <LmHandlerNvmDataStore+0x48>
 8010102:	4b1b      	ldr	r3, [pc, #108]	; (8010170 <LmHandlerNvmDataStore+0xac>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	695b      	ldr	r3, [r3, #20]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d103      	bne.n	8010114 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 801010c:	23ff      	movs	r3, #255	; 0xff
 801010e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010112:	e010      	b.n	8010136 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 8010114:	2327      	movs	r3, #39	; 0x27
 8010116:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8010118:	463b      	mov	r3, r7
 801011a:	4618      	mov	r0, r3
 801011c:	f004 fbfc 	bl	8014918 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 8010124:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 8010128:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 801012a:	4b11      	ldr	r3, [pc, #68]	; (8010170 <LmHandlerNvmDataStore+0xac>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	695b      	ldr	r3, [r3, #20]
 8010130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010134:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8010136:	f000 f847 	bl	80101c8 <NvmDataMgmtStoreEnd>
 801013a:	4603      	mov	r3, r0
 801013c:	2b00      	cmp	r3, #0
 801013e:	d002      	beq.n	8010146 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8010140:	23ff      	movs	r3, #255	; 0xff
 8010142:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 8010146:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801014a:	2b00      	cmp	r3, #0
 801014c:	d109      	bne.n	8010162 <LmHandlerNvmDataStore+0x9e>
 801014e:	4b08      	ldr	r3, [pc, #32]	; (8010170 <LmHandlerNvmDataStore+0xac>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	69db      	ldr	r3, [r3, #28]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d004      	beq.n	8010162 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8010158:	4b05      	ldr	r3, [pc, #20]	; (8010170 <LmHandlerNvmDataStore+0xac>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	69db      	ldr	r3, [r3, #28]
 801015e:	2001      	movs	r0, #1
 8010160:	4798      	blx	r3
    }

    return lmhStatus;
 8010162:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010166:	4618      	mov	r0, r3
 8010168:	3738      	adds	r7, #56	; 0x38
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}
 801016e:	bf00      	nop
 8010170:	200005b8 	.word	0x200005b8

08010174 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 8010174:	b480      	push	{r7}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
 801017a:	4603      	mov	r3, r0
 801017c:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 801017e:	4b06      	ldr	r3, [pc, #24]	; (8010198 <NvmDataMgmtEvent+0x24>)
 8010180:	881a      	ldrh	r2, [r3, #0]
 8010182:	88fb      	ldrh	r3, [r7, #6]
 8010184:	4313      	orrs	r3, r2
 8010186:	b29a      	uxth	r2, r3
 8010188:	4b03      	ldr	r3, [pc, #12]	; (8010198 <NvmDataMgmtEvent+0x24>)
 801018a:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 801018c:	bf00      	nop
 801018e:	370c      	adds	r7, #12
 8010190:	46bd      	mov	sp, r7
 8010192:	bc80      	pop	{r7}
 8010194:	4770      	bx	lr
 8010196:	bf00      	nop
 8010198:	200006e0 	.word	0x200006e0

0801019c <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 801019c:	b580      	push	{r7, lr}
 801019e:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 80101a0:	4b08      	ldr	r3, [pc, #32]	; (80101c4 <NvmDataMgmtStoreBegin+0x28>)
 80101a2:	881b      	ldrh	r3, [r3, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d102      	bne.n	80101ae <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 80101a8:	f06f 0301 	mvn.w	r3, #1
 80101ac:	e008      	b.n	80101c0 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 80101ae:	f004 fac3 	bl	8014738 <LoRaMacStop>
 80101b2:	4603      	mov	r3, r0
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d002      	beq.n	80101be <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 80101b8:	f06f 0302 	mvn.w	r3, #2
 80101bc:	e000      	b.n	80101c0 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 80101be:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	200006e0 	.word	0x200006e0

080101c8 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80101cc:	4b03      	ldr	r3, [pc, #12]	; (80101dc <NvmDataMgmtStoreEnd+0x14>)
 80101ce:	2200      	movs	r2, #0
 80101d0:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 80101d2:	f004 faa3 	bl	801471c <LoRaMacStart>
    return NVM_DATA_OK;
 80101d6:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80101d8:	4618      	mov	r0, r3
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	200006e0 	.word	0x200006e0

080101e0 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 80101e4:	2220      	movs	r2, #32
 80101e6:	2100      	movs	r1, #0
 80101e8:	4802      	ldr	r0, [pc, #8]	; (80101f4 <ClassBStatusReset+0x14>)
 80101ea:	f00b fb05 	bl	801b7f8 <memset1>
}
 80101ee:	bf00      	nop
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	200006f8 	.word	0x200006f8

080101f8 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 80101f8:	b480      	push	{r7}
 80101fa:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 80101fc:	4b02      	ldr	r3, [pc, #8]	; (8010208 <LmhpCompliancePackageFactory+0x10>)
}
 80101fe:	4618      	mov	r0, r3
 8010200:	46bd      	mov	sp, r7
 8010202:	bc80      	pop	{r7}
 8010204:	4770      	bx	lr
 8010206:	bf00      	nop
 8010208:	200000d8 	.word	0x200000d8

0801020c <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b086      	sub	sp, #24
 8010210:	af02      	add	r7, sp, #8
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	4613      	mov	r3, r2
 8010218:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d018      	beq.n	8010252 <LmhpComplianceInit+0x46>
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d015      	beq.n	8010252 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 8010226:	4a19      	ldr	r2, [pc, #100]	; (801028c <LmhpComplianceInit+0x80>)
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 801022c:	4a18      	ldr	r2, [pc, #96]	; (8010290 <LmhpComplianceInit+0x84>)
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8010232:	4a17      	ldr	r2, [pc, #92]	; (8010290 <LmhpComplianceInit+0x84>)
 8010234:	79fb      	ldrb	r3, [r7, #7]
 8010236:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 8010238:	4b15      	ldr	r3, [pc, #84]	; (8010290 <LmhpComplianceInit+0x84>)
 801023a:	2201      	movs	r2, #1
 801023c:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 801023e:	2300      	movs	r3, #0
 8010240:	9300      	str	r3, [sp, #0]
 8010242:	4b14      	ldr	r3, [pc, #80]	; (8010294 <LmhpComplianceInit+0x88>)
 8010244:	2200      	movs	r2, #0
 8010246:	f04f 31ff 	mov.w	r1, #4294967295
 801024a:	4813      	ldr	r0, [pc, #76]	; (8010298 <LmhpComplianceInit+0x8c>)
 801024c:	f00f fa54 	bl	801f6f8 <UTIL_TIMER_Create>
 8010250:	e005      	b.n	801025e <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 8010252:	4b0e      	ldr	r3, [pc, #56]	; (801028c <LmhpComplianceInit+0x80>)
 8010254:	2200      	movs	r2, #0
 8010256:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8010258:	4b0d      	ldr	r3, [pc, #52]	; (8010290 <LmhpComplianceInit+0x84>)
 801025a:	2200      	movs	r2, #0
 801025c:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 801025e:	4b0c      	ldr	r3, [pc, #48]	; (8010290 <LmhpComplianceInit+0x84>)
 8010260:	2200      	movs	r2, #0
 8010262:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 8010264:	f7ff ffbc 	bl	80101e0 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 8010268:	4b09      	ldr	r3, [pc, #36]	; (8010290 <LmhpComplianceInit+0x84>)
 801026a:	2200      	movs	r2, #0
 801026c:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 801026e:	4b08      	ldr	r3, [pc, #32]	; (8010290 <LmhpComplianceInit+0x84>)
 8010270:	2200      	movs	r2, #0
 8010272:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 8010274:	4b06      	ldr	r3, [pc, #24]	; (8010290 <LmhpComplianceInit+0x84>)
 8010276:	2200      	movs	r2, #0
 8010278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 801027c:	4b04      	ldr	r3, [pc, #16]	; (8010290 <LmhpComplianceInit+0x84>)
 801027e:	2200      	movs	r2, #0
 8010280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8010284:	bf00      	nop
 8010286:	3710      	adds	r7, #16
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	2000071c 	.word	0x2000071c
 8010290:	200006e4 	.word	0x200006e4
 8010294:	08010b95 	.word	0x08010b95
 8010298:	20000720 	.word	0x20000720

0801029c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 801029c:	b480      	push	{r7}
 801029e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 80102a0:	4b02      	ldr	r3, [pc, #8]	; (80102ac <LmhpComplianceIsInitialized+0x10>)
 80102a2:	781b      	ldrb	r3, [r3, #0]
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bc80      	pop	{r7}
 80102aa:	4770      	bx	lr
 80102ac:	200006e4 	.word	0x200006e4

080102b0 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 80102b0:	b480      	push	{r7}
 80102b2:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 80102b4:	4b02      	ldr	r3, [pc, #8]	; (80102c0 <LmhpComplianceIsTxPending+0x10>)
 80102b6:	785b      	ldrb	r3, [r3, #1]
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bc80      	pop	{r7}
 80102be:	4770      	bx	lr
 80102c0:	200006e4 	.word	0x200006e4

080102c4 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 80102c4:	b590      	push	{r4, r7, lr}
 80102c6:	b085      	sub	sp, #20
 80102c8:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 80102ca:	4b33      	ldr	r3, [pc, #204]	; (8010398 <LmhpComplianceProcess+0xd4>)
 80102cc:	785b      	ldrb	r3, [r3, #1]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d03e      	beq.n	8010350 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 80102d2:	f00f fbcf 	bl	801fa74 <UTIL_TIMER_GetCurrentTime>
 80102d6:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 80102d8:	4b2f      	ldr	r3, [pc, #188]	; (8010398 <LmhpComplianceProcess+0xd4>)
 80102da:	685c      	ldr	r4, [r3, #4]
 80102dc:	f7ff f8b6 	bl	800f44c <LmHandlerGetDutyCycleWaitTime>
 80102e0:	4603      	mov	r3, r0
 80102e2:	4423      	add	r3, r4
 80102e4:	68fa      	ldr	r2, [r7, #12]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d941      	bls.n	801036e <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 80102ea:	4b2b      	ldr	r3, [pc, #172]	; (8010398 <LmhpComplianceProcess+0xd4>)
 80102ec:	7a9b      	ldrb	r3, [r3, #10]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d03d      	beq.n	801036e <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 80102f2:	23e0      	movs	r3, #224	; 0xe0
 80102f4:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 80102f6:	4b28      	ldr	r3, [pc, #160]	; (8010398 <LmhpComplianceProcess+0xd4>)
 80102f8:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 80102fa:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 80102fc:	4b26      	ldr	r3, [pc, #152]	; (8010398 <LmhpComplianceProcess+0xd4>)
 80102fe:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 8010300:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8010302:	23ff      	movs	r3, #255	; 0xff
 8010304:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 8010306:	4b24      	ldr	r3, [pc, #144]	; (8010398 <LmhpComplianceProcess+0xd4>)
 8010308:	7a19      	ldrb	r1, [r3, #8]
 801030a:	463b      	mov	r3, r7
 801030c:	2201      	movs	r2, #1
 801030e:	4618      	mov	r0, r3
 8010310:	f7ff f964 	bl	800f5dc <LmHandlerSend>
 8010314:	4603      	mov	r3, r0
 8010316:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 8010318:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d004      	beq.n	801032a <LmhpComplianceProcess+0x66>
 8010320:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010324:	f113 0f07 	cmn.w	r3, #7
 8010328:	d106      	bne.n	8010338 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 801032a:	4b1b      	ldr	r3, [pc, #108]	; (8010398 <LmhpComplianceProcess+0xd4>)
 801032c:	2200      	movs	r2, #0
 801032e:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8010330:	4b19      	ldr	r3, [pc, #100]	; (8010398 <LmhpComplianceProcess+0xd4>)
 8010332:	2200      	movs	r2, #0
 8010334:	729a      	strb	r2, [r3, #10]
 8010336:	e007      	b.n	8010348 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 8010338:	f240 51dc 	movw	r1, #1500	; 0x5dc
 801033c:	4817      	ldr	r0, [pc, #92]	; (801039c <LmhpComplianceProcess+0xd8>)
 801033e:	f00f faef 	bl	801f920 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 8010342:	4816      	ldr	r0, [pc, #88]	; (801039c <LmhpComplianceProcess+0xd8>)
 8010344:	f00f fa0e 	bl	801f764 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 8010348:	4a13      	ldr	r2, [pc, #76]	; (8010398 <LmhpComplianceProcess+0xd4>)
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	6053      	str	r3, [r2, #4]
 801034e:	e00e      	b.n	801036e <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8010350:	4b11      	ldr	r3, [pc, #68]	; (8010398 <LmhpComplianceProcess+0xd4>)
 8010352:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010356:	2b00      	cmp	r3, #0
 8010358:	d009      	beq.n	801036e <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 801035a:	4b0f      	ldr	r3, [pc, #60]	; (8010398 <LmhpComplianceProcess+0xd4>)
 801035c:	2200      	movs	r2, #0
 801035e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8010362:	4b0d      	ldr	r3, [pc, #52]	; (8010398 <LmhpComplianceProcess+0xd4>)
 8010364:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010368:	4618      	mov	r0, r3
 801036a:	f7ff fa2d 	bl	800f7c8 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 801036e:	4b0a      	ldr	r3, [pc, #40]	; (8010398 <LmhpComplianceProcess+0xd4>)
 8010370:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010374:	2b00      	cmp	r3, #0
 8010376:	d00a      	beq.n	801038e <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 8010378:	4b07      	ldr	r3, [pc, #28]	; (8010398 <LmhpComplianceProcess+0xd4>)
 801037a:	2200      	movs	r2, #0
 801037c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 8010380:	4b07      	ldr	r3, [pc, #28]	; (80103a0 <LmhpComplianceProcess+0xdc>)
 8010382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010384:	2b00      	cmp	r3, #0
 8010386:	d002      	beq.n	801038e <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 8010388:	4b05      	ldr	r3, [pc, #20]	; (80103a0 <LmhpComplianceProcess+0xdc>)
 801038a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801038c:	4798      	blx	r3
        }
    }
}
 801038e:	bf00      	nop
 8010390:	3714      	adds	r7, #20
 8010392:	46bd      	mov	sp, r7
 8010394:	bd90      	pop	{r4, r7, pc}
 8010396:	bf00      	nop
 8010398:	200006e4 	.word	0x200006e4
 801039c:	20000720 	.word	0x20000720
 80103a0:	200000d8 	.word	0x200000d8

080103a4 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 80103a4:	b5b0      	push	{r4, r5, r7, lr}
 80103a6:	b0a4      	sub	sp, #144	; 0x90
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 80103ac:	2300      	movs	r3, #0
 80103ae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 80103b2:	4bd0      	ldr	r3, [pc, #832]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 80103b4:	781b      	ldrb	r3, [r3, #0]
 80103b6:	f083 0301 	eor.w	r3, r3, #1
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	2b00      	cmp	r3, #0
 80103be:	f040 83bf 	bne.w	8010b40 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	78db      	ldrb	r3, [r3, #3]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d103      	bne.n	80103d2 <LmhpComplianceOnMcpsIndication+0x2e>
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	7b9b      	ldrb	r3, [r3, #14]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d005      	beq.n	80103de <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 80103d2:	4bc8      	ldr	r3, [pc, #800]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 80103d4:	8a1b      	ldrh	r3, [r3, #16]
 80103d6:	3301      	adds	r3, #1
 80103d8:	b29a      	uxth	r2, r3
 80103da:	4bc6      	ldr	r3, [pc, #792]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 80103dc:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	7b5b      	ldrb	r3, [r3, #13]
 80103e2:	f083 0301 	eor.w	r3, r3, #1
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	f040 83ab 	bne.w	8010b44 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	78db      	ldrb	r3, [r3, #3]
 80103f2:	2be0      	cmp	r3, #224	; 0xe0
 80103f4:	f040 83a8 	bne.w	8010b48 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 80103f8:	4bbe      	ldr	r3, [pc, #760]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 80103fa:	2200      	movs	r2, #0
 80103fc:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	689a      	ldr	r2, [r3, #8]
 8010402:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010406:	1c59      	adds	r1, r3, #1
 8010408:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 801040c:	4413      	add	r3, r2
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	2b7f      	cmp	r3, #127	; 0x7f
 8010412:	f200 8372 	bhi.w	8010afa <LmhpComplianceOnMcpsIndication+0x756>
 8010416:	a201      	add	r2, pc, #4	; (adr r2, 801041c <LmhpComplianceOnMcpsIndication+0x78>)
 8010418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801041c:	0801061d 	.word	0x0801061d
 8010420:	08010661 	.word	0x08010661
 8010424:	0801066b 	.word	0x0801066b
 8010428:	08010681 	.word	0x08010681
 801042c:	080106a3 	.word	0x080106a3
 8010430:	080106d1 	.word	0x080106d1
 8010434:	080106fd 	.word	0x080106fd
 8010438:	0801075b 	.word	0x0801075b
 801043c:	080107b3 	.word	0x080107b3
 8010440:	0801081f 	.word	0x0801081f
 8010444:	0801086f 	.word	0x0801086f
 8010448:	08010afb 	.word	0x08010afb
 801044c:	08010afb 	.word	0x08010afb
 8010450:	08010afb 	.word	0x08010afb
 8010454:	08010afb 	.word	0x08010afb
 8010458:	08010afb 	.word	0x08010afb
 801045c:	08010afb 	.word	0x08010afb
 8010460:	08010afb 	.word	0x08010afb
 8010464:	08010afb 	.word	0x08010afb
 8010468:	08010afb 	.word	0x08010afb
 801046c:	08010afb 	.word	0x08010afb
 8010470:	08010afb 	.word	0x08010afb
 8010474:	08010afb 	.word	0x08010afb
 8010478:	08010afb 	.word	0x08010afb
 801047c:	08010afb 	.word	0x08010afb
 8010480:	08010afb 	.word	0x08010afb
 8010484:	08010afb 	.word	0x08010afb
 8010488:	08010afb 	.word	0x08010afb
 801048c:	08010afb 	.word	0x08010afb
 8010490:	08010afb 	.word	0x08010afb
 8010494:	08010afb 	.word	0x08010afb
 8010498:	08010afb 	.word	0x08010afb
 801049c:	08010877 	.word	0x08010877
 80104a0:	08010889 	.word	0x08010889
 80104a4:	08010891 	.word	0x08010891
 80104a8:	08010afb 	.word	0x08010afb
 80104ac:	08010afb 	.word	0x08010afb
 80104b0:	08010afb 	.word	0x08010afb
 80104b4:	08010afb 	.word	0x08010afb
 80104b8:	08010afb 	.word	0x08010afb
 80104bc:	08010afb 	.word	0x08010afb
 80104c0:	08010afb 	.word	0x08010afb
 80104c4:	08010afb 	.word	0x08010afb
 80104c8:	08010afb 	.word	0x08010afb
 80104cc:	08010afb 	.word	0x08010afb
 80104d0:	08010afb 	.word	0x08010afb
 80104d4:	08010afb 	.word	0x08010afb
 80104d8:	08010afb 	.word	0x08010afb
 80104dc:	08010afb 	.word	0x08010afb
 80104e0:	08010afb 	.word	0x08010afb
 80104e4:	08010afb 	.word	0x08010afb
 80104e8:	08010afb 	.word	0x08010afb
 80104ec:	08010afb 	.word	0x08010afb
 80104f0:	08010afb 	.word	0x08010afb
 80104f4:	08010afb 	.word	0x08010afb
 80104f8:	08010afb 	.word	0x08010afb
 80104fc:	08010afb 	.word	0x08010afb
 8010500:	08010afb 	.word	0x08010afb
 8010504:	08010afb 	.word	0x08010afb
 8010508:	08010afb 	.word	0x08010afb
 801050c:	08010afb 	.word	0x08010afb
 8010510:	08010afb 	.word	0x08010afb
 8010514:	08010afb 	.word	0x08010afb
 8010518:	08010afb 	.word	0x08010afb
 801051c:	08010afb 	.word	0x08010afb
 8010520:	08010afb 	.word	0x08010afb
 8010524:	08010afb 	.word	0x08010afb
 8010528:	08010afb 	.word	0x08010afb
 801052c:	08010afb 	.word	0x08010afb
 8010530:	08010afb 	.word	0x08010afb
 8010534:	08010afb 	.word	0x08010afb
 8010538:	08010afb 	.word	0x08010afb
 801053c:	08010afb 	.word	0x08010afb
 8010540:	08010afb 	.word	0x08010afb
 8010544:	08010afb 	.word	0x08010afb
 8010548:	08010afb 	.word	0x08010afb
 801054c:	08010afb 	.word	0x08010afb
 8010550:	08010afb 	.word	0x08010afb
 8010554:	08010afb 	.word	0x08010afb
 8010558:	08010afb 	.word	0x08010afb
 801055c:	08010afb 	.word	0x08010afb
 8010560:	08010afb 	.word	0x08010afb
 8010564:	08010afb 	.word	0x08010afb
 8010568:	08010afb 	.word	0x08010afb
 801056c:	08010afb 	.word	0x08010afb
 8010570:	08010afb 	.word	0x08010afb
 8010574:	08010afb 	.word	0x08010afb
 8010578:	08010afb 	.word	0x08010afb
 801057c:	08010afb 	.word	0x08010afb
 8010580:	08010afb 	.word	0x08010afb
 8010584:	08010afb 	.word	0x08010afb
 8010588:	08010afb 	.word	0x08010afb
 801058c:	08010afb 	.word	0x08010afb
 8010590:	08010afb 	.word	0x08010afb
 8010594:	08010afb 	.word	0x08010afb
 8010598:	08010afb 	.word	0x08010afb
 801059c:	08010afb 	.word	0x08010afb
 80105a0:	08010afb 	.word	0x08010afb
 80105a4:	08010afb 	.word	0x08010afb
 80105a8:	08010afb 	.word	0x08010afb
 80105ac:	08010afb 	.word	0x08010afb
 80105b0:	08010afb 	.word	0x08010afb
 80105b4:	08010afb 	.word	0x08010afb
 80105b8:	08010afb 	.word	0x08010afb
 80105bc:	08010afb 	.word	0x08010afb
 80105c0:	08010afb 	.word	0x08010afb
 80105c4:	08010afb 	.word	0x08010afb
 80105c8:	08010afb 	.word	0x08010afb
 80105cc:	08010afb 	.word	0x08010afb
 80105d0:	08010afb 	.word	0x08010afb
 80105d4:	08010afb 	.word	0x08010afb
 80105d8:	08010afb 	.word	0x08010afb
 80105dc:	08010afb 	.word	0x08010afb
 80105e0:	08010afb 	.word	0x08010afb
 80105e4:	08010afb 	.word	0x08010afb
 80105e8:	08010afb 	.word	0x08010afb
 80105ec:	08010afb 	.word	0x08010afb
 80105f0:	08010afb 	.word	0x08010afb
 80105f4:	08010afb 	.word	0x08010afb
 80105f8:	08010afb 	.word	0x08010afb
 80105fc:	08010afb 	.word	0x08010afb
 8010600:	08010afb 	.word	0x08010afb
 8010604:	08010afb 	.word	0x08010afb
 8010608:	08010afb 	.word	0x08010afb
 801060c:	08010afb 	.word	0x08010afb
 8010610:	080108c3 	.word	0x080108c3
 8010614:	08010973 	.word	0x08010973
 8010618:	080109a5 	.word	0x080109a5
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 801061c:	4b35      	ldr	r3, [pc, #212]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 801061e:	68da      	ldr	r2, [r3, #12]
 8010620:	4b34      	ldr	r3, [pc, #208]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 8010622:	7a9b      	ldrb	r3, [r3, #10]
 8010624:	1c59      	adds	r1, r3, #1
 8010626:	b2c8      	uxtb	r0, r1
 8010628:	4932      	ldr	r1, [pc, #200]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 801062a:	7288      	strb	r0, [r1, #10]
 801062c:	4413      	add	r3, r2
 801062e:	2200      	movs	r2, #0
 8010630:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8010632:	4b30      	ldr	r3, [pc, #192]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 8010634:	68da      	ldr	r2, [r3, #12]
 8010636:	4b2f      	ldr	r3, [pc, #188]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 8010638:	7a9b      	ldrb	r3, [r3, #10]
 801063a:	1c59      	adds	r1, r3, #1
 801063c:	b2c8      	uxtb	r0, r1
 801063e:	492d      	ldr	r1, [pc, #180]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 8010640:	7288      	strb	r0, [r1, #10]
 8010642:	4413      	add	r3, r2
 8010644:	2206      	movs	r2, #6
 8010646:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8010648:	4b2a      	ldr	r3, [pc, #168]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 801064a:	68da      	ldr	r2, [r3, #12]
 801064c:	4b29      	ldr	r3, [pc, #164]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 801064e:	7a9b      	ldrb	r3, [r3, #10]
 8010650:	1c59      	adds	r1, r3, #1
 8010652:	b2c8      	uxtb	r0, r1
 8010654:	4927      	ldr	r1, [pc, #156]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 8010656:	7288      	strb	r0, [r1, #10]
 8010658:	4413      	add	r3, r2
 801065a:	2201      	movs	r2, #1
 801065c:	701a      	strb	r2, [r3, #0]
                break;
 801065e:	e257      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 8010660:	4b24      	ldr	r3, [pc, #144]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 8010662:	2201      	movs	r2, #1
 8010664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8010668:	e252      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 801066a:	4b23      	ldr	r3, [pc, #140]	; (80106f8 <LmhpComplianceOnMcpsIndication+0x354>)
 801066c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801066e:	2b00      	cmp	r3, #0
 8010670:	f000 8245 	beq.w	8010afe <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8010674:	4b20      	ldr	r3, [pc, #128]	; (80106f8 <LmhpComplianceOnMcpsIndication+0x354>)
 8010676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010678:	2101      	movs	r1, #1
 801067a:	2002      	movs	r0, #2
 801067c:	4798      	blx	r3
                }
                break;
 801067e:	e23e      	b.n	8010afe <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	689a      	ldr	r2, [r3, #8]
 8010684:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010688:	1c59      	adds	r1, r3, #1
 801068a:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 801068e:	4413      	add	r3, r2
 8010690:	781a      	ldrb	r2, [r3, #0]
 8010692:	4b18      	ldr	r3, [pc, #96]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 8010694:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 8010698:	4b16      	ldr	r3, [pc, #88]	; (80106f4 <LmhpComplianceOnMcpsIndication+0x350>)
 801069a:	2201      	movs	r2, #1
 801069c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 80106a0:	e236      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 80106a2:	2304      	movs	r3, #4
 80106a4:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	689a      	ldr	r2, [r3, #8]
 80106aa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80106ae:	1c59      	adds	r1, r3, #1
 80106b0:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 80106b4:	4413      	add	r3, r2
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	bf14      	ite	ne
 80106bc:	2301      	movne	r3, #1
 80106be:	2300      	moveq	r3, #0
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 80106c4:	f107 0308 	add.w	r3, r7, #8
 80106c8:	4618      	mov	r0, r3
 80106ca:	f004 fafd 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>
                break;
 80106ce:	e21f      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	689a      	ldr	r2, [r3, #8]
 80106d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80106d8:	1c59      	adds	r1, r3, #1
 80106da:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 80106de:	4413      	add	r3, r2
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	bf14      	ite	ne
 80106e6:	2301      	movne	r3, #1
 80106e8:	2300      	moveq	r3, #0
 80106ea:	b2db      	uxtb	r3, r3
 80106ec:	4618      	mov	r0, r3
 80106ee:	f005 f965 	bl	80159bc <LoRaMacTestSetDutyCycleOn>
                break;
 80106f2:	e20d      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
 80106f4:	200006e4 	.word	0x200006e4
 80106f8:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 80106fc:	4ba5      	ldr	r3, [pc, #660]	; (8010994 <LmhpComplianceOnMcpsIndication+0x5f0>)
 80106fe:	f107 0408 	add.w	r4, r7, #8
 8010702:	461d      	mov	r5, r3
 8010704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801070a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801070c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010710:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	689a      	ldr	r2, [r3, #8]
 8010718:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801071c:	1c59      	adds	r1, r3, #1
 801071e:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010722:	4413      	add	r3, r2
 8010724:	781b      	ldrb	r3, [r3, #0]
 8010726:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 801072a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 801072e:	2b0a      	cmp	r3, #10
 8010730:	f200 81e7 	bhi.w	8010b02 <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8010734:	4b98      	ldr	r3, [pc, #608]	; (8010998 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	685b      	ldr	r3, [r3, #4]
 801073a:	2b00      	cmp	r3, #0
 801073c:	f000 81e1 	beq.w	8010b02 <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8010740:	4b95      	ldr	r3, [pc, #596]	; (8010998 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	685a      	ldr	r2, [r3, #4]
 8010746:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 801074a:	009b      	lsls	r3, r3, #2
 801074c:	3390      	adds	r3, #144	; 0x90
 801074e:	443b      	add	r3, r7
 8010750:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8010754:	4618      	mov	r0, r3
 8010756:	4790      	blx	r2
                    }
                }
                break;
 8010758:	e1d3      	b.n	8010b02 <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	689a      	ldr	r2, [r3, #8]
 801075e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010762:	1c59      	adds	r1, r3, #1
 8010764:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010768:	4413      	add	r3, r2
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 8010770:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010774:	2b01      	cmp	r3, #1
 8010776:	d004      	beq.n	8010782 <LmhpComplianceOnMcpsIndication+0x3de>
 8010778:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 801077c:	2b02      	cmp	r3, #2
 801077e:	f040 81c2 	bne.w	8010b06 <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8010782:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010786:	2b01      	cmp	r3, #1
 8010788:	bf14      	ite	ne
 801078a:	2301      	movne	r3, #1
 801078c:	2300      	moveq	r3, #0
 801078e:	b2db      	uxtb	r3, r3
 8010790:	461a      	mov	r2, r3
 8010792:	4b82      	ldr	r3, [pc, #520]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010794:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8010796:	4b80      	ldr	r3, [pc, #512]	; (8010998 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	689b      	ldr	r3, [r3, #8]
 801079c:	2b00      	cmp	r3, #0
 801079e:	f000 81b2 	beq.w	8010b06 <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 80107a2:	4b7d      	ldr	r3, [pc, #500]	; (8010998 <LmhpComplianceOnMcpsIndication+0x5f4>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	689b      	ldr	r3, [r3, #8]
 80107a8:	4a7c      	ldr	r2, [pc, #496]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 80107aa:	7a12      	ldrb	r2, [r2, #8]
 80107ac:	4610      	mov	r0, r2
 80107ae:	4798      	blx	r3
                    }
                }
                break;
 80107b0:	e1a9      	b.n	8010b06 <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 80107b2:	4b7a      	ldr	r3, [pc, #488]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 80107b4:	68da      	ldr	r2, [r3, #12]
 80107b6:	4b79      	ldr	r3, [pc, #484]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 80107b8:	7a9b      	ldrb	r3, [r3, #10]
 80107ba:	1c59      	adds	r1, r3, #1
 80107bc:	b2c8      	uxtb	r0, r1
 80107be:	4977      	ldr	r1, [pc, #476]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 80107c0:	7288      	strb	r0, [r1, #10]
 80107c2:	4413      	add	r3, r2
 80107c4:	2208      	movs	r2, #8
 80107c6:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 80107c8:	2301      	movs	r3, #1
 80107ca:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80107ce:	e019      	b.n	8010804 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	689a      	ldr	r2, [r3, #8]
 80107d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80107d8:	1c59      	adds	r1, r3, #1
 80107da:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 80107de:	4413      	add	r3, r2
 80107e0:	781a      	ldrb	r2, [r3, #0]
 80107e2:	4b6e      	ldr	r3, [pc, #440]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 80107e4:	68d9      	ldr	r1, [r3, #12]
 80107e6:	4b6d      	ldr	r3, [pc, #436]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 80107e8:	7a9b      	ldrb	r3, [r3, #10]
 80107ea:	1c58      	adds	r0, r3, #1
 80107ec:	b2c4      	uxtb	r4, r0
 80107ee:	486b      	ldr	r0, [pc, #428]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 80107f0:	7284      	strb	r4, [r0, #10]
 80107f2:	440b      	add	r3, r1
 80107f4:	3201      	adds	r2, #1
 80107f6:	b2d2      	uxtb	r2, r2
 80107f8:	701a      	strb	r2, [r3, #0]
                     i++ )
 80107fa:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80107fe:	3301      	adds	r3, #1
 8010800:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8010804:	4b65      	ldr	r3, [pc, #404]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010806:	7a5a      	ldrb	r2, [r3, #9]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	7b1b      	ldrb	r3, [r3, #12]
 801080c:	4293      	cmp	r3, r2
 801080e:	bf28      	it	cs
 8010810:	4613      	movcs	r3, r2
 8010812:	b2db      	uxtb	r3, r3
 8010814:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8010818:	429a      	cmp	r2, r3
 801081a:	d3d9      	bcc.n	80107d0 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 801081c:	e178      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 801081e:	4b5f      	ldr	r3, [pc, #380]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010820:	68da      	ldr	r2, [r3, #12]
 8010822:	4b5e      	ldr	r3, [pc, #376]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010824:	7a9b      	ldrb	r3, [r3, #10]
 8010826:	1c59      	adds	r1, r3, #1
 8010828:	b2c8      	uxtb	r0, r1
 801082a:	495c      	ldr	r1, [pc, #368]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 801082c:	7288      	strb	r0, [r1, #10]
 801082e:	4413      	add	r3, r2
 8010830:	2209      	movs	r2, #9
 8010832:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8010834:	4b59      	ldr	r3, [pc, #356]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010836:	8a18      	ldrh	r0, [r3, #16]
 8010838:	4b58      	ldr	r3, [pc, #352]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 801083a:	68da      	ldr	r2, [r3, #12]
 801083c:	4b57      	ldr	r3, [pc, #348]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 801083e:	7a9b      	ldrb	r3, [r3, #10]
 8010840:	1c59      	adds	r1, r3, #1
 8010842:	b2cc      	uxtb	r4, r1
 8010844:	4955      	ldr	r1, [pc, #340]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010846:	728c      	strb	r4, [r1, #10]
 8010848:	4413      	add	r3, r2
 801084a:	b2c2      	uxtb	r2, r0
 801084c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 801084e:	4b53      	ldr	r3, [pc, #332]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010850:	8a1b      	ldrh	r3, [r3, #16]
 8010852:	0a1b      	lsrs	r3, r3, #8
 8010854:	b298      	uxth	r0, r3
 8010856:	4b51      	ldr	r3, [pc, #324]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010858:	68da      	ldr	r2, [r3, #12]
 801085a:	4b50      	ldr	r3, [pc, #320]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 801085c:	7a9b      	ldrb	r3, [r3, #10]
 801085e:	1c59      	adds	r1, r3, #1
 8010860:	b2cc      	uxtb	r4, r1
 8010862:	494e      	ldr	r1, [pc, #312]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010864:	728c      	strb	r4, [r1, #10]
 8010866:	4413      	add	r3, r2
 8010868:	b2c2      	uxtb	r2, r0
 801086a:	701a      	strb	r2, [r3, #0]
                break;
 801086c:	e150      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 801086e:	4b4b      	ldr	r3, [pc, #300]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010870:	2200      	movs	r2, #0
 8010872:	821a      	strh	r2, [r3, #16]
                break;
 8010874:	e14c      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 8010876:	2305      	movs	r3, #5
 8010878:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 801087c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010880:	4618      	mov	r0, r3
 8010882:	f004 fdcb 	bl	801541c <LoRaMacMlmeRequest>
                break;
 8010886:	e143      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 8010888:	4b45      	ldr	r3, [pc, #276]	; (80109a0 <LmhpComplianceOnMcpsIndication+0x5fc>)
 801088a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801088c:	4798      	blx	r3
                break;
 801088e:	e13f      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	689a      	ldr	r2, [r3, #8]
 8010894:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010898:	1c59      	adds	r1, r3, #1
 801089a:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 801089e:	4413      	add	r3, r2
 80108a0:	781a      	ldrb	r2, [r3, #0]
 80108a2:	4b3e      	ldr	r3, [pc, #248]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 80108a4:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 80108a6:	4b3c      	ldr	r3, [pc, #240]	; (8010998 <LmhpComplianceOnMcpsIndication+0x5f4>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	68db      	ldr	r3, [r3, #12]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	f000 812c 	beq.w	8010b0a <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 80108b2:	4b39      	ldr	r3, [pc, #228]	; (8010998 <LmhpComplianceOnMcpsIndication+0x5f4>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	4a38      	ldr	r2, [pc, #224]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 80108ba:	7d52      	ldrb	r2, [r2, #21]
 80108bc:	4610      	mov	r0, r2
 80108be:	4798      	blx	r3
                }
                break;
 80108c0:	e123      	b.n	8010b0a <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	7b1b      	ldrb	r3, [r3, #12]
 80108c6:	2b07      	cmp	r3, #7
 80108c8:	f040 8121 	bne.w	8010b0e <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 80108cc:	2306      	movs	r3, #6
 80108ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	689a      	ldr	r2, [r3, #8]
 80108d6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80108da:	4413      	add	r3, r2
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	b21a      	sxth	r2, r3
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6899      	ldr	r1, [r3, #8]
 80108e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80108e8:	3301      	adds	r3, #1
 80108ea:	440b      	add	r3, r1
 80108ec:	781b      	ldrb	r3, [r3, #0]
 80108ee:	021b      	lsls	r3, r3, #8
 80108f0:	b21b      	sxth	r3, r3
 80108f2:	4313      	orrs	r3, r2
 80108f4:	b21b      	sxth	r3, r3
 80108f6:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 80108f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 80108fc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010900:	3302      	adds	r3, #2
 8010902:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	689a      	ldr	r2, [r3, #8]
 801090a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801090e:	4413      	add	r3, r2
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	4619      	mov	r1, r3
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	689a      	ldr	r2, [r3, #8]
 8010918:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801091c:	3301      	adds	r3, #1
 801091e:	4413      	add	r3, r2
 8010920:	781b      	ldrb	r3, [r3, #0]
 8010922:	021b      	lsls	r3, r3, #8
 8010924:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6899      	ldr	r1, [r3, #8]
 801092c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010930:	3302      	adds	r3, #2
 8010932:	440b      	add	r3, r1
 8010934:	781b      	ldrb	r3, [r3, #0]
 8010936:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8010938:	4313      	orrs	r3, r2
 801093a:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 801093c:	2364      	movs	r3, #100	; 0x64
 801093e:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 8010942:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 8010944:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010948:	3303      	adds	r3, #3
 801094a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	689a      	ldr	r2, [r3, #8]
 8010952:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010956:	1c59      	adds	r1, r3, #1
 8010958:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 801095c:	4413      	add	r3, r2
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	b25b      	sxtb	r3, r3
 8010962:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 8010966:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801096a:	4618      	mov	r0, r3
 801096c:	f004 fd56 	bl	801541c <LoRaMacMlmeRequest>
                }
                break;
 8010970:	e0cd      	b.n	8010b0e <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8010972:	233b      	movs	r3, #59	; 0x3b
 8010974:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 8010978:	2300      	movs	r3, #0
 801097a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 801097e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010982:	4618      	mov	r0, r3
 8010984:	f004 f9a0 	bl	8014cc8 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 8010988:	4b04      	ldr	r3, [pc, #16]	; (801099c <LmhpComplianceOnMcpsIndication+0x5f8>)
 801098a:	2201      	movs	r2, #1
 801098c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8010990:	e0be      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
 8010992:	bf00      	nop
 8010994:	08021804 	.word	0x08021804
 8010998:	2000071c 	.word	0x2000071c
 801099c:	200006e4 	.word	0x200006e4
 80109a0:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 80109a4:	232a      	movs	r3, #42	; 0x2a
 80109a6:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 80109a8:	f107 0308 	add.w	r3, r7, #8
 80109ac:	4618      	mov	r0, r3
 80109ae:	f003 ffb3 	bl	8014918 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 80109ba:	4b65      	ldr	r3, [pc, #404]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80109bc:	68da      	ldr	r2, [r3, #12]
 80109be:	4b64      	ldr	r3, [pc, #400]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80109c0:	7a9b      	ldrb	r3, [r3, #10]
 80109c2:	1c59      	adds	r1, r3, #1
 80109c4:	b2c8      	uxtb	r0, r1
 80109c6:	4962      	ldr	r1, [pc, #392]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80109c8:	7288      	strb	r0, [r1, #10]
 80109ca:	4413      	add	r3, r2
 80109cc:	227f      	movs	r2, #127	; 0x7f
 80109ce:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 80109d0:	4b60      	ldr	r3, [pc, #384]	; (8010b54 <LmhpComplianceOnMcpsIndication+0x7b0>)
 80109d2:	681a      	ldr	r2, [r3, #0]
 80109d4:	4b5e      	ldr	r3, [pc, #376]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80109d6:	68d9      	ldr	r1, [r3, #12]
 80109d8:	4b5d      	ldr	r3, [pc, #372]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80109da:	7a9b      	ldrb	r3, [r3, #10]
 80109dc:	1c58      	adds	r0, r3, #1
 80109de:	b2c4      	uxtb	r4, r0
 80109e0:	485b      	ldr	r0, [pc, #364]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80109e2:	7284      	strb	r4, [r0, #10]
 80109e4:	440b      	add	r3, r1
 80109e6:	78d2      	ldrb	r2, [r2, #3]
 80109e8:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 80109ea:	4b5a      	ldr	r3, [pc, #360]	; (8010b54 <LmhpComplianceOnMcpsIndication+0x7b0>)
 80109ec:	681a      	ldr	r2, [r3, #0]
 80109ee:	4b58      	ldr	r3, [pc, #352]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80109f0:	68d9      	ldr	r1, [r3, #12]
 80109f2:	4b57      	ldr	r3, [pc, #348]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80109f4:	7a9b      	ldrb	r3, [r3, #10]
 80109f6:	1c58      	adds	r0, r3, #1
 80109f8:	b2c4      	uxtb	r4, r0
 80109fa:	4855      	ldr	r0, [pc, #340]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80109fc:	7284      	strb	r4, [r0, #10]
 80109fe:	440b      	add	r3, r1
 8010a00:	7892      	ldrb	r2, [r2, #2]
 8010a02:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8010a04:	4b53      	ldr	r3, [pc, #332]	; (8010b54 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	4b51      	ldr	r3, [pc, #324]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a0a:	68d9      	ldr	r1, [r3, #12]
 8010a0c:	4b50      	ldr	r3, [pc, #320]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a0e:	7a9b      	ldrb	r3, [r3, #10]
 8010a10:	1c58      	adds	r0, r3, #1
 8010a12:	b2c4      	uxtb	r4, r0
 8010a14:	484e      	ldr	r0, [pc, #312]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a16:	7284      	strb	r4, [r0, #10]
 8010a18:	440b      	add	r3, r1
 8010a1a:	7852      	ldrb	r2, [r2, #1]
 8010a1c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8010a1e:	4b4d      	ldr	r3, [pc, #308]	; (8010b54 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8010a20:	681a      	ldr	r2, [r3, #0]
 8010a22:	4b4b      	ldr	r3, [pc, #300]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a24:	68d9      	ldr	r1, [r3, #12]
 8010a26:	4b4a      	ldr	r3, [pc, #296]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a28:	7a9b      	ldrb	r3, [r3, #10]
 8010a2a:	1c58      	adds	r0, r3, #1
 8010a2c:	b2c4      	uxtb	r4, r0
 8010a2e:	4848      	ldr	r0, [pc, #288]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a30:	7284      	strb	r4, [r0, #10]
 8010a32:	440b      	add	r3, r1
 8010a34:	7812      	ldrb	r2, [r2, #0]
 8010a36:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8010a38:	4b45      	ldr	r3, [pc, #276]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a3a:	68da      	ldr	r2, [r3, #12]
 8010a3c:	4b44      	ldr	r3, [pc, #272]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a3e:	7a9b      	ldrb	r3, [r3, #10]
 8010a40:	1c59      	adds	r1, r3, #1
 8010a42:	b2c8      	uxtb	r0, r1
 8010a44:	4942      	ldr	r1, [pc, #264]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a46:	7288      	strb	r0, [r1, #10]
 8010a48:	4413      	add	r3, r2
 8010a4a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8010a4e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8010a50:	4b3f      	ldr	r3, [pc, #252]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a52:	68da      	ldr	r2, [r3, #12]
 8010a54:	4b3e      	ldr	r3, [pc, #248]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a56:	7a9b      	ldrb	r3, [r3, #10]
 8010a58:	1c59      	adds	r1, r3, #1
 8010a5a:	b2c8      	uxtb	r0, r1
 8010a5c:	493c      	ldr	r1, [pc, #240]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a5e:	7288      	strb	r0, [r1, #10]
 8010a60:	4413      	add	r3, r2
 8010a62:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8010a66:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8010a68:	4b39      	ldr	r3, [pc, #228]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a6a:	68da      	ldr	r2, [r3, #12]
 8010a6c:	4b38      	ldr	r3, [pc, #224]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a6e:	7a9b      	ldrb	r3, [r3, #10]
 8010a70:	1c59      	adds	r1, r3, #1
 8010a72:	b2c8      	uxtb	r0, r1
 8010a74:	4936      	ldr	r1, [pc, #216]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a76:	7288      	strb	r0, [r1, #10]
 8010a78:	4413      	add	r3, r2
 8010a7a:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8010a7e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8010a80:	4b33      	ldr	r3, [pc, #204]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a82:	68da      	ldr	r2, [r3, #12]
 8010a84:	4b32      	ldr	r3, [pc, #200]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a86:	7a9b      	ldrb	r3, [r3, #10]
 8010a88:	1c59      	adds	r1, r3, #1
 8010a8a:	b2c8      	uxtb	r0, r1
 8010a8c:	4930      	ldr	r1, [pc, #192]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a8e:	7288      	strb	r0, [r1, #10]
 8010a90:	4413      	add	r3, r2
 8010a92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010a96:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8010a98:	4b2d      	ldr	r3, [pc, #180]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a9a:	68da      	ldr	r2, [r3, #12]
 8010a9c:	4b2c      	ldr	r3, [pc, #176]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a9e:	7a9b      	ldrb	r3, [r3, #10]
 8010aa0:	1c59      	adds	r1, r3, #1
 8010aa2:	b2c8      	uxtb	r0, r1
 8010aa4:	492a      	ldr	r1, [pc, #168]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010aa6:	7288      	strb	r0, [r1, #10]
 8010aa8:	4413      	add	r3, r2
 8010aaa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010aae:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8010ab0:	4b27      	ldr	r3, [pc, #156]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ab2:	68da      	ldr	r2, [r3, #12]
 8010ab4:	4b26      	ldr	r3, [pc, #152]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ab6:	7a9b      	ldrb	r3, [r3, #10]
 8010ab8:	1c59      	adds	r1, r3, #1
 8010aba:	b2c8      	uxtb	r0, r1
 8010abc:	4924      	ldr	r1, [pc, #144]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010abe:	7288      	strb	r0, [r1, #10]
 8010ac0:	4413      	add	r3, r2
 8010ac2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010ac6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8010ac8:	4b21      	ldr	r3, [pc, #132]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010aca:	68da      	ldr	r2, [r3, #12]
 8010acc:	4b20      	ldr	r3, [pc, #128]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ace:	7a9b      	ldrb	r3, [r3, #10]
 8010ad0:	1c59      	adds	r1, r3, #1
 8010ad2:	b2c8      	uxtb	r0, r1
 8010ad4:	491e      	ldr	r1, [pc, #120]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ad6:	7288      	strb	r0, [r1, #10]
 8010ad8:	4413      	add	r3, r2
 8010ada:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8010ade:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8010ae0:	4b1b      	ldr	r3, [pc, #108]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ae2:	68da      	ldr	r2, [r3, #12]
 8010ae4:	4b1a      	ldr	r3, [pc, #104]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ae6:	7a9b      	ldrb	r3, [r3, #10]
 8010ae8:	1c59      	adds	r1, r3, #1
 8010aea:	b2c8      	uxtb	r0, r1
 8010aec:	4918      	ldr	r1, [pc, #96]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010aee:	7288      	strb	r0, [r1, #10]
 8010af0:	4413      	add	r3, r2
 8010af2:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8010af6:	701a      	strb	r2, [r3, #0]
                break;
 8010af8:	e00a      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 8010afa:	bf00      	nop
 8010afc:	e008      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010afe:	bf00      	nop
 8010b00:	e006      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010b02:	bf00      	nop
 8010b04:	e004      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010b06:	bf00      	nop
 8010b08:	e002      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010b0a:	bf00      	nop
 8010b0c:	e000      	b.n	8010b10 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010b0e:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 8010b10:	4b0f      	ldr	r3, [pc, #60]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010b12:	7a9b      	ldrb	r3, [r3, #10]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d00c      	beq.n	8010b32 <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 8010b18:	4b0f      	ldr	r3, [pc, #60]	; (8010b58 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8010b1a:	7a5b      	ldrb	r3, [r3, #9]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d114      	bne.n	8010b4a <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 8010b20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010b24:	480c      	ldr	r0, [pc, #48]	; (8010b58 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8010b26:	f00e fefb 	bl	801f920 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 8010b2a:	480b      	ldr	r0, [pc, #44]	; (8010b58 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8010b2c:	f00e fe1a 	bl	801f764 <UTIL_TIMER_Start>
 8010b30:	e00b      	b.n	8010b4a <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 8010b32:	4809      	ldr	r0, [pc, #36]	; (8010b58 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8010b34:	f00e fe84 	bl	801f840 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8010b38:	4b05      	ldr	r3, [pc, #20]	; (8010b50 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	705a      	strb	r2, [r3, #1]
 8010b3e:	e004      	b.n	8010b4a <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8010b40:	bf00      	nop
 8010b42:	e002      	b.n	8010b4a <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8010b44:	bf00      	nop
 8010b46:	e000      	b.n	8010b4a <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8010b48:	bf00      	nop
    }
}
 8010b4a:	3790      	adds	r7, #144	; 0x90
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8010b50:	200006e4 	.word	0x200006e4
 8010b54:	2000071c 	.word	0x2000071c
 8010b58:	20000720 	.word	0x20000720

08010b5c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	b083      	sub	sp, #12
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 8010b64:	bf00      	nop
    }
}
 8010b66:	bf00      	nop
 8010b68:	370c      	adds	r7, #12
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bc80      	pop	{r7}
 8010b6e:	4770      	bx	lr

08010b70 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 8010b70:	b480      	push	{r7}
 8010b72:	b083      	sub	sp, #12
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010b78:	4b05      	ldr	r3, [pc, #20]	; (8010b90 <LmhpComplianceOnMlmeIndication+0x20>)
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	f083 0301 	eor.w	r3, r3, #1
 8010b80:	b2db      	uxtb	r3, r3
 8010b82:	2b00      	cmp	r3, #0
    {
        return;
 8010b84:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8010b86:	370c      	adds	r7, #12
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bc80      	pop	{r7}
 8010b8c:	4770      	bx	lr
 8010b8e:	bf00      	nop
 8010b90:	200006e4 	.word	0x200006e4

08010b94 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b082      	sub	sp, #8
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 8010b9c:	4b08      	ldr	r3, [pc, #32]	; (8010bc0 <OnProcessTimer+0x2c>)
 8010b9e:	7a9b      	ldrb	r3, [r3, #10]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d002      	beq.n	8010baa <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 8010ba4:	4b06      	ldr	r3, [pc, #24]	; (8010bc0 <OnProcessTimer+0x2c>)
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 8010baa:	4b06      	ldr	r3, [pc, #24]	; (8010bc4 <OnProcessTimer+0x30>)
 8010bac:	695b      	ldr	r3, [r3, #20]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d002      	beq.n	8010bb8 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 8010bb2:	4b04      	ldr	r3, [pc, #16]	; (8010bc4 <OnProcessTimer+0x30>)
 8010bb4:	695b      	ldr	r3, [r3, #20]
 8010bb6:	4798      	blx	r3
    }
}
 8010bb8:	bf00      	nop
 8010bba:	3708      	adds	r7, #8
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}
 8010bc0:	200006e4 	.word	0x200006e4
 8010bc4:	200000d8 	.word	0x200000d8

08010bc8 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b083      	sub	sp, #12
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 8010bd0:	2300      	movs	r3, #0
}
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	370c      	adds	r7, #12
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bc80      	pop	{r7}
 8010bda:	4770      	bx	lr

08010bdc <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8010bdc:	b480      	push	{r7}
 8010bde:	b083      	sub	sp, #12
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	4603      	mov	r3, r0
 8010be4:	6039      	str	r1, [r7, #0]
 8010be6:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 8010be8:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	370c      	adds	r7, #12
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bc80      	pop	{r7}
 8010bf4:	4770      	bx	lr
	...

08010bf8 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 8010bf8:	b590      	push	{r4, r7, lr}
 8010bfa:	b083      	sub	sp, #12
 8010bfc:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8010bfe:	f00e ff39 	bl	801fa74 <UTIL_TIMER_GetCurrentTime>
 8010c02:	4603      	mov	r3, r0
 8010c04:	4a0f      	ldr	r2, [pc, #60]	; (8010c44 <OnRadioTxDone+0x4c>)
 8010c06:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8010c08:	4c0f      	ldr	r4, [pc, #60]	; (8010c48 <OnRadioTxDone+0x50>)
 8010c0a:	463b      	mov	r3, r7
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f00e f9b3 	bl	801ef78 <SysTimeGet>
 8010c12:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8010c16:	463a      	mov	r2, r7
 8010c18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c1c:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8010c20:	4a0a      	ldr	r2, [pc, #40]	; (8010c4c <OnRadioTxDone+0x54>)
 8010c22:	7813      	ldrb	r3, [r2, #0]
 8010c24:	f043 0320 	orr.w	r3, r3, #32
 8010c28:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010c2a:	f003 fa71 	bl	8014110 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8010c2e:	4b08      	ldr	r3, [pc, #32]	; (8010c50 <OnRadioTxDone+0x58>)
 8010c30:	2201      	movs	r2, #1
 8010c32:	2100      	movs	r1, #0
 8010c34:	2002      	movs	r0, #2
 8010c36:	f00f f80d 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
}
 8010c3a:	bf00      	nop
 8010c3c:	370c      	adds	r7, #12
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd90      	pop	{r4, r7, pc}
 8010c42:	bf00      	nop
 8010c44:	20001880 	.word	0x20001880
 8010c48:	20000738 	.word	0x20000738
 8010c4c:	2000187c 	.word	0x2000187c
 8010c50:	08021830 	.word	0x08021830

08010c54 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	60f8      	str	r0, [r7, #12]
 8010c5c:	4608      	mov	r0, r1
 8010c5e:	4611      	mov	r1, r2
 8010c60:	461a      	mov	r2, r3
 8010c62:	4603      	mov	r3, r0
 8010c64:	817b      	strh	r3, [r7, #10]
 8010c66:	460b      	mov	r3, r1
 8010c68:	813b      	strh	r3, [r7, #8]
 8010c6a:	4613      	mov	r3, r2
 8010c6c:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8010c6e:	f00e ff01 	bl	801fa74 <UTIL_TIMER_GetCurrentTime>
 8010c72:	4603      	mov	r3, r0
 8010c74:	4a11      	ldr	r2, [pc, #68]	; (8010cbc <OnRadioRxDone+0x68>)
 8010c76:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010c78:	4a10      	ldr	r2, [pc, #64]	; (8010cbc <OnRadioRxDone+0x68>)
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8010c7e:	4a0f      	ldr	r2, [pc, #60]	; (8010cbc <OnRadioRxDone+0x68>)
 8010c80:	897b      	ldrh	r3, [r7, #10]
 8010c82:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010c84:	4a0d      	ldr	r2, [pc, #52]	; (8010cbc <OnRadioRxDone+0x68>)
 8010c86:	893b      	ldrh	r3, [r7, #8]
 8010c88:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8010c8a:	4a0c      	ldr	r2, [pc, #48]	; (8010cbc <OnRadioRxDone+0x68>)
 8010c8c:	79fb      	ldrb	r3, [r7, #7]
 8010c8e:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010c90:	4a0b      	ldr	r2, [pc, #44]	; (8010cc0 <OnRadioRxDone+0x6c>)
 8010c92:	7813      	ldrb	r3, [r2, #0]
 8010c94:	f043 0310 	orr.w	r3, r3, #16
 8010c98:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8010c9a:	4a09      	ldr	r2, [pc, #36]	; (8010cc0 <OnRadioRxDone+0x6c>)
 8010c9c:	7813      	ldrb	r3, [r2, #0]
 8010c9e:	f043 0301 	orr.w	r3, r3, #1
 8010ca2:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 8010ca4:	f003 fa34 	bl	8014110 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8010ca8:	4b06      	ldr	r3, [pc, #24]	; (8010cc4 <OnRadioRxDone+0x70>)
 8010caa:	2201      	movs	r2, #1
 8010cac:	2100      	movs	r1, #0
 8010cae:	2002      	movs	r0, #2
 8010cb0:	f00e ffd0 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
}
 8010cb4:	bf00      	nop
 8010cb6:	3710      	adds	r7, #16
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	20001884 	.word	0x20001884
 8010cc0:	2000187c 	.word	0x2000187c
 8010cc4:	08021840 	.word	0x08021840

08010cc8 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010ccc:	4a07      	ldr	r2, [pc, #28]	; (8010cec <OnRadioTxTimeout+0x24>)
 8010cce:	7813      	ldrb	r3, [r2, #0]
 8010cd0:	f043 0308 	orr.w	r3, r3, #8
 8010cd4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010cd6:	f003 fa1b 	bl	8014110 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8010cda:	4b05      	ldr	r3, [pc, #20]	; (8010cf0 <OnRadioTxTimeout+0x28>)
 8010cdc:	2201      	movs	r2, #1
 8010cde:	2100      	movs	r1, #0
 8010ce0:	2002      	movs	r0, #2
 8010ce2:	f00e ffb7 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
}
 8010ce6:	bf00      	nop
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	2000187c 	.word	0x2000187c
 8010cf0:	08021850 	.word	0x08021850

08010cf4 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8010cf8:	4a04      	ldr	r2, [pc, #16]	; (8010d0c <OnRadioRxError+0x18>)
 8010cfa:	7813      	ldrb	r3, [r2, #0]
 8010cfc:	f043 0304 	orr.w	r3, r3, #4
 8010d00:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010d02:	f003 fa05 	bl	8014110 <OnMacProcessNotify>
}
 8010d06:	bf00      	nop
 8010d08:	bd80      	pop	{r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	2000187c 	.word	0x2000187c

08010d10 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8010d14:	4a07      	ldr	r2, [pc, #28]	; (8010d34 <OnRadioRxTimeout+0x24>)
 8010d16:	7813      	ldrb	r3, [r2, #0]
 8010d18:	f043 0302 	orr.w	r3, r3, #2
 8010d1c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010d1e:	f003 f9f7 	bl	8014110 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8010d22:	4b05      	ldr	r3, [pc, #20]	; (8010d38 <OnRadioRxTimeout+0x28>)
 8010d24:	2201      	movs	r2, #1
 8010d26:	2100      	movs	r1, #0
 8010d28:	2002      	movs	r0, #2
 8010d2a:	f00e ff93 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
}
 8010d2e:	bf00      	nop
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	2000187c 	.word	0x2000187c
 8010d38:	08021860 	.word	0x08021860

08010d3c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010d40:	4b08      	ldr	r3, [pc, #32]	; (8010d64 <UpdateRxSlotIdleState+0x28>)
 8010d42:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010d46:	2b02      	cmp	r3, #2
 8010d48:	d004      	beq.n	8010d54 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8010d4a:	4b07      	ldr	r3, [pc, #28]	; (8010d68 <UpdateRxSlotIdleState+0x2c>)
 8010d4c:	2206      	movs	r2, #6
 8010d4e:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8010d52:	e003      	b.n	8010d5c <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010d54:	4b04      	ldr	r3, [pc, #16]	; (8010d68 <UpdateRxSlotIdleState+0x2c>)
 8010d56:	2202      	movs	r2, #2
 8010d58:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 8010d5c:	bf00      	nop
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bc80      	pop	{r7}
 8010d62:	4770      	bx	lr
 8010d64:	20000c54 	.word	0x20000c54
 8010d68:	20000738 	.word	0x20000738

08010d6c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b092      	sub	sp, #72	; 0x48
 8010d70:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010d72:	4b4a      	ldr	r3, [pc, #296]	; (8010e9c <ProcessRadioTxDone+0x130>)
 8010d74:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010d78:	2b02      	cmp	r3, #2
 8010d7a:	d002      	beq.n	8010d82 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8010d7c:	4b48      	ldr	r3, [pc, #288]	; (8010ea0 <ProcessRadioTxDone+0x134>)
 8010d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d80:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d82:	f3ef 8310 	mrs	r3, PRIMASK
 8010d86:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8010d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 8010d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8010d8c:	b672      	cpsid	i
}
 8010d8e:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8010d90:	f00e fe70 	bl	801fa74 <UTIL_TIMER_GetCurrentTime>
 8010d94:	4602      	mov	r2, r0
 8010d96:	4b43      	ldr	r3, [pc, #268]	; (8010ea4 <ProcessRadioTxDone+0x138>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	1ad3      	subs	r3, r2, r3
 8010d9c:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8010d9e:	4b42      	ldr	r3, [pc, #264]	; (8010ea8 <ProcessRadioTxDone+0x13c>)
 8010da0:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 8010da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da6:	1ad3      	subs	r3, r2, r3
 8010da8:	4619      	mov	r1, r3
 8010daa:	4840      	ldr	r0, [pc, #256]	; (8010eac <ProcessRadioTxDone+0x140>)
 8010dac:	f00e fdb8 	bl	801f920 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8010db0:	483e      	ldr	r0, [pc, #248]	; (8010eac <ProcessRadioTxDone+0x140>)
 8010db2:	f00e fcd7 	bl	801f764 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8010db6:	4b3c      	ldr	r3, [pc, #240]	; (8010ea8 <ProcessRadioTxDone+0x13c>)
 8010db8:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dbe:	1ad3      	subs	r3, r2, r3
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	483b      	ldr	r0, [pc, #236]	; (8010eb0 <ProcessRadioTxDone+0x144>)
 8010dc4:	f00e fdac 	bl	801f920 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8010dc8:	4839      	ldr	r0, [pc, #228]	; (8010eb0 <ProcessRadioTxDone+0x144>)
 8010dca:	f00e fccb 	bl	801f764 <UTIL_TIMER_Start>
 8010dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dd0:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd4:	f383 8810 	msr	PRIMASK, r3
}
 8010dd8:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 8010dda:	4b33      	ldr	r3, [pc, #204]	; (8010ea8 <ProcessRadioTxDone+0x13c>)
 8010ddc:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d01a      	beq.n	8010e1a <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8010de4:	2315      	movs	r3, #21
 8010de6:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dea:	4b2c      	ldr	r3, [pc, #176]	; (8010e9c <ProcessRadioTxDone+0x130>)
 8010dec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010df0:	f107 0220 	add.w	r2, r7, #32
 8010df4:	4611      	mov	r1, r2
 8010df6:	4618      	mov	r0, r3
 8010df8:	f006 febe 	bl	8017b78 <RegionGetPhyParam>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8010e00:	4b29      	ldr	r3, [pc, #164]	; (8010ea8 <ProcessRadioTxDone+0x13c>)
 8010e02:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010e06:	69fb      	ldr	r3, [r7, #28]
 8010e08:	4413      	add	r3, r2
 8010e0a:	4619      	mov	r1, r3
 8010e0c:	4829      	ldr	r0, [pc, #164]	; (8010eb4 <ProcessRadioTxDone+0x148>)
 8010e0e:	f00e fd87 	bl	801f920 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8010e12:	4828      	ldr	r0, [pc, #160]	; (8010eb4 <ProcessRadioTxDone+0x148>)
 8010e14:	f00e fca6 	bl	801f764 <UTIL_TIMER_Start>
 8010e18:	e003      	b.n	8010e22 <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010e1a:	4b23      	ldr	r3, [pc, #140]	; (8010ea8 <ProcessRadioTxDone+0x13c>)
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8010e22:	4b20      	ldr	r3, [pc, #128]	; (8010ea4 <ProcessRadioTxDone+0x138>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	4a1d      	ldr	r2, [pc, #116]	; (8010e9c <ProcessRadioTxDone+0x130>)
 8010e28:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8010e2a:	4b1f      	ldr	r3, [pc, #124]	; (8010ea8 <ProcessRadioTxDone+0x13c>)
 8010e2c:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8010e30:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8010e32:	4b1c      	ldr	r3, [pc, #112]	; (8010ea4 <ProcessRadioTxDone+0x138>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010e38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f00e f8d3 	bl	801efe8 <SysTimeGetMcuTime>
 8010e42:	4638      	mov	r0, r7
 8010e44:	4b15      	ldr	r3, [pc, #84]	; (8010e9c <ProcessRadioTxDone+0x130>)
 8010e46:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8010e4a:	9200      	str	r2, [sp, #0]
 8010e4c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8010e50:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e54:	ca06      	ldmia	r2, {r1, r2}
 8010e56:	f00e f828 	bl	801eeaa <SysTimeSub>
 8010e5a:	f107 0314 	add.w	r3, r7, #20
 8010e5e:	463a      	mov	r2, r7
 8010e60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e64:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8010e68:	4b0f      	ldr	r3, [pc, #60]	; (8010ea8 <ProcessRadioTxDone+0x13c>)
 8010e6a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8010e6e:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8010e70:	2301      	movs	r3, #1
 8010e72:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010e74:	4b09      	ldr	r3, [pc, #36]	; (8010e9c <ProcessRadioTxDone+0x130>)
 8010e76:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d101      	bne.n	8010e82 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8010e82:	4b06      	ldr	r3, [pc, #24]	; (8010e9c <ProcessRadioTxDone+0x130>)
 8010e84:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010e88:	f107 0208 	add.w	r2, r7, #8
 8010e8c:	4611      	mov	r1, r2
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f006 fe93 	bl	8017bba <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 8010e94:	bf00      	nop
 8010e96:	3740      	adds	r7, #64	; 0x40
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}
 8010e9c:	20000c54 	.word	0x20000c54
 8010ea0:	08021f7c 	.word	0x08021f7c
 8010ea4:	20001880 	.word	0x20001880
 8010ea8:	20000738 	.word	0x20000738
 8010eac:	20000ab8 	.word	0x20000ab8
 8010eb0:	20000ad0 	.word	0x20000ad0
 8010eb4:	20000b38 	.word	0x20000b38

08010eb8 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010ebc:	4b10      	ldr	r3, [pc, #64]	; (8010f00 <PrepareRxDoneAbort+0x48>)
 8010ebe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ec6:	4a0e      	ldr	r2, [pc, #56]	; (8010f00 <PrepareRxDoneAbort+0x48>)
 8010ec8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010ecc:	4b0c      	ldr	r3, [pc, #48]	; (8010f00 <PrepareRxDoneAbort+0x48>)
 8010ece:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d002      	beq.n	8010edc <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 8010ed6:	2000      	movs	r0, #0
 8010ed8:	f001 f9fa 	bl	80122d0 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010edc:	4a08      	ldr	r2, [pc, #32]	; (8010f00 <PrepareRxDoneAbort+0x48>)
 8010ede:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010ee2:	f043 0302 	orr.w	r3, r3, #2
 8010ee6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010eea:	4a05      	ldr	r2, [pc, #20]	; (8010f00 <PrepareRxDoneAbort+0x48>)
 8010eec:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010ef0:	f043 0310 	orr.w	r3, r3, #16
 8010ef4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 8010ef8:	f7ff ff20 	bl	8010d3c <UpdateRxSlotIdleState>
}
 8010efc:	bf00      	nop
 8010efe:	bd80      	pop	{r7, pc}
 8010f00:	20000738 	.word	0x20000738

08010f04 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8010f04:	b590      	push	{r4, r7, lr}
 8010f06:	b0ab      	sub	sp, #172	; 0xac
 8010f08:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010f0a:	2312      	movs	r3, #18
 8010f0c:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8010f10:	4b81      	ldr	r3, [pc, #516]	; (8011118 <ProcessRadioRxDone+0x214>)
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 8010f18:	4b7f      	ldr	r3, [pc, #508]	; (8011118 <ProcessRadioRxDone+0x214>)
 8010f1a:	891b      	ldrh	r3, [r3, #8]
 8010f1c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 8010f20:	4b7d      	ldr	r3, [pc, #500]	; (8011118 <ProcessRadioRxDone+0x214>)
 8010f22:	895b      	ldrh	r3, [r3, #10]
 8010f24:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 8010f28:	4b7b      	ldr	r3, [pc, #492]	; (8011118 <ProcessRadioRxDone+0x214>)
 8010f2a:	7b1b      	ldrb	r3, [r3, #12]
 8010f2c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 8010f30:	2300      	movs	r3, #0
 8010f32:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 8010f36:	2300      	movs	r3, #0
 8010f38:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8010f3a:	4b78      	ldr	r3, [pc, #480]	; (801111c <ProcessRadioRxDone+0x218>)
 8010f3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 8010f44:	2300      	movs	r3, #0
 8010f46:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 8010f50:	2301      	movs	r3, #1
 8010f52:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8010f56:	4a72      	ldr	r2, [pc, #456]	; (8011120 <ProcessRadioRxDone+0x21c>)
 8010f58:	7813      	ldrb	r3, [r2, #0]
 8010f5a:	f36f 0300 	bfc	r3, #0, #1
 8010f5e:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 8010f60:	4b70      	ldr	r3, [pc, #448]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010f62:	2200      	movs	r2, #0
 8010f64:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 8010f68:	4a6e      	ldr	r2, [pc, #440]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010f6a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8010f6e:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 8010f72:	4a6c      	ldr	r2, [pc, #432]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010f74:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010f78:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010f7c:	4b69      	ldr	r3, [pc, #420]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010f7e:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 8010f82:	4b68      	ldr	r3, [pc, #416]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010f84:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 8010f88:	4b66      	ldr	r3, [pc, #408]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 8010f90:	4b64      	ldr	r3, [pc, #400]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010f92:	2200      	movs	r2, #0
 8010f94:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8010f98:	4b62      	ldr	r3, [pc, #392]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8010fa0:	4b60      	ldr	r3, [pc, #384]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8010fa8:	4b5e      	ldr	r3, [pc, #376]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010faa:	2200      	movs	r2, #0
 8010fac:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 8010fb0:	4b5c      	ldr	r3, [pc, #368]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 8010fb8:	4b5a      	ldr	r3, [pc, #360]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010fba:	2200      	movs	r2, #0
 8010fbc:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8010fc0:	4b58      	ldr	r3, [pc, #352]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010fc8:	4b56      	ldr	r3, [pc, #344]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8010fd0:	4b54      	ldr	r3, [pc, #336]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010fd8:	4b52      	ldr	r3, [pc, #328]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010fda:	2200      	movs	r2, #0
 8010fdc:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8010fe0:	4b50      	ldr	r3, [pc, #320]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8010fe8:	4b4f      	ldr	r3, [pc, #316]	; (8011128 <ProcessRadioRxDone+0x224>)
 8010fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fec:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8010fee:	4b4d      	ldr	r3, [pc, #308]	; (8011124 <ProcessRadioRxDone+0x220>)
 8010ff0:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d102      	bne.n	8010ffe <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 8010ff8:	484c      	ldr	r0, [pc, #304]	; (801112c <ProcessRadioRxDone+0x228>)
 8010ffa:	f00e fc21 	bl	801f840 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8010ffe:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011002:	4619      	mov	r1, r3
 8011004:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8011008:	f004 fe28 	bl	8015c5c <LoRaMacClassBRxBeacon>
 801100c:	4603      	mov	r3, r0
 801100e:	2b00      	cmp	r3, #0
 8011010:	d00b      	beq.n	801102a <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8011012:	4a44      	ldr	r2, [pc, #272]	; (8011124 <ProcessRadioRxDone+0x220>)
 8011014:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8011018:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 801101c:	4a41      	ldr	r2, [pc, #260]	; (8011124 <ProcessRadioRxDone+0x220>)
 801101e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011022:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 8011026:	f000 bc75 	b.w	8011914 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801102a:	4b3c      	ldr	r3, [pc, #240]	; (801111c <ProcessRadioRxDone+0x218>)
 801102c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011030:	2b01      	cmp	r3, #1
 8011032:	d11e      	bne.n	8011072 <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011034:	f004 fe25 	bl	8015c82 <LoRaMacClassBIsPingExpected>
 8011038:	4603      	mov	r3, r0
 801103a:	2b00      	cmp	r3, #0
 801103c:	d00a      	beq.n	8011054 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801103e:	2000      	movs	r0, #0
 8011040:	f004 fdd6 	bl	8015bf0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011044:	2000      	movs	r0, #0
 8011046:	f004 fdf7 	bl	8015c38 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 801104a:	4b36      	ldr	r3, [pc, #216]	; (8011124 <ProcessRadioRxDone+0x220>)
 801104c:	2204      	movs	r2, #4
 801104e:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 8011052:	e00e      	b.n	8011072 <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011054:	f004 fe1c 	bl	8015c90 <LoRaMacClassBIsMulticastExpected>
 8011058:	4603      	mov	r3, r0
 801105a:	2b00      	cmp	r3, #0
 801105c:	d009      	beq.n	8011072 <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801105e:	2000      	movs	r0, #0
 8011060:	f004 fdd0 	bl	8015c04 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011064:	2000      	movs	r0, #0
 8011066:	f004 fdf0 	bl	8015c4a <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 801106a:	4b2e      	ldr	r3, [pc, #184]	; (8011124 <ProcessRadioRxDone+0x220>)
 801106c:	2205      	movs	r2, #5
 801106e:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 8011072:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011076:	2b00      	cmp	r3, #0
 8011078:	d107      	bne.n	801108a <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801107a:	4b2a      	ldr	r3, [pc, #168]	; (8011124 <ProcessRadioRxDone+0x220>)
 801107c:	2201      	movs	r2, #1
 801107e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 8011082:	f7ff ff19 	bl	8010eb8 <PrepareRxDoneAbort>
        return;
 8011086:	f000 bc45 	b.w	8011914 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 801108a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801108e:	1c5a      	adds	r2, r3, #1
 8011090:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 8011094:	461a      	mov	r2, r3
 8011096:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801109a:	4413      	add	r3, r2
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 80110a2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80110a6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	3b01      	subs	r3, #1
 80110ae:	2b06      	cmp	r3, #6
 80110b0:	f200 8403 	bhi.w	80118ba <ProcessRadioRxDone+0x9b6>
 80110b4:	a201      	add	r2, pc, #4	; (adr r2, 80110bc <ProcessRadioRxDone+0x1b8>)
 80110b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110ba:	bf00      	nop
 80110bc:	080110d9 	.word	0x080110d9
 80110c0:	080118bb 	.word	0x080118bb
 80110c4:	080112d7 	.word	0x080112d7
 80110c8:	080118bb 	.word	0x080118bb
 80110cc:	080112cf 	.word	0x080112cf
 80110d0:	080118bb 	.word	0x080118bb
 80110d4:	0801185f 	.word	0x0801185f
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80110d8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80110dc:	2b10      	cmp	r3, #16
 80110de:	d807      	bhi.n	80110f0 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80110e0:	4b10      	ldr	r3, [pc, #64]	; (8011124 <ProcessRadioRxDone+0x220>)
 80110e2:	2201      	movs	r2, #1
 80110e4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80110e8:	f7ff fee6 	bl	8010eb8 <PrepareRxDoneAbort>
                return;
 80110ec:	f000 bc12 	b.w	8011914 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 80110f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110f4:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 80110f6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80110fa:	b2db      	uxtb	r3, r3
 80110fc:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80110fe:	4b07      	ldr	r3, [pc, #28]	; (801111c <ProcessRadioRxDone+0x218>)
 8011100:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8011104:	2b00      	cmp	r3, #0
 8011106:	d013      	beq.n	8011130 <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011108:	4b06      	ldr	r3, [pc, #24]	; (8011124 <ProcessRadioRxDone+0x220>)
 801110a:	2201      	movs	r2, #1
 801110c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8011110:	f7ff fed2 	bl	8010eb8 <PrepareRxDoneAbort>
                return;
 8011114:	e3fe      	b.n	8011914 <ProcessRadioRxDone+0xa10>
 8011116:	bf00      	nop
 8011118:	20001884 	.word	0x20001884
 801111c:	20000c54 	.word	0x20000c54
 8011120:	2000187c 	.word	0x2000187c
 8011124:	20000738 	.word	0x20000738
 8011128:	08021f7c 	.word	0x08021f7c
 801112c:	20000ad0 	.word	0x20000ad0
            }

            SecureElementGetJoinEui( joinEui );
 8011130:	f107 0308 	add.w	r3, r7, #8
 8011134:	4618      	mov	r0, r3
 8011136:	f7fd ff79 	bl	800f02c <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 801113a:	f107 0218 	add.w	r2, r7, #24
 801113e:	f107 0308 	add.w	r3, r7, #8
 8011142:	4619      	mov	r1, r3
 8011144:	20ff      	movs	r0, #255	; 0xff
 8011146:	f005 ff93 	bl	8017070 <LoRaMacCryptoHandleJoinAccept>
 801114a:	4603      	mov	r3, r0
 801114c:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 8011150:	2300      	movs	r3, #0
 8011152:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8011156:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801115a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801115e:	b2db      	uxtb	r3, r3
 8011160:	b25b      	sxtb	r3, r3
 8011162:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011164:	4bb1      	ldr	r3, [pc, #708]	; (801142c <ProcessRadioRxDone+0x528>)
 8011166:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801116a:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 801116c:	4baf      	ldr	r3, [pc, #700]	; (801142c <ProcessRadioRxDone+0x528>)
 801116e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011172:	1d39      	adds	r1, r7, #4
 8011174:	2207      	movs	r2, #7
 8011176:	4618      	mov	r0, r3
 8011178:	f006 fd4e 	bl	8017c18 <RegionVerify>
 801117c:	4603      	mov	r3, r0
 801117e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 8011182:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8011186:	2b00      	cmp	r3, #0
 8011188:	f040 8095 	bne.w	80112b6 <ProcessRadioRxDone+0x3b2>
 801118c:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8011190:	2b00      	cmp	r3, #0
 8011192:	f000 8090 	beq.w	80112b6 <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8011196:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801119a:	461a      	mov	r2, r3
 801119c:	4ba3      	ldr	r3, [pc, #652]	; (801142c <ProcessRadioRxDone+0x528>)
 801119e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80111a2:	4ba2      	ldr	r3, [pc, #648]	; (801142c <ProcessRadioRxDone+0x528>)
 80111a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80111a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80111ac:	021b      	lsls	r3, r3, #8
 80111ae:	4313      	orrs	r3, r2
 80111b0:	4a9e      	ldr	r2, [pc, #632]	; (801142c <ProcessRadioRxDone+0x528>)
 80111b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80111b6:	4b9d      	ldr	r3, [pc, #628]	; (801142c <ProcessRadioRxDone+0x528>)
 80111b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80111bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80111c0:	041b      	lsls	r3, r3, #16
 80111c2:	4313      	orrs	r3, r2
 80111c4:	4a99      	ldr	r2, [pc, #612]	; (801142c <ProcessRadioRxDone+0x528>)
 80111c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80111ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111cc:	4a97      	ldr	r2, [pc, #604]	; (801142c <ProcessRadioRxDone+0x528>)
 80111ce:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 80111d2:	4b96      	ldr	r3, [pc, #600]	; (801142c <ProcessRadioRxDone+0x528>)
 80111d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80111d8:	4619      	mov	r1, r3
 80111da:	2002      	movs	r0, #2
 80111dc:	f7fd ff3e 	bl	800f05c <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80111e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80111e4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80111e8:	b2db      	uxtb	r3, r3
 80111ea:	461a      	mov	r2, r3
 80111ec:	4b8f      	ldr	r3, [pc, #572]	; (801142c <ProcessRadioRxDone+0x528>)
 80111ee:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80111f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80111f6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	461a      	mov	r2, r3
 80111fe:	4b8b      	ldr	r3, [pc, #556]	; (801142c <ProcessRadioRxDone+0x528>)
 8011200:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8011204:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011208:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801120c:	b2db      	uxtb	r3, r3
 801120e:	461a      	mov	r2, r3
 8011210:	4b86      	ldr	r3, [pc, #536]	; (801142c <ProcessRadioRxDone+0x528>)
 8011212:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8011216:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801121a:	461a      	mov	r2, r3
 801121c:	4b83      	ldr	r3, [pc, #524]	; (801142c <ProcessRadioRxDone+0x528>)
 801121e:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8011220:	4b82      	ldr	r3, [pc, #520]	; (801142c <ProcessRadioRxDone+0x528>)
 8011222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011224:	2b00      	cmp	r3, #0
 8011226:	d102      	bne.n	801122e <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8011228:	4b80      	ldr	r3, [pc, #512]	; (801142c <ProcessRadioRxDone+0x528>)
 801122a:	2201      	movs	r2, #1
 801122c:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 801122e:	4b7f      	ldr	r3, [pc, #508]	; (801142c <ProcessRadioRxDone+0x528>)
 8011230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011232:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011236:	fb02 f303 	mul.w	r3, r2, r3
 801123a:	4a7c      	ldr	r2, [pc, #496]	; (801142c <ProcessRadioRxDone+0x528>)
 801123c:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801123e:	4b7b      	ldr	r3, [pc, #492]	; (801142c <ProcessRadioRxDone+0x528>)
 8011240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011242:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011246:	4a79      	ldr	r2, [pc, #484]	; (801142c <ProcessRadioRxDone+0x528>)
 8011248:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 801124a:	4b78      	ldr	r3, [pc, #480]	; (801142c <ProcessRadioRxDone+0x528>)
 801124c:	2201      	movs	r2, #1
 801124e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8011252:	4b76      	ldr	r3, [pc, #472]	; (801142c <ProcessRadioRxDone+0x528>)
 8011254:	2200      	movs	r2, #0
 8011256:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 801125a:	f107 0318 	add.w	r3, r7, #24
 801125e:	3312      	adds	r3, #18
 8011260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8011264:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011268:	b2db      	uxtb	r3, r3
 801126a:	3b11      	subs	r3, #17
 801126c:	b2db      	uxtb	r3, r3
 801126e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 8011272:	4b6f      	ldr	r3, [pc, #444]	; (8011430 <ProcessRadioRxDone+0x52c>)
 8011274:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8011278:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 801127c:	4b6b      	ldr	r3, [pc, #428]	; (801142c <ProcessRadioRxDone+0x528>)
 801127e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011282:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8011286:	4611      	mov	r1, r2
 8011288:	4618      	mov	r0, r3
 801128a:	f006 fce6 	bl	8017c5a <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 801128e:	4b67      	ldr	r3, [pc, #412]	; (801142c <ProcessRadioRxDone+0x528>)
 8011290:	2202      	movs	r2, #2
 8011292:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8011296:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 801129a:	4618      	mov	r0, r3
 801129c:	f005 f9f2 	bl	8016684 <LoRaMacConfirmQueueIsCmdActive>
 80112a0:	4603      	mov	r3, r0
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	f000 8311 	beq.w	80118ca <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 80112a8:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80112ac:	4619      	mov	r1, r3
 80112ae:	2000      	movs	r0, #0
 80112b0:	f005 f95c 	bl	801656c <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80112b4:	e309      	b.n	80118ca <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80112b6:	2001      	movs	r0, #1
 80112b8:	f005 f9e4 	bl	8016684 <LoRaMacConfirmQueueIsCmdActive>
 80112bc:	4603      	mov	r3, r0
 80112be:	2b00      	cmp	r3, #0
 80112c0:	f000 8302 	beq.w	80118c8 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80112c4:	2101      	movs	r1, #1
 80112c6:	2007      	movs	r0, #7
 80112c8:	f005 f950 	bl	801656c <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 80112cc:	e2fc      	b.n	80118c8 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80112ce:	4b58      	ldr	r3, [pc, #352]	; (8011430 <ProcessRadioRxDone+0x52c>)
 80112d0:	2201      	movs	r2, #1
 80112d2:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80112d6:	4b55      	ldr	r3, [pc, #340]	; (801142c <ProcessRadioRxDone+0x528>)
 80112d8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80112dc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80112e0:	4b53      	ldr	r3, [pc, #332]	; (8011430 <ProcessRadioRxDone+0x52c>)
 80112e2:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 80112e6:	b25b      	sxtb	r3, r3
 80112e8:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80112ec:	230d      	movs	r3, #13
 80112ee:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80112f2:	4b4e      	ldr	r3, [pc, #312]	; (801142c <ProcessRadioRxDone+0x528>)
 80112f4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d002      	beq.n	8011302 <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80112fc:	230e      	movs	r3, #14
 80112fe:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011302:	4b4a      	ldr	r3, [pc, #296]	; (801142c <ProcessRadioRxDone+0x528>)
 8011304:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011308:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801130c:	4611      	mov	r1, r2
 801130e:	4618      	mov	r0, r3
 8011310:	f006 fc32 	bl	8017b78 <RegionGetPhyParam>
 8011314:	4603      	mov	r3, r0
 8011316:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8011318:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801131c:	3b0d      	subs	r3, #13
 801131e:	b29b      	uxth	r3, r3
 8011320:	b21b      	sxth	r3, r3
 8011322:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011326:	b21a      	sxth	r2, r3
 8011328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801132a:	b21b      	sxth	r3, r3
 801132c:	429a      	cmp	r2, r3
 801132e:	dc03      	bgt.n	8011338 <ProcessRadioRxDone+0x434>
 8011330:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011334:	2b0b      	cmp	r3, #11
 8011336:	d806      	bhi.n	8011346 <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011338:	4b3d      	ldr	r3, [pc, #244]	; (8011430 <ProcessRadioRxDone+0x52c>)
 801133a:	2201      	movs	r2, #1
 801133c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8011340:	f7ff fdba 	bl	8010eb8 <PrepareRxDoneAbort>
                return;
 8011344:	e2e6      	b.n	8011914 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 8011346:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801134a:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 801134c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011350:	b2db      	uxtb	r3, r3
 8011352:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8011356:	4b37      	ldr	r3, [pc, #220]	; (8011434 <ProcessRadioRxDone+0x530>)
 8011358:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 801135a:	23ff      	movs	r3, #255	; 0xff
 801135c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8011360:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011364:	4618      	mov	r0, r3
 8011366:	f006 f985 	bl	8017674 <LoRaMacParserData>
 801136a:	4603      	mov	r3, r0
 801136c:	2b00      	cmp	r3, #0
 801136e:	d006      	beq.n	801137e <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011370:	4b2f      	ldr	r3, [pc, #188]	; (8011430 <ProcessRadioRxDone+0x52c>)
 8011372:	2201      	movs	r2, #1
 8011374:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8011378:	f7ff fd9e 	bl	8010eb8 <PrepareRxDoneAbort>
                return;
 801137c:	e2ca      	b.n	8011914 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801137e:	4b2b      	ldr	r3, [pc, #172]	; (801142c <ProcessRadioRxDone+0x528>)
 8011380:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011384:	2b01      	cmp	r3, #1
 8011386:	d132      	bne.n	80113ee <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 8011388:	f004 fc7b 	bl	8015c82 <LoRaMacClassBIsPingExpected>
 801138c:	4603      	mov	r3, r0
 801138e:	2b00      	cmp	r3, #0
 8011390:	d014      	beq.n	80113bc <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011392:	2000      	movs	r0, #0
 8011394:	f004 fc2c 	bl	8015bf0 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8011398:	2000      	movs	r0, #0
 801139a:	f004 fc4d 	bl	8015c38 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 801139e:	4b24      	ldr	r3, [pc, #144]	; (8011430 <ProcessRadioRxDone+0x52c>)
 80113a0:	2204      	movs	r2, #4
 80113a2:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80113a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113a8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80113ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	4619      	mov	r1, r3
 80113b4:	4610      	mov	r0, r2
 80113b6:	f004 fced 	bl	8015d94 <LoRaMacClassBSetFPendingBit>
 80113ba:	e018      	b.n	80113ee <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80113bc:	f004 fc68 	bl	8015c90 <LoRaMacClassBIsMulticastExpected>
 80113c0:	4603      	mov	r3, r0
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d013      	beq.n	80113ee <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80113c6:	2000      	movs	r0, #0
 80113c8:	f004 fc1c 	bl	8015c04 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80113cc:	2000      	movs	r0, #0
 80113ce:	f004 fc3c 	bl	8015c4a <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80113d2:	4b17      	ldr	r3, [pc, #92]	; (8011430 <ProcessRadioRxDone+0x52c>)
 80113d4:	2205      	movs	r2, #5
 80113d6:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80113da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113dc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80113e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	4619      	mov	r1, r3
 80113e8:	4610      	mov	r0, r2
 80113ea:	f004 fcd3 	bl	8015d94 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 80113ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113f0:	4a0f      	ldr	r2, [pc, #60]	; (8011430 <ProcessRadioRxDone+0x52c>)
 80113f2:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 80113f6:	f107 0212 	add.w	r2, r7, #18
 80113fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80113fe:	4611      	mov	r1, r2
 8011400:	4618      	mov	r0, r3
 8011402:	f002 fd81 	bl	8013f08 <DetermineFrameType>
 8011406:	4603      	mov	r3, r0
 8011408:	2b00      	cmp	r3, #0
 801140a:	d006      	beq.n	801141a <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801140c:	4b08      	ldr	r3, [pc, #32]	; (8011430 <ProcessRadioRxDone+0x52c>)
 801140e:	2201      	movs	r2, #1
 8011410:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8011414:	f7ff fd50 	bl	8010eb8 <PrepareRxDoneAbort>
                return;
 8011418:	e27c      	b.n	8011914 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 801141a:	2300      	movs	r3, #0
 801141c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 8011420:	2300      	movs	r3, #0
 8011422:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011424:	2300      	movs	r3, #0
 8011426:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 801142a:	e055      	b.n	80114d8 <ProcessRadioRxDone+0x5d4>
 801142c:	20000c54 	.word	0x20000c54
 8011430:	20000738 	.word	0x20000738
 8011434:	20000970 	.word	0x20000970
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8011438:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 801143c:	499f      	ldr	r1, [pc, #636]	; (80116bc <ProcessRadioRxDone+0x7b8>)
 801143e:	4613      	mov	r3, r2
 8011440:	005b      	lsls	r3, r3, #1
 8011442:	4413      	add	r3, r2
 8011444:	011b      	lsls	r3, r3, #4
 8011446:	440b      	add	r3, r1
 8011448:	33ec      	adds	r3, #236	; 0xec
 801144a:	681a      	ldr	r2, [r3, #0]
 801144c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801144e:	429a      	cmp	r2, r3
 8011450:	d13d      	bne.n	80114ce <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8011452:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8011456:	4999      	ldr	r1, [pc, #612]	; (80116bc <ProcessRadioRxDone+0x7b8>)
 8011458:	4613      	mov	r3, r2
 801145a:	005b      	lsls	r3, r3, #1
 801145c:	4413      	add	r3, r2
 801145e:	011b      	lsls	r3, r3, #4
 8011460:	440b      	add	r3, r1
 8011462:	33e9      	adds	r3, #233	; 0xe9
 8011464:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8011466:	2b00      	cmp	r3, #0
 8011468:	d031      	beq.n	80114ce <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 801146a:	2301      	movs	r3, #1
 801146c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8011470:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8011474:	4991      	ldr	r1, [pc, #580]	; (80116bc <ProcessRadioRxDone+0x7b8>)
 8011476:	4613      	mov	r3, r2
 8011478:	005b      	lsls	r3, r3, #1
 801147a:	4413      	add	r3, r2
 801147c:	011b      	lsls	r3, r3, #4
 801147e:	440b      	add	r3, r1
 8011480:	33ea      	adds	r3, #234	; 0xea
 8011482:	781b      	ldrb	r3, [r3, #0]
 8011484:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8011488:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 801148c:	498b      	ldr	r1, [pc, #556]	; (80116bc <ProcessRadioRxDone+0x7b8>)
 801148e:	4613      	mov	r3, r2
 8011490:	005b      	lsls	r3, r3, #1
 8011492:	4413      	add	r3, r2
 8011494:	011b      	lsls	r3, r3, #4
 8011496:	440b      	add	r3, r1
 8011498:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80114a2:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80114a6:	4985      	ldr	r1, [pc, #532]	; (80116bc <ProcessRadioRxDone+0x7b8>)
 80114a8:	4613      	mov	r3, r2
 80114aa:	005b      	lsls	r3, r3, #1
 80114ac:	4413      	add	r3, r2
 80114ae:	011b      	lsls	r3, r3, #4
 80114b0:	440b      	add	r3, r1
 80114b2:	33ec      	adds	r3, #236	; 0xec
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80114ba:	4b80      	ldr	r3, [pc, #512]	; (80116bc <ProcessRadioRxDone+0x7b8>)
 80114bc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80114c0:	2b02      	cmp	r3, #2
 80114c2:	d10e      	bne.n	80114e2 <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80114c4:	4b7e      	ldr	r3, [pc, #504]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 80114c6:	2203      	movs	r2, #3
 80114c8:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 80114cc:	e009      	b.n	80114e2 <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80114ce:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 80114d2:	3301      	adds	r3, #1
 80114d4:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 80114d8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d0ab      	beq.n	8011438 <ProcessRadioRxDone+0x534>
 80114e0:	e000      	b.n	80114e4 <ProcessRadioRxDone+0x5e0>
                    break;
 80114e2:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80114e4:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80114e8:	2b01      	cmp	r3, #1
 80114ea:	d117      	bne.n	801151c <ProcessRadioRxDone+0x618>
 80114ec:	7cbb      	ldrb	r3, [r7, #18]
 80114ee:	2b03      	cmp	r3, #3
 80114f0:	d10d      	bne.n	801150e <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80114f2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80114f6:	f003 0320 	and.w	r3, r3, #32
 80114fa:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d106      	bne.n	801150e <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8011500:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011508:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 801150a:	2b00      	cmp	r3, #0
 801150c:	d006      	beq.n	801151c <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801150e:	4b6c      	ldr	r3, [pc, #432]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 8011510:	2201      	movs	r2, #1
 8011512:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8011516:	f7ff fccf 	bl	8010eb8 <PrepareRxDoneAbort>
                return;
 801151a:	e1fb      	b.n	8011914 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 801151c:	7cb9      	ldrb	r1, [r7, #18]
 801151e:	4c67      	ldr	r4, [pc, #412]	; (80116bc <ProcessRadioRxDone+0x7b8>)
 8011520:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011524:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8011528:	f107 0314 	add.w	r3, r7, #20
 801152c:	9301      	str	r3, [sp, #4]
 801152e:	f107 0313 	add.w	r3, r7, #19
 8011532:	9300      	str	r3, [sp, #0]
 8011534:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8011538:	f000 fee4 	bl	8012304 <GetFCntDown>
 801153c:	4603      	mov	r3, r0
 801153e:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011542:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8011546:	2b00      	cmp	r3, #0
 8011548:	d017      	beq.n	801157a <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 801154a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 801154e:	2b07      	cmp	r3, #7
 8011550:	d104      	bne.n	801155c <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8011552:	4b5b      	ldr	r3, [pc, #364]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 8011554:	2208      	movs	r2, #8
 8011556:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 801155a:	e003      	b.n	8011564 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801155c:	4b58      	ldr	r3, [pc, #352]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 801155e:	2201      	movs	r2, #1
 8011560:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	4a56      	ldr	r2, [pc, #344]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 8011568:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	4a54      	ldr	r2, [pc, #336]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 8011570:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 8011574:	f7ff fca0 	bl	8010eb8 <PrepareRxDoneAbort>
                return;
 8011578:	e1cc      	b.n	8011914 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 801157a:	7cfa      	ldrb	r2, [r7, #19]
 801157c:	6979      	ldr	r1, [r7, #20]
 801157e:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8011582:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011586:	9300      	str	r3, [sp, #0]
 8011588:	460b      	mov	r3, r1
 801158a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801158e:	f005 fed1 	bl	8017334 <LoRaMacCryptoUnsecureMessage>
 8011592:	4603      	mov	r3, r0
 8011594:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011598:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 801159c:	2b00      	cmp	r3, #0
 801159e:	d00f      	beq.n	80115c0 <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 80115a0:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80115a4:	2b02      	cmp	r3, #2
 80115a6:	d104      	bne.n	80115b2 <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80115a8:	4b45      	ldr	r3, [pc, #276]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 80115aa:	220a      	movs	r2, #10
 80115ac:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 80115b0:	e003      	b.n	80115ba <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80115b2:	4b43      	ldr	r3, [pc, #268]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 80115b4:	220b      	movs	r2, #11
 80115b6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 80115ba:	f7ff fc7d 	bl	8010eb8 <PrepareRxDoneAbort>
                return;
 80115be:	e1a9      	b.n	8011914 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80115c0:	4b3f      	ldr	r3, [pc, #252]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 80115c2:	2200      	movs	r2, #0
 80115c4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 80115c8:	4a3d      	ldr	r2, [pc, #244]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 80115ca:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80115ce:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 80115d2:	4b3b      	ldr	r3, [pc, #236]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 80115d4:	2200      	movs	r2, #0
 80115d6:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 80115da:	4b39      	ldr	r3, [pc, #228]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 80115dc:	2200      	movs	r2, #0
 80115de:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80115e2:	697b      	ldr	r3, [r7, #20]
 80115e4:	4a36      	ldr	r2, [pc, #216]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 80115e6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	4a34      	ldr	r2, [pc, #208]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 80115ee:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80115f2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80115f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80115fa:	b2db      	uxtb	r3, r3
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	bf14      	ite	ne
 8011600:	2301      	movne	r3, #1
 8011602:	2300      	moveq	r3, #0
 8011604:	b2da      	uxtb	r2, r3
 8011606:	4b2e      	ldr	r3, [pc, #184]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 8011608:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801160c:	4b2c      	ldr	r3, [pc, #176]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 801160e:	2200      	movs	r2, #0
 8011610:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011614:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011618:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801161c:	b2db      	uxtb	r3, r3
 801161e:	2b00      	cmp	r3, #0
 8011620:	bf14      	ite	ne
 8011622:	2301      	movne	r3, #1
 8011624:	2300      	moveq	r3, #0
 8011626:	b2da      	uxtb	r2, r3
 8011628:	4b25      	ldr	r3, [pc, #148]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 801162a:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801162e:	4b24      	ldr	r3, [pc, #144]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 8011630:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011634:	2b00      	cmp	r3, #0
 8011636:	d004      	beq.n	8011642 <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011638:	4b21      	ldr	r3, [pc, #132]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 801163a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801163e:	2b01      	cmp	r3, #1
 8011640:	d106      	bne.n	8011650 <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8011642:	4b1e      	ldr	r3, [pc, #120]	; (80116bc <ProcessRadioRxDone+0x7b8>)
 8011644:	2200      	movs	r2, #0
 8011646:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 8011648:	4b1c      	ldr	r3, [pc, #112]	; (80116bc <ProcessRadioRxDone+0x7b8>)
 801164a:	2201      	movs	r2, #1
 801164c:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8011650:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8011654:	2b01      	cmp	r3, #1
 8011656:	d104      	bne.n	8011662 <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8011658:	4b19      	ldr	r3, [pc, #100]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 801165a:	2202      	movs	r2, #2
 801165c:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8011660:	e03a      	b.n	80116d8 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8011662:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8011666:	f023 031f 	bic.w	r3, r3, #31
 801166a:	b2db      	uxtb	r3, r3
 801166c:	2ba0      	cmp	r3, #160	; 0xa0
 801166e:	d12b      	bne.n	80116c8 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8011670:	4b12      	ldr	r3, [pc, #72]	; (80116bc <ProcessRadioRxDone+0x7b8>)
 8011672:	2201      	movs	r2, #1
 8011674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011678:	4b10      	ldr	r3, [pc, #64]	; (80116bc <ProcessRadioRxDone+0x7b8>)
 801167a:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 801167e:	2b00      	cmp	r3, #0
 8011680:	d102      	bne.n	8011688 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8011682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011684:	4a0d      	ldr	r2, [pc, #52]	; (80116bc <ProcessRadioRxDone+0x7b8>)
 8011686:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8011688:	4b0d      	ldr	r3, [pc, #52]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 801168a:	2201      	movs	r2, #1
 801168c:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011690:	4b0b      	ldr	r3, [pc, #44]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 8011692:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011696:	2b00      	cmp	r3, #0
 8011698:	d01e      	beq.n	80116d8 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 801169a:	4b09      	ldr	r3, [pc, #36]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 801169c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80116a0:	2b01      	cmp	r3, #1
 80116a2:	d019      	beq.n	80116d8 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80116a4:	4b05      	ldr	r3, [pc, #20]	; (80116bc <ProcessRadioRxDone+0x7b8>)
 80116a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116aa:	4a05      	ldr	r2, [pc, #20]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 80116ac:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 80116b0:	4b04      	ldr	r3, [pc, #16]	; (80116c4 <ProcessRadioRxDone+0x7c0>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	4a02      	ldr	r2, [pc, #8]	; (80116c0 <ProcessRadioRxDone+0x7bc>)
 80116b6:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 80116ba:	e00d      	b.n	80116d8 <ProcessRadioRxDone+0x7d4>
 80116bc:	20000c54 	.word	0x20000c54
 80116c0:	20000738 	.word	0x20000738
 80116c4:	20001884 	.word	0x20001884
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 80116c8:	4b94      	ldr	r3, [pc, #592]	; (801191c <ProcessRadioRxDone+0xa18>)
 80116ca:	2200      	movs	r2, #0
 80116cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80116d0:	4b93      	ldr	r3, [pc, #588]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80116d2:	2200      	movs	r2, #0
 80116d4:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 80116d8:	4b90      	ldr	r3, [pc, #576]	; (801191c <ProcessRadioRxDone+0xa18>)
 80116da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d106      	bne.n	80116f0 <ProcessRadioRxDone+0x7ec>
 80116e2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80116e6:	f003 0310 	and.w	r3, r3, #16
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d008      	beq.n	8011702 <ProcessRadioRxDone+0x7fe>
 80116f0:	4b8a      	ldr	r3, [pc, #552]	; (801191c <ProcessRadioRxDone+0xa18>)
 80116f2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d103      	bne.n	8011702 <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 80116fa:	4b89      	ldr	r3, [pc, #548]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80116fc:	2201      	movs	r2, #1
 80116fe:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8011702:	4b87      	ldr	r3, [pc, #540]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 8011704:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011708:	4a85      	ldr	r2, [pc, #532]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 801170a:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 801170e:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 8011712:	4618      	mov	r0, r3
 8011714:	f001 ff8a 	bl	801362c <RemoveMacCommands>

            switch( fType )
 8011718:	7cbb      	ldrb	r3, [r7, #18]
 801171a:	2b03      	cmp	r3, #3
 801171c:	d873      	bhi.n	8011806 <ProcessRadioRxDone+0x902>
 801171e:	a201      	add	r2, pc, #4	; (adr r2, 8011724 <ProcessRadioRxDone+0x820>)
 8011720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011724:	08011735 	.word	0x08011735
 8011728:	08011785 	.word	0x08011785
 801172c:	080117bb 	.word	0x080117bb
 8011730:	080117e1 	.word	0x080117e1
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011734:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011738:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801173c:	b2db      	uxtb	r3, r3
 801173e:	461c      	mov	r4, r3
 8011740:	4b77      	ldr	r3, [pc, #476]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 8011742:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011746:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 801174a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801174e:	f102 0010 	add.w	r0, r2, #16
 8011752:	9300      	str	r3, [sp, #0]
 8011754:	460b      	mov	r3, r1
 8011756:	4622      	mov	r2, r4
 8011758:	2100      	movs	r1, #0
 801175a:	f000 ff4f 	bl	80125fc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801175e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8011762:	4b6f      	ldr	r3, [pc, #444]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 8011764:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801176a:	4a6d      	ldr	r2, [pc, #436]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 801176c:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011770:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8011774:	4b6a      	ldr	r3, [pc, #424]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 8011776:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 801177a:	4b69      	ldr	r3, [pc, #420]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 801177c:	2201      	movs	r2, #1
 801177e:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8011782:	e047      	b.n	8011814 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011784:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011788:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801178c:	b2db      	uxtb	r3, r3
 801178e:	461c      	mov	r4, r3
 8011790:	4b63      	ldr	r3, [pc, #396]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 8011792:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011796:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 801179a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801179e:	f102 0010 	add.w	r0, r2, #16
 80117a2:	9300      	str	r3, [sp, #0]
 80117a4:	460b      	mov	r3, r1
 80117a6:	4622      	mov	r2, r4
 80117a8:	2100      	movs	r1, #0
 80117aa:	f000 ff27 	bl	80125fc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80117ae:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80117b2:	4b5b      	ldr	r3, [pc, #364]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80117b4:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 80117b8:	e02c      	b.n	8011814 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80117ba:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80117bc:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80117c0:	4b57      	ldr	r3, [pc, #348]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80117c2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80117c6:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 80117ca:	9300      	str	r3, [sp, #0]
 80117cc:	460b      	mov	r3, r1
 80117ce:	2100      	movs	r1, #0
 80117d0:	f000 ff14 	bl	80125fc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80117d4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80117d8:	4b51      	ldr	r3, [pc, #324]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80117da:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 80117de:	e019      	b.n	8011814 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80117e0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80117e4:	4b4e      	ldr	r3, [pc, #312]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80117e6:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80117ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117ec:	4a4c      	ldr	r2, [pc, #304]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80117ee:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80117f2:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80117f6:	4b4a      	ldr	r3, [pc, #296]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80117f8:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80117fc:	4b48      	ldr	r3, [pc, #288]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80117fe:	2201      	movs	r2, #1
 8011800:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8011804:	e006      	b.n	8011814 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011806:	4b46      	ldr	r3, [pc, #280]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 8011808:	2201      	movs	r2, #1
 801180a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 801180e:	f7ff fb53 	bl	8010eb8 <PrepareRxDoneAbort>
                    break;
 8011812:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8011814:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8011818:	2be0      	cmp	r3, #224	; 0xe0
 801181a:	d118      	bne.n	801184e <ProcessRadioRxDone+0x94a>
 801181c:	4b3f      	ldr	r3, [pc, #252]	; (801191c <ProcessRadioRxDone+0xa18>)
 801181e:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8011822:	f083 0301 	eor.w	r3, r3, #1
 8011826:	b2db      	uxtb	r3, r3
 8011828:	2b00      	cmp	r3, #0
 801182a:	d010      	beq.n	801184e <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 801182c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8011830:	4b3b      	ldr	r3, [pc, #236]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 8011832:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8011836:	4b3a      	ldr	r3, [pc, #232]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 8011838:	2200      	movs	r2, #0
 801183a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 801183e:	4b38      	ldr	r3, [pc, #224]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 8011840:	2200      	movs	r2, #0
 8011842:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 8011846:	4b36      	ldr	r3, [pc, #216]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 8011848:	2200      	movs	r2, #0
 801184a:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 801184e:	4a34      	ldr	r2, [pc, #208]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 8011850:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011854:	f043 0302 	orr.w	r3, r3, #2
 8011858:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 801185c:	e035      	b.n	80118ca <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 801185e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8011862:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011866:	18d1      	adds	r1, r2, r3
 8011868:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801186c:	b29b      	uxth	r3, r3
 801186e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8011872:	1ad3      	subs	r3, r2, r3
 8011874:	b29b      	uxth	r3, r3
 8011876:	461a      	mov	r2, r3
 8011878:	482a      	ldr	r0, [pc, #168]	; (8011924 <ProcessRadioRxDone+0xa20>)
 801187a:	f009 ff82 	bl	801b782 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 801187e:	4b28      	ldr	r3, [pc, #160]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 8011880:	2203      	movs	r2, #3
 8011882:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011886:	4b26      	ldr	r3, [pc, #152]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 8011888:	2200      	movs	r2, #0
 801188a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 801188e:	4b24      	ldr	r3, [pc, #144]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 8011890:	4a24      	ldr	r2, [pc, #144]	; (8011924 <ProcessRadioRxDone+0xa20>)
 8011892:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8011896:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801189a:	b2da      	uxtb	r2, r3
 801189c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80118a0:	1ad3      	subs	r3, r2, r3
 80118a2:	b2da      	uxtb	r2, r3
 80118a4:	4b1e      	ldr	r3, [pc, #120]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80118a6:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80118aa:	4a1d      	ldr	r2, [pc, #116]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80118ac:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80118b0:	f043 0302 	orr.w	r3, r3, #2
 80118b4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 80118b8:	e007      	b.n	80118ca <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80118ba:	4b19      	ldr	r3, [pc, #100]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80118bc:	2201      	movs	r2, #1
 80118be:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 80118c2:	f7ff faf9 	bl	8010eb8 <PrepareRxDoneAbort>
            break;
 80118c6:	e000      	b.n	80118ca <ProcessRadioRxDone+0x9c6>
            break;
 80118c8:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80118ca:	4b15      	ldr	r3, [pc, #84]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80118cc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d004      	beq.n	80118de <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80118d4:	4b12      	ldr	r3, [pc, #72]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80118d6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80118da:	2b01      	cmp	r3, #1
 80118dc:	d10c      	bne.n	80118f8 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 80118de:	4b10      	ldr	r3, [pc, #64]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80118e0:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d007      	beq.n	80118f8 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 80118e8:	4b0d      	ldr	r3, [pc, #52]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80118ea:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d002      	beq.n	80118f8 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 80118f2:	2000      	movs	r0, #0
 80118f4:	f000 fcec 	bl	80122d0 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 80118f8:	4b09      	ldr	r3, [pc, #36]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 80118fa:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80118fe:	2b02      	cmp	r3, #2
 8011900:	d006      	beq.n	8011910 <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8011902:	4a07      	ldr	r2, [pc, #28]	; (8011920 <ProcessRadioRxDone+0xa1c>)
 8011904:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011908:	f043 0310 	orr.w	r3, r3, #16
 801190c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8011910:	f7ff fa14 	bl	8010d3c <UpdateRxSlotIdleState>
}
 8011914:	37a4      	adds	r7, #164	; 0xa4
 8011916:	46bd      	mov	sp, r7
 8011918:	bd90      	pop	{r4, r7, pc}
 801191a:	bf00      	nop
 801191c:	20000c54 	.word	0x20000c54
 8011920:	20000738 	.word	0x20000738
 8011924:	20000970 	.word	0x20000970

08011928 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8011928:	b580      	push	{r7, lr}
 801192a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801192c:	4b11      	ldr	r3, [pc, #68]	; (8011974 <ProcessRadioTxTimeout+0x4c>)
 801192e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011932:	2b02      	cmp	r3, #2
 8011934:	d002      	beq.n	801193c <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8011936:	4b10      	ldr	r3, [pc, #64]	; (8011978 <ProcessRadioTxTimeout+0x50>)
 8011938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801193a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 801193c:	f7ff f9fe 	bl	8010d3c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8011940:	4b0e      	ldr	r3, [pc, #56]	; (801197c <ProcessRadioTxTimeout+0x54>)
 8011942:	2202      	movs	r2, #2
 8011944:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8011948:	2002      	movs	r0, #2
 801194a:	f004 fe67 	bl	801661c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 801194e:	4b0b      	ldr	r3, [pc, #44]	; (801197c <ProcessRadioTxTimeout+0x54>)
 8011950:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8011954:	2b00      	cmp	r3, #0
 8011956:	d003      	beq.n	8011960 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 8011958:	4b08      	ldr	r3, [pc, #32]	; (801197c <ProcessRadioTxTimeout+0x54>)
 801195a:	2201      	movs	r2, #1
 801195c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011960:	4a06      	ldr	r2, [pc, #24]	; (801197c <ProcessRadioTxTimeout+0x54>)
 8011962:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011966:	f043 0310 	orr.w	r3, r3, #16
 801196a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 801196e:	bf00      	nop
 8011970:	bd80      	pop	{r7, pc}
 8011972:	bf00      	nop
 8011974:	20000c54 	.word	0x20000c54
 8011978:	08021f7c 	.word	0x08021f7c
 801197c:	20000738 	.word	0x20000738

08011980 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b084      	sub	sp, #16
 8011984:	af00      	add	r7, sp, #0
 8011986:	4603      	mov	r3, r0
 8011988:	460a      	mov	r2, r1
 801198a:	71fb      	strb	r3, [r7, #7]
 801198c:	4613      	mov	r3, r2
 801198e:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8011990:	2300      	movs	r3, #0
 8011992:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011994:	4b3d      	ldr	r3, [pc, #244]	; (8011a8c <HandleRadioRxErrorTimeout+0x10c>)
 8011996:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801199a:	2b02      	cmp	r3, #2
 801199c:	d002      	beq.n	80119a4 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 801199e:	4b3c      	ldr	r3, [pc, #240]	; (8011a90 <HandleRadioRxErrorTimeout+0x110>)
 80119a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119a2:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80119a4:	f004 f966 	bl	8015c74 <LoRaMacClassBIsBeaconExpected>
 80119a8:	4603      	mov	r3, r0
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d007      	beq.n	80119be <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80119ae:	2002      	movs	r0, #2
 80119b0:	f004 f914 	bl	8015bdc <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80119b4:	2000      	movs	r0, #0
 80119b6:	f004 f936 	bl	8015c26 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80119ba:	2301      	movs	r3, #1
 80119bc:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80119be:	4b33      	ldr	r3, [pc, #204]	; (8011a8c <HandleRadioRxErrorTimeout+0x10c>)
 80119c0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	d119      	bne.n	80119fc <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80119c8:	f004 f95b 	bl	8015c82 <LoRaMacClassBIsPingExpected>
 80119cc:	4603      	mov	r3, r0
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d007      	beq.n	80119e2 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80119d2:	2000      	movs	r0, #0
 80119d4:	f004 f90c 	bl	8015bf0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80119d8:	2000      	movs	r0, #0
 80119da:	f004 f92d 	bl	8015c38 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80119de:	2301      	movs	r3, #1
 80119e0:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80119e2:	f004 f955 	bl	8015c90 <LoRaMacClassBIsMulticastExpected>
 80119e6:	4603      	mov	r3, r0
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d007      	beq.n	80119fc <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80119ec:	2000      	movs	r0, #0
 80119ee:	f004 f909 	bl	8015c04 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80119f2:	2000      	movs	r0, #0
 80119f4:	f004 f929 	bl	8015c4a <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 80119f8:	2301      	movs	r3, #1
 80119fa:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 80119fc:	7bfb      	ldrb	r3, [r7, #15]
 80119fe:	f083 0301 	eor.w	r3, r3, #1
 8011a02:	b2db      	uxtb	r3, r3
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d03b      	beq.n	8011a80 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011a08:	4b22      	ldr	r3, [pc, #136]	; (8011a94 <HandleRadioRxErrorTimeout+0x114>)
 8011a0a:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d122      	bne.n	8011a58 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8011a12:	4b20      	ldr	r3, [pc, #128]	; (8011a94 <HandleRadioRxErrorTimeout+0x114>)
 8011a14:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d003      	beq.n	8011a24 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8011a1c:	4a1d      	ldr	r2, [pc, #116]	; (8011a94 <HandleRadioRxErrorTimeout+0x114>)
 8011a1e:	79fb      	ldrb	r3, [r7, #7]
 8011a20:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8011a24:	79fb      	ldrb	r3, [r7, #7]
 8011a26:	4618      	mov	r0, r3
 8011a28:	f004 fdf8 	bl	801661c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8011a2c:	4b17      	ldr	r3, [pc, #92]	; (8011a8c <HandleRadioRxErrorTimeout+0x10c>)
 8011a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a30:	4618      	mov	r0, r3
 8011a32:	f00e f831 	bl	801fa98 <UTIL_TIMER_GetElapsedTime>
 8011a36:	4602      	mov	r2, r0
 8011a38:	4b16      	ldr	r3, [pc, #88]	; (8011a94 <HandleRadioRxErrorTimeout+0x114>)
 8011a3a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d31e      	bcc.n	8011a80 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8011a42:	4815      	ldr	r0, [pc, #84]	; (8011a98 <HandleRadioRxErrorTimeout+0x118>)
 8011a44:	f00d fefc 	bl	801f840 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011a48:	4a12      	ldr	r2, [pc, #72]	; (8011a94 <HandleRadioRxErrorTimeout+0x114>)
 8011a4a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011a4e:	f043 0310 	orr.w	r3, r3, #16
 8011a52:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8011a56:	e013      	b.n	8011a80 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8011a58:	4b0e      	ldr	r3, [pc, #56]	; (8011a94 <HandleRadioRxErrorTimeout+0x114>)
 8011a5a:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d003      	beq.n	8011a6a <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8011a62:	4a0c      	ldr	r2, [pc, #48]	; (8011a94 <HandleRadioRxErrorTimeout+0x114>)
 8011a64:	79bb      	ldrb	r3, [r7, #6]
 8011a66:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8011a6a:	79bb      	ldrb	r3, [r7, #6]
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f004 fdd5 	bl	801661c <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 8011a72:	4a08      	ldr	r2, [pc, #32]	; (8011a94 <HandleRadioRxErrorTimeout+0x114>)
 8011a74:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011a78:	f043 0310 	orr.w	r3, r3, #16
 8011a7c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8011a80:	f7ff f95c 	bl	8010d3c <UpdateRxSlotIdleState>
}
 8011a84:	bf00      	nop
 8011a86:	3710      	adds	r7, #16
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}
 8011a8c:	20000c54 	.word	0x20000c54
 8011a90:	08021f7c 	.word	0x08021f7c
 8011a94:	20000738 	.word	0x20000738
 8011a98:	20000ad0 	.word	0x20000ad0

08011a9c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011aa0:	2106      	movs	r1, #6
 8011aa2:	2005      	movs	r0, #5
 8011aa4:	f7ff ff6c 	bl	8011980 <HandleRadioRxErrorTimeout>
}
 8011aa8:	bf00      	nop
 8011aaa:	bd80      	pop	{r7, pc}

08011aac <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011ab0:	2104      	movs	r1, #4
 8011ab2:	2003      	movs	r0, #3
 8011ab4:	f7ff ff64 	bl	8011980 <HandleRadioRxErrorTimeout>
}
 8011ab8:	bf00      	nop
 8011aba:	bd80      	pop	{r7, pc}

08011abc <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b084      	sub	sp, #16
 8011ac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8011ac6:	607b      	str	r3, [r7, #4]
  return(result);
 8011ac8:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8011aca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011acc:	b672      	cpsid	i
}
 8011ace:	bf00      	nop
    events = LoRaMacRadioEvents;
 8011ad0:	4b1d      	ldr	r3, [pc, #116]	; (8011b48 <LoRaMacHandleIrqEvents+0x8c>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8011ad6:	4b1c      	ldr	r3, [pc, #112]	; (8011b48 <LoRaMacHandleIrqEvents+0x8c>)
 8011ad8:	2200      	movs	r2, #0
 8011ada:	601a      	str	r2, [r3, #0]
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	f383 8810 	msr	PRIMASK, r3
}
 8011ae6:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d027      	beq.n	8011b3e <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8011aee:	783b      	ldrb	r3, [r7, #0]
 8011af0:	f003 0320 	and.w	r3, r3, #32
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d001      	beq.n	8011afe <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8011afa:	f7ff f937 	bl	8010d6c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8011afe:	783b      	ldrb	r3, [r7, #0]
 8011b00:	f003 0310 	and.w	r3, r3, #16
 8011b04:	b2db      	uxtb	r3, r3
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d001      	beq.n	8011b0e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8011b0a:	f7ff f9fb 	bl	8010f04 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8011b0e:	783b      	ldrb	r3, [r7, #0]
 8011b10:	f003 0308 	and.w	r3, r3, #8
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d001      	beq.n	8011b1e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8011b1a:	f7ff ff05 	bl	8011928 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8011b1e:	783b      	ldrb	r3, [r7, #0]
 8011b20:	f003 0304 	and.w	r3, r3, #4
 8011b24:	b2db      	uxtb	r3, r3
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d001      	beq.n	8011b2e <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8011b2a:	f7ff ffb7 	bl	8011a9c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8011b2e:	783b      	ldrb	r3, [r7, #0]
 8011b30:	f003 0302 	and.w	r3, r3, #2
 8011b34:	b2db      	uxtb	r3, r3
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d001      	beq.n	8011b3e <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8011b3a:	f7ff ffb7 	bl	8011aac <ProcessRadioRxTimeout>
        }
    }
}
 8011b3e:	bf00      	nop
 8011b40:	3710      	adds	r7, #16
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	2000187c 	.word	0x2000187c

08011b4c <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011b50:	4b10      	ldr	r3, [pc, #64]	; (8011b94 <LoRaMacIsBusy+0x48>)
 8011b52:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d101      	bne.n	8011b5e <LoRaMacIsBusy+0x12>
    {
        return false;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	e015      	b.n	8011b8a <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8011b5e:	4b0e      	ldr	r3, [pc, #56]	; (8011b98 <LoRaMacIsBusy+0x4c>)
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	f003 0301 	and.w	r3, r3, #1
 8011b66:	b2db      	uxtb	r3, r3
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d001      	beq.n	8011b70 <LoRaMacIsBusy+0x24>
    {
        return true;
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	e00c      	b.n	8011b8a <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011b70:	4b08      	ldr	r3, [pc, #32]	; (8011b94 <LoRaMacIsBusy+0x48>)
 8011b72:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d106      	bne.n	8011b88 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011b7a:	4b06      	ldr	r3, [pc, #24]	; (8011b94 <LoRaMacIsBusy+0x48>)
 8011b7c:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011b80:	2b01      	cmp	r3, #1
 8011b82:	d101      	bne.n	8011b88 <LoRaMacIsBusy+0x3c>
    {
        return false;
 8011b84:	2300      	movs	r3, #0
 8011b86:	e000      	b.n	8011b8a <LoRaMacIsBusy+0x3e>
    }
    return true;
 8011b88:	2301      	movs	r3, #1
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bc80      	pop	{r7}
 8011b90:	4770      	bx	lr
 8011b92:	bf00      	nop
 8011b94:	20000738 	.word	0x20000738
 8011b98:	2000187c 	.word	0x2000187c

08011b9c <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8011b9c:	b480      	push	{r7}
 8011b9e:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011ba0:	4b05      	ldr	r3, [pc, #20]	; (8011bb8 <LoRaMacIsStopped+0x1c>)
 8011ba2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ba6:	2b01      	cmp	r3, #1
 8011ba8:	d101      	bne.n	8011bae <LoRaMacIsStopped+0x12>
    {
        return true;
 8011baa:	2301      	movs	r3, #1
 8011bac:	e000      	b.n	8011bb0 <LoRaMacIsStopped+0x14>
    }
    return false;
 8011bae:	2300      	movs	r3, #0
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bc80      	pop	{r7}
 8011bb6:	4770      	bx	lr
 8011bb8:	20000738 	.word	0x20000738

08011bbc <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b083      	sub	sp, #12
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8011bc6:	4a04      	ldr	r2, [pc, #16]	; (8011bd8 <LoRaMacEnableRequests+0x1c>)
 8011bc8:	79fb      	ldrb	r3, [r7, #7]
 8011bca:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 8011bce:	bf00      	nop
 8011bd0:	370c      	adds	r7, #12
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bc80      	pop	{r7}
 8011bd6:	4770      	bx	lr
 8011bd8:	20000738 	.word	0x20000738

08011bdc <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8011be2:	4b2c      	ldr	r3, [pc, #176]	; (8011c94 <LoRaMacHandleRequestEvents+0xb8>)
 8011be4:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011be8:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8011bea:	4b2a      	ldr	r3, [pc, #168]	; (8011c94 <LoRaMacHandleRequestEvents+0xb8>)
 8011bec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d14a      	bne.n	8011c8a <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011bf4:	4b27      	ldr	r3, [pc, #156]	; (8011c94 <LoRaMacHandleRequestEvents+0xb8>)
 8011bf6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011bfa:	f003 0301 	and.w	r3, r3, #1
 8011bfe:	b2db      	uxtb	r3, r3
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d006      	beq.n	8011c12 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8011c04:	4a23      	ldr	r2, [pc, #140]	; (8011c94 <LoRaMacHandleRequestEvents+0xb8>)
 8011c06:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011c0a:	f36f 0300 	bfc	r3, #0, #1
 8011c0e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011c12:	4b20      	ldr	r3, [pc, #128]	; (8011c94 <LoRaMacHandleRequestEvents+0xb8>)
 8011c14:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011c18:	f003 0304 	and.w	r3, r3, #4
 8011c1c:	b2db      	uxtb	r3, r3
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d006      	beq.n	8011c30 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011c22:	4a1c      	ldr	r2, [pc, #112]	; (8011c94 <LoRaMacHandleRequestEvents+0xb8>)
 8011c24:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011c28:	f36f 0382 	bfc	r3, #2, #1
 8011c2c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011c30:	2001      	movs	r0, #1
 8011c32:	f7ff ffc3 	bl	8011bbc <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8011c36:	793b      	ldrb	r3, [r7, #4]
 8011c38:	f003 0301 	and.w	r3, r3, #1
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d005      	beq.n	8011c4e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8011c42:	4b14      	ldr	r3, [pc, #80]	; (8011c94 <LoRaMacHandleRequestEvents+0xb8>)
 8011c44:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	4813      	ldr	r0, [pc, #76]	; (8011c98 <LoRaMacHandleRequestEvents+0xbc>)
 8011c4c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8011c4e:	793b      	ldrb	r3, [r7, #4]
 8011c50:	f003 0304 	and.w	r3, r3, #4
 8011c54:	b2db      	uxtb	r3, r3
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d00e      	beq.n	8011c78 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8011c5a:	4810      	ldr	r0, [pc, #64]	; (8011c9c <LoRaMacHandleRequestEvents+0xc0>)
 8011c5c:	f004 fd2c 	bl	80166b8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8011c60:	f004 fd7c 	bl	801675c <LoRaMacConfirmQueueGetCnt>
 8011c64:	4603      	mov	r3, r0
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d006      	beq.n	8011c78 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011c6a:	4a0a      	ldr	r2, [pc, #40]	; (8011c94 <LoRaMacHandleRequestEvents+0xb8>)
 8011c6c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011c70:	f043 0304 	orr.w	r3, r3, #4
 8011c74:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011c78:	f004 f828 	bl	8015ccc <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8011c7c:	4a05      	ldr	r2, [pc, #20]	; (8011c94 <LoRaMacHandleRequestEvents+0xb8>)
 8011c7e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011c82:	f36f 1304 	bfc	r3, #4, #1
 8011c86:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8011c8a:	bf00      	nop
 8011c8c:	3708      	adds	r7, #8
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}
 8011c92:	bf00      	nop
 8011c94:	20000738 	.word	0x20000738
 8011c98:	20000b78 	.word	0x20000b78
 8011c9c:	20000b8c 	.word	0x20000b8c

08011ca0 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8011ca4:	4b16      	ldr	r3, [pc, #88]	; (8011d00 <LoRaMacHandleIndicationEvents+0x60>)
 8011ca6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011caa:	f003 0308 	and.w	r3, r3, #8
 8011cae:	b2db      	uxtb	r3, r3
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d00d      	beq.n	8011cd0 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8011cb4:	4a12      	ldr	r2, [pc, #72]	; (8011d00 <LoRaMacHandleIndicationEvents+0x60>)
 8011cb6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011cba:	f36f 03c3 	bfc	r3, #3, #1
 8011cbe:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8011cc2:	4b0f      	ldr	r3, [pc, #60]	; (8011d00 <LoRaMacHandleIndicationEvents+0x60>)
 8011cc4:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011cc8:	68db      	ldr	r3, [r3, #12]
 8011cca:	490e      	ldr	r1, [pc, #56]	; (8011d04 <LoRaMacHandleIndicationEvents+0x64>)
 8011ccc:	480e      	ldr	r0, [pc, #56]	; (8011d08 <LoRaMacHandleIndicationEvents+0x68>)
 8011cce:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011cd0:	4b0b      	ldr	r3, [pc, #44]	; (8011d00 <LoRaMacHandleIndicationEvents+0x60>)
 8011cd2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011cd6:	f003 0302 	and.w	r3, r3, #2
 8011cda:	b2db      	uxtb	r3, r3
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d00d      	beq.n	8011cfc <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8011ce0:	4a07      	ldr	r2, [pc, #28]	; (8011d00 <LoRaMacHandleIndicationEvents+0x60>)
 8011ce2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011ce6:	f36f 0341 	bfc	r3, #1, #1
 8011cea:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8011cee:	4b04      	ldr	r3, [pc, #16]	; (8011d00 <LoRaMacHandleIndicationEvents+0x60>)
 8011cf0:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	4903      	ldr	r1, [pc, #12]	; (8011d04 <LoRaMacHandleIndicationEvents+0x64>)
 8011cf8:	4804      	ldr	r0, [pc, #16]	; (8011d0c <LoRaMacHandleIndicationEvents+0x6c>)
 8011cfa:	4798      	blx	r3
    }
}
 8011cfc:	bf00      	nop
 8011cfe:	bd80      	pop	{r7, pc}
 8011d00:	20000738 	.word	0x20000738
 8011d04:	20000bc4 	.word	0x20000bc4
 8011d08:	20000ba0 	.word	0x20000ba0
 8011d0c:	20000b58 	.word	0x20000b58

08011d10 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b082      	sub	sp, #8
 8011d14:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011d16:	4b2a      	ldr	r3, [pc, #168]	; (8011dc0 <LoRaMacHandleMcpsRequest+0xb0>)
 8011d18:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011d1c:	f003 0301 	and.w	r3, r3, #1
 8011d20:	b2db      	uxtb	r3, r3
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d048      	beq.n	8011db8 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 8011d26:	2300      	movs	r3, #0
 8011d28:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011d2e:	4b24      	ldr	r3, [pc, #144]	; (8011dc0 <LoRaMacHandleMcpsRequest+0xb0>)
 8011d30:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d004      	beq.n	8011d42 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8011d38:	4b21      	ldr	r3, [pc, #132]	; (8011dc0 <LoRaMacHandleMcpsRequest+0xb0>)
 8011d3a:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011d3e:	2b03      	cmp	r3, #3
 8011d40:	d104      	bne.n	8011d4c <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8011d42:	f002 f943 	bl	8013fcc <CheckRetransUnconfirmedUplink>
 8011d46:	4603      	mov	r3, r0
 8011d48:	71fb      	strb	r3, [r7, #7]
 8011d4a:	e010      	b.n	8011d6e <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8011d4c:	4b1c      	ldr	r3, [pc, #112]	; (8011dc0 <LoRaMacHandleMcpsRequest+0xb0>)
 8011d4e:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8011d52:	2b01      	cmp	r3, #1
 8011d54:	d10b      	bne.n	8011d6e <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 8011d56:	4b1a      	ldr	r3, [pc, #104]	; (8011dc0 <LoRaMacHandleMcpsRequest+0xb0>)
 8011d58:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d004      	beq.n	8011d6a <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8011d60:	f002 f960 	bl	8014024 <CheckRetransConfirmedUplink>
 8011d64:	4603      	mov	r3, r0
 8011d66:	71fb      	strb	r3, [r7, #7]
 8011d68:	e001      	b.n	8011d6e <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8011d6e:	79fb      	ldrb	r3, [r7, #7]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d00d      	beq.n	8011d90 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011d74:	4813      	ldr	r0, [pc, #76]	; (8011dc4 <LoRaMacHandleMcpsRequest+0xb4>)
 8011d76:	f00d fd63 	bl	801f840 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011d7a:	4b11      	ldr	r3, [pc, #68]	; (8011dc0 <LoRaMacHandleMcpsRequest+0xb0>)
 8011d7c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011d80:	f023 0320 	bic.w	r3, r3, #32
 8011d84:	4a0e      	ldr	r2, [pc, #56]	; (8011dc0 <LoRaMacHandleMcpsRequest+0xb0>)
 8011d86:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011d8a:	f002 f985 	bl	8014098 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8011d8e:	e013      	b.n	8011db8 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 8011d90:	79bb      	ldrb	r3, [r7, #6]
 8011d92:	f083 0301 	eor.w	r3, r3, #1
 8011d96:	b2db      	uxtb	r3, r3
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d00d      	beq.n	8011db8 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011d9c:	4a08      	ldr	r2, [pc, #32]	; (8011dc0 <LoRaMacHandleMcpsRequest+0xb0>)
 8011d9e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011da2:	f36f 1304 	bfc	r3, #4, #1
 8011da6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 8011daa:	4b05      	ldr	r3, [pc, #20]	; (8011dc0 <LoRaMacHandleMcpsRequest+0xb0>)
 8011dac:	2200      	movs	r2, #0
 8011dae:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 8011db2:	2000      	movs	r0, #0
 8011db4:	f000 f9c8 	bl	8012148 <OnTxDelayedTimerEvent>
}
 8011db8:	bf00      	nop
 8011dba:	3708      	adds	r7, #8
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}
 8011dc0:	20000738 	.word	0x20000738
 8011dc4:	20000aa0 	.word	0x20000aa0

08011dc8 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011dcc:	4b18      	ldr	r3, [pc, #96]	; (8011e30 <LoRaMacHandleMlmeRequest+0x68>)
 8011dce:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011dd2:	f003 0304 	and.w	r3, r3, #4
 8011dd6:	b2db      	uxtb	r3, r3
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d026      	beq.n	8011e2a <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011ddc:	2001      	movs	r0, #1
 8011dde:	f004 fc51 	bl	8016684 <LoRaMacConfirmQueueIsCmdActive>
 8011de2:	4603      	mov	r3, r0
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d012      	beq.n	8011e0e <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8011de8:	2001      	movs	r0, #1
 8011dea:	f004 fbed 	bl	80165c8 <LoRaMacConfirmQueueGetStatus>
 8011dee:	4603      	mov	r3, r0
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d103      	bne.n	8011dfc <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8011df4:	4b0e      	ldr	r3, [pc, #56]	; (8011e30 <LoRaMacHandleMlmeRequest+0x68>)
 8011df6:	2200      	movs	r2, #0
 8011df8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011dfc:	4b0c      	ldr	r3, [pc, #48]	; (8011e30 <LoRaMacHandleMlmeRequest+0x68>)
 8011dfe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e02:	f023 0302 	bic.w	r3, r3, #2
 8011e06:	4a0a      	ldr	r2, [pc, #40]	; (8011e30 <LoRaMacHandleMlmeRequest+0x68>)
 8011e08:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8011e0c:	e00d      	b.n	8011e2a <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8011e0e:	2006      	movs	r0, #6
 8011e10:	f004 fc38 	bl	8016684 <LoRaMacConfirmQueueIsCmdActive>
 8011e14:	4603      	mov	r3, r0
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d007      	beq.n	8011e2a <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011e1a:	4b05      	ldr	r3, [pc, #20]	; (8011e30 <LoRaMacHandleMlmeRequest+0x68>)
 8011e1c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e20:	f023 0302 	bic.w	r3, r3, #2
 8011e24:	4a02      	ldr	r2, [pc, #8]	; (8011e30 <LoRaMacHandleMlmeRequest+0x68>)
 8011e26:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8011e2a:	bf00      	nop
 8011e2c:	bd80      	pop	{r7, pc}
 8011e2e:	bf00      	nop
 8011e30:	20000738 	.word	0x20000738

08011e34 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011e38:	200b      	movs	r0, #11
 8011e3a:	f004 fc23 	bl	8016684 <LoRaMacConfirmQueueIsCmdActive>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d019      	beq.n	8011e78 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8011e44:	4b0e      	ldr	r3, [pc, #56]	; (8011e80 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011e46:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011e4a:	f003 0301 	and.w	r3, r3, #1
 8011e4e:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d111      	bne.n	8011e78 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011e54:	4b0a      	ldr	r3, [pc, #40]	; (8011e80 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011e56:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011e5a:	f003 0304 	and.w	r3, r3, #4
 8011e5e:	b2db      	uxtb	r3, r3
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d009      	beq.n	8011e78 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011e64:	4b06      	ldr	r3, [pc, #24]	; (8011e80 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011e66:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e6a:	f023 0302 	bic.w	r3, r3, #2
 8011e6e:	4a04      	ldr	r2, [pc, #16]	; (8011e80 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011e70:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8011e74:	2301      	movs	r3, #1
 8011e76:	e000      	b.n	8011e7a <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011e78:	2300      	movs	r3, #0
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	bd80      	pop	{r7, pc}
 8011e7e:	bf00      	nop
 8011e80:	20000738 	.word	0x20000738

08011e84 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 8011e84:	b480      	push	{r7}
 8011e86:	b083      	sub	sp, #12
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	71fb      	strb	r3, [r7, #7]
 8011e8e:	460b      	mov	r3, r1
 8011e90:	71bb      	strb	r3, [r7, #6]
 8011e92:	4613      	mov	r3, r2
 8011e94:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 8011e96:	79fb      	ldrb	r3, [r7, #7]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d00a      	beq.n	8011eb2 <CheckForMinimumAbpDatarate+0x2e>
 8011e9c:	79bb      	ldrb	r3, [r7, #6]
 8011e9e:	2b01      	cmp	r3, #1
 8011ea0:	d107      	bne.n	8011eb2 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 8011ea2:	797b      	ldrb	r3, [r7, #5]
 8011ea4:	f083 0301 	eor.w	r3, r3, #1
 8011ea8:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d001      	beq.n	8011eb2 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 8011eae:	2301      	movs	r3, #1
 8011eb0:	e000      	b.n	8011eb4 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 8011eb2:	2300      	movs	r3, #0
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	370c      	adds	r7, #12
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bc80      	pop	{r7}
 8011ebc:	4770      	bx	lr
	...

08011ec0 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011ec4:	4b0d      	ldr	r3, [pc, #52]	; (8011efc <LoRaMacCheckForRxAbort+0x3c>)
 8011ec6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d00f      	beq.n	8011ef2 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8011ed2:	4b0a      	ldr	r3, [pc, #40]	; (8011efc <LoRaMacCheckForRxAbort+0x3c>)
 8011ed4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011edc:	4a07      	ldr	r2, [pc, #28]	; (8011efc <LoRaMacCheckForRxAbort+0x3c>)
 8011ede:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011ee2:	4b06      	ldr	r3, [pc, #24]	; (8011efc <LoRaMacCheckForRxAbort+0x3c>)
 8011ee4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ee8:	f023 0302 	bic.w	r3, r3, #2
 8011eec:	4a03      	ldr	r2, [pc, #12]	; (8011efc <LoRaMacCheckForRxAbort+0x3c>)
 8011eee:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8011ef2:	bf00      	nop
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bc80      	pop	{r7}
 8011ef8:	4770      	bx	lr
 8011efa:	bf00      	nop
 8011efc:	20000738 	.word	0x20000738

08011f00 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b084      	sub	sp, #16
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8011f10:	4b51      	ldr	r3, [pc, #324]	; (8012058 <LoRaMacHandleNvm+0x158>)
 8011f12:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	f040 8099 	bne.w	801204e <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2124      	movs	r1, #36	; 0x24
 8011f20:	4618      	mov	r0, r3
 8011f22:	f009 fc83 	bl	801b82c <Crc32>
 8011f26:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f2c:	68ba      	ldr	r2, [r7, #8]
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d006      	beq.n	8011f40 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	68ba      	ldr	r2, [r7, #8]
 8011f36:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8011f38:	89fb      	ldrh	r3, [r7, #14]
 8011f3a:	f043 0301 	orr.w	r3, r3, #1
 8011f3e:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	3328      	adds	r3, #40	; 0x28
 8011f44:	211c      	movs	r1, #28
 8011f46:	4618      	mov	r0, r3
 8011f48:	f009 fc70 	bl	801b82c <Crc32>
 8011f4c:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f52:	68ba      	ldr	r2, [r7, #8]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d006      	beq.n	8011f66 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	68ba      	ldr	r2, [r7, #8]
 8011f5c:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8011f5e:	89fb      	ldrh	r3, [r7, #14]
 8011f60:	f043 0302 	orr.w	r3, r3, #2
 8011f64:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	3348      	adds	r3, #72	; 0x48
 8011f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f009 fc5c 	bl	801b82c <Crc32>
 8011f74:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011f7c:	68ba      	ldr	r2, [r7, #8]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d007      	beq.n	8011f92 <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	68ba      	ldr	r2, [r7, #8]
 8011f86:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8011f8a:	89fb      	ldrh	r3, [r7, #14]
 8011f8c:	f043 0304 	orr.w	r3, r3, #4
 8011f90:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8011f98:	21d4      	movs	r1, #212	; 0xd4
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f009 fc46 	bl	801b82c <Crc32>
 8011fa0:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8011fa8:	68ba      	ldr	r2, [r7, #8]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d007      	beq.n	8011fbe <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	68ba      	ldr	r2, [r7, #8]
 8011fb2:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8011fb6:	89fb      	ldrh	r3, [r7, #14]
 8011fb8:	f043 0308 	orr.w	r3, r3, #8
 8011fbc:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8011fc4:	2110      	movs	r1, #16
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f009 fc30 	bl	801b82c <Crc32>
 8011fcc:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8011fd4:	68ba      	ldr	r2, [r7, #8]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d007      	beq.n	8011fea <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	68ba      	ldr	r2, [r7, #8]
 8011fde:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8011fe2:	89fb      	ldrh	r3, [r7, #14]
 8011fe4:	f043 0310 	orr.w	r3, r3, #16
 8011fe8:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8011ff0:	f44f 715e 	mov.w	r1, #888	; 0x378
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f009 fc19 	bl	801b82c <Crc32>
 8011ffa:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8012002:	68ba      	ldr	r2, [r7, #8]
 8012004:	429a      	cmp	r2, r3
 8012006:	d007      	beq.n	8012018 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	68ba      	ldr	r2, [r7, #8]
 801200c:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8012010:	89fb      	ldrh	r3, [r7, #14]
 8012012:	f043 0320 	orr.w	r3, r3, #32
 8012016:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 801201e:	2114      	movs	r1, #20
 8012020:	4618      	mov	r0, r3
 8012022:	f009 fc03 	bl	801b82c <Crc32>
 8012026:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 801202e:	68ba      	ldr	r2, [r7, #8]
 8012030:	429a      	cmp	r2, r3
 8012032:	d007      	beq.n	8012044 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	68ba      	ldr	r2, [r7, #8]
 8012038:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 801203c:	89fb      	ldrh	r3, [r7, #14]
 801203e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012042:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8012044:	89fb      	ldrh	r3, [r7, #14]
 8012046:	4618      	mov	r0, r3
 8012048:	f002 f878 	bl	801413c <CallNvmDataChangeCallback>
 801204c:	e000      	b.n	8012050 <LoRaMacHandleNvm+0x150>
        return;
 801204e:	bf00      	nop
}
 8012050:	3710      	adds	r7, #16
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}
 8012056:	bf00      	nop
 8012058:	20000738 	.word	0x20000738

0801205c <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b084      	sub	sp, #16
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d00d      	beq.n	8012088 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 801206c:	6838      	ldr	r0, [r7, #0]
 801206e:	f00d fd13 	bl	801fa98 <UTIL_TIMER_GetElapsedTime>
 8012072:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 8012074:	68fa      	ldr	r2, [r7, #12]
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	429a      	cmp	r2, r3
 801207a:	d905      	bls.n	8012088 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 801207c:	4b05      	ldr	r3, [pc, #20]	; (8012094 <LoRaMacHandleResponseTimeout+0x38>)
 801207e:	2200      	movs	r2, #0
 8012080:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 8012084:	2301      	movs	r3, #1
 8012086:	e000      	b.n	801208a <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 8012088:	2300      	movs	r3, #0
}
 801208a:	4618      	mov	r0, r3
 801208c:	3710      	adds	r7, #16
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}
 8012092:	bf00      	nop
 8012094:	20000c54 	.word	0x20000c54

08012098 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b082      	sub	sp, #8
 801209c:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 801209e:	2300      	movs	r3, #0
 80120a0:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 80120a2:	f7ff fd0b 	bl	8011abc <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80120a6:	f003 fe80 	bl	8015daa <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80120aa:	4b25      	ldr	r3, [pc, #148]	; (8012140 <LoRaMacProcess+0xa8>)
 80120ac:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80120b0:	f003 0310 	and.w	r3, r3, #16
 80120b4:	b2db      	uxtb	r3, r3
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d023      	beq.n	8012102 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 80120ba:	2000      	movs	r0, #0
 80120bc:	f7ff fd7e 	bl	8011bbc <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80120c0:	f7ff fefe 	bl	8011ec0 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80120c4:	f002 f858 	bl	8014178 <IsRequestPending>
 80120c8:	4603      	mov	r3, r0
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d006      	beq.n	80120dc <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 80120ce:	f7ff feb1 	bl	8011e34 <LoRaMacCheckForBeaconAcquisition>
 80120d2:	4603      	mov	r3, r0
 80120d4:	461a      	mov	r2, r3
 80120d6:	79fb      	ldrb	r3, [r7, #7]
 80120d8:	4313      	orrs	r3, r2
 80120da:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 80120dc:	79fb      	ldrb	r3, [r7, #7]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d103      	bne.n	80120ea <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 80120e2:	f7ff fe71 	bl	8011dc8 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 80120e6:	f7ff fe13 	bl	8011d10 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 80120ea:	f7ff fd77 	bl	8011bdc <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80120ee:	2001      	movs	r0, #1
 80120f0:	f7ff fd64 	bl	8011bbc <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80120f4:	4a12      	ldr	r2, [pc, #72]	; (8012140 <LoRaMacProcess+0xa8>)
 80120f6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80120fa:	f043 0320 	orr.w	r3, r3, #32
 80120fe:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 8012102:	f7ff fdcd 	bl	8011ca0 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8012106:	4b0e      	ldr	r3, [pc, #56]	; (8012140 <LoRaMacProcess+0xa8>)
 8012108:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 801210c:	2b02      	cmp	r3, #2
 801210e:	d101      	bne.n	8012114 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8012110:	f001 fc1a 	bl	8013948 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8012114:	4b0a      	ldr	r3, [pc, #40]	; (8012140 <LoRaMacProcess+0xa8>)
 8012116:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801211a:	f003 0320 	and.w	r3, r3, #32
 801211e:	b2db      	uxtb	r3, r3
 8012120:	2b00      	cmp	r3, #0
 8012122:	d009      	beq.n	8012138 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8012124:	4a06      	ldr	r2, [pc, #24]	; (8012140 <LoRaMacProcess+0xa8>)
 8012126:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801212a:	f36f 1345 	bfc	r3, #5, #1
 801212e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 8012132:	4804      	ldr	r0, [pc, #16]	; (8012144 <LoRaMacProcess+0xac>)
 8012134:	f7ff fee4 	bl	8011f00 <LoRaMacHandleNvm>
    }
}
 8012138:	bf00      	nop
 801213a:	3708      	adds	r7, #8
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}
 8012140:	20000738 	.word	0x20000738
 8012144:	20000c54 	.word	0x20000c54

08012148 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8012150:	481e      	ldr	r0, [pc, #120]	; (80121cc <OnTxDelayedTimerEvent+0x84>)
 8012152:	f00d fb75 	bl	801f840 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8012156:	4b1e      	ldr	r3, [pc, #120]	; (80121d0 <OnTxDelayedTimerEvent+0x88>)
 8012158:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801215c:	f023 0320 	bic.w	r3, r3, #32
 8012160:	4a1b      	ldr	r2, [pc, #108]	; (80121d0 <OnTxDelayedTimerEvent+0x88>)
 8012162:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8012166:	4b1b      	ldr	r3, [pc, #108]	; (80121d4 <OnTxDelayedTimerEvent+0x8c>)
 8012168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801216c:	4a18      	ldr	r2, [pc, #96]	; (80121d0 <OnTxDelayedTimerEvent+0x88>)
 801216e:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8012172:	4611      	mov	r1, r2
 8012174:	4618      	mov	r0, r3
 8012176:	f7ff ff71 	bl	801205c <LoRaMacHandleResponseTimeout>
 801217a:	4603      	mov	r3, r0
 801217c:	2b00      	cmp	r3, #0
 801217e:	d11e      	bne.n	80121be <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8012180:	2001      	movs	r0, #1
 8012182:	f001 f92b 	bl	80133dc <ScheduleTx>
 8012186:	4603      	mov	r3, r0
 8012188:	2b00      	cmp	r3, #0
 801218a:	d01a      	beq.n	80121c2 <OnTxDelayedTimerEvent+0x7a>
 801218c:	2b0b      	cmp	r3, #11
 801218e:	d018      	beq.n	80121c2 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012190:	4b10      	ldr	r3, [pc, #64]	; (80121d4 <OnTxDelayedTimerEvent+0x8c>)
 8012192:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012196:	b2da      	uxtb	r2, r3
 8012198:	4b0d      	ldr	r3, [pc, #52]	; (80121d0 <OnTxDelayedTimerEvent+0x88>)
 801219a:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 801219e:	4b0c      	ldr	r3, [pc, #48]	; (80121d0 <OnTxDelayedTimerEvent+0x88>)
 80121a0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80121a4:	4b0a      	ldr	r3, [pc, #40]	; (80121d0 <OnTxDelayedTimerEvent+0x88>)
 80121a6:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80121aa:	4b09      	ldr	r3, [pc, #36]	; (80121d0 <OnTxDelayedTimerEvent+0x88>)
 80121ac:	2209      	movs	r2, #9
 80121ae:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80121b2:	2009      	movs	r0, #9
 80121b4:	f004 fa32 	bl	801661c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80121b8:	f001 ff6e 	bl	8014098 <StopRetransmission>
            break;
 80121bc:	e002      	b.n	80121c4 <OnTxDelayedTimerEvent+0x7c>
        return;
 80121be:	bf00      	nop
 80121c0:	e000      	b.n	80121c4 <OnTxDelayedTimerEvent+0x7c>
            break;
 80121c2:	bf00      	nop
        }
    }
}
 80121c4:	3708      	adds	r7, #8
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}
 80121ca:	bf00      	nop
 80121cc:	20000aa0 	.word	0x20000aa0
 80121d0:	20000738 	.word	0x20000738
 80121d4:	20000c54 	.word	0x20000c54

080121d8 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b082      	sub	sp, #8
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80121e0:	4b17      	ldr	r3, [pc, #92]	; (8012240 <OnRxWindow1TimerEvent+0x68>)
 80121e2:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80121e6:	4b16      	ldr	r3, [pc, #88]	; (8012240 <OnRxWindow1TimerEvent+0x68>)
 80121e8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80121ec:	4b15      	ldr	r3, [pc, #84]	; (8012244 <OnRxWindow1TimerEvent+0x6c>)
 80121ee:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80121f2:	b25a      	sxtb	r2, r3
 80121f4:	4b12      	ldr	r3, [pc, #72]	; (8012240 <OnRxWindow1TimerEvent+0x68>)
 80121f6:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80121fa:	4b12      	ldr	r3, [pc, #72]	; (8012244 <OnRxWindow1TimerEvent+0x6c>)
 80121fc:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8012200:	4b0f      	ldr	r3, [pc, #60]	; (8012240 <OnRxWindow1TimerEvent+0x68>)
 8012202:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012206:	4b0f      	ldr	r3, [pc, #60]	; (8012244 <OnRxWindow1TimerEvent+0x6c>)
 8012208:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801220c:	4b0c      	ldr	r3, [pc, #48]	; (8012240 <OnRxWindow1TimerEvent+0x68>)
 801220e:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8012212:	4b0b      	ldr	r3, [pc, #44]	; (8012240 <OnRxWindow1TimerEvent+0x68>)
 8012214:	2200      	movs	r2, #0
 8012216:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 801221a:	4b09      	ldr	r3, [pc, #36]	; (8012240 <OnRxWindow1TimerEvent+0x68>)
 801221c:	2200      	movs	r2, #0
 801221e:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012222:	4b08      	ldr	r3, [pc, #32]	; (8012244 <OnRxWindow1TimerEvent+0x6c>)
 8012224:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8012228:	4b05      	ldr	r3, [pc, #20]	; (8012240 <OnRxWindow1TimerEvent+0x68>)
 801222a:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 801222e:	4906      	ldr	r1, [pc, #24]	; (8012248 <OnRxWindow1TimerEvent+0x70>)
 8012230:	4806      	ldr	r0, [pc, #24]	; (801224c <OnRxWindow1TimerEvent+0x74>)
 8012232:	f001 fb55 	bl	80138e0 <RxWindowSetup>
}
 8012236:	bf00      	nop
 8012238:	3708      	adds	r7, #8
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	20000738 	.word	0x20000738
 8012244:	20000c54 	.word	0x20000c54
 8012248:	20000af0 	.word	0x20000af0
 801224c:	20000ab8 	.word	0x20000ab8

08012250 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b082      	sub	sp, #8
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8012258:	4b19      	ldr	r3, [pc, #100]	; (80122c0 <OnRxWindow2TimerEvent+0x70>)
 801225a:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 801225e:	2b00      	cmp	r3, #0
 8012260:	d029      	beq.n	80122b6 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8012262:	4b17      	ldr	r3, [pc, #92]	; (80122c0 <OnRxWindow2TimerEvent+0x70>)
 8012264:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8012268:	4b15      	ldr	r3, [pc, #84]	; (80122c0 <OnRxWindow2TimerEvent+0x70>)
 801226a:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801226e:	4b15      	ldr	r3, [pc, #84]	; (80122c4 <OnRxWindow2TimerEvent+0x74>)
 8012270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012272:	4a13      	ldr	r2, [pc, #76]	; (80122c0 <OnRxWindow2TimerEvent+0x70>)
 8012274:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012278:	4b12      	ldr	r3, [pc, #72]	; (80122c4 <OnRxWindow2TimerEvent+0x74>)
 801227a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801227e:	4b10      	ldr	r3, [pc, #64]	; (80122c0 <OnRxWindow2TimerEvent+0x70>)
 8012280:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012284:	4b0f      	ldr	r3, [pc, #60]	; (80122c4 <OnRxWindow2TimerEvent+0x74>)
 8012286:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801228a:	4b0d      	ldr	r3, [pc, #52]	; (80122c0 <OnRxWindow2TimerEvent+0x70>)
 801228c:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012290:	4b0b      	ldr	r3, [pc, #44]	; (80122c0 <OnRxWindow2TimerEvent+0x70>)
 8012292:	2200      	movs	r2, #0
 8012294:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012298:	4b09      	ldr	r3, [pc, #36]	; (80122c0 <OnRxWindow2TimerEvent+0x70>)
 801229a:	2201      	movs	r2, #1
 801229c:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80122a0:	4b08      	ldr	r3, [pc, #32]	; (80122c4 <OnRxWindow2TimerEvent+0x74>)
 80122a2:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80122a6:	4b06      	ldr	r3, [pc, #24]	; (80122c0 <OnRxWindow2TimerEvent+0x70>)
 80122a8:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80122ac:	4906      	ldr	r1, [pc, #24]	; (80122c8 <OnRxWindow2TimerEvent+0x78>)
 80122ae:	4807      	ldr	r0, [pc, #28]	; (80122cc <OnRxWindow2TimerEvent+0x7c>)
 80122b0:	f001 fb16 	bl	80138e0 <RxWindowSetup>
 80122b4:	e000      	b.n	80122b8 <OnRxWindow2TimerEvent+0x68>
        return;
 80122b6:	bf00      	nop
}
 80122b8:	3708      	adds	r7, #8
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}
 80122be:	bf00      	nop
 80122c0:	20000738 	.word	0x20000738
 80122c4:	20000c54 	.word	0x20000c54
 80122c8:	20000b08 	.word	0x20000b08
 80122cc:	20000ad0 	.word	0x20000ad0

080122d0 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b082      	sub	sp, #8
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80122d8:	4808      	ldr	r0, [pc, #32]	; (80122fc <OnRetransmitTimeoutTimerEvent+0x2c>)
 80122da:	f00d fab1 	bl	801f840 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 80122de:	4b08      	ldr	r3, [pc, #32]	; (8012300 <OnRetransmitTimeoutTimerEvent+0x30>)
 80122e0:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d003      	beq.n	80122f0 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 80122e8:	4b05      	ldr	r3, [pc, #20]	; (8012300 <OnRetransmitTimeoutTimerEvent+0x30>)
 80122ea:	2201      	movs	r2, #1
 80122ec:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 80122f0:	f001 ff0e 	bl	8014110 <OnMacProcessNotify>
}
 80122f4:	bf00      	nop
 80122f6:	3708      	adds	r7, #8
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}
 80122fc:	20000b38 	.word	0x20000b38
 8012300:	20000738 	.word	0x20000738

08012304 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b084      	sub	sp, #16
 8012308:	af00      	add	r7, sp, #0
 801230a:	60ba      	str	r2, [r7, #8]
 801230c:	607b      	str	r3, [r7, #4]
 801230e:	4603      	mov	r3, r0
 8012310:	73fb      	strb	r3, [r7, #15]
 8012312:	460b      	mov	r3, r1
 8012314:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d005      	beq.n	8012328 <GetFCntDown+0x24>
 801231c:	69bb      	ldr	r3, [r7, #24]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d002      	beq.n	8012328 <GetFCntDown+0x24>
 8012322:	69fb      	ldr	r3, [r7, #28]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d101      	bne.n	801232c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012328:	2309      	movs	r3, #9
 801232a:	e028      	b.n	801237e <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 801232c:	7bfb      	ldrb	r3, [r7, #15]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d016      	beq.n	8012360 <GetFCntDown+0x5c>
 8012332:	2b01      	cmp	r3, #1
 8012334:	d118      	bne.n	8012368 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8012336:	79bb      	ldrb	r3, [r7, #6]
 8012338:	2b01      	cmp	r3, #1
 801233a:	d10d      	bne.n	8012358 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 801233c:	7bbb      	ldrb	r3, [r7, #14]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d002      	beq.n	8012348 <GetFCntDown+0x44>
 8012342:	7bbb      	ldrb	r3, [r7, #14]
 8012344:	2b03      	cmp	r3, #3
 8012346:	d103      	bne.n	8012350 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8012348:	69bb      	ldr	r3, [r7, #24]
 801234a:	2202      	movs	r2, #2
 801234c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 801234e:	e00d      	b.n	801236c <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8012350:	69bb      	ldr	r3, [r7, #24]
 8012352:	2201      	movs	r2, #1
 8012354:	701a      	strb	r2, [r3, #0]
            break;
 8012356:	e009      	b.n	801236c <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8012358:	69bb      	ldr	r3, [r7, #24]
 801235a:	2203      	movs	r2, #3
 801235c:	701a      	strb	r2, [r3, #0]
            break;
 801235e:	e005      	b.n	801236c <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8012360:	69bb      	ldr	r3, [r7, #24]
 8012362:	2204      	movs	r2, #4
 8012364:	701a      	strb	r2, [r3, #0]
            break;
 8012366:	e001      	b.n	801236c <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012368:	2305      	movs	r3, #5
 801236a:	e008      	b.n	801237e <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 801236c:	69bb      	ldr	r3, [r7, #24]
 801236e:	7818      	ldrb	r0, [r3, #0]
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	89db      	ldrh	r3, [r3, #14]
 8012374:	69fa      	ldr	r2, [r7, #28]
 8012376:	4619      	mov	r1, r3
 8012378:	f004 fd8e 	bl	8016e98 <LoRaMacCryptoGetFCntDown>
 801237c:	4603      	mov	r3, r0
}
 801237e:	4618      	mov	r0, r3
 8012380:	3710      	adds	r7, #16
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}
	...

08012388 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8012388:	b5b0      	push	{r4, r5, r7, lr}
 801238a:	b084      	sub	sp, #16
 801238c:	af00      	add	r7, sp, #0
 801238e:	4603      	mov	r3, r0
 8012390:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012392:	2303      	movs	r3, #3
 8012394:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8012396:	4b6e      	ldr	r3, [pc, #440]	; (8012550 <SwitchClass+0x1c8>)
 8012398:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801239c:	2b02      	cmp	r3, #2
 801239e:	f000 80bb 	beq.w	8012518 <SwitchClass+0x190>
 80123a2:	2b02      	cmp	r3, #2
 80123a4:	f300 80ce 	bgt.w	8012544 <SwitchClass+0x1bc>
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d003      	beq.n	80123b4 <SwitchClass+0x2c>
 80123ac:	2b01      	cmp	r3, #1
 80123ae:	f000 80a5 	beq.w	80124fc <SwitchClass+0x174>
 80123b2:	e0c7      	b.n	8012544 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80123b4:	79fb      	ldrb	r3, [r7, #7]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d109      	bne.n	80123ce <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80123ba:	4b65      	ldr	r3, [pc, #404]	; (8012550 <SwitchClass+0x1c8>)
 80123bc:	4a64      	ldr	r2, [pc, #400]	; (8012550 <SwitchClass+0x1c8>)
 80123be:	3374      	adds	r3, #116	; 0x74
 80123c0:	326c      	adds	r2, #108	; 0x6c
 80123c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80123c6:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 80123ca:	2300      	movs	r3, #0
 80123cc:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 80123ce:	79fb      	ldrb	r3, [r7, #7]
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	d10c      	bne.n	80123ee <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80123d4:	79fb      	ldrb	r3, [r7, #7]
 80123d6:	4618      	mov	r0, r3
 80123d8:	f003 fc7e 	bl	8015cd8 <LoRaMacClassBSwitchClass>
 80123dc:	4603      	mov	r3, r0
 80123de:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 80123e0:	7bfb      	ldrb	r3, [r7, #15]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d103      	bne.n	80123ee <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80123e6:	4a5a      	ldr	r2, [pc, #360]	; (8012550 <SwitchClass+0x1c8>)
 80123e8:	79fb      	ldrb	r3, [r7, #7]
 80123ea:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 80123ee:	79fb      	ldrb	r3, [r7, #7]
 80123f0:	2b02      	cmp	r3, #2
 80123f2:	f040 80a2 	bne.w	801253a <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80123f6:	4a56      	ldr	r2, [pc, #344]	; (8012550 <SwitchClass+0x1c8>)
 80123f8:	79fb      	ldrb	r3, [r7, #7]
 80123fa:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80123fe:	4a55      	ldr	r2, [pc, #340]	; (8012554 <SwitchClass+0x1cc>)
 8012400:	4b54      	ldr	r3, [pc, #336]	; (8012554 <SwitchClass+0x1cc>)
 8012402:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8012406:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 801240a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801240c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801240e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012412:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012416:	4b4f      	ldr	r3, [pc, #316]	; (8012554 <SwitchClass+0x1cc>)
 8012418:	2202      	movs	r2, #2
 801241a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801241e:	2300      	movs	r3, #0
 8012420:	73bb      	strb	r3, [r7, #14]
 8012422:	e05b      	b.n	80124dc <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8012424:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012428:	4949      	ldr	r1, [pc, #292]	; (8012550 <SwitchClass+0x1c8>)
 801242a:	4613      	mov	r3, r2
 801242c:	005b      	lsls	r3, r3, #1
 801242e:	4413      	add	r3, r2
 8012430:	011b      	lsls	r3, r3, #4
 8012432:	440b      	add	r3, r1
 8012434:	33e9      	adds	r3, #233	; 0xe9
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d049      	beq.n	80124d0 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 801243c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012440:	4943      	ldr	r1, [pc, #268]	; (8012550 <SwitchClass+0x1c8>)
 8012442:	4613      	mov	r3, r2
 8012444:	005b      	lsls	r3, r3, #1
 8012446:	4413      	add	r3, r2
 8012448:	011b      	lsls	r3, r3, #4
 801244a:	440b      	add	r3, r1
 801244c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012450:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8012452:	2b02      	cmp	r3, #2
 8012454:	d13c      	bne.n	80124d0 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8012456:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801245a:	493d      	ldr	r1, [pc, #244]	; (8012550 <SwitchClass+0x1c8>)
 801245c:	4613      	mov	r3, r2
 801245e:	005b      	lsls	r3, r3, #1
 8012460:	4413      	add	r3, r2
 8012462:	011b      	lsls	r3, r3, #4
 8012464:	440b      	add	r3, r1
 8012466:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	4a38      	ldr	r2, [pc, #224]	; (8012550 <SwitchClass+0x1c8>)
 801246e:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8012470:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012474:	4936      	ldr	r1, [pc, #216]	; (8012550 <SwitchClass+0x1c8>)
 8012476:	4613      	mov	r3, r2
 8012478:	005b      	lsls	r3, r3, #1
 801247a:	4413      	add	r3, r2
 801247c:	011b      	lsls	r3, r3, #4
 801247e:	440b      	add	r3, r1
 8012480:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012484:	f993 3000 	ldrsb.w	r3, [r3]
 8012488:	b2da      	uxtb	r2, r3
 801248a:	4b31      	ldr	r3, [pc, #196]	; (8012550 <SwitchClass+0x1c8>)
 801248c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012490:	4b30      	ldr	r3, [pc, #192]	; (8012554 <SwitchClass+0x1cc>)
 8012492:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8012496:	4b2f      	ldr	r3, [pc, #188]	; (8012554 <SwitchClass+0x1cc>)
 8012498:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801249c:	4b2c      	ldr	r3, [pc, #176]	; (8012550 <SwitchClass+0x1c8>)
 801249e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124a0:	4a2c      	ldr	r2, [pc, #176]	; (8012554 <SwitchClass+0x1cc>)
 80124a2:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80124a6:	4b2a      	ldr	r3, [pc, #168]	; (8012550 <SwitchClass+0x1c8>)
 80124a8:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80124ac:	4b29      	ldr	r3, [pc, #164]	; (8012554 <SwitchClass+0x1cc>)
 80124ae:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80124b2:	4b27      	ldr	r3, [pc, #156]	; (8012550 <SwitchClass+0x1c8>)
 80124b4:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80124b8:	4b26      	ldr	r3, [pc, #152]	; (8012554 <SwitchClass+0x1cc>)
 80124ba:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80124be:	4b25      	ldr	r3, [pc, #148]	; (8012554 <SwitchClass+0x1cc>)
 80124c0:	2203      	movs	r2, #3
 80124c2:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80124c6:	4b23      	ldr	r3, [pc, #140]	; (8012554 <SwitchClass+0x1cc>)
 80124c8:	2201      	movs	r2, #1
 80124ca:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 80124ce:	e009      	b.n	80124e4 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80124d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80124d4:	b2db      	uxtb	r3, r3
 80124d6:	3301      	adds	r3, #1
 80124d8:	b2db      	uxtb	r3, r3
 80124da:	73bb      	strb	r3, [r7, #14]
 80124dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	dd9f      	ble.n	8012424 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80124e4:	4b1b      	ldr	r3, [pc, #108]	; (8012554 <SwitchClass+0x1cc>)
 80124e6:	2200      	movs	r2, #0
 80124e8:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80124ec:	4b1a      	ldr	r3, [pc, #104]	; (8012558 <SwitchClass+0x1d0>)
 80124ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124f0:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80124f2:	f001 fa29 	bl	8013948 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 80124f6:	2300      	movs	r3, #0
 80124f8:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80124fa:	e01e      	b.n	801253a <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80124fc:	79fb      	ldrb	r3, [r7, #7]
 80124fe:	4618      	mov	r0, r3
 8012500:	f003 fbea 	bl	8015cd8 <LoRaMacClassBSwitchClass>
 8012504:	4603      	mov	r3, r0
 8012506:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8012508:	7bfb      	ldrb	r3, [r7, #15]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d117      	bne.n	801253e <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801250e:	4a10      	ldr	r2, [pc, #64]	; (8012550 <SwitchClass+0x1c8>)
 8012510:	79fb      	ldrb	r3, [r7, #7]
 8012512:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 8012516:	e012      	b.n	801253e <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8012518:	79fb      	ldrb	r3, [r7, #7]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d111      	bne.n	8012542 <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 801251e:	4b0d      	ldr	r3, [pc, #52]	; (8012554 <SwitchClass+0x1cc>)
 8012520:	2206      	movs	r2, #6
 8012522:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012526:	4a0a      	ldr	r2, [pc, #40]	; (8012550 <SwitchClass+0x1c8>)
 8012528:	79fb      	ldrb	r3, [r7, #7]
 801252a:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 801252e:	4b0a      	ldr	r3, [pc, #40]	; (8012558 <SwitchClass+0x1d0>)
 8012530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012532:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8012534:	2300      	movs	r3, #0
 8012536:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8012538:	e003      	b.n	8012542 <SwitchClass+0x1ba>
            break;
 801253a:	bf00      	nop
 801253c:	e002      	b.n	8012544 <SwitchClass+0x1bc>
            break;
 801253e:	bf00      	nop
 8012540:	e000      	b.n	8012544 <SwitchClass+0x1bc>
            break;
 8012542:	bf00      	nop
        }
    }

    return status;
 8012544:	7bfb      	ldrb	r3, [r7, #15]
}
 8012546:	4618      	mov	r0, r3
 8012548:	3710      	adds	r7, #16
 801254a:	46bd      	mov	sp, r7
 801254c:	bdb0      	pop	{r4, r5, r7, pc}
 801254e:	bf00      	nop
 8012550:	20000c54 	.word	0x20000c54
 8012554:	20000738 	.word	0x20000738
 8012558:	08021f7c 	.word	0x08021f7c

0801255c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b086      	sub	sp, #24
 8012560:	af00      	add	r7, sp, #0
 8012562:	4603      	mov	r3, r0
 8012564:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012566:	4b10      	ldr	r3, [pc, #64]	; (80125a8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012568:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801256c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 801256e:	79fb      	ldrb	r3, [r7, #7]
 8012570:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8012572:	230d      	movs	r3, #13
 8012574:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8012576:	4b0c      	ldr	r3, [pc, #48]	; (80125a8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012578:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 801257c:	2b00      	cmp	r3, #0
 801257e:	d001      	beq.n	8012584 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8012580:	230e      	movs	r3, #14
 8012582:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012584:	4b08      	ldr	r3, [pc, #32]	; (80125a8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012586:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801258a:	f107 0210 	add.w	r2, r7, #16
 801258e:	4611      	mov	r1, r2
 8012590:	4618      	mov	r0, r3
 8012592:	f005 faf1 	bl	8017b78 <RegionGetPhyParam>
 8012596:	4603      	mov	r3, r0
 8012598:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	b2db      	uxtb	r3, r3
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3718      	adds	r7, #24
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}
 80125a6:	bf00      	nop
 80125a8:	20000c54 	.word	0x20000c54

080125ac <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b084      	sub	sp, #16
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	4603      	mov	r3, r0
 80125b4:	71fb      	strb	r3, [r7, #7]
 80125b6:	460b      	mov	r3, r1
 80125b8:	71bb      	strb	r3, [r7, #6]
 80125ba:	4613      	mov	r3, r2
 80125bc:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 80125be:	2300      	movs	r3, #0
 80125c0:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 80125c2:	2300      	movs	r3, #0
 80125c4:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80125c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7ff ffc6 	bl	801255c <GetMaxAppPayloadWithoutFOptsLength>
 80125d0:	4603      	mov	r3, r0
 80125d2:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80125d4:	79fb      	ldrb	r3, [r7, #7]
 80125d6:	b29a      	uxth	r2, r3
 80125d8:	797b      	ldrb	r3, [r7, #5]
 80125da:	b29b      	uxth	r3, r3
 80125dc:	4413      	add	r3, r2
 80125de:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80125e0:	89ba      	ldrh	r2, [r7, #12]
 80125e2:	89fb      	ldrh	r3, [r7, #14]
 80125e4:	429a      	cmp	r2, r3
 80125e6:	d804      	bhi.n	80125f2 <ValidatePayloadLength+0x46>
 80125e8:	89bb      	ldrh	r3, [r7, #12]
 80125ea:	2bff      	cmp	r3, #255	; 0xff
 80125ec:	d801      	bhi.n	80125f2 <ValidatePayloadLength+0x46>
    {
        return true;
 80125ee:	2301      	movs	r3, #1
 80125f0:	e000      	b.n	80125f4 <ValidatePayloadLength+0x48>
    }
    return false;
 80125f2:	2300      	movs	r3, #0
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	3710      	adds	r7, #16
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80125fc:	b590      	push	{r4, r7, lr}
 80125fe:	b0a5      	sub	sp, #148	; 0x94
 8012600:	af02      	add	r7, sp, #8
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	4608      	mov	r0, r1
 8012606:	4611      	mov	r1, r2
 8012608:	461a      	mov	r2, r3
 801260a:	4603      	mov	r3, r0
 801260c:	70fb      	strb	r3, [r7, #3]
 801260e:	460b      	mov	r3, r1
 8012610:	70bb      	strb	r3, [r7, #2]
 8012612:	4613      	mov	r3, r2
 8012614:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8012616:	2300      	movs	r3, #0
 8012618:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 801261c:	2300      	movs	r3, #0
 801261e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012622:	2300      	movs	r3, #0
 8012624:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8012628:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 801262c:	2b00      	cmp	r3, #0
 801262e:	f000 84ab 	beq.w	8012f88 <ProcessMacCommands+0x98c>
 8012632:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012636:	2b01      	cmp	r3, #1
 8012638:	f040 84ac 	bne.w	8012f94 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 801263c:	f000 bca4 	b.w	8012f88 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8012640:	78fb      	ldrb	r3, [r7, #3]
 8012642:	687a      	ldr	r2, [r7, #4]
 8012644:	4413      	add	r3, r2
 8012646:	781b      	ldrb	r3, [r3, #0]
 8012648:	4618      	mov	r0, r3
 801264a:	f003 fe43 	bl	80162d4 <LoRaMacCommandsGetCmdSize>
 801264e:	4603      	mov	r3, r0
 8012650:	461a      	mov	r2, r3
 8012652:	78fb      	ldrb	r3, [r7, #3]
 8012654:	441a      	add	r2, r3
 8012656:	78bb      	ldrb	r3, [r7, #2]
 8012658:	429a      	cmp	r2, r3
 801265a:	f300 849d 	bgt.w	8012f98 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 801265e:	78fb      	ldrb	r3, [r7, #3]
 8012660:	1c5a      	adds	r2, r3, #1
 8012662:	70fa      	strb	r2, [r7, #3]
 8012664:	461a      	mov	r2, r3
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	4413      	add	r3, r2
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	3b02      	subs	r3, #2
 801266e:	2b11      	cmp	r3, #17
 8012670:	f200 8494 	bhi.w	8012f9c <ProcessMacCommands+0x9a0>
 8012674:	a201      	add	r2, pc, #4	; (adr r2, 801267c <ProcessMacCommands+0x80>)
 8012676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801267a:	bf00      	nop
 801267c:	080126c5 	.word	0x080126c5
 8012680:	08012707 	.word	0x08012707
 8012684:	08012883 	.word	0x08012883
 8012688:	080128c1 	.word	0x080128c1
 801268c:	080129b9 	.word	0x080129b9
 8012690:	08012a09 	.word	0x08012a09
 8012694:	08012ac5 	.word	0x08012ac5
 8012698:	08012b1b 	.word	0x08012b1b
 801269c:	08012c01 	.word	0x08012c01
 80126a0:	08012f9d 	.word	0x08012f9d
 80126a4:	08012f9d 	.word	0x08012f9d
 80126a8:	08012ca9 	.word	0x08012ca9
 80126ac:	08012f9d 	.word	0x08012f9d
 80126b0:	08012f9d 	.word	0x08012f9d
 80126b4:	08012dc9 	.word	0x08012dc9
 80126b8:	08012dfd 	.word	0x08012dfd
 80126bc:	08012e8d 	.word	0x08012e8d
 80126c0:	08012f03 	.word	0x08012f03
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80126c4:	2005      	movs	r0, #5
 80126c6:	f003 ffdd 	bl	8016684 <LoRaMacConfirmQueueIsCmdActive>
 80126ca:	4603      	mov	r3, r0
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	f000 845b 	beq.w	8012f88 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80126d2:	2105      	movs	r1, #5
 80126d4:	2000      	movs	r0, #0
 80126d6:	f003 ff49 	bl	801656c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80126da:	78fb      	ldrb	r3, [r7, #3]
 80126dc:	1c5a      	adds	r2, r3, #1
 80126de:	70fa      	strb	r2, [r7, #3]
 80126e0:	461a      	mov	r2, r3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	4413      	add	r3, r2
 80126e6:	781a      	ldrb	r2, [r3, #0]
 80126e8:	4bb0      	ldr	r3, [pc, #704]	; (80129ac <ProcessMacCommands+0x3b0>)
 80126ea:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80126ee:	78fb      	ldrb	r3, [r7, #3]
 80126f0:	1c5a      	adds	r2, r3, #1
 80126f2:	70fa      	strb	r2, [r7, #3]
 80126f4:	461a      	mov	r2, r3
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	4413      	add	r3, r2
 80126fa:	781a      	ldrb	r2, [r3, #0]
 80126fc:	4bab      	ldr	r3, [pc, #684]	; (80129ac <ProcessMacCommands+0x3b0>)
 80126fe:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 8012702:	f000 bc41 	b.w	8012f88 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8012706:	2300      	movs	r3, #0
 8012708:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 801270c:	2300      	movs	r3, #0
 801270e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8012712:	2300      	movs	r3, #0
 8012714:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8012718:	2300      	movs	r3, #0
 801271a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 801271e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8012722:	f083 0301 	eor.w	r3, r3, #1
 8012726:	b2db      	uxtb	r3, r3
 8012728:	2b00      	cmp	r3, #0
 801272a:	f000 80a5 	beq.w	8012878 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 801272e:	2301      	movs	r3, #1
 8012730:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8012734:	78fb      	ldrb	r3, [r7, #3]
 8012736:	3b01      	subs	r3, #1
 8012738:	687a      	ldr	r2, [r7, #4]
 801273a:	4413      	add	r3, r2
 801273c:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801273e:	4b9c      	ldr	r3, [pc, #624]	; (80129b0 <ProcessMacCommands+0x3b4>)
 8012740:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8012744:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012748:	4b99      	ldr	r3, [pc, #612]	; (80129b0 <ProcessMacCommands+0x3b4>)
 801274a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801274e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012752:	4b97      	ldr	r3, [pc, #604]	; (80129b0 <ProcessMacCommands+0x3b4>)
 8012754:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012758:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801275c:	4b94      	ldr	r3, [pc, #592]	; (80129b0 <ProcessMacCommands+0x3b4>)
 801275e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012762:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012766:	4b92      	ldr	r3, [pc, #584]	; (80129b0 <ProcessMacCommands+0x3b4>)
 8012768:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801276c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8012770:	4b8f      	ldr	r3, [pc, #572]	; (80129b0 <ProcessMacCommands+0x3b4>)
 8012772:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8012776:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8012778:	4b8d      	ldr	r3, [pc, #564]	; (80129b0 <ProcessMacCommands+0x3b4>)
 801277a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801277e:	2b00      	cmp	r3, #0
 8012780:	d008      	beq.n	8012794 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8012782:	78ba      	ldrb	r2, [r7, #2]
 8012784:	78fb      	ldrb	r3, [r7, #3]
 8012786:	1ad3      	subs	r3, r2, r3
 8012788:	b2db      	uxtb	r3, r3
 801278a:	3301      	adds	r3, #1
 801278c:	b2db      	uxtb	r3, r3
 801278e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8012792:	e002      	b.n	801279a <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 8012794:	2305      	movs	r3, #5
 8012796:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 801279a:	4b85      	ldr	r3, [pc, #532]	; (80129b0 <ProcessMacCommands+0x3b4>)
 801279c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80127a0:	f107 0456 	add.w	r4, r7, #86	; 0x56
 80127a4:	f107 0257 	add.w	r2, r7, #87	; 0x57
 80127a8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80127ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80127b0:	9301      	str	r3, [sp, #4]
 80127b2:	f107 0355 	add.w	r3, r7, #85	; 0x55
 80127b6:	9300      	str	r3, [sp, #0]
 80127b8:	4623      	mov	r3, r4
 80127ba:	f005 fae4 	bl	8017d86 <RegionLinkAdrReq>
 80127be:	4603      	mov	r3, r0
 80127c0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 80127c4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80127c8:	f003 0307 	and.w	r3, r3, #7
 80127cc:	2b07      	cmp	r3, #7
 80127ce:	d119      	bne.n	8012804 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 80127d0:	4b77      	ldr	r3, [pc, #476]	; (80129b0 <ProcessMacCommands+0x3b4>)
 80127d2:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80127d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80127da:	429a      	cmp	r2, r3
 80127dc:	da03      	bge.n	80127e6 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 80127de:	4b74      	ldr	r3, [pc, #464]	; (80129b0 <ProcessMacCommands+0x3b4>)
 80127e0:	2201      	movs	r2, #1
 80127e2:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80127e6:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 80127ea:	4b71      	ldr	r3, [pc, #452]	; (80129b0 <ProcessMacCommands+0x3b4>)
 80127ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80127f0:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 80127f4:	4b6e      	ldr	r3, [pc, #440]	; (80129b0 <ProcessMacCommands+0x3b4>)
 80127f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80127fa:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80127fe:	4b6c      	ldr	r3, [pc, #432]	; (80129b0 <ProcessMacCommands+0x3b4>)
 8012800:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8012804:	2300      	movs	r3, #0
 8012806:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801280a:	e00b      	b.n	8012824 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 801280c:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8012810:	2201      	movs	r2, #1
 8012812:	4619      	mov	r1, r3
 8012814:	2003      	movs	r0, #3
 8012816:	f003 fbfd 	bl	8016014 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801281a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801281e:	3301      	adds	r3, #1
 8012820:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8012824:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8012828:	4a62      	ldr	r2, [pc, #392]	; (80129b4 <ProcessMacCommands+0x3b8>)
 801282a:	fba2 2303 	umull	r2, r3, r2, r3
 801282e:	089b      	lsrs	r3, r3, #2
 8012830:	b2db      	uxtb	r3, r3
 8012832:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8012836:	429a      	cmp	r2, r3
 8012838:	d3e8      	bcc.n	801280c <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 801283a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 801283e:	78fb      	ldrb	r3, [r7, #3]
 8012840:	4413      	add	r3, r2
 8012842:	b2db      	uxtb	r3, r3
 8012844:	3b01      	subs	r3, #1
 8012846:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8012848:	78fa      	ldrb	r2, [r7, #3]
 801284a:	78bb      	ldrb	r3, [r7, #2]
 801284c:	429a      	cmp	r2, r3
 801284e:	d20a      	bcs.n	8012866 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8012850:	78fb      	ldrb	r3, [r7, #3]
 8012852:	1c5a      	adds	r2, r3, #1
 8012854:	70fa      	strb	r2, [r7, #3]
 8012856:	461a      	mov	r2, r3
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	4413      	add	r3, r2
 801285c:	781b      	ldrb	r3, [r3, #0]
 801285e:	2b03      	cmp	r3, #3
 8012860:	f43f af68 	beq.w	8012734 <ProcessMacCommands+0x138>
 8012864:	e000      	b.n	8012868 <ProcessMacCommands+0x26c>
                            break;
 8012866:	bf00      	nop

                    if( macIndex < commandsSize )
 8012868:	78fa      	ldrb	r2, [r7, #3]
 801286a:	78bb      	ldrb	r3, [r7, #2]
 801286c:	429a      	cmp	r2, r3
 801286e:	d206      	bcs.n	801287e <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 8012870:	78fb      	ldrb	r3, [r7, #3]
 8012872:	3b01      	subs	r3, #1
 8012874:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8012876:	e002      	b.n	801287e <ProcessMacCommands+0x282>
                    macIndex += 4;
 8012878:	78fb      	ldrb	r3, [r7, #3]
 801287a:	3304      	adds	r3, #4
 801287c:	70fb      	strb	r3, [r7, #3]
                break;
 801287e:	bf00      	nop
 8012880:	e382      	b.n	8012f88 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8012882:	78fb      	ldrb	r3, [r7, #3]
 8012884:	1c5a      	adds	r2, r3, #1
 8012886:	70fa      	strb	r2, [r7, #3]
 8012888:	461a      	mov	r2, r3
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	4413      	add	r3, r2
 801288e:	781b      	ldrb	r3, [r3, #0]
 8012890:	f003 030f 	and.w	r3, r3, #15
 8012894:	b2da      	uxtb	r2, r3
 8012896:	4b46      	ldr	r3, [pc, #280]	; (80129b0 <ProcessMacCommands+0x3b4>)
 8012898:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 801289c:	4b44      	ldr	r3, [pc, #272]	; (80129b0 <ProcessMacCommands+0x3b4>)
 801289e:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 80128a2:	461a      	mov	r2, r3
 80128a4:	2301      	movs	r3, #1
 80128a6:	4093      	lsls	r3, r2
 80128a8:	b29a      	uxth	r2, r3
 80128aa:	4b41      	ldr	r3, [pc, #260]	; (80129b0 <ProcessMacCommands+0x3b4>)
 80128ac:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80128b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80128b4:	2200      	movs	r2, #0
 80128b6:	4619      	mov	r1, r3
 80128b8:	2004      	movs	r0, #4
 80128ba:	f003 fbab 	bl	8016014 <LoRaMacCommandsAddCmd>
                break;
 80128be:	e363      	b.n	8012f88 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 80128c0:	2307      	movs	r3, #7
 80128c2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80128c6:	78fb      	ldrb	r3, [r7, #3]
 80128c8:	687a      	ldr	r2, [r7, #4]
 80128ca:	4413      	add	r3, r2
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	091b      	lsrs	r3, r3, #4
 80128d0:	b2db      	uxtb	r3, r3
 80128d2:	b25b      	sxtb	r3, r3
 80128d4:	f003 0307 	and.w	r3, r3, #7
 80128d8:	b25b      	sxtb	r3, r3
 80128da:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80128de:	78fb      	ldrb	r3, [r7, #3]
 80128e0:	687a      	ldr	r2, [r7, #4]
 80128e2:	4413      	add	r3, r2
 80128e4:	781b      	ldrb	r3, [r3, #0]
 80128e6:	b25b      	sxtb	r3, r3
 80128e8:	f003 030f 	and.w	r3, r3, #15
 80128ec:	b25b      	sxtb	r3, r3
 80128ee:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 80128f2:	78fb      	ldrb	r3, [r7, #3]
 80128f4:	3301      	adds	r3, #1
 80128f6:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80128f8:	78fb      	ldrb	r3, [r7, #3]
 80128fa:	1c5a      	adds	r2, r3, #1
 80128fc:	70fa      	strb	r2, [r7, #3]
 80128fe:	461a      	mov	r2, r3
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	4413      	add	r3, r2
 8012904:	781b      	ldrb	r3, [r3, #0]
 8012906:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012908:	78fb      	ldrb	r3, [r7, #3]
 801290a:	1c5a      	adds	r2, r3, #1
 801290c:	70fa      	strb	r2, [r7, #3]
 801290e:	461a      	mov	r2, r3
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	4413      	add	r3, r2
 8012914:	781b      	ldrb	r3, [r3, #0]
 8012916:	021a      	lsls	r2, r3, #8
 8012918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801291a:	4313      	orrs	r3, r2
 801291c:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801291e:	78fb      	ldrb	r3, [r7, #3]
 8012920:	1c5a      	adds	r2, r3, #1
 8012922:	70fa      	strb	r2, [r7, #3]
 8012924:	461a      	mov	r2, r3
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	4413      	add	r3, r2
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	041a      	lsls	r2, r3, #16
 801292e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012930:	4313      	orrs	r3, r2
 8012932:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8012934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012936:	2264      	movs	r2, #100	; 0x64
 8012938:	fb02 f303 	mul.w	r3, r2, r3
 801293c:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801293e:	4b1c      	ldr	r3, [pc, #112]	; (80129b0 <ProcessMacCommands+0x3b4>)
 8012940:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012944:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012948:	4611      	mov	r1, r2
 801294a:	4618      	mov	r0, r3
 801294c:	f005 fa42 	bl	8017dd4 <RegionRxParamSetupReq>
 8012950:	4603      	mov	r3, r0
 8012952:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8012956:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801295a:	f003 0307 	and.w	r3, r3, #7
 801295e:	2b07      	cmp	r3, #7
 8012960:	d117      	bne.n	8012992 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8012962:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8012966:	b2da      	uxtb	r2, r3
 8012968:	4b11      	ldr	r3, [pc, #68]	; (80129b0 <ProcessMacCommands+0x3b4>)
 801296a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 801296e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8012972:	b2da      	uxtb	r2, r3
 8012974:	4b0e      	ldr	r3, [pc, #56]	; (80129b0 <ProcessMacCommands+0x3b4>)
 8012976:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 801297a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801297c:	4a0c      	ldr	r2, [pc, #48]	; (80129b0 <ProcessMacCommands+0x3b4>)
 801297e:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8012980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012982:	4a0b      	ldr	r2, [pc, #44]	; (80129b0 <ProcessMacCommands+0x3b4>)
 8012984:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8012986:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801298a:	b2da      	uxtb	r2, r3
 801298c:	4b08      	ldr	r3, [pc, #32]	; (80129b0 <ProcessMacCommands+0x3b4>)
 801298e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 8012992:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012996:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 801299a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801299e:	2201      	movs	r2, #1
 80129a0:	4619      	mov	r1, r3
 80129a2:	2005      	movs	r0, #5
 80129a4:	f003 fb36 	bl	8016014 <LoRaMacCommandsAddCmd>
                break;
 80129a8:	bf00      	nop
 80129aa:	e2ed      	b.n	8012f88 <ProcessMacCommands+0x98c>
 80129ac:	20000738 	.word	0x20000738
 80129b0:	20000c54 	.word	0x20000c54
 80129b4:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80129b8:	23ff      	movs	r3, #255	; 0xff
 80129ba:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80129be:	4bb7      	ldr	r3, [pc, #732]	; (8012c9c <ProcessMacCommands+0x6a0>)
 80129c0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d00d      	beq.n	80129e4 <ProcessMacCommands+0x3e8>
 80129c8:	4bb4      	ldr	r3, [pc, #720]	; (8012c9c <ProcessMacCommands+0x6a0>)
 80129ca:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d007      	beq.n	80129e4 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80129d4:	4bb1      	ldr	r3, [pc, #708]	; (8012c9c <ProcessMacCommands+0x6a0>)
 80129d6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	4798      	blx	r3
 80129de:	4603      	mov	r3, r0
 80129e0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 80129e4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80129e8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80129ec:	787b      	ldrb	r3, [r7, #1]
 80129ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80129f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80129fc:	2202      	movs	r2, #2
 80129fe:	4619      	mov	r1, r3
 8012a00:	2006      	movs	r0, #6
 8012a02:	f003 fb07 	bl	8016014 <LoRaMacCommandsAddCmd>
                break;
 8012a06:	e2bf      	b.n	8012f88 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8012a08:	2303      	movs	r3, #3
 8012a0a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8012a0e:	78fb      	ldrb	r3, [r7, #3]
 8012a10:	1c5a      	adds	r2, r3, #1
 8012a12:	70fa      	strb	r2, [r7, #3]
 8012a14:	461a      	mov	r2, r3
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	4413      	add	r3, r2
 8012a1a:	781b      	ldrb	r3, [r3, #0]
 8012a1c:	b25b      	sxtb	r3, r3
 8012a1e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8012a22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012a26:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8012a28:	78fb      	ldrb	r3, [r7, #3]
 8012a2a:	1c5a      	adds	r2, r3, #1
 8012a2c:	70fa      	strb	r2, [r7, #3]
 8012a2e:	461a      	mov	r2, r3
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	4413      	add	r3, r2
 8012a34:	781b      	ldrb	r3, [r3, #0]
 8012a36:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012a38:	78fb      	ldrb	r3, [r7, #3]
 8012a3a:	1c5a      	adds	r2, r3, #1
 8012a3c:	70fa      	strb	r2, [r7, #3]
 8012a3e:	461a      	mov	r2, r3
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	4413      	add	r3, r2
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	021a      	lsls	r2, r3, #8
 8012a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a4a:	4313      	orrs	r3, r2
 8012a4c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012a4e:	78fb      	ldrb	r3, [r7, #3]
 8012a50:	1c5a      	adds	r2, r3, #1
 8012a52:	70fa      	strb	r2, [r7, #3]
 8012a54:	461a      	mov	r2, r3
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	4413      	add	r3, r2
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	041a      	lsls	r2, r3, #16
 8012a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a60:	4313      	orrs	r3, r2
 8012a62:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8012a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a66:	2264      	movs	r2, #100	; 0x64
 8012a68:	fb02 f303 	mul.w	r3, r2, r3
 8012a6c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8012a72:	78fb      	ldrb	r3, [r7, #3]
 8012a74:	1c5a      	adds	r2, r3, #1
 8012a76:	70fa      	strb	r2, [r7, #3]
 8012a78:	461a      	mov	r2, r3
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	4413      	add	r3, r2
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	b25b      	sxtb	r3, r3
 8012a82:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8012a86:	4b86      	ldr	r3, [pc, #536]	; (8012ca0 <ProcessMacCommands+0x6a4>)
 8012a88:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a8c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012a90:	4611      	mov	r1, r2
 8012a92:	4618      	mov	r0, r3
 8012a94:	f005 f9b9 	bl	8017e0a <RegionNewChannelReq>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	b2db      	uxtb	r3, r3
 8012a9c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012aa0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012aa4:	b25b      	sxtb	r3, r3
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	db0a      	blt.n	8012ac0 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 8012aaa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012aae:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8012ab2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012ab6:	2201      	movs	r2, #1
 8012ab8:	4619      	mov	r1, r3
 8012aba:	2007      	movs	r0, #7
 8012abc:	f003 faaa 	bl	8016014 <LoRaMacCommandsAddCmd>
                }
                break;
 8012ac0:	bf00      	nop
 8012ac2:	e261      	b.n	8012f88 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8012ac4:	78fb      	ldrb	r3, [r7, #3]
 8012ac6:	1c5a      	adds	r2, r3, #1
 8012ac8:	70fa      	strb	r2, [r7, #3]
 8012aca:	461a      	mov	r2, r3
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	4413      	add	r3, r2
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	f003 030f 	and.w	r3, r3, #15
 8012ad6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8012ada:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d104      	bne.n	8012aec <ProcessMacCommands+0x4f0>
                {
                    delay++;
 8012ae2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012ae6:	3301      	adds	r3, #1
 8012ae8:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8012aec:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012af4:	fb02 f303 	mul.w	r3, r2, r3
 8012af8:	461a      	mov	r2, r3
 8012afa:	4b69      	ldr	r3, [pc, #420]	; (8012ca0 <ProcessMacCommands+0x6a4>)
 8012afc:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8012afe:	4b68      	ldr	r3, [pc, #416]	; (8012ca0 <ProcessMacCommands+0x6a4>)
 8012b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b02:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8012b06:	4a66      	ldr	r2, [pc, #408]	; (8012ca0 <ProcessMacCommands+0x6a4>)
 8012b08:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8012b0a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012b0e:	2200      	movs	r2, #0
 8012b10:	4619      	mov	r1, r3
 8012b12:	2008      	movs	r0, #8
 8012b14:	f003 fa7e 	bl	8016014 <LoRaMacCommandsAddCmd>
                break;
 8012b18:	e236      	b.n	8012f88 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8012b1a:	78fb      	ldrb	r3, [r7, #3]
 8012b1c:	1c5a      	adds	r2, r3, #1
 8012b1e:	70fa      	strb	r2, [r7, #3]
 8012b20:	461a      	mov	r2, r3
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	4413      	add	r3, r2
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8012b32:	2300      	movs	r3, #0
 8012b34:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8012b38:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012b3c:	f003 0320 	and.w	r3, r3, #32
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d002      	beq.n	8012b4a <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8012b44:	2301      	movs	r3, #1
 8012b46:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8012b4a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012b4e:	f003 0310 	and.w	r3, r3, #16
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d002      	beq.n	8012b5c <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8012b56:	2301      	movs	r3, #1
 8012b58:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8012b5c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012b60:	f003 030f 	and.w	r3, r3, #15
 8012b64:	b2db      	uxtb	r3, r3
 8012b66:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8012b6a:	4b4d      	ldr	r3, [pc, #308]	; (8012ca0 <ProcessMacCommands+0x6a4>)
 8012b6c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012b70:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012b74:	4611      	mov	r1, r2
 8012b76:	4618      	mov	r0, r3
 8012b78:	f005 f962 	bl	8017e40 <RegionTxParamSetupReq>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b82:	d03b      	beq.n	8012bfc <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8012b84:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8012b88:	4b45      	ldr	r3, [pc, #276]	; (8012ca0 <ProcessMacCommands+0x6a4>)
 8012b8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8012b8e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8012b92:	4b43      	ldr	r3, [pc, #268]	; (8012ca0 <ProcessMacCommands+0x6a4>)
 8012b94:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012b98:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012b9c:	461a      	mov	r2, r3
 8012b9e:	4b41      	ldr	r3, [pc, #260]	; (8012ca4 <ProcessMacCommands+0x6a8>)
 8012ba0:	5c9b      	ldrb	r3, [r3, r2]
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7ee f88a 	bl	8000cbc <__aeabi_ui2f>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	4a3d      	ldr	r2, [pc, #244]	; (8012ca0 <ProcessMacCommands+0x6a4>)
 8012bac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8012bb0:	2302      	movs	r3, #2
 8012bb2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012bb6:	4b3a      	ldr	r3, [pc, #232]	; (8012ca0 <ProcessMacCommands+0x6a4>)
 8012bb8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012bbc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012bc0:	4b37      	ldr	r3, [pc, #220]	; (8012ca0 <ProcessMacCommands+0x6a4>)
 8012bc2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012bc6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012bca:	4611      	mov	r1, r2
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f004 ffd3 	bl	8017b78 <RegionGetPhyParam>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8012bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd8:	b25a      	sxtb	r2, r3
 8012bda:	4b31      	ldr	r3, [pc, #196]	; (8012ca0 <ProcessMacCommands+0x6a4>)
 8012bdc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012be0:	4293      	cmp	r3, r2
 8012be2:	bfb8      	it	lt
 8012be4:	4613      	movlt	r3, r2
 8012be6:	b25a      	sxtb	r2, r3
 8012be8:	4b2d      	ldr	r3, [pc, #180]	; (8012ca0 <ProcessMacCommands+0x6a4>)
 8012bea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8012bee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	4619      	mov	r1, r3
 8012bf6:	2009      	movs	r0, #9
 8012bf8:	f003 fa0c 	bl	8016014 <LoRaMacCommandsAddCmd>
                }
                break;
 8012bfc:	bf00      	nop
 8012bfe:	e1c3      	b.n	8012f88 <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8012c00:	2303      	movs	r3, #3
 8012c02:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8012c06:	78fb      	ldrb	r3, [r7, #3]
 8012c08:	1c5a      	adds	r2, r3, #1
 8012c0a:	70fa      	strb	r2, [r7, #3]
 8012c0c:	461a      	mov	r2, r3
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	4413      	add	r3, r2
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8012c18:	78fb      	ldrb	r3, [r7, #3]
 8012c1a:	1c5a      	adds	r2, r3, #1
 8012c1c:	70fa      	strb	r2, [r7, #3]
 8012c1e:	461a      	mov	r2, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	4413      	add	r3, r2
 8012c24:	781b      	ldrb	r3, [r3, #0]
 8012c26:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012c28:	78fb      	ldrb	r3, [r7, #3]
 8012c2a:	1c5a      	adds	r2, r3, #1
 8012c2c:	70fa      	strb	r2, [r7, #3]
 8012c2e:	461a      	mov	r2, r3
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	4413      	add	r3, r2
 8012c34:	781b      	ldrb	r3, [r3, #0]
 8012c36:	021a      	lsls	r2, r3, #8
 8012c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3a:	4313      	orrs	r3, r2
 8012c3c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012c3e:	78fb      	ldrb	r3, [r7, #3]
 8012c40:	1c5a      	adds	r2, r3, #1
 8012c42:	70fa      	strb	r2, [r7, #3]
 8012c44:	461a      	mov	r2, r3
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	4413      	add	r3, r2
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	041a      	lsls	r2, r3, #16
 8012c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c50:	4313      	orrs	r3, r2
 8012c52:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8012c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c56:	2264      	movs	r2, #100	; 0x64
 8012c58:	fb02 f303 	mul.w	r3, r2, r3
 8012c5c:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8012c5e:	4b10      	ldr	r3, [pc, #64]	; (8012ca0 <ProcessMacCommands+0x6a4>)
 8012c60:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012c64:	f107 0220 	add.w	r2, r7, #32
 8012c68:	4611      	mov	r1, r2
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f005 f903 	bl	8017e76 <RegionDlChannelReq>
 8012c70:	4603      	mov	r3, r0
 8012c72:	b2db      	uxtb	r3, r3
 8012c74:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012c78:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012c7c:	b25b      	sxtb	r3, r3
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	db0a      	blt.n	8012c98 <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 8012c82:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012c86:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012c8a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012c8e:	2201      	movs	r2, #1
 8012c90:	4619      	mov	r1, r3
 8012c92:	200a      	movs	r0, #10
 8012c94:	f003 f9be 	bl	8016014 <LoRaMacCommandsAddCmd>
                }
                break;
 8012c98:	bf00      	nop
 8012c9a:	e175      	b.n	8012f88 <ProcessMacCommands+0x98c>
 8012c9c:	20000738 	.word	0x20000738
 8012ca0:	20000c54 	.word	0x20000c54
 8012ca4:	08021eb0 	.word	0x08021eb0
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012ca8:	2009      	movs	r0, #9
 8012caa:	f003 fceb 	bl	8016684 <LoRaMacConfirmQueueIsCmdActive>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	f000 8084 	beq.w	8012dbe <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8012cb6:	2109      	movs	r1, #9
 8012cb8:	2000      	movs	r0, #0
 8012cba:	f003 fc57 	bl	801656c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8012cbe:	f107 0318 	add.w	r3, r7, #24
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	601a      	str	r2, [r3, #0]
 8012cc6:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8012cc8:	f107 0310 	add.w	r3, r7, #16
 8012ccc:	2200      	movs	r2, #0
 8012cce:	601a      	str	r2, [r3, #0]
 8012cd0:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8012cd2:	f107 0308 	add.w	r3, r7, #8
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	601a      	str	r2, [r3, #0]
 8012cda:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8012cdc:	78fb      	ldrb	r3, [r7, #3]
 8012cde:	1c5a      	adds	r2, r3, #1
 8012ce0:	70fa      	strb	r2, [r7, #3]
 8012ce2:	461a      	mov	r2, r3
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	4413      	add	r3, r2
 8012ce8:	781b      	ldrb	r3, [r3, #0]
 8012cea:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8012cec:	78fb      	ldrb	r3, [r7, #3]
 8012cee:	1c5a      	adds	r2, r3, #1
 8012cf0:	70fa      	strb	r2, [r7, #3]
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	4413      	add	r3, r2
 8012cf8:	781b      	ldrb	r3, [r3, #0]
 8012cfa:	021a      	lsls	r2, r3, #8
 8012cfc:	69bb      	ldr	r3, [r7, #24]
 8012cfe:	4313      	orrs	r3, r2
 8012d00:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8012d02:	78fb      	ldrb	r3, [r7, #3]
 8012d04:	1c5a      	adds	r2, r3, #1
 8012d06:	70fa      	strb	r2, [r7, #3]
 8012d08:	461a      	mov	r2, r3
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	4413      	add	r3, r2
 8012d0e:	781b      	ldrb	r3, [r3, #0]
 8012d10:	041a      	lsls	r2, r3, #16
 8012d12:	69bb      	ldr	r3, [r7, #24]
 8012d14:	4313      	orrs	r3, r2
 8012d16:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8012d18:	78fb      	ldrb	r3, [r7, #3]
 8012d1a:	1c5a      	adds	r2, r3, #1
 8012d1c:	70fa      	strb	r2, [r7, #3]
 8012d1e:	461a      	mov	r2, r3
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	4413      	add	r3, r2
 8012d24:	781b      	ldrb	r3, [r3, #0]
 8012d26:	061a      	lsls	r2, r3, #24
 8012d28:	69bb      	ldr	r3, [r7, #24]
 8012d2a:	4313      	orrs	r3, r2
 8012d2c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8012d2e:	78fb      	ldrb	r3, [r7, #3]
 8012d30:	1c5a      	adds	r2, r3, #1
 8012d32:	70fa      	strb	r2, [r7, #3]
 8012d34:	461a      	mov	r2, r3
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	4413      	add	r3, r2
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	b21b      	sxth	r3, r3
 8012d3e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8012d40:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012d44:	461a      	mov	r2, r3
 8012d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012d4a:	fb02 f303 	mul.w	r3, r2, r3
 8012d4e:	121b      	asrs	r3, r3, #8
 8012d50:	b21b      	sxth	r3, r3
 8012d52:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8012d54:	f107 0310 	add.w	r3, r7, #16
 8012d58:	f107 0218 	add.w	r2, r7, #24
 8012d5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d60:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8012d64:	693a      	ldr	r2, [r7, #16]
 8012d66:	4b8f      	ldr	r3, [pc, #572]	; (8012fa4 <ProcessMacCommands+0x9a8>)
 8012d68:	4413      	add	r3, r2
 8012d6a:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012d6c:	f107 0308 	add.w	r3, r7, #8
 8012d70:	4618      	mov	r0, r3
 8012d72:	f00c f901 	bl	801ef78 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8012d76:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012d7a:	4b8b      	ldr	r3, [pc, #556]	; (8012fa8 <ProcessMacCommands+0x9ac>)
 8012d7c:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012d80:	9200      	str	r2, [sp, #0]
 8012d82:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012d86:	f107 0210 	add.w	r2, r7, #16
 8012d8a:	ca06      	ldmia	r2, {r1, r2}
 8012d8c:	f00c f88d 	bl	801eeaa <SysTimeSub>
 8012d90:	f107 0010 	add.w	r0, r7, #16
 8012d94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012d96:	9300      	str	r3, [sp, #0]
 8012d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012d9a:	f107 0208 	add.w	r2, r7, #8
 8012d9e:	ca06      	ldmia	r2, {r1, r2}
 8012da0:	f00c f84a 	bl	801ee38 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012da4:	f107 0310 	add.w	r3, r7, #16
 8012da8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012dac:	f00c f8b6 	bl	801ef1c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8012db0:	f002 ffd0 	bl	8015d54 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8012db4:	4b7c      	ldr	r3, [pc, #496]	; (8012fa8 <ProcessMacCommands+0x9ac>)
 8012db6:	2201      	movs	r2, #1
 8012db8:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8012dbc:	e0e4      	b.n	8012f88 <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8012dbe:	4b7a      	ldr	r3, [pc, #488]	; (8012fa8 <ProcessMacCommands+0x9ac>)
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 8012dc6:	e0df      	b.n	8012f88 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8012dc8:	200c      	movs	r0, #12
 8012dca:	f003 fc5b 	bl	8016684 <LoRaMacConfirmQueueIsCmdActive>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	f000 80d9 	beq.w	8012f88 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8012dd6:	210c      	movs	r1, #12
 8012dd8:	2000      	movs	r0, #0
 8012dda:	f003 fbc7 	bl	801656c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012dde:	4b72      	ldr	r3, [pc, #456]	; (8012fa8 <ProcessMacCommands+0x9ac>)
 8012de0:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8012de4:	2b04      	cmp	r3, #4
 8012de6:	f000 80cf 	beq.w	8012f88 <ProcessMacCommands+0x98c>
 8012dea:	4b6f      	ldr	r3, [pc, #444]	; (8012fa8 <ProcessMacCommands+0x9ac>)
 8012dec:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8012df0:	2b05      	cmp	r3, #5
 8012df2:	f000 80c9 	beq.w	8012f88 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8012df6:	f002 ff8e 	bl	8015d16 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8012dfa:	e0c5      	b.n	8012f88 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8012dfc:	2303      	movs	r3, #3
 8012dfe:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8012e02:	2300      	movs	r3, #0
 8012e04:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8012e06:	78fb      	ldrb	r3, [r7, #3]
 8012e08:	1c5a      	adds	r2, r3, #1
 8012e0a:	70fa      	strb	r2, [r7, #3]
 8012e0c:	461a      	mov	r2, r3
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	4413      	add	r3, r2
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012e16:	78fb      	ldrb	r3, [r7, #3]
 8012e18:	1c5a      	adds	r2, r3, #1
 8012e1a:	70fa      	strb	r2, [r7, #3]
 8012e1c:	461a      	mov	r2, r3
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	4413      	add	r3, r2
 8012e22:	781b      	ldrb	r3, [r3, #0]
 8012e24:	021b      	lsls	r3, r3, #8
 8012e26:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012e28:	4313      	orrs	r3, r2
 8012e2a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012e2c:	78fb      	ldrb	r3, [r7, #3]
 8012e2e:	1c5a      	adds	r2, r3, #1
 8012e30:	70fa      	strb	r2, [r7, #3]
 8012e32:	461a      	mov	r2, r3
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	4413      	add	r3, r2
 8012e38:	781b      	ldrb	r3, [r3, #0]
 8012e3a:	041b      	lsls	r3, r3, #16
 8012e3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012e3e:	4313      	orrs	r3, r2
 8012e40:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8012e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012e44:	2264      	movs	r2, #100	; 0x64
 8012e46:	fb02 f303 	mul.w	r3, r2, r3
 8012e4a:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8012e4c:	78fb      	ldrb	r3, [r7, #3]
 8012e4e:	1c5a      	adds	r2, r3, #1
 8012e50:	70fa      	strb	r2, [r7, #3]
 8012e52:	461a      	mov	r2, r3
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	4413      	add	r3, r2
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	f003 030f 	and.w	r3, r3, #15
 8012e5e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012e62:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012e66:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f002 ff5a 	bl	8015d22 <LoRaMacClassBPingSlotChannelReq>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012e74:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012e78:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8012e7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012e80:	2201      	movs	r2, #1
 8012e82:	4619      	mov	r1, r3
 8012e84:	2011      	movs	r0, #17
 8012e86:	f003 f8c5 	bl	8016014 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 8012e8a:	e07d      	b.n	8012f88 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012e8c:	200d      	movs	r0, #13
 8012e8e:	f003 fbf9 	bl	8016684 <LoRaMacConfirmQueueIsCmdActive>
 8012e92:	4603      	mov	r3, r0
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d077      	beq.n	8012f88 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012e98:	210d      	movs	r1, #13
 8012e9a:	2000      	movs	r0, #0
 8012e9c:	f003 fb66 	bl	801656c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012eac:	78fb      	ldrb	r3, [r7, #3]
 8012eae:	1c5a      	adds	r2, r3, #1
 8012eb0:	70fa      	strb	r2, [r7, #3]
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	4413      	add	r3, r2
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012ebe:	78fb      	ldrb	r3, [r7, #3]
 8012ec0:	1c5a      	adds	r2, r3, #1
 8012ec2:	70fa      	strb	r2, [r7, #3]
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	4413      	add	r3, r2
 8012eca:	781b      	ldrb	r3, [r3, #0]
 8012ecc:	021b      	lsls	r3, r3, #8
 8012ece:	b21a      	sxth	r2, r3
 8012ed0:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012ed4:	4313      	orrs	r3, r2
 8012ed6:	b21b      	sxth	r3, r3
 8012ed8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8012edc:	78fb      	ldrb	r3, [r7, #3]
 8012ede:	1c5a      	adds	r2, r3, #1
 8012ee0:	70fa      	strb	r2, [r7, #3]
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	4413      	add	r3, r2
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012eee:	4b2f      	ldr	r3, [pc, #188]	; (8012fac <ProcessMacCommands+0x9b0>)
 8012ef0:	681a      	ldr	r2, [r3, #0]
 8012ef2:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8012ef6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012efa:	4618      	mov	r0, r3
 8012efc:	f002 ff1d 	bl	8015d3a <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012f00:	e042      	b.n	8012f88 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8012f02:	2300      	movs	r3, #0
 8012f04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8012f08:	78fb      	ldrb	r3, [r7, #3]
 8012f0a:	1c5a      	adds	r2, r3, #1
 8012f0c:	70fa      	strb	r2, [r7, #3]
 8012f0e:	461a      	mov	r2, r3
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	4413      	add	r3, r2
 8012f14:	781b      	ldrb	r3, [r3, #0]
 8012f16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012f1a:	78fb      	ldrb	r3, [r7, #3]
 8012f1c:	1c5a      	adds	r2, r3, #1
 8012f1e:	70fa      	strb	r2, [r7, #3]
 8012f20:	461a      	mov	r2, r3
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	4413      	add	r3, r2
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	021b      	lsls	r3, r3, #8
 8012f2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012f2e:	4313      	orrs	r3, r2
 8012f30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012f34:	78fb      	ldrb	r3, [r7, #3]
 8012f36:	1c5a      	adds	r2, r3, #1
 8012f38:	70fa      	strb	r2, [r7, #3]
 8012f3a:	461a      	mov	r2, r3
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	4413      	add	r3, r2
 8012f40:	781b      	ldrb	r3, [r3, #0]
 8012f42:	041b      	lsls	r3, r3, #16
 8012f44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012f48:	4313      	orrs	r3, r2
 8012f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8012f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012f52:	2264      	movs	r2, #100	; 0x64
 8012f54:	fb02 f303 	mul.w	r3, r2, r3
 8012f58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8012f5c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012f60:	f002 fefe 	bl	8015d60 <LoRaMacClassBBeaconFreqReq>
 8012f64:	4603      	mov	r3, r0
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d003      	beq.n	8012f72 <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8012f70:	e002      	b.n	8012f78 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8012f72:	2300      	movs	r3, #0
 8012f74:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8012f78:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012f7c:	2201      	movs	r2, #1
 8012f7e:	4619      	mov	r1, r3
 8012f80:	2013      	movs	r0, #19
 8012f82:	f003 f847 	bl	8016014 <LoRaMacCommandsAddCmd>
                }
                break;
 8012f86:	bf00      	nop
    while( macIndex < commandsSize )
 8012f88:	78fa      	ldrb	r2, [r7, #3]
 8012f8a:	78bb      	ldrb	r3, [r7, #2]
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	f4ff ab57 	bcc.w	8012640 <ProcessMacCommands+0x44>
 8012f92:	e004      	b.n	8012f9e <ProcessMacCommands+0x9a2>
        return;
 8012f94:	bf00      	nop
 8012f96:	e002      	b.n	8012f9e <ProcessMacCommands+0x9a2>
            return;
 8012f98:	bf00      	nop
 8012f9a:	e000      	b.n	8012f9e <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8012f9c:	bf00      	nop
        }
    }
}
 8012f9e:	378c      	adds	r7, #140	; 0x8c
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd90      	pop	{r4, r7, pc}
 8012fa4:	12d53d80 	.word	0x12d53d80
 8012fa8:	20000738 	.word	0x20000738
 8012fac:	20001884 	.word	0x20001884

08012fb0 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b08e      	sub	sp, #56	; 0x38
 8012fb4:	af02      	add	r7, sp, #8
 8012fb6:	60f8      	str	r0, [r7, #12]
 8012fb8:	607a      	str	r2, [r7, #4]
 8012fba:	461a      	mov	r2, r3
 8012fbc:	460b      	mov	r3, r1
 8012fbe:	72fb      	strb	r3, [r7, #11]
 8012fc0:	4613      	mov	r3, r2
 8012fc2:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012fc4:	2303      	movs	r3, #3
 8012fc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012fca:	4b66      	ldr	r3, [pc, #408]	; (8013164 <Send+0x1b4>)
 8012fcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012fd0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8012fd4:	4b63      	ldr	r3, [pc, #396]	; (8013164 <Send+0x1b4>)
 8012fd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012fda:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012fde:	4b61      	ldr	r3, [pc, #388]	; (8013164 <Send+0x1b4>)
 8012fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012fe4:	4b5f      	ldr	r3, [pc, #380]	; (8013164 <Send+0x1b4>)
 8012fe6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d101      	bne.n	8012ff2 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8012fee:	2307      	movs	r3, #7
 8012ff0:	e0b4      	b.n	801315c <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8012ff2:	4b5c      	ldr	r3, [pc, #368]	; (8013164 <Send+0x1b4>)
 8012ff4:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d102      	bne.n	8013002 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012ffc:	4b59      	ldr	r3, [pc, #356]	; (8013164 <Send+0x1b4>)
 8012ffe:	2200      	movs	r2, #0
 8013000:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8013002:	2300      	movs	r3, #0
 8013004:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8013008:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801300c:	f36f 0303 	bfc	r3, #0, #4
 8013010:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8013014:	4b53      	ldr	r3, [pc, #332]	; (8013164 <Send+0x1b4>)
 8013016:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 801301a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801301e:	f362 13c7 	bfi	r3, r2, #7, #1
 8013022:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013026:	4b4f      	ldr	r3, [pc, #316]	; (8013164 <Send+0x1b4>)
 8013028:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801302c:	2b01      	cmp	r3, #1
 801302e:	d106      	bne.n	801303e <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8013030:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013034:	f043 0310 	orr.w	r3, r3, #16
 8013038:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801303c:	e005      	b.n	801304a <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801303e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013042:	f36f 1304 	bfc	r3, #4, #1
 8013046:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 801304a:	4b46      	ldr	r3, [pc, #280]	; (8013164 <Send+0x1b4>)
 801304c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013050:	2b00      	cmp	r3, #0
 8013052:	d005      	beq.n	8013060 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8013054:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013058:	f043 0320 	orr.w	r3, r3, #32
 801305c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8013060:	2301      	movs	r3, #1
 8013062:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8013064:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013068:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801306c:	b2db      	uxtb	r3, r3
 801306e:	2b00      	cmp	r3, #0
 8013070:	bf14      	ite	ne
 8013072:	2301      	movne	r3, #1
 8013074:	2300      	moveq	r3, #0
 8013076:	b2db      	uxtb	r3, r3
 8013078:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801307a:	4b3a      	ldr	r3, [pc, #232]	; (8013164 <Send+0x1b4>)
 801307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801307e:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8013080:	4b38      	ldr	r3, [pc, #224]	; (8013164 <Send+0x1b4>)
 8013082:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8013086:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8013088:	4b36      	ldr	r3, [pc, #216]	; (8013164 <Send+0x1b4>)
 801308a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 801308e:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013090:	4b34      	ldr	r3, [pc, #208]	; (8013164 <Send+0x1b4>)
 8013092:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013096:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801309a:	4b32      	ldr	r3, [pc, #200]	; (8013164 <Send+0x1b4>)
 801309c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80130a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80130a4:	4b2f      	ldr	r3, [pc, #188]	; (8013164 <Send+0x1b4>)
 80130a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80130aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80130ae:	4b2d      	ldr	r3, [pc, #180]	; (8013164 <Send+0x1b4>)
 80130b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80130b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80130b8:	4b2a      	ldr	r3, [pc, #168]	; (8013164 <Send+0x1b4>)
 80130ba:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80130be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80130c2:	f107 0014 	add.w	r0, r7, #20
 80130c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80130ca:	9300      	str	r3, [sp, #0]
 80130cc:	4b26      	ldr	r3, [pc, #152]	; (8013168 <Send+0x1b8>)
 80130ce:	4a27      	ldr	r2, [pc, #156]	; (801316c <Send+0x1bc>)
 80130d0:	4927      	ldr	r1, [pc, #156]	; (8013170 <Send+0x1c0>)
 80130d2:	f002 fcbf 	bl	8015a54 <LoRaMacAdrCalcNext>
 80130d6:	4603      	mov	r3, r0
 80130d8:	461a      	mov	r2, r3
 80130da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80130de:	f362 1386 	bfi	r3, r2, #6, #1
 80130e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80130e6:	7afa      	ldrb	r2, [r7, #11]
 80130e8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80130ec:	893b      	ldrh	r3, [r7, #8]
 80130ee:	9300      	str	r3, [sp, #0]
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	68f8      	ldr	r0, [r7, #12]
 80130f4:	f000 fc72 	bl	80139dc <PrepareFrame>
 80130f8:	4603      	mov	r3, r0
 80130fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80130fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013102:	2b00      	cmp	r3, #0
 8013104:	d003      	beq.n	801310e <Send+0x15e>
 8013106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801310a:	2b0a      	cmp	r3, #10
 801310c:	d107      	bne.n	801311e <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 801310e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013112:	4618      	mov	r0, r3
 8013114:	f000 f962 	bl	80133dc <ScheduleTx>
 8013118:	4603      	mov	r3, r0
 801311a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 801311e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013122:	2b00      	cmp	r3, #0
 8013124:	d00a      	beq.n	801313c <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8013126:	4a0f      	ldr	r2, [pc, #60]	; (8013164 <Send+0x1b4>)
 8013128:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801312c:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8013130:	4a0c      	ldr	r2, [pc, #48]	; (8013164 <Send+0x1b4>)
 8013132:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013136:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 801313a:	e00d      	b.n	8013158 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 801313c:	4b09      	ldr	r3, [pc, #36]	; (8013164 <Send+0x1b4>)
 801313e:	2200      	movs	r2, #0
 8013140:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8013144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013146:	4a07      	ldr	r2, [pc, #28]	; (8013164 <Send+0x1b4>)
 8013148:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 801314a:	f003 f809 	bl	8016160 <LoRaMacCommandsRemoveNoneStickyCmds>
 801314e:	4603      	mov	r3, r0
 8013150:	2b00      	cmp	r3, #0
 8013152:	d001      	beq.n	8013158 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013154:	2313      	movs	r3, #19
 8013156:	e001      	b.n	801315c <Send+0x1ac>
        }
    }
    return status;
 8013158:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801315c:	4618      	mov	r0, r3
 801315e:	3730      	adds	r7, #48	; 0x30
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}
 8013164:	20000c54 	.word	0x20000c54
 8013168:	20000cbc 	.word	0x20000cbc
 801316c:	20000c8c 	.word	0x20000c8c
 8013170:	20000c8d 	.word	0x20000c8d

08013174 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b084      	sub	sp, #16
 8013178:	af00      	add	r7, sp, #0
 801317a:	4603      	mov	r3, r0
 801317c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801317e:	2300      	movs	r3, #0
 8013180:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8013182:	2300      	movs	r3, #0
 8013184:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8013186:	2301      	movs	r3, #1
 8013188:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 801318a:	79fb      	ldrb	r3, [r7, #7]
 801318c:	2bff      	cmp	r3, #255	; 0xff
 801318e:	d11f      	bne.n	80131d0 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8013190:	2000      	movs	r0, #0
 8013192:	f7ff f8f9 	bl	8012388 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8013196:	4b15      	ldr	r3, [pc, #84]	; (80131ec <SendReJoinReq+0x78>)
 8013198:	2200      	movs	r2, #0
 801319a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 801319e:	4b13      	ldr	r3, [pc, #76]	; (80131ec <SendReJoinReq+0x78>)
 80131a0:	4a13      	ldr	r2, [pc, #76]	; (80131f0 <SendReJoinReq+0x7c>)
 80131a2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80131a6:	4b11      	ldr	r3, [pc, #68]	; (80131ec <SendReJoinReq+0x78>)
 80131a8:	22ff      	movs	r2, #255	; 0xff
 80131aa:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80131ae:	7b3b      	ldrb	r3, [r7, #12]
 80131b0:	f36f 1347 	bfc	r3, #5, #3
 80131b4:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80131b6:	7b3a      	ldrb	r2, [r7, #12]
 80131b8:	4b0c      	ldr	r3, [pc, #48]	; (80131ec <SendReJoinReq+0x78>)
 80131ba:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 80131be:	480d      	ldr	r0, [pc, #52]	; (80131f4 <SendReJoinReq+0x80>)
 80131c0:	f7fb ff34 	bl	800f02c <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 80131c4:	480c      	ldr	r0, [pc, #48]	; (80131f8 <SendReJoinReq+0x84>)
 80131c6:	f7fb ff01 	bl	800efcc <SecureElementGetDevEui>

            allowDelayedTx = false;
 80131ca:	2300      	movs	r3, #0
 80131cc:	73fb      	strb	r3, [r7, #15]

            break;
 80131ce:	e002      	b.n	80131d6 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80131d0:	2302      	movs	r3, #2
 80131d2:	73bb      	strb	r3, [r7, #14]
            break;
 80131d4:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 80131d6:	7bfb      	ldrb	r3, [r7, #15]
 80131d8:	4618      	mov	r0, r3
 80131da:	f000 f8ff 	bl	80133dc <ScheduleTx>
 80131de:	4603      	mov	r3, r0
 80131e0:	73bb      	strb	r3, [r7, #14]
    return status;
 80131e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3710      	adds	r7, #16
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}
 80131ec:	20000738 	.word	0x20000738
 80131f0:	2000073a 	.word	0x2000073a
 80131f4:	20000846 	.word	0x20000846
 80131f8:	2000084e 	.word	0x2000084e

080131fc <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8013200:	f002 fd38 	bl	8015c74 <LoRaMacClassBIsBeaconExpected>
 8013204:	4603      	mov	r3, r0
 8013206:	2b00      	cmp	r3, #0
 8013208:	d001      	beq.n	801320e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801320a:	230e      	movs	r3, #14
 801320c:	e013      	b.n	8013236 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801320e:	4b0b      	ldr	r3, [pc, #44]	; (801323c <CheckForClassBCollision+0x40>)
 8013210:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013214:	2b01      	cmp	r3, #1
 8013216:	d10d      	bne.n	8013234 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8013218:	f002 fd33 	bl	8015c82 <LoRaMacClassBIsPingExpected>
 801321c:	4603      	mov	r3, r0
 801321e:	2b00      	cmp	r3, #0
 8013220:	d001      	beq.n	8013226 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8013222:	230f      	movs	r3, #15
 8013224:	e007      	b.n	8013236 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8013226:	f002 fd33 	bl	8015c90 <LoRaMacClassBIsMulticastExpected>
 801322a:	4603      	mov	r3, r0
 801322c:	2b00      	cmp	r3, #0
 801322e:	d001      	beq.n	8013234 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8013230:	230f      	movs	r3, #15
 8013232:	e000      	b.n	8013236 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8013234:	2300      	movs	r3, #0
}
 8013236:	4618      	mov	r0, r3
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	20000c54 	.word	0x20000c54

08013240 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8013240:	b590      	push	{r4, r7, lr}
 8013242:	b083      	sub	sp, #12
 8013244:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013246:	4b2d      	ldr	r3, [pc, #180]	; (80132fc <ComputeRxWindowParameters+0xbc>)
 8013248:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 801324c:	4b2b      	ldr	r3, [pc, #172]	; (80132fc <ComputeRxWindowParameters+0xbc>)
 801324e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013252:	4b2a      	ldr	r3, [pc, #168]	; (80132fc <ComputeRxWindowParameters+0xbc>)
 8013254:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8013258:	4b28      	ldr	r3, [pc, #160]	; (80132fc <ComputeRxWindowParameters+0xbc>)
 801325a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 801325e:	4b27      	ldr	r3, [pc, #156]	; (80132fc <ComputeRxWindowParameters+0xbc>)
 8013260:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8013264:	b25b      	sxtb	r3, r3
 8013266:	f004 fe6a 	bl	8017f3e <RegionApplyDrOffset>
 801326a:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801326c:	b259      	sxtb	r1, r3
 801326e:	4b23      	ldr	r3, [pc, #140]	; (80132fc <ComputeRxWindowParameters+0xbc>)
 8013270:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8013274:	4b21      	ldr	r3, [pc, #132]	; (80132fc <ComputeRxWindowParameters+0xbc>)
 8013276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013278:	4821      	ldr	r0, [pc, #132]	; (8013300 <ComputeRxWindowParameters+0xc0>)
 801327a:	9000      	str	r0, [sp, #0]
 801327c:	4620      	mov	r0, r4
 801327e:	f004 fd1f 	bl	8017cc0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013282:	4b1e      	ldr	r3, [pc, #120]	; (80132fc <ComputeRxWindowParameters+0xbc>)
 8013284:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8013288:	4b1c      	ldr	r3, [pc, #112]	; (80132fc <ComputeRxWindowParameters+0xbc>)
 801328a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801328e:	b259      	sxtb	r1, r3
 8013290:	4b1a      	ldr	r3, [pc, #104]	; (80132fc <ComputeRxWindowParameters+0xbc>)
 8013292:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8013296:	4b19      	ldr	r3, [pc, #100]	; (80132fc <ComputeRxWindowParameters+0xbc>)
 8013298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801329a:	4c1a      	ldr	r4, [pc, #104]	; (8013304 <ComputeRxWindowParameters+0xc4>)
 801329c:	9400      	str	r4, [sp, #0]
 801329e:	f004 fd0f 	bl	8017cc0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80132a2:	4b16      	ldr	r3, [pc, #88]	; (80132fc <ComputeRxWindowParameters+0xbc>)
 80132a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80132a6:	4a18      	ldr	r2, [pc, #96]	; (8013308 <ComputeRxWindowParameters+0xc8>)
 80132a8:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80132ac:	4413      	add	r3, r2
 80132ae:	4a16      	ldr	r2, [pc, #88]	; (8013308 <ComputeRxWindowParameters+0xc8>)
 80132b0:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80132b4:	4b11      	ldr	r3, [pc, #68]	; (80132fc <ComputeRxWindowParameters+0xbc>)
 80132b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80132b8:	4a13      	ldr	r2, [pc, #76]	; (8013308 <ComputeRxWindowParameters+0xc8>)
 80132ba:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 80132be:	4413      	add	r3, r2
 80132c0:	4a11      	ldr	r2, [pc, #68]	; (8013308 <ComputeRxWindowParameters+0xc8>)
 80132c2:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 80132c6:	4b10      	ldr	r3, [pc, #64]	; (8013308 <ComputeRxWindowParameters+0xc8>)
 80132c8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80132cc:	2b04      	cmp	r3, #4
 80132ce:	d011      	beq.n	80132f4 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80132d0:	4b0a      	ldr	r3, [pc, #40]	; (80132fc <ComputeRxWindowParameters+0xbc>)
 80132d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80132d4:	4a0c      	ldr	r2, [pc, #48]	; (8013308 <ComputeRxWindowParameters+0xc8>)
 80132d6:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80132da:	4413      	add	r3, r2
 80132dc:	4a0a      	ldr	r2, [pc, #40]	; (8013308 <ComputeRxWindowParameters+0xc8>)
 80132de:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80132e2:	4b06      	ldr	r3, [pc, #24]	; (80132fc <ComputeRxWindowParameters+0xbc>)
 80132e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80132e6:	4a08      	ldr	r2, [pc, #32]	; (8013308 <ComputeRxWindowParameters+0xc8>)
 80132e8:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 80132ec:	4413      	add	r3, r2
 80132ee:	4a06      	ldr	r2, [pc, #24]	; (8013308 <ComputeRxWindowParameters+0xc8>)
 80132f0:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 80132f4:	bf00      	nop
 80132f6:	3704      	adds	r7, #4
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd90      	pop	{r4, r7, pc}
 80132fc:	20000c54 	.word	0x20000c54
 8013300:	20000af0 	.word	0x20000af0
 8013304:	20000b08 	.word	0x20000b08
 8013308:	20000738 	.word	0x20000738

0801330c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8013312:	2300      	movs	r3, #0
 8013314:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8013316:	4b13      	ldr	r3, [pc, #76]	; (8013364 <VerifyTxFrame+0x58>)
 8013318:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801331c:	2b00      	cmp	r3, #0
 801331e:	d01b      	beq.n	8013358 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013320:	1d3b      	adds	r3, r7, #4
 8013322:	4618      	mov	r0, r3
 8013324:	f002 ff6c 	bl	8016200 <LoRaMacCommandsGetSizeSerializedCmds>
 8013328:	4603      	mov	r3, r0
 801332a:	2b00      	cmp	r3, #0
 801332c:	d001      	beq.n	8013332 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801332e:	2313      	movs	r3, #19
 8013330:	e013      	b.n	801335a <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8013332:	4b0d      	ldr	r3, [pc, #52]	; (8013368 <VerifyTxFrame+0x5c>)
 8013334:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013338:	4a0a      	ldr	r2, [pc, #40]	; (8013364 <VerifyTxFrame+0x58>)
 801333a:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 801333e:	687a      	ldr	r2, [r7, #4]
 8013340:	b2d2      	uxtb	r2, r2
 8013342:	4618      	mov	r0, r3
 8013344:	f7ff f932 	bl	80125ac <ValidatePayloadLength>
 8013348:	4603      	mov	r3, r0
 801334a:	f083 0301 	eor.w	r3, r3, #1
 801334e:	b2db      	uxtb	r3, r3
 8013350:	2b00      	cmp	r3, #0
 8013352:	d001      	beq.n	8013358 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8013354:	2308      	movs	r3, #8
 8013356:	e000      	b.n	801335a <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8013358:	2300      	movs	r3, #0
}
 801335a:	4618      	mov	r0, r3
 801335c:	3708      	adds	r7, #8
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}
 8013362:	bf00      	nop
 8013364:	20000c54 	.word	0x20000c54
 8013368:	20000738 	.word	0x20000738

0801336c <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b082      	sub	sp, #8
 8013370:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8013372:	4b18      	ldr	r3, [pc, #96]	; (80133d4 <SerializeTxFrame+0x68>)
 8013374:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013378:	2b00      	cmp	r3, #0
 801337a:	d002      	beq.n	8013382 <SerializeTxFrame+0x16>
 801337c:	2b04      	cmp	r3, #4
 801337e:	d011      	beq.n	80133a4 <SerializeTxFrame+0x38>
 8013380:	e021      	b.n	80133c6 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8013382:	4815      	ldr	r0, [pc, #84]	; (80133d8 <SerializeTxFrame+0x6c>)
 8013384:	f004 fa6a 	bl	801785c <LoRaMacSerializerJoinRequest>
 8013388:	4603      	mov	r3, r0
 801338a:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801338c:	79fb      	ldrb	r3, [r7, #7]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d001      	beq.n	8013396 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013392:	2311      	movs	r3, #17
 8013394:	e01a      	b.n	80133cc <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8013396:	4b0f      	ldr	r3, [pc, #60]	; (80133d4 <SerializeTxFrame+0x68>)
 8013398:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801339c:	b29a      	uxth	r2, r3
 801339e:	4b0d      	ldr	r3, [pc, #52]	; (80133d4 <SerializeTxFrame+0x68>)
 80133a0:	801a      	strh	r2, [r3, #0]
            break;
 80133a2:	e012      	b.n	80133ca <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80133a4:	480c      	ldr	r0, [pc, #48]	; (80133d8 <SerializeTxFrame+0x6c>)
 80133a6:	f004 fadb 	bl	8017960 <LoRaMacSerializerData>
 80133aa:	4603      	mov	r3, r0
 80133ac:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80133ae:	79fb      	ldrb	r3, [r7, #7]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d001      	beq.n	80133b8 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80133b4:	2311      	movs	r3, #17
 80133b6:	e009      	b.n	80133cc <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80133b8:	4b06      	ldr	r3, [pc, #24]	; (80133d4 <SerializeTxFrame+0x68>)
 80133ba:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80133be:	b29a      	uxth	r2, r3
 80133c0:	4b04      	ldr	r3, [pc, #16]	; (80133d4 <SerializeTxFrame+0x68>)
 80133c2:	801a      	strh	r2, [r3, #0]
            break;
 80133c4:	e001      	b.n	80133ca <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80133c6:	2303      	movs	r3, #3
 80133c8:	e000      	b.n	80133cc <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 80133ca:	2300      	movs	r3, #0
}
 80133cc:	4618      	mov	r0, r3
 80133ce:	3708      	adds	r7, #8
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bd80      	pop	{r7, pc}
 80133d4:	20000738 	.word	0x20000738
 80133d8:	20000840 	.word	0x20000840

080133dc <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b090      	sub	sp, #64	; 0x40
 80133e0:	af02      	add	r7, sp, #8
 80133e2:	4603      	mov	r3, r0
 80133e4:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133e6:	2303      	movs	r3, #3
 80133e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 80133ec:	f7ff ff06 	bl	80131fc <CheckForClassBCollision>
 80133f0:	4603      	mov	r3, r0
 80133f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80133f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d002      	beq.n	8013404 <ScheduleTx+0x28>
    {
        return status;
 80133fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013402:	e092      	b.n	801352a <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8013404:	f000 f8f8 	bl	80135f8 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8013408:	f7ff ffb0 	bl	801336c <SerializeTxFrame>
 801340c:	4603      	mov	r3, r0
 801340e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013412:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013416:	2b00      	cmp	r3, #0
 8013418:	d002      	beq.n	8013420 <ScheduleTx+0x44>
    {
        return status;
 801341a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801341e:	e084      	b.n	801352a <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8013420:	4b44      	ldr	r3, [pc, #272]	; (8013534 <ScheduleTx+0x158>)
 8013422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013424:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013426:	4b43      	ldr	r3, [pc, #268]	; (8013534 <ScheduleTx+0x158>)
 8013428:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801342c:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801342e:	4b41      	ldr	r3, [pc, #260]	; (8013534 <ScheduleTx+0x158>)
 8013430:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8013434:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8013436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801343a:	4618      	mov	r0, r3
 801343c:	f00b fdd4 	bl	801efe8 <SysTimeGetMcuTime>
 8013440:	4638      	mov	r0, r7
 8013442:	4b3c      	ldr	r3, [pc, #240]	; (8013534 <ScheduleTx+0x158>)
 8013444:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8013448:	9200      	str	r2, [sp, #0]
 801344a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 801344e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013452:	ca06      	ldmia	r2, {r1, r2}
 8013454:	f00b fd29 	bl	801eeaa <SysTimeSub>
 8013458:	f107 0320 	add.w	r3, r7, #32
 801345c:	463a      	mov	r2, r7
 801345e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013462:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8013466:	4b33      	ldr	r3, [pc, #204]	; (8013534 <ScheduleTx+0x158>)
 8013468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801346a:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 801346c:	2300      	movs	r3, #0
 801346e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8013472:	2301      	movs	r3, #1
 8013474:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8013476:	4b30      	ldr	r3, [pc, #192]	; (8013538 <ScheduleTx+0x15c>)
 8013478:	881b      	ldrh	r3, [r3, #0]
 801347a:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 801347c:	4b2d      	ldr	r3, [pc, #180]	; (8013534 <ScheduleTx+0x158>)
 801347e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8013482:	2b00      	cmp	r3, #0
 8013484:	d104      	bne.n	8013490 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8013486:	2301      	movs	r3, #1
 8013488:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 801348c:	2300      	movs	r3, #0
 801348e:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8013490:	4b28      	ldr	r3, [pc, #160]	; (8013534 <ScheduleTx+0x158>)
 8013492:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013496:	f107 0114 	add.w	r1, r7, #20
 801349a:	4b28      	ldr	r3, [pc, #160]	; (801353c <ScheduleTx+0x160>)
 801349c:	9300      	str	r3, [sp, #0]
 801349e:	4b28      	ldr	r3, [pc, #160]	; (8013540 <ScheduleTx+0x164>)
 80134a0:	4a28      	ldr	r2, [pc, #160]	; (8013544 <ScheduleTx+0x168>)
 80134a2:	f004 fd29 	bl	8017ef8 <RegionNextChannel>
 80134a6:	4603      	mov	r3, r0
 80134a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 80134ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d025      	beq.n	8013500 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 80134b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134b8:	2b0b      	cmp	r3, #11
 80134ba:	d11e      	bne.n	80134fa <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 80134bc:	4b1e      	ldr	r3, [pc, #120]	; (8013538 <ScheduleTx+0x15c>)
 80134be:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d01c      	beq.n	8013500 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 80134c6:	7bfb      	ldrb	r3, [r7, #15]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d013      	beq.n	80134f4 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80134cc:	4b1a      	ldr	r3, [pc, #104]	; (8013538 <ScheduleTx+0x15c>)
 80134ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80134d2:	f043 0320 	orr.w	r3, r3, #32
 80134d6:	4a18      	ldr	r2, [pc, #96]	; (8013538 <ScheduleTx+0x15c>)
 80134d8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80134dc:	4b16      	ldr	r3, [pc, #88]	; (8013538 <ScheduleTx+0x15c>)
 80134de:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80134e2:	4619      	mov	r1, r3
 80134e4:	4818      	ldr	r0, [pc, #96]	; (8013548 <ScheduleTx+0x16c>)
 80134e6:	f00c fa1b 	bl	801f920 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 80134ea:	4817      	ldr	r0, [pc, #92]	; (8013548 <ScheduleTx+0x16c>)
 80134ec:	f00c f93a 	bl	801f764 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 80134f0:	2300      	movs	r3, #0
 80134f2:	e01a      	b.n	801352a <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 80134f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134f8:	e017      	b.n	801352a <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 80134fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134fe:	e014      	b.n	801352a <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8013500:	f7ff fe9e 	bl	8013240 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8013504:	f7ff ff02 	bl	801330c <VerifyTxFrame>
 8013508:	4603      	mov	r3, r0
 801350a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801350e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013512:	2b00      	cmp	r3, #0
 8013514:	d002      	beq.n	801351c <ScheduleTx+0x140>
    {
        return status;
 8013516:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801351a:	e006      	b.n	801352a <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801351c:	4b06      	ldr	r3, [pc, #24]	; (8013538 <ScheduleTx+0x15c>)
 801351e:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8013522:	4618      	mov	r0, r3
 8013524:	f000 fb76 	bl	8013c14 <SendFrameOnChannel>
 8013528:	4603      	mov	r3, r0
}
 801352a:	4618      	mov	r0, r3
 801352c:	3738      	adds	r7, #56	; 0x38
 801352e:	46bd      	mov	sp, r7
 8013530:	bd80      	pop	{r7, pc}
 8013532:	bf00      	nop
 8013534:	20000c54 	.word	0x20000c54
 8013538:	20000738 	.word	0x20000738
 801353c:	20000c84 	.word	0x20000c84
 8013540:	20000bcc 	.word	0x20000bcc
 8013544:	20000b53 	.word	0x20000b53
 8013548:	20000aa0 	.word	0x20000aa0

0801354c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b084      	sub	sp, #16
 8013550:	af00      	add	r7, sp, #0
 8013552:	4603      	mov	r3, r0
 8013554:	460a      	mov	r2, r1
 8013556:	71fb      	strb	r3, [r7, #7]
 8013558:	4613      	mov	r3, r2
 801355a:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 801355c:	2312      	movs	r3, #18
 801355e:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8013560:	2300      	movs	r3, #0
 8013562:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8013564:	4b22      	ldr	r3, [pc, #136]	; (80135f0 <SecureFrame+0xa4>)
 8013566:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801356a:	2b00      	cmp	r3, #0
 801356c:	d002      	beq.n	8013574 <SecureFrame+0x28>
 801356e:	2b04      	cmp	r3, #4
 8013570:	d011      	beq.n	8013596 <SecureFrame+0x4a>
 8013572:	e036      	b.n	80135e2 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8013574:	481f      	ldr	r0, [pc, #124]	; (80135f4 <SecureFrame+0xa8>)
 8013576:	f003 fd3d 	bl	8016ff4 <LoRaMacCryptoPrepareJoinRequest>
 801357a:	4603      	mov	r3, r0
 801357c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801357e:	7bfb      	ldrb	r3, [r7, #15]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d001      	beq.n	8013588 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013584:	2311      	movs	r3, #17
 8013586:	e02f      	b.n	80135e8 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8013588:	4b19      	ldr	r3, [pc, #100]	; (80135f0 <SecureFrame+0xa4>)
 801358a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801358e:	b29a      	uxth	r2, r3
 8013590:	4b17      	ldr	r3, [pc, #92]	; (80135f0 <SecureFrame+0xa4>)
 8013592:	801a      	strh	r2, [r3, #0]
            break;
 8013594:	e027      	b.n	80135e6 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013596:	f107 0308 	add.w	r3, r7, #8
 801359a:	4618      	mov	r0, r3
 801359c:	f003 fc64 	bl	8016e68 <LoRaMacCryptoGetFCntUp>
 80135a0:	4603      	mov	r3, r0
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d001      	beq.n	80135aa <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80135a6:	2312      	movs	r3, #18
 80135a8:	e01e      	b.n	80135e8 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80135aa:	4b11      	ldr	r3, [pc, #68]	; (80135f0 <SecureFrame+0xa4>)
 80135ac:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d002      	beq.n	80135ba <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	3b01      	subs	r3, #1
 80135b8:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80135ba:	68b8      	ldr	r0, [r7, #8]
 80135bc:	79ba      	ldrb	r2, [r7, #6]
 80135be:	79f9      	ldrb	r1, [r7, #7]
 80135c0:	4b0c      	ldr	r3, [pc, #48]	; (80135f4 <SecureFrame+0xa8>)
 80135c2:	f003 fe3f 	bl	8017244 <LoRaMacCryptoSecureMessage>
 80135c6:	4603      	mov	r3, r0
 80135c8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80135ca:	7bfb      	ldrb	r3, [r7, #15]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d001      	beq.n	80135d4 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80135d0:	2311      	movs	r3, #17
 80135d2:	e009      	b.n	80135e8 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80135d4:	4b06      	ldr	r3, [pc, #24]	; (80135f0 <SecureFrame+0xa4>)
 80135d6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80135da:	b29a      	uxth	r2, r3
 80135dc:	4b04      	ldr	r3, [pc, #16]	; (80135f0 <SecureFrame+0xa4>)
 80135de:	801a      	strh	r2, [r3, #0]
            break;
 80135e0:	e001      	b.n	80135e6 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80135e2:	2303      	movs	r3, #3
 80135e4:	e000      	b.n	80135e8 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 80135e6:	2300      	movs	r3, #0
}
 80135e8:	4618      	mov	r0, r3
 80135ea:	3710      	adds	r7, #16
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}
 80135f0:	20000738 	.word	0x20000738
 80135f4:	20000840 	.word	0x20000840

080135f8 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 80135f8:	b480      	push	{r7}
 80135fa:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80135fc:	4b09      	ldr	r3, [pc, #36]	; (8013624 <CalculateBackOff+0x2c>)
 80135fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013600:	2b00      	cmp	r3, #0
 8013602:	d10a      	bne.n	801361a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8013604:	4b07      	ldr	r3, [pc, #28]	; (8013624 <CalculateBackOff+0x2c>)
 8013606:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 801360a:	3b01      	subs	r3, #1
 801360c:	4a06      	ldr	r2, [pc, #24]	; (8013628 <CalculateBackOff+0x30>)
 801360e:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 8013612:	fb02 f303 	mul.w	r3, r2, r3
 8013616:	4a03      	ldr	r2, [pc, #12]	; (8013624 <CalculateBackOff+0x2c>)
 8013618:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 801361a:	bf00      	nop
 801361c:	46bd      	mov	sp, r7
 801361e:	bc80      	pop	{r7}
 8013620:	4770      	bx	lr
 8013622:	bf00      	nop
 8013624:	20000c54 	.word	0x20000c54
 8013628:	20000738 	.word	0x20000738

0801362c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b082      	sub	sp, #8
 8013630:	af00      	add	r7, sp, #0
 8013632:	4603      	mov	r3, r0
 8013634:	7139      	strb	r1, [r7, #4]
 8013636:	71fb      	strb	r3, [r7, #7]
 8013638:	4613      	mov	r3, r2
 801363a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 801363c:	79fb      	ldrb	r3, [r7, #7]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d002      	beq.n	8013648 <RemoveMacCommands+0x1c>
 8013642:	79fb      	ldrb	r3, [r7, #7]
 8013644:	2b01      	cmp	r3, #1
 8013646:	d10d      	bne.n	8013664 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8013648:	79bb      	ldrb	r3, [r7, #6]
 801364a:	2b01      	cmp	r3, #1
 801364c:	d108      	bne.n	8013660 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801364e:	793b      	ldrb	r3, [r7, #4]
 8013650:	f003 0320 	and.w	r3, r3, #32
 8013654:	b2db      	uxtb	r3, r3
 8013656:	2b00      	cmp	r3, #0
 8013658:	d004      	beq.n	8013664 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801365a:	f002 fda5 	bl	80161a8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801365e:	e001      	b.n	8013664 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8013660:	f002 fda2 	bl	80161a8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8013664:	bf00      	nop
 8013666:	3708      	adds	r7, #8
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}

0801366c <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 801366c:	b5b0      	push	{r4, r5, r7, lr}
 801366e:	b092      	sub	sp, #72	; 0x48
 8013670:	af00      	add	r7, sp, #0
 8013672:	4603      	mov	r3, r0
 8013674:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8013676:	79fb      	ldrb	r3, [r7, #7]
 8013678:	f083 0301 	eor.w	r3, r3, #1
 801367c:	b2db      	uxtb	r3, r3
 801367e:	2b00      	cmp	r3, #0
 8013680:	d003      	beq.n	801368a <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8013682:	4b88      	ldr	r3, [pc, #544]	; (80138a4 <ResetMacParameters+0x238>)
 8013684:	2200      	movs	r2, #0
 8013686:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 801368a:	4b86      	ldr	r3, [pc, #536]	; (80138a4 <ResetMacParameters+0x238>)
 801368c:	2200      	movs	r2, #0
 801368e:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8013690:	4b85      	ldr	r3, [pc, #532]	; (80138a8 <ResetMacParameters+0x23c>)
 8013692:	2200      	movs	r2, #0
 8013694:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8013698:	4b83      	ldr	r3, [pc, #524]	; (80138a8 <ResetMacParameters+0x23c>)
 801369a:	2200      	movs	r2, #0
 801369c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 80136a0:	4b81      	ldr	r3, [pc, #516]	; (80138a8 <ResetMacParameters+0x23c>)
 80136a2:	2200      	movs	r2, #0
 80136a4:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80136a8:	4b7e      	ldr	r3, [pc, #504]	; (80138a4 <ResetMacParameters+0x238>)
 80136aa:	2200      	movs	r2, #0
 80136ac:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80136b0:	4b7c      	ldr	r3, [pc, #496]	; (80138a4 <ResetMacParameters+0x238>)
 80136b2:	2201      	movs	r2, #1
 80136b4:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80136b8:	4b7a      	ldr	r3, [pc, #488]	; (80138a4 <ResetMacParameters+0x238>)
 80136ba:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 80136be:	4b79      	ldr	r3, [pc, #484]	; (80138a4 <ResetMacParameters+0x238>)
 80136c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80136c4:	4b77      	ldr	r3, [pc, #476]	; (80138a4 <ResetMacParameters+0x238>)
 80136c6:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 80136ca:	4b76      	ldr	r3, [pc, #472]	; (80138a4 <ResetMacParameters+0x238>)
 80136cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80136d0:	4b74      	ldr	r3, [pc, #464]	; (80138a4 <ResetMacParameters+0x238>)
 80136d2:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 80136d6:	4b73      	ldr	r3, [pc, #460]	; (80138a4 <ResetMacParameters+0x238>)
 80136d8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80136dc:	4b71      	ldr	r3, [pc, #452]	; (80138a4 <ResetMacParameters+0x238>)
 80136de:	4a71      	ldr	r2, [pc, #452]	; (80138a4 <ResetMacParameters+0x238>)
 80136e0:	336c      	adds	r3, #108	; 0x6c
 80136e2:	32b4      	adds	r2, #180	; 0xb4
 80136e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80136e8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80136ec:	4b6d      	ldr	r3, [pc, #436]	; (80138a4 <ResetMacParameters+0x238>)
 80136ee:	4a6d      	ldr	r2, [pc, #436]	; (80138a4 <ResetMacParameters+0x238>)
 80136f0:	3374      	adds	r3, #116	; 0x74
 80136f2:	32bc      	adds	r2, #188	; 0xbc
 80136f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80136f8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80136fc:	4b69      	ldr	r3, [pc, #420]	; (80138a4 <ResetMacParameters+0x238>)
 80136fe:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8013702:	4b68      	ldr	r3, [pc, #416]	; (80138a4 <ResetMacParameters+0x238>)
 8013704:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8013708:	4b66      	ldr	r3, [pc, #408]	; (80138a4 <ResetMacParameters+0x238>)
 801370a:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 801370e:	4b65      	ldr	r3, [pc, #404]	; (80138a4 <ResetMacParameters+0x238>)
 8013710:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8013714:	4b63      	ldr	r3, [pc, #396]	; (80138a4 <ResetMacParameters+0x238>)
 8013716:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801371a:	4a62      	ldr	r2, [pc, #392]	; (80138a4 <ResetMacParameters+0x238>)
 801371c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013720:	4b60      	ldr	r3, [pc, #384]	; (80138a4 <ResetMacParameters+0x238>)
 8013722:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013726:	4a5f      	ldr	r2, [pc, #380]	; (80138a4 <ResetMacParameters+0x238>)
 8013728:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801372c:	4b5d      	ldr	r3, [pc, #372]	; (80138a4 <ResetMacParameters+0x238>)
 801372e:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8013732:	4b5c      	ldr	r3, [pc, #368]	; (80138a4 <ResetMacParameters+0x238>)
 8013734:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8013738:	4b5a      	ldr	r3, [pc, #360]	; (80138a4 <ResetMacParameters+0x238>)
 801373a:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 801373e:	4b59      	ldr	r3, [pc, #356]	; (80138a4 <ResetMacParameters+0x238>)
 8013740:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8013744:	4b58      	ldr	r3, [pc, #352]	; (80138a8 <ResetMacParameters+0x23c>)
 8013746:	2200      	movs	r2, #0
 8013748:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 801374c:	4b55      	ldr	r3, [pc, #340]	; (80138a4 <ResetMacParameters+0x238>)
 801374e:	2200      	movs	r2, #0
 8013750:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8013754:	4b53      	ldr	r3, [pc, #332]	; (80138a4 <ResetMacParameters+0x238>)
 8013756:	2200      	movs	r2, #0
 8013758:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 801375c:	4b51      	ldr	r3, [pc, #324]	; (80138a4 <ResetMacParameters+0x238>)
 801375e:	2200      	movs	r2, #0
 8013760:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8013764:	4b4f      	ldr	r3, [pc, #316]	; (80138a4 <ResetMacParameters+0x238>)
 8013766:	2200      	movs	r2, #0
 8013768:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 801376c:	4b4d      	ldr	r3, [pc, #308]	; (80138a4 <ResetMacParameters+0x238>)
 801376e:	2200      	movs	r2, #0
 8013770:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8013774:	4b4b      	ldr	r3, [pc, #300]	; (80138a4 <ResetMacParameters+0x238>)
 8013776:	2200      	movs	r2, #0
 8013778:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 801377c:	4b49      	ldr	r3, [pc, #292]	; (80138a4 <ResetMacParameters+0x238>)
 801377e:	2200      	movs	r2, #0
 8013780:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8013784:	4b47      	ldr	r3, [pc, #284]	; (80138a4 <ResetMacParameters+0x238>)
 8013786:	2200      	movs	r2, #0
 8013788:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 801378c:	4b45      	ldr	r3, [pc, #276]	; (80138a4 <ResetMacParameters+0x238>)
 801378e:	2200      	movs	r2, #0
 8013790:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8013794:	4b43      	ldr	r3, [pc, #268]	; (80138a4 <ResetMacParameters+0x238>)
 8013796:	2200      	movs	r2, #0
 8013798:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 801379c:	4b41      	ldr	r3, [pc, #260]	; (80138a4 <ResetMacParameters+0x238>)
 801379e:	2200      	movs	r2, #0
 80137a0:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80137a4:	2301      	movs	r3, #1
 80137a6:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80137a8:	4b40      	ldr	r3, [pc, #256]	; (80138ac <ResetMacParameters+0x240>)
 80137aa:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80137ac:	4b40      	ldr	r3, [pc, #256]	; (80138b0 <ResetMacParameters+0x244>)
 80137ae:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 80137b0:	4b40      	ldr	r3, [pc, #256]	; (80138b4 <ResetMacParameters+0x248>)
 80137b2:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80137b4:	4b3b      	ldr	r3, [pc, #236]	; (80138a4 <ResetMacParameters+0x238>)
 80137b6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80137ba:	f107 020c 	add.w	r2, r7, #12
 80137be:	4611      	mov	r1, r2
 80137c0:	4618      	mov	r0, r3
 80137c2:	f004 fa11 	bl	8017be8 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80137c6:	4b38      	ldr	r3, [pc, #224]	; (80138a8 <ResetMacParameters+0x23c>)
 80137c8:	2200      	movs	r2, #0
 80137ca:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80137ce:	4b36      	ldr	r3, [pc, #216]	; (80138a8 <ResetMacParameters+0x23c>)
 80137d0:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80137d4:	4b34      	ldr	r3, [pc, #208]	; (80138a8 <ResetMacParameters+0x23c>)
 80137d6:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80137da:	4b32      	ldr	r3, [pc, #200]	; (80138a4 <ResetMacParameters+0x238>)
 80137dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137de:	4a32      	ldr	r2, [pc, #200]	; (80138a8 <ResetMacParameters+0x23c>)
 80137e0:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80137e4:	4b2f      	ldr	r3, [pc, #188]	; (80138a4 <ResetMacParameters+0x238>)
 80137e6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80137ea:	4b2f      	ldr	r3, [pc, #188]	; (80138a8 <ResetMacParameters+0x23c>)
 80137ec:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80137f0:	4b2c      	ldr	r3, [pc, #176]	; (80138a4 <ResetMacParameters+0x238>)
 80137f2:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80137f6:	4b2c      	ldr	r3, [pc, #176]	; (80138a8 <ResetMacParameters+0x23c>)
 80137f8:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80137fc:	4b2a      	ldr	r3, [pc, #168]	; (80138a8 <ResetMacParameters+0x23c>)
 80137fe:	2200      	movs	r2, #0
 8013800:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8013804:	4b28      	ldr	r3, [pc, #160]	; (80138a8 <ResetMacParameters+0x23c>)
 8013806:	2201      	movs	r2, #1
 8013808:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801380c:	4b25      	ldr	r3, [pc, #148]	; (80138a4 <ResetMacParameters+0x238>)
 801380e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8013812:	4b25      	ldr	r3, [pc, #148]	; (80138a8 <ResetMacParameters+0x23c>)
 8013814:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8013818:	4a23      	ldr	r2, [pc, #140]	; (80138a8 <ResetMacParameters+0x23c>)
 801381a:	4b23      	ldr	r3, [pc, #140]	; (80138a8 <ResetMacParameters+0x23c>)
 801381c:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8013820:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8013824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013828:	e895 0003 	ldmia.w	r5, {r0, r1}
 801382c:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013830:	4b1d      	ldr	r3, [pc, #116]	; (80138a8 <ResetMacParameters+0x23c>)
 8013832:	2201      	movs	r2, #1
 8013834:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013838:	4b1b      	ldr	r3, [pc, #108]	; (80138a8 <ResetMacParameters+0x23c>)
 801383a:	2202      	movs	r2, #2
 801383c:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013840:	2300      	movs	r3, #0
 8013842:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8013844:	2300      	movs	r3, #0
 8013846:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 8013848:	4b17      	ldr	r3, [pc, #92]	; (80138a8 <ResetMacParameters+0x23c>)
 801384a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801384e:	2b00      	cmp	r3, #0
 8013850:	d009      	beq.n	8013866 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8013852:	4b15      	ldr	r3, [pc, #84]	; (80138a8 <ResetMacParameters+0x23c>)
 8013854:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013858:	685b      	ldr	r3, [r3, #4]
 801385a:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 801385c:	4b12      	ldr	r3, [pc, #72]	; (80138a8 <ResetMacParameters+0x23c>)
 801385e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013862:	695b      	ldr	r3, [r3, #20]
 8013864:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8013866:	4b14      	ldr	r3, [pc, #80]	; (80138b8 <ResetMacParameters+0x24c>)
 8013868:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 801386a:	4b14      	ldr	r3, [pc, #80]	; (80138bc <ResetMacParameters+0x250>)
 801386c:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801386e:	4b14      	ldr	r3, [pc, #80]	; (80138c0 <ResetMacParameters+0x254>)
 8013870:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8013872:	4b14      	ldr	r3, [pc, #80]	; (80138c4 <ResetMacParameters+0x258>)
 8013874:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8013876:	4b14      	ldr	r3, [pc, #80]	; (80138c8 <ResetMacParameters+0x25c>)
 8013878:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 801387a:	4b14      	ldr	r3, [pc, #80]	; (80138cc <ResetMacParameters+0x260>)
 801387c:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 801387e:	4b14      	ldr	r3, [pc, #80]	; (80138d0 <ResetMacParameters+0x264>)
 8013880:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8013882:	4b14      	ldr	r3, [pc, #80]	; (80138d4 <ResetMacParameters+0x268>)
 8013884:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8013886:	4b14      	ldr	r3, [pc, #80]	; (80138d8 <ResetMacParameters+0x26c>)
 8013888:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 801388a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801388e:	f107 031c 	add.w	r3, r7, #28
 8013892:	4a12      	ldr	r2, [pc, #72]	; (80138dc <ResetMacParameters+0x270>)
 8013894:	4618      	mov	r0, r3
 8013896:	f002 f996 	bl	8015bc6 <LoRaMacClassBInit>
}
 801389a:	bf00      	nop
 801389c:	3748      	adds	r7, #72	; 0x48
 801389e:	46bd      	mov	sp, r7
 80138a0:	bdb0      	pop	{r4, r5, r7, pc}
 80138a2:	bf00      	nop
 80138a4:	20000c54 	.word	0x20000c54
 80138a8:	20000738 	.word	0x20000738
 80138ac:	20000e78 	.word	0x20000e78
 80138b0:	20000e8c 	.word	0x20000e8c
 80138b4:	200017ec 	.word	0x200017ec
 80138b8:	20000ba0 	.word	0x20000ba0
 80138bc:	20000b58 	.word	0x20000b58
 80138c0:	20000b8c 	.word	0x20000b8c
 80138c4:	20000bc9 	.word	0x20000bc9
 80138c8:	20000d38 	.word	0x20000d38
 80138cc:	20000c9c 	.word	0x20000c9c
 80138d0:	20000ca0 	.word	0x20000ca0
 80138d4:	20000d3c 	.word	0x20000d3c
 80138d8:	20000d84 	.word	0x20000d84
 80138dc:	20001208 	.word	0x20001208

080138e0 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b082      	sub	sp, #8
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
 80138e8:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f00b ffa8 	bl	801f840 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80138f0:	4b11      	ldr	r3, [pc, #68]	; (8013938 <RxWindowSetup+0x58>)
 80138f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138f4:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80138f6:	4b11      	ldr	r3, [pc, #68]	; (801393c <RxWindowSetup+0x5c>)
 80138f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80138fc:	4a10      	ldr	r2, [pc, #64]	; (8013940 <RxWindowSetup+0x60>)
 80138fe:	6839      	ldr	r1, [r7, #0]
 8013900:	4618      	mov	r0, r3
 8013902:	f004 fa01 	bl	8017d08 <RegionRxConfig>
 8013906:	4603      	mov	r3, r0
 8013908:	2b00      	cmp	r3, #0
 801390a:	d010      	beq.n	801392e <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801390c:	4b0d      	ldr	r3, [pc, #52]	; (8013944 <RxWindowSetup+0x64>)
 801390e:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8013912:	4b0c      	ldr	r3, [pc, #48]	; (8013944 <RxWindowSetup+0x64>)
 8013914:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8013918:	4b07      	ldr	r3, [pc, #28]	; (8013938 <RxWindowSetup+0x58>)
 801391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801391c:	4a07      	ldr	r2, [pc, #28]	; (801393c <RxWindowSetup+0x5c>)
 801391e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8013920:	4610      	mov	r0, r2
 8013922:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8013924:	683b      	ldr	r3, [r7, #0]
 8013926:	7cda      	ldrb	r2, [r3, #19]
 8013928:	4b06      	ldr	r3, [pc, #24]	; (8013944 <RxWindowSetup+0x64>)
 801392a:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 801392e:	bf00      	nop
 8013930:	3708      	adds	r7, #8
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}
 8013936:	bf00      	nop
 8013938:	08021f7c 	.word	0x08021f7c
 801393c:	20000c54 	.word	0x20000c54
 8013940:	20000b5c 	.word	0x20000b5c
 8013944:	20000738 	.word	0x20000738

08013948 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8013948:	b590      	push	{r4, r7, lr}
 801394a:	b083      	sub	sp, #12
 801394c:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801394e:	4b1e      	ldr	r3, [pc, #120]	; (80139c8 <OpenContinuousRxCWindow+0x80>)
 8013950:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8013954:	4b1c      	ldr	r3, [pc, #112]	; (80139c8 <OpenContinuousRxCWindow+0x80>)
 8013956:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801395a:	b259      	sxtb	r1, r3
 801395c:	4b1a      	ldr	r3, [pc, #104]	; (80139c8 <OpenContinuousRxCWindow+0x80>)
 801395e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8013962:	4b19      	ldr	r3, [pc, #100]	; (80139c8 <OpenContinuousRxCWindow+0x80>)
 8013964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013966:	4c19      	ldr	r4, [pc, #100]	; (80139cc <OpenContinuousRxCWindow+0x84>)
 8013968:	9400      	str	r4, [sp, #0]
 801396a:	f004 f9a9 	bl	8017cc0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801396e:	4b18      	ldr	r3, [pc, #96]	; (80139d0 <OpenContinuousRxCWindow+0x88>)
 8013970:	2202      	movs	r2, #2
 8013972:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013976:	4b14      	ldr	r3, [pc, #80]	; (80139c8 <OpenContinuousRxCWindow+0x80>)
 8013978:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 801397c:	4b14      	ldr	r3, [pc, #80]	; (80139d0 <OpenContinuousRxCWindow+0x88>)
 801397e:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013982:	4b13      	ldr	r3, [pc, #76]	; (80139d0 <OpenContinuousRxCWindow+0x88>)
 8013984:	2201      	movs	r2, #1
 8013986:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801398a:	4b0f      	ldr	r3, [pc, #60]	; (80139c8 <OpenContinuousRxCWindow+0x80>)
 801398c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013990:	4a10      	ldr	r2, [pc, #64]	; (80139d4 <OpenContinuousRxCWindow+0x8c>)
 8013992:	490e      	ldr	r1, [pc, #56]	; (80139cc <OpenContinuousRxCWindow+0x84>)
 8013994:	4618      	mov	r0, r3
 8013996:	f004 f9b7 	bl	8017d08 <RegionRxConfig>
 801399a:	4603      	mov	r3, r0
 801399c:	2b00      	cmp	r3, #0
 801399e:	d00f      	beq.n	80139c0 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80139a0:	4b0b      	ldr	r3, [pc, #44]	; (80139d0 <OpenContinuousRxCWindow+0x88>)
 80139a2:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 80139a6:	4b0a      	ldr	r3, [pc, #40]	; (80139d0 <OpenContinuousRxCWindow+0x88>)
 80139a8:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 80139ac:	4b0a      	ldr	r3, [pc, #40]	; (80139d8 <OpenContinuousRxCWindow+0x90>)
 80139ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139b0:	2000      	movs	r0, #0
 80139b2:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80139b4:	4b06      	ldr	r3, [pc, #24]	; (80139d0 <OpenContinuousRxCWindow+0x88>)
 80139b6:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 80139ba:	4b05      	ldr	r3, [pc, #20]	; (80139d0 <OpenContinuousRxCWindow+0x88>)
 80139bc:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 80139c0:	bf00      	nop
 80139c2:	3704      	adds	r7, #4
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd90      	pop	{r4, r7, pc}
 80139c8:	20000c54 	.word	0x20000c54
 80139cc:	20000b20 	.word	0x20000b20
 80139d0:	20000738 	.word	0x20000738
 80139d4:	20000b5c 	.word	0x20000b5c
 80139d8:	08021f7c 	.word	0x08021f7c

080139dc <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b088      	sub	sp, #32
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	60b9      	str	r1, [r7, #8]
 80139e6:	603b      	str	r3, [r7, #0]
 80139e8:	4613      	mov	r3, r2
 80139ea:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80139ec:	4b82      	ldr	r3, [pc, #520]	; (8013bf8 <PrepareFrame+0x21c>)
 80139ee:	2200      	movs	r2, #0
 80139f0:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80139f2:	4b81      	ldr	r3, [pc, #516]	; (8013bf8 <PrepareFrame+0x21c>)
 80139f4:	2200      	movs	r2, #0
 80139f6:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 80139fa:	2300      	movs	r3, #0
 80139fc:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80139fe:	2300      	movs	r3, #0
 8013a00:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8013a02:	2300      	movs	r3, #0
 8013a04:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d101      	bne.n	8013a10 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8013a10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a12:	461a      	mov	r2, r3
 8013a14:	6839      	ldr	r1, [r7, #0]
 8013a16:	4879      	ldr	r0, [pc, #484]	; (8013bfc <PrepareFrame+0x220>)
 8013a18:	f007 feb3 	bl	801b782 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8013a1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a1e:	b2da      	uxtb	r2, r3
 8013a20:	4b75      	ldr	r3, [pc, #468]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a22:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	781a      	ldrb	r2, [r3, #0]
 8013a2a:	4b73      	ldr	r3, [pc, #460]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a2c:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	781b      	ldrb	r3, [r3, #0]
 8013a32:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8013a36:	b2db      	uxtb	r3, r3
 8013a38:	2b07      	cmp	r3, #7
 8013a3a:	f000 80b9 	beq.w	8013bb0 <PrepareFrame+0x1d4>
 8013a3e:	2b07      	cmp	r3, #7
 8013a40:	f300 80d0 	bgt.w	8013be4 <PrepareFrame+0x208>
 8013a44:	2b02      	cmp	r3, #2
 8013a46:	d006      	beq.n	8013a56 <PrepareFrame+0x7a>
 8013a48:	2b04      	cmp	r3, #4
 8013a4a:	f040 80cb 	bne.w	8013be4 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8013a4e:	4b6a      	ldr	r3, [pc, #424]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a50:	2201      	movs	r2, #1
 8013a52:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8013a56:	4b68      	ldr	r3, [pc, #416]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a58:	2204      	movs	r2, #4
 8013a5a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8013a5e:	4b66      	ldr	r3, [pc, #408]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a60:	4a67      	ldr	r2, [pc, #412]	; (8013c00 <PrepareFrame+0x224>)
 8013a62:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013a66:	4b64      	ldr	r3, [pc, #400]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a68:	22ff      	movs	r2, #255	; 0xff
 8013a6a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	781a      	ldrb	r2, [r3, #0]
 8013a72:	4b61      	ldr	r3, [pc, #388]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a74:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8013a78:	4a5f      	ldr	r2, [pc, #380]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a7a:	79fb      	ldrb	r3, [r7, #7]
 8013a7c:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8013a80:	4b60      	ldr	r3, [pc, #384]	; (8013c04 <PrepareFrame+0x228>)
 8013a82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8013a86:	4a5c      	ldr	r2, [pc, #368]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a88:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013a8c:	68bb      	ldr	r3, [r7, #8]
 8013a8e:	781a      	ldrb	r2, [r3, #0]
 8013a90:	4b59      	ldr	r3, [pc, #356]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a92:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8013a96:	4b58      	ldr	r3, [pc, #352]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a98:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8013a9c:	4b56      	ldr	r3, [pc, #344]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a9e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8013aa2:	4b55      	ldr	r3, [pc, #340]	; (8013bf8 <PrepareFrame+0x21c>)
 8013aa4:	4a55      	ldr	r2, [pc, #340]	; (8013bfc <PrepareFrame+0x220>)
 8013aa6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013aaa:	f107 0318 	add.w	r3, r7, #24
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f003 f9da 	bl	8016e68 <LoRaMacCryptoGetFCntUp>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d001      	beq.n	8013abe <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013aba:	2312      	movs	r3, #18
 8013abc:	e098      	b.n	8013bf0 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8013abe:	69bb      	ldr	r3, [r7, #24]
 8013ac0:	b29a      	uxth	r2, r3
 8013ac2:	4b4d      	ldr	r3, [pc, #308]	; (8013bf8 <PrepareFrame+0x21c>)
 8013ac4:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8013ac8:	4b4b      	ldr	r3, [pc, #300]	; (8013bf8 <PrepareFrame+0x21c>)
 8013aca:	2200      	movs	r2, #0
 8013acc:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8013ad0:	4b49      	ldr	r3, [pc, #292]	; (8013bf8 <PrepareFrame+0x21c>)
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8013ad8:	69bb      	ldr	r3, [r7, #24]
 8013ada:	4a47      	ldr	r2, [pc, #284]	; (8013bf8 <PrepareFrame+0x21c>)
 8013adc:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013ae0:	f107 0314 	add.w	r3, r7, #20
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f002 fb8b 	bl	8016200 <LoRaMacCommandsGetSizeSerializedCmds>
 8013aea:	4603      	mov	r3, r0
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d001      	beq.n	8013af4 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013af0:	2313      	movs	r3, #19
 8013af2:	e07d      	b.n	8013bf0 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8013af4:	697b      	ldr	r3, [r7, #20]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d076      	beq.n	8013be8 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8013afa:	4b42      	ldr	r3, [pc, #264]	; (8013c04 <PrepareFrame+0x228>)
 8013afc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7fe fd2b 	bl	801255c <GetMaxAppPayloadWithoutFOptsLength>
 8013b06:	4603      	mov	r3, r0
 8013b08:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013b0a:	4b3b      	ldr	r3, [pc, #236]	; (8013bf8 <PrepareFrame+0x21c>)
 8013b0c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d01d      	beq.n	8013b50 <PrepareFrame+0x174>
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	2b0f      	cmp	r3, #15
 8013b18:	d81a      	bhi.n	8013b50 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8013b1a:	f107 0314 	add.w	r3, r7, #20
 8013b1e:	4a3a      	ldr	r2, [pc, #232]	; (8013c08 <PrepareFrame+0x22c>)
 8013b20:	4619      	mov	r1, r3
 8013b22:	200f      	movs	r0, #15
 8013b24:	f002 fb82 	bl	801622c <LoRaMacCommandsSerializeCmds>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d001      	beq.n	8013b32 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b2e:	2313      	movs	r3, #19
 8013b30:	e05e      	b.n	8013bf0 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	f003 030f 	and.w	r3, r3, #15
 8013b38:	b2d9      	uxtb	r1, r3
 8013b3a:	68ba      	ldr	r2, [r7, #8]
 8013b3c:	7813      	ldrb	r3, [r2, #0]
 8013b3e:	f361 0303 	bfi	r3, r1, #0, #4
 8013b42:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013b44:	68bb      	ldr	r3, [r7, #8]
 8013b46:	781a      	ldrb	r2, [r3, #0]
 8013b48:	4b2b      	ldr	r3, [pc, #172]	; (8013bf8 <PrepareFrame+0x21c>)
 8013b4a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8013b4e:	e04b      	b.n	8013be8 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013b50:	4b29      	ldr	r3, [pc, #164]	; (8013bf8 <PrepareFrame+0x21c>)
 8013b52:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d010      	beq.n	8013b7c <PrepareFrame+0x1a0>
 8013b5a:	697b      	ldr	r3, [r7, #20]
 8013b5c:	2b0f      	cmp	r3, #15
 8013b5e:	d90d      	bls.n	8013b7c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013b60:	7ffb      	ldrb	r3, [r7, #31]
 8013b62:	f107 0114 	add.w	r1, r7, #20
 8013b66:	4a29      	ldr	r2, [pc, #164]	; (8013c0c <PrepareFrame+0x230>)
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f002 fb5f 	bl	801622c <LoRaMacCommandsSerializeCmds>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d001      	beq.n	8013b78 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b74:	2313      	movs	r3, #19
 8013b76:	e03b      	b.n	8013bf0 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8013b78:	230a      	movs	r3, #10
 8013b7a:	e039      	b.n	8013bf0 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013b7c:	7ffb      	ldrb	r3, [r7, #31]
 8013b7e:	f107 0114 	add.w	r1, r7, #20
 8013b82:	4a22      	ldr	r2, [pc, #136]	; (8013c0c <PrepareFrame+0x230>)
 8013b84:	4618      	mov	r0, r3
 8013b86:	f002 fb51 	bl	801622c <LoRaMacCommandsSerializeCmds>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d001      	beq.n	8013b94 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b90:	2313      	movs	r3, #19
 8013b92:	e02d      	b.n	8013bf0 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8013b94:	4b18      	ldr	r3, [pc, #96]	; (8013bf8 <PrepareFrame+0x21c>)
 8013b96:	2200      	movs	r2, #0
 8013b98:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8013b9c:	4b16      	ldr	r3, [pc, #88]	; (8013bf8 <PrepareFrame+0x21c>)
 8013b9e:	4a1b      	ldr	r2, [pc, #108]	; (8013c0c <PrepareFrame+0x230>)
 8013ba0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	b2da      	uxtb	r2, r3
 8013ba8:	4b13      	ldr	r3, [pc, #76]	; (8013bf8 <PrepareFrame+0x21c>)
 8013baa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8013bae:	e01b      	b.n	8013be8 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d01a      	beq.n	8013bec <PrepareFrame+0x210>
 8013bb6:	4b10      	ldr	r3, [pc, #64]	; (8013bf8 <PrepareFrame+0x21c>)
 8013bb8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d015      	beq.n	8013bec <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8013bc0:	4813      	ldr	r0, [pc, #76]	; (8013c10 <PrepareFrame+0x234>)
 8013bc2:	4b0d      	ldr	r3, [pc, #52]	; (8013bf8 <PrepareFrame+0x21c>)
 8013bc4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013bc8:	b29b      	uxth	r3, r3
 8013bca:	461a      	mov	r2, r3
 8013bcc:	6839      	ldr	r1, [r7, #0]
 8013bce:	f007 fdd8 	bl	801b782 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8013bd2:	4b09      	ldr	r3, [pc, #36]	; (8013bf8 <PrepareFrame+0x21c>)
 8013bd4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013bd8:	b29b      	uxth	r3, r3
 8013bda:	3301      	adds	r3, #1
 8013bdc:	b29a      	uxth	r2, r3
 8013bde:	4b06      	ldr	r3, [pc, #24]	; (8013bf8 <PrepareFrame+0x21c>)
 8013be0:	801a      	strh	r2, [r3, #0]
            }
            break;
 8013be2:	e003      	b.n	8013bec <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013be4:	2302      	movs	r3, #2
 8013be6:	e003      	b.n	8013bf0 <PrepareFrame+0x214>
            break;
 8013be8:	bf00      	nop
 8013bea:	e000      	b.n	8013bee <PrepareFrame+0x212>
            break;
 8013bec:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8013bee:	2300      	movs	r3, #0
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3720      	adds	r7, #32
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}
 8013bf8:	20000738 	.word	0x20000738
 8013bfc:	20000870 	.word	0x20000870
 8013c00:	2000073a 	.word	0x2000073a
 8013c04:	20000c54 	.word	0x20000c54
 8013c08:	20000850 	.word	0x20000850
 8013c0c:	20000bd4 	.word	0x20000bd4
 8013c10:	2000073b 	.word	0x2000073b

08013c14 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b08a      	sub	sp, #40	; 0x28
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c1e:	2303      	movs	r3, #3
 8013c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8013c24:	2300      	movs	r3, #0
 8013c26:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8013c28:	79fb      	ldrb	r3, [r7, #7]
 8013c2a:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013c2c:	4b4b      	ldr	r3, [pc, #300]	; (8013d5c <SendFrameOnChannel+0x148>)
 8013c2e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013c32:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013c34:	4b49      	ldr	r3, [pc, #292]	; (8013d5c <SendFrameOnChannel+0x148>)
 8013c36:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013c3a:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013c3c:	4b47      	ldr	r3, [pc, #284]	; (8013d5c <SendFrameOnChannel+0x148>)
 8013c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c42:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013c44:	4b45      	ldr	r3, [pc, #276]	; (8013d5c <SendFrameOnChannel+0x148>)
 8013c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c4a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8013c4c:	4b44      	ldr	r3, [pc, #272]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013c4e:	881b      	ldrh	r3, [r3, #0]
 8013c50:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013c52:	4b42      	ldr	r3, [pc, #264]	; (8013d5c <SendFrameOnChannel+0x148>)
 8013c54:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8013c58:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8013c5a:	4b40      	ldr	r3, [pc, #256]	; (8013d5c <SendFrameOnChannel+0x148>)
 8013c5c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013c60:	f107 020f 	add.w	r2, r7, #15
 8013c64:	f107 0110 	add.w	r1, r7, #16
 8013c68:	4b3e      	ldr	r3, [pc, #248]	; (8013d64 <SendFrameOnChannel+0x150>)
 8013c6a:	f004 f86b 	bl	8017d44 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013c6e:	4b3c      	ldr	r3, [pc, #240]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013c70:	2201      	movs	r2, #1
 8013c72:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013c76:	4b39      	ldr	r3, [pc, #228]	; (8013d5c <SendFrameOnChannel+0x148>)
 8013c78:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013c7c:	b2da      	uxtb	r2, r3
 8013c7e:	4b38      	ldr	r3, [pc, #224]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013c80:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8013c84:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013c88:	4b35      	ldr	r3, [pc, #212]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013c8a:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8013c8e:	79fb      	ldrb	r3, [r7, #7]
 8013c90:	4a33      	ldr	r2, [pc, #204]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013c92:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013c96:	4b32      	ldr	r3, [pc, #200]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013c98:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8013c9c:	4a30      	ldr	r2, [pc, #192]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013c9e:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013ca2:	4b2f      	ldr	r3, [pc, #188]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013ca4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8013ca8:	4a2d      	ldr	r2, [pc, #180]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013caa:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8013cae:	f001 fff6 	bl	8015c9e <LoRaMacClassBIsBeaconModeActive>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d00b      	beq.n	8013cd0 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8013cb8:	4b29      	ldr	r3, [pc, #164]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013cba:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f002 f858 	bl	8015d74 <LoRaMacClassBIsUplinkCollision>
 8013cc4:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8013cc6:	6a3b      	ldr	r3, [r7, #32]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d001      	beq.n	8013cd0 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8013ccc:	2310      	movs	r3, #16
 8013cce:	e040      	b.n	8013d52 <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013cd0:	4b22      	ldr	r3, [pc, #136]	; (8013d5c <SendFrameOnChannel+0x148>)
 8013cd2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013cd6:	2b01      	cmp	r3, #1
 8013cd8:	d101      	bne.n	8013cde <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8013cda:	f002 f855 	bl	8015d88 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8013cde:	f001 ffef 	bl	8015cc0 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8013ce2:	4b1e      	ldr	r3, [pc, #120]	; (8013d5c <SendFrameOnChannel+0x148>)
 8013ce4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013ce8:	b2db      	uxtb	r3, r3
 8013cea:	4a1d      	ldr	r2, [pc, #116]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013cec:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 8013cf0:	4611      	mov	r1, r2
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f7ff fc2a 	bl	801354c <SecureFrame>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8013cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d002      	beq.n	8013d0c <SendFrameOnChannel+0xf8>
    {
        return status;
 8013d06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d0a:	e022      	b.n	8013d52 <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013d0c:	4b14      	ldr	r3, [pc, #80]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013d0e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013d12:	f043 0302 	orr.w	r3, r3, #2
 8013d16:	4a12      	ldr	r2, [pc, #72]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013d18:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8013d1c:	4b10      	ldr	r3, [pc, #64]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013d1e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013d22:	3301      	adds	r3, #1
 8013d24:	b2da      	uxtb	r2, r3
 8013d26:	4b0e      	ldr	r3, [pc, #56]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013d28:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8013d2c:	4b0c      	ldr	r3, [pc, #48]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013d2e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013d32:	4b0b      	ldr	r3, [pc, #44]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013d34:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8013d38:	4b09      	ldr	r3, [pc, #36]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8013d40:	4b09      	ldr	r3, [pc, #36]	; (8013d68 <SendFrameOnChannel+0x154>)
 8013d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d44:	4a06      	ldr	r2, [pc, #24]	; (8013d60 <SendFrameOnChannel+0x14c>)
 8013d46:	8812      	ldrh	r2, [r2, #0]
 8013d48:	b2d2      	uxtb	r2, r2
 8013d4a:	4611      	mov	r1, r2
 8013d4c:	4807      	ldr	r0, [pc, #28]	; (8013d6c <SendFrameOnChannel+0x158>)
 8013d4e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8013d50:	2300      	movs	r3, #0
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	3728      	adds	r7, #40	; 0x28
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}
 8013d5a:	bf00      	nop
 8013d5c:	20000c54 	.word	0x20000c54
 8013d60:	20000738 	.word	0x20000738
 8013d64:	20000b54 	.word	0x20000b54
 8013d68:	08021f7c 	.word	0x08021f7c
 8013d6c:	2000073a 	.word	0x2000073a

08013d70 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b082      	sub	sp, #8
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	4603      	mov	r3, r0
 8013d78:	6039      	str	r1, [r7, #0]
 8013d7a:	80fb      	strh	r3, [r7, #6]
 8013d7c:	4613      	mov	r3, r2
 8013d7e:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8013d80:	4b09      	ldr	r3, [pc, #36]	; (8013da8 <SetTxContinuousWave+0x38>)
 8013d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d84:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013d88:	88fa      	ldrh	r2, [r7, #6]
 8013d8a:	6838      	ldr	r0, [r7, #0]
 8013d8c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013d8e:	4b07      	ldr	r3, [pc, #28]	; (8013dac <SetTxContinuousWave+0x3c>)
 8013d90:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013d94:	f043 0302 	orr.w	r3, r3, #2
 8013d98:	4a04      	ldr	r2, [pc, #16]	; (8013dac <SetTxContinuousWave+0x3c>)
 8013d9a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013d9e:	2300      	movs	r3, #0
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3708      	adds	r7, #8
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}
 8013da8:	08021f7c 	.word	0x08021f7c
 8013dac:	20000738 	.word	0x20000738

08013db0 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b082      	sub	sp, #8
 8013db4:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8013db6:	2300      	movs	r3, #0
 8013db8:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8013dba:	4b49      	ldr	r3, [pc, #292]	; (8013ee0 <RestoreNvmData+0x130>)
 8013dbc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013dc0:	2b01      	cmp	r3, #1
 8013dc2:	d001      	beq.n	8013dc8 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	e087      	b.n	8013ed8 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8013dc8:	2124      	movs	r1, #36	; 0x24
 8013dca:	4846      	ldr	r0, [pc, #280]	; (8013ee4 <RestoreNvmData+0x134>)
 8013dcc:	f007 fd2e 	bl	801b82c <Crc32>
 8013dd0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8013dd2:	4b44      	ldr	r3, [pc, #272]	; (8013ee4 <RestoreNvmData+0x134>)
 8013dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dd6:	687a      	ldr	r2, [r7, #4]
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d001      	beq.n	8013de0 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013ddc:	2317      	movs	r3, #23
 8013dde:	e07b      	b.n	8013ed8 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8013de0:	211c      	movs	r1, #28
 8013de2:	4841      	ldr	r0, [pc, #260]	; (8013ee8 <RestoreNvmData+0x138>)
 8013de4:	f007 fd22 	bl	801b82c <Crc32>
 8013de8:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8013dea:	4b3e      	ldr	r3, [pc, #248]	; (8013ee4 <RestoreNvmData+0x134>)
 8013dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013dee:	687a      	ldr	r2, [r7, #4]
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d001      	beq.n	8013df8 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013df4:	2317      	movs	r3, #23
 8013df6:	e06f      	b.n	8013ed8 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8013df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013dfc:	483b      	ldr	r0, [pc, #236]	; (8013eec <RestoreNvmData+0x13c>)
 8013dfe:	f007 fd15 	bl	801b82c <Crc32>
 8013e02:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8013e04:	4b37      	ldr	r3, [pc, #220]	; (8013ee4 <RestoreNvmData+0x134>)
 8013e06:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8013e0a:	687a      	ldr	r2, [r7, #4]
 8013e0c:	429a      	cmp	r2, r3
 8013e0e:	d001      	beq.n	8013e14 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013e10:	2317      	movs	r3, #23
 8013e12:	e061      	b.n	8013ed8 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8013e14:	21d4      	movs	r1, #212	; 0xd4
 8013e16:	4836      	ldr	r0, [pc, #216]	; (8013ef0 <RestoreNvmData+0x140>)
 8013e18:	f007 fd08 	bl	801b82c <Crc32>
 8013e1c:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8013e1e:	4b31      	ldr	r3, [pc, #196]	; (8013ee4 <RestoreNvmData+0x134>)
 8013e20:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013e24:	687a      	ldr	r2, [r7, #4]
 8013e26:	429a      	cmp	r2, r3
 8013e28:	d001      	beq.n	8013e2e <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013e2a:	2317      	movs	r3, #23
 8013e2c:	e054      	b.n	8013ed8 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8013e2e:	2110      	movs	r1, #16
 8013e30:	4830      	ldr	r0, [pc, #192]	; (8013ef4 <RestoreNvmData+0x144>)
 8013e32:	f007 fcfb 	bl	801b82c <Crc32>
 8013e36:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8013e38:	4b2a      	ldr	r3, [pc, #168]	; (8013ee4 <RestoreNvmData+0x134>)
 8013e3a:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d001      	beq.n	8013e48 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013e44:	2317      	movs	r3, #23
 8013e46:	e047      	b.n	8013ed8 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8013e48:	f44f 715e 	mov.w	r1, #888	; 0x378
 8013e4c:	482a      	ldr	r0, [pc, #168]	; (8013ef8 <RestoreNvmData+0x148>)
 8013e4e:	f007 fced 	bl	801b82c <Crc32>
 8013e52:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8013e54:	4b23      	ldr	r3, [pc, #140]	; (8013ee4 <RestoreNvmData+0x134>)
 8013e56:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8013e5a:	687a      	ldr	r2, [r7, #4]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d001      	beq.n	8013e64 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013e60:	2317      	movs	r3, #23
 8013e62:	e039      	b.n	8013ed8 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8013e64:	2114      	movs	r1, #20
 8013e66:	4825      	ldr	r0, [pc, #148]	; (8013efc <RestoreNvmData+0x14c>)
 8013e68:	f007 fce0 	bl	801b82c <Crc32>
 8013e6c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8013e6e:	4b1d      	ldr	r3, [pc, #116]	; (8013ee4 <RestoreNvmData+0x134>)
 8013e70:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 8013e74:	687a      	ldr	r2, [r7, #4]
 8013e76:	429a      	cmp	r2, r3
 8013e78:	d001      	beq.n	8013e7e <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013e7a:	2317      	movs	r3, #23
 8013e7c:	e02c      	b.n	8013ed8 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8013e7e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8013e82:	4918      	ldr	r1, [pc, #96]	; (8013ee4 <RestoreNvmData+0x134>)
 8013e84:	481e      	ldr	r0, [pc, #120]	; (8013f00 <RestoreNvmData+0x150>)
 8013e86:	f007 fc7c 	bl	801b782 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8013e8a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8013e8e:	2100      	movs	r1, #0
 8013e90:	4814      	ldr	r0, [pc, #80]	; (8013ee4 <RestoreNvmData+0x134>)
 8013e92:	f007 fcb1 	bl	801b7f8 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8013e96:	4b12      	ldr	r3, [pc, #72]	; (8013ee0 <RestoreNvmData+0x130>)
 8013e98:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8013e9c:	4b10      	ldr	r3, [pc, #64]	; (8013ee0 <RestoreNvmData+0x130>)
 8013e9e:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8013ea2:	4b17      	ldr	r3, [pc, #92]	; (8013f00 <RestoreNvmData+0x150>)
 8013ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ea6:	4a0e      	ldr	r2, [pc, #56]	; (8013ee0 <RestoreNvmData+0x130>)
 8013ea8:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013eac:	4b14      	ldr	r3, [pc, #80]	; (8013f00 <RestoreNvmData+0x150>)
 8013eae:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8013eb2:	4b0b      	ldr	r3, [pc, #44]	; (8013ee0 <RestoreNvmData+0x130>)
 8013eb4:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013eb8:	4b09      	ldr	r3, [pc, #36]	; (8013ee0 <RestoreNvmData+0x130>)
 8013eba:	2201      	movs	r2, #1
 8013ebc:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013ec0:	4b07      	ldr	r3, [pc, #28]	; (8013ee0 <RestoreNvmData+0x130>)
 8013ec2:	2202      	movs	r2, #2
 8013ec4:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013ec8:	4b0e      	ldr	r3, [pc, #56]	; (8013f04 <RestoreNvmData+0x154>)
 8013eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ecc:	4a0c      	ldr	r2, [pc, #48]	; (8013f00 <RestoreNvmData+0x150>)
 8013ece:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8013ed2:	4610      	mov	r0, r2
 8013ed4:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8013ed6:	2300      	movs	r3, #0
}
 8013ed8:	4618      	mov	r0, r3
 8013eda:	3708      	adds	r7, #8
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	20000738 	.word	0x20000738
 8013ee4:	20001220 	.word	0x20001220
 8013ee8:	20001248 	.word	0x20001248
 8013eec:	20001268 	.word	0x20001268
 8013ef0:	2000136c 	.word	0x2000136c
 8013ef4:	20001444 	.word	0x20001444
 8013ef8:	20001458 	.word	0x20001458
 8013efc:	200017d4 	.word	0x200017d4
 8013f00:	20000c54 	.word	0x20000c54
 8013f04:	08021f7c 	.word	0x08021f7c

08013f08 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8013f08:	b480      	push	{r7}
 8013f0a:	b083      	sub	sp, #12
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d002      	beq.n	8013f1e <DetermineFrameType+0x16>
 8013f18:	683b      	ldr	r3, [r7, #0]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d101      	bne.n	8013f22 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013f1e:	2303      	movs	r3, #3
 8013f20:	e03b      	b.n	8013f9a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	7b1b      	ldrb	r3, [r3, #12]
 8013f26:	f003 030f 	and.w	r3, r3, #15
 8013f2a:	b2db      	uxtb	r3, r3
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d008      	beq.n	8013f42 <DetermineFrameType+0x3a>
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d003      	beq.n	8013f42 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8013f3a:	683b      	ldr	r3, [r7, #0]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	701a      	strb	r2, [r3, #0]
 8013f40:	e02a      	b.n	8013f98 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d103      	bne.n	8013f54 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	2201      	movs	r2, #1
 8013f50:	701a      	strb	r2, [r3, #0]
 8013f52:	e021      	b.n	8013f98 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	7b1b      	ldrb	r3, [r3, #12]
 8013f58:	f003 030f 	and.w	r3, r3, #15
 8013f5c:	b2db      	uxtb	r3, r3
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d108      	bne.n	8013f74 <DetermineFrameType+0x6c>
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d103      	bne.n	8013f74 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	2202      	movs	r2, #2
 8013f70:	701a      	strb	r2, [r3, #0]
 8013f72:	e011      	b.n	8013f98 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	7b1b      	ldrb	r3, [r3, #12]
 8013f78:	f003 030f 	and.w	r3, r3, #15
 8013f7c:	b2db      	uxtb	r3, r3
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d108      	bne.n	8013f94 <DetermineFrameType+0x8c>
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d003      	beq.n	8013f94 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013f8c:	683b      	ldr	r3, [r7, #0]
 8013f8e:	2203      	movs	r2, #3
 8013f90:	701a      	strb	r2, [r3, #0]
 8013f92:	e001      	b.n	8013f98 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8013f94:	2318      	movs	r3, #24
 8013f96:	e000      	b.n	8013f9a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8013f98:	2300      	movs	r3, #0
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	370c      	adds	r7, #12
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bc80      	pop	{r7}
 8013fa2:	4770      	bx	lr

08013fa4 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8013fa4:	b480      	push	{r7}
 8013fa6:	b083      	sub	sp, #12
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	4603      	mov	r3, r0
 8013fac:	460a      	mov	r2, r1
 8013fae:	71fb      	strb	r3, [r7, #7]
 8013fb0:	4613      	mov	r3, r2
 8013fb2:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8013fb4:	79fa      	ldrb	r2, [r7, #7]
 8013fb6:	79bb      	ldrb	r3, [r7, #6]
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	d301      	bcc.n	8013fc0 <CheckRetrans+0x1c>
    {
        return true;
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	e000      	b.n	8013fc2 <CheckRetrans+0x1e>
    }
    return false;
 8013fc0:	2300      	movs	r3, #0
}
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	370c      	adds	r7, #12
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bc80      	pop	{r7}
 8013fca:	4770      	bx	lr

08013fcc <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8013fd0:	4b12      	ldr	r3, [pc, #72]	; (801401c <CheckRetransUnconfirmedUplink+0x50>)
 8013fd2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013fd6:	4a12      	ldr	r2, [pc, #72]	; (8014020 <CheckRetransUnconfirmedUplink+0x54>)
 8013fd8:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8013fdc:	4611      	mov	r1, r2
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7ff ffe0 	bl	8013fa4 <CheckRetrans>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d001      	beq.n	8013fee <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8013fea:	2301      	movs	r3, #1
 8013fec:	e014      	b.n	8014018 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013fee:	4b0b      	ldr	r3, [pc, #44]	; (801401c <CheckRetransUnconfirmedUplink+0x50>)
 8013ff0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013ff4:	f003 0302 	and.w	r3, r3, #2
 8013ff8:	b2db      	uxtb	r3, r3
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d00b      	beq.n	8014016 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8013ffe:	4b07      	ldr	r3, [pc, #28]	; (801401c <CheckRetransUnconfirmedUplink+0x50>)
 8014000:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8014004:	2b00      	cmp	r3, #0
 8014006:	d004      	beq.n	8014012 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8014008:	4b04      	ldr	r3, [pc, #16]	; (801401c <CheckRetransUnconfirmedUplink+0x50>)
 801400a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801400e:	2b01      	cmp	r3, #1
 8014010:	d101      	bne.n	8014016 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8014012:	2301      	movs	r3, #1
 8014014:	e000      	b.n	8014018 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8014016:	2300      	movs	r3, #0
}
 8014018:	4618      	mov	r0, r3
 801401a:	bd80      	pop	{r7, pc}
 801401c:	20000738 	.word	0x20000738
 8014020:	20000c54 	.word	0x20000c54

08014024 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8014024:	b580      	push	{r7, lr}
 8014026:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8014028:	4b10      	ldr	r3, [pc, #64]	; (801406c <CheckRetransConfirmedUplink+0x48>)
 801402a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801402e:	4a10      	ldr	r2, [pc, #64]	; (8014070 <CheckRetransConfirmedUplink+0x4c>)
 8014030:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8014034:	4611      	mov	r1, r2
 8014036:	4618      	mov	r0, r3
 8014038:	f7ff ffb4 	bl	8013fa4 <CheckRetrans>
 801403c:	4603      	mov	r3, r0
 801403e:	2b00      	cmp	r3, #0
 8014040:	d001      	beq.n	8014046 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8014042:	2301      	movs	r3, #1
 8014044:	e00f      	b.n	8014066 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8014046:	4b09      	ldr	r3, [pc, #36]	; (801406c <CheckRetransConfirmedUplink+0x48>)
 8014048:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801404c:	f003 0302 	and.w	r3, r3, #2
 8014050:	b2db      	uxtb	r3, r3
 8014052:	2b00      	cmp	r3, #0
 8014054:	d006      	beq.n	8014064 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8014056:	4b05      	ldr	r3, [pc, #20]	; (801406c <CheckRetransConfirmedUplink+0x48>)
 8014058:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 801405c:	2b00      	cmp	r3, #0
 801405e:	d001      	beq.n	8014064 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8014060:	2301      	movs	r3, #1
 8014062:	e000      	b.n	8014066 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8014064:	2300      	movs	r3, #0
}
 8014066:	4618      	mov	r0, r3
 8014068:	bd80      	pop	{r7, pc}
 801406a:	bf00      	nop
 801406c:	20000738 	.word	0x20000738
 8014070:	20000c54 	.word	0x20000c54

08014074 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8014074:	b480      	push	{r7}
 8014076:	b083      	sub	sp, #12
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014082:	d002      	beq.n	801408a <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	3301      	adds	r3, #1
 8014088:	607b      	str	r3, [r7, #4]
    }
    return counter;
 801408a:	687b      	ldr	r3, [r7, #4]
}
 801408c:	4618      	mov	r0, r3
 801408e:	370c      	adds	r7, #12
 8014090:	46bd      	mov	sp, r7
 8014092:	bc80      	pop	{r7}
 8014094:	4770      	bx	lr
	...

08014098 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8014098:	b580      	push	{r7, lr}
 801409a:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801409c:	4b1a      	ldr	r3, [pc, #104]	; (8014108 <StopRetransmission+0x70>)
 801409e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80140a2:	f003 0302 	and.w	r3, r3, #2
 80140a6:	b2db      	uxtb	r3, r3
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d009      	beq.n	80140c0 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80140ac:	4b16      	ldr	r3, [pc, #88]	; (8014108 <StopRetransmission+0x70>)
 80140ae:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d011      	beq.n	80140da <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80140b6:	4b14      	ldr	r3, [pc, #80]	; (8014108 <StopRetransmission+0x70>)
 80140b8:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80140bc:	2b01      	cmp	r3, #1
 80140be:	d00c      	beq.n	80140da <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80140c0:	4b12      	ldr	r3, [pc, #72]	; (801410c <StopRetransmission+0x74>)
 80140c2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d007      	beq.n	80140da <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80140ca:	4b10      	ldr	r3, [pc, #64]	; (801410c <StopRetransmission+0x74>)
 80140cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140ce:	4618      	mov	r0, r3
 80140d0:	f7ff ffd0 	bl	8014074 <IncreaseAdrAckCounter>
 80140d4:	4603      	mov	r3, r0
 80140d6:	4a0d      	ldr	r2, [pc, #52]	; (801410c <StopRetransmission+0x74>)
 80140d8:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80140da:	4b0b      	ldr	r3, [pc, #44]	; (8014108 <StopRetransmission+0x70>)
 80140dc:	2200      	movs	r2, #0
 80140de:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 80140e2:	4b09      	ldr	r3, [pc, #36]	; (8014108 <StopRetransmission+0x70>)
 80140e4:	2200      	movs	r2, #0
 80140e6:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 80140ea:	4b07      	ldr	r3, [pc, #28]	; (8014108 <StopRetransmission+0x70>)
 80140ec:	2200      	movs	r2, #0
 80140ee:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80140f2:	4b05      	ldr	r3, [pc, #20]	; (8014108 <StopRetransmission+0x70>)
 80140f4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80140f8:	f023 0302 	bic.w	r3, r3, #2
 80140fc:	4a02      	ldr	r2, [pc, #8]	; (8014108 <StopRetransmission+0x70>)
 80140fe:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8014102:	2301      	movs	r3, #1
}
 8014104:	4618      	mov	r0, r3
 8014106:	bd80      	pop	{r7, pc}
 8014108:	20000738 	.word	0x20000738
 801410c:	20000c54 	.word	0x20000c54

08014110 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8014110:	b580      	push	{r7, lr}
 8014112:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8014114:	4b08      	ldr	r3, [pc, #32]	; (8014138 <OnMacProcessNotify+0x28>)
 8014116:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801411a:	2b00      	cmp	r3, #0
 801411c:	d00a      	beq.n	8014134 <OnMacProcessNotify+0x24>
 801411e:	4b06      	ldr	r3, [pc, #24]	; (8014138 <OnMacProcessNotify+0x28>)
 8014120:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014124:	695b      	ldr	r3, [r3, #20]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d004      	beq.n	8014134 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801412a:	4b03      	ldr	r3, [pc, #12]	; (8014138 <OnMacProcessNotify+0x28>)
 801412c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014130:	695b      	ldr	r3, [r3, #20]
 8014132:	4798      	blx	r3
    }
}
 8014134:	bf00      	nop
 8014136:	bd80      	pop	{r7, pc}
 8014138:	20000738 	.word	0x20000738

0801413c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
 8014142:	4603      	mov	r3, r0
 8014144:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8014146:	4b0b      	ldr	r3, [pc, #44]	; (8014174 <CallNvmDataChangeCallback+0x38>)
 8014148:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801414c:	2b00      	cmp	r3, #0
 801414e:	d00c      	beq.n	801416a <CallNvmDataChangeCallback+0x2e>
 8014150:	4b08      	ldr	r3, [pc, #32]	; (8014174 <CallNvmDataChangeCallback+0x38>)
 8014152:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014156:	691b      	ldr	r3, [r3, #16]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d006      	beq.n	801416a <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 801415c:	4b05      	ldr	r3, [pc, #20]	; (8014174 <CallNvmDataChangeCallback+0x38>)
 801415e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014162:	691b      	ldr	r3, [r3, #16]
 8014164:	88fa      	ldrh	r2, [r7, #6]
 8014166:	4610      	mov	r0, r2
 8014168:	4798      	blx	r3
    }
}
 801416a:	bf00      	nop
 801416c:	3708      	adds	r7, #8
 801416e:	46bd      	mov	sp, r7
 8014170:	bd80      	pop	{r7, pc}
 8014172:	bf00      	nop
 8014174:	20000738 	.word	0x20000738

08014178 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8014178:	b480      	push	{r7}
 801417a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801417c:	4b0b      	ldr	r3, [pc, #44]	; (80141ac <IsRequestPending+0x34>)
 801417e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8014182:	f003 0304 	and.w	r3, r3, #4
 8014186:	b2db      	uxtb	r3, r3
 8014188:	2b00      	cmp	r3, #0
 801418a:	d107      	bne.n	801419c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 801418c:	4b07      	ldr	r3, [pc, #28]	; (80141ac <IsRequestPending+0x34>)
 801418e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8014192:	f003 0301 	and.w	r3, r3, #1
 8014196:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8014198:	2b00      	cmp	r3, #0
 801419a:	d001      	beq.n	80141a0 <IsRequestPending+0x28>
    {
        return 1;
 801419c:	2301      	movs	r3, #1
 801419e:	e000      	b.n	80141a2 <IsRequestPending+0x2a>
    }
    return 0;
 80141a0:	2300      	movs	r3, #0
}
 80141a2:	4618      	mov	r0, r3
 80141a4:	46bd      	mov	sp, r7
 80141a6:	bc80      	pop	{r7}
 80141a8:	4770      	bx	lr
 80141aa:	bf00      	nop
 80141ac:	20000738 	.word	0x20000738

080141b0 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80141b0:	b590      	push	{r4, r7, lr}
 80141b2:	b091      	sub	sp, #68	; 0x44
 80141b4:	af02      	add	r7, sp, #8
 80141b6:	6178      	str	r0, [r7, #20]
 80141b8:	6139      	str	r1, [r7, #16]
 80141ba:	4613      	mov	r3, r2
 80141bc:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80141be:	697b      	ldr	r3, [r7, #20]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d002      	beq.n	80141ca <LoRaMacInitialization+0x1a>
 80141c4:	693b      	ldr	r3, [r7, #16]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d101      	bne.n	80141ce <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80141ca:	2303      	movs	r3, #3
 80141cc:	e27a      	b.n	80146c4 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80141ce:	697b      	ldr	r3, [r7, #20]
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d00b      	beq.n	80141ee <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80141d6:	697b      	ldr	r3, [r7, #20]
 80141d8:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d007      	beq.n	80141ee <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80141de:	697b      	ldr	r3, [r7, #20]
 80141e0:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d003      	beq.n	80141ee <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80141e6:	697b      	ldr	r3, [r7, #20]
 80141e8:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d101      	bne.n	80141f2 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80141ee:	2303      	movs	r3, #3
 80141f0:	e268      	b.n	80146c4 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80141f2:	7bfb      	ldrb	r3, [r7, #15]
 80141f4:	4618      	mov	r0, r3
 80141f6:	f003 fcaa 	bl	8017b4e <RegionIsActive>
 80141fa:	4603      	mov	r3, r0
 80141fc:	f083 0301 	eor.w	r3, r3, #1
 8014200:	b2db      	uxtb	r3, r3
 8014202:	2b00      	cmp	r3, #0
 8014204:	d001      	beq.n	801420a <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014206:	2309      	movs	r3, #9
 8014208:	e25c      	b.n	80146c4 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801420a:	6978      	ldr	r0, [r7, #20]
 801420c:	f002 f930 	bl	8016470 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8014210:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8014214:	2100      	movs	r1, #0
 8014216:	48c7      	ldr	r0, [pc, #796]	; (8014534 <LoRaMacInitialization+0x384>)
 8014218:	f007 faee 	bl	801b7f8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 801421c:	f240 521c 	movw	r2, #1308	; 0x51c
 8014220:	2100      	movs	r1, #0
 8014222:	48c5      	ldr	r0, [pc, #788]	; (8014538 <LoRaMacInitialization+0x388>)
 8014224:	f007 fae8 	bl	801b7f8 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8014228:	4ac2      	ldr	r2, [pc, #776]	; (8014534 <LoRaMacInitialization+0x384>)
 801422a:	7bfb      	ldrb	r3, [r7, #15]
 801422c:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8014230:	4bc0      	ldr	r3, [pc, #768]	; (8014534 <LoRaMacInitialization+0x384>)
 8014232:	2200      	movs	r2, #0
 8014234:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8014238:	4bbe      	ldr	r3, [pc, #760]	; (8014534 <LoRaMacInitialization+0x384>)
 801423a:	2200      	movs	r2, #0
 801423c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8014240:	4bbc      	ldr	r3, [pc, #752]	; (8014534 <LoRaMacInitialization+0x384>)
 8014242:	4abe      	ldr	r2, [pc, #760]	; (801453c <LoRaMacInitialization+0x38c>)
 8014244:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8014248:	2300      	movs	r3, #0
 801424a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801424e:	4bbc      	ldr	r3, [pc, #752]	; (8014540 <LoRaMacInitialization+0x390>)
 8014250:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8014252:	4bbc      	ldr	r3, [pc, #752]	; (8014544 <LoRaMacInitialization+0x394>)
 8014254:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8014256:	4bbc      	ldr	r3, [pc, #752]	; (8014548 <LoRaMacInitialization+0x398>)
 8014258:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801425a:	4bb6      	ldr	r3, [pc, #728]	; (8014534 <LoRaMacInitialization+0x384>)
 801425c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014260:	f107 021c 	add.w	r2, r7, #28
 8014264:	4611      	mov	r1, r2
 8014266:	4618      	mov	r0, r3
 8014268:	f003 fcbe 	bl	8017be8 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 801426c:	230f      	movs	r3, #15
 801426e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014272:	4bb0      	ldr	r3, [pc, #704]	; (8014534 <LoRaMacInitialization+0x384>)
 8014274:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014278:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801427c:	4611      	mov	r1, r2
 801427e:	4618      	mov	r0, r3
 8014280:	f003 fc7a 	bl	8017b78 <RegionGetPhyParam>
 8014284:	4603      	mov	r3, r0
 8014286:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8014288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801428a:	2b00      	cmp	r3, #0
 801428c:	bf14      	ite	ne
 801428e:	2301      	movne	r3, #1
 8014290:	2300      	moveq	r3, #0
 8014292:	b2da      	uxtb	r2, r3
 8014294:	4ba7      	ldr	r3, [pc, #668]	; (8014534 <LoRaMacInitialization+0x384>)
 8014296:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801429a:	230a      	movs	r3, #10
 801429c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80142a0:	4ba4      	ldr	r3, [pc, #656]	; (8014534 <LoRaMacInitialization+0x384>)
 80142a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80142a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80142aa:	4611      	mov	r1, r2
 80142ac:	4618      	mov	r0, r3
 80142ae:	f003 fc63 	bl	8017b78 <RegionGetPhyParam>
 80142b2:	4603      	mov	r3, r0
 80142b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80142b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b8:	b25a      	sxtb	r2, r3
 80142ba:	4b9e      	ldr	r3, [pc, #632]	; (8014534 <LoRaMacInitialization+0x384>)
 80142bc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80142c0:	2306      	movs	r3, #6
 80142c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80142c6:	4b9b      	ldr	r3, [pc, #620]	; (8014534 <LoRaMacInitialization+0x384>)
 80142c8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80142cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80142d0:	4611      	mov	r1, r2
 80142d2:	4618      	mov	r0, r3
 80142d4:	f003 fc50 	bl	8017b78 <RegionGetPhyParam>
 80142d8:	4603      	mov	r3, r0
 80142da:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80142dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142de:	b25a      	sxtb	r2, r3
 80142e0:	4b94      	ldr	r3, [pc, #592]	; (8014534 <LoRaMacInitialization+0x384>)
 80142e2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80142e6:	2310      	movs	r3, #16
 80142e8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80142ec:	4b91      	ldr	r3, [pc, #580]	; (8014534 <LoRaMacInitialization+0x384>)
 80142ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80142f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80142f6:	4611      	mov	r1, r2
 80142f8:	4618      	mov	r0, r3
 80142fa:	f003 fc3d 	bl	8017b78 <RegionGetPhyParam>
 80142fe:	4603      	mov	r3, r0
 8014300:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8014302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014304:	4a8b      	ldr	r2, [pc, #556]	; (8014534 <LoRaMacInitialization+0x384>)
 8014306:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 801430a:	2311      	movs	r3, #17
 801430c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014310:	4b88      	ldr	r3, [pc, #544]	; (8014534 <LoRaMacInitialization+0x384>)
 8014312:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014316:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801431a:	4611      	mov	r1, r2
 801431c:	4618      	mov	r0, r3
 801431e:	f003 fc2b 	bl	8017b78 <RegionGetPhyParam>
 8014322:	4603      	mov	r3, r0
 8014324:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8014326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014328:	4a82      	ldr	r2, [pc, #520]	; (8014534 <LoRaMacInitialization+0x384>)
 801432a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801432e:	2312      	movs	r3, #18
 8014330:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014334:	4b7f      	ldr	r3, [pc, #508]	; (8014534 <LoRaMacInitialization+0x384>)
 8014336:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801433a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801433e:	4611      	mov	r1, r2
 8014340:	4618      	mov	r0, r3
 8014342:	f003 fc19 	bl	8017b78 <RegionGetPhyParam>
 8014346:	4603      	mov	r3, r0
 8014348:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801434c:	4a79      	ldr	r2, [pc, #484]	; (8014534 <LoRaMacInitialization+0x384>)
 801434e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8014352:	2313      	movs	r3, #19
 8014354:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014358:	4b76      	ldr	r3, [pc, #472]	; (8014534 <LoRaMacInitialization+0x384>)
 801435a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801435e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014362:	4611      	mov	r1, r2
 8014364:	4618      	mov	r0, r3
 8014366:	f003 fc07 	bl	8017b78 <RegionGetPhyParam>
 801436a:	4603      	mov	r3, r0
 801436c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014370:	4a70      	ldr	r2, [pc, #448]	; (8014534 <LoRaMacInitialization+0x384>)
 8014372:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8014376:	2314      	movs	r3, #20
 8014378:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801437c:	4b6d      	ldr	r3, [pc, #436]	; (8014534 <LoRaMacInitialization+0x384>)
 801437e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014382:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014386:	4611      	mov	r1, r2
 8014388:	4618      	mov	r0, r3
 801438a:	f003 fbf5 	bl	8017b78 <RegionGetPhyParam>
 801438e:	4603      	mov	r3, r0
 8014390:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8014392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014394:	4a67      	ldr	r2, [pc, #412]	; (8014534 <LoRaMacInitialization+0x384>)
 8014396:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 801439a:	2316      	movs	r3, #22
 801439c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143a0:	4b64      	ldr	r3, [pc, #400]	; (8014534 <LoRaMacInitialization+0x384>)
 80143a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80143a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80143aa:	4611      	mov	r1, r2
 80143ac:	4618      	mov	r0, r3
 80143ae:	f003 fbe3 	bl	8017b78 <RegionGetPhyParam>
 80143b2:	4603      	mov	r3, r0
 80143b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80143b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b8:	b2da      	uxtb	r2, r3
 80143ba:	4b5e      	ldr	r3, [pc, #376]	; (8014534 <LoRaMacInitialization+0x384>)
 80143bc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80143c0:	2317      	movs	r3, #23
 80143c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143c6:	4b5b      	ldr	r3, [pc, #364]	; (8014534 <LoRaMacInitialization+0x384>)
 80143c8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80143cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80143d0:	4611      	mov	r1, r2
 80143d2:	4618      	mov	r0, r3
 80143d4:	f003 fbd0 	bl	8017b78 <RegionGetPhyParam>
 80143d8:	4603      	mov	r3, r0
 80143da:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80143dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143de:	4a55      	ldr	r2, [pc, #340]	; (8014534 <LoRaMacInitialization+0x384>)
 80143e0:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80143e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143e6:	4a53      	ldr	r2, [pc, #332]	; (8014534 <LoRaMacInitialization+0x384>)
 80143e8:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80143ec:	2318      	movs	r3, #24
 80143ee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143f2:	4b50      	ldr	r3, [pc, #320]	; (8014534 <LoRaMacInitialization+0x384>)
 80143f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80143f8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80143fc:	4611      	mov	r1, r2
 80143fe:	4618      	mov	r0, r3
 8014400:	f003 fbba 	bl	8017b78 <RegionGetPhyParam>
 8014404:	4603      	mov	r3, r0
 8014406:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8014408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801440a:	b2da      	uxtb	r2, r3
 801440c:	4b49      	ldr	r3, [pc, #292]	; (8014534 <LoRaMacInitialization+0x384>)
 801440e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8014412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014414:	b2da      	uxtb	r2, r3
 8014416:	4b47      	ldr	r3, [pc, #284]	; (8014534 <LoRaMacInitialization+0x384>)
 8014418:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 801441c:	231d      	movs	r3, #29
 801441e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014422:	4b44      	ldr	r3, [pc, #272]	; (8014534 <LoRaMacInitialization+0x384>)
 8014424:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014428:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801442c:	4611      	mov	r1, r2
 801442e:	4618      	mov	r0, r3
 8014430:	f003 fba2 	bl	8017b78 <RegionGetPhyParam>
 8014434:	4603      	mov	r3, r0
 8014436:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8014438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801443a:	b2da      	uxtb	r2, r3
 801443c:	4b3d      	ldr	r3, [pc, #244]	; (8014534 <LoRaMacInitialization+0x384>)
 801443e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8014442:	231e      	movs	r3, #30
 8014444:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014448:	4b3a      	ldr	r3, [pc, #232]	; (8014534 <LoRaMacInitialization+0x384>)
 801444a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801444e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014452:	4611      	mov	r1, r2
 8014454:	4618      	mov	r0, r3
 8014456:	f003 fb8f 	bl	8017b78 <RegionGetPhyParam>
 801445a:	4603      	mov	r3, r0
 801445c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801445e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014460:	b2da      	uxtb	r2, r3
 8014462:	4b34      	ldr	r3, [pc, #208]	; (8014534 <LoRaMacInitialization+0x384>)
 8014464:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8014468:	231f      	movs	r3, #31
 801446a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801446e:	4b31      	ldr	r3, [pc, #196]	; (8014534 <LoRaMacInitialization+0x384>)
 8014470:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014474:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014478:	4611      	mov	r1, r2
 801447a:	4618      	mov	r0, r3
 801447c:	f003 fb7c 	bl	8017b78 <RegionGetPhyParam>
 8014480:	4603      	mov	r3, r0
 8014482:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8014484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014486:	4a2b      	ldr	r2, [pc, #172]	; (8014534 <LoRaMacInitialization+0x384>)
 8014488:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 801448c:	2320      	movs	r3, #32
 801448e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014492:	4b28      	ldr	r3, [pc, #160]	; (8014534 <LoRaMacInitialization+0x384>)
 8014494:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014498:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801449c:	4611      	mov	r1, r2
 801449e:	4618      	mov	r0, r3
 80144a0:	f003 fb6a 	bl	8017b78 <RegionGetPhyParam>
 80144a4:	4603      	mov	r3, r0
 80144a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80144a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144aa:	4a22      	ldr	r2, [pc, #136]	; (8014534 <LoRaMacInitialization+0x384>)
 80144ac:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80144b0:	230b      	movs	r3, #11
 80144b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80144b6:	4b1f      	ldr	r3, [pc, #124]	; (8014534 <LoRaMacInitialization+0x384>)
 80144b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80144bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80144c0:	4611      	mov	r1, r2
 80144c2:	4618      	mov	r0, r3
 80144c4:	f003 fb58 	bl	8017b78 <RegionGetPhyParam>
 80144c8:	4603      	mov	r3, r0
 80144ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 80144cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ce:	b29a      	uxth	r2, r3
 80144d0:	4b18      	ldr	r3, [pc, #96]	; (8014534 <LoRaMacInitialization+0x384>)
 80144d2:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80144d6:	230c      	movs	r3, #12
 80144d8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80144dc:	4b15      	ldr	r3, [pc, #84]	; (8014534 <LoRaMacInitialization+0x384>)
 80144de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80144e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80144e6:	4611      	mov	r1, r2
 80144e8:	4618      	mov	r0, r3
 80144ea:	f003 fb45 	bl	8017b78 <RegionGetPhyParam>
 80144ee:	4603      	mov	r3, r0
 80144f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 80144f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144f4:	b29a      	uxth	r2, r3
 80144f6:	4b0f      	ldr	r3, [pc, #60]	; (8014534 <LoRaMacInitialization+0x384>)
 80144f8:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80144fc:	4b0d      	ldr	r3, [pc, #52]	; (8014534 <LoRaMacInitialization+0x384>)
 80144fe:	2201      	movs	r2, #1
 8014500:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8014504:	4b0b      	ldr	r3, [pc, #44]	; (8014534 <LoRaMacInitialization+0x384>)
 8014506:	220a      	movs	r2, #10
 8014508:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 801450c:	4b09      	ldr	r3, [pc, #36]	; (8014534 <LoRaMacInitialization+0x384>)
 801450e:	2206      	movs	r2, #6
 8014510:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8014514:	4b07      	ldr	r3, [pc, #28]	; (8014534 <LoRaMacInitialization+0x384>)
 8014516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801451a:	4a06      	ldr	r2, [pc, #24]	; (8014534 <LoRaMacInitialization+0x384>)
 801451c:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801451e:	4b05      	ldr	r3, [pc, #20]	; (8014534 <LoRaMacInitialization+0x384>)
 8014520:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8014524:	4b03      	ldr	r3, [pc, #12]	; (8014534 <LoRaMacInitialization+0x384>)
 8014526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 801452a:	4b02      	ldr	r3, [pc, #8]	; (8014534 <LoRaMacInitialization+0x384>)
 801452c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014530:	e00c      	b.n	801454c <LoRaMacInitialization+0x39c>
 8014532:	bf00      	nop
 8014534:	20000c54 	.word	0x20000c54
 8014538:	20000738 	.word	0x20000738
 801453c:	01000400 	.word	0x01000400
 8014540:	20000e78 	.word	0x20000e78
 8014544:	20000e8c 	.word	0x20000e8c
 8014548:	200017ec 	.word	0x200017ec
 801454c:	4a5f      	ldr	r2, [pc, #380]	; (80146cc <LoRaMacInitialization+0x51c>)
 801454e:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8014550:	4b5e      	ldr	r3, [pc, #376]	; (80146cc <LoRaMacInitialization+0x51c>)
 8014552:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014556:	4a5d      	ldr	r2, [pc, #372]	; (80146cc <LoRaMacInitialization+0x51c>)
 8014558:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 801455a:	4b5c      	ldr	r3, [pc, #368]	; (80146cc <LoRaMacInitialization+0x51c>)
 801455c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014560:	4a5a      	ldr	r2, [pc, #360]	; (80146cc <LoRaMacInitialization+0x51c>)
 8014562:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8014564:	4b59      	ldr	r3, [pc, #356]	; (80146cc <LoRaMacInitialization+0x51c>)
 8014566:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801456a:	4a58      	ldr	r2, [pc, #352]	; (80146cc <LoRaMacInitialization+0x51c>)
 801456c:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801456e:	4b57      	ldr	r3, [pc, #348]	; (80146cc <LoRaMacInitialization+0x51c>)
 8014570:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014574:	4a55      	ldr	r2, [pc, #340]	; (80146cc <LoRaMacInitialization+0x51c>)
 8014576:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8014578:	4b54      	ldr	r3, [pc, #336]	; (80146cc <LoRaMacInitialization+0x51c>)
 801457a:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 801457e:	4b53      	ldr	r3, [pc, #332]	; (80146cc <LoRaMacInitialization+0x51c>)
 8014580:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8014584:	4b51      	ldr	r3, [pc, #324]	; (80146cc <LoRaMacInitialization+0x51c>)
 8014586:	2201      	movs	r2, #1
 8014588:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 801458c:	4a50      	ldr	r2, [pc, #320]	; (80146d0 <LoRaMacInitialization+0x520>)
 801458e:	693b      	ldr	r3, [r7, #16]
 8014590:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8014594:	2000      	movs	r0, #0
 8014596:	f7ff f869 	bl	801366c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 801459a:	4b4c      	ldr	r3, [pc, #304]	; (80146cc <LoRaMacInitialization+0x51c>)
 801459c:	2201      	movs	r2, #1
 801459e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 80145a2:	4a4b      	ldr	r2, [pc, #300]	; (80146d0 <LoRaMacInitialization+0x520>)
 80145a4:	697b      	ldr	r3, [r7, #20]
 80145a6:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 80145aa:	4b49      	ldr	r3, [pc, #292]	; (80146d0 <LoRaMacInitialization+0x520>)
 80145ac:	2200      	movs	r2, #0
 80145ae:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 80145b2:	4b47      	ldr	r3, [pc, #284]	; (80146d0 <LoRaMacInitialization+0x520>)
 80145b4:	2201      	movs	r2, #1
 80145b6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80145ba:	4b44      	ldr	r3, [pc, #272]	; (80146cc <LoRaMacInitialization+0x51c>)
 80145bc:	2200      	movs	r2, #0
 80145be:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80145c0:	4b42      	ldr	r3, [pc, #264]	; (80146cc <LoRaMacInitialization+0x51c>)
 80145c2:	2200      	movs	r2, #0
 80145c4:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80145c6:	2300      	movs	r3, #0
 80145c8:	9300      	str	r3, [sp, #0]
 80145ca:	4b42      	ldr	r3, [pc, #264]	; (80146d4 <LoRaMacInitialization+0x524>)
 80145cc:	2200      	movs	r2, #0
 80145ce:	f04f 31ff 	mov.w	r1, #4294967295
 80145d2:	4841      	ldr	r0, [pc, #260]	; (80146d8 <LoRaMacInitialization+0x528>)
 80145d4:	f00b f890 	bl	801f6f8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80145d8:	2300      	movs	r3, #0
 80145da:	9300      	str	r3, [sp, #0]
 80145dc:	4b3f      	ldr	r3, [pc, #252]	; (80146dc <LoRaMacInitialization+0x52c>)
 80145de:	2200      	movs	r2, #0
 80145e0:	f04f 31ff 	mov.w	r1, #4294967295
 80145e4:	483e      	ldr	r0, [pc, #248]	; (80146e0 <LoRaMacInitialization+0x530>)
 80145e6:	f00b f887 	bl	801f6f8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80145ea:	2300      	movs	r3, #0
 80145ec:	9300      	str	r3, [sp, #0]
 80145ee:	4b3d      	ldr	r3, [pc, #244]	; (80146e4 <LoRaMacInitialization+0x534>)
 80145f0:	2200      	movs	r2, #0
 80145f2:	f04f 31ff 	mov.w	r1, #4294967295
 80145f6:	483c      	ldr	r0, [pc, #240]	; (80146e8 <LoRaMacInitialization+0x538>)
 80145f8:	f00b f87e 	bl	801f6f8 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 80145fc:	2300      	movs	r3, #0
 80145fe:	9300      	str	r3, [sp, #0]
 8014600:	4b3a      	ldr	r3, [pc, #232]	; (80146ec <LoRaMacInitialization+0x53c>)
 8014602:	2200      	movs	r2, #0
 8014604:	f04f 31ff 	mov.w	r1, #4294967295
 8014608:	4839      	ldr	r0, [pc, #228]	; (80146f0 <LoRaMacInitialization+0x540>)
 801460a:	f00b f875 	bl	801f6f8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 801460e:	4c2f      	ldr	r4, [pc, #188]	; (80146cc <LoRaMacInitialization+0x51c>)
 8014610:	463b      	mov	r3, r7
 8014612:	4618      	mov	r0, r3
 8014614:	f00a fce8 	bl	801efe8 <SysTimeGetMcuTime>
 8014618:	f504 7392 	add.w	r3, r4, #292	; 0x124
 801461c:	463a      	mov	r2, r7
 801461e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014622:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8014626:	4b33      	ldr	r3, [pc, #204]	; (80146f4 <LoRaMacInitialization+0x544>)
 8014628:	2200      	movs	r2, #0
 801462a:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801462c:	4b28      	ldr	r3, [pc, #160]	; (80146d0 <LoRaMacInitialization+0x520>)
 801462e:	4a32      	ldr	r2, [pc, #200]	; (80146f8 <LoRaMacInitialization+0x548>)
 8014630:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8014634:	4b26      	ldr	r3, [pc, #152]	; (80146d0 <LoRaMacInitialization+0x520>)
 8014636:	4a31      	ldr	r2, [pc, #196]	; (80146fc <LoRaMacInitialization+0x54c>)
 8014638:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801463c:	4b24      	ldr	r3, [pc, #144]	; (80146d0 <LoRaMacInitialization+0x520>)
 801463e:	4a30      	ldr	r2, [pc, #192]	; (8014700 <LoRaMacInitialization+0x550>)
 8014640:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8014644:	4b22      	ldr	r3, [pc, #136]	; (80146d0 <LoRaMacInitialization+0x520>)
 8014646:	4a2f      	ldr	r2, [pc, #188]	; (8014704 <LoRaMacInitialization+0x554>)
 8014648:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801464c:	4b20      	ldr	r3, [pc, #128]	; (80146d0 <LoRaMacInitialization+0x520>)
 801464e:	4a2e      	ldr	r2, [pc, #184]	; (8014708 <LoRaMacInitialization+0x558>)
 8014650:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8014654:	4b2d      	ldr	r3, [pc, #180]	; (801470c <LoRaMacInitialization+0x55c>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	482d      	ldr	r0, [pc, #180]	; (8014710 <LoRaMacInitialization+0x560>)
 801465a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 801465c:	482d      	ldr	r0, [pc, #180]	; (8014714 <LoRaMacInitialization+0x564>)
 801465e:	f7fa f9f5 	bl	800ea4c <SecureElementInit>
 8014662:	4603      	mov	r3, r0
 8014664:	2b00      	cmp	r3, #0
 8014666:	d001      	beq.n	801466c <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014668:	2311      	movs	r3, #17
 801466a:	e02b      	b.n	80146c4 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 801466c:	4817      	ldr	r0, [pc, #92]	; (80146cc <LoRaMacInitialization+0x51c>)
 801466e:	f002 fbbf 	bl	8016df0 <LoRaMacCryptoInit>
 8014672:	4603      	mov	r3, r0
 8014674:	2b00      	cmp	r3, #0
 8014676:	d001      	beq.n	801467c <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014678:	2311      	movs	r3, #17
 801467a:	e023      	b.n	80146c4 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801467c:	f001 fcba 	bl	8015ff4 <LoRaMacCommandsInit>
 8014680:	4603      	mov	r3, r0
 8014682:	2b00      	cmp	r3, #0
 8014684:	d001      	beq.n	801468a <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014686:	2313      	movs	r3, #19
 8014688:	e01c      	b.n	80146c4 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801468a:	4823      	ldr	r0, [pc, #140]	; (8014718 <LoRaMacInitialization+0x568>)
 801468c:	f002 fc50 	bl	8016f30 <LoRaMacCryptoSetMulticastReference>
 8014690:	4603      	mov	r3, r0
 8014692:	2b00      	cmp	r3, #0
 8014694:	d001      	beq.n	801469a <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014696:	2311      	movs	r3, #17
 8014698:	e014      	b.n	80146c4 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 801469a:	4b1c      	ldr	r3, [pc, #112]	; (801470c <LoRaMacInitialization+0x55c>)
 801469c:	695b      	ldr	r3, [r3, #20]
 801469e:	4798      	blx	r3
 80146a0:	4603      	mov	r3, r0
 80146a2:	4618      	mov	r0, r3
 80146a4:	f007 f848 	bl	801b738 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80146a8:	4b18      	ldr	r3, [pc, #96]	; (801470c <LoRaMacInitialization+0x55c>)
 80146aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80146ac:	4a07      	ldr	r2, [pc, #28]	; (80146cc <LoRaMacInitialization+0x51c>)
 80146ae:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 80146b2:	4610      	mov	r0, r2
 80146b4:	4798      	blx	r3
    Radio.Sleep( );
 80146b6:	4b15      	ldr	r3, [pc, #84]	; (801470c <LoRaMacInitialization+0x55c>)
 80146b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146ba:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80146bc:	2001      	movs	r0, #1
 80146be:	f7fd fa7d 	bl	8011bbc <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80146c2:	2300      	movs	r3, #0
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	373c      	adds	r7, #60	; 0x3c
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd90      	pop	{r4, r7, pc}
 80146cc:	20000c54 	.word	0x20000c54
 80146d0:	20000738 	.word	0x20000738
 80146d4:	08012149 	.word	0x08012149
 80146d8:	20000aa0 	.word	0x20000aa0
 80146dc:	080121d9 	.word	0x080121d9
 80146e0:	20000ab8 	.word	0x20000ab8
 80146e4:	08012251 	.word	0x08012251
 80146e8:	20000ad0 	.word	0x20000ad0
 80146ec:	080122d1 	.word	0x080122d1
 80146f0:	20000b38 	.word	0x20000b38
 80146f4:	2000187c 	.word	0x2000187c
 80146f8:	08010bf9 	.word	0x08010bf9
 80146fc:	08010c55 	.word	0x08010c55
 8014700:	08010cf5 	.word	0x08010cf5
 8014704:	08010cc9 	.word	0x08010cc9
 8014708:	08010d11 	.word	0x08010d11
 801470c:	08021f7c 	.word	0x08021f7c
 8014710:	20000a84 	.word	0x20000a84
 8014714:	20000da0 	.word	0x20000da0
 8014718:	20000d3c 	.word	0x20000d3c

0801471c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 801471c:	b580      	push	{r7, lr}
 801471e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8014720:	4b04      	ldr	r3, [pc, #16]	; (8014734 <LoRaMacStart+0x18>)
 8014722:	2200      	movs	r2, #0
 8014724:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8014728:	f7fc fb08 	bl	8010d3c <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 801472c:	2300      	movs	r3, #0
}
 801472e:	4618      	mov	r0, r3
 8014730:	bd80      	pop	{r7, pc}
 8014732:	bf00      	nop
 8014734:	20000738 	.word	0x20000738

08014738 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8014738:	b580      	push	{r7, lr}
 801473a:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 801473c:	f7fd fa06 	bl	8011b4c <LoRaMacIsBusy>
 8014740:	4603      	mov	r3, r0
 8014742:	f083 0301 	eor.w	r3, r3, #1
 8014746:	b2db      	uxtb	r3, r3
 8014748:	2b00      	cmp	r3, #0
 801474a:	d00d      	beq.n	8014768 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 801474c:	4b0b      	ldr	r3, [pc, #44]	; (801477c <LoRaMacStop+0x44>)
 801474e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014752:	2b02      	cmp	r3, #2
 8014754:	d102      	bne.n	801475c <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8014756:	4b0a      	ldr	r3, [pc, #40]	; (8014780 <LoRaMacStop+0x48>)
 8014758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801475a:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 801475c:	4b09      	ldr	r3, [pc, #36]	; (8014784 <LoRaMacStop+0x4c>)
 801475e:	2201      	movs	r2, #1
 8014760:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8014764:	2300      	movs	r3, #0
 8014766:	e007      	b.n	8014778 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8014768:	4b06      	ldr	r3, [pc, #24]	; (8014784 <LoRaMacStop+0x4c>)
 801476a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801476e:	2b01      	cmp	r3, #1
 8014770:	d101      	bne.n	8014776 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8014772:	2300      	movs	r3, #0
 8014774:	e000      	b.n	8014778 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8014776:	2301      	movs	r3, #1
}
 8014778:	4618      	mov	r0, r3
 801477a:	bd80      	pop	{r7, pc}
 801477c:	20000c54 	.word	0x20000c54
 8014780:	08021f7c 	.word	0x08021f7c
 8014784:	20000738 	.word	0x20000738

08014788 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8014788:	b580      	push	{r7, lr}
 801478a:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 801478c:	4812      	ldr	r0, [pc, #72]	; (80147d8 <LoRaMacHalt+0x50>)
 801478e:	f00b f857 	bl	801f840 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8014792:	4812      	ldr	r0, [pc, #72]	; (80147dc <LoRaMacHalt+0x54>)
 8014794:	f00b f854 	bl	801f840 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8014798:	4811      	ldr	r0, [pc, #68]	; (80147e0 <LoRaMacHalt+0x58>)
 801479a:	f00b f851 	bl	801f840 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 801479e:	4811      	ldr	r0, [pc, #68]	; (80147e4 <LoRaMacHalt+0x5c>)
 80147a0:	f00b f84e 	bl	801f840 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80147a4:	f001 fa8c 	bl	8015cc0 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80147a8:	4b0f      	ldr	r3, [pc, #60]	; (80147e8 <LoRaMacHalt+0x60>)
 80147aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147ac:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80147ae:	4b0f      	ldr	r3, [pc, #60]	; (80147ec <LoRaMacHalt+0x64>)
 80147b0:	2200      	movs	r2, #0
 80147b2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 80147b6:	480e      	ldr	r0, [pc, #56]	; (80147f0 <LoRaMacHalt+0x68>)
 80147b8:	f7fd fba2 	bl	8011f00 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80147bc:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80147c0:	490b      	ldr	r1, [pc, #44]	; (80147f0 <LoRaMacHalt+0x68>)
 80147c2:	480c      	ldr	r0, [pc, #48]	; (80147f4 <LoRaMacHalt+0x6c>)
 80147c4:	f006 ffdd 	bl	801b782 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 80147c8:	4b08      	ldr	r3, [pc, #32]	; (80147ec <LoRaMacHalt+0x64>)
 80147ca:	2201      	movs	r2, #1
 80147cc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80147d0:	2300      	movs	r3, #0
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	bd80      	pop	{r7, pc}
 80147d6:	bf00      	nop
 80147d8:	20000aa0 	.word	0x20000aa0
 80147dc:	20000ab8 	.word	0x20000ab8
 80147e0:	20000ad0 	.word	0x20000ad0
 80147e4:	20000b38 	.word	0x20000b38
 80147e8:	08021f7c 	.word	0x08021f7c
 80147ec:	20000738 	.word	0x20000738
 80147f0:	20000c54 	.word	0x20000c54
 80147f4:	20001220 	.word	0x20001220

080147f8 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80147f8:	b590      	push	{r4, r7, lr}
 80147fa:	b08d      	sub	sp, #52	; 0x34
 80147fc:	af02      	add	r7, sp, #8
 80147fe:	4603      	mov	r3, r0
 8014800:	6039      	str	r1, [r7, #0]
 8014802:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014804:	4b42      	ldr	r3, [pc, #264]	; (8014910 <LoRaMacQueryTxPossible+0x118>)
 8014806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014808:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801480a:	4b41      	ldr	r3, [pc, #260]	; (8014910 <LoRaMacQueryTxPossible+0x118>)
 801480c:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 8014810:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014812:	4b3f      	ldr	r3, [pc, #252]	; (8014910 <LoRaMacQueryTxPossible+0x118>)
 8014814:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8014818:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 801481a:	4b3e      	ldr	r3, [pc, #248]	; (8014914 <LoRaMacQueryTxPossible+0x11c>)
 801481c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014820:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8014822:	2300      	movs	r3, #0
 8014824:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8014826:	683b      	ldr	r3, [r7, #0]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d101      	bne.n	8014830 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801482c:	2303      	movs	r3, #3
 801482e:	e06b      	b.n	8014908 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8014830:	2300      	movs	r3, #0
 8014832:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8014834:	4b36      	ldr	r3, [pc, #216]	; (8014910 <LoRaMacQueryTxPossible+0x118>)
 8014836:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801483a:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801483c:	4b34      	ldr	r3, [pc, #208]	; (8014910 <LoRaMacQueryTxPossible+0x118>)
 801483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014840:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8014842:	4b33      	ldr	r3, [pc, #204]	; (8014910 <LoRaMacQueryTxPossible+0x118>)
 8014844:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8014848:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 801484a:	4b31      	ldr	r3, [pc, #196]	; (8014910 <LoRaMacQueryTxPossible+0x118>)
 801484c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8014850:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8014852:	4b2f      	ldr	r3, [pc, #188]	; (8014910 <LoRaMacQueryTxPossible+0x118>)
 8014854:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014858:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801485c:	4b2c      	ldr	r3, [pc, #176]	; (8014910 <LoRaMacQueryTxPossible+0x118>)
 801485e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8014862:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8014866:	4b2b      	ldr	r3, [pc, #172]	; (8014914 <LoRaMacQueryTxPossible+0x11c>)
 8014868:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801486c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014870:	4b27      	ldr	r3, [pc, #156]	; (8014910 <LoRaMacQueryTxPossible+0x118>)
 8014872:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 801487a:	4b25      	ldr	r3, [pc, #148]	; (8014910 <LoRaMacQueryTxPossible+0x118>)
 801487c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014880:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8014884:	f107 040d 	add.w	r4, r7, #13
 8014888:	f107 020e 	add.w	r2, r7, #14
 801488c:	f107 010f 	add.w	r1, r7, #15
 8014890:	f107 0014 	add.w	r0, r7, #20
 8014894:	f107 0310 	add.w	r3, r7, #16
 8014898:	9300      	str	r3, [sp, #0]
 801489a:	4623      	mov	r3, r4
 801489c:	f001 f8da 	bl	8015a54 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80148a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148a4:	4618      	mov	r0, r3
 80148a6:	f7fd fe59 	bl	801255c <GetMaxAppPayloadWithoutFOptsLength>
 80148aa:	4603      	mov	r3, r0
 80148ac:	461a      	mov	r2, r3
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80148b2:	f107 0308 	add.w	r3, r7, #8
 80148b6:	4618      	mov	r0, r3
 80148b8:	f001 fca2 	bl	8016200 <LoRaMacCommandsGetSizeSerializedCmds>
 80148bc:	4603      	mov	r3, r0
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d001      	beq.n	80148c6 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80148c2:	2313      	movs	r3, #19
 80148c4:	e020      	b.n	8014908 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80148c6:	68bb      	ldr	r3, [r7, #8]
 80148c8:	2b0f      	cmp	r3, #15
 80148ca:	d819      	bhi.n	8014900 <LoRaMacQueryTxPossible+0x108>
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	785b      	ldrb	r3, [r3, #1]
 80148d0:	461a      	mov	r2, r3
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	429a      	cmp	r2, r3
 80148d6:	d313      	bcc.n	8014900 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80148d8:	683b      	ldr	r3, [r7, #0]
 80148da:	785a      	ldrb	r2, [r3, #1]
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	b2db      	uxtb	r3, r3
 80148e0:	1ad3      	subs	r3, r2, r3
 80148e2:	b2da      	uxtb	r2, r3
 80148e4:	683b      	ldr	r3, [r7, #0]
 80148e6:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	785b      	ldrb	r3, [r3, #1]
 80148ec:	4619      	mov	r1, r3
 80148ee:	79fa      	ldrb	r2, [r7, #7]
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	4413      	add	r3, r2
 80148f4:	4299      	cmp	r1, r3
 80148f6:	d301      	bcc.n	80148fc <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 80148f8:	2300      	movs	r3, #0
 80148fa:	e005      	b.n	8014908 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80148fc:	2308      	movs	r3, #8
 80148fe:	e003      	b.n	8014908 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	2200      	movs	r2, #0
 8014904:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8014906:	2308      	movs	r3, #8
    }
}
 8014908:	4618      	mov	r0, r3
 801490a:	372c      	adds	r7, #44	; 0x2c
 801490c:	46bd      	mov	sp, r7
 801490e:	bd90      	pop	{r4, r7, pc}
 8014910:	20000c54 	.word	0x20000c54
 8014914:	20000738 	.word	0x20000738

08014918 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8014918:	b590      	push	{r4, r7, lr}
 801491a:	b087      	sub	sp, #28
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014920:	2300      	movs	r3, #0
 8014922:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d101      	bne.n	801492e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801492a:	2303      	movs	r3, #3
 801492c:	e1c4      	b.n	8014cb8 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	781b      	ldrb	r3, [r3, #0]
 8014932:	2b41      	cmp	r3, #65	; 0x41
 8014934:	f200 81b9 	bhi.w	8014caa <LoRaMacMibGetRequestConfirm+0x392>
 8014938:	a201      	add	r2, pc, #4	; (adr r2, 8014940 <LoRaMacMibGetRequestConfirm+0x28>)
 801493a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801493e:	bf00      	nop
 8014940:	08014a49 	.word	0x08014a49
 8014944:	08014a55 	.word	0x08014a55
 8014948:	08014a61 	.word	0x08014a61
 801494c:	08014a6d 	.word	0x08014a6d
 8014950:	08014a79 	.word	0x08014a79
 8014954:	08014a85 	.word	0x08014a85
 8014958:	08014a91 	.word	0x08014a91
 801495c:	08014cab 	.word	0x08014cab
 8014960:	08014cab 	.word	0x08014cab
 8014964:	08014cab 	.word	0x08014cab
 8014968:	08014cab 	.word	0x08014cab
 801496c:	08014cab 	.word	0x08014cab
 8014970:	08014cab 	.word	0x08014cab
 8014974:	08014cab 	.word	0x08014cab
 8014978:	08014cab 	.word	0x08014cab
 801497c:	08014aa5 	.word	0x08014aa5
 8014980:	08014ab1 	.word	0x08014ab1
 8014984:	08014abd 	.word	0x08014abd
 8014988:	08014adf 	.word	0x08014adf
 801498c:	08014af1 	.word	0x08014af1
 8014990:	08014b03 	.word	0x08014b03
 8014994:	08014b15 	.word	0x08014b15
 8014998:	08014b49 	.word	0x08014b49
 801499c:	08014b27 	.word	0x08014b27
 80149a0:	08014b6b 	.word	0x08014b6b
 80149a4:	08014b77 	.word	0x08014b77
 80149a8:	08014b81 	.word	0x08014b81
 80149ac:	08014b8b 	.word	0x08014b8b
 80149b0:	08014b95 	.word	0x08014b95
 80149b4:	08014b9f 	.word	0x08014b9f
 80149b8:	08014ba9 	.word	0x08014ba9
 80149bc:	08014bd5 	.word	0x08014bd5
 80149c0:	08014be1 	.word	0x08014be1
 80149c4:	08014bf9 	.word	0x08014bf9
 80149c8:	08014bed 	.word	0x08014bed
 80149cc:	08014c05 	.word	0x08014c05
 80149d0:	08014c0f 	.word	0x08014c0f
 80149d4:	08014c1b 	.word	0x08014c1b
 80149d8:	08014c37 	.word	0x08014c37
 80149dc:	08014c27 	.word	0x08014c27
 80149e0:	08014c2f 	.word	0x08014c2f
 80149e4:	08014cab 	.word	0x08014cab
 80149e8:	08014c43 	.word	0x08014c43
 80149ec:	08014cab 	.word	0x08014cab
 80149f0:	08014cab 	.word	0x08014cab
 80149f4:	08014cab 	.word	0x08014cab
 80149f8:	08014cab 	.word	0x08014cab
 80149fc:	08014cab 	.word	0x08014cab
 8014a00:	08014cab 	.word	0x08014cab
 8014a04:	08014cab 	.word	0x08014cab
 8014a08:	08014cab 	.word	0x08014cab
 8014a0c:	08014cab 	.word	0x08014cab
 8014a10:	08014cab 	.word	0x08014cab
 8014a14:	08014cab 	.word	0x08014cab
 8014a18:	08014cab 	.word	0x08014cab
 8014a1c:	08014cab 	.word	0x08014cab
 8014a20:	08014cab 	.word	0x08014cab
 8014a24:	08014cab 	.word	0x08014cab
 8014a28:	08014c57 	.word	0x08014c57
 8014a2c:	08014c63 	.word	0x08014c63
 8014a30:	08014c6f 	.word	0x08014c6f
 8014a34:	08014c7b 	.word	0x08014c7b
 8014a38:	08014c87 	.word	0x08014c87
 8014a3c:	08014c93 	.word	0x08014c93
 8014a40:	08014c9f 	.word	0x08014c9f
 8014a44:	08014ca5 	.word	0x08014ca5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8014a48:	4b9d      	ldr	r3, [pc, #628]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014a4a:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	711a      	strb	r2, [r3, #4]
            break;
 8014a52:	e130      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014a54:	4b9a      	ldr	r3, [pc, #616]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014a56:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	711a      	strb	r2, [r3, #4]
            break;
 8014a5e:	e12a      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	685b      	ldr	r3, [r3, #4]
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7fa fab1 	bl	800efcc <SecureElementGetDevEui>
            break;
 8014a6a:	e124      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	685b      	ldr	r3, [r3, #4]
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7fa fadb 	bl	800f02c <SecureElementGetJoinEui>
            break;
 8014a76:	e11e      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014a78:	4b91      	ldr	r3, [pc, #580]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014a7a:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	711a      	strb	r2, [r3, #4]
            break;
 8014a82:	e118      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8014a84:	4b8e      	ldr	r3, [pc, #568]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014a86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	605a      	str	r2, [r3, #4]
            break;
 8014a8e:	e112      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8014a90:	4b8b      	ldr	r3, [pc, #556]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014a92:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	3304      	adds	r3, #4
 8014a9a:	4619      	mov	r1, r3
 8014a9c:	4610      	mov	r0, r2
 8014a9e:	f7fa faf7 	bl	800f090 <SecureElementGetDevAddr>
            break;
 8014aa2:	e108      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8014aa4:	4b86      	ldr	r3, [pc, #536]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014aa6:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	711a      	strb	r2, [r3, #4]
            break;
 8014aae:	e102      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8014ab0:	4b83      	ldr	r3, [pc, #524]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014ab2:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	711a      	strb	r2, [r3, #4]
            break;
 8014aba:	e0fc      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8014abc:	231c      	movs	r3, #28
 8014abe:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014ac0:	4b7f      	ldr	r3, [pc, #508]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014ac2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ac6:	f107 0210 	add.w	r2, r7, #16
 8014aca:	4611      	mov	r1, r2
 8014acc:	4618      	mov	r0, r3
 8014ace:	f003 f853 	bl	8017b78 <RegionGetPhyParam>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8014ad6:	68fa      	ldr	r2, [r7, #12]
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	605a      	str	r2, [r3, #4]
            break;
 8014adc:	e0eb      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	4a77      	ldr	r2, [pc, #476]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014ae2:	3304      	adds	r3, #4
 8014ae4:	326c      	adds	r2, #108	; 0x6c
 8014ae6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014aea:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014aee:	e0e2      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	4a73      	ldr	r2, [pc, #460]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014af4:	3304      	adds	r3, #4
 8014af6:	32b4      	adds	r2, #180	; 0xb4
 8014af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014afc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014b00:	e0d9      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	4a6e      	ldr	r2, [pc, #440]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014b06:	3304      	adds	r3, #4
 8014b08:	3274      	adds	r2, #116	; 0x74
 8014b0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014b0e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014b12:	e0d0      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	4a6a      	ldr	r2, [pc, #424]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014b18:	3304      	adds	r3, #4
 8014b1a:	32bc      	adds	r2, #188	; 0xbc
 8014b1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014b20:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014b24:	e0c7      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8014b26:	231a      	movs	r3, #26
 8014b28:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014b2a:	4b65      	ldr	r3, [pc, #404]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014b2c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014b30:	f107 0210 	add.w	r2, r7, #16
 8014b34:	4611      	mov	r1, r2
 8014b36:	4618      	mov	r0, r3
 8014b38:	f003 f81e 	bl	8017b78 <RegionGetPhyParam>
 8014b3c:	4603      	mov	r3, r0
 8014b3e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8014b40:	68fa      	ldr	r2, [r7, #12]
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	605a      	str	r2, [r3, #4]
            break;
 8014b46:	e0b6      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8014b48:	2319      	movs	r3, #25
 8014b4a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014b4c:	4b5c      	ldr	r3, [pc, #368]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014b4e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014b52:	f107 0210 	add.w	r2, r7, #16
 8014b56:	4611      	mov	r1, r2
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f003 f80d 	bl	8017b78 <RegionGetPhyParam>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8014b62:	68fa      	ldr	r2, [r7, #12]
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	605a      	str	r2, [r3, #4]
            break;
 8014b68:	e0a5      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8014b6a:	4b55      	ldr	r3, [pc, #340]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014b6c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	711a      	strb	r2, [r3, #4]
            break;
 8014b74:	e09f      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8014b76:	4b52      	ldr	r3, [pc, #328]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	605a      	str	r2, [r3, #4]
            break;
 8014b7e:	e09a      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8014b80:	4b4f      	ldr	r3, [pc, #316]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014b82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	605a      	str	r2, [r3, #4]
            break;
 8014b88:	e095      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8014b8a:	4b4d      	ldr	r3, [pc, #308]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014b8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	605a      	str	r2, [r3, #4]
            break;
 8014b92:	e090      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8014b94:	4b4a      	ldr	r3, [pc, #296]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014b96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	605a      	str	r2, [r3, #4]
            break;
 8014b9c:	e08b      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8014b9e:	4b48      	ldr	r3, [pc, #288]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014ba0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	605a      	str	r2, [r3, #4]
            break;
 8014ba6:	e086      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8014ba8:	2302      	movs	r3, #2
 8014baa:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014bac:	4b44      	ldr	r3, [pc, #272]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014bae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014bb2:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014bb4:	4b42      	ldr	r3, [pc, #264]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014bb6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014bba:	f107 0210 	add.w	r2, r7, #16
 8014bbe:	4611      	mov	r1, r2
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	f002 ffd9 	bl	8017b78 <RegionGetPhyParam>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	b25a      	sxtb	r2, r3
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	711a      	strb	r2, [r3, #4]
            break;
 8014bd2:	e070      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014bd4:	4b3a      	ldr	r3, [pc, #232]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014bd6:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	711a      	strb	r2, [r3, #4]
            break;
 8014bde:	e06a      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8014be0:	4b37      	ldr	r3, [pc, #220]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014be2:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	711a      	strb	r2, [r3, #4]
            break;
 8014bea:	e064      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014bec:	4b34      	ldr	r3, [pc, #208]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014bee:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	711a      	strb	r2, [r3, #4]
            break;
 8014bf6:	e05e      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014bf8:	4b31      	ldr	r3, [pc, #196]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014bfa:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	711a      	strb	r2, [r3, #4]
            break;
 8014c02:	e058      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8014c04:	4b2e      	ldr	r3, [pc, #184]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	605a      	str	r2, [r3, #4]
            break;
 8014c0c:	e053      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8014c0e:	4b2c      	ldr	r3, [pc, #176]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c10:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	711a      	strb	r2, [r3, #4]
            break;
 8014c18:	e04d      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8014c1a:	4b29      	ldr	r3, [pc, #164]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c1c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	605a      	str	r2, [r3, #4]
            break;
 8014c24:	e047      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	4a25      	ldr	r2, [pc, #148]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c2a:	605a      	str	r2, [r3, #4]
            break;
 8014c2c:	e043      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	4a24      	ldr	r2, [pc, #144]	; (8014cc4 <LoRaMacMibGetRequestConfirm+0x3ac>)
 8014c32:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8014c34:	e03f      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8014c36:	4b22      	ldr	r3, [pc, #136]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c38:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	605a      	str	r2, [r3, #4]
            break;
 8014c40:	e039      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	4a1e      	ldr	r2, [pc, #120]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c46:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8014c4a:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8014c4c:	687c      	ldr	r4, [r7, #4]
 8014c4e:	f003 f9a5 	bl	8017f9c <RegionGetVersion>
 8014c52:	60a0      	str	r0, [r4, #8]
            break;
 8014c54:	e02f      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8014c56:	4b1a      	ldr	r3, [pc, #104]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c58:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	605a      	str	r2, [r3, #4]
            break;
 8014c60:	e029      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8014c62:	4b17      	ldr	r3, [pc, #92]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c64:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	711a      	strb	r2, [r3, #4]
            break;
 8014c6c:	e023      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8014c6e:	4b14      	ldr	r3, [pc, #80]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c70:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	809a      	strh	r2, [r3, #4]
            break;
 8014c78:	e01d      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014c7a:	4b11      	ldr	r3, [pc, #68]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c7c:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	809a      	strh	r2, [r3, #4]
            break;
 8014c84:	e017      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8014c86:	4b0e      	ldr	r3, [pc, #56]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c88:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	809a      	strh	r2, [r3, #4]
            break;
 8014c90:	e011      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8014c92:	4b0b      	ldr	r3, [pc, #44]	; (8014cc0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c94:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	809a      	strh	r2, [r3, #4]
            break;
 8014c9c:	e00b      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014c9e:	2318      	movs	r3, #24
 8014ca0:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014ca2:	e008      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014ca4:	2318      	movs	r3, #24
 8014ca6:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014ca8:	e005      	b.n	8014cb6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8014caa:	6878      	ldr	r0, [r7, #4]
 8014cac:	f001 f81f 	bl	8015cee <LoRaMacClassBMibGetRequestConfirm>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	75fb      	strb	r3, [r7, #23]
            break;
 8014cb4:	bf00      	nop
        }
    }
    return status;
 8014cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	371c      	adds	r7, #28
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd90      	pop	{r4, r7, pc}
 8014cc0:	20000c54 	.word	0x20000c54
 8014cc4:	20001220 	.word	0x20001220

08014cc8 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b086      	sub	sp, #24
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d101      	bne.n	8014cde <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014cda:	2303      	movs	r3, #3
 8014cdc:	e396      	b.n	801540c <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8014cde:	4bbd      	ldr	r3, [pc, #756]	; (8014fd4 <LoRaMacMibSetRequestConfirm+0x30c>)
 8014ce0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014ce4:	f003 0302 	and.w	r3, r3, #2
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d001      	beq.n	8014cf0 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014cec:	2301      	movs	r3, #1
 8014cee:	e38d      	b.n	801540c <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	781b      	ldrb	r3, [r3, #0]
 8014cf4:	2b41      	cmp	r3, #65	; 0x41
 8014cf6:	f200 835d 	bhi.w	80153b4 <LoRaMacMibSetRequestConfirm+0x6ec>
 8014cfa:	a201      	add	r2, pc, #4	; (adr r2, 8014d00 <LoRaMacMibSetRequestConfirm+0x38>)
 8014cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d00:	08014e09 	.word	0x08014e09
 8014d04:	08014e19 	.word	0x08014e19
 8014d08:	08014e33 	.word	0x08014e33
 8014d0c:	08014e4b 	.word	0x08014e4b
 8014d10:	08014e63 	.word	0x08014e63
 8014d14:	08014e6f 	.word	0x08014e6f
 8014d18:	08014e7b 	.word	0x08014e7b
 8014d1c:	08014ea5 	.word	0x08014ea5
 8014d20:	08014ecb 	.word	0x08014ecb
 8014d24:	08014ef1 	.word	0x08014ef1
 8014d28:	08014f17 	.word	0x08014f17
 8014d2c:	08014f3d 	.word	0x08014f3d
 8014d30:	08014f63 	.word	0x08014f63
 8014d34:	08014f89 	.word	0x08014f89
 8014d38:	08014faf 	.word	0x08014faf
 8014d3c:	08014fdd 	.word	0x08014fdd
 8014d40:	08014ffd 	.word	0x08014ffd
 8014d44:	080153b5 	.word	0x080153b5
 8014d48:	08015009 	.word	0x08015009
 8014d4c:	08015079 	.word	0x08015079
 8014d50:	080150b9 	.word	0x080150b9
 8014d54:	0801511b 	.word	0x0801511b
 8014d58:	0801518b 	.word	0x0801518b
 8014d5c:	0801515b 	.word	0x0801515b
 8014d60:	080151bb 	.word	0x080151bb
 8014d64:	080151dd 	.word	0x080151dd
 8014d68:	080151e7 	.word	0x080151e7
 8014d6c:	080151f1 	.word	0x080151f1
 8014d70:	080151fb 	.word	0x080151fb
 8014d74:	08015205 	.word	0x08015205
 8014d78:	080153b5 	.word	0x080153b5
 8014d7c:	0801520f 	.word	0x0801520f
 8014d80:	08015241 	.word	0x08015241
 8014d84:	080152b5 	.word	0x080152b5
 8014d88:	0801527b 	.word	0x0801527b
 8014d8c:	080152e7 	.word	0x080152e7
 8014d90:	080152fd 	.word	0x080152fd
 8014d94:	08015315 	.word	0x08015315
 8014d98:	08015321 	.word	0x08015321
 8014d9c:	0801532d 	.word	0x0801532d
 8014da0:	080153b5 	.word	0x080153b5
 8014da4:	08015337 	.word	0x08015337
 8014da8:	080153b5 	.word	0x080153b5
 8014dac:	080153b5 	.word	0x080153b5
 8014db0:	080153b5 	.word	0x080153b5
 8014db4:	080153b5 	.word	0x080153b5
 8014db8:	080153b5 	.word	0x080153b5
 8014dbc:	080153b5 	.word	0x080153b5
 8014dc0:	080153b5 	.word	0x080153b5
 8014dc4:	080153b5 	.word	0x080153b5
 8014dc8:	080153b5 	.word	0x080153b5
 8014dcc:	080153b5 	.word	0x080153b5
 8014dd0:	080153b5 	.word	0x080153b5
 8014dd4:	080153b5 	.word	0x080153b5
 8014dd8:	080153b5 	.word	0x080153b5
 8014ddc:	080153b5 	.word	0x080153b5
 8014de0:	080153b5 	.word	0x080153b5
 8014de4:	080153b5 	.word	0x080153b5
 8014de8:	08015361 	.word	0x08015361
 8014dec:	0801536d 	.word	0x0801536d
 8014df0:	08015379 	.word	0x08015379
 8014df4:	08015385 	.word	0x08015385
 8014df8:	08015391 	.word	0x08015391
 8014dfc:	0801539d 	.word	0x0801539d
 8014e00:	080153a9 	.word	0x080153a9
 8014e04:	080153af 	.word	0x080153af
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	791b      	ldrb	r3, [r3, #4]
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7fd fabb 	bl	8012388 <SwitchClass>
 8014e12:	4603      	mov	r3, r0
 8014e14:	75fb      	strb	r3, [r7, #23]
            break;
 8014e16:	e2ee      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	791b      	ldrb	r3, [r3, #4]
 8014e1c:	2b02      	cmp	r3, #2
 8014e1e:	d005      	beq.n	8014e2c <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	791a      	ldrb	r2, [r3, #4]
 8014e24:	4b6c      	ldr	r3, [pc, #432]	; (8014fd8 <LoRaMacMibSetRequestConfirm+0x310>)
 8014e26:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014e2a:	e2e4      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e2c:	2303      	movs	r3, #3
 8014e2e:	75fb      	strb	r3, [r7, #23]
            break;
 8014e30:	e2e1      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	685b      	ldr	r3, [r3, #4]
 8014e36:	4618      	mov	r0, r3
 8014e38:	f7fa f8b0 	bl	800ef9c <SecureElementSetDevEui>
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	f000 82be 	beq.w	80153c0 <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e44:	2303      	movs	r3, #3
 8014e46:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e48:	e2ba      	b.n	80153c0 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	685b      	ldr	r3, [r3, #4]
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f7fa f8d4 	bl	800effc <SecureElementSetJoinEui>
 8014e54:	4603      	mov	r3, r0
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	f000 82b4 	beq.w	80153c4 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e5c:	2303      	movs	r3, #3
 8014e5e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e60:	e2b0      	b.n	80153c4 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	791a      	ldrb	r2, [r3, #4]
 8014e66:	4b5c      	ldr	r3, [pc, #368]	; (8014fd8 <LoRaMacMibSetRequestConfirm+0x310>)
 8014e68:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8014e6c:	e2c3      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	685b      	ldr	r3, [r3, #4]
 8014e72:	4a59      	ldr	r2, [pc, #356]	; (8014fd8 <LoRaMacMibSetRequestConfirm+0x310>)
 8014e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8014e78:	e2bd      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8014e7a:	4b57      	ldr	r3, [pc, #348]	; (8014fd8 <LoRaMacMibSetRequestConfirm+0x310>)
 8014e7c:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	685b      	ldr	r3, [r3, #4]
 8014e84:	4619      	mov	r1, r3
 8014e86:	4610      	mov	r0, r2
 8014e88:	f7fa f8e8 	bl	800f05c <SecureElementSetDevAddr>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d002      	beq.n	8014e98 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e92:	2303      	movs	r3, #3
 8014e94:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8014e96:	e2ae      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	685b      	ldr	r3, [r3, #4]
 8014e9c:	4a4e      	ldr	r2, [pc, #312]	; (8014fd8 <LoRaMacMibSetRequestConfirm+0x310>)
 8014e9e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 8014ea2:	e2a8      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	685b      	ldr	r3, [r3, #4]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d00b      	beq.n	8014ec4 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	685b      	ldr	r3, [r3, #4]
 8014eb0:	4619      	mov	r1, r3
 8014eb2:	2000      	movs	r0, #0
 8014eb4:	f002 f866 	bl	8016f84 <LoRaMacCryptoSetKey>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	f000 8284 	beq.w	80153c8 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014ec0:	2311      	movs	r3, #17
 8014ec2:	e2a3      	b.n	801540c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ec4:	2303      	movs	r3, #3
 8014ec6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014ec8:	e27e      	b.n	80153c8 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	685b      	ldr	r3, [r3, #4]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d00b      	beq.n	8014eea <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	685b      	ldr	r3, [r3, #4]
 8014ed6:	4619      	mov	r1, r3
 8014ed8:	2001      	movs	r0, #1
 8014eda:	f002 f853 	bl	8016f84 <LoRaMacCryptoSetKey>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	f000 8273 	beq.w	80153cc <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014ee6:	2311      	movs	r3, #17
 8014ee8:	e290      	b.n	801540c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014eea:	2303      	movs	r3, #3
 8014eec:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014eee:	e26d      	b.n	80153cc <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	685b      	ldr	r3, [r3, #4]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d00b      	beq.n	8014f10 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	685b      	ldr	r3, [r3, #4]
 8014efc:	4619      	mov	r1, r3
 8014efe:	2008      	movs	r0, #8
 8014f00:	f002 f840 	bl	8016f84 <LoRaMacCryptoSetKey>
 8014f04:	4603      	mov	r3, r0
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	f000 8262 	beq.w	80153d0 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014f0c:	2311      	movs	r3, #17
 8014f0e:	e27d      	b.n	801540c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f10:	2303      	movs	r3, #3
 8014f12:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014f14:	e25c      	b.n	80153d0 <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	685b      	ldr	r3, [r3, #4]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d00b      	beq.n	8014f36 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	685b      	ldr	r3, [r3, #4]
 8014f22:	4619      	mov	r1, r3
 8014f24:	2009      	movs	r0, #9
 8014f26:	f002 f82d 	bl	8016f84 <LoRaMacCryptoSetKey>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	f000 8251 	beq.w	80153d4 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014f32:	2311      	movs	r3, #17
 8014f34:	e26a      	b.n	801540c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f36:	2303      	movs	r3, #3
 8014f38:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014f3a:	e24b      	b.n	80153d4 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d00b      	beq.n	8014f5c <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	685b      	ldr	r3, [r3, #4]
 8014f48:	4619      	mov	r1, r3
 8014f4a:	200c      	movs	r0, #12
 8014f4c:	f002 f81a 	bl	8016f84 <LoRaMacCryptoSetKey>
 8014f50:	4603      	mov	r3, r0
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	f000 8240 	beq.w	80153d8 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014f58:	2311      	movs	r3, #17
 8014f5a:	e257      	b.n	801540c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f5c:	2303      	movs	r3, #3
 8014f5e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014f60:	e23a      	b.n	80153d8 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	685b      	ldr	r3, [r3, #4]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d00b      	beq.n	8014f82 <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	685b      	ldr	r3, [r3, #4]
 8014f6e:	4619      	mov	r1, r3
 8014f70:	200d      	movs	r0, #13
 8014f72:	f002 f807 	bl	8016f84 <LoRaMacCryptoSetKey>
 8014f76:	4603      	mov	r3, r0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	f000 822f 	beq.w	80153dc <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014f7e:	2311      	movs	r3, #17
 8014f80:	e244      	b.n	801540c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f82:	2303      	movs	r3, #3
 8014f84:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014f86:	e229      	b.n	80153dc <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	685b      	ldr	r3, [r3, #4]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d00b      	beq.n	8014fa8 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	685b      	ldr	r3, [r3, #4]
 8014f94:	4619      	mov	r1, r3
 8014f96:	200e      	movs	r0, #14
 8014f98:	f001 fff4 	bl	8016f84 <LoRaMacCryptoSetKey>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	f000 821e 	beq.w	80153e0 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014fa4:	2311      	movs	r3, #17
 8014fa6:	e231      	b.n	801540c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fa8:	2303      	movs	r3, #3
 8014faa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014fac:	e218      	b.n	80153e0 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	685b      	ldr	r3, [r3, #4]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d00b      	beq.n	8014fce <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	685b      	ldr	r3, [r3, #4]
 8014fba:	4619      	mov	r1, r3
 8014fbc:	200f      	movs	r0, #15
 8014fbe:	f001 ffe1 	bl	8016f84 <LoRaMacCryptoSetKey>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	f000 820d 	beq.w	80153e4 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014fca:	2311      	movs	r3, #17
 8014fcc:	e21e      	b.n	801540c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fce:	2303      	movs	r3, #3
 8014fd0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014fd2:	e207      	b.n	80153e4 <LoRaMacMibSetRequestConfirm+0x71c>
 8014fd4:	20000738 	.word	0x20000738
 8014fd8:	20000c54 	.word	0x20000c54
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	791a      	ldrb	r2, [r3, #4]
 8014fe0:	4bb2      	ldr	r3, [pc, #712]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014fe2:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014fe6:	4bb2      	ldr	r3, [pc, #712]	; (80152b0 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8014fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014fea:	4ab0      	ldr	r2, [pc, #704]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014fec:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8014ff0:	4610      	mov	r0, r2
 8014ff2:	4798      	blx	r3
            Radio.Sleep( );
 8014ff4:	4bae      	ldr	r3, [pc, #696]	; (80152b0 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8014ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ff8:	4798      	blx	r3
            break;
 8014ffa:	e1fc      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	791a      	ldrb	r2, [r3, #4]
 8015000:	4baa      	ldr	r3, [pc, #680]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015002:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8015006:	e1f6      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	7a1b      	ldrb	r3, [r3, #8]
 801500c:	b25b      	sxtb	r3, r3
 801500e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015010:	4ba6      	ldr	r3, [pc, #664]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015012:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8015016:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8015018:	4ba4      	ldr	r3, [pc, #656]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 801501a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801501e:	f107 0108 	add.w	r1, r7, #8
 8015022:	2207      	movs	r2, #7
 8015024:	4618      	mov	r0, r3
 8015026:	f002 fdf7 	bl	8017c18 <RegionVerify>
 801502a:	4603      	mov	r3, r0
 801502c:	f083 0301 	eor.w	r3, r3, #1
 8015030:	b2db      	uxtb	r3, r3
 8015032:	2b00      	cmp	r3, #0
 8015034:	d002      	beq.n	801503c <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015036:	2303      	movs	r3, #3
 8015038:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 801503a:	e1dc      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	685b      	ldr	r3, [r3, #4]
 8015040:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8015042:	4b9a      	ldr	r3, [pc, #616]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015044:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015048:	f107 0108 	add.w	r1, r7, #8
 801504c:	2200      	movs	r2, #0
 801504e:	4618      	mov	r0, r3
 8015050:	f002 fde2 	bl	8017c18 <RegionVerify>
 8015054:	4603      	mov	r3, r0
 8015056:	f083 0301 	eor.w	r3, r3, #1
 801505a:	b2db      	uxtb	r3, r3
 801505c:	2b00      	cmp	r3, #0
 801505e:	d002      	beq.n	8015066 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015060:	2303      	movs	r3, #3
 8015062:	75fb      	strb	r3, [r7, #23]
            break;
 8015064:	e1c7      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8015066:	4b91      	ldr	r3, [pc, #580]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015068:	687a      	ldr	r2, [r7, #4]
 801506a:	336c      	adds	r3, #108	; 0x6c
 801506c:	3204      	adds	r2, #4
 801506e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015072:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8015076:	e1be      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	7a1b      	ldrb	r3, [r3, #8]
 801507c:	b25b      	sxtb	r3, r3
 801507e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015080:	4b8a      	ldr	r3, [pc, #552]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015082:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8015086:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8015088:	4b88      	ldr	r3, [pc, #544]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 801508a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801508e:	f107 0108 	add.w	r1, r7, #8
 8015092:	2207      	movs	r2, #7
 8015094:	4618      	mov	r0, r3
 8015096:	f002 fdbf 	bl	8017c18 <RegionVerify>
 801509a:	4603      	mov	r3, r0
 801509c:	2b00      	cmp	r3, #0
 801509e:	d008      	beq.n	80150b2 <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80150a0:	4b82      	ldr	r3, [pc, #520]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 80150a2:	687a      	ldr	r2, [r7, #4]
 80150a4:	33b4      	adds	r3, #180	; 0xb4
 80150a6:	3204      	adds	r2, #4
 80150a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80150ac:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80150b0:	e1a1      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80150b2:	2303      	movs	r3, #3
 80150b4:	75fb      	strb	r3, [r7, #23]
            break;
 80150b6:	e19e      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	7a1b      	ldrb	r3, [r3, #8]
 80150bc:	b25b      	sxtb	r3, r3
 80150be:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80150c0:	4b7a      	ldr	r3, [pc, #488]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 80150c2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80150c6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80150c8:	4b78      	ldr	r3, [pc, #480]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 80150ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80150ce:	f107 0108 	add.w	r1, r7, #8
 80150d2:	2207      	movs	r2, #7
 80150d4:	4618      	mov	r0, r3
 80150d6:	f002 fd9f 	bl	8017c18 <RegionVerify>
 80150da:	4603      	mov	r3, r0
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d019      	beq.n	8015114 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80150e0:	4b72      	ldr	r3, [pc, #456]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 80150e2:	687a      	ldr	r2, [r7, #4]
 80150e4:	3374      	adds	r3, #116	; 0x74
 80150e6:	3204      	adds	r2, #4
 80150e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80150ec:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80150f0:	4b6e      	ldr	r3, [pc, #440]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 80150f2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80150f6:	2b02      	cmp	r3, #2
 80150f8:	f040 8176 	bne.w	80153e8 <LoRaMacMibSetRequestConfirm+0x720>
 80150fc:	4b6b      	ldr	r3, [pc, #428]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 80150fe:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8015102:	2b00      	cmp	r3, #0
 8015104:	f000 8170 	beq.w	80153e8 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8015108:	4b69      	ldr	r3, [pc, #420]	; (80152b0 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801510c:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 801510e:	f7fe fc1b 	bl	8013948 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015112:	e169      	b.n	80153e8 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015114:	2303      	movs	r3, #3
 8015116:	75fb      	strb	r3, [r7, #23]
            break;
 8015118:	e166      	b.n	80153e8 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	7a1b      	ldrb	r3, [r3, #8]
 801511e:	b25b      	sxtb	r3, r3
 8015120:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015122:	4b62      	ldr	r3, [pc, #392]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015124:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8015128:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801512a:	4b60      	ldr	r3, [pc, #384]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 801512c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015130:	f107 0108 	add.w	r1, r7, #8
 8015134:	2207      	movs	r2, #7
 8015136:	4618      	mov	r0, r3
 8015138:	f002 fd6e 	bl	8017c18 <RegionVerify>
 801513c:	4603      	mov	r3, r0
 801513e:	2b00      	cmp	r3, #0
 8015140:	d008      	beq.n	8015154 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8015142:	4b5a      	ldr	r3, [pc, #360]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015144:	687a      	ldr	r2, [r7, #4]
 8015146:	33bc      	adds	r3, #188	; 0xbc
 8015148:	3204      	adds	r2, #4
 801514a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801514e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015152:	e150      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015154:	2303      	movs	r3, #3
 8015156:	75fb      	strb	r3, [r7, #23]
            break;
 8015158:	e14d      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	685b      	ldr	r3, [r3, #4]
 801515e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8015160:	2301      	movs	r3, #1
 8015162:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8015164:	4b51      	ldr	r3, [pc, #324]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015166:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801516a:	f107 020c 	add.w	r2, r7, #12
 801516e:	4611      	mov	r1, r2
 8015170:	4618      	mov	r0, r3
 8015172:	f002 fd8a 	bl	8017c8a <RegionChanMaskSet>
 8015176:	4603      	mov	r3, r0
 8015178:	f083 0301 	eor.w	r3, r3, #1
 801517c:	b2db      	uxtb	r3, r3
 801517e:	2b00      	cmp	r3, #0
 8015180:	f000 8134 	beq.w	80153ec <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015184:	2303      	movs	r3, #3
 8015186:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015188:	e130      	b.n	80153ec <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	685b      	ldr	r3, [r3, #4]
 801518e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8015190:	2300      	movs	r3, #0
 8015192:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8015194:	4b45      	ldr	r3, [pc, #276]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015196:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801519a:	f107 020c 	add.w	r2, r7, #12
 801519e:	4611      	mov	r1, r2
 80151a0:	4618      	mov	r0, r3
 80151a2:	f002 fd72 	bl	8017c8a <RegionChanMaskSet>
 80151a6:	4603      	mov	r3, r0
 80151a8:	f083 0301 	eor.w	r3, r3, #1
 80151ac:	b2db      	uxtb	r3, r3
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	f000 811e 	beq.w	80153f0 <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80151b4:	2303      	movs	r3, #3
 80151b6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80151b8:	e11a      	b.n	80153f0 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	791b      	ldrb	r3, [r3, #4]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d009      	beq.n	80151d6 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80151c6:	2b0f      	cmp	r3, #15
 80151c8:	d805      	bhi.n	80151d6 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	791a      	ldrb	r2, [r3, #4]
 80151ce:	4b37      	ldr	r3, [pc, #220]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 80151d0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80151d4:	e10f      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80151d6:	2303      	movs	r3, #3
 80151d8:	75fb      	strb	r3, [r7, #23]
            break;
 80151da:	e10c      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	685b      	ldr	r3, [r3, #4]
 80151e0:	4a32      	ldr	r2, [pc, #200]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 80151e2:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80151e4:	e107      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	685b      	ldr	r3, [r3, #4]
 80151ea:	4a30      	ldr	r2, [pc, #192]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 80151ec:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80151ee:	e102      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	685b      	ldr	r3, [r3, #4]
 80151f4:	4a2d      	ldr	r2, [pc, #180]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 80151f6:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80151f8:	e0fd      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	685b      	ldr	r3, [r3, #4]
 80151fe:	4a2b      	ldr	r2, [pc, #172]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015200:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8015202:	e0f8      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	685b      	ldr	r3, [r3, #4]
 8015208:	4a28      	ldr	r2, [pc, #160]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 801520a:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 801520c:	e0f3      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015214:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8015216:	4b25      	ldr	r3, [pc, #148]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015218:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801521c:	f107 0108 	add.w	r1, r7, #8
 8015220:	2206      	movs	r2, #6
 8015222:	4618      	mov	r0, r3
 8015224:	f002 fcf8 	bl	8017c18 <RegionVerify>
 8015228:	4603      	mov	r3, r0
 801522a:	2b00      	cmp	r3, #0
 801522c:	d005      	beq.n	801523a <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801522e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015232:	4b1e      	ldr	r3, [pc, #120]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015234:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015238:	e0dd      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801523a:	2303      	movs	r3, #3
 801523c:	75fb      	strb	r3, [r7, #23]
            break;
 801523e:	e0da      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015246:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015248:	4b18      	ldr	r3, [pc, #96]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 801524a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801524e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015250:	4b16      	ldr	r3, [pc, #88]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015252:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015256:	f107 0108 	add.w	r1, r7, #8
 801525a:	2205      	movs	r2, #5
 801525c:	4618      	mov	r0, r3
 801525e:	f002 fcdb 	bl	8017c18 <RegionVerify>
 8015262:	4603      	mov	r3, r0
 8015264:	2b00      	cmp	r3, #0
 8015266:	d005      	beq.n	8015274 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015268:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801526c:	4b0f      	ldr	r3, [pc, #60]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 801526e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015272:	e0c0      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015274:	2303      	movs	r3, #3
 8015276:	75fb      	strb	r3, [r7, #23]
            break;
 8015278:	e0bd      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015280:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8015282:	4b0a      	ldr	r3, [pc, #40]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015284:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015288:	f107 0108 	add.w	r1, r7, #8
 801528c:	220a      	movs	r2, #10
 801528e:	4618      	mov	r0, r3
 8015290:	f002 fcc2 	bl	8017c18 <RegionVerify>
 8015294:	4603      	mov	r3, r0
 8015296:	2b00      	cmp	r3, #0
 8015298:	d005      	beq.n	80152a6 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 801529a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801529e:	4b03      	ldr	r3, [pc, #12]	; (80152ac <LoRaMacMibSetRequestConfirm+0x5e4>)
 80152a0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80152a4:	e0a7      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80152a6:	2303      	movs	r3, #3
 80152a8:	75fb      	strb	r3, [r7, #23]
            break;
 80152aa:	e0a4      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
 80152ac:	20000c54 	.word	0x20000c54
 80152b0:	08021f7c 	.word	0x08021f7c
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80152ba:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80152bc:	4b55      	ldr	r3, [pc, #340]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 80152be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80152c2:	f107 0108 	add.w	r1, r7, #8
 80152c6:	2209      	movs	r2, #9
 80152c8:	4618      	mov	r0, r3
 80152ca:	f002 fca5 	bl	8017c18 <RegionVerify>
 80152ce:	4603      	mov	r3, r0
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d005      	beq.n	80152e0 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80152d4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80152d8:	4b4e      	ldr	r3, [pc, #312]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 80152da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80152de:	e08a      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80152e0:	2303      	movs	r3, #3
 80152e2:	75fb      	strb	r3, [r7, #23]
            break;
 80152e4:	e087      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	685b      	ldr	r3, [r3, #4]
 80152ea:	4a4a      	ldr	r2, [pc, #296]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 80152ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80152f0:	4b48      	ldr	r3, [pc, #288]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 80152f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80152f6:	4a47      	ldr	r2, [pc, #284]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 80152f8:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80152fa:	e07c      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	791a      	ldrb	r2, [r3, #4]
 8015300:	4b44      	ldr	r3, [pc, #272]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015302:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8015306:	4b43      	ldr	r3, [pc, #268]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015308:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 801530c:	4b41      	ldr	r3, [pc, #260]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 801530e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8015312:	e070      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	685b      	ldr	r3, [r3, #4]
 8015318:	4a3e      	ldr	r2, [pc, #248]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 801531a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 801531e:	e06a      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	685b      	ldr	r3, [r3, #4]
 8015324:	4a3b      	ldr	r2, [pc, #236]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015326:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 801532a:	e064      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 801532c:	f7fe fd40 	bl	8013db0 <RestoreNvmData>
 8015330:	4603      	mov	r3, r0
 8015332:	75fb      	strb	r3, [r7, #23]
            break;
 8015334:	e05f      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	799b      	ldrb	r3, [r3, #6]
 801533a:	2b01      	cmp	r3, #1
 801533c:	d80d      	bhi.n	801535a <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801533e:	4a35      	ldr	r2, [pc, #212]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	685b      	ldr	r3, [r3, #4]
 8015344:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	6858      	ldr	r0, [r3, #4]
 801534c:	f001 fd7c 	bl	8016e48 <LoRaMacCryptoSetLrWanVersion>
 8015350:	4603      	mov	r3, r0
 8015352:	2b00      	cmp	r3, #0
 8015354:	d04e      	beq.n	80153f4 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015356:	2311      	movs	r3, #17
 8015358:	e058      	b.n	801540c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801535a:	2303      	movs	r3, #3
 801535c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801535e:	e049      	b.n	80153f4 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	685b      	ldr	r3, [r3, #4]
 8015364:	4a2b      	ldr	r2, [pc, #172]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 801536a:	e044      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	791a      	ldrb	r2, [r3, #4]
 8015370:	4b28      	ldr	r3, [pc, #160]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015372:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 8015376:	e03e      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	889a      	ldrh	r2, [r3, #4]
 801537c:	4b25      	ldr	r3, [pc, #148]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 801537e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 8015382:	e038      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	889a      	ldrh	r2, [r3, #4]
 8015388:	4b22      	ldr	r3, [pc, #136]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 801538a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 801538e:	e032      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	889a      	ldrh	r2, [r3, #4]
 8015394:	4b1f      	ldr	r3, [pc, #124]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015396:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 801539a:	e02c      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	889a      	ldrh	r2, [r3, #4]
 80153a0:	4b1c      	ldr	r3, [pc, #112]	; (8015414 <LoRaMacMibSetRequestConfirm+0x74c>)
 80153a2:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 80153a6:	e026      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80153a8:	2318      	movs	r3, #24
 80153aa:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80153ac:	e023      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80153ae:	2318      	movs	r3, #24
 80153b0:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80153b2:	e020      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80153b4:	6878      	ldr	r0, [r7, #4]
 80153b6:	f000 fca4 	bl	8015d02 <LoRaMacMibClassBSetRequestConfirm>
 80153ba:	4603      	mov	r3, r0
 80153bc:	75fb      	strb	r3, [r7, #23]
            break;
 80153be:	e01a      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153c0:	bf00      	nop
 80153c2:	e018      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153c4:	bf00      	nop
 80153c6:	e016      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153c8:	bf00      	nop
 80153ca:	e014      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153cc:	bf00      	nop
 80153ce:	e012      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153d0:	bf00      	nop
 80153d2:	e010      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153d4:	bf00      	nop
 80153d6:	e00e      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153d8:	bf00      	nop
 80153da:	e00c      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153dc:	bf00      	nop
 80153de:	e00a      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153e0:	bf00      	nop
 80153e2:	e008      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153e4:	bf00      	nop
 80153e6:	e006      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153e8:	bf00      	nop
 80153ea:	e004      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153ec:	bf00      	nop
 80153ee:	e002      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153f0:	bf00      	nop
 80153f2:	e000      	b.n	80153f6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153f4:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 80153f6:	7dfb      	ldrb	r3, [r7, #23]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d106      	bne.n	801540a <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80153fc:	4a06      	ldr	r2, [pc, #24]	; (8015418 <LoRaMacMibSetRequestConfirm+0x750>)
 80153fe:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8015402:	f043 0320 	orr.w	r3, r3, #32
 8015406:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 801540a:	7dfb      	ldrb	r3, [r7, #23]
}
 801540c:	4618      	mov	r0, r3
 801540e:	3718      	adds	r7, #24
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}
 8015414:	20000c54 	.word	0x20000c54
 8015418:	20000738 	.word	0x20000738

0801541c <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b08a      	sub	sp, #40	; 0x28
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015424:	2302      	movs	r3, #2
 8015426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801542a:	2300      	movs	r3, #0
 801542c:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d101      	bne.n	8015438 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015434:	2303      	movs	r3, #3
 8015436:	e17e      	b.n	8015736 <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2200      	movs	r2, #0
 801543c:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801543e:	f7fc fb85 	bl	8011b4c <LoRaMacIsBusy>
 8015442:	4603      	mov	r3, r0
 8015444:	2b00      	cmp	r3, #0
 8015446:	d001      	beq.n	801544c <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8015448:	2301      	movs	r3, #1
 801544a:	e174      	b.n	8015736 <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 801544c:	f001 f992 	bl	8016774 <LoRaMacConfirmQueueIsFull>
 8015450:	4603      	mov	r3, r0
 8015452:	2b00      	cmp	r3, #0
 8015454:	d001      	beq.n	801545a <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8015456:	2301      	movs	r3, #1
 8015458:	e16d      	b.n	8015736 <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801545a:	f001 f97f 	bl	801675c <LoRaMacConfirmQueueGetCnt>
 801545e:	4603      	mov	r3, r0
 8015460:	2b00      	cmp	r3, #0
 8015462:	d104      	bne.n	801546e <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8015464:	2214      	movs	r2, #20
 8015466:	2100      	movs	r1, #0
 8015468:	48b5      	ldr	r0, [pc, #724]	; (8015740 <LoRaMacMlmeRequest+0x324>)
 801546a:	f006 f9c5 	bl	801b7f8 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801546e:	4bb5      	ldr	r3, [pc, #724]	; (8015744 <LoRaMacMlmeRequest+0x328>)
 8015470:	2201      	movs	r2, #1
 8015472:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8015476:	4ab3      	ldr	r2, [pc, #716]	; (8015744 <LoRaMacMlmeRequest+0x328>)
 8015478:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801547c:	f043 0304 	orr.w	r3, r3, #4
 8015480:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	781b      	ldrb	r3, [r3, #0]
 8015488:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801548c:	2301      	movs	r3, #1
 801548e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8015492:	2300      	movs	r3, #0
 8015494:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8015498:	2300      	movs	r3, #0
 801549a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	781b      	ldrb	r3, [r3, #0]
 80154a2:	3b01      	subs	r3, #1
 80154a4:	2b0c      	cmp	r3, #12
 80154a6:	f200 811a 	bhi.w	80156de <LoRaMacMlmeRequest+0x2c2>
 80154aa:	a201      	add	r2, pc, #4	; (adr r2, 80154b0 <LoRaMacMlmeRequest+0x94>)
 80154ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154b0:	080154e5 	.word	0x080154e5
 80154b4:	080156df 	.word	0x080156df
 80154b8:	080156df 	.word	0x080156df
 80154bc:	080156df 	.word	0x080156df
 80154c0:	080155c3 	.word	0x080155c3
 80154c4:	080155e7 	.word	0x080155e7
 80154c8:	080156df 	.word	0x080156df
 80154cc:	080156df 	.word	0x080156df
 80154d0:	08015605 	.word	0x08015605
 80154d4:	080156df 	.word	0x080156df
 80154d8:	080156ad 	.word	0x080156ad
 80154dc:	08015641 	.word	0x08015641
 80154e0:	0801568b 	.word	0x0801568b
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80154e4:	4b97      	ldr	r3, [pc, #604]	; (8015744 <LoRaMacMlmeRequest+0x328>)
 80154e6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80154ea:	f003 0320 	and.w	r3, r3, #32
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d001      	beq.n	80154f6 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 80154f2:	2301      	movs	r3, #1
 80154f4:	e11f      	b.n	8015736 <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	791b      	ldrb	r3, [r3, #4]
 80154fa:	2b02      	cmp	r3, #2
 80154fc:	d135      	bne.n	801556a <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 80154fe:	2000      	movs	r0, #0
 8015500:	f7fe f8b4 	bl	801366c <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8015504:	4b90      	ldr	r3, [pc, #576]	; (8015748 <LoRaMacMlmeRequest+0x32c>)
 8015506:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	795b      	ldrb	r3, [r3, #5]
 801550e:	b25b      	sxtb	r3, r3
 8015510:	2200      	movs	r2, #0
 8015512:	4619      	mov	r1, r3
 8015514:	f002 fcca 	bl	8017eac <RegionAlternateDr>
 8015518:	4603      	mov	r3, r0
 801551a:	461a      	mov	r2, r3
 801551c:	4b8a      	ldr	r3, [pc, #552]	; (8015748 <LoRaMacMlmeRequest+0x32c>)
 801551e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8015528:	4b87      	ldr	r3, [pc, #540]	; (8015748 <LoRaMacMlmeRequest+0x32c>)
 801552a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801552e:	2307      	movs	r3, #7
 8015530:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 8015534:	20ff      	movs	r0, #255	; 0xff
 8015536:	f7fd fe1d 	bl	8013174 <SendReJoinReq>
 801553a:	4603      	mov	r3, r0
 801553c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8015540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015544:	2b00      	cmp	r3, #0
 8015546:	f000 80cc 	beq.w	80156e2 <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 801554a:	4b7f      	ldr	r3, [pc, #508]	; (8015748 <LoRaMacMlmeRequest+0x32c>)
 801554c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	795b      	ldrb	r3, [r3, #5]
 8015554:	b25b      	sxtb	r3, r3
 8015556:	2201      	movs	r2, #1
 8015558:	4619      	mov	r1, r3
 801555a:	f002 fca7 	bl	8017eac <RegionAlternateDr>
 801555e:	4603      	mov	r3, r0
 8015560:	461a      	mov	r2, r3
 8015562:	4b79      	ldr	r3, [pc, #484]	; (8015748 <LoRaMacMlmeRequest+0x32c>)
 8015564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8015568:	e0bb      	b.n	80156e2 <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	791b      	ldrb	r3, [r3, #4]
 801556e:	2b01      	cmp	r3, #1
 8015570:	f040 80b7 	bne.w	80156e2 <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8015574:	4b74      	ldr	r3, [pc, #464]	; (8015748 <LoRaMacMlmeRequest+0x32c>)
 8015576:	2200      	movs	r2, #0
 8015578:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801557c:	2302      	movs	r3, #2
 801557e:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8015580:	4b71      	ldr	r3, [pc, #452]	; (8015748 <LoRaMacMlmeRequest+0x32c>)
 8015582:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015586:	f107 020c 	add.w	r2, r7, #12
 801558a:	4611      	mov	r1, r2
 801558c:	4618      	mov	r0, r3
 801558e:	f002 fb2b 	bl	8017be8 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	791a      	ldrb	r2, [r3, #4]
 8015596:	4b6c      	ldr	r3, [pc, #432]	; (8015748 <LoRaMacMlmeRequest+0x32c>)
 8015598:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801559c:	2300      	movs	r3, #0
 801559e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 80155a2:	2301      	movs	r3, #1
 80155a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 80155a8:	f7fe fdb2 	bl	8014110 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80155ac:	4a65      	ldr	r2, [pc, #404]	; (8015744 <LoRaMacMlmeRequest+0x328>)
 80155ae:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80155b2:	f043 0310 	orr.w	r3, r3, #16
 80155b6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 80155ba:	2300      	movs	r3, #0
 80155bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80155c0:	e08f      	b.n	80156e2 <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80155c2:	2300      	movs	r3, #0
 80155c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80155c8:	f107 031c 	add.w	r3, r7, #28
 80155cc:	2200      	movs	r2, #0
 80155ce:	4619      	mov	r1, r3
 80155d0:	2002      	movs	r0, #2
 80155d2:	f000 fd1f 	bl	8016014 <LoRaMacCommandsAddCmd>
 80155d6:	4603      	mov	r3, r0
 80155d8:	2b00      	cmp	r3, #0
 80155da:	f000 8084 	beq.w	80156e6 <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80155de:	2313      	movs	r3, #19
 80155e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80155e4:	e07f      	b.n	80156e6 <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	8898      	ldrh	r0, [r3, #4]
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	6899      	ldr	r1, [r3, #8]
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80155f4:	b2db      	uxtb	r3, r3
 80155f6:	461a      	mov	r2, r3
 80155f8:	f7fe fbba 	bl	8013d70 <SetTxContinuousWave>
 80155fc:	4603      	mov	r3, r0
 80155fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8015602:	e077      	b.n	80156f4 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015604:	2300      	movs	r3, #0
 8015606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 801560a:	f107 0308 	add.w	r3, r7, #8
 801560e:	4619      	mov	r1, r3
 8015610:	200d      	movs	r0, #13
 8015612:	f000 fd7f 	bl	8016114 <LoRaMacCommandsGetCmd>
 8015616:	4603      	mov	r3, r0
 8015618:	2b00      	cmp	r3, #0
 801561a:	d103      	bne.n	8015624 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 801561c:	2300      	movs	r3, #0
 801561e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8015622:	e062      	b.n	80156ea <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015624:	f107 031c 	add.w	r3, r7, #28
 8015628:	2200      	movs	r2, #0
 801562a:	4619      	mov	r1, r3
 801562c:	200d      	movs	r0, #13
 801562e:	f000 fcf1 	bl	8016014 <LoRaMacCommandsAddCmd>
 8015632:	4603      	mov	r3, r0
 8015634:	2b00      	cmp	r3, #0
 8015636:	d058      	beq.n	80156ea <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015638:	2313      	movs	r3, #19
 801563a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 801563e:	e054      	b.n	80156ea <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8015640:	4b41      	ldr	r3, [pc, #260]	; (8015748 <LoRaMacMlmeRequest+0x32c>)
 8015642:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8015646:	2b00      	cmp	r3, #0
 8015648:	d151      	bne.n	80156ee <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	791b      	ldrb	r3, [r3, #4]
 801564e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	791b      	ldrb	r3, [r3, #4]
 8015656:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801565a:	b2db      	uxtb	r3, r3
 801565c:	4618      	mov	r0, r3
 801565e:	f000 fb25 	bl	8015cac <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8015662:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015666:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8015668:	2300      	movs	r3, #0
 801566a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801566e:	f107 031c 	add.w	r3, r7, #28
 8015672:	2201      	movs	r2, #1
 8015674:	4619      	mov	r1, r3
 8015676:	2010      	movs	r0, #16
 8015678:	f000 fccc 	bl	8016014 <LoRaMacCommandsAddCmd>
 801567c:	4603      	mov	r3, r0
 801567e:	2b00      	cmp	r3, #0
 8015680:	d035      	beq.n	80156ee <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015682:	2313      	movs	r3, #19
 8015684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8015688:	e031      	b.n	80156ee <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801568a:	2300      	movs	r3, #0
 801568c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015690:	f107 031c 	add.w	r3, r7, #28
 8015694:	2200      	movs	r2, #0
 8015696:	4619      	mov	r1, r3
 8015698:	2012      	movs	r0, #18
 801569a:	f000 fcbb 	bl	8016014 <LoRaMacCommandsAddCmd>
 801569e:	4603      	mov	r3, r0
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d026      	beq.n	80156f2 <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80156a4:	2313      	movs	r3, #19
 80156a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80156aa:	e022      	b.n	80156f2 <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80156ac:	2301      	movs	r3, #1
 80156ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80156b2:	f000 fab1 	bl	8015c18 <LoRaMacClassBIsAcquisitionInProgress>
 80156b6:	4603      	mov	r3, r0
 80156b8:	f083 0301 	eor.w	r3, r3, #1
 80156bc:	b2db      	uxtb	r3, r3
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d009      	beq.n	80156d6 <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80156c2:	2000      	movs	r0, #0
 80156c4:	f000 fa8a 	bl	8015bdc <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80156c8:	2000      	movs	r0, #0
 80156ca:	f000 faac 	bl	8015c26 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80156ce:	2300      	movs	r3, #0
 80156d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80156d4:	e00e      	b.n	80156f4 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 80156d6:	2301      	movs	r3, #1
 80156d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80156dc:	e00a      	b.n	80156f4 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 80156de:	bf00      	nop
 80156e0:	e008      	b.n	80156f4 <LoRaMacMlmeRequest+0x2d8>
            break;
 80156e2:	bf00      	nop
 80156e4:	e006      	b.n	80156f4 <LoRaMacMlmeRequest+0x2d8>
            break;
 80156e6:	bf00      	nop
 80156e8:	e004      	b.n	80156f4 <LoRaMacMlmeRequest+0x2d8>
            break;
 80156ea:	bf00      	nop
 80156ec:	e002      	b.n	80156f4 <LoRaMacMlmeRequest+0x2d8>
            break;
 80156ee:	bf00      	nop
 80156f0:	e000      	b.n	80156f4 <LoRaMacMlmeRequest+0x2d8>
            break;
 80156f2:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80156f4:	4b13      	ldr	r3, [pc, #76]	; (8015744 <LoRaMacMlmeRequest+0x328>)
 80156f6:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80156fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015702:	2b00      	cmp	r3, #0
 8015704:	d010      	beq.n	8015728 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8015706:	f001 f829 	bl	801675c <LoRaMacConfirmQueueGetCnt>
 801570a:	4603      	mov	r3, r0
 801570c:	2b00      	cmp	r3, #0
 801570e:	d110      	bne.n	8015732 <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 8015710:	4b0c      	ldr	r3, [pc, #48]	; (8015744 <LoRaMacMlmeRequest+0x328>)
 8015712:	2200      	movs	r2, #0
 8015714:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8015718:	4a0a      	ldr	r2, [pc, #40]	; (8015744 <LoRaMacMlmeRequest+0x328>)
 801571a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801571e:	f36f 0382 	bfc	r3, #2, #1
 8015722:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8015726:	e004      	b.n	8015732 <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8015728:	f107 0320 	add.w	r3, r7, #32
 801572c:	4618      	mov	r0, r3
 801572e:	f000 fec1 	bl	80164b4 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8015732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8015736:	4618      	mov	r0, r3
 8015738:	3728      	adds	r7, #40	; 0x28
 801573a:	46bd      	mov	sp, r7
 801573c:	bd80      	pop	{r7, pc}
 801573e:	bf00      	nop
 8015740:	20000b8c 	.word	0x20000b8c
 8015744:	20000738 	.word	0x20000738
 8015748:	20000c54 	.word	0x20000c54

0801574c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 801574c:	b5b0      	push	{r4, r5, r7, lr}
 801574e:	b092      	sub	sp, #72	; 0x48
 8015750:	af02      	add	r7, sp, #8
 8015752:	6078      	str	r0, [r7, #4]
 8015754:	460b      	mov	r3, r1
 8015756:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015758:	2302      	movs	r3, #2
 801575a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801575e:	2300      	movs	r3, #0
 8015760:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 8015764:	2300      	movs	r3, #0
 8015766:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8015768:	2300      	movs	r3, #0
 801576a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 801576e:	2300      	movs	r3, #0
 8015770:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d101      	bne.n	801577e <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801577a:	2303      	movs	r3, #3
 801577c:	e113      	b.n	80159a6 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	2200      	movs	r2, #0
 8015782:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8015784:	f7fc f9e2 	bl	8011b4c <LoRaMacIsBusy>
 8015788:	4603      	mov	r3, r0
 801578a:	2b00      	cmp	r3, #0
 801578c:	d001      	beq.n	8015792 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 801578e:	2301      	movs	r3, #1
 8015790:	e109      	b.n	80159a6 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f107 040c 	add.w	r4, r7, #12
 8015798:	461d      	mov	r5, r3
 801579a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801579c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801579e:	682b      	ldr	r3, [r5, #0]
 80157a0:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80157a2:	2300      	movs	r3, #0
 80157a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80157a8:	2214      	movs	r2, #20
 80157aa:	2100      	movs	r1, #0
 80157ac:	4880      	ldr	r0, [pc, #512]	; (80159b0 <LoRaMacMcpsRequest+0x264>)
 80157ae:	f006 f823 	bl	801b7f8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80157b2:	4b80      	ldr	r3, [pc, #512]	; (80159b4 <LoRaMacMcpsRequest+0x268>)
 80157b4:	2201      	movs	r2, #1
 80157b6:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80157ba:	4b7f      	ldr	r3, [pc, #508]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 80157bc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80157c0:	2b02      	cmp	r3, #2
 80157c2:	d111      	bne.n	80157e8 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80157c4:	4b7c      	ldr	r3, [pc, #496]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 80157c6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80157ca:	2b02      	cmp	r3, #2
 80157cc:	d10c      	bne.n	80157e8 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80157ce:	4b7a      	ldr	r3, [pc, #488]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 80157d0:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 80157d4:	f083 0301 	eor.w	r3, r3, #1
 80157d8:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d004      	beq.n	80157e8 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 80157de:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d101      	bne.n	80157e8 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 80157e4:	2301      	movs	r3, #1
 80157e6:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 80157e8:	7b3b      	ldrb	r3, [r7, #12]
 80157ea:	2b03      	cmp	r3, #3
 80157ec:	d030      	beq.n	8015850 <LoRaMacMcpsRequest+0x104>
 80157ee:	2b03      	cmp	r3, #3
 80157f0:	dc3f      	bgt.n	8015872 <LoRaMacMcpsRequest+0x126>
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d002      	beq.n	80157fc <LoRaMacMcpsRequest+0xb0>
 80157f6:	2b01      	cmp	r3, #1
 80157f8:	d015      	beq.n	8015826 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80157fa:	e03a      	b.n	8015872 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 80157fc:	2301      	movs	r3, #1
 80157fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8015802:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015806:	2202      	movs	r2, #2
 8015808:	f362 1347 	bfi	r3, r2, #5, #3
 801580c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8015810:	7c3b      	ldrb	r3, [r7, #16]
 8015812:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8015816:	697b      	ldr	r3, [r7, #20]
 8015818:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 801581a:	8b3b      	ldrh	r3, [r7, #24]
 801581c:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 801581e:	7ebb      	ldrb	r3, [r7, #26]
 8015820:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8015824:	e026      	b.n	8015874 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8015826:	2301      	movs	r3, #1
 8015828:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 801582c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015830:	2204      	movs	r2, #4
 8015832:	f362 1347 	bfi	r3, r2, #5, #3
 8015836:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 801583a:	7c3b      	ldrb	r3, [r7, #16]
 801583c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8015844:	8b3b      	ldrh	r3, [r7, #24]
 8015846:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8015848:	7ebb      	ldrb	r3, [r7, #26]
 801584a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801584e:	e011      	b.n	8015874 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8015850:	2301      	movs	r3, #1
 8015852:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8015856:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801585a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 801585e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8015862:	693b      	ldr	r3, [r7, #16]
 8015864:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8015866:	8abb      	ldrh	r3, [r7, #20]
 8015868:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 801586a:	7dbb      	ldrb	r3, [r7, #22]
 801586c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8015870:	e000      	b.n	8015874 <LoRaMacMcpsRequest+0x128>
            break;
 8015872:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015874:	2302      	movs	r3, #2
 8015876:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801587a:	4b4f      	ldr	r3, [pc, #316]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 801587c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015880:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015884:	4b4c      	ldr	r3, [pc, #304]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 8015886:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801588a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801588e:	4611      	mov	r1, r2
 8015890:	4618      	mov	r0, r3
 8015892:	f002 f971 	bl	8017b78 <RegionGetPhyParam>
 8015896:	4603      	mov	r3, r0
 8015898:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801589c:	b25b      	sxtb	r3, r3
 801589e:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 80158a2:	4293      	cmp	r3, r2
 80158a4:	bfb8      	it	lt
 80158a6:	4613      	movlt	r3, r2
 80158a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80158ac:	4b42      	ldr	r3, [pc, #264]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 80158ae:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80158b2:	4a41      	ldr	r2, [pc, #260]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 80158b4:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 80158b8:	4a3f      	ldr	r2, [pc, #252]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 80158ba:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 80158be:	4618      	mov	r0, r3
 80158c0:	f7fc fae0 	bl	8011e84 <CheckForMinimumAbpDatarate>
 80158c4:	4603      	mov	r3, r0
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d002      	beq.n	80158d0 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 80158ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 80158d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d05f      	beq.n	8015998 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 80158d8:	4b37      	ldr	r3, [pc, #220]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 80158da:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80158de:	f083 0301 	eor.w	r3, r3, #1
 80158e2:	b2db      	uxtb	r3, r3
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d10e      	bne.n	8015906 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80158e8:	4b33      	ldr	r3, [pc, #204]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 80158ea:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80158ee:	4a32      	ldr	r2, [pc, #200]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 80158f0:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 80158f4:	4a30      	ldr	r2, [pc, #192]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 80158f6:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 80158fa:	4618      	mov	r0, r3
 80158fc:	f7fc fac2 	bl	8011e84 <CheckForMinimumAbpDatarate>
 8015900:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8015902:	2b00      	cmp	r3, #0
 8015904:	d01c      	beq.n	8015940 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8015906:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801590a:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801590e:	4b2a      	ldr	r3, [pc, #168]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 8015910:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015918:	4b27      	ldr	r3, [pc, #156]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 801591a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801591e:	f107 0120 	add.w	r1, r7, #32
 8015922:	2205      	movs	r2, #5
 8015924:	4618      	mov	r0, r3
 8015926:	f002 f977 	bl	8017c18 <RegionVerify>
 801592a:	4603      	mov	r3, r0
 801592c:	2b00      	cmp	r3, #0
 801592e:	d005      	beq.n	801593c <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015930:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8015934:	4b20      	ldr	r3, [pc, #128]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 8015936:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 801593a:	e001      	b.n	8015940 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 801593c:	2303      	movs	r3, #3
 801593e:	e032      	b.n	80159a6 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8015940:	4b1d      	ldr	r3, [pc, #116]	; (80159b8 <LoRaMacMcpsRequest+0x26c>)
 8015942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015946:	4a1b      	ldr	r2, [pc, #108]	; (80159b4 <LoRaMacMcpsRequest+0x268>)
 8015948:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 801594c:	4611      	mov	r1, r2
 801594e:	4618      	mov	r0, r3
 8015950:	f7fc fb84 	bl	801205c <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8015954:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015956:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 801595a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801595e:	78fb      	ldrb	r3, [r7, #3]
 8015960:	9300      	str	r3, [sp, #0]
 8015962:	4613      	mov	r3, r2
 8015964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015966:	f7fd fb23 	bl	8012fb0 <Send>
 801596a:	4603      	mov	r3, r0
 801596c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 8015970:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015974:	2b00      	cmp	r3, #0
 8015976:	d10b      	bne.n	8015990 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8015978:	7b3a      	ldrb	r2, [r7, #12]
 801597a:	4b0e      	ldr	r3, [pc, #56]	; (80159b4 <LoRaMacMcpsRequest+0x268>)
 801597c:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8015980:	4a0c      	ldr	r2, [pc, #48]	; (80159b4 <LoRaMacMcpsRequest+0x268>)
 8015982:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8015986:	f043 0301 	orr.w	r3, r3, #1
 801598a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 801598e:	e003      	b.n	8015998 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8015990:	4b08      	ldr	r3, [pc, #32]	; (80159b4 <LoRaMacMcpsRequest+0x268>)
 8015992:	2200      	movs	r2, #0
 8015994:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015998:	4b06      	ldr	r3, [pc, #24]	; (80159b4 <LoRaMacMcpsRequest+0x268>)
 801599a:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	611a      	str	r2, [r3, #16]

    return status;
 80159a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80159a6:	4618      	mov	r0, r3
 80159a8:	3740      	adds	r7, #64	; 0x40
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bdb0      	pop	{r4, r5, r7, pc}
 80159ae:	bf00      	nop
 80159b0:	20000b78 	.word	0x20000b78
 80159b4:	20000738 	.word	0x20000738
 80159b8:	20000c54 	.word	0x20000c54

080159bc <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b084      	sub	sp, #16
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	4603      	mov	r3, r0
 80159c4:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80159c6:	79fb      	ldrb	r3, [r7, #7]
 80159c8:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80159ca:	4b0d      	ldr	r3, [pc, #52]	; (8015a00 <LoRaMacTestSetDutyCycleOn+0x44>)
 80159cc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80159d0:	f107 010c 	add.w	r1, r7, #12
 80159d4:	220f      	movs	r2, #15
 80159d6:	4618      	mov	r0, r3
 80159d8:	f002 f91e 	bl	8017c18 <RegionVerify>
 80159dc:	4603      	mov	r3, r0
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d00a      	beq.n	80159f8 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80159e2:	4a07      	ldr	r2, [pc, #28]	; (8015a00 <LoRaMacTestSetDutyCycleOn+0x44>)
 80159e4:	79fb      	ldrb	r3, [r7, #7]
 80159e6:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80159ea:	4a06      	ldr	r2, [pc, #24]	; (8015a04 <LoRaMacTestSetDutyCycleOn+0x48>)
 80159ec:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80159f0:	f043 0320 	orr.w	r3, r3, #32
 80159f4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 80159f8:	bf00      	nop
 80159fa:	3710      	adds	r7, #16
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}
 8015a00:	20000c54 	.word	0x20000c54
 8015a04:	20000738 	.word	0x20000738

08015a08 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8015a0c:	f7fe fe94 	bl	8014738 <LoRaMacStop>
 8015a10:	4603      	mov	r3, r0
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d112      	bne.n	8015a3c <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8015a16:	480b      	ldr	r0, [pc, #44]	; (8015a44 <LoRaMacDeInitialization+0x3c>)
 8015a18:	f009 ff12 	bl	801f840 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8015a1c:	480a      	ldr	r0, [pc, #40]	; (8015a48 <LoRaMacDeInitialization+0x40>)
 8015a1e:	f009 ff0f 	bl	801f840 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8015a22:	480a      	ldr	r0, [pc, #40]	; (8015a4c <LoRaMacDeInitialization+0x44>)
 8015a24:	f009 ff0c 	bl	801f840 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8015a28:	f000 f94a 	bl	8015cc0 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8015a2c:	2000      	movs	r0, #0
 8015a2e:	f7fd fe1d 	bl	801366c <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8015a32:	4b07      	ldr	r3, [pc, #28]	; (8015a50 <LoRaMacDeInitialization+0x48>)
 8015a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a36:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	e000      	b.n	8015a3e <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8015a3c:	2301      	movs	r3, #1
    }
}
 8015a3e:	4618      	mov	r0, r3
 8015a40:	bd80      	pop	{r7, pc}
 8015a42:	bf00      	nop
 8015a44:	20000aa0 	.word	0x20000aa0
 8015a48:	20000ab8 	.word	0x20000ab8
 8015a4c:	20000ad0 	.word	0x20000ad0
 8015a50:	08021f7c 	.word	0x08021f7c

08015a54 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b08c      	sub	sp, #48	; 0x30
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	60f8      	str	r0, [r7, #12]
 8015a5c:	60b9      	str	r1, [r7, #8]
 8015a5e:	607a      	str	r2, [r7, #4]
 8015a60:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8015a62:	2300      	movs	r3, #0
 8015a64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	7b1b      	ldrb	r3, [r3, #12]
 8015a6c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	7b5b      	ldrb	r3, [r3, #13]
 8015a74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	7b9b      	ldrb	r3, [r3, #14]
 8015a7c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	685a      	ldr	r2, [r3, #4]
 8015a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a86:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	785b      	ldrb	r3, [r3, #1]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	f000 8088 	beq.w	8015ba2 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8015a92:	2302      	movs	r3, #2
 8015a94:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	7bdb      	ldrb	r3, [r3, #15]
 8015a9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	7c1b      	ldrb	r3, [r3, #16]
 8015aa4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015aa8:	4611      	mov	r1, r2
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f002 f864 	bl	8017b78 <RegionGetPhyParam>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8015ab4:	6a3b      	ldr	r3, [r7, #32]
 8015ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8015aba:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 8015abe:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8015ac2:	4293      	cmp	r3, r2
 8015ac4:	bfb8      	it	lt
 8015ac6:	4613      	movlt	r3, r2
 8015ac8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	685b      	ldr	r3, [r3, #4]
 8015ad0:	68fa      	ldr	r2, [r7, #12]
 8015ad2:	8912      	ldrh	r2, [r2, #8]
 8015ad4:	4293      	cmp	r3, r2
 8015ad6:	d302      	bcc.n	8015ade <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8015ad8:	2301      	movs	r3, #1
 8015ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	685b      	ldr	r3, [r3, #4]
 8015ae2:	68fa      	ldr	r2, [r7, #12]
 8015ae4:	8912      	ldrh	r2, [r2, #8]
 8015ae6:	4611      	mov	r1, r2
 8015ae8:	68fa      	ldr	r2, [r7, #12]
 8015aea:	8952      	ldrh	r2, [r2, #10]
 8015aec:	440a      	add	r2, r1
 8015aee:	4293      	cmp	r3, r2
 8015af0:	d30f      	bcc.n	8015b12 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8015af2:	230a      	movs	r3, #10
 8015af4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	7c1b      	ldrb	r3, [r3, #16]
 8015afc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015b00:	4611      	mov	r1, r2
 8015b02:	4618      	mov	r0, r3
 8015b04:	f002 f838 	bl	8017b78 <RegionGetPhyParam>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8015b0c:	6a3b      	ldr	r3, [r7, #32]
 8015b0e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	685b      	ldr	r3, [r3, #4]
 8015b16:	68fa      	ldr	r2, [r7, #12]
 8015b18:	8912      	ldrh	r2, [r2, #8]
 8015b1a:	4611      	mov	r1, r2
 8015b1c:	68fa      	ldr	r2, [r7, #12]
 8015b1e:	8952      	ldrh	r2, [r2, #10]
 8015b20:	0052      	lsls	r2, r2, #1
 8015b22:	440a      	add	r2, r1
 8015b24:	4293      	cmp	r3, r2
 8015b26:	d33c      	bcc.n	8015ba2 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	685b      	ldr	r3, [r3, #4]
 8015b2c:	68fa      	ldr	r2, [r7, #12]
 8015b2e:	8912      	ldrh	r2, [r2, #8]
 8015b30:	1a9b      	subs	r3, r3, r2
 8015b32:	68fa      	ldr	r2, [r7, #12]
 8015b34:	8952      	ldrh	r2, [r2, #10]
 8015b36:	fbb3 f1f2 	udiv	r1, r3, r2
 8015b3a:	fb01 f202 	mul.w	r2, r1, r2
 8015b3e:	1a9b      	subs	r3, r3, r2
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d12e      	bne.n	8015ba2 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8015b44:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015b48:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015b4c:	429a      	cmp	r2, r3
 8015b4e:	d110      	bne.n	8015b72 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	781b      	ldrb	r3, [r3, #0]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d009      	beq.n	8015b6c <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015b58:	2302      	movs	r3, #2
 8015b5a:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	7c1b      	ldrb	r3, [r3, #16]
 8015b60:	f107 0210 	add.w	r2, r7, #16
 8015b64:	4611      	mov	r1, r2
 8015b66:	4618      	mov	r0, r3
 8015b68:	f002 f83e 	bl	8017be8 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8015b6c:	2301      	movs	r3, #1
 8015b6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8015b72:	2321      	movs	r3, #33	; 0x21
 8015b74:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 8015b78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015b7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	7bdb      	ldrb	r3, [r3, #15]
 8015b84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	7c1b      	ldrb	r3, [r3, #16]
 8015b8c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015b90:	4611      	mov	r1, r2
 8015b92:	4618      	mov	r0, r3
 8015b94:	f001 fff0 	bl	8017b78 <RegionGetPhyParam>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8015b9c:	6a3b      	ldr	r3, [r7, #32]
 8015b9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 8015ba2:	68bb      	ldr	r3, [r7, #8]
 8015ba4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8015ba8:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015bb0:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015bb8:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8015bba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	3730      	adds	r7, #48	; 0x30
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}

08015bc6 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8015bc6:	b480      	push	{r7}
 8015bc8:	b085      	sub	sp, #20
 8015bca:	af00      	add	r7, sp, #0
 8015bcc:	60f8      	str	r0, [r7, #12]
 8015bce:	60b9      	str	r1, [r7, #8]
 8015bd0:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015bd2:	bf00      	nop
 8015bd4:	3714      	adds	r7, #20
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	bc80      	pop	{r7}
 8015bda:	4770      	bx	lr

08015bdc <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8015bdc:	b480      	push	{r7}
 8015bde:	b083      	sub	sp, #12
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	4603      	mov	r3, r0
 8015be4:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015be6:	bf00      	nop
 8015be8:	370c      	adds	r7, #12
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bc80      	pop	{r7}
 8015bee:	4770      	bx	lr

08015bf0 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8015bf0:	b480      	push	{r7}
 8015bf2:	b083      	sub	sp, #12
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015bfa:	bf00      	nop
 8015bfc:	370c      	adds	r7, #12
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bc80      	pop	{r7}
 8015c02:	4770      	bx	lr

08015c04 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8015c04:	b480      	push	{r7}
 8015c06:	b083      	sub	sp, #12
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c0e:	bf00      	nop
 8015c10:	370c      	adds	r7, #12
 8015c12:	46bd      	mov	sp, r7
 8015c14:	bc80      	pop	{r7}
 8015c16:	4770      	bx	lr

08015c18 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8015c18:	b480      	push	{r7}
 8015c1a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8015c1c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c1e:	4618      	mov	r0, r3
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bc80      	pop	{r7}
 8015c24:	4770      	bx	lr

08015c26 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8015c26:	b480      	push	{r7}
 8015c28:	b083      	sub	sp, #12
 8015c2a:	af00      	add	r7, sp, #0
 8015c2c:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c2e:	bf00      	nop
 8015c30:	370c      	adds	r7, #12
 8015c32:	46bd      	mov	sp, r7
 8015c34:	bc80      	pop	{r7}
 8015c36:	4770      	bx	lr

08015c38 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8015c38:	b480      	push	{r7}
 8015c3a:	b083      	sub	sp, #12
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c40:	bf00      	nop
 8015c42:	370c      	adds	r7, #12
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bc80      	pop	{r7}
 8015c48:	4770      	bx	lr

08015c4a <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8015c4a:	b480      	push	{r7}
 8015c4c:	b083      	sub	sp, #12
 8015c4e:	af00      	add	r7, sp, #0
 8015c50:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c52:	bf00      	nop
 8015c54:	370c      	adds	r7, #12
 8015c56:	46bd      	mov	sp, r7
 8015c58:	bc80      	pop	{r7}
 8015c5a:	4770      	bx	lr

08015c5c <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8015c5c:	b480      	push	{r7}
 8015c5e:	b083      	sub	sp, #12
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	6078      	str	r0, [r7, #4]
 8015c64:	460b      	mov	r3, r1
 8015c66:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8015c68:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	370c      	adds	r7, #12
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bc80      	pop	{r7}
 8015c72:	4770      	bx	lr

08015c74 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8015c74:	b480      	push	{r7}
 8015c76:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015c78:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	bc80      	pop	{r7}
 8015c80:	4770      	bx	lr

08015c82 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8015c82:	b480      	push	{r7}
 8015c84:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015c86:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bc80      	pop	{r7}
 8015c8e:	4770      	bx	lr

08015c90 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8015c90:	b480      	push	{r7}
 8015c92:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015c94:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c96:	4618      	mov	r0, r3
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	bc80      	pop	{r7}
 8015c9c:	4770      	bx	lr

08015c9e <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8015c9e:	b480      	push	{r7}
 8015ca0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015ca2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bc80      	pop	{r7}
 8015caa:	4770      	bx	lr

08015cac <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8015cac:	b480      	push	{r7}
 8015cae:	b083      	sub	sp, #12
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015cb6:	bf00      	nop
 8015cb8:	370c      	adds	r7, #12
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	bc80      	pop	{r7}
 8015cbe:	4770      	bx	lr

08015cc0 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8015cc0:	b480      	push	{r7}
 8015cc2:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015cc4:	bf00      	nop
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	bc80      	pop	{r7}
 8015cca:	4770      	bx	lr

08015ccc <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8015ccc:	b480      	push	{r7}
 8015cce:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015cd0:	bf00      	nop
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bc80      	pop	{r7}
 8015cd6:	4770      	bx	lr

08015cd8 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8015cd8:	b480      	push	{r7}
 8015cda:	b083      	sub	sp, #12
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	4603      	mov	r3, r0
 8015ce0:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015ce2:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	370c      	adds	r7, #12
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bc80      	pop	{r7}
 8015cec:	4770      	bx	lr

08015cee <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8015cee:	b480      	push	{r7}
 8015cf0:	b083      	sub	sp, #12
 8015cf2:	af00      	add	r7, sp, #0
 8015cf4:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015cf6:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	370c      	adds	r7, #12
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bc80      	pop	{r7}
 8015d00:	4770      	bx	lr

08015d02 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8015d02:	b480      	push	{r7}
 8015d04:	b083      	sub	sp, #12
 8015d06:	af00      	add	r7, sp, #0
 8015d08:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015d0a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	370c      	adds	r7, #12
 8015d10:	46bd      	mov	sp, r7
 8015d12:	bc80      	pop	{r7}
 8015d14:	4770      	bx	lr

08015d16 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8015d16:	b480      	push	{r7}
 8015d18:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d1a:	bf00      	nop
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	bc80      	pop	{r7}
 8015d20:	4770      	bx	lr

08015d22 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8015d22:	b480      	push	{r7}
 8015d24:	b083      	sub	sp, #12
 8015d26:	af00      	add	r7, sp, #0
 8015d28:	4603      	mov	r3, r0
 8015d2a:	6039      	str	r1, [r7, #0]
 8015d2c:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8015d2e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d30:	4618      	mov	r0, r3
 8015d32:	370c      	adds	r7, #12
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bc80      	pop	{r7}
 8015d38:	4770      	bx	lr

08015d3a <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8015d3a:	b480      	push	{r7}
 8015d3c:	b083      	sub	sp, #12
 8015d3e:	af00      	add	r7, sp, #0
 8015d40:	4603      	mov	r3, r0
 8015d42:	603a      	str	r2, [r7, #0]
 8015d44:	80fb      	strh	r3, [r7, #6]
 8015d46:	460b      	mov	r3, r1
 8015d48:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d4a:	bf00      	nop
 8015d4c:	370c      	adds	r7, #12
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	bc80      	pop	{r7}
 8015d52:	4770      	bx	lr

08015d54 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8015d54:	b480      	push	{r7}
 8015d56:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d58:	bf00      	nop
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bc80      	pop	{r7}
 8015d5e:	4770      	bx	lr

08015d60 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8015d60:	b480      	push	{r7}
 8015d62:	b083      	sub	sp, #12
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8015d68:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	370c      	adds	r7, #12
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bc80      	pop	{r7}
 8015d72:	4770      	bx	lr

08015d74 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8015d74:	b480      	push	{r7}
 8015d76:	b083      	sub	sp, #12
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8015d7c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	370c      	adds	r7, #12
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bc80      	pop	{r7}
 8015d86:	4770      	bx	lr

08015d88 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8015d88:	b480      	push	{r7}
 8015d8a:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d8c:	bf00      	nop
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bc80      	pop	{r7}
 8015d92:	4770      	bx	lr

08015d94 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8015d94:	b480      	push	{r7}
 8015d96:	b083      	sub	sp, #12
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
 8015d9c:	460b      	mov	r3, r1
 8015d9e:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015da0:	bf00      	nop
 8015da2:	370c      	adds	r7, #12
 8015da4:	46bd      	mov	sp, r7
 8015da6:	bc80      	pop	{r7}
 8015da8:	4770      	bx	lr

08015daa <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8015daa:	b480      	push	{r7}
 8015dac:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015dae:	bf00      	nop
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bc80      	pop	{r7}
 8015db4:	4770      	bx	lr

08015db6 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8015db6:	b480      	push	{r7}
 8015db8:	b085      	sub	sp, #20
 8015dba:	af00      	add	r7, sp, #0
 8015dbc:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	81fb      	strh	r3, [r7, #14]
 8015dc6:	e00a      	b.n	8015dde <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8015dc8:	89fb      	ldrh	r3, [r7, #14]
 8015dca:	68ba      	ldr	r2, [r7, #8]
 8015dcc:	4413      	add	r3, r2
 8015dce:	781b      	ldrb	r3, [r3, #0]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d001      	beq.n	8015dd8 <IsSlotFree+0x22>
        {
            return false;
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	e006      	b.n	8015de6 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015dd8:	89fb      	ldrh	r3, [r7, #14]
 8015dda:	3301      	adds	r3, #1
 8015ddc:	81fb      	strh	r3, [r7, #14]
 8015dde:	89fb      	ldrh	r3, [r7, #14]
 8015de0:	2b0f      	cmp	r3, #15
 8015de2:	d9f1      	bls.n	8015dc8 <IsSlotFree+0x12>
        }
    }
    return true;
 8015de4:	2301      	movs	r3, #1
}
 8015de6:	4618      	mov	r0, r3
 8015de8:	3714      	adds	r7, #20
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bc80      	pop	{r7}
 8015dee:	4770      	bx	lr

08015df0 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b082      	sub	sp, #8
 8015df4:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8015df6:	2300      	movs	r3, #0
 8015df8:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015dfa:	e007      	b.n	8015e0c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8015dfc:	79fb      	ldrb	r3, [r7, #7]
 8015dfe:	3301      	adds	r3, #1
 8015e00:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8015e02:	79fb      	ldrb	r3, [r7, #7]
 8015e04:	2b20      	cmp	r3, #32
 8015e06:	d101      	bne.n	8015e0c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8015e08:	2300      	movs	r3, #0
 8015e0a:	e012      	b.n	8015e32 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015e0c:	79fb      	ldrb	r3, [r7, #7]
 8015e0e:	011b      	lsls	r3, r3, #4
 8015e10:	3308      	adds	r3, #8
 8015e12:	4a0a      	ldr	r2, [pc, #40]	; (8015e3c <MallocNewMacCommandSlot+0x4c>)
 8015e14:	4413      	add	r3, r2
 8015e16:	4618      	mov	r0, r3
 8015e18:	f7ff ffcd 	bl	8015db6 <IsSlotFree>
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	f083 0301 	eor.w	r3, r3, #1
 8015e22:	b2db      	uxtb	r3, r3
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d1e9      	bne.n	8015dfc <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8015e28:	79fb      	ldrb	r3, [r7, #7]
 8015e2a:	011b      	lsls	r3, r3, #4
 8015e2c:	3308      	adds	r3, #8
 8015e2e:	4a03      	ldr	r2, [pc, #12]	; (8015e3c <MallocNewMacCommandSlot+0x4c>)
 8015e30:	4413      	add	r3, r2
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	3708      	adds	r7, #8
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}
 8015e3a:	bf00      	nop
 8015e3c:	20001894 	.word	0x20001894

08015e40 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b082      	sub	sp, #8
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d101      	bne.n	8015e52 <FreeMacCommandSlot+0x12>
    {
        return false;
 8015e4e:	2300      	movs	r3, #0
 8015e50:	e005      	b.n	8015e5e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8015e52:	2210      	movs	r2, #16
 8015e54:	2100      	movs	r1, #0
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f005 fcce 	bl	801b7f8 <memset1>

    return true;
 8015e5c:	2301      	movs	r3, #1
}
 8015e5e:	4618      	mov	r0, r3
 8015e60:	3708      	adds	r7, #8
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd80      	pop	{r7, pc}

08015e66 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015e66:	b480      	push	{r7}
 8015e68:	b083      	sub	sp, #12
 8015e6a:	af00      	add	r7, sp, #0
 8015e6c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d101      	bne.n	8015e78 <LinkedListInit+0x12>
    {
        return false;
 8015e74:	2300      	movs	r3, #0
 8015e76:	e006      	b.n	8015e86 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	2200      	movs	r2, #0
 8015e82:	605a      	str	r2, [r3, #4]

    return true;
 8015e84:	2301      	movs	r3, #1
}
 8015e86:	4618      	mov	r0, r3
 8015e88:	370c      	adds	r7, #12
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	bc80      	pop	{r7}
 8015e8e:	4770      	bx	lr

08015e90 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015e90:	b480      	push	{r7}
 8015e92:	b083      	sub	sp, #12
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
 8015e98:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d002      	beq.n	8015ea6 <LinkedListAdd+0x16>
 8015ea0:	683b      	ldr	r3, [r7, #0]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d101      	bne.n	8015eaa <LinkedListAdd+0x1a>
    {
        return false;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	e015      	b.n	8015ed6 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d102      	bne.n	8015eb8 <LinkedListAdd+0x28>
    {
        list->First = element;
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	683a      	ldr	r2, [r7, #0]
 8015eb6:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	685b      	ldr	r3, [r3, #4]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d003      	beq.n	8015ec8 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	685b      	ldr	r3, [r3, #4]
 8015ec4:	683a      	ldr	r2, [r7, #0]
 8015ec6:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015ec8:	683b      	ldr	r3, [r7, #0]
 8015eca:	2200      	movs	r2, #0
 8015ecc:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	683a      	ldr	r2, [r7, #0]
 8015ed2:	605a      	str	r2, [r3, #4]

    return true;
 8015ed4:	2301      	movs	r3, #1
}
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	370c      	adds	r7, #12
 8015eda:	46bd      	mov	sp, r7
 8015edc:	bc80      	pop	{r7}
 8015ede:	4770      	bx	lr

08015ee0 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015ee0:	b480      	push	{r7}
 8015ee2:	b085      	sub	sp, #20
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
 8015ee8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d002      	beq.n	8015ef6 <LinkedListGetPrevious+0x16>
 8015ef0:	683b      	ldr	r3, [r7, #0]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d101      	bne.n	8015efa <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	e016      	b.n	8015f28 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015f00:	683a      	ldr	r2, [r7, #0]
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	429a      	cmp	r2, r3
 8015f06:	d00c      	beq.n	8015f22 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015f08:	e002      	b.n	8015f10 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d007      	beq.n	8015f26 <LinkedListGetPrevious+0x46>
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	683a      	ldr	r2, [r7, #0]
 8015f1c:	429a      	cmp	r2, r3
 8015f1e:	d1f4      	bne.n	8015f0a <LinkedListGetPrevious+0x2a>
 8015f20:	e001      	b.n	8015f26 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8015f22:	2300      	movs	r3, #0
 8015f24:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8015f26:	68fb      	ldr	r3, [r7, #12]
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3714      	adds	r7, #20
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bc80      	pop	{r7}
 8015f30:	4770      	bx	lr

08015f32 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8015f32:	b580      	push	{r7, lr}
 8015f34:	b084      	sub	sp, #16
 8015f36:	af00      	add	r7, sp, #0
 8015f38:	6078      	str	r0, [r7, #4]
 8015f3a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d002      	beq.n	8015f48 <LinkedListRemove+0x16>
 8015f42:	683b      	ldr	r3, [r7, #0]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d101      	bne.n	8015f4c <LinkedListRemove+0x1a>
    {
        return false;
 8015f48:	2300      	movs	r3, #0
 8015f4a:	e020      	b.n	8015f8e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015f4c:	6839      	ldr	r1, [r7, #0]
 8015f4e:	6878      	ldr	r0, [r7, #4]
 8015f50:	f7ff ffc6 	bl	8015ee0 <LinkedListGetPrevious>
 8015f54:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	683a      	ldr	r2, [r7, #0]
 8015f5c:	429a      	cmp	r2, r3
 8015f5e:	d103      	bne.n	8015f68 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015f60:	683b      	ldr	r3, [r7, #0]
 8015f62:	681a      	ldr	r2, [r3, #0]
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	685b      	ldr	r3, [r3, #4]
 8015f6c:	683a      	ldr	r2, [r7, #0]
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	d102      	bne.n	8015f78 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	68fa      	ldr	r2, [r7, #12]
 8015f76:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d003      	beq.n	8015f86 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015f7e:	683b      	ldr	r3, [r7, #0]
 8015f80:	681a      	ldr	r2, [r3, #0]
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015f86:	683b      	ldr	r3, [r7, #0]
 8015f88:	2200      	movs	r2, #0
 8015f8a:	601a      	str	r2, [r3, #0]

    return true;
 8015f8c:	2301      	movs	r3, #1
}
 8015f8e:	4618      	mov	r0, r3
 8015f90:	3710      	adds	r7, #16
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd80      	pop	{r7, pc}
	...

08015f98 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015f98:	b480      	push	{r7}
 8015f9a:	b083      	sub	sp, #12
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015fa2:	79fb      	ldrb	r3, [r7, #7]
 8015fa4:	2b11      	cmp	r3, #17
 8015fa6:	bf8c      	ite	hi
 8015fa8:	2201      	movhi	r2, #1
 8015faa:	2200      	movls	r2, #0
 8015fac:	b2d2      	uxtb	r2, r2
 8015fae:	2a00      	cmp	r2, #0
 8015fb0:	d10c      	bne.n	8015fcc <IsSticky+0x34>
 8015fb2:	2201      	movs	r2, #1
 8015fb4:	409a      	lsls	r2, r3
 8015fb6:	4b08      	ldr	r3, [pc, #32]	; (8015fd8 <IsSticky+0x40>)
 8015fb8:	4013      	ands	r3, r2
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	bf14      	ite	ne
 8015fbe:	2301      	movne	r3, #1
 8015fc0:	2300      	moveq	r3, #0
 8015fc2:	b2db      	uxtb	r3, r3
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d001      	beq.n	8015fcc <IsSticky+0x34>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8015fc8:	2301      	movs	r3, #1
 8015fca:	e000      	b.n	8015fce <IsSticky+0x36>
        default:
            return false;
 8015fcc:	2300      	movs	r3, #0
    }
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	370c      	adds	r7, #12
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bc80      	pop	{r7}
 8015fd6:	4770      	bx	lr
 8015fd8:	00020720 	.word	0x00020720

08015fdc <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8015fdc:	b480      	push	{r7}
 8015fde:	b083      	sub	sp, #12
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8015fe6:	2300      	movs	r3, #0
    }
}
 8015fe8:	4618      	mov	r0, r3
 8015fea:	370c      	adds	r7, #12
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bc80      	pop	{r7}
 8015ff0:	4770      	bx	lr
	...

08015ff4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8015ff8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8015ffc:	2100      	movs	r1, #0
 8015ffe:	4804      	ldr	r0, [pc, #16]	; (8016010 <LoRaMacCommandsInit+0x1c>)
 8016000:	f005 fbfa 	bl	801b7f8 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8016004:	4802      	ldr	r0, [pc, #8]	; (8016010 <LoRaMacCommandsInit+0x1c>)
 8016006:	f7ff ff2e 	bl	8015e66 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801600a:	2300      	movs	r3, #0
}
 801600c:	4618      	mov	r0, r3
 801600e:	bd80      	pop	{r7, pc}
 8016010:	20001894 	.word	0x20001894

08016014 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b086      	sub	sp, #24
 8016018:	af00      	add	r7, sp, #0
 801601a:	4603      	mov	r3, r0
 801601c:	60b9      	str	r1, [r7, #8]
 801601e:	607a      	str	r2, [r7, #4]
 8016020:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8016022:	68bb      	ldr	r3, [r7, #8]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d101      	bne.n	801602c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8016028:	2301      	movs	r3, #1
 801602a:	e03b      	b.n	80160a4 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 801602c:	f7ff fee0 	bl	8015df0 <MallocNewMacCommandSlot>
 8016030:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8016032:	697b      	ldr	r3, [r7, #20]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d101      	bne.n	801603c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8016038:	2302      	movs	r3, #2
 801603a:	e033      	b.n	80160a4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 801603c:	6979      	ldr	r1, [r7, #20]
 801603e:	481b      	ldr	r0, [pc, #108]	; (80160ac <LoRaMacCommandsAddCmd+0x98>)
 8016040:	f7ff ff26 	bl	8015e90 <LinkedListAdd>
 8016044:	4603      	mov	r3, r0
 8016046:	f083 0301 	eor.w	r3, r3, #1
 801604a:	b2db      	uxtb	r3, r3
 801604c:	2b00      	cmp	r3, #0
 801604e:	d001      	beq.n	8016054 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8016050:	2305      	movs	r3, #5
 8016052:	e027      	b.n	80160a4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8016054:	697b      	ldr	r3, [r7, #20]
 8016056:	7bfa      	ldrb	r2, [r7, #15]
 8016058:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	687a      	ldr	r2, [r7, #4]
 801605e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8016060:	697b      	ldr	r3, [r7, #20]
 8016062:	3305      	adds	r3, #5
 8016064:	687a      	ldr	r2, [r7, #4]
 8016066:	b292      	uxth	r2, r2
 8016068:	68b9      	ldr	r1, [r7, #8]
 801606a:	4618      	mov	r0, r3
 801606c:	f005 fb89 	bl	801b782 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8016070:	7bfb      	ldrb	r3, [r7, #15]
 8016072:	4618      	mov	r0, r3
 8016074:	f7ff ff90 	bl	8015f98 <IsSticky>
 8016078:	4603      	mov	r3, r0
 801607a:	461a      	mov	r2, r3
 801607c:	697b      	ldr	r3, [r7, #20]
 801607e:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8016080:	7bfb      	ldrb	r3, [r7, #15]
 8016082:	4618      	mov	r0, r3
 8016084:	f7ff ffaa 	bl	8015fdc <IsConfirmationRequired>
 8016088:	4603      	mov	r3, r0
 801608a:	461a      	mov	r2, r3
 801608c:	697b      	ldr	r3, [r7, #20]
 801608e:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8016090:	4b06      	ldr	r3, [pc, #24]	; (80160ac <LoRaMacCommandsAddCmd+0x98>)
 8016092:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	4413      	add	r3, r2
 801609a:	3301      	adds	r3, #1
 801609c:	4a03      	ldr	r2, [pc, #12]	; (80160ac <LoRaMacCommandsAddCmd+0x98>)
 801609e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80160a2:	2300      	movs	r3, #0
}
 80160a4:	4618      	mov	r0, r3
 80160a6:	3718      	adds	r7, #24
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd80      	pop	{r7, pc}
 80160ac:	20001894 	.word	0x20001894

080160b0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b082      	sub	sp, #8
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d101      	bne.n	80160c2 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80160be:	2301      	movs	r3, #1
 80160c0:	e021      	b.n	8016106 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80160c2:	6879      	ldr	r1, [r7, #4]
 80160c4:	4812      	ldr	r0, [pc, #72]	; (8016110 <LoRaMacCommandsRemoveCmd+0x60>)
 80160c6:	f7ff ff34 	bl	8015f32 <LinkedListRemove>
 80160ca:	4603      	mov	r3, r0
 80160cc:	f083 0301 	eor.w	r3, r3, #1
 80160d0:	b2db      	uxtb	r3, r3
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d001      	beq.n	80160da <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80160d6:	2303      	movs	r3, #3
 80160d8:	e015      	b.n	8016106 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80160da:	4b0d      	ldr	r3, [pc, #52]	; (8016110 <LoRaMacCommandsRemoveCmd+0x60>)
 80160dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	689b      	ldr	r3, [r3, #8]
 80160e4:	1ad3      	subs	r3, r2, r3
 80160e6:	3b01      	subs	r3, #1
 80160e8:	4a09      	ldr	r2, [pc, #36]	; (8016110 <LoRaMacCommandsRemoveCmd+0x60>)
 80160ea:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80160ee:	6878      	ldr	r0, [r7, #4]
 80160f0:	f7ff fea6 	bl	8015e40 <FreeMacCommandSlot>
 80160f4:	4603      	mov	r3, r0
 80160f6:	f083 0301 	eor.w	r3, r3, #1
 80160fa:	b2db      	uxtb	r3, r3
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d001      	beq.n	8016104 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8016100:	2305      	movs	r3, #5
 8016102:	e000      	b.n	8016106 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8016104:	2300      	movs	r3, #0
}
 8016106:	4618      	mov	r0, r3
 8016108:	3708      	adds	r7, #8
 801610a:	46bd      	mov	sp, r7
 801610c:	bd80      	pop	{r7, pc}
 801610e:	bf00      	nop
 8016110:	20001894 	.word	0x20001894

08016114 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8016114:	b480      	push	{r7}
 8016116:	b085      	sub	sp, #20
 8016118:	af00      	add	r7, sp, #0
 801611a:	4603      	mov	r3, r0
 801611c:	6039      	str	r1, [r7, #0]
 801611e:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8016120:	4b0e      	ldr	r3, [pc, #56]	; (801615c <LoRaMacCommandsGetCmd+0x48>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8016126:	e002      	b.n	801612e <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d004      	beq.n	801613e <LoRaMacCommandsGetCmd+0x2a>
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	791b      	ldrb	r3, [r3, #4]
 8016138:	79fa      	ldrb	r2, [r7, #7]
 801613a:	429a      	cmp	r2, r3
 801613c:	d1f4      	bne.n	8016128 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	68fa      	ldr	r2, [r7, #12]
 8016142:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d101      	bne.n	801614e <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801614a:	2303      	movs	r3, #3
 801614c:	e000      	b.n	8016150 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 801614e:	2300      	movs	r3, #0
}
 8016150:	4618      	mov	r0, r3
 8016152:	3714      	adds	r7, #20
 8016154:	46bd      	mov	sp, r7
 8016156:	bc80      	pop	{r7}
 8016158:	4770      	bx	lr
 801615a:	bf00      	nop
 801615c:	20001894 	.word	0x20001894

08016160 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8016160:	b580      	push	{r7, lr}
 8016162:	b082      	sub	sp, #8
 8016164:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8016166:	4b0f      	ldr	r3, [pc, #60]	; (80161a4 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801616c:	e012      	b.n	8016194 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	7b1b      	ldrb	r3, [r3, #12]
 8016172:	f083 0301 	eor.w	r3, r3, #1
 8016176:	b2db      	uxtb	r3, r3
 8016178:	2b00      	cmp	r3, #0
 801617a:	d008      	beq.n	801618e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8016182:	6878      	ldr	r0, [r7, #4]
 8016184:	f7ff ff94 	bl	80160b0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8016188:	683b      	ldr	r3, [r7, #0]
 801618a:	607b      	str	r3, [r7, #4]
 801618c:	e002      	b.n	8016194 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d1e9      	bne.n	801616e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801619a:	2300      	movs	r3, #0
}
 801619c:	4618      	mov	r0, r3
 801619e:	3708      	adds	r7, #8
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}
 80161a4:	20001894 	.word	0x20001894

080161a8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b082      	sub	sp, #8
 80161ac:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80161ae:	4b13      	ldr	r3, [pc, #76]	; (80161fc <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80161b4:	e01a      	b.n	80161ec <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	791b      	ldrb	r3, [r3, #4]
 80161c0:	4618      	mov	r0, r3
 80161c2:	f7ff fee9 	bl	8015f98 <IsSticky>
 80161c6:	4603      	mov	r3, r0
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d00d      	beq.n	80161e8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	791b      	ldrb	r3, [r3, #4]
 80161d0:	4618      	mov	r0, r3
 80161d2:	f7ff ff03 	bl	8015fdc <IsConfirmationRequired>
 80161d6:	4603      	mov	r3, r0
 80161d8:	f083 0301 	eor.w	r3, r3, #1
 80161dc:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d002      	beq.n	80161e8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f7ff ff64 	bl	80160b0 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80161e8:	683b      	ldr	r3, [r7, #0]
 80161ea:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d1e1      	bne.n	80161b6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80161f2:	2300      	movs	r3, #0
}
 80161f4:	4618      	mov	r0, r3
 80161f6:	3708      	adds	r7, #8
 80161f8:	46bd      	mov	sp, r7
 80161fa:	bd80      	pop	{r7, pc}
 80161fc:	20001894 	.word	0x20001894

08016200 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8016200:	b480      	push	{r7}
 8016202:	b083      	sub	sp, #12
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	2b00      	cmp	r3, #0
 801620c:	d101      	bne.n	8016212 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801620e:	2301      	movs	r3, #1
 8016210:	e005      	b.n	801621e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8016212:	4b05      	ldr	r3, [pc, #20]	; (8016228 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8016214:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 801621c:	2300      	movs	r3, #0
}
 801621e:	4618      	mov	r0, r3
 8016220:	370c      	adds	r7, #12
 8016222:	46bd      	mov	sp, r7
 8016224:	bc80      	pop	{r7}
 8016226:	4770      	bx	lr
 8016228:	20001894 	.word	0x20001894

0801622c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 801622c:	b580      	push	{r7, lr}
 801622e:	b088      	sub	sp, #32
 8016230:	af00      	add	r7, sp, #0
 8016232:	60f8      	str	r0, [r7, #12]
 8016234:	60b9      	str	r1, [r7, #8]
 8016236:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8016238:	4b25      	ldr	r3, [pc, #148]	; (80162d0 <LoRaMacCommandsSerializeCmds+0xa4>)
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801623e:	2300      	movs	r3, #0
 8016240:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d002      	beq.n	801624e <LoRaMacCommandsSerializeCmds+0x22>
 8016248:	68bb      	ldr	r3, [r7, #8]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d126      	bne.n	801629c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801624e:	2301      	movs	r3, #1
 8016250:	e039      	b.n	80162c6 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8016252:	7efb      	ldrb	r3, [r7, #27]
 8016254:	68fa      	ldr	r2, [r7, #12]
 8016256:	1ad2      	subs	r2, r2, r3
 8016258:	69fb      	ldr	r3, [r7, #28]
 801625a:	689b      	ldr	r3, [r3, #8]
 801625c:	3301      	adds	r3, #1
 801625e:	429a      	cmp	r2, r3
 8016260:	d320      	bcc.n	80162a4 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8016262:	7efb      	ldrb	r3, [r7, #27]
 8016264:	1c5a      	adds	r2, r3, #1
 8016266:	76fa      	strb	r2, [r7, #27]
 8016268:	461a      	mov	r2, r3
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	4413      	add	r3, r2
 801626e:	69fa      	ldr	r2, [r7, #28]
 8016270:	7912      	ldrb	r2, [r2, #4]
 8016272:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8016274:	7efb      	ldrb	r3, [r7, #27]
 8016276:	687a      	ldr	r2, [r7, #4]
 8016278:	18d0      	adds	r0, r2, r3
 801627a:	69fb      	ldr	r3, [r7, #28]
 801627c:	1d59      	adds	r1, r3, #5
 801627e:	69fb      	ldr	r3, [r7, #28]
 8016280:	689b      	ldr	r3, [r3, #8]
 8016282:	b29b      	uxth	r3, r3
 8016284:	461a      	mov	r2, r3
 8016286:	f005 fa7c 	bl	801b782 <memcpy1>
            itr += curElement->PayloadSize;
 801628a:	69fb      	ldr	r3, [r7, #28]
 801628c:	689b      	ldr	r3, [r3, #8]
 801628e:	b2da      	uxtb	r2, r3
 8016290:	7efb      	ldrb	r3, [r7, #27]
 8016292:	4413      	add	r3, r2
 8016294:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8016296:	69fb      	ldr	r3, [r7, #28]
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801629c:	69fb      	ldr	r3, [r7, #28]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d1d7      	bne.n	8016252 <LoRaMacCommandsSerializeCmds+0x26>
 80162a2:	e009      	b.n	80162b8 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80162a4:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80162a6:	e007      	b.n	80162b8 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80162a8:	69fb      	ldr	r3, [r7, #28]
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80162ae:	69f8      	ldr	r0, [r7, #28]
 80162b0:	f7ff fefe 	bl	80160b0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80162b4:	697b      	ldr	r3, [r7, #20]
 80162b6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80162b8:	69fb      	ldr	r3, [r7, #28]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d1f4      	bne.n	80162a8 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80162be:	68b8      	ldr	r0, [r7, #8]
 80162c0:	f7ff ff9e 	bl	8016200 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80162c4:	2300      	movs	r3, #0
}
 80162c6:	4618      	mov	r0, r3
 80162c8:	3720      	adds	r7, #32
 80162ca:	46bd      	mov	sp, r7
 80162cc:	bd80      	pop	{r7, pc}
 80162ce:	bf00      	nop
 80162d0:	20001894 	.word	0x20001894

080162d4 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80162d4:	b480      	push	{r7}
 80162d6:	b085      	sub	sp, #20
 80162d8:	af00      	add	r7, sp, #0
 80162da:	4603      	mov	r3, r0
 80162dc:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80162de:	2300      	movs	r3, #0
 80162e0:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80162e2:	79fb      	ldrb	r3, [r7, #7]
 80162e4:	3b02      	subs	r3, #2
 80162e6:	2b11      	cmp	r3, #17
 80162e8:	d850      	bhi.n	801638c <LoRaMacCommandsGetCmdSize+0xb8>
 80162ea:	a201      	add	r2, pc, #4	; (adr r2, 80162f0 <LoRaMacCommandsGetCmdSize+0x1c>)
 80162ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162f0:	08016339 	.word	0x08016339
 80162f4:	0801633f 	.word	0x0801633f
 80162f8:	08016345 	.word	0x08016345
 80162fc:	0801634b 	.word	0x0801634b
 8016300:	08016351 	.word	0x08016351
 8016304:	08016357 	.word	0x08016357
 8016308:	0801635d 	.word	0x0801635d
 801630c:	08016363 	.word	0x08016363
 8016310:	08016369 	.word	0x08016369
 8016314:	0801638d 	.word	0x0801638d
 8016318:	0801638d 	.word	0x0801638d
 801631c:	0801636f 	.word	0x0801636f
 8016320:	0801638d 	.word	0x0801638d
 8016324:	0801638d 	.word	0x0801638d
 8016328:	08016375 	.word	0x08016375
 801632c:	0801637b 	.word	0x0801637b
 8016330:	08016381 	.word	0x08016381
 8016334:	08016387 	.word	0x08016387
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8016338:	2303      	movs	r3, #3
 801633a:	73fb      	strb	r3, [r7, #15]
            break;
 801633c:	e027      	b.n	801638e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801633e:	2305      	movs	r3, #5
 8016340:	73fb      	strb	r3, [r7, #15]
            break;
 8016342:	e024      	b.n	801638e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8016344:	2302      	movs	r3, #2
 8016346:	73fb      	strb	r3, [r7, #15]
            break;
 8016348:	e021      	b.n	801638e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801634a:	2305      	movs	r3, #5
 801634c:	73fb      	strb	r3, [r7, #15]
            break;
 801634e:	e01e      	b.n	801638e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8016350:	2301      	movs	r3, #1
 8016352:	73fb      	strb	r3, [r7, #15]
            break;
 8016354:	e01b      	b.n	801638e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8016356:	2306      	movs	r3, #6
 8016358:	73fb      	strb	r3, [r7, #15]
            break;
 801635a:	e018      	b.n	801638e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801635c:	2302      	movs	r3, #2
 801635e:	73fb      	strb	r3, [r7, #15]
            break;
 8016360:	e015      	b.n	801638e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8016362:	2302      	movs	r3, #2
 8016364:	73fb      	strb	r3, [r7, #15]
            break;
 8016366:	e012      	b.n	801638e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8016368:	2305      	movs	r3, #5
 801636a:	73fb      	strb	r3, [r7, #15]
            break;
 801636c:	e00f      	b.n	801638e <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801636e:	2306      	movs	r3, #6
 8016370:	73fb      	strb	r3, [r7, #15]
            break;
 8016372:	e00c      	b.n	801638e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8016374:	2301      	movs	r3, #1
 8016376:	73fb      	strb	r3, [r7, #15]
            break;
 8016378:	e009      	b.n	801638e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801637a:	2305      	movs	r3, #5
 801637c:	73fb      	strb	r3, [r7, #15]
            break;
 801637e:	e006      	b.n	801638e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8016380:	2304      	movs	r3, #4
 8016382:	73fb      	strb	r3, [r7, #15]
            break;
 8016384:	e003      	b.n	801638e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8016386:	2304      	movs	r3, #4
 8016388:	73fb      	strb	r3, [r7, #15]
            break;
 801638a:	e000      	b.n	801638e <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801638c:	bf00      	nop
        }
    }
    return cidSize;
 801638e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016390:	4618      	mov	r0, r3
 8016392:	3714      	adds	r7, #20
 8016394:	46bd      	mov	sp, r7
 8016396:	bc80      	pop	{r7}
 8016398:	4770      	bx	lr
 801639a:	bf00      	nop

0801639c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801639c:	b480      	push	{r7}
 801639e:	b083      	sub	sp, #12
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	4a07      	ldr	r2, [pc, #28]	; (80163c4 <IncreaseBufferPointer+0x28>)
 80163a8:	4293      	cmp	r3, r2
 80163aa:	d102      	bne.n	80163b2 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80163ac:	4b06      	ldr	r3, [pc, #24]	; (80163c8 <IncreaseBufferPointer+0x2c>)
 80163ae:	607b      	str	r3, [r7, #4]
 80163b0:	e002      	b.n	80163b8 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	3304      	adds	r3, #4
 80163b6:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80163b8:	687b      	ldr	r3, [r7, #4]
}
 80163ba:	4618      	mov	r0, r3
 80163bc:	370c      	adds	r7, #12
 80163be:	46bd      	mov	sp, r7
 80163c0:	bc80      	pop	{r7}
 80163c2:	4770      	bx	lr
 80163c4:	20001abc 	.word	0x20001abc
 80163c8:	20001aac 	.word	0x20001aac

080163cc <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80163cc:	b480      	push	{r7}
 80163ce:	b083      	sub	sp, #12
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	4603      	mov	r3, r0
 80163d4:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80163d6:	79fb      	ldrb	r3, [r7, #7]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d101      	bne.n	80163e0 <IsListEmpty+0x14>
    {
        return true;
 80163dc:	2301      	movs	r3, #1
 80163de:	e000      	b.n	80163e2 <IsListEmpty+0x16>
    }
    return false;
 80163e0:	2300      	movs	r3, #0
}
 80163e2:	4618      	mov	r0, r3
 80163e4:	370c      	adds	r7, #12
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bc80      	pop	{r7}
 80163ea:	4770      	bx	lr

080163ec <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80163ec:	b480      	push	{r7}
 80163ee:	b083      	sub	sp, #12
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	4603      	mov	r3, r0
 80163f4:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80163f6:	79fb      	ldrb	r3, [r7, #7]
 80163f8:	2b04      	cmp	r3, #4
 80163fa:	d901      	bls.n	8016400 <IsListFull+0x14>
    {
        return true;
 80163fc:	2301      	movs	r3, #1
 80163fe:	e000      	b.n	8016402 <IsListFull+0x16>
    }
    return false;
 8016400:	2300      	movs	r3, #0
}
 8016402:	4618      	mov	r0, r3
 8016404:	370c      	adds	r7, #12
 8016406:	46bd      	mov	sp, r7
 8016408:	bc80      	pop	{r7}
 801640a:	4770      	bx	lr

0801640c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b086      	sub	sp, #24
 8016410:	af00      	add	r7, sp, #0
 8016412:	4603      	mov	r3, r0
 8016414:	60b9      	str	r1, [r7, #8]
 8016416:	607a      	str	r2, [r7, #4]
 8016418:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801641a:	68bb      	ldr	r3, [r7, #8]
 801641c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801641e:	4b13      	ldr	r3, [pc, #76]	; (801646c <GetElement+0x60>)
 8016420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016424:	4618      	mov	r0, r3
 8016426:	f7ff ffd1 	bl	80163cc <IsListEmpty>
 801642a:	4603      	mov	r3, r0
 801642c:	2b00      	cmp	r3, #0
 801642e:	d001      	beq.n	8016434 <GetElement+0x28>
    {
        return NULL;
 8016430:	2300      	movs	r3, #0
 8016432:	e017      	b.n	8016464 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016434:	2300      	movs	r3, #0
 8016436:	74fb      	strb	r3, [r7, #19]
 8016438:	e00d      	b.n	8016456 <GetElement+0x4a>
    {
        if( element->Request == request )
 801643a:	697b      	ldr	r3, [r7, #20]
 801643c:	781b      	ldrb	r3, [r3, #0]
 801643e:	7bfa      	ldrb	r2, [r7, #15]
 8016440:	429a      	cmp	r2, r3
 8016442:	d101      	bne.n	8016448 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8016444:	697b      	ldr	r3, [r7, #20]
 8016446:	e00d      	b.n	8016464 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8016448:	6978      	ldr	r0, [r7, #20]
 801644a:	f7ff ffa7 	bl	801639c <IncreaseBufferPointer>
 801644e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016450:	7cfb      	ldrb	r3, [r7, #19]
 8016452:	3301      	adds	r3, #1
 8016454:	74fb      	strb	r3, [r7, #19]
 8016456:	4b05      	ldr	r3, [pc, #20]	; (801646c <GetElement+0x60>)
 8016458:	f893 3020 	ldrb.w	r3, [r3, #32]
 801645c:	7cfa      	ldrb	r2, [r7, #19]
 801645e:	429a      	cmp	r2, r3
 8016460:	d3eb      	bcc.n	801643a <GetElement+0x2e>
    }

    return NULL;
 8016462:	2300      	movs	r3, #0
}
 8016464:	4618      	mov	r0, r3
 8016466:	3718      	adds	r7, #24
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}
 801646c:	20001aa0 	.word	0x20001aa0

08016470 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b082      	sub	sp, #8
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8016478:	4a0c      	ldr	r2, [pc, #48]	; (80164ac <LoRaMacConfirmQueueInit+0x3c>)
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801647e:	4b0b      	ldr	r3, [pc, #44]	; (80164ac <LoRaMacConfirmQueueInit+0x3c>)
 8016480:	2200      	movs	r2, #0
 8016482:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8016486:	4b09      	ldr	r3, [pc, #36]	; (80164ac <LoRaMacConfirmQueueInit+0x3c>)
 8016488:	4a09      	ldr	r2, [pc, #36]	; (80164b0 <LoRaMacConfirmQueueInit+0x40>)
 801648a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801648c:	4b07      	ldr	r3, [pc, #28]	; (80164ac <LoRaMacConfirmQueueInit+0x3c>)
 801648e:	4a08      	ldr	r2, [pc, #32]	; (80164b0 <LoRaMacConfirmQueueInit+0x40>)
 8016490:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8016492:	2214      	movs	r2, #20
 8016494:	21ff      	movs	r1, #255	; 0xff
 8016496:	4806      	ldr	r0, [pc, #24]	; (80164b0 <LoRaMacConfirmQueueInit+0x40>)
 8016498:	f005 f9ae 	bl	801b7f8 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801649c:	4b03      	ldr	r3, [pc, #12]	; (80164ac <LoRaMacConfirmQueueInit+0x3c>)
 801649e:	2201      	movs	r2, #1
 80164a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80164a4:	bf00      	nop
 80164a6:	3708      	adds	r7, #8
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd80      	pop	{r7, pc}
 80164ac:	20001aa0 	.word	0x20001aa0
 80164b0:	20001aac 	.word	0x20001aac

080164b4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b082      	sub	sp, #8
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80164bc:	4b19      	ldr	r3, [pc, #100]	; (8016524 <LoRaMacConfirmQueueAdd+0x70>)
 80164be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80164c2:	4618      	mov	r0, r3
 80164c4:	f7ff ff92 	bl	80163ec <IsListFull>
 80164c8:	4603      	mov	r3, r0
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d001      	beq.n	80164d2 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80164ce:	2300      	movs	r3, #0
 80164d0:	e024      	b.n	801651c <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80164d2:	4b14      	ldr	r3, [pc, #80]	; (8016524 <LoRaMacConfirmQueueAdd+0x70>)
 80164d4:	689b      	ldr	r3, [r3, #8]
 80164d6:	687a      	ldr	r2, [r7, #4]
 80164d8:	7812      	ldrb	r2, [r2, #0]
 80164da:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80164dc:	4b11      	ldr	r3, [pc, #68]	; (8016524 <LoRaMacConfirmQueueAdd+0x70>)
 80164de:	689b      	ldr	r3, [r3, #8]
 80164e0:	687a      	ldr	r2, [r7, #4]
 80164e2:	7852      	ldrb	r2, [r2, #1]
 80164e4:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80164e6:	4b0f      	ldr	r3, [pc, #60]	; (8016524 <LoRaMacConfirmQueueAdd+0x70>)
 80164e8:	689b      	ldr	r3, [r3, #8]
 80164ea:	687a      	ldr	r2, [r7, #4]
 80164ec:	78d2      	ldrb	r2, [r2, #3]
 80164ee:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80164f0:	4b0c      	ldr	r3, [pc, #48]	; (8016524 <LoRaMacConfirmQueueAdd+0x70>)
 80164f2:	689b      	ldr	r3, [r3, #8]
 80164f4:	687a      	ldr	r2, [r7, #4]
 80164f6:	7892      	ldrb	r2, [r2, #2]
 80164f8:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80164fa:	4b0a      	ldr	r3, [pc, #40]	; (8016524 <LoRaMacConfirmQueueAdd+0x70>)
 80164fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016500:	3301      	adds	r3, #1
 8016502:	b2da      	uxtb	r2, r3
 8016504:	4b07      	ldr	r3, [pc, #28]	; (8016524 <LoRaMacConfirmQueueAdd+0x70>)
 8016506:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801650a:	4b06      	ldr	r3, [pc, #24]	; (8016524 <LoRaMacConfirmQueueAdd+0x70>)
 801650c:	689b      	ldr	r3, [r3, #8]
 801650e:	4618      	mov	r0, r3
 8016510:	f7ff ff44 	bl	801639c <IncreaseBufferPointer>
 8016514:	4603      	mov	r3, r0
 8016516:	4a03      	ldr	r2, [pc, #12]	; (8016524 <LoRaMacConfirmQueueAdd+0x70>)
 8016518:	6093      	str	r3, [r2, #8]

    return true;
 801651a:	2301      	movs	r3, #1
}
 801651c:	4618      	mov	r0, r3
 801651e:	3708      	adds	r7, #8
 8016520:	46bd      	mov	sp, r7
 8016522:	bd80      	pop	{r7, pc}
 8016524:	20001aa0 	.word	0x20001aa0

08016528 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8016528:	b580      	push	{r7, lr}
 801652a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801652c:	4b0e      	ldr	r3, [pc, #56]	; (8016568 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801652e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016532:	4618      	mov	r0, r3
 8016534:	f7ff ff4a 	bl	80163cc <IsListEmpty>
 8016538:	4603      	mov	r3, r0
 801653a:	2b00      	cmp	r3, #0
 801653c:	d001      	beq.n	8016542 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801653e:	2300      	movs	r3, #0
 8016540:	e010      	b.n	8016564 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8016542:	4b09      	ldr	r3, [pc, #36]	; (8016568 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016548:	3b01      	subs	r3, #1
 801654a:	b2da      	uxtb	r2, r3
 801654c:	4b06      	ldr	r3, [pc, #24]	; (8016568 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801654e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8016552:	4b05      	ldr	r3, [pc, #20]	; (8016568 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016554:	685b      	ldr	r3, [r3, #4]
 8016556:	4618      	mov	r0, r3
 8016558:	f7ff ff20 	bl	801639c <IncreaseBufferPointer>
 801655c:	4603      	mov	r3, r0
 801655e:	4a02      	ldr	r2, [pc, #8]	; (8016568 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016560:	6053      	str	r3, [r2, #4]

    return true;
 8016562:	2301      	movs	r3, #1
}
 8016564:	4618      	mov	r0, r3
 8016566:	bd80      	pop	{r7, pc}
 8016568:	20001aa0 	.word	0x20001aa0

0801656c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b084      	sub	sp, #16
 8016570:	af00      	add	r7, sp, #0
 8016572:	4603      	mov	r3, r0
 8016574:	460a      	mov	r2, r1
 8016576:	71fb      	strb	r3, [r7, #7]
 8016578:	4613      	mov	r3, r2
 801657a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 801657c:	2300      	movs	r3, #0
 801657e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016580:	4b10      	ldr	r3, [pc, #64]	; (80165c4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8016582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016586:	4618      	mov	r0, r3
 8016588:	f7ff ff20 	bl	80163cc <IsListEmpty>
 801658c:	4603      	mov	r3, r0
 801658e:	f083 0301 	eor.w	r3, r3, #1
 8016592:	b2db      	uxtb	r3, r3
 8016594:	2b00      	cmp	r3, #0
 8016596:	d011      	beq.n	80165bc <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8016598:	4b0a      	ldr	r3, [pc, #40]	; (80165c4 <LoRaMacConfirmQueueSetStatus+0x58>)
 801659a:	6859      	ldr	r1, [r3, #4]
 801659c:	4b09      	ldr	r3, [pc, #36]	; (80165c4 <LoRaMacConfirmQueueSetStatus+0x58>)
 801659e:	689a      	ldr	r2, [r3, #8]
 80165a0:	79bb      	ldrb	r3, [r7, #6]
 80165a2:	4618      	mov	r0, r3
 80165a4:	f7ff ff32 	bl	801640c <GetElement>
 80165a8:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d005      	beq.n	80165bc <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	79fa      	ldrb	r2, [r7, #7]
 80165b4:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	2201      	movs	r2, #1
 80165ba:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80165bc:	bf00      	nop
 80165be:	3710      	adds	r7, #16
 80165c0:	46bd      	mov	sp, r7
 80165c2:	bd80      	pop	{r7, pc}
 80165c4:	20001aa0 	.word	0x20001aa0

080165c8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b084      	sub	sp, #16
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	4603      	mov	r3, r0
 80165d0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80165d2:	2300      	movs	r3, #0
 80165d4:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80165d6:	4b10      	ldr	r3, [pc, #64]	; (8016618 <LoRaMacConfirmQueueGetStatus+0x50>)
 80165d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80165dc:	4618      	mov	r0, r3
 80165de:	f7ff fef5 	bl	80163cc <IsListEmpty>
 80165e2:	4603      	mov	r3, r0
 80165e4:	f083 0301 	eor.w	r3, r3, #1
 80165e8:	b2db      	uxtb	r3, r3
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d00e      	beq.n	801660c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80165ee:	4b0a      	ldr	r3, [pc, #40]	; (8016618 <LoRaMacConfirmQueueGetStatus+0x50>)
 80165f0:	6859      	ldr	r1, [r3, #4]
 80165f2:	4b09      	ldr	r3, [pc, #36]	; (8016618 <LoRaMacConfirmQueueGetStatus+0x50>)
 80165f4:	689a      	ldr	r2, [r3, #8]
 80165f6:	79fb      	ldrb	r3, [r7, #7]
 80165f8:	4618      	mov	r0, r3
 80165fa:	f7ff ff07 	bl	801640c <GetElement>
 80165fe:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d002      	beq.n	801660c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	785b      	ldrb	r3, [r3, #1]
 801660a:	e000      	b.n	801660e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801660c:	2301      	movs	r3, #1
}
 801660e:	4618      	mov	r0, r3
 8016610:	3710      	adds	r7, #16
 8016612:	46bd      	mov	sp, r7
 8016614:	bd80      	pop	{r7, pc}
 8016616:	bf00      	nop
 8016618:	20001aa0 	.word	0x20001aa0

0801661c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801661c:	b580      	push	{r7, lr}
 801661e:	b084      	sub	sp, #16
 8016620:	af00      	add	r7, sp, #0
 8016622:	4603      	mov	r3, r0
 8016624:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8016626:	4b16      	ldr	r3, [pc, #88]	; (8016680 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016628:	685b      	ldr	r3, [r3, #4]
 801662a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 801662c:	4a14      	ldr	r2, [pc, #80]	; (8016680 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801662e:	79fb      	ldrb	r3, [r7, #7]
 8016630:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016634:	4b12      	ldr	r3, [pc, #72]	; (8016680 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016636:	f893 3020 	ldrb.w	r3, [r3, #32]
 801663a:	4618      	mov	r0, r3
 801663c:	f7ff fec6 	bl	80163cc <IsListEmpty>
 8016640:	4603      	mov	r3, r0
 8016642:	f083 0301 	eor.w	r3, r3, #1
 8016646:	b2db      	uxtb	r3, r3
 8016648:	2b00      	cmp	r3, #0
 801664a:	d015      	beq.n	8016678 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	79fa      	ldrb	r2, [r7, #7]
 8016650:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	78db      	ldrb	r3, [r3, #3]
 8016656:	f083 0301 	eor.w	r3, r3, #1
 801665a:	b2db      	uxtb	r3, r3
 801665c:	2b00      	cmp	r3, #0
 801665e:	d002      	beq.n	8016666 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	2201      	movs	r2, #1
 8016664:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8016666:	68f8      	ldr	r0, [r7, #12]
 8016668:	f7ff fe98 	bl	801639c <IncreaseBufferPointer>
 801666c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801666e:	4b04      	ldr	r3, [pc, #16]	; (8016680 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016670:	689b      	ldr	r3, [r3, #8]
 8016672:	68fa      	ldr	r2, [r7, #12]
 8016674:	429a      	cmp	r2, r3
 8016676:	d1e9      	bne.n	801664c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8016678:	bf00      	nop
 801667a:	3710      	adds	r7, #16
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}
 8016680:	20001aa0 	.word	0x20001aa0

08016684 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b082      	sub	sp, #8
 8016688:	af00      	add	r7, sp, #0
 801668a:	4603      	mov	r3, r0
 801668c:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801668e:	4b09      	ldr	r3, [pc, #36]	; (80166b4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8016690:	6859      	ldr	r1, [r3, #4]
 8016692:	4b08      	ldr	r3, [pc, #32]	; (80166b4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8016694:	689a      	ldr	r2, [r3, #8]
 8016696:	79fb      	ldrb	r3, [r7, #7]
 8016698:	4618      	mov	r0, r3
 801669a:	f7ff feb7 	bl	801640c <GetElement>
 801669e:	4603      	mov	r3, r0
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d001      	beq.n	80166a8 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80166a4:	2301      	movs	r3, #1
 80166a6:	e000      	b.n	80166aa <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80166a8:	2300      	movs	r3, #0
}
 80166aa:	4618      	mov	r0, r3
 80166ac:	3708      	adds	r7, #8
 80166ae:	46bd      	mov	sp, r7
 80166b0:	bd80      	pop	{r7, pc}
 80166b2:	bf00      	nop
 80166b4:	20001aa0 	.word	0x20001aa0

080166b8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b084      	sub	sp, #16
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80166c0:	4b25      	ldr	r3, [pc, #148]	; (8016758 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80166c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80166c6:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80166c8:	2300      	movs	r3, #0
 80166ca:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 80166cc:	f107 0308 	add.w	r3, r7, #8
 80166d0:	2204      	movs	r2, #4
 80166d2:	2100      	movs	r1, #0
 80166d4:	4618      	mov	r0, r3
 80166d6:	f005 f88f 	bl	801b7f8 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 80166da:	2300      	movs	r3, #0
 80166dc:	73fb      	strb	r3, [r7, #15]
 80166de:	e032      	b.n	8016746 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80166e0:	4b1d      	ldr	r3, [pc, #116]	; (8016758 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80166e2:	685b      	ldr	r3, [r3, #4]
 80166e4:	781a      	ldrb	r2, [r3, #0]
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80166ea:	4b1b      	ldr	r3, [pc, #108]	; (8016758 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80166ec:	685b      	ldr	r3, [r3, #4]
 80166ee:	785a      	ldrb	r2, [r3, #1]
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80166f4:	4b18      	ldr	r3, [pc, #96]	; (8016758 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80166f6:	685b      	ldr	r3, [r3, #4]
 80166f8:	789b      	ldrb	r3, [r3, #2]
 80166fa:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80166fc:	7b7b      	ldrb	r3, [r7, #13]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d005      	beq.n	801670e <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8016702:	4b15      	ldr	r3, [pc, #84]	; (8016758 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	689b      	ldr	r3, [r3, #8]
 8016708:	6878      	ldr	r0, [r7, #4]
 801670a:	4798      	blx	r3
 801670c:	e00b      	b.n	8016726 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801670e:	4b12      	ldr	r3, [pc, #72]	; (8016758 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016710:	685b      	ldr	r3, [r3, #4]
 8016712:	781b      	ldrb	r3, [r3, #0]
 8016714:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8016716:	4b10      	ldr	r3, [pc, #64]	; (8016758 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016718:	685b      	ldr	r3, [r3, #4]
 801671a:	785b      	ldrb	r3, [r3, #1]
 801671c:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801671e:	4b0e      	ldr	r3, [pc, #56]	; (8016758 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016720:	685b      	ldr	r3, [r3, #4]
 8016722:	78db      	ldrb	r3, [r3, #3]
 8016724:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8016726:	f7ff feff 	bl	8016528 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801672a:	7b7b      	ldrb	r3, [r7, #13]
 801672c:	f083 0301 	eor.w	r3, r3, #1
 8016730:	b2db      	uxtb	r3, r3
 8016732:	2b00      	cmp	r3, #0
 8016734:	d004      	beq.n	8016740 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8016736:	f107 0308 	add.w	r3, r7, #8
 801673a:	4618      	mov	r0, r3
 801673c:	f7ff feba 	bl	80164b4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8016740:	7bfb      	ldrb	r3, [r7, #15]
 8016742:	3301      	adds	r3, #1
 8016744:	73fb      	strb	r3, [r7, #15]
 8016746:	7bfa      	ldrb	r2, [r7, #15]
 8016748:	7bbb      	ldrb	r3, [r7, #14]
 801674a:	429a      	cmp	r2, r3
 801674c:	d3c8      	bcc.n	80166e0 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 801674e:	bf00      	nop
 8016750:	bf00      	nop
 8016752:	3710      	adds	r7, #16
 8016754:	46bd      	mov	sp, r7
 8016756:	bd80      	pop	{r7, pc}
 8016758:	20001aa0 	.word	0x20001aa0

0801675c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801675c:	b480      	push	{r7}
 801675e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016760:	4b03      	ldr	r3, [pc, #12]	; (8016770 <LoRaMacConfirmQueueGetCnt+0x14>)
 8016762:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8016766:	4618      	mov	r0, r3
 8016768:	46bd      	mov	sp, r7
 801676a:	bc80      	pop	{r7}
 801676c:	4770      	bx	lr
 801676e:	bf00      	nop
 8016770:	20001aa0 	.word	0x20001aa0

08016774 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8016774:	b580      	push	{r7, lr}
 8016776:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016778:	4b06      	ldr	r3, [pc, #24]	; (8016794 <LoRaMacConfirmQueueIsFull+0x20>)
 801677a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801677e:	4618      	mov	r0, r3
 8016780:	f7ff fe34 	bl	80163ec <IsListFull>
 8016784:	4603      	mov	r3, r0
 8016786:	2b00      	cmp	r3, #0
 8016788:	d001      	beq.n	801678e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801678a:	2301      	movs	r3, #1
 801678c:	e000      	b.n	8016790 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801678e:	2300      	movs	r3, #0
    }
}
 8016790:	4618      	mov	r0, r3
 8016792:	bd80      	pop	{r7, pc}
 8016794:	20001aa0 	.word	0x20001aa0

08016798 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b08e      	sub	sp, #56	; 0x38
 801679c:	af00      	add	r7, sp, #0
 801679e:	60f8      	str	r0, [r7, #12]
 80167a0:	607b      	str	r3, [r7, #4]
 80167a2:	460b      	mov	r3, r1
 80167a4:	817b      	strh	r3, [r7, #10]
 80167a6:	4613      	mov	r3, r2
 80167a8:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d101      	bne.n	80167b4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80167b0:	2309      	movs	r3, #9
 80167b2:	e086      	b.n	80168c2 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80167b4:	2300      	movs	r3, #0
 80167b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80167ba:	2301      	movs	r3, #1
 80167bc:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80167be:	2300      	movs	r3, #0
 80167c0:	623b      	str	r3, [r7, #32]
 80167c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80167c6:	2200      	movs	r2, #0
 80167c8:	601a      	str	r2, [r3, #0]
 80167ca:	605a      	str	r2, [r3, #4]
 80167cc:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80167ce:	2300      	movs	r3, #0
 80167d0:	613b      	str	r3, [r7, #16]
 80167d2:	f107 0314 	add.w	r3, r7, #20
 80167d6:	2200      	movs	r2, #0
 80167d8:	601a      	str	r2, [r3, #0]
 80167da:	605a      	str	r2, [r3, #4]
 80167dc:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80167de:	2301      	movs	r3, #1
 80167e0:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80167e2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80167e6:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	b2db      	uxtb	r3, r3
 80167ec:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	0a1b      	lsrs	r3, r3, #8
 80167f2:	b2db      	uxtb	r3, r3
 80167f4:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	0c1b      	lsrs	r3, r3, #16
 80167fa:	b2db      	uxtb	r3, r3
 80167fc:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	0e1b      	lsrs	r3, r3, #24
 8016802:	b2db      	uxtb	r3, r3
 8016804:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8016806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016808:	b2db      	uxtb	r3, r3
 801680a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 801680c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801680e:	0a1b      	lsrs	r3, r3, #8
 8016810:	b2db      	uxtb	r3, r3
 8016812:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8016814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016816:	0c1b      	lsrs	r3, r3, #16
 8016818:	b2db      	uxtb	r3, r3
 801681a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801681c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801681e:	0e1b      	lsrs	r3, r3, #24
 8016820:	b2db      	uxtb	r3, r3
 8016822:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8016824:	e048      	b.n	80168b8 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8016826:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016828:	b2db      	uxtb	r3, r3
 801682a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 801682c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801682e:	3301      	adds	r3, #1
 8016830:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8016832:	f107 0320 	add.w	r3, r7, #32
 8016836:	7a7a      	ldrb	r2, [r7, #9]
 8016838:	f107 0010 	add.w	r0, r7, #16
 801683c:	2110      	movs	r1, #16
 801683e:	f7f8 fa77 	bl	800ed30 <SecureElementAesEncrypt>
 8016842:	4603      	mov	r3, r0
 8016844:	2b00      	cmp	r3, #0
 8016846:	d001      	beq.n	801684c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016848:	230e      	movs	r3, #14
 801684a:	e03a      	b.n	80168c2 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801684c:	2300      	movs	r3, #0
 801684e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016852:	e01e      	b.n	8016892 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8016854:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8016858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801685c:	4413      	add	r3, r2
 801685e:	461a      	mov	r2, r3
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	4413      	add	r3, r2
 8016864:	7819      	ldrb	r1, [r3, #0]
 8016866:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801686a:	3338      	adds	r3, #56	; 0x38
 801686c:	443b      	add	r3, r7
 801686e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8016872:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8016876:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801687a:	4403      	add	r3, r0
 801687c:	4618      	mov	r0, r3
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	4403      	add	r3, r0
 8016882:	404a      	eors	r2, r1
 8016884:	b2d2      	uxtb	r2, r2
 8016886:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016888:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801688c:	3301      	adds	r3, #1
 801688e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016892:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016896:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801689a:	2a10      	cmp	r2, #16
 801689c:	bfa8      	it	ge
 801689e:	2210      	movge	r2, #16
 80168a0:	b212      	sxth	r2, r2
 80168a2:	4293      	cmp	r3, r2
 80168a4:	dbd6      	blt.n	8016854 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80168a6:	897b      	ldrh	r3, [r7, #10]
 80168a8:	3b10      	subs	r3, #16
 80168aa:	b29b      	uxth	r3, r3
 80168ac:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80168ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80168b2:	3310      	adds	r3, #16
 80168b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80168b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	dcb2      	bgt.n	8016826 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80168c0:	2300      	movs	r3, #0
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	3738      	adds	r7, #56	; 0x38
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}

080168ca <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80168ca:	b490      	push	{r4, r7}
 80168cc:	b082      	sub	sp, #8
 80168ce:	af00      	add	r7, sp, #0
 80168d0:	4604      	mov	r4, r0
 80168d2:	4608      	mov	r0, r1
 80168d4:	4611      	mov	r1, r2
 80168d6:	461a      	mov	r2, r3
 80168d8:	4623      	mov	r3, r4
 80168da:	80fb      	strh	r3, [r7, #6]
 80168dc:	4603      	mov	r3, r0
 80168de:	717b      	strb	r3, [r7, #5]
 80168e0:	460b      	mov	r3, r1
 80168e2:	713b      	strb	r3, [r7, #4]
 80168e4:	4613      	mov	r3, r2
 80168e6:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80168e8:	69bb      	ldr	r3, [r7, #24]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d101      	bne.n	80168f2 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80168ee:	2309      	movs	r3, #9
 80168f0:	e04e      	b.n	8016990 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80168f2:	69bb      	ldr	r3, [r7, #24]
 80168f4:	2249      	movs	r2, #73	; 0x49
 80168f6:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 80168f8:	69bb      	ldr	r3, [r7, #24]
 80168fa:	3301      	adds	r3, #1
 80168fc:	2200      	movs	r2, #0
 80168fe:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8016900:	69bb      	ldr	r3, [r7, #24]
 8016902:	3302      	adds	r3, #2
 8016904:	2200      	movs	r2, #0
 8016906:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8016908:	69bb      	ldr	r3, [r7, #24]
 801690a:	3303      	adds	r3, #3
 801690c:	2200      	movs	r2, #0
 801690e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8016910:	69bb      	ldr	r3, [r7, #24]
 8016912:	3304      	adds	r3, #4
 8016914:	2200      	movs	r2, #0
 8016916:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8016918:	69bb      	ldr	r3, [r7, #24]
 801691a:	3305      	adds	r3, #5
 801691c:	78fa      	ldrb	r2, [r7, #3]
 801691e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8016920:	69bb      	ldr	r3, [r7, #24]
 8016922:	3306      	adds	r3, #6
 8016924:	693a      	ldr	r2, [r7, #16]
 8016926:	b2d2      	uxtb	r2, r2
 8016928:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801692a:	693b      	ldr	r3, [r7, #16]
 801692c:	0a1a      	lsrs	r2, r3, #8
 801692e:	69bb      	ldr	r3, [r7, #24]
 8016930:	3307      	adds	r3, #7
 8016932:	b2d2      	uxtb	r2, r2
 8016934:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8016936:	693b      	ldr	r3, [r7, #16]
 8016938:	0c1a      	lsrs	r2, r3, #16
 801693a:	69bb      	ldr	r3, [r7, #24]
 801693c:	3308      	adds	r3, #8
 801693e:	b2d2      	uxtb	r2, r2
 8016940:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8016942:	693b      	ldr	r3, [r7, #16]
 8016944:	0e1a      	lsrs	r2, r3, #24
 8016946:	69bb      	ldr	r3, [r7, #24]
 8016948:	3309      	adds	r3, #9
 801694a:	b2d2      	uxtb	r2, r2
 801694c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801694e:	69bb      	ldr	r3, [r7, #24]
 8016950:	330a      	adds	r3, #10
 8016952:	697a      	ldr	r2, [r7, #20]
 8016954:	b2d2      	uxtb	r2, r2
 8016956:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8016958:	697b      	ldr	r3, [r7, #20]
 801695a:	0a1a      	lsrs	r2, r3, #8
 801695c:	69bb      	ldr	r3, [r7, #24]
 801695e:	330b      	adds	r3, #11
 8016960:	b2d2      	uxtb	r2, r2
 8016962:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8016964:	697b      	ldr	r3, [r7, #20]
 8016966:	0c1a      	lsrs	r2, r3, #16
 8016968:	69bb      	ldr	r3, [r7, #24]
 801696a:	330c      	adds	r3, #12
 801696c:	b2d2      	uxtb	r2, r2
 801696e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8016970:	697b      	ldr	r3, [r7, #20]
 8016972:	0e1a      	lsrs	r2, r3, #24
 8016974:	69bb      	ldr	r3, [r7, #24]
 8016976:	330d      	adds	r3, #13
 8016978:	b2d2      	uxtb	r2, r2
 801697a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801697c:	69bb      	ldr	r3, [r7, #24]
 801697e:	330e      	adds	r3, #14
 8016980:	2200      	movs	r2, #0
 8016982:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8016984:	69bb      	ldr	r3, [r7, #24]
 8016986:	330f      	adds	r3, #15
 8016988:	88fa      	ldrh	r2, [r7, #6]
 801698a:	b2d2      	uxtb	r2, r2
 801698c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801698e:	2300      	movs	r3, #0
}
 8016990:	4618      	mov	r0, r3
 8016992:	3708      	adds	r7, #8
 8016994:	46bd      	mov	sp, r7
 8016996:	bc90      	pop	{r4, r7}
 8016998:	4770      	bx	lr

0801699a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801699a:	b590      	push	{r4, r7, lr}
 801699c:	b08b      	sub	sp, #44	; 0x2c
 801699e:	af04      	add	r7, sp, #16
 80169a0:	6078      	str	r0, [r7, #4]
 80169a2:	4608      	mov	r0, r1
 80169a4:	4611      	mov	r1, r2
 80169a6:	461a      	mov	r2, r3
 80169a8:	4603      	mov	r3, r0
 80169aa:	807b      	strh	r3, [r7, #2]
 80169ac:	460b      	mov	r3, r1
 80169ae:	707b      	strb	r3, [r7, #1]
 80169b0:	4613      	mov	r3, r2
 80169b2:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d002      	beq.n	80169c0 <ComputeCmacB0+0x26>
 80169ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d101      	bne.n	80169c4 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80169c0:	2309      	movs	r3, #9
 80169c2:	e024      	b.n	8016a0e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80169c4:	887b      	ldrh	r3, [r7, #2]
 80169c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80169ca:	d901      	bls.n	80169d0 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80169cc:	230d      	movs	r3, #13
 80169ce:	e01e      	b.n	8016a0e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80169d0:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80169d4:	783a      	ldrb	r2, [r7, #0]
 80169d6:	7879      	ldrb	r1, [r7, #1]
 80169d8:	8878      	ldrh	r0, [r7, #2]
 80169da:	f107 0308 	add.w	r3, r7, #8
 80169de:	9302      	str	r3, [sp, #8]
 80169e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169e2:	9301      	str	r3, [sp, #4]
 80169e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169e6:	9300      	str	r3, [sp, #0]
 80169e8:	4623      	mov	r3, r4
 80169ea:	f7ff ff6e 	bl	80168ca <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80169ee:	887a      	ldrh	r2, [r7, #2]
 80169f0:	7879      	ldrb	r1, [r7, #1]
 80169f2:	f107 0008 	add.w	r0, r7, #8
 80169f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169f8:	9300      	str	r3, [sp, #0]
 80169fa:	460b      	mov	r3, r1
 80169fc:	6879      	ldr	r1, [r7, #4]
 80169fe:	f7f8 f951 	bl	800eca4 <SecureElementComputeAesCmac>
 8016a02:	4603      	mov	r3, r0
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d001      	beq.n	8016a0c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016a08:	230e      	movs	r3, #14
 8016a0a:	e000      	b.n	8016a0e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016a0c:	2300      	movs	r3, #0
}
 8016a0e:	4618      	mov	r0, r3
 8016a10:	371c      	adds	r7, #28
 8016a12:	46bd      	mov	sp, r7
 8016a14:	bd90      	pop	{r4, r7, pc}

08016a16 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8016a16:	b590      	push	{r4, r7, lr}
 8016a18:	b0cd      	sub	sp, #308	; 0x134
 8016a1a:	af04      	add	r7, sp, #16
 8016a1c:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8016a20:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8016a24:	6020      	str	r0, [r4, #0]
 8016a26:	460c      	mov	r4, r1
 8016a28:	4610      	mov	r0, r2
 8016a2a:	4619      	mov	r1, r3
 8016a2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016a30:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016a34:	4622      	mov	r2, r4
 8016a36:	801a      	strh	r2, [r3, #0]
 8016a38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016a3c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016a40:	4602      	mov	r2, r0
 8016a42:	701a      	strb	r2, [r3, #0]
 8016a44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016a48:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016a4c:	460a      	mov	r2, r1
 8016a4e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8016a50:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016a54:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d101      	bne.n	8016a62 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016a5e:	2309      	movs	r3, #9
 8016a60:	e063      	b.n	8016b2a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016a62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016a66:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016a6a:	881b      	ldrh	r3, [r3, #0]
 8016a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016a70:	d901      	bls.n	8016a76 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016a72:	230d      	movs	r3, #13
 8016a74:	e059      	b.n	8016b2a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8016a76:	f107 030c 	add.w	r3, r7, #12
 8016a7a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8016a7e:	2100      	movs	r1, #0
 8016a80:	4618      	mov	r0, r3
 8016a82:	f004 feb9 	bl	801b7f8 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016a86:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8016a8a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016a8e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016a92:	781a      	ldrb	r2, [r3, #0]
 8016a94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016a98:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016a9c:	7819      	ldrb	r1, [r3, #0]
 8016a9e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016aa2:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016aa6:	8818      	ldrh	r0, [r3, #0]
 8016aa8:	f107 030c 	add.w	r3, r7, #12
 8016aac:	9302      	str	r3, [sp, #8]
 8016aae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016ab2:	9301      	str	r3, [sp, #4]
 8016ab4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016ab8:	9300      	str	r3, [sp, #0]
 8016aba:	4623      	mov	r3, r4
 8016abc:	f7ff ff05 	bl	80168ca <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8016ac0:	f107 030c 	add.w	r3, r7, #12
 8016ac4:	3310      	adds	r3, #16
 8016ac6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8016aca:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8016ace:	8812      	ldrh	r2, [r2, #0]
 8016ad0:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8016ad4:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8016ad8:	6809      	ldr	r1, [r1, #0]
 8016ada:	4618      	mov	r0, r3
 8016adc:	f004 fe51 	bl	801b782 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8016ae0:	2306      	movs	r3, #6
 8016ae2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8016ae6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016aea:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016aee:	881b      	ldrh	r3, [r3, #0]
 8016af0:	3310      	adds	r3, #16
 8016af2:	4619      	mov	r1, r3
 8016af4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016af8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016afc:	781b      	ldrb	r3, [r3, #0]
 8016afe:	f107 000c 	add.w	r0, r7, #12
 8016b02:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8016b06:	f7f8 f8e7 	bl	800ecd8 <SecureElementVerifyAesCmac>
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016b10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d101      	bne.n	8016b1c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8016b18:	2300      	movs	r3, #0
 8016b1a:	e006      	b.n	8016b2a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8016b1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016b20:	2b01      	cmp	r3, #1
 8016b22:	d101      	bne.n	8016b28 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8016b24:	2301      	movs	r3, #1
 8016b26:	e000      	b.n	8016b2a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016b28:	230e      	movs	r3, #14
}
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8016b30:	46bd      	mov	sp, r7
 8016b32:	bd90      	pop	{r4, r7, pc}

08016b34 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8016b34:	b480      	push	{r7}
 8016b36:	b085      	sub	sp, #20
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	6039      	str	r1, [r7, #0]
 8016b3e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016b40:	2300      	movs	r3, #0
 8016b42:	73fb      	strb	r3, [r7, #15]
 8016b44:	e011      	b.n	8016b6a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8016b46:	7bfb      	ldrb	r3, [r7, #15]
 8016b48:	4a0c      	ldr	r2, [pc, #48]	; (8016b7c <GetKeyAddrItem+0x48>)
 8016b4a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016b4e:	79fa      	ldrb	r2, [r7, #7]
 8016b50:	429a      	cmp	r2, r3
 8016b52:	d107      	bne.n	8016b64 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8016b54:	7bfb      	ldrb	r3, [r7, #15]
 8016b56:	009b      	lsls	r3, r3, #2
 8016b58:	4a08      	ldr	r2, [pc, #32]	; (8016b7c <GetKeyAddrItem+0x48>)
 8016b5a:	441a      	add	r2, r3
 8016b5c:	683b      	ldr	r3, [r7, #0]
 8016b5e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8016b60:	2300      	movs	r3, #0
 8016b62:	e006      	b.n	8016b72 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016b64:	7bfb      	ldrb	r3, [r7, #15]
 8016b66:	3301      	adds	r3, #1
 8016b68:	73fb      	strb	r3, [r7, #15]
 8016b6a:	7bfb      	ldrb	r3, [r7, #15]
 8016b6c:	2b01      	cmp	r3, #1
 8016b6e:	d9ea      	bls.n	8016b46 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8016b70:	230b      	movs	r3, #11
}
 8016b72:	4618      	mov	r0, r3
 8016b74:	3714      	adds	r7, #20
 8016b76:	46bd      	mov	sp, r7
 8016b78:	bc80      	pop	{r7}
 8016b7a:	4770      	bx	lr
 8016b7c:	20000110 	.word	0x20000110

08016b80 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b088      	sub	sp, #32
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	60b9      	str	r1, [r7, #8]
 8016b88:	607a      	str	r2, [r7, #4]
 8016b8a:	461a      	mov	r2, r3
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	73fb      	strb	r3, [r7, #15]
 8016b90:	4613      	mov	r3, r2
 8016b92:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8016b94:	2300      	movs	r3, #0
 8016b96:	613b      	str	r3, [r7, #16]
 8016b98:	f107 0314 	add.w	r3, r7, #20
 8016b9c:	2200      	movs	r2, #0
 8016b9e:	601a      	str	r2, [r3, #0]
 8016ba0:	605a      	str	r2, [r3, #4]
 8016ba2:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8016ba4:	7bfb      	ldrb	r3, [r7, #15]
 8016ba6:	2b08      	cmp	r3, #8
 8016ba8:	d002      	beq.n	8016bb0 <DeriveSessionKey10x+0x30>
 8016baa:	2b09      	cmp	r3, #9
 8016bac:	d003      	beq.n	8016bb6 <DeriveSessionKey10x+0x36>
 8016bae:	e005      	b.n	8016bbc <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8016bb0:	2301      	movs	r3, #1
 8016bb2:	743b      	strb	r3, [r7, #16]
            break;
 8016bb4:	e004      	b.n	8016bc0 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8016bb6:	2302      	movs	r3, #2
 8016bb8:	743b      	strb	r3, [r7, #16]
            break;
 8016bba:	e001      	b.n	8016bc0 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016bbc:	230a      	movs	r3, #10
 8016bbe:	e02a      	b.n	8016c16 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8016bc0:	68bb      	ldr	r3, [r7, #8]
 8016bc2:	b2db      	uxtb	r3, r3
 8016bc4:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8016bc6:	68bb      	ldr	r3, [r7, #8]
 8016bc8:	0a1b      	lsrs	r3, r3, #8
 8016bca:	b2db      	uxtb	r3, r3
 8016bcc:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8016bce:	68bb      	ldr	r3, [r7, #8]
 8016bd0:	0c1b      	lsrs	r3, r3, #16
 8016bd2:	b2db      	uxtb	r3, r3
 8016bd4:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	b2db      	uxtb	r3, r3
 8016bda:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	0a1b      	lsrs	r3, r3, #8
 8016be0:	b2db      	uxtb	r3, r3
 8016be2:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	0c1b      	lsrs	r3, r3, #16
 8016be8:	b2db      	uxtb	r3, r3
 8016bea:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8016bec:	89bb      	ldrh	r3, [r7, #12]
 8016bee:	b2db      	uxtb	r3, r3
 8016bf0:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8016bf2:	89bb      	ldrh	r3, [r7, #12]
 8016bf4:	0a1b      	lsrs	r3, r3, #8
 8016bf6:	b29b      	uxth	r3, r3
 8016bf8:	b2db      	uxtb	r3, r3
 8016bfa:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016bfc:	7bfa      	ldrb	r2, [r7, #15]
 8016bfe:	f107 0310 	add.w	r3, r7, #16
 8016c02:	2101      	movs	r1, #1
 8016c04:	4618      	mov	r0, r3
 8016c06:	f7f8 f913 	bl	800ee30 <SecureElementDeriveAndStoreKey>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d001      	beq.n	8016c14 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c10:	230e      	movs	r3, #14
 8016c12:	e000      	b.n	8016c16 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016c14:	2300      	movs	r3, #0
}
 8016c16:	4618      	mov	r0, r3
 8016c18:	3720      	adds	r7, #32
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	bd80      	pop	{r7, pc}
	...

08016c20 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8016c20:	b480      	push	{r7}
 8016c22:	b083      	sub	sp, #12
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	4603      	mov	r3, r0
 8016c28:	6039      	str	r1, [r7, #0]
 8016c2a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8016c2c:	683b      	ldr	r3, [r7, #0]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d101      	bne.n	8016c36 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016c32:	2309      	movs	r3, #9
 8016c34:	e029      	b.n	8016c8a <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8016c36:	79fb      	ldrb	r3, [r7, #7]
 8016c38:	3b01      	subs	r3, #1
 8016c3a:	2b03      	cmp	r3, #3
 8016c3c:	d822      	bhi.n	8016c84 <GetLastFcntDown+0x64>
 8016c3e:	a201      	add	r2, pc, #4	; (adr r2, 8016c44 <GetLastFcntDown+0x24>)
 8016c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c44:	08016c55 	.word	0x08016c55
 8016c48:	08016c61 	.word	0x08016c61
 8016c4c:	08016c6d 	.word	0x08016c6d
 8016c50:	08016c79 	.word	0x08016c79
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8016c54:	4b0f      	ldr	r3, [pc, #60]	; (8016c94 <GetLastFcntDown+0x74>)
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	691a      	ldr	r2, [r3, #16]
 8016c5a:	683b      	ldr	r3, [r7, #0]
 8016c5c:	601a      	str	r2, [r3, #0]
            break;
 8016c5e:	e013      	b.n	8016c88 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8016c60:	4b0c      	ldr	r3, [pc, #48]	; (8016c94 <GetLastFcntDown+0x74>)
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	695a      	ldr	r2, [r3, #20]
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	601a      	str	r2, [r3, #0]
            break;
 8016c6a:	e00d      	b.n	8016c88 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8016c6c:	4b09      	ldr	r3, [pc, #36]	; (8016c94 <GetLastFcntDown+0x74>)
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	699a      	ldr	r2, [r3, #24]
 8016c72:	683b      	ldr	r3, [r7, #0]
 8016c74:	601a      	str	r2, [r3, #0]
            break;
 8016c76:	e007      	b.n	8016c88 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8016c78:	4b06      	ldr	r3, [pc, #24]	; (8016c94 <GetLastFcntDown+0x74>)
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	69da      	ldr	r2, [r3, #28]
 8016c7e:	683b      	ldr	r3, [r7, #0]
 8016c80:	601a      	str	r2, [r3, #0]
            break;
 8016c82:	e001      	b.n	8016c88 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8016c84:	2305      	movs	r3, #5
 8016c86:	e000      	b.n	8016c8a <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016c88:	2300      	movs	r3, #0
}
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	370c      	adds	r7, #12
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	bc80      	pop	{r7}
 8016c92:	4770      	bx	lr
 8016c94:	20001ac4 	.word	0x20001ac4

08016c98 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b084      	sub	sp, #16
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	6039      	str	r1, [r7, #0]
 8016ca2:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8016ca8:	f107 020c 	add.w	r2, r7, #12
 8016cac:	79fb      	ldrb	r3, [r7, #7]
 8016cae:	4611      	mov	r1, r2
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f7ff ffb5 	bl	8016c20 <GetLastFcntDown>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d001      	beq.n	8016cc0 <CheckFCntDown+0x28>
    {
        return false;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	e00a      	b.n	8016cd6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	683a      	ldr	r2, [r7, #0]
 8016cc4:	429a      	cmp	r2, r3
 8016cc6:	d803      	bhi.n	8016cd0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8016cc8:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8016cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cce:	d101      	bne.n	8016cd4 <CheckFCntDown+0x3c>
    {
        return true;
 8016cd0:	2301      	movs	r3, #1
 8016cd2:	e000      	b.n	8016cd6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8016cd4:	2300      	movs	r3, #0
    }
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	3710      	adds	r7, #16
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	bd80      	pop	{r7, pc}
	...

08016ce0 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016ce0:	b480      	push	{r7}
 8016ce2:	b083      	sub	sp, #12
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	6039      	str	r1, [r7, #0]
 8016cea:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8016cec:	79fb      	ldrb	r3, [r7, #7]
 8016cee:	3b01      	subs	r3, #1
 8016cf0:	2b03      	cmp	r3, #3
 8016cf2:	d82b      	bhi.n	8016d4c <UpdateFCntDown+0x6c>
 8016cf4:	a201      	add	r2, pc, #4	; (adr r2, 8016cfc <UpdateFCntDown+0x1c>)
 8016cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cfa:	bf00      	nop
 8016cfc:	08016d0d 	.word	0x08016d0d
 8016d00:	08016d1f 	.word	0x08016d1f
 8016d04:	08016d31 	.word	0x08016d31
 8016d08:	08016d43 	.word	0x08016d43
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8016d0c:	4b12      	ldr	r3, [pc, #72]	; (8016d58 <UpdateFCntDown+0x78>)
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	683a      	ldr	r2, [r7, #0]
 8016d12:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8016d14:	4b10      	ldr	r3, [pc, #64]	; (8016d58 <UpdateFCntDown+0x78>)
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	683a      	ldr	r2, [r7, #0]
 8016d1a:	621a      	str	r2, [r3, #32]
            break;
 8016d1c:	e017      	b.n	8016d4e <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8016d1e:	4b0e      	ldr	r3, [pc, #56]	; (8016d58 <UpdateFCntDown+0x78>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	683a      	ldr	r2, [r7, #0]
 8016d24:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8016d26:	4b0c      	ldr	r3, [pc, #48]	; (8016d58 <UpdateFCntDown+0x78>)
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	683a      	ldr	r2, [r7, #0]
 8016d2c:	621a      	str	r2, [r3, #32]
            break;
 8016d2e:	e00e      	b.n	8016d4e <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8016d30:	4b09      	ldr	r3, [pc, #36]	; (8016d58 <UpdateFCntDown+0x78>)
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	683a      	ldr	r2, [r7, #0]
 8016d36:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8016d38:	4b07      	ldr	r3, [pc, #28]	; (8016d58 <UpdateFCntDown+0x78>)
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	683a      	ldr	r2, [r7, #0]
 8016d3e:	621a      	str	r2, [r3, #32]
            break;
 8016d40:	e005      	b.n	8016d4e <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8016d42:	4b05      	ldr	r3, [pc, #20]	; (8016d58 <UpdateFCntDown+0x78>)
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	683a      	ldr	r2, [r7, #0]
 8016d48:	61da      	str	r2, [r3, #28]
            break;
 8016d4a:	e000      	b.n	8016d4e <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8016d4c:	bf00      	nop
    }
}
 8016d4e:	bf00      	nop
 8016d50:	370c      	adds	r7, #12
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bc80      	pop	{r7}
 8016d56:	4770      	bx	lr
 8016d58:	20001ac4 	.word	0x20001ac4

08016d5c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8016d5c:	b480      	push	{r7}
 8016d5e:	b083      	sub	sp, #12
 8016d60:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8016d62:	4b18      	ldr	r3, [pc, #96]	; (8016dc4 <ResetFCnts+0x68>)
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	2200      	movs	r2, #0
 8016d68:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016d6a:	4b16      	ldr	r3, [pc, #88]	; (8016dc4 <ResetFCnts+0x68>)
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8016d72:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016d74:	4b13      	ldr	r3, [pc, #76]	; (8016dc4 <ResetFCnts+0x68>)
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	f04f 32ff 	mov.w	r2, #4294967295
 8016d7c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016d7e:	4b11      	ldr	r3, [pc, #68]	; (8016dc4 <ResetFCnts+0x68>)
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	f04f 32ff 	mov.w	r2, #4294967295
 8016d86:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8016d88:	4b0e      	ldr	r3, [pc, #56]	; (8016dc4 <ResetFCnts+0x68>)
 8016d8a:	681a      	ldr	r2, [r3, #0]
 8016d8c:	4b0d      	ldr	r3, [pc, #52]	; (8016dc4 <ResetFCnts+0x68>)
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	6992      	ldr	r2, [r2, #24]
 8016d92:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016d94:	2300      	movs	r3, #0
 8016d96:	607b      	str	r3, [r7, #4]
 8016d98:	e00b      	b.n	8016db2 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8016d9a:	4b0a      	ldr	r3, [pc, #40]	; (8016dc4 <ResetFCnts+0x68>)
 8016d9c:	681a      	ldr	r2, [r3, #0]
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	3306      	adds	r3, #6
 8016da2:	009b      	lsls	r3, r3, #2
 8016da4:	4413      	add	r3, r2
 8016da6:	f04f 32ff 	mov.w	r2, #4294967295
 8016daa:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	3301      	adds	r3, #1
 8016db0:	607b      	str	r3, [r7, #4]
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	ddf0      	ble.n	8016d9a <ResetFCnts+0x3e>
    }
}
 8016db8:	bf00      	nop
 8016dba:	bf00      	nop
 8016dbc:	370c      	adds	r7, #12
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	bc80      	pop	{r7}
 8016dc2:	4770      	bx	lr
 8016dc4:	20001ac4 	.word	0x20001ac4

08016dc8 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8016dc8:	b480      	push	{r7}
 8016dca:	b083      	sub	sp, #12
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8016dd0:	4b06      	ldr	r3, [pc, #24]	; (8016dec <IsJoinNonce10xOk+0x24>)
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	689b      	ldr	r3, [r3, #8]
 8016dd6:	687a      	ldr	r2, [r7, #4]
 8016dd8:	429a      	cmp	r2, r3
 8016dda:	bf8c      	ite	hi
 8016ddc:	2301      	movhi	r3, #1
 8016dde:	2300      	movls	r3, #0
 8016de0:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8016de2:	4618      	mov	r0, r3
 8016de4:	370c      	adds	r7, #12
 8016de6:	46bd      	mov	sp, r7
 8016de8:	bc80      	pop	{r7}
 8016dea:	4770      	bx	lr
 8016dec:	20001ac4 	.word	0x20001ac4

08016df0 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b082      	sub	sp, #8
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d101      	bne.n	8016e02 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8016dfe:	2308      	movs	r3, #8
 8016e00:	e01c      	b.n	8016e3c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8016e02:	4a10      	ldr	r2, [pc, #64]	; (8016e44 <LoRaMacCryptoInit+0x54>)
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8016e08:	4b0e      	ldr	r3, [pc, #56]	; (8016e44 <LoRaMacCryptoInit+0x54>)
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	2228      	movs	r2, #40	; 0x28
 8016e0e:	2100      	movs	r1, #0
 8016e10:	4618      	mov	r0, r3
 8016e12:	f004 fcf1 	bl	801b7f8 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8016e16:	4b0b      	ldr	r3, [pc, #44]	; (8016e44 <LoRaMacCryptoInit+0x54>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	2201      	movs	r2, #1
 8016e1c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8016e1e:	4b09      	ldr	r3, [pc, #36]	; (8016e44 <LoRaMacCryptoInit+0x54>)
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	2201      	movs	r2, #1
 8016e24:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8016e26:	4b07      	ldr	r3, [pc, #28]	; (8016e44 <LoRaMacCryptoInit+0x54>)
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	2201      	movs	r2, #1
 8016e2c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8016e2e:	4b05      	ldr	r3, [pc, #20]	; (8016e44 <LoRaMacCryptoInit+0x54>)
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	2200      	movs	r2, #0
 8016e34:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016e36:	f7ff ff91 	bl	8016d5c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8016e3a:	2300      	movs	r3, #0
}
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	3708      	adds	r7, #8
 8016e40:	46bd      	mov	sp, r7
 8016e42:	bd80      	pop	{r7, pc}
 8016e44:	20001ac4 	.word	0x20001ac4

08016e48 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016e48:	b480      	push	{r7}
 8016e4a:	b083      	sub	sp, #12
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8016e50:	4b04      	ldr	r3, [pc, #16]	; (8016e64 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	687a      	ldr	r2, [r7, #4]
 8016e56:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8016e58:	2300      	movs	r3, #0
}
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	370c      	adds	r7, #12
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bc80      	pop	{r7}
 8016e62:	4770      	bx	lr
 8016e64:	20001ac4 	.word	0x20001ac4

08016e68 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016e68:	b480      	push	{r7}
 8016e6a:	b083      	sub	sp, #12
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d101      	bne.n	8016e7a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016e76:	2309      	movs	r3, #9
 8016e78:	e006      	b.n	8016e88 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8016e7a:	4b06      	ldr	r3, [pc, #24]	; (8016e94 <LoRaMacCryptoGetFCntUp+0x2c>)
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	68db      	ldr	r3, [r3, #12]
 8016e80:	1c5a      	adds	r2, r3, #1
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016e86:	2300      	movs	r3, #0
}
 8016e88:	4618      	mov	r0, r3
 8016e8a:	370c      	adds	r7, #12
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bc80      	pop	{r7}
 8016e90:	4770      	bx	lr
 8016e92:	bf00      	nop
 8016e94:	20001ac4 	.word	0x20001ac4

08016e98 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b088      	sub	sp, #32
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	60b9      	str	r1, [r7, #8]
 8016ea2:	607a      	str	r2, [r7, #4]
 8016ea4:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8016eaa:	2300      	movs	r3, #0
 8016eac:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016eae:	2312      	movs	r3, #18
 8016eb0:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d101      	bne.n	8016ebc <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016eb8:	2309      	movs	r3, #9
 8016eba:	e035      	b.n	8016f28 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016ebc:	f107 0214 	add.w	r2, r7, #20
 8016ec0:	7bfb      	ldrb	r3, [r7, #15]
 8016ec2:	4611      	mov	r1, r2
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	f7ff feab 	bl	8016c20 <GetLastFcntDown>
 8016eca:	4603      	mov	r3, r0
 8016ecc:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016ece:	7efb      	ldrb	r3, [r7, #27]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d001      	beq.n	8016ed8 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8016ed4:	7efb      	ldrb	r3, [r7, #27]
 8016ed6:	e027      	b.n	8016f28 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8016ed8:	697b      	ldr	r3, [r7, #20]
 8016eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ede:	d103      	bne.n	8016ee8 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	68ba      	ldr	r2, [r7, #8]
 8016ee4:	601a      	str	r2, [r3, #0]
 8016ee6:	e01e      	b.n	8016f26 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016ee8:	697b      	ldr	r3, [r7, #20]
 8016eea:	b29b      	uxth	r3, r3
 8016eec:	68ba      	ldr	r2, [r7, #8]
 8016eee:	1ad3      	subs	r3, r2, r3
 8016ef0:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8016ef2:	69fb      	ldr	r3, [r7, #28]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	dd05      	ble.n	8016f04 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016ef8:	697a      	ldr	r2, [r7, #20]
 8016efa:	69fb      	ldr	r3, [r7, #28]
 8016efc:	441a      	add	r2, r3
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	601a      	str	r2, [r3, #0]
 8016f02:	e010      	b.n	8016f26 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8016f04:	69fb      	ldr	r3, [r7, #28]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d104      	bne.n	8016f14 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016f0a:	697a      	ldr	r2, [r7, #20]
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016f10:	2307      	movs	r3, #7
 8016f12:	e009      	b.n	8016f28 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8016f14:	697b      	ldr	r3, [r7, #20]
 8016f16:	0c1b      	lsrs	r3, r3, #16
 8016f18:	041b      	lsls	r3, r3, #16
 8016f1a:	68ba      	ldr	r2, [r7, #8]
 8016f1c:	4413      	add	r3, r2
 8016f1e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016f26:	2300      	movs	r3, #0
}
 8016f28:	4618      	mov	r0, r3
 8016f2a:	3720      	adds	r7, #32
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	bd80      	pop	{r7, pc}

08016f30 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016f30:	b480      	push	{r7}
 8016f32:	b085      	sub	sp, #20
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d101      	bne.n	8016f42 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016f3e:	2309      	movs	r3, #9
 8016f40:	e019      	b.n	8016f76 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016f42:	2300      	movs	r3, #0
 8016f44:	60fb      	str	r3, [r7, #12]
 8016f46:	e012      	b.n	8016f6e <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016f48:	4b0d      	ldr	r3, [pc, #52]	; (8016f80 <LoRaMacCryptoSetMulticastReference+0x50>)
 8016f4a:	6819      	ldr	r1, [r3, #0]
 8016f4c:	68fa      	ldr	r2, [r7, #12]
 8016f4e:	4613      	mov	r3, r2
 8016f50:	005b      	lsls	r3, r3, #1
 8016f52:	4413      	add	r3, r2
 8016f54:	011b      	lsls	r3, r3, #4
 8016f56:	461a      	mov	r2, r3
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	4413      	add	r3, r2
 8016f5c:	68fa      	ldr	r2, [r7, #12]
 8016f5e:	3206      	adds	r2, #6
 8016f60:	0092      	lsls	r2, r2, #2
 8016f62:	440a      	add	r2, r1
 8016f64:	3204      	adds	r2, #4
 8016f66:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	3301      	adds	r3, #1
 8016f6c:	60fb      	str	r3, [r7, #12]
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	dde9      	ble.n	8016f48 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016f74:	2300      	movs	r3, #0
}
 8016f76:	4618      	mov	r0, r3
 8016f78:	3714      	adds	r7, #20
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	bc80      	pop	{r7}
 8016f7e:	4770      	bx	lr
 8016f80:	20001ac4 	.word	0x20001ac4

08016f84 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b082      	sub	sp, #8
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	6039      	str	r1, [r7, #0]
 8016f8e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016f90:	79fb      	ldrb	r3, [r7, #7]
 8016f92:	6839      	ldr	r1, [r7, #0]
 8016f94:	4618      	mov	r0, r3
 8016f96:	f7f7 fe27 	bl	800ebe8 <SecureElementSetKey>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d001      	beq.n	8016fa4 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016fa0:	230e      	movs	r3, #14
 8016fa2:	e021      	b.n	8016fe8 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8016fa4:	79fb      	ldrb	r3, [r7, #7]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d11d      	bne.n	8016fe6 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016faa:	4b11      	ldr	r3, [pc, #68]	; (8016ff0 <LoRaMacCryptoSetKey+0x6c>)
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	789b      	ldrb	r3, [r3, #2]
 8016fb0:	210b      	movs	r1, #11
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	f000 fa58 	bl	8017468 <LoRaMacCryptoDeriveLifeTimeKey>
 8016fb8:	4603      	mov	r3, r0
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d001      	beq.n	8016fc2 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016fbe:	230e      	movs	r3, #14
 8016fc0:	e012      	b.n	8016fe8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016fc2:	210c      	movs	r1, #12
 8016fc4:	2000      	movs	r0, #0
 8016fc6:	f000 fa4f 	bl	8017468 <LoRaMacCryptoDeriveLifeTimeKey>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d001      	beq.n	8016fd4 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016fd0:	230e      	movs	r3, #14
 8016fd2:	e009      	b.n	8016fe8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016fd4:	210a      	movs	r1, #10
 8016fd6:	2000      	movs	r0, #0
 8016fd8:	f000 fa46 	bl	8017468 <LoRaMacCryptoDeriveLifeTimeKey>
 8016fdc:	4603      	mov	r3, r0
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d001      	beq.n	8016fe6 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016fe2:	230e      	movs	r3, #14
 8016fe4:	e000      	b.n	8016fe8 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016fe6:	2300      	movs	r3, #0
}
 8016fe8:	4618      	mov	r0, r3
 8016fea:	3708      	adds	r7, #8
 8016fec:	46bd      	mov	sp, r7
 8016fee:	bd80      	pop	{r7, pc}
 8016ff0:	20001ac4 	.word	0x20001ac4

08016ff4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b086      	sub	sp, #24
 8016ff8:	af02      	add	r7, sp, #8
 8016ffa:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d101      	bne.n	8017006 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017002:	2309      	movs	r3, #9
 8017004:	e02d      	b.n	8017062 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8017006:	2301      	movs	r3, #1
 8017008:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 801700a:	4b18      	ldr	r3, [pc, #96]	; (801706c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	889a      	ldrh	r2, [r3, #4]
 8017010:	3201      	adds	r2, #1
 8017012:	b292      	uxth	r2, r2
 8017014:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8017016:	4b15      	ldr	r3, [pc, #84]	; (801706c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	889a      	ldrh	r2, [r3, #4]
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8017020:	6878      	ldr	r0, [r7, #4]
 8017022:	f000 fc1b 	bl	801785c <LoRaMacSerializerJoinRequest>
 8017026:	4603      	mov	r3, r0
 8017028:	2b00      	cmp	r3, #0
 801702a:	d001      	beq.n	8017030 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801702c:	2310      	movs	r3, #16
 801702e:	e018      	b.n	8017062 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	6819      	ldr	r1, [r3, #0]
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	3318      	adds	r3, #24
 8017038:	7bfa      	ldrb	r2, [r7, #15]
 801703a:	9300      	str	r3, [sp, #0]
 801703c:	4613      	mov	r3, r2
 801703e:	2213      	movs	r2, #19
 8017040:	2000      	movs	r0, #0
 8017042:	f7f7 fe2f 	bl	800eca4 <SecureElementComputeAesCmac>
 8017046:	4603      	mov	r3, r0
 8017048:	2b00      	cmp	r3, #0
 801704a:	d001      	beq.n	8017050 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801704c:	230e      	movs	r3, #14
 801704e:	e008      	b.n	8017062 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8017050:	6878      	ldr	r0, [r7, #4]
 8017052:	f000 fc03 	bl	801785c <LoRaMacSerializerJoinRequest>
 8017056:	4603      	mov	r3, r0
 8017058:	2b00      	cmp	r3, #0
 801705a:	d001      	beq.n	8017060 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801705c:	2310      	movs	r3, #16
 801705e:	e000      	b.n	8017062 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017060:	2300      	movs	r3, #0
}
 8017062:	4618      	mov	r0, r3
 8017064:	3710      	adds	r7, #16
 8017066:	46bd      	mov	sp, r7
 8017068:	bd80      	pop	{r7, pc}
 801706a:	bf00      	nop
 801706c:	20001ac4 	.word	0x20001ac4

08017070 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8017070:	b590      	push	{r4, r7, lr}
 8017072:	b097      	sub	sp, #92	; 0x5c
 8017074:	af04      	add	r7, sp, #16
 8017076:	4603      	mov	r3, r0
 8017078:	60b9      	str	r1, [r7, #8]
 801707a:	607a      	str	r2, [r7, #4]
 801707c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d002      	beq.n	801708a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d101      	bne.n	801708e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801708a:	2309      	movs	r3, #9
 801708c:	e0d3      	b.n	8017236 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801708e:	2312      	movs	r3, #18
 8017090:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8017094:	2300      	movs	r3, #0
 8017096:	617b      	str	r3, [r7, #20]
 8017098:	f107 0318 	add.w	r3, r7, #24
 801709c:	221d      	movs	r2, #29
 801709e:	2100      	movs	r1, #0
 80170a0:	4618      	mov	r0, r3
 80170a2:	f009 ffeb 	bl	802107c <memset>
    uint8_t versionMinor         = 0;
 80170a6:	2300      	movs	r3, #0
 80170a8:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80170aa:	4b65      	ldr	r3, [pc, #404]	; (8017240 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	889b      	ldrh	r3, [r3, #4]
 80170b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	681c      	ldr	r4, [r3, #0]
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	791b      	ldrb	r3, [r3, #4]
 80170bc:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80170c0:	7bf8      	ldrb	r0, [r7, #15]
 80170c2:	f107 0213 	add.w	r2, r7, #19
 80170c6:	9202      	str	r2, [sp, #8]
 80170c8:	f107 0214 	add.w	r2, r7, #20
 80170cc:	9201      	str	r2, [sp, #4]
 80170ce:	9300      	str	r3, [sp, #0]
 80170d0:	4623      	mov	r3, r4
 80170d2:	460a      	mov	r2, r1
 80170d4:	68b9      	ldr	r1, [r7, #8]
 80170d6:	f7f7 feeb 	bl	800eeb0 <SecureElementProcessJoinAccept>
 80170da:	4603      	mov	r3, r0
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d001      	beq.n	80170e4 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80170e0:	230e      	movs	r3, #14
 80170e2:	e0a8      	b.n	8017236 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	6818      	ldr	r0, [r3, #0]
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	791b      	ldrb	r3, [r3, #4]
 80170ec:	b29a      	uxth	r2, r3
 80170ee:	f107 0314 	add.w	r3, r7, #20
 80170f2:	4619      	mov	r1, r3
 80170f4:	f004 fb45 	bl	801b782 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80170f8:	6878      	ldr	r0, [r7, #4]
 80170fa:	f000 f9f0 	bl	80174de <LoRaMacParserJoinAccept>
 80170fe:	4603      	mov	r3, r0
 8017100:	2b00      	cmp	r3, #0
 8017102:	d001      	beq.n	8017108 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8017104:	230f      	movs	r3, #15
 8017106:	e096      	b.n	8017236 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8017108:	2300      	movs	r3, #0
 801710a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	799b      	ldrb	r3, [r3, #6]
 8017112:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	79db      	ldrb	r3, [r3, #7]
 8017118:	021b      	lsls	r3, r3, #8
 801711a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801711c:	4313      	orrs	r3, r2
 801711e:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	7a1b      	ldrb	r3, [r3, #8]
 8017124:	041b      	lsls	r3, r3, #16
 8017126:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017128:	4313      	orrs	r3, r2
 801712a:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 801712c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801712e:	f7ff fe4b 	bl	8016dc8 <IsJoinNonce10xOk>
 8017132:	4603      	mov	r3, r0
 8017134:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8017138:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801713c:	2b00      	cmp	r3, #0
 801713e:	d010      	beq.n	8017162 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8017140:	4b3f      	ldr	r3, [pc, #252]	; (8017240 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017146:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8017148:	7cfb      	ldrb	r3, [r7, #19]
 801714a:	210b      	movs	r1, #11
 801714c:	4618      	mov	r0, r3
 801714e:	f000 f98b 	bl	8017468 <LoRaMacCryptoDeriveLifeTimeKey>
 8017152:	4603      	mov	r3, r0
 8017154:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017158:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801715c:	2b00      	cmp	r3, #0
 801715e:	d005      	beq.n	801716c <LoRaMacCryptoHandleJoinAccept+0xfc>
 8017160:	e001      	b.n	8017166 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8017162:	2303      	movs	r3, #3
 8017164:	e067      	b.n	8017236 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8017166:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801716a:	e064      	b.n	8017236 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 801716c:	210c      	movs	r1, #12
 801716e:	2000      	movs	r0, #0
 8017170:	f000 f97a 	bl	8017468 <LoRaMacCryptoDeriveLifeTimeKey>
 8017174:	4603      	mov	r3, r0
 8017176:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801717a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801717e:	2b00      	cmp	r3, #0
 8017180:	d002      	beq.n	8017188 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8017182:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017186:	e056      	b.n	8017236 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8017188:	210a      	movs	r1, #10
 801718a:	2000      	movs	r0, #0
 801718c:	f000 f96c 	bl	8017468 <LoRaMacCryptoDeriveLifeTimeKey>
 8017190:	4603      	mov	r3, r0
 8017192:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017196:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801719a:	2b00      	cmp	r3, #0
 801719c:	d002      	beq.n	80171a4 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 801719e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80171a2:	e048      	b.n	8017236 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	7a5b      	ldrb	r3, [r3, #9]
 80171a8:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	7a9b      	ldrb	r3, [r3, #10]
 80171ae:	021b      	lsls	r3, r3, #8
 80171b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80171b2:	4313      	orrs	r3, r2
 80171b4:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	7adb      	ldrb	r3, [r3, #11]
 80171ba:	041b      	lsls	r3, r3, #16
 80171bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80171be:	4313      	orrs	r3, r2
 80171c0:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80171c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80171c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80171c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80171ca:	2009      	movs	r0, #9
 80171cc:	f7ff fcd8 	bl	8016b80 <DeriveSessionKey10x>
 80171d0:	4603      	mov	r3, r0
 80171d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80171d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d002      	beq.n	80171e4 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 80171de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80171e2:	e028      	b.n	8017236 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80171e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80171e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80171ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80171ec:	2008      	movs	r0, #8
 80171ee:	f7ff fcc7 	bl	8016b80 <DeriveSessionKey10x>
 80171f2:	4603      	mov	r3, r0
 80171f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80171f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d002      	beq.n	8017206 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8017200:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017204:	e017      	b.n	8017236 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8017206:	4b0e      	ldr	r3, [pc, #56]	; (8017240 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	7cfa      	ldrb	r2, [r7, #19]
 801720c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 801720e:	4b0c      	ldr	r3, [pc, #48]	; (8017240 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	2200      	movs	r2, #0
 8017214:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8017216:	4b0a      	ldr	r3, [pc, #40]	; (8017240 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	f04f 32ff 	mov.w	r2, #4294967295
 801721e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8017220:	4b07      	ldr	r3, [pc, #28]	; (8017240 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	f04f 32ff 	mov.w	r2, #4294967295
 8017228:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801722a:	4b05      	ldr	r3, [pc, #20]	; (8017240 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	f04f 32ff 	mov.w	r2, #4294967295
 8017232:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8017234:	2300      	movs	r3, #0
}
 8017236:	4618      	mov	r0, r3
 8017238:	374c      	adds	r7, #76	; 0x4c
 801723a:	46bd      	mov	sp, r7
 801723c:	bd90      	pop	{r4, r7, pc}
 801723e:	bf00      	nop
 8017240:	20001ac4 	.word	0x20001ac4

08017244 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8017244:	b590      	push	{r4, r7, lr}
 8017246:	b08b      	sub	sp, #44	; 0x2c
 8017248:	af04      	add	r7, sp, #16
 801724a:	60f8      	str	r0, [r7, #12]
 801724c:	607b      	str	r3, [r7, #4]
 801724e:	460b      	mov	r3, r1
 8017250:	72fb      	strb	r3, [r7, #11]
 8017252:	4613      	mov	r3, r2
 8017254:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8017256:	2312      	movs	r3, #18
 8017258:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801725a:	2309      	movs	r3, #9
 801725c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d101      	bne.n	8017268 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017264:	2309      	movs	r3, #9
 8017266:	e05f      	b.n	8017328 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8017268:	4b31      	ldr	r3, [pc, #196]	; (8017330 <LoRaMacCryptoSecureMessage+0xec>)
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	68db      	ldr	r3, [r3, #12]
 801726e:	68fa      	ldr	r2, [r7, #12]
 8017270:	429a      	cmp	r2, r3
 8017272:	d201      	bcs.n	8017278 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8017274:	2306      	movs	r3, #6
 8017276:	e057      	b.n	8017328 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801727e:	2b00      	cmp	r3, #0
 8017280:	d101      	bne.n	8017286 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8017282:	2308      	movs	r3, #8
 8017284:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8017286:	4b2a      	ldr	r3, [pc, #168]	; (8017330 <LoRaMacCryptoSecureMessage+0xec>)
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	68db      	ldr	r3, [r3, #12]
 801728c:	68fa      	ldr	r2, [r7, #12]
 801728e:	429a      	cmp	r2, r3
 8017290:	d916      	bls.n	80172c0 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801729c:	b219      	sxth	r1, r3
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	689c      	ldr	r4, [r3, #8]
 80172a2:	7dfa      	ldrb	r2, [r7, #23]
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	9301      	str	r3, [sp, #4]
 80172a8:	2300      	movs	r3, #0
 80172aa:	9300      	str	r3, [sp, #0]
 80172ac:	4623      	mov	r3, r4
 80172ae:	f7ff fa73 	bl	8016798 <PayloadEncrypt>
 80172b2:	4603      	mov	r3, r0
 80172b4:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80172b6:	7dbb      	ldrb	r3, [r7, #22]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d001      	beq.n	80172c0 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80172bc:	7dbb      	ldrb	r3, [r7, #22]
 80172be:	e033      	b.n	8017328 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80172c0:	6878      	ldr	r0, [r7, #4]
 80172c2:	f000 fb4d 	bl	8017960 <LoRaMacSerializerData>
 80172c6:	4603      	mov	r3, r0
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d001      	beq.n	80172d0 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80172cc:	2310      	movs	r3, #16
 80172ce:	e02b      	b.n	8017328 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80172d0:	2308      	movs	r3, #8
 80172d2:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	6818      	ldr	r0, [r3, #0]
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	791b      	ldrb	r3, [r3, #4]
 80172dc:	b29b      	uxth	r3, r3
 80172de:	3b04      	subs	r3, #4
 80172e0:	b299      	uxth	r1, r3
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	689b      	ldr	r3, [r3, #8]
 80172e6:	687a      	ldr	r2, [r7, #4]
 80172e8:	322c      	adds	r2, #44	; 0x2c
 80172ea:	7dfc      	ldrb	r4, [r7, #23]
 80172ec:	9203      	str	r2, [sp, #12]
 80172ee:	68fa      	ldr	r2, [r7, #12]
 80172f0:	9202      	str	r2, [sp, #8]
 80172f2:	9301      	str	r3, [sp, #4]
 80172f4:	2300      	movs	r3, #0
 80172f6:	9300      	str	r3, [sp, #0]
 80172f8:	2300      	movs	r3, #0
 80172fa:	4622      	mov	r2, r4
 80172fc:	f7ff fb4d 	bl	801699a <ComputeCmacB0>
 8017300:	4603      	mov	r3, r0
 8017302:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017304:	7dbb      	ldrb	r3, [r7, #22]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d001      	beq.n	801730e <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 801730a:	7dbb      	ldrb	r3, [r7, #22]
 801730c:	e00c      	b.n	8017328 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801730e:	6878      	ldr	r0, [r7, #4]
 8017310:	f000 fb26 	bl	8017960 <LoRaMacSerializerData>
 8017314:	4603      	mov	r3, r0
 8017316:	2b00      	cmp	r3, #0
 8017318:	d001      	beq.n	801731e <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801731a:	2310      	movs	r3, #16
 801731c:	e004      	b.n	8017328 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801731e:	4b04      	ldr	r3, [pc, #16]	; (8017330 <LoRaMacCryptoSecureMessage+0xec>)
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	68fa      	ldr	r2, [r7, #12]
 8017324:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8017326:	2300      	movs	r3, #0
}
 8017328:	4618      	mov	r0, r3
 801732a:	371c      	adds	r7, #28
 801732c:	46bd      	mov	sp, r7
 801732e:	bd90      	pop	{r4, r7, pc}
 8017330:	20001ac4 	.word	0x20001ac4

08017334 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8017334:	b590      	push	{r4, r7, lr}
 8017336:	b08b      	sub	sp, #44	; 0x2c
 8017338:	af04      	add	r7, sp, #16
 801733a:	60b9      	str	r1, [r7, #8]
 801733c:	607b      	str	r3, [r7, #4]
 801733e:	4603      	mov	r3, r0
 8017340:	73fb      	strb	r3, [r7, #15]
 8017342:	4613      	mov	r3, r2
 8017344:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8017346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017348:	2b00      	cmp	r3, #0
 801734a:	d101      	bne.n	8017350 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801734c:	2309      	movs	r3, #9
 801734e:	e084      	b.n	801745a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8017350:	7bbb      	ldrb	r3, [r7, #14]
 8017352:	6879      	ldr	r1, [r7, #4]
 8017354:	4618      	mov	r0, r3
 8017356:	f7ff fc9f 	bl	8016c98 <CheckFCntDown>
 801735a:	4603      	mov	r3, r0
 801735c:	f083 0301 	eor.w	r3, r3, #1
 8017360:	b2db      	uxtb	r3, r3
 8017362:	2b00      	cmp	r3, #0
 8017364:	d001      	beq.n	801736a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8017366:	2306      	movs	r3, #6
 8017368:	e077      	b.n	801745a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801736a:	2312      	movs	r3, #18
 801736c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801736e:	2309      	movs	r3, #9
 8017370:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8017372:	2308      	movs	r3, #8
 8017374:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8017376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017378:	f000 f97c 	bl	8017674 <LoRaMacParserData>
 801737c:	4603      	mov	r3, r0
 801737e:	2b00      	cmp	r3, #0
 8017380:	d001      	beq.n	8017386 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8017382:	230f      	movs	r3, #15
 8017384:	e069      	b.n	801745a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8017386:	f107 0210 	add.w	r2, r7, #16
 801738a:	7bfb      	ldrb	r3, [r7, #15]
 801738c:	4611      	mov	r1, r2
 801738e:	4618      	mov	r0, r3
 8017390:	f7ff fbd0 	bl	8016b34 <GetKeyAddrItem>
 8017394:	4603      	mov	r3, r0
 8017396:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017398:	7d7b      	ldrb	r3, [r7, #21]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d001      	beq.n	80173a2 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801739e:	7d7b      	ldrb	r3, [r7, #21]
 80173a0:	e05b      	b.n	801745a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80173a2:	693b      	ldr	r3, [r7, #16]
 80173a4:	785b      	ldrb	r3, [r3, #1]
 80173a6:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80173a8:	693b      	ldr	r3, [r7, #16]
 80173aa:	789b      	ldrb	r3, [r3, #2]
 80173ac:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80173ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173b0:	689b      	ldr	r3, [r3, #8]
 80173b2:	68ba      	ldr	r2, [r7, #8]
 80173b4:	429a      	cmp	r2, r3
 80173b6:	d001      	beq.n	80173bc <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80173b8:	2302      	movs	r3, #2
 80173ba:	e04e      	b.n	801745a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80173bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173be:	7b1b      	ldrb	r3, [r3, #12]
 80173c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80173c4:	b2db      	uxtb	r3, r3
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	bf14      	ite	ne
 80173ca:	2301      	movne	r3, #1
 80173cc:	2300      	moveq	r3, #0
 80173ce:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80173d0:	4b24      	ldr	r3, [pc, #144]	; (8017464 <LoRaMacCryptoUnsecureMessage+0x130>)
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	789b      	ldrb	r3, [r3, #2]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d101      	bne.n	80173de <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80173da:	2300      	movs	r3, #0
 80173dc:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80173de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e0:	6818      	ldr	r0, [r3, #0]
 80173e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e4:	791b      	ldrb	r3, [r3, #4]
 80173e6:	b29b      	uxth	r3, r3
 80173e8:	3b04      	subs	r3, #4
 80173ea:	b299      	uxth	r1, r3
 80173ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173f0:	7dbc      	ldrb	r4, [r7, #22]
 80173f2:	7d3a      	ldrb	r2, [r7, #20]
 80173f4:	9303      	str	r3, [sp, #12]
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	9302      	str	r3, [sp, #8]
 80173fa:	68bb      	ldr	r3, [r7, #8]
 80173fc:	9301      	str	r3, [sp, #4]
 80173fe:	2301      	movs	r3, #1
 8017400:	9300      	str	r3, [sp, #0]
 8017402:	4623      	mov	r3, r4
 8017404:	f7ff fb07 	bl	8016a16 <VerifyCmacB0>
 8017408:	4603      	mov	r3, r0
 801740a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801740c:	7d7b      	ldrb	r3, [r7, #21]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d001      	beq.n	8017416 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8017412:	7d7b      	ldrb	r3, [r7, #21]
 8017414:	e021      	b.n	801745a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8017416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017418:	f893 3020 	ldrb.w	r3, [r3, #32]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d101      	bne.n	8017424 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8017420:	2308      	movs	r3, #8
 8017422:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8017424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017426:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801742a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801742e:	b219      	sxth	r1, r3
 8017430:	7dfa      	ldrb	r2, [r7, #23]
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	9301      	str	r3, [sp, #4]
 8017436:	2301      	movs	r3, #1
 8017438:	9300      	str	r3, [sp, #0]
 801743a:	68bb      	ldr	r3, [r7, #8]
 801743c:	f7ff f9ac 	bl	8016798 <PayloadEncrypt>
 8017440:	4603      	mov	r3, r0
 8017442:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017444:	7d7b      	ldrb	r3, [r7, #21]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d001      	beq.n	801744e <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 801744a:	7d7b      	ldrb	r3, [r7, #21]
 801744c:	e005      	b.n	801745a <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 801744e:	7bbb      	ldrb	r3, [r7, #14]
 8017450:	6879      	ldr	r1, [r7, #4]
 8017452:	4618      	mov	r0, r3
 8017454:	f7ff fc44 	bl	8016ce0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8017458:	2300      	movs	r3, #0
}
 801745a:	4618      	mov	r0, r3
 801745c:	371c      	adds	r7, #28
 801745e:	46bd      	mov	sp, r7
 8017460:	bd90      	pop	{r4, r7, pc}
 8017462:	bf00      	nop
 8017464:	20001ac4 	.word	0x20001ac4

08017468 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b088      	sub	sp, #32
 801746c:	af00      	add	r7, sp, #0
 801746e:	4603      	mov	r3, r0
 8017470:	460a      	mov	r2, r1
 8017472:	71fb      	strb	r3, [r7, #7]
 8017474:	4613      	mov	r3, r2
 8017476:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8017478:	2300      	movs	r3, #0
 801747a:	60fb      	str	r3, [r7, #12]
 801747c:	f107 0310 	add.w	r3, r7, #16
 8017480:	2200      	movs	r2, #0
 8017482:	601a      	str	r2, [r3, #0]
 8017484:	605a      	str	r2, [r3, #4]
 8017486:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8017488:	2300      	movs	r3, #0
 801748a:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 801748c:	79bb      	ldrb	r3, [r7, #6]
 801748e:	2b0c      	cmp	r3, #12
 8017490:	d00b      	beq.n	80174aa <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8017492:	2b0c      	cmp	r3, #12
 8017494:	dc0f      	bgt.n	80174b6 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8017496:	2b0a      	cmp	r3, #10
 8017498:	d00a      	beq.n	80174b0 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 801749a:	2b0b      	cmp	r3, #11
 801749c:	d10b      	bne.n	80174b6 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 801749e:	79fb      	ldrb	r3, [r7, #7]
 80174a0:	2b01      	cmp	r3, #1
 80174a2:	d10a      	bne.n	80174ba <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 80174a4:	2320      	movs	r3, #32
 80174a6:	733b      	strb	r3, [r7, #12]
            }
            break;
 80174a8:	e007      	b.n	80174ba <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 80174aa:	230b      	movs	r3, #11
 80174ac:	77fb      	strb	r3, [r7, #31]
            break;
 80174ae:	e005      	b.n	80174bc <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 80174b0:	2330      	movs	r3, #48	; 0x30
 80174b2:	733b      	strb	r3, [r7, #12]
            break;
 80174b4:	e002      	b.n	80174bc <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80174b6:	230a      	movs	r3, #10
 80174b8:	e00d      	b.n	80174d6 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 80174ba:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 80174bc:	79ba      	ldrb	r2, [r7, #6]
 80174be:	7ff9      	ldrb	r1, [r7, #31]
 80174c0:	f107 030c 	add.w	r3, r7, #12
 80174c4:	4618      	mov	r0, r3
 80174c6:	f7f7 fcb3 	bl	800ee30 <SecureElementDeriveAndStoreKey>
 80174ca:	4603      	mov	r3, r0
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d001      	beq.n	80174d4 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80174d0:	230e      	movs	r3, #14
 80174d2:	e000      	b.n	80174d6 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80174d4:	2300      	movs	r3, #0
}
 80174d6:	4618      	mov	r0, r3
 80174d8:	3720      	adds	r7, #32
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}

080174de <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80174de:	b580      	push	{r7, lr}
 80174e0:	b084      	sub	sp, #16
 80174e2:	af00      	add	r7, sp, #0
 80174e4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d003      	beq.n	80174f4 <LoRaMacParserJoinAccept+0x16>
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d101      	bne.n	80174f8 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80174f4:	2302      	movs	r3, #2
 80174f6:	e0b9      	b.n	801766c <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80174f8:	2300      	movs	r3, #0
 80174fa:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	681a      	ldr	r2, [r3, #0]
 8017500:	89fb      	ldrh	r3, [r7, #14]
 8017502:	1c59      	adds	r1, r3, #1
 8017504:	81f9      	strh	r1, [r7, #14]
 8017506:	4413      	add	r3, r2
 8017508:	781a      	ldrb	r2, [r3, #0]
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	1d98      	adds	r0, r3, #6
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	681a      	ldr	r2, [r3, #0]
 8017516:	89fb      	ldrh	r3, [r7, #14]
 8017518:	4413      	add	r3, r2
 801751a:	2203      	movs	r2, #3
 801751c:	4619      	mov	r1, r3
 801751e:	f004 f930 	bl	801b782 <memcpy1>
    bufItr = bufItr + 3;
 8017522:	89fb      	ldrh	r3, [r7, #14]
 8017524:	3303      	adds	r3, #3
 8017526:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	f103 0009 	add.w	r0, r3, #9
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	681a      	ldr	r2, [r3, #0]
 8017532:	89fb      	ldrh	r3, [r7, #14]
 8017534:	4413      	add	r3, r2
 8017536:	2203      	movs	r2, #3
 8017538:	4619      	mov	r1, r3
 801753a:	f004 f922 	bl	801b782 <memcpy1>
    bufItr = bufItr + 3;
 801753e:	89fb      	ldrh	r3, [r7, #14]
 8017540:	3303      	adds	r3, #3
 8017542:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	681a      	ldr	r2, [r3, #0]
 8017548:	89fb      	ldrh	r3, [r7, #14]
 801754a:	1c59      	adds	r1, r3, #1
 801754c:	81f9      	strh	r1, [r7, #14]
 801754e:	4413      	add	r3, r2
 8017550:	781b      	ldrb	r3, [r3, #0]
 8017552:	461a      	mov	r2, r3
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	681a      	ldr	r2, [r3, #0]
 801755c:	89fb      	ldrh	r3, [r7, #14]
 801755e:	1c59      	adds	r1, r3, #1
 8017560:	81f9      	strh	r1, [r7, #14]
 8017562:	4413      	add	r3, r2
 8017564:	781b      	ldrb	r3, [r3, #0]
 8017566:	021a      	lsls	r2, r3, #8
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	68db      	ldr	r3, [r3, #12]
 801756c:	431a      	orrs	r2, r3
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	681a      	ldr	r2, [r3, #0]
 8017576:	89fb      	ldrh	r3, [r7, #14]
 8017578:	1c59      	adds	r1, r3, #1
 801757a:	81f9      	strh	r1, [r7, #14]
 801757c:	4413      	add	r3, r2
 801757e:	781b      	ldrb	r3, [r3, #0]
 8017580:	041a      	lsls	r2, r3, #16
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	68db      	ldr	r3, [r3, #12]
 8017586:	431a      	orrs	r2, r3
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	681a      	ldr	r2, [r3, #0]
 8017590:	89fb      	ldrh	r3, [r7, #14]
 8017592:	1c59      	adds	r1, r3, #1
 8017594:	81f9      	strh	r1, [r7, #14]
 8017596:	4413      	add	r3, r2
 8017598:	781b      	ldrb	r3, [r3, #0]
 801759a:	061a      	lsls	r2, r3, #24
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	68db      	ldr	r3, [r3, #12]
 80175a0:	431a      	orrs	r2, r3
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	681a      	ldr	r2, [r3, #0]
 80175aa:	89fb      	ldrh	r3, [r7, #14]
 80175ac:	1c59      	adds	r1, r3, #1
 80175ae:	81f9      	strh	r1, [r7, #14]
 80175b0:	4413      	add	r3, r2
 80175b2:	781a      	ldrb	r2, [r3, #0]
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	681a      	ldr	r2, [r3, #0]
 80175bc:	89fb      	ldrh	r3, [r7, #14]
 80175be:	1c59      	adds	r1, r3, #1
 80175c0:	81f9      	strh	r1, [r7, #14]
 80175c2:	4413      	add	r3, r2
 80175c4:	781a      	ldrb	r2, [r3, #0]
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	791b      	ldrb	r3, [r3, #4]
 80175ce:	1f1a      	subs	r2, r3, #4
 80175d0:	89fb      	ldrh	r3, [r7, #14]
 80175d2:	1ad3      	subs	r3, r2, r3
 80175d4:	2b10      	cmp	r3, #16
 80175d6:	d10e      	bne.n	80175f6 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	f103 0012 	add.w	r0, r3, #18
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	681a      	ldr	r2, [r3, #0]
 80175e2:	89fb      	ldrh	r3, [r7, #14]
 80175e4:	4413      	add	r3, r2
 80175e6:	2210      	movs	r2, #16
 80175e8:	4619      	mov	r1, r3
 80175ea:	f004 f8ca 	bl	801b782 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80175ee:	89fb      	ldrh	r3, [r7, #14]
 80175f0:	3310      	adds	r3, #16
 80175f2:	81fb      	strh	r3, [r7, #14]
 80175f4:	e008      	b.n	8017608 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	791b      	ldrb	r3, [r3, #4]
 80175fa:	1f1a      	subs	r2, r3, #4
 80175fc:	89fb      	ldrh	r3, [r7, #14]
 80175fe:	1ad3      	subs	r3, r2, r3
 8017600:	2b00      	cmp	r3, #0
 8017602:	dd01      	ble.n	8017608 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8017604:	2301      	movs	r3, #1
 8017606:	e031      	b.n	801766c <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	681a      	ldr	r2, [r3, #0]
 801760c:	89fb      	ldrh	r3, [r7, #14]
 801760e:	1c59      	adds	r1, r3, #1
 8017610:	81f9      	strh	r1, [r7, #14]
 8017612:	4413      	add	r3, r2
 8017614:	781b      	ldrb	r3, [r3, #0]
 8017616:	461a      	mov	r2, r3
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	681a      	ldr	r2, [r3, #0]
 8017620:	89fb      	ldrh	r3, [r7, #14]
 8017622:	1c59      	adds	r1, r3, #1
 8017624:	81f9      	strh	r1, [r7, #14]
 8017626:	4413      	add	r3, r2
 8017628:	781b      	ldrb	r3, [r3, #0]
 801762a:	021a      	lsls	r2, r3, #8
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017630:	431a      	orrs	r2, r3
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	681a      	ldr	r2, [r3, #0]
 801763a:	89fb      	ldrh	r3, [r7, #14]
 801763c:	1c59      	adds	r1, r3, #1
 801763e:	81f9      	strh	r1, [r7, #14]
 8017640:	4413      	add	r3, r2
 8017642:	781b      	ldrb	r3, [r3, #0]
 8017644:	041a      	lsls	r2, r3, #16
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801764a:	431a      	orrs	r2, r3
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	681a      	ldr	r2, [r3, #0]
 8017654:	89fb      	ldrh	r3, [r7, #14]
 8017656:	1c59      	adds	r1, r3, #1
 8017658:	81f9      	strh	r1, [r7, #14]
 801765a:	4413      	add	r3, r2
 801765c:	781b      	ldrb	r3, [r3, #0]
 801765e:	061a      	lsls	r2, r3, #24
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017664:	431a      	orrs	r2, r3
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801766a:	2300      	movs	r3, #0
}
 801766c:	4618      	mov	r0, r3
 801766e:	3710      	adds	r7, #16
 8017670:	46bd      	mov	sp, r7
 8017672:	bd80      	pop	{r7, pc}

08017674 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b084      	sub	sp, #16
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d003      	beq.n	801768a <LoRaMacParserData+0x16>
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d101      	bne.n	801768e <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801768a:	2302      	movs	r3, #2
 801768c:	e0e2      	b.n	8017854 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 801768e:	2300      	movs	r3, #0
 8017690:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	681a      	ldr	r2, [r3, #0]
 8017696:	89fb      	ldrh	r3, [r7, #14]
 8017698:	1c59      	adds	r1, r3, #1
 801769a:	81f9      	strh	r1, [r7, #14]
 801769c:	4413      	add	r3, r2
 801769e:	781a      	ldrb	r2, [r3, #0]
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681a      	ldr	r2, [r3, #0]
 80176a8:	89fb      	ldrh	r3, [r7, #14]
 80176aa:	1c59      	adds	r1, r3, #1
 80176ac:	81f9      	strh	r1, [r7, #14]
 80176ae:	4413      	add	r3, r2
 80176b0:	781b      	ldrb	r3, [r3, #0]
 80176b2:	461a      	mov	r2, r3
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	681a      	ldr	r2, [r3, #0]
 80176bc:	89fb      	ldrh	r3, [r7, #14]
 80176be:	1c59      	adds	r1, r3, #1
 80176c0:	81f9      	strh	r1, [r7, #14]
 80176c2:	4413      	add	r3, r2
 80176c4:	781b      	ldrb	r3, [r3, #0]
 80176c6:	021a      	lsls	r2, r3, #8
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	689b      	ldr	r3, [r3, #8]
 80176cc:	431a      	orrs	r2, r3
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	681a      	ldr	r2, [r3, #0]
 80176d6:	89fb      	ldrh	r3, [r7, #14]
 80176d8:	1c59      	adds	r1, r3, #1
 80176da:	81f9      	strh	r1, [r7, #14]
 80176dc:	4413      	add	r3, r2
 80176de:	781b      	ldrb	r3, [r3, #0]
 80176e0:	041a      	lsls	r2, r3, #16
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	689b      	ldr	r3, [r3, #8]
 80176e6:	431a      	orrs	r2, r3
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	681a      	ldr	r2, [r3, #0]
 80176f0:	89fb      	ldrh	r3, [r7, #14]
 80176f2:	1c59      	adds	r1, r3, #1
 80176f4:	81f9      	strh	r1, [r7, #14]
 80176f6:	4413      	add	r3, r2
 80176f8:	781b      	ldrb	r3, [r3, #0]
 80176fa:	061a      	lsls	r2, r3, #24
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	689b      	ldr	r3, [r3, #8]
 8017700:	431a      	orrs	r2, r3
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	681a      	ldr	r2, [r3, #0]
 801770a:	89fb      	ldrh	r3, [r7, #14]
 801770c:	1c59      	adds	r1, r3, #1
 801770e:	81f9      	strh	r1, [r7, #14]
 8017710:	4413      	add	r3, r2
 8017712:	781a      	ldrb	r2, [r3, #0]
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	681a      	ldr	r2, [r3, #0]
 801771c:	89fb      	ldrh	r3, [r7, #14]
 801771e:	1c59      	adds	r1, r3, #1
 8017720:	81f9      	strh	r1, [r7, #14]
 8017722:	4413      	add	r3, r2
 8017724:	781b      	ldrb	r3, [r3, #0]
 8017726:	b29a      	uxth	r2, r3
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	681a      	ldr	r2, [r3, #0]
 8017730:	89fb      	ldrh	r3, [r7, #14]
 8017732:	1c59      	adds	r1, r3, #1
 8017734:	81f9      	strh	r1, [r7, #14]
 8017736:	4413      	add	r3, r2
 8017738:	781b      	ldrb	r3, [r3, #0]
 801773a:	0219      	lsls	r1, r3, #8
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	89db      	ldrh	r3, [r3, #14]
 8017740:	b21a      	sxth	r2, r3
 8017742:	b20b      	sxth	r3, r1
 8017744:	4313      	orrs	r3, r2
 8017746:	b21b      	sxth	r3, r3
 8017748:	b29a      	uxth	r2, r3
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	f103 0010 	add.w	r0, r3, #16
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	681a      	ldr	r2, [r3, #0]
 8017758:	89fb      	ldrh	r3, [r7, #14]
 801775a:	18d1      	adds	r1, r2, r3
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	7b1b      	ldrb	r3, [r3, #12]
 8017760:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017764:	b2db      	uxtb	r3, r3
 8017766:	b29b      	uxth	r3, r3
 8017768:	461a      	mov	r2, r3
 801776a:	f004 f80a 	bl	801b782 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	7b1b      	ldrb	r3, [r3, #12]
 8017772:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017776:	b2db      	uxtb	r3, r3
 8017778:	b29a      	uxth	r2, r3
 801777a:	89fb      	ldrh	r3, [r7, #14]
 801777c:	4413      	add	r3, r2
 801777e:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	2200      	movs	r2, #0
 8017784:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	2200      	movs	r2, #0
 801778c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	791b      	ldrb	r3, [r3, #4]
 8017794:	461a      	mov	r2, r3
 8017796:	89fb      	ldrh	r3, [r7, #14]
 8017798:	1ad3      	subs	r3, r2, r3
 801779a:	2b04      	cmp	r3, #4
 801779c:	dd28      	ble.n	80177f0 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	681a      	ldr	r2, [r3, #0]
 80177a2:	89fb      	ldrh	r3, [r7, #14]
 80177a4:	1c59      	adds	r1, r3, #1
 80177a6:	81f9      	strh	r1, [r7, #14]
 80177a8:	4413      	add	r3, r2
 80177aa:	781a      	ldrb	r2, [r3, #0]
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	791a      	ldrb	r2, [r3, #4]
 80177b6:	89fb      	ldrh	r3, [r7, #14]
 80177b8:	b2db      	uxtb	r3, r3
 80177ba:	1ad3      	subs	r3, r2, r3
 80177bc:	b2db      	uxtb	r3, r3
 80177be:	3b04      	subs	r3, #4
 80177c0:	b2da      	uxtb	r2, r3
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	681a      	ldr	r2, [r3, #0]
 80177d0:	89fb      	ldrh	r3, [r7, #14]
 80177d2:	18d1      	adds	r1, r2, r3
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80177da:	b29b      	uxth	r3, r3
 80177dc:	461a      	mov	r2, r3
 80177de:	f003 ffd0 	bl	801b782 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80177e8:	b29a      	uxth	r2, r3
 80177ea:	89fb      	ldrh	r3, [r7, #14]
 80177ec:	4413      	add	r3, r2
 80177ee:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	681a      	ldr	r2, [r3, #0]
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	791b      	ldrb	r3, [r3, #4]
 80177f8:	3b04      	subs	r3, #4
 80177fa:	4413      	add	r3, r2
 80177fc:	781b      	ldrb	r3, [r3, #0]
 80177fe:	461a      	mov	r2, r3
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	6819      	ldr	r1, [r3, #0]
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	791b      	ldrb	r3, [r3, #4]
 8017810:	3b03      	subs	r3, #3
 8017812:	440b      	add	r3, r1
 8017814:	781b      	ldrb	r3, [r3, #0]
 8017816:	021b      	lsls	r3, r3, #8
 8017818:	431a      	orrs	r2, r3
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	6819      	ldr	r1, [r3, #0]
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	791b      	ldrb	r3, [r3, #4]
 801782a:	3b02      	subs	r3, #2
 801782c:	440b      	add	r3, r1
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	041b      	lsls	r3, r3, #16
 8017832:	431a      	orrs	r2, r3
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	6819      	ldr	r1, [r3, #0]
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	791b      	ldrb	r3, [r3, #4]
 8017844:	3b01      	subs	r3, #1
 8017846:	440b      	add	r3, r1
 8017848:	781b      	ldrb	r3, [r3, #0]
 801784a:	061b      	lsls	r3, r3, #24
 801784c:	431a      	orrs	r2, r3
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8017852:	2300      	movs	r3, #0
}
 8017854:	4618      	mov	r0, r3
 8017856:	3710      	adds	r7, #16
 8017858:	46bd      	mov	sp, r7
 801785a:	bd80      	pop	{r7, pc}

0801785c <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801785c:	b580      	push	{r7, lr}
 801785e:	b084      	sub	sp, #16
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	2b00      	cmp	r3, #0
 8017868:	d003      	beq.n	8017872 <LoRaMacSerializerJoinRequest+0x16>
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	2b00      	cmp	r3, #0
 8017870:	d101      	bne.n	8017876 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017872:	2301      	movs	r3, #1
 8017874:	e070      	b.n	8017958 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8017876:	2300      	movs	r3, #0
 8017878:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	791b      	ldrb	r3, [r3, #4]
 801787e:	2b16      	cmp	r3, #22
 8017880:	d801      	bhi.n	8017886 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017882:	2302      	movs	r3, #2
 8017884:	e068      	b.n	8017958 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	681a      	ldr	r2, [r3, #0]
 801788a:	89fb      	ldrh	r3, [r7, #14]
 801788c:	1c59      	adds	r1, r3, #1
 801788e:	81f9      	strh	r1, [r7, #14]
 8017890:	4413      	add	r3, r2
 8017892:	687a      	ldr	r2, [r7, #4]
 8017894:	7952      	ldrb	r2, [r2, #5]
 8017896:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	681a      	ldr	r2, [r3, #0]
 801789c:	89fb      	ldrh	r3, [r7, #14]
 801789e:	18d0      	adds	r0, r2, r3
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	3306      	adds	r3, #6
 80178a4:	2208      	movs	r2, #8
 80178a6:	4619      	mov	r1, r3
 80178a8:	f003 ff86 	bl	801b7b8 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80178ac:	89fb      	ldrh	r3, [r7, #14]
 80178ae:	3308      	adds	r3, #8
 80178b0:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	681a      	ldr	r2, [r3, #0]
 80178b6:	89fb      	ldrh	r3, [r7, #14]
 80178b8:	18d0      	adds	r0, r2, r3
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	330e      	adds	r3, #14
 80178be:	2208      	movs	r2, #8
 80178c0:	4619      	mov	r1, r3
 80178c2:	f003 ff79 	bl	801b7b8 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80178c6:	89fb      	ldrh	r3, [r7, #14]
 80178c8:	3308      	adds	r3, #8
 80178ca:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	8ad9      	ldrh	r1, [r3, #22]
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	681a      	ldr	r2, [r3, #0]
 80178d4:	89fb      	ldrh	r3, [r7, #14]
 80178d6:	1c58      	adds	r0, r3, #1
 80178d8:	81f8      	strh	r0, [r7, #14]
 80178da:	4413      	add	r3, r2
 80178dc:	b2ca      	uxtb	r2, r1
 80178de:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	8adb      	ldrh	r3, [r3, #22]
 80178e4:	0a1b      	lsrs	r3, r3, #8
 80178e6:	b299      	uxth	r1, r3
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	681a      	ldr	r2, [r3, #0]
 80178ec:	89fb      	ldrh	r3, [r7, #14]
 80178ee:	1c58      	adds	r0, r3, #1
 80178f0:	81f8      	strh	r0, [r7, #14]
 80178f2:	4413      	add	r3, r2
 80178f4:	b2ca      	uxtb	r2, r1
 80178f6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	6999      	ldr	r1, [r3, #24]
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	681a      	ldr	r2, [r3, #0]
 8017900:	89fb      	ldrh	r3, [r7, #14]
 8017902:	1c58      	adds	r0, r3, #1
 8017904:	81f8      	strh	r0, [r7, #14]
 8017906:	4413      	add	r3, r2
 8017908:	b2ca      	uxtb	r2, r1
 801790a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	699b      	ldr	r3, [r3, #24]
 8017910:	0a19      	lsrs	r1, r3, #8
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	681a      	ldr	r2, [r3, #0]
 8017916:	89fb      	ldrh	r3, [r7, #14]
 8017918:	1c58      	adds	r0, r3, #1
 801791a:	81f8      	strh	r0, [r7, #14]
 801791c:	4413      	add	r3, r2
 801791e:	b2ca      	uxtb	r2, r1
 8017920:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	699b      	ldr	r3, [r3, #24]
 8017926:	0c19      	lsrs	r1, r3, #16
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	681a      	ldr	r2, [r3, #0]
 801792c:	89fb      	ldrh	r3, [r7, #14]
 801792e:	1c58      	adds	r0, r3, #1
 8017930:	81f8      	strh	r0, [r7, #14]
 8017932:	4413      	add	r3, r2
 8017934:	b2ca      	uxtb	r2, r1
 8017936:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	699b      	ldr	r3, [r3, #24]
 801793c:	0e19      	lsrs	r1, r3, #24
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	681a      	ldr	r2, [r3, #0]
 8017942:	89fb      	ldrh	r3, [r7, #14]
 8017944:	1c58      	adds	r0, r3, #1
 8017946:	81f8      	strh	r0, [r7, #14]
 8017948:	4413      	add	r3, r2
 801794a:	b2ca      	uxtb	r2, r1
 801794c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801794e:	89fb      	ldrh	r3, [r7, #14]
 8017950:	b2da      	uxtb	r2, r3
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017956:	2300      	movs	r3, #0
}
 8017958:	4618      	mov	r0, r3
 801795a:	3710      	adds	r7, #16
 801795c:	46bd      	mov	sp, r7
 801795e:	bd80      	pop	{r7, pc}

08017960 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8017960:	b580      	push	{r7, lr}
 8017962:	b084      	sub	sp, #16
 8017964:	af00      	add	r7, sp, #0
 8017966:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d003      	beq.n	8017976 <LoRaMacSerializerData+0x16>
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d101      	bne.n	801797a <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017976:	2301      	movs	r3, #1
 8017978:	e0e5      	b.n	8017b46 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 801797a:	2300      	movs	r3, #0
 801797c:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801797e:	2308      	movs	r3, #8
 8017980:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	7b1b      	ldrb	r3, [r3, #12]
 8017986:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801798a:	b2db      	uxtb	r3, r3
 801798c:	b29a      	uxth	r2, r3
 801798e:	89bb      	ldrh	r3, [r7, #12]
 8017990:	4413      	add	r3, r2
 8017992:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801799a:	2b00      	cmp	r3, #0
 801799c:	d002      	beq.n	80179a4 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801799e:	89bb      	ldrh	r3, [r7, #12]
 80179a0:	3301      	adds	r3, #1
 80179a2:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179aa:	b29a      	uxth	r2, r3
 80179ac:	89bb      	ldrh	r3, [r7, #12]
 80179ae:	4413      	add	r3, r2
 80179b0:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80179b2:	89bb      	ldrh	r3, [r7, #12]
 80179b4:	3304      	adds	r3, #4
 80179b6:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	791b      	ldrb	r3, [r3, #4]
 80179bc:	b29b      	uxth	r3, r3
 80179be:	89ba      	ldrh	r2, [r7, #12]
 80179c0:	429a      	cmp	r2, r3
 80179c2:	d901      	bls.n	80179c8 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80179c4:	2302      	movs	r3, #2
 80179c6:	e0be      	b.n	8017b46 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	681a      	ldr	r2, [r3, #0]
 80179cc:	89fb      	ldrh	r3, [r7, #14]
 80179ce:	1c59      	adds	r1, r3, #1
 80179d0:	81f9      	strh	r1, [r7, #14]
 80179d2:	4413      	add	r3, r2
 80179d4:	687a      	ldr	r2, [r7, #4]
 80179d6:	7952      	ldrb	r2, [r2, #5]
 80179d8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	6899      	ldr	r1, [r3, #8]
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	681a      	ldr	r2, [r3, #0]
 80179e2:	89fb      	ldrh	r3, [r7, #14]
 80179e4:	1c58      	adds	r0, r3, #1
 80179e6:	81f8      	strh	r0, [r7, #14]
 80179e8:	4413      	add	r3, r2
 80179ea:	b2ca      	uxtb	r2, r1
 80179ec:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	689b      	ldr	r3, [r3, #8]
 80179f2:	0a19      	lsrs	r1, r3, #8
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	681a      	ldr	r2, [r3, #0]
 80179f8:	89fb      	ldrh	r3, [r7, #14]
 80179fa:	1c58      	adds	r0, r3, #1
 80179fc:	81f8      	strh	r0, [r7, #14]
 80179fe:	4413      	add	r3, r2
 8017a00:	b2ca      	uxtb	r2, r1
 8017a02:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	689b      	ldr	r3, [r3, #8]
 8017a08:	0c19      	lsrs	r1, r3, #16
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	681a      	ldr	r2, [r3, #0]
 8017a0e:	89fb      	ldrh	r3, [r7, #14]
 8017a10:	1c58      	adds	r0, r3, #1
 8017a12:	81f8      	strh	r0, [r7, #14]
 8017a14:	4413      	add	r3, r2
 8017a16:	b2ca      	uxtb	r2, r1
 8017a18:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	689b      	ldr	r3, [r3, #8]
 8017a1e:	0e19      	lsrs	r1, r3, #24
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	681a      	ldr	r2, [r3, #0]
 8017a24:	89fb      	ldrh	r3, [r7, #14]
 8017a26:	1c58      	adds	r0, r3, #1
 8017a28:	81f8      	strh	r0, [r7, #14]
 8017a2a:	4413      	add	r3, r2
 8017a2c:	b2ca      	uxtb	r2, r1
 8017a2e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	681a      	ldr	r2, [r3, #0]
 8017a34:	89fb      	ldrh	r3, [r7, #14]
 8017a36:	1c59      	adds	r1, r3, #1
 8017a38:	81f9      	strh	r1, [r7, #14]
 8017a3a:	4413      	add	r3, r2
 8017a3c:	687a      	ldr	r2, [r7, #4]
 8017a3e:	7b12      	ldrb	r2, [r2, #12]
 8017a40:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	89d9      	ldrh	r1, [r3, #14]
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	681a      	ldr	r2, [r3, #0]
 8017a4a:	89fb      	ldrh	r3, [r7, #14]
 8017a4c:	1c58      	adds	r0, r3, #1
 8017a4e:	81f8      	strh	r0, [r7, #14]
 8017a50:	4413      	add	r3, r2
 8017a52:	b2ca      	uxtb	r2, r1
 8017a54:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	89db      	ldrh	r3, [r3, #14]
 8017a5a:	0a1b      	lsrs	r3, r3, #8
 8017a5c:	b299      	uxth	r1, r3
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	681a      	ldr	r2, [r3, #0]
 8017a62:	89fb      	ldrh	r3, [r7, #14]
 8017a64:	1c58      	adds	r0, r3, #1
 8017a66:	81f8      	strh	r0, [r7, #14]
 8017a68:	4413      	add	r3, r2
 8017a6a:	b2ca      	uxtb	r2, r1
 8017a6c:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	681a      	ldr	r2, [r3, #0]
 8017a72:	89fb      	ldrh	r3, [r7, #14]
 8017a74:	18d0      	adds	r0, r2, r3
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	f103 0110 	add.w	r1, r3, #16
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	7b1b      	ldrb	r3, [r3, #12]
 8017a80:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017a84:	b2db      	uxtb	r3, r3
 8017a86:	b29b      	uxth	r3, r3
 8017a88:	461a      	mov	r2, r3
 8017a8a:	f003 fe7a 	bl	801b782 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	7b1b      	ldrb	r3, [r3, #12]
 8017a92:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017a96:	b2db      	uxtb	r3, r3
 8017a98:	b29a      	uxth	r2, r3
 8017a9a:	89fb      	ldrh	r3, [r7, #14]
 8017a9c:	4413      	add	r3, r2
 8017a9e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d009      	beq.n	8017abe <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	681a      	ldr	r2, [r3, #0]
 8017aae:	89fb      	ldrh	r3, [r7, #14]
 8017ab0:	1c59      	adds	r1, r3, #1
 8017ab2:	81f9      	strh	r1, [r7, #14]
 8017ab4:	4413      	add	r3, r2
 8017ab6:	687a      	ldr	r2, [r7, #4]
 8017ab8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8017abc:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	681a      	ldr	r2, [r3, #0]
 8017ac2:	89fb      	ldrh	r3, [r7, #14]
 8017ac4:	18d0      	adds	r0, r2, r3
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ad0:	b29b      	uxth	r3, r3
 8017ad2:	461a      	mov	r2, r3
 8017ad4:	f003 fe55 	bl	801b782 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ade:	b29a      	uxth	r2, r3
 8017ae0:	89fb      	ldrh	r3, [r7, #14]
 8017ae2:	4413      	add	r3, r2
 8017ae4:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	681a      	ldr	r2, [r3, #0]
 8017aee:	89fb      	ldrh	r3, [r7, #14]
 8017af0:	1c58      	adds	r0, r3, #1
 8017af2:	81f8      	strh	r0, [r7, #14]
 8017af4:	4413      	add	r3, r2
 8017af6:	b2ca      	uxtb	r2, r1
 8017af8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017afe:	0a19      	lsrs	r1, r3, #8
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	681a      	ldr	r2, [r3, #0]
 8017b04:	89fb      	ldrh	r3, [r7, #14]
 8017b06:	1c58      	adds	r0, r3, #1
 8017b08:	81f8      	strh	r0, [r7, #14]
 8017b0a:	4413      	add	r3, r2
 8017b0c:	b2ca      	uxtb	r2, r1
 8017b0e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b14:	0c19      	lsrs	r1, r3, #16
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	681a      	ldr	r2, [r3, #0]
 8017b1a:	89fb      	ldrh	r3, [r7, #14]
 8017b1c:	1c58      	adds	r0, r3, #1
 8017b1e:	81f8      	strh	r0, [r7, #14]
 8017b20:	4413      	add	r3, r2
 8017b22:	b2ca      	uxtb	r2, r1
 8017b24:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b2a:	0e19      	lsrs	r1, r3, #24
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	681a      	ldr	r2, [r3, #0]
 8017b30:	89fb      	ldrh	r3, [r7, #14]
 8017b32:	1c58      	adds	r0, r3, #1
 8017b34:	81f8      	strh	r0, [r7, #14]
 8017b36:	4413      	add	r3, r2
 8017b38:	b2ca      	uxtb	r2, r1
 8017b3a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017b3c:	89fb      	ldrh	r3, [r7, #14]
 8017b3e:	b2da      	uxtb	r2, r3
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017b44:	2300      	movs	r3, #0
}
 8017b46:	4618      	mov	r0, r3
 8017b48:	3710      	adds	r7, #16
 8017b4a:	46bd      	mov	sp, r7
 8017b4c:	bd80      	pop	{r7, pc}

08017b4e <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8017b4e:	b480      	push	{r7}
 8017b50:	b083      	sub	sp, #12
 8017b52:	af00      	add	r7, sp, #0
 8017b54:	4603      	mov	r3, r0
 8017b56:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017b58:	79fb      	ldrb	r3, [r7, #7]
 8017b5a:	2b05      	cmp	r3, #5
 8017b5c:	d002      	beq.n	8017b64 <RegionIsActive+0x16>
 8017b5e:	2b08      	cmp	r3, #8
 8017b60:	d002      	beq.n	8017b68 <RegionIsActive+0x1a>
 8017b62:	e003      	b.n	8017b6c <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8017b64:	2301      	movs	r3, #1
 8017b66:	e002      	b.n	8017b6e <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8017b68:	2301      	movs	r3, #1
 8017b6a:	e000      	b.n	8017b6e <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8017b6c:	2300      	movs	r3, #0
        }
    }
}
 8017b6e:	4618      	mov	r0, r3
 8017b70:	370c      	adds	r7, #12
 8017b72:	46bd      	mov	sp, r7
 8017b74:	bc80      	pop	{r7}
 8017b76:	4770      	bx	lr

08017b78 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b084      	sub	sp, #16
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	4603      	mov	r3, r0
 8017b80:	6039      	str	r1, [r7, #0]
 8017b82:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8017b84:	2300      	movs	r3, #0
 8017b86:	60bb      	str	r3, [r7, #8]
    switch( region )
 8017b88:	79fb      	ldrb	r3, [r7, #7]
 8017b8a:	2b05      	cmp	r3, #5
 8017b8c:	d002      	beq.n	8017b94 <RegionGetPhyParam+0x1c>
 8017b8e:	2b08      	cmp	r3, #8
 8017b90:	d006      	beq.n	8017ba0 <RegionGetPhyParam+0x28>
 8017b92:	e00b      	b.n	8017bac <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8017b94:	6838      	ldr	r0, [r7, #0]
 8017b96:	f001 fad5 	bl	8019144 <RegionEU868GetPhyParam>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	60fb      	str	r3, [r7, #12]
 8017b9e:	e007      	b.n	8017bb0 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8017ba0:	6838      	ldr	r0, [r7, #0]
 8017ba2:	f002 fc55 	bl	801a450 <RegionUS915GetPhyParam>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	60fb      	str	r3, [r7, #12]
 8017baa:	e001      	b.n	8017bb0 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8017bac:	68bb      	ldr	r3, [r7, #8]
 8017bae:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	3710      	adds	r7, #16
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bd80      	pop	{r7, pc}

08017bba <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8017bba:	b580      	push	{r7, lr}
 8017bbc:	b082      	sub	sp, #8
 8017bbe:	af00      	add	r7, sp, #0
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	6039      	str	r1, [r7, #0]
 8017bc4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017bc6:	79fb      	ldrb	r3, [r7, #7]
 8017bc8:	2b05      	cmp	r3, #5
 8017bca:	d002      	beq.n	8017bd2 <RegionSetBandTxDone+0x18>
 8017bcc:	2b08      	cmp	r3, #8
 8017bce:	d004      	beq.n	8017bda <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8017bd0:	e007      	b.n	8017be2 <RegionSetBandTxDone+0x28>
        EU868_SET_BAND_TX_DONE( );
 8017bd2:	6838      	ldr	r0, [r7, #0]
 8017bd4:	f001 fbfc 	bl	80193d0 <RegionEU868SetBandTxDone>
 8017bd8:	e003      	b.n	8017be2 <RegionSetBandTxDone+0x28>
        US915_SET_BAND_TX_DONE( );
 8017bda:	6838      	ldr	r0, [r7, #0]
 8017bdc:	f002 fd94 	bl	801a708 <RegionUS915SetBandTxDone>
 8017be0:	bf00      	nop
        }
    }
}
 8017be2:	3708      	adds	r7, #8
 8017be4:	46bd      	mov	sp, r7
 8017be6:	bd80      	pop	{r7, pc}

08017be8 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b082      	sub	sp, #8
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	4603      	mov	r3, r0
 8017bf0:	6039      	str	r1, [r7, #0]
 8017bf2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017bf4:	79fb      	ldrb	r3, [r7, #7]
 8017bf6:	2b05      	cmp	r3, #5
 8017bf8:	d002      	beq.n	8017c00 <RegionInitDefaults+0x18>
 8017bfa:	2b08      	cmp	r3, #8
 8017bfc:	d004      	beq.n	8017c08 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8017bfe:	e007      	b.n	8017c10 <RegionInitDefaults+0x28>
        EU868_INIT_DEFAULTS( );
 8017c00:	6838      	ldr	r0, [r7, #0]
 8017c02:	f001 fc11 	bl	8019428 <RegionEU868InitDefaults>
 8017c06:	e003      	b.n	8017c10 <RegionInitDefaults+0x28>
        US915_INIT_DEFAULTS( );
 8017c08:	6838      	ldr	r0, [r7, #0]
 8017c0a:	f002 fda9 	bl	801a760 <RegionUS915InitDefaults>
 8017c0e:	bf00      	nop
        }
    }
}
 8017c10:	bf00      	nop
 8017c12:	3708      	adds	r7, #8
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}

08017c18 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b082      	sub	sp, #8
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	4603      	mov	r3, r0
 8017c20:	6039      	str	r1, [r7, #0]
 8017c22:	71fb      	strb	r3, [r7, #7]
 8017c24:	4613      	mov	r3, r2
 8017c26:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8017c28:	79fb      	ldrb	r3, [r7, #7]
 8017c2a:	2b05      	cmp	r3, #5
 8017c2c:	d002      	beq.n	8017c34 <RegionVerify+0x1c>
 8017c2e:	2b08      	cmp	r3, #8
 8017c30:	d007      	beq.n	8017c42 <RegionVerify+0x2a>
 8017c32:	e00d      	b.n	8017c50 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8017c34:	79bb      	ldrb	r3, [r7, #6]
 8017c36:	4619      	mov	r1, r3
 8017c38:	6838      	ldr	r0, [r7, #0]
 8017c3a:	f001 fc93 	bl	8019564 <RegionEU868Verify>
 8017c3e:	4603      	mov	r3, r0
 8017c40:	e007      	b.n	8017c52 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8017c42:	79bb      	ldrb	r3, [r7, #6]
 8017c44:	4619      	mov	r1, r3
 8017c46:	6838      	ldr	r0, [r7, #0]
 8017c48:	f002 febc 	bl	801a9c4 <RegionUS915Verify>
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	e000      	b.n	8017c52 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8017c50:	2300      	movs	r3, #0
        }
    }
}
 8017c52:	4618      	mov	r0, r3
 8017c54:	3708      	adds	r7, #8
 8017c56:	46bd      	mov	sp, r7
 8017c58:	bd80      	pop	{r7, pc}

08017c5a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8017c5a:	b580      	push	{r7, lr}
 8017c5c:	b082      	sub	sp, #8
 8017c5e:	af00      	add	r7, sp, #0
 8017c60:	4603      	mov	r3, r0
 8017c62:	6039      	str	r1, [r7, #0]
 8017c64:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017c66:	79fb      	ldrb	r3, [r7, #7]
 8017c68:	2b05      	cmp	r3, #5
 8017c6a:	d002      	beq.n	8017c72 <RegionApplyCFList+0x18>
 8017c6c:	2b08      	cmp	r3, #8
 8017c6e:	d004      	beq.n	8017c7a <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8017c70:	e007      	b.n	8017c82 <RegionApplyCFList+0x28>
        EU868_APPLY_CF_LIST( );
 8017c72:	6838      	ldr	r0, [r7, #0]
 8017c74:	f001 fcf2 	bl	801965c <RegionEU868ApplyCFList>
 8017c78:	e003      	b.n	8017c82 <RegionApplyCFList+0x28>
        US915_APPLY_CF_LIST( );
 8017c7a:	6838      	ldr	r0, [r7, #0]
 8017c7c:	f002 ff18 	bl	801aab0 <RegionUS915ApplyCFList>
 8017c80:	bf00      	nop
        }
    }
}
 8017c82:	bf00      	nop
 8017c84:	3708      	adds	r7, #8
 8017c86:	46bd      	mov	sp, r7
 8017c88:	bd80      	pop	{r7, pc}

08017c8a <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8017c8a:	b580      	push	{r7, lr}
 8017c8c:	b082      	sub	sp, #8
 8017c8e:	af00      	add	r7, sp, #0
 8017c90:	4603      	mov	r3, r0
 8017c92:	6039      	str	r1, [r7, #0]
 8017c94:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017c96:	79fb      	ldrb	r3, [r7, #7]
 8017c98:	2b05      	cmp	r3, #5
 8017c9a:	d002      	beq.n	8017ca2 <RegionChanMaskSet+0x18>
 8017c9c:	2b08      	cmp	r3, #8
 8017c9e:	d005      	beq.n	8017cac <RegionChanMaskSet+0x22>
 8017ca0:	e009      	b.n	8017cb6 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8017ca2:	6838      	ldr	r0, [r7, #0]
 8017ca4:	f001 fd4e 	bl	8019744 <RegionEU868ChanMaskSet>
 8017ca8:	4603      	mov	r3, r0
 8017caa:	e005      	b.n	8017cb8 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8017cac:	6838      	ldr	r0, [r7, #0]
 8017cae:	f002 ff73 	bl	801ab98 <RegionUS915ChanMaskSet>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	e000      	b.n	8017cb8 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8017cb6:	2300      	movs	r3, #0
        }
    }
}
 8017cb8:	4618      	mov	r0, r3
 8017cba:	3708      	adds	r7, #8
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd80      	pop	{r7, pc}

08017cc0 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b082      	sub	sp, #8
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	603b      	str	r3, [r7, #0]
 8017cc8:	4603      	mov	r3, r0
 8017cca:	71fb      	strb	r3, [r7, #7]
 8017ccc:	460b      	mov	r3, r1
 8017cce:	71bb      	strb	r3, [r7, #6]
 8017cd0:	4613      	mov	r3, r2
 8017cd2:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017cd4:	79fb      	ldrb	r3, [r7, #7]
 8017cd6:	2b05      	cmp	r3, #5
 8017cd8:	d002      	beq.n	8017ce0 <RegionComputeRxWindowParameters+0x20>
 8017cda:	2b08      	cmp	r3, #8
 8017cdc:	d008      	beq.n	8017cf0 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8017cde:	e00f      	b.n	8017d00 <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8017ce0:	7979      	ldrb	r1, [r7, #5]
 8017ce2:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8017ce6:	693b      	ldr	r3, [r7, #16]
 8017ce8:	683a      	ldr	r2, [r7, #0]
 8017cea:	f001 fd55 	bl	8019798 <RegionEU868ComputeRxWindowParameters>
 8017cee:	e007      	b.n	8017d00 <RegionComputeRxWindowParameters+0x40>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8017cf0:	7979      	ldrb	r1, [r7, #5]
 8017cf2:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8017cf6:	693b      	ldr	r3, [r7, #16]
 8017cf8:	683a      	ldr	r2, [r7, #0]
 8017cfa:	f002 ffb5 	bl	801ac68 <RegionUS915ComputeRxWindowParameters>
 8017cfe:	bf00      	nop
        }
    }
}
 8017d00:	bf00      	nop
 8017d02:	3708      	adds	r7, #8
 8017d04:	46bd      	mov	sp, r7
 8017d06:	bd80      	pop	{r7, pc}

08017d08 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b084      	sub	sp, #16
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	4603      	mov	r3, r0
 8017d10:	60b9      	str	r1, [r7, #8]
 8017d12:	607a      	str	r2, [r7, #4]
 8017d14:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017d16:	7bfb      	ldrb	r3, [r7, #15]
 8017d18:	2b05      	cmp	r3, #5
 8017d1a:	d002      	beq.n	8017d22 <RegionRxConfig+0x1a>
 8017d1c:	2b08      	cmp	r3, #8
 8017d1e:	d006      	beq.n	8017d2e <RegionRxConfig+0x26>
 8017d20:	e00b      	b.n	8017d3a <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8017d22:	6879      	ldr	r1, [r7, #4]
 8017d24:	68b8      	ldr	r0, [r7, #8]
 8017d26:	f001 fd91 	bl	801984c <RegionEU868RxConfig>
 8017d2a:	4603      	mov	r3, r0
 8017d2c:	e006      	b.n	8017d3c <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8017d2e:	6879      	ldr	r1, [r7, #4]
 8017d30:	68b8      	ldr	r0, [r7, #8]
 8017d32:	f002 ffe3 	bl	801acfc <RegionUS915RxConfig>
 8017d36:	4603      	mov	r3, r0
 8017d38:	e000      	b.n	8017d3c <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8017d3a:	2300      	movs	r3, #0
        }
    }
}
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	3710      	adds	r7, #16
 8017d40:	46bd      	mov	sp, r7
 8017d42:	bd80      	pop	{r7, pc}

08017d44 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b084      	sub	sp, #16
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	60b9      	str	r1, [r7, #8]
 8017d4c:	607a      	str	r2, [r7, #4]
 8017d4e:	603b      	str	r3, [r7, #0]
 8017d50:	4603      	mov	r3, r0
 8017d52:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017d54:	7bfb      	ldrb	r3, [r7, #15]
 8017d56:	2b05      	cmp	r3, #5
 8017d58:	d002      	beq.n	8017d60 <RegionTxConfig+0x1c>
 8017d5a:	2b08      	cmp	r3, #8
 8017d5c:	d007      	beq.n	8017d6e <RegionTxConfig+0x2a>
 8017d5e:	e00d      	b.n	8017d7c <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8017d60:	683a      	ldr	r2, [r7, #0]
 8017d62:	6879      	ldr	r1, [r7, #4]
 8017d64:	68b8      	ldr	r0, [r7, #8]
 8017d66:	f001 fe41 	bl	80199ec <RegionEU868TxConfig>
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	e007      	b.n	8017d7e <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8017d6e:	683a      	ldr	r2, [r7, #0]
 8017d70:	6879      	ldr	r1, [r7, #4]
 8017d72:	68b8      	ldr	r0, [r7, #8]
 8017d74:	f003 f846 	bl	801ae04 <RegionUS915TxConfig>
 8017d78:	4603      	mov	r3, r0
 8017d7a:	e000      	b.n	8017d7e <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8017d7c:	2300      	movs	r3, #0
        }
    }
}
 8017d7e:	4618      	mov	r0, r3
 8017d80:	3710      	adds	r7, #16
 8017d82:	46bd      	mov	sp, r7
 8017d84:	bd80      	pop	{r7, pc}

08017d86 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017d86:	b580      	push	{r7, lr}
 8017d88:	b086      	sub	sp, #24
 8017d8a:	af02      	add	r7, sp, #8
 8017d8c:	60b9      	str	r1, [r7, #8]
 8017d8e:	607a      	str	r2, [r7, #4]
 8017d90:	603b      	str	r3, [r7, #0]
 8017d92:	4603      	mov	r3, r0
 8017d94:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017d96:	7bfb      	ldrb	r3, [r7, #15]
 8017d98:	2b05      	cmp	r3, #5
 8017d9a:	d002      	beq.n	8017da2 <RegionLinkAdrReq+0x1c>
 8017d9c:	2b08      	cmp	r3, #8
 8017d9e:	d00a      	beq.n	8017db6 <RegionLinkAdrReq+0x30>
 8017da0:	e013      	b.n	8017dca <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8017da2:	69fb      	ldr	r3, [r7, #28]
 8017da4:	9300      	str	r3, [sp, #0]
 8017da6:	69bb      	ldr	r3, [r7, #24]
 8017da8:	683a      	ldr	r2, [r7, #0]
 8017daa:	6879      	ldr	r1, [r7, #4]
 8017dac:	68b8      	ldr	r0, [r7, #8]
 8017dae:	f001 feed 	bl	8019b8c <RegionEU868LinkAdrReq>
 8017db2:	4603      	mov	r3, r0
 8017db4:	e00a      	b.n	8017dcc <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8017db6:	69fb      	ldr	r3, [r7, #28]
 8017db8:	9300      	str	r3, [sp, #0]
 8017dba:	69bb      	ldr	r3, [r7, #24]
 8017dbc:	683a      	ldr	r2, [r7, #0]
 8017dbe:	6879      	ldr	r1, [r7, #4]
 8017dc0:	68b8      	ldr	r0, [r7, #8]
 8017dc2:	f003 f8c9 	bl	801af58 <RegionUS915LinkAdrReq>
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	e000      	b.n	8017dcc <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8017dca:	2300      	movs	r3, #0
        }
    }
}
 8017dcc:	4618      	mov	r0, r3
 8017dce:	3710      	adds	r7, #16
 8017dd0:	46bd      	mov	sp, r7
 8017dd2:	bd80      	pop	{r7, pc}

08017dd4 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b082      	sub	sp, #8
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	4603      	mov	r3, r0
 8017ddc:	6039      	str	r1, [r7, #0]
 8017dde:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017de0:	79fb      	ldrb	r3, [r7, #7]
 8017de2:	2b05      	cmp	r3, #5
 8017de4:	d002      	beq.n	8017dec <RegionRxParamSetupReq+0x18>
 8017de6:	2b08      	cmp	r3, #8
 8017de8:	d005      	beq.n	8017df6 <RegionRxParamSetupReq+0x22>
 8017dea:	e009      	b.n	8017e00 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8017dec:	6838      	ldr	r0, [r7, #0]
 8017dee:	f001 ffef 	bl	8019dd0 <RegionEU868RxParamSetupReq>
 8017df2:	4603      	mov	r3, r0
 8017df4:	e005      	b.n	8017e02 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8017df6:	6838      	ldr	r0, [r7, #0]
 8017df8:	f003 fac8 	bl	801b38c <RegionUS915RxParamSetupReq>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	e000      	b.n	8017e02 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017e00:	2300      	movs	r3, #0
        }
    }
}
 8017e02:	4618      	mov	r0, r3
 8017e04:	3708      	adds	r7, #8
 8017e06:	46bd      	mov	sp, r7
 8017e08:	bd80      	pop	{r7, pc}

08017e0a <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8017e0a:	b580      	push	{r7, lr}
 8017e0c:	b082      	sub	sp, #8
 8017e0e:	af00      	add	r7, sp, #0
 8017e10:	4603      	mov	r3, r0
 8017e12:	6039      	str	r1, [r7, #0]
 8017e14:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017e16:	79fb      	ldrb	r3, [r7, #7]
 8017e18:	2b05      	cmp	r3, #5
 8017e1a:	d002      	beq.n	8017e22 <RegionNewChannelReq+0x18>
 8017e1c:	2b08      	cmp	r3, #8
 8017e1e:	d005      	beq.n	8017e2c <RegionNewChannelReq+0x22>
 8017e20:	e009      	b.n	8017e36 <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8017e22:	6838      	ldr	r0, [r7, #0]
 8017e24:	f002 f812 	bl	8019e4c <RegionEU868NewChannelReq>
 8017e28:	4603      	mov	r3, r0
 8017e2a:	e005      	b.n	8017e38 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8017e2c:	6838      	ldr	r0, [r7, #0]
 8017e2e:	f003 faf9 	bl	801b424 <RegionUS915NewChannelReq>
 8017e32:	4603      	mov	r3, r0
 8017e34:	e000      	b.n	8017e38 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017e36:	2300      	movs	r3, #0
        }
    }
}
 8017e38:	4618      	mov	r0, r3
 8017e3a:	3708      	adds	r7, #8
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bd80      	pop	{r7, pc}

08017e40 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b082      	sub	sp, #8
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	4603      	mov	r3, r0
 8017e48:	6039      	str	r1, [r7, #0]
 8017e4a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017e4c:	79fb      	ldrb	r3, [r7, #7]
 8017e4e:	2b05      	cmp	r3, #5
 8017e50:	d002      	beq.n	8017e58 <RegionTxParamSetupReq+0x18>
 8017e52:	2b08      	cmp	r3, #8
 8017e54:	d005      	beq.n	8017e62 <RegionTxParamSetupReq+0x22>
 8017e56:	e009      	b.n	8017e6c <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8017e58:	6838      	ldr	r0, [r7, #0]
 8017e5a:	f002 f855 	bl	8019f08 <RegionEU868TxParamSetupReq>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	e005      	b.n	8017e6e <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8017e62:	6838      	ldr	r0, [r7, #0]
 8017e64:	f003 fae9 	bl	801b43a <RegionUS915TxParamSetupReq>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	e000      	b.n	8017e6e <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017e6c:	2300      	movs	r3, #0
        }
    }
}
 8017e6e:	4618      	mov	r0, r3
 8017e70:	3708      	adds	r7, #8
 8017e72:	46bd      	mov	sp, r7
 8017e74:	bd80      	pop	{r7, pc}

08017e76 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017e76:	b580      	push	{r7, lr}
 8017e78:	b082      	sub	sp, #8
 8017e7a:	af00      	add	r7, sp, #0
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	6039      	str	r1, [r7, #0]
 8017e80:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017e82:	79fb      	ldrb	r3, [r7, #7]
 8017e84:	2b05      	cmp	r3, #5
 8017e86:	d002      	beq.n	8017e8e <RegionDlChannelReq+0x18>
 8017e88:	2b08      	cmp	r3, #8
 8017e8a:	d005      	beq.n	8017e98 <RegionDlChannelReq+0x22>
 8017e8c:	e009      	b.n	8017ea2 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017e8e:	6838      	ldr	r0, [r7, #0]
 8017e90:	f002 f846 	bl	8019f20 <RegionEU868DlChannelReq>
 8017e94:	4603      	mov	r3, r0
 8017e96:	e005      	b.n	8017ea4 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8017e98:	6838      	ldr	r0, [r7, #0]
 8017e9a:	f003 fad9 	bl	801b450 <RegionUS915DlChannelReq>
 8017e9e:	4603      	mov	r3, r0
 8017ea0:	e000      	b.n	8017ea4 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017ea2:	2300      	movs	r3, #0
        }
    }
}
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	3708      	adds	r7, #8
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	bd80      	pop	{r7, pc}

08017eac <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017eac:	b580      	push	{r7, lr}
 8017eae:	b082      	sub	sp, #8
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	71fb      	strb	r3, [r7, #7]
 8017eb6:	460b      	mov	r3, r1
 8017eb8:	71bb      	strb	r3, [r7, #6]
 8017eba:	4613      	mov	r3, r2
 8017ebc:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017ebe:	79fb      	ldrb	r3, [r7, #7]
 8017ec0:	2b05      	cmp	r3, #5
 8017ec2:	d002      	beq.n	8017eca <RegionAlternateDr+0x1e>
 8017ec4:	2b08      	cmp	r3, #8
 8017ec6:	d009      	beq.n	8017edc <RegionAlternateDr+0x30>
 8017ec8:	e011      	b.n	8017eee <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8017eca:	797a      	ldrb	r2, [r7, #5]
 8017ecc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017ed0:	4611      	mov	r1, r2
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f002 f86e 	bl	8019fb4 <RegionEU868AlternateDr>
 8017ed8:	4603      	mov	r3, r0
 8017eda:	e009      	b.n	8017ef0 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8017edc:	797a      	ldrb	r2, [r7, #5]
 8017ede:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017ee2:	4611      	mov	r1, r2
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f003 fabf 	bl	801b468 <RegionUS915AlternateDr>
 8017eea:	4603      	mov	r3, r0
 8017eec:	e000      	b.n	8017ef0 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8017eee:	2300      	movs	r3, #0
        }
    }
}
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	3708      	adds	r7, #8
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	bd80      	pop	{r7, pc}

08017ef8 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b084      	sub	sp, #16
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	60b9      	str	r1, [r7, #8]
 8017f00:	607a      	str	r2, [r7, #4]
 8017f02:	603b      	str	r3, [r7, #0]
 8017f04:	4603      	mov	r3, r0
 8017f06:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017f08:	7bfb      	ldrb	r3, [r7, #15]
 8017f0a:	2b05      	cmp	r3, #5
 8017f0c:	d002      	beq.n	8017f14 <RegionNextChannel+0x1c>
 8017f0e:	2b08      	cmp	r3, #8
 8017f10:	d008      	beq.n	8017f24 <RegionNextChannel+0x2c>
 8017f12:	e00f      	b.n	8017f34 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017f14:	69bb      	ldr	r3, [r7, #24]
 8017f16:	683a      	ldr	r2, [r7, #0]
 8017f18:	6879      	ldr	r1, [r7, #4]
 8017f1a:	68b8      	ldr	r0, [r7, #8]
 8017f1c:	f002 f85a 	bl	8019fd4 <RegionEU868NextChannel>
 8017f20:	4603      	mov	r3, r0
 8017f22:	e008      	b.n	8017f36 <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8017f24:	69bb      	ldr	r3, [r7, #24]
 8017f26:	683a      	ldr	r2, [r7, #0]
 8017f28:	6879      	ldr	r1, [r7, #4]
 8017f2a:	68b8      	ldr	r0, [r7, #8]
 8017f2c:	f003 fad2 	bl	801b4d4 <RegionUS915NextChannel>
 8017f30:	4603      	mov	r3, r0
 8017f32:	e000      	b.n	8017f36 <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017f34:	2309      	movs	r3, #9
        }
    }
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3710      	adds	r7, #16
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}

08017f3e <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017f3e:	b590      	push	{r4, r7, lr}
 8017f40:	b083      	sub	sp, #12
 8017f42:	af00      	add	r7, sp, #0
 8017f44:	4604      	mov	r4, r0
 8017f46:	4608      	mov	r0, r1
 8017f48:	4611      	mov	r1, r2
 8017f4a:	461a      	mov	r2, r3
 8017f4c:	4623      	mov	r3, r4
 8017f4e:	71fb      	strb	r3, [r7, #7]
 8017f50:	4603      	mov	r3, r0
 8017f52:	71bb      	strb	r3, [r7, #6]
 8017f54:	460b      	mov	r3, r1
 8017f56:	717b      	strb	r3, [r7, #5]
 8017f58:	4613      	mov	r3, r2
 8017f5a:	713b      	strb	r3, [r7, #4]
    switch( region )
 8017f5c:	79fb      	ldrb	r3, [r7, #7]
 8017f5e:	2b05      	cmp	r3, #5
 8017f60:	d002      	beq.n	8017f68 <RegionApplyDrOffset+0x2a>
 8017f62:	2b08      	cmp	r3, #8
 8017f64:	d00a      	beq.n	8017f7c <RegionApplyDrOffset+0x3e>
 8017f66:	e013      	b.n	8017f90 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017f68:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017f6c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017f70:	79bb      	ldrb	r3, [r7, #6]
 8017f72:	4618      	mov	r0, r3
 8017f74:	f002 f9a8 	bl	801a2c8 <RegionEU868ApplyDrOffset>
 8017f78:	4603      	mov	r3, r0
 8017f7a:	e00a      	b.n	8017f92 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8017f7c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017f80:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017f84:	79bb      	ldrb	r3, [r7, #6]
 8017f86:	4618      	mov	r0, r3
 8017f88:	f003 fb92 	bl	801b6b0 <RegionUS915ApplyDrOffset>
 8017f8c:	4603      	mov	r3, r0
 8017f8e:	e000      	b.n	8017f92 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017f90:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017f92:	4618      	mov	r0, r3
 8017f94:	370c      	adds	r7, #12
 8017f96:	46bd      	mov	sp, r7
 8017f98:	bd90      	pop	{r4, r7, pc}
	...

08017f9c <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017f9c:	b480      	push	{r7}
 8017f9e:	b083      	sub	sp, #12
 8017fa0:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017fa2:	4b04      	ldr	r3, [pc, #16]	; (8017fb4 <RegionGetVersion+0x18>)
 8017fa4:	607b      	str	r3, [r7, #4]

    return version;
 8017fa6:	687b      	ldr	r3, [r7, #4]
}
 8017fa8:	4618      	mov	r0, r3
 8017faa:	370c      	adds	r7, #12
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bc80      	pop	{r7}
 8017fb0:	4770      	bx	lr
 8017fb2:	bf00      	nop
 8017fb4:	02010001 	.word	0x02010001

08017fb8 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8017fb8:	b480      	push	{r7}
 8017fba:	b087      	sub	sp, #28
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	60b9      	str	r1, [r7, #8]
 8017fc2:	607a      	str	r2, [r7, #4]
 8017fc4:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8017fc6:	68bb      	ldr	r3, [r7, #8]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d002      	beq.n	8017fd2 <FindAvailable125kHzChannels+0x1a>
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d101      	bne.n	8017fd6 <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017fd2:	2303      	movs	r3, #3
 8017fd4:	e021      	b.n	801801a <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	2200      	movs	r2, #0
 8017fda:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8017fdc:	2300      	movs	r3, #0
 8017fde:	75fb      	strb	r3, [r7, #23]
 8017fe0:	e017      	b.n	8018012 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8017fe2:	89fa      	ldrh	r2, [r7, #14]
 8017fe4:	7dfb      	ldrb	r3, [r7, #23]
 8017fe6:	fa42 f303 	asr.w	r3, r2, r3
 8017fea:	f003 0301 	and.w	r3, r3, #1
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d00c      	beq.n	801800c <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	781b      	ldrb	r3, [r3, #0]
 8017ff6:	461a      	mov	r2, r3
 8017ff8:	68bb      	ldr	r3, [r7, #8]
 8017ffa:	4413      	add	r3, r2
 8017ffc:	7dfa      	ldrb	r2, [r7, #23]
 8017ffe:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	781b      	ldrb	r3, [r3, #0]
 8018004:	3301      	adds	r3, #1
 8018006:	b2da      	uxtb	r2, r3
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 801800c:	7dfb      	ldrb	r3, [r7, #23]
 801800e:	3301      	adds	r3, #1
 8018010:	75fb      	strb	r3, [r7, #23]
 8018012:	7dfb      	ldrb	r3, [r7, #23]
 8018014:	2b07      	cmp	r3, #7
 8018016:	d9e4      	bls.n	8017fe2 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8018018:	2300      	movs	r3, #0
}
 801801a:	4618      	mov	r0, r3
 801801c:	371c      	adds	r7, #28
 801801e:	46bd      	mov	sp, r7
 8018020:	bc80      	pop	{r7}
 8018022:	4770      	bx	lr

08018024 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8018024:	b590      	push	{r4, r7, lr}
 8018026:	b089      	sub	sp, #36	; 0x24
 8018028:	af00      	add	r7, sp, #0
 801802a:	60f8      	str	r0, [r7, #12]
 801802c:	60b9      	str	r1, [r7, #8]
 801802e:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8018030:	2300      	movs	r3, #0
 8018032:	617b      	str	r3, [r7, #20]
 8018034:	2300      	movs	r3, #0
 8018036:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8018038:	2300      	movs	r3, #0
 801803a:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d005      	beq.n	801804e <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8018042:	68bb      	ldr	r3, [r7, #8]
 8018044:	2b00      	cmp	r3, #0
 8018046:	d002      	beq.n	801804e <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d101      	bne.n	8018052 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801804e:	2303      	movs	r3, #3
 8018050:	e055      	b.n	80180fe <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8018052:	68bb      	ldr	r3, [r7, #8]
 8018054:	781b      	ldrb	r3, [r3, #0]
 8018056:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8018058:	7f7b      	ldrb	r3, [r7, #29]
 801805a:	085b      	lsrs	r3, r3, #1
 801805c:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 801805e:	7f7b      	ldrb	r3, [r7, #29]
 8018060:	f003 0301 	and.w	r3, r3, #1
 8018064:	b2db      	uxtb	r3, r3
 8018066:	2b00      	cmp	r3, #0
 8018068:	d107      	bne.n	801807a <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 801806a:	7f3b      	ldrb	r3, [r7, #28]
 801806c:	005b      	lsls	r3, r3, #1
 801806e:	68fa      	ldr	r2, [r7, #12]
 8018070:	4413      	add	r3, r2
 8018072:	881b      	ldrh	r3, [r3, #0]
 8018074:	b2db      	uxtb	r3, r3
 8018076:	83fb      	strh	r3, [r7, #30]
 8018078:	e006      	b.n	8018088 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 801807a:	7f3b      	ldrb	r3, [r7, #28]
 801807c:	005b      	lsls	r3, r3, #1
 801807e:	68fa      	ldr	r2, [r7, #12]
 8018080:	4413      	add	r3, r2
 8018082:	881b      	ldrh	r3, [r3, #0]
 8018084:	0a1b      	lsrs	r3, r3, #8
 8018086:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8018088:	f107 0213 	add.w	r2, r7, #19
 801808c:	f107 0114 	add.w	r1, r7, #20
 8018090:	8bfb      	ldrh	r3, [r7, #30]
 8018092:	4618      	mov	r0, r3
 8018094:	f7ff ff90 	bl	8017fb8 <FindAvailable125kHzChannels>
 8018098:	4603      	mov	r3, r0
 801809a:	2b03      	cmp	r3, #3
 801809c:	d101      	bne.n	80180a2 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801809e:	2303      	movs	r3, #3
 80180a0:	e02d      	b.n	80180fe <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 80180a2:	7cfb      	ldrb	r3, [r7, #19]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d011      	beq.n	80180cc <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 80180a8:	7f7b      	ldrb	r3, [r7, #29]
 80180aa:	00db      	lsls	r3, r3, #3
 80180ac:	b2dc      	uxtb	r4, r3
 80180ae:	7cfb      	ldrb	r3, [r7, #19]
 80180b0:	3b01      	subs	r3, #1
 80180b2:	4619      	mov	r1, r3
 80180b4:	2000      	movs	r0, #0
 80180b6:	f003 fb4d 	bl	801b754 <randr>
 80180ba:	4603      	mov	r3, r0
 80180bc:	3320      	adds	r3, #32
 80180be:	443b      	add	r3, r7
 80180c0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80180c4:	4423      	add	r3, r4
 80180c6:	b2da      	uxtb	r2, r3
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 80180cc:	7f7b      	ldrb	r3, [r7, #29]
 80180ce:	3301      	adds	r3, #1
 80180d0:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 80180d2:	7f7b      	ldrb	r3, [r7, #29]
 80180d4:	2b07      	cmp	r3, #7
 80180d6:	d901      	bls.n	80180dc <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 80180d8:	2300      	movs	r3, #0
 80180da:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 80180dc:	7cfb      	ldrb	r3, [r7, #19]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d104      	bne.n	80180ec <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 80180e2:	68bb      	ldr	r3, [r7, #8]
 80180e4:	781b      	ldrb	r3, [r3, #0]
 80180e6:	7f7a      	ldrb	r2, [r7, #29]
 80180e8:	429a      	cmp	r2, r3
 80180ea:	d1b5      	bne.n	8018058 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 80180ec:	7cfb      	ldrb	r3, [r7, #19]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d004      	beq.n	80180fc <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 80180f2:	68bb      	ldr	r3, [r7, #8]
 80180f4:	7f7a      	ldrb	r2, [r7, #29]
 80180f6:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80180f8:	2300      	movs	r3, #0
 80180fa:	e000      	b.n	80180fe <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 80180fc:	2303      	movs	r3, #3
}
 80180fe:	4618      	mov	r0, r3
 8018100:	3724      	adds	r7, #36	; 0x24
 8018102:	46bd      	mov	sp, r7
 8018104:	bd90      	pop	{r4, r7, pc}

08018106 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8018106:	b480      	push	{r7}
 8018108:	b085      	sub	sp, #20
 801810a:	af00      	add	r7, sp, #0
 801810c:	4603      	mov	r3, r0
 801810e:	60b9      	str	r1, [r7, #8]
 8018110:	607a      	str	r2, [r7, #4]
 8018112:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8018114:	7bfb      	ldrb	r3, [r7, #15]
 8018116:	687a      	ldr	r2, [r7, #4]
 8018118:	fb03 f202 	mul.w	r2, r3, r2
 801811c:	68bb      	ldr	r3, [r7, #8]
 801811e:	4413      	add	r3, r2
}
 8018120:	4618      	mov	r0, r3
 8018122:	3714      	adds	r7, #20
 8018124:	46bd      	mov	sp, r7
 8018126:	bc80      	pop	{r7}
 8018128:	4770      	bx	lr

0801812a <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801812a:	b480      	push	{r7}
 801812c:	b087      	sub	sp, #28
 801812e:	af00      	add	r7, sp, #0
 8018130:	60f8      	str	r0, [r7, #12]
 8018132:	4608      	mov	r0, r1
 8018134:	4639      	mov	r1, r7
 8018136:	e881 000c 	stmia.w	r1, {r2, r3}
 801813a:	4603      	mov	r3, r0
 801813c:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	881b      	ldrh	r3, [r3, #0]
 8018142:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8018144:	7afb      	ldrb	r3, [r7, #11]
 8018146:	f083 0301 	eor.w	r3, r3, #1
 801814a:	b2db      	uxtb	r3, r3
 801814c:	2b00      	cmp	r3, #0
 801814e:	d01b      	beq.n	8018188 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8018150:	f242 7310 	movw	r3, #10000	; 0x2710
 8018154:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8018156:	683b      	ldr	r3, [r7, #0]
 8018158:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801815c:	d202      	bcs.n	8018164 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 801815e:	2364      	movs	r3, #100	; 0x64
 8018160:	82bb      	strh	r3, [r7, #20]
 8018162:	e00b      	b.n	801817c <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8018164:	683b      	ldr	r3, [r7, #0]
 8018166:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801816a:	4293      	cmp	r3, r2
 801816c:	d803      	bhi.n	8018176 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 801816e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018172:	82bb      	strh	r3, [r7, #20]
 8018174:	e002      	b.n	801817c <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8018176:	f242 7310 	movw	r3, #10000	; 0x2710
 801817a:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801817c:	8aba      	ldrh	r2, [r7, #20]
 801817e:	8afb      	ldrh	r3, [r7, #22]
 8018180:	4293      	cmp	r3, r2
 8018182:	bf38      	it	cc
 8018184:	4613      	movcc	r3, r2
 8018186:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8018188:	8afb      	ldrh	r3, [r7, #22]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d101      	bne.n	8018192 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 801818e:	2301      	movs	r3, #1
 8018190:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8018192:	8afb      	ldrh	r3, [r7, #22]
}
 8018194:	4618      	mov	r0, r3
 8018196:	371c      	adds	r7, #28
 8018198:	46bd      	mov	sp, r7
 801819a:	bc80      	pop	{r7}
 801819c:	4770      	bx	lr
	...

080181a0 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80181a0:	b580      	push	{r7, lr}
 80181a2:	b08e      	sub	sp, #56	; 0x38
 80181a4:	af02      	add	r7, sp, #8
 80181a6:	60f8      	str	r0, [r7, #12]
 80181a8:	4608      	mov	r0, r1
 80181aa:	4639      	mov	r1, r7
 80181ac:	e881 000c 	stmia.w	r1, {r2, r3}
 80181b0:	4603      	mov	r3, r0
 80181b2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	881b      	ldrh	r3, [r3, #0]
 80181b8:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80181ba:	4b4b      	ldr	r3, [pc, #300]	; (80182e8 <SetMaxTimeCredits+0x148>)
 80181bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80181be:	463b      	mov	r3, r7
 80181c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80181c4:	f006 ff30 	bl	801f028 <SysTimeToMs>
 80181c8:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80181ca:	f107 0314 	add.w	r3, r7, #20
 80181ce:	2200      	movs	r2, #0
 80181d0:	601a      	str	r2, [r3, #0]
 80181d2:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80181d4:	7af9      	ldrb	r1, [r7, #11]
 80181d6:	463b      	mov	r3, r7
 80181d8:	cb0c      	ldmia	r3, {r2, r3}
 80181da:	68f8      	ldr	r0, [r7, #12]
 80181dc:	f7ff ffa5 	bl	801812a <GetDutyCycle>
 80181e0:	4603      	mov	r3, r0
 80181e2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80181e4:	7afb      	ldrb	r3, [r7, #11]
 80181e6:	f083 0301 	eor.w	r3, r3, #1
 80181ea:	b2db      	uxtb	r3, r3
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d062      	beq.n	80182b6 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80181f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80181f2:	2b64      	cmp	r3, #100	; 0x64
 80181f4:	d105      	bne.n	8018202 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80181f6:	4b3c      	ldr	r3, [pc, #240]	; (80182e8 <SetMaxTimeCredits+0x148>)
 80181f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181fe:	609a      	str	r2, [r3, #8]
 8018200:	e00b      	b.n	801821a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8018202:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018208:	d105      	bne.n	8018216 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801820a:	4b38      	ldr	r3, [pc, #224]	; (80182ec <SetMaxTimeCredits+0x14c>)
 801820c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018212:	609a      	str	r2, [r3, #8]
 8018214:	e001      	b.n	801821a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8018216:	4b36      	ldr	r3, [pc, #216]	; (80182f0 <SetMaxTimeCredits+0x150>)
 8018218:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	689a      	ldr	r2, [r3, #8]
 801821e:	f107 031c 	add.w	r3, r7, #28
 8018222:	4611      	mov	r1, r2
 8018224:	4618      	mov	r0, r3
 8018226:	f006 ff27 	bl	801f078 <SysTimeFromMs>
 801822a:	f107 0014 	add.w	r0, r7, #20
 801822e:	6a3b      	ldr	r3, [r7, #32]
 8018230:	9300      	str	r3, [sp, #0]
 8018232:	69fb      	ldr	r3, [r7, #28]
 8018234:	463a      	mov	r2, r7
 8018236:	ca06      	ldmia	r2, {r1, r2}
 8018238:	f006 fe37 	bl	801eeaa <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801823c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8018240:	f083 0301 	eor.w	r3, r3, #1
 8018244:	b2db      	uxtb	r3, r3
 8018246:	2b00      	cmp	r3, #0
 8018248:	d006      	beq.n	8018258 <SetMaxTimeCredits+0xb8>
 801824a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801824e:	f083 0301 	eor.w	r3, r3, #1
 8018252:	b2db      	uxtb	r3, r3
 8018254:	2b00      	cmp	r3, #0
 8018256:	d108      	bne.n	801826a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801825c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801825e:	429a      	cmp	r2, r3
 8018260:	d103      	bne.n	801826a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8018262:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8018264:	4a23      	ldr	r2, [pc, #140]	; (80182f4 <SetMaxTimeCredits+0x154>)
 8018266:	4293      	cmp	r3, r2
 8018268:	d92f      	bls.n	80182ca <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801826a:	68fb      	ldr	r3, [r7, #12]
 801826c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801826e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8018270:	683b      	ldr	r3, [r7, #0]
 8018272:	4a21      	ldr	r2, [pc, #132]	; (80182f8 <SetMaxTimeCredits+0x158>)
 8018274:	4293      	cmp	r3, r2
 8018276:	d928      	bls.n	80182ca <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8018278:	683b      	ldr	r3, [r7, #0]
 801827a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801827e:	3b30      	subs	r3, #48	; 0x30
 8018280:	4a1e      	ldr	r2, [pc, #120]	; (80182fc <SetMaxTimeCredits+0x15c>)
 8018282:	fba2 2303 	umull	r2, r3, r2, r3
 8018286:	0c1b      	lsrs	r3, r3, #16
 8018288:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801828a:	697b      	ldr	r3, [r7, #20]
 801828c:	4a1c      	ldr	r2, [pc, #112]	; (8018300 <SetMaxTimeCredits+0x160>)
 801828e:	fb02 f303 	mul.w	r3, r2, r3
 8018292:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8018294:	697b      	ldr	r3, [r7, #20]
 8018296:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801829a:	3330      	adds	r3, #48	; 0x30
 801829c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801829e:	2300      	movs	r3, #0
 80182a0:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80182a2:	f107 0314 	add.w	r3, r7, #20
 80182a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80182aa:	f006 febd 	bl	801f028 <SysTimeToMs>
 80182ae:	4602      	mov	r2, r0
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	609a      	str	r2, [r3, #8]
 80182b4:	e009      	b.n	80182ca <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80182b6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80182ba:	f083 0301 	eor.w	r3, r3, #1
 80182be:	b2db      	uxtb	r3, r3
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d002      	beq.n	80182ca <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80182c8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	685b      	ldr	r3, [r3, #4]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d102      	bne.n	80182d8 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80182d6:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80182dc:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80182de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80182e0:	4618      	mov	r0, r3
 80182e2:	3730      	adds	r7, #48	; 0x30
 80182e4:	46bd      	mov	sp, r7
 80182e6:	bd80      	pop	{r7, pc}
 80182e8:	001b7740 	.word	0x001b7740
 80182ec:	0112a880 	.word	0x0112a880
 80182f0:	02932e00 	.word	0x02932e00
 80182f4:	0001517f 	.word	0x0001517f
 80182f8:	0001ec2f 	.word	0x0001ec2f
 80182fc:	c22e4507 	.word	0xc22e4507
 8018300:	00015180 	.word	0x00015180

08018304 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8018304:	b580      	push	{r7, lr}
 8018306:	b086      	sub	sp, #24
 8018308:	af02      	add	r7, sp, #8
 801830a:	6078      	str	r0, [r7, #4]
 801830c:	4608      	mov	r0, r1
 801830e:	4611      	mov	r1, r2
 8018310:	461a      	mov	r2, r3
 8018312:	4603      	mov	r3, r0
 8018314:	70fb      	strb	r3, [r7, #3]
 8018316:	460b      	mov	r3, r1
 8018318:	70bb      	strb	r3, [r7, #2]
 801831a:	4613      	mov	r3, r2
 801831c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801831e:	78f9      	ldrb	r1, [r7, #3]
 8018320:	787b      	ldrb	r3, [r7, #1]
 8018322:	9301      	str	r3, [sp, #4]
 8018324:	78bb      	ldrb	r3, [r7, #2]
 8018326:	9300      	str	r3, [sp, #0]
 8018328:	f107 0318 	add.w	r3, r7, #24
 801832c:	cb0c      	ldmia	r3, {r2, r3}
 801832e:	6878      	ldr	r0, [r7, #4]
 8018330:	f7ff ff36 	bl	80181a0 <SetMaxTimeCredits>
 8018334:	4603      	mov	r3, r0
 8018336:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8018338:	78fb      	ldrb	r3, [r7, #3]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d00a      	beq.n	8018354 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	685b      	ldr	r3, [r3, #4]
 8018342:	4618      	mov	r0, r3
 8018344:	f007 fba8 	bl	801fa98 <UTIL_TIMER_GetElapsedTime>
 8018348:	4602      	mov	r2, r0
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	68db      	ldr	r3, [r3, #12]
 801834e:	441a      	add	r2, r3
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	68da      	ldr	r2, [r3, #12]
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	691b      	ldr	r3, [r3, #16]
 801835c:	429a      	cmp	r2, r3
 801835e:	d903      	bls.n	8018368 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	691a      	ldr	r2, [r3, #16]
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	6a3a      	ldr	r2, [r7, #32]
 801836c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801836e:	89fb      	ldrh	r3, [r7, #14]
}
 8018370:	4618      	mov	r0, r3
 8018372:	3710      	adds	r7, #16
 8018374:	46bd      	mov	sp, r7
 8018376:	bd80      	pop	{r7, pc}

08018378 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8018378:	b480      	push	{r7}
 801837a:	b085      	sub	sp, #20
 801837c:	af00      	add	r7, sp, #0
 801837e:	4603      	mov	r3, r0
 8018380:	460a      	mov	r2, r1
 8018382:	80fb      	strh	r3, [r7, #6]
 8018384:	4613      	mov	r3, r2
 8018386:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8018388:	2300      	movs	r3, #0
 801838a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801838c:	2300      	movs	r3, #0
 801838e:	73bb      	strb	r3, [r7, #14]
 8018390:	e011      	b.n	80183b6 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8018392:	88fa      	ldrh	r2, [r7, #6]
 8018394:	7bbb      	ldrb	r3, [r7, #14]
 8018396:	2101      	movs	r1, #1
 8018398:	fa01 f303 	lsl.w	r3, r1, r3
 801839c:	401a      	ands	r2, r3
 801839e:	7bbb      	ldrb	r3, [r7, #14]
 80183a0:	2101      	movs	r1, #1
 80183a2:	fa01 f303 	lsl.w	r3, r1, r3
 80183a6:	429a      	cmp	r2, r3
 80183a8:	d102      	bne.n	80183b0 <CountChannels+0x38>
        {
            nbActiveBits++;
 80183aa:	7bfb      	ldrb	r3, [r7, #15]
 80183ac:	3301      	adds	r3, #1
 80183ae:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80183b0:	7bbb      	ldrb	r3, [r7, #14]
 80183b2:	3301      	adds	r3, #1
 80183b4:	73bb      	strb	r3, [r7, #14]
 80183b6:	7bba      	ldrb	r2, [r7, #14]
 80183b8:	797b      	ldrb	r3, [r7, #5]
 80183ba:	429a      	cmp	r2, r3
 80183bc:	d3e9      	bcc.n	8018392 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80183be:	7bfb      	ldrb	r3, [r7, #15]
}
 80183c0:	4618      	mov	r0, r3
 80183c2:	3714      	adds	r7, #20
 80183c4:	46bd      	mov	sp, r7
 80183c6:	bc80      	pop	{r7}
 80183c8:	4770      	bx	lr

080183ca <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80183ca:	b580      	push	{r7, lr}
 80183cc:	b084      	sub	sp, #16
 80183ce:	af00      	add	r7, sp, #0
 80183d0:	6039      	str	r1, [r7, #0]
 80183d2:	4611      	mov	r1, r2
 80183d4:	461a      	mov	r2, r3
 80183d6:	4603      	mov	r3, r0
 80183d8:	71fb      	strb	r3, [r7, #7]
 80183da:	460b      	mov	r3, r1
 80183dc:	71bb      	strb	r3, [r7, #6]
 80183de:	4613      	mov	r3, r2
 80183e0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80183e2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80183e6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80183ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80183ee:	4618      	mov	r0, r3
 80183f0:	f000 f85d 	bl	80184ae <RegionCommonValueInRange>
 80183f4:	4603      	mov	r3, r0
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d101      	bne.n	80183fe <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80183fa:	2300      	movs	r3, #0
 80183fc:	e053      	b.n	80184a6 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80183fe:	2300      	movs	r3, #0
 8018400:	73fb      	strb	r3, [r7, #15]
 8018402:	2300      	movs	r3, #0
 8018404:	73bb      	strb	r3, [r7, #14]
 8018406:	e049      	b.n	801849c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018408:	2300      	movs	r3, #0
 801840a:	737b      	strb	r3, [r7, #13]
 801840c:	e03d      	b.n	801848a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801840e:	7bbb      	ldrb	r3, [r7, #14]
 8018410:	005b      	lsls	r3, r3, #1
 8018412:	683a      	ldr	r2, [r7, #0]
 8018414:	4413      	add	r3, r2
 8018416:	881b      	ldrh	r3, [r3, #0]
 8018418:	461a      	mov	r2, r3
 801841a:	7b7b      	ldrb	r3, [r7, #13]
 801841c:	fa42 f303 	asr.w	r3, r2, r3
 8018420:	f003 0301 	and.w	r3, r3, #1
 8018424:	2b00      	cmp	r3, #0
 8018426:	d02d      	beq.n	8018484 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8018428:	7bfa      	ldrb	r2, [r7, #15]
 801842a:	7b7b      	ldrb	r3, [r7, #13]
 801842c:	4413      	add	r3, r2
 801842e:	461a      	mov	r2, r3
 8018430:	4613      	mov	r3, r2
 8018432:	005b      	lsls	r3, r3, #1
 8018434:	4413      	add	r3, r2
 8018436:	009b      	lsls	r3, r3, #2
 8018438:	461a      	mov	r2, r3
 801843a:	69fb      	ldr	r3, [r7, #28]
 801843c:	4413      	add	r3, r2
 801843e:	7a1b      	ldrb	r3, [r3, #8]
 8018440:	f343 0303 	sbfx	r3, r3, #0, #4
 8018444:	b25b      	sxtb	r3, r3
 8018446:	f003 030f 	and.w	r3, r3, #15
 801844a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801844c:	7bfa      	ldrb	r2, [r7, #15]
 801844e:	7b7b      	ldrb	r3, [r7, #13]
 8018450:	4413      	add	r3, r2
 8018452:	461a      	mov	r2, r3
 8018454:	4613      	mov	r3, r2
 8018456:	005b      	lsls	r3, r3, #1
 8018458:	4413      	add	r3, r2
 801845a:	009b      	lsls	r3, r3, #2
 801845c:	461a      	mov	r2, r3
 801845e:	69fb      	ldr	r3, [r7, #28]
 8018460:	4413      	add	r3, r2
 8018462:	7a1b      	ldrb	r3, [r3, #8]
 8018464:	f343 1303 	sbfx	r3, r3, #4, #4
 8018468:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801846a:	f003 030f 	and.w	r3, r3, #15
 801846e:	b25a      	sxtb	r2, r3
 8018470:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018474:	4618      	mov	r0, r3
 8018476:	f000 f81a 	bl	80184ae <RegionCommonValueInRange>
 801847a:	4603      	mov	r3, r0
 801847c:	2b01      	cmp	r3, #1
 801847e:	d101      	bne.n	8018484 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8018480:	2301      	movs	r3, #1
 8018482:	e010      	b.n	80184a6 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8018484:	7b7b      	ldrb	r3, [r7, #13]
 8018486:	3301      	adds	r3, #1
 8018488:	737b      	strb	r3, [r7, #13]
 801848a:	7b7b      	ldrb	r3, [r7, #13]
 801848c:	2b0f      	cmp	r3, #15
 801848e:	d9be      	bls.n	801840e <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8018490:	7bfb      	ldrb	r3, [r7, #15]
 8018492:	3310      	adds	r3, #16
 8018494:	73fb      	strb	r3, [r7, #15]
 8018496:	7bbb      	ldrb	r3, [r7, #14]
 8018498:	3301      	adds	r3, #1
 801849a:	73bb      	strb	r3, [r7, #14]
 801849c:	7bfa      	ldrb	r2, [r7, #15]
 801849e:	79fb      	ldrb	r3, [r7, #7]
 80184a0:	429a      	cmp	r2, r3
 80184a2:	d3b1      	bcc.n	8018408 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80184a4:	2300      	movs	r3, #0
}
 80184a6:	4618      	mov	r0, r3
 80184a8:	3710      	adds	r7, #16
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bd80      	pop	{r7, pc}

080184ae <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80184ae:	b480      	push	{r7}
 80184b0:	b083      	sub	sp, #12
 80184b2:	af00      	add	r7, sp, #0
 80184b4:	4603      	mov	r3, r0
 80184b6:	71fb      	strb	r3, [r7, #7]
 80184b8:	460b      	mov	r3, r1
 80184ba:	71bb      	strb	r3, [r7, #6]
 80184bc:	4613      	mov	r3, r2
 80184be:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80184c0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80184c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80184c8:	429a      	cmp	r2, r3
 80184ca:	db07      	blt.n	80184dc <RegionCommonValueInRange+0x2e>
 80184cc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80184d0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80184d4:	429a      	cmp	r2, r3
 80184d6:	dc01      	bgt.n	80184dc <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80184d8:	2301      	movs	r3, #1
 80184da:	e000      	b.n	80184de <RegionCommonValueInRange+0x30>
    }
    return 0;
 80184dc:	2300      	movs	r3, #0
}
 80184de:	4618      	mov	r0, r3
 80184e0:	370c      	adds	r7, #12
 80184e2:	46bd      	mov	sp, r7
 80184e4:	bc80      	pop	{r7}
 80184e6:	4770      	bx	lr

080184e8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80184e8:	b480      	push	{r7}
 80184ea:	b085      	sub	sp, #20
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
 80184f0:	460b      	mov	r3, r1
 80184f2:	70fb      	strb	r3, [r7, #3]
 80184f4:	4613      	mov	r3, r2
 80184f6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80184f8:	78fb      	ldrb	r3, [r7, #3]
 80184fa:	091b      	lsrs	r3, r3, #4
 80184fc:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80184fe:	78bb      	ldrb	r3, [r7, #2]
 8018500:	091b      	lsrs	r3, r3, #4
 8018502:	b2db      	uxtb	r3, r3
 8018504:	7bfa      	ldrb	r2, [r7, #15]
 8018506:	429a      	cmp	r2, r3
 8018508:	d803      	bhi.n	8018512 <RegionCommonChanDisable+0x2a>
 801850a:	78fa      	ldrb	r2, [r7, #3]
 801850c:	78bb      	ldrb	r3, [r7, #2]
 801850e:	429a      	cmp	r2, r3
 8018510:	d301      	bcc.n	8018516 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8018512:	2300      	movs	r3, #0
 8018514:	e017      	b.n	8018546 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8018516:	7bfb      	ldrb	r3, [r7, #15]
 8018518:	005b      	lsls	r3, r3, #1
 801851a:	687a      	ldr	r2, [r7, #4]
 801851c:	4413      	add	r3, r2
 801851e:	881b      	ldrh	r3, [r3, #0]
 8018520:	b21a      	sxth	r2, r3
 8018522:	78fb      	ldrb	r3, [r7, #3]
 8018524:	f003 030f 	and.w	r3, r3, #15
 8018528:	2101      	movs	r1, #1
 801852a:	fa01 f303 	lsl.w	r3, r1, r3
 801852e:	b21b      	sxth	r3, r3
 8018530:	43db      	mvns	r3, r3
 8018532:	b21b      	sxth	r3, r3
 8018534:	4013      	ands	r3, r2
 8018536:	b219      	sxth	r1, r3
 8018538:	7bfb      	ldrb	r3, [r7, #15]
 801853a:	005b      	lsls	r3, r3, #1
 801853c:	687a      	ldr	r2, [r7, #4]
 801853e:	4413      	add	r3, r2
 8018540:	b28a      	uxth	r2, r1
 8018542:	801a      	strh	r2, [r3, #0]

    return true;
 8018544:	2301      	movs	r3, #1
}
 8018546:	4618      	mov	r0, r3
 8018548:	3714      	adds	r7, #20
 801854a:	46bd      	mov	sp, r7
 801854c:	bc80      	pop	{r7}
 801854e:	4770      	bx	lr

08018550 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8018550:	b580      	push	{r7, lr}
 8018552:	b084      	sub	sp, #16
 8018554:	af00      	add	r7, sp, #0
 8018556:	6078      	str	r0, [r7, #4]
 8018558:	460b      	mov	r3, r1
 801855a:	70fb      	strb	r3, [r7, #3]
 801855c:	4613      	mov	r3, r2
 801855e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8018560:	2300      	movs	r3, #0
 8018562:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	2b00      	cmp	r3, #0
 8018568:	d101      	bne.n	801856e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801856a:	2300      	movs	r3, #0
 801856c:	e018      	b.n	80185a0 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801856e:	78fb      	ldrb	r3, [r7, #3]
 8018570:	73bb      	strb	r3, [r7, #14]
 8018572:	e010      	b.n	8018596 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8018574:	7bbb      	ldrb	r3, [r7, #14]
 8018576:	005b      	lsls	r3, r3, #1
 8018578:	687a      	ldr	r2, [r7, #4]
 801857a:	4413      	add	r3, r2
 801857c:	881b      	ldrh	r3, [r3, #0]
 801857e:	2110      	movs	r1, #16
 8018580:	4618      	mov	r0, r3
 8018582:	f7ff fef9 	bl	8018378 <CountChannels>
 8018586:	4603      	mov	r3, r0
 8018588:	461a      	mov	r2, r3
 801858a:	7bfb      	ldrb	r3, [r7, #15]
 801858c:	4413      	add	r3, r2
 801858e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8018590:	7bbb      	ldrb	r3, [r7, #14]
 8018592:	3301      	adds	r3, #1
 8018594:	73bb      	strb	r3, [r7, #14]
 8018596:	7bba      	ldrb	r2, [r7, #14]
 8018598:	78bb      	ldrb	r3, [r7, #2]
 801859a:	429a      	cmp	r2, r3
 801859c:	d3ea      	bcc.n	8018574 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801859e:	7bfb      	ldrb	r3, [r7, #15]
}
 80185a0:	4618      	mov	r0, r3
 80185a2:	3710      	adds	r7, #16
 80185a4:	46bd      	mov	sp, r7
 80185a6:	bd80      	pop	{r7, pc}

080185a8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80185a8:	b480      	push	{r7}
 80185aa:	b087      	sub	sp, #28
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	60f8      	str	r0, [r7, #12]
 80185b0:	60b9      	str	r1, [r7, #8]
 80185b2:	4613      	mov	r3, r2
 80185b4:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d016      	beq.n	80185ea <RegionCommonChanMaskCopy+0x42>
 80185bc:	68bb      	ldr	r3, [r7, #8]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d013      	beq.n	80185ea <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80185c2:	2300      	movs	r3, #0
 80185c4:	75fb      	strb	r3, [r7, #23]
 80185c6:	e00c      	b.n	80185e2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80185c8:	7dfb      	ldrb	r3, [r7, #23]
 80185ca:	005b      	lsls	r3, r3, #1
 80185cc:	68ba      	ldr	r2, [r7, #8]
 80185ce:	441a      	add	r2, r3
 80185d0:	7dfb      	ldrb	r3, [r7, #23]
 80185d2:	005b      	lsls	r3, r3, #1
 80185d4:	68f9      	ldr	r1, [r7, #12]
 80185d6:	440b      	add	r3, r1
 80185d8:	8812      	ldrh	r2, [r2, #0]
 80185da:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80185dc:	7dfb      	ldrb	r3, [r7, #23]
 80185de:	3301      	adds	r3, #1
 80185e0:	75fb      	strb	r3, [r7, #23]
 80185e2:	7dfa      	ldrb	r2, [r7, #23]
 80185e4:	79fb      	ldrb	r3, [r7, #7]
 80185e6:	429a      	cmp	r2, r3
 80185e8:	d3ee      	bcc.n	80185c8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80185ea:	bf00      	nop
 80185ec:	371c      	adds	r7, #28
 80185ee:	46bd      	mov	sp, r7
 80185f0:	bc80      	pop	{r7}
 80185f2:	4770      	bx	lr

080185f4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80185f4:	b082      	sub	sp, #8
 80185f6:	b580      	push	{r7, lr}
 80185f8:	b086      	sub	sp, #24
 80185fa:	af00      	add	r7, sp, #0
 80185fc:	60f8      	str	r0, [r7, #12]
 80185fe:	60b9      	str	r1, [r7, #8]
 8018600:	627b      	str	r3, [r7, #36]	; 0x24
 8018602:	4613      	mov	r3, r2
 8018604:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8018606:	79f9      	ldrb	r1, [r7, #7]
 8018608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801860c:	cb0c      	ldmia	r3, {r2, r3}
 801860e:	68f8      	ldr	r0, [r7, #12]
 8018610:	f7ff fd8b 	bl	801812a <GetDutyCycle>
 8018614:	4603      	mov	r3, r0
 8018616:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	68da      	ldr	r2, [r3, #12]
 801861c:	8afb      	ldrh	r3, [r7, #22]
 801861e:	68b9      	ldr	r1, [r7, #8]
 8018620:	fb01 f303 	mul.w	r3, r1, r3
 8018624:	429a      	cmp	r2, r3
 8018626:	d909      	bls.n	801863c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	68da      	ldr	r2, [r3, #12]
 801862c:	8afb      	ldrh	r3, [r7, #22]
 801862e:	68b9      	ldr	r1, [r7, #8]
 8018630:	fb01 f303 	mul.w	r3, r1, r3
 8018634:	1ad2      	subs	r2, r2, r3
 8018636:	68fb      	ldr	r3, [r7, #12]
 8018638:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801863a:	e002      	b.n	8018642 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	2200      	movs	r2, #0
 8018640:	60da      	str	r2, [r3, #12]
}
 8018642:	bf00      	nop
 8018644:	3718      	adds	r7, #24
 8018646:	46bd      	mov	sp, r7
 8018648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801864c:	b002      	add	sp, #8
 801864e:	4770      	bx	lr

08018650 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8018650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018652:	b08f      	sub	sp, #60	; 0x3c
 8018654:	af04      	add	r7, sp, #16
 8018656:	6039      	str	r1, [r7, #0]
 8018658:	4611      	mov	r1, r2
 801865a:	461a      	mov	r2, r3
 801865c:	4603      	mov	r3, r0
 801865e:	71fb      	strb	r3, [r7, #7]
 8018660:	460b      	mov	r3, r1
 8018662:	71bb      	strb	r3, [r7, #6]
 8018664:	4613      	mov	r3, r2
 8018666:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8018668:	f04f 33ff 	mov.w	r3, #4294967295
 801866c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801866e:	f007 fa01 	bl	801fa74 <UTIL_TIMER_GetCurrentTime>
 8018672:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8018674:	2300      	movs	r3, #0
 8018676:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8018678:	2301      	movs	r3, #1
 801867a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801867c:	2300      	movs	r3, #0
 801867e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8018682:	2300      	movs	r3, #0
 8018684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018688:	e0ba      	b.n	8018800 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801868a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801868e:	4613      	mov	r3, r2
 8018690:	005b      	lsls	r3, r3, #1
 8018692:	4413      	add	r3, r2
 8018694:	00db      	lsls	r3, r3, #3
 8018696:	461a      	mov	r2, r3
 8018698:	683b      	ldr	r3, [r7, #0]
 801869a:	189c      	adds	r4, r3, r2
 801869c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 80186a0:	797a      	ldrb	r2, [r7, #5]
 80186a2:	79fd      	ldrb	r5, [r7, #7]
 80186a4:	69fb      	ldr	r3, [r7, #28]
 80186a6:	9302      	str	r3, [sp, #8]
 80186a8:	46ec      	mov	ip, sp
 80186aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80186ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80186b2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80186b6:	4633      	mov	r3, r6
 80186b8:	4629      	mov	r1, r5
 80186ba:	4620      	mov	r0, r4
 80186bc:	f7ff fe22 	bl	8018304 <UpdateTimeCredits>
 80186c0:	4603      	mov	r3, r0
 80186c2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80186c4:	8afa      	ldrh	r2, [r7, #22]
 80186c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80186c8:	fb02 f303 	mul.w	r3, r2, r3
 80186cc:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80186ce:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80186d2:	4613      	mov	r3, r2
 80186d4:	005b      	lsls	r3, r3, #1
 80186d6:	4413      	add	r3, r2
 80186d8:	00db      	lsls	r3, r3, #3
 80186da:	461a      	mov	r2, r3
 80186dc:	683b      	ldr	r3, [r7, #0]
 80186de:	4413      	add	r3, r2
 80186e0:	68db      	ldr	r3, [r3, #12]
 80186e2:	69ba      	ldr	r2, [r7, #24]
 80186e4:	429a      	cmp	r2, r3
 80186e6:	d908      	bls.n	80186fa <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80186e8:	797b      	ldrb	r3, [r7, #5]
 80186ea:	f083 0301 	eor.w	r3, r3, #1
 80186ee:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d013      	beq.n	801871c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80186f4:	79fb      	ldrb	r3, [r7, #7]
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d010      	beq.n	801871c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80186fa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80186fe:	4613      	mov	r3, r2
 8018700:	005b      	lsls	r3, r3, #1
 8018702:	4413      	add	r3, r2
 8018704:	00db      	lsls	r3, r3, #3
 8018706:	461a      	mov	r2, r3
 8018708:	683b      	ldr	r3, [r7, #0]
 801870a:	4413      	add	r3, r2
 801870c:	2201      	movs	r2, #1
 801870e:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8018710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018714:	3301      	adds	r3, #1
 8018716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801871a:	e06c      	b.n	80187f6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801871c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018720:	4613      	mov	r3, r2
 8018722:	005b      	lsls	r3, r3, #1
 8018724:	4413      	add	r3, r2
 8018726:	00db      	lsls	r3, r3, #3
 8018728:	461a      	mov	r2, r3
 801872a:	683b      	ldr	r3, [r7, #0]
 801872c:	4413      	add	r3, r2
 801872e:	2200      	movs	r2, #0
 8018730:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8018732:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018736:	4613      	mov	r3, r2
 8018738:	005b      	lsls	r3, r3, #1
 801873a:	4413      	add	r3, r2
 801873c:	00db      	lsls	r3, r3, #3
 801873e:	461a      	mov	r2, r3
 8018740:	683b      	ldr	r3, [r7, #0]
 8018742:	4413      	add	r3, r2
 8018744:	691b      	ldr	r3, [r3, #16]
 8018746:	69ba      	ldr	r2, [r7, #24]
 8018748:	429a      	cmp	r2, r3
 801874a:	d815      	bhi.n	8018778 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801874c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018750:	4613      	mov	r3, r2
 8018752:	005b      	lsls	r3, r3, #1
 8018754:	4413      	add	r3, r2
 8018756:	00db      	lsls	r3, r3, #3
 8018758:	461a      	mov	r2, r3
 801875a:	683b      	ldr	r3, [r7, #0]
 801875c:	4413      	add	r3, r2
 801875e:	68db      	ldr	r3, [r3, #12]
 8018760:	69ba      	ldr	r2, [r7, #24]
 8018762:	1ad3      	subs	r3, r2, r3
 8018764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018766:	4293      	cmp	r3, r2
 8018768:	bf28      	it	cs
 801876a:	4613      	movcs	r3, r2
 801876c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801876e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018772:	3301      	adds	r3, #1
 8018774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8018778:	79fb      	ldrb	r3, [r7, #7]
 801877a:	f083 0301 	eor.w	r3, r3, #1
 801877e:	b2db      	uxtb	r3, r3
 8018780:	2b00      	cmp	r3, #0
 8018782:	d038      	beq.n	80187f6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8018784:	2300      	movs	r3, #0
 8018786:	60fb      	str	r3, [r7, #12]
 8018788:	2300      	movs	r3, #0
 801878a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801878c:	8afb      	ldrh	r3, [r7, #22]
 801878e:	2b64      	cmp	r3, #100	; 0x64
 8018790:	d103      	bne.n	801879a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8018792:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8018796:	60fb      	str	r3, [r7, #12]
 8018798:	e009      	b.n	80187ae <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801879a:	8afb      	ldrh	r3, [r7, #22]
 801879c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80187a0:	d103      	bne.n	80187aa <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80187a2:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 80187a6:	60fb      	str	r3, [r7, #12]
 80187a8:	e001      	b.n	80187ae <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80187aa:	4b1e      	ldr	r3, [pc, #120]	; (8018824 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80187ac:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80187ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187b0:	4a1c      	ldr	r2, [pc, #112]	; (8018824 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80187b2:	4293      	cmp	r3, r2
 80187b4:	d90e      	bls.n	80187d4 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80187b6:	68fa      	ldr	r2, [r7, #12]
 80187b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187ba:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80187be:	3b30      	subs	r3, #48	; 0x30
 80187c0:	4919      	ldr	r1, [pc, #100]	; (8018828 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80187c2:	fba1 1303 	umull	r1, r3, r1, r3
 80187c6:	0c1b      	lsrs	r3, r3, #16
 80187c8:	3301      	adds	r3, #1
 80187ca:	4918      	ldr	r1, [pc, #96]	; (801882c <RegionCommonUpdateBandTimeOff+0x1dc>)
 80187cc:	fb01 f303 	mul.w	r3, r1, r3
 80187d0:	4413      	add	r3, r2
 80187d2:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80187d4:	f107 000c 	add.w	r0, r7, #12
 80187d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80187da:	9300      	str	r3, [sp, #0]
 80187dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187de:	f107 020c 	add.w	r2, r7, #12
 80187e2:	ca06      	ldmia	r2, {r1, r2}
 80187e4:	f006 fb61 	bl	801eeaa <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80187e8:	f107 030c 	add.w	r3, r7, #12
 80187ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80187f0:	f006 fc1a 	bl	801f028 <SysTimeToMs>
 80187f4:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80187f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80187fa:	3301      	adds	r3, #1
 80187fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018800:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018804:	79bb      	ldrb	r3, [r7, #6]
 8018806:	429a      	cmp	r2, r3
 8018808:	f4ff af3f 	bcc.w	801868a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 801880c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018810:	2b00      	cmp	r3, #0
 8018812:	d102      	bne.n	801881a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8018814:	f04f 33ff 	mov.w	r3, #4294967295
 8018818:	e000      	b.n	801881c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801881c:	4618      	mov	r0, r3
 801881e:	372c      	adds	r7, #44	; 0x2c
 8018820:	46bd      	mov	sp, r7
 8018822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018824:	0001ec30 	.word	0x0001ec30
 8018828:	c22e4507 	.word	0xc22e4507
 801882c:	00015180 	.word	0x00015180

08018830 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8018830:	b480      	push	{r7}
 8018832:	b085      	sub	sp, #20
 8018834:	af00      	add	r7, sp, #0
 8018836:	6078      	str	r0, [r7, #4]
 8018838:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801883a:	2300      	movs	r3, #0
 801883c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	781b      	ldrb	r3, [r3, #0]
 8018842:	2b03      	cmp	r3, #3
 8018844:	d13f      	bne.n	80188c6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	3301      	adds	r3, #1
 801884a:	781b      	ldrb	r3, [r3, #0]
 801884c:	b25a      	sxtb	r2, r3
 801884e:	683b      	ldr	r3, [r7, #0]
 8018850:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8018852:	683b      	ldr	r3, [r7, #0]
 8018854:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018858:	f003 030f 	and.w	r3, r3, #15
 801885c:	b25a      	sxtb	r2, r3
 801885e:	683b      	ldr	r3, [r7, #0]
 8018860:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8018862:	683b      	ldr	r3, [r7, #0]
 8018864:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018868:	b2db      	uxtb	r3, r3
 801886a:	091b      	lsrs	r3, r3, #4
 801886c:	b2db      	uxtb	r3, r3
 801886e:	b25a      	sxtb	r2, r3
 8018870:	683b      	ldr	r3, [r7, #0]
 8018872:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	3302      	adds	r3, #2
 8018878:	781b      	ldrb	r3, [r3, #0]
 801887a:	b29a      	uxth	r2, r3
 801887c:	683b      	ldr	r3, [r7, #0]
 801887e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8018880:	683b      	ldr	r3, [r7, #0]
 8018882:	889b      	ldrh	r3, [r3, #4]
 8018884:	b21a      	sxth	r2, r3
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	3303      	adds	r3, #3
 801888a:	781b      	ldrb	r3, [r3, #0]
 801888c:	021b      	lsls	r3, r3, #8
 801888e:	b21b      	sxth	r3, r3
 8018890:	4313      	orrs	r3, r2
 8018892:	b21b      	sxth	r3, r3
 8018894:	b29a      	uxth	r2, r3
 8018896:	683b      	ldr	r3, [r7, #0]
 8018898:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	791a      	ldrb	r2, [r3, #4]
 801889e:	683b      	ldr	r3, [r7, #0]
 80188a0:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80188a2:	683b      	ldr	r3, [r7, #0]
 80188a4:	781b      	ldrb	r3, [r3, #0]
 80188a6:	091b      	lsrs	r3, r3, #4
 80188a8:	b2db      	uxtb	r3, r3
 80188aa:	f003 0307 	and.w	r3, r3, #7
 80188ae:	b2da      	uxtb	r2, r3
 80188b0:	683b      	ldr	r3, [r7, #0]
 80188b2:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80188b4:	683b      	ldr	r3, [r7, #0]
 80188b6:	781b      	ldrb	r3, [r3, #0]
 80188b8:	f003 030f 	and.w	r3, r3, #15
 80188bc:	b2da      	uxtb	r2, r3
 80188be:	683b      	ldr	r3, [r7, #0]
 80188c0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80188c2:	2305      	movs	r3, #5
 80188c4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80188c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80188c8:	4618      	mov	r0, r3
 80188ca:	3714      	adds	r7, #20
 80188cc:	46bd      	mov	sp, r7
 80188ce:	bc80      	pop	{r7}
 80188d0:	4770      	bx	lr

080188d2 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80188d2:	b5b0      	push	{r4, r5, r7, lr}
 80188d4:	b088      	sub	sp, #32
 80188d6:	af02      	add	r7, sp, #8
 80188d8:	60f8      	str	r0, [r7, #12]
 80188da:	60b9      	str	r1, [r7, #8]
 80188dc:	607a      	str	r2, [r7, #4]
 80188de:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	791b      	ldrb	r3, [r3, #4]
 80188e4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80188e6:	68fb      	ldr	r3, [r7, #12]
 80188e8:	799b      	ldrb	r3, [r3, #6]
 80188ea:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80188ec:	68fb      	ldr	r3, [r7, #12]
 80188ee:	79db      	ldrb	r3, [r3, #7]
 80188f0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	7a1b      	ldrb	r3, [r3, #8]
 80188f6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	795b      	ldrb	r3, [r3, #5]
 80188fc:	f083 0301 	eor.w	r3, r3, #1
 8018900:	b2db      	uxtb	r3, r3
 8018902:	2b00      	cmp	r3, #0
 8018904:	d008      	beq.n	8018918 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	7adb      	ldrb	r3, [r3, #11]
 801890a:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	7a5b      	ldrb	r3, [r3, #9]
 8018910:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	7a9b      	ldrb	r3, [r3, #10]
 8018916:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8018918:	7dfb      	ldrb	r3, [r7, #23]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d04a      	beq.n	80189b4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 801891e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8018922:	2b0f      	cmp	r3, #15
 8018924:	d103      	bne.n	801892e <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	7a5b      	ldrb	r3, [r3, #9]
 801892a:	75bb      	strb	r3, [r7, #22]
 801892c:	e01d      	b.n	801896a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	7b18      	ldrb	r0, [r3, #12]
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	6919      	ldr	r1, [r3, #16]
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8018942:	68fa      	ldr	r2, [r7, #12]
 8018944:	6992      	ldr	r2, [r2, #24]
 8018946:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801894a:	9201      	str	r2, [sp, #4]
 801894c:	9300      	str	r3, [sp, #0]
 801894e:	462b      	mov	r3, r5
 8018950:	4622      	mov	r2, r4
 8018952:	f7ff fd3a 	bl	80183ca <RegionCommonChanVerifyDr>
 8018956:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8018958:	f083 0301 	eor.w	r3, r3, #1
 801895c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801895e:	2b00      	cmp	r3, #0
 8018960:	d003      	beq.n	801896a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8018962:	7dfb      	ldrb	r3, [r7, #23]
 8018964:	f023 0302 	bic.w	r3, r3, #2
 8018968:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801896a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801896e:	2b0f      	cmp	r3, #15
 8018970:	d103      	bne.n	801897a <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	7a9b      	ldrb	r3, [r3, #10]
 8018976:	757b      	strb	r3, [r7, #21]
 8018978:	e01c      	b.n	80189b4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8018986:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801898a:	4618      	mov	r0, r3
 801898c:	f7ff fd8f 	bl	80184ae <RegionCommonValueInRange>
 8018990:	4603      	mov	r3, r0
 8018992:	2b00      	cmp	r3, #0
 8018994:	d10e      	bne.n	80189b4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801899c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80189a0:	429a      	cmp	r2, r3
 80189a2:	da03      	bge.n	80189ac <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	7f5b      	ldrb	r3, [r3, #29]
 80189a8:	757b      	strb	r3, [r7, #21]
 80189aa:	e003      	b.n	80189b4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80189ac:	7dfb      	ldrb	r3, [r7, #23]
 80189ae:	f023 0304 	bic.w	r3, r3, #4
 80189b2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80189b4:	7dfb      	ldrb	r3, [r7, #23]
 80189b6:	2b07      	cmp	r3, #7
 80189b8:	d105      	bne.n	80189c6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 80189ba:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d101      	bne.n	80189c6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80189c2:	2301      	movs	r3, #1
 80189c4:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80189c6:	68bb      	ldr	r3, [r7, #8]
 80189c8:	7dba      	ldrb	r2, [r7, #22]
 80189ca:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	7d7a      	ldrb	r2, [r7, #21]
 80189d0:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80189d2:	7d3a      	ldrb	r2, [r7, #20]
 80189d4:	683b      	ldr	r3, [r7, #0]
 80189d6:	701a      	strb	r2, [r3, #0]

    return status;
 80189d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80189da:	4618      	mov	r0, r3
 80189dc:	3718      	adds	r7, #24
 80189de:	46bd      	mov	sp, r7
 80189e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080189e4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80189e4:	b480      	push	{r7}
 80189e6:	b083      	sub	sp, #12
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	4603      	mov	r3, r0
 80189ec:	6039      	str	r1, [r7, #0]
 80189ee:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80189f0:	79fb      	ldrb	r3, [r7, #7]
 80189f2:	4a06      	ldr	r2, [pc, #24]	; (8018a0c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80189f4:	fa02 f303 	lsl.w	r3, r2, r3
 80189f8:	461a      	mov	r2, r3
 80189fa:	683b      	ldr	r3, [r7, #0]
 80189fc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018a00:	4618      	mov	r0, r3
 8018a02:	370c      	adds	r7, #12
 8018a04:	46bd      	mov	sp, r7
 8018a06:	bc80      	pop	{r7}
 8018a08:	4770      	bx	lr
 8018a0a:	bf00      	nop
 8018a0c:	000f4240 	.word	0x000f4240

08018a10 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8018a10:	b480      	push	{r7}
 8018a12:	b083      	sub	sp, #12
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	4603      	mov	r3, r0
 8018a18:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8018a1a:	79fb      	ldrb	r3, [r7, #7]
 8018a1c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018a20:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	370c      	adds	r7, #12
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bc80      	pop	{r7}
 8018a2c:	4770      	bx	lr
	...

08018a30 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8018a30:	b480      	push	{r7}
 8018a32:	b085      	sub	sp, #20
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	60f8      	str	r0, [r7, #12]
 8018a38:	607a      	str	r2, [r7, #4]
 8018a3a:	603b      	str	r3, [r7, #0]
 8018a3c:	460b      	mov	r3, r1
 8018a3e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8018a40:	7afa      	ldrb	r2, [r7, #11]
 8018a42:	7afb      	ldrb	r3, [r7, #11]
 8018a44:	3b04      	subs	r3, #4
 8018a46:	4619      	mov	r1, r3
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	fb03 f101 	mul.w	r1, r3, r1
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018a54:	fb00 f303 	mul.w	r3, r0, r3
 8018a58:	440b      	add	r3, r1
 8018a5a:	005b      	lsls	r3, r3, #1
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d013      	beq.n	8018a88 <RegionCommonComputeRxWindowParameters+0x58>
 8018a60:	7afb      	ldrb	r3, [r7, #11]
 8018a62:	3b04      	subs	r3, #4
 8018a64:	4619      	mov	r1, r3
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	fb03 f101 	mul.w	r1, r3, r1
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018a72:	fb00 f303 	mul.w	r3, r0, r3
 8018a76:	440b      	add	r3, r1
 8018a78:	0059      	lsls	r1, r3, #1
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	440b      	add	r3, r1
 8018a7e:	1e59      	subs	r1, r3, #1
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8018a86:	e00f      	b.n	8018aa8 <RegionCommonComputeRxWindowParameters+0x78>
 8018a88:	7afb      	ldrb	r3, [r7, #11]
 8018a8a:	3b04      	subs	r3, #4
 8018a8c:	4619      	mov	r1, r3
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	fb03 f101 	mul.w	r1, r3, r1
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018a9a:	fb00 f303 	mul.w	r3, r0, r3
 8018a9e:	440b      	add	r3, r1
 8018aa0:	0059      	lsls	r1, r3, #1
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8018aa8:	429a      	cmp	r2, r3
 8018aaa:	bf38      	it	cc
 8018aac:	461a      	movcc	r2, r3
 8018aae:	69bb      	ldr	r3, [r7, #24]
 8018ab0:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	009b      	lsls	r3, r3, #2
 8018ab6:	4619      	mov	r1, r3
 8018ab8:	69bb      	ldr	r3, [r7, #24]
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	68fa      	ldr	r2, [r7, #12]
 8018abe:	fb02 f303 	mul.w	r3, r2, r3
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d007      	beq.n	8018ad6 <RegionCommonComputeRxWindowParameters+0xa6>
 8018ac6:	69bb      	ldr	r3, [r7, #24]
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	68fa      	ldr	r2, [r7, #12]
 8018acc:	fb02 f303 	mul.w	r3, r2, r3
 8018ad0:	3301      	adds	r3, #1
 8018ad2:	085b      	lsrs	r3, r3, #1
 8018ad4:	e005      	b.n	8018ae2 <RegionCommonComputeRxWindowParameters+0xb2>
 8018ad6:	69bb      	ldr	r3, [r7, #24]
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	68fa      	ldr	r2, [r7, #12]
 8018adc:	fb02 f303 	mul.w	r3, r2, r3
 8018ae0:	085b      	lsrs	r3, r3, #1
 8018ae2:	1acb      	subs	r3, r1, r3
 8018ae4:	683a      	ldr	r2, [r7, #0]
 8018ae6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018aea:	fb01 f202 	mul.w	r2, r1, r2
 8018aee:	1a9b      	subs	r3, r3, r2
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	dd27      	ble.n	8018b44 <RegionCommonComputeRxWindowParameters+0x114>
 8018af4:	68fb      	ldr	r3, [r7, #12]
 8018af6:	009b      	lsls	r3, r3, #2
 8018af8:	4619      	mov	r1, r3
 8018afa:	69bb      	ldr	r3, [r7, #24]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	68fa      	ldr	r2, [r7, #12]
 8018b00:	fb02 f303 	mul.w	r3, r2, r3
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d007      	beq.n	8018b18 <RegionCommonComputeRxWindowParameters+0xe8>
 8018b08:	69bb      	ldr	r3, [r7, #24]
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	68fa      	ldr	r2, [r7, #12]
 8018b0e:	fb02 f303 	mul.w	r3, r2, r3
 8018b12:	3301      	adds	r3, #1
 8018b14:	085b      	lsrs	r3, r3, #1
 8018b16:	e005      	b.n	8018b24 <RegionCommonComputeRxWindowParameters+0xf4>
 8018b18:	69bb      	ldr	r3, [r7, #24]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	68fa      	ldr	r2, [r7, #12]
 8018b1e:	fb02 f303 	mul.w	r3, r2, r3
 8018b22:	085b      	lsrs	r3, r3, #1
 8018b24:	1acb      	subs	r3, r1, r3
 8018b26:	683a      	ldr	r2, [r7, #0]
 8018b28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018b2c:	fb01 f202 	mul.w	r2, r1, r2
 8018b30:	1a9b      	subs	r3, r3, r2
 8018b32:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8018b36:	4a19      	ldr	r2, [pc, #100]	; (8018b9c <RegionCommonComputeRxWindowParameters+0x16c>)
 8018b38:	fb82 1203 	smull	r1, r2, r2, r3
 8018b3c:	1192      	asrs	r2, r2, #6
 8018b3e:	17db      	asrs	r3, r3, #31
 8018b40:	1ad3      	subs	r3, r2, r3
 8018b42:	e024      	b.n	8018b8e <RegionCommonComputeRxWindowParameters+0x15e>
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	009b      	lsls	r3, r3, #2
 8018b48:	4619      	mov	r1, r3
 8018b4a:	69bb      	ldr	r3, [r7, #24]
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	68fa      	ldr	r2, [r7, #12]
 8018b50:	fb02 f303 	mul.w	r3, r2, r3
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d007      	beq.n	8018b68 <RegionCommonComputeRxWindowParameters+0x138>
 8018b58:	69bb      	ldr	r3, [r7, #24]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	68fa      	ldr	r2, [r7, #12]
 8018b5e:	fb02 f303 	mul.w	r3, r2, r3
 8018b62:	3301      	adds	r3, #1
 8018b64:	085b      	lsrs	r3, r3, #1
 8018b66:	e005      	b.n	8018b74 <RegionCommonComputeRxWindowParameters+0x144>
 8018b68:	69bb      	ldr	r3, [r7, #24]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	68fa      	ldr	r2, [r7, #12]
 8018b6e:	fb02 f303 	mul.w	r3, r2, r3
 8018b72:	085b      	lsrs	r3, r3, #1
 8018b74:	1acb      	subs	r3, r1, r3
 8018b76:	683a      	ldr	r2, [r7, #0]
 8018b78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018b7c:	fb01 f202 	mul.w	r2, r1, r2
 8018b80:	1a9b      	subs	r3, r3, r2
 8018b82:	4a06      	ldr	r2, [pc, #24]	; (8018b9c <RegionCommonComputeRxWindowParameters+0x16c>)
 8018b84:	fb82 1203 	smull	r1, r2, r2, r3
 8018b88:	1192      	asrs	r2, r2, #6
 8018b8a:	17db      	asrs	r3, r3, #31
 8018b8c:	1ad3      	subs	r3, r2, r3
 8018b8e:	69fa      	ldr	r2, [r7, #28]
 8018b90:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8018b92:	bf00      	nop
 8018b94:	3714      	adds	r7, #20
 8018b96:	46bd      	mov	sp, r7
 8018b98:	bc80      	pop	{r7}
 8018b9a:	4770      	bx	lr
 8018b9c:	10624dd3 	.word	0x10624dd3

08018ba0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8018ba0:	b580      	push	{r7, lr}
 8018ba2:	b086      	sub	sp, #24
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	60b9      	str	r1, [r7, #8]
 8018baa:	607a      	str	r2, [r7, #4]
 8018bac:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018bae:	2300      	movs	r3, #0
 8018bb0:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8018bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018bb6:	005b      	lsls	r3, r3, #1
 8018bb8:	4618      	mov	r0, r3
 8018bba:	f7e8 f87f 	bl	8000cbc <__aeabi_ui2f>
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	4619      	mov	r1, r3
 8018bc2:	68b8      	ldr	r0, [r7, #8]
 8018bc4:	f7e7 ffc8 	bl	8000b58 <__aeabi_fsub>
 8018bc8:	4603      	mov	r3, r0
 8018bca:	6879      	ldr	r1, [r7, #4]
 8018bcc:	4618      	mov	r0, r3
 8018bce:	f7e7 ffc3 	bl	8000b58 <__aeabi_fsub>
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	f7e7 fc3b 	bl	8000450 <__aeabi_f2d>
 8018bda:	4602      	mov	r2, r0
 8018bdc:	460b      	mov	r3, r1
 8018bde:	4610      	mov	r0, r2
 8018be0:	4619      	mov	r1, r3
 8018be2:	f007 fab1 	bl	8020148 <floor>
 8018be6:	4602      	mov	r2, r0
 8018be8:	460b      	mov	r3, r1
 8018bea:	4610      	mov	r0, r2
 8018bec:	4619      	mov	r1, r3
 8018bee:	f7e7 ff37 	bl	8000a60 <__aeabi_d2iz>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8018bf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	3718      	adds	r7, #24
 8018bfe:	46bd      	mov	sp, r7
 8018c00:	bd80      	pop	{r7, pc}

08018c02 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8018c02:	b590      	push	{r4, r7, lr}
 8018c04:	b087      	sub	sp, #28
 8018c06:	af00      	add	r7, sp, #0
 8018c08:	60f8      	str	r0, [r7, #12]
 8018c0a:	60b9      	str	r1, [r7, #8]
 8018c0c:	607a      	str	r2, [r7, #4]
 8018c0e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8018c10:	2300      	movs	r3, #0
 8018c12:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8018c14:	2300      	movs	r3, #0
 8018c16:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018c18:	2300      	movs	r3, #0
 8018c1a:	757b      	strb	r3, [r7, #21]
 8018c1c:	2300      	movs	r3, #0
 8018c1e:	753b      	strb	r3, [r7, #20]
 8018c20:	e09c      	b.n	8018d5c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018c22:	2300      	movs	r3, #0
 8018c24:	74fb      	strb	r3, [r7, #19]
 8018c26:	e08f      	b.n	8018d48 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	685a      	ldr	r2, [r3, #4]
 8018c2c:	7d3b      	ldrb	r3, [r7, #20]
 8018c2e:	005b      	lsls	r3, r3, #1
 8018c30:	4413      	add	r3, r2
 8018c32:	881b      	ldrh	r3, [r3, #0]
 8018c34:	461a      	mov	r2, r3
 8018c36:	7cfb      	ldrb	r3, [r7, #19]
 8018c38:	fa42 f303 	asr.w	r3, r2, r3
 8018c3c:	f003 0301 	and.w	r3, r3, #1
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d07e      	beq.n	8018d42 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018c44:	68fb      	ldr	r3, [r7, #12]
 8018c46:	689a      	ldr	r2, [r3, #8]
 8018c48:	7d79      	ldrb	r1, [r7, #21]
 8018c4a:	7cfb      	ldrb	r3, [r7, #19]
 8018c4c:	440b      	add	r3, r1
 8018c4e:	4619      	mov	r1, r3
 8018c50:	460b      	mov	r3, r1
 8018c52:	005b      	lsls	r3, r3, #1
 8018c54:	440b      	add	r3, r1
 8018c56:	009b      	lsls	r3, r3, #2
 8018c58:	4413      	add	r3, r2
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d06b      	beq.n	8018d38 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	781b      	ldrb	r3, [r3, #0]
 8018c64:	f083 0301 	eor.w	r3, r3, #1
 8018c68:	b2db      	uxtb	r3, r3
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d011      	beq.n	8018c92 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d00d      	beq.n	8018c92 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	695a      	ldr	r2, [r3, #20]
 8018c7a:	7d3b      	ldrb	r3, [r7, #20]
 8018c7c:	005b      	lsls	r3, r3, #1
 8018c7e:	4413      	add	r3, r2
 8018c80:	881b      	ldrh	r3, [r3, #0]
 8018c82:	461a      	mov	r2, r3
 8018c84:	7cfb      	ldrb	r3, [r7, #19]
 8018c86:	fa42 f303 	asr.w	r3, r2, r3
 8018c8a:	f003 0301 	and.w	r3, r3, #1
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d054      	beq.n	8018d3c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	785b      	ldrb	r3, [r3, #1]
 8018c96:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	689a      	ldr	r2, [r3, #8]
 8018c9c:	7d79      	ldrb	r1, [r7, #21]
 8018c9e:	7cfb      	ldrb	r3, [r7, #19]
 8018ca0:	440b      	add	r3, r1
 8018ca2:	4619      	mov	r1, r3
 8018ca4:	460b      	mov	r3, r1
 8018ca6:	005b      	lsls	r3, r3, #1
 8018ca8:	440b      	add	r3, r1
 8018caa:	009b      	lsls	r3, r3, #2
 8018cac:	4413      	add	r3, r2
 8018cae:	7a1b      	ldrb	r3, [r3, #8]
 8018cb0:	f343 0303 	sbfx	r3, r3, #0, #4
 8018cb4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018cb6:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8018cb8:	68fb      	ldr	r3, [r7, #12]
 8018cba:	689a      	ldr	r2, [r3, #8]
 8018cbc:	7d79      	ldrb	r1, [r7, #21]
 8018cbe:	7cfb      	ldrb	r3, [r7, #19]
 8018cc0:	440b      	add	r3, r1
 8018cc2:	4619      	mov	r1, r3
 8018cc4:	460b      	mov	r3, r1
 8018cc6:	005b      	lsls	r3, r3, #1
 8018cc8:	440b      	add	r3, r1
 8018cca:	009b      	lsls	r3, r3, #2
 8018ccc:	4413      	add	r3, r2
 8018cce:	7a1b      	ldrb	r3, [r3, #8]
 8018cd0:	f343 1303 	sbfx	r3, r3, #4, #4
 8018cd4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018cd6:	461a      	mov	r2, r3
 8018cd8:	4621      	mov	r1, r4
 8018cda:	f7ff fbe8 	bl	80184ae <RegionCommonValueInRange>
 8018cde:	4603      	mov	r3, r0
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d02d      	beq.n	8018d40 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	68da      	ldr	r2, [r3, #12]
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	6899      	ldr	r1, [r3, #8]
 8018cec:	7d78      	ldrb	r0, [r7, #21]
 8018cee:	7cfb      	ldrb	r3, [r7, #19]
 8018cf0:	4403      	add	r3, r0
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	005b      	lsls	r3, r3, #1
 8018cf8:	4403      	add	r3, r0
 8018cfa:	009b      	lsls	r3, r3, #2
 8018cfc:	440b      	add	r3, r1
 8018cfe:	7a5b      	ldrb	r3, [r3, #9]
 8018d00:	4619      	mov	r1, r3
 8018d02:	460b      	mov	r3, r1
 8018d04:	005b      	lsls	r3, r3, #1
 8018d06:	440b      	add	r3, r1
 8018d08:	00db      	lsls	r3, r3, #3
 8018d0a:	4413      	add	r3, r2
 8018d0c:	7d1b      	ldrb	r3, [r3, #20]
 8018d0e:	f083 0301 	eor.w	r3, r3, #1
 8018d12:	b2db      	uxtb	r3, r3
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d003      	beq.n	8018d20 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8018d18:	7dbb      	ldrb	r3, [r7, #22]
 8018d1a:	3301      	adds	r3, #1
 8018d1c:	75bb      	strb	r3, [r7, #22]
                    continue;
 8018d1e:	e010      	b.n	8018d42 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8018d20:	7dfb      	ldrb	r3, [r7, #23]
 8018d22:	1c5a      	adds	r2, r3, #1
 8018d24:	75fa      	strb	r2, [r7, #23]
 8018d26:	461a      	mov	r2, r3
 8018d28:	68bb      	ldr	r3, [r7, #8]
 8018d2a:	4413      	add	r3, r2
 8018d2c:	7d79      	ldrb	r1, [r7, #21]
 8018d2e:	7cfa      	ldrb	r2, [r7, #19]
 8018d30:	440a      	add	r2, r1
 8018d32:	b2d2      	uxtb	r2, r2
 8018d34:	701a      	strb	r2, [r3, #0]
 8018d36:	e004      	b.n	8018d42 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018d38:	bf00      	nop
 8018d3a:	e002      	b.n	8018d42 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8018d3c:	bf00      	nop
 8018d3e:	e000      	b.n	8018d42 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018d40:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8018d42:	7cfb      	ldrb	r3, [r7, #19]
 8018d44:	3301      	adds	r3, #1
 8018d46:	74fb      	strb	r3, [r7, #19]
 8018d48:	7cfb      	ldrb	r3, [r7, #19]
 8018d4a:	2b0f      	cmp	r3, #15
 8018d4c:	f67f af6c 	bls.w	8018c28 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018d50:	7d7b      	ldrb	r3, [r7, #21]
 8018d52:	3310      	adds	r3, #16
 8018d54:	757b      	strb	r3, [r7, #21]
 8018d56:	7d3b      	ldrb	r3, [r7, #20]
 8018d58:	3301      	adds	r3, #1
 8018d5a:	753b      	strb	r3, [r7, #20]
 8018d5c:	7d7b      	ldrb	r3, [r7, #21]
 8018d5e:	b29a      	uxth	r2, r3
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	8a1b      	ldrh	r3, [r3, #16]
 8018d64:	429a      	cmp	r2, r3
 8018d66:	f4ff af5c 	bcc.w	8018c22 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	7dfa      	ldrb	r2, [r7, #23]
 8018d6e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8018d70:	683b      	ldr	r3, [r7, #0]
 8018d72:	7dba      	ldrb	r2, [r7, #22]
 8018d74:	701a      	strb	r2, [r3, #0]
}
 8018d76:	bf00      	nop
 8018d78:	371c      	adds	r7, #28
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	bd90      	pop	{r4, r7, pc}

08018d7e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8018d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d80:	b08b      	sub	sp, #44	; 0x2c
 8018d82:	af04      	add	r7, sp, #16
 8018d84:	60f8      	str	r0, [r7, #12]
 8018d86:	60b9      	str	r1, [r7, #8]
 8018d88:	607a      	str	r2, [r7, #4]
 8018d8a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	685b      	ldr	r3, [r3, #4]
 8018d90:	4618      	mov	r0, r3
 8018d92:	f006 fe81 	bl	801fa98 <UTIL_TIMER_GetElapsedTime>
 8018d96:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8018d98:	68fb      	ldr	r3, [r7, #12]
 8018d9a:	681a      	ldr	r2, [r3, #0]
 8018d9c:	697b      	ldr	r3, [r7, #20]
 8018d9e:	1ad2      	subs	r2, r2, r3
 8018da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018da2:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8018da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018da6:	2201      	movs	r2, #1
 8018da8:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8018daa:	683b      	ldr	r3, [r7, #0]
 8018dac:	2200      	movs	r2, #0
 8018dae:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	685b      	ldr	r3, [r3, #4]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d004      	beq.n	8018dc2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018dbc:	697a      	ldr	r2, [r7, #20]
 8018dbe:	429a      	cmp	r2, r3
 8018dc0:	d32b      	bcc.n	8018e1a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8018dc2:	68bb      	ldr	r3, [r7, #8]
 8018dc4:	2200      	movs	r2, #0
 8018dc6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	69db      	ldr	r3, [r3, #28]
 8018dcc:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018dd2:	68dd      	ldr	r5, [r3, #12]
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	7a5e      	ldrb	r6, [r3, #9]
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	f893 c008 	ldrb.w	ip, [r3, #8]
 8018dde:	68fb      	ldr	r3, [r7, #12]
 8018de0:	7d1b      	ldrb	r3, [r3, #20]
 8018de2:	68fa      	ldr	r2, [r7, #12]
 8018de4:	6992      	ldr	r2, [r2, #24]
 8018de6:	9203      	str	r2, [sp, #12]
 8018de8:	68fa      	ldr	r2, [r7, #12]
 8018dea:	f10d 0e04 	add.w	lr, sp, #4
 8018dee:	320c      	adds	r2, #12
 8018df0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018df4:	e88e 0003 	stmia.w	lr, {r0, r1}
 8018df8:	9300      	str	r3, [sp, #0]
 8018dfa:	4663      	mov	r3, ip
 8018dfc:	4632      	mov	r2, r6
 8018dfe:	4629      	mov	r1, r5
 8018e00:	4620      	mov	r0, r4
 8018e02:	f7ff fc25 	bl	8018650 <RegionCommonUpdateBandTimeOff>
 8018e06:	4602      	mov	r2, r0
 8018e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e0a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	69d8      	ldr	r0, [r3, #28]
 8018e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e12:	683a      	ldr	r2, [r7, #0]
 8018e14:	6879      	ldr	r1, [r7, #4]
 8018e16:	f7ff fef4 	bl	8018c02 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8018e1a:	683b      	ldr	r3, [r7, #0]
 8018e1c:	781b      	ldrb	r3, [r3, #0]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d004      	beq.n	8018e2c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8018e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e24:	2200      	movs	r2, #0
 8018e26:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018e28:	2300      	movs	r3, #0
 8018e2a:	e006      	b.n	8018e3a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8018e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e2e:	781b      	ldrb	r3, [r3, #0]
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d001      	beq.n	8018e38 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018e34:	230b      	movs	r3, #11
 8018e36:	e000      	b.n	8018e3a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018e38:	230c      	movs	r3, #12
    }
}
 8018e3a:	4618      	mov	r0, r3
 8018e3c:	371c      	adds	r7, #28
 8018e3e:	46bd      	mov	sp, r7
 8018e40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018e42 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8018e42:	b5b0      	push	{r4, r5, r7, lr}
 8018e44:	b086      	sub	sp, #24
 8018e46:	af02      	add	r7, sp, #8
 8018e48:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	781b      	ldrb	r3, [r3, #0]
 8018e4e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	f993 2000 	ldrsb.w	r2, [r3]
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018e5c:	429a      	cmp	r2, r3
 8018e5e:	d103      	bne.n	8018e68 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018e66:	e026      	b.n	8018eb6 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8018e68:	7bfb      	ldrb	r3, [r7, #15]
 8018e6a:	3b01      	subs	r3, #1
 8018e6c:	b2db      	uxtb	r3, r3
 8018e6e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8018e76:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018e7a:	429a      	cmp	r2, r3
 8018e7c:	d019      	beq.n	8018eb2 <RegionCommonGetNextLowerTxDr+0x70>
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	78d8      	ldrb	r0, [r3, #3]
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	6859      	ldr	r1, [r3, #4]
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018e92:	687a      	ldr	r2, [r7, #4]
 8018e94:	6892      	ldr	r2, [r2, #8]
 8018e96:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8018e9a:	9201      	str	r2, [sp, #4]
 8018e9c:	9300      	str	r3, [sp, #0]
 8018e9e:	462b      	mov	r3, r5
 8018ea0:	4622      	mov	r2, r4
 8018ea2:	f7ff fa92 	bl	80183ca <RegionCommonChanVerifyDr>
 8018ea6:	4603      	mov	r3, r0
 8018ea8:	f083 0301 	eor.w	r3, r3, #1
 8018eac:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d1da      	bne.n	8018e68 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8018eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	3710      	adds	r7, #16
 8018eba:	46bd      	mov	sp, r7
 8018ebc:	bdb0      	pop	{r4, r5, r7, pc}

08018ebe <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8018ebe:	b480      	push	{r7}
 8018ec0:	b083      	sub	sp, #12
 8018ec2:	af00      	add	r7, sp, #0
 8018ec4:	4603      	mov	r3, r0
 8018ec6:	460a      	mov	r2, r1
 8018ec8:	71fb      	strb	r3, [r7, #7]
 8018eca:	4613      	mov	r3, r2
 8018ecc:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8018ece:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ed6:	4293      	cmp	r3, r2
 8018ed8:	bfb8      	it	lt
 8018eda:	4613      	movlt	r3, r2
 8018edc:	b25b      	sxtb	r3, r3
}
 8018ede:	4618      	mov	r0, r3
 8018ee0:	370c      	adds	r7, #12
 8018ee2:	46bd      	mov	sp, r7
 8018ee4:	bc80      	pop	{r7}
 8018ee6:	4770      	bx	lr

08018ee8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8018ee8:	b480      	push	{r7}
 8018eea:	b083      	sub	sp, #12
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
 8018ef0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	009b      	lsls	r3, r3, #2
 8018ef6:	683a      	ldr	r2, [r7, #0]
 8018ef8:	4413      	add	r3, r2
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	4a07      	ldr	r2, [pc, #28]	; (8018f1c <RegionCommonGetBandwidth+0x34>)
 8018efe:	4293      	cmp	r3, r2
 8018f00:	d004      	beq.n	8018f0c <RegionCommonGetBandwidth+0x24>
 8018f02:	4a07      	ldr	r2, [pc, #28]	; (8018f20 <RegionCommonGetBandwidth+0x38>)
 8018f04:	4293      	cmp	r3, r2
 8018f06:	d003      	beq.n	8018f10 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8018f08:	2300      	movs	r3, #0
 8018f0a:	e002      	b.n	8018f12 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8018f0c:	2301      	movs	r3, #1
 8018f0e:	e000      	b.n	8018f12 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8018f10:	2302      	movs	r3, #2
    }
}
 8018f12:	4618      	mov	r0, r3
 8018f14:	370c      	adds	r7, #12
 8018f16:	46bd      	mov	sp, r7
 8018f18:	bc80      	pop	{r7}
 8018f1a:	4770      	bx	lr
 8018f1c:	0003d090 	.word	0x0003d090
 8018f20:	0007a120 	.word	0x0007a120

08018f24 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b086      	sub	sp, #24
 8018f28:	af04      	add	r7, sp, #16
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	6039      	str	r1, [r7, #0]
 8018f2e:	71fb      	strb	r3, [r7, #7]
 8018f30:	4613      	mov	r3, r2
 8018f32:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018f34:	79fb      	ldrb	r3, [r7, #7]
 8018f36:	2b05      	cmp	r3, #5
 8018f38:	d810      	bhi.n	8018f5c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8018f3a:	79fb      	ldrb	r3, [r7, #7]
 8018f3c:	4a0f      	ldr	r2, [pc, #60]	; (8018f7c <RegionCommonRxConfigPrint+0x58>)
 8018f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018f42:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018f46:	9202      	str	r2, [sp, #8]
 8018f48:	683a      	ldr	r2, [r7, #0]
 8018f4a:	9201      	str	r2, [sp, #4]
 8018f4c:	9300      	str	r3, [sp, #0]
 8018f4e:	4b0c      	ldr	r3, [pc, #48]	; (8018f80 <RegionCommonRxConfigPrint+0x5c>)
 8018f50:	2201      	movs	r2, #1
 8018f52:	2100      	movs	r1, #0
 8018f54:	2002      	movs	r0, #2
 8018f56:	f006 fe7d 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8018f5a:	e00a      	b.n	8018f72 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018f5c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018f60:	9301      	str	r3, [sp, #4]
 8018f62:	683b      	ldr	r3, [r7, #0]
 8018f64:	9300      	str	r3, [sp, #0]
 8018f66:	4b07      	ldr	r3, [pc, #28]	; (8018f84 <RegionCommonRxConfigPrint+0x60>)
 8018f68:	2201      	movs	r2, #1
 8018f6a:	2100      	movs	r1, #0
 8018f6c:	2002      	movs	r0, #2
 8018f6e:	f006 fe71 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
}
 8018f72:	bf00      	nop
 8018f74:	3708      	adds	r7, #8
 8018f76:	46bd      	mov	sp, r7
 8018f78:	bd80      	pop	{r7, pc}
 8018f7a:	bf00      	nop
 8018f7c:	20000118 	.word	0x20000118
 8018f80:	080218b0 	.word	0x080218b0
 8018f84:	080218d0 	.word	0x080218d0

08018f88 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	b084      	sub	sp, #16
 8018f8c:	af02      	add	r7, sp, #8
 8018f8e:	6078      	str	r0, [r7, #4]
 8018f90:	460b      	mov	r3, r1
 8018f92:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018f98:	9301      	str	r3, [sp, #4]
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	9300      	str	r3, [sp, #0]
 8018f9e:	4b05      	ldr	r3, [pc, #20]	; (8018fb4 <RegionCommonTxConfigPrint+0x2c>)
 8018fa0:	2201      	movs	r2, #1
 8018fa2:	2100      	movs	r1, #0
 8018fa4:	2002      	movs	r0, #2
 8018fa6:	f006 fe55 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
}
 8018faa:	bf00      	nop
 8018fac:	3708      	adds	r7, #8
 8018fae:	46bd      	mov	sp, r7
 8018fb0:	bd80      	pop	{r7, pc}
 8018fb2:	bf00      	nop
 8018fb4:	080218ec 	.word	0x080218ec

08018fb8 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8018fb8:	b580      	push	{r7, lr}
 8018fba:	b082      	sub	sp, #8
 8018fbc:	af00      	add	r7, sp, #0
 8018fbe:	6078      	str	r0, [r7, #4]
 8018fc0:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8018fc2:	4b2d      	ldr	r3, [pc, #180]	; (8019078 <VerifyRfFreq+0xc0>)
 8018fc4:	6a1b      	ldr	r3, [r3, #32]
 8018fc6:	6878      	ldr	r0, [r7, #4]
 8018fc8:	4798      	blx	r3
 8018fca:	4603      	mov	r3, r0
 8018fcc:	f083 0301 	eor.w	r3, r3, #1
 8018fd0:	b2db      	uxtb	r3, r3
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d001      	beq.n	8018fda <VerifyRfFreq+0x22>
    {
        return false;
 8018fd6:	2300      	movs	r3, #0
 8018fd8:	e04a      	b.n	8019070 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	4a27      	ldr	r2, [pc, #156]	; (801907c <VerifyRfFreq+0xc4>)
 8018fde:	4293      	cmp	r3, r2
 8018fe0:	d307      	bcc.n	8018ff2 <VerifyRfFreq+0x3a>
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	4a26      	ldr	r2, [pc, #152]	; (8019080 <VerifyRfFreq+0xc8>)
 8018fe6:	4293      	cmp	r3, r2
 8018fe8:	d803      	bhi.n	8018ff2 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8018fea:	683b      	ldr	r3, [r7, #0]
 8018fec:	2202      	movs	r2, #2
 8018fee:	701a      	strb	r2, [r3, #0]
 8018ff0:	e03d      	b.n	801906e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	4a22      	ldr	r2, [pc, #136]	; (8019080 <VerifyRfFreq+0xc8>)
 8018ff6:	4293      	cmp	r3, r2
 8018ff8:	d907      	bls.n	801900a <VerifyRfFreq+0x52>
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	4a21      	ldr	r2, [pc, #132]	; (8019084 <VerifyRfFreq+0xcc>)
 8018ffe:	4293      	cmp	r3, r2
 8019000:	d803      	bhi.n	801900a <VerifyRfFreq+0x52>
    {
        *band = 0;
 8019002:	683b      	ldr	r3, [r7, #0]
 8019004:	2200      	movs	r2, #0
 8019006:	701a      	strb	r2, [r3, #0]
 8019008:	e031      	b.n	801906e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	4a1d      	ldr	r2, [pc, #116]	; (8019084 <VerifyRfFreq+0xcc>)
 801900e:	4293      	cmp	r3, r2
 8019010:	d907      	bls.n	8019022 <VerifyRfFreq+0x6a>
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	4a1c      	ldr	r2, [pc, #112]	; (8019088 <VerifyRfFreq+0xd0>)
 8019016:	4293      	cmp	r3, r2
 8019018:	d803      	bhi.n	8019022 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801901a:	683b      	ldr	r3, [r7, #0]
 801901c:	2201      	movs	r2, #1
 801901e:	701a      	strb	r2, [r3, #0]
 8019020:	e025      	b.n	801906e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	4a19      	ldr	r2, [pc, #100]	; (801908c <VerifyRfFreq+0xd4>)
 8019026:	4293      	cmp	r3, r2
 8019028:	d907      	bls.n	801903a <VerifyRfFreq+0x82>
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	4a18      	ldr	r2, [pc, #96]	; (8019090 <VerifyRfFreq+0xd8>)
 801902e:	4293      	cmp	r3, r2
 8019030:	d803      	bhi.n	801903a <VerifyRfFreq+0x82>
    {
        *band = 5;
 8019032:	683b      	ldr	r3, [r7, #0]
 8019034:	2205      	movs	r2, #5
 8019036:	701a      	strb	r2, [r3, #0]
 8019038:	e019      	b.n	801906e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	4a15      	ldr	r2, [pc, #84]	; (8019094 <VerifyRfFreq+0xdc>)
 801903e:	4293      	cmp	r3, r2
 8019040:	d907      	bls.n	8019052 <VerifyRfFreq+0x9a>
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	4a14      	ldr	r2, [pc, #80]	; (8019098 <VerifyRfFreq+0xe0>)
 8019046:	4293      	cmp	r3, r2
 8019048:	d803      	bhi.n	8019052 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801904a:	683b      	ldr	r3, [r7, #0]
 801904c:	2203      	movs	r2, #3
 801904e:	701a      	strb	r2, [r3, #0]
 8019050:	e00d      	b.n	801906e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	4a11      	ldr	r2, [pc, #68]	; (801909c <VerifyRfFreq+0xe4>)
 8019056:	4293      	cmp	r3, r2
 8019058:	d307      	bcc.n	801906a <VerifyRfFreq+0xb2>
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	4a10      	ldr	r2, [pc, #64]	; (80190a0 <VerifyRfFreq+0xe8>)
 801905e:	4293      	cmp	r3, r2
 8019060:	d803      	bhi.n	801906a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8019062:	683b      	ldr	r3, [r7, #0]
 8019064:	2204      	movs	r2, #4
 8019066:	701a      	strb	r2, [r3, #0]
 8019068:	e001      	b.n	801906e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801906a:	2300      	movs	r3, #0
 801906c:	e000      	b.n	8019070 <VerifyRfFreq+0xb8>
    }
    return true;
 801906e:	2301      	movs	r3, #1
}
 8019070:	4618      	mov	r0, r3
 8019072:	3708      	adds	r7, #8
 8019074:	46bd      	mov	sp, r7
 8019076:	bd80      	pop	{r7, pc}
 8019078:	08021f7c 	.word	0x08021f7c
 801907c:	337055c0 	.word	0x337055c0
 8019080:	338eda3f 	.word	0x338eda3f
 8019084:	33bca100 	.word	0x33bca100
 8019088:	33c5c8c0 	.word	0x33c5c8c0
 801908c:	33c74f5f 	.word	0x33c74f5f
 8019090:	33cef080 	.word	0x33cef080
 8019094:	33d1fdbf 	.word	0x33d1fdbf
 8019098:	33d5ce50 	.word	0x33d5ce50
 801909c:	33d691a0 	.word	0x33d691a0
 80190a0:	33db2580 	.word	0x33db2580

080190a4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80190a4:	b590      	push	{r4, r7, lr}
 80190a6:	b08b      	sub	sp, #44	; 0x2c
 80190a8:	af04      	add	r7, sp, #16
 80190aa:	4603      	mov	r3, r0
 80190ac:	460a      	mov	r2, r1
 80190ae:	71fb      	strb	r3, [r7, #7]
 80190b0:	4613      	mov	r3, r2
 80190b2:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80190b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190b8:	4a1f      	ldr	r2, [pc, #124]	; (8019138 <GetTimeOnAir+0x94>)
 80190ba:	5cd3      	ldrb	r3, [r2, r3]
 80190bc:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80190be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190c2:	491e      	ldr	r1, [pc, #120]	; (801913c <GetTimeOnAir+0x98>)
 80190c4:	4618      	mov	r0, r3
 80190c6:	f7ff ff0f 	bl	8018ee8 <RegionCommonGetBandwidth>
 80190ca:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80190cc:	2300      	movs	r3, #0
 80190ce:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80190d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190d4:	2b07      	cmp	r3, #7
 80190d6:	d118      	bne.n	801910a <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80190d8:	4b19      	ldr	r3, [pc, #100]	; (8019140 <GetTimeOnAir+0x9c>)
 80190da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80190dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80190e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80190e4:	fb02 f303 	mul.w	r3, r2, r3
 80190e8:	4619      	mov	r1, r3
 80190ea:	88bb      	ldrh	r3, [r7, #4]
 80190ec:	b2db      	uxtb	r3, r3
 80190ee:	2201      	movs	r2, #1
 80190f0:	9203      	str	r2, [sp, #12]
 80190f2:	9302      	str	r3, [sp, #8]
 80190f4:	2300      	movs	r3, #0
 80190f6:	9301      	str	r3, [sp, #4]
 80190f8:	2305      	movs	r3, #5
 80190fa:	9300      	str	r3, [sp, #0]
 80190fc:	2300      	movs	r3, #0
 80190fe:	460a      	mov	r2, r1
 8019100:	68f9      	ldr	r1, [r7, #12]
 8019102:	2000      	movs	r0, #0
 8019104:	47a0      	blx	r4
 8019106:	6178      	str	r0, [r7, #20]
 8019108:	e011      	b.n	801912e <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801910a:	4b0d      	ldr	r3, [pc, #52]	; (8019140 <GetTimeOnAir+0x9c>)
 801910c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801910e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019112:	88bb      	ldrh	r3, [r7, #4]
 8019114:	b2db      	uxtb	r3, r3
 8019116:	2101      	movs	r1, #1
 8019118:	9103      	str	r1, [sp, #12]
 801911a:	9302      	str	r3, [sp, #8]
 801911c:	2300      	movs	r3, #0
 801911e:	9301      	str	r3, [sp, #4]
 8019120:	2308      	movs	r3, #8
 8019122:	9300      	str	r3, [sp, #0]
 8019124:	2301      	movs	r3, #1
 8019126:	68f9      	ldr	r1, [r7, #12]
 8019128:	2001      	movs	r0, #1
 801912a:	47a0      	blx	r4
 801912c:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801912e:	697b      	ldr	r3, [r7, #20]
}
 8019130:	4618      	mov	r0, r3
 8019132:	371c      	adds	r7, #28
 8019134:	46bd      	mov	sp, r7
 8019136:	bd90      	pop	{r4, r7, pc}
 8019138:	08021ec0 	.word	0x08021ec0
 801913c:	08021ec8 	.word	0x08021ec8
 8019140:	08021f7c 	.word	0x08021f7c

08019144 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b088      	sub	sp, #32
 8019148:	af00      	add	r7, sp, #0
 801914a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801914c:	2300      	movs	r3, #0
 801914e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	781b      	ldrb	r3, [r3, #0]
 8019154:	3b01      	subs	r3, #1
 8019156:	2b37      	cmp	r3, #55	; 0x37
 8019158:	f200 8122 	bhi.w	80193a0 <RegionEU868GetPhyParam+0x25c>
 801915c:	a201      	add	r2, pc, #4	; (adr r2, 8019164 <RegionEU868GetPhyParam+0x20>)
 801915e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019162:	bf00      	nop
 8019164:	08019245 	.word	0x08019245
 8019168:	0801924b 	.word	0x0801924b
 801916c:	080193a1 	.word	0x080193a1
 8019170:	080193a1 	.word	0x080193a1
 8019174:	080193a1 	.word	0x080193a1
 8019178:	08019251 	.word	0x08019251
 801917c:	080193a1 	.word	0x080193a1
 8019180:	0801928b 	.word	0x0801928b
 8019184:	080193a1 	.word	0x080193a1
 8019188:	08019291 	.word	0x08019291
 801918c:	08019297 	.word	0x08019297
 8019190:	0801929d 	.word	0x0801929d
 8019194:	080192a3 	.word	0x080192a3
 8019198:	080192b3 	.word	0x080192b3
 801919c:	080192c3 	.word	0x080192c3
 80191a0:	080192c9 	.word	0x080192c9
 80191a4:	080192d1 	.word	0x080192d1
 80191a8:	080192d9 	.word	0x080192d9
 80191ac:	080192e1 	.word	0x080192e1
 80191b0:	080192e9 	.word	0x080192e9
 80191b4:	080192f1 	.word	0x080192f1
 80191b8:	08019305 	.word	0x08019305
 80191bc:	0801930b 	.word	0x0801930b
 80191c0:	08019311 	.word	0x08019311
 80191c4:	08019317 	.word	0x08019317
 80191c8:	08019323 	.word	0x08019323
 80191cc:	0801932f 	.word	0x0801932f
 80191d0:	08019335 	.word	0x08019335
 80191d4:	0801933d 	.word	0x0801933d
 80191d8:	08019343 	.word	0x08019343
 80191dc:	08019349 	.word	0x08019349
 80191e0:	08019351 	.word	0x08019351
 80191e4:	08019257 	.word	0x08019257
 80191e8:	080193a1 	.word	0x080193a1
 80191ec:	080193a1 	.word	0x080193a1
 80191f0:	080193a1 	.word	0x080193a1
 80191f4:	080193a1 	.word	0x080193a1
 80191f8:	080193a1 	.word	0x080193a1
 80191fc:	080193a1 	.word	0x080193a1
 8019200:	080193a1 	.word	0x080193a1
 8019204:	080193a1 	.word	0x080193a1
 8019208:	080193a1 	.word	0x080193a1
 801920c:	080193a1 	.word	0x080193a1
 8019210:	080193a1 	.word	0x080193a1
 8019214:	080193a1 	.word	0x080193a1
 8019218:	080193a1 	.word	0x080193a1
 801921c:	08019357 	.word	0x08019357
 8019220:	0801935d 	.word	0x0801935d
 8019224:	0801936b 	.word	0x0801936b
 8019228:	080193a1 	.word	0x080193a1
 801922c:	080193a1 	.word	0x080193a1
 8019230:	08019371 	.word	0x08019371
 8019234:	08019377 	.word	0x08019377
 8019238:	080193a1 	.word	0x080193a1
 801923c:	0801937d 	.word	0x0801937d
 8019240:	0801938d 	.word	0x0801938d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8019244:	2300      	movs	r3, #0
 8019246:	61bb      	str	r3, [r7, #24]
            break;
 8019248:	e0ab      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801924a:	2300      	movs	r3, #0
 801924c:	61bb      	str	r3, [r7, #24]
            break;
 801924e:	e0a8      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8019250:	2300      	movs	r3, #0
 8019252:	61bb      	str	r3, [r7, #24]
            break;
 8019254:	e0a5      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801925c:	733b      	strb	r3, [r7, #12]
 801925e:	2307      	movs	r3, #7
 8019260:	737b      	strb	r3, [r7, #13]
 8019262:	2300      	movs	r3, #0
 8019264:	73bb      	strb	r3, [r7, #14]
 8019266:	2310      	movs	r3, #16
 8019268:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801926a:	4b51      	ldr	r3, [pc, #324]	; (80193b0 <RegionEU868GetPhyParam+0x26c>)
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8019272:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8019274:	4b4e      	ldr	r3, [pc, #312]	; (80193b0 <RegionEU868GetPhyParam+0x26c>)
 8019276:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8019278:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801927a:	f107 030c 	add.w	r3, r7, #12
 801927e:	4618      	mov	r0, r3
 8019280:	f7ff fddf 	bl	8018e42 <RegionCommonGetNextLowerTxDr>
 8019284:	4603      	mov	r3, r0
 8019286:	61bb      	str	r3, [r7, #24]
            break;
 8019288:	e08b      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801928a:	2300      	movs	r3, #0
 801928c:	61bb      	str	r3, [r7, #24]
            break;
 801928e:	e088      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8019290:	2300      	movs	r3, #0
 8019292:	61bb      	str	r3, [r7, #24]
            break;
 8019294:	e085      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8019296:	2340      	movs	r3, #64	; 0x40
 8019298:	61bb      	str	r3, [r7, #24]
            break;
 801929a:	e082      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801929c:	2320      	movs	r3, #32
 801929e:	61bb      	str	r3, [r7, #24]
            break;
 80192a0:	e07f      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80192a8:	461a      	mov	r2, r3
 80192aa:	4b42      	ldr	r3, [pc, #264]	; (80193b4 <RegionEU868GetPhyParam+0x270>)
 80192ac:	5c9b      	ldrb	r3, [r3, r2]
 80192ae:	61bb      	str	r3, [r7, #24]
            break;
 80192b0:	e077      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80192b8:	461a      	mov	r2, r3
 80192ba:	4b3f      	ldr	r3, [pc, #252]	; (80193b8 <RegionEU868GetPhyParam+0x274>)
 80192bc:	5c9b      	ldrb	r3, [r3, r2]
 80192be:	61bb      	str	r3, [r7, #24]
            break;
 80192c0:	e06f      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80192c2:	2301      	movs	r3, #1
 80192c4:	61bb      	str	r3, [r7, #24]
            break;
 80192c6:	e06c      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80192c8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80192cc:	61bb      	str	r3, [r7, #24]
            break;
 80192ce:	e068      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80192d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80192d4:	61bb      	str	r3, [r7, #24]
            break;
 80192d6:	e064      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80192d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80192dc:	61bb      	str	r3, [r7, #24]
            break;
 80192de:	e060      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80192e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80192e4:	61bb      	str	r3, [r7, #24]
            break;
 80192e6:	e05c      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80192e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80192ec:	61bb      	str	r3, [r7, #24]
            break;
 80192ee:	e058      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 80192f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80192f4:	4831      	ldr	r0, [pc, #196]	; (80193bc <RegionEU868GetPhyParam+0x278>)
 80192f6:	f002 fa2d 	bl	801b754 <randr>
 80192fa:	4603      	mov	r3, r0
 80192fc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8019300:	61bb      	str	r3, [r7, #24]
            break;
 8019302:	e04e      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8019304:	2300      	movs	r3, #0
 8019306:	61bb      	str	r3, [r7, #24]
            break;
 8019308:	e04b      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801930a:	4b2d      	ldr	r3, [pc, #180]	; (80193c0 <RegionEU868GetPhyParam+0x27c>)
 801930c:	61bb      	str	r3, [r7, #24]
            break;
 801930e:	e048      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8019310:	2300      	movs	r3, #0
 8019312:	61bb      	str	r3, [r7, #24]
            break;
 8019314:	e045      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8019316:	4b26      	ldr	r3, [pc, #152]	; (80193b0 <RegionEU868GetPhyParam+0x26c>)
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801931e:	61bb      	str	r3, [r7, #24]
            break;
 8019320:	e03f      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8019322:	4b23      	ldr	r3, [pc, #140]	; (80193b0 <RegionEU868GetPhyParam+0x26c>)
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801932a:	61bb      	str	r3, [r7, #24]
            break;
 801932c:	e039      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801932e:	2310      	movs	r3, #16
 8019330:	61bb      	str	r3, [r7, #24]
            break;
 8019332:	e036      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8019334:	4b1e      	ldr	r3, [pc, #120]	; (80193b0 <RegionEU868GetPhyParam+0x26c>)
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	61bb      	str	r3, [r7, #24]
            break;
 801933a:	e032      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 801933c:	2300      	movs	r3, #0
 801933e:	61bb      	str	r3, [r7, #24]
            break;
 8019340:	e02f      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8019342:	2300      	movs	r3, #0
 8019344:	61bb      	str	r3, [r7, #24]
            break;
 8019346:	e02c      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8019348:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801934c:	61bb      	str	r3, [r7, #24]
            break;
 801934e:	e028      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8019350:	4b1c      	ldr	r3, [pc, #112]	; (80193c4 <RegionEU868GetPhyParam+0x280>)
 8019352:	61bb      	str	r3, [r7, #24]
            break;
 8019354:	e025      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8019356:	4b1a      	ldr	r3, [pc, #104]	; (80193c0 <RegionEU868GetPhyParam+0x27c>)
 8019358:	61bb      	str	r3, [r7, #24]
            break;
 801935a:	e022      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801935c:	2311      	movs	r3, #17
 801935e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8019360:	2301      	movs	r3, #1
 8019362:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8019364:	2300      	movs	r3, #0
 8019366:	76bb      	strb	r3, [r7, #26]
            break;
 8019368:	e01b      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801936a:	2303      	movs	r3, #3
 801936c:	61bb      	str	r3, [r7, #24]
            break;
 801936e:	e018      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8019370:	4b13      	ldr	r3, [pc, #76]	; (80193c0 <RegionEU868GetPhyParam+0x27c>)
 8019372:	61bb      	str	r3, [r7, #24]
            break;
 8019374:	e015      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8019376:	2303      	movs	r3, #3
 8019378:	61bb      	str	r3, [r7, #24]
            break;
 801937a:	e012      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019382:	461a      	mov	r2, r3
 8019384:	4b10      	ldr	r3, [pc, #64]	; (80193c8 <RegionEU868GetPhyParam+0x284>)
 8019386:	5c9b      	ldrb	r3, [r3, r2]
 8019388:	61bb      	str	r3, [r7, #24]
            break;
 801938a:	e00a      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019392:	490e      	ldr	r1, [pc, #56]	; (80193cc <RegionEU868GetPhyParam+0x288>)
 8019394:	4618      	mov	r0, r3
 8019396:	f7ff fda7 	bl	8018ee8 <RegionCommonGetBandwidth>
 801939a:	4603      	mov	r3, r0
 801939c:	61bb      	str	r3, [r7, #24]
            break;
 801939e:	e000      	b.n	80193a2 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 80193a0:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80193a2:	69bb      	ldr	r3, [r7, #24]
 80193a4:	61fb      	str	r3, [r7, #28]
 80193a6:	69fb      	ldr	r3, [r7, #28]
}
 80193a8:	4618      	mov	r0, r3
 80193aa:	3720      	adds	r7, #32
 80193ac:	46bd      	mov	sp, r7
 80193ae:	bd80      	pop	{r7, pc}
 80193b0:	20001ac8 	.word	0x20001ac8
 80193b4:	08021ee8 	.word	0x08021ee8
 80193b8:	08021ef0 	.word	0x08021ef0
 80193bc:	fffffc18 	.word	0xfffffc18
 80193c0:	33d3e608 	.word	0x33d3e608
 80193c4:	4009999a 	.word	0x4009999a
 80193c8:	08021ec0 	.word	0x08021ec0
 80193cc:	08021ec8 	.word	0x08021ec8

080193d0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80193d0:	b590      	push	{r4, r7, lr}
 80193d2:	b085      	sub	sp, #20
 80193d4:	af02      	add	r7, sp, #8
 80193d6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80193d8:	4b11      	ldr	r3, [pc, #68]	; (8019420 <RegionEU868SetBandTxDone+0x50>)
 80193da:	681a      	ldr	r2, [r3, #0]
 80193dc:	4b11      	ldr	r3, [pc, #68]	; (8019424 <RegionEU868SetBandTxDone+0x54>)
 80193de:	6819      	ldr	r1, [r3, #0]
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	781b      	ldrb	r3, [r3, #0]
 80193e4:	4618      	mov	r0, r3
 80193e6:	4603      	mov	r3, r0
 80193e8:	005b      	lsls	r3, r3, #1
 80193ea:	4403      	add	r3, r0
 80193ec:	009b      	lsls	r3, r3, #2
 80193ee:	440b      	add	r3, r1
 80193f0:	3309      	adds	r3, #9
 80193f2:	781b      	ldrb	r3, [r3, #0]
 80193f4:	4619      	mov	r1, r3
 80193f6:	460b      	mov	r3, r1
 80193f8:	005b      	lsls	r3, r3, #1
 80193fa:	440b      	add	r3, r1
 80193fc:	00db      	lsls	r3, r3, #3
 80193fe:	18d0      	adds	r0, r2, r3
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	6899      	ldr	r1, [r3, #8]
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	785c      	ldrb	r4, [r3, #1]
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	691a      	ldr	r2, [r3, #16]
 801940c:	9200      	str	r2, [sp, #0]
 801940e:	68db      	ldr	r3, [r3, #12]
 8019410:	4622      	mov	r2, r4
 8019412:	f7ff f8ef 	bl	80185f4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8019416:	bf00      	nop
 8019418:	370c      	adds	r7, #12
 801941a:	46bd      	mov	sp, r7
 801941c:	bd90      	pop	{r4, r7, pc}
 801941e:	bf00      	nop
 8019420:	20001acc 	.word	0x20001acc
 8019424:	20001ac8 	.word	0x20001ac8

08019428 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8019428:	b580      	push	{r7, lr}
 801942a:	b0b0      	sub	sp, #192	; 0xc0
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8019430:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019434:	2290      	movs	r2, #144	; 0x90
 8019436:	2100      	movs	r1, #0
 8019438:	4618      	mov	r0, r3
 801943a:	f007 fe1f 	bl	802107c <memset>
 801943e:	2364      	movs	r3, #100	; 0x64
 8019440:	863b      	strh	r3, [r7, #48]	; 0x30
 8019442:	2364      	movs	r3, #100	; 0x64
 8019444:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8019448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801944c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8019450:	230a      	movs	r3, #10
 8019452:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8019456:	2364      	movs	r3, #100	; 0x64
 8019458:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 801945c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019460:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	7b1b      	ldrb	r3, [r3, #12]
 8019468:	2b02      	cmp	r3, #2
 801946a:	d05d      	beq.n	8019528 <RegionEU868InitDefaults+0x100>
 801946c:	2b02      	cmp	r3, #2
 801946e:	dc6a      	bgt.n	8019546 <RegionEU868InitDefaults+0x11e>
 8019470:	2b00      	cmp	r3, #0
 8019472:	d002      	beq.n	801947a <RegionEU868InitDefaults+0x52>
 8019474:	2b01      	cmp	r3, #1
 8019476:	d03e      	beq.n	80194f6 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8019478:	e065      	b.n	8019546 <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	2b00      	cmp	r3, #0
 8019480:	d062      	beq.n	8019548 <RegionEU868InitDefaults+0x120>
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	685b      	ldr	r3, [r3, #4]
 8019486:	2b00      	cmp	r3, #0
 8019488:	d05e      	beq.n	8019548 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	685b      	ldr	r3, [r3, #4]
 801948e:	4a30      	ldr	r2, [pc, #192]	; (8019550 <RegionEU868InitDefaults+0x128>)
 8019490:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	689b      	ldr	r3, [r3, #8]
 8019496:	4a2f      	ldr	r2, [pc, #188]	; (8019554 <RegionEU868InitDefaults+0x12c>)
 8019498:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801949a:	4b2e      	ldr	r3, [pc, #184]	; (8019554 <RegionEU868InitDefaults+0x12c>)
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80194a2:	2290      	movs	r2, #144	; 0x90
 80194a4:	4618      	mov	r0, r3
 80194a6:	f002 f96c 	bl	801b782 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80194aa:	4b29      	ldr	r3, [pc, #164]	; (8019550 <RegionEU868InitDefaults+0x128>)
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	4a2a      	ldr	r2, [pc, #168]	; (8019558 <RegionEU868InitDefaults+0x130>)
 80194b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80194b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80194b6:	4b26      	ldr	r3, [pc, #152]	; (8019550 <RegionEU868InitDefaults+0x128>)
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	4a28      	ldr	r2, [pc, #160]	; (801955c <RegionEU868InitDefaults+0x134>)
 80194bc:	330c      	adds	r3, #12
 80194be:	ca07      	ldmia	r2, {r0, r1, r2}
 80194c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80194c4:	4b22      	ldr	r3, [pc, #136]	; (8019550 <RegionEU868InitDefaults+0x128>)
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	4a25      	ldr	r2, [pc, #148]	; (8019560 <RegionEU868InitDefaults+0x138>)
 80194ca:	3318      	adds	r3, #24
 80194cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80194ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80194d2:	4b1f      	ldr	r3, [pc, #124]	; (8019550 <RegionEU868InitDefaults+0x128>)
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	2207      	movs	r2, #7
 80194d8:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80194dc:	4b1c      	ldr	r3, [pc, #112]	; (8019550 <RegionEU868InitDefaults+0x128>)
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80194e4:	4b1a      	ldr	r3, [pc, #104]	; (8019550 <RegionEU868InitDefaults+0x128>)
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80194ec:	2201      	movs	r2, #1
 80194ee:	4619      	mov	r1, r3
 80194f0:	f7ff f85a 	bl	80185a8 <RegionCommonChanMaskCopy>
 80194f4:	e028      	b.n	8019548 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80194f6:	4b16      	ldr	r3, [pc, #88]	; (8019550 <RegionEU868InitDefaults+0x128>)
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	2200      	movs	r2, #0
 80194fc:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80194fe:	4b14      	ldr	r3, [pc, #80]	; (8019550 <RegionEU868InitDefaults+0x128>)
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	2200      	movs	r2, #0
 8019504:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8019506:	4b12      	ldr	r3, [pc, #72]	; (8019550 <RegionEU868InitDefaults+0x128>)
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	2200      	movs	r2, #0
 801950c:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801950e:	4b10      	ldr	r3, [pc, #64]	; (8019550 <RegionEU868InitDefaults+0x128>)
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8019516:	4b0e      	ldr	r3, [pc, #56]	; (8019550 <RegionEU868InitDefaults+0x128>)
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801951e:	2201      	movs	r2, #1
 8019520:	4619      	mov	r1, r3
 8019522:	f7ff f841 	bl	80185a8 <RegionCommonChanMaskCopy>
            break;
 8019526:	e00f      	b.n	8019548 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8019528:	4b09      	ldr	r3, [pc, #36]	; (8019550 <RegionEU868InitDefaults+0x128>)
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8019530:	4b07      	ldr	r3, [pc, #28]	; (8019550 <RegionEU868InitDefaults+0x128>)
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8019538:	4b05      	ldr	r3, [pc, #20]	; (8019550 <RegionEU868InitDefaults+0x128>)
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	430a      	orrs	r2, r1
 801953e:	b292      	uxth	r2, r2
 8019540:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8019544:	e000      	b.n	8019548 <RegionEU868InitDefaults+0x120>
            break;
 8019546:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8019548:	37c0      	adds	r7, #192	; 0xc0
 801954a:	46bd      	mov	sp, r7
 801954c:	bd80      	pop	{r7, pc}
 801954e:	bf00      	nop
 8019550:	20001ac8 	.word	0x20001ac8
 8019554:	20001acc 	.word	0x20001acc
 8019558:	08021908 	.word	0x08021908
 801955c:	08021914 	.word	0x08021914
 8019560:	08021920 	.word	0x08021920

08019564 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b084      	sub	sp, #16
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
 801956c:	460b      	mov	r3, r1
 801956e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8019570:	78fb      	ldrb	r3, [r7, #3]
 8019572:	2b0f      	cmp	r3, #15
 8019574:	d86c      	bhi.n	8019650 <RegionEU868Verify+0xec>
 8019576:	a201      	add	r2, pc, #4	; (adr r2, 801957c <RegionEU868Verify+0x18>)
 8019578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801957c:	080195bd 	.word	0x080195bd
 8019580:	08019651 	.word	0x08019651
 8019584:	08019651 	.word	0x08019651
 8019588:	08019651 	.word	0x08019651
 801958c:	08019651 	.word	0x08019651
 8019590:	080195d5 	.word	0x080195d5
 8019594:	080195f3 	.word	0x080195f3
 8019598:	08019611 	.word	0x08019611
 801959c:	08019651 	.word	0x08019651
 80195a0:	0801962f 	.word	0x0801962f
 80195a4:	0801962f 	.word	0x0801962f
 80195a8:	08019651 	.word	0x08019651
 80195ac:	08019651 	.word	0x08019651
 80195b0:	08019651 	.word	0x08019651
 80195b4:	08019651 	.word	0x08019651
 80195b8:	0801964d 	.word	0x0801964d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80195bc:	2300      	movs	r3, #0
 80195be:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	f107 020f 	add.w	r2, r7, #15
 80195c8:	4611      	mov	r1, r2
 80195ca:	4618      	mov	r0, r3
 80195cc:	f7ff fcf4 	bl	8018fb8 <VerifyRfFreq>
 80195d0:	4603      	mov	r3, r0
 80195d2:	e03e      	b.n	8019652 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	f993 3000 	ldrsb.w	r3, [r3]
 80195da:	2207      	movs	r2, #7
 80195dc:	2100      	movs	r1, #0
 80195de:	4618      	mov	r0, r3
 80195e0:	f7fe ff65 	bl	80184ae <RegionCommonValueInRange>
 80195e4:	4603      	mov	r3, r0
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	bf14      	ite	ne
 80195ea:	2301      	movne	r3, #1
 80195ec:	2300      	moveq	r3, #0
 80195ee:	b2db      	uxtb	r3, r3
 80195f0:	e02f      	b.n	8019652 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	f993 3000 	ldrsb.w	r3, [r3]
 80195f8:	2205      	movs	r2, #5
 80195fa:	2100      	movs	r1, #0
 80195fc:	4618      	mov	r0, r3
 80195fe:	f7fe ff56 	bl	80184ae <RegionCommonValueInRange>
 8019602:	4603      	mov	r3, r0
 8019604:	2b00      	cmp	r3, #0
 8019606:	bf14      	ite	ne
 8019608:	2301      	movne	r3, #1
 801960a:	2300      	moveq	r3, #0
 801960c:	b2db      	uxtb	r3, r3
 801960e:	e020      	b.n	8019652 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	f993 3000 	ldrsb.w	r3, [r3]
 8019616:	2207      	movs	r2, #7
 8019618:	2100      	movs	r1, #0
 801961a:	4618      	mov	r0, r3
 801961c:	f7fe ff47 	bl	80184ae <RegionCommonValueInRange>
 8019620:	4603      	mov	r3, r0
 8019622:	2b00      	cmp	r3, #0
 8019624:	bf14      	ite	ne
 8019626:	2301      	movne	r3, #1
 8019628:	2300      	moveq	r3, #0
 801962a:	b2db      	uxtb	r3, r3
 801962c:	e011      	b.n	8019652 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	f993 3000 	ldrsb.w	r3, [r3]
 8019634:	2207      	movs	r2, #7
 8019636:	2100      	movs	r1, #0
 8019638:	4618      	mov	r0, r3
 801963a:	f7fe ff38 	bl	80184ae <RegionCommonValueInRange>
 801963e:	4603      	mov	r3, r0
 8019640:	2b00      	cmp	r3, #0
 8019642:	bf14      	ite	ne
 8019644:	2301      	movne	r3, #1
 8019646:	2300      	moveq	r3, #0
 8019648:	b2db      	uxtb	r3, r3
 801964a:	e002      	b.n	8019652 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801964c:	2301      	movs	r3, #1
 801964e:	e000      	b.n	8019652 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8019650:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8019652:	4618      	mov	r0, r3
 8019654:	3710      	adds	r7, #16
 8019656:	46bd      	mov	sp, r7
 8019658:	bd80      	pop	{r7, pc}
 801965a:	bf00      	nop

0801965c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801965c:	b580      	push	{r7, lr}
 801965e:	b08a      	sub	sp, #40	; 0x28
 8019660:	af00      	add	r7, sp, #0
 8019662:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8019664:	2350      	movs	r3, #80	; 0x50
 8019666:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	7a1b      	ldrb	r3, [r3, #8]
 801966e:	2b10      	cmp	r3, #16
 8019670:	d162      	bne.n	8019738 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	685b      	ldr	r3, [r3, #4]
 8019676:	330f      	adds	r3, #15
 8019678:	781b      	ldrb	r3, [r3, #0]
 801967a:	2b00      	cmp	r3, #0
 801967c:	d15e      	bne.n	801973c <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801967e:	2300      	movs	r3, #0
 8019680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019684:	2303      	movs	r3, #3
 8019686:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801968a:	e050      	b.n	801972e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 801968c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019690:	2b07      	cmp	r3, #7
 8019692:	d824      	bhi.n	80196de <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	685a      	ldr	r2, [r3, #4]
 8019698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801969c:	4413      	add	r3, r2
 801969e:	781b      	ldrb	r3, [r3, #0]
 80196a0:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80196a2:	69ba      	ldr	r2, [r7, #24]
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	6859      	ldr	r1, [r3, #4]
 80196a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196ac:	3301      	adds	r3, #1
 80196ae:	440b      	add	r3, r1
 80196b0:	781b      	ldrb	r3, [r3, #0]
 80196b2:	021b      	lsls	r3, r3, #8
 80196b4:	4313      	orrs	r3, r2
 80196b6:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80196b8:	69ba      	ldr	r2, [r7, #24]
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	6859      	ldr	r1, [r3, #4]
 80196be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196c2:	3302      	adds	r3, #2
 80196c4:	440b      	add	r3, r1
 80196c6:	781b      	ldrb	r3, [r3, #0]
 80196c8:	041b      	lsls	r3, r3, #16
 80196ca:	4313      	orrs	r3, r2
 80196cc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80196ce:	69bb      	ldr	r3, [r7, #24]
 80196d0:	2264      	movs	r2, #100	; 0x64
 80196d2:	fb02 f303 	mul.w	r3, r2, r3
 80196d6:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80196d8:	2300      	movs	r3, #0
 80196da:	61fb      	str	r3, [r7, #28]
 80196dc:	e006      	b.n	80196ec <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80196de:	2300      	movs	r3, #0
 80196e0:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80196e2:	2300      	movs	r3, #0
 80196e4:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80196e8:	2300      	movs	r3, #0
 80196ea:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80196ec:	69bb      	ldr	r3, [r7, #24]
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d00b      	beq.n	801970a <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80196f2:	f107 0318 	add.w	r3, r7, #24
 80196f6:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80196f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80196fc:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80196fe:	f107 0310 	add.w	r3, r7, #16
 8019702:	4618      	mov	r0, r3
 8019704:	f000 fd14 	bl	801a130 <RegionEU868ChannelAdd>
 8019708:	e007      	b.n	801971a <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801970a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801970e:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8019710:	f107 030c 	add.w	r3, r7, #12
 8019714:	4618      	mov	r0, r3
 8019716:	f000 fdad 	bl	801a274 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801971a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801971e:	3303      	adds	r3, #3
 8019720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019724:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019728:	3301      	adds	r3, #1
 801972a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801972e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019732:	2b0f      	cmp	r3, #15
 8019734:	d9aa      	bls.n	801968c <RegionEU868ApplyCFList+0x30>
 8019736:	e002      	b.n	801973e <RegionEU868ApplyCFList+0xe2>
        return;
 8019738:	bf00      	nop
 801973a:	e000      	b.n	801973e <RegionEU868ApplyCFList+0xe2>
        return;
 801973c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801973e:	3728      	adds	r7, #40	; 0x28
 8019740:	46bd      	mov	sp, r7
 8019742:	bd80      	pop	{r7, pc}

08019744 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8019744:	b580      	push	{r7, lr}
 8019746:	b082      	sub	sp, #8
 8019748:	af00      	add	r7, sp, #0
 801974a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	791b      	ldrb	r3, [r3, #4]
 8019750:	2b00      	cmp	r3, #0
 8019752:	d002      	beq.n	801975a <RegionEU868ChanMaskSet+0x16>
 8019754:	2b01      	cmp	r3, #1
 8019756:	d00b      	beq.n	8019770 <RegionEU868ChanMaskSet+0x2c>
 8019758:	e015      	b.n	8019786 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801975a:	4b0e      	ldr	r3, [pc, #56]	; (8019794 <RegionEU868ChanMaskSet+0x50>)
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	2201      	movs	r2, #1
 8019768:	4619      	mov	r1, r3
 801976a:	f7fe ff1d 	bl	80185a8 <RegionCommonChanMaskCopy>
            break;
 801976e:	e00c      	b.n	801978a <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019770:	4b08      	ldr	r3, [pc, #32]	; (8019794 <RegionEU868ChanMaskSet+0x50>)
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	2201      	movs	r2, #1
 801977e:	4619      	mov	r1, r3
 8019780:	f7fe ff12 	bl	80185a8 <RegionCommonChanMaskCopy>
            break;
 8019784:	e001      	b.n	801978a <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8019786:	2300      	movs	r3, #0
 8019788:	e000      	b.n	801978c <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801978a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801978c:	4618      	mov	r0, r3
 801978e:	3708      	adds	r7, #8
 8019790:	46bd      	mov	sp, r7
 8019792:	bd80      	pop	{r7, pc}
 8019794:	20001ac8 	.word	0x20001ac8

08019798 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019798:	b580      	push	{r7, lr}
 801979a:	b088      	sub	sp, #32
 801979c:	af02      	add	r7, sp, #8
 801979e:	60ba      	str	r2, [r7, #8]
 80197a0:	607b      	str	r3, [r7, #4]
 80197a2:	4603      	mov	r3, r0
 80197a4:	73fb      	strb	r3, [r7, #15]
 80197a6:	460b      	mov	r3, r1
 80197a8:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80197aa:	2300      	movs	r3, #0
 80197ac:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80197ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80197b2:	2b07      	cmp	r3, #7
 80197b4:	bfa8      	it	ge
 80197b6:	2307      	movge	r3, #7
 80197b8:	b25a      	sxtb	r2, r3
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80197c4:	491e      	ldr	r1, [pc, #120]	; (8019840 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80197c6:	4618      	mov	r0, r3
 80197c8:	f7ff fb8e 	bl	8018ee8 <RegionCommonGetBandwidth>
 80197cc:	4603      	mov	r3, r0
 80197ce:	b2da      	uxtb	r2, r3
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80197da:	2b07      	cmp	r3, #7
 80197dc:	d10a      	bne.n	80197f4 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80197e4:	461a      	mov	r2, r3
 80197e6:	4b17      	ldr	r3, [pc, #92]	; (8019844 <RegionEU868ComputeRxWindowParameters+0xac>)
 80197e8:	5c9b      	ldrb	r3, [r3, r2]
 80197ea:	4618      	mov	r0, r3
 80197ec:	f7ff f910 	bl	8018a10 <RegionCommonComputeSymbolTimeFsk>
 80197f0:	6178      	str	r0, [r7, #20]
 80197f2:	e011      	b.n	8019818 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80197fa:	461a      	mov	r2, r3
 80197fc:	4b11      	ldr	r3, [pc, #68]	; (8019844 <RegionEU868ComputeRxWindowParameters+0xac>)
 80197fe:	5c9a      	ldrb	r2, [r3, r2]
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019806:	4619      	mov	r1, r3
 8019808:	4b0d      	ldr	r3, [pc, #52]	; (8019840 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801980a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801980e:	4619      	mov	r1, r3
 8019810:	4610      	mov	r0, r2
 8019812:	f7ff f8e7 	bl	80189e4 <RegionCommonComputeSymbolTimeLoRa>
 8019816:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8019818:	4b0b      	ldr	r3, [pc, #44]	; (8019848 <RegionEU868ComputeRxWindowParameters+0xb0>)
 801981a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801981c:	4798      	blx	r3
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	3308      	adds	r3, #8
 8019822:	687a      	ldr	r2, [r7, #4]
 8019824:	320c      	adds	r2, #12
 8019826:	7bb9      	ldrb	r1, [r7, #14]
 8019828:	9201      	str	r2, [sp, #4]
 801982a:	9300      	str	r3, [sp, #0]
 801982c:	4603      	mov	r3, r0
 801982e:	68ba      	ldr	r2, [r7, #8]
 8019830:	6978      	ldr	r0, [r7, #20]
 8019832:	f7ff f8fd 	bl	8018a30 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8019836:	bf00      	nop
 8019838:	3718      	adds	r7, #24
 801983a:	46bd      	mov	sp, r7
 801983c:	bd80      	pop	{r7, pc}
 801983e:	bf00      	nop
 8019840:	08021ec8 	.word	0x08021ec8
 8019844:	08021ec0 	.word	0x08021ec0
 8019848:	08021f7c 	.word	0x08021f7c

0801984c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801984c:	b5b0      	push	{r4, r5, r7, lr}
 801984e:	b090      	sub	sp, #64	; 0x40
 8019850:	af0a      	add	r7, sp, #40	; 0x28
 8019852:	6078      	str	r0, [r7, #4]
 8019854:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	785b      	ldrb	r3, [r3, #1]
 801985a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801985c:	2300      	movs	r3, #0
 801985e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8019860:	2300      	movs	r3, #0
 8019862:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	685b      	ldr	r3, [r3, #4]
 8019868:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801986a:	4b5a      	ldr	r3, [pc, #360]	; (80199d4 <RegionEU868RxConfig+0x188>)
 801986c:	685b      	ldr	r3, [r3, #4]
 801986e:	4798      	blx	r3
 8019870:	4603      	mov	r3, r0
 8019872:	2b00      	cmp	r3, #0
 8019874:	d001      	beq.n	801987a <RegionEU868RxConfig+0x2e>
    {
        return false;
 8019876:	2300      	movs	r3, #0
 8019878:	e0a8      	b.n	80199cc <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	7cdb      	ldrb	r3, [r3, #19]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d126      	bne.n	80198d0 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8019882:	4b55      	ldr	r3, [pc, #340]	; (80199d8 <RegionEU868RxConfig+0x18c>)
 8019884:	681a      	ldr	r2, [r3, #0]
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	781b      	ldrb	r3, [r3, #0]
 801988a:	4619      	mov	r1, r3
 801988c:	460b      	mov	r3, r1
 801988e:	005b      	lsls	r3, r3, #1
 8019890:	440b      	add	r3, r1
 8019892:	009b      	lsls	r3, r3, #2
 8019894:	4413      	add	r3, r2
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801989a:	4b4f      	ldr	r3, [pc, #316]	; (80199d8 <RegionEU868RxConfig+0x18c>)
 801989c:	681a      	ldr	r2, [r3, #0]
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	781b      	ldrb	r3, [r3, #0]
 80198a2:	4619      	mov	r1, r3
 80198a4:	460b      	mov	r3, r1
 80198a6:	005b      	lsls	r3, r3, #1
 80198a8:	440b      	add	r3, r1
 80198aa:	009b      	lsls	r3, r3, #2
 80198ac:	4413      	add	r3, r2
 80198ae:	3304      	adds	r3, #4
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d00c      	beq.n	80198d0 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80198b6:	4b48      	ldr	r3, [pc, #288]	; (80199d8 <RegionEU868RxConfig+0x18c>)
 80198b8:	681a      	ldr	r2, [r3, #0]
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	781b      	ldrb	r3, [r3, #0]
 80198be:	4619      	mov	r1, r3
 80198c0:	460b      	mov	r3, r1
 80198c2:	005b      	lsls	r3, r3, #1
 80198c4:	440b      	add	r3, r1
 80198c6:	009b      	lsls	r3, r3, #2
 80198c8:	4413      	add	r3, r2
 80198ca:	3304      	adds	r3, #4
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80198d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80198d4:	4a41      	ldr	r2, [pc, #260]	; (80199dc <RegionEU868RxConfig+0x190>)
 80198d6:	5cd3      	ldrb	r3, [r2, r3]
 80198d8:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80198da:	4b3e      	ldr	r3, [pc, #248]	; (80199d4 <RegionEU868RxConfig+0x188>)
 80198dc:	68db      	ldr	r3, [r3, #12]
 80198de:	6938      	ldr	r0, [r7, #16]
 80198e0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80198e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80198e6:	2b07      	cmp	r3, #7
 80198e8:	d128      	bne.n	801993c <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80198ea:	2300      	movs	r3, #0
 80198ec:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80198ee:	4b39      	ldr	r3, [pc, #228]	; (80199d4 <RegionEU868RxConfig+0x188>)
 80198f0:	699c      	ldr	r4, [r3, #24]
 80198f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80198f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80198fa:	fb02 f303 	mul.w	r3, r2, r3
 80198fe:	4619      	mov	r1, r3
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	689b      	ldr	r3, [r3, #8]
 8019904:	b29b      	uxth	r3, r3
 8019906:	687a      	ldr	r2, [r7, #4]
 8019908:	7c92      	ldrb	r2, [r2, #18]
 801990a:	7df8      	ldrb	r0, [r7, #23]
 801990c:	9209      	str	r2, [sp, #36]	; 0x24
 801990e:	2200      	movs	r2, #0
 8019910:	9208      	str	r2, [sp, #32]
 8019912:	2200      	movs	r2, #0
 8019914:	9207      	str	r2, [sp, #28]
 8019916:	2200      	movs	r2, #0
 8019918:	9206      	str	r2, [sp, #24]
 801991a:	2201      	movs	r2, #1
 801991c:	9205      	str	r2, [sp, #20]
 801991e:	2200      	movs	r2, #0
 8019920:	9204      	str	r2, [sp, #16]
 8019922:	2200      	movs	r2, #0
 8019924:	9203      	str	r2, [sp, #12]
 8019926:	9302      	str	r3, [sp, #8]
 8019928:	2305      	movs	r3, #5
 801992a:	9301      	str	r3, [sp, #4]
 801992c:	4b2c      	ldr	r3, [pc, #176]	; (80199e0 <RegionEU868RxConfig+0x194>)
 801992e:	9300      	str	r3, [sp, #0]
 8019930:	2300      	movs	r3, #0
 8019932:	460a      	mov	r2, r1
 8019934:	f24c 3150 	movw	r1, #50000	; 0xc350
 8019938:	47a0      	blx	r4
 801993a:	e024      	b.n	8019986 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801993c:	2301      	movs	r3, #1
 801993e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8019940:	4b24      	ldr	r3, [pc, #144]	; (80199d4 <RegionEU868RxConfig+0x188>)
 8019942:	699c      	ldr	r4, [r3, #24]
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	789b      	ldrb	r3, [r3, #2]
 8019948:	461d      	mov	r5, r3
 801994a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	689b      	ldr	r3, [r3, #8]
 8019952:	b29b      	uxth	r3, r3
 8019954:	687a      	ldr	r2, [r7, #4]
 8019956:	7c92      	ldrb	r2, [r2, #18]
 8019958:	7df8      	ldrb	r0, [r7, #23]
 801995a:	9209      	str	r2, [sp, #36]	; 0x24
 801995c:	2201      	movs	r2, #1
 801995e:	9208      	str	r2, [sp, #32]
 8019960:	2200      	movs	r2, #0
 8019962:	9207      	str	r2, [sp, #28]
 8019964:	2200      	movs	r2, #0
 8019966:	9206      	str	r2, [sp, #24]
 8019968:	2200      	movs	r2, #0
 801996a:	9205      	str	r2, [sp, #20]
 801996c:	2200      	movs	r2, #0
 801996e:	9204      	str	r2, [sp, #16]
 8019970:	2200      	movs	r2, #0
 8019972:	9203      	str	r2, [sp, #12]
 8019974:	9302      	str	r3, [sp, #8]
 8019976:	2308      	movs	r3, #8
 8019978:	9301      	str	r3, [sp, #4]
 801997a:	2300      	movs	r3, #0
 801997c:	9300      	str	r3, [sp, #0]
 801997e:	2301      	movs	r3, #1
 8019980:	460a      	mov	r2, r1
 8019982:	4629      	mov	r1, r5
 8019984:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	7c5b      	ldrb	r3, [r3, #17]
 801998a:	2b00      	cmp	r3, #0
 801998c:	d005      	beq.n	801999a <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801998e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019992:	4a14      	ldr	r2, [pc, #80]	; (80199e4 <RegionEU868RxConfig+0x198>)
 8019994:	5cd3      	ldrb	r3, [r2, r3]
 8019996:	75bb      	strb	r3, [r7, #22]
 8019998:	e004      	b.n	80199a4 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801999a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801999e:	4a12      	ldr	r2, [pc, #72]	; (80199e8 <RegionEU868RxConfig+0x19c>)
 80199a0:	5cd3      	ldrb	r3, [r2, r3]
 80199a2:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80199a4:	4b0b      	ldr	r3, [pc, #44]	; (80199d4 <RegionEU868RxConfig+0x188>)
 80199a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80199a8:	7dba      	ldrb	r2, [r7, #22]
 80199aa:	320d      	adds	r2, #13
 80199ac:	b2d1      	uxtb	r1, r2
 80199ae:	7dfa      	ldrb	r2, [r7, #23]
 80199b0:	4610      	mov	r0, r2
 80199b2:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	7cdb      	ldrb	r3, [r3, #19]
 80199b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80199bc:	6939      	ldr	r1, [r7, #16]
 80199be:	4618      	mov	r0, r3
 80199c0:	f7ff fab0 	bl	8018f24 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80199c4:	683b      	ldr	r3, [r7, #0]
 80199c6:	7bfa      	ldrb	r2, [r7, #15]
 80199c8:	701a      	strb	r2, [r3, #0]
    return true;
 80199ca:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80199cc:	4618      	mov	r0, r3
 80199ce:	3718      	adds	r7, #24
 80199d0:	46bd      	mov	sp, r7
 80199d2:	bdb0      	pop	{r4, r5, r7, pc}
 80199d4:	08021f7c 	.word	0x08021f7c
 80199d8:	20001ac8 	.word	0x20001ac8
 80199dc:	08021ec0 	.word	0x08021ec0
 80199e0:	00014585 	.word	0x00014585
 80199e4:	08021ef0 	.word	0x08021ef0
 80199e8:	08021ee8 	.word	0x08021ee8

080199ec <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80199ec:	b590      	push	{r4, r7, lr}
 80199ee:	b093      	sub	sp, #76	; 0x4c
 80199f0:	af0a      	add	r7, sp, #40	; 0x28
 80199f2:	60f8      	str	r0, [r7, #12]
 80199f4:	60b9      	str	r1, [r7, #8]
 80199f6:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80199fe:	461a      	mov	r2, r3
 8019a00:	4b5d      	ldr	r3, [pc, #372]	; (8019b78 <RegionEU868TxConfig+0x18c>)
 8019a02:	5c9b      	ldrb	r3, [r3, r2]
 8019a04:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8019a06:	68fb      	ldr	r3, [r7, #12]
 8019a08:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019a0c:	4b5b      	ldr	r3, [pc, #364]	; (8019b7c <RegionEU868TxConfig+0x190>)
 8019a0e:	681a      	ldr	r2, [r3, #0]
 8019a10:	4b5b      	ldr	r3, [pc, #364]	; (8019b80 <RegionEU868TxConfig+0x194>)
 8019a12:	6819      	ldr	r1, [r3, #0]
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	781b      	ldrb	r3, [r3, #0]
 8019a18:	461c      	mov	r4, r3
 8019a1a:	4623      	mov	r3, r4
 8019a1c:	005b      	lsls	r3, r3, #1
 8019a1e:	4423      	add	r3, r4
 8019a20:	009b      	lsls	r3, r3, #2
 8019a22:	440b      	add	r3, r1
 8019a24:	3309      	adds	r3, #9
 8019a26:	781b      	ldrb	r3, [r3, #0]
 8019a28:	4619      	mov	r1, r3
 8019a2a:	460b      	mov	r3, r1
 8019a2c:	005b      	lsls	r3, r3, #1
 8019a2e:	440b      	add	r3, r1
 8019a30:	00db      	lsls	r3, r3, #3
 8019a32:	4413      	add	r3, r2
 8019a34:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8019a38:	4619      	mov	r1, r3
 8019a3a:	f7ff fa40 	bl	8018ebe <RegionCommonLimitTxPower>
 8019a3e:	4603      	mov	r3, r0
 8019a40:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019a48:	494e      	ldr	r1, [pc, #312]	; (8019b84 <RegionEU868TxConfig+0x198>)
 8019a4a:	4618      	mov	r0, r3
 8019a4c:	f7ff fa4c 	bl	8018ee8 <RegionCommonGetBandwidth>
 8019a50:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8019a52:	2300      	movs	r3, #0
 8019a54:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	6859      	ldr	r1, [r3, #4]
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	689a      	ldr	r2, [r3, #8]
 8019a5e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8019a62:	4618      	mov	r0, r3
 8019a64:	f7ff f89c 	bl	8018ba0 <RegionCommonComputeTxPower>
 8019a68:	4603      	mov	r3, r0
 8019a6a:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8019a6c:	4b46      	ldr	r3, [pc, #280]	; (8019b88 <RegionEU868TxConfig+0x19c>)
 8019a6e:	68da      	ldr	r2, [r3, #12]
 8019a70:	4b43      	ldr	r3, [pc, #268]	; (8019b80 <RegionEU868TxConfig+0x194>)
 8019a72:	6819      	ldr	r1, [r3, #0]
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	781b      	ldrb	r3, [r3, #0]
 8019a78:	4618      	mov	r0, r3
 8019a7a:	4603      	mov	r3, r0
 8019a7c:	005b      	lsls	r3, r3, #1
 8019a7e:	4403      	add	r3, r0
 8019a80:	009b      	lsls	r3, r3, #2
 8019a82:	440b      	add	r3, r1
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	4618      	mov	r0, r3
 8019a88:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019a90:	2b07      	cmp	r3, #7
 8019a92:	d124      	bne.n	8019ade <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8019a94:	2300      	movs	r3, #0
 8019a96:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8019a98:	4b3b      	ldr	r3, [pc, #236]	; (8019b88 <RegionEU868TxConfig+0x19c>)
 8019a9a:	69dc      	ldr	r4, [r3, #28]
 8019a9c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019aa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019aa4:	fb02 f303 	mul.w	r3, r2, r3
 8019aa8:	461a      	mov	r2, r3
 8019aaa:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019aae:	7ff8      	ldrb	r0, [r7, #31]
 8019ab0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8019ab4:	9308      	str	r3, [sp, #32]
 8019ab6:	2300      	movs	r3, #0
 8019ab8:	9307      	str	r3, [sp, #28]
 8019aba:	2300      	movs	r3, #0
 8019abc:	9306      	str	r3, [sp, #24]
 8019abe:	2300      	movs	r3, #0
 8019ac0:	9305      	str	r3, [sp, #20]
 8019ac2:	2301      	movs	r3, #1
 8019ac4:	9304      	str	r3, [sp, #16]
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	9303      	str	r3, [sp, #12]
 8019aca:	2305      	movs	r3, #5
 8019acc:	9302      	str	r3, [sp, #8]
 8019ace:	2300      	movs	r3, #0
 8019ad0:	9301      	str	r3, [sp, #4]
 8019ad2:	9200      	str	r2, [sp, #0]
 8019ad4:	69bb      	ldr	r3, [r7, #24]
 8019ad6:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8019ada:	47a0      	blx	r4
 8019adc:	e01d      	b.n	8019b1a <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8019ade:	2301      	movs	r3, #1
 8019ae0:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8019ae2:	4b29      	ldr	r3, [pc, #164]	; (8019b88 <RegionEU868TxConfig+0x19c>)
 8019ae4:	69dc      	ldr	r4, [r3, #28]
 8019ae6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019aea:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019aee:	7ff8      	ldrb	r0, [r7, #31]
 8019af0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8019af4:	9208      	str	r2, [sp, #32]
 8019af6:	2200      	movs	r2, #0
 8019af8:	9207      	str	r2, [sp, #28]
 8019afa:	2200      	movs	r2, #0
 8019afc:	9206      	str	r2, [sp, #24]
 8019afe:	2200      	movs	r2, #0
 8019b00:	9205      	str	r2, [sp, #20]
 8019b02:	2201      	movs	r2, #1
 8019b04:	9204      	str	r2, [sp, #16]
 8019b06:	2200      	movs	r2, #0
 8019b08:	9203      	str	r2, [sp, #12]
 8019b0a:	2208      	movs	r2, #8
 8019b0c:	9202      	str	r2, [sp, #8]
 8019b0e:	2201      	movs	r2, #1
 8019b10:	9201      	str	r2, [sp, #4]
 8019b12:	9300      	str	r3, [sp, #0]
 8019b14:	69bb      	ldr	r3, [r7, #24]
 8019b16:	2200      	movs	r2, #0
 8019b18:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8019b1a:	4b19      	ldr	r3, [pc, #100]	; (8019b80 <RegionEU868TxConfig+0x194>)
 8019b1c:	681a      	ldr	r2, [r3, #0]
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	781b      	ldrb	r3, [r3, #0]
 8019b22:	4619      	mov	r1, r3
 8019b24:	460b      	mov	r3, r1
 8019b26:	005b      	lsls	r3, r3, #1
 8019b28:	440b      	add	r3, r1
 8019b2a:	009b      	lsls	r3, r3, #2
 8019b2c:	4413      	add	r3, r2
 8019b2e:	681a      	ldr	r2, [r3, #0]
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019b36:	4619      	mov	r1, r3
 8019b38:	4610      	mov	r0, r2
 8019b3a:	f7ff fa25 	bl	8018f88 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	899b      	ldrh	r3, [r3, #12]
 8019b48:	4619      	mov	r1, r3
 8019b4a:	4610      	mov	r0, r2
 8019b4c:	f7ff faaa 	bl	80190a4 <GetTimeOnAir>
 8019b50:	4602      	mov	r2, r0
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8019b56:	4b0c      	ldr	r3, [pc, #48]	; (8019b88 <RegionEU868TxConfig+0x19c>)
 8019b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019b5a:	68fa      	ldr	r2, [r7, #12]
 8019b5c:	8992      	ldrh	r2, [r2, #12]
 8019b5e:	b2d1      	uxtb	r1, r2
 8019b60:	7ffa      	ldrb	r2, [r7, #31]
 8019b62:	4610      	mov	r0, r2
 8019b64:	4798      	blx	r3

    *txPower = txPowerLimited;
 8019b66:	68bb      	ldr	r3, [r7, #8]
 8019b68:	7f7a      	ldrb	r2, [r7, #29]
 8019b6a:	701a      	strb	r2, [r3, #0]
    return true;
 8019b6c:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019b6e:	4618      	mov	r0, r3
 8019b70:	3724      	adds	r7, #36	; 0x24
 8019b72:	46bd      	mov	sp, r7
 8019b74:	bd90      	pop	{r4, r7, pc}
 8019b76:	bf00      	nop
 8019b78:	08021ec0 	.word	0x08021ec0
 8019b7c:	20001acc 	.word	0x20001acc
 8019b80:	20001ac8 	.word	0x20001ac8
 8019b84:	08021ec8 	.word	0x08021ec8
 8019b88:	08021f7c 	.word	0x08021f7c

08019b8c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019b8c:	b590      	push	{r4, r7, lr}
 8019b8e:	b093      	sub	sp, #76	; 0x4c
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	60f8      	str	r0, [r7, #12]
 8019b94:	60b9      	str	r1, [r7, #8]
 8019b96:	607a      	str	r2, [r7, #4]
 8019b98:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8019b9a:	2307      	movs	r3, #7
 8019b9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019ba0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019ba4:	2200      	movs	r2, #0
 8019ba6:	601a      	str	r2, [r3, #0]
 8019ba8:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8019baa:	2300      	movs	r3, #0
 8019bac:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8019bb0:	2300      	movs	r3, #0
 8019bb2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019bba:	e085      	b.n	8019cc8 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	685a      	ldr	r2, [r3, #4]
 8019bc0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8019bc4:	4413      	add	r3, r2
 8019bc6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8019bca:	4611      	mov	r1, r2
 8019bcc:	4618      	mov	r0, r3
 8019bce:	f7fe fe2f 	bl	8018830 <RegionCommonParseLinkAdrReq>
 8019bd2:	4603      	mov	r3, r0
 8019bd4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8019bd8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d07b      	beq.n	8019cd8 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8019be0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019be4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019be8:	4413      	add	r3, r2
 8019bea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8019bee:	2307      	movs	r3, #7
 8019bf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8019bf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019bf8:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8019bfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d109      	bne.n	8019c16 <RegionEU868LinkAdrReq+0x8a>
 8019c02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d106      	bne.n	8019c16 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8019c08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019c0c:	f023 0301 	bic.w	r3, r3, #1
 8019c10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019c14:	e058      	b.n	8019cc8 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019c16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d003      	beq.n	8019c26 <RegionEU868LinkAdrReq+0x9a>
 8019c1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019c22:	2b05      	cmp	r3, #5
 8019c24:	d903      	bls.n	8019c2e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8019c26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019c2a:	2b06      	cmp	r3, #6
 8019c2c:	d906      	bls.n	8019c3c <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8019c2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019c32:	f023 0301 	bic.w	r3, r3, #1
 8019c36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019c3a:	e045      	b.n	8019cc8 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019c3c:	2300      	movs	r3, #0
 8019c3e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019c42:	e03d      	b.n	8019cc0 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8019c44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019c48:	2b06      	cmp	r3, #6
 8019c4a:	d118      	bne.n	8019c7e <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8019c4c:	4b5f      	ldr	r3, [pc, #380]	; (8019dcc <RegionEU868LinkAdrReq+0x240>)
 8019c4e:	6819      	ldr	r1, [r3, #0]
 8019c50:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019c54:	4613      	mov	r3, r2
 8019c56:	005b      	lsls	r3, r3, #1
 8019c58:	4413      	add	r3, r2
 8019c5a:	009b      	lsls	r3, r3, #2
 8019c5c:	440b      	add	r3, r1
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d028      	beq.n	8019cb6 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8019c64:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019c68:	2201      	movs	r2, #1
 8019c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8019c6e:	b21a      	sxth	r2, r3
 8019c70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019c72:	b21b      	sxth	r3, r3
 8019c74:	4313      	orrs	r3, r2
 8019c76:	b21b      	sxth	r3, r3
 8019c78:	b29b      	uxth	r3, r3
 8019c7a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8019c7c:	e01b      	b.n	8019cb6 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019c7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019c80:	461a      	mov	r2, r3
 8019c82:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019c86:	fa42 f303 	asr.w	r3, r2, r3
 8019c8a:	f003 0301 	and.w	r3, r3, #1
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d011      	beq.n	8019cb6 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8019c92:	4b4e      	ldr	r3, [pc, #312]	; (8019dcc <RegionEU868LinkAdrReq+0x240>)
 8019c94:	6819      	ldr	r1, [r3, #0]
 8019c96:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019c9a:	4613      	mov	r3, r2
 8019c9c:	005b      	lsls	r3, r3, #1
 8019c9e:	4413      	add	r3, r2
 8019ca0:	009b      	lsls	r3, r3, #2
 8019ca2:	440b      	add	r3, r1
 8019ca4:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d105      	bne.n	8019cb6 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8019caa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019cae:	f023 0301 	bic.w	r3, r3, #1
 8019cb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019cb6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019cba:	3301      	adds	r3, #1
 8019cbc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019cc0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019cc4:	2b0f      	cmp	r3, #15
 8019cc6:	d9bd      	bls.n	8019c44 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	7a1b      	ldrb	r3, [r3, #8]
 8019ccc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019cd0:	429a      	cmp	r2, r3
 8019cd2:	f4ff af73 	bcc.w	8019bbc <RegionEU868LinkAdrReq+0x30>
 8019cd6:	e000      	b.n	8019cda <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8019cd8:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8019cda:	2302      	movs	r3, #2
 8019cdc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	7a5b      	ldrb	r3, [r3, #9]
 8019ce4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8019ce8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019cec:	4618      	mov	r0, r3
 8019cee:	f7ff fa29 	bl	8019144 <RegionEU868GetPhyParam>
 8019cf2:	4603      	mov	r3, r0
 8019cf4:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8019cf6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019cfa:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	7a9b      	ldrb	r3, [r3, #10]
 8019d00:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8019d02:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8019d06:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019d08:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8019d0c:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8019d0e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019d12:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019d14:	68fb      	ldr	r3, [r7, #12]
 8019d16:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8019d1a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019d1c:	68fb      	ldr	r3, [r7, #12]
 8019d1e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8019d22:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	7b5b      	ldrb	r3, [r3, #13]
 8019d28:	b25b      	sxtb	r3, r3
 8019d2a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8019d2c:	2310      	movs	r3, #16
 8019d2e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8019d30:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8019d34:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d38:	b25b      	sxtb	r3, r3
 8019d3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8019d3e:	2307      	movs	r3, #7
 8019d40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019d44:	4b21      	ldr	r3, [pc, #132]	; (8019dcc <RegionEU868LinkAdrReq+0x240>)
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8019d4a:	2307      	movs	r3, #7
 8019d4c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8019d50:	2300      	movs	r3, #0
 8019d52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019d5c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8019d60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019d64:	1c9a      	adds	r2, r3, #2
 8019d66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019d6a:	1c59      	adds	r1, r3, #1
 8019d6c:	f107 0010 	add.w	r0, r7, #16
 8019d70:	4623      	mov	r3, r4
 8019d72:	f7fe fdae 	bl	80188d2 <RegionCommonLinkAdrReqVerifyParams>
 8019d76:	4603      	mov	r3, r0
 8019d78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019d7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019d80:	2b07      	cmp	r3, #7
 8019d82:	d10d      	bne.n	8019da0 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8019d84:	4b11      	ldr	r3, [pc, #68]	; (8019dcc <RegionEU868LinkAdrReq+0x240>)
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019d8c:	220c      	movs	r2, #12
 8019d8e:	2100      	movs	r1, #0
 8019d90:	4618      	mov	r0, r3
 8019d92:	f001 fd31 	bl	801b7f8 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8019d96:	4b0d      	ldr	r3, [pc, #52]	; (8019dcc <RegionEU868LinkAdrReq+0x240>)
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019d9c:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019da0:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8019da4:	68bb      	ldr	r3, [r7, #8]
 8019da6:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019da8:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019db0:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019db4:	683b      	ldr	r3, [r7, #0]
 8019db6:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019db8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019dba:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019dbe:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8019dc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8019dc4:	4618      	mov	r0, r3
 8019dc6:	374c      	adds	r7, #76	; 0x4c
 8019dc8:	46bd      	mov	sp, r7
 8019dca:	bd90      	pop	{r4, r7, pc}
 8019dcc:	20001ac8 	.word	0x20001ac8

08019dd0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019dd0:	b580      	push	{r7, lr}
 8019dd2:	b084      	sub	sp, #16
 8019dd4:	af00      	add	r7, sp, #0
 8019dd6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8019dd8:	2307      	movs	r3, #7
 8019dda:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019ddc:	2300      	movs	r3, #0
 8019dde:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	685b      	ldr	r3, [r3, #4]
 8019de4:	f107 020e 	add.w	r2, r7, #14
 8019de8:	4611      	mov	r1, r2
 8019dea:	4618      	mov	r0, r3
 8019dec:	f7ff f8e4 	bl	8018fb8 <VerifyRfFreq>
 8019df0:	4603      	mov	r3, r0
 8019df2:	f083 0301 	eor.w	r3, r3, #1
 8019df6:	b2db      	uxtb	r3, r3
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d003      	beq.n	8019e04 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8019dfc:	7bfb      	ldrb	r3, [r7, #15]
 8019dfe:	f023 0301 	bic.w	r3, r3, #1
 8019e02:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	f993 3000 	ldrsb.w	r3, [r3]
 8019e0a:	2207      	movs	r2, #7
 8019e0c:	2100      	movs	r1, #0
 8019e0e:	4618      	mov	r0, r3
 8019e10:	f7fe fb4d 	bl	80184ae <RegionCommonValueInRange>
 8019e14:	4603      	mov	r3, r0
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d103      	bne.n	8019e22 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8019e1a:	7bfb      	ldrb	r3, [r7, #15]
 8019e1c:	f023 0302 	bic.w	r3, r3, #2
 8019e20:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019e28:	2205      	movs	r2, #5
 8019e2a:	2100      	movs	r1, #0
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	f7fe fb3e 	bl	80184ae <RegionCommonValueInRange>
 8019e32:	4603      	mov	r3, r0
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d103      	bne.n	8019e40 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019e38:	7bfb      	ldrb	r3, [r7, #15]
 8019e3a:	f023 0304 	bic.w	r3, r3, #4
 8019e3e:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8019e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e42:	4618      	mov	r0, r3
 8019e44:	3710      	adds	r7, #16
 8019e46:	46bd      	mov	sp, r7
 8019e48:	bd80      	pop	{r7, pc}
	...

08019e4c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019e4c:	b580      	push	{r7, lr}
 8019e4e:	b086      	sub	sp, #24
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019e54:	2303      	movs	r3, #3
 8019e56:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d114      	bne.n	8019e8c <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019e68:	b2db      	uxtb	r3, r3
 8019e6a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8019e6c:	f107 0308 	add.w	r3, r7, #8
 8019e70:	4618      	mov	r0, r3
 8019e72:	f000 f9ff 	bl	801a274 <RegionEU868ChannelsRemove>
 8019e76:	4603      	mov	r3, r0
 8019e78:	f083 0301 	eor.w	r3, r3, #1
 8019e7c:	b2db      	uxtb	r3, r3
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d03b      	beq.n	8019efa <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8019e82:	7dfb      	ldrb	r3, [r7, #23]
 8019e84:	f023 0303 	bic.w	r3, r3, #3
 8019e88:	75fb      	strb	r3, [r7, #23]
 8019e8a:	e036      	b.n	8019efa <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019e98:	b2db      	uxtb	r3, r3
 8019e9a:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8019e9c:	f107 030c 	add.w	r3, r7, #12
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	f000 f945 	bl	801a130 <RegionEU868ChannelAdd>
 8019ea6:	4603      	mov	r3, r0
 8019ea8:	2b06      	cmp	r3, #6
 8019eaa:	d820      	bhi.n	8019eee <RegionEU868NewChannelReq+0xa2>
 8019eac:	a201      	add	r2, pc, #4	; (adr r2, 8019eb4 <RegionEU868NewChannelReq+0x68>)
 8019eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019eb2:	bf00      	nop
 8019eb4:	08019ef9 	.word	0x08019ef9
 8019eb8:	08019eef 	.word	0x08019eef
 8019ebc:	08019eef 	.word	0x08019eef
 8019ec0:	08019eef 	.word	0x08019eef
 8019ec4:	08019ed1 	.word	0x08019ed1
 8019ec8:	08019edb 	.word	0x08019edb
 8019ecc:	08019ee5 	.word	0x08019ee5
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8019ed0:	7dfb      	ldrb	r3, [r7, #23]
 8019ed2:	f023 0301 	bic.w	r3, r3, #1
 8019ed6:	75fb      	strb	r3, [r7, #23]
                break;
 8019ed8:	e00f      	b.n	8019efa <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8019eda:	7dfb      	ldrb	r3, [r7, #23]
 8019edc:	f023 0302 	bic.w	r3, r3, #2
 8019ee0:	75fb      	strb	r3, [r7, #23]
                break;
 8019ee2:	e00a      	b.n	8019efa <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8019ee4:	7dfb      	ldrb	r3, [r7, #23]
 8019ee6:	f023 0303 	bic.w	r3, r3, #3
 8019eea:	75fb      	strb	r3, [r7, #23]
                break;
 8019eec:	e005      	b.n	8019efa <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8019eee:	7dfb      	ldrb	r3, [r7, #23]
 8019ef0:	f023 0303 	bic.w	r3, r3, #3
 8019ef4:	75fb      	strb	r3, [r7, #23]
                break;
 8019ef6:	e000      	b.n	8019efa <RegionEU868NewChannelReq+0xae>
                break;
 8019ef8:	bf00      	nop
            }
        }
    }

    return status;
 8019efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019efe:	4618      	mov	r0, r3
 8019f00:	3718      	adds	r7, #24
 8019f02:	46bd      	mov	sp, r7
 8019f04:	bd80      	pop	{r7, pc}
 8019f06:	bf00      	nop

08019f08 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019f08:	b480      	push	{r7}
 8019f0a:	b083      	sub	sp, #12
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019f14:	4618      	mov	r0, r3
 8019f16:	370c      	adds	r7, #12
 8019f18:	46bd      	mov	sp, r7
 8019f1a:	bc80      	pop	{r7}
 8019f1c:	4770      	bx	lr
	...

08019f20 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019f20:	b580      	push	{r7, lr}
 8019f22:	b084      	sub	sp, #16
 8019f24:	af00      	add	r7, sp, #0
 8019f26:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019f28:	2303      	movs	r3, #3
 8019f2a:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019f2c:	2300      	movs	r3, #0
 8019f2e:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	781b      	ldrb	r3, [r3, #0]
 8019f34:	2b0f      	cmp	r3, #15
 8019f36:	d901      	bls.n	8019f3c <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8019f38:	2300      	movs	r3, #0
 8019f3a:	e035      	b.n	8019fa8 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	685b      	ldr	r3, [r3, #4]
 8019f40:	f107 020e 	add.w	r2, r7, #14
 8019f44:	4611      	mov	r1, r2
 8019f46:	4618      	mov	r0, r3
 8019f48:	f7ff f836 	bl	8018fb8 <VerifyRfFreq>
 8019f4c:	4603      	mov	r3, r0
 8019f4e:	f083 0301 	eor.w	r3, r3, #1
 8019f52:	b2db      	uxtb	r3, r3
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d003      	beq.n	8019f60 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8019f58:	7bfb      	ldrb	r3, [r7, #15]
 8019f5a:	f023 0301 	bic.w	r3, r3, #1
 8019f5e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8019f60:	4b13      	ldr	r3, [pc, #76]	; (8019fb0 <RegionEU868DlChannelReq+0x90>)
 8019f62:	681a      	ldr	r2, [r3, #0]
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	781b      	ldrb	r3, [r3, #0]
 8019f68:	4619      	mov	r1, r3
 8019f6a:	460b      	mov	r3, r1
 8019f6c:	005b      	lsls	r3, r3, #1
 8019f6e:	440b      	add	r3, r1
 8019f70:	009b      	lsls	r3, r3, #2
 8019f72:	4413      	add	r3, r2
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d103      	bne.n	8019f82 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8019f7a:	7bfb      	ldrb	r3, [r7, #15]
 8019f7c:	f023 0302 	bic.w	r3, r3, #2
 8019f80:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8019f82:	7bfb      	ldrb	r3, [r7, #15]
 8019f84:	2b03      	cmp	r3, #3
 8019f86:	d10d      	bne.n	8019fa4 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019f88:	4b09      	ldr	r3, [pc, #36]	; (8019fb0 <RegionEU868DlChannelReq+0x90>)
 8019f8a:	6819      	ldr	r1, [r3, #0]
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	781b      	ldrb	r3, [r3, #0]
 8019f90:	4618      	mov	r0, r3
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	685a      	ldr	r2, [r3, #4]
 8019f96:	4603      	mov	r3, r0
 8019f98:	005b      	lsls	r3, r3, #1
 8019f9a:	4403      	add	r3, r0
 8019f9c:	009b      	lsls	r3, r3, #2
 8019f9e:	440b      	add	r3, r1
 8019fa0:	3304      	adds	r3, #4
 8019fa2:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8019fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019fa8:	4618      	mov	r0, r3
 8019faa:	3710      	adds	r7, #16
 8019fac:	46bd      	mov	sp, r7
 8019fae:	bd80      	pop	{r7, pc}
 8019fb0:	20001ac8 	.word	0x20001ac8

08019fb4 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019fb4:	b480      	push	{r7}
 8019fb6:	b083      	sub	sp, #12
 8019fb8:	af00      	add	r7, sp, #0
 8019fba:	4603      	mov	r3, r0
 8019fbc:	460a      	mov	r2, r1
 8019fbe:	71fb      	strb	r3, [r7, #7]
 8019fc0:	4613      	mov	r3, r2
 8019fc2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8019fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8019fc8:	4618      	mov	r0, r3
 8019fca:	370c      	adds	r7, #12
 8019fcc:	46bd      	mov	sp, r7
 8019fce:	bc80      	pop	{r7}
 8019fd0:	4770      	bx	lr
	...

08019fd4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	b09a      	sub	sp, #104	; 0x68
 8019fd8:	af02      	add	r7, sp, #8
 8019fda:	60f8      	str	r0, [r7, #12]
 8019fdc:	60b9      	str	r1, [r7, #8]
 8019fde:	607a      	str	r2, [r7, #4]
 8019fe0:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8019fe2:	2300      	movs	r3, #0
 8019fe4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8019fe8:	2300      	movs	r3, #0
 8019fea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8019fee:	2300      	movs	r3, #0
 8019ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019ff2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019ff6:	2200      	movs	r2, #0
 8019ff8:	601a      	str	r2, [r3, #0]
 8019ffa:	605a      	str	r2, [r3, #4]
 8019ffc:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019ffe:	230c      	movs	r3, #12
 801a000:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 801a004:	2307      	movs	r3, #7
 801a006:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801a008:	4b47      	ldr	r3, [pc, #284]	; (801a128 <RegionEU868NextChannel+0x154>)
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a010:	2201      	movs	r2, #1
 801a012:	2100      	movs	r1, #0
 801a014:	4618      	mov	r0, r3
 801a016:	f7fe fa9b 	bl	8018550 <RegionCommonCountChannels>
 801a01a:	4603      	mov	r3, r0
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d10a      	bne.n	801a036 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801a020:	4b41      	ldr	r3, [pc, #260]	; (801a128 <RegionEU868NextChannel+0x154>)
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801a028:	4b3f      	ldr	r3, [pc, #252]	; (801a128 <RegionEU868NextChannel+0x154>)
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	f042 0207 	orr.w	r2, r2, #7
 801a030:	b292      	uxth	r2, r2
 801a032:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801a036:	68fb      	ldr	r3, [r7, #12]
 801a038:	7a5b      	ldrb	r3, [r3, #9]
 801a03a:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801a042:	b2db      	uxtb	r3, r3
 801a044:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801a046:	4b38      	ldr	r3, [pc, #224]	; (801a128 <RegionEU868NextChannel+0x154>)
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a04e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801a050:	4b35      	ldr	r3, [pc, #212]	; (801a128 <RegionEU868NextChannel+0x154>)
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801a056:	4b35      	ldr	r3, [pc, #212]	; (801a12c <RegionEU868NextChannel+0x158>)
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801a05c:	2310      	movs	r3, #16
 801a05e:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 801a060:	f107 0312 	add.w	r3, r7, #18
 801a064:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801a066:	68fb      	ldr	r3, [r7, #12]
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	685b      	ldr	r3, [r3, #4]
 801a070:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801a072:	68fb      	ldr	r3, [r7, #12]
 801a074:	7a9b      	ldrb	r3, [r3, #10]
 801a076:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801a07a:	2306      	movs	r3, #6
 801a07c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801a080:	68fa      	ldr	r2, [r7, #12]
 801a082:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a086:	320c      	adds	r2, #12
 801a088:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a08c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	7d1b      	ldrb	r3, [r3, #20]
 801a094:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	8adb      	ldrh	r3, [r3, #22]
 801a0a2:	4619      	mov	r1, r3
 801a0a4:	4610      	mov	r0, r2
 801a0a6:	f7fe fffd 	bl	80190a4 <GetTimeOnAir>
 801a0aa:	4603      	mov	r3, r0
 801a0ac:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801a0ae:	f107 0314 	add.w	r3, r7, #20
 801a0b2:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801a0b4:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 801a0b8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801a0bc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	9301      	str	r3, [sp, #4]
 801a0c4:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 801a0c8:	9300      	str	r3, [sp, #0]
 801a0ca:	460b      	mov	r3, r1
 801a0cc:	6839      	ldr	r1, [r7, #0]
 801a0ce:	f7fe fe56 	bl	8018d7e <RegionCommonIdentifyChannels>
 801a0d2:	4603      	mov	r3, r0
 801a0d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801a0d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d10e      	bne.n	801a0fe <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801a0e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801a0e4:	3b01      	subs	r3, #1
 801a0e6:	4619      	mov	r1, r3
 801a0e8:	2000      	movs	r0, #0
 801a0ea:	f001 fb33 	bl	801b754 <randr>
 801a0ee:	4603      	mov	r3, r0
 801a0f0:	3360      	adds	r3, #96	; 0x60
 801a0f2:	443b      	add	r3, r7
 801a0f4:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801a0f8:	68bb      	ldr	r3, [r7, #8]
 801a0fa:	701a      	strb	r2, [r3, #0]
 801a0fc:	e00e      	b.n	801a11c <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801a0fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a102:	2b0c      	cmp	r3, #12
 801a104:	d10a      	bne.n	801a11c <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801a106:	4b08      	ldr	r3, [pc, #32]	; (801a128 <RegionEU868NextChannel+0x154>)
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801a10e:	4b06      	ldr	r3, [pc, #24]	; (801a128 <RegionEU868NextChannel+0x154>)
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	f042 0207 	orr.w	r2, r2, #7
 801a116:	b292      	uxth	r2, r2
 801a118:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 801a11c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801a120:	4618      	mov	r0, r3
 801a122:	3760      	adds	r7, #96	; 0x60
 801a124:	46bd      	mov	sp, r7
 801a126:	bd80      	pop	{r7, pc}
 801a128:	20001ac8 	.word	0x20001ac8
 801a12c:	20001acc 	.word	0x20001acc

0801a130 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801a130:	b580      	push	{r7, lr}
 801a132:	b084      	sub	sp, #16
 801a134:	af00      	add	r7, sp, #0
 801a136:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801a138:	2300      	movs	r3, #0
 801a13a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801a13c:	2300      	movs	r3, #0
 801a13e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 801a140:	2300      	movs	r3, #0
 801a142:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	791b      	ldrb	r3, [r3, #4]
 801a148:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801a14a:	7b7b      	ldrb	r3, [r7, #13]
 801a14c:	2b02      	cmp	r3, #2
 801a14e:	d801      	bhi.n	801a154 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801a150:	2306      	movs	r3, #6
 801a152:	e089      	b.n	801a268 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801a154:	7b7b      	ldrb	r3, [r7, #13]
 801a156:	2b0f      	cmp	r3, #15
 801a158:	d901      	bls.n	801a15e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801a15a:	2303      	movs	r3, #3
 801a15c:	e084      	b.n	801a268 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	7a1b      	ldrb	r3, [r3, #8]
 801a164:	f343 0303 	sbfx	r3, r3, #0, #4
 801a168:	b25b      	sxtb	r3, r3
 801a16a:	2207      	movs	r2, #7
 801a16c:	2100      	movs	r1, #0
 801a16e:	4618      	mov	r0, r3
 801a170:	f7fe f99d 	bl	80184ae <RegionCommonValueInRange>
 801a174:	4603      	mov	r3, r0
 801a176:	2b00      	cmp	r3, #0
 801a178:	d101      	bne.n	801a17e <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801a17a:	2301      	movs	r3, #1
 801a17c:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	7a1b      	ldrb	r3, [r3, #8]
 801a184:	f343 1303 	sbfx	r3, r3, #4, #4
 801a188:	b25b      	sxtb	r3, r3
 801a18a:	2207      	movs	r2, #7
 801a18c:	2100      	movs	r1, #0
 801a18e:	4618      	mov	r0, r3
 801a190:	f7fe f98d 	bl	80184ae <RegionCommonValueInRange>
 801a194:	4603      	mov	r3, r0
 801a196:	2b00      	cmp	r3, #0
 801a198:	d101      	bne.n	801a19e <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801a19a:	2301      	movs	r3, #1
 801a19c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	7a1b      	ldrb	r3, [r3, #8]
 801a1a4:	f343 0303 	sbfx	r3, r3, #0, #4
 801a1a8:	b25a      	sxtb	r2, r3
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	7a1b      	ldrb	r3, [r3, #8]
 801a1b0:	f343 1303 	sbfx	r3, r3, #4, #4
 801a1b4:	b25b      	sxtb	r3, r3
 801a1b6:	429a      	cmp	r2, r3
 801a1b8:	dd01      	ble.n	801a1be <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801a1ba:	2301      	movs	r3, #1
 801a1bc:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801a1be:	7bbb      	ldrb	r3, [r7, #14]
 801a1c0:	f083 0301 	eor.w	r3, r3, #1
 801a1c4:	b2db      	uxtb	r3, r3
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d010      	beq.n	801a1ec <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	f107 020c 	add.w	r2, r7, #12
 801a1d4:	4611      	mov	r1, r2
 801a1d6:	4618      	mov	r0, r3
 801a1d8:	f7fe feee 	bl	8018fb8 <VerifyRfFreq>
 801a1dc:	4603      	mov	r3, r0
 801a1de:	f083 0301 	eor.w	r3, r3, #1
 801a1e2:	b2db      	uxtb	r3, r3
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d001      	beq.n	801a1ec <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801a1e8:	2301      	movs	r3, #1
 801a1ea:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801a1ec:	7bfb      	ldrb	r3, [r7, #15]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d004      	beq.n	801a1fc <RegionEU868ChannelAdd+0xcc>
 801a1f2:	7bbb      	ldrb	r3, [r7, #14]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d001      	beq.n	801a1fc <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801a1f8:	2306      	movs	r3, #6
 801a1fa:	e035      	b.n	801a268 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 801a1fc:	7bfb      	ldrb	r3, [r7, #15]
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d001      	beq.n	801a206 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801a202:	2305      	movs	r3, #5
 801a204:	e030      	b.n	801a268 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801a206:	7bbb      	ldrb	r3, [r7, #14]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d001      	beq.n	801a210 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801a20c:	2304      	movs	r3, #4
 801a20e:	e02b      	b.n	801a268 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801a210:	4b17      	ldr	r3, [pc, #92]	; (801a270 <RegionEU868ChannelAdd+0x140>)
 801a212:	6819      	ldr	r1, [r3, #0]
 801a214:	7b7a      	ldrb	r2, [r7, #13]
 801a216:	4613      	mov	r3, r2
 801a218:	005b      	lsls	r3, r3, #1
 801a21a:	4413      	add	r3, r2
 801a21c:	009b      	lsls	r3, r3, #2
 801a21e:	18c8      	adds	r0, r1, r3
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	220c      	movs	r2, #12
 801a226:	4619      	mov	r1, r3
 801a228:	f001 faab 	bl	801b782 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801a22c:	4b10      	ldr	r3, [pc, #64]	; (801a270 <RegionEU868ChannelAdd+0x140>)
 801a22e:	6819      	ldr	r1, [r3, #0]
 801a230:	7b7a      	ldrb	r2, [r7, #13]
 801a232:	7b38      	ldrb	r0, [r7, #12]
 801a234:	4613      	mov	r3, r2
 801a236:	005b      	lsls	r3, r3, #1
 801a238:	4413      	add	r3, r2
 801a23a:	009b      	lsls	r3, r3, #2
 801a23c:	440b      	add	r3, r1
 801a23e:	3309      	adds	r3, #9
 801a240:	4602      	mov	r2, r0
 801a242:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 801a244:	4b0a      	ldr	r3, [pc, #40]	; (801a270 <RegionEU868ChannelAdd+0x140>)
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 801a24c:	b21a      	sxth	r2, r3
 801a24e:	7b7b      	ldrb	r3, [r7, #13]
 801a250:	2101      	movs	r1, #1
 801a252:	fa01 f303 	lsl.w	r3, r1, r3
 801a256:	b21b      	sxth	r3, r3
 801a258:	4313      	orrs	r3, r2
 801a25a:	b21a      	sxth	r2, r3
 801a25c:	4b04      	ldr	r3, [pc, #16]	; (801a270 <RegionEU868ChannelAdd+0x140>)
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	b292      	uxth	r2, r2
 801a262:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 801a266:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801a268:	4618      	mov	r0, r3
 801a26a:	3710      	adds	r7, #16
 801a26c:	46bd      	mov	sp, r7
 801a26e:	bd80      	pop	{r7, pc}
 801a270:	20001ac8 	.word	0x20001ac8

0801a274 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801a274:	b580      	push	{r7, lr}
 801a276:	b086      	sub	sp, #24
 801a278:	af00      	add	r7, sp, #0
 801a27a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	781b      	ldrb	r3, [r3, #0]
 801a280:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801a282:	7dfb      	ldrb	r3, [r7, #23]
 801a284:	2b02      	cmp	r3, #2
 801a286:	d801      	bhi.n	801a28c <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801a288:	2300      	movs	r3, #0
 801a28a:	e016      	b.n	801a2ba <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801a28c:	4b0d      	ldr	r3, [pc, #52]	; (801a2c4 <RegionEU868ChannelsRemove+0x50>)
 801a28e:	6819      	ldr	r1, [r3, #0]
 801a290:	7dfa      	ldrb	r2, [r7, #23]
 801a292:	4613      	mov	r3, r2
 801a294:	005b      	lsls	r3, r3, #1
 801a296:	4413      	add	r3, r2
 801a298:	009b      	lsls	r3, r3, #2
 801a29a:	440b      	add	r3, r1
 801a29c:	461a      	mov	r2, r3
 801a29e:	2300      	movs	r3, #0
 801a2a0:	6013      	str	r3, [r2, #0]
 801a2a2:	6053      	str	r3, [r2, #4]
 801a2a4:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801a2a6:	4b07      	ldr	r3, [pc, #28]	; (801a2c4 <RegionEU868ChannelsRemove+0x50>)
 801a2a8:	681b      	ldr	r3, [r3, #0]
 801a2aa:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a2ae:	7df9      	ldrb	r1, [r7, #23]
 801a2b0:	2210      	movs	r2, #16
 801a2b2:	4618      	mov	r0, r3
 801a2b4:	f7fe f918 	bl	80184e8 <RegionCommonChanDisable>
 801a2b8:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801a2ba:	4618      	mov	r0, r3
 801a2bc:	3718      	adds	r7, #24
 801a2be:	46bd      	mov	sp, r7
 801a2c0:	bd80      	pop	{r7, pc}
 801a2c2:	bf00      	nop
 801a2c4:	20001ac8 	.word	0x20001ac8

0801a2c8 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801a2c8:	b480      	push	{r7}
 801a2ca:	b085      	sub	sp, #20
 801a2cc:	af00      	add	r7, sp, #0
 801a2ce:	4603      	mov	r3, r0
 801a2d0:	71fb      	strb	r3, [r7, #7]
 801a2d2:	460b      	mov	r3, r1
 801a2d4:	71bb      	strb	r3, [r7, #6]
 801a2d6:	4613      	mov	r3, r2
 801a2d8:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801a2da:	79ba      	ldrb	r2, [r7, #6]
 801a2dc:	797b      	ldrb	r3, [r7, #5]
 801a2de:	1ad3      	subs	r3, r2, r3
 801a2e0:	b2db      	uxtb	r3, r3
 801a2e2:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801a2e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	da01      	bge.n	801a2f0 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 801a2ec:	2300      	movs	r3, #0
 801a2ee:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801a2f0:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801a2f2:	4618      	mov	r0, r3
 801a2f4:	3714      	adds	r7, #20
 801a2f6:	46bd      	mov	sp, r7
 801a2f8:	bc80      	pop	{r7}
 801a2fa:	4770      	bx	lr

0801a2fc <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	b084      	sub	sp, #16
 801a300:	af00      	add	r7, sp, #0
 801a302:	603b      	str	r3, [r7, #0]
 801a304:	4603      	mov	r3, r0
 801a306:	71fb      	strb	r3, [r7, #7]
 801a308:	460b      	mov	r3, r1
 801a30a:	71bb      	strb	r3, [r7, #6]
 801a30c:	4613      	mov	r3, r2
 801a30e:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 801a310:	79fb      	ldrb	r3, [r7, #7]
 801a312:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 801a314:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801a318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a31c:	4611      	mov	r1, r2
 801a31e:	4618      	mov	r0, r3
 801a320:	f7fe fdcd 	bl	8018ebe <RegionCommonLimitTxPower>
 801a324:	4603      	mov	r3, r0
 801a326:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 801a328:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801a32c:	2b04      	cmp	r3, #4
 801a32e:	d106      	bne.n	801a33e <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 801a330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a334:	2b02      	cmp	r3, #2
 801a336:	bfb8      	it	lt
 801a338:	2302      	movlt	r3, #2
 801a33a:	73fb      	strb	r3, [r7, #15]
 801a33c:	e00d      	b.n	801a35a <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801a33e:	2204      	movs	r2, #4
 801a340:	2100      	movs	r1, #0
 801a342:	6838      	ldr	r0, [r7, #0]
 801a344:	f7fe f904 	bl	8018550 <RegionCommonCountChannels>
 801a348:	4603      	mov	r3, r0
 801a34a:	2b31      	cmp	r3, #49	; 0x31
 801a34c:	d805      	bhi.n	801a35a <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801a34e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a352:	2b05      	cmp	r3, #5
 801a354:	bfb8      	it	lt
 801a356:	2305      	movlt	r3, #5
 801a358:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 801a35a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a35e:	4618      	mov	r0, r3
 801a360:	3710      	adds	r7, #16
 801a362:	46bd      	mov	sp, r7
 801a364:	bd80      	pop	{r7, pc}
	...

0801a368 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 801a368:	b580      	push	{r7, lr}
 801a36a:	b082      	sub	sp, #8
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801a370:	4b18      	ldr	r3, [pc, #96]	; (801a3d4 <VerifyRfFreq+0x6c>)
 801a372:	6a1b      	ldr	r3, [r3, #32]
 801a374:	6878      	ldr	r0, [r7, #4]
 801a376:	4798      	blx	r3
 801a378:	4603      	mov	r3, r0
 801a37a:	f083 0301 	eor.w	r3, r3, #1
 801a37e:	b2db      	uxtb	r3, r3
 801a380:	2b00      	cmp	r3, #0
 801a382:	d001      	beq.n	801a388 <VerifyRfFreq+0x20>
    {
        return false;
 801a384:	2300      	movs	r3, #0
 801a386:	e021      	b.n	801a3cc <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	4a13      	ldr	r2, [pc, #76]	; (801a3d8 <VerifyRfFreq+0x70>)
 801a38c:	4293      	cmp	r3, r2
 801a38e:	d910      	bls.n	801a3b2 <VerifyRfFreq+0x4a>
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	4a12      	ldr	r2, [pc, #72]	; (801a3dc <VerifyRfFreq+0x74>)
 801a394:	4293      	cmp	r3, r2
 801a396:	d80c      	bhi.n	801a3b2 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 801a398:	687a      	ldr	r2, [r7, #4]
 801a39a:	4b11      	ldr	r3, [pc, #68]	; (801a3e0 <VerifyRfFreq+0x78>)
 801a39c:	4413      	add	r3, r2
 801a39e:	4a11      	ldr	r2, [pc, #68]	; (801a3e4 <VerifyRfFreq+0x7c>)
 801a3a0:	fba2 1203 	umull	r1, r2, r2, r3
 801a3a4:	0c92      	lsrs	r2, r2, #18
 801a3a6:	4910      	ldr	r1, [pc, #64]	; (801a3e8 <VerifyRfFreq+0x80>)
 801a3a8:	fb01 f202 	mul.w	r2, r1, r2
 801a3ac:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801a3ae:	2a00      	cmp	r2, #0
 801a3b0:	d001      	beq.n	801a3b6 <VerifyRfFreq+0x4e>
    {
        return false;
 801a3b2:	2300      	movs	r3, #0
 801a3b4:	e00a      	b.n	801a3cc <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	4a0c      	ldr	r2, [pc, #48]	; (801a3ec <VerifyRfFreq+0x84>)
 801a3ba:	4293      	cmp	r3, r2
 801a3bc:	d903      	bls.n	801a3c6 <VerifyRfFreq+0x5e>
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	4a06      	ldr	r2, [pc, #24]	; (801a3dc <VerifyRfFreq+0x74>)
 801a3c2:	4293      	cmp	r3, r2
 801a3c4:	d901      	bls.n	801a3ca <VerifyRfFreq+0x62>
    {
        return false;
 801a3c6:	2300      	movs	r3, #0
 801a3c8:	e000      	b.n	801a3cc <VerifyRfFreq+0x64>
    }
    return true;
 801a3ca:	2301      	movs	r3, #1
}
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	3708      	adds	r7, #8
 801a3d0:	46bd      	mov	sp, r7
 801a3d2:	bd80      	pop	{r7, pc}
 801a3d4:	08021f7c 	.word	0x08021f7c
 801a3d8:	3708709f 	.word	0x3708709f
 801a3dc:	374886e0 	.word	0x374886e0
 801a3e0:	c8f78f60 	.word	0xc8f78f60
 801a3e4:	6fd91d85 	.word	0x6fd91d85
 801a3e8:	000927c0 	.word	0x000927c0
 801a3ec:	35c8015f 	.word	0x35c8015f

0801a3f0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801a3f0:	b590      	push	{r4, r7, lr}
 801a3f2:	b089      	sub	sp, #36	; 0x24
 801a3f4:	af04      	add	r7, sp, #16
 801a3f6:	4603      	mov	r3, r0
 801a3f8:	460a      	mov	r2, r1
 801a3fa:	71fb      	strb	r3, [r7, #7]
 801a3fc:	4613      	mov	r3, r2
 801a3fe:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 801a400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a404:	4a0f      	ldr	r2, [pc, #60]	; (801a444 <GetTimeOnAir+0x54>)
 801a406:	5cd3      	ldrb	r3, [r2, r3]
 801a408:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801a40a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a40e:	490e      	ldr	r1, [pc, #56]	; (801a448 <GetTimeOnAir+0x58>)
 801a410:	4618      	mov	r0, r3
 801a412:	f7fe fd69 	bl	8018ee8 <RegionCommonGetBandwidth>
 801a416:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801a418:	4b0c      	ldr	r3, [pc, #48]	; (801a44c <GetTimeOnAir+0x5c>)
 801a41a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a41c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801a420:	88bb      	ldrh	r3, [r7, #4]
 801a422:	b2db      	uxtb	r3, r3
 801a424:	2101      	movs	r1, #1
 801a426:	9103      	str	r1, [sp, #12]
 801a428:	9302      	str	r3, [sp, #8]
 801a42a:	2300      	movs	r3, #0
 801a42c:	9301      	str	r3, [sp, #4]
 801a42e:	2308      	movs	r3, #8
 801a430:	9300      	str	r3, [sp, #0]
 801a432:	2301      	movs	r3, #1
 801a434:	68b9      	ldr	r1, [r7, #8]
 801a436:	2001      	movs	r0, #1
 801a438:	47a0      	blx	r4
 801a43a:	4603      	mov	r3, r0
}
 801a43c:	4618      	mov	r0, r3
 801a43e:	3714      	adds	r7, #20
 801a440:	46bd      	mov	sp, r7
 801a442:	bd90      	pop	{r4, r7, pc}
 801a444:	08021ef8 	.word	0x08021ef8
 801a448:	08021f08 	.word	0x08021f08
 801a44c:	08021f7c 	.word	0x08021f7c

0801a450 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b088      	sub	sp, #32
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801a458:	2300      	movs	r3, #0
 801a45a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	781b      	ldrb	r3, [r3, #0]
 801a460:	3b01      	subs	r3, #1
 801a462:	2b37      	cmp	r3, #55	; 0x37
 801a464:	f200 8136 	bhi.w	801a6d4 <RegionUS915GetPhyParam+0x284>
 801a468:	a201      	add	r2, pc, #4	; (adr r2, 801a470 <RegionUS915GetPhyParam+0x20>)
 801a46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a46e:	bf00      	nop
 801a470:	0801a551 	.word	0x0801a551
 801a474:	0801a557 	.word	0x0801a557
 801a478:	0801a6d5 	.word	0x0801a6d5
 801a47c:	0801a6d5 	.word	0x0801a6d5
 801a480:	0801a6d5 	.word	0x0801a6d5
 801a484:	0801a55d 	.word	0x0801a55d
 801a488:	0801a6d5 	.word	0x0801a6d5
 801a48c:	0801a597 	.word	0x0801a597
 801a490:	0801a6d5 	.word	0x0801a6d5
 801a494:	0801a59d 	.word	0x0801a59d
 801a498:	0801a5a3 	.word	0x0801a5a3
 801a49c:	0801a5a9 	.word	0x0801a5a9
 801a4a0:	0801a5af 	.word	0x0801a5af
 801a4a4:	0801a5bf 	.word	0x0801a5bf
 801a4a8:	0801a5cf 	.word	0x0801a5cf
 801a4ac:	0801a5d5 	.word	0x0801a5d5
 801a4b0:	0801a5dd 	.word	0x0801a5dd
 801a4b4:	0801a5e5 	.word	0x0801a5e5
 801a4b8:	0801a5ed 	.word	0x0801a5ed
 801a4bc:	0801a5f5 	.word	0x0801a5f5
 801a4c0:	0801a5fd 	.word	0x0801a5fd
 801a4c4:	0801a611 	.word	0x0801a611
 801a4c8:	0801a617 	.word	0x0801a617
 801a4cc:	0801a61d 	.word	0x0801a61d
 801a4d0:	0801a623 	.word	0x0801a623
 801a4d4:	0801a62f 	.word	0x0801a62f
 801a4d8:	0801a63b 	.word	0x0801a63b
 801a4dc:	0801a641 	.word	0x0801a641
 801a4e0:	0801a649 	.word	0x0801a649
 801a4e4:	0801a64f 	.word	0x0801a64f
 801a4e8:	0801a655 	.word	0x0801a655
 801a4ec:	0801a65b 	.word	0x0801a65b
 801a4f0:	0801a563 	.word	0x0801a563
 801a4f4:	0801a6d5 	.word	0x0801a6d5
 801a4f8:	0801a6d5 	.word	0x0801a6d5
 801a4fc:	0801a6d5 	.word	0x0801a6d5
 801a500:	0801a6d5 	.word	0x0801a6d5
 801a504:	0801a6d5 	.word	0x0801a6d5
 801a508:	0801a6d5 	.word	0x0801a6d5
 801a50c:	0801a6d5 	.word	0x0801a6d5
 801a510:	0801a6d5 	.word	0x0801a6d5
 801a514:	0801a6d5 	.word	0x0801a6d5
 801a518:	0801a6d5 	.word	0x0801a6d5
 801a51c:	0801a6d5 	.word	0x0801a6d5
 801a520:	0801a6d5 	.word	0x0801a6d5
 801a524:	0801a6d5 	.word	0x0801a6d5
 801a528:	0801a663 	.word	0x0801a663
 801a52c:	0801a677 	.word	0x0801a677
 801a530:	0801a685 	.word	0x0801a685
 801a534:	0801a68b 	.word	0x0801a68b
 801a538:	0801a6d5 	.word	0x0801a6d5
 801a53c:	0801a691 	.word	0x0801a691
 801a540:	0801a6a5 	.word	0x0801a6a5
 801a544:	0801a6ab 	.word	0x0801a6ab
 801a548:	0801a6b1 	.word	0x0801a6b1
 801a54c:	0801a6c1 	.word	0x0801a6c1
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801a550:	2308      	movs	r3, #8
 801a552:	61bb      	str	r3, [r7, #24]
            break;
 801a554:	e0bf      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 801a556:	2300      	movs	r3, #0
 801a558:	61bb      	str	r3, [r7, #24]
            break;
 801a55a:	e0bc      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 801a55c:	2300      	movs	r3, #0
 801a55e:	61bb      	str	r3, [r7, #24]
            break;
 801a560:	e0b9      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a568:	733b      	strb	r3, [r7, #12]
 801a56a:	2304      	movs	r3, #4
 801a56c:	737b      	strb	r3, [r7, #13]
 801a56e:	2300      	movs	r3, #0
 801a570:	73bb      	strb	r3, [r7, #14]
 801a572:	2348      	movs	r3, #72	; 0x48
 801a574:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801a576:	4b5b      	ldr	r3, [pc, #364]	; (801a6e4 <RegionUS915GetPhyParam+0x294>)
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a57e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801a580:	4b58      	ldr	r3, [pc, #352]	; (801a6e4 <RegionUS915GetPhyParam+0x294>)
 801a582:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a584:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801a586:	f107 030c 	add.w	r3, r7, #12
 801a58a:	4618      	mov	r0, r3
 801a58c:	f7fe fc59 	bl	8018e42 <RegionCommonGetNextLowerTxDr>
 801a590:	4603      	mov	r3, r0
 801a592:	61bb      	str	r3, [r7, #24]
            break;
 801a594:	e09f      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 801a596:	2300      	movs	r3, #0
 801a598:	61bb      	str	r3, [r7, #24]
            break;
 801a59a:	e09c      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 801a59c:	2300      	movs	r3, #0
 801a59e:	61bb      	str	r3, [r7, #24]
            break;
 801a5a0:	e099      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801a5a2:	2340      	movs	r3, #64	; 0x40
 801a5a4:	61bb      	str	r3, [r7, #24]
            break;
 801a5a6:	e096      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801a5a8:	2320      	movs	r3, #32
 801a5aa:	61bb      	str	r3, [r7, #24]
            break;
 801a5ac:	e093      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a5b4:	461a      	mov	r2, r3
 801a5b6:	4b4c      	ldr	r3, [pc, #304]	; (801a6e8 <RegionUS915GetPhyParam+0x298>)
 801a5b8:	5c9b      	ldrb	r3, [r3, r2]
 801a5ba:	61bb      	str	r3, [r7, #24]
            break;
 801a5bc:	e08b      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a5c4:	461a      	mov	r2, r3
 801a5c6:	4b49      	ldr	r3, [pc, #292]	; (801a6ec <RegionUS915GetPhyParam+0x29c>)
 801a5c8:	5c9b      	ldrb	r3, [r3, r2]
 801a5ca:	61bb      	str	r3, [r7, #24]
            break;
 801a5cc:	e083      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801a5ce:	2300      	movs	r3, #0
 801a5d0:	61bb      	str	r3, [r7, #24]
            break;
 801a5d2:	e080      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 801a5d4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801a5d8:	61bb      	str	r3, [r7, #24]
            break;
 801a5da:	e07c      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801a5dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a5e0:	61bb      	str	r3, [r7, #24]
            break;
 801a5e2:	e078      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801a5e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801a5e8:	61bb      	str	r3, [r7, #24]
            break;
 801a5ea:	e074      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801a5ec:	f241 3388 	movw	r3, #5000	; 0x1388
 801a5f0:	61bb      	str	r3, [r7, #24]
            break;
 801a5f2:	e070      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801a5f4:	f241 7370 	movw	r3, #6000	; 0x1770
 801a5f8:	61bb      	str	r3, [r7, #24]
            break;
 801a5fa:	e06c      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801a5fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a600:	483b      	ldr	r0, [pc, #236]	; (801a6f0 <RegionUS915GetPhyParam+0x2a0>)
 801a602:	f001 f8a7 	bl	801b754 <randr>
 801a606:	4603      	mov	r3, r0
 801a608:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801a60c:	61bb      	str	r3, [r7, #24]
            break;
 801a60e:	e062      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801a610:	2300      	movs	r3, #0
 801a612:	61bb      	str	r3, [r7, #24]
            break;
 801a614:	e05f      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 801a616:	4b37      	ldr	r3, [pc, #220]	; (801a6f4 <RegionUS915GetPhyParam+0x2a4>)
 801a618:	61bb      	str	r3, [r7, #24]
            break;
 801a61a:	e05c      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 801a61c:	2308      	movs	r3, #8
 801a61e:	61bb      	str	r3, [r7, #24]
            break;
 801a620:	e059      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801a622:	4b30      	ldr	r3, [pc, #192]	; (801a6e4 <RegionUS915GetPhyParam+0x294>)
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a62a:	61bb      	str	r3, [r7, #24]
            break;
 801a62c:	e053      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801a62e:	4b2d      	ldr	r3, [pc, #180]	; (801a6e4 <RegionUS915GetPhyParam+0x294>)
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a636:	61bb      	str	r3, [r7, #24]
            break;
 801a638:	e04d      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801a63a:	2348      	movs	r3, #72	; 0x48
 801a63c:	61bb      	str	r3, [r7, #24]
            break;
 801a63e:	e04a      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801a640:	4b28      	ldr	r3, [pc, #160]	; (801a6e4 <RegionUS915GetPhyParam+0x294>)
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	61bb      	str	r3, [r7, #24]
            break;
 801a646:	e046      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 801a648:	2300      	movs	r3, #0
 801a64a:	61bb      	str	r3, [r7, #24]
            break;
 801a64c:	e043      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801a64e:	2300      	movs	r3, #0
 801a650:	61bb      	str	r3, [r7, #24]
            break;
 801a652:	e040      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801a654:	4b28      	ldr	r3, [pc, #160]	; (801a6f8 <RegionUS915GetPhyParam+0x2a8>)
 801a656:	61bb      	str	r3, [r7, #24]
            break;
 801a658:	e03d      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 801a65a:	f04f 0300 	mov.w	r3, #0
 801a65e:	61bb      	str	r3, [r7, #24]
            break;
 801a660:	e039      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	791b      	ldrb	r3, [r3, #4]
 801a666:	4a25      	ldr	r2, [pc, #148]	; (801a6fc <RegionUS915GetPhyParam+0x2ac>)
 801a668:	4922      	ldr	r1, [pc, #136]	; (801a6f4 <RegionUS915GetPhyParam+0x2a4>)
 801a66a:	4618      	mov	r0, r3
 801a66c:	f7fd fd4b 	bl	8018106 <RegionBaseUSCalcDownlinkFrequency>
 801a670:	4603      	mov	r3, r0
 801a672:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a674:	e02f      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801a676:	2317      	movs	r3, #23
 801a678:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801a67a:	2304      	movs	r3, #4
 801a67c:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801a67e:	2303      	movs	r3, #3
 801a680:	76bb      	strb	r3, [r7, #26]
            break;
 801a682:	e028      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801a684:	2308      	movs	r3, #8
 801a686:	61bb      	str	r3, [r7, #24]
            break;
 801a688:	e025      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a68a:	2308      	movs	r3, #8
 801a68c:	61bb      	str	r3, [r7, #24]
            break;
 801a68e:	e022      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	791b      	ldrb	r3, [r3, #4]
 801a694:	4a19      	ldr	r2, [pc, #100]	; (801a6fc <RegionUS915GetPhyParam+0x2ac>)
 801a696:	4917      	ldr	r1, [pc, #92]	; (801a6f4 <RegionUS915GetPhyParam+0x2a4>)
 801a698:	4618      	mov	r0, r3
 801a69a:	f7fd fd34 	bl	8018106 <RegionBaseUSCalcDownlinkFrequency>
 801a69e:	4603      	mov	r3, r0
 801a6a0:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a6a2:	e018      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801a6a4:	2308      	movs	r3, #8
 801a6a6:	61bb      	str	r3, [r7, #24]
            break;
 801a6a8:	e015      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a6aa:	2308      	movs	r3, #8
 801a6ac:	61bb      	str	r3, [r7, #24]
            break;
 801a6ae:	e012      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a6b6:	461a      	mov	r2, r3
 801a6b8:	4b11      	ldr	r3, [pc, #68]	; (801a700 <RegionUS915GetPhyParam+0x2b0>)
 801a6ba:	5c9b      	ldrb	r3, [r3, r2]
 801a6bc:	61bb      	str	r3, [r7, #24]
            break;
 801a6be:	e00a      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a6c6:	490f      	ldr	r1, [pc, #60]	; (801a704 <RegionUS915GetPhyParam+0x2b4>)
 801a6c8:	4618      	mov	r0, r3
 801a6ca:	f7fe fc0d 	bl	8018ee8 <RegionCommonGetBandwidth>
 801a6ce:	4603      	mov	r3, r0
 801a6d0:	61bb      	str	r3, [r7, #24]
            break;
 801a6d2:	e000      	b.n	801a6d6 <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 801a6d4:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801a6d6:	69bb      	ldr	r3, [r7, #24]
 801a6d8:	61fb      	str	r3, [r7, #28]
 801a6da:	69fb      	ldr	r3, [r7, #28]
}
 801a6dc:	4618      	mov	r0, r3
 801a6de:	3720      	adds	r7, #32
 801a6e0:	46bd      	mov	sp, r7
 801a6e2:	bd80      	pop	{r7, pc}
 801a6e4:	20001ad4 	.word	0x20001ad4
 801a6e8:	08021f5c 	.word	0x08021f5c
 801a6ec:	08021f6c 	.word	0x08021f6c
 801a6f0:	fffffc18 	.word	0xfffffc18
 801a6f4:	370870a0 	.word	0x370870a0
 801a6f8:	4200999a 	.word	0x4200999a
 801a6fc:	000927c0 	.word	0x000927c0
 801a700:	08021ef8 	.word	0x08021ef8
 801a704:	08021f08 	.word	0x08021f08

0801a708 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801a708:	b590      	push	{r4, r7, lr}
 801a70a:	b085      	sub	sp, #20
 801a70c:	af02      	add	r7, sp, #8
 801a70e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801a710:	4b11      	ldr	r3, [pc, #68]	; (801a758 <RegionUS915SetBandTxDone+0x50>)
 801a712:	681a      	ldr	r2, [r3, #0]
 801a714:	4b11      	ldr	r3, [pc, #68]	; (801a75c <RegionUS915SetBandTxDone+0x54>)
 801a716:	6819      	ldr	r1, [r3, #0]
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	781b      	ldrb	r3, [r3, #0]
 801a71c:	4618      	mov	r0, r3
 801a71e:	4603      	mov	r3, r0
 801a720:	005b      	lsls	r3, r3, #1
 801a722:	4403      	add	r3, r0
 801a724:	009b      	lsls	r3, r3, #2
 801a726:	440b      	add	r3, r1
 801a728:	3309      	adds	r3, #9
 801a72a:	781b      	ldrb	r3, [r3, #0]
 801a72c:	4619      	mov	r1, r3
 801a72e:	460b      	mov	r3, r1
 801a730:	005b      	lsls	r3, r3, #1
 801a732:	440b      	add	r3, r1
 801a734:	00db      	lsls	r3, r3, #3
 801a736:	18d0      	adds	r0, r2, r3
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	6899      	ldr	r1, [r3, #8]
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	785c      	ldrb	r4, [r3, #1]
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	691a      	ldr	r2, [r3, #16]
 801a744:	9200      	str	r2, [sp, #0]
 801a746:	68db      	ldr	r3, [r3, #12]
 801a748:	4622      	mov	r2, r4
 801a74a:	f7fd ff53 	bl	80185f4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 801a74e:	bf00      	nop
 801a750:	370c      	adds	r7, #12
 801a752:	46bd      	mov	sp, r7
 801a754:	bd90      	pop	{r4, r7, pc}
 801a756:	bf00      	nop
 801a758:	20001ad8 	.word	0x20001ad8
 801a75c:	20001ad4 	.word	0x20001ad4

0801a760 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801a760:	b580      	push	{r7, lr}
 801a762:	b08a      	sub	sp, #40	; 0x28
 801a764:	af00      	add	r7, sp, #0
 801a766:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 801a768:	2301      	movs	r3, #1
 801a76a:	81bb      	strh	r3, [r7, #12]
 801a76c:	2300      	movs	r3, #0
 801a76e:	73bb      	strb	r3, [r7, #14]
 801a770:	2300      	movs	r3, #0
 801a772:	613b      	str	r3, [r7, #16]
 801a774:	2300      	movs	r3, #0
 801a776:	617b      	str	r3, [r7, #20]
 801a778:	2300      	movs	r3, #0
 801a77a:	61bb      	str	r3, [r7, #24]
 801a77c:	2300      	movs	r3, #0
 801a77e:	61fb      	str	r3, [r7, #28]
 801a780:	2300      	movs	r3, #0
 801a782:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	7b1b      	ldrb	r3, [r3, #12]
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d007      	beq.n	801a79e <RegionUS915InitDefaults+0x3e>
 801a78e:	2b00      	cmp	r3, #0
 801a790:	f2c0 8104 	blt.w	801a99c <RegionUS915InitDefaults+0x23c>
 801a794:	3b01      	subs	r3, #1
 801a796:	2b01      	cmp	r3, #1
 801a798:	f200 8100 	bhi.w	801a99c <RegionUS915InitDefaults+0x23c>
 801a79c:	e0ce      	b.n	801a93c <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	f000 80fc 	beq.w	801a9a0 <RegionUS915InitDefaults+0x240>
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	685b      	ldr	r3, [r3, #4]
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	f000 80f7 	beq.w	801a9a0 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	4a7c      	ldr	r2, [pc, #496]	; (801a9a8 <RegionUS915InitDefaults+0x248>)
 801a7b8:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	685b      	ldr	r3, [r3, #4]
 801a7be:	4a7b      	ldr	r2, [pc, #492]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a7c0:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	689b      	ldr	r3, [r3, #8]
 801a7c6:	4a7a      	ldr	r2, [pc, #488]	; (801a9b0 <RegionUS915InitDefaults+0x250>)
 801a7c8:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801a7ca:	4b77      	ldr	r3, [pc, #476]	; (801a9a8 <RegionUS915InitDefaults+0x248>)
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	2200      	movs	r2, #0
 801a7d0:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801a7d2:	4b75      	ldr	r3, [pc, #468]	; (801a9a8 <RegionUS915InitDefaults+0x248>)
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	2200      	movs	r2, #0
 801a7d8:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801a7da:	4b75      	ldr	r3, [pc, #468]	; (801a9b0 <RegionUS915InitDefaults+0x250>)
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	f107 010c 	add.w	r1, r7, #12
 801a7e2:	2218      	movs	r2, #24
 801a7e4:	4618      	mov	r0, r3
 801a7e6:	f000 ffcc 	bl	801b782 <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a7ea:	2300      	movs	r3, #0
 801a7ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a7f0:	e02e      	b.n	801a850 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801a7f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a7f6:	4a6f      	ldr	r2, [pc, #444]	; (801a9b4 <RegionUS915InitDefaults+0x254>)
 801a7f8:	fb03 f202 	mul.w	r2, r3, r2
 801a7fc:	4b6e      	ldr	r3, [pc, #440]	; (801a9b8 <RegionUS915InitDefaults+0x258>)
 801a7fe:	4413      	add	r3, r2
 801a800:	4a6a      	ldr	r2, [pc, #424]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a802:	6811      	ldr	r1, [r2, #0]
 801a804:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a808:	4618      	mov	r0, r3
 801a80a:	4613      	mov	r3, r2
 801a80c:	005b      	lsls	r3, r3, #1
 801a80e:	4413      	add	r3, r2
 801a810:	009b      	lsls	r3, r3, #2
 801a812:	440b      	add	r3, r1
 801a814:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801a816:	4b65      	ldr	r3, [pc, #404]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a818:	6819      	ldr	r1, [r3, #0]
 801a81a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a81e:	4613      	mov	r3, r2
 801a820:	005b      	lsls	r3, r3, #1
 801a822:	4413      	add	r3, r2
 801a824:	009b      	lsls	r3, r3, #2
 801a826:	440b      	add	r3, r1
 801a828:	3308      	adds	r3, #8
 801a82a:	2230      	movs	r2, #48	; 0x30
 801a82c:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a82e:	4b5f      	ldr	r3, [pc, #380]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a830:	6819      	ldr	r1, [r3, #0]
 801a832:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a836:	4613      	mov	r3, r2
 801a838:	005b      	lsls	r3, r3, #1
 801a83a:	4413      	add	r3, r2
 801a83c:	009b      	lsls	r3, r3, #2
 801a83e:	440b      	add	r3, r1
 801a840:	3309      	adds	r3, #9
 801a842:	2200      	movs	r2, #0
 801a844:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a84a:	3301      	adds	r3, #1
 801a84c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a854:	2b3f      	cmp	r3, #63	; 0x3f
 801a856:	d9cc      	bls.n	801a7f2 <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a858:	2340      	movs	r3, #64	; 0x40
 801a85a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a85e:	e02f      	b.n	801a8c0 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801a860:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a864:	3b40      	subs	r3, #64	; 0x40
 801a866:	4a55      	ldr	r2, [pc, #340]	; (801a9bc <RegionUS915InitDefaults+0x25c>)
 801a868:	fb03 f202 	mul.w	r2, r3, r2
 801a86c:	4b54      	ldr	r3, [pc, #336]	; (801a9c0 <RegionUS915InitDefaults+0x260>)
 801a86e:	4413      	add	r3, r2
 801a870:	4a4e      	ldr	r2, [pc, #312]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a872:	6811      	ldr	r1, [r2, #0]
 801a874:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a878:	4618      	mov	r0, r3
 801a87a:	4613      	mov	r3, r2
 801a87c:	005b      	lsls	r3, r3, #1
 801a87e:	4413      	add	r3, r2
 801a880:	009b      	lsls	r3, r3, #2
 801a882:	440b      	add	r3, r1
 801a884:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801a886:	4b49      	ldr	r3, [pc, #292]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a888:	6819      	ldr	r1, [r3, #0]
 801a88a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a88e:	4613      	mov	r3, r2
 801a890:	005b      	lsls	r3, r3, #1
 801a892:	4413      	add	r3, r2
 801a894:	009b      	lsls	r3, r3, #2
 801a896:	440b      	add	r3, r1
 801a898:	3308      	adds	r3, #8
 801a89a:	2244      	movs	r2, #68	; 0x44
 801a89c:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a89e:	4b43      	ldr	r3, [pc, #268]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a8a0:	6819      	ldr	r1, [r3, #0]
 801a8a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a8a6:	4613      	mov	r3, r2
 801a8a8:	005b      	lsls	r3, r3, #1
 801a8aa:	4413      	add	r3, r2
 801a8ac:	009b      	lsls	r3, r3, #2
 801a8ae:	440b      	add	r3, r1
 801a8b0:	3309      	adds	r3, #9
 801a8b2:	2200      	movs	r2, #0
 801a8b4:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a8b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a8ba:	3301      	adds	r3, #1
 801a8bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a8c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a8c4:	2b47      	cmp	r3, #71	; 0x47
 801a8c6:	d9cb      	bls.n	801a860 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801a8c8:	4b38      	ldr	r3, [pc, #224]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a8d0:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801a8d4:	4b35      	ldr	r3, [pc, #212]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a8dc:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801a8e0:	4b32      	ldr	r3, [pc, #200]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a8e8:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 801a8ec:	4b2f      	ldr	r3, [pc, #188]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a8f4:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801a8f8:	4b2c      	ldr	r3, [pc, #176]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	22ff      	movs	r2, #255	; 0xff
 801a8fe:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801a902:	4b2a      	ldr	r3, [pc, #168]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	2200      	movs	r2, #0
 801a908:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a90c:	4b27      	ldr	r3, [pc, #156]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a914:	4b25      	ldr	r3, [pc, #148]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a91c:	2206      	movs	r2, #6
 801a91e:	4619      	mov	r1, r3
 801a920:	f7fd fe42 	bl	80185a8 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801a924:	4b20      	ldr	r3, [pc, #128]	; (801a9a8 <RegionUS915InitDefaults+0x248>)
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	4618      	mov	r0, r3
 801a92a:	4b20      	ldr	r3, [pc, #128]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a932:	2206      	movs	r2, #6
 801a934:	4619      	mov	r1, r3
 801a936:	f7fd fe37 	bl	80185a8 <RegionCommonChanMaskCopy>
            break;
 801a93a:	e032      	b.n	801a9a2 <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a93c:	4b1b      	ldr	r3, [pc, #108]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a944:	4b19      	ldr	r3, [pc, #100]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a94c:	2206      	movs	r2, #6
 801a94e:	4619      	mov	r1, r3
 801a950:	f7fd fe2a 	bl	80185a8 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 801a954:	2300      	movs	r3, #0
 801a956:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a95a:	e01a      	b.n	801a992 <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801a95c:	4b12      	ldr	r3, [pc, #72]	; (801a9a8 <RegionUS915InitDefaults+0x248>)
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a964:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a968:	4b10      	ldr	r3, [pc, #64]	; (801a9ac <RegionUS915InitDefaults+0x24c>)
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a970:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a974:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a978:	4b0b      	ldr	r3, [pc, #44]	; (801a9a8 <RegionUS915InitDefaults+0x248>)
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a980:	4001      	ands	r1, r0
 801a982:	b289      	uxth	r1, r1
 801a984:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 801a988:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a98c:	3301      	adds	r3, #1
 801a98e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a992:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a996:	2b05      	cmp	r3, #5
 801a998:	d9e0      	bls.n	801a95c <RegionUS915InitDefaults+0x1fc>
            }
            break;
 801a99a:	e002      	b.n	801a9a2 <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 801a99c:	bf00      	nop
 801a99e:	e000      	b.n	801a9a2 <RegionUS915InitDefaults+0x242>
                return;
 801a9a0:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801a9a2:	3728      	adds	r7, #40	; 0x28
 801a9a4:	46bd      	mov	sp, r7
 801a9a6:	bd80      	pop	{r7, pc}
 801a9a8:	20001ad0 	.word	0x20001ad0
 801a9ac:	20001ad4 	.word	0x20001ad4
 801a9b0:	20001ad8 	.word	0x20001ad8
 801a9b4:	00030d40 	.word	0x00030d40
 801a9b8:	35c80160 	.word	0x35c80160
 801a9bc:	00186a00 	.word	0x00186a00
 801a9c0:	35d2afc0 	.word	0x35d2afc0

0801a9c4 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801a9c4:	b580      	push	{r7, lr}
 801a9c6:	b082      	sub	sp, #8
 801a9c8:	af00      	add	r7, sp, #0
 801a9ca:	6078      	str	r0, [r7, #4]
 801a9cc:	460b      	mov	r3, r1
 801a9ce:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801a9d0:	78fb      	ldrb	r3, [r7, #3]
 801a9d2:	2b0f      	cmp	r3, #15
 801a9d4:	d867      	bhi.n	801aaa6 <RegionUS915Verify+0xe2>
 801a9d6:	a201      	add	r2, pc, #4	; (adr r2, 801a9dc <RegionUS915Verify+0x18>)
 801a9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a9dc:	0801aa1d 	.word	0x0801aa1d
 801a9e0:	0801aaa7 	.word	0x0801aaa7
 801a9e4:	0801aaa7 	.word	0x0801aaa7
 801a9e8:	0801aaa7 	.word	0x0801aaa7
 801a9ec:	0801aaa7 	.word	0x0801aaa7
 801a9f0:	0801aa2b 	.word	0x0801aa2b
 801a9f4:	0801aa49 	.word	0x0801aa49
 801a9f8:	0801aa67 	.word	0x0801aa67
 801a9fc:	0801aaa7 	.word	0x0801aaa7
 801aa00:	0801aa85 	.word	0x0801aa85
 801aa04:	0801aa85 	.word	0x0801aa85
 801aa08:	0801aaa7 	.word	0x0801aaa7
 801aa0c:	0801aaa7 	.word	0x0801aaa7
 801aa10:	0801aaa7 	.word	0x0801aaa7
 801aa14:	0801aaa7 	.word	0x0801aaa7
 801aa18:	0801aaa3 	.word	0x0801aaa3
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	4618      	mov	r0, r3
 801aa22:	f7ff fca1 	bl	801a368 <VerifyRfFreq>
 801aa26:	4603      	mov	r3, r0
 801aa28:	e03e      	b.n	801aaa8 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	f993 3000 	ldrsb.w	r3, [r3]
 801aa30:	2204      	movs	r2, #4
 801aa32:	2100      	movs	r1, #0
 801aa34:	4618      	mov	r0, r3
 801aa36:	f7fd fd3a 	bl	80184ae <RegionCommonValueInRange>
 801aa3a:	4603      	mov	r3, r0
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	bf14      	ite	ne
 801aa40:	2301      	movne	r3, #1
 801aa42:	2300      	moveq	r3, #0
 801aa44:	b2db      	uxtb	r3, r3
 801aa46:	e02f      	b.n	801aaa8 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	f993 3000 	ldrsb.w	r3, [r3]
 801aa4e:	2205      	movs	r2, #5
 801aa50:	2100      	movs	r1, #0
 801aa52:	4618      	mov	r0, r3
 801aa54:	f7fd fd2b 	bl	80184ae <RegionCommonValueInRange>
 801aa58:	4603      	mov	r3, r0
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	bf14      	ite	ne
 801aa5e:	2301      	movne	r3, #1
 801aa60:	2300      	moveq	r3, #0
 801aa62:	b2db      	uxtb	r3, r3
 801aa64:	e020      	b.n	801aaa8 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	f993 3000 	ldrsb.w	r3, [r3]
 801aa6c:	220d      	movs	r2, #13
 801aa6e:	2108      	movs	r1, #8
 801aa70:	4618      	mov	r0, r3
 801aa72:	f7fd fd1c 	bl	80184ae <RegionCommonValueInRange>
 801aa76:	4603      	mov	r3, r0
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	bf14      	ite	ne
 801aa7c:	2301      	movne	r3, #1
 801aa7e:	2300      	moveq	r3, #0
 801aa80:	b2db      	uxtb	r3, r3
 801aa82:	e011      	b.n	801aaa8 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	f993 3000 	ldrsb.w	r3, [r3]
 801aa8a:	220e      	movs	r2, #14
 801aa8c:	2100      	movs	r1, #0
 801aa8e:	4618      	mov	r0, r3
 801aa90:	f7fd fd0d 	bl	80184ae <RegionCommonValueInRange>
 801aa94:	4603      	mov	r3, r0
 801aa96:	2b00      	cmp	r3, #0
 801aa98:	bf14      	ite	ne
 801aa9a:	2301      	movne	r3, #1
 801aa9c:	2300      	moveq	r3, #0
 801aa9e:	b2db      	uxtb	r3, r3
 801aaa0:	e002      	b.n	801aaa8 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 801aaa2:	2300      	movs	r3, #0
 801aaa4:	e000      	b.n	801aaa8 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 801aaa6:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	3708      	adds	r7, #8
 801aaac:	46bd      	mov	sp, r7
 801aaae:	bd80      	pop	{r7, pc}

0801aab0 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801aab0:	b480      	push	{r7}
 801aab2:	b085      	sub	sp, #20
 801aab4:	af00      	add	r7, sp, #0
 801aab6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	7a1b      	ldrb	r3, [r3, #8]
 801aabc:	2b10      	cmp	r3, #16
 801aabe:	d160      	bne.n	801ab82 <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	685b      	ldr	r3, [r3, #4]
 801aac4:	330f      	adds	r3, #15
 801aac6:	781b      	ldrb	r3, [r3, #0]
 801aac8:	2b01      	cmp	r3, #1
 801aaca:	d15c      	bne.n	801ab86 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801aacc:	2300      	movs	r3, #0
 801aace:	73fb      	strb	r3, [r7, #15]
 801aad0:	2300      	movs	r3, #0
 801aad2:	73bb      	strb	r3, [r7, #14]
 801aad4:	e051      	b.n	801ab7a <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	685a      	ldr	r2, [r3, #4]
 801aada:	7bbb      	ldrb	r3, [r7, #14]
 801aadc:	4413      	add	r3, r2
 801aade:	7819      	ldrb	r1, [r3, #0]
 801aae0:	4b2b      	ldr	r3, [pc, #172]	; (801ab90 <RegionUS915ApplyCFList+0xe0>)
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	7bfa      	ldrb	r2, [r7, #15]
 801aae6:	b289      	uxth	r1, r1
 801aae8:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801aaec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801aaf0:	4b27      	ldr	r3, [pc, #156]	; (801ab90 <RegionUS915ApplyCFList+0xe0>)
 801aaf2:	681b      	ldr	r3, [r3, #0]
 801aaf4:	7bfa      	ldrb	r2, [r7, #15]
 801aaf6:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801aafa:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	685a      	ldr	r2, [r3, #4]
 801ab02:	7bbb      	ldrb	r3, [r7, #14]
 801ab04:	3301      	adds	r3, #1
 801ab06:	4413      	add	r3, r2
 801ab08:	781b      	ldrb	r3, [r3, #0]
 801ab0a:	b29b      	uxth	r3, r3
 801ab0c:	021b      	lsls	r3, r3, #8
 801ab0e:	b299      	uxth	r1, r3
 801ab10:	4b1f      	ldr	r3, [pc, #124]	; (801ab90 <RegionUS915ApplyCFList+0xe0>)
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	7bfa      	ldrb	r2, [r7, #15]
 801ab16:	4301      	orrs	r1, r0
 801ab18:	b289      	uxth	r1, r1
 801ab1a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ab1e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801ab22:	7bfb      	ldrb	r3, [r7, #15]
 801ab24:	2b04      	cmp	r3, #4
 801ab26:	d10f      	bne.n	801ab48 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801ab28:	4b19      	ldr	r3, [pc, #100]	; (801ab90 <RegionUS915ApplyCFList+0xe0>)
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	7bfa      	ldrb	r2, [r7, #15]
 801ab2e:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ab32:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801ab36:	4b16      	ldr	r3, [pc, #88]	; (801ab90 <RegionUS915ApplyCFList+0xe0>)
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	7bfa      	ldrb	r2, [r7, #15]
 801ab3c:	b2c9      	uxtb	r1, r1
 801ab3e:	b289      	uxth	r1, r1
 801ab40:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ab44:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801ab48:	4b12      	ldr	r3, [pc, #72]	; (801ab94 <RegionUS915ApplyCFList+0xe4>)
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	7bfa      	ldrb	r2, [r7, #15]
 801ab4e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801ab52:	4b0f      	ldr	r3, [pc, #60]	; (801ab90 <RegionUS915ApplyCFList+0xe0>)
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	7bfa      	ldrb	r2, [r7, #15]
 801ab58:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ab5c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801ab60:	4b0c      	ldr	r3, [pc, #48]	; (801ab94 <RegionUS915ApplyCFList+0xe4>)
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	7bfa      	ldrb	r2, [r7, #15]
 801ab66:	4001      	ands	r1, r0
 801ab68:	b289      	uxth	r1, r1
 801ab6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801ab6e:	7bfb      	ldrb	r3, [r7, #15]
 801ab70:	3301      	adds	r3, #1
 801ab72:	73fb      	strb	r3, [r7, #15]
 801ab74:	7bbb      	ldrb	r3, [r7, #14]
 801ab76:	3302      	adds	r3, #2
 801ab78:	73bb      	strb	r3, [r7, #14]
 801ab7a:	7bfb      	ldrb	r3, [r7, #15]
 801ab7c:	2b04      	cmp	r3, #4
 801ab7e:	d9aa      	bls.n	801aad6 <RegionUS915ApplyCFList+0x26>
 801ab80:	e002      	b.n	801ab88 <RegionUS915ApplyCFList+0xd8>
        return;
 801ab82:	bf00      	nop
 801ab84:	e000      	b.n	801ab88 <RegionUS915ApplyCFList+0xd8>
        return;
 801ab86:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 801ab88:	3714      	adds	r7, #20
 801ab8a:	46bd      	mov	sp, r7
 801ab8c:	bc80      	pop	{r7}
 801ab8e:	4770      	bx	lr
 801ab90:	20001ad4 	.word	0x20001ad4
 801ab94:	20001ad0 	.word	0x20001ad0

0801ab98 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801ab98:	b580      	push	{r7, lr}
 801ab9a:	b084      	sub	sp, #16
 801ab9c:	af00      	add	r7, sp, #0
 801ab9e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	2204      	movs	r2, #4
 801aba6:	2100      	movs	r1, #0
 801aba8:	4618      	mov	r0, r3
 801abaa:	f7fd fcd1 	bl	8018550 <RegionCommonCountChannels>
 801abae:	4603      	mov	r3, r0
 801abb0:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801abb2:	7bbb      	ldrb	r3, [r7, #14]
 801abb4:	2b01      	cmp	r3, #1
 801abb6:	d804      	bhi.n	801abc2 <RegionUS915ChanMaskSet+0x2a>
 801abb8:	7bbb      	ldrb	r3, [r7, #14]
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d001      	beq.n	801abc2 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801abbe:	2300      	movs	r3, #0
 801abc0:	e04a      	b.n	801ac58 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	791b      	ldrb	r3, [r3, #4]
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d002      	beq.n	801abd0 <RegionUS915ChanMaskSet+0x38>
 801abca:	2b01      	cmp	r3, #1
 801abcc:	d036      	beq.n	801ac3c <RegionUS915ChanMaskSet+0xa4>
 801abce:	e040      	b.n	801ac52 <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801abd0:	4b23      	ldr	r3, [pc, #140]	; (801ac60 <RegionUS915ChanMaskSet+0xc8>)
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	2206      	movs	r2, #6
 801abde:	4619      	mov	r1, r3
 801abe0:	f7fd fce2 	bl	80185a8 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801abe4:	4b1e      	ldr	r3, [pc, #120]	; (801ac60 <RegionUS915ChanMaskSet+0xc8>)
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 801abec:	4b1c      	ldr	r3, [pc, #112]	; (801ac60 <RegionUS915ChanMaskSet+0xc8>)
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	b2d2      	uxtb	r2, r2
 801abf2:	b292      	uxth	r2, r2
 801abf4:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801abf8:	4b19      	ldr	r3, [pc, #100]	; (801ac60 <RegionUS915ChanMaskSet+0xc8>)
 801abfa:	681b      	ldr	r3, [r3, #0]
 801abfc:	2200      	movs	r2, #0
 801abfe:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801ac02:	2300      	movs	r3, #0
 801ac04:	73fb      	strb	r3, [r7, #15]
 801ac06:	e015      	b.n	801ac34 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801ac08:	4b16      	ldr	r3, [pc, #88]	; (801ac64 <RegionUS915ChanMaskSet+0xcc>)
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	7bfa      	ldrb	r2, [r7, #15]
 801ac0e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801ac12:	4b13      	ldr	r3, [pc, #76]	; (801ac60 <RegionUS915ChanMaskSet+0xc8>)
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	7bfa      	ldrb	r2, [r7, #15]
 801ac18:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ac1c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801ac20:	4b10      	ldr	r3, [pc, #64]	; (801ac64 <RegionUS915ChanMaskSet+0xcc>)
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	7bfa      	ldrb	r2, [r7, #15]
 801ac26:	4001      	ands	r1, r0
 801ac28:	b289      	uxth	r1, r1
 801ac2a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801ac2e:	7bfb      	ldrb	r3, [r7, #15]
 801ac30:	3301      	adds	r3, #1
 801ac32:	73fb      	strb	r3, [r7, #15]
 801ac34:	7bfb      	ldrb	r3, [r7, #15]
 801ac36:	2b05      	cmp	r3, #5
 801ac38:	d9e6      	bls.n	801ac08 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 801ac3a:	e00c      	b.n	801ac56 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801ac3c:	4b08      	ldr	r3, [pc, #32]	; (801ac60 <RegionUS915ChanMaskSet+0xc8>)
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	2206      	movs	r2, #6
 801ac4a:	4619      	mov	r1, r3
 801ac4c:	f7fd fcac 	bl	80185a8 <RegionCommonChanMaskCopy>
            break;
 801ac50:	e001      	b.n	801ac56 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 801ac52:	2300      	movs	r3, #0
 801ac54:	e000      	b.n	801ac58 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 801ac56:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ac58:	4618      	mov	r0, r3
 801ac5a:	3710      	adds	r7, #16
 801ac5c:	46bd      	mov	sp, r7
 801ac5e:	bd80      	pop	{r7, pc}
 801ac60:	20001ad4 	.word	0x20001ad4
 801ac64:	20001ad0 	.word	0x20001ad0

0801ac68 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	b088      	sub	sp, #32
 801ac6c:	af02      	add	r7, sp, #8
 801ac6e:	60ba      	str	r2, [r7, #8]
 801ac70:	607b      	str	r3, [r7, #4]
 801ac72:	4603      	mov	r3, r0
 801ac74:	73fb      	strb	r3, [r7, #15]
 801ac76:	460b      	mov	r3, r1
 801ac78:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801ac7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ac82:	2b0d      	cmp	r3, #13
 801ac84:	bfa8      	it	ge
 801ac86:	230d      	movge	r3, #13
 801ac88:	b25a      	sxtb	r2, r3
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ac94:	4916      	ldr	r1, [pc, #88]	; (801acf0 <RegionUS915ComputeRxWindowParameters+0x88>)
 801ac96:	4618      	mov	r0, r3
 801ac98:	f7fe f926 	bl	8018ee8 <RegionCommonGetBandwidth>
 801ac9c:	4603      	mov	r3, r0
 801ac9e:	b2da      	uxtb	r2, r3
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801acaa:	461a      	mov	r2, r3
 801acac:	4b11      	ldr	r3, [pc, #68]	; (801acf4 <RegionUS915ComputeRxWindowParameters+0x8c>)
 801acae:	5c9a      	ldrb	r2, [r3, r2]
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801acb6:	4619      	mov	r1, r3
 801acb8:	4b0d      	ldr	r3, [pc, #52]	; (801acf0 <RegionUS915ComputeRxWindowParameters+0x88>)
 801acba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801acbe:	4619      	mov	r1, r3
 801acc0:	4610      	mov	r0, r2
 801acc2:	f7fd fe8f 	bl	80189e4 <RegionCommonComputeSymbolTimeLoRa>
 801acc6:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801acc8:	4b0b      	ldr	r3, [pc, #44]	; (801acf8 <RegionUS915ComputeRxWindowParameters+0x90>)
 801acca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801accc:	4798      	blx	r3
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	3308      	adds	r3, #8
 801acd2:	687a      	ldr	r2, [r7, #4]
 801acd4:	320c      	adds	r2, #12
 801acd6:	7bb9      	ldrb	r1, [r7, #14]
 801acd8:	9201      	str	r2, [sp, #4]
 801acda:	9300      	str	r3, [sp, #0]
 801acdc:	4603      	mov	r3, r0
 801acde:	68ba      	ldr	r2, [r7, #8]
 801ace0:	6978      	ldr	r0, [r7, #20]
 801ace2:	f7fd fea5 	bl	8018a30 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801ace6:	bf00      	nop
 801ace8:	3718      	adds	r7, #24
 801acea:	46bd      	mov	sp, r7
 801acec:	bd80      	pop	{r7, pc}
 801acee:	bf00      	nop
 801acf0:	08021f08 	.word	0x08021f08
 801acf4:	08021ef8 	.word	0x08021ef8
 801acf8:	08021f7c 	.word	0x08021f7c

0801acfc <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801acfc:	b590      	push	{r4, r7, lr}
 801acfe:	b091      	sub	sp, #68	; 0x44
 801ad00:	af0a      	add	r7, sp, #40	; 0x28
 801ad02:	6078      	str	r0, [r7, #4]
 801ad04:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	785b      	ldrb	r3, [r3, #1]
 801ad0a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801ad0c:	2300      	movs	r3, #0
 801ad0e:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 801ad10:	2300      	movs	r3, #0
 801ad12:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	685b      	ldr	r3, [r3, #4]
 801ad18:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801ad1a:	4b34      	ldr	r3, [pc, #208]	; (801adec <RegionUS915RxConfig+0xf0>)
 801ad1c:	685b      	ldr	r3, [r3, #4]
 801ad1e:	4798      	blx	r3
 801ad20:	4603      	mov	r3, r0
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d001      	beq.n	801ad2a <RegionUS915RxConfig+0x2e>
    {
        return false;
 801ad26:	2300      	movs	r3, #0
 801ad28:	e05c      	b.n	801ade4 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	7cdb      	ldrb	r3, [r3, #19]
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d109      	bne.n	801ad46 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	781b      	ldrb	r3, [r3, #0]
 801ad36:	f003 0307 	and.w	r3, r3, #7
 801ad3a:	4a2d      	ldr	r2, [pc, #180]	; (801adf0 <RegionUS915RxConfig+0xf4>)
 801ad3c:	fb03 f202 	mul.w	r2, r3, r2
 801ad40:	4b2c      	ldr	r3, [pc, #176]	; (801adf4 <RegionUS915RxConfig+0xf8>)
 801ad42:	4413      	add	r3, r2
 801ad44:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801ad46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad4a:	4a2b      	ldr	r2, [pc, #172]	; (801adf8 <RegionUS915RxConfig+0xfc>)
 801ad4c:	5cd3      	ldrb	r3, [r2, r3]
 801ad4e:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801ad50:	4b26      	ldr	r3, [pc, #152]	; (801adec <RegionUS915RxConfig+0xf0>)
 801ad52:	68db      	ldr	r3, [r3, #12]
 801ad54:	6938      	ldr	r0, [r7, #16]
 801ad56:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801ad58:	4b24      	ldr	r3, [pc, #144]	; (801adec <RegionUS915RxConfig+0xf0>)
 801ad5a:	699c      	ldr	r4, [r3, #24]
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	789b      	ldrb	r3, [r3, #2]
 801ad60:	4618      	mov	r0, r3
 801ad62:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	689b      	ldr	r3, [r3, #8]
 801ad6a:	b29b      	uxth	r3, r3
 801ad6c:	687a      	ldr	r2, [r7, #4]
 801ad6e:	7c92      	ldrb	r2, [r2, #18]
 801ad70:	9209      	str	r2, [sp, #36]	; 0x24
 801ad72:	2201      	movs	r2, #1
 801ad74:	9208      	str	r2, [sp, #32]
 801ad76:	2200      	movs	r2, #0
 801ad78:	9207      	str	r2, [sp, #28]
 801ad7a:	2200      	movs	r2, #0
 801ad7c:	9206      	str	r2, [sp, #24]
 801ad7e:	2200      	movs	r2, #0
 801ad80:	9205      	str	r2, [sp, #20]
 801ad82:	2200      	movs	r2, #0
 801ad84:	9204      	str	r2, [sp, #16]
 801ad86:	2200      	movs	r2, #0
 801ad88:	9203      	str	r2, [sp, #12]
 801ad8a:	9302      	str	r3, [sp, #8]
 801ad8c:	2308      	movs	r3, #8
 801ad8e:	9301      	str	r3, [sp, #4]
 801ad90:	2300      	movs	r3, #0
 801ad92:	9300      	str	r3, [sp, #0]
 801ad94:	2301      	movs	r3, #1
 801ad96:	460a      	mov	r2, r1
 801ad98:	4601      	mov	r1, r0
 801ad9a:	2001      	movs	r0, #1
 801ad9c:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	7c5b      	ldrb	r3, [r3, #17]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d005      	beq.n	801adb2 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801ada6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801adaa:	4a14      	ldr	r2, [pc, #80]	; (801adfc <RegionUS915RxConfig+0x100>)
 801adac:	5cd3      	ldrb	r3, [r2, r3]
 801adae:	75fb      	strb	r3, [r7, #23]
 801adb0:	e004      	b.n	801adbc <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801adb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801adb6:	4a12      	ldr	r2, [pc, #72]	; (801ae00 <RegionUS915RxConfig+0x104>)
 801adb8:	5cd3      	ldrb	r3, [r2, r3]
 801adba:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801adbc:	4b0b      	ldr	r3, [pc, #44]	; (801adec <RegionUS915RxConfig+0xf0>)
 801adbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801adc0:	7dfa      	ldrb	r2, [r7, #23]
 801adc2:	320d      	adds	r2, #13
 801adc4:	b2d2      	uxtb	r2, r2
 801adc6:	4611      	mov	r1, r2
 801adc8:	2001      	movs	r0, #1
 801adca:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	7cdb      	ldrb	r3, [r3, #19]
 801add0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801add4:	6939      	ldr	r1, [r7, #16]
 801add6:	4618      	mov	r0, r3
 801add8:	f7fe f8a4 	bl	8018f24 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801addc:	683b      	ldr	r3, [r7, #0]
 801adde:	7bfa      	ldrb	r2, [r7, #15]
 801ade0:	701a      	strb	r2, [r3, #0]
    return true;
 801ade2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ade4:	4618      	mov	r0, r3
 801ade6:	371c      	adds	r7, #28
 801ade8:	46bd      	mov	sp, r7
 801adea:	bd90      	pop	{r4, r7, pc}
 801adec:	08021f7c 	.word	0x08021f7c
 801adf0:	000927c0 	.word	0x000927c0
 801adf4:	370870a0 	.word	0x370870a0
 801adf8:	08021ef8 	.word	0x08021ef8
 801adfc:	08021f6c 	.word	0x08021f6c
 801ae00:	08021f5c 	.word	0x08021f5c

0801ae04 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801ae04:	b590      	push	{r4, r7, lr}
 801ae06:	b093      	sub	sp, #76	; 0x4c
 801ae08:	af0a      	add	r7, sp, #40	; 0x28
 801ae0a:	60f8      	str	r0, [r7, #12]
 801ae0c:	60b9      	str	r1, [r7, #8]
 801ae0e:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801ae10:	68fb      	ldr	r3, [r7, #12]
 801ae12:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ae16:	461a      	mov	r2, r3
 801ae18:	4b49      	ldr	r3, [pc, #292]	; (801af40 <RegionUS915TxConfig+0x13c>)
 801ae1a:	5c9b      	ldrb	r3, [r3, r2]
 801ae1c:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801ae1e:	68fb      	ldr	r3, [r7, #12]
 801ae20:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801ae24:	4b47      	ldr	r3, [pc, #284]	; (801af44 <RegionUS915TxConfig+0x140>)
 801ae26:	681a      	ldr	r2, [r3, #0]
 801ae28:	4b47      	ldr	r3, [pc, #284]	; (801af48 <RegionUS915TxConfig+0x144>)
 801ae2a:	6819      	ldr	r1, [r3, #0]
 801ae2c:	68fb      	ldr	r3, [r7, #12]
 801ae2e:	781b      	ldrb	r3, [r3, #0]
 801ae30:	461c      	mov	r4, r3
 801ae32:	4623      	mov	r3, r4
 801ae34:	005b      	lsls	r3, r3, #1
 801ae36:	4423      	add	r3, r4
 801ae38:	009b      	lsls	r3, r3, #2
 801ae3a:	440b      	add	r3, r1
 801ae3c:	3309      	adds	r3, #9
 801ae3e:	781b      	ldrb	r3, [r3, #0]
 801ae40:	4619      	mov	r1, r3
 801ae42:	460b      	mov	r3, r1
 801ae44:	005b      	lsls	r3, r3, #1
 801ae46:	440b      	add	r3, r1
 801ae48:	00db      	lsls	r3, r3, #3
 801ae4a:	4413      	add	r3, r2
 801ae4c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801ae56:	4b3c      	ldr	r3, [pc, #240]	; (801af48 <RegionUS915TxConfig+0x144>)
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801ae5e:	f7ff fa4d 	bl	801a2fc <LimitTxPower>
 801ae62:	4603      	mov	r3, r0
 801ae64:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801ae66:	68fb      	ldr	r3, [r7, #12]
 801ae68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ae6c:	4937      	ldr	r1, [pc, #220]	; (801af4c <RegionUS915TxConfig+0x148>)
 801ae6e:	4618      	mov	r0, r3
 801ae70:	f7fe f83a 	bl	8018ee8 <RegionCommonGetBandwidth>
 801ae74:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801ae76:	2300      	movs	r3, #0
 801ae78:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801ae7a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801ae7e:	f04f 0200 	mov.w	r2, #0
 801ae82:	4933      	ldr	r1, [pc, #204]	; (801af50 <RegionUS915TxConfig+0x14c>)
 801ae84:	4618      	mov	r0, r3
 801ae86:	f7fd fe8b 	bl	8018ba0 <RegionCommonComputeTxPower>
 801ae8a:	4603      	mov	r3, r0
 801ae8c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801ae8e:	4b31      	ldr	r3, [pc, #196]	; (801af54 <RegionUS915TxConfig+0x150>)
 801ae90:	68da      	ldr	r2, [r3, #12]
 801ae92:	4b2d      	ldr	r3, [pc, #180]	; (801af48 <RegionUS915TxConfig+0x144>)
 801ae94:	6819      	ldr	r1, [r3, #0]
 801ae96:	68fb      	ldr	r3, [r7, #12]
 801ae98:	781b      	ldrb	r3, [r3, #0]
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	4603      	mov	r3, r0
 801ae9e:	005b      	lsls	r3, r3, #1
 801aea0:	4403      	add	r3, r0
 801aea2:	009b      	lsls	r3, r3, #2
 801aea4:	440b      	add	r3, r1
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	4618      	mov	r0, r3
 801aeaa:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801aeac:	4b29      	ldr	r3, [pc, #164]	; (801af54 <RegionUS915TxConfig+0x150>)
 801aeae:	69dc      	ldr	r4, [r3, #28]
 801aeb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801aeb4:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801aeb8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801aebc:	9208      	str	r2, [sp, #32]
 801aebe:	2200      	movs	r2, #0
 801aec0:	9207      	str	r2, [sp, #28]
 801aec2:	2200      	movs	r2, #0
 801aec4:	9206      	str	r2, [sp, #24]
 801aec6:	2200      	movs	r2, #0
 801aec8:	9205      	str	r2, [sp, #20]
 801aeca:	2201      	movs	r2, #1
 801aecc:	9204      	str	r2, [sp, #16]
 801aece:	2200      	movs	r2, #0
 801aed0:	9203      	str	r2, [sp, #12]
 801aed2:	2208      	movs	r2, #8
 801aed4:	9202      	str	r2, [sp, #8]
 801aed6:	2201      	movs	r2, #1
 801aed8:	9201      	str	r2, [sp, #4]
 801aeda:	9300      	str	r3, [sp, #0]
 801aedc:	69bb      	ldr	r3, [r7, #24]
 801aede:	2200      	movs	r2, #0
 801aee0:	2001      	movs	r0, #1
 801aee2:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801aee4:	4b18      	ldr	r3, [pc, #96]	; (801af48 <RegionUS915TxConfig+0x144>)
 801aee6:	681a      	ldr	r2, [r3, #0]
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	781b      	ldrb	r3, [r3, #0]
 801aeec:	4619      	mov	r1, r3
 801aeee:	460b      	mov	r3, r1
 801aef0:	005b      	lsls	r3, r3, #1
 801aef2:	440b      	add	r3, r1
 801aef4:	009b      	lsls	r3, r3, #2
 801aef6:	4413      	add	r3, r2
 801aef8:	681a      	ldr	r2, [r3, #0]
 801aefa:	68fb      	ldr	r3, [r7, #12]
 801aefc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801af00:	4619      	mov	r1, r3
 801af02:	4610      	mov	r0, r2
 801af04:	f7fe f840 	bl	8018f88 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801af08:	4b12      	ldr	r3, [pc, #72]	; (801af54 <RegionUS915TxConfig+0x150>)
 801af0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801af0c:	68fa      	ldr	r2, [r7, #12]
 801af0e:	8992      	ldrh	r2, [r2, #12]
 801af10:	b2d2      	uxtb	r2, r2
 801af12:	4611      	mov	r1, r2
 801af14:	2001      	movs	r0, #1
 801af16:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801af18:	68fb      	ldr	r3, [r7, #12]
 801af1a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801af1e:	68fb      	ldr	r3, [r7, #12]
 801af20:	899b      	ldrh	r3, [r3, #12]
 801af22:	4619      	mov	r1, r3
 801af24:	4610      	mov	r0, r2
 801af26:	f7ff fa63 	bl	801a3f0 <GetTimeOnAir>
 801af2a:	4602      	mov	r2, r0
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801af30:	68bb      	ldr	r3, [r7, #8]
 801af32:	7fba      	ldrb	r2, [r7, #30]
 801af34:	701a      	strb	r2, [r3, #0]
    return true;
 801af36:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801af38:	4618      	mov	r0, r3
 801af3a:	3724      	adds	r7, #36	; 0x24
 801af3c:	46bd      	mov	sp, r7
 801af3e:	bd90      	pop	{r4, r7, pc}
 801af40:	08021ef8 	.word	0x08021ef8
 801af44:	20001ad8 	.word	0x20001ad8
 801af48:	20001ad4 	.word	0x20001ad4
 801af4c:	08021f08 	.word	0x08021f08
 801af50:	41f00000 	.word	0x41f00000
 801af54:	08021f7c 	.word	0x08021f7c

0801af58 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801af58:	b590      	push	{r4, r7, lr}
 801af5a:	b097      	sub	sp, #92	; 0x5c
 801af5c:	af00      	add	r7, sp, #0
 801af5e:	60f8      	str	r0, [r7, #12]
 801af60:	60b9      	str	r1, [r7, #8]
 801af62:	607a      	str	r2, [r7, #4]
 801af64:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801af66:	2307      	movs	r3, #7
 801af68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801af6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801af70:	2200      	movs	r2, #0
 801af72:	601a      	str	r2, [r3, #0]
 801af74:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801af76:	2300      	movs	r3, #0
 801af78:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 801af7c:	2300      	movs	r3, #0
 801af7e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801af82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801af86:	2200      	movs	r2, #0
 801af88:	601a      	str	r2, [r3, #0]
 801af8a:	605a      	str	r2, [r3, #4]
 801af8c:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801af8e:	4b97      	ldr	r3, [pc, #604]	; (801b1ec <RegionUS915LinkAdrReq+0x294>)
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	f503 7158 	add.w	r1, r3, #864	; 0x360
 801af96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801af9a:	2206      	movs	r2, #6
 801af9c:	4618      	mov	r0, r3
 801af9e:	f7fd fb03 	bl	80185a8 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801afa2:	e11b      	b.n	801b1dc <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	685a      	ldr	r2, [r3, #4]
 801afa8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 801afac:	4413      	add	r3, r2
 801afae:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801afb2:	4611      	mov	r1, r2
 801afb4:	4618      	mov	r0, r3
 801afb6:	f7fd fc3b 	bl	8018830 <RegionCommonParseLinkAdrReq>
 801afba:	4603      	mov	r3, r0
 801afbc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 801afc0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	f000 8113 	beq.w	801b1f0 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801afca:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801afce:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801afd2:	4413      	add	r3, r2
 801afd4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801afd8:	2307      	movs	r3, #7
 801afda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801afde:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801afe2:	2b06      	cmp	r3, #6
 801afe4:	d116      	bne.n	801b014 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801afe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801afea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 801afee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aff2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 801aff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801affa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 801affe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b002:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801b006:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801b00a:	b2db      	uxtb	r3, r3
 801b00c:	b29b      	uxth	r3, r3
 801b00e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b012:	e0e3      	b.n	801b1dc <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801b014:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b018:	2b07      	cmp	r3, #7
 801b01a:	d112      	bne.n	801b042 <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801b01c:	2300      	movs	r3, #0
 801b01e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 801b022:	2300      	movs	r3, #0
 801b024:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 801b028:	2300      	movs	r3, #0
 801b02a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 801b02e:	2300      	movs	r3, #0
 801b030:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801b034:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801b038:	b2db      	uxtb	r3, r3
 801b03a:	b29b      	uxth	r3, r3
 801b03c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b040:	e0cc      	b.n	801b1dc <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801b042:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b046:	2b05      	cmp	r3, #5
 801b048:	f040 80bf 	bne.w	801b1ca <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 801b04c:	2301      	movs	r3, #1
 801b04e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801b052:	2300      	movs	r3, #0
 801b054:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801b058:	2300      	movs	r3, #0
 801b05a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801b05e:	e0ae      	b.n	801b1be <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801b060:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801b064:	b2da      	uxtb	r2, r3
 801b066:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b06a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b06e:	fa01 f303 	lsl.w	r3, r1, r3
 801b072:	4013      	ands	r3, r2
 801b074:	2b00      	cmp	r3, #0
 801b076:	d04d      	beq.n	801b114 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 801b078:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b07c:	f003 0301 	and.w	r3, r3, #1
 801b080:	b2db      	uxtb	r3, r3
 801b082:	2b00      	cmp	r3, #0
 801b084:	d120      	bne.n	801b0c8 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801b086:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b08a:	005b      	lsls	r3, r3, #1
 801b08c:	3358      	adds	r3, #88	; 0x58
 801b08e:	443b      	add	r3, r7
 801b090:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b094:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b098:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 801b09c:	b292      	uxth	r2, r2
 801b09e:	005b      	lsls	r3, r3, #1
 801b0a0:	3358      	adds	r3, #88	; 0x58
 801b0a2:	443b      	add	r3, r7
 801b0a4:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801b0a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b0ac:	b21a      	sxth	r2, r3
 801b0ae:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b0b2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b0b6:	fa01 f303 	lsl.w	r3, r1, r3
 801b0ba:	b21b      	sxth	r3, r3
 801b0bc:	4313      	orrs	r3, r2
 801b0be:	b21b      	sxth	r3, r3
 801b0c0:	b29b      	uxth	r3, r3
 801b0c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b0c6:	e075      	b.n	801b1b4 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 801b0c8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b0cc:	005b      	lsls	r3, r3, #1
 801b0ce:	3358      	adds	r3, #88	; 0x58
 801b0d0:	443b      	add	r3, r7
 801b0d2:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b0d6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b0da:	f062 02ff 	orn	r2, r2, #255	; 0xff
 801b0de:	b292      	uxth	r2, r2
 801b0e0:	005b      	lsls	r3, r3, #1
 801b0e2:	3358      	adds	r3, #88	; 0x58
 801b0e4:	443b      	add	r3, r7
 801b0e6:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801b0ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b0ee:	b21a      	sxth	r2, r3
 801b0f0:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b0f4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b0f8:	fa01 f303 	lsl.w	r3, r1, r3
 801b0fc:	b21b      	sxth	r3, r3
 801b0fe:	4313      	orrs	r3, r2
 801b100:	b21b      	sxth	r3, r3
 801b102:	b29b      	uxth	r3, r3
 801b104:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801b108:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b10c:	3301      	adds	r3, #1
 801b10e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801b112:	e04f      	b.n	801b1b4 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801b114:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b118:	f003 0301 	and.w	r3, r3, #1
 801b11c:	b2db      	uxtb	r3, r3
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d122      	bne.n	801b168 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801b122:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b126:	005b      	lsls	r3, r3, #1
 801b128:	3358      	adds	r3, #88	; 0x58
 801b12a:	443b      	add	r3, r7
 801b12c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b130:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b134:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801b138:	b292      	uxth	r2, r2
 801b13a:	005b      	lsls	r3, r3, #1
 801b13c:	3358      	adds	r3, #88	; 0x58
 801b13e:	443b      	add	r3, r7
 801b140:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801b144:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b148:	b21a      	sxth	r2, r3
 801b14a:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b14e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b152:	fa01 f303 	lsl.w	r3, r1, r3
 801b156:	b21b      	sxth	r3, r3
 801b158:	43db      	mvns	r3, r3
 801b15a:	b21b      	sxth	r3, r3
 801b15c:	4013      	ands	r3, r2
 801b15e:	b21b      	sxth	r3, r3
 801b160:	b29b      	uxth	r3, r3
 801b162:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b166:	e025      	b.n	801b1b4 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801b168:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b16c:	005b      	lsls	r3, r3, #1
 801b16e:	3358      	adds	r3, #88	; 0x58
 801b170:	443b      	add	r3, r7
 801b172:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b176:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b17a:	b2d2      	uxtb	r2, r2
 801b17c:	b292      	uxth	r2, r2
 801b17e:	005b      	lsls	r3, r3, #1
 801b180:	3358      	adds	r3, #88	; 0x58
 801b182:	443b      	add	r3, r7
 801b184:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801b188:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b18c:	b21a      	sxth	r2, r3
 801b18e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b192:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b196:	fa01 f303 	lsl.w	r3, r1, r3
 801b19a:	b21b      	sxth	r3, r3
 801b19c:	43db      	mvns	r3, r3
 801b19e:	b21b      	sxth	r3, r3
 801b1a0:	4013      	ands	r3, r2
 801b1a2:	b21b      	sxth	r3, r3
 801b1a4:	b29b      	uxth	r3, r3
 801b1a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801b1aa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b1ae:	3301      	adds	r3, #1
 801b1b0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 801b1b4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b1b8:	3301      	adds	r3, #1
 801b1ba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801b1be:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b1c2:	2b07      	cmp	r3, #7
 801b1c4:	f67f af4c 	bls.w	801b060 <RegionUS915LinkAdrReq+0x108>
 801b1c8:	e008      	b.n	801b1dc <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801b1ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b1ce:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801b1d2:	005b      	lsls	r3, r3, #1
 801b1d4:	3358      	adds	r3, #88	; 0x58
 801b1d6:	443b      	add	r3, r7
 801b1d8:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801b1dc:	68fb      	ldr	r3, [r7, #12]
 801b1de:	7a1b      	ldrb	r3, [r3, #8]
 801b1e0:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b1e4:	429a      	cmp	r2, r3
 801b1e6:	f4ff aedd 	bcc.w	801afa4 <RegionUS915LinkAdrReq+0x4c>
 801b1ea:	e002      	b.n	801b1f2 <RegionUS915LinkAdrReq+0x29a>
 801b1ec:	20001ad4 	.word	0x20001ad4
            break; // break loop, since no more request has been found
 801b1f0:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801b1f2:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801b1f6:	2b03      	cmp	r3, #3
 801b1f8:	dc0f      	bgt.n	801b21a <RegionUS915LinkAdrReq+0x2c2>
 801b1fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b1fe:	2204      	movs	r2, #4
 801b200:	2100      	movs	r1, #0
 801b202:	4618      	mov	r0, r3
 801b204:	f7fd f9a4 	bl	8018550 <RegionCommonCountChannels>
 801b208:	4603      	mov	r3, r0
 801b20a:	2b01      	cmp	r3, #1
 801b20c:	d805      	bhi.n	801b21a <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 801b20e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b212:	f023 0301 	bic.w	r3, r3, #1
 801b216:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801b21a:	2302      	movs	r3, #2
 801b21c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	7a5b      	ldrb	r3, [r3, #9]
 801b224:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801b228:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b22c:	4618      	mov	r0, r3
 801b22e:	f7ff f90f 	bl	801a450 <RegionUS915GetPhyParam>
 801b232:	4603      	mov	r3, r0
 801b234:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 801b236:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b23a:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801b23c:	68fb      	ldr	r3, [r7, #12]
 801b23e:	7a9b      	ldrb	r3, [r3, #10]
 801b240:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801b242:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801b246:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801b248:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 801b24c:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801b24e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801b252:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801b254:	68fb      	ldr	r3, [r7, #12]
 801b256:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801b25a:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801b25c:	68fb      	ldr	r3, [r7, #12]
 801b25e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801b262:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801b264:	68fb      	ldr	r3, [r7, #12]
 801b266:	7b5b      	ldrb	r3, [r3, #13]
 801b268:	b25b      	sxtb	r3, r3
 801b26a:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801b26c:	2348      	movs	r3, #72	; 0x48
 801b26e:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801b272:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b276:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801b278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b27a:	b25b      	sxtb	r3, r3
 801b27c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801b280:	2304      	movs	r3, #4
 801b282:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801b286:	4b3f      	ldr	r3, [pc, #252]	; (801b384 <RegionUS915LinkAdrReq+0x42c>)
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801b28c:	230e      	movs	r3, #14
 801b28e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801b292:	2300      	movs	r3, #0
 801b294:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801b29e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801b2a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b2a6:	1c9a      	adds	r2, r3, #2
 801b2a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b2ac:	1c59      	adds	r1, r3, #1
 801b2ae:	f107 0014 	add.w	r0, r7, #20
 801b2b2:	4623      	mov	r3, r4
 801b2b4:	f7fd fb0d 	bl	80188d2 <RegionCommonLinkAdrReqVerifyParams>
 801b2b8:	4603      	mov	r3, r0
 801b2ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801b2be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b2c2:	2b07      	cmp	r3, #7
 801b2c4:	d147      	bne.n	801b356 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801b2c6:	4b2f      	ldr	r3, [pc, #188]	; (801b384 <RegionUS915LinkAdrReq+0x42c>)
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b2ce:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801b2d2:	2206      	movs	r2, #6
 801b2d4:	4618      	mov	r0, r3
 801b2d6:	f7fd f967 	bl	80185a8 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801b2da:	4b2b      	ldr	r3, [pc, #172]	; (801b388 <RegionUS915LinkAdrReq+0x430>)
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	8819      	ldrh	r1, [r3, #0]
 801b2e0:	4b28      	ldr	r3, [pc, #160]	; (801b384 <RegionUS915LinkAdrReq+0x42c>)
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801b2e8:	4b27      	ldr	r3, [pc, #156]	; (801b388 <RegionUS915LinkAdrReq+0x430>)
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	400a      	ands	r2, r1
 801b2ee:	b292      	uxth	r2, r2
 801b2f0:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801b2f2:	4b25      	ldr	r3, [pc, #148]	; (801b388 <RegionUS915LinkAdrReq+0x430>)
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	8859      	ldrh	r1, [r3, #2]
 801b2f8:	4b22      	ldr	r3, [pc, #136]	; (801b384 <RegionUS915LinkAdrReq+0x42c>)
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 801b300:	4b21      	ldr	r3, [pc, #132]	; (801b388 <RegionUS915LinkAdrReq+0x430>)
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	400a      	ands	r2, r1
 801b306:	b292      	uxth	r2, r2
 801b308:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801b30a:	4b1f      	ldr	r3, [pc, #124]	; (801b388 <RegionUS915LinkAdrReq+0x430>)
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	8899      	ldrh	r1, [r3, #4]
 801b310:	4b1c      	ldr	r3, [pc, #112]	; (801b384 <RegionUS915LinkAdrReq+0x42c>)
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 801b318:	4b1b      	ldr	r3, [pc, #108]	; (801b388 <RegionUS915LinkAdrReq+0x430>)
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	400a      	ands	r2, r1
 801b31e:	b292      	uxth	r2, r2
 801b320:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801b322:	4b19      	ldr	r3, [pc, #100]	; (801b388 <RegionUS915LinkAdrReq+0x430>)
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	88d9      	ldrh	r1, [r3, #6]
 801b328:	4b16      	ldr	r3, [pc, #88]	; (801b384 <RegionUS915LinkAdrReq+0x42c>)
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 801b330:	4b15      	ldr	r3, [pc, #84]	; (801b388 <RegionUS915LinkAdrReq+0x430>)
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	400a      	ands	r2, r1
 801b336:	b292      	uxth	r2, r2
 801b338:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b33a:	4b12      	ldr	r3, [pc, #72]	; (801b384 <RegionUS915LinkAdrReq+0x42c>)
 801b33c:	681a      	ldr	r2, [r3, #0]
 801b33e:	4b12      	ldr	r3, [pc, #72]	; (801b388 <RegionUS915LinkAdrReq+0x430>)
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b346:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801b348:	4b0e      	ldr	r3, [pc, #56]	; (801b384 <RegionUS915LinkAdrReq+0x42c>)
 801b34a:	681a      	ldr	r2, [r3, #0]
 801b34c:	4b0e      	ldr	r3, [pc, #56]	; (801b388 <RegionUS915LinkAdrReq+0x430>)
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801b354:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801b356:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 801b35a:	68bb      	ldr	r3, [r7, #8]
 801b35c:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801b35e:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801b366:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801b36a:	683b      	ldr	r3, [r7, #0]
 801b36c:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801b36e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b370:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b374:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801b376:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801b37a:	4618      	mov	r0, r3
 801b37c:	375c      	adds	r7, #92	; 0x5c
 801b37e:	46bd      	mov	sp, r7
 801b380:	bd90      	pop	{r4, r7, pc}
 801b382:	bf00      	nop
 801b384:	20001ad4 	.word	0x20001ad4
 801b388:	20001ad0 	.word	0x20001ad0

0801b38c <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801b38c:	b580      	push	{r7, lr}
 801b38e:	b084      	sub	sp, #16
 801b390:	af00      	add	r7, sp, #0
 801b392:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801b394:	2307      	movs	r3, #7
 801b396:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	685b      	ldr	r3, [r3, #4]
 801b39c:	4618      	mov	r0, r3
 801b39e:	f7fe ffe3 	bl	801a368 <VerifyRfFreq>
 801b3a2:	4603      	mov	r3, r0
 801b3a4:	f083 0301 	eor.w	r3, r3, #1
 801b3a8:	b2db      	uxtb	r3, r3
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d003      	beq.n	801b3b6 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801b3ae:	7bfb      	ldrb	r3, [r7, #15]
 801b3b0:	f023 0301 	bic.w	r3, r3, #1
 801b3b4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	f993 3000 	ldrsb.w	r3, [r3]
 801b3bc:	220d      	movs	r2, #13
 801b3be:	2108      	movs	r1, #8
 801b3c0:	4618      	mov	r0, r3
 801b3c2:	f7fd f874 	bl	80184ae <RegionCommonValueInRange>
 801b3c6:	4603      	mov	r3, r0
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d103      	bne.n	801b3d4 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 801b3cc:	7bfb      	ldrb	r3, [r7, #15]
 801b3ce:	f023 0302 	bic.w	r3, r3, #2
 801b3d2:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	f993 3000 	ldrsb.w	r3, [r3]
 801b3da:	2207      	movs	r2, #7
 801b3dc:	2105      	movs	r1, #5
 801b3de:	4618      	mov	r0, r3
 801b3e0:	f7fd f865 	bl	80184ae <RegionCommonValueInRange>
 801b3e4:	4603      	mov	r3, r0
 801b3e6:	2b01      	cmp	r3, #1
 801b3e8:	d004      	beq.n	801b3f4 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b3f0:	2b0d      	cmp	r3, #13
 801b3f2:	dd03      	ble.n	801b3fc <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 801b3f4:	7bfb      	ldrb	r3, [r7, #15]
 801b3f6:	f023 0302 	bic.w	r3, r3, #2
 801b3fa:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b402:	2203      	movs	r2, #3
 801b404:	2100      	movs	r1, #0
 801b406:	4618      	mov	r0, r3
 801b408:	f7fd f851 	bl	80184ae <RegionCommonValueInRange>
 801b40c:	4603      	mov	r3, r0
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d103      	bne.n	801b41a <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801b412:	7bfb      	ldrb	r3, [r7, #15]
 801b414:	f023 0304 	bic.w	r3, r3, #4
 801b418:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 801b41a:	7bfb      	ldrb	r3, [r7, #15]
}
 801b41c:	4618      	mov	r0, r3
 801b41e:	3710      	adds	r7, #16
 801b420:	46bd      	mov	sp, r7
 801b422:	bd80      	pop	{r7, pc}

0801b424 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801b424:	b480      	push	{r7}
 801b426:	b083      	sub	sp, #12
 801b428:	af00      	add	r7, sp, #0
 801b42a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b42c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b430:	4618      	mov	r0, r3
 801b432:	370c      	adds	r7, #12
 801b434:	46bd      	mov	sp, r7
 801b436:	bc80      	pop	{r7}
 801b438:	4770      	bx	lr

0801b43a <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801b43a:	b480      	push	{r7}
 801b43c:	b083      	sub	sp, #12
 801b43e:	af00      	add	r7, sp, #0
 801b440:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b442:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b446:	4618      	mov	r0, r3
 801b448:	370c      	adds	r7, #12
 801b44a:	46bd      	mov	sp, r7
 801b44c:	bc80      	pop	{r7}
 801b44e:	4770      	bx	lr

0801b450 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801b450:	b480      	push	{r7}
 801b452:	b083      	sub	sp, #12
 801b454:	af00      	add	r7, sp, #0
 801b456:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b458:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b45c:	4618      	mov	r0, r3
 801b45e:	370c      	adds	r7, #12
 801b460:	46bd      	mov	sp, r7
 801b462:	bc80      	pop	{r7}
 801b464:	4770      	bx	lr
	...

0801b468 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801b468:	b480      	push	{r7}
 801b46a:	b083      	sub	sp, #12
 801b46c:	af00      	add	r7, sp, #0
 801b46e:	4603      	mov	r3, r0
 801b470:	460a      	mov	r2, r1
 801b472:	71fb      	strb	r3, [r7, #7]
 801b474:	4613      	mov	r3, r2
 801b476:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 801b478:	79bb      	ldrb	r3, [r7, #6]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d106      	bne.n	801b48c <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801b47e:	4b13      	ldr	r3, [pc, #76]	; (801b4cc <RegionUS915AlternateDr+0x64>)
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	7b5a      	ldrb	r2, [r3, #13]
 801b484:	3201      	adds	r2, #1
 801b486:	b2d2      	uxtb	r2, r2
 801b488:	735a      	strb	r2, [r3, #13]
 801b48a:	e005      	b.n	801b498 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 801b48c:	4b0f      	ldr	r3, [pc, #60]	; (801b4cc <RegionUS915AlternateDr+0x64>)
 801b48e:	681b      	ldr	r3, [r3, #0]
 801b490:	7b5a      	ldrb	r2, [r3, #13]
 801b492:	3a01      	subs	r2, #1
 801b494:	b2d2      	uxtb	r2, r2
 801b496:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 801b498:	4b0c      	ldr	r3, [pc, #48]	; (801b4cc <RegionUS915AlternateDr+0x64>)
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	7b5a      	ldrb	r2, [r3, #13]
 801b49e:	4b0c      	ldr	r3, [pc, #48]	; (801b4d0 <RegionUS915AlternateDr+0x68>)
 801b4a0:	fba3 1302 	umull	r1, r3, r3, r2
 801b4a4:	0859      	lsrs	r1, r3, #1
 801b4a6:	460b      	mov	r3, r1
 801b4a8:	00db      	lsls	r3, r3, #3
 801b4aa:	440b      	add	r3, r1
 801b4ac:	1ad3      	subs	r3, r2, r3
 801b4ae:	b2db      	uxtb	r3, r3
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d102      	bne.n	801b4ba <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 801b4b4:	2304      	movs	r3, #4
 801b4b6:	71fb      	strb	r3, [r7, #7]
 801b4b8:	e001      	b.n	801b4be <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 801b4ba:	2300      	movs	r3, #0
 801b4bc:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 801b4be:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 801b4c2:	4618      	mov	r0, r3
 801b4c4:	370c      	adds	r7, #12
 801b4c6:	46bd      	mov	sp, r7
 801b4c8:	bc80      	pop	{r7}
 801b4ca:	4770      	bx	lr
 801b4cc:	20001ad0 	.word	0x20001ad0
 801b4d0:	38e38e39 	.word	0x38e38e39

0801b4d4 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801b4d4:	b580      	push	{r7, lr}
 801b4d6:	b0a8      	sub	sp, #160	; 0xa0
 801b4d8:	af02      	add	r7, sp, #8
 801b4da:	60f8      	str	r0, [r7, #12]
 801b4dc:	60b9      	str	r1, [r7, #8]
 801b4de:	607a      	str	r2, [r7, #4]
 801b4e0:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 801b4e8:	2300      	movs	r3, #0
 801b4ea:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b4f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b4f6:	2244      	movs	r2, #68	; 0x44
 801b4f8:	2100      	movs	r1, #0
 801b4fa:	4618      	mov	r0, r3
 801b4fc:	f005 fdbe 	bl	802107c <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801b500:	230c      	movs	r3, #12
 801b502:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801b506:	4b67      	ldr	r3, [pc, #412]	; (801b6a4 <RegionUS915NextChannel+0x1d0>)
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	2204      	movs	r2, #4
 801b50c:	2100      	movs	r1, #0
 801b50e:	4618      	mov	r0, r3
 801b510:	f7fd f81e 	bl	8018550 <RegionCommonCountChannels>
 801b514:	4603      	mov	r3, r0
 801b516:	2b00      	cmp	r3, #0
 801b518:	d10e      	bne.n	801b538 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801b51a:	4b62      	ldr	r3, [pc, #392]	; (801b6a4 <RegionUS915NextChannel+0x1d0>)
 801b51c:	681b      	ldr	r3, [r3, #0]
 801b51e:	4618      	mov	r0, r3
 801b520:	4b61      	ldr	r3, [pc, #388]	; (801b6a8 <RegionUS915NextChannel+0x1d4>)
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b528:	2204      	movs	r2, #4
 801b52a:	4619      	mov	r1, r3
 801b52c:	f7fd f83c 	bl	80185a8 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801b530:	4b5c      	ldr	r3, [pc, #368]	; (801b6a4 <RegionUS915NextChannel+0x1d0>)
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	2200      	movs	r2, #0
 801b536:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801b538:	68fb      	ldr	r3, [r7, #12]
 801b53a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b53e:	2b03      	cmp	r3, #3
 801b540:	dd0c      	ble.n	801b55c <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801b542:	4b58      	ldr	r3, [pc, #352]	; (801b6a4 <RegionUS915NextChannel+0x1d0>)
 801b544:	681b      	ldr	r3, [r3, #0]
 801b546:	891b      	ldrh	r3, [r3, #8]
 801b548:	b2db      	uxtb	r3, r3
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d106      	bne.n	801b55c <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b54e:	4b56      	ldr	r3, [pc, #344]	; (801b6a8 <RegionUS915NextChannel+0x1d4>)
 801b550:	681a      	ldr	r2, [r3, #0]
 801b552:	4b54      	ldr	r3, [pc, #336]	; (801b6a4 <RegionUS915NextChannel+0x1d0>)
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b55a:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801b55c:	68fb      	ldr	r3, [r7, #12]
 801b55e:	7a5b      	ldrb	r3, [r3, #9]
 801b560:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801b562:	68fb      	ldr	r3, [r7, #12]
 801b564:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b568:	b2db      	uxtb	r3, r3
 801b56a:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801b56c:	4b4d      	ldr	r3, [pc, #308]	; (801b6a4 <RegionUS915NextChannel+0x1d0>)
 801b56e:	681b      	ldr	r3, [r3, #0]
 801b570:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801b572:	4b4d      	ldr	r3, [pc, #308]	; (801b6a8 <RegionUS915NextChannel+0x1d4>)
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801b578:	4b4c      	ldr	r3, [pc, #304]	; (801b6ac <RegionUS915NextChannel+0x1d8>)
 801b57a:	681b      	ldr	r3, [r3, #0]
 801b57c:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801b57e:	2348      	movs	r3, #72	; 0x48
 801b580:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 801b582:	2300      	movs	r3, #0
 801b584:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801b586:	68fb      	ldr	r3, [r7, #12]
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801b58c:	68fb      	ldr	r3, [r7, #12]
 801b58e:	685b      	ldr	r3, [r3, #4]
 801b590:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801b592:	68fb      	ldr	r3, [r7, #12]
 801b594:	7a9b      	ldrb	r3, [r3, #10]
 801b596:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801b59a:	2301      	movs	r3, #1
 801b59c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801b5a0:	f107 0314 	add.w	r3, r7, #20
 801b5a4:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801b5a6:	68fa      	ldr	r2, [r7, #12]
 801b5a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b5ac:	320c      	adds	r2, #12
 801b5ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b5b2:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801b5b6:	68fb      	ldr	r3, [r7, #12]
 801b5b8:	7d1b      	ldrb	r3, [r3, #20]
 801b5ba:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	8adb      	ldrh	r3, [r3, #22]
 801b5c8:	4619      	mov	r1, r3
 801b5ca:	4610      	mov	r0, r2
 801b5cc:	f7fe ff10 	bl	801a3f0 <GetTimeOnAir>
 801b5d0:	4603      	mov	r3, r0
 801b5d2:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801b5d4:	f107 0195 	add.w	r1, r7, #149	; 0x95
 801b5d8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b5dc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	9301      	str	r3, [sp, #4]
 801b5e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801b5e8:	9300      	str	r3, [sp, #0]
 801b5ea:	460b      	mov	r3, r1
 801b5ec:	6839      	ldr	r1, [r7, #0]
 801b5ee:	f7fd fbc6 	bl	8018d7e <RegionCommonIdentifyChannels>
 801b5f2:	4603      	mov	r3, r0
 801b5f4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801b5f8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d14a      	bne.n	801b696 <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 801b600:	68fb      	ldr	r3, [r7, #12]
 801b602:	7a5b      	ldrb	r3, [r3, #9]
 801b604:	2b00      	cmp	r3, #0
 801b606:	d00e      	beq.n	801b626 <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801b608:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 801b60c:	3b01      	subs	r3, #1
 801b60e:	4619      	mov	r1, r3
 801b610:	2000      	movs	r0, #0
 801b612:	f000 f89f 	bl	801b754 <randr>
 801b616:	4603      	mov	r3, r0
 801b618:	3398      	adds	r3, #152	; 0x98
 801b61a:	443b      	add	r3, r7
 801b61c:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 801b620:	68bb      	ldr	r3, [r7, #8]
 801b622:	701a      	strb	r2, [r3, #0]
 801b624:	e02e      	b.n	801b684 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801b626:	68fb      	ldr	r3, [r7, #12]
 801b628:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d10e      	bne.n	801b64e <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b630:	4b1c      	ldr	r3, [pc, #112]	; (801b6a4 <RegionUS915NextChannel+0x1d0>)
 801b632:	681b      	ldr	r3, [r3, #0]
 801b634:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801b636:	4b1b      	ldr	r3, [pc, #108]	; (801b6a4 <RegionUS915NextChannel+0x1d0>)
 801b638:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b63a:	330c      	adds	r3, #12
 801b63c:	68ba      	ldr	r2, [r7, #8]
 801b63e:	4619      	mov	r1, r3
 801b640:	f7fc fcf0 	bl	8018024 <RegionBaseUSComputeNext125kHzJoinChannel>
 801b644:	4603      	mov	r3, r0
 801b646:	2b03      	cmp	r3, #3
 801b648:	d11c      	bne.n	801b684 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801b64a:	2303      	movs	r3, #3
 801b64c:	e025      	b.n	801b69a <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801b64e:	2300      	movs	r3, #0
 801b650:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b654:	e004      	b.n	801b660 <RegionUS915NextChannel+0x18c>
                {
                    i++;
 801b656:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b65a:	3301      	adds	r3, #1
 801b65c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b660:	4b10      	ldr	r3, [pc, #64]	; (801b6a4 <RegionUS915NextChannel+0x1d0>)
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	891b      	ldrh	r3, [r3, #8]
 801b666:	b2da      	uxtb	r2, r3
 801b668:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b66c:	fa42 f303 	asr.w	r3, r2, r3
 801b670:	f003 0301 	and.w	r3, r3, #1
 801b674:	2b00      	cmp	r3, #0
 801b676:	d0ee      	beq.n	801b656 <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 801b678:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b67c:	3340      	adds	r3, #64	; 0x40
 801b67e:	b2da      	uxtb	r2, r3
 801b680:	68bb      	ldr	r3, [r7, #8]
 801b682:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801b684:	4b07      	ldr	r3, [pc, #28]	; (801b6a4 <RegionUS915NextChannel+0x1d0>)
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	4618      	mov	r0, r3
 801b68a:	68bb      	ldr	r3, [r7, #8]
 801b68c:	781b      	ldrb	r3, [r3, #0]
 801b68e:	2248      	movs	r2, #72	; 0x48
 801b690:	4619      	mov	r1, r3
 801b692:	f7fc ff29 	bl	80184e8 <RegionCommonChanDisable>
    }
    return status;
 801b696:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801b69a:	4618      	mov	r0, r3
 801b69c:	3798      	adds	r7, #152	; 0x98
 801b69e:	46bd      	mov	sp, r7
 801b6a0:	bd80      	pop	{r7, pc}
 801b6a2:	bf00      	nop
 801b6a4:	20001ad0 	.word	0x20001ad0
 801b6a8:	20001ad4 	.word	0x20001ad4
 801b6ac:	20001ad8 	.word	0x20001ad8

0801b6b0 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801b6b0:	b480      	push	{r7}
 801b6b2:	b085      	sub	sp, #20
 801b6b4:	af00      	add	r7, sp, #0
 801b6b6:	4603      	mov	r3, r0
 801b6b8:	71fb      	strb	r3, [r7, #7]
 801b6ba:	460b      	mov	r3, r1
 801b6bc:	71bb      	strb	r3, [r7, #6]
 801b6be:	4613      	mov	r3, r2
 801b6c0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801b6c2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801b6c6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801b6ca:	4909      	ldr	r1, [pc, #36]	; (801b6f0 <RegionUS915ApplyDrOffset+0x40>)
 801b6cc:	0092      	lsls	r2, r2, #2
 801b6ce:	440a      	add	r2, r1
 801b6d0:	4413      	add	r3, r2
 801b6d2:	781b      	ldrb	r3, [r3, #0]
 801b6d4:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801b6d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	da01      	bge.n	801b6e2 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801b6de:	2300      	movs	r3, #0
 801b6e0:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801b6e2:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 801b6e4:	4618      	mov	r0, r3
 801b6e6:	3714      	adds	r7, #20
 801b6e8:	46bd      	mov	sp, r7
 801b6ea:	bc80      	pop	{r7}
 801b6ec:	4770      	bx	lr
 801b6ee:	bf00      	nop
 801b6f0:	08021f48 	.word	0x08021f48

0801b6f4 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801b6f4:	b480      	push	{r7}
 801b6f6:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801b6f8:	4b0d      	ldr	r3, [pc, #52]	; (801b730 <rand1+0x3c>)
 801b6fa:	681b      	ldr	r3, [r3, #0]
 801b6fc:	4a0d      	ldr	r2, [pc, #52]	; (801b734 <rand1+0x40>)
 801b6fe:	fb02 f303 	mul.w	r3, r2, r3
 801b702:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b706:	3339      	adds	r3, #57	; 0x39
 801b708:	4a09      	ldr	r2, [pc, #36]	; (801b730 <rand1+0x3c>)
 801b70a:	6013      	str	r3, [r2, #0]
 801b70c:	4b08      	ldr	r3, [pc, #32]	; (801b730 <rand1+0x3c>)
 801b70e:	681a      	ldr	r2, [r3, #0]
 801b710:	2303      	movs	r3, #3
 801b712:	fba3 1302 	umull	r1, r3, r3, r2
 801b716:	1ad1      	subs	r1, r2, r3
 801b718:	0849      	lsrs	r1, r1, #1
 801b71a:	440b      	add	r3, r1
 801b71c:	0f99      	lsrs	r1, r3, #30
 801b71e:	460b      	mov	r3, r1
 801b720:	07db      	lsls	r3, r3, #31
 801b722:	1a5b      	subs	r3, r3, r1
 801b724:	1ad1      	subs	r1, r2, r3
 801b726:	460b      	mov	r3, r1
}
 801b728:	4618      	mov	r0, r3
 801b72a:	46bd      	mov	sp, r7
 801b72c:	bc80      	pop	{r7}
 801b72e:	4770      	bx	lr
 801b730:	20000130 	.word	0x20000130
 801b734:	41c64e6d 	.word	0x41c64e6d

0801b738 <srand1>:

void srand1( uint32_t seed )
{
 801b738:	b480      	push	{r7}
 801b73a:	b083      	sub	sp, #12
 801b73c:	af00      	add	r7, sp, #0
 801b73e:	6078      	str	r0, [r7, #4]
    next = seed;
 801b740:	4a03      	ldr	r2, [pc, #12]	; (801b750 <srand1+0x18>)
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	6013      	str	r3, [r2, #0]
}
 801b746:	bf00      	nop
 801b748:	370c      	adds	r7, #12
 801b74a:	46bd      	mov	sp, r7
 801b74c:	bc80      	pop	{r7}
 801b74e:	4770      	bx	lr
 801b750:	20000130 	.word	0x20000130

0801b754 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801b754:	b580      	push	{r7, lr}
 801b756:	b082      	sub	sp, #8
 801b758:	af00      	add	r7, sp, #0
 801b75a:	6078      	str	r0, [r7, #4]
 801b75c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801b75e:	f7ff ffc9 	bl	801b6f4 <rand1>
 801b762:	4602      	mov	r2, r0
 801b764:	6839      	ldr	r1, [r7, #0]
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	1acb      	subs	r3, r1, r3
 801b76a:	3301      	adds	r3, #1
 801b76c:	fb92 f1f3 	sdiv	r1, r2, r3
 801b770:	fb01 f303 	mul.w	r3, r1, r3
 801b774:	1ad2      	subs	r2, r2, r3
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	4413      	add	r3, r2
}
 801b77a:	4618      	mov	r0, r3
 801b77c:	3708      	adds	r7, #8
 801b77e:	46bd      	mov	sp, r7
 801b780:	bd80      	pop	{r7, pc}

0801b782 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b782:	b480      	push	{r7}
 801b784:	b085      	sub	sp, #20
 801b786:	af00      	add	r7, sp, #0
 801b788:	60f8      	str	r0, [r7, #12]
 801b78a:	60b9      	str	r1, [r7, #8]
 801b78c:	4613      	mov	r3, r2
 801b78e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801b790:	e007      	b.n	801b7a2 <memcpy1+0x20>
    {
        *dst++ = *src++;
 801b792:	68ba      	ldr	r2, [r7, #8]
 801b794:	1c53      	adds	r3, r2, #1
 801b796:	60bb      	str	r3, [r7, #8]
 801b798:	68fb      	ldr	r3, [r7, #12]
 801b79a:	1c59      	adds	r1, r3, #1
 801b79c:	60f9      	str	r1, [r7, #12]
 801b79e:	7812      	ldrb	r2, [r2, #0]
 801b7a0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b7a2:	88fb      	ldrh	r3, [r7, #6]
 801b7a4:	1e5a      	subs	r2, r3, #1
 801b7a6:	80fa      	strh	r2, [r7, #6]
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d1f2      	bne.n	801b792 <memcpy1+0x10>
    }
}
 801b7ac:	bf00      	nop
 801b7ae:	bf00      	nop
 801b7b0:	3714      	adds	r7, #20
 801b7b2:	46bd      	mov	sp, r7
 801b7b4:	bc80      	pop	{r7}
 801b7b6:	4770      	bx	lr

0801b7b8 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b7b8:	b480      	push	{r7}
 801b7ba:	b085      	sub	sp, #20
 801b7bc:	af00      	add	r7, sp, #0
 801b7be:	60f8      	str	r0, [r7, #12]
 801b7c0:	60b9      	str	r1, [r7, #8]
 801b7c2:	4613      	mov	r3, r2
 801b7c4:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801b7c6:	88fb      	ldrh	r3, [r7, #6]
 801b7c8:	3b01      	subs	r3, #1
 801b7ca:	68fa      	ldr	r2, [r7, #12]
 801b7cc:	4413      	add	r3, r2
 801b7ce:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801b7d0:	e007      	b.n	801b7e2 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801b7d2:	68ba      	ldr	r2, [r7, #8]
 801b7d4:	1c53      	adds	r3, r2, #1
 801b7d6:	60bb      	str	r3, [r7, #8]
 801b7d8:	68fb      	ldr	r3, [r7, #12]
 801b7da:	1e59      	subs	r1, r3, #1
 801b7dc:	60f9      	str	r1, [r7, #12]
 801b7de:	7812      	ldrb	r2, [r2, #0]
 801b7e0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b7e2:	88fb      	ldrh	r3, [r7, #6]
 801b7e4:	1e5a      	subs	r2, r3, #1
 801b7e6:	80fa      	strh	r2, [r7, #6]
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d1f2      	bne.n	801b7d2 <memcpyr+0x1a>
    }
}
 801b7ec:	bf00      	nop
 801b7ee:	bf00      	nop
 801b7f0:	3714      	adds	r7, #20
 801b7f2:	46bd      	mov	sp, r7
 801b7f4:	bc80      	pop	{r7}
 801b7f6:	4770      	bx	lr

0801b7f8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801b7f8:	b480      	push	{r7}
 801b7fa:	b083      	sub	sp, #12
 801b7fc:	af00      	add	r7, sp, #0
 801b7fe:	6078      	str	r0, [r7, #4]
 801b800:	460b      	mov	r3, r1
 801b802:	70fb      	strb	r3, [r7, #3]
 801b804:	4613      	mov	r3, r2
 801b806:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801b808:	e004      	b.n	801b814 <memset1+0x1c>
    {
        *dst++ = value;
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	1c5a      	adds	r2, r3, #1
 801b80e:	607a      	str	r2, [r7, #4]
 801b810:	78fa      	ldrb	r2, [r7, #3]
 801b812:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b814:	883b      	ldrh	r3, [r7, #0]
 801b816:	1e5a      	subs	r2, r3, #1
 801b818:	803a      	strh	r2, [r7, #0]
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d1f5      	bne.n	801b80a <memset1+0x12>
    }
}
 801b81e:	bf00      	nop
 801b820:	bf00      	nop
 801b822:	370c      	adds	r7, #12
 801b824:	46bd      	mov	sp, r7
 801b826:	bc80      	pop	{r7}
 801b828:	4770      	bx	lr
	...

0801b82c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801b82c:	b480      	push	{r7}
 801b82e:	b085      	sub	sp, #20
 801b830:	af00      	add	r7, sp, #0
 801b832:	6078      	str	r0, [r7, #4]
 801b834:	460b      	mov	r3, r1
 801b836:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801b838:	f04f 33ff 	mov.w	r3, #4294967295
 801b83c:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	2b00      	cmp	r3, #0
 801b842:	d101      	bne.n	801b848 <Crc32+0x1c>
    {
        return 0;
 801b844:	2300      	movs	r3, #0
 801b846:	e026      	b.n	801b896 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801b848:	2300      	movs	r3, #0
 801b84a:	817b      	strh	r3, [r7, #10]
 801b84c:	e01d      	b.n	801b88a <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801b84e:	897b      	ldrh	r3, [r7, #10]
 801b850:	687a      	ldr	r2, [r7, #4]
 801b852:	4413      	add	r3, r2
 801b854:	781b      	ldrb	r3, [r3, #0]
 801b856:	461a      	mov	r2, r3
 801b858:	68fb      	ldr	r3, [r7, #12]
 801b85a:	4053      	eors	r3, r2
 801b85c:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801b85e:	2300      	movs	r3, #0
 801b860:	813b      	strh	r3, [r7, #8]
 801b862:	e00c      	b.n	801b87e <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801b864:	68fb      	ldr	r3, [r7, #12]
 801b866:	085a      	lsrs	r2, r3, #1
 801b868:	68fb      	ldr	r3, [r7, #12]
 801b86a:	f003 0301 	and.w	r3, r3, #1
 801b86e:	425b      	negs	r3, r3
 801b870:	490b      	ldr	r1, [pc, #44]	; (801b8a0 <Crc32+0x74>)
 801b872:	400b      	ands	r3, r1
 801b874:	4053      	eors	r3, r2
 801b876:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801b878:	893b      	ldrh	r3, [r7, #8]
 801b87a:	3301      	adds	r3, #1
 801b87c:	813b      	strh	r3, [r7, #8]
 801b87e:	893b      	ldrh	r3, [r7, #8]
 801b880:	2b07      	cmp	r3, #7
 801b882:	d9ef      	bls.n	801b864 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801b884:	897b      	ldrh	r3, [r7, #10]
 801b886:	3301      	adds	r3, #1
 801b888:	817b      	strh	r3, [r7, #10]
 801b88a:	897a      	ldrh	r2, [r7, #10]
 801b88c:	887b      	ldrh	r3, [r7, #2]
 801b88e:	429a      	cmp	r2, r3
 801b890:	d3dd      	bcc.n	801b84e <Crc32+0x22>
        }
    }

    return ~crc;
 801b892:	68fb      	ldr	r3, [r7, #12]
 801b894:	43db      	mvns	r3, r3
}
 801b896:	4618      	mov	r0, r3
 801b898:	3714      	adds	r7, #20
 801b89a:	46bd      	mov	sp, r7
 801b89c:	bc80      	pop	{r7}
 801b89e:	4770      	bx	lr
 801b8a0:	edb88320 	.word	0xedb88320

0801b8a4 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801b8a4:	b580      	push	{r7, lr}
 801b8a6:	b084      	sub	sp, #16
 801b8a8:	af02      	add	r7, sp, #8
 801b8aa:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801b8ac:	4a24      	ldr	r2, [pc, #144]	; (801b940 <RadioInit+0x9c>)
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801b8b2:	4b24      	ldr	r3, [pc, #144]	; (801b944 <RadioInit+0xa0>)
 801b8b4:	2200      	movs	r2, #0
 801b8b6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801b8b8:	4b22      	ldr	r3, [pc, #136]	; (801b944 <RadioInit+0xa0>)
 801b8ba:	2200      	movs	r2, #0
 801b8bc:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801b8be:	4b21      	ldr	r3, [pc, #132]	; (801b944 <RadioInit+0xa0>)
 801b8c0:	2200      	movs	r2, #0
 801b8c2:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801b8c4:	4b1f      	ldr	r3, [pc, #124]	; (801b944 <RadioInit+0xa0>)
 801b8c6:	2200      	movs	r2, #0
 801b8c8:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 801b8ca:	481f      	ldr	r0, [pc, #124]	; (801b948 <RadioInit+0xa4>)
 801b8cc:	f001 ffc0 	bl	801d850 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801b8d0:	4b1c      	ldr	r3, [pc, #112]	; (801b944 <RadioInit+0xa0>)
 801b8d2:	2200      	movs	r2, #0
 801b8d4:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801b8d6:	4b1b      	ldr	r3, [pc, #108]	; (801b944 <RadioInit+0xa0>)
 801b8d8:	2200      	movs	r2, #0
 801b8da:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801b8dc:	f002 fa54 	bl	801dd88 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801b8e0:	2100      	movs	r1, #0
 801b8e2:	2000      	movs	r0, #0
 801b8e4:	f002 fe20 	bl	801e528 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801b8e8:	2204      	movs	r2, #4
 801b8ea:	2100      	movs	r1, #0
 801b8ec:	2001      	movs	r0, #1
 801b8ee:	f002 fbdd 	bl	801e0ac <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b8f2:	2300      	movs	r3, #0
 801b8f4:	2200      	movs	r2, #0
 801b8f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b8fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b8fe:	f002 fb0d 	bl	801df1c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801b902:	f000 fe99 	bl	801c638 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801b906:	2300      	movs	r3, #0
 801b908:	9300      	str	r3, [sp, #0]
 801b90a:	4b10      	ldr	r3, [pc, #64]	; (801b94c <RadioInit+0xa8>)
 801b90c:	2200      	movs	r2, #0
 801b90e:	f04f 31ff 	mov.w	r1, #4294967295
 801b912:	480f      	ldr	r0, [pc, #60]	; (801b950 <RadioInit+0xac>)
 801b914:	f003 fef0 	bl	801f6f8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801b918:	2300      	movs	r3, #0
 801b91a:	9300      	str	r3, [sp, #0]
 801b91c:	4b0d      	ldr	r3, [pc, #52]	; (801b954 <RadioInit+0xb0>)
 801b91e:	2200      	movs	r2, #0
 801b920:	f04f 31ff 	mov.w	r1, #4294967295
 801b924:	480c      	ldr	r0, [pc, #48]	; (801b958 <RadioInit+0xb4>)
 801b926:	f003 fee7 	bl	801f6f8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801b92a:	4809      	ldr	r0, [pc, #36]	; (801b950 <RadioInit+0xac>)
 801b92c:	f003 ff88 	bl	801f840 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801b930:	4809      	ldr	r0, [pc, #36]	; (801b958 <RadioInit+0xb4>)
 801b932:	f003 ff85 	bl	801f840 <UTIL_TIMER_Stop>
}
 801b936:	bf00      	nop
 801b938:	3708      	adds	r7, #8
 801b93a:	46bd      	mov	sp, r7
 801b93c:	bd80      	pop	{r7, pc}
 801b93e:	bf00      	nop
 801b940:	20001bdc 	.word	0x20001bdc
 801b944:	20001be0 	.word	0x20001be0
 801b948:	0801ca31 	.word	0x0801ca31
 801b94c:	0801c9b9 	.word	0x0801c9b9
 801b950:	20001c3c 	.word	0x20001c3c
 801b954:	0801c9cd 	.word	0x0801c9cd
 801b958:	20001c54 	.word	0x20001c54

0801b95c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801b95c:	b580      	push	{r7, lr}
 801b95e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801b960:	f001 ffbe 	bl	801d8e0 <SUBGRF_GetOperatingMode>
 801b964:	4603      	mov	r3, r0
 801b966:	2b07      	cmp	r3, #7
 801b968:	d00a      	beq.n	801b980 <RadioGetStatus+0x24>
 801b96a:	2b07      	cmp	r3, #7
 801b96c:	dc0a      	bgt.n	801b984 <RadioGetStatus+0x28>
 801b96e:	2b04      	cmp	r3, #4
 801b970:	d002      	beq.n	801b978 <RadioGetStatus+0x1c>
 801b972:	2b05      	cmp	r3, #5
 801b974:	d002      	beq.n	801b97c <RadioGetStatus+0x20>
 801b976:	e005      	b.n	801b984 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801b978:	2302      	movs	r3, #2
 801b97a:	e004      	b.n	801b986 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801b97c:	2301      	movs	r3, #1
 801b97e:	e002      	b.n	801b986 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801b980:	2303      	movs	r3, #3
 801b982:	e000      	b.n	801b986 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801b984:	2300      	movs	r3, #0
    }
}
 801b986:	4618      	mov	r0, r3
 801b988:	bd80      	pop	{r7, pc}
	...

0801b98c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801b98c:	b580      	push	{r7, lr}
 801b98e:	b082      	sub	sp, #8
 801b990:	af00      	add	r7, sp, #0
 801b992:	4603      	mov	r3, r0
 801b994:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801b996:	4a2a      	ldr	r2, [pc, #168]	; (801ba40 <RadioSetModem+0xb4>)
 801b998:	79fb      	ldrb	r3, [r7, #7]
 801b99a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801b99c:	79fb      	ldrb	r3, [r7, #7]
 801b99e:	4618      	mov	r0, r3
 801b9a0:	f003 f995 	bl	801ecce <RFW_SetRadioModem>
    switch( modem )
 801b9a4:	79fb      	ldrb	r3, [r7, #7]
 801b9a6:	2b05      	cmp	r3, #5
 801b9a8:	d80e      	bhi.n	801b9c8 <RadioSetModem+0x3c>
 801b9aa:	a201      	add	r2, pc, #4	; (adr r2, 801b9b0 <RadioSetModem+0x24>)
 801b9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b9b0:	0801b9d7 	.word	0x0801b9d7
 801b9b4:	0801b9e5 	.word	0x0801b9e5
 801b9b8:	0801b9c9 	.word	0x0801b9c9
 801b9bc:	0801ba0b 	.word	0x0801ba0b
 801b9c0:	0801ba19 	.word	0x0801ba19
 801b9c4:	0801ba27 	.word	0x0801ba27
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801b9c8:	2003      	movs	r0, #3
 801b9ca:	f002 fb49 	bl	801e060 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b9ce:	4b1c      	ldr	r3, [pc, #112]	; (801ba40 <RadioSetModem+0xb4>)
 801b9d0:	2200      	movs	r2, #0
 801b9d2:	735a      	strb	r2, [r3, #13]
        break;
 801b9d4:	e02f      	b.n	801ba36 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801b9d6:	2000      	movs	r0, #0
 801b9d8:	f002 fb42 	bl	801e060 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b9dc:	4b18      	ldr	r3, [pc, #96]	; (801ba40 <RadioSetModem+0xb4>)
 801b9de:	2200      	movs	r2, #0
 801b9e0:	735a      	strb	r2, [r3, #13]
        break;
 801b9e2:	e028      	b.n	801ba36 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801b9e4:	2001      	movs	r0, #1
 801b9e6:	f002 fb3b 	bl	801e060 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801b9ea:	4b15      	ldr	r3, [pc, #84]	; (801ba40 <RadioSetModem+0xb4>)
 801b9ec:	7b5a      	ldrb	r2, [r3, #13]
 801b9ee:	4b14      	ldr	r3, [pc, #80]	; (801ba40 <RadioSetModem+0xb4>)
 801b9f0:	7b1b      	ldrb	r3, [r3, #12]
 801b9f2:	429a      	cmp	r2, r3
 801b9f4:	d01e      	beq.n	801ba34 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801b9f6:	4b12      	ldr	r3, [pc, #72]	; (801ba40 <RadioSetModem+0xb4>)
 801b9f8:	7b1a      	ldrb	r2, [r3, #12]
 801b9fa:	4b11      	ldr	r3, [pc, #68]	; (801ba40 <RadioSetModem+0xb4>)
 801b9fc:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801b9fe:	4b10      	ldr	r3, [pc, #64]	; (801ba40 <RadioSetModem+0xb4>)
 801ba00:	7b5b      	ldrb	r3, [r3, #13]
 801ba02:	4618      	mov	r0, r3
 801ba04:	f000 ffa2 	bl	801c94c <RadioSetPublicNetwork>
        }
        break;
 801ba08:	e014      	b.n	801ba34 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801ba0a:	2002      	movs	r0, #2
 801ba0c:	f002 fb28 	bl	801e060 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801ba10:	4b0b      	ldr	r3, [pc, #44]	; (801ba40 <RadioSetModem+0xb4>)
 801ba12:	2200      	movs	r2, #0
 801ba14:	735a      	strb	r2, [r3, #13]
        break;
 801ba16:	e00e      	b.n	801ba36 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801ba18:	2002      	movs	r0, #2
 801ba1a:	f002 fb21 	bl	801e060 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801ba1e:	4b08      	ldr	r3, [pc, #32]	; (801ba40 <RadioSetModem+0xb4>)
 801ba20:	2200      	movs	r2, #0
 801ba22:	735a      	strb	r2, [r3, #13]
        break;
 801ba24:	e007      	b.n	801ba36 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801ba26:	2000      	movs	r0, #0
 801ba28:	f002 fb1a 	bl	801e060 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801ba2c:	4b04      	ldr	r3, [pc, #16]	; (801ba40 <RadioSetModem+0xb4>)
 801ba2e:	2200      	movs	r2, #0
 801ba30:	735a      	strb	r2, [r3, #13]
        break;
 801ba32:	e000      	b.n	801ba36 <RadioSetModem+0xaa>
        break;
 801ba34:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801ba36:	bf00      	nop
 801ba38:	3708      	adds	r7, #8
 801ba3a:	46bd      	mov	sp, r7
 801ba3c:	bd80      	pop	{r7, pc}
 801ba3e:	bf00      	nop
 801ba40:	20001be0 	.word	0x20001be0

0801ba44 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801ba44:	b580      	push	{r7, lr}
 801ba46:	b082      	sub	sp, #8
 801ba48:	af00      	add	r7, sp, #0
 801ba4a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801ba4c:	6878      	ldr	r0, [r7, #4]
 801ba4e:	f002 fac1 	bl	801dfd4 <SUBGRF_SetRfFrequency>
}
 801ba52:	bf00      	nop
 801ba54:	3708      	adds	r7, #8
 801ba56:	46bd      	mov	sp, r7
 801ba58:	bd80      	pop	{r7, pc}

0801ba5a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801ba5a:	b580      	push	{r7, lr}
 801ba5c:	b090      	sub	sp, #64	; 0x40
 801ba5e:	af0a      	add	r7, sp, #40	; 0x28
 801ba60:	60f8      	str	r0, [r7, #12]
 801ba62:	60b9      	str	r1, [r7, #8]
 801ba64:	603b      	str	r3, [r7, #0]
 801ba66:	4613      	mov	r3, r2
 801ba68:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801ba6a:	2301      	movs	r3, #1
 801ba6c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801ba6e:	2300      	movs	r3, #0
 801ba70:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801ba72:	2300      	movs	r3, #0
 801ba74:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801ba76:	f000 fdf2 	bl	801c65e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801ba7a:	2000      	movs	r0, #0
 801ba7c:	f7ff ff86 	bl	801b98c <RadioSetModem>

    RadioSetChannel( freq );
 801ba80:	68f8      	ldr	r0, [r7, #12]
 801ba82:	f7ff ffdf 	bl	801ba44 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801ba86:	2301      	movs	r3, #1
 801ba88:	9309      	str	r3, [sp, #36]	; 0x24
 801ba8a:	2300      	movs	r3, #0
 801ba8c:	9308      	str	r3, [sp, #32]
 801ba8e:	2300      	movs	r3, #0
 801ba90:	9307      	str	r3, [sp, #28]
 801ba92:	2300      	movs	r3, #0
 801ba94:	9306      	str	r3, [sp, #24]
 801ba96:	2300      	movs	r3, #0
 801ba98:	9305      	str	r3, [sp, #20]
 801ba9a:	2300      	movs	r3, #0
 801ba9c:	9304      	str	r3, [sp, #16]
 801ba9e:	2300      	movs	r3, #0
 801baa0:	9303      	str	r3, [sp, #12]
 801baa2:	2300      	movs	r3, #0
 801baa4:	9302      	str	r3, [sp, #8]
 801baa6:	2303      	movs	r3, #3
 801baa8:	9301      	str	r3, [sp, #4]
 801baaa:	68bb      	ldr	r3, [r7, #8]
 801baac:	9300      	str	r3, [sp, #0]
 801baae:	2300      	movs	r3, #0
 801bab0:	f44f 7216 	mov.w	r2, #600	; 0x258
 801bab4:	68b9      	ldr	r1, [r7, #8]
 801bab6:	2000      	movs	r0, #0
 801bab8:	f000 f83c 	bl	801bb34 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801babc:	2000      	movs	r0, #0
 801babe:	f000 fdd5 	bl	801c66c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801bac2:	f000 ff71 	bl	801c9a8 <RadioGetWakeupTime>
 801bac6:	4603      	mov	r3, r0
 801bac8:	4618      	mov	r0, r3
 801baca:	f7e6 fdff 	bl	80026cc <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801bace:	f003 ffd1 	bl	801fa74 <UTIL_TIMER_GetCurrentTime>
 801bad2:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801bad4:	e00d      	b.n	801baf2 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801bad6:	2000      	movs	r0, #0
 801bad8:	f000 feb6 	bl	801c848 <RadioRssi>
 801badc:	4603      	mov	r3, r0
 801bade:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801bae0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801bae4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bae8:	429a      	cmp	r2, r3
 801baea:	dd02      	ble.n	801baf2 <RadioIsChannelFree+0x98>
        {
            status = false;
 801baec:	2300      	movs	r3, #0
 801baee:	75fb      	strb	r3, [r7, #23]
            break;
 801baf0:	e006      	b.n	801bb00 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801baf2:	6938      	ldr	r0, [r7, #16]
 801baf4:	f003 ffd0 	bl	801fa98 <UTIL_TIMER_GetElapsedTime>
 801baf8:	4602      	mov	r2, r0
 801bafa:	683b      	ldr	r3, [r7, #0]
 801bafc:	4293      	cmp	r3, r2
 801bafe:	d8ea      	bhi.n	801bad6 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801bb00:	f000 fdad 	bl	801c65e <RadioStandby>

    return status;
 801bb04:	7dfb      	ldrb	r3, [r7, #23]
}
 801bb06:	4618      	mov	r0, r3
 801bb08:	3718      	adds	r7, #24
 801bb0a:	46bd      	mov	sp, r7
 801bb0c:	bd80      	pop	{r7, pc}

0801bb0e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801bb0e:	b580      	push	{r7, lr}
 801bb10:	b082      	sub	sp, #8
 801bb12:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801bb14:	2300      	movs	r3, #0
 801bb16:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801bb18:	2300      	movs	r3, #0
 801bb1a:	2200      	movs	r2, #0
 801bb1c:	2100      	movs	r1, #0
 801bb1e:	2000      	movs	r0, #0
 801bb20:	f002 f9fc 	bl	801df1c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801bb24:	f001 ffad 	bl	801da82 <SUBGRF_GetRandom>
 801bb28:	6078      	str	r0, [r7, #4]

    return rnd;
 801bb2a:	687b      	ldr	r3, [r7, #4]
}
 801bb2c:	4618      	mov	r0, r3
 801bb2e:	3708      	adds	r7, #8
 801bb30:	46bd      	mov	sp, r7
 801bb32:	bd80      	pop	{r7, pc}

0801bb34 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801bb34:	b580      	push	{r7, lr}
 801bb36:	b08a      	sub	sp, #40	; 0x28
 801bb38:	af00      	add	r7, sp, #0
 801bb3a:	60b9      	str	r1, [r7, #8]
 801bb3c:	607a      	str	r2, [r7, #4]
 801bb3e:	461a      	mov	r2, r3
 801bb40:	4603      	mov	r3, r0
 801bb42:	73fb      	strb	r3, [r7, #15]
 801bb44:	4613      	mov	r3, r2
 801bb46:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801bb48:	4ab9      	ldr	r2, [pc, #740]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bb4a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801bb4e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801bb50:	f003 f87b 	bl	801ec4a <RFW_DeInit>
    if( rxContinuous == true )
 801bb54:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d001      	beq.n	801bb60 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801bb5c:	2300      	movs	r3, #0
 801bb5e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801bb60:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d004      	beq.n	801bb72 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801bb68:	4ab2      	ldr	r2, [pc, #712]	; (801be34 <RadioSetRxConfig+0x300>)
 801bb6a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801bb6e:	7013      	strb	r3, [r2, #0]
 801bb70:	e002      	b.n	801bb78 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801bb72:	4bb0      	ldr	r3, [pc, #704]	; (801be34 <RadioSetRxConfig+0x300>)
 801bb74:	22ff      	movs	r2, #255	; 0xff
 801bb76:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801bb78:	7bfb      	ldrb	r3, [r7, #15]
 801bb7a:	2b05      	cmp	r3, #5
 801bb7c:	d009      	beq.n	801bb92 <RadioSetRxConfig+0x5e>
 801bb7e:	2b05      	cmp	r3, #5
 801bb80:	f300 81d7 	bgt.w	801bf32 <RadioSetRxConfig+0x3fe>
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	f000 80bf 	beq.w	801bd08 <RadioSetRxConfig+0x1d4>
 801bb8a:	2b01      	cmp	r3, #1
 801bb8c:	f000 8124 	beq.w	801bdd8 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801bb90:	e1cf      	b.n	801bf32 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801bb92:	2001      	movs	r0, #1
 801bb94:	f002 f8ba 	bl	801dd0c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bb98:	4ba5      	ldr	r3, [pc, #660]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bb9a:	2200      	movs	r2, #0
 801bb9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bba0:	4aa3      	ldr	r2, [pc, #652]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801bba6:	4ba2      	ldr	r3, [pc, #648]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bba8:	2209      	movs	r2, #9
 801bbaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801bbae:	4ba0      	ldr	r3, [pc, #640]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bbb0:	f44f 7248 	mov.w	r2, #800	; 0x320
 801bbb4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bbb6:	68b8      	ldr	r0, [r7, #8]
 801bbb8:	f002 ff7a 	bl	801eab0 <SUBGRF_GetFskBandwidthRegValue>
 801bbbc:	4603      	mov	r3, r0
 801bbbe:	461a      	mov	r2, r3
 801bbc0:	4b9b      	ldr	r3, [pc, #620]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bbc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bbc6:	4b9a      	ldr	r3, [pc, #616]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bbc8:	2200      	movs	r2, #0
 801bbca:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bbcc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bbce:	00db      	lsls	r3, r3, #3
 801bbd0:	b29a      	uxth	r2, r3
 801bbd2:	4b97      	ldr	r3, [pc, #604]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bbd4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801bbd6:	4b96      	ldr	r3, [pc, #600]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bbd8:	2200      	movs	r2, #0
 801bbda:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801bbdc:	4b94      	ldr	r3, [pc, #592]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bbde:	2210      	movs	r2, #16
 801bbe0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bbe2:	4b93      	ldr	r3, [pc, #588]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bbe4:	2200      	movs	r2, #0
 801bbe6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801bbe8:	4b91      	ldr	r3, [pc, #580]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bbea:	2200      	movs	r2, #0
 801bbec:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801bbee:	4b91      	ldr	r3, [pc, #580]	; (801be34 <RadioSetRxConfig+0x300>)
 801bbf0:	781a      	ldrb	r2, [r3, #0]
 801bbf2:	4b8f      	ldr	r3, [pc, #572]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bbf4:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801bbf6:	4b8e      	ldr	r3, [pc, #568]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bbf8:	2201      	movs	r2, #1
 801bbfa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801bbfc:	4b8c      	ldr	r3, [pc, #560]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bbfe:	2200      	movs	r2, #0
 801bc00:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801bc02:	2005      	movs	r0, #5
 801bc04:	f7ff fec2 	bl	801b98c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bc08:	488b      	ldr	r0, [pc, #556]	; (801be38 <RadioSetRxConfig+0x304>)
 801bc0a:	f002 fb1d 	bl	801e248 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bc0e:	488b      	ldr	r0, [pc, #556]	; (801be3c <RadioSetRxConfig+0x308>)
 801bc10:	f002 fbec 	bl	801e3ec <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801bc14:	4a8a      	ldr	r2, [pc, #552]	; (801be40 <RadioSetRxConfig+0x30c>)
 801bc16:	f107 031c 	add.w	r3, r7, #28
 801bc1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bc1e:	e883 0003 	stmia.w	r3, {r0, r1}
 801bc22:	f107 031c 	add.w	r3, r7, #28
 801bc26:	4618      	mov	r0, r3
 801bc28:	f001 fea9 	bl	801d97e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801bc2c:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bc30:	f001 fef4 	bl	801da1c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801bc34:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801bc38:	f000 fe25 	bl	801c886 <RadioRead>
 801bc3c:	4603      	mov	r3, r0
 801bc3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801bc42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc46:	f023 0310 	bic.w	r3, r3, #16
 801bc4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801bc4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc52:	4619      	mov	r1, r3
 801bc54:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801bc58:	f000 fe03 	bl	801c862 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801bc5c:	2104      	movs	r1, #4
 801bc5e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801bc62:	f000 fdfe 	bl	801c862 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801bc66:	f640 009b 	movw	r0, #2203	; 0x89b
 801bc6a:	f000 fe0c 	bl	801c886 <RadioRead>
 801bc6e:	4603      	mov	r3, r0
 801bc70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801bc74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc78:	f023 031c 	bic.w	r3, r3, #28
 801bc7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801bc80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc84:	f043 0308 	orr.w	r3, r3, #8
 801bc88:	b2db      	uxtb	r3, r3
 801bc8a:	4619      	mov	r1, r3
 801bc8c:	f640 009b 	movw	r0, #2203	; 0x89b
 801bc90:	f000 fde7 	bl	801c862 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801bc94:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801bc98:	f000 fdf5 	bl	801c886 <RadioRead>
 801bc9c:	4603      	mov	r3, r0
 801bc9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801bca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bca6:	f023 0318 	bic.w	r3, r3, #24
 801bcaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801bcae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bcb2:	f043 0318 	orr.w	r3, r3, #24
 801bcb6:	b2db      	uxtb	r3, r3
 801bcb8:	4619      	mov	r1, r3
 801bcba:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801bcbe:	f000 fdd0 	bl	801c862 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801bcc2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801bcc6:	f000 fdde 	bl	801c886 <RadioRead>
 801bcca:	4603      	mov	r3, r0
 801bccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801bcd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bcd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bcd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801bcdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bce0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801bce4:	b2db      	uxtb	r3, r3
 801bce6:	4619      	mov	r1, r3
 801bce8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801bcec:	f000 fdb9 	bl	801c862 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801bcf0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bcf2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801bcf6:	fb02 f303 	mul.w	r3, r2, r3
 801bcfa:	461a      	mov	r2, r3
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	fbb2 f3f3 	udiv	r3, r2, r3
 801bd02:	4a4b      	ldr	r2, [pc, #300]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bd04:	6093      	str	r3, [r2, #8]
            break;
 801bd06:	e115      	b.n	801bf34 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801bd08:	2000      	movs	r0, #0
 801bd0a:	f001 ffff 	bl	801dd0c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bd0e:	4b48      	ldr	r3, [pc, #288]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bd10:	2200      	movs	r2, #0
 801bd12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bd16:	4a46      	ldr	r2, [pc, #280]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801bd1c:	4b44      	ldr	r3, [pc, #272]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bd1e:	220b      	movs	r2, #11
 801bd20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bd24:	68b8      	ldr	r0, [r7, #8]
 801bd26:	f002 fec3 	bl	801eab0 <SUBGRF_GetFskBandwidthRegValue>
 801bd2a:	4603      	mov	r3, r0
 801bd2c:	461a      	mov	r2, r3
 801bd2e:	4b40      	ldr	r3, [pc, #256]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bd30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bd34:	4b3e      	ldr	r3, [pc, #248]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bd36:	2200      	movs	r2, #0
 801bd38:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bd3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bd3c:	00db      	lsls	r3, r3, #3
 801bd3e:	b29a      	uxth	r2, r3
 801bd40:	4b3b      	ldr	r3, [pc, #236]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bd42:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801bd44:	4b3a      	ldr	r3, [pc, #232]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bd46:	2204      	movs	r2, #4
 801bd48:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801bd4a:	4b39      	ldr	r3, [pc, #228]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bd4c:	2218      	movs	r2, #24
 801bd4e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bd50:	4b37      	ldr	r3, [pc, #220]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bd52:	2200      	movs	r2, #0
 801bd54:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801bd56:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801bd5a:	f083 0301 	eor.w	r3, r3, #1
 801bd5e:	b2db      	uxtb	r3, r3
 801bd60:	461a      	mov	r2, r3
 801bd62:	4b33      	ldr	r3, [pc, #204]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bd64:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801bd66:	4b33      	ldr	r3, [pc, #204]	; (801be34 <RadioSetRxConfig+0x300>)
 801bd68:	781a      	ldrb	r2, [r3, #0]
 801bd6a:	4b31      	ldr	r3, [pc, #196]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bd6c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801bd6e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d003      	beq.n	801bd7e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801bd76:	4b2e      	ldr	r3, [pc, #184]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bd78:	22f2      	movs	r2, #242	; 0xf2
 801bd7a:	75da      	strb	r2, [r3, #23]
 801bd7c:	e002      	b.n	801bd84 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801bd7e:	4b2c      	ldr	r3, [pc, #176]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bd80:	2201      	movs	r2, #1
 801bd82:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801bd84:	4b2a      	ldr	r3, [pc, #168]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bd86:	2201      	movs	r2, #1
 801bd88:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801bd8a:	f000 fc68 	bl	801c65e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801bd8e:	2000      	movs	r0, #0
 801bd90:	f7ff fdfc 	bl	801b98c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bd94:	4828      	ldr	r0, [pc, #160]	; (801be38 <RadioSetRxConfig+0x304>)
 801bd96:	f002 fa57 	bl	801e248 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bd9a:	4828      	ldr	r0, [pc, #160]	; (801be3c <RadioSetRxConfig+0x308>)
 801bd9c:	f002 fb26 	bl	801e3ec <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801bda0:	4a28      	ldr	r2, [pc, #160]	; (801be44 <RadioSetRxConfig+0x310>)
 801bda2:	f107 0314 	add.w	r3, r7, #20
 801bda6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bdaa:	e883 0003 	stmia.w	r3, {r0, r1}
 801bdae:	f107 0314 	add.w	r3, r7, #20
 801bdb2:	4618      	mov	r0, r3
 801bdb4:	f001 fde3 	bl	801d97e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801bdb8:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bdbc:	f001 fe2e 	bl	801da1c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801bdc0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bdc2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801bdc6:	fb02 f303 	mul.w	r3, r2, r3
 801bdca:	461a      	mov	r2, r3
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	fbb2 f3f3 	udiv	r3, r2, r3
 801bdd2:	4a17      	ldr	r2, [pc, #92]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bdd4:	6093      	str	r3, [r2, #8]
            break;
 801bdd6:	e0ad      	b.n	801bf34 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801bdd8:	2000      	movs	r0, #0
 801bdda:	f001 ff97 	bl	801dd0c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bdde:	4b14      	ldr	r3, [pc, #80]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bde0:	2201      	movs	r2, #1
 801bde2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	b2da      	uxtb	r2, r3
 801bdea:	4b11      	ldr	r3, [pc, #68]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bdec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801bdf0:	4a15      	ldr	r2, [pc, #84]	; (801be48 <RadioSetRxConfig+0x314>)
 801bdf2:	68bb      	ldr	r3, [r7, #8]
 801bdf4:	4413      	add	r3, r2
 801bdf6:	781a      	ldrb	r2, [r3, #0]
 801bdf8:	4b0d      	ldr	r3, [pc, #52]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801bdfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801bdfe:	4a0c      	ldr	r2, [pc, #48]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801be00:	7bbb      	ldrb	r3, [r7, #14]
 801be02:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801be06:	68bb      	ldr	r3, [r7, #8]
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d105      	bne.n	801be18 <RadioSetRxConfig+0x2e4>
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	2b0b      	cmp	r3, #11
 801be10:	d008      	beq.n	801be24 <RadioSetRxConfig+0x2f0>
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	2b0c      	cmp	r3, #12
 801be16:	d005      	beq.n	801be24 <RadioSetRxConfig+0x2f0>
 801be18:	68bb      	ldr	r3, [r7, #8]
 801be1a:	2b01      	cmp	r3, #1
 801be1c:	d116      	bne.n	801be4c <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	2b0c      	cmp	r3, #12
 801be22:	d113      	bne.n	801be4c <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801be24:	4b02      	ldr	r3, [pc, #8]	; (801be30 <RadioSetRxConfig+0x2fc>)
 801be26:	2201      	movs	r2, #1
 801be28:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801be2c:	e012      	b.n	801be54 <RadioSetRxConfig+0x320>
 801be2e:	bf00      	nop
 801be30:	20001be0 	.word	0x20001be0
 801be34:	20000134 	.word	0x20000134
 801be38:	20001c18 	.word	0x20001c18
 801be3c:	20001bee 	.word	0x20001bee
 801be40:	0802192c 	.word	0x0802192c
 801be44:	08021934 	.word	0x08021934
 801be48:	08022008 	.word	0x08022008
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801be4c:	4b3b      	ldr	r3, [pc, #236]	; (801bf3c <RadioSetRxConfig+0x408>)
 801be4e:	2200      	movs	r2, #0
 801be50:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801be54:	4b39      	ldr	r3, [pc, #228]	; (801bf3c <RadioSetRxConfig+0x408>)
 801be56:	2201      	movs	r2, #1
 801be58:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801be5a:	4b38      	ldr	r3, [pc, #224]	; (801bf3c <RadioSetRxConfig+0x408>)
 801be5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801be60:	2b05      	cmp	r3, #5
 801be62:	d004      	beq.n	801be6e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801be64:	4b35      	ldr	r3, [pc, #212]	; (801bf3c <RadioSetRxConfig+0x408>)
 801be66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801be6a:	2b06      	cmp	r3, #6
 801be6c:	d10a      	bne.n	801be84 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801be6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801be70:	2b0b      	cmp	r3, #11
 801be72:	d803      	bhi.n	801be7c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801be74:	4b31      	ldr	r3, [pc, #196]	; (801bf3c <RadioSetRxConfig+0x408>)
 801be76:	220c      	movs	r2, #12
 801be78:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801be7a:	e006      	b.n	801be8a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801be7c:	4a2f      	ldr	r2, [pc, #188]	; (801bf3c <RadioSetRxConfig+0x408>)
 801be7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801be80:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801be82:	e002      	b.n	801be8a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801be84:	4a2d      	ldr	r2, [pc, #180]	; (801bf3c <RadioSetRxConfig+0x408>)
 801be86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801be88:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801be8a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801be8e:	4b2b      	ldr	r3, [pc, #172]	; (801bf3c <RadioSetRxConfig+0x408>)
 801be90:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801be92:	4b2b      	ldr	r3, [pc, #172]	; (801bf40 <RadioSetRxConfig+0x40c>)
 801be94:	781a      	ldrb	r2, [r3, #0]
 801be96:	4b29      	ldr	r3, [pc, #164]	; (801bf3c <RadioSetRxConfig+0x408>)
 801be98:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801be9a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801be9e:	4b27      	ldr	r3, [pc, #156]	; (801bf3c <RadioSetRxConfig+0x408>)
 801bea0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801bea4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801bea8:	4b24      	ldr	r3, [pc, #144]	; (801bf3c <RadioSetRxConfig+0x408>)
 801beaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801beae:	f000 fbd6 	bl	801c65e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801beb2:	2001      	movs	r0, #1
 801beb4:	f7ff fd6a 	bl	801b98c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801beb8:	4822      	ldr	r0, [pc, #136]	; (801bf44 <RadioSetRxConfig+0x410>)
 801beba:	f002 f9c5 	bl	801e248 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bebe:	4822      	ldr	r0, [pc, #136]	; (801bf48 <RadioSetRxConfig+0x414>)
 801bec0:	f002 fa94 	bl	801e3ec <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801bec4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bec6:	b2db      	uxtb	r3, r3
 801bec8:	4618      	mov	r0, r3
 801beca:	f001 ff2e 	bl	801dd2a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801bece:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801bed2:	f002 fbe7 	bl	801e6a4 <SUBGRF_ReadRegister>
 801bed6:	4603      	mov	r3, r0
 801bed8:	f003 0301 	and.w	r3, r3, #1
 801bedc:	b2db      	uxtb	r3, r3
 801bede:	4619      	mov	r1, r3
 801bee0:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801bee4:	f002 fbca 	bl	801e67c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801bee8:	4b14      	ldr	r3, [pc, #80]	; (801bf3c <RadioSetRxConfig+0x408>)
 801beea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801beee:	2b01      	cmp	r3, #1
 801bef0:	d10d      	bne.n	801bf0e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801bef2:	f240 7036 	movw	r0, #1846	; 0x736
 801bef6:	f002 fbd5 	bl	801e6a4 <SUBGRF_ReadRegister>
 801befa:	4603      	mov	r3, r0
 801befc:	f023 0304 	bic.w	r3, r3, #4
 801bf00:	b2db      	uxtb	r3, r3
 801bf02:	4619      	mov	r1, r3
 801bf04:	f240 7036 	movw	r0, #1846	; 0x736
 801bf08:	f002 fbb8 	bl	801e67c <SUBGRF_WriteRegister>
 801bf0c:	e00c      	b.n	801bf28 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801bf0e:	f240 7036 	movw	r0, #1846	; 0x736
 801bf12:	f002 fbc7 	bl	801e6a4 <SUBGRF_ReadRegister>
 801bf16:	4603      	mov	r3, r0
 801bf18:	f043 0304 	orr.w	r3, r3, #4
 801bf1c:	b2db      	uxtb	r3, r3
 801bf1e:	4619      	mov	r1, r3
 801bf20:	f240 7036 	movw	r0, #1846	; 0x736
 801bf24:	f002 fbaa 	bl	801e67c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801bf28:	4b04      	ldr	r3, [pc, #16]	; (801bf3c <RadioSetRxConfig+0x408>)
 801bf2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bf2e:	609a      	str	r2, [r3, #8]
            break;
 801bf30:	e000      	b.n	801bf34 <RadioSetRxConfig+0x400>
            break;
 801bf32:	bf00      	nop
    }
}
 801bf34:	bf00      	nop
 801bf36:	3728      	adds	r7, #40	; 0x28
 801bf38:	46bd      	mov	sp, r7
 801bf3a:	bd80      	pop	{r7, pc}
 801bf3c:	20001be0 	.word	0x20001be0
 801bf40:	20000134 	.word	0x20000134
 801bf44:	20001c18 	.word	0x20001c18
 801bf48:	20001bee 	.word	0x20001bee

0801bf4c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801bf4c:	b580      	push	{r7, lr}
 801bf4e:	b086      	sub	sp, #24
 801bf50:	af00      	add	r7, sp, #0
 801bf52:	60ba      	str	r2, [r7, #8]
 801bf54:	607b      	str	r3, [r7, #4]
 801bf56:	4603      	mov	r3, r0
 801bf58:	73fb      	strb	r3, [r7, #15]
 801bf5a:	460b      	mov	r3, r1
 801bf5c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801bf5e:	f002 fe74 	bl	801ec4a <RFW_DeInit>
    switch( modem )
 801bf62:	7bfb      	ldrb	r3, [r7, #15]
 801bf64:	2b04      	cmp	r3, #4
 801bf66:	f000 80c7 	beq.w	801c0f8 <RadioSetTxConfig+0x1ac>
 801bf6a:	2b04      	cmp	r3, #4
 801bf6c:	f300 80d6 	bgt.w	801c11c <RadioSetTxConfig+0x1d0>
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d002      	beq.n	801bf7a <RadioSetTxConfig+0x2e>
 801bf74:	2b01      	cmp	r3, #1
 801bf76:	d059      	beq.n	801c02c <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801bf78:	e0d0      	b.n	801c11c <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bf7a:	4b77      	ldr	r3, [pc, #476]	; (801c158 <RadioSetTxConfig+0x20c>)
 801bf7c:	2200      	movs	r2, #0
 801bf7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bf82:	4a75      	ldr	r2, [pc, #468]	; (801c158 <RadioSetTxConfig+0x20c>)
 801bf84:	6a3b      	ldr	r3, [r7, #32]
 801bf86:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801bf88:	4b73      	ldr	r3, [pc, #460]	; (801c158 <RadioSetTxConfig+0x20c>)
 801bf8a:	220b      	movs	r2, #11
 801bf8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bf90:	6878      	ldr	r0, [r7, #4]
 801bf92:	f002 fd8d 	bl	801eab0 <SUBGRF_GetFskBandwidthRegValue>
 801bf96:	4603      	mov	r3, r0
 801bf98:	461a      	mov	r2, r3
 801bf9a:	4b6f      	ldr	r3, [pc, #444]	; (801c158 <RadioSetTxConfig+0x20c>)
 801bf9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801bfa0:	4a6d      	ldr	r2, [pc, #436]	; (801c158 <RadioSetTxConfig+0x20c>)
 801bfa2:	68bb      	ldr	r3, [r7, #8]
 801bfa4:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bfa6:	4b6c      	ldr	r3, [pc, #432]	; (801c158 <RadioSetTxConfig+0x20c>)
 801bfa8:	2200      	movs	r2, #0
 801bfaa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bfac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bfae:	00db      	lsls	r3, r3, #3
 801bfb0:	b29a      	uxth	r2, r3
 801bfb2:	4b69      	ldr	r3, [pc, #420]	; (801c158 <RadioSetTxConfig+0x20c>)
 801bfb4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801bfb6:	4b68      	ldr	r3, [pc, #416]	; (801c158 <RadioSetTxConfig+0x20c>)
 801bfb8:	2204      	movs	r2, #4
 801bfba:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801bfbc:	4b66      	ldr	r3, [pc, #408]	; (801c158 <RadioSetTxConfig+0x20c>)
 801bfbe:	2218      	movs	r2, #24
 801bfc0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bfc2:	4b65      	ldr	r3, [pc, #404]	; (801c158 <RadioSetTxConfig+0x20c>)
 801bfc4:	2200      	movs	r2, #0
 801bfc6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801bfc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801bfcc:	f083 0301 	eor.w	r3, r3, #1
 801bfd0:	b2db      	uxtb	r3, r3
 801bfd2:	461a      	mov	r2, r3
 801bfd4:	4b60      	ldr	r3, [pc, #384]	; (801c158 <RadioSetTxConfig+0x20c>)
 801bfd6:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801bfd8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d003      	beq.n	801bfe8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801bfe0:	4b5d      	ldr	r3, [pc, #372]	; (801c158 <RadioSetTxConfig+0x20c>)
 801bfe2:	22f2      	movs	r2, #242	; 0xf2
 801bfe4:	75da      	strb	r2, [r3, #23]
 801bfe6:	e002      	b.n	801bfee <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801bfe8:	4b5b      	ldr	r3, [pc, #364]	; (801c158 <RadioSetTxConfig+0x20c>)
 801bfea:	2201      	movs	r2, #1
 801bfec:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801bfee:	4b5a      	ldr	r3, [pc, #360]	; (801c158 <RadioSetTxConfig+0x20c>)
 801bff0:	2201      	movs	r2, #1
 801bff2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801bff4:	f000 fb33 	bl	801c65e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801bff8:	2000      	movs	r0, #0
 801bffa:	f7ff fcc7 	bl	801b98c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bffe:	4857      	ldr	r0, [pc, #348]	; (801c15c <RadioSetTxConfig+0x210>)
 801c000:	f002 f922 	bl	801e248 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c004:	4856      	ldr	r0, [pc, #344]	; (801c160 <RadioSetTxConfig+0x214>)
 801c006:	f002 f9f1 	bl	801e3ec <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801c00a:	4a56      	ldr	r2, [pc, #344]	; (801c164 <RadioSetTxConfig+0x218>)
 801c00c:	f107 0310 	add.w	r3, r7, #16
 801c010:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c014:	e883 0003 	stmia.w	r3, {r0, r1}
 801c018:	f107 0310 	add.w	r3, r7, #16
 801c01c:	4618      	mov	r0, r3
 801c01e:	f001 fcae 	bl	801d97e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801c022:	f240 10ff 	movw	r0, #511	; 0x1ff
 801c026:	f001 fcf9 	bl	801da1c <SUBGRF_SetWhiteningSeed>
            break;
 801c02a:	e078      	b.n	801c11e <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801c02c:	4b4a      	ldr	r3, [pc, #296]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c02e:	2201      	movs	r2, #1
 801c030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801c034:	6a3b      	ldr	r3, [r7, #32]
 801c036:	b2da      	uxtb	r2, r3
 801c038:	4b47      	ldr	r3, [pc, #284]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c03a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801c03e:	4a4a      	ldr	r2, [pc, #296]	; (801c168 <RadioSetTxConfig+0x21c>)
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	4413      	add	r3, r2
 801c044:	781a      	ldrb	r2, [r3, #0]
 801c046:	4b44      	ldr	r3, [pc, #272]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801c04c:	4a42      	ldr	r2, [pc, #264]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c04e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c052:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d105      	bne.n	801c068 <RadioSetTxConfig+0x11c>
 801c05c:	6a3b      	ldr	r3, [r7, #32]
 801c05e:	2b0b      	cmp	r3, #11
 801c060:	d008      	beq.n	801c074 <RadioSetTxConfig+0x128>
 801c062:	6a3b      	ldr	r3, [r7, #32]
 801c064:	2b0c      	cmp	r3, #12
 801c066:	d005      	beq.n	801c074 <RadioSetTxConfig+0x128>
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	2b01      	cmp	r3, #1
 801c06c:	d107      	bne.n	801c07e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801c06e:	6a3b      	ldr	r3, [r7, #32]
 801c070:	2b0c      	cmp	r3, #12
 801c072:	d104      	bne.n	801c07e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801c074:	4b38      	ldr	r3, [pc, #224]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c076:	2201      	movs	r2, #1
 801c078:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801c07c:	e003      	b.n	801c086 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801c07e:	4b36      	ldr	r3, [pc, #216]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c080:	2200      	movs	r2, #0
 801c082:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801c086:	4b34      	ldr	r3, [pc, #208]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c088:	2201      	movs	r2, #1
 801c08a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c08c:	4b32      	ldr	r3, [pc, #200]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c08e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c092:	2b05      	cmp	r3, #5
 801c094:	d004      	beq.n	801c0a0 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801c096:	4b30      	ldr	r3, [pc, #192]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c098:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c09c:	2b06      	cmp	r3, #6
 801c09e:	d10a      	bne.n	801c0b6 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801c0a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c0a2:	2b0b      	cmp	r3, #11
 801c0a4:	d803      	bhi.n	801c0ae <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801c0a6:	4b2c      	ldr	r3, [pc, #176]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c0a8:	220c      	movs	r2, #12
 801c0aa:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801c0ac:	e006      	b.n	801c0bc <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c0ae:	4a2a      	ldr	r2, [pc, #168]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c0b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c0b2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801c0b4:	e002      	b.n	801c0bc <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c0b6:	4a28      	ldr	r2, [pc, #160]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c0b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c0ba:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801c0bc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801c0c0:	4b25      	ldr	r3, [pc, #148]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c0c2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801c0c4:	4b29      	ldr	r3, [pc, #164]	; (801c16c <RadioSetTxConfig+0x220>)
 801c0c6:	781a      	ldrb	r2, [r3, #0]
 801c0c8:	4b23      	ldr	r3, [pc, #140]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c0ca:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801c0cc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801c0d0:	4b21      	ldr	r3, [pc, #132]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c0d2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801c0d6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801c0da:	4b1f      	ldr	r3, [pc, #124]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c0dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801c0e0:	f000 fabd 	bl	801c65e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801c0e4:	2001      	movs	r0, #1
 801c0e6:	f7ff fc51 	bl	801b98c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c0ea:	481c      	ldr	r0, [pc, #112]	; (801c15c <RadioSetTxConfig+0x210>)
 801c0ec:	f002 f8ac 	bl	801e248 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c0f0:	481b      	ldr	r0, [pc, #108]	; (801c160 <RadioSetTxConfig+0x214>)
 801c0f2:	f002 f97b 	bl	801e3ec <SUBGRF_SetPacketParams>
            break;
 801c0f6:	e012      	b.n	801c11e <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801c0f8:	2004      	movs	r0, #4
 801c0fa:	f7ff fc47 	bl	801b98c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801c0fe:	4b16      	ldr	r3, [pc, #88]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c100:	2202      	movs	r2, #2
 801c102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801c106:	4a14      	ldr	r2, [pc, #80]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c108:	6a3b      	ldr	r3, [r7, #32]
 801c10a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801c10c:	4b12      	ldr	r3, [pc, #72]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c10e:	2216      	movs	r2, #22
 801c110:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c114:	4811      	ldr	r0, [pc, #68]	; (801c15c <RadioSetTxConfig+0x210>)
 801c116:	f002 f897 	bl	801e248 <SUBGRF_SetModulationParams>
            break;
 801c11a:	e000      	b.n	801c11e <RadioSetTxConfig+0x1d2>
            break;
 801c11c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801c11e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c122:	4618      	mov	r0, r3
 801c124:	f002 fbc6 	bl	801e8b4 <SUBGRF_SetRfTxPower>
 801c128:	4603      	mov	r3, r0
 801c12a:	461a      	mov	r2, r3
 801c12c:	4b0a      	ldr	r3, [pc, #40]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c12e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801c132:	210e      	movs	r1, #14
 801c134:	f640 101f 	movw	r0, #2335	; 0x91f
 801c138:	f002 faa0 	bl	801e67c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801c13c:	4b06      	ldr	r3, [pc, #24]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c13e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c142:	4618      	mov	r0, r3
 801c144:	f002 fd95 	bl	801ec72 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801c148:	4a03      	ldr	r2, [pc, #12]	; (801c158 <RadioSetTxConfig+0x20c>)
 801c14a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c14c:	6053      	str	r3, [r2, #4]
}
 801c14e:	bf00      	nop
 801c150:	3718      	adds	r7, #24
 801c152:	46bd      	mov	sp, r7
 801c154:	bd80      	pop	{r7, pc}
 801c156:	bf00      	nop
 801c158:	20001be0 	.word	0x20001be0
 801c15c:	20001c18 	.word	0x20001c18
 801c160:	20001bee 	.word	0x20001bee
 801c164:	08021934 	.word	0x08021934
 801c168:	08022008 	.word	0x08022008
 801c16c:	20000134 	.word	0x20000134

0801c170 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801c170:	b480      	push	{r7}
 801c172:	b083      	sub	sp, #12
 801c174:	af00      	add	r7, sp, #0
 801c176:	6078      	str	r0, [r7, #4]
    return true;
 801c178:	2301      	movs	r3, #1
}
 801c17a:	4618      	mov	r0, r3
 801c17c:	370c      	adds	r7, #12
 801c17e:	46bd      	mov	sp, r7
 801c180:	bc80      	pop	{r7}
 801c182:	4770      	bx	lr

0801c184 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801c184:	b480      	push	{r7}
 801c186:	b085      	sub	sp, #20
 801c188:	af00      	add	r7, sp, #0
 801c18a:	4603      	mov	r3, r0
 801c18c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801c18e:	2300      	movs	r3, #0
 801c190:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801c192:	79fb      	ldrb	r3, [r7, #7]
 801c194:	2b0a      	cmp	r3, #10
 801c196:	d83e      	bhi.n	801c216 <RadioGetLoRaBandwidthInHz+0x92>
 801c198:	a201      	add	r2, pc, #4	; (adr r2, 801c1a0 <RadioGetLoRaBandwidthInHz+0x1c>)
 801c19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c19e:	bf00      	nop
 801c1a0:	0801c1cd 	.word	0x0801c1cd
 801c1a4:	0801c1dd 	.word	0x0801c1dd
 801c1a8:	0801c1ed 	.word	0x0801c1ed
 801c1ac:	0801c1fd 	.word	0x0801c1fd
 801c1b0:	0801c205 	.word	0x0801c205
 801c1b4:	0801c20b 	.word	0x0801c20b
 801c1b8:	0801c211 	.word	0x0801c211
 801c1bc:	0801c217 	.word	0x0801c217
 801c1c0:	0801c1d5 	.word	0x0801c1d5
 801c1c4:	0801c1e5 	.word	0x0801c1e5
 801c1c8:	0801c1f5 	.word	0x0801c1f5
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801c1cc:	f641 6384 	movw	r3, #7812	; 0x1e84
 801c1d0:	60fb      	str	r3, [r7, #12]
        break;
 801c1d2:	e020      	b.n	801c216 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801c1d4:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801c1d8:	60fb      	str	r3, [r7, #12]
        break;
 801c1da:	e01c      	b.n	801c216 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801c1dc:	f643 5309 	movw	r3, #15625	; 0x3d09
 801c1e0:	60fb      	str	r3, [r7, #12]
        break;
 801c1e2:	e018      	b.n	801c216 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801c1e4:	f245 1361 	movw	r3, #20833	; 0x5161
 801c1e8:	60fb      	str	r3, [r7, #12]
        break;
 801c1ea:	e014      	b.n	801c216 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801c1ec:	f647 2312 	movw	r3, #31250	; 0x7a12
 801c1f0:	60fb      	str	r3, [r7, #12]
        break;
 801c1f2:	e010      	b.n	801c216 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801c1f4:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801c1f8:	60fb      	str	r3, [r7, #12]
        break;
 801c1fa:	e00c      	b.n	801c216 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801c1fc:	f24f 4324 	movw	r3, #62500	; 0xf424
 801c200:	60fb      	str	r3, [r7, #12]
        break;
 801c202:	e008      	b.n	801c216 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801c204:	4b07      	ldr	r3, [pc, #28]	; (801c224 <RadioGetLoRaBandwidthInHz+0xa0>)
 801c206:	60fb      	str	r3, [r7, #12]
        break;
 801c208:	e005      	b.n	801c216 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801c20a:	4b07      	ldr	r3, [pc, #28]	; (801c228 <RadioGetLoRaBandwidthInHz+0xa4>)
 801c20c:	60fb      	str	r3, [r7, #12]
        break;
 801c20e:	e002      	b.n	801c216 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801c210:	4b06      	ldr	r3, [pc, #24]	; (801c22c <RadioGetLoRaBandwidthInHz+0xa8>)
 801c212:	60fb      	str	r3, [r7, #12]
        break;
 801c214:	bf00      	nop
    }

    return bandwidthInHz;
 801c216:	68fb      	ldr	r3, [r7, #12]
}
 801c218:	4618      	mov	r0, r3
 801c21a:	3714      	adds	r7, #20
 801c21c:	46bd      	mov	sp, r7
 801c21e:	bc80      	pop	{r7}
 801c220:	4770      	bx	lr
 801c222:	bf00      	nop
 801c224:	0001e848 	.word	0x0001e848
 801c228:	0003d090 	.word	0x0003d090
 801c22c:	0007a120 	.word	0x0007a120

0801c230 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801c230:	b480      	push	{r7}
 801c232:	b083      	sub	sp, #12
 801c234:	af00      	add	r7, sp, #0
 801c236:	6078      	str	r0, [r7, #4]
 801c238:	4608      	mov	r0, r1
 801c23a:	4611      	mov	r1, r2
 801c23c:	461a      	mov	r2, r3
 801c23e:	4603      	mov	r3, r0
 801c240:	70fb      	strb	r3, [r7, #3]
 801c242:	460b      	mov	r3, r1
 801c244:	803b      	strh	r3, [r7, #0]
 801c246:	4613      	mov	r3, r2
 801c248:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801c24a:	883b      	ldrh	r3, [r7, #0]
 801c24c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c24e:	78ba      	ldrb	r2, [r7, #2]
 801c250:	f082 0201 	eor.w	r2, r2, #1
 801c254:	b2d2      	uxtb	r2, r2
 801c256:	2a00      	cmp	r2, #0
 801c258:	d001      	beq.n	801c25e <RadioGetGfskTimeOnAirNumerator+0x2e>
 801c25a:	2208      	movs	r2, #8
 801c25c:	e000      	b.n	801c260 <RadioGetGfskTimeOnAirNumerator+0x30>
 801c25e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801c260:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c262:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801c266:	7c3b      	ldrb	r3, [r7, #16]
 801c268:	7d39      	ldrb	r1, [r7, #20]
 801c26a:	2900      	cmp	r1, #0
 801c26c:	d001      	beq.n	801c272 <RadioGetGfskTimeOnAirNumerator+0x42>
 801c26e:	2102      	movs	r1, #2
 801c270:	e000      	b.n	801c274 <RadioGetGfskTimeOnAirNumerator+0x44>
 801c272:	2100      	movs	r1, #0
 801c274:	440b      	add	r3, r1
 801c276:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c278:	4413      	add	r3, r2
}
 801c27a:	4618      	mov	r0, r3
 801c27c:	370c      	adds	r7, #12
 801c27e:	46bd      	mov	sp, r7
 801c280:	bc80      	pop	{r7}
 801c282:	4770      	bx	lr

0801c284 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801c284:	b480      	push	{r7}
 801c286:	b08b      	sub	sp, #44	; 0x2c
 801c288:	af00      	add	r7, sp, #0
 801c28a:	60f8      	str	r0, [r7, #12]
 801c28c:	60b9      	str	r1, [r7, #8]
 801c28e:	4611      	mov	r1, r2
 801c290:	461a      	mov	r2, r3
 801c292:	460b      	mov	r3, r1
 801c294:	71fb      	strb	r3, [r7, #7]
 801c296:	4613      	mov	r3, r2
 801c298:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801c29a:	79fb      	ldrb	r3, [r7, #7]
 801c29c:	3304      	adds	r3, #4
 801c29e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801c2a0:	2300      	movs	r3, #0
 801c2a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801c2a6:	68bb      	ldr	r3, [r7, #8]
 801c2a8:	2b05      	cmp	r3, #5
 801c2aa:	d002      	beq.n	801c2b2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801c2ac:	68bb      	ldr	r3, [r7, #8]
 801c2ae:	2b06      	cmp	r3, #6
 801c2b0:	d104      	bne.n	801c2bc <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801c2b2:	88bb      	ldrh	r3, [r7, #4]
 801c2b4:	2b0b      	cmp	r3, #11
 801c2b6:	d801      	bhi.n	801c2bc <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801c2b8:	230c      	movs	r3, #12
 801c2ba:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d105      	bne.n	801c2ce <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801c2c2:	68bb      	ldr	r3, [r7, #8]
 801c2c4:	2b0b      	cmp	r3, #11
 801c2c6:	d008      	beq.n	801c2da <RadioGetLoRaTimeOnAirNumerator+0x56>
 801c2c8:	68bb      	ldr	r3, [r7, #8]
 801c2ca:	2b0c      	cmp	r3, #12
 801c2cc:	d005      	beq.n	801c2da <RadioGetLoRaTimeOnAirNumerator+0x56>
 801c2ce:	68fb      	ldr	r3, [r7, #12]
 801c2d0:	2b01      	cmp	r3, #1
 801c2d2:	d105      	bne.n	801c2e0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801c2d4:	68bb      	ldr	r3, [r7, #8]
 801c2d6:	2b0c      	cmp	r3, #12
 801c2d8:	d102      	bne.n	801c2e0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801c2da:	2301      	movs	r3, #1
 801c2dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c2e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801c2e4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801c2e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801c2ea:	2a00      	cmp	r2, #0
 801c2ec:	d001      	beq.n	801c2f2 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801c2ee:	2210      	movs	r2, #16
 801c2f0:	e000      	b.n	801c2f4 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801c2f2:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c2f4:	4413      	add	r3, r2
 801c2f6:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801c2f8:	68bb      	ldr	r3, [r7, #8]
 801c2fa:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801c2fc:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801c2fe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801c302:	2a00      	cmp	r2, #0
 801c304:	d001      	beq.n	801c30a <RadioGetLoRaTimeOnAirNumerator+0x86>
 801c306:	2200      	movs	r2, #0
 801c308:	e000      	b.n	801c30c <RadioGetLoRaTimeOnAirNumerator+0x88>
 801c30a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801c30c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c30e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801c310:	68bb      	ldr	r3, [r7, #8]
 801c312:	2b06      	cmp	r3, #6
 801c314:	d803      	bhi.n	801c31e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801c316:	68bb      	ldr	r3, [r7, #8]
 801c318:	009b      	lsls	r3, r3, #2
 801c31a:	623b      	str	r3, [r7, #32]
 801c31c:	e00e      	b.n	801c33c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801c31e:	69fb      	ldr	r3, [r7, #28]
 801c320:	3308      	adds	r3, #8
 801c322:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801c324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c328:	2b00      	cmp	r3, #0
 801c32a:	d004      	beq.n	801c336 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801c32c:	68bb      	ldr	r3, [r7, #8]
 801c32e:	3b02      	subs	r3, #2
 801c330:	009b      	lsls	r3, r3, #2
 801c332:	623b      	str	r3, [r7, #32]
 801c334:	e002      	b.n	801c33c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801c336:	68bb      	ldr	r3, [r7, #8]
 801c338:	009b      	lsls	r3, r3, #2
 801c33a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801c33c:	69fb      	ldr	r3, [r7, #28]
 801c33e:	2b00      	cmp	r3, #0
 801c340:	da01      	bge.n	801c346 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801c342:	2300      	movs	r3, #0
 801c344:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801c346:	69fa      	ldr	r2, [r7, #28]
 801c348:	6a3b      	ldr	r3, [r7, #32]
 801c34a:	4413      	add	r3, r2
 801c34c:	1e5a      	subs	r2, r3, #1
 801c34e:	6a3b      	ldr	r3, [r7, #32]
 801c350:	fb92 f3f3 	sdiv	r3, r2, r3
 801c354:	697a      	ldr	r2, [r7, #20]
 801c356:	fb03 f202 	mul.w	r2, r3, r2
 801c35a:	88bb      	ldrh	r3, [r7, #4]
 801c35c:	4413      	add	r3, r2
    int32_t intermediate =
 801c35e:	330c      	adds	r3, #12
 801c360:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801c362:	68bb      	ldr	r3, [r7, #8]
 801c364:	2b06      	cmp	r3, #6
 801c366:	d802      	bhi.n	801c36e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801c368:	69bb      	ldr	r3, [r7, #24]
 801c36a:	3302      	adds	r3, #2
 801c36c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801c36e:	69bb      	ldr	r3, [r7, #24]
 801c370:	009b      	lsls	r3, r3, #2
 801c372:	1c5a      	adds	r2, r3, #1
 801c374:	68bb      	ldr	r3, [r7, #8]
 801c376:	3b02      	subs	r3, #2
 801c378:	fa02 f303 	lsl.w	r3, r2, r3
}
 801c37c:	4618      	mov	r0, r3
 801c37e:	372c      	adds	r7, #44	; 0x2c
 801c380:	46bd      	mov	sp, r7
 801c382:	bc80      	pop	{r7}
 801c384:	4770      	bx	lr
	...

0801c388 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801c388:	b580      	push	{r7, lr}
 801c38a:	b08a      	sub	sp, #40	; 0x28
 801c38c:	af04      	add	r7, sp, #16
 801c38e:	60b9      	str	r1, [r7, #8]
 801c390:	607a      	str	r2, [r7, #4]
 801c392:	461a      	mov	r2, r3
 801c394:	4603      	mov	r3, r0
 801c396:	73fb      	strb	r3, [r7, #15]
 801c398:	4613      	mov	r3, r2
 801c39a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801c39c:	2300      	movs	r3, #0
 801c39e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801c3a0:	2301      	movs	r3, #1
 801c3a2:	613b      	str	r3, [r7, #16]

    switch( modem )
 801c3a4:	7bfb      	ldrb	r3, [r7, #15]
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d002      	beq.n	801c3b0 <RadioTimeOnAir+0x28>
 801c3aa:	2b01      	cmp	r3, #1
 801c3ac:	d017      	beq.n	801c3de <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801c3ae:	e035      	b.n	801c41c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801c3b0:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801c3b4:	8c3a      	ldrh	r2, [r7, #32]
 801c3b6:	7bb9      	ldrb	r1, [r7, #14]
 801c3b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c3bc:	9301      	str	r3, [sp, #4]
 801c3be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c3c2:	9300      	str	r3, [sp, #0]
 801c3c4:	4603      	mov	r3, r0
 801c3c6:	6878      	ldr	r0, [r7, #4]
 801c3c8:	f7ff ff32 	bl	801c230 <RadioGetGfskTimeOnAirNumerator>
 801c3cc:	4603      	mov	r3, r0
 801c3ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c3d2:	fb02 f303 	mul.w	r3, r2, r3
 801c3d6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	613b      	str	r3, [r7, #16]
        break;
 801c3dc:	e01e      	b.n	801c41c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801c3de:	8c39      	ldrh	r1, [r7, #32]
 801c3e0:	7bba      	ldrb	r2, [r7, #14]
 801c3e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c3e6:	9302      	str	r3, [sp, #8]
 801c3e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c3ec:	9301      	str	r3, [sp, #4]
 801c3ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c3f2:	9300      	str	r3, [sp, #0]
 801c3f4:	460b      	mov	r3, r1
 801c3f6:	6879      	ldr	r1, [r7, #4]
 801c3f8:	68b8      	ldr	r0, [r7, #8]
 801c3fa:	f7ff ff43 	bl	801c284 <RadioGetLoRaTimeOnAirNumerator>
 801c3fe:	4603      	mov	r3, r0
 801c400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c404:	fb02 f303 	mul.w	r3, r2, r3
 801c408:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801c40a:	4a0a      	ldr	r2, [pc, #40]	; (801c434 <RadioTimeOnAir+0xac>)
 801c40c:	68bb      	ldr	r3, [r7, #8]
 801c40e:	4413      	add	r3, r2
 801c410:	781b      	ldrb	r3, [r3, #0]
 801c412:	4618      	mov	r0, r3
 801c414:	f7ff feb6 	bl	801c184 <RadioGetLoRaBandwidthInHz>
 801c418:	6138      	str	r0, [r7, #16]
        break;
 801c41a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801c41c:	697a      	ldr	r2, [r7, #20]
 801c41e:	693b      	ldr	r3, [r7, #16]
 801c420:	4413      	add	r3, r2
 801c422:	1e5a      	subs	r2, r3, #1
 801c424:	693b      	ldr	r3, [r7, #16]
 801c426:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801c42a:	4618      	mov	r0, r3
 801c42c:	3718      	adds	r7, #24
 801c42e:	46bd      	mov	sp, r7
 801c430:	bd80      	pop	{r7, pc}
 801c432:	bf00      	nop
 801c434:	08022008 	.word	0x08022008

0801c438 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801c438:	b580      	push	{r7, lr}
 801c43a:	b084      	sub	sp, #16
 801c43c:	af00      	add	r7, sp, #0
 801c43e:	6078      	str	r0, [r7, #4]
 801c440:	460b      	mov	r3, r1
 801c442:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801c444:	2300      	movs	r3, #0
 801c446:	2200      	movs	r2, #0
 801c448:	f240 2101 	movw	r1, #513	; 0x201
 801c44c:	f240 2001 	movw	r0, #513	; 0x201
 801c450:	f001 fd64 	bl	801df1c <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801c454:	4b73      	ldr	r3, [pc, #460]	; (801c624 <RadioSend+0x1ec>)
 801c456:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c45a:	2101      	movs	r1, #1
 801c45c:	4618      	mov	r0, r3
 801c45e:	f002 fa01 	bl	801e864 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801c462:	4b70      	ldr	r3, [pc, #448]	; (801c624 <RadioSend+0x1ec>)
 801c464:	781b      	ldrb	r3, [r3, #0]
 801c466:	2b01      	cmp	r3, #1
 801c468:	d112      	bne.n	801c490 <RadioSend+0x58>
 801c46a:	4b6e      	ldr	r3, [pc, #440]	; (801c624 <RadioSend+0x1ec>)
 801c46c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c470:	2b06      	cmp	r3, #6
 801c472:	d10d      	bne.n	801c490 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801c474:	f640 0089 	movw	r0, #2185	; 0x889
 801c478:	f002 f914 	bl	801e6a4 <SUBGRF_ReadRegister>
 801c47c:	4603      	mov	r3, r0
 801c47e:	f023 0304 	bic.w	r3, r3, #4
 801c482:	b2db      	uxtb	r3, r3
 801c484:	4619      	mov	r1, r3
 801c486:	f640 0089 	movw	r0, #2185	; 0x889
 801c48a:	f002 f8f7 	bl	801e67c <SUBGRF_WriteRegister>
 801c48e:	e00c      	b.n	801c4aa <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801c490:	f640 0089 	movw	r0, #2185	; 0x889
 801c494:	f002 f906 	bl	801e6a4 <SUBGRF_ReadRegister>
 801c498:	4603      	mov	r3, r0
 801c49a:	f043 0304 	orr.w	r3, r3, #4
 801c49e:	b2db      	uxtb	r3, r3
 801c4a0:	4619      	mov	r1, r3
 801c4a2:	f640 0089 	movw	r0, #2185	; 0x889
 801c4a6:	f002 f8e9 	bl	801e67c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801c4aa:	4b5e      	ldr	r3, [pc, #376]	; (801c624 <RadioSend+0x1ec>)
 801c4ac:	781b      	ldrb	r3, [r3, #0]
 801c4ae:	2b04      	cmp	r3, #4
 801c4b0:	f200 80a8 	bhi.w	801c604 <RadioSend+0x1cc>
 801c4b4:	a201      	add	r2, pc, #4	; (adr r2, 801c4bc <RadioSend+0x84>)
 801c4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c4ba:	bf00      	nop
 801c4bc:	0801c4eb 	.word	0x0801c4eb
 801c4c0:	0801c4d1 	.word	0x0801c4d1
 801c4c4:	0801c4eb 	.word	0x0801c4eb
 801c4c8:	0801c54d 	.word	0x0801c54d
 801c4cc:	0801c56d 	.word	0x0801c56d
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801c4d0:	4a54      	ldr	r2, [pc, #336]	; (801c624 <RadioSend+0x1ec>)
 801c4d2:	78fb      	ldrb	r3, [r7, #3]
 801c4d4:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c4d6:	4854      	ldr	r0, [pc, #336]	; (801c628 <RadioSend+0x1f0>)
 801c4d8:	f001 ff88 	bl	801e3ec <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c4dc:	78fb      	ldrb	r3, [r7, #3]
 801c4de:	2200      	movs	r2, #0
 801c4e0:	4619      	mov	r1, r3
 801c4e2:	6878      	ldr	r0, [r7, #4]
 801c4e4:	f001 fa38 	bl	801d958 <SUBGRF_SendPayload>
            break;
 801c4e8:	e08d      	b.n	801c606 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801c4ea:	f002 fbb4 	bl	801ec56 <RFW_Is_Init>
 801c4ee:	4603      	mov	r3, r0
 801c4f0:	2b01      	cmp	r3, #1
 801c4f2:	d11e      	bne.n	801c532 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801c4f4:	f107 020d 	add.w	r2, r7, #13
 801c4f8:	78fb      	ldrb	r3, [r7, #3]
 801c4fa:	4619      	mov	r1, r3
 801c4fc:	6878      	ldr	r0, [r7, #4]
 801c4fe:	f002 fbc2 	bl	801ec86 <RFW_TransmitInit>
 801c502:	4603      	mov	r3, r0
 801c504:	2b00      	cmp	r3, #0
 801c506:	d10c      	bne.n	801c522 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801c508:	7b7a      	ldrb	r2, [r7, #13]
 801c50a:	4b46      	ldr	r3, [pc, #280]	; (801c624 <RadioSend+0x1ec>)
 801c50c:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c50e:	4846      	ldr	r0, [pc, #280]	; (801c628 <RadioSend+0x1f0>)
 801c510:	f001 ff6c 	bl	801e3ec <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801c514:	7b7b      	ldrb	r3, [r7, #13]
 801c516:	2200      	movs	r2, #0
 801c518:	4619      	mov	r1, r3
 801c51a:	6878      	ldr	r0, [r7, #4]
 801c51c:	f001 fa1c 	bl	801d958 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801c520:	e071      	b.n	801c606 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801c522:	4b42      	ldr	r3, [pc, #264]	; (801c62c <RadioSend+0x1f4>)
 801c524:	2201      	movs	r2, #1
 801c526:	2100      	movs	r1, #0
 801c528:	2002      	movs	r0, #2
 801c52a:	f003 fb93 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801c52e:	2303      	movs	r3, #3
 801c530:	e073      	b.n	801c61a <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801c532:	4a3c      	ldr	r2, [pc, #240]	; (801c624 <RadioSend+0x1ec>)
 801c534:	78fb      	ldrb	r3, [r7, #3]
 801c536:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c538:	483b      	ldr	r0, [pc, #236]	; (801c628 <RadioSend+0x1f0>)
 801c53a:	f001 ff57 	bl	801e3ec <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801c53e:	78fb      	ldrb	r3, [r7, #3]
 801c540:	2200      	movs	r2, #0
 801c542:	4619      	mov	r1, r3
 801c544:	6878      	ldr	r0, [r7, #4]
 801c546:	f001 fa07 	bl	801d958 <SUBGRF_SendPayload>
            break;
 801c54a:	e05c      	b.n	801c606 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c54c:	4b35      	ldr	r3, [pc, #212]	; (801c624 <RadioSend+0x1ec>)
 801c54e:	2202      	movs	r2, #2
 801c550:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801c552:	4a34      	ldr	r2, [pc, #208]	; (801c624 <RadioSend+0x1ec>)
 801c554:	78fb      	ldrb	r3, [r7, #3]
 801c556:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c558:	4833      	ldr	r0, [pc, #204]	; (801c628 <RadioSend+0x1f0>)
 801c55a:	f001 ff47 	bl	801e3ec <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c55e:	78fb      	ldrb	r3, [r7, #3]
 801c560:	2200      	movs	r2, #0
 801c562:	4619      	mov	r1, r3
 801c564:	6878      	ldr	r0, [r7, #4]
 801c566:	f001 f9f7 	bl	801d958 <SUBGRF_SendPayload>
            break;
 801c56a:	e04c      	b.n	801c606 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801c56c:	78fb      	ldrb	r3, [r7, #3]
 801c56e:	461a      	mov	r2, r3
 801c570:	6879      	ldr	r1, [r7, #4]
 801c572:	482f      	ldr	r0, [pc, #188]	; (801c630 <RadioSend+0x1f8>)
 801c574:	f000 fcca 	bl	801cf0c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c578:	4b2a      	ldr	r3, [pc, #168]	; (801c624 <RadioSend+0x1ec>)
 801c57a:	2202      	movs	r2, #2
 801c57c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801c57e:	78fb      	ldrb	r3, [r7, #3]
 801c580:	3301      	adds	r3, #1
 801c582:	b2da      	uxtb	r2, r3
 801c584:	4b27      	ldr	r3, [pc, #156]	; (801c624 <RadioSend+0x1ec>)
 801c586:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c588:	4827      	ldr	r0, [pc, #156]	; (801c628 <RadioSend+0x1f0>)
 801c58a:	f001 ff2f 	bl	801e3ec <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801c58e:	2100      	movs	r1, #0
 801c590:	20f1      	movs	r0, #241	; 0xf1
 801c592:	f000 f966 	bl	801c862 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801c596:	2100      	movs	r1, #0
 801c598:	20f0      	movs	r0, #240	; 0xf0
 801c59a:	f000 f962 	bl	801c862 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801c59e:	4b21      	ldr	r3, [pc, #132]	; (801c624 <RadioSend+0x1ec>)
 801c5a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c5a2:	2b64      	cmp	r3, #100	; 0x64
 801c5a4:	d108      	bne.n	801c5b8 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801c5a6:	2170      	movs	r1, #112	; 0x70
 801c5a8:	20f3      	movs	r0, #243	; 0xf3
 801c5aa:	f000 f95a 	bl	801c862 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801c5ae:	211d      	movs	r1, #29
 801c5b0:	20f2      	movs	r0, #242	; 0xf2
 801c5b2:	f000 f956 	bl	801c862 <RadioWrite>
 801c5b6:	e007      	b.n	801c5c8 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801c5b8:	21e1      	movs	r1, #225	; 0xe1
 801c5ba:	20f3      	movs	r0, #243	; 0xf3
 801c5bc:	f000 f951 	bl	801c862 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801c5c0:	2104      	movs	r1, #4
 801c5c2:	20f2      	movs	r0, #242	; 0xf2
 801c5c4:	f000 f94d 	bl	801c862 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801c5c8:	78fb      	ldrb	r3, [r7, #3]
 801c5ca:	b29b      	uxth	r3, r3
 801c5cc:	00db      	lsls	r3, r3, #3
 801c5ce:	b29b      	uxth	r3, r3
 801c5d0:	3302      	adds	r3, #2
 801c5d2:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801c5d4:	89fb      	ldrh	r3, [r7, #14]
 801c5d6:	0a1b      	lsrs	r3, r3, #8
 801c5d8:	b29b      	uxth	r3, r3
 801c5da:	b2db      	uxtb	r3, r3
 801c5dc:	4619      	mov	r1, r3
 801c5de:	20f4      	movs	r0, #244	; 0xf4
 801c5e0:	f000 f93f 	bl	801c862 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801c5e4:	89fb      	ldrh	r3, [r7, #14]
 801c5e6:	b2db      	uxtb	r3, r3
 801c5e8:	4619      	mov	r1, r3
 801c5ea:	20f5      	movs	r0, #245	; 0xf5
 801c5ec:	f000 f939 	bl	801c862 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801c5f0:	78fb      	ldrb	r3, [r7, #3]
 801c5f2:	3301      	adds	r3, #1
 801c5f4:	b2db      	uxtb	r3, r3
 801c5f6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801c5fa:	4619      	mov	r1, r3
 801c5fc:	480c      	ldr	r0, [pc, #48]	; (801c630 <RadioSend+0x1f8>)
 801c5fe:	f001 f9ab 	bl	801d958 <SUBGRF_SendPayload>
            break;
 801c602:	e000      	b.n	801c606 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801c604:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801c606:	4b07      	ldr	r3, [pc, #28]	; (801c624 <RadioSend+0x1ec>)
 801c608:	685b      	ldr	r3, [r3, #4]
 801c60a:	4619      	mov	r1, r3
 801c60c:	4809      	ldr	r0, [pc, #36]	; (801c634 <RadioSend+0x1fc>)
 801c60e:	f003 f987 	bl	801f920 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801c612:	4808      	ldr	r0, [pc, #32]	; (801c634 <RadioSend+0x1fc>)
 801c614:	f003 f8a6 	bl	801f764 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801c618:	2300      	movs	r3, #0
}
 801c61a:	4618      	mov	r0, r3
 801c61c:	3710      	adds	r7, #16
 801c61e:	46bd      	mov	sp, r7
 801c620:	bd80      	pop	{r7, pc}
 801c622:	bf00      	nop
 801c624:	20001be0 	.word	0x20001be0
 801c628:	20001bee 	.word	0x20001bee
 801c62c:	0802193c 	.word	0x0802193c
 801c630:	20001adc 	.word	0x20001adc
 801c634:	20001c3c 	.word	0x20001c3c

0801c638 <RadioSleep>:

static void RadioSleep( void )
{
 801c638:	b580      	push	{r7, lr}
 801c63a:	b082      	sub	sp, #8
 801c63c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801c63e:	2300      	movs	r3, #0
 801c640:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801c642:	793b      	ldrb	r3, [r7, #4]
 801c644:	f043 0304 	orr.w	r3, r3, #4
 801c648:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801c64a:	7938      	ldrb	r0, [r7, #4]
 801c64c:	f001 fa60 	bl	801db10 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801c650:	2002      	movs	r0, #2
 801c652:	f7e6 f83b 	bl	80026cc <HAL_Delay>
}
 801c656:	bf00      	nop
 801c658:	3708      	adds	r7, #8
 801c65a:	46bd      	mov	sp, r7
 801c65c:	bd80      	pop	{r7, pc}

0801c65e <RadioStandby>:

static void RadioStandby( void )
{
 801c65e:	b580      	push	{r7, lr}
 801c660:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801c662:	2000      	movs	r0, #0
 801c664:	f001 fa86 	bl	801db74 <SUBGRF_SetStandby>
}
 801c668:	bf00      	nop
 801c66a:	bd80      	pop	{r7, pc}

0801c66c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801c66c:	b580      	push	{r7, lr}
 801c66e:	b082      	sub	sp, #8
 801c670:	af00      	add	r7, sp, #0
 801c672:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801c674:	f002 faef 	bl	801ec56 <RFW_Is_Init>
 801c678:	4603      	mov	r3, r0
 801c67a:	2b01      	cmp	r3, #1
 801c67c:	d102      	bne.n	801c684 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801c67e:	f002 fb12 	bl	801eca6 <RFW_ReceiveInit>
 801c682:	e007      	b.n	801c694 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c684:	2300      	movs	r3, #0
 801c686:	2200      	movs	r2, #0
 801c688:	f240 2162 	movw	r1, #610	; 0x262
 801c68c:	f240 2062 	movw	r0, #610	; 0x262
 801c690:	f001 fc44 	bl	801df1c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	2b00      	cmp	r3, #0
 801c698:	d006      	beq.n	801c6a8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c69a:	6879      	ldr	r1, [r7, #4]
 801c69c:	4811      	ldr	r0, [pc, #68]	; (801c6e4 <RadioRx+0x78>)
 801c69e:	f003 f93f 	bl	801f920 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c6a2:	4810      	ldr	r0, [pc, #64]	; (801c6e4 <RadioRx+0x78>)
 801c6a4:	f003 f85e 	bl	801f764 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c6a8:	4b0f      	ldr	r3, [pc, #60]	; (801c6e8 <RadioRx+0x7c>)
 801c6aa:	2200      	movs	r2, #0
 801c6ac:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c6ae:	4b0e      	ldr	r3, [pc, #56]	; (801c6e8 <RadioRx+0x7c>)
 801c6b0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c6b4:	2100      	movs	r1, #0
 801c6b6:	4618      	mov	r0, r3
 801c6b8:	f002 f8d4 	bl	801e864 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c6bc:	4b0a      	ldr	r3, [pc, #40]	; (801c6e8 <RadioRx+0x7c>)
 801c6be:	785b      	ldrb	r3, [r3, #1]
 801c6c0:	2b00      	cmp	r3, #0
 801c6c2:	d004      	beq.n	801c6ce <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c6c4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c6c8:	f001 fa90 	bl	801dbec <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801c6cc:	e005      	b.n	801c6da <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801c6ce:	4b06      	ldr	r3, [pc, #24]	; (801c6e8 <RadioRx+0x7c>)
 801c6d0:	689b      	ldr	r3, [r3, #8]
 801c6d2:	019b      	lsls	r3, r3, #6
 801c6d4:	4618      	mov	r0, r3
 801c6d6:	f001 fa89 	bl	801dbec <SUBGRF_SetRx>
}
 801c6da:	bf00      	nop
 801c6dc:	3708      	adds	r7, #8
 801c6de:	46bd      	mov	sp, r7
 801c6e0:	bd80      	pop	{r7, pc}
 801c6e2:	bf00      	nop
 801c6e4:	20001c54 	.word	0x20001c54
 801c6e8:	20001be0 	.word	0x20001be0

0801c6ec <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801c6ec:	b580      	push	{r7, lr}
 801c6ee:	b082      	sub	sp, #8
 801c6f0:	af00      	add	r7, sp, #0
 801c6f2:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801c6f4:	f002 faaf 	bl	801ec56 <RFW_Is_Init>
 801c6f8:	4603      	mov	r3, r0
 801c6fa:	2b01      	cmp	r3, #1
 801c6fc:	d102      	bne.n	801c704 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801c6fe:	f002 fad2 	bl	801eca6 <RFW_ReceiveInit>
 801c702:	e007      	b.n	801c714 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c704:	2300      	movs	r3, #0
 801c706:	2200      	movs	r2, #0
 801c708:	f240 2162 	movw	r1, #610	; 0x262
 801c70c:	f240 2062 	movw	r0, #610	; 0x262
 801c710:	f001 fc04 	bl	801df1c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	2b00      	cmp	r3, #0
 801c718:	d006      	beq.n	801c728 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c71a:	6879      	ldr	r1, [r7, #4]
 801c71c:	4811      	ldr	r0, [pc, #68]	; (801c764 <RadioRxBoosted+0x78>)
 801c71e:	f003 f8ff 	bl	801f920 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c722:	4810      	ldr	r0, [pc, #64]	; (801c764 <RadioRxBoosted+0x78>)
 801c724:	f003 f81e 	bl	801f764 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c728:	4b0f      	ldr	r3, [pc, #60]	; (801c768 <RadioRxBoosted+0x7c>)
 801c72a:	2200      	movs	r2, #0
 801c72c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c72e:	4b0e      	ldr	r3, [pc, #56]	; (801c768 <RadioRxBoosted+0x7c>)
 801c730:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c734:	2100      	movs	r1, #0
 801c736:	4618      	mov	r0, r3
 801c738:	f002 f894 	bl	801e864 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c73c:	4b0a      	ldr	r3, [pc, #40]	; (801c768 <RadioRxBoosted+0x7c>)
 801c73e:	785b      	ldrb	r3, [r3, #1]
 801c740:	2b00      	cmp	r3, #0
 801c742:	d004      	beq.n	801c74e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801c744:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c748:	f001 fa70 	bl	801dc2c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801c74c:	e005      	b.n	801c75a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801c74e:	4b06      	ldr	r3, [pc, #24]	; (801c768 <RadioRxBoosted+0x7c>)
 801c750:	689b      	ldr	r3, [r3, #8]
 801c752:	019b      	lsls	r3, r3, #6
 801c754:	4618      	mov	r0, r3
 801c756:	f001 fa69 	bl	801dc2c <SUBGRF_SetRxBoosted>
}
 801c75a:	bf00      	nop
 801c75c:	3708      	adds	r7, #8
 801c75e:	46bd      	mov	sp, r7
 801c760:	bd80      	pop	{r7, pc}
 801c762:	bf00      	nop
 801c764:	20001c54 	.word	0x20001c54
 801c768:	20001be0 	.word	0x20001be0

0801c76c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c76c:	b580      	push	{r7, lr}
 801c76e:	b082      	sub	sp, #8
 801c770:	af00      	add	r7, sp, #0
 801c772:	6078      	str	r0, [r7, #4]
 801c774:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	005a      	lsls	r2, r3, #1
 801c77a:	683b      	ldr	r3, [r7, #0]
 801c77c:	4413      	add	r3, r2
 801c77e:	4a0c      	ldr	r2, [pc, #48]	; (801c7b0 <RadioSetRxDutyCycle+0x44>)
 801c780:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801c782:	2300      	movs	r3, #0
 801c784:	2200      	movs	r2, #0
 801c786:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c78a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c78e:	f001 fbc5 	bl	801df1c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c792:	4b07      	ldr	r3, [pc, #28]	; (801c7b0 <RadioSetRxDutyCycle+0x44>)
 801c794:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c798:	2100      	movs	r1, #0
 801c79a:	4618      	mov	r0, r3
 801c79c:	f002 f862 	bl	801e864 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801c7a0:	6839      	ldr	r1, [r7, #0]
 801c7a2:	6878      	ldr	r0, [r7, #4]
 801c7a4:	f001 fa66 	bl	801dc74 <SUBGRF_SetRxDutyCycle>
}
 801c7a8:	bf00      	nop
 801c7aa:	3708      	adds	r7, #8
 801c7ac:	46bd      	mov	sp, r7
 801c7ae:	bd80      	pop	{r7, pc}
 801c7b0:	20001be0 	.word	0x20001be0

0801c7b4 <RadioStartCad>:

static void RadioStartCad( void )
{
 801c7b4:	b580      	push	{r7, lr}
 801c7b6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c7b8:	4b09      	ldr	r3, [pc, #36]	; (801c7e0 <RadioStartCad+0x2c>)
 801c7ba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c7be:	2100      	movs	r1, #0
 801c7c0:	4618      	mov	r0, r3
 801c7c2:	f002 f84f 	bl	801e864 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801c7c6:	2300      	movs	r3, #0
 801c7c8:	2200      	movs	r2, #0
 801c7ca:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801c7ce:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801c7d2:	f001 fba3 	bl	801df1c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801c7d6:	f001 fa79 	bl	801dccc <SUBGRF_SetCad>
}
 801c7da:	bf00      	nop
 801c7dc:	bd80      	pop	{r7, pc}
 801c7de:	bf00      	nop
 801c7e0:	20001be0 	.word	0x20001be0

0801c7e4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801c7e4:	b580      	push	{r7, lr}
 801c7e6:	b084      	sub	sp, #16
 801c7e8:	af00      	add	r7, sp, #0
 801c7ea:	6078      	str	r0, [r7, #4]
 801c7ec:	460b      	mov	r3, r1
 801c7ee:	70fb      	strb	r3, [r7, #3]
 801c7f0:	4613      	mov	r3, r2
 801c7f2:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801c7f4:	883b      	ldrh	r3, [r7, #0]
 801c7f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c7fa:	fb02 f303 	mul.w	r3, r2, r3
 801c7fe:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801c800:	6878      	ldr	r0, [r7, #4]
 801c802:	f001 fbe7 	bl	801dfd4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801c806:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c80a:	4618      	mov	r0, r3
 801c80c:	f002 f852 	bl	801e8b4 <SUBGRF_SetRfTxPower>
 801c810:	4603      	mov	r3, r0
 801c812:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801c814:	210e      	movs	r1, #14
 801c816:	f640 101f 	movw	r0, #2335	; 0x91f
 801c81a:	f001 ff2f 	bl	801e67c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801c81e:	7afb      	ldrb	r3, [r7, #11]
 801c820:	2101      	movs	r1, #1
 801c822:	4618      	mov	r0, r3
 801c824:	f002 f81e 	bl	801e864 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801c828:	f001 fa5e 	bl	801dce8 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801c82c:	68f9      	ldr	r1, [r7, #12]
 801c82e:	4805      	ldr	r0, [pc, #20]	; (801c844 <RadioSetTxContinuousWave+0x60>)
 801c830:	f003 f876 	bl	801f920 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801c834:	4803      	ldr	r0, [pc, #12]	; (801c844 <RadioSetTxContinuousWave+0x60>)
 801c836:	f002 ff95 	bl	801f764 <UTIL_TIMER_Start>
}
 801c83a:	bf00      	nop
 801c83c:	3710      	adds	r7, #16
 801c83e:	46bd      	mov	sp, r7
 801c840:	bd80      	pop	{r7, pc}
 801c842:	bf00      	nop
 801c844:	20001c3c 	.word	0x20001c3c

0801c848 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801c848:	b580      	push	{r7, lr}
 801c84a:	b082      	sub	sp, #8
 801c84c:	af00      	add	r7, sp, #0
 801c84e:	4603      	mov	r3, r0
 801c850:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801c852:	f001 fe80 	bl	801e556 <SUBGRF_GetRssiInst>
 801c856:	4603      	mov	r3, r0
 801c858:	b21b      	sxth	r3, r3
}
 801c85a:	4618      	mov	r0, r3
 801c85c:	3708      	adds	r7, #8
 801c85e:	46bd      	mov	sp, r7
 801c860:	bd80      	pop	{r7, pc}

0801c862 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801c862:	b580      	push	{r7, lr}
 801c864:	b082      	sub	sp, #8
 801c866:	af00      	add	r7, sp, #0
 801c868:	4603      	mov	r3, r0
 801c86a:	460a      	mov	r2, r1
 801c86c:	80fb      	strh	r3, [r7, #6]
 801c86e:	4613      	mov	r3, r2
 801c870:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801c872:	797a      	ldrb	r2, [r7, #5]
 801c874:	88fb      	ldrh	r3, [r7, #6]
 801c876:	4611      	mov	r1, r2
 801c878:	4618      	mov	r0, r3
 801c87a:	f001 feff 	bl	801e67c <SUBGRF_WriteRegister>
}
 801c87e:	bf00      	nop
 801c880:	3708      	adds	r7, #8
 801c882:	46bd      	mov	sp, r7
 801c884:	bd80      	pop	{r7, pc}

0801c886 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801c886:	b580      	push	{r7, lr}
 801c888:	b082      	sub	sp, #8
 801c88a:	af00      	add	r7, sp, #0
 801c88c:	4603      	mov	r3, r0
 801c88e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801c890:	88fb      	ldrh	r3, [r7, #6]
 801c892:	4618      	mov	r0, r3
 801c894:	f001 ff06 	bl	801e6a4 <SUBGRF_ReadRegister>
 801c898:	4603      	mov	r3, r0
}
 801c89a:	4618      	mov	r0, r3
 801c89c:	3708      	adds	r7, #8
 801c89e:	46bd      	mov	sp, r7
 801c8a0:	bd80      	pop	{r7, pc}

0801c8a2 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c8a2:	b580      	push	{r7, lr}
 801c8a4:	b082      	sub	sp, #8
 801c8a6:	af00      	add	r7, sp, #0
 801c8a8:	4603      	mov	r3, r0
 801c8aa:	6039      	str	r1, [r7, #0]
 801c8ac:	80fb      	strh	r3, [r7, #6]
 801c8ae:	4613      	mov	r3, r2
 801c8b0:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801c8b2:	797b      	ldrb	r3, [r7, #5]
 801c8b4:	b29a      	uxth	r2, r3
 801c8b6:	88fb      	ldrh	r3, [r7, #6]
 801c8b8:	6839      	ldr	r1, [r7, #0]
 801c8ba:	4618      	mov	r0, r3
 801c8bc:	f001 ff06 	bl	801e6cc <SUBGRF_WriteRegisters>
}
 801c8c0:	bf00      	nop
 801c8c2:	3708      	adds	r7, #8
 801c8c4:	46bd      	mov	sp, r7
 801c8c6:	bd80      	pop	{r7, pc}

0801c8c8 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c8c8:	b580      	push	{r7, lr}
 801c8ca:	b082      	sub	sp, #8
 801c8cc:	af00      	add	r7, sp, #0
 801c8ce:	4603      	mov	r3, r0
 801c8d0:	6039      	str	r1, [r7, #0]
 801c8d2:	80fb      	strh	r3, [r7, #6]
 801c8d4:	4613      	mov	r3, r2
 801c8d6:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801c8d8:	797b      	ldrb	r3, [r7, #5]
 801c8da:	b29a      	uxth	r2, r3
 801c8dc:	88fb      	ldrh	r3, [r7, #6]
 801c8de:	6839      	ldr	r1, [r7, #0]
 801c8e0:	4618      	mov	r0, r3
 801c8e2:	f001 ff15 	bl	801e710 <SUBGRF_ReadRegisters>
}
 801c8e6:	bf00      	nop
 801c8e8:	3708      	adds	r7, #8
 801c8ea:	46bd      	mov	sp, r7
 801c8ec:	bd80      	pop	{r7, pc}
	...

0801c8f0 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801c8f0:	b580      	push	{r7, lr}
 801c8f2:	b082      	sub	sp, #8
 801c8f4:	af00      	add	r7, sp, #0
 801c8f6:	4603      	mov	r3, r0
 801c8f8:	460a      	mov	r2, r1
 801c8fa:	71fb      	strb	r3, [r7, #7]
 801c8fc:	4613      	mov	r3, r2
 801c8fe:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801c900:	79fb      	ldrb	r3, [r7, #7]
 801c902:	2b01      	cmp	r3, #1
 801c904:	d10a      	bne.n	801c91c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801c906:	4a0e      	ldr	r2, [pc, #56]	; (801c940 <RadioSetMaxPayloadLength+0x50>)
 801c908:	79bb      	ldrb	r3, [r7, #6]
 801c90a:	7013      	strb	r3, [r2, #0]
 801c90c:	4b0c      	ldr	r3, [pc, #48]	; (801c940 <RadioSetMaxPayloadLength+0x50>)
 801c90e:	781a      	ldrb	r2, [r3, #0]
 801c910:	4b0c      	ldr	r3, [pc, #48]	; (801c944 <RadioSetMaxPayloadLength+0x54>)
 801c912:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c914:	480c      	ldr	r0, [pc, #48]	; (801c948 <RadioSetMaxPayloadLength+0x58>)
 801c916:	f001 fd69 	bl	801e3ec <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801c91a:	e00d      	b.n	801c938 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801c91c:	4b09      	ldr	r3, [pc, #36]	; (801c944 <RadioSetMaxPayloadLength+0x54>)
 801c91e:	7d5b      	ldrb	r3, [r3, #21]
 801c920:	2b01      	cmp	r3, #1
 801c922:	d109      	bne.n	801c938 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801c924:	4a06      	ldr	r2, [pc, #24]	; (801c940 <RadioSetMaxPayloadLength+0x50>)
 801c926:	79bb      	ldrb	r3, [r7, #6]
 801c928:	7013      	strb	r3, [r2, #0]
 801c92a:	4b05      	ldr	r3, [pc, #20]	; (801c940 <RadioSetMaxPayloadLength+0x50>)
 801c92c:	781a      	ldrb	r2, [r3, #0]
 801c92e:	4b05      	ldr	r3, [pc, #20]	; (801c944 <RadioSetMaxPayloadLength+0x54>)
 801c930:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c932:	4805      	ldr	r0, [pc, #20]	; (801c948 <RadioSetMaxPayloadLength+0x58>)
 801c934:	f001 fd5a 	bl	801e3ec <SUBGRF_SetPacketParams>
}
 801c938:	bf00      	nop
 801c93a:	3708      	adds	r7, #8
 801c93c:	46bd      	mov	sp, r7
 801c93e:	bd80      	pop	{r7, pc}
 801c940:	20000134 	.word	0x20000134
 801c944:	20001be0 	.word	0x20001be0
 801c948:	20001bee 	.word	0x20001bee

0801c94c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801c94c:	b580      	push	{r7, lr}
 801c94e:	b082      	sub	sp, #8
 801c950:	af00      	add	r7, sp, #0
 801c952:	4603      	mov	r3, r0
 801c954:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801c956:	4a13      	ldr	r2, [pc, #76]	; (801c9a4 <RadioSetPublicNetwork+0x58>)
 801c958:	79fb      	ldrb	r3, [r7, #7]
 801c95a:	7313      	strb	r3, [r2, #12]
 801c95c:	4b11      	ldr	r3, [pc, #68]	; (801c9a4 <RadioSetPublicNetwork+0x58>)
 801c95e:	7b1a      	ldrb	r2, [r3, #12]
 801c960:	4b10      	ldr	r3, [pc, #64]	; (801c9a4 <RadioSetPublicNetwork+0x58>)
 801c962:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801c964:	2001      	movs	r0, #1
 801c966:	f7ff f811 	bl	801b98c <RadioSetModem>
    if( enable == true )
 801c96a:	79fb      	ldrb	r3, [r7, #7]
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	d00a      	beq.n	801c986 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801c970:	2134      	movs	r1, #52	; 0x34
 801c972:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801c976:	f001 fe81 	bl	801e67c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801c97a:	2144      	movs	r1, #68	; 0x44
 801c97c:	f240 7041 	movw	r0, #1857	; 0x741
 801c980:	f001 fe7c 	bl	801e67c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801c984:	e009      	b.n	801c99a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801c986:	2114      	movs	r1, #20
 801c988:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801c98c:	f001 fe76 	bl	801e67c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801c990:	2124      	movs	r1, #36	; 0x24
 801c992:	f240 7041 	movw	r0, #1857	; 0x741
 801c996:	f001 fe71 	bl	801e67c <SUBGRF_WriteRegister>
}
 801c99a:	bf00      	nop
 801c99c:	3708      	adds	r7, #8
 801c99e:	46bd      	mov	sp, r7
 801c9a0:	bd80      	pop	{r7, pc}
 801c9a2:	bf00      	nop
 801c9a4:	20001be0 	.word	0x20001be0

0801c9a8 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801c9a8:	b580      	push	{r7, lr}
 801c9aa:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801c9ac:	f001 ffb6 	bl	801e91c <SUBGRF_GetRadioWakeUpTime>
 801c9b0:	4603      	mov	r3, r0
 801c9b2:	3303      	adds	r3, #3
}
 801c9b4:	4618      	mov	r0, r3
 801c9b6:	bd80      	pop	{r7, pc}

0801c9b8 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801c9b8:	b580      	push	{r7, lr}
 801c9ba:	b082      	sub	sp, #8
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801c9c0:	f000 f80e 	bl	801c9e0 <RadioOnTxTimeoutProcess>
}
 801c9c4:	bf00      	nop
 801c9c6:	3708      	adds	r7, #8
 801c9c8:	46bd      	mov	sp, r7
 801c9ca:	bd80      	pop	{r7, pc}

0801c9cc <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801c9cc:	b580      	push	{r7, lr}
 801c9ce:	b082      	sub	sp, #8
 801c9d0:	af00      	add	r7, sp, #0
 801c9d2:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801c9d4:	f000 f818 	bl	801ca08 <RadioOnRxTimeoutProcess>
}
 801c9d8:	bf00      	nop
 801c9da:	3708      	adds	r7, #8
 801c9dc:	46bd      	mov	sp, r7
 801c9de:	bd80      	pop	{r7, pc}

0801c9e0 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801c9e0:	b580      	push	{r7, lr}
 801c9e2:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801c9e4:	4b07      	ldr	r3, [pc, #28]	; (801ca04 <RadioOnTxTimeoutProcess+0x24>)
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d008      	beq.n	801c9fe <RadioOnTxTimeoutProcess+0x1e>
 801c9ec:	4b05      	ldr	r3, [pc, #20]	; (801ca04 <RadioOnTxTimeoutProcess+0x24>)
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	685b      	ldr	r3, [r3, #4]
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	d003      	beq.n	801c9fe <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801c9f6:	4b03      	ldr	r3, [pc, #12]	; (801ca04 <RadioOnTxTimeoutProcess+0x24>)
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	685b      	ldr	r3, [r3, #4]
 801c9fc:	4798      	blx	r3
    }
}
 801c9fe:	bf00      	nop
 801ca00:	bd80      	pop	{r7, pc}
 801ca02:	bf00      	nop
 801ca04:	20001bdc 	.word	0x20001bdc

0801ca08 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801ca08:	b580      	push	{r7, lr}
 801ca0a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ca0c:	4b07      	ldr	r3, [pc, #28]	; (801ca2c <RadioOnRxTimeoutProcess+0x24>)
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d008      	beq.n	801ca26 <RadioOnRxTimeoutProcess+0x1e>
 801ca14:	4b05      	ldr	r3, [pc, #20]	; (801ca2c <RadioOnRxTimeoutProcess+0x24>)
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	68db      	ldr	r3, [r3, #12]
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d003      	beq.n	801ca26 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801ca1e:	4b03      	ldr	r3, [pc, #12]	; (801ca2c <RadioOnRxTimeoutProcess+0x24>)
 801ca20:	681b      	ldr	r3, [r3, #0]
 801ca22:	68db      	ldr	r3, [r3, #12]
 801ca24:	4798      	blx	r3
    }
}
 801ca26:	bf00      	nop
 801ca28:	bd80      	pop	{r7, pc}
 801ca2a:	bf00      	nop
 801ca2c:	20001bdc 	.word	0x20001bdc

0801ca30 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801ca30:	b580      	push	{r7, lr}
 801ca32:	b082      	sub	sp, #8
 801ca34:	af00      	add	r7, sp, #0
 801ca36:	4603      	mov	r3, r0
 801ca38:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801ca3a:	4a05      	ldr	r2, [pc, #20]	; (801ca50 <RadioOnDioIrq+0x20>)
 801ca3c:	88fb      	ldrh	r3, [r7, #6]
 801ca3e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801ca42:	f000 f807 	bl	801ca54 <RadioIrqProcess>
}
 801ca46:	bf00      	nop
 801ca48:	3708      	adds	r7, #8
 801ca4a:	46bd      	mov	sp, r7
 801ca4c:	bd80      	pop	{r7, pc}
 801ca4e:	bf00      	nop
 801ca50:	20001be0 	.word	0x20001be0

0801ca54 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801ca54:	b590      	push	{r4, r7, lr}
 801ca56:	b083      	sub	sp, #12
 801ca58:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801ca5a:	2300      	movs	r3, #0
 801ca5c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801ca5e:	2300      	movs	r3, #0
 801ca60:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801ca62:	4ba8      	ldr	r3, [pc, #672]	; (801cd04 <RadioIrqProcess+0x2b0>)
 801ca64:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801ca68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ca6c:	f000 810c 	beq.w	801cc88 <RadioIrqProcess+0x234>
 801ca70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ca74:	f300 81e8 	bgt.w	801ce48 <RadioIrqProcess+0x3f4>
 801ca78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ca7c:	f000 80f0 	beq.w	801cc60 <RadioIrqProcess+0x20c>
 801ca80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ca84:	f300 81e0 	bgt.w	801ce48 <RadioIrqProcess+0x3f4>
 801ca88:	2b80      	cmp	r3, #128	; 0x80
 801ca8a:	f000 80d5 	beq.w	801cc38 <RadioIrqProcess+0x1e4>
 801ca8e:	2b80      	cmp	r3, #128	; 0x80
 801ca90:	f300 81da 	bgt.w	801ce48 <RadioIrqProcess+0x3f4>
 801ca94:	2b20      	cmp	r3, #32
 801ca96:	dc49      	bgt.n	801cb2c <RadioIrqProcess+0xd8>
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	f340 81d5 	ble.w	801ce48 <RadioIrqProcess+0x3f4>
 801ca9e:	3b01      	subs	r3, #1
 801caa0:	2b1f      	cmp	r3, #31
 801caa2:	f200 81d1 	bhi.w	801ce48 <RadioIrqProcess+0x3f4>
 801caa6:	a201      	add	r2, pc, #4	; (adr r2, 801caac <RadioIrqProcess+0x58>)
 801caa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801caac:	0801cb35 	.word	0x0801cb35
 801cab0:	0801cb6f 	.word	0x0801cb6f
 801cab4:	0801ce49 	.word	0x0801ce49
 801cab8:	0801cd25 	.word	0x0801cd25
 801cabc:	0801ce49 	.word	0x0801ce49
 801cac0:	0801ce49 	.word	0x0801ce49
 801cac4:	0801ce49 	.word	0x0801ce49
 801cac8:	0801cda1 	.word	0x0801cda1
 801cacc:	0801ce49 	.word	0x0801ce49
 801cad0:	0801ce49 	.word	0x0801ce49
 801cad4:	0801ce49 	.word	0x0801ce49
 801cad8:	0801ce49 	.word	0x0801ce49
 801cadc:	0801ce49 	.word	0x0801ce49
 801cae0:	0801ce49 	.word	0x0801ce49
 801cae4:	0801ce49 	.word	0x0801ce49
 801cae8:	0801cdbd 	.word	0x0801cdbd
 801caec:	0801ce49 	.word	0x0801ce49
 801caf0:	0801ce49 	.word	0x0801ce49
 801caf4:	0801ce49 	.word	0x0801ce49
 801caf8:	0801ce49 	.word	0x0801ce49
 801cafc:	0801ce49 	.word	0x0801ce49
 801cb00:	0801ce49 	.word	0x0801ce49
 801cb04:	0801ce49 	.word	0x0801ce49
 801cb08:	0801ce49 	.word	0x0801ce49
 801cb0c:	0801ce49 	.word	0x0801ce49
 801cb10:	0801ce49 	.word	0x0801ce49
 801cb14:	0801ce49 	.word	0x0801ce49
 801cb18:	0801ce49 	.word	0x0801ce49
 801cb1c:	0801ce49 	.word	0x0801ce49
 801cb20:	0801ce49 	.word	0x0801ce49
 801cb24:	0801ce49 	.word	0x0801ce49
 801cb28:	0801cdcb 	.word	0x0801cdcb
 801cb2c:	2b40      	cmp	r3, #64	; 0x40
 801cb2e:	f000 816d 	beq.w	801ce0c <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801cb32:	e189      	b.n	801ce48 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801cb34:	4874      	ldr	r0, [pc, #464]	; (801cd08 <RadioIrqProcess+0x2b4>)
 801cb36:	f002 fe83 	bl	801f840 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801cb3a:	2000      	movs	r0, #0
 801cb3c:	f001 f81a 	bl	801db74 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801cb40:	f002 f890 	bl	801ec64 <RFW_Is_LongPacketModeEnabled>
 801cb44:	4603      	mov	r3, r0
 801cb46:	2b01      	cmp	r3, #1
 801cb48:	d101      	bne.n	801cb4e <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801cb4a:	f002 f8b4 	bl	801ecb6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801cb4e:	4b6f      	ldr	r3, [pc, #444]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801cb50:	681b      	ldr	r3, [r3, #0]
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	f000 817a 	beq.w	801ce4c <RadioIrqProcess+0x3f8>
 801cb58:	4b6c      	ldr	r3, [pc, #432]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	681b      	ldr	r3, [r3, #0]
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	f000 8174 	beq.w	801ce4c <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801cb64:	4b69      	ldr	r3, [pc, #420]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	681b      	ldr	r3, [r3, #0]
 801cb6a:	4798      	blx	r3
        break;
 801cb6c:	e16e      	b.n	801ce4c <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801cb6e:	4868      	ldr	r0, [pc, #416]	; (801cd10 <RadioIrqProcess+0x2bc>)
 801cb70:	f002 fe66 	bl	801f840 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801cb74:	4b63      	ldr	r3, [pc, #396]	; (801cd04 <RadioIrqProcess+0x2b0>)
 801cb76:	785b      	ldrb	r3, [r3, #1]
 801cb78:	f083 0301 	eor.w	r3, r3, #1
 801cb7c:	b2db      	uxtb	r3, r3
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	d014      	beq.n	801cbac <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801cb82:	2000      	movs	r0, #0
 801cb84:	f000 fff6 	bl	801db74 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801cb88:	2100      	movs	r1, #0
 801cb8a:	f640 1002 	movw	r0, #2306	; 0x902
 801cb8e:	f001 fd75 	bl	801e67c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801cb92:	f640 1044 	movw	r0, #2372	; 0x944
 801cb96:	f001 fd85 	bl	801e6a4 <SUBGRF_ReadRegister>
 801cb9a:	4603      	mov	r3, r0
 801cb9c:	f043 0302 	orr.w	r3, r3, #2
 801cba0:	b2db      	uxtb	r3, r3
 801cba2:	4619      	mov	r1, r3
 801cba4:	f640 1044 	movw	r0, #2372	; 0x944
 801cba8:	f001 fd68 	bl	801e67c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801cbac:	1dfb      	adds	r3, r7, #7
 801cbae:	22ff      	movs	r2, #255	; 0xff
 801cbb0:	4619      	mov	r1, r3
 801cbb2:	4858      	ldr	r0, [pc, #352]	; (801cd14 <RadioIrqProcess+0x2c0>)
 801cbb4:	f000 feae 	bl	801d914 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801cbb8:	4857      	ldr	r0, [pc, #348]	; (801cd18 <RadioIrqProcess+0x2c4>)
 801cbba:	f001 fd0d 	bl	801e5d8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801cbbe:	4b53      	ldr	r3, [pc, #332]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801cbc0:	681b      	ldr	r3, [r3, #0]
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d036      	beq.n	801cc34 <RadioIrqProcess+0x1e0>
 801cbc6:	4b51      	ldr	r3, [pc, #324]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	689b      	ldr	r3, [r3, #8]
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d031      	beq.n	801cc34 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 801cbd0:	4b4c      	ldr	r3, [pc, #304]	; (801cd04 <RadioIrqProcess+0x2b0>)
 801cbd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801cbd6:	2b01      	cmp	r3, #1
 801cbd8:	d10e      	bne.n	801cbf8 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801cbda:	4b4c      	ldr	r3, [pc, #304]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801cbdc:	681b      	ldr	r3, [r3, #0]
 801cbde:	689c      	ldr	r4, [r3, #8]
 801cbe0:	79fb      	ldrb	r3, [r7, #7]
 801cbe2:	b299      	uxth	r1, r3
 801cbe4:	4b47      	ldr	r3, [pc, #284]	; (801cd04 <RadioIrqProcess+0x2b0>)
 801cbe6:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801cbea:	b21a      	sxth	r2, r3
 801cbec:	4b45      	ldr	r3, [pc, #276]	; (801cd04 <RadioIrqProcess+0x2b0>)
 801cbee:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801cbf2:	4848      	ldr	r0, [pc, #288]	; (801cd14 <RadioIrqProcess+0x2c0>)
 801cbf4:	47a0      	blx	r4
                break;
 801cbf6:	e01e      	b.n	801cc36 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801cbf8:	4b42      	ldr	r3, [pc, #264]	; (801cd04 <RadioIrqProcess+0x2b0>)
 801cbfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cbfc:	463a      	mov	r2, r7
 801cbfe:	4611      	mov	r1, r2
 801cc00:	4618      	mov	r0, r3
 801cc02:	f001 ff7d 	bl	801eb00 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801cc06:	4b41      	ldr	r3, [pc, #260]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801cc08:	681b      	ldr	r3, [r3, #0]
 801cc0a:	689c      	ldr	r4, [r3, #8]
 801cc0c:	79fb      	ldrb	r3, [r7, #7]
 801cc0e:	b299      	uxth	r1, r3
 801cc10:	4b3c      	ldr	r3, [pc, #240]	; (801cd04 <RadioIrqProcess+0x2b0>)
 801cc12:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801cc16:	b218      	sxth	r0, r3
 801cc18:	683b      	ldr	r3, [r7, #0]
 801cc1a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801cc1e:	4a3f      	ldr	r2, [pc, #252]	; (801cd1c <RadioIrqProcess+0x2c8>)
 801cc20:	fb82 c203 	smull	ip, r2, r2, r3
 801cc24:	1192      	asrs	r2, r2, #6
 801cc26:	17db      	asrs	r3, r3, #31
 801cc28:	1ad3      	subs	r3, r2, r3
 801cc2a:	b25b      	sxtb	r3, r3
 801cc2c:	4602      	mov	r2, r0
 801cc2e:	4839      	ldr	r0, [pc, #228]	; (801cd14 <RadioIrqProcess+0x2c0>)
 801cc30:	47a0      	blx	r4
                break;
 801cc32:	e000      	b.n	801cc36 <RadioIrqProcess+0x1e2>
        }
 801cc34:	bf00      	nop
        break;
 801cc36:	e118      	b.n	801ce6a <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 801cc38:	2000      	movs	r0, #0
 801cc3a:	f000 ff9b 	bl	801db74 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801cc3e:	4b33      	ldr	r3, [pc, #204]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	f000 8104 	beq.w	801ce50 <RadioIrqProcess+0x3fc>
 801cc48:	4b30      	ldr	r3, [pc, #192]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	699b      	ldr	r3, [r3, #24]
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	f000 80fe 	beq.w	801ce50 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 801cc54:	4b2d      	ldr	r3, [pc, #180]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801cc56:	681b      	ldr	r3, [r3, #0]
 801cc58:	699b      	ldr	r3, [r3, #24]
 801cc5a:	2000      	movs	r0, #0
 801cc5c:	4798      	blx	r3
        break;
 801cc5e:	e0f7      	b.n	801ce50 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801cc60:	2000      	movs	r0, #0
 801cc62:	f000 ff87 	bl	801db74 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801cc66:	4b29      	ldr	r3, [pc, #164]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801cc68:	681b      	ldr	r3, [r3, #0]
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	f000 80f2 	beq.w	801ce54 <RadioIrqProcess+0x400>
 801cc70:	4b26      	ldr	r3, [pc, #152]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801cc72:	681b      	ldr	r3, [r3, #0]
 801cc74:	699b      	ldr	r3, [r3, #24]
 801cc76:	2b00      	cmp	r3, #0
 801cc78:	f000 80ec 	beq.w	801ce54 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 801cc7c:	4b23      	ldr	r3, [pc, #140]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	699b      	ldr	r3, [r3, #24]
 801cc82:	2001      	movs	r0, #1
 801cc84:	4798      	blx	r3
        break;
 801cc86:	e0e5      	b.n	801ce54 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801cc88:	4b25      	ldr	r3, [pc, #148]	; (801cd20 <RadioIrqProcess+0x2cc>)
 801cc8a:	2201      	movs	r2, #1
 801cc8c:	2100      	movs	r1, #0
 801cc8e:	2002      	movs	r0, #2
 801cc90:	f002 ffe0 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801cc94:	f000 fe24 	bl	801d8e0 <SUBGRF_GetOperatingMode>
 801cc98:	4603      	mov	r3, r0
 801cc9a:	2b04      	cmp	r3, #4
 801cc9c:	d115      	bne.n	801ccca <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 801cc9e:	481a      	ldr	r0, [pc, #104]	; (801cd08 <RadioIrqProcess+0x2b4>)
 801cca0:	f002 fdce 	bl	801f840 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801cca4:	2000      	movs	r0, #0
 801cca6:	f000 ff65 	bl	801db74 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801ccaa:	4b18      	ldr	r3, [pc, #96]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	f000 80d2 	beq.w	801ce58 <RadioIrqProcess+0x404>
 801ccb4:	4b15      	ldr	r3, [pc, #84]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	685b      	ldr	r3, [r3, #4]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	f000 80cc 	beq.w	801ce58 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 801ccc0:	4b12      	ldr	r3, [pc, #72]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	685b      	ldr	r3, [r3, #4]
 801ccc6:	4798      	blx	r3
        break;
 801ccc8:	e0c6      	b.n	801ce58 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801ccca:	f000 fe09 	bl	801d8e0 <SUBGRF_GetOperatingMode>
 801ccce:	4603      	mov	r3, r0
 801ccd0:	2b05      	cmp	r3, #5
 801ccd2:	f040 80c1 	bne.w	801ce58 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 801ccd6:	480e      	ldr	r0, [pc, #56]	; (801cd10 <RadioIrqProcess+0x2bc>)
 801ccd8:	f002 fdb2 	bl	801f840 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801ccdc:	2000      	movs	r0, #0
 801ccde:	f000 ff49 	bl	801db74 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801cce2:	4b0a      	ldr	r3, [pc, #40]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801cce4:	681b      	ldr	r3, [r3, #0]
 801cce6:	2b00      	cmp	r3, #0
 801cce8:	f000 80b6 	beq.w	801ce58 <RadioIrqProcess+0x404>
 801ccec:	4b07      	ldr	r3, [pc, #28]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	68db      	ldr	r3, [r3, #12]
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	f000 80b0 	beq.w	801ce58 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 801ccf8:	4b04      	ldr	r3, [pc, #16]	; (801cd0c <RadioIrqProcess+0x2b8>)
 801ccfa:	681b      	ldr	r3, [r3, #0]
 801ccfc:	68db      	ldr	r3, [r3, #12]
 801ccfe:	4798      	blx	r3
        break;
 801cd00:	e0aa      	b.n	801ce58 <RadioIrqProcess+0x404>
 801cd02:	bf00      	nop
 801cd04:	20001be0 	.word	0x20001be0
 801cd08:	20001c3c 	.word	0x20001c3c
 801cd0c:	20001bdc 	.word	0x20001bdc
 801cd10:	20001c54 	.word	0x20001c54
 801cd14:	20001adc 	.word	0x20001adc
 801cd18:	20001c04 	.word	0x20001c04
 801cd1c:	10624dd3 	.word	0x10624dd3
 801cd20:	08021954 	.word	0x08021954
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801cd24:	4b53      	ldr	r3, [pc, #332]	; (801ce74 <RadioIrqProcess+0x420>)
 801cd26:	2201      	movs	r2, #1
 801cd28:	2100      	movs	r1, #0
 801cd2a:	2002      	movs	r0, #2
 801cd2c:	f002 ff92 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801cd30:	4b51      	ldr	r3, [pc, #324]	; (801ce78 <RadioIrqProcess+0x424>)
 801cd32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	f000 8091 	beq.w	801ce5c <RadioIrqProcess+0x408>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801cd3a:	4a50      	ldr	r2, [pc, #320]	; (801ce7c <RadioIrqProcess+0x428>)
 801cd3c:	4b4e      	ldr	r3, [pc, #312]	; (801ce78 <RadioIrqProcess+0x424>)
 801cd3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd40:	0c1b      	lsrs	r3, r3, #16
 801cd42:	b2db      	uxtb	r3, r3
 801cd44:	4619      	mov	r1, r3
 801cd46:	f640 1003 	movw	r0, #2307	; 0x903
 801cd4a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801cd4c:	4a4b      	ldr	r2, [pc, #300]	; (801ce7c <RadioIrqProcess+0x428>)
 801cd4e:	4b4a      	ldr	r3, [pc, #296]	; (801ce78 <RadioIrqProcess+0x424>)
 801cd50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd52:	0a1b      	lsrs	r3, r3, #8
 801cd54:	b2db      	uxtb	r3, r3
 801cd56:	4619      	mov	r1, r3
 801cd58:	f640 1004 	movw	r0, #2308	; 0x904
 801cd5c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801cd5e:	4a47      	ldr	r2, [pc, #284]	; (801ce7c <RadioIrqProcess+0x428>)
 801cd60:	4b45      	ldr	r3, [pc, #276]	; (801ce78 <RadioIrqProcess+0x424>)
 801cd62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd64:	b2db      	uxtb	r3, r3
 801cd66:	4619      	mov	r1, r3
 801cd68:	f640 1005 	movw	r0, #2309	; 0x905
 801cd6c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801cd6e:	4c43      	ldr	r4, [pc, #268]	; (801ce7c <RadioIrqProcess+0x428>)
 801cd70:	4b43      	ldr	r3, [pc, #268]	; (801ce80 <RadioIrqProcess+0x42c>)
 801cd72:	f640 1002 	movw	r0, #2306	; 0x902
 801cd76:	4798      	blx	r3
 801cd78:	4603      	mov	r3, r0
 801cd7a:	f043 0301 	orr.w	r3, r3, #1
 801cd7e:	b2db      	uxtb	r3, r3
 801cd80:	4619      	mov	r1, r3
 801cd82:	f640 1002 	movw	r0, #2306	; 0x902
 801cd86:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801cd88:	4b3b      	ldr	r3, [pc, #236]	; (801ce78 <RadioIrqProcess+0x424>)
 801cd8a:	2200      	movs	r2, #0
 801cd8c:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801cd8e:	2300      	movs	r3, #0
 801cd90:	2200      	movs	r2, #0
 801cd92:	f240 2162 	movw	r1, #610	; 0x262
 801cd96:	f240 2062 	movw	r0, #610	; 0x262
 801cd9a:	f001 f8bf 	bl	801df1c <SUBGRF_SetDioIrqParams>
        break;
 801cd9e:	e05d      	b.n	801ce5c <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801cda0:	4b38      	ldr	r3, [pc, #224]	; (801ce84 <RadioIrqProcess+0x430>)
 801cda2:	2201      	movs	r2, #1
 801cda4:	2100      	movs	r1, #0
 801cda6:	2002      	movs	r0, #2
 801cda8:	f002 ff54 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801cdac:	f001 ff53 	bl	801ec56 <RFW_Is_Init>
 801cdb0:	4603      	mov	r3, r0
 801cdb2:	2b01      	cmp	r3, #1
 801cdb4:	d154      	bne.n	801ce60 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 801cdb6:	f001 ff84 	bl	801ecc2 <RFW_ReceivePayload>
        break;
 801cdba:	e051      	b.n	801ce60 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801cdbc:	4b32      	ldr	r3, [pc, #200]	; (801ce88 <RadioIrqProcess+0x434>)
 801cdbe:	2201      	movs	r2, #1
 801cdc0:	2100      	movs	r1, #0
 801cdc2:	2002      	movs	r0, #2
 801cdc4:	f002 ff46 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801cdc8:	e04f      	b.n	801ce6a <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 801cdca:	4830      	ldr	r0, [pc, #192]	; (801ce8c <RadioIrqProcess+0x438>)
 801cdcc:	f002 fd38 	bl	801f840 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801cdd0:	4b29      	ldr	r3, [pc, #164]	; (801ce78 <RadioIrqProcess+0x424>)
 801cdd2:	785b      	ldrb	r3, [r3, #1]
 801cdd4:	f083 0301 	eor.w	r3, r3, #1
 801cdd8:	b2db      	uxtb	r3, r3
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d002      	beq.n	801cde4 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801cdde:	2000      	movs	r0, #0
 801cde0:	f000 fec8 	bl	801db74 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801cde4:	4b2a      	ldr	r3, [pc, #168]	; (801ce90 <RadioIrqProcess+0x43c>)
 801cde6:	681b      	ldr	r3, [r3, #0]
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	d03b      	beq.n	801ce64 <RadioIrqProcess+0x410>
 801cdec:	4b28      	ldr	r3, [pc, #160]	; (801ce90 <RadioIrqProcess+0x43c>)
 801cdee:	681b      	ldr	r3, [r3, #0]
 801cdf0:	68db      	ldr	r3, [r3, #12]
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	d036      	beq.n	801ce64 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 801cdf6:	4b26      	ldr	r3, [pc, #152]	; (801ce90 <RadioIrqProcess+0x43c>)
 801cdf8:	681b      	ldr	r3, [r3, #0]
 801cdfa:	68db      	ldr	r3, [r3, #12]
 801cdfc:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801cdfe:	4b25      	ldr	r3, [pc, #148]	; (801ce94 <RadioIrqProcess+0x440>)
 801ce00:	2201      	movs	r2, #1
 801ce02:	2100      	movs	r1, #0
 801ce04:	2002      	movs	r0, #2
 801ce06:	f002 ff25 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801ce0a:	e02b      	b.n	801ce64 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801ce0c:	4b22      	ldr	r3, [pc, #136]	; (801ce98 <RadioIrqProcess+0x444>)
 801ce0e:	2201      	movs	r2, #1
 801ce10:	2100      	movs	r1, #0
 801ce12:	2002      	movs	r0, #2
 801ce14:	f002 ff1e 	bl	801fc54 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801ce18:	4b17      	ldr	r3, [pc, #92]	; (801ce78 <RadioIrqProcess+0x424>)
 801ce1a:	785b      	ldrb	r3, [r3, #1]
 801ce1c:	f083 0301 	eor.w	r3, r3, #1
 801ce20:	b2db      	uxtb	r3, r3
 801ce22:	2b00      	cmp	r3, #0
 801ce24:	d002      	beq.n	801ce2c <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801ce26:	2000      	movs	r0, #0
 801ce28:	f000 fea4 	bl	801db74 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801ce2c:	4b18      	ldr	r3, [pc, #96]	; (801ce90 <RadioIrqProcess+0x43c>)
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d019      	beq.n	801ce68 <RadioIrqProcess+0x414>
 801ce34:	4b16      	ldr	r3, [pc, #88]	; (801ce90 <RadioIrqProcess+0x43c>)
 801ce36:	681b      	ldr	r3, [r3, #0]
 801ce38:	691b      	ldr	r3, [r3, #16]
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d014      	beq.n	801ce68 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 801ce3e:	4b14      	ldr	r3, [pc, #80]	; (801ce90 <RadioIrqProcess+0x43c>)
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	691b      	ldr	r3, [r3, #16]
 801ce44:	4798      	blx	r3
        break;
 801ce46:	e00f      	b.n	801ce68 <RadioIrqProcess+0x414>
        break;
 801ce48:	bf00      	nop
 801ce4a:	e00e      	b.n	801ce6a <RadioIrqProcess+0x416>
        break;
 801ce4c:	bf00      	nop
 801ce4e:	e00c      	b.n	801ce6a <RadioIrqProcess+0x416>
        break;
 801ce50:	bf00      	nop
 801ce52:	e00a      	b.n	801ce6a <RadioIrqProcess+0x416>
        break;
 801ce54:	bf00      	nop
 801ce56:	e008      	b.n	801ce6a <RadioIrqProcess+0x416>
        break;
 801ce58:	bf00      	nop
 801ce5a:	e006      	b.n	801ce6a <RadioIrqProcess+0x416>
        break;
 801ce5c:	bf00      	nop
 801ce5e:	e004      	b.n	801ce6a <RadioIrqProcess+0x416>
        break;
 801ce60:	bf00      	nop
 801ce62:	e002      	b.n	801ce6a <RadioIrqProcess+0x416>
        break;
 801ce64:	bf00      	nop
 801ce66:	e000      	b.n	801ce6a <RadioIrqProcess+0x416>
        break;
 801ce68:	bf00      	nop
    }
}
 801ce6a:	bf00      	nop
 801ce6c:	370c      	adds	r7, #12
 801ce6e:	46bd      	mov	sp, r7
 801ce70:	bd90      	pop	{r4, r7, pc}
 801ce72:	bf00      	nop
 801ce74:	08021968 	.word	0x08021968
 801ce78:	20001be0 	.word	0x20001be0
 801ce7c:	0801c863 	.word	0x0801c863
 801ce80:	0801c887 	.word	0x0801c887
 801ce84:	08021974 	.word	0x08021974
 801ce88:	08021980 	.word	0x08021980
 801ce8c:	20001c54 	.word	0x20001c54
 801ce90:	20001bdc 	.word	0x20001bdc
 801ce94:	0802198c 	.word	0x0802198c
 801ce98:	08021998 	.word	0x08021998

0801ce9c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801ce9c:	b580      	push	{r7, lr}
 801ce9e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801cea0:	4b09      	ldr	r3, [pc, #36]	; (801cec8 <RadioTxPrbs+0x2c>)
 801cea2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801cea6:	2101      	movs	r1, #1
 801cea8:	4618      	mov	r0, r3
 801ceaa:	f001 fcdb 	bl	801e864 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801ceae:	4b07      	ldr	r3, [pc, #28]	; (801cecc <RadioTxPrbs+0x30>)
 801ceb0:	212d      	movs	r1, #45	; 0x2d
 801ceb2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801ceb6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801ceb8:	f000 ff1f 	bl	801dcfa <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801cebc:	4804      	ldr	r0, [pc, #16]	; (801ced0 <RadioTxPrbs+0x34>)
 801cebe:	f000 fe75 	bl	801dbac <SUBGRF_SetTx>
}
 801cec2:	bf00      	nop
 801cec4:	bd80      	pop	{r7, pc}
 801cec6:	bf00      	nop
 801cec8:	20001be0 	.word	0x20001be0
 801cecc:	0801c863 	.word	0x0801c863
 801ced0:	000fffff 	.word	0x000fffff

0801ced4 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801ced4:	b580      	push	{r7, lr}
 801ced6:	b084      	sub	sp, #16
 801ced8:	af00      	add	r7, sp, #0
 801ceda:	4603      	mov	r3, r0
 801cedc:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801cede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cee2:	4618      	mov	r0, r3
 801cee4:	f001 fce6 	bl	801e8b4 <SUBGRF_SetRfTxPower>
 801cee8:	4603      	mov	r3, r0
 801ceea:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801ceec:	210e      	movs	r1, #14
 801ceee:	f640 101f 	movw	r0, #2335	; 0x91f
 801cef2:	f001 fbc3 	bl	801e67c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801cef6:	7bfb      	ldrb	r3, [r7, #15]
 801cef8:	2101      	movs	r1, #1
 801cefa:	4618      	mov	r0, r3
 801cefc:	f001 fcb2 	bl	801e864 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801cf00:	f000 fef2 	bl	801dce8 <SUBGRF_SetTxContinuousWave>
}
 801cf04:	bf00      	nop
 801cf06:	3710      	adds	r7, #16
 801cf08:	46bd      	mov	sp, r7
 801cf0a:	bd80      	pop	{r7, pc}

0801cf0c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801cf0c:	b480      	push	{r7}
 801cf0e:	b089      	sub	sp, #36	; 0x24
 801cf10:	af00      	add	r7, sp, #0
 801cf12:	60f8      	str	r0, [r7, #12]
 801cf14:	60b9      	str	r1, [r7, #8]
 801cf16:	4613      	mov	r3, r2
 801cf18:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801cf1a:	2300      	movs	r3, #0
 801cf1c:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801cf1e:	2300      	movs	r3, #0
 801cf20:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801cf22:	2300      	movs	r3, #0
 801cf24:	61bb      	str	r3, [r7, #24]
 801cf26:	e011      	b.n	801cf4c <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801cf28:	69bb      	ldr	r3, [r7, #24]
 801cf2a:	68ba      	ldr	r2, [r7, #8]
 801cf2c:	4413      	add	r3, r2
 801cf2e:	781a      	ldrb	r2, [r3, #0]
 801cf30:	69bb      	ldr	r3, [r7, #24]
 801cf32:	68b9      	ldr	r1, [r7, #8]
 801cf34:	440b      	add	r3, r1
 801cf36:	43d2      	mvns	r2, r2
 801cf38:	b2d2      	uxtb	r2, r2
 801cf3a:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801cf3c:	69bb      	ldr	r3, [r7, #24]
 801cf3e:	68fa      	ldr	r2, [r7, #12]
 801cf40:	4413      	add	r3, r2
 801cf42:	2200      	movs	r2, #0
 801cf44:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801cf46:	69bb      	ldr	r3, [r7, #24]
 801cf48:	3301      	adds	r3, #1
 801cf4a:	61bb      	str	r3, [r7, #24]
 801cf4c:	79fb      	ldrb	r3, [r7, #7]
 801cf4e:	69ba      	ldr	r2, [r7, #24]
 801cf50:	429a      	cmp	r2, r3
 801cf52:	dbe9      	blt.n	801cf28 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801cf54:	2300      	movs	r3, #0
 801cf56:	61bb      	str	r3, [r7, #24]
 801cf58:	e049      	b.n	801cfee <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801cf5a:	69bb      	ldr	r3, [r7, #24]
 801cf5c:	425a      	negs	r2, r3
 801cf5e:	f003 0307 	and.w	r3, r3, #7
 801cf62:	f002 0207 	and.w	r2, r2, #7
 801cf66:	bf58      	it	pl
 801cf68:	4253      	negpl	r3, r2
 801cf6a:	b2db      	uxtb	r3, r3
 801cf6c:	f1c3 0307 	rsb	r3, r3, #7
 801cf70:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801cf72:	69bb      	ldr	r3, [r7, #24]
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	da00      	bge.n	801cf7a <payload_integration+0x6e>
 801cf78:	3307      	adds	r3, #7
 801cf7a:	10db      	asrs	r3, r3, #3
 801cf7c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801cf7e:	69bb      	ldr	r3, [r7, #24]
 801cf80:	3301      	adds	r3, #1
 801cf82:	425a      	negs	r2, r3
 801cf84:	f003 0307 	and.w	r3, r3, #7
 801cf88:	f002 0207 	and.w	r2, r2, #7
 801cf8c:	bf58      	it	pl
 801cf8e:	4253      	negpl	r3, r2
 801cf90:	b2db      	uxtb	r3, r3
 801cf92:	f1c3 0307 	rsb	r3, r3, #7
 801cf96:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801cf98:	69bb      	ldr	r3, [r7, #24]
 801cf9a:	3301      	adds	r3, #1
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	da00      	bge.n	801cfa2 <payload_integration+0x96>
 801cfa0:	3307      	adds	r3, #7
 801cfa2:	10db      	asrs	r3, r3, #3
 801cfa4:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801cfa6:	7dbb      	ldrb	r3, [r7, #22]
 801cfa8:	68ba      	ldr	r2, [r7, #8]
 801cfaa:	4413      	add	r3, r2
 801cfac:	781b      	ldrb	r3, [r3, #0]
 801cfae:	461a      	mov	r2, r3
 801cfb0:	7dfb      	ldrb	r3, [r7, #23]
 801cfb2:	fa42 f303 	asr.w	r3, r2, r3
 801cfb6:	b2db      	uxtb	r3, r3
 801cfb8:	f003 0301 	and.w	r3, r3, #1
 801cfbc:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801cfbe:	7ffa      	ldrb	r2, [r7, #31]
 801cfc0:	7cfb      	ldrb	r3, [r7, #19]
 801cfc2:	4053      	eors	r3, r2
 801cfc4:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801cfc6:	7d3b      	ldrb	r3, [r7, #20]
 801cfc8:	68fa      	ldr	r2, [r7, #12]
 801cfca:	4413      	add	r3, r2
 801cfcc:	781b      	ldrb	r3, [r3, #0]
 801cfce:	b25a      	sxtb	r2, r3
 801cfd0:	7ff9      	ldrb	r1, [r7, #31]
 801cfd2:	7d7b      	ldrb	r3, [r7, #21]
 801cfd4:	fa01 f303 	lsl.w	r3, r1, r3
 801cfd8:	b25b      	sxtb	r3, r3
 801cfda:	4313      	orrs	r3, r2
 801cfdc:	b259      	sxtb	r1, r3
 801cfde:	7d3b      	ldrb	r3, [r7, #20]
 801cfe0:	68fa      	ldr	r2, [r7, #12]
 801cfe2:	4413      	add	r3, r2
 801cfe4:	b2ca      	uxtb	r2, r1
 801cfe6:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801cfe8:	69bb      	ldr	r3, [r7, #24]
 801cfea:	3301      	adds	r3, #1
 801cfec:	61bb      	str	r3, [r7, #24]
 801cfee:	79fb      	ldrb	r3, [r7, #7]
 801cff0:	00db      	lsls	r3, r3, #3
 801cff2:	69ba      	ldr	r2, [r7, #24]
 801cff4:	429a      	cmp	r2, r3
 801cff6:	dbb0      	blt.n	801cf5a <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801cff8:	7ffb      	ldrb	r3, [r7, #31]
 801cffa:	01db      	lsls	r3, r3, #7
 801cffc:	b25a      	sxtb	r2, r3
 801cffe:	7ffb      	ldrb	r3, [r7, #31]
 801d000:	019b      	lsls	r3, r3, #6
 801d002:	b25b      	sxtb	r3, r3
 801d004:	4313      	orrs	r3, r2
 801d006:	b25b      	sxtb	r3, r3
 801d008:	7ffa      	ldrb	r2, [r7, #31]
 801d00a:	2a00      	cmp	r2, #0
 801d00c:	d101      	bne.n	801d012 <payload_integration+0x106>
 801d00e:	2220      	movs	r2, #32
 801d010:	e000      	b.n	801d014 <payload_integration+0x108>
 801d012:	2200      	movs	r2, #0
 801d014:	4313      	orrs	r3, r2
 801d016:	b259      	sxtb	r1, r3
 801d018:	79fb      	ldrb	r3, [r7, #7]
 801d01a:	68fa      	ldr	r2, [r7, #12]
 801d01c:	4413      	add	r3, r2
 801d01e:	b2ca      	uxtb	r2, r1
 801d020:	701a      	strb	r2, [r3, #0]
}
 801d022:	bf00      	nop
 801d024:	3724      	adds	r7, #36	; 0x24
 801d026:	46bd      	mov	sp, r7
 801d028:	bc80      	pop	{r7}
 801d02a:	4770      	bx	lr

0801d02c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801d02c:	b580      	push	{r7, lr}
 801d02e:	b08c      	sub	sp, #48	; 0x30
 801d030:	af00      	add	r7, sp, #0
 801d032:	60b9      	str	r1, [r7, #8]
 801d034:	607a      	str	r2, [r7, #4]
 801d036:	603b      	str	r3, [r7, #0]
 801d038:	4603      	mov	r3, r0
 801d03a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801d03c:	2300      	movs	r3, #0
 801d03e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801d040:	2300      	movs	r3, #0
 801d042:	623b      	str	r3, [r7, #32]
 801d044:	2300      	movs	r3, #0
 801d046:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801d048:	f001 fdff 	bl	801ec4a <RFW_DeInit>

    if( rxContinuous != 0 )
 801d04c:	687b      	ldr	r3, [r7, #4]
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d001      	beq.n	801d056 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801d052:	2300      	movs	r3, #0
 801d054:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	2b00      	cmp	r3, #0
 801d05a:	bf14      	ite	ne
 801d05c:	2301      	movne	r3, #1
 801d05e:	2300      	moveq	r3, #0
 801d060:	b2da      	uxtb	r2, r3
 801d062:	4ba3      	ldr	r3, [pc, #652]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d064:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801d066:	7bfb      	ldrb	r3, [r7, #15]
 801d068:	2b00      	cmp	r3, #0
 801d06a:	d003      	beq.n	801d074 <RadioSetRxGenericConfig+0x48>
 801d06c:	2b01      	cmp	r3, #1
 801d06e:	f000 80dc 	beq.w	801d22a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801d072:	e194      	b.n	801d39e <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801d074:	68bb      	ldr	r3, [r7, #8]
 801d076:	689b      	ldr	r3, [r3, #8]
 801d078:	2b00      	cmp	r3, #0
 801d07a:	d003      	beq.n	801d084 <RadioSetRxGenericConfig+0x58>
 801d07c:	68bb      	ldr	r3, [r7, #8]
 801d07e:	68db      	ldr	r3, [r3, #12]
 801d080:	2b00      	cmp	r3, #0
 801d082:	d102      	bne.n	801d08a <RadioSetRxGenericConfig+0x5e>
            return -1;
 801d084:	f04f 33ff 	mov.w	r3, #4294967295
 801d088:	e18a      	b.n	801d3a0 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801d08a:	68bb      	ldr	r3, [r7, #8]
 801d08c:	7f9b      	ldrb	r3, [r3, #30]
 801d08e:	2b08      	cmp	r3, #8
 801d090:	d902      	bls.n	801d098 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801d092:	f04f 33ff 	mov.w	r3, #4294967295
 801d096:	e183      	b.n	801d3a0 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801d098:	68bb      	ldr	r3, [r7, #8]
 801d09a:	6919      	ldr	r1, [r3, #16]
 801d09c:	68bb      	ldr	r3, [r7, #8]
 801d09e:	7f9b      	ldrb	r3, [r3, #30]
 801d0a0:	b29a      	uxth	r2, r3
 801d0a2:	f107 0320 	add.w	r3, r7, #32
 801d0a6:	4618      	mov	r0, r3
 801d0a8:	f001 fe8c 	bl	801edc4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801d0ac:	68bb      	ldr	r3, [r7, #8]
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	bf14      	ite	ne
 801d0b4:	2301      	movne	r3, #1
 801d0b6:	2300      	moveq	r3, #0
 801d0b8:	b2db      	uxtb	r3, r3
 801d0ba:	4618      	mov	r0, r3
 801d0bc:	f000 fe26 	bl	801dd0c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d0c0:	4b8b      	ldr	r3, [pc, #556]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d0c2:	2200      	movs	r2, #0
 801d0c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801d0c8:	68bb      	ldr	r3, [r7, #8]
 801d0ca:	689b      	ldr	r3, [r3, #8]
 801d0cc:	4a88      	ldr	r2, [pc, #544]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d0ce:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801d0d0:	68bb      	ldr	r3, [r7, #8]
 801d0d2:	f893 2020 	ldrb.w	r2, [r3, #32]
 801d0d6:	4b86      	ldr	r3, [pc, #536]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d0d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801d0dc:	68bb      	ldr	r3, [r7, #8]
 801d0de:	685b      	ldr	r3, [r3, #4]
 801d0e0:	4618      	mov	r0, r3
 801d0e2:	f001 fce5 	bl	801eab0 <SUBGRF_GetFskBandwidthRegValue>
 801d0e6:	4603      	mov	r3, r0
 801d0e8:	461a      	mov	r2, r3
 801d0ea:	4b81      	ldr	r3, [pc, #516]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d0ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d0f0:	4b7f      	ldr	r3, [pc, #508]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d0f2:	2200      	movs	r2, #0
 801d0f4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801d0f6:	68bb      	ldr	r3, [r7, #8]
 801d0f8:	68db      	ldr	r3, [r3, #12]
 801d0fa:	b29b      	uxth	r3, r3
 801d0fc:	00db      	lsls	r3, r3, #3
 801d0fe:	b29a      	uxth	r2, r3
 801d100:	4b7b      	ldr	r3, [pc, #492]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d102:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801d104:	68bb      	ldr	r3, [r7, #8]
 801d106:	7fda      	ldrb	r2, [r3, #31]
 801d108:	4b79      	ldr	r3, [pc, #484]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d10a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801d10c:	68bb      	ldr	r3, [r7, #8]
 801d10e:	7f9b      	ldrb	r3, [r3, #30]
 801d110:	00db      	lsls	r3, r3, #3
 801d112:	b2da      	uxtb	r2, r3
 801d114:	4b76      	ldr	r3, [pc, #472]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d116:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801d118:	68bb      	ldr	r3, [r7, #8]
 801d11a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801d11e:	4b74      	ldr	r3, [pc, #464]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d120:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801d122:	68bb      	ldr	r3, [r7, #8]
 801d124:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d105      	bne.n	801d138 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801d12c:	68bb      	ldr	r3, [r7, #8]
 801d12e:	695b      	ldr	r3, [r3, #20]
 801d130:	b2da      	uxtb	r2, r3
 801d132:	4b6f      	ldr	r3, [pc, #444]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d134:	759a      	strb	r2, [r3, #22]
 801d136:	e00b      	b.n	801d150 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801d138:	68bb      	ldr	r3, [r7, #8]
 801d13a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801d13e:	2b02      	cmp	r3, #2
 801d140:	d103      	bne.n	801d14a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801d142:	4b6b      	ldr	r3, [pc, #428]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d144:	22ff      	movs	r2, #255	; 0xff
 801d146:	759a      	strb	r2, [r3, #22]
 801d148:	e002      	b.n	801d150 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801d14a:	4b69      	ldr	r3, [pc, #420]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d14c:	22ff      	movs	r2, #255	; 0xff
 801d14e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d150:	68bb      	ldr	r3, [r7, #8]
 801d152:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801d156:	2b02      	cmp	r3, #2
 801d158:	d004      	beq.n	801d164 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d15a:	68bb      	ldr	r3, [r7, #8]
 801d15c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801d160:	2b02      	cmp	r3, #2
 801d162:	d12d      	bne.n	801d1c0 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d164:	68bb      	ldr	r3, [r7, #8]
 801d166:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d16a:	2bf1      	cmp	r3, #241	; 0xf1
 801d16c:	d00c      	beq.n	801d188 <RadioSetRxGenericConfig+0x15c>
 801d16e:	68bb      	ldr	r3, [r7, #8]
 801d170:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d174:	2bf2      	cmp	r3, #242	; 0xf2
 801d176:	d007      	beq.n	801d188 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d178:	68bb      	ldr	r3, [r7, #8]
 801d17a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d17e:	2b01      	cmp	r3, #1
 801d180:	d002      	beq.n	801d188 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801d182:	f04f 33ff 	mov.w	r3, #4294967295
 801d186:	e10b      	b.n	801d3a0 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801d188:	2300      	movs	r3, #0
 801d18a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801d18c:	68bb      	ldr	r3, [r7, #8]
 801d18e:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801d190:	4b58      	ldr	r3, [pc, #352]	; (801d2f4 <RadioSetRxGenericConfig+0x2c8>)
 801d192:	6819      	ldr	r1, [r3, #0]
 801d194:	f107 0314 	add.w	r3, r7, #20
 801d198:	4a57      	ldr	r2, [pc, #348]	; (801d2f8 <RadioSetRxGenericConfig+0x2cc>)
 801d19a:	4618      	mov	r0, r3
 801d19c:	f001 fd48 	bl	801ec30 <RFW_Init>
 801d1a0:	4603      	mov	r3, r0
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d002      	beq.n	801d1ac <RadioSetRxGenericConfig+0x180>
                return -1;
 801d1a6:	f04f 33ff 	mov.w	r3, #4294967295
 801d1aa:	e0f9      	b.n	801d3a0 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d1ac:	4b50      	ldr	r3, [pc, #320]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d1ae:	2200      	movs	r2, #0
 801d1b0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d1b2:	4b4f      	ldr	r3, [pc, #316]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d1b4:	2201      	movs	r2, #1
 801d1b6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d1b8:	4b4d      	ldr	r3, [pc, #308]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d1ba:	2200      	movs	r2, #0
 801d1bc:	755a      	strb	r2, [r3, #21]
        {
 801d1be:	e00e      	b.n	801d1de <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801d1c0:	68bb      	ldr	r3, [r7, #8]
 801d1c2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801d1c6:	4b4a      	ldr	r3, [pc, #296]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d1c8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801d1ca:	68bb      	ldr	r3, [r7, #8]
 801d1cc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801d1d0:	4b47      	ldr	r3, [pc, #284]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d1d2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801d1d4:	68bb      	ldr	r3, [r7, #8]
 801d1d6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801d1da:	4b45      	ldr	r3, [pc, #276]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d1dc:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801d1de:	f7ff fa3e 	bl	801c65e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801d1e2:	2000      	movs	r0, #0
 801d1e4:	f7fe fbd2 	bl	801b98c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d1e8:	4844      	ldr	r0, [pc, #272]	; (801d2fc <RadioSetRxGenericConfig+0x2d0>)
 801d1ea:	f001 f82d 	bl	801e248 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d1ee:	4844      	ldr	r0, [pc, #272]	; (801d300 <RadioSetRxGenericConfig+0x2d4>)
 801d1f0:	f001 f8fc 	bl	801e3ec <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d1f4:	f107 0320 	add.w	r3, r7, #32
 801d1f8:	4618      	mov	r0, r3
 801d1fa:	f000 fbc0 	bl	801d97e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801d1fe:	68bb      	ldr	r3, [r7, #8]
 801d200:	8b9b      	ldrh	r3, [r3, #28]
 801d202:	4618      	mov	r0, r3
 801d204:	f000 fc0a 	bl	801da1c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801d208:	68bb      	ldr	r3, [r7, #8]
 801d20a:	8b1b      	ldrh	r3, [r3, #24]
 801d20c:	4618      	mov	r0, r3
 801d20e:	f000 fbe5 	bl	801d9dc <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801d212:	683b      	ldr	r3, [r7, #0]
 801d214:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801d218:	fb03 f202 	mul.w	r2, r3, r2
 801d21c:	68bb      	ldr	r3, [r7, #8]
 801d21e:	689b      	ldr	r3, [r3, #8]
 801d220:	fbb2 f3f3 	udiv	r3, r2, r3
 801d224:	4a32      	ldr	r2, [pc, #200]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d226:	6093      	str	r3, [r2, #8]
        break;
 801d228:	e0b9      	b.n	801d39e <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801d22a:	68bb      	ldr	r3, [r7, #8]
 801d22c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801d22e:	2b00      	cmp	r3, #0
 801d230:	d102      	bne.n	801d238 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801d232:	f04f 33ff 	mov.w	r3, #4294967295
 801d236:	e0b3      	b.n	801d3a0 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801d238:	68bb      	ldr	r3, [r7, #8]
 801d23a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801d23e:	2b01      	cmp	r3, #1
 801d240:	d104      	bne.n	801d24c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801d242:	68bb      	ldr	r3, [r7, #8]
 801d244:	695b      	ldr	r3, [r3, #20]
 801d246:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801d24a:	e002      	b.n	801d252 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801d24c:	23ff      	movs	r3, #255	; 0xff
 801d24e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801d252:	68bb      	ldr	r3, [r7, #8]
 801d254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d256:	2b00      	cmp	r3, #0
 801d258:	bf14      	ite	ne
 801d25a:	2301      	movne	r3, #1
 801d25c:	2300      	moveq	r3, #0
 801d25e:	b2db      	uxtb	r3, r3
 801d260:	4618      	mov	r0, r3
 801d262:	f000 fd53 	bl	801dd0c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801d266:	683b      	ldr	r3, [r7, #0]
 801d268:	b2db      	uxtb	r3, r3
 801d26a:	4618      	mov	r0, r3
 801d26c:	f000 fd5d 	bl	801dd2a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801d270:	4b1f      	ldr	r3, [pc, #124]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d272:	2201      	movs	r2, #1
 801d274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801d278:	68bb      	ldr	r3, [r7, #8]
 801d27a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801d27e:	4b1c      	ldr	r3, [pc, #112]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801d284:	68bb      	ldr	r3, [r7, #8]
 801d286:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801d28a:	4b19      	ldr	r3, [pc, #100]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d28c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801d290:	68bb      	ldr	r3, [r7, #8]
 801d292:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801d296:	4b16      	ldr	r3, [pc, #88]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d298:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801d29c:	68bb      	ldr	r3, [r7, #8]
 801d29e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801d2a2:	2b02      	cmp	r3, #2
 801d2a4:	d010      	beq.n	801d2c8 <RadioSetRxGenericConfig+0x29c>
 801d2a6:	2b02      	cmp	r3, #2
 801d2a8:	dc2c      	bgt.n	801d304 <RadioSetRxGenericConfig+0x2d8>
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	d002      	beq.n	801d2b4 <RadioSetRxGenericConfig+0x288>
 801d2ae:	2b01      	cmp	r3, #1
 801d2b0:	d005      	beq.n	801d2be <RadioSetRxGenericConfig+0x292>
            break;
 801d2b2:	e027      	b.n	801d304 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d2b4:	4b0e      	ldr	r3, [pc, #56]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d2b6:	2200      	movs	r2, #0
 801d2b8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d2bc:	e023      	b.n	801d306 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d2be:	4b0c      	ldr	r3, [pc, #48]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d2c0:	2201      	movs	r2, #1
 801d2c2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d2c6:	e01e      	b.n	801d306 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d2c8:	68bb      	ldr	r3, [r7, #8]
 801d2ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d2ce:	2b0b      	cmp	r3, #11
 801d2d0:	d004      	beq.n	801d2dc <RadioSetRxGenericConfig+0x2b0>
 801d2d2:	68bb      	ldr	r3, [r7, #8]
 801d2d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d2d8:	2b0c      	cmp	r3, #12
 801d2da:	d104      	bne.n	801d2e6 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d2dc:	4b04      	ldr	r3, [pc, #16]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d2de:	2201      	movs	r2, #1
 801d2e0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d2e4:	e00f      	b.n	801d306 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d2e6:	4b02      	ldr	r3, [pc, #8]	; (801d2f0 <RadioSetRxGenericConfig+0x2c4>)
 801d2e8:	2200      	movs	r2, #0
 801d2ea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d2ee:	e00a      	b.n	801d306 <RadioSetRxGenericConfig+0x2da>
 801d2f0:	20001be0 	.word	0x20001be0
 801d2f4:	20001bdc 	.word	0x20001bdc
 801d2f8:	20001c54 	.word	0x20001c54
 801d2fc:	20001c18 	.word	0x20001c18
 801d300:	20001bee 	.word	0x20001bee
            break;
 801d304:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d306:	4b28      	ldr	r3, [pc, #160]	; (801d3a8 <RadioSetRxGenericConfig+0x37c>)
 801d308:	2201      	movs	r2, #1
 801d30a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d30c:	68bb      	ldr	r3, [r7, #8]
 801d30e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801d310:	4b25      	ldr	r3, [pc, #148]	; (801d3a8 <RadioSetRxGenericConfig+0x37c>)
 801d312:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d314:	68bb      	ldr	r3, [r7, #8]
 801d316:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801d31a:	4b23      	ldr	r3, [pc, #140]	; (801d3a8 <RadioSetRxGenericConfig+0x37c>)
 801d31c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801d31e:	4a22      	ldr	r2, [pc, #136]	; (801d3a8 <RadioSetRxGenericConfig+0x37c>)
 801d320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d324:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d326:	68bb      	ldr	r3, [r7, #8]
 801d328:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801d32c:	4b1e      	ldr	r3, [pc, #120]	; (801d3a8 <RadioSetRxGenericConfig+0x37c>)
 801d32e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d332:	68bb      	ldr	r3, [r7, #8]
 801d334:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801d338:	4b1b      	ldr	r3, [pc, #108]	; (801d3a8 <RadioSetRxGenericConfig+0x37c>)
 801d33a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801d33e:	f7ff f98e 	bl	801c65e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d342:	2001      	movs	r0, #1
 801d344:	f7fe fb22 	bl	801b98c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d348:	4818      	ldr	r0, [pc, #96]	; (801d3ac <RadioSetRxGenericConfig+0x380>)
 801d34a:	f000 ff7d 	bl	801e248 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d34e:	4818      	ldr	r0, [pc, #96]	; (801d3b0 <RadioSetRxGenericConfig+0x384>)
 801d350:	f001 f84c 	bl	801e3ec <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801d354:	4b14      	ldr	r3, [pc, #80]	; (801d3a8 <RadioSetRxGenericConfig+0x37c>)
 801d356:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801d35a:	2b01      	cmp	r3, #1
 801d35c:	d10d      	bne.n	801d37a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801d35e:	f240 7036 	movw	r0, #1846	; 0x736
 801d362:	f001 f99f 	bl	801e6a4 <SUBGRF_ReadRegister>
 801d366:	4603      	mov	r3, r0
 801d368:	f023 0304 	bic.w	r3, r3, #4
 801d36c:	b2db      	uxtb	r3, r3
 801d36e:	4619      	mov	r1, r3
 801d370:	f240 7036 	movw	r0, #1846	; 0x736
 801d374:	f001 f982 	bl	801e67c <SUBGRF_WriteRegister>
 801d378:	e00c      	b.n	801d394 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801d37a:	f240 7036 	movw	r0, #1846	; 0x736
 801d37e:	f001 f991 	bl	801e6a4 <SUBGRF_ReadRegister>
 801d382:	4603      	mov	r3, r0
 801d384:	f043 0304 	orr.w	r3, r3, #4
 801d388:	b2db      	uxtb	r3, r3
 801d38a:	4619      	mov	r1, r3
 801d38c:	f240 7036 	movw	r0, #1846	; 0x736
 801d390:	f001 f974 	bl	801e67c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801d394:	4b04      	ldr	r3, [pc, #16]	; (801d3a8 <RadioSetRxGenericConfig+0x37c>)
 801d396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d39a:	609a      	str	r2, [r3, #8]
        break;
 801d39c:	bf00      	nop
    }
    return status;
 801d39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801d3a0:	4618      	mov	r0, r3
 801d3a2:	3730      	adds	r7, #48	; 0x30
 801d3a4:	46bd      	mov	sp, r7
 801d3a6:	bd80      	pop	{r7, pc}
 801d3a8:	20001be0 	.word	0x20001be0
 801d3ac:	20001c18 	.word	0x20001c18
 801d3b0:	20001bee 	.word	0x20001bee

0801d3b4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801d3b4:	b580      	push	{r7, lr}
 801d3b6:	b08e      	sub	sp, #56	; 0x38
 801d3b8:	af00      	add	r7, sp, #0
 801d3ba:	60b9      	str	r1, [r7, #8]
 801d3bc:	607b      	str	r3, [r7, #4]
 801d3be:	4603      	mov	r3, r0
 801d3c0:	73fb      	strb	r3, [r7, #15]
 801d3c2:	4613      	mov	r3, r2
 801d3c4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801d3c6:	2300      	movs	r3, #0
 801d3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d3ca:	2300      	movs	r3, #0
 801d3cc:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801d3ce:	f001 fc3c 	bl	801ec4a <RFW_DeInit>
    switch( modem )
 801d3d2:	7bfb      	ldrb	r3, [r7, #15]
 801d3d4:	2b03      	cmp	r3, #3
 801d3d6:	f200 8204 	bhi.w	801d7e2 <RadioSetTxGenericConfig+0x42e>
 801d3da:	a201      	add	r2, pc, #4	; (adr r2, 801d3e0 <RadioSetTxGenericConfig+0x2c>)
 801d3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d3e0:	0801d565 	.word	0x0801d565
 801d3e4:	0801d6ad 	.word	0x0801d6ad
 801d3e8:	0801d7a5 	.word	0x0801d7a5
 801d3ec:	0801d3f1 	.word	0x0801d3f1
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801d3f0:	68bb      	ldr	r3, [r7, #8]
 801d3f2:	7c9b      	ldrb	r3, [r3, #18]
 801d3f4:	2b08      	cmp	r3, #8
 801d3f6:	d902      	bls.n	801d3fe <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801d3f8:	f04f 33ff 	mov.w	r3, #4294967295
 801d3fc:	e206      	b.n	801d80c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801d3fe:	68bb      	ldr	r3, [r7, #8]
 801d400:	6899      	ldr	r1, [r3, #8]
 801d402:	68bb      	ldr	r3, [r7, #8]
 801d404:	7c9b      	ldrb	r3, [r3, #18]
 801d406:	b29a      	uxth	r2, r3
 801d408:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d40c:	4618      	mov	r0, r3
 801d40e:	f001 fcd9 	bl	801edc4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801d412:	68bb      	ldr	r3, [r7, #8]
 801d414:	681b      	ldr	r3, [r3, #0]
 801d416:	2b00      	cmp	r3, #0
 801d418:	d102      	bne.n	801d420 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801d41a:	f04f 33ff 	mov.w	r3, #4294967295
 801d41e:	e1f5      	b.n	801d80c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801d420:	68bb      	ldr	r3, [r7, #8]
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	f242 7210 	movw	r2, #10000	; 0x2710
 801d428:	4293      	cmp	r3, r2
 801d42a:	d813      	bhi.n	801d454 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801d42c:	2302      	movs	r3, #2
 801d42e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801d432:	4b99      	ldr	r3, [pc, #612]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d434:	2203      	movs	r2, #3
 801d436:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801d438:	4b97      	ldr	r3, [pc, #604]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d43a:	2203      	movs	r2, #3
 801d43c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801d440:	68bb      	ldr	r3, [r7, #8]
 801d442:	681b      	ldr	r3, [r3, #0]
 801d444:	4a94      	ldr	r2, [pc, #592]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d446:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801d448:	68bb      	ldr	r3, [r7, #8]
 801d44a:	7cda      	ldrb	r2, [r3, #19]
 801d44c:	4b92      	ldr	r3, [pc, #584]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d44e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d452:	e017      	b.n	801d484 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801d454:	2300      	movs	r3, #0
 801d456:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d45a:	4b8f      	ldr	r3, [pc, #572]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d45c:	2200      	movs	r2, #0
 801d45e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d460:	4b8d      	ldr	r3, [pc, #564]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d462:	2200      	movs	r2, #0
 801d464:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801d468:	68bb      	ldr	r3, [r7, #8]
 801d46a:	681b      	ldr	r3, [r3, #0]
 801d46c:	4a8a      	ldr	r2, [pc, #552]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d46e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801d470:	68bb      	ldr	r3, [r7, #8]
 801d472:	7cda      	ldrb	r2, [r3, #19]
 801d474:	4b88      	ldr	r3, [pc, #544]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801d47a:	68bb      	ldr	r3, [r7, #8]
 801d47c:	681b      	ldr	r3, [r3, #0]
 801d47e:	089b      	lsrs	r3, r3, #2
 801d480:	4a85      	ldr	r2, [pc, #532]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d482:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801d484:	68bb      	ldr	r3, [r7, #8]
 801d486:	685b      	ldr	r3, [r3, #4]
 801d488:	b29b      	uxth	r3, r3
 801d48a:	00db      	lsls	r3, r3, #3
 801d48c:	b29a      	uxth	r2, r3
 801d48e:	4b82      	ldr	r3, [pc, #520]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d490:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d492:	4b81      	ldr	r3, [pc, #516]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d494:	2204      	movs	r2, #4
 801d496:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801d498:	68bb      	ldr	r3, [r7, #8]
 801d49a:	7c9b      	ldrb	r3, [r3, #18]
 801d49c:	00db      	lsls	r3, r3, #3
 801d49e:	b2da      	uxtb	r2, r3
 801d4a0:	4b7d      	ldr	r3, [pc, #500]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d4a2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d4a4:	4b7c      	ldr	r3, [pc, #496]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d4a6:	2200      	movs	r2, #0
 801d4a8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d4aa:	68bb      	ldr	r3, [r7, #8]
 801d4ac:	7d9b      	ldrb	r3, [r3, #22]
 801d4ae:	2b02      	cmp	r3, #2
 801d4b0:	d003      	beq.n	801d4ba <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d4b2:	68bb      	ldr	r3, [r7, #8]
 801d4b4:	7d1b      	ldrb	r3, [r3, #20]
 801d4b6:	2b02      	cmp	r3, #2
 801d4b8:	d12b      	bne.n	801d512 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d4ba:	68bb      	ldr	r3, [r7, #8]
 801d4bc:	7d5b      	ldrb	r3, [r3, #21]
 801d4be:	2bf1      	cmp	r3, #241	; 0xf1
 801d4c0:	d00a      	beq.n	801d4d8 <RadioSetTxGenericConfig+0x124>
 801d4c2:	68bb      	ldr	r3, [r7, #8]
 801d4c4:	7d5b      	ldrb	r3, [r3, #21]
 801d4c6:	2bf2      	cmp	r3, #242	; 0xf2
 801d4c8:	d006      	beq.n	801d4d8 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d4ca:	68bb      	ldr	r3, [r7, #8]
 801d4cc:	7d5b      	ldrb	r3, [r3, #21]
 801d4ce:	2b01      	cmp	r3, #1
 801d4d0:	d002      	beq.n	801d4d8 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801d4d2:	f04f 33ff 	mov.w	r3, #4294967295
 801d4d6:	e199      	b.n	801d80c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801d4d8:	68bb      	ldr	r3, [r7, #8]
 801d4da:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801d4dc:	2301      	movs	r3, #1
 801d4de:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d4e2:	4b6e      	ldr	r3, [pc, #440]	; (801d69c <RadioSetTxGenericConfig+0x2e8>)
 801d4e4:	6819      	ldr	r1, [r3, #0]
 801d4e6:	f107 0320 	add.w	r3, r7, #32
 801d4ea:	4a6d      	ldr	r2, [pc, #436]	; (801d6a0 <RadioSetTxGenericConfig+0x2ec>)
 801d4ec:	4618      	mov	r0, r3
 801d4ee:	f001 fb9f 	bl	801ec30 <RFW_Init>
 801d4f2:	4603      	mov	r3, r0
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	d002      	beq.n	801d4fe <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801d4f8:	f04f 33ff 	mov.w	r3, #4294967295
 801d4fc:	e186      	b.n	801d80c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d4fe:	4b66      	ldr	r3, [pc, #408]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d500:	2200      	movs	r2, #0
 801d502:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d504:	4b64      	ldr	r3, [pc, #400]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d506:	2201      	movs	r2, #1
 801d508:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d50a:	4b63      	ldr	r3, [pc, #396]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d50c:	2200      	movs	r2, #0
 801d50e:	755a      	strb	r2, [r3, #21]
        {
 801d510:	e00b      	b.n	801d52a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801d512:	68bb      	ldr	r3, [r7, #8]
 801d514:	7d5a      	ldrb	r2, [r3, #21]
 801d516:	4b60      	ldr	r3, [pc, #384]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d518:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801d51a:	68bb      	ldr	r3, [r7, #8]
 801d51c:	7d9a      	ldrb	r2, [r3, #22]
 801d51e:	4b5e      	ldr	r3, [pc, #376]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d520:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801d522:	68bb      	ldr	r3, [r7, #8]
 801d524:	7d1a      	ldrb	r2, [r3, #20]
 801d526:	4b5c      	ldr	r3, [pc, #368]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d528:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801d52a:	f7ff f898 	bl	801c65e <RadioStandby>
        RadioSetModem( radio_modem );
 801d52e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d532:	4618      	mov	r0, r3
 801d534:	f7fe fa2a 	bl	801b98c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d538:	485a      	ldr	r0, [pc, #360]	; (801d6a4 <RadioSetTxGenericConfig+0x2f0>)
 801d53a:	f000 fe85 	bl	801e248 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d53e:	485a      	ldr	r0, [pc, #360]	; (801d6a8 <RadioSetTxGenericConfig+0x2f4>)
 801d540:	f000 ff54 	bl	801e3ec <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d548:	4618      	mov	r0, r3
 801d54a:	f000 fa18 	bl	801d97e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801d54e:	68bb      	ldr	r3, [r7, #8]
 801d550:	8a1b      	ldrh	r3, [r3, #16]
 801d552:	4618      	mov	r0, r3
 801d554:	f000 fa62 	bl	801da1c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801d558:	68bb      	ldr	r3, [r7, #8]
 801d55a:	899b      	ldrh	r3, [r3, #12]
 801d55c:	4618      	mov	r0, r3
 801d55e:	f000 fa3d 	bl	801d9dc <SUBGRF_SetCrcPolynomial>
        break;
 801d562:	e13f      	b.n	801d7e4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801d564:	68bb      	ldr	r3, [r7, #8]
 801d566:	681b      	ldr	r3, [r3, #0]
 801d568:	2b00      	cmp	r3, #0
 801d56a:	d102      	bne.n	801d572 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801d56c:	f04f 33ff 	mov.w	r3, #4294967295
 801d570:	e14c      	b.n	801d80c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801d572:	68bb      	ldr	r3, [r7, #8]
 801d574:	7c9b      	ldrb	r3, [r3, #18]
 801d576:	2b08      	cmp	r3, #8
 801d578:	d902      	bls.n	801d580 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801d57a:	f04f 33ff 	mov.w	r3, #4294967295
 801d57e:	e145      	b.n	801d80c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801d580:	68bb      	ldr	r3, [r7, #8]
 801d582:	6899      	ldr	r1, [r3, #8]
 801d584:	68bb      	ldr	r3, [r7, #8]
 801d586:	7c9b      	ldrb	r3, [r3, #18]
 801d588:	b29a      	uxth	r2, r3
 801d58a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d58e:	4618      	mov	r0, r3
 801d590:	f001 fc18 	bl	801edc4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d594:	4b40      	ldr	r3, [pc, #256]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d596:	2200      	movs	r2, #0
 801d598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801d59c:	68bb      	ldr	r3, [r7, #8]
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	4a3d      	ldr	r2, [pc, #244]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d5a2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801d5a4:	68bb      	ldr	r3, [r7, #8]
 801d5a6:	7cda      	ldrb	r2, [r3, #19]
 801d5a8:	4b3b      	ldr	r3, [pc, #236]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d5aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801d5ae:	68bb      	ldr	r3, [r7, #8]
 801d5b0:	699b      	ldr	r3, [r3, #24]
 801d5b2:	4a39      	ldr	r2, [pc, #228]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d5b4:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d5b6:	4b38      	ldr	r3, [pc, #224]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d5b8:	2200      	movs	r2, #0
 801d5ba:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801d5bc:	68bb      	ldr	r3, [r7, #8]
 801d5be:	685b      	ldr	r3, [r3, #4]
 801d5c0:	b29b      	uxth	r3, r3
 801d5c2:	00db      	lsls	r3, r3, #3
 801d5c4:	b29a      	uxth	r2, r3
 801d5c6:	4b34      	ldr	r3, [pc, #208]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d5c8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d5ca:	4b33      	ldr	r3, [pc, #204]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d5cc:	2204      	movs	r2, #4
 801d5ce:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801d5d0:	68bb      	ldr	r3, [r7, #8]
 801d5d2:	7c9b      	ldrb	r3, [r3, #18]
 801d5d4:	00db      	lsls	r3, r3, #3
 801d5d6:	b2da      	uxtb	r2, r3
 801d5d8:	4b2f      	ldr	r3, [pc, #188]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d5da:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d5dc:	4b2e      	ldr	r3, [pc, #184]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d5de:	2200      	movs	r2, #0
 801d5e0:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d5e2:	68bb      	ldr	r3, [r7, #8]
 801d5e4:	7d9b      	ldrb	r3, [r3, #22]
 801d5e6:	2b02      	cmp	r3, #2
 801d5e8:	d003      	beq.n	801d5f2 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d5ea:	68bb      	ldr	r3, [r7, #8]
 801d5ec:	7d1b      	ldrb	r3, [r3, #20]
 801d5ee:	2b02      	cmp	r3, #2
 801d5f0:	d12a      	bne.n	801d648 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d5f2:	68bb      	ldr	r3, [r7, #8]
 801d5f4:	7d5b      	ldrb	r3, [r3, #21]
 801d5f6:	2bf1      	cmp	r3, #241	; 0xf1
 801d5f8:	d00a      	beq.n	801d610 <RadioSetTxGenericConfig+0x25c>
 801d5fa:	68bb      	ldr	r3, [r7, #8]
 801d5fc:	7d5b      	ldrb	r3, [r3, #21]
 801d5fe:	2bf2      	cmp	r3, #242	; 0xf2
 801d600:	d006      	beq.n	801d610 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d602:	68bb      	ldr	r3, [r7, #8]
 801d604:	7d5b      	ldrb	r3, [r3, #21]
 801d606:	2b01      	cmp	r3, #1
 801d608:	d002      	beq.n	801d610 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801d60a:	f04f 33ff 	mov.w	r3, #4294967295
 801d60e:	e0fd      	b.n	801d80c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801d610:	2301      	movs	r3, #1
 801d612:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801d614:	68bb      	ldr	r3, [r7, #8]
 801d616:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d618:	4b20      	ldr	r3, [pc, #128]	; (801d69c <RadioSetTxGenericConfig+0x2e8>)
 801d61a:	6819      	ldr	r1, [r3, #0]
 801d61c:	f107 0314 	add.w	r3, r7, #20
 801d620:	4a1f      	ldr	r2, [pc, #124]	; (801d6a0 <RadioSetTxGenericConfig+0x2ec>)
 801d622:	4618      	mov	r0, r3
 801d624:	f001 fb04 	bl	801ec30 <RFW_Init>
 801d628:	4603      	mov	r3, r0
 801d62a:	2b00      	cmp	r3, #0
 801d62c:	d002      	beq.n	801d634 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801d62e:	f04f 33ff 	mov.w	r3, #4294967295
 801d632:	e0eb      	b.n	801d80c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d634:	4b18      	ldr	r3, [pc, #96]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d636:	2200      	movs	r2, #0
 801d638:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d63a:	4b17      	ldr	r3, [pc, #92]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d63c:	2201      	movs	r2, #1
 801d63e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d640:	4b15      	ldr	r3, [pc, #84]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d642:	2200      	movs	r2, #0
 801d644:	755a      	strb	r2, [r3, #21]
        {
 801d646:	e00b      	b.n	801d660 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801d648:	68bb      	ldr	r3, [r7, #8]
 801d64a:	7d5a      	ldrb	r2, [r3, #21]
 801d64c:	4b12      	ldr	r3, [pc, #72]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d64e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801d650:	68bb      	ldr	r3, [r7, #8]
 801d652:	7d9a      	ldrb	r2, [r3, #22]
 801d654:	4b10      	ldr	r3, [pc, #64]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d656:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801d658:	68bb      	ldr	r3, [r7, #8]
 801d65a:	7d1a      	ldrb	r2, [r3, #20]
 801d65c:	4b0e      	ldr	r3, [pc, #56]	; (801d698 <RadioSetTxGenericConfig+0x2e4>)
 801d65e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801d660:	f7fe fffd 	bl	801c65e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801d664:	2000      	movs	r0, #0
 801d666:	f7fe f991 	bl	801b98c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d66a:	480e      	ldr	r0, [pc, #56]	; (801d6a4 <RadioSetTxGenericConfig+0x2f0>)
 801d66c:	f000 fdec 	bl	801e248 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d670:	480d      	ldr	r0, [pc, #52]	; (801d6a8 <RadioSetTxGenericConfig+0x2f4>)
 801d672:	f000 febb 	bl	801e3ec <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d67a:	4618      	mov	r0, r3
 801d67c:	f000 f97f 	bl	801d97e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801d680:	68bb      	ldr	r3, [r7, #8]
 801d682:	8a1b      	ldrh	r3, [r3, #16]
 801d684:	4618      	mov	r0, r3
 801d686:	f000 f9c9 	bl	801da1c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801d68a:	68bb      	ldr	r3, [r7, #8]
 801d68c:	899b      	ldrh	r3, [r3, #12]
 801d68e:	4618      	mov	r0, r3
 801d690:	f000 f9a4 	bl	801d9dc <SUBGRF_SetCrcPolynomial>
        break;
 801d694:	e0a6      	b.n	801d7e4 <RadioSetTxGenericConfig+0x430>
 801d696:	bf00      	nop
 801d698:	20001be0 	.word	0x20001be0
 801d69c:	20001bdc 	.word	0x20001bdc
 801d6a0:	20001c3c 	.word	0x20001c3c
 801d6a4:	20001c18 	.word	0x20001c18
 801d6a8:	20001bee 	.word	0x20001bee
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801d6ac:	4b59      	ldr	r3, [pc, #356]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d6ae:	2201      	movs	r2, #1
 801d6b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801d6b4:	68bb      	ldr	r3, [r7, #8]
 801d6b6:	781a      	ldrb	r2, [r3, #0]
 801d6b8:	4b56      	ldr	r3, [pc, #344]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d6ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801d6be:	68bb      	ldr	r3, [r7, #8]
 801d6c0:	785a      	ldrb	r2, [r3, #1]
 801d6c2:	4b54      	ldr	r3, [pc, #336]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d6c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801d6c8:	68bb      	ldr	r3, [r7, #8]
 801d6ca:	789a      	ldrb	r2, [r3, #2]
 801d6cc:	4b51      	ldr	r3, [pc, #324]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d6ce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801d6d2:	68bb      	ldr	r3, [r7, #8]
 801d6d4:	78db      	ldrb	r3, [r3, #3]
 801d6d6:	2b02      	cmp	r3, #2
 801d6d8:	d010      	beq.n	801d6fc <RadioSetTxGenericConfig+0x348>
 801d6da:	2b02      	cmp	r3, #2
 801d6dc:	dc20      	bgt.n	801d720 <RadioSetTxGenericConfig+0x36c>
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d002      	beq.n	801d6e8 <RadioSetTxGenericConfig+0x334>
 801d6e2:	2b01      	cmp	r3, #1
 801d6e4:	d005      	beq.n	801d6f2 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801d6e6:	e01b      	b.n	801d720 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d6e8:	4b4a      	ldr	r3, [pc, #296]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d6ea:	2200      	movs	r2, #0
 801d6ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d6f0:	e017      	b.n	801d722 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d6f2:	4b48      	ldr	r3, [pc, #288]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d6f4:	2201      	movs	r2, #1
 801d6f6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d6fa:	e012      	b.n	801d722 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d6fc:	68bb      	ldr	r3, [r7, #8]
 801d6fe:	781b      	ldrb	r3, [r3, #0]
 801d700:	2b0b      	cmp	r3, #11
 801d702:	d003      	beq.n	801d70c <RadioSetTxGenericConfig+0x358>
 801d704:	68bb      	ldr	r3, [r7, #8]
 801d706:	781b      	ldrb	r3, [r3, #0]
 801d708:	2b0c      	cmp	r3, #12
 801d70a:	d104      	bne.n	801d716 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d70c:	4b41      	ldr	r3, [pc, #260]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d70e:	2201      	movs	r2, #1
 801d710:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d714:	e005      	b.n	801d722 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d716:	4b3f      	ldr	r3, [pc, #252]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d718:	2200      	movs	r2, #0
 801d71a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d71e:	e000      	b.n	801d722 <RadioSetTxGenericConfig+0x36e>
            break;
 801d720:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d722:	4b3c      	ldr	r3, [pc, #240]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d724:	2201      	movs	r2, #1
 801d726:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d728:	68bb      	ldr	r3, [r7, #8]
 801d72a:	889a      	ldrh	r2, [r3, #4]
 801d72c:	4b39      	ldr	r3, [pc, #228]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d72e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d730:	68bb      	ldr	r3, [r7, #8]
 801d732:	799a      	ldrb	r2, [r3, #6]
 801d734:	4b37      	ldr	r3, [pc, #220]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d736:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d738:	68bb      	ldr	r3, [r7, #8]
 801d73a:	79da      	ldrb	r2, [r3, #7]
 801d73c:	4b35      	ldr	r3, [pc, #212]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d73e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d742:	68bb      	ldr	r3, [r7, #8]
 801d744:	7a1a      	ldrb	r2, [r3, #8]
 801d746:	4b33      	ldr	r3, [pc, #204]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d748:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801d74c:	f7fe ff87 	bl	801c65e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d750:	2001      	movs	r0, #1
 801d752:	f7fe f91b 	bl	801b98c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d756:	4830      	ldr	r0, [pc, #192]	; (801d818 <RadioSetTxGenericConfig+0x464>)
 801d758:	f000 fd76 	bl	801e248 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d75c:	482f      	ldr	r0, [pc, #188]	; (801d81c <RadioSetTxGenericConfig+0x468>)
 801d75e:	f000 fe45 	bl	801e3ec <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801d762:	4b2c      	ldr	r3, [pc, #176]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801d768:	2b06      	cmp	r3, #6
 801d76a:	d10d      	bne.n	801d788 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801d76c:	f640 0089 	movw	r0, #2185	; 0x889
 801d770:	f000 ff98 	bl	801e6a4 <SUBGRF_ReadRegister>
 801d774:	4603      	mov	r3, r0
 801d776:	f023 0304 	bic.w	r3, r3, #4
 801d77a:	b2db      	uxtb	r3, r3
 801d77c:	4619      	mov	r1, r3
 801d77e:	f640 0089 	movw	r0, #2185	; 0x889
 801d782:	f000 ff7b 	bl	801e67c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801d786:	e02d      	b.n	801d7e4 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801d788:	f640 0089 	movw	r0, #2185	; 0x889
 801d78c:	f000 ff8a 	bl	801e6a4 <SUBGRF_ReadRegister>
 801d790:	4603      	mov	r3, r0
 801d792:	f043 0304 	orr.w	r3, r3, #4
 801d796:	b2db      	uxtb	r3, r3
 801d798:	4619      	mov	r1, r3
 801d79a:	f640 0089 	movw	r0, #2185	; 0x889
 801d79e:	f000 ff6d 	bl	801e67c <SUBGRF_WriteRegister>
        break;
 801d7a2:	e01f      	b.n	801d7e4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801d7a4:	68bb      	ldr	r3, [r7, #8]
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	d004      	beq.n	801d7b6 <RadioSetTxGenericConfig+0x402>
 801d7ac:	68bb      	ldr	r3, [r7, #8]
 801d7ae:	681b      	ldr	r3, [r3, #0]
 801d7b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d7b4:	d902      	bls.n	801d7bc <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801d7b6:	f04f 33ff 	mov.w	r3, #4294967295
 801d7ba:	e027      	b.n	801d80c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801d7bc:	2003      	movs	r0, #3
 801d7be:	f7fe f8e5 	bl	801b98c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801d7c2:	4b14      	ldr	r3, [pc, #80]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d7c4:	2202      	movs	r2, #2
 801d7c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801d7ca:	68bb      	ldr	r3, [r7, #8]
 801d7cc:	681b      	ldr	r3, [r3, #0]
 801d7ce:	4a11      	ldr	r2, [pc, #68]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d7d0:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801d7d2:	4b10      	ldr	r3, [pc, #64]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d7d4:	2216      	movs	r2, #22
 801d7d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d7da:	480f      	ldr	r0, [pc, #60]	; (801d818 <RadioSetTxGenericConfig+0x464>)
 801d7dc:	f000 fd34 	bl	801e248 <SUBGRF_SetModulationParams>
        break;
 801d7e0:	e000      	b.n	801d7e4 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801d7e2:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801d7e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d7e8:	4618      	mov	r0, r3
 801d7ea:	f001 f863 	bl	801e8b4 <SUBGRF_SetRfTxPower>
 801d7ee:	4603      	mov	r3, r0
 801d7f0:	461a      	mov	r2, r3
 801d7f2:	4b08      	ldr	r3, [pc, #32]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d7f4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801d7f8:	4b06      	ldr	r3, [pc, #24]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d7fa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d7fe:	4618      	mov	r0, r3
 801d800:	f001 fa37 	bl	801ec72 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801d804:	4a03      	ldr	r2, [pc, #12]	; (801d814 <RadioSetTxGenericConfig+0x460>)
 801d806:	687b      	ldr	r3, [r7, #4]
 801d808:	6053      	str	r3, [r2, #4]
    return 0;
 801d80a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801d80c:	4618      	mov	r0, r3
 801d80e:	3738      	adds	r7, #56	; 0x38
 801d810:	46bd      	mov	sp, r7
 801d812:	bd80      	pop	{r7, pc}
 801d814:	20001be0 	.word	0x20001be0
 801d818:	20001c18 	.word	0x20001c18
 801d81c:	20001bee 	.word	0x20001bee

0801d820 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801d820:	b480      	push	{r7}
 801d822:	b085      	sub	sp, #20
 801d824:	af00      	add	r7, sp, #0
 801d826:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801d828:	2301      	movs	r3, #1
 801d82a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801d82c:	7bfb      	ldrb	r3, [r7, #15]
}
 801d82e:	4618      	mov	r0, r3
 801d830:	3714      	adds	r7, #20
 801d832:	46bd      	mov	sp, r7
 801d834:	bc80      	pop	{r7}
 801d836:	4770      	bx	lr

0801d838 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801d838:	b480      	push	{r7}
 801d83a:	b083      	sub	sp, #12
 801d83c:	af00      	add	r7, sp, #0
 801d83e:	6078      	str	r0, [r7, #4]
 801d840:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801d842:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801d844:	4618      	mov	r0, r3
 801d846:	370c      	adds	r7, #12
 801d848:	46bd      	mov	sp, r7
 801d84a:	bc80      	pop	{r7}
 801d84c:	4770      	bx	lr
	...

0801d850 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801d850:	b580      	push	{r7, lr}
 801d852:	b084      	sub	sp, #16
 801d854:	af00      	add	r7, sp, #0
 801d856:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801d858:	687b      	ldr	r3, [r7, #4]
 801d85a:	2b00      	cmp	r3, #0
 801d85c:	d002      	beq.n	801d864 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801d85e:	4a1d      	ldr	r2, [pc, #116]	; (801d8d4 <SUBGRF_Init+0x84>)
 801d860:	687b      	ldr	r3, [r7, #4]
 801d862:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801d864:	f7e4 fd6a 	bl	800233c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801d868:	2002      	movs	r0, #2
 801d86a:	f001 f8ff 	bl	801ea6c <Radio_SMPS_Set>

    ImageCalibrated = false;
 801d86e:	4b1a      	ldr	r3, [pc, #104]	; (801d8d8 <SUBGRF_Init+0x88>)
 801d870:	2200      	movs	r2, #0
 801d872:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801d874:	2000      	movs	r0, #0
 801d876:	f000 f97d 	bl	801db74 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801d87a:	f7ef ff6f 	bl	800d75c <RBI_IsTCXO>
 801d87e:	4603      	mov	r3, r0
 801d880:	2b01      	cmp	r3, #1
 801d882:	d10e      	bne.n	801d8a2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801d884:	2140      	movs	r1, #64	; 0x40
 801d886:	2001      	movs	r0, #1
 801d888:	f000 fb82 	bl	801df90 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801d88c:	2100      	movs	r1, #0
 801d88e:	f640 1011 	movw	r0, #2321	; 0x911
 801d892:	f000 fef3 	bl	801e67c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801d896:	237f      	movs	r3, #127	; 0x7f
 801d898:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801d89a:	7b38      	ldrb	r0, [r7, #12]
 801d89c:	f000 fa8b 	bl	801ddb6 <SUBGRF_Calibrate>
 801d8a0:	e009      	b.n	801d8b6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d8a2:	2120      	movs	r1, #32
 801d8a4:	f640 1011 	movw	r0, #2321	; 0x911
 801d8a8:	f000 fee8 	bl	801e67c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d8ac:	2120      	movs	r1, #32
 801d8ae:	f640 1012 	movw	r0, #2322	; 0x912
 801d8b2:	f000 fee3 	bl	801e67c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801d8b6:	210e      	movs	r1, #14
 801d8b8:	f640 101f 	movw	r0, #2335	; 0x91f
 801d8bc:	f000 fede 	bl	801e67c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801d8c0:	f7ef ff30 	bl	800d724 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801d8c4:	4b05      	ldr	r3, [pc, #20]	; (801d8dc <SUBGRF_Init+0x8c>)
 801d8c6:	2201      	movs	r2, #1
 801d8c8:	701a      	strb	r2, [r3, #0]
}
 801d8ca:	bf00      	nop
 801d8cc:	3710      	adds	r7, #16
 801d8ce:	46bd      	mov	sp, r7
 801d8d0:	bd80      	pop	{r7, pc}
 801d8d2:	bf00      	nop
 801d8d4:	20001c78 	.word	0x20001c78
 801d8d8:	20001c74 	.word	0x20001c74
 801d8dc:	20001c6c 	.word	0x20001c6c

0801d8e0 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801d8e0:	b480      	push	{r7}
 801d8e2:	af00      	add	r7, sp, #0
    return OperatingMode;
 801d8e4:	4b02      	ldr	r3, [pc, #8]	; (801d8f0 <SUBGRF_GetOperatingMode+0x10>)
 801d8e6:	781b      	ldrb	r3, [r3, #0]
}
 801d8e8:	4618      	mov	r0, r3
 801d8ea:	46bd      	mov	sp, r7
 801d8ec:	bc80      	pop	{r7}
 801d8ee:	4770      	bx	lr
 801d8f0:	20001c6c 	.word	0x20001c6c

0801d8f4 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801d8f4:	b580      	push	{r7, lr}
 801d8f6:	b082      	sub	sp, #8
 801d8f8:	af00      	add	r7, sp, #0
 801d8fa:	6078      	str	r0, [r7, #4]
 801d8fc:	460b      	mov	r3, r1
 801d8fe:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801d900:	78fb      	ldrb	r3, [r7, #3]
 801d902:	461a      	mov	r2, r3
 801d904:	6879      	ldr	r1, [r7, #4]
 801d906:	2000      	movs	r0, #0
 801d908:	f000 ff24 	bl	801e754 <SUBGRF_WriteBuffer>
}
 801d90c:	bf00      	nop
 801d90e:	3708      	adds	r7, #8
 801d910:	46bd      	mov	sp, r7
 801d912:	bd80      	pop	{r7, pc}

0801d914 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801d914:	b580      	push	{r7, lr}
 801d916:	b086      	sub	sp, #24
 801d918:	af00      	add	r7, sp, #0
 801d91a:	60f8      	str	r0, [r7, #12]
 801d91c:	60b9      	str	r1, [r7, #8]
 801d91e:	4613      	mov	r3, r2
 801d920:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801d922:	2300      	movs	r3, #0
 801d924:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801d926:	f107 0317 	add.w	r3, r7, #23
 801d92a:	4619      	mov	r1, r3
 801d92c:	68b8      	ldr	r0, [r7, #8]
 801d92e:	f000 fe27 	bl	801e580 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801d932:	68bb      	ldr	r3, [r7, #8]
 801d934:	781b      	ldrb	r3, [r3, #0]
 801d936:	79fa      	ldrb	r2, [r7, #7]
 801d938:	429a      	cmp	r2, r3
 801d93a:	d201      	bcs.n	801d940 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801d93c:	2301      	movs	r3, #1
 801d93e:	e007      	b.n	801d950 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801d940:	7df8      	ldrb	r0, [r7, #23]
 801d942:	68bb      	ldr	r3, [r7, #8]
 801d944:	781b      	ldrb	r3, [r3, #0]
 801d946:	461a      	mov	r2, r3
 801d948:	68f9      	ldr	r1, [r7, #12]
 801d94a:	f000 ff25 	bl	801e798 <SUBGRF_ReadBuffer>

    return 0;
 801d94e:	2300      	movs	r3, #0
}
 801d950:	4618      	mov	r0, r3
 801d952:	3718      	adds	r7, #24
 801d954:	46bd      	mov	sp, r7
 801d956:	bd80      	pop	{r7, pc}

0801d958 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801d958:	b580      	push	{r7, lr}
 801d95a:	b084      	sub	sp, #16
 801d95c:	af00      	add	r7, sp, #0
 801d95e:	60f8      	str	r0, [r7, #12]
 801d960:	460b      	mov	r3, r1
 801d962:	607a      	str	r2, [r7, #4]
 801d964:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801d966:	7afb      	ldrb	r3, [r7, #11]
 801d968:	4619      	mov	r1, r3
 801d96a:	68f8      	ldr	r0, [r7, #12]
 801d96c:	f7ff ffc2 	bl	801d8f4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801d970:	6878      	ldr	r0, [r7, #4]
 801d972:	f000 f91b 	bl	801dbac <SUBGRF_SetTx>
}
 801d976:	bf00      	nop
 801d978:	3710      	adds	r7, #16
 801d97a:	46bd      	mov	sp, r7
 801d97c:	bd80      	pop	{r7, pc}

0801d97e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801d97e:	b580      	push	{r7, lr}
 801d980:	b082      	sub	sp, #8
 801d982:	af00      	add	r7, sp, #0
 801d984:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801d986:	2208      	movs	r2, #8
 801d988:	6879      	ldr	r1, [r7, #4]
 801d98a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801d98e:	f000 fe9d 	bl	801e6cc <SUBGRF_WriteRegisters>
    return 0;
 801d992:	2300      	movs	r3, #0
}
 801d994:	4618      	mov	r0, r3
 801d996:	3708      	adds	r7, #8
 801d998:	46bd      	mov	sp, r7
 801d99a:	bd80      	pop	{r7, pc}

0801d99c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801d99c:	b580      	push	{r7, lr}
 801d99e:	b084      	sub	sp, #16
 801d9a0:	af00      	add	r7, sp, #0
 801d9a2:	4603      	mov	r3, r0
 801d9a4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801d9a6:	88fb      	ldrh	r3, [r7, #6]
 801d9a8:	0a1b      	lsrs	r3, r3, #8
 801d9aa:	b29b      	uxth	r3, r3
 801d9ac:	b2db      	uxtb	r3, r3
 801d9ae:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801d9b0:	88fb      	ldrh	r3, [r7, #6]
 801d9b2:	b2db      	uxtb	r3, r3
 801d9b4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801d9b6:	f000 fb6f 	bl	801e098 <SUBGRF_GetPacketType>
 801d9ba:	4603      	mov	r3, r0
 801d9bc:	2b00      	cmp	r3, #0
 801d9be:	d108      	bne.n	801d9d2 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801d9c0:	f107 030c 	add.w	r3, r7, #12
 801d9c4:	2202      	movs	r2, #2
 801d9c6:	4619      	mov	r1, r3
 801d9c8:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801d9cc:	f000 fe7e 	bl	801e6cc <SUBGRF_WriteRegisters>
            break;
 801d9d0:	e000      	b.n	801d9d4 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801d9d2:	bf00      	nop
    }
}
 801d9d4:	bf00      	nop
 801d9d6:	3710      	adds	r7, #16
 801d9d8:	46bd      	mov	sp, r7
 801d9da:	bd80      	pop	{r7, pc}

0801d9dc <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801d9dc:	b580      	push	{r7, lr}
 801d9de:	b084      	sub	sp, #16
 801d9e0:	af00      	add	r7, sp, #0
 801d9e2:	4603      	mov	r3, r0
 801d9e4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801d9e6:	88fb      	ldrh	r3, [r7, #6]
 801d9e8:	0a1b      	lsrs	r3, r3, #8
 801d9ea:	b29b      	uxth	r3, r3
 801d9ec:	b2db      	uxtb	r3, r3
 801d9ee:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801d9f0:	88fb      	ldrh	r3, [r7, #6]
 801d9f2:	b2db      	uxtb	r3, r3
 801d9f4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801d9f6:	f000 fb4f 	bl	801e098 <SUBGRF_GetPacketType>
 801d9fa:	4603      	mov	r3, r0
 801d9fc:	2b00      	cmp	r3, #0
 801d9fe:	d108      	bne.n	801da12 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801da00:	f107 030c 	add.w	r3, r7, #12
 801da04:	2202      	movs	r2, #2
 801da06:	4619      	mov	r1, r3
 801da08:	f240 60be 	movw	r0, #1726	; 0x6be
 801da0c:	f000 fe5e 	bl	801e6cc <SUBGRF_WriteRegisters>
            break;
 801da10:	e000      	b.n	801da14 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801da12:	bf00      	nop
    }
}
 801da14:	bf00      	nop
 801da16:	3710      	adds	r7, #16
 801da18:	46bd      	mov	sp, r7
 801da1a:	bd80      	pop	{r7, pc}

0801da1c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801da1c:	b580      	push	{r7, lr}
 801da1e:	b084      	sub	sp, #16
 801da20:	af00      	add	r7, sp, #0
 801da22:	4603      	mov	r3, r0
 801da24:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801da26:	2300      	movs	r3, #0
 801da28:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801da2a:	f000 fb35 	bl	801e098 <SUBGRF_GetPacketType>
 801da2e:	4603      	mov	r3, r0
 801da30:	2b00      	cmp	r3, #0
 801da32:	d121      	bne.n	801da78 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801da34:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801da38:	f000 fe34 	bl	801e6a4 <SUBGRF_ReadRegister>
 801da3c:	4603      	mov	r3, r0
 801da3e:	f023 0301 	bic.w	r3, r3, #1
 801da42:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801da44:	88fb      	ldrh	r3, [r7, #6]
 801da46:	0a1b      	lsrs	r3, r3, #8
 801da48:	b29b      	uxth	r3, r3
 801da4a:	b25b      	sxtb	r3, r3
 801da4c:	f003 0301 	and.w	r3, r3, #1
 801da50:	b25a      	sxtb	r2, r3
 801da52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801da56:	4313      	orrs	r3, r2
 801da58:	b25b      	sxtb	r3, r3
 801da5a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801da5c:	7bfb      	ldrb	r3, [r7, #15]
 801da5e:	4619      	mov	r1, r3
 801da60:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801da64:	f000 fe0a 	bl	801e67c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801da68:	88fb      	ldrh	r3, [r7, #6]
 801da6a:	b2db      	uxtb	r3, r3
 801da6c:	4619      	mov	r1, r3
 801da6e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801da72:	f000 fe03 	bl	801e67c <SUBGRF_WriteRegister>
            break;
 801da76:	e000      	b.n	801da7a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801da78:	bf00      	nop
    }
}
 801da7a:	bf00      	nop
 801da7c:	3710      	adds	r7, #16
 801da7e:	46bd      	mov	sp, r7
 801da80:	bd80      	pop	{r7, pc}

0801da82 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801da82:	b580      	push	{r7, lr}
 801da84:	b082      	sub	sp, #8
 801da86:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801da88:	2300      	movs	r3, #0
 801da8a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801da8c:	2300      	movs	r3, #0
 801da8e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801da90:	2300      	movs	r3, #0
 801da92:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801da94:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801da98:	f000 fe04 	bl	801e6a4 <SUBGRF_ReadRegister>
 801da9c:	4603      	mov	r3, r0
 801da9e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801daa0:	79fb      	ldrb	r3, [r7, #7]
 801daa2:	f023 0301 	bic.w	r3, r3, #1
 801daa6:	b2db      	uxtb	r3, r3
 801daa8:	4619      	mov	r1, r3
 801daaa:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801daae:	f000 fde5 	bl	801e67c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801dab2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801dab6:	f000 fdf5 	bl	801e6a4 <SUBGRF_ReadRegister>
 801daba:	4603      	mov	r3, r0
 801dabc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801dabe:	79bb      	ldrb	r3, [r7, #6]
 801dac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dac4:	b2db      	uxtb	r3, r3
 801dac6:	4619      	mov	r1, r3
 801dac8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801dacc:	f000 fdd6 	bl	801e67c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801dad0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801dad4:	f000 f88a 	bl	801dbec <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801dad8:	463b      	mov	r3, r7
 801dada:	2204      	movs	r2, #4
 801dadc:	4619      	mov	r1, r3
 801dade:	f640 0019 	movw	r0, #2073	; 0x819
 801dae2:	f000 fe15 	bl	801e710 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801dae6:	2000      	movs	r0, #0
 801dae8:	f000 f844 	bl	801db74 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801daec:	79fb      	ldrb	r3, [r7, #7]
 801daee:	4619      	mov	r1, r3
 801daf0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801daf4:	f000 fdc2 	bl	801e67c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801daf8:	79bb      	ldrb	r3, [r7, #6]
 801dafa:	4619      	mov	r1, r3
 801dafc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801db00:	f000 fdbc 	bl	801e67c <SUBGRF_WriteRegister>

    return number;
 801db04:	683b      	ldr	r3, [r7, #0]
}
 801db06:	4618      	mov	r0, r3
 801db08:	3708      	adds	r7, #8
 801db0a:	46bd      	mov	sp, r7
 801db0c:	bd80      	pop	{r7, pc}
	...

0801db10 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801db10:	b580      	push	{r7, lr}
 801db12:	b084      	sub	sp, #16
 801db14:	af00      	add	r7, sp, #0
 801db16:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801db18:	2000      	movs	r0, #0
 801db1a:	f7ef fe0a 	bl	800d732 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801db1e:	2002      	movs	r0, #2
 801db20:	f000 ffa4 	bl	801ea6c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801db24:	793b      	ldrb	r3, [r7, #4]
 801db26:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801db2a:	b2db      	uxtb	r3, r3
 801db2c:	009b      	lsls	r3, r3, #2
 801db2e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801db30:	793b      	ldrb	r3, [r7, #4]
 801db32:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801db36:	b2db      	uxtb	r3, r3
 801db38:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801db3a:	b25b      	sxtb	r3, r3
 801db3c:	4313      	orrs	r3, r2
 801db3e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801db40:	793b      	ldrb	r3, [r7, #4]
 801db42:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801db46:	b2db      	uxtb	r3, r3
 801db48:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801db4a:	4313      	orrs	r3, r2
 801db4c:	b25b      	sxtb	r3, r3
 801db4e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801db50:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801db52:	f107 030f 	add.w	r3, r7, #15
 801db56:	2201      	movs	r2, #1
 801db58:	4619      	mov	r1, r3
 801db5a:	2084      	movs	r0, #132	; 0x84
 801db5c:	f000 fe3e 	bl	801e7dc <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801db60:	4b03      	ldr	r3, [pc, #12]	; (801db70 <SUBGRF_SetSleep+0x60>)
 801db62:	2200      	movs	r2, #0
 801db64:	701a      	strb	r2, [r3, #0]
}
 801db66:	bf00      	nop
 801db68:	3710      	adds	r7, #16
 801db6a:	46bd      	mov	sp, r7
 801db6c:	bd80      	pop	{r7, pc}
 801db6e:	bf00      	nop
 801db70:	20001c6c 	.word	0x20001c6c

0801db74 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801db74:	b580      	push	{r7, lr}
 801db76:	b082      	sub	sp, #8
 801db78:	af00      	add	r7, sp, #0
 801db7a:	4603      	mov	r3, r0
 801db7c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801db7e:	1dfb      	adds	r3, r7, #7
 801db80:	2201      	movs	r2, #1
 801db82:	4619      	mov	r1, r3
 801db84:	2080      	movs	r0, #128	; 0x80
 801db86:	f000 fe29 	bl	801e7dc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801db8a:	79fb      	ldrb	r3, [r7, #7]
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	d103      	bne.n	801db98 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801db90:	4b05      	ldr	r3, [pc, #20]	; (801dba8 <SUBGRF_SetStandby+0x34>)
 801db92:	2201      	movs	r2, #1
 801db94:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801db96:	e002      	b.n	801db9e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801db98:	4b03      	ldr	r3, [pc, #12]	; (801dba8 <SUBGRF_SetStandby+0x34>)
 801db9a:	2202      	movs	r2, #2
 801db9c:	701a      	strb	r2, [r3, #0]
}
 801db9e:	bf00      	nop
 801dba0:	3708      	adds	r7, #8
 801dba2:	46bd      	mov	sp, r7
 801dba4:	bd80      	pop	{r7, pc}
 801dba6:	bf00      	nop
 801dba8:	20001c6c 	.word	0x20001c6c

0801dbac <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801dbac:	b580      	push	{r7, lr}
 801dbae:	b084      	sub	sp, #16
 801dbb0:	af00      	add	r7, sp, #0
 801dbb2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801dbb4:	4b0c      	ldr	r3, [pc, #48]	; (801dbe8 <SUBGRF_SetTx+0x3c>)
 801dbb6:	2204      	movs	r2, #4
 801dbb8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dbba:	687b      	ldr	r3, [r7, #4]
 801dbbc:	0c1b      	lsrs	r3, r3, #16
 801dbbe:	b2db      	uxtb	r3, r3
 801dbc0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dbc2:	687b      	ldr	r3, [r7, #4]
 801dbc4:	0a1b      	lsrs	r3, r3, #8
 801dbc6:	b2db      	uxtb	r3, r3
 801dbc8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	b2db      	uxtb	r3, r3
 801dbce:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801dbd0:	f107 030c 	add.w	r3, r7, #12
 801dbd4:	2203      	movs	r2, #3
 801dbd6:	4619      	mov	r1, r3
 801dbd8:	2083      	movs	r0, #131	; 0x83
 801dbda:	f000 fdff 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801dbde:	bf00      	nop
 801dbe0:	3710      	adds	r7, #16
 801dbe2:	46bd      	mov	sp, r7
 801dbe4:	bd80      	pop	{r7, pc}
 801dbe6:	bf00      	nop
 801dbe8:	20001c6c 	.word	0x20001c6c

0801dbec <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801dbec:	b580      	push	{r7, lr}
 801dbee:	b084      	sub	sp, #16
 801dbf0:	af00      	add	r7, sp, #0
 801dbf2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801dbf4:	4b0c      	ldr	r3, [pc, #48]	; (801dc28 <SUBGRF_SetRx+0x3c>)
 801dbf6:	2205      	movs	r2, #5
 801dbf8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	0c1b      	lsrs	r3, r3, #16
 801dbfe:	b2db      	uxtb	r3, r3
 801dc00:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	0a1b      	lsrs	r3, r3, #8
 801dc06:	b2db      	uxtb	r3, r3
 801dc08:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	b2db      	uxtb	r3, r3
 801dc0e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801dc10:	f107 030c 	add.w	r3, r7, #12
 801dc14:	2203      	movs	r2, #3
 801dc16:	4619      	mov	r1, r3
 801dc18:	2082      	movs	r0, #130	; 0x82
 801dc1a:	f000 fddf 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801dc1e:	bf00      	nop
 801dc20:	3710      	adds	r7, #16
 801dc22:	46bd      	mov	sp, r7
 801dc24:	bd80      	pop	{r7, pc}
 801dc26:	bf00      	nop
 801dc28:	20001c6c 	.word	0x20001c6c

0801dc2c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801dc2c:	b580      	push	{r7, lr}
 801dc2e:	b084      	sub	sp, #16
 801dc30:	af00      	add	r7, sp, #0
 801dc32:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801dc34:	4b0e      	ldr	r3, [pc, #56]	; (801dc70 <SUBGRF_SetRxBoosted+0x44>)
 801dc36:	2205      	movs	r2, #5
 801dc38:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801dc3a:	2197      	movs	r1, #151	; 0x97
 801dc3c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801dc40:	f000 fd1c 	bl	801e67c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	0c1b      	lsrs	r3, r3, #16
 801dc48:	b2db      	uxtb	r3, r3
 801dc4a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dc4c:	687b      	ldr	r3, [r7, #4]
 801dc4e:	0a1b      	lsrs	r3, r3, #8
 801dc50:	b2db      	uxtb	r3, r3
 801dc52:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	b2db      	uxtb	r3, r3
 801dc58:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801dc5a:	f107 030c 	add.w	r3, r7, #12
 801dc5e:	2203      	movs	r2, #3
 801dc60:	4619      	mov	r1, r3
 801dc62:	2082      	movs	r0, #130	; 0x82
 801dc64:	f000 fdba 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801dc68:	bf00      	nop
 801dc6a:	3710      	adds	r7, #16
 801dc6c:	46bd      	mov	sp, r7
 801dc6e:	bd80      	pop	{r7, pc}
 801dc70:	20001c6c 	.word	0x20001c6c

0801dc74 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801dc74:	b580      	push	{r7, lr}
 801dc76:	b084      	sub	sp, #16
 801dc78:	af00      	add	r7, sp, #0
 801dc7a:	6078      	str	r0, [r7, #4]
 801dc7c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801dc7e:	687b      	ldr	r3, [r7, #4]
 801dc80:	0c1b      	lsrs	r3, r3, #16
 801dc82:	b2db      	uxtb	r3, r3
 801dc84:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	0a1b      	lsrs	r3, r3, #8
 801dc8a:	b2db      	uxtb	r3, r3
 801dc8c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801dc8e:	687b      	ldr	r3, [r7, #4]
 801dc90:	b2db      	uxtb	r3, r3
 801dc92:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801dc94:	683b      	ldr	r3, [r7, #0]
 801dc96:	0c1b      	lsrs	r3, r3, #16
 801dc98:	b2db      	uxtb	r3, r3
 801dc9a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801dc9c:	683b      	ldr	r3, [r7, #0]
 801dc9e:	0a1b      	lsrs	r3, r3, #8
 801dca0:	b2db      	uxtb	r3, r3
 801dca2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801dca4:	683b      	ldr	r3, [r7, #0]
 801dca6:	b2db      	uxtb	r3, r3
 801dca8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801dcaa:	f107 0308 	add.w	r3, r7, #8
 801dcae:	2206      	movs	r2, #6
 801dcb0:	4619      	mov	r1, r3
 801dcb2:	2094      	movs	r0, #148	; 0x94
 801dcb4:	f000 fd92 	bl	801e7dc <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801dcb8:	4b03      	ldr	r3, [pc, #12]	; (801dcc8 <SUBGRF_SetRxDutyCycle+0x54>)
 801dcba:	2206      	movs	r2, #6
 801dcbc:	701a      	strb	r2, [r3, #0]
}
 801dcbe:	bf00      	nop
 801dcc0:	3710      	adds	r7, #16
 801dcc2:	46bd      	mov	sp, r7
 801dcc4:	bd80      	pop	{r7, pc}
 801dcc6:	bf00      	nop
 801dcc8:	20001c6c 	.word	0x20001c6c

0801dccc <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801dccc:	b580      	push	{r7, lr}
 801dcce:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801dcd0:	2200      	movs	r2, #0
 801dcd2:	2100      	movs	r1, #0
 801dcd4:	20c5      	movs	r0, #197	; 0xc5
 801dcd6:	f000 fd81 	bl	801e7dc <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801dcda:	4b02      	ldr	r3, [pc, #8]	; (801dce4 <SUBGRF_SetCad+0x18>)
 801dcdc:	2207      	movs	r2, #7
 801dcde:	701a      	strb	r2, [r3, #0]
}
 801dce0:	bf00      	nop
 801dce2:	bd80      	pop	{r7, pc}
 801dce4:	20001c6c 	.word	0x20001c6c

0801dce8 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801dce8:	b580      	push	{r7, lr}
 801dcea:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801dcec:	2200      	movs	r2, #0
 801dcee:	2100      	movs	r1, #0
 801dcf0:	20d1      	movs	r0, #209	; 0xd1
 801dcf2:	f000 fd73 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801dcf6:	bf00      	nop
 801dcf8:	bd80      	pop	{r7, pc}

0801dcfa <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801dcfa:	b580      	push	{r7, lr}
 801dcfc:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801dcfe:	2200      	movs	r2, #0
 801dd00:	2100      	movs	r1, #0
 801dd02:	20d2      	movs	r0, #210	; 0xd2
 801dd04:	f000 fd6a 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801dd08:	bf00      	nop
 801dd0a:	bd80      	pop	{r7, pc}

0801dd0c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801dd0c:	b580      	push	{r7, lr}
 801dd0e:	b082      	sub	sp, #8
 801dd10:	af00      	add	r7, sp, #0
 801dd12:	4603      	mov	r3, r0
 801dd14:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801dd16:	1dfb      	adds	r3, r7, #7
 801dd18:	2201      	movs	r2, #1
 801dd1a:	4619      	mov	r1, r3
 801dd1c:	209f      	movs	r0, #159	; 0x9f
 801dd1e:	f000 fd5d 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801dd22:	bf00      	nop
 801dd24:	3708      	adds	r7, #8
 801dd26:	46bd      	mov	sp, r7
 801dd28:	bd80      	pop	{r7, pc}

0801dd2a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801dd2a:	b580      	push	{r7, lr}
 801dd2c:	b084      	sub	sp, #16
 801dd2e:	af00      	add	r7, sp, #0
 801dd30:	4603      	mov	r3, r0
 801dd32:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801dd34:	1dfb      	adds	r3, r7, #7
 801dd36:	2201      	movs	r2, #1
 801dd38:	4619      	mov	r1, r3
 801dd3a:	20a0      	movs	r0, #160	; 0xa0
 801dd3c:	f000 fd4e 	bl	801e7dc <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801dd40:	79fb      	ldrb	r3, [r7, #7]
 801dd42:	2b3f      	cmp	r3, #63	; 0x3f
 801dd44:	d91c      	bls.n	801dd80 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801dd46:	79fb      	ldrb	r3, [r7, #7]
 801dd48:	085b      	lsrs	r3, r3, #1
 801dd4a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801dd4c:	2300      	movs	r3, #0
 801dd4e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801dd50:	2300      	movs	r3, #0
 801dd52:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801dd54:	e005      	b.n	801dd62 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801dd56:	7bfb      	ldrb	r3, [r7, #15]
 801dd58:	089b      	lsrs	r3, r3, #2
 801dd5a:	73fb      	strb	r3, [r7, #15]
            exp++;
 801dd5c:	7bbb      	ldrb	r3, [r7, #14]
 801dd5e:	3301      	adds	r3, #1
 801dd60:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801dd62:	7bfb      	ldrb	r3, [r7, #15]
 801dd64:	2b1f      	cmp	r3, #31
 801dd66:	d8f6      	bhi.n	801dd56 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801dd68:	7bfb      	ldrb	r3, [r7, #15]
 801dd6a:	00db      	lsls	r3, r3, #3
 801dd6c:	b2da      	uxtb	r2, r3
 801dd6e:	7bbb      	ldrb	r3, [r7, #14]
 801dd70:	4413      	add	r3, r2
 801dd72:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801dd74:	7b7b      	ldrb	r3, [r7, #13]
 801dd76:	4619      	mov	r1, r3
 801dd78:	f240 7006 	movw	r0, #1798	; 0x706
 801dd7c:	f000 fc7e 	bl	801e67c <SUBGRF_WriteRegister>
    }
}
 801dd80:	bf00      	nop
 801dd82:	3710      	adds	r7, #16
 801dd84:	46bd      	mov	sp, r7
 801dd86:	bd80      	pop	{r7, pc}

0801dd88 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801dd88:	b580      	push	{r7, lr}
 801dd8a:	b082      	sub	sp, #8
 801dd8c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801dd8e:	f7ef fcec 	bl	800d76a <RBI_IsDCDC>
 801dd92:	4603      	mov	r3, r0
 801dd94:	2b01      	cmp	r3, #1
 801dd96:	d102      	bne.n	801dd9e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801dd98:	2301      	movs	r3, #1
 801dd9a:	71fb      	strb	r3, [r7, #7]
 801dd9c:	e001      	b.n	801dda2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801dd9e:	2300      	movs	r3, #0
 801dda0:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801dda2:	1dfb      	adds	r3, r7, #7
 801dda4:	2201      	movs	r2, #1
 801dda6:	4619      	mov	r1, r3
 801dda8:	2096      	movs	r0, #150	; 0x96
 801ddaa:	f000 fd17 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801ddae:	bf00      	nop
 801ddb0:	3708      	adds	r7, #8
 801ddb2:	46bd      	mov	sp, r7
 801ddb4:	bd80      	pop	{r7, pc}

0801ddb6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801ddb6:	b580      	push	{r7, lr}
 801ddb8:	b084      	sub	sp, #16
 801ddba:	af00      	add	r7, sp, #0
 801ddbc:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ddbe:	793b      	ldrb	r3, [r7, #4]
 801ddc0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801ddc4:	b2db      	uxtb	r3, r3
 801ddc6:	019b      	lsls	r3, r3, #6
 801ddc8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801ddca:	793b      	ldrb	r3, [r7, #4]
 801ddcc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801ddd0:	b2db      	uxtb	r3, r3
 801ddd2:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ddd4:	b25b      	sxtb	r3, r3
 801ddd6:	4313      	orrs	r3, r2
 801ddd8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801ddda:	793b      	ldrb	r3, [r7, #4]
 801dddc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801dde0:	b2db      	uxtb	r3, r3
 801dde2:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801dde4:	b25b      	sxtb	r3, r3
 801dde6:	4313      	orrs	r3, r2
 801dde8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801ddea:	793b      	ldrb	r3, [r7, #4]
 801ddec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801ddf0:	b2db      	uxtb	r3, r3
 801ddf2:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801ddf4:	b25b      	sxtb	r3, r3
 801ddf6:	4313      	orrs	r3, r2
 801ddf8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801ddfa:	793b      	ldrb	r3, [r7, #4]
 801ddfc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801de00:	b2db      	uxtb	r3, r3
 801de02:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801de04:	b25b      	sxtb	r3, r3
 801de06:	4313      	orrs	r3, r2
 801de08:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801de0a:	793b      	ldrb	r3, [r7, #4]
 801de0c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801de10:	b2db      	uxtb	r3, r3
 801de12:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801de14:	b25b      	sxtb	r3, r3
 801de16:	4313      	orrs	r3, r2
 801de18:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801de1a:	793b      	ldrb	r3, [r7, #4]
 801de1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801de20:	b2db      	uxtb	r3, r3
 801de22:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801de24:	4313      	orrs	r3, r2
 801de26:	b25b      	sxtb	r3, r3
 801de28:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801de2a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801de2c:	f107 030f 	add.w	r3, r7, #15
 801de30:	2201      	movs	r2, #1
 801de32:	4619      	mov	r1, r3
 801de34:	2089      	movs	r0, #137	; 0x89
 801de36:	f000 fcd1 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801de3a:	bf00      	nop
 801de3c:	3710      	adds	r7, #16
 801de3e:	46bd      	mov	sp, r7
 801de40:	bd80      	pop	{r7, pc}
	...

0801de44 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801de44:	b580      	push	{r7, lr}
 801de46:	b084      	sub	sp, #16
 801de48:	af00      	add	r7, sp, #0
 801de4a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	4a1d      	ldr	r2, [pc, #116]	; (801dec4 <SUBGRF_CalibrateImage+0x80>)
 801de50:	4293      	cmp	r3, r2
 801de52:	d904      	bls.n	801de5e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801de54:	23e1      	movs	r3, #225	; 0xe1
 801de56:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801de58:	23e9      	movs	r3, #233	; 0xe9
 801de5a:	737b      	strb	r3, [r7, #13]
 801de5c:	e027      	b.n	801deae <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801de5e:	687b      	ldr	r3, [r7, #4]
 801de60:	4a19      	ldr	r2, [pc, #100]	; (801dec8 <SUBGRF_CalibrateImage+0x84>)
 801de62:	4293      	cmp	r3, r2
 801de64:	d904      	bls.n	801de70 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801de66:	23d7      	movs	r3, #215	; 0xd7
 801de68:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801de6a:	23db      	movs	r3, #219	; 0xdb
 801de6c:	737b      	strb	r3, [r7, #13]
 801de6e:	e01e      	b.n	801deae <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	4a16      	ldr	r2, [pc, #88]	; (801decc <SUBGRF_CalibrateImage+0x88>)
 801de74:	4293      	cmp	r3, r2
 801de76:	d904      	bls.n	801de82 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801de78:	23c1      	movs	r3, #193	; 0xc1
 801de7a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801de7c:	23c5      	movs	r3, #197	; 0xc5
 801de7e:	737b      	strb	r3, [r7, #13]
 801de80:	e015      	b.n	801deae <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	4a12      	ldr	r2, [pc, #72]	; (801ded0 <SUBGRF_CalibrateImage+0x8c>)
 801de86:	4293      	cmp	r3, r2
 801de88:	d904      	bls.n	801de94 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801de8a:	2375      	movs	r3, #117	; 0x75
 801de8c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801de8e:	2381      	movs	r3, #129	; 0x81
 801de90:	737b      	strb	r3, [r7, #13]
 801de92:	e00c      	b.n	801deae <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	4a0f      	ldr	r2, [pc, #60]	; (801ded4 <SUBGRF_CalibrateImage+0x90>)
 801de98:	4293      	cmp	r3, r2
 801de9a:	d904      	bls.n	801dea6 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801de9c:	236b      	movs	r3, #107	; 0x6b
 801de9e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801dea0:	236f      	movs	r3, #111	; 0x6f
 801dea2:	737b      	strb	r3, [r7, #13]
 801dea4:	e003      	b.n	801deae <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801dea6:	2329      	movs	r3, #41	; 0x29
 801dea8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801deaa:	232b      	movs	r3, #43	; 0x2b
 801deac:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801deae:	f107 030c 	add.w	r3, r7, #12
 801deb2:	2202      	movs	r2, #2
 801deb4:	4619      	mov	r1, r3
 801deb6:	2098      	movs	r0, #152	; 0x98
 801deb8:	f000 fc90 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801debc:	bf00      	nop
 801debe:	3710      	adds	r7, #16
 801dec0:	46bd      	mov	sp, r7
 801dec2:	bd80      	pop	{r7, pc}
 801dec4:	35a4e900 	.word	0x35a4e900
 801dec8:	32a9f880 	.word	0x32a9f880
 801decc:	2de54480 	.word	0x2de54480
 801ded0:	1b6b0b00 	.word	0x1b6b0b00
 801ded4:	1954fc40 	.word	0x1954fc40

0801ded8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801ded8:	b590      	push	{r4, r7, lr}
 801deda:	b085      	sub	sp, #20
 801dedc:	af00      	add	r7, sp, #0
 801dede:	4604      	mov	r4, r0
 801dee0:	4608      	mov	r0, r1
 801dee2:	4611      	mov	r1, r2
 801dee4:	461a      	mov	r2, r3
 801dee6:	4623      	mov	r3, r4
 801dee8:	71fb      	strb	r3, [r7, #7]
 801deea:	4603      	mov	r3, r0
 801deec:	71bb      	strb	r3, [r7, #6]
 801deee:	460b      	mov	r3, r1
 801def0:	717b      	strb	r3, [r7, #5]
 801def2:	4613      	mov	r3, r2
 801def4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801def6:	79fb      	ldrb	r3, [r7, #7]
 801def8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801defa:	79bb      	ldrb	r3, [r7, #6]
 801defc:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801defe:	797b      	ldrb	r3, [r7, #5]
 801df00:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801df02:	793b      	ldrb	r3, [r7, #4]
 801df04:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801df06:	f107 030c 	add.w	r3, r7, #12
 801df0a:	2204      	movs	r2, #4
 801df0c:	4619      	mov	r1, r3
 801df0e:	2095      	movs	r0, #149	; 0x95
 801df10:	f000 fc64 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801df14:	bf00      	nop
 801df16:	3714      	adds	r7, #20
 801df18:	46bd      	mov	sp, r7
 801df1a:	bd90      	pop	{r4, r7, pc}

0801df1c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801df1c:	b590      	push	{r4, r7, lr}
 801df1e:	b085      	sub	sp, #20
 801df20:	af00      	add	r7, sp, #0
 801df22:	4604      	mov	r4, r0
 801df24:	4608      	mov	r0, r1
 801df26:	4611      	mov	r1, r2
 801df28:	461a      	mov	r2, r3
 801df2a:	4623      	mov	r3, r4
 801df2c:	80fb      	strh	r3, [r7, #6]
 801df2e:	4603      	mov	r3, r0
 801df30:	80bb      	strh	r3, [r7, #4]
 801df32:	460b      	mov	r3, r1
 801df34:	807b      	strh	r3, [r7, #2]
 801df36:	4613      	mov	r3, r2
 801df38:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801df3a:	88fb      	ldrh	r3, [r7, #6]
 801df3c:	0a1b      	lsrs	r3, r3, #8
 801df3e:	b29b      	uxth	r3, r3
 801df40:	b2db      	uxtb	r3, r3
 801df42:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801df44:	88fb      	ldrh	r3, [r7, #6]
 801df46:	b2db      	uxtb	r3, r3
 801df48:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801df4a:	88bb      	ldrh	r3, [r7, #4]
 801df4c:	0a1b      	lsrs	r3, r3, #8
 801df4e:	b29b      	uxth	r3, r3
 801df50:	b2db      	uxtb	r3, r3
 801df52:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801df54:	88bb      	ldrh	r3, [r7, #4]
 801df56:	b2db      	uxtb	r3, r3
 801df58:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801df5a:	887b      	ldrh	r3, [r7, #2]
 801df5c:	0a1b      	lsrs	r3, r3, #8
 801df5e:	b29b      	uxth	r3, r3
 801df60:	b2db      	uxtb	r3, r3
 801df62:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801df64:	887b      	ldrh	r3, [r7, #2]
 801df66:	b2db      	uxtb	r3, r3
 801df68:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801df6a:	883b      	ldrh	r3, [r7, #0]
 801df6c:	0a1b      	lsrs	r3, r3, #8
 801df6e:	b29b      	uxth	r3, r3
 801df70:	b2db      	uxtb	r3, r3
 801df72:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801df74:	883b      	ldrh	r3, [r7, #0]
 801df76:	b2db      	uxtb	r3, r3
 801df78:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801df7a:	f107 0308 	add.w	r3, r7, #8
 801df7e:	2208      	movs	r2, #8
 801df80:	4619      	mov	r1, r3
 801df82:	2008      	movs	r0, #8
 801df84:	f000 fc2a 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801df88:	bf00      	nop
 801df8a:	3714      	adds	r7, #20
 801df8c:	46bd      	mov	sp, r7
 801df8e:	bd90      	pop	{r4, r7, pc}

0801df90 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801df90:	b580      	push	{r7, lr}
 801df92:	b084      	sub	sp, #16
 801df94:	af00      	add	r7, sp, #0
 801df96:	4603      	mov	r3, r0
 801df98:	6039      	str	r1, [r7, #0]
 801df9a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801df9c:	79fb      	ldrb	r3, [r7, #7]
 801df9e:	f003 0307 	and.w	r3, r3, #7
 801dfa2:	b2db      	uxtb	r3, r3
 801dfa4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dfa6:	683b      	ldr	r3, [r7, #0]
 801dfa8:	0c1b      	lsrs	r3, r3, #16
 801dfaa:	b2db      	uxtb	r3, r3
 801dfac:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dfae:	683b      	ldr	r3, [r7, #0]
 801dfb0:	0a1b      	lsrs	r3, r3, #8
 801dfb2:	b2db      	uxtb	r3, r3
 801dfb4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801dfb6:	683b      	ldr	r3, [r7, #0]
 801dfb8:	b2db      	uxtb	r3, r3
 801dfba:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801dfbc:	f107 030c 	add.w	r3, r7, #12
 801dfc0:	2204      	movs	r2, #4
 801dfc2:	4619      	mov	r1, r3
 801dfc4:	2097      	movs	r0, #151	; 0x97
 801dfc6:	f000 fc09 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801dfca:	bf00      	nop
 801dfcc:	3710      	adds	r7, #16
 801dfce:	46bd      	mov	sp, r7
 801dfd0:	bd80      	pop	{r7, pc}
	...

0801dfd4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801dfd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801dfd8:	b084      	sub	sp, #16
 801dfda:	af00      	add	r7, sp, #0
 801dfdc:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801dfde:	2300      	movs	r3, #0
 801dfe0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801dfe2:	4b1d      	ldr	r3, [pc, #116]	; (801e058 <SUBGRF_SetRfFrequency+0x84>)
 801dfe4:	781b      	ldrb	r3, [r3, #0]
 801dfe6:	f083 0301 	eor.w	r3, r3, #1
 801dfea:	b2db      	uxtb	r3, r3
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d005      	beq.n	801dffc <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801dff0:	6878      	ldr	r0, [r7, #4]
 801dff2:	f7ff ff27 	bl	801de44 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801dff6:	4b18      	ldr	r3, [pc, #96]	; (801e058 <SUBGRF_SetRfFrequency+0x84>)
 801dff8:	2201      	movs	r2, #1
 801dffa:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	2200      	movs	r2, #0
 801e000:	461c      	mov	r4, r3
 801e002:	4615      	mov	r5, r2
 801e004:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801e008:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801e00c:	4a13      	ldr	r2, [pc, #76]	; (801e05c <SUBGRF_SetRfFrequency+0x88>)
 801e00e:	f04f 0300 	mov.w	r3, #0
 801e012:	4640      	mov	r0, r8
 801e014:	4649      	mov	r1, r9
 801e016:	f7e3 f8b5 	bl	8001184 <__aeabi_uldivmod>
 801e01a:	4602      	mov	r2, r0
 801e01c:	460b      	mov	r3, r1
 801e01e:	4613      	mov	r3, r2
 801e020:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801e022:	68fb      	ldr	r3, [r7, #12]
 801e024:	0e1b      	lsrs	r3, r3, #24
 801e026:	b2db      	uxtb	r3, r3
 801e028:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801e02a:	68fb      	ldr	r3, [r7, #12]
 801e02c:	0c1b      	lsrs	r3, r3, #16
 801e02e:	b2db      	uxtb	r3, r3
 801e030:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801e032:	68fb      	ldr	r3, [r7, #12]
 801e034:	0a1b      	lsrs	r3, r3, #8
 801e036:	b2db      	uxtb	r3, r3
 801e038:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801e03a:	68fb      	ldr	r3, [r7, #12]
 801e03c:	b2db      	uxtb	r3, r3
 801e03e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801e040:	f107 0308 	add.w	r3, r7, #8
 801e044:	2204      	movs	r2, #4
 801e046:	4619      	mov	r1, r3
 801e048:	2086      	movs	r0, #134	; 0x86
 801e04a:	f000 fbc7 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801e04e:	bf00      	nop
 801e050:	3710      	adds	r7, #16
 801e052:	46bd      	mov	sp, r7
 801e054:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801e058:	20001c74 	.word	0x20001c74
 801e05c:	01e84800 	.word	0x01e84800

0801e060 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801e060:	b580      	push	{r7, lr}
 801e062:	b082      	sub	sp, #8
 801e064:	af00      	add	r7, sp, #0
 801e066:	4603      	mov	r3, r0
 801e068:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801e06a:	79fa      	ldrb	r2, [r7, #7]
 801e06c:	4b09      	ldr	r3, [pc, #36]	; (801e094 <SUBGRF_SetPacketType+0x34>)
 801e06e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801e070:	79fb      	ldrb	r3, [r7, #7]
 801e072:	2b00      	cmp	r3, #0
 801e074:	d104      	bne.n	801e080 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801e076:	2100      	movs	r1, #0
 801e078:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801e07c:	f000 fafe 	bl	801e67c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801e080:	1dfb      	adds	r3, r7, #7
 801e082:	2201      	movs	r2, #1
 801e084:	4619      	mov	r1, r3
 801e086:	208a      	movs	r0, #138	; 0x8a
 801e088:	f000 fba8 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801e08c:	bf00      	nop
 801e08e:	3708      	adds	r7, #8
 801e090:	46bd      	mov	sp, r7
 801e092:	bd80      	pop	{r7, pc}
 801e094:	20001c6d 	.word	0x20001c6d

0801e098 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801e098:	b480      	push	{r7}
 801e09a:	af00      	add	r7, sp, #0
    return PacketType;
 801e09c:	4b02      	ldr	r3, [pc, #8]	; (801e0a8 <SUBGRF_GetPacketType+0x10>)
 801e09e:	781b      	ldrb	r3, [r3, #0]
}
 801e0a0:	4618      	mov	r0, r3
 801e0a2:	46bd      	mov	sp, r7
 801e0a4:	bc80      	pop	{r7}
 801e0a6:	4770      	bx	lr
 801e0a8:	20001c6d 	.word	0x20001c6d

0801e0ac <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801e0ac:	b580      	push	{r7, lr}
 801e0ae:	b084      	sub	sp, #16
 801e0b0:	af00      	add	r7, sp, #0
 801e0b2:	4603      	mov	r3, r0
 801e0b4:	71fb      	strb	r3, [r7, #7]
 801e0b6:	460b      	mov	r3, r1
 801e0b8:	71bb      	strb	r3, [r7, #6]
 801e0ba:	4613      	mov	r3, r2
 801e0bc:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801e0be:	79fb      	ldrb	r3, [r7, #7]
 801e0c0:	2b01      	cmp	r3, #1
 801e0c2:	d149      	bne.n	801e158 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801e0c4:	2000      	movs	r0, #0
 801e0c6:	f7ef fb57 	bl	800d778 <RBI_GetRFOMaxPowerConfig>
 801e0ca:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801e0cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e0d0:	68fa      	ldr	r2, [r7, #12]
 801e0d2:	429a      	cmp	r2, r3
 801e0d4:	da01      	bge.n	801e0da <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801e0d6:	68fb      	ldr	r3, [r7, #12]
 801e0d8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801e0da:	68fb      	ldr	r3, [r7, #12]
 801e0dc:	2b0e      	cmp	r3, #14
 801e0de:	d10e      	bne.n	801e0fe <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801e0e0:	2301      	movs	r3, #1
 801e0e2:	2201      	movs	r2, #1
 801e0e4:	2100      	movs	r1, #0
 801e0e6:	2004      	movs	r0, #4
 801e0e8:	f7ff fef6 	bl	801ded8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801e0ec:	79ba      	ldrb	r2, [r7, #6]
 801e0ee:	68fb      	ldr	r3, [r7, #12]
 801e0f0:	b2db      	uxtb	r3, r3
 801e0f2:	1ad3      	subs	r3, r2, r3
 801e0f4:	b2db      	uxtb	r3, r3
 801e0f6:	330e      	adds	r3, #14
 801e0f8:	b2db      	uxtb	r3, r3
 801e0fa:	71bb      	strb	r3, [r7, #6]
 801e0fc:	e01f      	b.n	801e13e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801e0fe:	68fb      	ldr	r3, [r7, #12]
 801e100:	2b0a      	cmp	r3, #10
 801e102:	d10e      	bne.n	801e122 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801e104:	2301      	movs	r3, #1
 801e106:	2201      	movs	r2, #1
 801e108:	2100      	movs	r1, #0
 801e10a:	2001      	movs	r0, #1
 801e10c:	f7ff fee4 	bl	801ded8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801e110:	79ba      	ldrb	r2, [r7, #6]
 801e112:	68fb      	ldr	r3, [r7, #12]
 801e114:	b2db      	uxtb	r3, r3
 801e116:	1ad3      	subs	r3, r2, r3
 801e118:	b2db      	uxtb	r3, r3
 801e11a:	330d      	adds	r3, #13
 801e11c:	b2db      	uxtb	r3, r3
 801e11e:	71bb      	strb	r3, [r7, #6]
 801e120:	e00d      	b.n	801e13e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801e122:	2301      	movs	r3, #1
 801e124:	2201      	movs	r2, #1
 801e126:	2100      	movs	r1, #0
 801e128:	2007      	movs	r0, #7
 801e12a:	f7ff fed5 	bl	801ded8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801e12e:	79ba      	ldrb	r2, [r7, #6]
 801e130:	68fb      	ldr	r3, [r7, #12]
 801e132:	b2db      	uxtb	r3, r3
 801e134:	1ad3      	subs	r3, r2, r3
 801e136:	b2db      	uxtb	r3, r3
 801e138:	330e      	adds	r3, #14
 801e13a:	b2db      	uxtb	r3, r3
 801e13c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801e13e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e142:	f113 0f11 	cmn.w	r3, #17
 801e146:	da01      	bge.n	801e14c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801e148:	23ef      	movs	r3, #239	; 0xef
 801e14a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801e14c:	2118      	movs	r1, #24
 801e14e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801e152:	f000 fa93 	bl	801e67c <SUBGRF_WriteRegister>
 801e156:	e067      	b.n	801e228 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801e158:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801e15c:	f000 faa2 	bl	801e6a4 <SUBGRF_ReadRegister>
 801e160:	4603      	mov	r3, r0
 801e162:	f043 031e 	orr.w	r3, r3, #30
 801e166:	b2db      	uxtb	r3, r3
 801e168:	4619      	mov	r1, r3
 801e16a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801e16e:	f000 fa85 	bl	801e67c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801e172:	2001      	movs	r0, #1
 801e174:	f7ef fb00 	bl	800d778 <RBI_GetRFOMaxPowerConfig>
 801e178:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801e17a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e17e:	68fa      	ldr	r2, [r7, #12]
 801e180:	429a      	cmp	r2, r3
 801e182:	da01      	bge.n	801e188 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801e184:	68fb      	ldr	r3, [r7, #12]
 801e186:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801e188:	68fb      	ldr	r3, [r7, #12]
 801e18a:	2b14      	cmp	r3, #20
 801e18c:	d10e      	bne.n	801e1ac <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801e18e:	2301      	movs	r3, #1
 801e190:	2200      	movs	r2, #0
 801e192:	2105      	movs	r1, #5
 801e194:	2003      	movs	r0, #3
 801e196:	f7ff fe9f 	bl	801ded8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801e19a:	79ba      	ldrb	r2, [r7, #6]
 801e19c:	68fb      	ldr	r3, [r7, #12]
 801e19e:	b2db      	uxtb	r3, r3
 801e1a0:	1ad3      	subs	r3, r2, r3
 801e1a2:	b2db      	uxtb	r3, r3
 801e1a4:	3316      	adds	r3, #22
 801e1a6:	b2db      	uxtb	r3, r3
 801e1a8:	71bb      	strb	r3, [r7, #6]
 801e1aa:	e031      	b.n	801e210 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801e1ac:	68fb      	ldr	r3, [r7, #12]
 801e1ae:	2b11      	cmp	r3, #17
 801e1b0:	d10e      	bne.n	801e1d0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801e1b2:	2301      	movs	r3, #1
 801e1b4:	2200      	movs	r2, #0
 801e1b6:	2103      	movs	r1, #3
 801e1b8:	2002      	movs	r0, #2
 801e1ba:	f7ff fe8d 	bl	801ded8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801e1be:	79ba      	ldrb	r2, [r7, #6]
 801e1c0:	68fb      	ldr	r3, [r7, #12]
 801e1c2:	b2db      	uxtb	r3, r3
 801e1c4:	1ad3      	subs	r3, r2, r3
 801e1c6:	b2db      	uxtb	r3, r3
 801e1c8:	3316      	adds	r3, #22
 801e1ca:	b2db      	uxtb	r3, r3
 801e1cc:	71bb      	strb	r3, [r7, #6]
 801e1ce:	e01f      	b.n	801e210 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801e1d0:	68fb      	ldr	r3, [r7, #12]
 801e1d2:	2b0e      	cmp	r3, #14
 801e1d4:	d10e      	bne.n	801e1f4 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801e1d6:	2301      	movs	r3, #1
 801e1d8:	2200      	movs	r2, #0
 801e1da:	2102      	movs	r1, #2
 801e1dc:	2002      	movs	r0, #2
 801e1de:	f7ff fe7b 	bl	801ded8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801e1e2:	79ba      	ldrb	r2, [r7, #6]
 801e1e4:	68fb      	ldr	r3, [r7, #12]
 801e1e6:	b2db      	uxtb	r3, r3
 801e1e8:	1ad3      	subs	r3, r2, r3
 801e1ea:	b2db      	uxtb	r3, r3
 801e1ec:	330e      	adds	r3, #14
 801e1ee:	b2db      	uxtb	r3, r3
 801e1f0:	71bb      	strb	r3, [r7, #6]
 801e1f2:	e00d      	b.n	801e210 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801e1f4:	2301      	movs	r3, #1
 801e1f6:	2200      	movs	r2, #0
 801e1f8:	2107      	movs	r1, #7
 801e1fa:	2004      	movs	r0, #4
 801e1fc:	f7ff fe6c 	bl	801ded8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801e200:	79ba      	ldrb	r2, [r7, #6]
 801e202:	68fb      	ldr	r3, [r7, #12]
 801e204:	b2db      	uxtb	r3, r3
 801e206:	1ad3      	subs	r3, r2, r3
 801e208:	b2db      	uxtb	r3, r3
 801e20a:	3316      	adds	r3, #22
 801e20c:	b2db      	uxtb	r3, r3
 801e20e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801e210:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e214:	f113 0f09 	cmn.w	r3, #9
 801e218:	da01      	bge.n	801e21e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801e21a:	23f7      	movs	r3, #247	; 0xf7
 801e21c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801e21e:	2138      	movs	r1, #56	; 0x38
 801e220:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801e224:	f000 fa2a 	bl	801e67c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801e228:	79bb      	ldrb	r3, [r7, #6]
 801e22a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801e22c:	797b      	ldrb	r3, [r7, #5]
 801e22e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801e230:	f107 0308 	add.w	r3, r7, #8
 801e234:	2202      	movs	r2, #2
 801e236:	4619      	mov	r1, r3
 801e238:	208e      	movs	r0, #142	; 0x8e
 801e23a:	f000 facf 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801e23e:	bf00      	nop
 801e240:	3710      	adds	r7, #16
 801e242:	46bd      	mov	sp, r7
 801e244:	bd80      	pop	{r7, pc}
	...

0801e248 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801e248:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801e24c:	b086      	sub	sp, #24
 801e24e:	af00      	add	r7, sp, #0
 801e250:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801e252:	2300      	movs	r3, #0
 801e254:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801e256:	4a61      	ldr	r2, [pc, #388]	; (801e3dc <SUBGRF_SetModulationParams+0x194>)
 801e258:	f107 0308 	add.w	r3, r7, #8
 801e25c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e260:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801e264:	687b      	ldr	r3, [r7, #4]
 801e266:	781a      	ldrb	r2, [r3, #0]
 801e268:	4b5d      	ldr	r3, [pc, #372]	; (801e3e0 <SUBGRF_SetModulationParams+0x198>)
 801e26a:	781b      	ldrb	r3, [r3, #0]
 801e26c:	429a      	cmp	r2, r3
 801e26e:	d004      	beq.n	801e27a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801e270:	687b      	ldr	r3, [r7, #4]
 801e272:	781b      	ldrb	r3, [r3, #0]
 801e274:	4618      	mov	r0, r3
 801e276:	f7ff fef3 	bl	801e060 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801e27a:	687b      	ldr	r3, [r7, #4]
 801e27c:	781b      	ldrb	r3, [r3, #0]
 801e27e:	2b03      	cmp	r3, #3
 801e280:	f200 80a5 	bhi.w	801e3ce <SUBGRF_SetModulationParams+0x186>
 801e284:	a201      	add	r2, pc, #4	; (adr r2, 801e28c <SUBGRF_SetModulationParams+0x44>)
 801e286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e28a:	bf00      	nop
 801e28c:	0801e29d 	.word	0x0801e29d
 801e290:	0801e35d 	.word	0x0801e35d
 801e294:	0801e31f 	.word	0x0801e31f
 801e298:	0801e38b 	.word	0x0801e38b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801e29c:	2308      	movs	r3, #8
 801e29e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	685b      	ldr	r3, [r3, #4]
 801e2a4:	4a4f      	ldr	r2, [pc, #316]	; (801e3e4 <SUBGRF_SetModulationParams+0x19c>)
 801e2a6:	fbb2 f3f3 	udiv	r3, r2, r3
 801e2aa:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e2ac:	697b      	ldr	r3, [r7, #20]
 801e2ae:	0c1b      	lsrs	r3, r3, #16
 801e2b0:	b2db      	uxtb	r3, r3
 801e2b2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e2b4:	697b      	ldr	r3, [r7, #20]
 801e2b6:	0a1b      	lsrs	r3, r3, #8
 801e2b8:	b2db      	uxtb	r3, r3
 801e2ba:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e2bc:	697b      	ldr	r3, [r7, #20]
 801e2be:	b2db      	uxtb	r3, r3
 801e2c0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801e2c2:	687b      	ldr	r3, [r7, #4]
 801e2c4:	7b1b      	ldrb	r3, [r3, #12]
 801e2c6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801e2c8:	687b      	ldr	r3, [r7, #4]
 801e2ca:	7b5b      	ldrb	r3, [r3, #13]
 801e2cc:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801e2ce:	687b      	ldr	r3, [r7, #4]
 801e2d0:	689b      	ldr	r3, [r3, #8]
 801e2d2:	2200      	movs	r2, #0
 801e2d4:	461c      	mov	r4, r3
 801e2d6:	4615      	mov	r5, r2
 801e2d8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801e2dc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801e2e0:	4a41      	ldr	r2, [pc, #260]	; (801e3e8 <SUBGRF_SetModulationParams+0x1a0>)
 801e2e2:	f04f 0300 	mov.w	r3, #0
 801e2e6:	4640      	mov	r0, r8
 801e2e8:	4649      	mov	r1, r9
 801e2ea:	f7e2 ff4b 	bl	8001184 <__aeabi_uldivmod>
 801e2ee:	4602      	mov	r2, r0
 801e2f0:	460b      	mov	r3, r1
 801e2f2:	4613      	mov	r3, r2
 801e2f4:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801e2f6:	697b      	ldr	r3, [r7, #20]
 801e2f8:	0c1b      	lsrs	r3, r3, #16
 801e2fa:	b2db      	uxtb	r3, r3
 801e2fc:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801e2fe:	697b      	ldr	r3, [r7, #20]
 801e300:	0a1b      	lsrs	r3, r3, #8
 801e302:	b2db      	uxtb	r3, r3
 801e304:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801e306:	697b      	ldr	r3, [r7, #20]
 801e308:	b2db      	uxtb	r3, r3
 801e30a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e30c:	7cfb      	ldrb	r3, [r7, #19]
 801e30e:	b29a      	uxth	r2, r3
 801e310:	f107 0308 	add.w	r3, r7, #8
 801e314:	4619      	mov	r1, r3
 801e316:	208b      	movs	r0, #139	; 0x8b
 801e318:	f000 fa60 	bl	801e7dc <SUBGRF_WriteCommand>
        break;
 801e31c:	e058      	b.n	801e3d0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801e31e:	2304      	movs	r3, #4
 801e320:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801e322:	687b      	ldr	r3, [r7, #4]
 801e324:	691b      	ldr	r3, [r3, #16]
 801e326:	4a2f      	ldr	r2, [pc, #188]	; (801e3e4 <SUBGRF_SetModulationParams+0x19c>)
 801e328:	fbb2 f3f3 	udiv	r3, r2, r3
 801e32c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e32e:	697b      	ldr	r3, [r7, #20]
 801e330:	0c1b      	lsrs	r3, r3, #16
 801e332:	b2db      	uxtb	r3, r3
 801e334:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e336:	697b      	ldr	r3, [r7, #20]
 801e338:	0a1b      	lsrs	r3, r3, #8
 801e33a:	b2db      	uxtb	r3, r3
 801e33c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e33e:	697b      	ldr	r3, [r7, #20]
 801e340:	b2db      	uxtb	r3, r3
 801e342:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801e344:	687b      	ldr	r3, [r7, #4]
 801e346:	7d1b      	ldrb	r3, [r3, #20]
 801e348:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e34a:	7cfb      	ldrb	r3, [r7, #19]
 801e34c:	b29a      	uxth	r2, r3
 801e34e:	f107 0308 	add.w	r3, r7, #8
 801e352:	4619      	mov	r1, r3
 801e354:	208b      	movs	r0, #139	; 0x8b
 801e356:	f000 fa41 	bl	801e7dc <SUBGRF_WriteCommand>
        break;
 801e35a:	e039      	b.n	801e3d0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801e35c:	2304      	movs	r3, #4
 801e35e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	7e1b      	ldrb	r3, [r3, #24]
 801e364:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	7e5b      	ldrb	r3, [r3, #25]
 801e36a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	7e9b      	ldrb	r3, [r3, #26]
 801e370:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801e372:	687b      	ldr	r3, [r7, #4]
 801e374:	7edb      	ldrb	r3, [r3, #27]
 801e376:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e378:	7cfb      	ldrb	r3, [r7, #19]
 801e37a:	b29a      	uxth	r2, r3
 801e37c:	f107 0308 	add.w	r3, r7, #8
 801e380:	4619      	mov	r1, r3
 801e382:	208b      	movs	r0, #139	; 0x8b
 801e384:	f000 fa2a 	bl	801e7dc <SUBGRF_WriteCommand>

        break;
 801e388:	e022      	b.n	801e3d0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801e38a:	2305      	movs	r3, #5
 801e38c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801e38e:	687b      	ldr	r3, [r7, #4]
 801e390:	685b      	ldr	r3, [r3, #4]
 801e392:	4a14      	ldr	r2, [pc, #80]	; (801e3e4 <SUBGRF_SetModulationParams+0x19c>)
 801e394:	fbb2 f3f3 	udiv	r3, r2, r3
 801e398:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e39a:	697b      	ldr	r3, [r7, #20]
 801e39c:	0c1b      	lsrs	r3, r3, #16
 801e39e:	b2db      	uxtb	r3, r3
 801e3a0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e3a2:	697b      	ldr	r3, [r7, #20]
 801e3a4:	0a1b      	lsrs	r3, r3, #8
 801e3a6:	b2db      	uxtb	r3, r3
 801e3a8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e3aa:	697b      	ldr	r3, [r7, #20]
 801e3ac:	b2db      	uxtb	r3, r3
 801e3ae:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	7b1b      	ldrb	r3, [r3, #12]
 801e3b4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	7b5b      	ldrb	r3, [r3, #13]
 801e3ba:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e3bc:	7cfb      	ldrb	r3, [r7, #19]
 801e3be:	b29a      	uxth	r2, r3
 801e3c0:	f107 0308 	add.w	r3, r7, #8
 801e3c4:	4619      	mov	r1, r3
 801e3c6:	208b      	movs	r0, #139	; 0x8b
 801e3c8:	f000 fa08 	bl	801e7dc <SUBGRF_WriteCommand>
        break;
 801e3cc:	e000      	b.n	801e3d0 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801e3ce:	bf00      	nop
    }
}
 801e3d0:	bf00      	nop
 801e3d2:	3718      	adds	r7, #24
 801e3d4:	46bd      	mov	sp, r7
 801e3d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801e3da:	bf00      	nop
 801e3dc:	080219a8 	.word	0x080219a8
 801e3e0:	20001c6d 	.word	0x20001c6d
 801e3e4:	3d090000 	.word	0x3d090000
 801e3e8:	01e84800 	.word	0x01e84800

0801e3ec <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801e3ec:	b580      	push	{r7, lr}
 801e3ee:	b086      	sub	sp, #24
 801e3f0:	af00      	add	r7, sp, #0
 801e3f2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801e3f4:	2300      	movs	r3, #0
 801e3f6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801e3f8:	4a48      	ldr	r2, [pc, #288]	; (801e51c <SUBGRF_SetPacketParams+0x130>)
 801e3fa:	f107 030c 	add.w	r3, r7, #12
 801e3fe:	ca07      	ldmia	r2, {r0, r1, r2}
 801e400:	c303      	stmia	r3!, {r0, r1}
 801e402:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	781a      	ldrb	r2, [r3, #0]
 801e408:	4b45      	ldr	r3, [pc, #276]	; (801e520 <SUBGRF_SetPacketParams+0x134>)
 801e40a:	781b      	ldrb	r3, [r3, #0]
 801e40c:	429a      	cmp	r2, r3
 801e40e:	d004      	beq.n	801e41a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801e410:	687b      	ldr	r3, [r7, #4]
 801e412:	781b      	ldrb	r3, [r3, #0]
 801e414:	4618      	mov	r0, r3
 801e416:	f7ff fe23 	bl	801e060 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	781b      	ldrb	r3, [r3, #0]
 801e41e:	2b03      	cmp	r3, #3
 801e420:	d878      	bhi.n	801e514 <SUBGRF_SetPacketParams+0x128>
 801e422:	a201      	add	r2, pc, #4	; (adr r2, 801e428 <SUBGRF_SetPacketParams+0x3c>)
 801e424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e428:	0801e439 	.word	0x0801e439
 801e42c:	0801e4c9 	.word	0x0801e4c9
 801e430:	0801e4bd 	.word	0x0801e4bd
 801e434:	0801e439 	.word	0x0801e439
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	7a5b      	ldrb	r3, [r3, #9]
 801e43c:	2bf1      	cmp	r3, #241	; 0xf1
 801e43e:	d10a      	bne.n	801e456 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801e440:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801e444:	f7ff faaa 	bl	801d99c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801e448:	f248 0005 	movw	r0, #32773	; 0x8005
 801e44c:	f7ff fac6 	bl	801d9dc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801e450:	2302      	movs	r3, #2
 801e452:	75bb      	strb	r3, [r7, #22]
 801e454:	e011      	b.n	801e47a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	7a5b      	ldrb	r3, [r3, #9]
 801e45a:	2bf2      	cmp	r3, #242	; 0xf2
 801e45c:	d10a      	bne.n	801e474 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801e45e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801e462:	f7ff fa9b 	bl	801d99c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801e466:	f241 0021 	movw	r0, #4129	; 0x1021
 801e46a:	f7ff fab7 	bl	801d9dc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801e46e:	2306      	movs	r3, #6
 801e470:	75bb      	strb	r3, [r7, #22]
 801e472:	e002      	b.n	801e47a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801e474:	687b      	ldr	r3, [r7, #4]
 801e476:	7a5b      	ldrb	r3, [r3, #9]
 801e478:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801e47a:	2309      	movs	r3, #9
 801e47c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801e47e:	687b      	ldr	r3, [r7, #4]
 801e480:	885b      	ldrh	r3, [r3, #2]
 801e482:	0a1b      	lsrs	r3, r3, #8
 801e484:	b29b      	uxth	r3, r3
 801e486:	b2db      	uxtb	r3, r3
 801e488:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	885b      	ldrh	r3, [r3, #2]
 801e48e:	b2db      	uxtb	r3, r3
 801e490:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	791b      	ldrb	r3, [r3, #4]
 801e496:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801e498:	687b      	ldr	r3, [r7, #4]
 801e49a:	795b      	ldrb	r3, [r3, #5]
 801e49c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	799b      	ldrb	r3, [r3, #6]
 801e4a2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801e4a4:	687b      	ldr	r3, [r7, #4]
 801e4a6:	79db      	ldrb	r3, [r3, #7]
 801e4a8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	7a1b      	ldrb	r3, [r3, #8]
 801e4ae:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801e4b0:	7dbb      	ldrb	r3, [r7, #22]
 801e4b2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	7a9b      	ldrb	r3, [r3, #10]
 801e4b8:	753b      	strb	r3, [r7, #20]
        break;
 801e4ba:	e022      	b.n	801e502 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801e4bc:	2301      	movs	r3, #1
 801e4be:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	7b1b      	ldrb	r3, [r3, #12]
 801e4c4:	733b      	strb	r3, [r7, #12]
        break;
 801e4c6:	e01c      	b.n	801e502 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801e4c8:	2306      	movs	r3, #6
 801e4ca:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	89db      	ldrh	r3, [r3, #14]
 801e4d0:	0a1b      	lsrs	r3, r3, #8
 801e4d2:	b29b      	uxth	r3, r3
 801e4d4:	b2db      	uxtb	r3, r3
 801e4d6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	89db      	ldrh	r3, [r3, #14]
 801e4dc:	b2db      	uxtb	r3, r3
 801e4de:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	7c1a      	ldrb	r2, [r3, #16]
 801e4e4:	4b0f      	ldr	r3, [pc, #60]	; (801e524 <SUBGRF_SetPacketParams+0x138>)
 801e4e6:	4611      	mov	r1, r2
 801e4e8:	7019      	strb	r1, [r3, #0]
 801e4ea:	4613      	mov	r3, r2
 801e4ec:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801e4ee:	687b      	ldr	r3, [r7, #4]
 801e4f0:	7c5b      	ldrb	r3, [r3, #17]
 801e4f2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801e4f4:	687b      	ldr	r3, [r7, #4]
 801e4f6:	7c9b      	ldrb	r3, [r3, #18]
 801e4f8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801e4fa:	687b      	ldr	r3, [r7, #4]
 801e4fc:	7cdb      	ldrb	r3, [r3, #19]
 801e4fe:	747b      	strb	r3, [r7, #17]
        break;
 801e500:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801e502:	7dfb      	ldrb	r3, [r7, #23]
 801e504:	b29a      	uxth	r2, r3
 801e506:	f107 030c 	add.w	r3, r7, #12
 801e50a:	4619      	mov	r1, r3
 801e50c:	208c      	movs	r0, #140	; 0x8c
 801e50e:	f000 f965 	bl	801e7dc <SUBGRF_WriteCommand>
 801e512:	e000      	b.n	801e516 <SUBGRF_SetPacketParams+0x12a>
        return;
 801e514:	bf00      	nop
}
 801e516:	3718      	adds	r7, #24
 801e518:	46bd      	mov	sp, r7
 801e51a:	bd80      	pop	{r7, pc}
 801e51c:	080219b0 	.word	0x080219b0
 801e520:	20001c6d 	.word	0x20001c6d
 801e524:	20001c6e 	.word	0x20001c6e

0801e528 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801e528:	b580      	push	{r7, lr}
 801e52a:	b084      	sub	sp, #16
 801e52c:	af00      	add	r7, sp, #0
 801e52e:	4603      	mov	r3, r0
 801e530:	460a      	mov	r2, r1
 801e532:	71fb      	strb	r3, [r7, #7]
 801e534:	4613      	mov	r3, r2
 801e536:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801e538:	79fb      	ldrb	r3, [r7, #7]
 801e53a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801e53c:	79bb      	ldrb	r3, [r7, #6]
 801e53e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801e540:	f107 030c 	add.w	r3, r7, #12
 801e544:	2202      	movs	r2, #2
 801e546:	4619      	mov	r1, r3
 801e548:	208f      	movs	r0, #143	; 0x8f
 801e54a:	f000 f947 	bl	801e7dc <SUBGRF_WriteCommand>
}
 801e54e:	bf00      	nop
 801e550:	3710      	adds	r7, #16
 801e552:	46bd      	mov	sp, r7
 801e554:	bd80      	pop	{r7, pc}

0801e556 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801e556:	b580      	push	{r7, lr}
 801e558:	b082      	sub	sp, #8
 801e55a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801e55c:	2300      	movs	r3, #0
 801e55e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801e560:	1d3b      	adds	r3, r7, #4
 801e562:	2201      	movs	r2, #1
 801e564:	4619      	mov	r1, r3
 801e566:	2015      	movs	r0, #21
 801e568:	f000 f95a 	bl	801e820 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801e56c:	793b      	ldrb	r3, [r7, #4]
 801e56e:	425b      	negs	r3, r3
 801e570:	105b      	asrs	r3, r3, #1
 801e572:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801e574:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801e578:	4618      	mov	r0, r3
 801e57a:	3708      	adds	r7, #8
 801e57c:	46bd      	mov	sp, r7
 801e57e:	bd80      	pop	{r7, pc}

0801e580 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801e580:	b580      	push	{r7, lr}
 801e582:	b084      	sub	sp, #16
 801e584:	af00      	add	r7, sp, #0
 801e586:	6078      	str	r0, [r7, #4]
 801e588:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801e58a:	f107 030c 	add.w	r3, r7, #12
 801e58e:	2202      	movs	r2, #2
 801e590:	4619      	mov	r1, r3
 801e592:	2013      	movs	r0, #19
 801e594:	f000 f944 	bl	801e820 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801e598:	f7ff fd7e 	bl	801e098 <SUBGRF_GetPacketType>
 801e59c:	4603      	mov	r3, r0
 801e59e:	2b01      	cmp	r3, #1
 801e5a0:	d10d      	bne.n	801e5be <SUBGRF_GetRxBufferStatus+0x3e>
 801e5a2:	4b0c      	ldr	r3, [pc, #48]	; (801e5d4 <SUBGRF_GetRxBufferStatus+0x54>)
 801e5a4:	781b      	ldrb	r3, [r3, #0]
 801e5a6:	b2db      	uxtb	r3, r3
 801e5a8:	2b01      	cmp	r3, #1
 801e5aa:	d108      	bne.n	801e5be <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801e5ac:	f240 7002 	movw	r0, #1794	; 0x702
 801e5b0:	f000 f878 	bl	801e6a4 <SUBGRF_ReadRegister>
 801e5b4:	4603      	mov	r3, r0
 801e5b6:	461a      	mov	r2, r3
 801e5b8:	687b      	ldr	r3, [r7, #4]
 801e5ba:	701a      	strb	r2, [r3, #0]
 801e5bc:	e002      	b.n	801e5c4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801e5be:	7b3a      	ldrb	r2, [r7, #12]
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801e5c4:	7b7a      	ldrb	r2, [r7, #13]
 801e5c6:	683b      	ldr	r3, [r7, #0]
 801e5c8:	701a      	strb	r2, [r3, #0]
}
 801e5ca:	bf00      	nop
 801e5cc:	3710      	adds	r7, #16
 801e5ce:	46bd      	mov	sp, r7
 801e5d0:	bd80      	pop	{r7, pc}
 801e5d2:	bf00      	nop
 801e5d4:	20001c6e 	.word	0x20001c6e

0801e5d8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801e5d8:	b580      	push	{r7, lr}
 801e5da:	b084      	sub	sp, #16
 801e5dc:	af00      	add	r7, sp, #0
 801e5de:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801e5e0:	f107 030c 	add.w	r3, r7, #12
 801e5e4:	2203      	movs	r2, #3
 801e5e6:	4619      	mov	r1, r3
 801e5e8:	2014      	movs	r0, #20
 801e5ea:	f000 f919 	bl	801e820 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801e5ee:	f7ff fd53 	bl	801e098 <SUBGRF_GetPacketType>
 801e5f2:	4603      	mov	r3, r0
 801e5f4:	461a      	mov	r2, r3
 801e5f6:	687b      	ldr	r3, [r7, #4]
 801e5f8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	781b      	ldrb	r3, [r3, #0]
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d002      	beq.n	801e608 <SUBGRF_GetPacketStatus+0x30>
 801e602:	2b01      	cmp	r3, #1
 801e604:	d013      	beq.n	801e62e <SUBGRF_GetPacketStatus+0x56>
 801e606:	e02a      	b.n	801e65e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801e608:	7b3a      	ldrb	r2, [r7, #12]
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801e60e:	7b7b      	ldrb	r3, [r7, #13]
 801e610:	425b      	negs	r3, r3
 801e612:	105b      	asrs	r3, r3, #1
 801e614:	b25a      	sxtb	r2, r3
 801e616:	687b      	ldr	r3, [r7, #4]
 801e618:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801e61a:	7bbb      	ldrb	r3, [r7, #14]
 801e61c:	425b      	negs	r3, r3
 801e61e:	105b      	asrs	r3, r3, #1
 801e620:	b25a      	sxtb	r2, r3
 801e622:	687b      	ldr	r3, [r7, #4]
 801e624:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	2200      	movs	r2, #0
 801e62a:	609a      	str	r2, [r3, #8]
            break;
 801e62c:	e020      	b.n	801e670 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801e62e:	7b3b      	ldrb	r3, [r7, #12]
 801e630:	425b      	negs	r3, r3
 801e632:	105b      	asrs	r3, r3, #1
 801e634:	b25a      	sxtb	r2, r3
 801e636:	687b      	ldr	r3, [r7, #4]
 801e638:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801e63a:	7b7b      	ldrb	r3, [r7, #13]
 801e63c:	b25b      	sxtb	r3, r3
 801e63e:	3302      	adds	r3, #2
 801e640:	109b      	asrs	r3, r3, #2
 801e642:	b25a      	sxtb	r2, r3
 801e644:	687b      	ldr	r3, [r7, #4]
 801e646:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801e648:	7bbb      	ldrb	r3, [r7, #14]
 801e64a:	425b      	negs	r3, r3
 801e64c:	105b      	asrs	r3, r3, #1
 801e64e:	b25a      	sxtb	r2, r3
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801e654:	4b08      	ldr	r3, [pc, #32]	; (801e678 <SUBGRF_GetPacketStatus+0xa0>)
 801e656:	681a      	ldr	r2, [r3, #0]
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	611a      	str	r2, [r3, #16]
            break;
 801e65c:	e008      	b.n	801e670 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801e65e:	2214      	movs	r2, #20
 801e660:	2100      	movs	r1, #0
 801e662:	6878      	ldr	r0, [r7, #4]
 801e664:	f000 fbcd 	bl	801ee02 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	220f      	movs	r2, #15
 801e66c:	701a      	strb	r2, [r3, #0]
            break;
 801e66e:	bf00      	nop
    }
}
 801e670:	bf00      	nop
 801e672:	3710      	adds	r7, #16
 801e674:	46bd      	mov	sp, r7
 801e676:	bd80      	pop	{r7, pc}
 801e678:	20001c70 	.word	0x20001c70

0801e67c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801e67c:	b580      	push	{r7, lr}
 801e67e:	b082      	sub	sp, #8
 801e680:	af00      	add	r7, sp, #0
 801e682:	4603      	mov	r3, r0
 801e684:	460a      	mov	r2, r1
 801e686:	80fb      	strh	r3, [r7, #6]
 801e688:	4613      	mov	r3, r2
 801e68a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801e68c:	1d7a      	adds	r2, r7, #5
 801e68e:	88f9      	ldrh	r1, [r7, #6]
 801e690:	2301      	movs	r3, #1
 801e692:	4803      	ldr	r0, [pc, #12]	; (801e6a0 <SUBGRF_WriteRegister+0x24>)
 801e694:	f7eb fc2a 	bl	8009eec <HAL_SUBGHZ_WriteRegisters>
}
 801e698:	bf00      	nop
 801e69a:	3708      	adds	r7, #8
 801e69c:	46bd      	mov	sp, r7
 801e69e:	bd80      	pop	{r7, pc}
 801e6a0:	200002b4 	.word	0x200002b4

0801e6a4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801e6a4:	b580      	push	{r7, lr}
 801e6a6:	b084      	sub	sp, #16
 801e6a8:	af00      	add	r7, sp, #0
 801e6aa:	4603      	mov	r3, r0
 801e6ac:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801e6ae:	f107 020f 	add.w	r2, r7, #15
 801e6b2:	88f9      	ldrh	r1, [r7, #6]
 801e6b4:	2301      	movs	r3, #1
 801e6b6:	4804      	ldr	r0, [pc, #16]	; (801e6c8 <SUBGRF_ReadRegister+0x24>)
 801e6b8:	f7eb fc77 	bl	8009faa <HAL_SUBGHZ_ReadRegisters>
    return data;
 801e6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 801e6be:	4618      	mov	r0, r3
 801e6c0:	3710      	adds	r7, #16
 801e6c2:	46bd      	mov	sp, r7
 801e6c4:	bd80      	pop	{r7, pc}
 801e6c6:	bf00      	nop
 801e6c8:	200002b4 	.word	0x200002b4

0801e6cc <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e6cc:	b580      	push	{r7, lr}
 801e6ce:	b086      	sub	sp, #24
 801e6d0:	af00      	add	r7, sp, #0
 801e6d2:	4603      	mov	r3, r0
 801e6d4:	6039      	str	r1, [r7, #0]
 801e6d6:	80fb      	strh	r3, [r7, #6]
 801e6d8:	4613      	mov	r3, r2
 801e6da:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e6dc:	f3ef 8310 	mrs	r3, PRIMASK
 801e6e0:	60fb      	str	r3, [r7, #12]
  return(result);
 801e6e2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e6e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e6e6:	b672      	cpsid	i
}
 801e6e8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801e6ea:	88bb      	ldrh	r3, [r7, #4]
 801e6ec:	88f9      	ldrh	r1, [r7, #6]
 801e6ee:	683a      	ldr	r2, [r7, #0]
 801e6f0:	4806      	ldr	r0, [pc, #24]	; (801e70c <SUBGRF_WriteRegisters+0x40>)
 801e6f2:	f7eb fbfb 	bl	8009eec <HAL_SUBGHZ_WriteRegisters>
 801e6f6:	697b      	ldr	r3, [r7, #20]
 801e6f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e6fa:	693b      	ldr	r3, [r7, #16]
 801e6fc:	f383 8810 	msr	PRIMASK, r3
}
 801e700:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e702:	bf00      	nop
 801e704:	3718      	adds	r7, #24
 801e706:	46bd      	mov	sp, r7
 801e708:	bd80      	pop	{r7, pc}
 801e70a:	bf00      	nop
 801e70c:	200002b4 	.word	0x200002b4

0801e710 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e710:	b580      	push	{r7, lr}
 801e712:	b086      	sub	sp, #24
 801e714:	af00      	add	r7, sp, #0
 801e716:	4603      	mov	r3, r0
 801e718:	6039      	str	r1, [r7, #0]
 801e71a:	80fb      	strh	r3, [r7, #6]
 801e71c:	4613      	mov	r3, r2
 801e71e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e720:	f3ef 8310 	mrs	r3, PRIMASK
 801e724:	60fb      	str	r3, [r7, #12]
  return(result);
 801e726:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e72a:	b672      	cpsid	i
}
 801e72c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801e72e:	88bb      	ldrh	r3, [r7, #4]
 801e730:	88f9      	ldrh	r1, [r7, #6]
 801e732:	683a      	ldr	r2, [r7, #0]
 801e734:	4806      	ldr	r0, [pc, #24]	; (801e750 <SUBGRF_ReadRegisters+0x40>)
 801e736:	f7eb fc38 	bl	8009faa <HAL_SUBGHZ_ReadRegisters>
 801e73a:	697b      	ldr	r3, [r7, #20]
 801e73c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e73e:	693b      	ldr	r3, [r7, #16]
 801e740:	f383 8810 	msr	PRIMASK, r3
}
 801e744:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e746:	bf00      	nop
 801e748:	3718      	adds	r7, #24
 801e74a:	46bd      	mov	sp, r7
 801e74c:	bd80      	pop	{r7, pc}
 801e74e:	bf00      	nop
 801e750:	200002b4 	.word	0x200002b4

0801e754 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e754:	b580      	push	{r7, lr}
 801e756:	b086      	sub	sp, #24
 801e758:	af00      	add	r7, sp, #0
 801e75a:	4603      	mov	r3, r0
 801e75c:	6039      	str	r1, [r7, #0]
 801e75e:	71fb      	strb	r3, [r7, #7]
 801e760:	4613      	mov	r3, r2
 801e762:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e764:	f3ef 8310 	mrs	r3, PRIMASK
 801e768:	60fb      	str	r3, [r7, #12]
  return(result);
 801e76a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e76c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e76e:	b672      	cpsid	i
}
 801e770:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801e772:	79bb      	ldrb	r3, [r7, #6]
 801e774:	b29b      	uxth	r3, r3
 801e776:	79f9      	ldrb	r1, [r7, #7]
 801e778:	683a      	ldr	r2, [r7, #0]
 801e77a:	4806      	ldr	r0, [pc, #24]	; (801e794 <SUBGRF_WriteBuffer+0x40>)
 801e77c:	f7eb fd29 	bl	800a1d2 <HAL_SUBGHZ_WriteBuffer>
 801e780:	697b      	ldr	r3, [r7, #20]
 801e782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e784:	693b      	ldr	r3, [r7, #16]
 801e786:	f383 8810 	msr	PRIMASK, r3
}
 801e78a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e78c:	bf00      	nop
 801e78e:	3718      	adds	r7, #24
 801e790:	46bd      	mov	sp, r7
 801e792:	bd80      	pop	{r7, pc}
 801e794:	200002b4 	.word	0x200002b4

0801e798 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e798:	b580      	push	{r7, lr}
 801e79a:	b086      	sub	sp, #24
 801e79c:	af00      	add	r7, sp, #0
 801e79e:	4603      	mov	r3, r0
 801e7a0:	6039      	str	r1, [r7, #0]
 801e7a2:	71fb      	strb	r3, [r7, #7]
 801e7a4:	4613      	mov	r3, r2
 801e7a6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7a8:	f3ef 8310 	mrs	r3, PRIMASK
 801e7ac:	60fb      	str	r3, [r7, #12]
  return(result);
 801e7ae:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e7b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e7b2:	b672      	cpsid	i
}
 801e7b4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801e7b6:	79bb      	ldrb	r3, [r7, #6]
 801e7b8:	b29b      	uxth	r3, r3
 801e7ba:	79f9      	ldrb	r1, [r7, #7]
 801e7bc:	683a      	ldr	r2, [r7, #0]
 801e7be:	4806      	ldr	r0, [pc, #24]	; (801e7d8 <SUBGRF_ReadBuffer+0x40>)
 801e7c0:	f7eb fd5a 	bl	800a278 <HAL_SUBGHZ_ReadBuffer>
 801e7c4:	697b      	ldr	r3, [r7, #20]
 801e7c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7c8:	693b      	ldr	r3, [r7, #16]
 801e7ca:	f383 8810 	msr	PRIMASK, r3
}
 801e7ce:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e7d0:	bf00      	nop
 801e7d2:	3718      	adds	r7, #24
 801e7d4:	46bd      	mov	sp, r7
 801e7d6:	bd80      	pop	{r7, pc}
 801e7d8:	200002b4 	.word	0x200002b4

0801e7dc <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e7dc:	b580      	push	{r7, lr}
 801e7de:	b086      	sub	sp, #24
 801e7e0:	af00      	add	r7, sp, #0
 801e7e2:	4603      	mov	r3, r0
 801e7e4:	6039      	str	r1, [r7, #0]
 801e7e6:	71fb      	strb	r3, [r7, #7]
 801e7e8:	4613      	mov	r3, r2
 801e7ea:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7ec:	f3ef 8310 	mrs	r3, PRIMASK
 801e7f0:	60fb      	str	r3, [r7, #12]
  return(result);
 801e7f2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e7f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e7f6:	b672      	cpsid	i
}
 801e7f8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801e7fa:	88bb      	ldrh	r3, [r7, #4]
 801e7fc:	79f9      	ldrb	r1, [r7, #7]
 801e7fe:	683a      	ldr	r2, [r7, #0]
 801e800:	4806      	ldr	r0, [pc, #24]	; (801e81c <SUBGRF_WriteCommand+0x40>)
 801e802:	f7eb fc33 	bl	800a06c <HAL_SUBGHZ_ExecSetCmd>
 801e806:	697b      	ldr	r3, [r7, #20]
 801e808:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e80a:	693b      	ldr	r3, [r7, #16]
 801e80c:	f383 8810 	msr	PRIMASK, r3
}
 801e810:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e812:	bf00      	nop
 801e814:	3718      	adds	r7, #24
 801e816:	46bd      	mov	sp, r7
 801e818:	bd80      	pop	{r7, pc}
 801e81a:	bf00      	nop
 801e81c:	200002b4 	.word	0x200002b4

0801e820 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e820:	b580      	push	{r7, lr}
 801e822:	b086      	sub	sp, #24
 801e824:	af00      	add	r7, sp, #0
 801e826:	4603      	mov	r3, r0
 801e828:	6039      	str	r1, [r7, #0]
 801e82a:	71fb      	strb	r3, [r7, #7]
 801e82c:	4613      	mov	r3, r2
 801e82e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e830:	f3ef 8310 	mrs	r3, PRIMASK
 801e834:	60fb      	str	r3, [r7, #12]
  return(result);
 801e836:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e838:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e83a:	b672      	cpsid	i
}
 801e83c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801e83e:	88bb      	ldrh	r3, [r7, #4]
 801e840:	79f9      	ldrb	r1, [r7, #7]
 801e842:	683a      	ldr	r2, [r7, #0]
 801e844:	4806      	ldr	r0, [pc, #24]	; (801e860 <SUBGRF_ReadCommand+0x40>)
 801e846:	f7eb fc70 	bl	800a12a <HAL_SUBGHZ_ExecGetCmd>
 801e84a:	697b      	ldr	r3, [r7, #20]
 801e84c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e84e:	693b      	ldr	r3, [r7, #16]
 801e850:	f383 8810 	msr	PRIMASK, r3
}
 801e854:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e856:	bf00      	nop
 801e858:	3718      	adds	r7, #24
 801e85a:	46bd      	mov	sp, r7
 801e85c:	bd80      	pop	{r7, pc}
 801e85e:	bf00      	nop
 801e860:	200002b4 	.word	0x200002b4

0801e864 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801e864:	b580      	push	{r7, lr}
 801e866:	b084      	sub	sp, #16
 801e868:	af00      	add	r7, sp, #0
 801e86a:	4603      	mov	r3, r0
 801e86c:	460a      	mov	r2, r1
 801e86e:	71fb      	strb	r3, [r7, #7]
 801e870:	4613      	mov	r3, r2
 801e872:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801e874:	2301      	movs	r3, #1
 801e876:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801e878:	79bb      	ldrb	r3, [r7, #6]
 801e87a:	2b01      	cmp	r3, #1
 801e87c:	d10d      	bne.n	801e89a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801e87e:	79fb      	ldrb	r3, [r7, #7]
 801e880:	2b01      	cmp	r3, #1
 801e882:	d104      	bne.n	801e88e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801e884:	2302      	movs	r3, #2
 801e886:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801e888:	2004      	movs	r0, #4
 801e88a:	f000 f8ef 	bl	801ea6c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801e88e:	79fb      	ldrb	r3, [r7, #7]
 801e890:	2b02      	cmp	r3, #2
 801e892:	d107      	bne.n	801e8a4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801e894:	2303      	movs	r3, #3
 801e896:	73fb      	strb	r3, [r7, #15]
 801e898:	e004      	b.n	801e8a4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801e89a:	79bb      	ldrb	r3, [r7, #6]
 801e89c:	2b00      	cmp	r3, #0
 801e89e:	d101      	bne.n	801e8a4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801e8a0:	2301      	movs	r3, #1
 801e8a2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801e8a4:	7bfb      	ldrb	r3, [r7, #15]
 801e8a6:	4618      	mov	r0, r3
 801e8a8:	f7ee ff43 	bl	800d732 <RBI_ConfigRFSwitch>
}
 801e8ac:	bf00      	nop
 801e8ae:	3710      	adds	r7, #16
 801e8b0:	46bd      	mov	sp, r7
 801e8b2:	bd80      	pop	{r7, pc}

0801e8b4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801e8b4:	b580      	push	{r7, lr}
 801e8b6:	b084      	sub	sp, #16
 801e8b8:	af00      	add	r7, sp, #0
 801e8ba:	4603      	mov	r3, r0
 801e8bc:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801e8be:	2301      	movs	r3, #1
 801e8c0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801e8c2:	f7ee ff44 	bl	800d74e <RBI_GetTxConfig>
 801e8c6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801e8c8:	68bb      	ldr	r3, [r7, #8]
 801e8ca:	2b02      	cmp	r3, #2
 801e8cc:	d016      	beq.n	801e8fc <SUBGRF_SetRfTxPower+0x48>
 801e8ce:	68bb      	ldr	r3, [r7, #8]
 801e8d0:	2b02      	cmp	r3, #2
 801e8d2:	dc16      	bgt.n	801e902 <SUBGRF_SetRfTxPower+0x4e>
 801e8d4:	68bb      	ldr	r3, [r7, #8]
 801e8d6:	2b00      	cmp	r3, #0
 801e8d8:	d003      	beq.n	801e8e2 <SUBGRF_SetRfTxPower+0x2e>
 801e8da:	68bb      	ldr	r3, [r7, #8]
 801e8dc:	2b01      	cmp	r3, #1
 801e8de:	d00a      	beq.n	801e8f6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801e8e0:	e00f      	b.n	801e902 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801e8e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e8e6:	2b0f      	cmp	r3, #15
 801e8e8:	dd02      	ble.n	801e8f0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801e8ea:	2302      	movs	r3, #2
 801e8ec:	73fb      	strb	r3, [r7, #15]
            break;
 801e8ee:	e009      	b.n	801e904 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801e8f0:	2301      	movs	r3, #1
 801e8f2:	73fb      	strb	r3, [r7, #15]
            break;
 801e8f4:	e006      	b.n	801e904 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801e8f6:	2301      	movs	r3, #1
 801e8f8:	73fb      	strb	r3, [r7, #15]
            break;
 801e8fa:	e003      	b.n	801e904 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801e8fc:	2302      	movs	r3, #2
 801e8fe:	73fb      	strb	r3, [r7, #15]
            break;
 801e900:	e000      	b.n	801e904 <SUBGRF_SetRfTxPower+0x50>
            break;
 801e902:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801e904:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801e908:	7bfb      	ldrb	r3, [r7, #15]
 801e90a:	2202      	movs	r2, #2
 801e90c:	4618      	mov	r0, r3
 801e90e:	f7ff fbcd 	bl	801e0ac <SUBGRF_SetTxParams>

    return paSelect;
 801e912:	7bfb      	ldrb	r3, [r7, #15]
}
 801e914:	4618      	mov	r0, r3
 801e916:	3710      	adds	r7, #16
 801e918:	46bd      	mov	sp, r7
 801e91a:	bd80      	pop	{r7, pc}

0801e91c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801e91c:	b480      	push	{r7}
 801e91e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801e920:	2301      	movs	r3, #1
}
 801e922:	4618      	mov	r0, r3
 801e924:	46bd      	mov	sp, r7
 801e926:	bc80      	pop	{r7}
 801e928:	4770      	bx	lr
	...

0801e92c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e92c:	b580      	push	{r7, lr}
 801e92e:	b082      	sub	sp, #8
 801e930:	af00      	add	r7, sp, #0
 801e932:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801e934:	4b03      	ldr	r3, [pc, #12]	; (801e944 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801e936:	681b      	ldr	r3, [r3, #0]
 801e938:	2001      	movs	r0, #1
 801e93a:	4798      	blx	r3
}
 801e93c:	bf00      	nop
 801e93e:	3708      	adds	r7, #8
 801e940:	46bd      	mov	sp, r7
 801e942:	bd80      	pop	{r7, pc}
 801e944:	20001c78 	.word	0x20001c78

0801e948 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e948:	b580      	push	{r7, lr}
 801e94a:	b082      	sub	sp, #8
 801e94c:	af00      	add	r7, sp, #0
 801e94e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801e950:	4b03      	ldr	r3, [pc, #12]	; (801e960 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801e952:	681b      	ldr	r3, [r3, #0]
 801e954:	2002      	movs	r0, #2
 801e956:	4798      	blx	r3
}
 801e958:	bf00      	nop
 801e95a:	3708      	adds	r7, #8
 801e95c:	46bd      	mov	sp, r7
 801e95e:	bd80      	pop	{r7, pc}
 801e960:	20001c78 	.word	0x20001c78

0801e964 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801e964:	b580      	push	{r7, lr}
 801e966:	b082      	sub	sp, #8
 801e968:	af00      	add	r7, sp, #0
 801e96a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801e96c:	4b03      	ldr	r3, [pc, #12]	; (801e97c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	2040      	movs	r0, #64	; 0x40
 801e972:	4798      	blx	r3
}
 801e974:	bf00      	nop
 801e976:	3708      	adds	r7, #8
 801e978:	46bd      	mov	sp, r7
 801e97a:	bd80      	pop	{r7, pc}
 801e97c:	20001c78 	.word	0x20001c78

0801e980 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801e980:	b580      	push	{r7, lr}
 801e982:	b082      	sub	sp, #8
 801e984:	af00      	add	r7, sp, #0
 801e986:	6078      	str	r0, [r7, #4]
 801e988:	460b      	mov	r3, r1
 801e98a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801e98c:	78fb      	ldrb	r3, [r7, #3]
 801e98e:	2b00      	cmp	r3, #0
 801e990:	d002      	beq.n	801e998 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801e992:	2b01      	cmp	r3, #1
 801e994:	d005      	beq.n	801e9a2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801e996:	e00a      	b.n	801e9ae <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801e998:	4b07      	ldr	r3, [pc, #28]	; (801e9b8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801e99a:	681b      	ldr	r3, [r3, #0]
 801e99c:	2080      	movs	r0, #128	; 0x80
 801e99e:	4798      	blx	r3
            break;
 801e9a0:	e005      	b.n	801e9ae <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801e9a2:	4b05      	ldr	r3, [pc, #20]	; (801e9b8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801e9a4:	681b      	ldr	r3, [r3, #0]
 801e9a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 801e9aa:	4798      	blx	r3
            break;
 801e9ac:	bf00      	nop
    }
}
 801e9ae:	bf00      	nop
 801e9b0:	3708      	adds	r7, #8
 801e9b2:	46bd      	mov	sp, r7
 801e9b4:	bd80      	pop	{r7, pc}
 801e9b6:	bf00      	nop
 801e9b8:	20001c78 	.word	0x20001c78

0801e9bc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e9bc:	b580      	push	{r7, lr}
 801e9be:	b082      	sub	sp, #8
 801e9c0:	af00      	add	r7, sp, #0
 801e9c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801e9c4:	4b04      	ldr	r3, [pc, #16]	; (801e9d8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801e9c6:	681b      	ldr	r3, [r3, #0]
 801e9c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 801e9cc:	4798      	blx	r3
}
 801e9ce:	bf00      	nop
 801e9d0:	3708      	adds	r7, #8
 801e9d2:	46bd      	mov	sp, r7
 801e9d4:	bd80      	pop	{r7, pc}
 801e9d6:	bf00      	nop
 801e9d8:	20001c78 	.word	0x20001c78

0801e9dc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e9dc:	b580      	push	{r7, lr}
 801e9de:	b082      	sub	sp, #8
 801e9e0:	af00      	add	r7, sp, #0
 801e9e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801e9e4:	4b03      	ldr	r3, [pc, #12]	; (801e9f4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801e9e6:	681b      	ldr	r3, [r3, #0]
 801e9e8:	2020      	movs	r0, #32
 801e9ea:	4798      	blx	r3
}
 801e9ec:	bf00      	nop
 801e9ee:	3708      	adds	r7, #8
 801e9f0:	46bd      	mov	sp, r7
 801e9f2:	bd80      	pop	{r7, pc}
 801e9f4:	20001c78 	.word	0x20001c78

0801e9f8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e9f8:	b580      	push	{r7, lr}
 801e9fa:	b082      	sub	sp, #8
 801e9fc:	af00      	add	r7, sp, #0
 801e9fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801ea00:	4b03      	ldr	r3, [pc, #12]	; (801ea10 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801ea02:	681b      	ldr	r3, [r3, #0]
 801ea04:	2004      	movs	r0, #4
 801ea06:	4798      	blx	r3
}
 801ea08:	bf00      	nop
 801ea0a:	3708      	adds	r7, #8
 801ea0c:	46bd      	mov	sp, r7
 801ea0e:	bd80      	pop	{r7, pc}
 801ea10:	20001c78 	.word	0x20001c78

0801ea14 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ea14:	b580      	push	{r7, lr}
 801ea16:	b082      	sub	sp, #8
 801ea18:	af00      	add	r7, sp, #0
 801ea1a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801ea1c:	4b03      	ldr	r3, [pc, #12]	; (801ea2c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801ea1e:	681b      	ldr	r3, [r3, #0]
 801ea20:	2008      	movs	r0, #8
 801ea22:	4798      	blx	r3
}
 801ea24:	bf00      	nop
 801ea26:	3708      	adds	r7, #8
 801ea28:	46bd      	mov	sp, r7
 801ea2a:	bd80      	pop	{r7, pc}
 801ea2c:	20001c78 	.word	0x20001c78

0801ea30 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ea30:	b580      	push	{r7, lr}
 801ea32:	b082      	sub	sp, #8
 801ea34:	af00      	add	r7, sp, #0
 801ea36:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801ea38:	4b03      	ldr	r3, [pc, #12]	; (801ea48 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801ea3a:	681b      	ldr	r3, [r3, #0]
 801ea3c:	2010      	movs	r0, #16
 801ea3e:	4798      	blx	r3
}
 801ea40:	bf00      	nop
 801ea42:	3708      	adds	r7, #8
 801ea44:	46bd      	mov	sp, r7
 801ea46:	bd80      	pop	{r7, pc}
 801ea48:	20001c78 	.word	0x20001c78

0801ea4c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ea4c:	b580      	push	{r7, lr}
 801ea4e:	b082      	sub	sp, #8
 801ea50:	af00      	add	r7, sp, #0
 801ea52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801ea54:	4b04      	ldr	r3, [pc, #16]	; (801ea68 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801ea5c:	4798      	blx	r3
}
 801ea5e:	bf00      	nop
 801ea60:	3708      	adds	r7, #8
 801ea62:	46bd      	mov	sp, r7
 801ea64:	bd80      	pop	{r7, pc}
 801ea66:	bf00      	nop
 801ea68:	20001c78 	.word	0x20001c78

0801ea6c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801ea6c:	b580      	push	{r7, lr}
 801ea6e:	b084      	sub	sp, #16
 801ea70:	af00      	add	r7, sp, #0
 801ea72:	4603      	mov	r3, r0
 801ea74:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801ea76:	f7ee fe78 	bl	800d76a <RBI_IsDCDC>
 801ea7a:	4603      	mov	r3, r0
 801ea7c:	2b01      	cmp	r3, #1
 801ea7e:	d112      	bne.n	801eaa6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801ea80:	f640 1023 	movw	r0, #2339	; 0x923
 801ea84:	f7ff fe0e 	bl	801e6a4 <SUBGRF_ReadRegister>
 801ea88:	4603      	mov	r3, r0
 801ea8a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801ea8c:	7bfb      	ldrb	r3, [r7, #15]
 801ea8e:	f023 0306 	bic.w	r3, r3, #6
 801ea92:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801ea94:	7bfa      	ldrb	r2, [r7, #15]
 801ea96:	79fb      	ldrb	r3, [r7, #7]
 801ea98:	4313      	orrs	r3, r2
 801ea9a:	b2db      	uxtb	r3, r3
 801ea9c:	4619      	mov	r1, r3
 801ea9e:	f640 1023 	movw	r0, #2339	; 0x923
 801eaa2:	f7ff fdeb 	bl	801e67c <SUBGRF_WriteRegister>
  }
}
 801eaa6:	bf00      	nop
 801eaa8:	3710      	adds	r7, #16
 801eaaa:	46bd      	mov	sp, r7
 801eaac:	bd80      	pop	{r7, pc}
	...

0801eab0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801eab0:	b480      	push	{r7}
 801eab2:	b085      	sub	sp, #20
 801eab4:	af00      	add	r7, sp, #0
 801eab6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	2b00      	cmp	r3, #0
 801eabc:	d101      	bne.n	801eac2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801eabe:	231f      	movs	r3, #31
 801eac0:	e016      	b.n	801eaf0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801eac2:	2300      	movs	r3, #0
 801eac4:	73fb      	strb	r3, [r7, #15]
 801eac6:	e00f      	b.n	801eae8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801eac8:	7bfb      	ldrb	r3, [r7, #15]
 801eaca:	4a0c      	ldr	r2, [pc, #48]	; (801eafc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801eacc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ead0:	687a      	ldr	r2, [r7, #4]
 801ead2:	429a      	cmp	r2, r3
 801ead4:	d205      	bcs.n	801eae2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801ead6:	7bfb      	ldrb	r3, [r7, #15]
 801ead8:	4a08      	ldr	r2, [pc, #32]	; (801eafc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801eada:	00db      	lsls	r3, r3, #3
 801eadc:	4413      	add	r3, r2
 801eade:	791b      	ldrb	r3, [r3, #4]
 801eae0:	e006      	b.n	801eaf0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801eae2:	7bfb      	ldrb	r3, [r7, #15]
 801eae4:	3301      	adds	r3, #1
 801eae6:	73fb      	strb	r3, [r7, #15]
 801eae8:	7bfb      	ldrb	r3, [r7, #15]
 801eaea:	2b15      	cmp	r3, #21
 801eaec:	d9ec      	bls.n	801eac8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801eaee:	e7fe      	b.n	801eaee <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801eaf0:	4618      	mov	r0, r3
 801eaf2:	3714      	adds	r7, #20
 801eaf4:	46bd      	mov	sp, r7
 801eaf6:	bc80      	pop	{r7}
 801eaf8:	4770      	bx	lr
 801eafa:	bf00      	nop
 801eafc:	0802200c 	.word	0x0802200c

0801eb00 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801eb00:	b580      	push	{r7, lr}
 801eb02:	b08a      	sub	sp, #40	; 0x28
 801eb04:	af00      	add	r7, sp, #0
 801eb06:	6078      	str	r0, [r7, #4]
 801eb08:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801eb0a:	4b35      	ldr	r3, [pc, #212]	; (801ebe0 <SUBGRF_GetCFO+0xe0>)
 801eb0c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801eb0e:	f640 0007 	movw	r0, #2055	; 0x807
 801eb12:	f7ff fdc7 	bl	801e6a4 <SUBGRF_ReadRegister>
 801eb16:	4603      	mov	r3, r0
 801eb18:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801eb1a:	7ffb      	ldrb	r3, [r7, #31]
 801eb1c:	08db      	lsrs	r3, r3, #3
 801eb1e:	b2db      	uxtb	r3, r3
 801eb20:	f003 0303 	and.w	r3, r3, #3
 801eb24:	3328      	adds	r3, #40	; 0x28
 801eb26:	443b      	add	r3, r7
 801eb28:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801eb2c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801eb2e:	7ffb      	ldrb	r3, [r7, #31]
 801eb30:	f003 0307 	and.w	r3, r3, #7
 801eb34:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801eb36:	7fba      	ldrb	r2, [r7, #30]
 801eb38:	7f7b      	ldrb	r3, [r7, #29]
 801eb3a:	3301      	adds	r3, #1
 801eb3c:	fa02 f303 	lsl.w	r3, r2, r3
 801eb40:	461a      	mov	r2, r3
 801eb42:	4b28      	ldr	r3, [pc, #160]	; (801ebe4 <SUBGRF_GetCFO+0xe4>)
 801eb44:	fbb3 f3f2 	udiv	r3, r3, r2
 801eb48:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801eb4a:	69ba      	ldr	r2, [r7, #24]
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	fbb2 f3f3 	udiv	r3, r2, r3
 801eb52:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801eb54:	2301      	movs	r3, #1
 801eb56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801eb5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eb5e:	697a      	ldr	r2, [r7, #20]
 801eb60:	fb02 f303 	mul.w	r3, r2, r3
 801eb64:	2b07      	cmp	r3, #7
 801eb66:	d802      	bhi.n	801eb6e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801eb68:	2302      	movs	r3, #2
 801eb6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801eb6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eb72:	697a      	ldr	r2, [r7, #20]
 801eb74:	fb02 f303 	mul.w	r3, r2, r3
 801eb78:	2b03      	cmp	r3, #3
 801eb7a:	d802      	bhi.n	801eb82 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801eb7c:	2304      	movs	r3, #4
 801eb7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801eb82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801eb86:	69bb      	ldr	r3, [r7, #24]
 801eb88:	fb02 f303 	mul.w	r3, r2, r3
 801eb8c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801eb8e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801eb92:	f7ff fd87 	bl	801e6a4 <SUBGRF_ReadRegister>
 801eb96:	4603      	mov	r3, r0
 801eb98:	021b      	lsls	r3, r3, #8
 801eb9a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801eb9e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801eba0:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801eba4:	f7ff fd7e 	bl	801e6a4 <SUBGRF_ReadRegister>
 801eba8:	4603      	mov	r3, r0
 801ebaa:	461a      	mov	r2, r3
 801ebac:	6a3b      	ldr	r3, [r7, #32]
 801ebae:	4313      	orrs	r3, r2
 801ebb0:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801ebb2:	6a3b      	ldr	r3, [r7, #32]
 801ebb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ebb8:	2b00      	cmp	r3, #0
 801ebba:	d005      	beq.n	801ebc8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801ebbc:	6a3b      	ldr	r3, [r7, #32]
 801ebbe:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801ebc2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801ebc6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801ebc8:	693b      	ldr	r3, [r7, #16]
 801ebca:	095b      	lsrs	r3, r3, #5
 801ebcc:	6a3a      	ldr	r2, [r7, #32]
 801ebce:	fb02 f303 	mul.w	r3, r2, r3
 801ebd2:	11da      	asrs	r2, r3, #7
 801ebd4:	683b      	ldr	r3, [r7, #0]
 801ebd6:	601a      	str	r2, [r3, #0]
}
 801ebd8:	bf00      	nop
 801ebda:	3728      	adds	r7, #40	; 0x28
 801ebdc:	46bd      	mov	sp, r7
 801ebde:	bd80      	pop	{r7, pc}
 801ebe0:	0c0a0804 	.word	0x0c0a0804
 801ebe4:	01e84800 	.word	0x01e84800

0801ebe8 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801ebe8:	b480      	push	{r7}
 801ebea:	b087      	sub	sp, #28
 801ebec:	af00      	add	r7, sp, #0
 801ebee:	4603      	mov	r3, r0
 801ebf0:	60b9      	str	r1, [r7, #8]
 801ebf2:	607a      	str	r2, [r7, #4]
 801ebf4:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801ebf6:	2300      	movs	r3, #0
 801ebf8:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801ebfa:	f04f 33ff 	mov.w	r3, #4294967295
 801ebfe:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ec00:	697b      	ldr	r3, [r7, #20]
}
 801ec02:	4618      	mov	r0, r3
 801ec04:	371c      	adds	r7, #28
 801ec06:	46bd      	mov	sp, r7
 801ec08:	bc80      	pop	{r7}
 801ec0a:	4770      	bx	lr

0801ec0c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801ec0c:	b480      	push	{r7}
 801ec0e:	b087      	sub	sp, #28
 801ec10:	af00      	add	r7, sp, #0
 801ec12:	4603      	mov	r3, r0
 801ec14:	60b9      	str	r1, [r7, #8]
 801ec16:	607a      	str	r2, [r7, #4]
 801ec18:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801ec1a:	2300      	movs	r3, #0
 801ec1c:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801ec1e:	f04f 33ff 	mov.w	r3, #4294967295
 801ec22:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ec24:	697b      	ldr	r3, [r7, #20]
}
 801ec26:	4618      	mov	r0, r3
 801ec28:	371c      	adds	r7, #28
 801ec2a:	46bd      	mov	sp, r7
 801ec2c:	bc80      	pop	{r7}
 801ec2e:	4770      	bx	lr

0801ec30 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801ec30:	b480      	push	{r7}
 801ec32:	b085      	sub	sp, #20
 801ec34:	af00      	add	r7, sp, #0
 801ec36:	60f8      	str	r0, [r7, #12]
 801ec38:	60b9      	str	r1, [r7, #8]
 801ec3a:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801ec3c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801ec40:	4618      	mov	r0, r3
 801ec42:	3714      	adds	r7, #20
 801ec44:	46bd      	mov	sp, r7
 801ec46:	bc80      	pop	{r7}
 801ec48:	4770      	bx	lr

0801ec4a <RFW_DeInit>:

void RFW_DeInit( void )
{
 801ec4a:	b480      	push	{r7}
 801ec4c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801ec4e:	bf00      	nop
 801ec50:	46bd      	mov	sp, r7
 801ec52:	bc80      	pop	{r7}
 801ec54:	4770      	bx	lr

0801ec56 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801ec56:	b480      	push	{r7}
 801ec58:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801ec5a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ec5c:	4618      	mov	r0, r3
 801ec5e:	46bd      	mov	sp, r7
 801ec60:	bc80      	pop	{r7}
 801ec62:	4770      	bx	lr

0801ec64 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801ec64:	b480      	push	{r7}
 801ec66:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801ec68:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ec6a:	4618      	mov	r0, r3
 801ec6c:	46bd      	mov	sp, r7
 801ec6e:	bc80      	pop	{r7}
 801ec70:	4770      	bx	lr

0801ec72 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801ec72:	b480      	push	{r7}
 801ec74:	b083      	sub	sp, #12
 801ec76:	af00      	add	r7, sp, #0
 801ec78:	4603      	mov	r3, r0
 801ec7a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801ec7c:	bf00      	nop
 801ec7e:	370c      	adds	r7, #12
 801ec80:	46bd      	mov	sp, r7
 801ec82:	bc80      	pop	{r7}
 801ec84:	4770      	bx	lr

0801ec86 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801ec86:	b480      	push	{r7}
 801ec88:	b087      	sub	sp, #28
 801ec8a:	af00      	add	r7, sp, #0
 801ec8c:	60f8      	str	r0, [r7, #12]
 801ec8e:	460b      	mov	r3, r1
 801ec90:	607a      	str	r2, [r7, #4]
 801ec92:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801ec94:	f04f 33ff 	mov.w	r3, #4294967295
 801ec98:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801ec9a:	697b      	ldr	r3, [r7, #20]
}
 801ec9c:	4618      	mov	r0, r3
 801ec9e:	371c      	adds	r7, #28
 801eca0:	46bd      	mov	sp, r7
 801eca2:	bc80      	pop	{r7}
 801eca4:	4770      	bx	lr

0801eca6 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801eca6:	b480      	push	{r7}
 801eca8:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801ecaa:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801ecae:	4618      	mov	r0, r3
 801ecb0:	46bd      	mov	sp, r7
 801ecb2:	bc80      	pop	{r7}
 801ecb4:	4770      	bx	lr

0801ecb6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801ecb6:	b480      	push	{r7}
 801ecb8:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801ecba:	bf00      	nop
 801ecbc:	46bd      	mov	sp, r7
 801ecbe:	bc80      	pop	{r7}
 801ecc0:	4770      	bx	lr

0801ecc2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801ecc2:	b480      	push	{r7}
 801ecc4:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801ecc6:	bf00      	nop
 801ecc8:	46bd      	mov	sp, r7
 801ecca:	bc80      	pop	{r7}
 801eccc:	4770      	bx	lr

0801ecce <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801ecce:	b480      	push	{r7}
 801ecd0:	b083      	sub	sp, #12
 801ecd2:	af00      	add	r7, sp, #0
 801ecd4:	4603      	mov	r3, r0
 801ecd6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801ecd8:	bf00      	nop
 801ecda:	370c      	adds	r7, #12
 801ecdc:	46bd      	mov	sp, r7
 801ecde:	bc80      	pop	{r7}
 801ece0:	4770      	bx	lr
	...

0801ece4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ece4:	b480      	push	{r7}
 801ece6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ece8:	4b04      	ldr	r3, [pc, #16]	; (801ecfc <UTIL_LPM_Init+0x18>)
 801ecea:	2200      	movs	r2, #0
 801ecec:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ecee:	4b04      	ldr	r3, [pc, #16]	; (801ed00 <UTIL_LPM_Init+0x1c>)
 801ecf0:	2200      	movs	r2, #0
 801ecf2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ecf4:	bf00      	nop
 801ecf6:	46bd      	mov	sp, r7
 801ecf8:	bc80      	pop	{r7}
 801ecfa:	4770      	bx	lr
 801ecfc:	20001c7c 	.word	0x20001c7c
 801ed00:	20001c80 	.word	0x20001c80

0801ed04 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ed04:	b480      	push	{r7}
 801ed06:	b087      	sub	sp, #28
 801ed08:	af00      	add	r7, sp, #0
 801ed0a:	6078      	str	r0, [r7, #4]
 801ed0c:	460b      	mov	r3, r1
 801ed0e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed10:	f3ef 8310 	mrs	r3, PRIMASK
 801ed14:	613b      	str	r3, [r7, #16]
  return(result);
 801ed16:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ed18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ed1a:	b672      	cpsid	i
}
 801ed1c:	bf00      	nop
  
  switch( state )
 801ed1e:	78fb      	ldrb	r3, [r7, #3]
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	d008      	beq.n	801ed36 <UTIL_LPM_SetStopMode+0x32>
 801ed24:	2b01      	cmp	r3, #1
 801ed26:	d10e      	bne.n	801ed46 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801ed28:	4b0d      	ldr	r3, [pc, #52]	; (801ed60 <UTIL_LPM_SetStopMode+0x5c>)
 801ed2a:	681a      	ldr	r2, [r3, #0]
 801ed2c:	687b      	ldr	r3, [r7, #4]
 801ed2e:	4313      	orrs	r3, r2
 801ed30:	4a0b      	ldr	r2, [pc, #44]	; (801ed60 <UTIL_LPM_SetStopMode+0x5c>)
 801ed32:	6013      	str	r3, [r2, #0]
      break;
 801ed34:	e008      	b.n	801ed48 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801ed36:	687b      	ldr	r3, [r7, #4]
 801ed38:	43da      	mvns	r2, r3
 801ed3a:	4b09      	ldr	r3, [pc, #36]	; (801ed60 <UTIL_LPM_SetStopMode+0x5c>)
 801ed3c:	681b      	ldr	r3, [r3, #0]
 801ed3e:	4013      	ands	r3, r2
 801ed40:	4a07      	ldr	r2, [pc, #28]	; (801ed60 <UTIL_LPM_SetStopMode+0x5c>)
 801ed42:	6013      	str	r3, [r2, #0]
      break;
 801ed44:	e000      	b.n	801ed48 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801ed46:	bf00      	nop
 801ed48:	697b      	ldr	r3, [r7, #20]
 801ed4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed4c:	68fb      	ldr	r3, [r7, #12]
 801ed4e:	f383 8810 	msr	PRIMASK, r3
}
 801ed52:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ed54:	bf00      	nop
 801ed56:	371c      	adds	r7, #28
 801ed58:	46bd      	mov	sp, r7
 801ed5a:	bc80      	pop	{r7}
 801ed5c:	4770      	bx	lr
 801ed5e:	bf00      	nop
 801ed60:	20001c7c 	.word	0x20001c7c

0801ed64 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ed64:	b480      	push	{r7}
 801ed66:	b087      	sub	sp, #28
 801ed68:	af00      	add	r7, sp, #0
 801ed6a:	6078      	str	r0, [r7, #4]
 801ed6c:	460b      	mov	r3, r1
 801ed6e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed70:	f3ef 8310 	mrs	r3, PRIMASK
 801ed74:	613b      	str	r3, [r7, #16]
  return(result);
 801ed76:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ed78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ed7a:	b672      	cpsid	i
}
 801ed7c:	bf00      	nop
  
  switch(state)
 801ed7e:	78fb      	ldrb	r3, [r7, #3]
 801ed80:	2b00      	cmp	r3, #0
 801ed82:	d008      	beq.n	801ed96 <UTIL_LPM_SetOffMode+0x32>
 801ed84:	2b01      	cmp	r3, #1
 801ed86:	d10e      	bne.n	801eda6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801ed88:	4b0d      	ldr	r3, [pc, #52]	; (801edc0 <UTIL_LPM_SetOffMode+0x5c>)
 801ed8a:	681a      	ldr	r2, [r3, #0]
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	4313      	orrs	r3, r2
 801ed90:	4a0b      	ldr	r2, [pc, #44]	; (801edc0 <UTIL_LPM_SetOffMode+0x5c>)
 801ed92:	6013      	str	r3, [r2, #0]
      break;
 801ed94:	e008      	b.n	801eda8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801ed96:	687b      	ldr	r3, [r7, #4]
 801ed98:	43da      	mvns	r2, r3
 801ed9a:	4b09      	ldr	r3, [pc, #36]	; (801edc0 <UTIL_LPM_SetOffMode+0x5c>)
 801ed9c:	681b      	ldr	r3, [r3, #0]
 801ed9e:	4013      	ands	r3, r2
 801eda0:	4a07      	ldr	r2, [pc, #28]	; (801edc0 <UTIL_LPM_SetOffMode+0x5c>)
 801eda2:	6013      	str	r3, [r2, #0]
      break;
 801eda4:	e000      	b.n	801eda8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801eda6:	bf00      	nop
 801eda8:	697b      	ldr	r3, [r7, #20]
 801edaa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801edac:	68fb      	ldr	r3, [r7, #12]
 801edae:	f383 8810 	msr	PRIMASK, r3
}
 801edb2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801edb4:	bf00      	nop
 801edb6:	371c      	adds	r7, #28
 801edb8:	46bd      	mov	sp, r7
 801edba:	bc80      	pop	{r7}
 801edbc:	4770      	bx	lr
 801edbe:	bf00      	nop
 801edc0:	20001c80 	.word	0x20001c80

0801edc4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801edc4:	b480      	push	{r7}
 801edc6:	b087      	sub	sp, #28
 801edc8:	af00      	add	r7, sp, #0
 801edca:	60f8      	str	r0, [r7, #12]
 801edcc:	60b9      	str	r1, [r7, #8]
 801edce:	4613      	mov	r3, r2
 801edd0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801edd2:	68fb      	ldr	r3, [r7, #12]
 801edd4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801edd6:	68bb      	ldr	r3, [r7, #8]
 801edd8:	613b      	str	r3, [r7, #16]

  while( size-- )
 801edda:	e007      	b.n	801edec <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801eddc:	693a      	ldr	r2, [r7, #16]
 801edde:	1c53      	adds	r3, r2, #1
 801ede0:	613b      	str	r3, [r7, #16]
 801ede2:	697b      	ldr	r3, [r7, #20]
 801ede4:	1c59      	adds	r1, r3, #1
 801ede6:	6179      	str	r1, [r7, #20]
 801ede8:	7812      	ldrb	r2, [r2, #0]
 801edea:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801edec:	88fb      	ldrh	r3, [r7, #6]
 801edee:	1e5a      	subs	r2, r3, #1
 801edf0:	80fa      	strh	r2, [r7, #6]
 801edf2:	2b00      	cmp	r3, #0
 801edf4:	d1f2      	bne.n	801eddc <UTIL_MEM_cpy_8+0x18>
    }
}
 801edf6:	bf00      	nop
 801edf8:	bf00      	nop
 801edfa:	371c      	adds	r7, #28
 801edfc:	46bd      	mov	sp, r7
 801edfe:	bc80      	pop	{r7}
 801ee00:	4770      	bx	lr

0801ee02 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801ee02:	b480      	push	{r7}
 801ee04:	b085      	sub	sp, #20
 801ee06:	af00      	add	r7, sp, #0
 801ee08:	6078      	str	r0, [r7, #4]
 801ee0a:	460b      	mov	r3, r1
 801ee0c:	70fb      	strb	r3, [r7, #3]
 801ee0e:	4613      	mov	r3, r2
 801ee10:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801ee16:	e004      	b.n	801ee22 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801ee18:	68fb      	ldr	r3, [r7, #12]
 801ee1a:	1c5a      	adds	r2, r3, #1
 801ee1c:	60fa      	str	r2, [r7, #12]
 801ee1e:	78fa      	ldrb	r2, [r7, #3]
 801ee20:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801ee22:	883b      	ldrh	r3, [r7, #0]
 801ee24:	1e5a      	subs	r2, r3, #1
 801ee26:	803a      	strh	r2, [r7, #0]
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	d1f5      	bne.n	801ee18 <UTIL_MEM_set_8+0x16>
  }
}
 801ee2c:	bf00      	nop
 801ee2e:	bf00      	nop
 801ee30:	3714      	adds	r7, #20
 801ee32:	46bd      	mov	sp, r7
 801ee34:	bc80      	pop	{r7}
 801ee36:	4770      	bx	lr

0801ee38 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801ee38:	b082      	sub	sp, #8
 801ee3a:	b480      	push	{r7}
 801ee3c:	b087      	sub	sp, #28
 801ee3e:	af00      	add	r7, sp, #0
 801ee40:	60f8      	str	r0, [r7, #12]
 801ee42:	1d38      	adds	r0, r7, #4
 801ee44:	e880 0006 	stmia.w	r0, {r1, r2}
 801ee48:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801ee4a:	2300      	movs	r3, #0
 801ee4c:	613b      	str	r3, [r7, #16]
 801ee4e:	2300      	movs	r3, #0
 801ee50:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801ee52:	687a      	ldr	r2, [r7, #4]
 801ee54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee56:	4413      	add	r3, r2
 801ee58:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801ee5a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ee5e:	b29a      	uxth	r2, r3
 801ee60:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801ee64:	b29b      	uxth	r3, r3
 801ee66:	4413      	add	r3, r2
 801ee68:	b29b      	uxth	r3, r3
 801ee6a:	b21b      	sxth	r3, r3
 801ee6c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801ee6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ee72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801ee76:	db0a      	blt.n	801ee8e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801ee78:	693b      	ldr	r3, [r7, #16]
 801ee7a:	3301      	adds	r3, #1
 801ee7c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801ee7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ee82:	b29b      	uxth	r3, r3
 801ee84:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801ee88:	b29b      	uxth	r3, r3
 801ee8a:	b21b      	sxth	r3, r3
 801ee8c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801ee8e:	68fb      	ldr	r3, [r7, #12]
 801ee90:	461a      	mov	r2, r3
 801ee92:	f107 0310 	add.w	r3, r7, #16
 801ee96:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ee9a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ee9e:	68f8      	ldr	r0, [r7, #12]
 801eea0:	371c      	adds	r7, #28
 801eea2:	46bd      	mov	sp, r7
 801eea4:	bc80      	pop	{r7}
 801eea6:	b002      	add	sp, #8
 801eea8:	4770      	bx	lr

0801eeaa <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801eeaa:	b082      	sub	sp, #8
 801eeac:	b480      	push	{r7}
 801eeae:	b087      	sub	sp, #28
 801eeb0:	af00      	add	r7, sp, #0
 801eeb2:	60f8      	str	r0, [r7, #12]
 801eeb4:	1d38      	adds	r0, r7, #4
 801eeb6:	e880 0006 	stmia.w	r0, {r1, r2}
 801eeba:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801eebc:	2300      	movs	r3, #0
 801eebe:	613b      	str	r3, [r7, #16]
 801eec0:	2300      	movs	r3, #0
 801eec2:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801eec4:	687a      	ldr	r2, [r7, #4]
 801eec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eec8:	1ad3      	subs	r3, r2, r3
 801eeca:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801eecc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801eed0:	b29a      	uxth	r2, r3
 801eed2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801eed6:	b29b      	uxth	r3, r3
 801eed8:	1ad3      	subs	r3, r2, r3
 801eeda:	b29b      	uxth	r3, r3
 801eedc:	b21b      	sxth	r3, r3
 801eede:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801eee0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801eee4:	2b00      	cmp	r3, #0
 801eee6:	da0a      	bge.n	801eefe <SysTimeSub+0x54>
  {
    c.Seconds--;
 801eee8:	693b      	ldr	r3, [r7, #16]
 801eeea:	3b01      	subs	r3, #1
 801eeec:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801eeee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801eef2:	b29b      	uxth	r3, r3
 801eef4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801eef8:	b29b      	uxth	r3, r3
 801eefa:	b21b      	sxth	r3, r3
 801eefc:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801eefe:	68fb      	ldr	r3, [r7, #12]
 801ef00:	461a      	mov	r2, r3
 801ef02:	f107 0310 	add.w	r3, r7, #16
 801ef06:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ef0a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ef0e:	68f8      	ldr	r0, [r7, #12]
 801ef10:	371c      	adds	r7, #28
 801ef12:	46bd      	mov	sp, r7
 801ef14:	bc80      	pop	{r7}
 801ef16:	b002      	add	sp, #8
 801ef18:	4770      	bx	lr
	...

0801ef1c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801ef1c:	b580      	push	{r7, lr}
 801ef1e:	b088      	sub	sp, #32
 801ef20:	af02      	add	r7, sp, #8
 801ef22:	463b      	mov	r3, r7
 801ef24:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ef28:	2300      	movs	r3, #0
 801ef2a:	60bb      	str	r3, [r7, #8]
 801ef2c:	2300      	movs	r3, #0
 801ef2e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ef30:	4b10      	ldr	r3, [pc, #64]	; (801ef74 <SysTimeSet+0x58>)
 801ef32:	691b      	ldr	r3, [r3, #16]
 801ef34:	f107 0208 	add.w	r2, r7, #8
 801ef38:	3204      	adds	r2, #4
 801ef3a:	4610      	mov	r0, r2
 801ef3c:	4798      	blx	r3
 801ef3e:	4603      	mov	r3, r0
 801ef40:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801ef42:	f107 0010 	add.w	r0, r7, #16
 801ef46:	68fb      	ldr	r3, [r7, #12]
 801ef48:	9300      	str	r3, [sp, #0]
 801ef4a:	68bb      	ldr	r3, [r7, #8]
 801ef4c:	463a      	mov	r2, r7
 801ef4e:	ca06      	ldmia	r2, {r1, r2}
 801ef50:	f7ff ffab 	bl	801eeaa <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801ef54:	4b07      	ldr	r3, [pc, #28]	; (801ef74 <SysTimeSet+0x58>)
 801ef56:	681b      	ldr	r3, [r3, #0]
 801ef58:	693a      	ldr	r2, [r7, #16]
 801ef5a:	4610      	mov	r0, r2
 801ef5c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801ef5e:	4b05      	ldr	r3, [pc, #20]	; (801ef74 <SysTimeSet+0x58>)
 801ef60:	689b      	ldr	r3, [r3, #8]
 801ef62:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801ef66:	4610      	mov	r0, r2
 801ef68:	4798      	blx	r3
}
 801ef6a:	bf00      	nop
 801ef6c:	3718      	adds	r7, #24
 801ef6e:	46bd      	mov	sp, r7
 801ef70:	bd80      	pop	{r7, pc}
 801ef72:	bf00      	nop
 801ef74:	08021ae0 	.word	0x08021ae0

0801ef78 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801ef78:	b580      	push	{r7, lr}
 801ef7a:	b08a      	sub	sp, #40	; 0x28
 801ef7c:	af02      	add	r7, sp, #8
 801ef7e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ef80:	2300      	movs	r3, #0
 801ef82:	61bb      	str	r3, [r7, #24]
 801ef84:	2300      	movs	r3, #0
 801ef86:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801ef88:	2300      	movs	r3, #0
 801ef8a:	613b      	str	r3, [r7, #16]
 801ef8c:	2300      	movs	r3, #0
 801ef8e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ef90:	4b14      	ldr	r3, [pc, #80]	; (801efe4 <SysTimeGet+0x6c>)
 801ef92:	691b      	ldr	r3, [r3, #16]
 801ef94:	f107 0218 	add.w	r2, r7, #24
 801ef98:	3204      	adds	r2, #4
 801ef9a:	4610      	mov	r0, r2
 801ef9c:	4798      	blx	r3
 801ef9e:	4603      	mov	r3, r0
 801efa0:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801efa2:	4b10      	ldr	r3, [pc, #64]	; (801efe4 <SysTimeGet+0x6c>)
 801efa4:	68db      	ldr	r3, [r3, #12]
 801efa6:	4798      	blx	r3
 801efa8:	4603      	mov	r3, r0
 801efaa:	b21b      	sxth	r3, r3
 801efac:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801efae:	4b0d      	ldr	r3, [pc, #52]	; (801efe4 <SysTimeGet+0x6c>)
 801efb0:	685b      	ldr	r3, [r3, #4]
 801efb2:	4798      	blx	r3
 801efb4:	4603      	mov	r3, r0
 801efb6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801efb8:	f107 0010 	add.w	r0, r7, #16
 801efbc:	69fb      	ldr	r3, [r7, #28]
 801efbe:	9300      	str	r3, [sp, #0]
 801efc0:	69bb      	ldr	r3, [r7, #24]
 801efc2:	f107 0208 	add.w	r2, r7, #8
 801efc6:	ca06      	ldmia	r2, {r1, r2}
 801efc8:	f7ff ff36 	bl	801ee38 <SysTimeAdd>

  return sysTime;
 801efcc:	687b      	ldr	r3, [r7, #4]
 801efce:	461a      	mov	r2, r3
 801efd0:	f107 0310 	add.w	r3, r7, #16
 801efd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801efd8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801efdc:	6878      	ldr	r0, [r7, #4]
 801efde:	3720      	adds	r7, #32
 801efe0:	46bd      	mov	sp, r7
 801efe2:	bd80      	pop	{r7, pc}
 801efe4:	08021ae0 	.word	0x08021ae0

0801efe8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801efe8:	b580      	push	{r7, lr}
 801efea:	b084      	sub	sp, #16
 801efec:	af00      	add	r7, sp, #0
 801efee:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801eff0:	2300      	movs	r3, #0
 801eff2:	60bb      	str	r3, [r7, #8]
 801eff4:	2300      	movs	r3, #0
 801eff6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801eff8:	4b0a      	ldr	r3, [pc, #40]	; (801f024 <SysTimeGetMcuTime+0x3c>)
 801effa:	691b      	ldr	r3, [r3, #16]
 801effc:	f107 0208 	add.w	r2, r7, #8
 801f000:	3204      	adds	r2, #4
 801f002:	4610      	mov	r0, r2
 801f004:	4798      	blx	r3
 801f006:	4603      	mov	r3, r0
 801f008:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801f00a:	687b      	ldr	r3, [r7, #4]
 801f00c:	461a      	mov	r2, r3
 801f00e:	f107 0308 	add.w	r3, r7, #8
 801f012:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f016:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f01a:	6878      	ldr	r0, [r7, #4]
 801f01c:	3710      	adds	r7, #16
 801f01e:	46bd      	mov	sp, r7
 801f020:	bd80      	pop	{r7, pc}
 801f022:	bf00      	nop
 801f024:	08021ae0 	.word	0x08021ae0

0801f028 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801f028:	b580      	push	{r7, lr}
 801f02a:	b088      	sub	sp, #32
 801f02c:	af02      	add	r7, sp, #8
 801f02e:	463b      	mov	r3, r7
 801f030:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f034:	4b0f      	ldr	r3, [pc, #60]	; (801f074 <SysTimeToMs+0x4c>)
 801f036:	68db      	ldr	r3, [r3, #12]
 801f038:	4798      	blx	r3
 801f03a:	4603      	mov	r3, r0
 801f03c:	b21b      	sxth	r3, r3
 801f03e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f040:	4b0c      	ldr	r3, [pc, #48]	; (801f074 <SysTimeToMs+0x4c>)
 801f042:	685b      	ldr	r3, [r3, #4]
 801f044:	4798      	blx	r3
 801f046:	4603      	mov	r3, r0
 801f048:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801f04a:	f107 0008 	add.w	r0, r7, #8
 801f04e:	697b      	ldr	r3, [r7, #20]
 801f050:	9300      	str	r3, [sp, #0]
 801f052:	693b      	ldr	r3, [r7, #16]
 801f054:	463a      	mov	r2, r7
 801f056:	ca06      	ldmia	r2, {r1, r2}
 801f058:	f7ff ff27 	bl	801eeaa <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801f05c:	68bb      	ldr	r3, [r7, #8]
 801f05e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f062:	fb02 f303 	mul.w	r3, r2, r3
 801f066:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801f06a:	4413      	add	r3, r2
}
 801f06c:	4618      	mov	r0, r3
 801f06e:	3718      	adds	r7, #24
 801f070:	46bd      	mov	sp, r7
 801f072:	bd80      	pop	{r7, pc}
 801f074:	08021ae0 	.word	0x08021ae0

0801f078 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801f078:	b580      	push	{r7, lr}
 801f07a:	b08a      	sub	sp, #40	; 0x28
 801f07c:	af02      	add	r7, sp, #8
 801f07e:	6078      	str	r0, [r7, #4]
 801f080:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801f082:	683b      	ldr	r3, [r7, #0]
 801f084:	4a19      	ldr	r2, [pc, #100]	; (801f0ec <SysTimeFromMs+0x74>)
 801f086:	fba2 2303 	umull	r2, r3, r2, r3
 801f08a:	099b      	lsrs	r3, r3, #6
 801f08c:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801f08e:	69fb      	ldr	r3, [r7, #28]
 801f090:	617b      	str	r3, [r7, #20]
 801f092:	683b      	ldr	r3, [r7, #0]
 801f094:	b29a      	uxth	r2, r3
 801f096:	69fb      	ldr	r3, [r7, #28]
 801f098:	b29b      	uxth	r3, r3
 801f09a:	4619      	mov	r1, r3
 801f09c:	0149      	lsls	r1, r1, #5
 801f09e:	1ac9      	subs	r1, r1, r3
 801f0a0:	0089      	lsls	r1, r1, #2
 801f0a2:	440b      	add	r3, r1
 801f0a4:	00db      	lsls	r3, r3, #3
 801f0a6:	b29b      	uxth	r3, r3
 801f0a8:	1ad3      	subs	r3, r2, r3
 801f0aa:	b29b      	uxth	r3, r3
 801f0ac:	b21b      	sxth	r3, r3
 801f0ae:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801f0b0:	f107 030c 	add.w	r3, r7, #12
 801f0b4:	2200      	movs	r2, #0
 801f0b6:	601a      	str	r2, [r3, #0]
 801f0b8:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f0ba:	4b0d      	ldr	r3, [pc, #52]	; (801f0f0 <SysTimeFromMs+0x78>)
 801f0bc:	68db      	ldr	r3, [r3, #12]
 801f0be:	4798      	blx	r3
 801f0c0:	4603      	mov	r3, r0
 801f0c2:	b21b      	sxth	r3, r3
 801f0c4:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f0c6:	4b0a      	ldr	r3, [pc, #40]	; (801f0f0 <SysTimeFromMs+0x78>)
 801f0c8:	685b      	ldr	r3, [r3, #4]
 801f0ca:	4798      	blx	r3
 801f0cc:	4603      	mov	r3, r0
 801f0ce:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801f0d0:	6878      	ldr	r0, [r7, #4]
 801f0d2:	693b      	ldr	r3, [r7, #16]
 801f0d4:	9300      	str	r3, [sp, #0]
 801f0d6:	68fb      	ldr	r3, [r7, #12]
 801f0d8:	f107 0214 	add.w	r2, r7, #20
 801f0dc:	ca06      	ldmia	r2, {r1, r2}
 801f0de:	f7ff feab 	bl	801ee38 <SysTimeAdd>
}
 801f0e2:	6878      	ldr	r0, [r7, #4]
 801f0e4:	3720      	adds	r7, #32
 801f0e6:	46bd      	mov	sp, r7
 801f0e8:	bd80      	pop	{r7, pc}
 801f0ea:	bf00      	nop
 801f0ec:	10624dd3 	.word	0x10624dd3
 801f0f0:	08021ae0 	.word	0x08021ae0

0801f0f4 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801f0f4:	b480      	push	{r7}
 801f0f6:	b085      	sub	sp, #20
 801f0f8:	af00      	add	r7, sp, #0
 801f0fa:	6078      	str	r0, [r7, #4]
  int i = 0;
 801f0fc:	2300      	movs	r3, #0
 801f0fe:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801f100:	e00e      	b.n	801f120 <ee_skip_atoi+0x2c>
 801f102:	68fa      	ldr	r2, [r7, #12]
 801f104:	4613      	mov	r3, r2
 801f106:	009b      	lsls	r3, r3, #2
 801f108:	4413      	add	r3, r2
 801f10a:	005b      	lsls	r3, r3, #1
 801f10c:	4618      	mov	r0, r3
 801f10e:	687b      	ldr	r3, [r7, #4]
 801f110:	681b      	ldr	r3, [r3, #0]
 801f112:	1c59      	adds	r1, r3, #1
 801f114:	687a      	ldr	r2, [r7, #4]
 801f116:	6011      	str	r1, [r2, #0]
 801f118:	781b      	ldrb	r3, [r3, #0]
 801f11a:	4403      	add	r3, r0
 801f11c:	3b30      	subs	r3, #48	; 0x30
 801f11e:	60fb      	str	r3, [r7, #12]
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	681b      	ldr	r3, [r3, #0]
 801f124:	781b      	ldrb	r3, [r3, #0]
 801f126:	2b2f      	cmp	r3, #47	; 0x2f
 801f128:	d904      	bls.n	801f134 <ee_skip_atoi+0x40>
 801f12a:	687b      	ldr	r3, [r7, #4]
 801f12c:	681b      	ldr	r3, [r3, #0]
 801f12e:	781b      	ldrb	r3, [r3, #0]
 801f130:	2b39      	cmp	r3, #57	; 0x39
 801f132:	d9e6      	bls.n	801f102 <ee_skip_atoi+0xe>
  return i;
 801f134:	68fb      	ldr	r3, [r7, #12]
}
 801f136:	4618      	mov	r0, r3
 801f138:	3714      	adds	r7, #20
 801f13a:	46bd      	mov	sp, r7
 801f13c:	bc80      	pop	{r7}
 801f13e:	4770      	bx	lr

0801f140 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801f140:	b480      	push	{r7}
 801f142:	b099      	sub	sp, #100	; 0x64
 801f144:	af00      	add	r7, sp, #0
 801f146:	60f8      	str	r0, [r7, #12]
 801f148:	60b9      	str	r1, [r7, #8]
 801f14a:	607a      	str	r2, [r7, #4]
 801f14c:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801f14e:	4b71      	ldr	r3, [pc, #452]	; (801f314 <ee_number+0x1d4>)
 801f150:	681b      	ldr	r3, [r3, #0]
 801f152:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801f154:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	d002      	beq.n	801f164 <ee_number+0x24>
 801f15e:	4b6e      	ldr	r3, [pc, #440]	; (801f318 <ee_number+0x1d8>)
 801f160:	681b      	ldr	r3, [r3, #0]
 801f162:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801f164:	683b      	ldr	r3, [r7, #0]
 801f166:	2b01      	cmp	r3, #1
 801f168:	dd02      	ble.n	801f170 <ee_number+0x30>
 801f16a:	683b      	ldr	r3, [r7, #0]
 801f16c:	2b24      	cmp	r3, #36	; 0x24
 801f16e:	dd01      	ble.n	801f174 <ee_number+0x34>
 801f170:	2300      	movs	r3, #0
 801f172:	e0ca      	b.n	801f30a <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801f174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f176:	f003 0301 	and.w	r3, r3, #1
 801f17a:	2b00      	cmp	r3, #0
 801f17c:	d001      	beq.n	801f182 <ee_number+0x42>
 801f17e:	2330      	movs	r3, #48	; 0x30
 801f180:	e000      	b.n	801f184 <ee_number+0x44>
 801f182:	2320      	movs	r3, #32
 801f184:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801f188:	2300      	movs	r3, #0
 801f18a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801f18e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f190:	f003 0302 	and.w	r3, r3, #2
 801f194:	2b00      	cmp	r3, #0
 801f196:	d00b      	beq.n	801f1b0 <ee_number+0x70>
  {
    if (num < 0)
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	2b00      	cmp	r3, #0
 801f19c:	da08      	bge.n	801f1b0 <ee_number+0x70>
    {
      sign = '-';
 801f19e:	232d      	movs	r3, #45	; 0x2d
 801f1a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801f1a4:	687b      	ldr	r3, [r7, #4]
 801f1a6:	425b      	negs	r3, r3
 801f1a8:	607b      	str	r3, [r7, #4]
      size--;
 801f1aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f1ac:	3b01      	subs	r3, #1
 801f1ae:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801f1b0:	2300      	movs	r3, #0
 801f1b2:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	d11e      	bne.n	801f1f8 <ee_number+0xb8>
    tmp[i++] = '0';
 801f1ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f1bc:	1c5a      	adds	r2, r3, #1
 801f1be:	657a      	str	r2, [r7, #84]	; 0x54
 801f1c0:	3360      	adds	r3, #96	; 0x60
 801f1c2:	443b      	add	r3, r7
 801f1c4:	2230      	movs	r2, #48	; 0x30
 801f1c6:	f803 2c50 	strb.w	r2, [r3, #-80]
 801f1ca:	e018      	b.n	801f1fe <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	683a      	ldr	r2, [r7, #0]
 801f1d0:	fbb3 f1f2 	udiv	r1, r3, r2
 801f1d4:	fb01 f202 	mul.w	r2, r1, r2
 801f1d8:	1a9b      	subs	r3, r3, r2
 801f1da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f1dc:	441a      	add	r2, r3
 801f1de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f1e0:	1c59      	adds	r1, r3, #1
 801f1e2:	6579      	str	r1, [r7, #84]	; 0x54
 801f1e4:	7812      	ldrb	r2, [r2, #0]
 801f1e6:	3360      	adds	r3, #96	; 0x60
 801f1e8:	443b      	add	r3, r7
 801f1ea:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801f1ee:	687a      	ldr	r2, [r7, #4]
 801f1f0:	683b      	ldr	r3, [r7, #0]
 801f1f2:	fbb2 f3f3 	udiv	r3, r2, r3
 801f1f6:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801f1f8:	687b      	ldr	r3, [r7, #4]
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	d1e6      	bne.n	801f1cc <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801f1fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f202:	429a      	cmp	r2, r3
 801f204:	dd01      	ble.n	801f20a <ee_number+0xca>
 801f206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f208:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801f20a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801f20c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f20e:	1ad3      	subs	r3, r2, r3
 801f210:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801f212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f214:	f003 0301 	and.w	r3, r3, #1
 801f218:	2b00      	cmp	r3, #0
 801f21a:	d112      	bne.n	801f242 <ee_number+0x102>
 801f21c:	e00c      	b.n	801f238 <ee_number+0xf8>
 801f21e:	68fb      	ldr	r3, [r7, #12]
 801f220:	1c5a      	adds	r2, r3, #1
 801f222:	60fa      	str	r2, [r7, #12]
 801f224:	2220      	movs	r2, #32
 801f226:	701a      	strb	r2, [r3, #0]
 801f228:	68bb      	ldr	r3, [r7, #8]
 801f22a:	3b01      	subs	r3, #1
 801f22c:	60bb      	str	r3, [r7, #8]
 801f22e:	68bb      	ldr	r3, [r7, #8]
 801f230:	2b00      	cmp	r3, #0
 801f232:	d101      	bne.n	801f238 <ee_number+0xf8>
 801f234:	68fb      	ldr	r3, [r7, #12]
 801f236:	e068      	b.n	801f30a <ee_number+0x1ca>
 801f238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f23a:	1e5a      	subs	r2, r3, #1
 801f23c:	66ba      	str	r2, [r7, #104]	; 0x68
 801f23e:	2b00      	cmp	r3, #0
 801f240:	dced      	bgt.n	801f21e <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801f242:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801f246:	2b00      	cmp	r3, #0
 801f248:	d01b      	beq.n	801f282 <ee_number+0x142>
 801f24a:	68fb      	ldr	r3, [r7, #12]
 801f24c:	1c5a      	adds	r2, r3, #1
 801f24e:	60fa      	str	r2, [r7, #12]
 801f250:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801f254:	701a      	strb	r2, [r3, #0]
 801f256:	68bb      	ldr	r3, [r7, #8]
 801f258:	3b01      	subs	r3, #1
 801f25a:	60bb      	str	r3, [r7, #8]
 801f25c:	68bb      	ldr	r3, [r7, #8]
 801f25e:	2b00      	cmp	r3, #0
 801f260:	d10f      	bne.n	801f282 <ee_number+0x142>
 801f262:	68fb      	ldr	r3, [r7, #12]
 801f264:	e051      	b.n	801f30a <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801f266:	68fb      	ldr	r3, [r7, #12]
 801f268:	1c5a      	adds	r2, r3, #1
 801f26a:	60fa      	str	r2, [r7, #12]
 801f26c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801f270:	701a      	strb	r2, [r3, #0]
 801f272:	68bb      	ldr	r3, [r7, #8]
 801f274:	3b01      	subs	r3, #1
 801f276:	60bb      	str	r3, [r7, #8]
 801f278:	68bb      	ldr	r3, [r7, #8]
 801f27a:	2b00      	cmp	r3, #0
 801f27c:	d101      	bne.n	801f282 <ee_number+0x142>
 801f27e:	68fb      	ldr	r3, [r7, #12]
 801f280:	e043      	b.n	801f30a <ee_number+0x1ca>
 801f282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f284:	1e5a      	subs	r2, r3, #1
 801f286:	66ba      	str	r2, [r7, #104]	; 0x68
 801f288:	2b00      	cmp	r3, #0
 801f28a:	dcec      	bgt.n	801f266 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801f28c:	e00c      	b.n	801f2a8 <ee_number+0x168>
 801f28e:	68fb      	ldr	r3, [r7, #12]
 801f290:	1c5a      	adds	r2, r3, #1
 801f292:	60fa      	str	r2, [r7, #12]
 801f294:	2230      	movs	r2, #48	; 0x30
 801f296:	701a      	strb	r2, [r3, #0]
 801f298:	68bb      	ldr	r3, [r7, #8]
 801f29a:	3b01      	subs	r3, #1
 801f29c:	60bb      	str	r3, [r7, #8]
 801f29e:	68bb      	ldr	r3, [r7, #8]
 801f2a0:	2b00      	cmp	r3, #0
 801f2a2:	d101      	bne.n	801f2a8 <ee_number+0x168>
 801f2a4:	68fb      	ldr	r3, [r7, #12]
 801f2a6:	e030      	b.n	801f30a <ee_number+0x1ca>
 801f2a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f2aa:	1e5a      	subs	r2, r3, #1
 801f2ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 801f2ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f2b0:	429a      	cmp	r2, r3
 801f2b2:	dbec      	blt.n	801f28e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801f2b4:	e010      	b.n	801f2d8 <ee_number+0x198>
 801f2b6:	68fb      	ldr	r3, [r7, #12]
 801f2b8:	1c5a      	adds	r2, r3, #1
 801f2ba:	60fa      	str	r2, [r7, #12]
 801f2bc:	f107 0110 	add.w	r1, r7, #16
 801f2c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f2c2:	440a      	add	r2, r1
 801f2c4:	7812      	ldrb	r2, [r2, #0]
 801f2c6:	701a      	strb	r2, [r3, #0]
 801f2c8:	68bb      	ldr	r3, [r7, #8]
 801f2ca:	3b01      	subs	r3, #1
 801f2cc:	60bb      	str	r3, [r7, #8]
 801f2ce:	68bb      	ldr	r3, [r7, #8]
 801f2d0:	2b00      	cmp	r3, #0
 801f2d2:	d101      	bne.n	801f2d8 <ee_number+0x198>
 801f2d4:	68fb      	ldr	r3, [r7, #12]
 801f2d6:	e018      	b.n	801f30a <ee_number+0x1ca>
 801f2d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f2da:	1e5a      	subs	r2, r3, #1
 801f2dc:	657a      	str	r2, [r7, #84]	; 0x54
 801f2de:	2b00      	cmp	r3, #0
 801f2e0:	dce9      	bgt.n	801f2b6 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801f2e2:	e00c      	b.n	801f2fe <ee_number+0x1be>
 801f2e4:	68fb      	ldr	r3, [r7, #12]
 801f2e6:	1c5a      	adds	r2, r3, #1
 801f2e8:	60fa      	str	r2, [r7, #12]
 801f2ea:	2220      	movs	r2, #32
 801f2ec:	701a      	strb	r2, [r3, #0]
 801f2ee:	68bb      	ldr	r3, [r7, #8]
 801f2f0:	3b01      	subs	r3, #1
 801f2f2:	60bb      	str	r3, [r7, #8]
 801f2f4:	68bb      	ldr	r3, [r7, #8]
 801f2f6:	2b00      	cmp	r3, #0
 801f2f8:	d101      	bne.n	801f2fe <ee_number+0x1be>
 801f2fa:	68fb      	ldr	r3, [r7, #12]
 801f2fc:	e005      	b.n	801f30a <ee_number+0x1ca>
 801f2fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f300:	1e5a      	subs	r2, r3, #1
 801f302:	66ba      	str	r2, [r7, #104]	; 0x68
 801f304:	2b00      	cmp	r3, #0
 801f306:	dced      	bgt.n	801f2e4 <ee_number+0x1a4>

  return str;
 801f308:	68fb      	ldr	r3, [r7, #12]
}
 801f30a:	4618      	mov	r0, r3
 801f30c:	3764      	adds	r7, #100	; 0x64
 801f30e:	46bd      	mov	sp, r7
 801f310:	bc80      	pop	{r7}
 801f312:	4770      	bx	lr
 801f314:	20000138 	.word	0x20000138
 801f318:	2000013c 	.word	0x2000013c

0801f31c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801f31c:	b580      	push	{r7, lr}
 801f31e:	b092      	sub	sp, #72	; 0x48
 801f320:	af04      	add	r7, sp, #16
 801f322:	60f8      	str	r0, [r7, #12]
 801f324:	60b9      	str	r1, [r7, #8]
 801f326:	607a      	str	r2, [r7, #4]
 801f328:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801f32a:	68bb      	ldr	r3, [r7, #8]
 801f32c:	2b00      	cmp	r3, #0
 801f32e:	dc01      	bgt.n	801f334 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801f330:	2300      	movs	r3, #0
 801f332:	e142      	b.n	801f5ba <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801f334:	68fb      	ldr	r3, [r7, #12]
 801f336:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f338:	e12a      	b.n	801f590 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801f33a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f33c:	68fb      	ldr	r3, [r7, #12]
 801f33e:	1ad2      	subs	r2, r2, r3
 801f340:	68bb      	ldr	r3, [r7, #8]
 801f342:	3b01      	subs	r3, #1
 801f344:	429a      	cmp	r2, r3
 801f346:	f280 8131 	bge.w	801f5ac <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801f34a:	687b      	ldr	r3, [r7, #4]
 801f34c:	781b      	ldrb	r3, [r3, #0]
 801f34e:	2b25      	cmp	r3, #37	; 0x25
 801f350:	d006      	beq.n	801f360 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801f352:	687a      	ldr	r2, [r7, #4]
 801f354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f356:	1c59      	adds	r1, r3, #1
 801f358:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f35a:	7812      	ldrb	r2, [r2, #0]
 801f35c:	701a      	strb	r2, [r3, #0]
      continue;
 801f35e:	e114      	b.n	801f58a <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801f360:	2300      	movs	r3, #0
 801f362:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801f364:	687b      	ldr	r3, [r7, #4]
 801f366:	3301      	adds	r3, #1
 801f368:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801f36a:	687b      	ldr	r3, [r7, #4]
 801f36c:	781b      	ldrb	r3, [r3, #0]
 801f36e:	2b30      	cmp	r3, #48	; 0x30
 801f370:	d103      	bne.n	801f37a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801f372:	6a3b      	ldr	r3, [r7, #32]
 801f374:	f043 0301 	orr.w	r3, r3, #1
 801f378:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801f37a:	f04f 33ff 	mov.w	r3, #4294967295
 801f37e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801f380:	687b      	ldr	r3, [r7, #4]
 801f382:	781b      	ldrb	r3, [r3, #0]
 801f384:	2b2f      	cmp	r3, #47	; 0x2f
 801f386:	d908      	bls.n	801f39a <tiny_vsnprintf_like+0x7e>
 801f388:	687b      	ldr	r3, [r7, #4]
 801f38a:	781b      	ldrb	r3, [r3, #0]
 801f38c:	2b39      	cmp	r3, #57	; 0x39
 801f38e:	d804      	bhi.n	801f39a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801f390:	1d3b      	adds	r3, r7, #4
 801f392:	4618      	mov	r0, r3
 801f394:	f7ff feae 	bl	801f0f4 <ee_skip_atoi>
 801f398:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801f39a:	f04f 33ff 	mov.w	r3, #4294967295
 801f39e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801f3a0:	f04f 33ff 	mov.w	r3, #4294967295
 801f3a4:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801f3a6:	230a      	movs	r3, #10
 801f3a8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801f3aa:	687b      	ldr	r3, [r7, #4]
 801f3ac:	781b      	ldrb	r3, [r3, #0]
 801f3ae:	3b58      	subs	r3, #88	; 0x58
 801f3b0:	2b20      	cmp	r3, #32
 801f3b2:	f200 8094 	bhi.w	801f4de <tiny_vsnprintf_like+0x1c2>
 801f3b6:	a201      	add	r2, pc, #4	; (adr r2, 801f3bc <tiny_vsnprintf_like+0xa0>)
 801f3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3bc:	0801f4c7 	.word	0x0801f4c7
 801f3c0:	0801f4df 	.word	0x0801f4df
 801f3c4:	0801f4df 	.word	0x0801f4df
 801f3c8:	0801f4df 	.word	0x0801f4df
 801f3cc:	0801f4df 	.word	0x0801f4df
 801f3d0:	0801f4df 	.word	0x0801f4df
 801f3d4:	0801f4df 	.word	0x0801f4df
 801f3d8:	0801f4df 	.word	0x0801f4df
 801f3dc:	0801f4df 	.word	0x0801f4df
 801f3e0:	0801f4df 	.word	0x0801f4df
 801f3e4:	0801f4df 	.word	0x0801f4df
 801f3e8:	0801f44b 	.word	0x0801f44b
 801f3ec:	0801f4d5 	.word	0x0801f4d5
 801f3f0:	0801f4df 	.word	0x0801f4df
 801f3f4:	0801f4df 	.word	0x0801f4df
 801f3f8:	0801f4df 	.word	0x0801f4df
 801f3fc:	0801f4df 	.word	0x0801f4df
 801f400:	0801f4d5 	.word	0x0801f4d5
 801f404:	0801f4df 	.word	0x0801f4df
 801f408:	0801f4df 	.word	0x0801f4df
 801f40c:	0801f4df 	.word	0x0801f4df
 801f410:	0801f4df 	.word	0x0801f4df
 801f414:	0801f4df 	.word	0x0801f4df
 801f418:	0801f4df 	.word	0x0801f4df
 801f41c:	0801f4df 	.word	0x0801f4df
 801f420:	0801f4df 	.word	0x0801f4df
 801f424:	0801f4df 	.word	0x0801f4df
 801f428:	0801f46b 	.word	0x0801f46b
 801f42c:	0801f4df 	.word	0x0801f4df
 801f430:	0801f52b 	.word	0x0801f52b
 801f434:	0801f4df 	.word	0x0801f4df
 801f438:	0801f4df 	.word	0x0801f4df
 801f43c:	0801f4cf 	.word	0x0801f4cf
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801f440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f442:	1c5a      	adds	r2, r3, #1
 801f444:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f446:	2220      	movs	r2, #32
 801f448:	701a      	strb	r2, [r3, #0]
 801f44a:	69fb      	ldr	r3, [r7, #28]
 801f44c:	3b01      	subs	r3, #1
 801f44e:	61fb      	str	r3, [r7, #28]
 801f450:	69fb      	ldr	r3, [r7, #28]
 801f452:	2b00      	cmp	r3, #0
 801f454:	dcf4      	bgt.n	801f440 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801f456:	683b      	ldr	r3, [r7, #0]
 801f458:	1d1a      	adds	r2, r3, #4
 801f45a:	603a      	str	r2, [r7, #0]
 801f45c:	6819      	ldr	r1, [r3, #0]
 801f45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f460:	1c5a      	adds	r2, r3, #1
 801f462:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f464:	b2ca      	uxtb	r2, r1
 801f466:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801f468:	e08f      	b.n	801f58a <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801f46a:	683b      	ldr	r3, [r7, #0]
 801f46c:	1d1a      	adds	r2, r3, #4
 801f46e:	603a      	str	r2, [r7, #0]
 801f470:	681b      	ldr	r3, [r3, #0]
 801f472:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801f474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f476:	2b00      	cmp	r3, #0
 801f478:	d101      	bne.n	801f47e <tiny_vsnprintf_like+0x162>
 801f47a:	4b52      	ldr	r3, [pc, #328]	; (801f5c4 <tiny_vsnprintf_like+0x2a8>)
 801f47c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801f47e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f480:	f7e0 fe7a 	bl	8000178 <strlen>
 801f484:	4603      	mov	r3, r0
 801f486:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801f488:	e004      	b.n	801f494 <tiny_vsnprintf_like+0x178>
 801f48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f48c:	1c5a      	adds	r2, r3, #1
 801f48e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f490:	2220      	movs	r2, #32
 801f492:	701a      	strb	r2, [r3, #0]
 801f494:	69fb      	ldr	r3, [r7, #28]
 801f496:	1e5a      	subs	r2, r3, #1
 801f498:	61fa      	str	r2, [r7, #28]
 801f49a:	693a      	ldr	r2, [r7, #16]
 801f49c:	429a      	cmp	r2, r3
 801f49e:	dbf4      	blt.n	801f48a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801f4a0:	2300      	movs	r3, #0
 801f4a2:	62bb      	str	r3, [r7, #40]	; 0x28
 801f4a4:	e00a      	b.n	801f4bc <tiny_vsnprintf_like+0x1a0>
 801f4a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f4a8:	1c53      	adds	r3, r2, #1
 801f4aa:	627b      	str	r3, [r7, #36]	; 0x24
 801f4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4ae:	1c59      	adds	r1, r3, #1
 801f4b0:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f4b2:	7812      	ldrb	r2, [r2, #0]
 801f4b4:	701a      	strb	r2, [r3, #0]
 801f4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4b8:	3301      	adds	r3, #1
 801f4ba:	62bb      	str	r3, [r7, #40]	; 0x28
 801f4bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f4be:	693b      	ldr	r3, [r7, #16]
 801f4c0:	429a      	cmp	r2, r3
 801f4c2:	dbf0      	blt.n	801f4a6 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801f4c4:	e061      	b.n	801f58a <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801f4c6:	6a3b      	ldr	r3, [r7, #32]
 801f4c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f4cc:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801f4ce:	2310      	movs	r3, #16
 801f4d0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801f4d2:	e02d      	b.n	801f530 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801f4d4:	6a3b      	ldr	r3, [r7, #32]
 801f4d6:	f043 0302 	orr.w	r3, r3, #2
 801f4da:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801f4dc:	e025      	b.n	801f52a <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801f4de:	687b      	ldr	r3, [r7, #4]
 801f4e0:	781b      	ldrb	r3, [r3, #0]
 801f4e2:	2b25      	cmp	r3, #37	; 0x25
 801f4e4:	d004      	beq.n	801f4f0 <tiny_vsnprintf_like+0x1d4>
 801f4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4e8:	1c5a      	adds	r2, r3, #1
 801f4ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f4ec:	2225      	movs	r2, #37	; 0x25
 801f4ee:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801f4f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f4f2:	68fb      	ldr	r3, [r7, #12]
 801f4f4:	1ad2      	subs	r2, r2, r3
 801f4f6:	68bb      	ldr	r3, [r7, #8]
 801f4f8:	3b01      	subs	r3, #1
 801f4fa:	429a      	cmp	r2, r3
 801f4fc:	da17      	bge.n	801f52e <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801f4fe:	687b      	ldr	r3, [r7, #4]
 801f500:	781b      	ldrb	r3, [r3, #0]
 801f502:	2b00      	cmp	r3, #0
 801f504:	d006      	beq.n	801f514 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801f506:	687a      	ldr	r2, [r7, #4]
 801f508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f50a:	1c59      	adds	r1, r3, #1
 801f50c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f50e:	7812      	ldrb	r2, [r2, #0]
 801f510:	701a      	strb	r2, [r3, #0]
 801f512:	e002      	b.n	801f51a <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801f514:	687b      	ldr	r3, [r7, #4]
 801f516:	3b01      	subs	r3, #1
 801f518:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801f51a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f51c:	68fb      	ldr	r3, [r7, #12]
 801f51e:	1ad2      	subs	r2, r2, r3
 801f520:	68bb      	ldr	r3, [r7, #8]
 801f522:	3b01      	subs	r3, #1
 801f524:	429a      	cmp	r2, r3
 801f526:	db2f      	blt.n	801f588 <tiny_vsnprintf_like+0x26c>
 801f528:	e002      	b.n	801f530 <tiny_vsnprintf_like+0x214>
        break;
 801f52a:	bf00      	nop
 801f52c:	e000      	b.n	801f530 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801f52e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801f530:	697b      	ldr	r3, [r7, #20]
 801f532:	2b6c      	cmp	r3, #108	; 0x6c
 801f534:	d105      	bne.n	801f542 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801f536:	683b      	ldr	r3, [r7, #0]
 801f538:	1d1a      	adds	r2, r3, #4
 801f53a:	603a      	str	r2, [r7, #0]
 801f53c:	681b      	ldr	r3, [r3, #0]
 801f53e:	637b      	str	r3, [r7, #52]	; 0x34
 801f540:	e00f      	b.n	801f562 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801f542:	6a3b      	ldr	r3, [r7, #32]
 801f544:	f003 0302 	and.w	r3, r3, #2
 801f548:	2b00      	cmp	r3, #0
 801f54a:	d005      	beq.n	801f558 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801f54c:	683b      	ldr	r3, [r7, #0]
 801f54e:	1d1a      	adds	r2, r3, #4
 801f550:	603a      	str	r2, [r7, #0]
 801f552:	681b      	ldr	r3, [r3, #0]
 801f554:	637b      	str	r3, [r7, #52]	; 0x34
 801f556:	e004      	b.n	801f562 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801f558:	683b      	ldr	r3, [r7, #0]
 801f55a:	1d1a      	adds	r2, r3, #4
 801f55c:	603a      	str	r2, [r7, #0]
 801f55e:	681b      	ldr	r3, [r3, #0]
 801f560:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801f562:	68bb      	ldr	r3, [r7, #8]
 801f564:	1e5a      	subs	r2, r3, #1
 801f566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f568:	68fb      	ldr	r3, [r7, #12]
 801f56a:	1acb      	subs	r3, r1, r3
 801f56c:	1ad1      	subs	r1, r2, r3
 801f56e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f570:	6a3b      	ldr	r3, [r7, #32]
 801f572:	9302      	str	r3, [sp, #8]
 801f574:	69bb      	ldr	r3, [r7, #24]
 801f576:	9301      	str	r3, [sp, #4]
 801f578:	69fb      	ldr	r3, [r7, #28]
 801f57a:	9300      	str	r3, [sp, #0]
 801f57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f57e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f580:	f7ff fdde 	bl	801f140 <ee_number>
 801f584:	62f8      	str	r0, [r7, #44]	; 0x2c
 801f586:	e000      	b.n	801f58a <tiny_vsnprintf_like+0x26e>
        continue;
 801f588:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801f58a:	687b      	ldr	r3, [r7, #4]
 801f58c:	3301      	adds	r3, #1
 801f58e:	607b      	str	r3, [r7, #4]
 801f590:	687b      	ldr	r3, [r7, #4]
 801f592:	781b      	ldrb	r3, [r3, #0]
 801f594:	2b00      	cmp	r3, #0
 801f596:	f47f aed0 	bne.w	801f33a <tiny_vsnprintf_like+0x1e>
 801f59a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f59c:	68fb      	ldr	r3, [r7, #12]
 801f59e:	1ad2      	subs	r2, r2, r3
 801f5a0:	68bb      	ldr	r3, [r7, #8]
 801f5a2:	3b01      	subs	r3, #1
 801f5a4:	429a      	cmp	r2, r3
 801f5a6:	f6bf aec8 	bge.w	801f33a <tiny_vsnprintf_like+0x1e>
 801f5aa:	e000      	b.n	801f5ae <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801f5ac:	bf00      	nop
  }

  *str = '\0';
 801f5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5b0:	2200      	movs	r2, #0
 801f5b2:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801f5b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f5b6:	68fb      	ldr	r3, [r7, #12]
 801f5b8:	1ad3      	subs	r3, r2, r3
}
 801f5ba:	4618      	mov	r0, r3
 801f5bc:	3738      	adds	r7, #56	; 0x38
 801f5be:	46bd      	mov	sp, r7
 801f5c0:	bd80      	pop	{r7, pc}
 801f5c2:	bf00      	nop
 801f5c4:	08021a0c 	.word	0x08021a0c

0801f5c8 <UTIL_SEQ_RegTask>:

  return;
}

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801f5c8:	b580      	push	{r7, lr}
 801f5ca:	b088      	sub	sp, #32
 801f5cc:	af00      	add	r7, sp, #0
 801f5ce:	60f8      	str	r0, [r7, #12]
 801f5d0:	60b9      	str	r1, [r7, #8]
 801f5d2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f5d4:	f3ef 8310 	mrs	r3, PRIMASK
 801f5d8:	617b      	str	r3, [r7, #20]
  return(result);
 801f5da:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801f5dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f5de:	b672      	cpsid	i
}
 801f5e0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801f5e2:	68f8      	ldr	r0, [r7, #12]
 801f5e4:	f000 f83e 	bl	801f664 <SEQ_BitPosition>
 801f5e8:	4603      	mov	r3, r0
 801f5ea:	4619      	mov	r1, r3
 801f5ec:	4a06      	ldr	r2, [pc, #24]	; (801f608 <UTIL_SEQ_RegTask+0x40>)
 801f5ee:	687b      	ldr	r3, [r7, #4]
 801f5f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801f5f4:	69fb      	ldr	r3, [r7, #28]
 801f5f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f5f8:	69bb      	ldr	r3, [r7, #24]
 801f5fa:	f383 8810 	msr	PRIMASK, r3
}
 801f5fe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801f600:	bf00      	nop
}
 801f602:	3720      	adds	r7, #32
 801f604:	46bd      	mov	sp, r7
 801f606:	bd80      	pop	{r7, pc}
 801f608:	20001c88 	.word	0x20001c88

0801f60c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801f60c:	b480      	push	{r7}
 801f60e:	b087      	sub	sp, #28
 801f610:	af00      	add	r7, sp, #0
 801f612:	6078      	str	r0, [r7, #4]
 801f614:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f616:	f3ef 8310 	mrs	r3, PRIMASK
 801f61a:	60fb      	str	r3, [r7, #12]
  return(result);
 801f61c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801f61e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f620:	b672      	cpsid	i
}
 801f622:	bf00      	nop

  TaskSet |= TaskId_bm;
 801f624:	4b0d      	ldr	r3, [pc, #52]	; (801f65c <UTIL_SEQ_SetTask+0x50>)
 801f626:	681a      	ldr	r2, [r3, #0]
 801f628:	687b      	ldr	r3, [r7, #4]
 801f62a:	4313      	orrs	r3, r2
 801f62c:	4a0b      	ldr	r2, [pc, #44]	; (801f65c <UTIL_SEQ_SetTask+0x50>)
 801f62e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801f630:	4a0b      	ldr	r2, [pc, #44]	; (801f660 <UTIL_SEQ_SetTask+0x54>)
 801f632:	683b      	ldr	r3, [r7, #0]
 801f634:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	431a      	orrs	r2, r3
 801f63c:	4908      	ldr	r1, [pc, #32]	; (801f660 <UTIL_SEQ_SetTask+0x54>)
 801f63e:	683b      	ldr	r3, [r7, #0]
 801f640:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801f644:	697b      	ldr	r3, [r7, #20]
 801f646:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f648:	693b      	ldr	r3, [r7, #16]
 801f64a:	f383 8810 	msr	PRIMASK, r3
}
 801f64e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801f650:	bf00      	nop
}
 801f652:	371c      	adds	r7, #28
 801f654:	46bd      	mov	sp, r7
 801f656:	bc80      	pop	{r7}
 801f658:	4770      	bx	lr
 801f65a:	bf00      	nop
 801f65c:	20001c84 	.word	0x20001c84
 801f660:	20001c98 	.word	0x20001c98

0801f664 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801f664:	b480      	push	{r7}
 801f666:	b085      	sub	sp, #20
 801f668:	af00      	add	r7, sp, #0
 801f66a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801f66c:	2300      	movs	r3, #0
 801f66e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801f670:	687b      	ldr	r3, [r7, #4]
 801f672:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801f674:	68bb      	ldr	r3, [r7, #8]
 801f676:	0c1b      	lsrs	r3, r3, #16
 801f678:	041b      	lsls	r3, r3, #16
 801f67a:	2b00      	cmp	r3, #0
 801f67c:	d104      	bne.n	801f688 <SEQ_BitPosition+0x24>
 801f67e:	2310      	movs	r3, #16
 801f680:	73fb      	strb	r3, [r7, #15]
 801f682:	68bb      	ldr	r3, [r7, #8]
 801f684:	041b      	lsls	r3, r3, #16
 801f686:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801f688:	68bb      	ldr	r3, [r7, #8]
 801f68a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801f68e:	2b00      	cmp	r3, #0
 801f690:	d105      	bne.n	801f69e <SEQ_BitPosition+0x3a>
 801f692:	7bfb      	ldrb	r3, [r7, #15]
 801f694:	3308      	adds	r3, #8
 801f696:	73fb      	strb	r3, [r7, #15]
 801f698:	68bb      	ldr	r3, [r7, #8]
 801f69a:	021b      	lsls	r3, r3, #8
 801f69c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801f69e:	68bb      	ldr	r3, [r7, #8]
 801f6a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801f6a4:	2b00      	cmp	r3, #0
 801f6a6:	d105      	bne.n	801f6b4 <SEQ_BitPosition+0x50>
 801f6a8:	7bfb      	ldrb	r3, [r7, #15]
 801f6aa:	3304      	adds	r3, #4
 801f6ac:	73fb      	strb	r3, [r7, #15]
 801f6ae:	68bb      	ldr	r3, [r7, #8]
 801f6b0:	011b      	lsls	r3, r3, #4
 801f6b2:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801f6b4:	68bb      	ldr	r3, [r7, #8]
 801f6b6:	0f1b      	lsrs	r3, r3, #28
 801f6b8:	4a06      	ldr	r2, [pc, #24]	; (801f6d4 <SEQ_BitPosition+0x70>)
 801f6ba:	5cd2      	ldrb	r2, [r2, r3]
 801f6bc:	7bfb      	ldrb	r3, [r7, #15]
 801f6be:	4413      	add	r3, r2
 801f6c0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801f6c2:	7bfb      	ldrb	r3, [r7, #15]
 801f6c4:	f1c3 031f 	rsb	r3, r3, #31
 801f6c8:	b2db      	uxtb	r3, r3
}
 801f6ca:	4618      	mov	r0, r3
 801f6cc:	3714      	adds	r7, #20
 801f6ce:	46bd      	mov	sp, r7
 801f6d0:	bc80      	pop	{r7}
 801f6d2:	4770      	bx	lr
 801f6d4:	080220bc 	.word	0x080220bc

0801f6d8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801f6d8:	b580      	push	{r7, lr}
 801f6da:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801f6dc:	4b04      	ldr	r3, [pc, #16]	; (801f6f0 <UTIL_TIMER_Init+0x18>)
 801f6de:	2200      	movs	r2, #0
 801f6e0:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801f6e2:	4b04      	ldr	r3, [pc, #16]	; (801f6f4 <UTIL_TIMER_Init+0x1c>)
 801f6e4:	681b      	ldr	r3, [r3, #0]
 801f6e6:	4798      	blx	r3
 801f6e8:	4603      	mov	r3, r0
}
 801f6ea:	4618      	mov	r0, r3
 801f6ec:	bd80      	pop	{r7, pc}
 801f6ee:	bf00      	nop
 801f6f0:	20001ca0 	.word	0x20001ca0
 801f6f4:	08021ab4 	.word	0x08021ab4

0801f6f8 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801f6f8:	b580      	push	{r7, lr}
 801f6fa:	b084      	sub	sp, #16
 801f6fc:	af00      	add	r7, sp, #0
 801f6fe:	60f8      	str	r0, [r7, #12]
 801f700:	60b9      	str	r1, [r7, #8]
 801f702:	603b      	str	r3, [r7, #0]
 801f704:	4613      	mov	r3, r2
 801f706:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801f708:	68fb      	ldr	r3, [r7, #12]
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	d023      	beq.n	801f756 <UTIL_TIMER_Create+0x5e>
 801f70e:	683b      	ldr	r3, [r7, #0]
 801f710:	2b00      	cmp	r3, #0
 801f712:	d020      	beq.n	801f756 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801f714:	68fb      	ldr	r3, [r7, #12]
 801f716:	2200      	movs	r2, #0
 801f718:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801f71a:	4b11      	ldr	r3, [pc, #68]	; (801f760 <UTIL_TIMER_Create+0x68>)
 801f71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f71e:	68b8      	ldr	r0, [r7, #8]
 801f720:	4798      	blx	r3
 801f722:	4602      	mov	r2, r0
 801f724:	68fb      	ldr	r3, [r7, #12]
 801f726:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801f728:	68fb      	ldr	r3, [r7, #12]
 801f72a:	2200      	movs	r2, #0
 801f72c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801f72e:	68fb      	ldr	r3, [r7, #12]
 801f730:	2200      	movs	r2, #0
 801f732:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801f734:	68fb      	ldr	r3, [r7, #12]
 801f736:	2200      	movs	r2, #0
 801f738:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801f73a:	68fb      	ldr	r3, [r7, #12]
 801f73c:	683a      	ldr	r2, [r7, #0]
 801f73e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801f740:	68fb      	ldr	r3, [r7, #12]
 801f742:	69ba      	ldr	r2, [r7, #24]
 801f744:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801f746:	68fb      	ldr	r3, [r7, #12]
 801f748:	79fa      	ldrb	r2, [r7, #7]
 801f74a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801f74c:	68fb      	ldr	r3, [r7, #12]
 801f74e:	2200      	movs	r2, #0
 801f750:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801f752:	2300      	movs	r3, #0
 801f754:	e000      	b.n	801f758 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801f756:	2301      	movs	r3, #1
  }
}
 801f758:	4618      	mov	r0, r3
 801f75a:	3710      	adds	r7, #16
 801f75c:	46bd      	mov	sp, r7
 801f75e:	bd80      	pop	{r7, pc}
 801f760:	08021ab4 	.word	0x08021ab4

0801f764 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801f764:	b580      	push	{r7, lr}
 801f766:	b08a      	sub	sp, #40	; 0x28
 801f768:	af00      	add	r7, sp, #0
 801f76a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801f76c:	2300      	movs	r3, #0
 801f76e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801f772:	687b      	ldr	r3, [r7, #4]
 801f774:	2b00      	cmp	r3, #0
 801f776:	d056      	beq.n	801f826 <UTIL_TIMER_Start+0xc2>
 801f778:	6878      	ldr	r0, [r7, #4]
 801f77a:	f000 f9a9 	bl	801fad0 <TimerExists>
 801f77e:	4603      	mov	r3, r0
 801f780:	f083 0301 	eor.w	r3, r3, #1
 801f784:	b2db      	uxtb	r3, r3
 801f786:	2b00      	cmp	r3, #0
 801f788:	d04d      	beq.n	801f826 <UTIL_TIMER_Start+0xc2>
 801f78a:	687b      	ldr	r3, [r7, #4]
 801f78c:	7a5b      	ldrb	r3, [r3, #9]
 801f78e:	2b00      	cmp	r3, #0
 801f790:	d149      	bne.n	801f826 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f792:	f3ef 8310 	mrs	r3, PRIMASK
 801f796:	613b      	str	r3, [r7, #16]
  return(result);
 801f798:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801f79a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f79c:	b672      	cpsid	i
}
 801f79e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801f7a0:	687b      	ldr	r3, [r7, #4]
 801f7a2:	685b      	ldr	r3, [r3, #4]
 801f7a4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801f7a6:	4b24      	ldr	r3, [pc, #144]	; (801f838 <UTIL_TIMER_Start+0xd4>)
 801f7a8:	6a1b      	ldr	r3, [r3, #32]
 801f7aa:	4798      	blx	r3
 801f7ac:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801f7ae:	6a3a      	ldr	r2, [r7, #32]
 801f7b0:	69bb      	ldr	r3, [r7, #24]
 801f7b2:	429a      	cmp	r2, r3
 801f7b4:	d201      	bcs.n	801f7ba <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801f7b6:	69bb      	ldr	r3, [r7, #24]
 801f7b8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801f7ba:	687b      	ldr	r3, [r7, #4]
 801f7bc:	6a3a      	ldr	r2, [r7, #32]
 801f7be:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801f7c0:	687b      	ldr	r3, [r7, #4]
 801f7c2:	2200      	movs	r2, #0
 801f7c4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801f7c6:	687b      	ldr	r3, [r7, #4]
 801f7c8:	2201      	movs	r2, #1
 801f7ca:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	2200      	movs	r2, #0
 801f7d0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801f7d2:	4b1a      	ldr	r3, [pc, #104]	; (801f83c <UTIL_TIMER_Start+0xd8>)
 801f7d4:	681b      	ldr	r3, [r3, #0]
 801f7d6:	2b00      	cmp	r3, #0
 801f7d8:	d106      	bne.n	801f7e8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801f7da:	4b17      	ldr	r3, [pc, #92]	; (801f838 <UTIL_TIMER_Start+0xd4>)
 801f7dc:	691b      	ldr	r3, [r3, #16]
 801f7de:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801f7e0:	6878      	ldr	r0, [r7, #4]
 801f7e2:	f000 f9eb 	bl	801fbbc <TimerInsertNewHeadTimer>
 801f7e6:	e017      	b.n	801f818 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801f7e8:	4b13      	ldr	r3, [pc, #76]	; (801f838 <UTIL_TIMER_Start+0xd4>)
 801f7ea:	699b      	ldr	r3, [r3, #24]
 801f7ec:	4798      	blx	r3
 801f7ee:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801f7f0:	687b      	ldr	r3, [r7, #4]
 801f7f2:	681a      	ldr	r2, [r3, #0]
 801f7f4:	697b      	ldr	r3, [r7, #20]
 801f7f6:	441a      	add	r2, r3
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801f7fc:	687b      	ldr	r3, [r7, #4]
 801f7fe:	681a      	ldr	r2, [r3, #0]
 801f800:	4b0e      	ldr	r3, [pc, #56]	; (801f83c <UTIL_TIMER_Start+0xd8>)
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	681b      	ldr	r3, [r3, #0]
 801f806:	429a      	cmp	r2, r3
 801f808:	d203      	bcs.n	801f812 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801f80a:	6878      	ldr	r0, [r7, #4]
 801f80c:	f000 f9d6 	bl	801fbbc <TimerInsertNewHeadTimer>
 801f810:	e002      	b.n	801f818 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801f812:	6878      	ldr	r0, [r7, #4]
 801f814:	f000 f9a2 	bl	801fb5c <TimerInsertTimer>
 801f818:	69fb      	ldr	r3, [r7, #28]
 801f81a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f81c:	68fb      	ldr	r3, [r7, #12]
 801f81e:	f383 8810 	msr	PRIMASK, r3
}
 801f822:	bf00      	nop
  {
 801f824:	e002      	b.n	801f82c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801f826:	2301      	movs	r3, #1
 801f828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801f82c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801f830:	4618      	mov	r0, r3
 801f832:	3728      	adds	r7, #40	; 0x28
 801f834:	46bd      	mov	sp, r7
 801f836:	bd80      	pop	{r7, pc}
 801f838:	08021ab4 	.word	0x08021ab4
 801f83c:	20001ca0 	.word	0x20001ca0

0801f840 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801f840:	b580      	push	{r7, lr}
 801f842:	b088      	sub	sp, #32
 801f844:	af00      	add	r7, sp, #0
 801f846:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801f848:	2300      	movs	r3, #0
 801f84a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801f84c:	687b      	ldr	r3, [r7, #4]
 801f84e:	2b00      	cmp	r3, #0
 801f850:	d05b      	beq.n	801f90a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f852:	f3ef 8310 	mrs	r3, PRIMASK
 801f856:	60fb      	str	r3, [r7, #12]
  return(result);
 801f858:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801f85a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801f85c:	b672      	cpsid	i
}
 801f85e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801f860:	4b2d      	ldr	r3, [pc, #180]	; (801f918 <UTIL_TIMER_Stop+0xd8>)
 801f862:	681b      	ldr	r3, [r3, #0]
 801f864:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801f866:	4b2c      	ldr	r3, [pc, #176]	; (801f918 <UTIL_TIMER_Stop+0xd8>)
 801f868:	681b      	ldr	r3, [r3, #0]
 801f86a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801f86c:	687b      	ldr	r3, [r7, #4]
 801f86e:	2201      	movs	r2, #1
 801f870:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801f872:	4b29      	ldr	r3, [pc, #164]	; (801f918 <UTIL_TIMER_Stop+0xd8>)
 801f874:	681b      	ldr	r3, [r3, #0]
 801f876:	2b00      	cmp	r3, #0
 801f878:	d041      	beq.n	801f8fe <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801f87a:	687b      	ldr	r3, [r7, #4]
 801f87c:	2200      	movs	r2, #0
 801f87e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801f880:	4b25      	ldr	r3, [pc, #148]	; (801f918 <UTIL_TIMER_Stop+0xd8>)
 801f882:	681b      	ldr	r3, [r3, #0]
 801f884:	687a      	ldr	r2, [r7, #4]
 801f886:	429a      	cmp	r2, r3
 801f888:	d134      	bne.n	801f8f4 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801f88a:	4b23      	ldr	r3, [pc, #140]	; (801f918 <UTIL_TIMER_Stop+0xd8>)
 801f88c:	681b      	ldr	r3, [r3, #0]
 801f88e:	2200      	movs	r2, #0
 801f890:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801f892:	4b21      	ldr	r3, [pc, #132]	; (801f918 <UTIL_TIMER_Stop+0xd8>)
 801f894:	681b      	ldr	r3, [r3, #0]
 801f896:	695b      	ldr	r3, [r3, #20]
 801f898:	2b00      	cmp	r3, #0
 801f89a:	d00a      	beq.n	801f8b2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801f89c:	4b1e      	ldr	r3, [pc, #120]	; (801f918 <UTIL_TIMER_Stop+0xd8>)
 801f89e:	681b      	ldr	r3, [r3, #0]
 801f8a0:	695b      	ldr	r3, [r3, #20]
 801f8a2:	4a1d      	ldr	r2, [pc, #116]	; (801f918 <UTIL_TIMER_Stop+0xd8>)
 801f8a4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801f8a6:	4b1c      	ldr	r3, [pc, #112]	; (801f918 <UTIL_TIMER_Stop+0xd8>)
 801f8a8:	681b      	ldr	r3, [r3, #0]
 801f8aa:	4618      	mov	r0, r3
 801f8ac:	f000 f92c 	bl	801fb08 <TimerSetTimeout>
 801f8b0:	e023      	b.n	801f8fa <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801f8b2:	4b1a      	ldr	r3, [pc, #104]	; (801f91c <UTIL_TIMER_Stop+0xdc>)
 801f8b4:	68db      	ldr	r3, [r3, #12]
 801f8b6:	4798      	blx	r3
            TimerListHead = NULL;
 801f8b8:	4b17      	ldr	r3, [pc, #92]	; (801f918 <UTIL_TIMER_Stop+0xd8>)
 801f8ba:	2200      	movs	r2, #0
 801f8bc:	601a      	str	r2, [r3, #0]
 801f8be:	e01c      	b.n	801f8fa <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801f8c0:	697a      	ldr	r2, [r7, #20]
 801f8c2:	687b      	ldr	r3, [r7, #4]
 801f8c4:	429a      	cmp	r2, r3
 801f8c6:	d110      	bne.n	801f8ea <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801f8c8:	697b      	ldr	r3, [r7, #20]
 801f8ca:	695b      	ldr	r3, [r3, #20]
 801f8cc:	2b00      	cmp	r3, #0
 801f8ce:	d006      	beq.n	801f8de <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801f8d0:	697b      	ldr	r3, [r7, #20]
 801f8d2:	695b      	ldr	r3, [r3, #20]
 801f8d4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801f8d6:	69bb      	ldr	r3, [r7, #24]
 801f8d8:	697a      	ldr	r2, [r7, #20]
 801f8da:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801f8dc:	e00d      	b.n	801f8fa <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801f8de:	2300      	movs	r3, #0
 801f8e0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801f8e2:	69bb      	ldr	r3, [r7, #24]
 801f8e4:	697a      	ldr	r2, [r7, #20]
 801f8e6:	615a      	str	r2, [r3, #20]
            break;
 801f8e8:	e007      	b.n	801f8fa <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801f8ea:	697b      	ldr	r3, [r7, #20]
 801f8ec:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801f8ee:	697b      	ldr	r3, [r7, #20]
 801f8f0:	695b      	ldr	r3, [r3, #20]
 801f8f2:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801f8f4:	697b      	ldr	r3, [r7, #20]
 801f8f6:	2b00      	cmp	r3, #0
 801f8f8:	d1e2      	bne.n	801f8c0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801f8fa:	2300      	movs	r3, #0
 801f8fc:	77fb      	strb	r3, [r7, #31]
 801f8fe:	693b      	ldr	r3, [r7, #16]
 801f900:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f902:	68bb      	ldr	r3, [r7, #8]
 801f904:	f383 8810 	msr	PRIMASK, r3
}
 801f908:	e001      	b.n	801f90e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801f90a:	2301      	movs	r3, #1
 801f90c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801f90e:	7ffb      	ldrb	r3, [r7, #31]
}
 801f910:	4618      	mov	r0, r3
 801f912:	3720      	adds	r7, #32
 801f914:	46bd      	mov	sp, r7
 801f916:	bd80      	pop	{r7, pc}
 801f918:	20001ca0 	.word	0x20001ca0
 801f91c:	08021ab4 	.word	0x08021ab4

0801f920 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801f920:	b580      	push	{r7, lr}
 801f922:	b084      	sub	sp, #16
 801f924:	af00      	add	r7, sp, #0
 801f926:	6078      	str	r0, [r7, #4]
 801f928:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801f92a:	2300      	movs	r3, #0
 801f92c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	2b00      	cmp	r3, #0
 801f932:	d102      	bne.n	801f93a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801f934:	2301      	movs	r3, #1
 801f936:	73fb      	strb	r3, [r7, #15]
 801f938:	e014      	b.n	801f964 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801f93a:	4b0d      	ldr	r3, [pc, #52]	; (801f970 <UTIL_TIMER_SetPeriod+0x50>)
 801f93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f93e:	6838      	ldr	r0, [r7, #0]
 801f940:	4798      	blx	r3
 801f942:	4602      	mov	r2, r0
 801f944:	687b      	ldr	r3, [r7, #4]
 801f946:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801f948:	6878      	ldr	r0, [r7, #4]
 801f94a:	f000 f8c1 	bl	801fad0 <TimerExists>
 801f94e:	4603      	mov	r3, r0
 801f950:	2b00      	cmp	r3, #0
 801f952:	d007      	beq.n	801f964 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801f954:	6878      	ldr	r0, [r7, #4]
 801f956:	f7ff ff73 	bl	801f840 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801f95a:	6878      	ldr	r0, [r7, #4]
 801f95c:	f7ff ff02 	bl	801f764 <UTIL_TIMER_Start>
 801f960:	4603      	mov	r3, r0
 801f962:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801f964:	7bfb      	ldrb	r3, [r7, #15]
}
 801f966:	4618      	mov	r0, r3
 801f968:	3710      	adds	r7, #16
 801f96a:	46bd      	mov	sp, r7
 801f96c:	bd80      	pop	{r7, pc}
 801f96e:	bf00      	nop
 801f970:	08021ab4 	.word	0x08021ab4

0801f974 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801f974:	b590      	push	{r4, r7, lr}
 801f976:	b089      	sub	sp, #36	; 0x24
 801f978:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f97a:	f3ef 8310 	mrs	r3, PRIMASK
 801f97e:	60bb      	str	r3, [r7, #8]
  return(result);
 801f980:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801f982:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801f984:	b672      	cpsid	i
}
 801f986:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801f988:	4b38      	ldr	r3, [pc, #224]	; (801fa6c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801f98a:	695b      	ldr	r3, [r3, #20]
 801f98c:	4798      	blx	r3
 801f98e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801f990:	4b36      	ldr	r3, [pc, #216]	; (801fa6c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801f992:	691b      	ldr	r3, [r3, #16]
 801f994:	4798      	blx	r3
 801f996:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801f998:	693a      	ldr	r2, [r7, #16]
 801f99a:	697b      	ldr	r3, [r7, #20]
 801f99c:	1ad3      	subs	r3, r2, r3
 801f99e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801f9a0:	4b33      	ldr	r3, [pc, #204]	; (801fa70 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f9a2:	681b      	ldr	r3, [r3, #0]
 801f9a4:	2b00      	cmp	r3, #0
 801f9a6:	d037      	beq.n	801fa18 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801f9a8:	4b31      	ldr	r3, [pc, #196]	; (801fa70 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f9aa:	681b      	ldr	r3, [r3, #0]
 801f9ac:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801f9ae:	69fb      	ldr	r3, [r7, #28]
 801f9b0:	681b      	ldr	r3, [r3, #0]
 801f9b2:	68fa      	ldr	r2, [r7, #12]
 801f9b4:	429a      	cmp	r2, r3
 801f9b6:	d206      	bcs.n	801f9c6 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801f9b8:	69fb      	ldr	r3, [r7, #28]
 801f9ba:	681a      	ldr	r2, [r3, #0]
 801f9bc:	68fb      	ldr	r3, [r7, #12]
 801f9be:	1ad2      	subs	r2, r2, r3
 801f9c0:	69fb      	ldr	r3, [r7, #28]
 801f9c2:	601a      	str	r2, [r3, #0]
 801f9c4:	e002      	b.n	801f9cc <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801f9c6:	69fb      	ldr	r3, [r7, #28]
 801f9c8:	2200      	movs	r2, #0
 801f9ca:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801f9cc:	69fb      	ldr	r3, [r7, #28]
 801f9ce:	695b      	ldr	r3, [r3, #20]
 801f9d0:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801f9d2:	69fb      	ldr	r3, [r7, #28]
 801f9d4:	2b00      	cmp	r3, #0
 801f9d6:	d1ea      	bne.n	801f9ae <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801f9d8:	e01e      	b.n	801fa18 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801f9da:	4b25      	ldr	r3, [pc, #148]	; (801fa70 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f9dc:	681b      	ldr	r3, [r3, #0]
 801f9de:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801f9e0:	4b23      	ldr	r3, [pc, #140]	; (801fa70 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f9e2:	681b      	ldr	r3, [r3, #0]
 801f9e4:	695b      	ldr	r3, [r3, #20]
 801f9e6:	4a22      	ldr	r2, [pc, #136]	; (801fa70 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f9e8:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801f9ea:	69fb      	ldr	r3, [r7, #28]
 801f9ec:	2200      	movs	r2, #0
 801f9ee:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801f9f0:	69fb      	ldr	r3, [r7, #28]
 801f9f2:	2200      	movs	r2, #0
 801f9f4:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801f9f6:	69fb      	ldr	r3, [r7, #28]
 801f9f8:	68db      	ldr	r3, [r3, #12]
 801f9fa:	69fa      	ldr	r2, [r7, #28]
 801f9fc:	6912      	ldr	r2, [r2, #16]
 801f9fe:	4610      	mov	r0, r2
 801fa00:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801fa02:	69fb      	ldr	r3, [r7, #28]
 801fa04:	7adb      	ldrb	r3, [r3, #11]
 801fa06:	2b01      	cmp	r3, #1
 801fa08:	d106      	bne.n	801fa18 <UTIL_TIMER_IRQ_Handler+0xa4>
 801fa0a:	69fb      	ldr	r3, [r7, #28]
 801fa0c:	7a9b      	ldrb	r3, [r3, #10]
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	d102      	bne.n	801fa18 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801fa12:	69f8      	ldr	r0, [r7, #28]
 801fa14:	f7ff fea6 	bl	801f764 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801fa18:	4b15      	ldr	r3, [pc, #84]	; (801fa70 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fa1a:	681b      	ldr	r3, [r3, #0]
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	d00d      	beq.n	801fa3c <UTIL_TIMER_IRQ_Handler+0xc8>
 801fa20:	4b13      	ldr	r3, [pc, #76]	; (801fa70 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fa22:	681b      	ldr	r3, [r3, #0]
 801fa24:	681b      	ldr	r3, [r3, #0]
 801fa26:	2b00      	cmp	r3, #0
 801fa28:	d0d7      	beq.n	801f9da <UTIL_TIMER_IRQ_Handler+0x66>
 801fa2a:	4b11      	ldr	r3, [pc, #68]	; (801fa70 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fa2c:	681b      	ldr	r3, [r3, #0]
 801fa2e:	681c      	ldr	r4, [r3, #0]
 801fa30:	4b0e      	ldr	r3, [pc, #56]	; (801fa6c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fa32:	699b      	ldr	r3, [r3, #24]
 801fa34:	4798      	blx	r3
 801fa36:	4603      	mov	r3, r0
 801fa38:	429c      	cmp	r4, r3
 801fa3a:	d3ce      	bcc.n	801f9da <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801fa3c:	4b0c      	ldr	r3, [pc, #48]	; (801fa70 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fa3e:	681b      	ldr	r3, [r3, #0]
 801fa40:	2b00      	cmp	r3, #0
 801fa42:	d009      	beq.n	801fa58 <UTIL_TIMER_IRQ_Handler+0xe4>
 801fa44:	4b0a      	ldr	r3, [pc, #40]	; (801fa70 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fa46:	681b      	ldr	r3, [r3, #0]
 801fa48:	7a1b      	ldrb	r3, [r3, #8]
 801fa4a:	2b00      	cmp	r3, #0
 801fa4c:	d104      	bne.n	801fa58 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801fa4e:	4b08      	ldr	r3, [pc, #32]	; (801fa70 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fa50:	681b      	ldr	r3, [r3, #0]
 801fa52:	4618      	mov	r0, r3
 801fa54:	f000 f858 	bl	801fb08 <TimerSetTimeout>
 801fa58:	69bb      	ldr	r3, [r7, #24]
 801fa5a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fa5c:	687b      	ldr	r3, [r7, #4]
 801fa5e:	f383 8810 	msr	PRIMASK, r3
}
 801fa62:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801fa64:	bf00      	nop
 801fa66:	3724      	adds	r7, #36	; 0x24
 801fa68:	46bd      	mov	sp, r7
 801fa6a:	bd90      	pop	{r4, r7, pc}
 801fa6c:	08021ab4 	.word	0x08021ab4
 801fa70:	20001ca0 	.word	0x20001ca0

0801fa74 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801fa74:	b580      	push	{r7, lr}
 801fa76:	b082      	sub	sp, #8
 801fa78:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801fa7a:	4b06      	ldr	r3, [pc, #24]	; (801fa94 <UTIL_TIMER_GetCurrentTime+0x20>)
 801fa7c:	69db      	ldr	r3, [r3, #28]
 801fa7e:	4798      	blx	r3
 801fa80:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801fa82:	4b04      	ldr	r3, [pc, #16]	; (801fa94 <UTIL_TIMER_GetCurrentTime+0x20>)
 801fa84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fa86:	6878      	ldr	r0, [r7, #4]
 801fa88:	4798      	blx	r3
 801fa8a:	4603      	mov	r3, r0
}
 801fa8c:	4618      	mov	r0, r3
 801fa8e:	3708      	adds	r7, #8
 801fa90:	46bd      	mov	sp, r7
 801fa92:	bd80      	pop	{r7, pc}
 801fa94:	08021ab4 	.word	0x08021ab4

0801fa98 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801fa98:	b580      	push	{r7, lr}
 801fa9a:	b084      	sub	sp, #16
 801fa9c:	af00      	add	r7, sp, #0
 801fa9e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801faa0:	4b0a      	ldr	r3, [pc, #40]	; (801facc <UTIL_TIMER_GetElapsedTime+0x34>)
 801faa2:	69db      	ldr	r3, [r3, #28]
 801faa4:	4798      	blx	r3
 801faa6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801faa8:	4b08      	ldr	r3, [pc, #32]	; (801facc <UTIL_TIMER_GetElapsedTime+0x34>)
 801faaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801faac:	6878      	ldr	r0, [r7, #4]
 801faae:	4798      	blx	r3
 801fab0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801fab2:	4b06      	ldr	r3, [pc, #24]	; (801facc <UTIL_TIMER_GetElapsedTime+0x34>)
 801fab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fab6:	68f9      	ldr	r1, [r7, #12]
 801fab8:	68ba      	ldr	r2, [r7, #8]
 801faba:	1a8a      	subs	r2, r1, r2
 801fabc:	4610      	mov	r0, r2
 801fabe:	4798      	blx	r3
 801fac0:	4603      	mov	r3, r0
}
 801fac2:	4618      	mov	r0, r3
 801fac4:	3710      	adds	r7, #16
 801fac6:	46bd      	mov	sp, r7
 801fac8:	bd80      	pop	{r7, pc}
 801faca:	bf00      	nop
 801facc:	08021ab4 	.word	0x08021ab4

0801fad0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801fad0:	b480      	push	{r7}
 801fad2:	b085      	sub	sp, #20
 801fad4:	af00      	add	r7, sp, #0
 801fad6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801fad8:	4b0a      	ldr	r3, [pc, #40]	; (801fb04 <TimerExists+0x34>)
 801fada:	681b      	ldr	r3, [r3, #0]
 801fadc:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801fade:	e008      	b.n	801faf2 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801fae0:	68fa      	ldr	r2, [r7, #12]
 801fae2:	687b      	ldr	r3, [r7, #4]
 801fae4:	429a      	cmp	r2, r3
 801fae6:	d101      	bne.n	801faec <TimerExists+0x1c>
    {
      return true;
 801fae8:	2301      	movs	r3, #1
 801faea:	e006      	b.n	801fafa <TimerExists+0x2a>
    }
    cur = cur->Next;
 801faec:	68fb      	ldr	r3, [r7, #12]
 801faee:	695b      	ldr	r3, [r3, #20]
 801faf0:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801faf2:	68fb      	ldr	r3, [r7, #12]
 801faf4:	2b00      	cmp	r3, #0
 801faf6:	d1f3      	bne.n	801fae0 <TimerExists+0x10>
  }
  return false;
 801faf8:	2300      	movs	r3, #0
}
 801fafa:	4618      	mov	r0, r3
 801fafc:	3714      	adds	r7, #20
 801fafe:	46bd      	mov	sp, r7
 801fb00:	bc80      	pop	{r7}
 801fb02:	4770      	bx	lr
 801fb04:	20001ca0 	.word	0x20001ca0

0801fb08 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801fb08:	b590      	push	{r4, r7, lr}
 801fb0a:	b085      	sub	sp, #20
 801fb0c:	af00      	add	r7, sp, #0
 801fb0e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801fb10:	4b11      	ldr	r3, [pc, #68]	; (801fb58 <TimerSetTimeout+0x50>)
 801fb12:	6a1b      	ldr	r3, [r3, #32]
 801fb14:	4798      	blx	r3
 801fb16:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801fb18:	687b      	ldr	r3, [r7, #4]
 801fb1a:	2201      	movs	r2, #1
 801fb1c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801fb1e:	687b      	ldr	r3, [r7, #4]
 801fb20:	681c      	ldr	r4, [r3, #0]
 801fb22:	4b0d      	ldr	r3, [pc, #52]	; (801fb58 <TimerSetTimeout+0x50>)
 801fb24:	699b      	ldr	r3, [r3, #24]
 801fb26:	4798      	blx	r3
 801fb28:	4602      	mov	r2, r0
 801fb2a:	68fb      	ldr	r3, [r7, #12]
 801fb2c:	4413      	add	r3, r2
 801fb2e:	429c      	cmp	r4, r3
 801fb30:	d207      	bcs.n	801fb42 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801fb32:	4b09      	ldr	r3, [pc, #36]	; (801fb58 <TimerSetTimeout+0x50>)
 801fb34:	699b      	ldr	r3, [r3, #24]
 801fb36:	4798      	blx	r3
 801fb38:	4602      	mov	r2, r0
 801fb3a:	68fb      	ldr	r3, [r7, #12]
 801fb3c:	441a      	add	r2, r3
 801fb3e:	687b      	ldr	r3, [r7, #4]
 801fb40:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801fb42:	4b05      	ldr	r3, [pc, #20]	; (801fb58 <TimerSetTimeout+0x50>)
 801fb44:	689b      	ldr	r3, [r3, #8]
 801fb46:	687a      	ldr	r2, [r7, #4]
 801fb48:	6812      	ldr	r2, [r2, #0]
 801fb4a:	4610      	mov	r0, r2
 801fb4c:	4798      	blx	r3
}
 801fb4e:	bf00      	nop
 801fb50:	3714      	adds	r7, #20
 801fb52:	46bd      	mov	sp, r7
 801fb54:	bd90      	pop	{r4, r7, pc}
 801fb56:	bf00      	nop
 801fb58:	08021ab4 	.word	0x08021ab4

0801fb5c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801fb5c:	b480      	push	{r7}
 801fb5e:	b085      	sub	sp, #20
 801fb60:	af00      	add	r7, sp, #0
 801fb62:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801fb64:	4b14      	ldr	r3, [pc, #80]	; (801fbb8 <TimerInsertTimer+0x5c>)
 801fb66:	681b      	ldr	r3, [r3, #0]
 801fb68:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801fb6a:	4b13      	ldr	r3, [pc, #76]	; (801fbb8 <TimerInsertTimer+0x5c>)
 801fb6c:	681b      	ldr	r3, [r3, #0]
 801fb6e:	695b      	ldr	r3, [r3, #20]
 801fb70:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801fb72:	e012      	b.n	801fb9a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801fb74:	687b      	ldr	r3, [r7, #4]
 801fb76:	681a      	ldr	r2, [r3, #0]
 801fb78:	68bb      	ldr	r3, [r7, #8]
 801fb7a:	681b      	ldr	r3, [r3, #0]
 801fb7c:	429a      	cmp	r2, r3
 801fb7e:	d905      	bls.n	801fb8c <TimerInsertTimer+0x30>
    {
        cur = next;
 801fb80:	68bb      	ldr	r3, [r7, #8]
 801fb82:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801fb84:	68bb      	ldr	r3, [r7, #8]
 801fb86:	695b      	ldr	r3, [r3, #20]
 801fb88:	60bb      	str	r3, [r7, #8]
 801fb8a:	e006      	b.n	801fb9a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801fb8c:	68fb      	ldr	r3, [r7, #12]
 801fb8e:	687a      	ldr	r2, [r7, #4]
 801fb90:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	68ba      	ldr	r2, [r7, #8]
 801fb96:	615a      	str	r2, [r3, #20]
        return;
 801fb98:	e009      	b.n	801fbae <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801fb9a:	68fb      	ldr	r3, [r7, #12]
 801fb9c:	695b      	ldr	r3, [r3, #20]
 801fb9e:	2b00      	cmp	r3, #0
 801fba0:	d1e8      	bne.n	801fb74 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801fba2:	68fb      	ldr	r3, [r7, #12]
 801fba4:	687a      	ldr	r2, [r7, #4]
 801fba6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801fba8:	687b      	ldr	r3, [r7, #4]
 801fbaa:	2200      	movs	r2, #0
 801fbac:	615a      	str	r2, [r3, #20]
}
 801fbae:	3714      	adds	r7, #20
 801fbb0:	46bd      	mov	sp, r7
 801fbb2:	bc80      	pop	{r7}
 801fbb4:	4770      	bx	lr
 801fbb6:	bf00      	nop
 801fbb8:	20001ca0 	.word	0x20001ca0

0801fbbc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801fbbc:	b580      	push	{r7, lr}
 801fbbe:	b084      	sub	sp, #16
 801fbc0:	af00      	add	r7, sp, #0
 801fbc2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801fbc4:	4b0b      	ldr	r3, [pc, #44]	; (801fbf4 <TimerInsertNewHeadTimer+0x38>)
 801fbc6:	681b      	ldr	r3, [r3, #0]
 801fbc8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801fbca:	68fb      	ldr	r3, [r7, #12]
 801fbcc:	2b00      	cmp	r3, #0
 801fbce:	d002      	beq.n	801fbd6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801fbd0:	68fb      	ldr	r3, [r7, #12]
 801fbd2:	2200      	movs	r2, #0
 801fbd4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801fbd6:	687b      	ldr	r3, [r7, #4]
 801fbd8:	68fa      	ldr	r2, [r7, #12]
 801fbda:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801fbdc:	4a05      	ldr	r2, [pc, #20]	; (801fbf4 <TimerInsertNewHeadTimer+0x38>)
 801fbde:	687b      	ldr	r3, [r7, #4]
 801fbe0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801fbe2:	4b04      	ldr	r3, [pc, #16]	; (801fbf4 <TimerInsertNewHeadTimer+0x38>)
 801fbe4:	681b      	ldr	r3, [r3, #0]
 801fbe6:	4618      	mov	r0, r3
 801fbe8:	f7ff ff8e 	bl	801fb08 <TimerSetTimeout>
}
 801fbec:	bf00      	nop
 801fbee:	3710      	adds	r7, #16
 801fbf0:	46bd      	mov	sp, r7
 801fbf2:	bd80      	pop	{r7, pc}
 801fbf4:	20001ca0 	.word	0x20001ca0

0801fbf8 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801fbf8:	b580      	push	{r7, lr}
 801fbfa:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801fbfc:	2218      	movs	r2, #24
 801fbfe:	2100      	movs	r1, #0
 801fc00:	4807      	ldr	r0, [pc, #28]	; (801fc20 <UTIL_ADV_TRACE_Init+0x28>)
 801fc02:	f7ff f8fe 	bl	801ee02 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801fc06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801fc0a:	2100      	movs	r1, #0
 801fc0c:	4805      	ldr	r0, [pc, #20]	; (801fc24 <UTIL_ADV_TRACE_Init+0x2c>)
 801fc0e:	f7ff f8f8 	bl	801ee02 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801fc12:	4b05      	ldr	r3, [pc, #20]	; (801fc28 <UTIL_ADV_TRACE_Init+0x30>)
 801fc14:	681b      	ldr	r3, [r3, #0]
 801fc16:	4805      	ldr	r0, [pc, #20]	; (801fc2c <UTIL_ADV_TRACE_Init+0x34>)
 801fc18:	4798      	blx	r3
 801fc1a:	4603      	mov	r3, r0
}
 801fc1c:	4618      	mov	r0, r3
 801fc1e:	bd80      	pop	{r7, pc}
 801fc20:	20001ca4 	.word	0x20001ca4
 801fc24:	20001cbc 	.word	0x20001cbc
 801fc28:	08021af4 	.word	0x08021af4
 801fc2c:	0801fe99 	.word	0x0801fe99

0801fc30 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801fc30:	b480      	push	{r7}
 801fc32:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801fc34:	4b06      	ldr	r3, [pc, #24]	; (801fc50 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801fc36:	8a5a      	ldrh	r2, [r3, #18]
 801fc38:	4b05      	ldr	r3, [pc, #20]	; (801fc50 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801fc3a:	8a1b      	ldrh	r3, [r3, #16]
 801fc3c:	429a      	cmp	r2, r3
 801fc3e:	d101      	bne.n	801fc44 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801fc40:	2301      	movs	r3, #1
 801fc42:	e000      	b.n	801fc46 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801fc44:	2300      	movs	r3, #0
}
 801fc46:	4618      	mov	r0, r3
 801fc48:	46bd      	mov	sp, r7
 801fc4a:	bc80      	pop	{r7}
 801fc4c:	4770      	bx	lr
 801fc4e:	bf00      	nop
 801fc50:	20001ca4 	.word	0x20001ca4

0801fc54 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801fc54:	b408      	push	{r3}
 801fc56:	b580      	push	{r7, lr}
 801fc58:	b08d      	sub	sp, #52	; 0x34
 801fc5a:	af00      	add	r7, sp, #0
 801fc5c:	60f8      	str	r0, [r7, #12]
 801fc5e:	60b9      	str	r1, [r7, #8]
 801fc60:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801fc62:	2300      	movs	r3, #0
 801fc64:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801fc66:	2300      	movs	r3, #0
 801fc68:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801fc6a:	4b37      	ldr	r3, [pc, #220]	; (801fd48 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801fc6c:	7a1b      	ldrb	r3, [r3, #8]
 801fc6e:	461a      	mov	r2, r3
 801fc70:	68fb      	ldr	r3, [r7, #12]
 801fc72:	4293      	cmp	r3, r2
 801fc74:	d902      	bls.n	801fc7c <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801fc76:	f06f 0304 	mvn.w	r3, #4
 801fc7a:	e05e      	b.n	801fd3a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801fc7c:	4b32      	ldr	r3, [pc, #200]	; (801fd48 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801fc7e:	68da      	ldr	r2, [r3, #12]
 801fc80:	68bb      	ldr	r3, [r7, #8]
 801fc82:	4013      	ands	r3, r2
 801fc84:	68ba      	ldr	r2, [r7, #8]
 801fc86:	429a      	cmp	r2, r3
 801fc88:	d002      	beq.n	801fc90 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801fc8a:	f06f 0305 	mvn.w	r3, #5
 801fc8e:	e054      	b.n	801fd3a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801fc90:	4b2d      	ldr	r3, [pc, #180]	; (801fd48 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801fc92:	685b      	ldr	r3, [r3, #4]
 801fc94:	2b00      	cmp	r3, #0
 801fc96:	d00a      	beq.n	801fcae <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801fc98:	687b      	ldr	r3, [r7, #4]
 801fc9a:	2b00      	cmp	r3, #0
 801fc9c:	d007      	beq.n	801fcae <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801fc9e:	4b2a      	ldr	r3, [pc, #168]	; (801fd48 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801fca0:	685b      	ldr	r3, [r3, #4]
 801fca2:	f107 0116 	add.w	r1, r7, #22
 801fca6:	f107 0218 	add.w	r2, r7, #24
 801fcaa:	4610      	mov	r0, r2
 801fcac:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801fcae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801fcb2:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801fcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fcb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fcb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 801fcbc:	4823      	ldr	r0, [pc, #140]	; (801fd4c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801fcbe:	f7ff fb2d 	bl	801f31c <tiny_vsnprintf_like>
 801fcc2:	4603      	mov	r3, r0
 801fcc4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801fcc6:	f000 f9f1 	bl	80200ac <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801fcca:	8afa      	ldrh	r2, [r7, #22]
 801fccc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801fcce:	4413      	add	r3, r2
 801fcd0:	b29b      	uxth	r3, r3
 801fcd2:	f107 0214 	add.w	r2, r7, #20
 801fcd6:	4611      	mov	r1, r2
 801fcd8:	4618      	mov	r0, r3
 801fcda:	f000 f969 	bl	801ffb0 <TRACE_AllocateBufer>
 801fcde:	4603      	mov	r3, r0
 801fce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fce4:	d025      	beq.n	801fd32 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801fce6:	2300      	movs	r3, #0
 801fce8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801fcea:	e00e      	b.n	801fd0a <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801fcec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801fcee:	8aba      	ldrh	r2, [r7, #20]
 801fcf0:	3330      	adds	r3, #48	; 0x30
 801fcf2:	443b      	add	r3, r7
 801fcf4:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801fcf8:	4b15      	ldr	r3, [pc, #84]	; (801fd50 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801fcfa:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801fcfc:	8abb      	ldrh	r3, [r7, #20]
 801fcfe:	3301      	adds	r3, #1
 801fd00:	b29b      	uxth	r3, r3
 801fd02:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801fd04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801fd06:	3301      	adds	r3, #1
 801fd08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801fd0a:	8afb      	ldrh	r3, [r7, #22]
 801fd0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801fd0e:	429a      	cmp	r2, r3
 801fd10:	d3ec      	bcc.n	801fcec <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801fd12:	8abb      	ldrh	r3, [r7, #20]
 801fd14:	461a      	mov	r2, r3
 801fd16:	4b0e      	ldr	r3, [pc, #56]	; (801fd50 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801fd18:	18d0      	adds	r0, r2, r3
 801fd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fd1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801fd22:	f7ff fafb 	bl	801f31c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801fd26:	f000 f9df 	bl	80200e8 <TRACE_UnLock>

    return TRACE_Send();
 801fd2a:	f000 f831 	bl	801fd90 <TRACE_Send>
 801fd2e:	4603      	mov	r3, r0
 801fd30:	e003      	b.n	801fd3a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801fd32:	f000 f9d9 	bl	80200e8 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801fd36:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801fd3a:	4618      	mov	r0, r3
 801fd3c:	3734      	adds	r7, #52	; 0x34
 801fd3e:	46bd      	mov	sp, r7
 801fd40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801fd44:	b001      	add	sp, #4
 801fd46:	4770      	bx	lr
 801fd48:	20001ca4 	.word	0x20001ca4
 801fd4c:	200020bc 	.word	0x200020bc
 801fd50:	20001cbc 	.word	0x20001cbc

0801fd54 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801fd54:	b480      	push	{r7}
 801fd56:	b083      	sub	sp, #12
 801fd58:	af00      	add	r7, sp, #0
 801fd5a:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801fd5c:	4a03      	ldr	r2, [pc, #12]	; (801fd6c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801fd5e:	687b      	ldr	r3, [r7, #4]
 801fd60:	6053      	str	r3, [r2, #4]
}
 801fd62:	bf00      	nop
 801fd64:	370c      	adds	r7, #12
 801fd66:	46bd      	mov	sp, r7
 801fd68:	bc80      	pop	{r7}
 801fd6a:	4770      	bx	lr
 801fd6c:	20001ca4 	.word	0x20001ca4

0801fd70 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801fd70:	b480      	push	{r7}
 801fd72:	b083      	sub	sp, #12
 801fd74:	af00      	add	r7, sp, #0
 801fd76:	4603      	mov	r3, r0
 801fd78:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801fd7a:	4a04      	ldr	r2, [pc, #16]	; (801fd8c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801fd7c:	79fb      	ldrb	r3, [r7, #7]
 801fd7e:	7213      	strb	r3, [r2, #8]
}
 801fd80:	bf00      	nop
 801fd82:	370c      	adds	r7, #12
 801fd84:	46bd      	mov	sp, r7
 801fd86:	bc80      	pop	{r7}
 801fd88:	4770      	bx	lr
 801fd8a:	bf00      	nop
 801fd8c:	20001ca4 	.word	0x20001ca4

0801fd90 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801fd90:	b580      	push	{r7, lr}
 801fd92:	b088      	sub	sp, #32
 801fd94:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801fd96:	2300      	movs	r3, #0
 801fd98:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801fd9a:	2300      	movs	r3, #0
 801fd9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fd9e:	f3ef 8310 	mrs	r3, PRIMASK
 801fda2:	613b      	str	r3, [r7, #16]
  return(result);
 801fda4:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801fda6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801fda8:	b672      	cpsid	i
}
 801fdaa:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801fdac:	f000 f9ba 	bl	8020124 <TRACE_IsLocked>
 801fdb0:	4603      	mov	r3, r0
 801fdb2:	2b00      	cmp	r3, #0
 801fdb4:	d15d      	bne.n	801fe72 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801fdb6:	f000 f979 	bl	80200ac <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801fdba:	4b34      	ldr	r3, [pc, #208]	; (801fe8c <TRACE_Send+0xfc>)
 801fdbc:	8a1a      	ldrh	r2, [r3, #16]
 801fdbe:	4b33      	ldr	r3, [pc, #204]	; (801fe8c <TRACE_Send+0xfc>)
 801fdc0:	8a5b      	ldrh	r3, [r3, #18]
 801fdc2:	429a      	cmp	r2, r3
 801fdc4:	d04d      	beq.n	801fe62 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801fdc6:	4b31      	ldr	r3, [pc, #196]	; (801fe8c <TRACE_Send+0xfc>)
 801fdc8:	789b      	ldrb	r3, [r3, #2]
 801fdca:	2b01      	cmp	r3, #1
 801fdcc:	d117      	bne.n	801fdfe <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801fdce:	4b2f      	ldr	r3, [pc, #188]	; (801fe8c <TRACE_Send+0xfc>)
 801fdd0:	881a      	ldrh	r2, [r3, #0]
 801fdd2:	4b2e      	ldr	r3, [pc, #184]	; (801fe8c <TRACE_Send+0xfc>)
 801fdd4:	8a1b      	ldrh	r3, [r3, #16]
 801fdd6:	1ad3      	subs	r3, r2, r3
 801fdd8:	b29a      	uxth	r2, r3
 801fdda:	4b2c      	ldr	r3, [pc, #176]	; (801fe8c <TRACE_Send+0xfc>)
 801fddc:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801fdde:	4b2b      	ldr	r3, [pc, #172]	; (801fe8c <TRACE_Send+0xfc>)
 801fde0:	2202      	movs	r2, #2
 801fde2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801fde4:	4b29      	ldr	r3, [pc, #164]	; (801fe8c <TRACE_Send+0xfc>)
 801fde6:	2200      	movs	r2, #0
 801fde8:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801fdea:	4b28      	ldr	r3, [pc, #160]	; (801fe8c <TRACE_Send+0xfc>)
 801fdec:	8a9b      	ldrh	r3, [r3, #20]
 801fdee:	2b00      	cmp	r3, #0
 801fdf0:	d105      	bne.n	801fdfe <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801fdf2:	4b26      	ldr	r3, [pc, #152]	; (801fe8c <TRACE_Send+0xfc>)
 801fdf4:	2200      	movs	r2, #0
 801fdf6:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801fdf8:	4b24      	ldr	r3, [pc, #144]	; (801fe8c <TRACE_Send+0xfc>)
 801fdfa:	2200      	movs	r2, #0
 801fdfc:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801fdfe:	4b23      	ldr	r3, [pc, #140]	; (801fe8c <TRACE_Send+0xfc>)
 801fe00:	789b      	ldrb	r3, [r3, #2]
 801fe02:	2b00      	cmp	r3, #0
 801fe04:	d115      	bne.n	801fe32 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801fe06:	4b21      	ldr	r3, [pc, #132]	; (801fe8c <TRACE_Send+0xfc>)
 801fe08:	8a5a      	ldrh	r2, [r3, #18]
 801fe0a:	4b20      	ldr	r3, [pc, #128]	; (801fe8c <TRACE_Send+0xfc>)
 801fe0c:	8a1b      	ldrh	r3, [r3, #16]
 801fe0e:	429a      	cmp	r2, r3
 801fe10:	d908      	bls.n	801fe24 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801fe12:	4b1e      	ldr	r3, [pc, #120]	; (801fe8c <TRACE_Send+0xfc>)
 801fe14:	8a5a      	ldrh	r2, [r3, #18]
 801fe16:	4b1d      	ldr	r3, [pc, #116]	; (801fe8c <TRACE_Send+0xfc>)
 801fe18:	8a1b      	ldrh	r3, [r3, #16]
 801fe1a:	1ad3      	subs	r3, r2, r3
 801fe1c:	b29a      	uxth	r2, r3
 801fe1e:	4b1b      	ldr	r3, [pc, #108]	; (801fe8c <TRACE_Send+0xfc>)
 801fe20:	829a      	strh	r2, [r3, #20]
 801fe22:	e006      	b.n	801fe32 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801fe24:	4b19      	ldr	r3, [pc, #100]	; (801fe8c <TRACE_Send+0xfc>)
 801fe26:	8a1b      	ldrh	r3, [r3, #16]
 801fe28:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801fe2c:	b29a      	uxth	r2, r3
 801fe2e:	4b17      	ldr	r3, [pc, #92]	; (801fe8c <TRACE_Send+0xfc>)
 801fe30:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801fe32:	4b16      	ldr	r3, [pc, #88]	; (801fe8c <TRACE_Send+0xfc>)
 801fe34:	8a1b      	ldrh	r3, [r3, #16]
 801fe36:	461a      	mov	r2, r3
 801fe38:	4b15      	ldr	r3, [pc, #84]	; (801fe90 <TRACE_Send+0x100>)
 801fe3a:	4413      	add	r3, r2
 801fe3c:	61bb      	str	r3, [r7, #24]
 801fe3e:	697b      	ldr	r3, [r7, #20]
 801fe40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fe42:	68fb      	ldr	r3, [r7, #12]
 801fe44:	f383 8810 	msr	PRIMASK, r3
}
 801fe48:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801fe4a:	f7e2 fbfb 	bl	8002644 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801fe4e:	4b11      	ldr	r3, [pc, #68]	; (801fe94 <TRACE_Send+0x104>)
 801fe50:	68db      	ldr	r3, [r3, #12]
 801fe52:	4a0e      	ldr	r2, [pc, #56]	; (801fe8c <TRACE_Send+0xfc>)
 801fe54:	8a92      	ldrh	r2, [r2, #20]
 801fe56:	4611      	mov	r1, r2
 801fe58:	69b8      	ldr	r0, [r7, #24]
 801fe5a:	4798      	blx	r3
 801fe5c:	4603      	mov	r3, r0
 801fe5e:	77fb      	strb	r3, [r7, #31]
 801fe60:	e00d      	b.n	801fe7e <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801fe62:	f000 f941 	bl	80200e8 <TRACE_UnLock>
 801fe66:	697b      	ldr	r3, [r7, #20]
 801fe68:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fe6a:	68bb      	ldr	r3, [r7, #8]
 801fe6c:	f383 8810 	msr	PRIMASK, r3
}
 801fe70:	e005      	b.n	801fe7e <TRACE_Send+0xee>
 801fe72:	697b      	ldr	r3, [r7, #20]
 801fe74:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fe76:	687b      	ldr	r3, [r7, #4]
 801fe78:	f383 8810 	msr	PRIMASK, r3
}
 801fe7c:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801fe7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801fe82:	4618      	mov	r0, r3
 801fe84:	3720      	adds	r7, #32
 801fe86:	46bd      	mov	sp, r7
 801fe88:	bd80      	pop	{r7, pc}
 801fe8a:	bf00      	nop
 801fe8c:	20001ca4 	.word	0x20001ca4
 801fe90:	20001cbc 	.word	0x20001cbc
 801fe94:	08021af4 	.word	0x08021af4

0801fe98 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801fe98:	b580      	push	{r7, lr}
 801fe9a:	b088      	sub	sp, #32
 801fe9c:	af00      	add	r7, sp, #0
 801fe9e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801fea0:	2300      	movs	r3, #0
 801fea2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fea4:	f3ef 8310 	mrs	r3, PRIMASK
 801fea8:	617b      	str	r3, [r7, #20]
  return(result);
 801feaa:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801feac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801feae:	b672      	cpsid	i
}
 801feb0:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801feb2:	4b3c      	ldr	r3, [pc, #240]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801feb4:	789b      	ldrb	r3, [r3, #2]
 801feb6:	2b02      	cmp	r3, #2
 801feb8:	d106      	bne.n	801fec8 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801feba:	4b3a      	ldr	r3, [pc, #232]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801febc:	2200      	movs	r2, #0
 801febe:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801fec0:	4b38      	ldr	r3, [pc, #224]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801fec2:	2200      	movs	r2, #0
 801fec4:	821a      	strh	r2, [r3, #16]
 801fec6:	e00a      	b.n	801fede <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801fec8:	4b36      	ldr	r3, [pc, #216]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801feca:	8a1a      	ldrh	r2, [r3, #16]
 801fecc:	4b35      	ldr	r3, [pc, #212]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801fece:	8a9b      	ldrh	r3, [r3, #20]
 801fed0:	4413      	add	r3, r2
 801fed2:	b29b      	uxth	r3, r3
 801fed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801fed8:	b29a      	uxth	r2, r3
 801feda:	4b32      	ldr	r3, [pc, #200]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801fedc:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801fede:	4b31      	ldr	r3, [pc, #196]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801fee0:	8a1a      	ldrh	r2, [r3, #16]
 801fee2:	4b30      	ldr	r3, [pc, #192]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801fee4:	8a5b      	ldrh	r3, [r3, #18]
 801fee6:	429a      	cmp	r2, r3
 801fee8:	d04d      	beq.n	801ff86 <TRACE_TxCpltCallback+0xee>
 801feea:	4b2e      	ldr	r3, [pc, #184]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801feec:	8adb      	ldrh	r3, [r3, #22]
 801feee:	2b01      	cmp	r3, #1
 801fef0:	d149      	bne.n	801ff86 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801fef2:	4b2c      	ldr	r3, [pc, #176]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801fef4:	789b      	ldrb	r3, [r3, #2]
 801fef6:	2b01      	cmp	r3, #1
 801fef8:	d117      	bne.n	801ff2a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801fefa:	4b2a      	ldr	r3, [pc, #168]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801fefc:	881a      	ldrh	r2, [r3, #0]
 801fefe:	4b29      	ldr	r3, [pc, #164]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff00:	8a1b      	ldrh	r3, [r3, #16]
 801ff02:	1ad3      	subs	r3, r2, r3
 801ff04:	b29a      	uxth	r2, r3
 801ff06:	4b27      	ldr	r3, [pc, #156]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff08:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ff0a:	4b26      	ldr	r3, [pc, #152]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff0c:	2202      	movs	r2, #2
 801ff0e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ff10:	4b24      	ldr	r3, [pc, #144]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff12:	2200      	movs	r2, #0
 801ff14:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ff16:	4b23      	ldr	r3, [pc, #140]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff18:	8a9b      	ldrh	r3, [r3, #20]
 801ff1a:	2b00      	cmp	r3, #0
 801ff1c:	d105      	bne.n	801ff2a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ff1e:	4b21      	ldr	r3, [pc, #132]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff20:	2200      	movs	r2, #0
 801ff22:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ff24:	4b1f      	ldr	r3, [pc, #124]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff26:	2200      	movs	r2, #0
 801ff28:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ff2a:	4b1e      	ldr	r3, [pc, #120]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff2c:	789b      	ldrb	r3, [r3, #2]
 801ff2e:	2b00      	cmp	r3, #0
 801ff30:	d115      	bne.n	801ff5e <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ff32:	4b1c      	ldr	r3, [pc, #112]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff34:	8a5a      	ldrh	r2, [r3, #18]
 801ff36:	4b1b      	ldr	r3, [pc, #108]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff38:	8a1b      	ldrh	r3, [r3, #16]
 801ff3a:	429a      	cmp	r2, r3
 801ff3c:	d908      	bls.n	801ff50 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ff3e:	4b19      	ldr	r3, [pc, #100]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff40:	8a5a      	ldrh	r2, [r3, #18]
 801ff42:	4b18      	ldr	r3, [pc, #96]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff44:	8a1b      	ldrh	r3, [r3, #16]
 801ff46:	1ad3      	subs	r3, r2, r3
 801ff48:	b29a      	uxth	r2, r3
 801ff4a:	4b16      	ldr	r3, [pc, #88]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff4c:	829a      	strh	r2, [r3, #20]
 801ff4e:	e006      	b.n	801ff5e <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ff50:	4b14      	ldr	r3, [pc, #80]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff52:	8a1b      	ldrh	r3, [r3, #16]
 801ff54:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ff58:	b29a      	uxth	r2, r3
 801ff5a:	4b12      	ldr	r3, [pc, #72]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff5c:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ff5e:	4b11      	ldr	r3, [pc, #68]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff60:	8a1b      	ldrh	r3, [r3, #16]
 801ff62:	461a      	mov	r2, r3
 801ff64:	4b10      	ldr	r3, [pc, #64]	; (801ffa8 <TRACE_TxCpltCallback+0x110>)
 801ff66:	4413      	add	r3, r2
 801ff68:	61fb      	str	r3, [r7, #28]
 801ff6a:	69bb      	ldr	r3, [r7, #24]
 801ff6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ff6e:	693b      	ldr	r3, [r7, #16]
 801ff70:	f383 8810 	msr	PRIMASK, r3
}
 801ff74:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ff76:	4b0d      	ldr	r3, [pc, #52]	; (801ffac <TRACE_TxCpltCallback+0x114>)
 801ff78:	68db      	ldr	r3, [r3, #12]
 801ff7a:	4a0a      	ldr	r2, [pc, #40]	; (801ffa4 <TRACE_TxCpltCallback+0x10c>)
 801ff7c:	8a92      	ldrh	r2, [r2, #20]
 801ff7e:	4611      	mov	r1, r2
 801ff80:	69f8      	ldr	r0, [r7, #28]
 801ff82:	4798      	blx	r3
 801ff84:	e00a      	b.n	801ff9c <TRACE_TxCpltCallback+0x104>
 801ff86:	69bb      	ldr	r3, [r7, #24]
 801ff88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ff8a:	68fb      	ldr	r3, [r7, #12]
 801ff8c:	f383 8810 	msr	PRIMASK, r3
}
 801ff90:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801ff92:	f7e2 fb5f 	bl	8002654 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801ff96:	f000 f8a7 	bl	80200e8 <TRACE_UnLock>
  }
}
 801ff9a:	bf00      	nop
 801ff9c:	bf00      	nop
 801ff9e:	3720      	adds	r7, #32
 801ffa0:	46bd      	mov	sp, r7
 801ffa2:	bd80      	pop	{r7, pc}
 801ffa4:	20001ca4 	.word	0x20001ca4
 801ffa8:	20001cbc 	.word	0x20001cbc
 801ffac:	08021af4 	.word	0x08021af4

0801ffb0 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801ffb0:	b480      	push	{r7}
 801ffb2:	b087      	sub	sp, #28
 801ffb4:	af00      	add	r7, sp, #0
 801ffb6:	4603      	mov	r3, r0
 801ffb8:	6039      	str	r1, [r7, #0]
 801ffba:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801ffbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ffc0:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ffc2:	f3ef 8310 	mrs	r3, PRIMASK
 801ffc6:	60fb      	str	r3, [r7, #12]
  return(result);
 801ffc8:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ffca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ffcc:	b672      	cpsid	i
}
 801ffce:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801ffd0:	4b35      	ldr	r3, [pc, #212]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 801ffd2:	8a5a      	ldrh	r2, [r3, #18]
 801ffd4:	4b34      	ldr	r3, [pc, #208]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 801ffd6:	8a1b      	ldrh	r3, [r3, #16]
 801ffd8:	429a      	cmp	r2, r3
 801ffda:	d11b      	bne.n	8020014 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801ffdc:	4b32      	ldr	r3, [pc, #200]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 801ffde:	8a5b      	ldrh	r3, [r3, #18]
 801ffe0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ffe4:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801ffe6:	88fa      	ldrh	r2, [r7, #6]
 801ffe8:	8afb      	ldrh	r3, [r7, #22]
 801ffea:	429a      	cmp	r2, r3
 801ffec:	d33a      	bcc.n	8020064 <TRACE_AllocateBufer+0xb4>
 801ffee:	4b2e      	ldr	r3, [pc, #184]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 801fff0:	8a1b      	ldrh	r3, [r3, #16]
 801fff2:	88fa      	ldrh	r2, [r7, #6]
 801fff4:	429a      	cmp	r2, r3
 801fff6:	d235      	bcs.n	8020064 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801fff8:	4b2b      	ldr	r3, [pc, #172]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 801fffa:	2201      	movs	r2, #1
 801fffc:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801fffe:	4b2a      	ldr	r3, [pc, #168]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 8020000:	8a5a      	ldrh	r2, [r3, #18]
 8020002:	4b29      	ldr	r3, [pc, #164]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 8020004:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8020006:	4b28      	ldr	r3, [pc, #160]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 8020008:	8a1b      	ldrh	r3, [r3, #16]
 802000a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 802000c:	4b26      	ldr	r3, [pc, #152]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 802000e:	2200      	movs	r2, #0
 8020010:	825a      	strh	r2, [r3, #18]
 8020012:	e027      	b.n	8020064 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8020014:	4b24      	ldr	r3, [pc, #144]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 8020016:	8a5a      	ldrh	r2, [r3, #18]
 8020018:	4b23      	ldr	r3, [pc, #140]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 802001a:	8a1b      	ldrh	r3, [r3, #16]
 802001c:	429a      	cmp	r2, r3
 802001e:	d91b      	bls.n	8020058 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8020020:	4b21      	ldr	r3, [pc, #132]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 8020022:	8a5b      	ldrh	r3, [r3, #18]
 8020024:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020028:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 802002a:	88fa      	ldrh	r2, [r7, #6]
 802002c:	8afb      	ldrh	r3, [r7, #22]
 802002e:	429a      	cmp	r2, r3
 8020030:	d318      	bcc.n	8020064 <TRACE_AllocateBufer+0xb4>
 8020032:	4b1d      	ldr	r3, [pc, #116]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 8020034:	8a1b      	ldrh	r3, [r3, #16]
 8020036:	88fa      	ldrh	r2, [r7, #6]
 8020038:	429a      	cmp	r2, r3
 802003a:	d213      	bcs.n	8020064 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 802003c:	4b1a      	ldr	r3, [pc, #104]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 802003e:	2201      	movs	r2, #1
 8020040:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8020042:	4b19      	ldr	r3, [pc, #100]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 8020044:	8a5a      	ldrh	r2, [r3, #18]
 8020046:	4b18      	ldr	r3, [pc, #96]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 8020048:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 802004a:	4b17      	ldr	r3, [pc, #92]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 802004c:	8a1b      	ldrh	r3, [r3, #16]
 802004e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8020050:	4b15      	ldr	r3, [pc, #84]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 8020052:	2200      	movs	r2, #0
 8020054:	825a      	strh	r2, [r3, #18]
 8020056:	e005      	b.n	8020064 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8020058:	4b13      	ldr	r3, [pc, #76]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 802005a:	8a1a      	ldrh	r2, [r3, #16]
 802005c:	4b12      	ldr	r3, [pc, #72]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 802005e:	8a5b      	ldrh	r3, [r3, #18]
 8020060:	1ad3      	subs	r3, r2, r3
 8020062:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8020064:	8afa      	ldrh	r2, [r7, #22]
 8020066:	88fb      	ldrh	r3, [r7, #6]
 8020068:	429a      	cmp	r2, r3
 802006a:	d90f      	bls.n	802008c <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 802006c:	4b0e      	ldr	r3, [pc, #56]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 802006e:	8a5a      	ldrh	r2, [r3, #18]
 8020070:	683b      	ldr	r3, [r7, #0]
 8020072:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8020074:	4b0c      	ldr	r3, [pc, #48]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 8020076:	8a5a      	ldrh	r2, [r3, #18]
 8020078:	88fb      	ldrh	r3, [r7, #6]
 802007a:	4413      	add	r3, r2
 802007c:	b29b      	uxth	r3, r3
 802007e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8020082:	b29a      	uxth	r2, r3
 8020084:	4b08      	ldr	r3, [pc, #32]	; (80200a8 <TRACE_AllocateBufer+0xf8>)
 8020086:	825a      	strh	r2, [r3, #18]
    ret = 0;
 8020088:	2300      	movs	r3, #0
 802008a:	82bb      	strh	r3, [r7, #20]
 802008c:	693b      	ldr	r3, [r7, #16]
 802008e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020090:	68bb      	ldr	r3, [r7, #8]
 8020092:	f383 8810 	msr	PRIMASK, r3
}
 8020096:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 8020098:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 802009c:	4618      	mov	r0, r3
 802009e:	371c      	adds	r7, #28
 80200a0:	46bd      	mov	sp, r7
 80200a2:	bc80      	pop	{r7}
 80200a4:	4770      	bx	lr
 80200a6:	bf00      	nop
 80200a8:	20001ca4 	.word	0x20001ca4

080200ac <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 80200ac:	b480      	push	{r7}
 80200ae:	b085      	sub	sp, #20
 80200b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80200b2:	f3ef 8310 	mrs	r3, PRIMASK
 80200b6:	607b      	str	r3, [r7, #4]
  return(result);
 80200b8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 80200ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80200bc:	b672      	cpsid	i
}
 80200be:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 80200c0:	4b08      	ldr	r3, [pc, #32]	; (80200e4 <TRACE_Lock+0x38>)
 80200c2:	8adb      	ldrh	r3, [r3, #22]
 80200c4:	3301      	adds	r3, #1
 80200c6:	b29a      	uxth	r2, r3
 80200c8:	4b06      	ldr	r3, [pc, #24]	; (80200e4 <TRACE_Lock+0x38>)
 80200ca:	82da      	strh	r2, [r3, #22]
 80200cc:	68fb      	ldr	r3, [r7, #12]
 80200ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80200d0:	68bb      	ldr	r3, [r7, #8]
 80200d2:	f383 8810 	msr	PRIMASK, r3
}
 80200d6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80200d8:	bf00      	nop
 80200da:	3714      	adds	r7, #20
 80200dc:	46bd      	mov	sp, r7
 80200de:	bc80      	pop	{r7}
 80200e0:	4770      	bx	lr
 80200e2:	bf00      	nop
 80200e4:	20001ca4 	.word	0x20001ca4

080200e8 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 80200e8:	b480      	push	{r7}
 80200ea:	b085      	sub	sp, #20
 80200ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80200ee:	f3ef 8310 	mrs	r3, PRIMASK
 80200f2:	607b      	str	r3, [r7, #4]
  return(result);
 80200f4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 80200f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80200f8:	b672      	cpsid	i
}
 80200fa:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 80200fc:	4b08      	ldr	r3, [pc, #32]	; (8020120 <TRACE_UnLock+0x38>)
 80200fe:	8adb      	ldrh	r3, [r3, #22]
 8020100:	3b01      	subs	r3, #1
 8020102:	b29a      	uxth	r2, r3
 8020104:	4b06      	ldr	r3, [pc, #24]	; (8020120 <TRACE_UnLock+0x38>)
 8020106:	82da      	strh	r2, [r3, #22]
 8020108:	68fb      	ldr	r3, [r7, #12]
 802010a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802010c:	68bb      	ldr	r3, [r7, #8]
 802010e:	f383 8810 	msr	PRIMASK, r3
}
 8020112:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8020114:	bf00      	nop
 8020116:	3714      	adds	r7, #20
 8020118:	46bd      	mov	sp, r7
 802011a:	bc80      	pop	{r7}
 802011c:	4770      	bx	lr
 802011e:	bf00      	nop
 8020120:	20001ca4 	.word	0x20001ca4

08020124 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 8020124:	b480      	push	{r7}
 8020126:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8020128:	4b05      	ldr	r3, [pc, #20]	; (8020140 <TRACE_IsLocked+0x1c>)
 802012a:	8adb      	ldrh	r3, [r3, #22]
 802012c:	2b00      	cmp	r3, #0
 802012e:	bf14      	ite	ne
 8020130:	2301      	movne	r3, #1
 8020132:	2300      	moveq	r3, #0
 8020134:	b2db      	uxtb	r3, r3
}
 8020136:	4618      	mov	r0, r3
 8020138:	46bd      	mov	sp, r7
 802013a:	bc80      	pop	{r7}
 802013c:	4770      	bx	lr
 802013e:	bf00      	nop
 8020140:	20001ca4 	.word	0x20001ca4
 8020144:	00000000 	.word	0x00000000

08020148 <floor>:
 8020148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802014c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8020150:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8020154:	2e13      	cmp	r6, #19
 8020156:	4602      	mov	r2, r0
 8020158:	460b      	mov	r3, r1
 802015a:	4607      	mov	r7, r0
 802015c:	460c      	mov	r4, r1
 802015e:	4605      	mov	r5, r0
 8020160:	dc33      	bgt.n	80201ca <floor+0x82>
 8020162:	2e00      	cmp	r6, #0
 8020164:	da14      	bge.n	8020190 <floor+0x48>
 8020166:	a334      	add	r3, pc, #208	; (adr r3, 8020238 <floor+0xf0>)
 8020168:	e9d3 2300 	ldrd	r2, r3, [r3]
 802016c:	f7e0 f812 	bl	8000194 <__adddf3>
 8020170:	2200      	movs	r2, #0
 8020172:	2300      	movs	r3, #0
 8020174:	f7e0 fc54 	bl	8000a20 <__aeabi_dcmpgt>
 8020178:	b138      	cbz	r0, 802018a <floor+0x42>
 802017a:	2c00      	cmp	r4, #0
 802017c:	da58      	bge.n	8020230 <floor+0xe8>
 802017e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8020182:	431d      	orrs	r5, r3
 8020184:	d001      	beq.n	802018a <floor+0x42>
 8020186:	4c2e      	ldr	r4, [pc, #184]	; (8020240 <floor+0xf8>)
 8020188:	2500      	movs	r5, #0
 802018a:	4623      	mov	r3, r4
 802018c:	462f      	mov	r7, r5
 802018e:	e025      	b.n	80201dc <floor+0x94>
 8020190:	4a2c      	ldr	r2, [pc, #176]	; (8020244 <floor+0xfc>)
 8020192:	fa42 f806 	asr.w	r8, r2, r6
 8020196:	ea01 0208 	and.w	r2, r1, r8
 802019a:	4302      	orrs	r2, r0
 802019c:	d01e      	beq.n	80201dc <floor+0x94>
 802019e:	a326      	add	r3, pc, #152	; (adr r3, 8020238 <floor+0xf0>)
 80201a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201a4:	f7df fff6 	bl	8000194 <__adddf3>
 80201a8:	2200      	movs	r2, #0
 80201aa:	2300      	movs	r3, #0
 80201ac:	f7e0 fc38 	bl	8000a20 <__aeabi_dcmpgt>
 80201b0:	2800      	cmp	r0, #0
 80201b2:	d0ea      	beq.n	802018a <floor+0x42>
 80201b4:	2c00      	cmp	r4, #0
 80201b6:	bfbe      	ittt	lt
 80201b8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80201bc:	fa43 f606 	asrlt.w	r6, r3, r6
 80201c0:	19a4      	addlt	r4, r4, r6
 80201c2:	ea24 0408 	bic.w	r4, r4, r8
 80201c6:	2500      	movs	r5, #0
 80201c8:	e7df      	b.n	802018a <floor+0x42>
 80201ca:	2e33      	cmp	r6, #51	; 0x33
 80201cc:	dd0a      	ble.n	80201e4 <floor+0x9c>
 80201ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80201d2:	d103      	bne.n	80201dc <floor+0x94>
 80201d4:	f7df ffde 	bl	8000194 <__adddf3>
 80201d8:	4607      	mov	r7, r0
 80201da:	460b      	mov	r3, r1
 80201dc:	4638      	mov	r0, r7
 80201de:	4619      	mov	r1, r3
 80201e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80201e4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80201e8:	f04f 32ff 	mov.w	r2, #4294967295
 80201ec:	fa22 f808 	lsr.w	r8, r2, r8
 80201f0:	ea18 0f00 	tst.w	r8, r0
 80201f4:	d0f2      	beq.n	80201dc <floor+0x94>
 80201f6:	a310      	add	r3, pc, #64	; (adr r3, 8020238 <floor+0xf0>)
 80201f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201fc:	f7df ffca 	bl	8000194 <__adddf3>
 8020200:	2200      	movs	r2, #0
 8020202:	2300      	movs	r3, #0
 8020204:	f7e0 fc0c 	bl	8000a20 <__aeabi_dcmpgt>
 8020208:	2800      	cmp	r0, #0
 802020a:	d0be      	beq.n	802018a <floor+0x42>
 802020c:	2c00      	cmp	r4, #0
 802020e:	da02      	bge.n	8020216 <floor+0xce>
 8020210:	2e14      	cmp	r6, #20
 8020212:	d103      	bne.n	802021c <floor+0xd4>
 8020214:	3401      	adds	r4, #1
 8020216:	ea25 0508 	bic.w	r5, r5, r8
 802021a:	e7b6      	b.n	802018a <floor+0x42>
 802021c:	2301      	movs	r3, #1
 802021e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8020222:	fa03 f606 	lsl.w	r6, r3, r6
 8020226:	4435      	add	r5, r6
 8020228:	42bd      	cmp	r5, r7
 802022a:	bf38      	it	cc
 802022c:	18e4      	addcc	r4, r4, r3
 802022e:	e7f2      	b.n	8020216 <floor+0xce>
 8020230:	2500      	movs	r5, #0
 8020232:	462c      	mov	r4, r5
 8020234:	e7a9      	b.n	802018a <floor+0x42>
 8020236:	bf00      	nop
 8020238:	8800759c 	.word	0x8800759c
 802023c:	7e37e43c 	.word	0x7e37e43c
 8020240:	bff00000 	.word	0xbff00000
 8020244:	000fffff 	.word	0x000fffff

08020248 <pow>:
 8020248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802024c:	4614      	mov	r4, r2
 802024e:	461d      	mov	r5, r3
 8020250:	4680      	mov	r8, r0
 8020252:	4689      	mov	r9, r1
 8020254:	f000 f860 	bl	8020318 <__ieee754_pow>
 8020258:	4622      	mov	r2, r4
 802025a:	4606      	mov	r6, r0
 802025c:	460f      	mov	r7, r1
 802025e:	462b      	mov	r3, r5
 8020260:	4620      	mov	r0, r4
 8020262:	4629      	mov	r1, r5
 8020264:	f7e0 fbe6 	bl	8000a34 <__aeabi_dcmpun>
 8020268:	bbc8      	cbnz	r0, 80202de <pow+0x96>
 802026a:	2200      	movs	r2, #0
 802026c:	2300      	movs	r3, #0
 802026e:	4640      	mov	r0, r8
 8020270:	4649      	mov	r1, r9
 8020272:	f7e0 fbad 	bl	80009d0 <__aeabi_dcmpeq>
 8020276:	b1b8      	cbz	r0, 80202a8 <pow+0x60>
 8020278:	2200      	movs	r2, #0
 802027a:	2300      	movs	r3, #0
 802027c:	4620      	mov	r0, r4
 802027e:	4629      	mov	r1, r5
 8020280:	f7e0 fba6 	bl	80009d0 <__aeabi_dcmpeq>
 8020284:	2800      	cmp	r0, #0
 8020286:	d141      	bne.n	802030c <pow+0xc4>
 8020288:	4620      	mov	r0, r4
 802028a:	4629      	mov	r1, r5
 802028c:	f000 fe37 	bl	8020efe <finite>
 8020290:	b328      	cbz	r0, 80202de <pow+0x96>
 8020292:	2200      	movs	r2, #0
 8020294:	2300      	movs	r3, #0
 8020296:	4620      	mov	r0, r4
 8020298:	4629      	mov	r1, r5
 802029a:	f7e0 fba3 	bl	80009e4 <__aeabi_dcmplt>
 802029e:	b1f0      	cbz	r0, 80202de <pow+0x96>
 80202a0:	f000 feb4 	bl	802100c <__errno>
 80202a4:	2322      	movs	r3, #34	; 0x22
 80202a6:	e019      	b.n	80202dc <pow+0x94>
 80202a8:	4630      	mov	r0, r6
 80202aa:	4639      	mov	r1, r7
 80202ac:	f000 fe27 	bl	8020efe <finite>
 80202b0:	b9c8      	cbnz	r0, 80202e6 <pow+0x9e>
 80202b2:	4640      	mov	r0, r8
 80202b4:	4649      	mov	r1, r9
 80202b6:	f000 fe22 	bl	8020efe <finite>
 80202ba:	b1a0      	cbz	r0, 80202e6 <pow+0x9e>
 80202bc:	4620      	mov	r0, r4
 80202be:	4629      	mov	r1, r5
 80202c0:	f000 fe1d 	bl	8020efe <finite>
 80202c4:	b178      	cbz	r0, 80202e6 <pow+0x9e>
 80202c6:	4632      	mov	r2, r6
 80202c8:	463b      	mov	r3, r7
 80202ca:	4630      	mov	r0, r6
 80202cc:	4639      	mov	r1, r7
 80202ce:	f7e0 fbb1 	bl	8000a34 <__aeabi_dcmpun>
 80202d2:	2800      	cmp	r0, #0
 80202d4:	d0e4      	beq.n	80202a0 <pow+0x58>
 80202d6:	f000 fe99 	bl	802100c <__errno>
 80202da:	2321      	movs	r3, #33	; 0x21
 80202dc:	6003      	str	r3, [r0, #0]
 80202de:	4630      	mov	r0, r6
 80202e0:	4639      	mov	r1, r7
 80202e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80202e6:	2200      	movs	r2, #0
 80202e8:	2300      	movs	r3, #0
 80202ea:	4630      	mov	r0, r6
 80202ec:	4639      	mov	r1, r7
 80202ee:	f7e0 fb6f 	bl	80009d0 <__aeabi_dcmpeq>
 80202f2:	2800      	cmp	r0, #0
 80202f4:	d0f3      	beq.n	80202de <pow+0x96>
 80202f6:	4640      	mov	r0, r8
 80202f8:	4649      	mov	r1, r9
 80202fa:	f000 fe00 	bl	8020efe <finite>
 80202fe:	2800      	cmp	r0, #0
 8020300:	d0ed      	beq.n	80202de <pow+0x96>
 8020302:	4620      	mov	r0, r4
 8020304:	4629      	mov	r1, r5
 8020306:	f000 fdfa 	bl	8020efe <finite>
 802030a:	e7c8      	b.n	802029e <pow+0x56>
 802030c:	4f01      	ldr	r7, [pc, #4]	; (8020314 <pow+0xcc>)
 802030e:	2600      	movs	r6, #0
 8020310:	e7e5      	b.n	80202de <pow+0x96>
 8020312:	bf00      	nop
 8020314:	3ff00000 	.word	0x3ff00000

08020318 <__ieee754_pow>:
 8020318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802031c:	b093      	sub	sp, #76	; 0x4c
 802031e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020322:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8020326:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 802032a:	4689      	mov	r9, r1
 802032c:	ea56 0102 	orrs.w	r1, r6, r2
 8020330:	4680      	mov	r8, r0
 8020332:	d111      	bne.n	8020358 <__ieee754_pow+0x40>
 8020334:	1803      	adds	r3, r0, r0
 8020336:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 802033a:	4152      	adcs	r2, r2
 802033c:	4299      	cmp	r1, r3
 802033e:	4b82      	ldr	r3, [pc, #520]	; (8020548 <__ieee754_pow+0x230>)
 8020340:	4193      	sbcs	r3, r2
 8020342:	f080 84b9 	bcs.w	8020cb8 <__ieee754_pow+0x9a0>
 8020346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802034a:	4640      	mov	r0, r8
 802034c:	4649      	mov	r1, r9
 802034e:	f7df ff21 	bl	8000194 <__adddf3>
 8020352:	4683      	mov	fp, r0
 8020354:	468c      	mov	ip, r1
 8020356:	e06f      	b.n	8020438 <__ieee754_pow+0x120>
 8020358:	4b7c      	ldr	r3, [pc, #496]	; (802054c <__ieee754_pow+0x234>)
 802035a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 802035e:	429c      	cmp	r4, r3
 8020360:	464d      	mov	r5, r9
 8020362:	4682      	mov	sl, r0
 8020364:	dc06      	bgt.n	8020374 <__ieee754_pow+0x5c>
 8020366:	d101      	bne.n	802036c <__ieee754_pow+0x54>
 8020368:	2800      	cmp	r0, #0
 802036a:	d1ec      	bne.n	8020346 <__ieee754_pow+0x2e>
 802036c:	429e      	cmp	r6, r3
 802036e:	dc01      	bgt.n	8020374 <__ieee754_pow+0x5c>
 8020370:	d10f      	bne.n	8020392 <__ieee754_pow+0x7a>
 8020372:	b172      	cbz	r2, 8020392 <__ieee754_pow+0x7a>
 8020374:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8020378:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 802037c:	ea55 050a 	orrs.w	r5, r5, sl
 8020380:	d1e1      	bne.n	8020346 <__ieee754_pow+0x2e>
 8020382:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8020386:	18db      	adds	r3, r3, r3
 8020388:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 802038c:	4152      	adcs	r2, r2
 802038e:	429d      	cmp	r5, r3
 8020390:	e7d5      	b.n	802033e <__ieee754_pow+0x26>
 8020392:	2d00      	cmp	r5, #0
 8020394:	da39      	bge.n	802040a <__ieee754_pow+0xf2>
 8020396:	4b6e      	ldr	r3, [pc, #440]	; (8020550 <__ieee754_pow+0x238>)
 8020398:	429e      	cmp	r6, r3
 802039a:	dc52      	bgt.n	8020442 <__ieee754_pow+0x12a>
 802039c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80203a0:	429e      	cmp	r6, r3
 80203a2:	f340 849c 	ble.w	8020cde <__ieee754_pow+0x9c6>
 80203a6:	1533      	asrs	r3, r6, #20
 80203a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80203ac:	2b14      	cmp	r3, #20
 80203ae:	dd0f      	ble.n	80203d0 <__ieee754_pow+0xb8>
 80203b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80203b4:	fa22 f103 	lsr.w	r1, r2, r3
 80203b8:	fa01 f303 	lsl.w	r3, r1, r3
 80203bc:	4293      	cmp	r3, r2
 80203be:	f040 848e 	bne.w	8020cde <__ieee754_pow+0x9c6>
 80203c2:	f001 0101 	and.w	r1, r1, #1
 80203c6:	f1c1 0302 	rsb	r3, r1, #2
 80203ca:	9300      	str	r3, [sp, #0]
 80203cc:	b182      	cbz	r2, 80203f0 <__ieee754_pow+0xd8>
 80203ce:	e05d      	b.n	802048c <__ieee754_pow+0x174>
 80203d0:	2a00      	cmp	r2, #0
 80203d2:	d159      	bne.n	8020488 <__ieee754_pow+0x170>
 80203d4:	f1c3 0314 	rsb	r3, r3, #20
 80203d8:	fa46 f103 	asr.w	r1, r6, r3
 80203dc:	fa01 f303 	lsl.w	r3, r1, r3
 80203e0:	42b3      	cmp	r3, r6
 80203e2:	f040 8479 	bne.w	8020cd8 <__ieee754_pow+0x9c0>
 80203e6:	f001 0101 	and.w	r1, r1, #1
 80203ea:	f1c1 0302 	rsb	r3, r1, #2
 80203ee:	9300      	str	r3, [sp, #0]
 80203f0:	4b58      	ldr	r3, [pc, #352]	; (8020554 <__ieee754_pow+0x23c>)
 80203f2:	429e      	cmp	r6, r3
 80203f4:	d132      	bne.n	802045c <__ieee754_pow+0x144>
 80203f6:	2f00      	cmp	r7, #0
 80203f8:	f280 846a 	bge.w	8020cd0 <__ieee754_pow+0x9b8>
 80203fc:	4955      	ldr	r1, [pc, #340]	; (8020554 <__ieee754_pow+0x23c>)
 80203fe:	4642      	mov	r2, r8
 8020400:	464b      	mov	r3, r9
 8020402:	2000      	movs	r0, #0
 8020404:	f7e0 f9a6 	bl	8000754 <__aeabi_ddiv>
 8020408:	e7a3      	b.n	8020352 <__ieee754_pow+0x3a>
 802040a:	2300      	movs	r3, #0
 802040c:	9300      	str	r3, [sp, #0]
 802040e:	2a00      	cmp	r2, #0
 8020410:	d13c      	bne.n	802048c <__ieee754_pow+0x174>
 8020412:	4b4e      	ldr	r3, [pc, #312]	; (802054c <__ieee754_pow+0x234>)
 8020414:	429e      	cmp	r6, r3
 8020416:	d1eb      	bne.n	80203f0 <__ieee754_pow+0xd8>
 8020418:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802041c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8020420:	ea53 030a 	orrs.w	r3, r3, sl
 8020424:	f000 8448 	beq.w	8020cb8 <__ieee754_pow+0x9a0>
 8020428:	4b4b      	ldr	r3, [pc, #300]	; (8020558 <__ieee754_pow+0x240>)
 802042a:	429c      	cmp	r4, r3
 802042c:	dd0b      	ble.n	8020446 <__ieee754_pow+0x12e>
 802042e:	2f00      	cmp	r7, #0
 8020430:	f2c0 8448 	blt.w	8020cc4 <__ieee754_pow+0x9ac>
 8020434:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8020438:	4658      	mov	r0, fp
 802043a:	4661      	mov	r1, ip
 802043c:	b013      	add	sp, #76	; 0x4c
 802043e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020442:	2302      	movs	r3, #2
 8020444:	e7e2      	b.n	802040c <__ieee754_pow+0xf4>
 8020446:	2f00      	cmp	r7, #0
 8020448:	f04f 0b00 	mov.w	fp, #0
 802044c:	f04f 0c00 	mov.w	ip, #0
 8020450:	daf2      	bge.n	8020438 <__ieee754_pow+0x120>
 8020452:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8020456:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 802045a:	e7ed      	b.n	8020438 <__ieee754_pow+0x120>
 802045c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8020460:	d106      	bne.n	8020470 <__ieee754_pow+0x158>
 8020462:	4642      	mov	r2, r8
 8020464:	464b      	mov	r3, r9
 8020466:	4640      	mov	r0, r8
 8020468:	4649      	mov	r1, r9
 802046a:	f7e0 f849 	bl	8000500 <__aeabi_dmul>
 802046e:	e770      	b.n	8020352 <__ieee754_pow+0x3a>
 8020470:	4b3a      	ldr	r3, [pc, #232]	; (802055c <__ieee754_pow+0x244>)
 8020472:	429f      	cmp	r7, r3
 8020474:	d10a      	bne.n	802048c <__ieee754_pow+0x174>
 8020476:	2d00      	cmp	r5, #0
 8020478:	db08      	blt.n	802048c <__ieee754_pow+0x174>
 802047a:	4640      	mov	r0, r8
 802047c:	4649      	mov	r1, r9
 802047e:	b013      	add	sp, #76	; 0x4c
 8020480:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020484:	f000 bc5e 	b.w	8020d44 <__ieee754_sqrt>
 8020488:	2300      	movs	r3, #0
 802048a:	9300      	str	r3, [sp, #0]
 802048c:	4640      	mov	r0, r8
 802048e:	4649      	mov	r1, r9
 8020490:	f000 fd32 	bl	8020ef8 <fabs>
 8020494:	4683      	mov	fp, r0
 8020496:	468c      	mov	ip, r1
 8020498:	f1ba 0f00 	cmp.w	sl, #0
 802049c:	d128      	bne.n	80204f0 <__ieee754_pow+0x1d8>
 802049e:	b124      	cbz	r4, 80204aa <__ieee754_pow+0x192>
 80204a0:	4b2c      	ldr	r3, [pc, #176]	; (8020554 <__ieee754_pow+0x23c>)
 80204a2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80204a6:	429a      	cmp	r2, r3
 80204a8:	d122      	bne.n	80204f0 <__ieee754_pow+0x1d8>
 80204aa:	2f00      	cmp	r7, #0
 80204ac:	da07      	bge.n	80204be <__ieee754_pow+0x1a6>
 80204ae:	465a      	mov	r2, fp
 80204b0:	4663      	mov	r3, ip
 80204b2:	4928      	ldr	r1, [pc, #160]	; (8020554 <__ieee754_pow+0x23c>)
 80204b4:	2000      	movs	r0, #0
 80204b6:	f7e0 f94d 	bl	8000754 <__aeabi_ddiv>
 80204ba:	4683      	mov	fp, r0
 80204bc:	468c      	mov	ip, r1
 80204be:	2d00      	cmp	r5, #0
 80204c0:	daba      	bge.n	8020438 <__ieee754_pow+0x120>
 80204c2:	9b00      	ldr	r3, [sp, #0]
 80204c4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80204c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80204cc:	4323      	orrs	r3, r4
 80204ce:	d108      	bne.n	80204e2 <__ieee754_pow+0x1ca>
 80204d0:	465a      	mov	r2, fp
 80204d2:	4663      	mov	r3, ip
 80204d4:	4658      	mov	r0, fp
 80204d6:	4661      	mov	r1, ip
 80204d8:	f7df fe5a 	bl	8000190 <__aeabi_dsub>
 80204dc:	4602      	mov	r2, r0
 80204de:	460b      	mov	r3, r1
 80204e0:	e790      	b.n	8020404 <__ieee754_pow+0xec>
 80204e2:	9b00      	ldr	r3, [sp, #0]
 80204e4:	2b01      	cmp	r3, #1
 80204e6:	d1a7      	bne.n	8020438 <__ieee754_pow+0x120>
 80204e8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80204ec:	469c      	mov	ip, r3
 80204ee:	e7a3      	b.n	8020438 <__ieee754_pow+0x120>
 80204f0:	0feb      	lsrs	r3, r5, #31
 80204f2:	3b01      	subs	r3, #1
 80204f4:	930c      	str	r3, [sp, #48]	; 0x30
 80204f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80204f8:	9b00      	ldr	r3, [sp, #0]
 80204fa:	4313      	orrs	r3, r2
 80204fc:	d104      	bne.n	8020508 <__ieee754_pow+0x1f0>
 80204fe:	4642      	mov	r2, r8
 8020500:	464b      	mov	r3, r9
 8020502:	4640      	mov	r0, r8
 8020504:	4649      	mov	r1, r9
 8020506:	e7e7      	b.n	80204d8 <__ieee754_pow+0x1c0>
 8020508:	4b15      	ldr	r3, [pc, #84]	; (8020560 <__ieee754_pow+0x248>)
 802050a:	429e      	cmp	r6, r3
 802050c:	f340 80f6 	ble.w	80206fc <__ieee754_pow+0x3e4>
 8020510:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8020514:	429e      	cmp	r6, r3
 8020516:	4b10      	ldr	r3, [pc, #64]	; (8020558 <__ieee754_pow+0x240>)
 8020518:	dd09      	ble.n	802052e <__ieee754_pow+0x216>
 802051a:	429c      	cmp	r4, r3
 802051c:	dc0c      	bgt.n	8020538 <__ieee754_pow+0x220>
 802051e:	2f00      	cmp	r7, #0
 8020520:	da0c      	bge.n	802053c <__ieee754_pow+0x224>
 8020522:	2000      	movs	r0, #0
 8020524:	b013      	add	sp, #76	; 0x4c
 8020526:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802052a:	f000 bce0 	b.w	8020eee <__math_oflow>
 802052e:	429c      	cmp	r4, r3
 8020530:	dbf5      	blt.n	802051e <__ieee754_pow+0x206>
 8020532:	4b08      	ldr	r3, [pc, #32]	; (8020554 <__ieee754_pow+0x23c>)
 8020534:	429c      	cmp	r4, r3
 8020536:	dd15      	ble.n	8020564 <__ieee754_pow+0x24c>
 8020538:	2f00      	cmp	r7, #0
 802053a:	dcf2      	bgt.n	8020522 <__ieee754_pow+0x20a>
 802053c:	2000      	movs	r0, #0
 802053e:	b013      	add	sp, #76	; 0x4c
 8020540:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020544:	f000 bcce 	b.w	8020ee4 <__math_uflow>
 8020548:	fff00000 	.word	0xfff00000
 802054c:	7ff00000 	.word	0x7ff00000
 8020550:	433fffff 	.word	0x433fffff
 8020554:	3ff00000 	.word	0x3ff00000
 8020558:	3fefffff 	.word	0x3fefffff
 802055c:	3fe00000 	.word	0x3fe00000
 8020560:	41e00000 	.word	0x41e00000
 8020564:	4661      	mov	r1, ip
 8020566:	4b60      	ldr	r3, [pc, #384]	; (80206e8 <__ieee754_pow+0x3d0>)
 8020568:	2200      	movs	r2, #0
 802056a:	4658      	mov	r0, fp
 802056c:	f7df fe10 	bl	8000190 <__aeabi_dsub>
 8020570:	a355      	add	r3, pc, #340	; (adr r3, 80206c8 <__ieee754_pow+0x3b0>)
 8020572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020576:	4604      	mov	r4, r0
 8020578:	460d      	mov	r5, r1
 802057a:	f7df ffc1 	bl	8000500 <__aeabi_dmul>
 802057e:	a354      	add	r3, pc, #336	; (adr r3, 80206d0 <__ieee754_pow+0x3b8>)
 8020580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020584:	4606      	mov	r6, r0
 8020586:	460f      	mov	r7, r1
 8020588:	4620      	mov	r0, r4
 802058a:	4629      	mov	r1, r5
 802058c:	f7df ffb8 	bl	8000500 <__aeabi_dmul>
 8020590:	4b56      	ldr	r3, [pc, #344]	; (80206ec <__ieee754_pow+0x3d4>)
 8020592:	4682      	mov	sl, r0
 8020594:	468b      	mov	fp, r1
 8020596:	2200      	movs	r2, #0
 8020598:	4620      	mov	r0, r4
 802059a:	4629      	mov	r1, r5
 802059c:	f7df ffb0 	bl	8000500 <__aeabi_dmul>
 80205a0:	4602      	mov	r2, r0
 80205a2:	460b      	mov	r3, r1
 80205a4:	a14c      	add	r1, pc, #304	; (adr r1, 80206d8 <__ieee754_pow+0x3c0>)
 80205a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80205aa:	f7df fdf1 	bl	8000190 <__aeabi_dsub>
 80205ae:	4622      	mov	r2, r4
 80205b0:	462b      	mov	r3, r5
 80205b2:	f7df ffa5 	bl	8000500 <__aeabi_dmul>
 80205b6:	4602      	mov	r2, r0
 80205b8:	460b      	mov	r3, r1
 80205ba:	2000      	movs	r0, #0
 80205bc:	494c      	ldr	r1, [pc, #304]	; (80206f0 <__ieee754_pow+0x3d8>)
 80205be:	f7df fde7 	bl	8000190 <__aeabi_dsub>
 80205c2:	4622      	mov	r2, r4
 80205c4:	462b      	mov	r3, r5
 80205c6:	4680      	mov	r8, r0
 80205c8:	4689      	mov	r9, r1
 80205ca:	4620      	mov	r0, r4
 80205cc:	4629      	mov	r1, r5
 80205ce:	f7df ff97 	bl	8000500 <__aeabi_dmul>
 80205d2:	4602      	mov	r2, r0
 80205d4:	460b      	mov	r3, r1
 80205d6:	4640      	mov	r0, r8
 80205d8:	4649      	mov	r1, r9
 80205da:	f7df ff91 	bl	8000500 <__aeabi_dmul>
 80205de:	a340      	add	r3, pc, #256	; (adr r3, 80206e0 <__ieee754_pow+0x3c8>)
 80205e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205e4:	f7df ff8c 	bl	8000500 <__aeabi_dmul>
 80205e8:	4602      	mov	r2, r0
 80205ea:	460b      	mov	r3, r1
 80205ec:	4650      	mov	r0, sl
 80205ee:	4659      	mov	r1, fp
 80205f0:	f7df fdce 	bl	8000190 <__aeabi_dsub>
 80205f4:	4602      	mov	r2, r0
 80205f6:	460b      	mov	r3, r1
 80205f8:	4604      	mov	r4, r0
 80205fa:	460d      	mov	r5, r1
 80205fc:	4630      	mov	r0, r6
 80205fe:	4639      	mov	r1, r7
 8020600:	f7df fdc8 	bl	8000194 <__adddf3>
 8020604:	f04f 0a00 	mov.w	sl, #0
 8020608:	4632      	mov	r2, r6
 802060a:	463b      	mov	r3, r7
 802060c:	4650      	mov	r0, sl
 802060e:	468b      	mov	fp, r1
 8020610:	f7df fdbe 	bl	8000190 <__aeabi_dsub>
 8020614:	4602      	mov	r2, r0
 8020616:	460b      	mov	r3, r1
 8020618:	4620      	mov	r0, r4
 802061a:	4629      	mov	r1, r5
 802061c:	f7df fdb8 	bl	8000190 <__aeabi_dsub>
 8020620:	9b00      	ldr	r3, [sp, #0]
 8020622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020624:	3b01      	subs	r3, #1
 8020626:	4313      	orrs	r3, r2
 8020628:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802062c:	bf0c      	ite	eq
 802062e:	4b31      	ldreq	r3, [pc, #196]	; (80206f4 <__ieee754_pow+0x3dc>)
 8020630:	4b2d      	ldrne	r3, [pc, #180]	; (80206e8 <__ieee754_pow+0x3d0>)
 8020632:	2600      	movs	r6, #0
 8020634:	2200      	movs	r2, #0
 8020636:	e9cd 2300 	strd	r2, r3, [sp]
 802063a:	4604      	mov	r4, r0
 802063c:	460d      	mov	r5, r1
 802063e:	4632      	mov	r2, r6
 8020640:	463b      	mov	r3, r7
 8020642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020646:	f7df fda3 	bl	8000190 <__aeabi_dsub>
 802064a:	4652      	mov	r2, sl
 802064c:	465b      	mov	r3, fp
 802064e:	f7df ff57 	bl	8000500 <__aeabi_dmul>
 8020652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020656:	4680      	mov	r8, r0
 8020658:	4689      	mov	r9, r1
 802065a:	4620      	mov	r0, r4
 802065c:	4629      	mov	r1, r5
 802065e:	f7df ff4f 	bl	8000500 <__aeabi_dmul>
 8020662:	4602      	mov	r2, r0
 8020664:	460b      	mov	r3, r1
 8020666:	4640      	mov	r0, r8
 8020668:	4649      	mov	r1, r9
 802066a:	f7df fd93 	bl	8000194 <__adddf3>
 802066e:	4632      	mov	r2, r6
 8020670:	463b      	mov	r3, r7
 8020672:	4680      	mov	r8, r0
 8020674:	4689      	mov	r9, r1
 8020676:	4650      	mov	r0, sl
 8020678:	4659      	mov	r1, fp
 802067a:	f7df ff41 	bl	8000500 <__aeabi_dmul>
 802067e:	460b      	mov	r3, r1
 8020680:	4604      	mov	r4, r0
 8020682:	460d      	mov	r5, r1
 8020684:	4602      	mov	r2, r0
 8020686:	4649      	mov	r1, r9
 8020688:	4640      	mov	r0, r8
 802068a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 802068e:	f7df fd81 	bl	8000194 <__adddf3>
 8020692:	4b19      	ldr	r3, [pc, #100]	; (80206f8 <__ieee754_pow+0x3e0>)
 8020694:	4299      	cmp	r1, r3
 8020696:	4682      	mov	sl, r0
 8020698:	460f      	mov	r7, r1
 802069a:	460e      	mov	r6, r1
 802069c:	f340 82e7 	ble.w	8020c6e <__ieee754_pow+0x956>
 80206a0:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80206a4:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80206a8:	4303      	orrs	r3, r0
 80206aa:	f000 81e1 	beq.w	8020a70 <__ieee754_pow+0x758>
 80206ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80206b2:	2200      	movs	r2, #0
 80206b4:	2300      	movs	r3, #0
 80206b6:	f7e0 f995 	bl	80009e4 <__aeabi_dcmplt>
 80206ba:	3800      	subs	r0, #0
 80206bc:	bf18      	it	ne
 80206be:	2001      	movne	r0, #1
 80206c0:	e730      	b.n	8020524 <__ieee754_pow+0x20c>
 80206c2:	bf00      	nop
 80206c4:	f3af 8000 	nop.w
 80206c8:	60000000 	.word	0x60000000
 80206cc:	3ff71547 	.word	0x3ff71547
 80206d0:	f85ddf44 	.word	0xf85ddf44
 80206d4:	3e54ae0b 	.word	0x3e54ae0b
 80206d8:	55555555 	.word	0x55555555
 80206dc:	3fd55555 	.word	0x3fd55555
 80206e0:	652b82fe 	.word	0x652b82fe
 80206e4:	3ff71547 	.word	0x3ff71547
 80206e8:	3ff00000 	.word	0x3ff00000
 80206ec:	3fd00000 	.word	0x3fd00000
 80206f0:	3fe00000 	.word	0x3fe00000
 80206f4:	bff00000 	.word	0xbff00000
 80206f8:	408fffff 	.word	0x408fffff
 80206fc:	4bd2      	ldr	r3, [pc, #840]	; (8020a48 <__ieee754_pow+0x730>)
 80206fe:	402b      	ands	r3, r5
 8020700:	2200      	movs	r2, #0
 8020702:	b943      	cbnz	r3, 8020716 <__ieee754_pow+0x3fe>
 8020704:	4658      	mov	r0, fp
 8020706:	4bd1      	ldr	r3, [pc, #836]	; (8020a4c <__ieee754_pow+0x734>)
 8020708:	4661      	mov	r1, ip
 802070a:	f7df fef9 	bl	8000500 <__aeabi_dmul>
 802070e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8020712:	4683      	mov	fp, r0
 8020714:	460c      	mov	r4, r1
 8020716:	1523      	asrs	r3, r4, #20
 8020718:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802071c:	4413      	add	r3, r2
 802071e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020720:	4bcb      	ldr	r3, [pc, #812]	; (8020a50 <__ieee754_pow+0x738>)
 8020722:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8020726:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 802072a:	429c      	cmp	r4, r3
 802072c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8020730:	dd08      	ble.n	8020744 <__ieee754_pow+0x42c>
 8020732:	4bc8      	ldr	r3, [pc, #800]	; (8020a54 <__ieee754_pow+0x73c>)
 8020734:	429c      	cmp	r4, r3
 8020736:	f340 8199 	ble.w	8020a6c <__ieee754_pow+0x754>
 802073a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802073c:	3301      	adds	r3, #1
 802073e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020740:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8020744:	2600      	movs	r6, #0
 8020746:	00f3      	lsls	r3, r6, #3
 8020748:	930d      	str	r3, [sp, #52]	; 0x34
 802074a:	4bc3      	ldr	r3, [pc, #780]	; (8020a58 <__ieee754_pow+0x740>)
 802074c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8020750:	e9d3 3400 	ldrd	r3, r4, [r3]
 8020754:	4658      	mov	r0, fp
 8020756:	e9cd 3408 	strd	r3, r4, [sp, #32]
 802075a:	461a      	mov	r2, r3
 802075c:	4629      	mov	r1, r5
 802075e:	4623      	mov	r3, r4
 8020760:	f7df fd16 	bl	8000190 <__aeabi_dsub>
 8020764:	46da      	mov	sl, fp
 8020766:	4652      	mov	r2, sl
 8020768:	462b      	mov	r3, r5
 802076a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802076e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8020772:	f7df fd0f 	bl	8000194 <__adddf3>
 8020776:	4602      	mov	r2, r0
 8020778:	460b      	mov	r3, r1
 802077a:	2000      	movs	r0, #0
 802077c:	49b7      	ldr	r1, [pc, #732]	; (8020a5c <__ieee754_pow+0x744>)
 802077e:	f7df ffe9 	bl	8000754 <__aeabi_ddiv>
 8020782:	4602      	mov	r2, r0
 8020784:	460b      	mov	r3, r1
 8020786:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 802078a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802078e:	f7df feb7 	bl	8000500 <__aeabi_dmul>
 8020792:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020796:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 802079a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 802079e:	2300      	movs	r3, #0
 80207a0:	9304      	str	r3, [sp, #16]
 80207a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80207a6:	46ab      	mov	fp, r5
 80207a8:	106d      	asrs	r5, r5, #1
 80207aa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80207ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80207b2:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80207b6:	2200      	movs	r2, #0
 80207b8:	4640      	mov	r0, r8
 80207ba:	4649      	mov	r1, r9
 80207bc:	4614      	mov	r4, r2
 80207be:	461d      	mov	r5, r3
 80207c0:	f7df fe9e 	bl	8000500 <__aeabi_dmul>
 80207c4:	4602      	mov	r2, r0
 80207c6:	460b      	mov	r3, r1
 80207c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80207cc:	f7df fce0 	bl	8000190 <__aeabi_dsub>
 80207d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80207d4:	4606      	mov	r6, r0
 80207d6:	460f      	mov	r7, r1
 80207d8:	4620      	mov	r0, r4
 80207da:	4629      	mov	r1, r5
 80207dc:	f7df fcd8 	bl	8000190 <__aeabi_dsub>
 80207e0:	4602      	mov	r2, r0
 80207e2:	460b      	mov	r3, r1
 80207e4:	4650      	mov	r0, sl
 80207e6:	4659      	mov	r1, fp
 80207e8:	f7df fcd2 	bl	8000190 <__aeabi_dsub>
 80207ec:	4642      	mov	r2, r8
 80207ee:	464b      	mov	r3, r9
 80207f0:	f7df fe86 	bl	8000500 <__aeabi_dmul>
 80207f4:	4602      	mov	r2, r0
 80207f6:	460b      	mov	r3, r1
 80207f8:	4630      	mov	r0, r6
 80207fa:	4639      	mov	r1, r7
 80207fc:	f7df fcc8 	bl	8000190 <__aeabi_dsub>
 8020800:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8020804:	f7df fe7c 	bl	8000500 <__aeabi_dmul>
 8020808:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802080c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8020810:	4610      	mov	r0, r2
 8020812:	4619      	mov	r1, r3
 8020814:	f7df fe74 	bl	8000500 <__aeabi_dmul>
 8020818:	a379      	add	r3, pc, #484	; (adr r3, 8020a00 <__ieee754_pow+0x6e8>)
 802081a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802081e:	4604      	mov	r4, r0
 8020820:	460d      	mov	r5, r1
 8020822:	f7df fe6d 	bl	8000500 <__aeabi_dmul>
 8020826:	a378      	add	r3, pc, #480	; (adr r3, 8020a08 <__ieee754_pow+0x6f0>)
 8020828:	e9d3 2300 	ldrd	r2, r3, [r3]
 802082c:	f7df fcb2 	bl	8000194 <__adddf3>
 8020830:	4622      	mov	r2, r4
 8020832:	462b      	mov	r3, r5
 8020834:	f7df fe64 	bl	8000500 <__aeabi_dmul>
 8020838:	a375      	add	r3, pc, #468	; (adr r3, 8020a10 <__ieee754_pow+0x6f8>)
 802083a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802083e:	f7df fca9 	bl	8000194 <__adddf3>
 8020842:	4622      	mov	r2, r4
 8020844:	462b      	mov	r3, r5
 8020846:	f7df fe5b 	bl	8000500 <__aeabi_dmul>
 802084a:	a373      	add	r3, pc, #460	; (adr r3, 8020a18 <__ieee754_pow+0x700>)
 802084c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020850:	f7df fca0 	bl	8000194 <__adddf3>
 8020854:	4622      	mov	r2, r4
 8020856:	462b      	mov	r3, r5
 8020858:	f7df fe52 	bl	8000500 <__aeabi_dmul>
 802085c:	a370      	add	r3, pc, #448	; (adr r3, 8020a20 <__ieee754_pow+0x708>)
 802085e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020862:	f7df fc97 	bl	8000194 <__adddf3>
 8020866:	4622      	mov	r2, r4
 8020868:	462b      	mov	r3, r5
 802086a:	f7df fe49 	bl	8000500 <__aeabi_dmul>
 802086e:	a36e      	add	r3, pc, #440	; (adr r3, 8020a28 <__ieee754_pow+0x710>)
 8020870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020874:	f7df fc8e 	bl	8000194 <__adddf3>
 8020878:	4622      	mov	r2, r4
 802087a:	4606      	mov	r6, r0
 802087c:	460f      	mov	r7, r1
 802087e:	462b      	mov	r3, r5
 8020880:	4620      	mov	r0, r4
 8020882:	4629      	mov	r1, r5
 8020884:	f7df fe3c 	bl	8000500 <__aeabi_dmul>
 8020888:	4602      	mov	r2, r0
 802088a:	460b      	mov	r3, r1
 802088c:	4630      	mov	r0, r6
 802088e:	4639      	mov	r1, r7
 8020890:	f7df fe36 	bl	8000500 <__aeabi_dmul>
 8020894:	4642      	mov	r2, r8
 8020896:	4604      	mov	r4, r0
 8020898:	460d      	mov	r5, r1
 802089a:	464b      	mov	r3, r9
 802089c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80208a0:	f7df fc78 	bl	8000194 <__adddf3>
 80208a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80208a8:	f7df fe2a 	bl	8000500 <__aeabi_dmul>
 80208ac:	4622      	mov	r2, r4
 80208ae:	462b      	mov	r3, r5
 80208b0:	f7df fc70 	bl	8000194 <__adddf3>
 80208b4:	4642      	mov	r2, r8
 80208b6:	4606      	mov	r6, r0
 80208b8:	460f      	mov	r7, r1
 80208ba:	464b      	mov	r3, r9
 80208bc:	4640      	mov	r0, r8
 80208be:	4649      	mov	r1, r9
 80208c0:	f7df fe1e 	bl	8000500 <__aeabi_dmul>
 80208c4:	4b66      	ldr	r3, [pc, #408]	; (8020a60 <__ieee754_pow+0x748>)
 80208c6:	2200      	movs	r2, #0
 80208c8:	4682      	mov	sl, r0
 80208ca:	468b      	mov	fp, r1
 80208cc:	f7df fc62 	bl	8000194 <__adddf3>
 80208d0:	4632      	mov	r2, r6
 80208d2:	463b      	mov	r3, r7
 80208d4:	f7df fc5e 	bl	8000194 <__adddf3>
 80208d8:	2400      	movs	r4, #0
 80208da:	460d      	mov	r5, r1
 80208dc:	4622      	mov	r2, r4
 80208de:	460b      	mov	r3, r1
 80208e0:	4640      	mov	r0, r8
 80208e2:	4649      	mov	r1, r9
 80208e4:	f7df fe0c 	bl	8000500 <__aeabi_dmul>
 80208e8:	4b5d      	ldr	r3, [pc, #372]	; (8020a60 <__ieee754_pow+0x748>)
 80208ea:	4680      	mov	r8, r0
 80208ec:	4689      	mov	r9, r1
 80208ee:	2200      	movs	r2, #0
 80208f0:	4620      	mov	r0, r4
 80208f2:	4629      	mov	r1, r5
 80208f4:	f7df fc4c 	bl	8000190 <__aeabi_dsub>
 80208f8:	4652      	mov	r2, sl
 80208fa:	465b      	mov	r3, fp
 80208fc:	f7df fc48 	bl	8000190 <__aeabi_dsub>
 8020900:	4602      	mov	r2, r0
 8020902:	460b      	mov	r3, r1
 8020904:	4630      	mov	r0, r6
 8020906:	4639      	mov	r1, r7
 8020908:	f7df fc42 	bl	8000190 <__aeabi_dsub>
 802090c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020910:	f7df fdf6 	bl	8000500 <__aeabi_dmul>
 8020914:	4622      	mov	r2, r4
 8020916:	4606      	mov	r6, r0
 8020918:	460f      	mov	r7, r1
 802091a:	462b      	mov	r3, r5
 802091c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8020920:	f7df fdee 	bl	8000500 <__aeabi_dmul>
 8020924:	4602      	mov	r2, r0
 8020926:	460b      	mov	r3, r1
 8020928:	4630      	mov	r0, r6
 802092a:	4639      	mov	r1, r7
 802092c:	f7df fc32 	bl	8000194 <__adddf3>
 8020930:	4606      	mov	r6, r0
 8020932:	460f      	mov	r7, r1
 8020934:	4602      	mov	r2, r0
 8020936:	460b      	mov	r3, r1
 8020938:	4640      	mov	r0, r8
 802093a:	4649      	mov	r1, r9
 802093c:	f7df fc2a 	bl	8000194 <__adddf3>
 8020940:	2400      	movs	r4, #0
 8020942:	a33b      	add	r3, pc, #236	; (adr r3, 8020a30 <__ieee754_pow+0x718>)
 8020944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020948:	4620      	mov	r0, r4
 802094a:	460d      	mov	r5, r1
 802094c:	f7df fdd8 	bl	8000500 <__aeabi_dmul>
 8020950:	4642      	mov	r2, r8
 8020952:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020956:	464b      	mov	r3, r9
 8020958:	4620      	mov	r0, r4
 802095a:	4629      	mov	r1, r5
 802095c:	f7df fc18 	bl	8000190 <__aeabi_dsub>
 8020960:	4602      	mov	r2, r0
 8020962:	460b      	mov	r3, r1
 8020964:	4630      	mov	r0, r6
 8020966:	4639      	mov	r1, r7
 8020968:	f7df fc12 	bl	8000190 <__aeabi_dsub>
 802096c:	a332      	add	r3, pc, #200	; (adr r3, 8020a38 <__ieee754_pow+0x720>)
 802096e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020972:	f7df fdc5 	bl	8000500 <__aeabi_dmul>
 8020976:	a332      	add	r3, pc, #200	; (adr r3, 8020a40 <__ieee754_pow+0x728>)
 8020978:	e9d3 2300 	ldrd	r2, r3, [r3]
 802097c:	4606      	mov	r6, r0
 802097e:	460f      	mov	r7, r1
 8020980:	4620      	mov	r0, r4
 8020982:	4629      	mov	r1, r5
 8020984:	f7df fdbc 	bl	8000500 <__aeabi_dmul>
 8020988:	4602      	mov	r2, r0
 802098a:	460b      	mov	r3, r1
 802098c:	4630      	mov	r0, r6
 802098e:	4639      	mov	r1, r7
 8020990:	f7df fc00 	bl	8000194 <__adddf3>
 8020994:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020996:	4b33      	ldr	r3, [pc, #204]	; (8020a64 <__ieee754_pow+0x74c>)
 8020998:	4413      	add	r3, r2
 802099a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802099e:	f7df fbf9 	bl	8000194 <__adddf3>
 80209a2:	4680      	mov	r8, r0
 80209a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80209a6:	4689      	mov	r9, r1
 80209a8:	f7df fd40 	bl	800042c <__aeabi_i2d>
 80209ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80209ae:	4b2e      	ldr	r3, [pc, #184]	; (8020a68 <__ieee754_pow+0x750>)
 80209b0:	4413      	add	r3, r2
 80209b2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80209b6:	4604      	mov	r4, r0
 80209b8:	460d      	mov	r5, r1
 80209ba:	4642      	mov	r2, r8
 80209bc:	464b      	mov	r3, r9
 80209be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80209c2:	f7df fbe7 	bl	8000194 <__adddf3>
 80209c6:	4632      	mov	r2, r6
 80209c8:	463b      	mov	r3, r7
 80209ca:	f7df fbe3 	bl	8000194 <__adddf3>
 80209ce:	4622      	mov	r2, r4
 80209d0:	462b      	mov	r3, r5
 80209d2:	f7df fbdf 	bl	8000194 <__adddf3>
 80209d6:	f04f 0a00 	mov.w	sl, #0
 80209da:	4622      	mov	r2, r4
 80209dc:	462b      	mov	r3, r5
 80209de:	4650      	mov	r0, sl
 80209e0:	468b      	mov	fp, r1
 80209e2:	f7df fbd5 	bl	8000190 <__aeabi_dsub>
 80209e6:	4632      	mov	r2, r6
 80209e8:	463b      	mov	r3, r7
 80209ea:	f7df fbd1 	bl	8000190 <__aeabi_dsub>
 80209ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80209f2:	f7df fbcd 	bl	8000190 <__aeabi_dsub>
 80209f6:	4602      	mov	r2, r0
 80209f8:	460b      	mov	r3, r1
 80209fa:	4640      	mov	r0, r8
 80209fc:	4649      	mov	r1, r9
 80209fe:	e60d      	b.n	802061c <__ieee754_pow+0x304>
 8020a00:	4a454eef 	.word	0x4a454eef
 8020a04:	3fca7e28 	.word	0x3fca7e28
 8020a08:	93c9db65 	.word	0x93c9db65
 8020a0c:	3fcd864a 	.word	0x3fcd864a
 8020a10:	a91d4101 	.word	0xa91d4101
 8020a14:	3fd17460 	.word	0x3fd17460
 8020a18:	518f264d 	.word	0x518f264d
 8020a1c:	3fd55555 	.word	0x3fd55555
 8020a20:	db6fabff 	.word	0xdb6fabff
 8020a24:	3fdb6db6 	.word	0x3fdb6db6
 8020a28:	33333303 	.word	0x33333303
 8020a2c:	3fe33333 	.word	0x3fe33333
 8020a30:	e0000000 	.word	0xe0000000
 8020a34:	3feec709 	.word	0x3feec709
 8020a38:	dc3a03fd 	.word	0xdc3a03fd
 8020a3c:	3feec709 	.word	0x3feec709
 8020a40:	145b01f5 	.word	0x145b01f5
 8020a44:	be3e2fe0 	.word	0xbe3e2fe0
 8020a48:	7ff00000 	.word	0x7ff00000
 8020a4c:	43400000 	.word	0x43400000
 8020a50:	0003988e 	.word	0x0003988e
 8020a54:	000bb679 	.word	0x000bb679
 8020a58:	080220d0 	.word	0x080220d0
 8020a5c:	3ff00000 	.word	0x3ff00000
 8020a60:	40080000 	.word	0x40080000
 8020a64:	080220f0 	.word	0x080220f0
 8020a68:	080220e0 	.word	0x080220e0
 8020a6c:	2601      	movs	r6, #1
 8020a6e:	e66a      	b.n	8020746 <__ieee754_pow+0x42e>
 8020a70:	a39d      	add	r3, pc, #628	; (adr r3, 8020ce8 <__ieee754_pow+0x9d0>)
 8020a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a76:	4640      	mov	r0, r8
 8020a78:	4649      	mov	r1, r9
 8020a7a:	f7df fb8b 	bl	8000194 <__adddf3>
 8020a7e:	4622      	mov	r2, r4
 8020a80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020a84:	462b      	mov	r3, r5
 8020a86:	4650      	mov	r0, sl
 8020a88:	4639      	mov	r1, r7
 8020a8a:	f7df fb81 	bl	8000190 <__aeabi_dsub>
 8020a8e:	4602      	mov	r2, r0
 8020a90:	460b      	mov	r3, r1
 8020a92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020a96:	f7df ffc3 	bl	8000a20 <__aeabi_dcmpgt>
 8020a9a:	2800      	cmp	r0, #0
 8020a9c:	f47f ae07 	bne.w	80206ae <__ieee754_pow+0x396>
 8020aa0:	4aa3      	ldr	r2, [pc, #652]	; (8020d30 <__ieee754_pow+0xa18>)
 8020aa2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8020aa6:	4293      	cmp	r3, r2
 8020aa8:	f340 8101 	ble.w	8020cae <__ieee754_pow+0x996>
 8020aac:	151b      	asrs	r3, r3, #20
 8020aae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8020ab2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8020ab6:	fa4a f303 	asr.w	r3, sl, r3
 8020aba:	4433      	add	r3, r6
 8020abc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8020ac0:	4f9c      	ldr	r7, [pc, #624]	; (8020d34 <__ieee754_pow+0xa1c>)
 8020ac2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8020ac6:	4117      	asrs	r7, r2
 8020ac8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8020acc:	2000      	movs	r0, #0
 8020ace:	ea23 0107 	bic.w	r1, r3, r7
 8020ad2:	f1c2 0214 	rsb	r2, r2, #20
 8020ad6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8020ada:	fa4a fa02 	asr.w	sl, sl, r2
 8020ade:	2e00      	cmp	r6, #0
 8020ae0:	4602      	mov	r2, r0
 8020ae2:	460b      	mov	r3, r1
 8020ae4:	4620      	mov	r0, r4
 8020ae6:	4629      	mov	r1, r5
 8020ae8:	bfb8      	it	lt
 8020aea:	f1ca 0a00 	rsblt	sl, sl, #0
 8020aee:	f7df fb4f 	bl	8000190 <__aeabi_dsub>
 8020af2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020af6:	4642      	mov	r2, r8
 8020af8:	464b      	mov	r3, r9
 8020afa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020afe:	f7df fb49 	bl	8000194 <__adddf3>
 8020b02:	2400      	movs	r4, #0
 8020b04:	a37a      	add	r3, pc, #488	; (adr r3, 8020cf0 <__ieee754_pow+0x9d8>)
 8020b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b0a:	4620      	mov	r0, r4
 8020b0c:	460d      	mov	r5, r1
 8020b0e:	f7df fcf7 	bl	8000500 <__aeabi_dmul>
 8020b12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020b16:	4606      	mov	r6, r0
 8020b18:	460f      	mov	r7, r1
 8020b1a:	4620      	mov	r0, r4
 8020b1c:	4629      	mov	r1, r5
 8020b1e:	f7df fb37 	bl	8000190 <__aeabi_dsub>
 8020b22:	4602      	mov	r2, r0
 8020b24:	460b      	mov	r3, r1
 8020b26:	4640      	mov	r0, r8
 8020b28:	4649      	mov	r1, r9
 8020b2a:	f7df fb31 	bl	8000190 <__aeabi_dsub>
 8020b2e:	a372      	add	r3, pc, #456	; (adr r3, 8020cf8 <__ieee754_pow+0x9e0>)
 8020b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b34:	f7df fce4 	bl	8000500 <__aeabi_dmul>
 8020b38:	a371      	add	r3, pc, #452	; (adr r3, 8020d00 <__ieee754_pow+0x9e8>)
 8020b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b3e:	4680      	mov	r8, r0
 8020b40:	4689      	mov	r9, r1
 8020b42:	4620      	mov	r0, r4
 8020b44:	4629      	mov	r1, r5
 8020b46:	f7df fcdb 	bl	8000500 <__aeabi_dmul>
 8020b4a:	4602      	mov	r2, r0
 8020b4c:	460b      	mov	r3, r1
 8020b4e:	4640      	mov	r0, r8
 8020b50:	4649      	mov	r1, r9
 8020b52:	f7df fb1f 	bl	8000194 <__adddf3>
 8020b56:	4604      	mov	r4, r0
 8020b58:	460d      	mov	r5, r1
 8020b5a:	4602      	mov	r2, r0
 8020b5c:	460b      	mov	r3, r1
 8020b5e:	4630      	mov	r0, r6
 8020b60:	4639      	mov	r1, r7
 8020b62:	f7df fb17 	bl	8000194 <__adddf3>
 8020b66:	4632      	mov	r2, r6
 8020b68:	463b      	mov	r3, r7
 8020b6a:	4680      	mov	r8, r0
 8020b6c:	4689      	mov	r9, r1
 8020b6e:	f7df fb0f 	bl	8000190 <__aeabi_dsub>
 8020b72:	4602      	mov	r2, r0
 8020b74:	460b      	mov	r3, r1
 8020b76:	4620      	mov	r0, r4
 8020b78:	4629      	mov	r1, r5
 8020b7a:	f7df fb09 	bl	8000190 <__aeabi_dsub>
 8020b7e:	4642      	mov	r2, r8
 8020b80:	4606      	mov	r6, r0
 8020b82:	460f      	mov	r7, r1
 8020b84:	464b      	mov	r3, r9
 8020b86:	4640      	mov	r0, r8
 8020b88:	4649      	mov	r1, r9
 8020b8a:	f7df fcb9 	bl	8000500 <__aeabi_dmul>
 8020b8e:	a35e      	add	r3, pc, #376	; (adr r3, 8020d08 <__ieee754_pow+0x9f0>)
 8020b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b94:	4604      	mov	r4, r0
 8020b96:	460d      	mov	r5, r1
 8020b98:	f7df fcb2 	bl	8000500 <__aeabi_dmul>
 8020b9c:	a35c      	add	r3, pc, #368	; (adr r3, 8020d10 <__ieee754_pow+0x9f8>)
 8020b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ba2:	f7df faf5 	bl	8000190 <__aeabi_dsub>
 8020ba6:	4622      	mov	r2, r4
 8020ba8:	462b      	mov	r3, r5
 8020baa:	f7df fca9 	bl	8000500 <__aeabi_dmul>
 8020bae:	a35a      	add	r3, pc, #360	; (adr r3, 8020d18 <__ieee754_pow+0xa00>)
 8020bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bb4:	f7df faee 	bl	8000194 <__adddf3>
 8020bb8:	4622      	mov	r2, r4
 8020bba:	462b      	mov	r3, r5
 8020bbc:	f7df fca0 	bl	8000500 <__aeabi_dmul>
 8020bc0:	a357      	add	r3, pc, #348	; (adr r3, 8020d20 <__ieee754_pow+0xa08>)
 8020bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bc6:	f7df fae3 	bl	8000190 <__aeabi_dsub>
 8020bca:	4622      	mov	r2, r4
 8020bcc:	462b      	mov	r3, r5
 8020bce:	f7df fc97 	bl	8000500 <__aeabi_dmul>
 8020bd2:	a355      	add	r3, pc, #340	; (adr r3, 8020d28 <__ieee754_pow+0xa10>)
 8020bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bd8:	f7df fadc 	bl	8000194 <__adddf3>
 8020bdc:	4622      	mov	r2, r4
 8020bde:	462b      	mov	r3, r5
 8020be0:	f7df fc8e 	bl	8000500 <__aeabi_dmul>
 8020be4:	4602      	mov	r2, r0
 8020be6:	460b      	mov	r3, r1
 8020be8:	4640      	mov	r0, r8
 8020bea:	4649      	mov	r1, r9
 8020bec:	f7df fad0 	bl	8000190 <__aeabi_dsub>
 8020bf0:	4604      	mov	r4, r0
 8020bf2:	460d      	mov	r5, r1
 8020bf4:	4602      	mov	r2, r0
 8020bf6:	460b      	mov	r3, r1
 8020bf8:	4640      	mov	r0, r8
 8020bfa:	4649      	mov	r1, r9
 8020bfc:	f7df fc80 	bl	8000500 <__aeabi_dmul>
 8020c00:	2200      	movs	r2, #0
 8020c02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020c06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020c0a:	4620      	mov	r0, r4
 8020c0c:	4629      	mov	r1, r5
 8020c0e:	f7df fabf 	bl	8000190 <__aeabi_dsub>
 8020c12:	4602      	mov	r2, r0
 8020c14:	460b      	mov	r3, r1
 8020c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020c1a:	f7df fd9b 	bl	8000754 <__aeabi_ddiv>
 8020c1e:	4632      	mov	r2, r6
 8020c20:	4604      	mov	r4, r0
 8020c22:	460d      	mov	r5, r1
 8020c24:	463b      	mov	r3, r7
 8020c26:	4640      	mov	r0, r8
 8020c28:	4649      	mov	r1, r9
 8020c2a:	f7df fc69 	bl	8000500 <__aeabi_dmul>
 8020c2e:	4632      	mov	r2, r6
 8020c30:	463b      	mov	r3, r7
 8020c32:	f7df faaf 	bl	8000194 <__adddf3>
 8020c36:	4602      	mov	r2, r0
 8020c38:	460b      	mov	r3, r1
 8020c3a:	4620      	mov	r0, r4
 8020c3c:	4629      	mov	r1, r5
 8020c3e:	f7df faa7 	bl	8000190 <__aeabi_dsub>
 8020c42:	4642      	mov	r2, r8
 8020c44:	464b      	mov	r3, r9
 8020c46:	f7df faa3 	bl	8000190 <__aeabi_dsub>
 8020c4a:	4602      	mov	r2, r0
 8020c4c:	460b      	mov	r3, r1
 8020c4e:	2000      	movs	r0, #0
 8020c50:	4939      	ldr	r1, [pc, #228]	; (8020d38 <__ieee754_pow+0xa20>)
 8020c52:	f7df fa9d 	bl	8000190 <__aeabi_dsub>
 8020c56:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8020c5a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8020c5e:	da29      	bge.n	8020cb4 <__ieee754_pow+0x99c>
 8020c60:	4652      	mov	r2, sl
 8020c62:	f000 f955 	bl	8020f10 <scalbn>
 8020c66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020c6a:	f7ff bbfe 	b.w	802046a <__ieee754_pow+0x152>
 8020c6e:	4b33      	ldr	r3, [pc, #204]	; (8020d3c <__ieee754_pow+0xa24>)
 8020c70:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8020c74:	429f      	cmp	r7, r3
 8020c76:	f77f af13 	ble.w	8020aa0 <__ieee754_pow+0x788>
 8020c7a:	4b31      	ldr	r3, [pc, #196]	; (8020d40 <__ieee754_pow+0xa28>)
 8020c7c:	440b      	add	r3, r1
 8020c7e:	4303      	orrs	r3, r0
 8020c80:	d009      	beq.n	8020c96 <__ieee754_pow+0x97e>
 8020c82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020c86:	2200      	movs	r2, #0
 8020c88:	2300      	movs	r3, #0
 8020c8a:	f7df feab 	bl	80009e4 <__aeabi_dcmplt>
 8020c8e:	3800      	subs	r0, #0
 8020c90:	bf18      	it	ne
 8020c92:	2001      	movne	r0, #1
 8020c94:	e453      	b.n	802053e <__ieee754_pow+0x226>
 8020c96:	4622      	mov	r2, r4
 8020c98:	462b      	mov	r3, r5
 8020c9a:	f7df fa79 	bl	8000190 <__aeabi_dsub>
 8020c9e:	4642      	mov	r2, r8
 8020ca0:	464b      	mov	r3, r9
 8020ca2:	f7df feb3 	bl	8000a0c <__aeabi_dcmpge>
 8020ca6:	2800      	cmp	r0, #0
 8020ca8:	f43f aefa 	beq.w	8020aa0 <__ieee754_pow+0x788>
 8020cac:	e7e9      	b.n	8020c82 <__ieee754_pow+0x96a>
 8020cae:	f04f 0a00 	mov.w	sl, #0
 8020cb2:	e720      	b.n	8020af6 <__ieee754_pow+0x7de>
 8020cb4:	4621      	mov	r1, r4
 8020cb6:	e7d6      	b.n	8020c66 <__ieee754_pow+0x94e>
 8020cb8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8020d38 <__ieee754_pow+0xa20>
 8020cbc:	f04f 0b00 	mov.w	fp, #0
 8020cc0:	f7ff bbba 	b.w	8020438 <__ieee754_pow+0x120>
 8020cc4:	f04f 0b00 	mov.w	fp, #0
 8020cc8:	f04f 0c00 	mov.w	ip, #0
 8020ccc:	f7ff bbb4 	b.w	8020438 <__ieee754_pow+0x120>
 8020cd0:	4640      	mov	r0, r8
 8020cd2:	4649      	mov	r1, r9
 8020cd4:	f7ff bb3d 	b.w	8020352 <__ieee754_pow+0x3a>
 8020cd8:	9200      	str	r2, [sp, #0]
 8020cda:	f7ff bb89 	b.w	80203f0 <__ieee754_pow+0xd8>
 8020cde:	2300      	movs	r3, #0
 8020ce0:	f7ff bb73 	b.w	80203ca <__ieee754_pow+0xb2>
 8020ce4:	f3af 8000 	nop.w
 8020ce8:	652b82fe 	.word	0x652b82fe
 8020cec:	3c971547 	.word	0x3c971547
 8020cf0:	00000000 	.word	0x00000000
 8020cf4:	3fe62e43 	.word	0x3fe62e43
 8020cf8:	fefa39ef 	.word	0xfefa39ef
 8020cfc:	3fe62e42 	.word	0x3fe62e42
 8020d00:	0ca86c39 	.word	0x0ca86c39
 8020d04:	be205c61 	.word	0xbe205c61
 8020d08:	72bea4d0 	.word	0x72bea4d0
 8020d0c:	3e663769 	.word	0x3e663769
 8020d10:	c5d26bf1 	.word	0xc5d26bf1
 8020d14:	3ebbbd41 	.word	0x3ebbbd41
 8020d18:	af25de2c 	.word	0xaf25de2c
 8020d1c:	3f11566a 	.word	0x3f11566a
 8020d20:	16bebd93 	.word	0x16bebd93
 8020d24:	3f66c16c 	.word	0x3f66c16c
 8020d28:	5555553e 	.word	0x5555553e
 8020d2c:	3fc55555 	.word	0x3fc55555
 8020d30:	3fe00000 	.word	0x3fe00000
 8020d34:	000fffff 	.word	0x000fffff
 8020d38:	3ff00000 	.word	0x3ff00000
 8020d3c:	4090cbff 	.word	0x4090cbff
 8020d40:	3f6f3400 	.word	0x3f6f3400

08020d44 <__ieee754_sqrt>:
 8020d44:	f8df c154 	ldr.w	ip, [pc, #340]	; 8020e9c <__ieee754_sqrt+0x158>
 8020d48:	ea3c 0c01 	bics.w	ip, ip, r1
 8020d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d50:	460a      	mov	r2, r1
 8020d52:	4606      	mov	r6, r0
 8020d54:	460d      	mov	r5, r1
 8020d56:	460c      	mov	r4, r1
 8020d58:	4607      	mov	r7, r0
 8020d5a:	4603      	mov	r3, r0
 8020d5c:	d10f      	bne.n	8020d7e <__ieee754_sqrt+0x3a>
 8020d5e:	4602      	mov	r2, r0
 8020d60:	460b      	mov	r3, r1
 8020d62:	f7df fbcd 	bl	8000500 <__aeabi_dmul>
 8020d66:	4602      	mov	r2, r0
 8020d68:	460b      	mov	r3, r1
 8020d6a:	4630      	mov	r0, r6
 8020d6c:	4629      	mov	r1, r5
 8020d6e:	f7df fa11 	bl	8000194 <__adddf3>
 8020d72:	4606      	mov	r6, r0
 8020d74:	460d      	mov	r5, r1
 8020d76:	4630      	mov	r0, r6
 8020d78:	4629      	mov	r1, r5
 8020d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d7e:	2900      	cmp	r1, #0
 8020d80:	dc0e      	bgt.n	8020da0 <__ieee754_sqrt+0x5c>
 8020d82:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8020d86:	ea5c 0707 	orrs.w	r7, ip, r7
 8020d8a:	d0f4      	beq.n	8020d76 <__ieee754_sqrt+0x32>
 8020d8c:	b141      	cbz	r1, 8020da0 <__ieee754_sqrt+0x5c>
 8020d8e:	4602      	mov	r2, r0
 8020d90:	460b      	mov	r3, r1
 8020d92:	f7df f9fd 	bl	8000190 <__aeabi_dsub>
 8020d96:	4602      	mov	r2, r0
 8020d98:	460b      	mov	r3, r1
 8020d9a:	f7df fcdb 	bl	8000754 <__aeabi_ddiv>
 8020d9e:	e7e8      	b.n	8020d72 <__ieee754_sqrt+0x2e>
 8020da0:	1521      	asrs	r1, r4, #20
 8020da2:	d074      	beq.n	8020e8e <__ieee754_sqrt+0x14a>
 8020da4:	07cc      	lsls	r4, r1, #31
 8020da6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8020daa:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8020dae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8020db2:	bf5e      	ittt	pl
 8020db4:	0fd9      	lsrpl	r1, r3, #31
 8020db6:	005b      	lslpl	r3, r3, #1
 8020db8:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8020dbc:	2400      	movs	r4, #0
 8020dbe:	0fd9      	lsrs	r1, r3, #31
 8020dc0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8020dc4:	107f      	asrs	r7, r7, #1
 8020dc6:	005b      	lsls	r3, r3, #1
 8020dc8:	2516      	movs	r5, #22
 8020dca:	4620      	mov	r0, r4
 8020dcc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8020dd0:	1846      	adds	r6, r0, r1
 8020dd2:	4296      	cmp	r6, r2
 8020dd4:	bfde      	ittt	le
 8020dd6:	1b92      	suble	r2, r2, r6
 8020dd8:	1870      	addle	r0, r6, r1
 8020dda:	1864      	addle	r4, r4, r1
 8020ddc:	0052      	lsls	r2, r2, #1
 8020dde:	3d01      	subs	r5, #1
 8020de0:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8020de4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8020de8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020dec:	d1f0      	bne.n	8020dd0 <__ieee754_sqrt+0x8c>
 8020dee:	4629      	mov	r1, r5
 8020df0:	f04f 0e20 	mov.w	lr, #32
 8020df4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8020df8:	4282      	cmp	r2, r0
 8020dfa:	eb06 0c05 	add.w	ip, r6, r5
 8020dfe:	dc02      	bgt.n	8020e06 <__ieee754_sqrt+0xc2>
 8020e00:	d113      	bne.n	8020e2a <__ieee754_sqrt+0xe6>
 8020e02:	459c      	cmp	ip, r3
 8020e04:	d811      	bhi.n	8020e2a <__ieee754_sqrt+0xe6>
 8020e06:	f1bc 0f00 	cmp.w	ip, #0
 8020e0a:	eb0c 0506 	add.w	r5, ip, r6
 8020e0e:	da43      	bge.n	8020e98 <__ieee754_sqrt+0x154>
 8020e10:	2d00      	cmp	r5, #0
 8020e12:	db41      	blt.n	8020e98 <__ieee754_sqrt+0x154>
 8020e14:	f100 0801 	add.w	r8, r0, #1
 8020e18:	1a12      	subs	r2, r2, r0
 8020e1a:	459c      	cmp	ip, r3
 8020e1c:	bf88      	it	hi
 8020e1e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8020e22:	eba3 030c 	sub.w	r3, r3, ip
 8020e26:	4431      	add	r1, r6
 8020e28:	4640      	mov	r0, r8
 8020e2a:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8020e2e:	f1be 0e01 	subs.w	lr, lr, #1
 8020e32:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8020e36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020e3a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8020e3e:	d1db      	bne.n	8020df8 <__ieee754_sqrt+0xb4>
 8020e40:	4313      	orrs	r3, r2
 8020e42:	d006      	beq.n	8020e52 <__ieee754_sqrt+0x10e>
 8020e44:	1c48      	adds	r0, r1, #1
 8020e46:	bf13      	iteet	ne
 8020e48:	3101      	addne	r1, #1
 8020e4a:	3401      	addeq	r4, #1
 8020e4c:	4671      	moveq	r1, lr
 8020e4e:	f021 0101 	bicne.w	r1, r1, #1
 8020e52:	1063      	asrs	r3, r4, #1
 8020e54:	0849      	lsrs	r1, r1, #1
 8020e56:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8020e5a:	07e2      	lsls	r2, r4, #31
 8020e5c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8020e60:	bf48      	it	mi
 8020e62:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8020e66:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8020e6a:	460e      	mov	r6, r1
 8020e6c:	e783      	b.n	8020d76 <__ieee754_sqrt+0x32>
 8020e6e:	0ada      	lsrs	r2, r3, #11
 8020e70:	3815      	subs	r0, #21
 8020e72:	055b      	lsls	r3, r3, #21
 8020e74:	2a00      	cmp	r2, #0
 8020e76:	d0fa      	beq.n	8020e6e <__ieee754_sqrt+0x12a>
 8020e78:	02d5      	lsls	r5, r2, #11
 8020e7a:	d50a      	bpl.n	8020e92 <__ieee754_sqrt+0x14e>
 8020e7c:	f1c1 0420 	rsb	r4, r1, #32
 8020e80:	fa23 f404 	lsr.w	r4, r3, r4
 8020e84:	1e4d      	subs	r5, r1, #1
 8020e86:	408b      	lsls	r3, r1
 8020e88:	4322      	orrs	r2, r4
 8020e8a:	1b41      	subs	r1, r0, r5
 8020e8c:	e78a      	b.n	8020da4 <__ieee754_sqrt+0x60>
 8020e8e:	4608      	mov	r0, r1
 8020e90:	e7f0      	b.n	8020e74 <__ieee754_sqrt+0x130>
 8020e92:	0052      	lsls	r2, r2, #1
 8020e94:	3101      	adds	r1, #1
 8020e96:	e7ef      	b.n	8020e78 <__ieee754_sqrt+0x134>
 8020e98:	4680      	mov	r8, r0
 8020e9a:	e7bd      	b.n	8020e18 <__ieee754_sqrt+0xd4>
 8020e9c:	7ff00000 	.word	0x7ff00000

08020ea0 <with_errno>:
 8020ea0:	b570      	push	{r4, r5, r6, lr}
 8020ea2:	4604      	mov	r4, r0
 8020ea4:	460d      	mov	r5, r1
 8020ea6:	4616      	mov	r6, r2
 8020ea8:	f000 f8b0 	bl	802100c <__errno>
 8020eac:	4629      	mov	r1, r5
 8020eae:	6006      	str	r6, [r0, #0]
 8020eb0:	4620      	mov	r0, r4
 8020eb2:	bd70      	pop	{r4, r5, r6, pc}

08020eb4 <xflow>:
 8020eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020eb6:	4615      	mov	r5, r2
 8020eb8:	461c      	mov	r4, r3
 8020eba:	b180      	cbz	r0, 8020ede <xflow+0x2a>
 8020ebc:	4610      	mov	r0, r2
 8020ebe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020ec2:	e9cd 0100 	strd	r0, r1, [sp]
 8020ec6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020eca:	4628      	mov	r0, r5
 8020ecc:	4621      	mov	r1, r4
 8020ece:	f7df fb17 	bl	8000500 <__aeabi_dmul>
 8020ed2:	2222      	movs	r2, #34	; 0x22
 8020ed4:	b003      	add	sp, #12
 8020ed6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020eda:	f7ff bfe1 	b.w	8020ea0 <with_errno>
 8020ede:	4610      	mov	r0, r2
 8020ee0:	4619      	mov	r1, r3
 8020ee2:	e7ee      	b.n	8020ec2 <xflow+0xe>

08020ee4 <__math_uflow>:
 8020ee4:	2200      	movs	r2, #0
 8020ee6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8020eea:	f7ff bfe3 	b.w	8020eb4 <xflow>

08020eee <__math_oflow>:
 8020eee:	2200      	movs	r2, #0
 8020ef0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8020ef4:	f7ff bfde 	b.w	8020eb4 <xflow>

08020ef8 <fabs>:
 8020ef8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020efc:	4770      	bx	lr

08020efe <finite>:
 8020efe:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8020f02:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8020f06:	0fc0      	lsrs	r0, r0, #31
 8020f08:	4770      	bx	lr
 8020f0a:	0000      	movs	r0, r0
 8020f0c:	0000      	movs	r0, r0
	...

08020f10 <scalbn>:
 8020f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f12:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8020f16:	4604      	mov	r4, r0
 8020f18:	460d      	mov	r5, r1
 8020f1a:	4617      	mov	r7, r2
 8020f1c:	460b      	mov	r3, r1
 8020f1e:	b996      	cbnz	r6, 8020f46 <scalbn+0x36>
 8020f20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8020f24:	4303      	orrs	r3, r0
 8020f26:	d039      	beq.n	8020f9c <scalbn+0x8c>
 8020f28:	4b33      	ldr	r3, [pc, #204]	; (8020ff8 <scalbn+0xe8>)
 8020f2a:	2200      	movs	r2, #0
 8020f2c:	f7df fae8 	bl	8000500 <__aeabi_dmul>
 8020f30:	4b32      	ldr	r3, [pc, #200]	; (8020ffc <scalbn+0xec>)
 8020f32:	429f      	cmp	r7, r3
 8020f34:	4604      	mov	r4, r0
 8020f36:	460d      	mov	r5, r1
 8020f38:	da0f      	bge.n	8020f5a <scalbn+0x4a>
 8020f3a:	a32b      	add	r3, pc, #172	; (adr r3, 8020fe8 <scalbn+0xd8>)
 8020f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f40:	f7df fade 	bl	8000500 <__aeabi_dmul>
 8020f44:	e006      	b.n	8020f54 <scalbn+0x44>
 8020f46:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8020f4a:	4296      	cmp	r6, r2
 8020f4c:	d10a      	bne.n	8020f64 <scalbn+0x54>
 8020f4e:	4602      	mov	r2, r0
 8020f50:	f7df f920 	bl	8000194 <__adddf3>
 8020f54:	4604      	mov	r4, r0
 8020f56:	460d      	mov	r5, r1
 8020f58:	e020      	b.n	8020f9c <scalbn+0x8c>
 8020f5a:	460b      	mov	r3, r1
 8020f5c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8020f60:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8020f64:	19b9      	adds	r1, r7, r6
 8020f66:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8020f6a:	4291      	cmp	r1, r2
 8020f6c:	dd0e      	ble.n	8020f8c <scalbn+0x7c>
 8020f6e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8020f72:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8020f76:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8020f7a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8020f7e:	a31c      	add	r3, pc, #112	; (adr r3, 8020ff0 <scalbn+0xe0>)
 8020f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f84:	481e      	ldr	r0, [pc, #120]	; (8021000 <scalbn+0xf0>)
 8020f86:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8020f8a:	e7d9      	b.n	8020f40 <scalbn+0x30>
 8020f8c:	2900      	cmp	r1, #0
 8020f8e:	dd08      	ble.n	8020fa2 <scalbn+0x92>
 8020f90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020f94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8020f98:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8020f9c:	4620      	mov	r0, r4
 8020f9e:	4629      	mov	r1, r5
 8020fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020fa2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8020fa6:	da12      	bge.n	8020fce <scalbn+0xbe>
 8020fa8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8020fac:	429f      	cmp	r7, r3
 8020fae:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8020fb2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8020fb6:	dcdc      	bgt.n	8020f72 <scalbn+0x62>
 8020fb8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8020fbc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8020fc0:	a309      	add	r3, pc, #36	; (adr r3, 8020fe8 <scalbn+0xd8>)
 8020fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fc6:	480f      	ldr	r0, [pc, #60]	; (8021004 <scalbn+0xf4>)
 8020fc8:	f041 011f 	orr.w	r1, r1, #31
 8020fcc:	e7b8      	b.n	8020f40 <scalbn+0x30>
 8020fce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020fd2:	3136      	adds	r1, #54	; 0x36
 8020fd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8020fd8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8020fdc:	4620      	mov	r0, r4
 8020fde:	4b0a      	ldr	r3, [pc, #40]	; (8021008 <scalbn+0xf8>)
 8020fe0:	4629      	mov	r1, r5
 8020fe2:	2200      	movs	r2, #0
 8020fe4:	e7ac      	b.n	8020f40 <scalbn+0x30>
 8020fe6:	bf00      	nop
 8020fe8:	c2f8f359 	.word	0xc2f8f359
 8020fec:	01a56e1f 	.word	0x01a56e1f
 8020ff0:	8800759c 	.word	0x8800759c
 8020ff4:	7e37e43c 	.word	0x7e37e43c
 8020ff8:	43500000 	.word	0x43500000
 8020ffc:	ffff3cb0 	.word	0xffff3cb0
 8021000:	8800759c 	.word	0x8800759c
 8021004:	c2f8f359 	.word	0xc2f8f359
 8021008:	3c900000 	.word	0x3c900000

0802100c <__errno>:
 802100c:	4b01      	ldr	r3, [pc, #4]	; (8021014 <__errno+0x8>)
 802100e:	6818      	ldr	r0, [r3, #0]
 8021010:	4770      	bx	lr
 8021012:	bf00      	nop
 8021014:	20000140 	.word	0x20000140

08021018 <__libc_init_array>:
 8021018:	b570      	push	{r4, r5, r6, lr}
 802101a:	4d0d      	ldr	r5, [pc, #52]	; (8021050 <__libc_init_array+0x38>)
 802101c:	4c0d      	ldr	r4, [pc, #52]	; (8021054 <__libc_init_array+0x3c>)
 802101e:	1b64      	subs	r4, r4, r5
 8021020:	10a4      	asrs	r4, r4, #2
 8021022:	2600      	movs	r6, #0
 8021024:	42a6      	cmp	r6, r4
 8021026:	d109      	bne.n	802103c <__libc_init_array+0x24>
 8021028:	4d0b      	ldr	r5, [pc, #44]	; (8021058 <__libc_init_array+0x40>)
 802102a:	4c0c      	ldr	r4, [pc, #48]	; (802105c <__libc_init_array+0x44>)
 802102c:	f000 f82e 	bl	802108c <_init>
 8021030:	1b64      	subs	r4, r4, r5
 8021032:	10a4      	asrs	r4, r4, #2
 8021034:	2600      	movs	r6, #0
 8021036:	42a6      	cmp	r6, r4
 8021038:	d105      	bne.n	8021046 <__libc_init_array+0x2e>
 802103a:	bd70      	pop	{r4, r5, r6, pc}
 802103c:	f855 3b04 	ldr.w	r3, [r5], #4
 8021040:	4798      	blx	r3
 8021042:	3601      	adds	r6, #1
 8021044:	e7ee      	b.n	8021024 <__libc_init_array+0xc>
 8021046:	f855 3b04 	ldr.w	r3, [r5], #4
 802104a:	4798      	blx	r3
 802104c:	3601      	adds	r6, #1
 802104e:	e7f2      	b.n	8021036 <__libc_init_array+0x1e>
 8021050:	080221e0 	.word	0x080221e0
 8021054:	080221e0 	.word	0x080221e0
 8021058:	080221e0 	.word	0x080221e0
 802105c:	080221e4 	.word	0x080221e4

08021060 <memcpy>:
 8021060:	440a      	add	r2, r1
 8021062:	4291      	cmp	r1, r2
 8021064:	f100 33ff 	add.w	r3, r0, #4294967295
 8021068:	d100      	bne.n	802106c <memcpy+0xc>
 802106a:	4770      	bx	lr
 802106c:	b510      	push	{r4, lr}
 802106e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021076:	4291      	cmp	r1, r2
 8021078:	d1f9      	bne.n	802106e <memcpy+0xe>
 802107a:	bd10      	pop	{r4, pc}

0802107c <memset>:
 802107c:	4402      	add	r2, r0
 802107e:	4603      	mov	r3, r0
 8021080:	4293      	cmp	r3, r2
 8021082:	d100      	bne.n	8021086 <memset+0xa>
 8021084:	4770      	bx	lr
 8021086:	f803 1b01 	strb.w	r1, [r3], #1
 802108a:	e7f9      	b.n	8021080 <memset+0x4>

0802108c <_init>:
 802108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802108e:	bf00      	nop
 8021090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021092:	bc08      	pop	{r3}
 8021094:	469e      	mov	lr, r3
 8021096:	4770      	bx	lr

08021098 <_fini>:
 8021098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802109a:	bf00      	nop
 802109c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802109e:	bc08      	pop	{r3}
 80210a0:	469e      	mov	lr, r3
 80210a2:	4770      	bx	lr
